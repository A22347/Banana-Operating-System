
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 ad 9a 00 00       	call   c0009acd <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 09 26 02 00       	call   c002262e <_init>
c0000025:	c3                   	ret    
c0000026:	bb b2 32 02 c0       	mov    ebx,0xc00232b2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb c0 32 02 c0    	cmp    ebx,0xc00232c0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 78 75 02 c0       	mov    eax,0xc0027578
c0000049:	3d 78 75 02 c0       	cmp    eax,0xc0027578
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 78 75 02 c0       	push   0xc0027578
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 78 75 02 c0       	mov    eax,0xc0027578
c0000075:	2d 78 75 02 c0       	sub    eax,0xc0027578
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 78 75 02 c0       	push   0xc0027578
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 00 77 02 c0 00 	cmp    BYTE PTR ds:0xc0027700,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb c8 32 02 c0       	mov    ebx,0xc00232c8
c00000bb:	81 eb c4 32 02 c0    	sub    ebx,0xc00232c4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be c4 32 02 c0       	mov    esi,0xc00232c4
c00000ca:	a1 04 77 02 c0       	mov    eax,ds:0xc0027704
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 04 77 02 c0       	mov    ds:0xc0027704,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 04 77 02 c0       	mov    eax,ds:0xc0027704
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 78 75 02 c0       	push   0xc0027578
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 00 77 02 c0 01 	mov    BYTE PTR ds:0xc0027700,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 08 77 02 c0       	push   0xc0027708
c000012c:	68 78 75 02 c0       	push   0xc0027578
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	0f 20 c0             	mov    eax,cr0
c00002c7:	0c 08                	or     al,0x8
c00002c9:	0f 22 c0             	mov    cr0,eax
c00002cc:	85 d2                	test   edx,edx
c00002ce:	75 11                	jne    c00002e1 <commonThreadSwitch.firstTime>
c00002d0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002d3:	e8 48 7a 01 00       	call   c0017d20 <changeTSS>
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	5a                   	pop    edx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	9d                   	popf   
c00002e0:	c3                   	ret    

c00002e1 <commonThreadSwitch.firstTime>:
c00002e1:	fa                   	cli    
c00002e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002e5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002ea:	60                   	pusha  
c00002eb:	e8 74 c7 00 00       	call   c000ca64 <mapVASFirstTime>
c00002f0:	61                   	popa   
c00002f1:	89 c4                	mov    esp,eax
c00002f3:	56                   	push   esi
c00002f4:	52                   	push   edx
c00002f5:	e8 26 7a 01 00       	call   c0017d20 <changeTSS>
c00002fa:	5a                   	pop    edx
c00002fb:	5e                   	pop    esi
c00002fc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000303:	5d                   	pop    ebp
c0000304:	5f                   	pop    edi
c0000305:	5e                   	pop    esi
c0000306:	59                   	pop    ecx
c0000307:	59                   	pop    ecx
c0000308:	5b                   	pop    ebx
c0000309:	58                   	pop    eax
c000030a:	81 c4 04 00 00 00    	add    esp,0x4
c0000310:	6a 02                	push   0x2
c0000312:	9d                   	popf   
c0000313:	52                   	push   edx
c0000314:	e8 ef 7e 01 00       	call   c0018208 <taskStartupFunction>
c0000319:	5a                   	pop    edx
c000031a:	50                   	push   eax
c000031b:	ff d2                	call   edx
c000031d:	e8 32 85 01 00       	call   c0018854 <taskReturned>
c0000322:	e9 fb ff ff ff       	jmp    c0000322 <commonThreadSwitch.firstTime+0x41>

c0000327 <asmQuickAcquireLock>:
c0000327:	55                   	push   ebp
c0000328:	89 e5                	mov    ebp,esp
c000032a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032d <asmQuickAcquireLock.retry>:
c000032d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000332:	72 02                	jb     c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000334:	fa                   	cli    
c0000335:	c3                   	ret    

c0000336 <asmQuickAcquireLock.spin_with_pause>:
c0000336:	f3 90                	pause  
c0000338:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000033e:	75 f6                	jne    c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000340:	e9 e8 ff ff ff       	jmp    c000032d <asmQuickAcquireLock.retry>

c0000345 <asmQuickReleaseLock>:
c0000345:	55                   	push   ebp
c0000346:	89 e5                	mov    ebp,esp
c0000348:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000034f:	5d                   	pop    ebp
c0000350:	c3                   	ret    

c0000351 <asmAcquireLock>:
c0000351:	55                   	push   ebp
c0000352:	89 e5                	mov    ebp,esp
c0000354:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000357 <asmAcquireLock.retry>:
c0000357:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000035c:	72 05                	jb     c0000363 <asmAcquireLock.spin_with_pause>
c000035e:	9c                   	pushf  
c000035f:	58                   	pop    eax
c0000360:	fa                   	cli    
c0000361:	5d                   	pop    ebp
c0000362:	c3                   	ret    

c0000363 <asmAcquireLock.spin_with_pause>:
c0000363:	f3 90                	pause  
c0000365:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000036b:	75 f6                	jne    c0000363 <asmAcquireLock.spin_with_pause>
c000036d:	e9 e5 ff ff ff       	jmp    c0000357 <asmAcquireLock.retry>

c0000372 <asmReleaseLock>:
c0000372:	55                   	push   ebp
c0000373:	89 e5                	mov    ebp,esp
c0000375:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000378:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000037b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000381:	52                   	push   edx
c0000382:	9d                   	popf   
c0000383:	5d                   	pop    ebp
c0000384:	c3                   	ret    

c0000385 <loadGDT>:
c0000385:	0f 01 15 50 7b 02 c0 	lgdtd  ds:0xc0027b50
c000038c:	66 b8 10 00          	mov    ax,0x10
c0000390:	66 8e d8             	mov    ds,ax
c0000393:	66 8e c0             	mov    es,ax
c0000396:	66 8e e0             	mov    fs,ax
c0000399:	66 8e e8             	mov    gs,ax
c000039c:	66 8e d0             	mov    ss,ax
c000039f:	e9 00 00 00 00       	jmp    c00003a4 <flush2>

c00003a4 <flush2>:
c00003a4:	c3                   	ret    

c00003a5 <isr0>:
c00003a5:	fa                   	cli    
c00003a6:	68 00 00 00 00       	push   0x0
c00003ab:	68 00 00 00 00       	push   0x0
c00003b0:	e9 44 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003b5 <isr1>:
c00003b5:	fa                   	cli    
c00003b6:	6a 00                	push   0x0
c00003b8:	6a 01                	push   0x1
c00003ba:	e9 3a 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003bf <isr2>:
c00003bf:	fa                   	cli    
c00003c0:	6a 00                	push   0x0
c00003c2:	6a 02                	push   0x2
c00003c4:	e9 30 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003c9 <isr3>:
c00003c9:	fa                   	cli    
c00003ca:	6a 00                	push   0x0
c00003cc:	6a 03                	push   0x3
c00003ce:	e9 26 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003d3 <isr4>:
c00003d3:	fa                   	cli    
c00003d4:	6a 00                	push   0x0
c00003d6:	6a 04                	push   0x4
c00003d8:	e9 1c 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003dd <isr5>:
c00003dd:	fa                   	cli    
c00003de:	6a 00                	push   0x0
c00003e0:	6a 05                	push   0x5
c00003e2:	e9 12 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003e7 <isr6>:
c00003e7:	fa                   	cli    
c00003e8:	6a 00                	push   0x0
c00003ea:	6a 06                	push   0x6
c00003ec:	e9 08 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003f1 <isr7>:
c00003f1:	fa                   	cli    
c00003f2:	6a 00                	push   0x0
c00003f4:	6a 07                	push   0x7
c00003f6:	e9 fe 00 00 00       	jmp    c00004f9 <int_common_stub>

c00003fb <isr8>:
c00003fb:	fa                   	cli    
c00003fc:	6a 08                	push   0x8
c00003fe:	e9 f6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000403 <isr9>:
c0000403:	fa                   	cli    
c0000404:	6a 00                	push   0x0
c0000406:	6a 09                	push   0x9
c0000408:	e9 ec 00 00 00       	jmp    c00004f9 <int_common_stub>

c000040d <isr10>:
c000040d:	fa                   	cli    
c000040e:	6a 0a                	push   0xa
c0000410:	e9 e4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000415 <isr11>:
c0000415:	fa                   	cli    
c0000416:	6a 0b                	push   0xb
c0000418:	e9 dc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000041d <isr12>:
c000041d:	fa                   	cli    
c000041e:	6a 0c                	push   0xc
c0000420:	e9 d4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000425 <isr13>:
c0000425:	fa                   	cli    
c0000426:	6a 0d                	push   0xd
c0000428:	e9 cc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000042d <isr14>:
c000042d:	fa                   	cli    
c000042e:	6a 0e                	push   0xe
c0000430:	e9 c4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000435 <isr15>:
c0000435:	fa                   	cli    
c0000436:	6a 00                	push   0x0
c0000438:	6a 0f                	push   0xf
c000043a:	e9 ba 00 00 00       	jmp    c00004f9 <int_common_stub>

c000043f <isr16>:
c000043f:	fa                   	cli    
c0000440:	6a 00                	push   0x0
c0000442:	6a 10                	push   0x10
c0000444:	e9 b0 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000449 <isr17>:
c0000449:	fa                   	cli    
c000044a:	6a 00                	push   0x0
c000044c:	6a 11                	push   0x11
c000044e:	e9 a6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000453 <isr18>:
c0000453:	fa                   	cli    
c0000454:	6a 00                	push   0x0
c0000456:	6a 12                	push   0x12
c0000458:	e9 9c 00 00 00       	jmp    c00004f9 <int_common_stub>

c000045d <irq3>:
c000045d:	fa                   	cli    
c000045e:	6a 00                	push   0x0
c0000460:	6a 23                	push   0x23
c0000462:	e9 92 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000467 <irq4>:
c0000467:	fa                   	cli    
c0000468:	6a 00                	push   0x0
c000046a:	6a 24                	push   0x24
c000046c:	e9 88 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000471 <irq5>:
c0000471:	fa                   	cli    
c0000472:	6a 00                	push   0x0
c0000474:	6a 25                	push   0x25
c0000476:	e9 7e 00 00 00       	jmp    c00004f9 <int_common_stub>

c000047b <irq6>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 26                	push   0x26
c0000480:	e9 74 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000485 <irq7>:
c0000485:	fa                   	cli    
c0000486:	6a 00                	push   0x0
c0000488:	6a 27                	push   0x27
c000048a:	e9 6a 00 00 00       	jmp    c00004f9 <int_common_stub>

c000048f <irq8>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 28                	push   0x28
c0000494:	e9 60 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000499 <irq9>:
c0000499:	fa                   	cli    
c000049a:	6a 00                	push   0x0
c000049c:	6a 29                	push   0x29
c000049e:	e9 56 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004a3 <irq10>:
c00004a3:	fa                   	cli    
c00004a4:	6a 00                	push   0x0
c00004a6:	6a 2a                	push   0x2a
c00004a8:	e9 4c 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004ad <irq11>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 2b                	push   0x2b
c00004b2:	e9 42 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004b7 <irq12>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 2c                	push   0x2c
c00004bc:	e9 38 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004c1 <irq13>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 2d                	push   0x2d
c00004c6:	e9 2e 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004cb <irq14>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 2e                	push   0x2e
c00004d0:	e9 24 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004d5 <irq15>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 2f                	push   0x2f
c00004da:	e9 1a 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004df <irq1>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 21                	push   0x21
c00004e4:	eb 13                	jmp    c00004f9 <int_common_stub>

c00004e6 <irq2>:
c00004e6:	fa                   	cli    
c00004e7:	6a 00                	push   0x0
c00004e9:	6a 22                	push   0x22
c00004eb:	eb 0c                	jmp    c00004f9 <int_common_stub>

c00004ed <isr96>:
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 60                	push   0x60
c00004f1:	fb                   	sti    
c00004f2:	eb 05                	jmp    c00004f9 <int_common_stub>

c00004f4 <irq0>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 20                	push   0x20

c00004f9 <int_common_stub>:
c00004f9:	60                   	pusha  
c00004fa:	1e                   	push   ds
c00004fb:	06                   	push   es
c00004fc:	0f a0                	push   fs
c00004fe:	0f a8                	push   gs
c0000500:	66 b8 10 00          	mov    ax,0x10
c0000504:	66 8e d8             	mov    ds,ax
c0000507:	66 8e c0             	mov    es,ax
c000050a:	66 8e e0             	mov    fs,ax
c000050d:	66 8e e8             	mov    gs,ax
c0000510:	54                   	push   esp
c0000511:	fc                   	cld    
c0000512:	e8 42 e5 00 00       	call   c000ea59 <int_handler>
c0000517:	81 c4 04 00 00 00    	add    esp,0x4
c000051d:	0f a9                	pop    gs
c000051f:	0f a1                	pop    fs
c0000521:	07                   	pop    es
c0000522:	1f                   	pop    ds
c0000523:	61                   	popa   
c0000524:	81 c4 08 00 00 00    	add    esp,0x8
c000052a:	cf                   	iret   

c000052b <irq16>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 30                	push   0x30
c0000530:	e9 c4 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000535 <irq17>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 31                	push   0x31
c000053a:	e9 ba ff ff ff       	jmp    c00004f9 <int_common_stub>

c000053f <irq18>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 32                	push   0x32
c0000544:	e9 b0 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000549 <irq19>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 33                	push   0x33
c000054e:	e9 a6 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000553 <irq20>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 34                	push   0x34
c0000558:	e9 9c ff ff ff       	jmp    c00004f9 <int_common_stub>

c000055d <irq21>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 35                	push   0x35
c0000562:	e9 92 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000567 <irq22>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 36                	push   0x36
c000056c:	e9 88 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000571 <irq23>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 37                	push   0x37
c0000576:	e9 7e ff ff ff       	jmp    c00004f9 <int_common_stub>

c000057b <memcpy>:
c000057b:	e9 7a 83 00 00       	jmp    c00088fa <__not_memcpy>

c0000580 <memcmp>:
c0000580:	56                   	push   esi
c0000581:	53                   	push   ebx
c0000582:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000058a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000058e:	85 f6                	test   esi,esi
c0000590:	74 1d                	je     c00005af <memcmp+0x2f>
c0000592:	8a 08                	mov    cl,BYTE PTR [eax]
c0000594:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000597:	38 cb                	cmp    bl,cl
c0000599:	75 19                	jne    c00005b4 <memcmp+0x34>
c000059b:	01 c6                	add    esi,eax
c000059d:	eb 0a                	jmp    c00005a9 <memcmp+0x29>
c000059f:	90                   	nop
c00005a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a5:	38 d9                	cmp    cl,bl
c00005a7:	75 0b                	jne    c00005b4 <memcmp+0x34>
c00005a9:	40                   	inc    eax
c00005aa:	42                   	inc    edx
c00005ab:	39 f0                	cmp    eax,esi
c00005ad:	75 f1                	jne    c00005a0 <memcmp+0x20>
c00005af:	31 c0                	xor    eax,eax
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    
c00005b4:	0f b6 c1             	movzx  eax,cl
c00005b7:	29 d8                	sub    eax,ebx
c00005b9:	5b                   	pop    ebx
c00005ba:	5e                   	pop    esi
c00005bb:	c3                   	ret    

c00005bc <memmove>:
c00005bc:	55                   	push   ebp
c00005bd:	57                   	push   edi
c00005be:	56                   	push   esi
c00005bf:	53                   	push   ebx
c00005c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005cc:	39 dd                	cmp    ebp,ebx
c00005ce:	0f 83 80 00 00 00    	jae    c0000654 <memmove+0x98>
c00005d4:	85 d2                	test   edx,edx
c00005d6:	74 74                	je     c000064c <memmove+0x90>
c00005d8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005db:	8d 75 04             	lea    esi,[ebp+0x4]
c00005de:	39 cd                	cmp    ebp,ecx
c00005e0:	0f 93 c1             	setae  cl
c00005e3:	39 f3                	cmp    ebx,esi
c00005e5:	0f 93 c0             	setae  al
c00005e8:	89 c6                	mov    esi,eax
c00005ea:	09 ce                	or     esi,ecx
c00005ec:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ef:	89 f0                	mov    eax,esi
c00005f1:	83 f9 0c             	cmp    ecx,0xc
c00005f4:	0f 97 c1             	seta   cl
c00005f7:	84 c8                	test   al,cl
c00005f9:	74 75                	je     c0000670 <memmove+0xb4>
c00005fb:	89 e9                	mov    ecx,ebp
c00005fd:	09 d9                	or     ecx,ebx
c00005ff:	83 e1 03             	and    ecx,0x3
c0000602:	75 6c                	jne    c0000670 <memmove+0xb4>
c0000604:	89 d7                	mov    edi,edx
c0000606:	89 d9                	mov    ecx,ebx
c0000608:	83 e7 fc             	and    edi,0xfffffffc
c000060b:	89 ee                	mov    esi,ebp
c000060d:	01 df                	add    edi,ebx
c000060f:	90                   	nop
c0000610:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000612:	83 c6 04             	add    esi,0x4
c0000615:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000618:	83 c1 04             	add    ecx,0x4
c000061b:	39 f9                	cmp    ecx,edi
c000061d:	75 f1                	jne    c0000610 <memmove+0x54>
c000061f:	89 d1                	mov    ecx,edx
c0000621:	89 d7                	mov    edi,edx
c0000623:	83 e1 fc             	and    ecx,0xfffffffc
c0000626:	29 cf                	sub    edi,ecx
c0000628:	01 cb                	add    ebx,ecx
c000062a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000062e:	39 ca                	cmp    edx,ecx
c0000630:	74 1a                	je     c000064c <memmove+0x90>
c0000632:	8a 03                	mov    al,BYTE PTR [ebx]
c0000634:	83 ff 01             	cmp    edi,0x1
c0000637:	88 06                	mov    BYTE PTR [esi],al
c0000639:	74 11                	je     c000064c <memmove+0x90>
c000063b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000063e:	83 ff 02             	cmp    edi,0x2
c0000641:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000644:	74 06                	je     c000064c <memmove+0x90>
c0000646:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000649:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000064c:	5b                   	pop    ebx
c000064d:	89 e8                	mov    eax,ebp
c000064f:	5e                   	pop    esi
c0000650:	5f                   	pop    edi
c0000651:	5d                   	pop    ebp
c0000652:	c3                   	ret    
c0000653:	90                   	nop
c0000654:	76 f6                	jbe    c000064c <memmove+0x90>
c0000656:	85 d2                	test   edx,edx
c0000658:	74 f2                	je     c000064c <memmove+0x90>
c000065a:	4b                   	dec    ebx
c000065b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000065e:	66 90                	xchg   ax,ax
c0000660:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000663:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000666:	4a                   	dec    edx
c0000667:	75 f7                	jne    c0000660 <memmove+0xa4>
c0000669:	5b                   	pop    ebx
c000066a:	89 e8                	mov    eax,ebp
c000066c:	5e                   	pop    esi
c000066d:	5f                   	pop    edi
c000066e:	5d                   	pop    ebp
c000066f:	c3                   	ret    
c0000670:	01 ea                	add    edx,ebp
c0000672:	89 e9                	mov    ecx,ebp
c0000674:	8a 03                	mov    al,BYTE PTR [ebx]
c0000676:	41                   	inc    ecx
c0000677:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000067a:	43                   	inc    ebx
c000067b:	39 d1                	cmp    ecx,edx
c000067d:	75 f5                	jne    c0000674 <memmove+0xb8>
c000067f:	eb cb                	jmp    c000064c <memmove+0x90>
c0000681:	8d 76 00             	lea    esi,[esi+0x0]

c0000684 <memset>:
c0000684:	57                   	push   edi
c0000685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000689:	85 c9                	test   ecx,ecx
c000068b:	74 0b                	je     c0000698 <memset+0x14>
c000068d:	fc                   	cld    
c000068e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000692:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000696:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000069c:	5f                   	pop    edi
c000069d:	c3                   	ret    
c000069e:	66 90                	xchg   ax,ax

c00006a0 <strlen>:
c00006a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006a4:	31 c0                	xor    eax,eax
c00006a6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a9:	74 09                	je     c00006b4 <strlen+0x14>
c00006ab:	90                   	nop
c00006ac:	40                   	inc    eax
c00006ad:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b1:	75 f9                	jne    c00006ac <strlen+0xc>
c00006b3:	c3                   	ret    
c00006b4:	c3                   	ret    
c00006b5:	8d 76 00             	lea    esi,[esi+0x0]

c00006b8 <strpbrk>:
c00006b8:	57                   	push   edi
c00006b9:	56                   	push   esi
c00006ba:	53                   	push   ebx
c00006bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006c5:	84 db                	test   bl,bl
c00006c7:	74 21                	je     c00006ea <strpbrk+0x32>
c00006c9:	8a 07                	mov    al,BYTE PTR [edi]
c00006cb:	84 c0                	test   al,al
c00006cd:	74 14                	je     c00006e3 <strpbrk+0x2b>
c00006cf:	38 d8                	cmp    al,bl
c00006d1:	74 19                	je     c00006ec <strpbrk+0x34>
c00006d3:	89 fa                	mov    edx,edi
c00006d5:	eb 05                	jmp    c00006dc <strpbrk+0x24>
c00006d7:	90                   	nop
c00006d8:	38 d9                	cmp    cl,bl
c00006da:	74 10                	je     c00006ec <strpbrk+0x34>
c00006dc:	42                   	inc    edx
c00006dd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006df:	84 c9                	test   cl,cl
c00006e1:	75 f5                	jne    c00006d8 <strpbrk+0x20>
c00006e3:	46                   	inc    esi
c00006e4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006e6:	84 db                	test   bl,bl
c00006e8:	75 e1                	jne    c00006cb <strpbrk+0x13>
c00006ea:	31 f6                	xor    esi,esi
c00006ec:	89 f0                	mov    eax,esi
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	5f                   	pop    edi
c00006f1:	c3                   	ret    
c00006f2:	66 90                	xchg   ax,ax

c00006f4 <strtok>:
c00006f4:	56                   	push   esi
c00006f5:	53                   	push   ebx
c00006f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006fe:	85 db                	test   ebx,ebx
c0000700:	75 07                	jne    c0000709 <strtok+0x15>
c0000702:	eb 2c                	jmp    c0000730 <strtok+0x3c>
c0000704:	43                   	inc    ebx
c0000705:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000709:	56                   	push   esi
c000070a:	53                   	push   ebx
c000070b:	e8 a8 ff ff ff       	call   c00006b8 <strpbrk>
c0000710:	5a                   	pop    edx
c0000711:	a3 20 77 02 c0       	mov    ds:0xc0027720,eax
c0000716:	59                   	pop    ecx
c0000717:	39 d8                	cmp    eax,ebx
c0000719:	74 e9                	je     c0000704 <strtok+0x10>
c000071b:	85 c0                	test   eax,eax
c000071d:	74 1b                	je     c000073a <strtok+0x46>
c000071f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000722:	8d 50 01             	lea    edx,[eax+0x1]
c0000725:	89 d8                	mov    eax,ebx
c0000727:	89 15 20 77 02 c0    	mov    DWORD PTR ds:0xc0027720,edx
c000072d:	5b                   	pop    ebx
c000072e:	5e                   	pop    esi
c000072f:	c3                   	ret    
c0000730:	8b 1d 20 77 02 c0    	mov    ebx,DWORD PTR ds:0xc0027720
c0000736:	85 db                	test   ebx,ebx
c0000738:	75 cf                	jne    c0000709 <strtok+0x15>
c000073a:	31 c0                	xor    eax,eax
c000073c:	5b                   	pop    ebx
c000073d:	5e                   	pop    esi
c000073e:	c3                   	ret    
c000073f:	90                   	nop

c0000740 <strcpy>:
c0000740:	53                   	push   ebx
c0000741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000749:	89 c3                	mov    ebx,eax
c000074b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000074d:	84 d2                	test   dl,dl
c000074f:	74 0d                	je     c000075e <strcpy+0x1e>
c0000751:	8d 76 00             	lea    esi,[esi+0x0]
c0000754:	88 13                	mov    BYTE PTR [ebx],dl
c0000756:	41                   	inc    ecx
c0000757:	43                   	inc    ebx
c0000758:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075a:	84 d2                	test   dl,dl
c000075c:	75 f6                	jne    c0000754 <strcpy+0x14>
c000075e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000761:	5b                   	pop    ebx
c0000762:	c3                   	ret    
c0000763:	90                   	nop

c0000764 <strncpy>:
c0000764:	55                   	push   ebp
c0000765:	57                   	push   edi
c0000766:	56                   	push   esi
c0000767:	53                   	push   ebx
c0000768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000076c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000770:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000774:	85 c0                	test   eax,eax
c0000776:	74 39                	je     c00007b1 <strncpy+0x4d>
c0000778:	8a 1e                	mov    bl,BYTE PTR [esi]
c000077a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000077d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000780:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000783:	84 db                	test   bl,bl
c0000785:	74 31                	je     c00007b8 <strncpy+0x54>
c0000787:	85 c9                	test   ecx,ecx
c0000789:	74 26                	je     c00007b1 <strncpy+0x4d>
c000078b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000078e:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000791:	8d 55 02             	lea    edx,[ebp+0x2]
c0000794:	8d 46 02             	lea    eax,[esi+0x2]
c0000797:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000079a:	84 db                	test   bl,bl
c000079c:	75 0f                	jne    c00007ad <strncpy+0x49>
c000079e:	eb 18                	jmp    c00007b8 <strncpy+0x54>
c00007a0:	40                   	inc    eax
c00007a1:	42                   	inc    edx
c00007a2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007a5:	49                   	dec    ecx
c00007a6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a9:	84 db                	test   bl,bl
c00007ab:	74 0b                	je     c00007b8 <strncpy+0x54>
c00007ad:	85 c9                	test   ecx,ecx
c00007af:	75 ef                	jne    c00007a0 <strncpy+0x3c>
c00007b1:	5b                   	pop    ebx
c00007b2:	89 e8                	mov    eax,ebp
c00007b4:	5e                   	pop    esi
c00007b5:	5f                   	pop    edi
c00007b6:	5d                   	pop    ebp
c00007b7:	c3                   	ret    
c00007b8:	85 c9                	test   ecx,ecx
c00007ba:	74 f5                	je     c00007b1 <strncpy+0x4d>
c00007bc:	fc                   	cld    
c00007bd:	31 c0                	xor    eax,eax
c00007bf:	89 d7                	mov    edi,edx
c00007c1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007c3:	89 e8                	mov    eax,ebp
c00007c5:	5b                   	pop    ebx
c00007c6:	5e                   	pop    esi
c00007c7:	5f                   	pop    edi
c00007c8:	5d                   	pop    ebp
c00007c9:	c3                   	ret    
c00007ca:	66 90                	xchg   ax,ax

c00007cc <strcmp>:
c00007cc:	56                   	push   esi
c00007cd:	53                   	push   ebx
c00007ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007db:	38 d1                	cmp    cl,dl
c00007dd:	75 1d                	jne    c00007fc <strcmp+0x30>
c00007df:	84 c9                	test   cl,cl
c00007e1:	74 21                	je     c0000804 <strcmp+0x38>
c00007e3:	b8 01 00 00 00       	mov    eax,0x1
c00007e8:	eb 07                	jmp    c00007f1 <strcmp+0x25>
c00007ea:	66 90                	xchg   ax,ax
c00007ec:	40                   	inc    eax
c00007ed:	84 d2                	test   dl,dl
c00007ef:	74 13                	je     c0000804 <strcmp+0x38>
c00007f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007f4:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f8:	38 ca                	cmp    dl,cl
c00007fa:	74 f0                	je     c00007ec <strcmp+0x20>
c00007fc:	0f b6 c2             	movzx  eax,dl
c00007ff:	5b                   	pop    ebx
c0000800:	29 c8                	sub    eax,ecx
c0000802:	5e                   	pop    esi
c0000803:	c3                   	ret    
c0000804:	31 c0                	xor    eax,eax
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	c3                   	ret    
c0000809:	8d 76 00             	lea    esi,[esi+0x0]

c000080c <strchr>:
c000080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000810:	8a 10                	mov    dl,BYTE PTR [eax]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 15                	je     c000082b <strchr+0x1f>
c0000816:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000081a:	38 ca                	cmp    dl,cl
c000081c:	75 06                	jne    c0000824 <strchr+0x18>
c000081e:	eb 0e                	jmp    c000082e <strchr+0x22>
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 09                	je     c000082d <strchr+0x21>
c0000824:	40                   	inc    eax
c0000825:	8a 10                	mov    dl,BYTE PTR [eax]
c0000827:	84 d2                	test   dl,dl
c0000829:	75 f5                	jne    c0000820 <strchr+0x14>
c000082b:	31 c0                	xor    eax,eax
c000082d:	c3                   	ret    
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncmp>:
c0000830:	57                   	push   edi
c0000831:	56                   	push   esi
c0000832:	53                   	push   ebx
c0000833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000837:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083f:	85 ff                	test   edi,edi
c0000841:	74 28                	je     c000086b <strncmp+0x3b>
c0000843:	8a 16                	mov    dl,BYTE PTR [esi]
c0000845:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000848:	38 d1                	cmp    cl,dl
c000084a:	75 28                	jne    c0000874 <strncmp+0x44>
c000084c:	8d 46 01             	lea    eax,[esi+0x1]
c000084f:	84 c9                	test   cl,cl
c0000851:	74 18                	je     c000086b <strncmp+0x3b>
c0000853:	01 fe                	add    esi,edi
c0000855:	eb 0f                	jmp    c0000866 <strncmp+0x36>
c0000857:	90                   	nop
c0000858:	8a 10                	mov    dl,BYTE PTR [eax]
c000085a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000085d:	38 ca                	cmp    dl,cl
c000085f:	75 13                	jne    c0000874 <strncmp+0x44>
c0000861:	40                   	inc    eax
c0000862:	84 d2                	test   dl,dl
c0000864:	74 05                	je     c000086b <strncmp+0x3b>
c0000866:	43                   	inc    ebx
c0000867:	39 c6                	cmp    esi,eax
c0000869:	75 ed                	jne    c0000858 <strncmp+0x28>
c000086b:	5b                   	pop    ebx
c000086c:	31 c0                	xor    eax,eax
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    
c0000871:	8d 76 00             	lea    esi,[esi+0x0]
c0000874:	5b                   	pop    ebx
c0000875:	0f b6 c2             	movzx  eax,dl
c0000878:	5e                   	pop    esi
c0000879:	29 c8                	sub    eax,ecx
c000087b:	5f                   	pop    edi
c000087c:	c3                   	ret    
c000087d:	8d 76 00             	lea    esi,[esi+0x0]

c0000880 <strcat>:
c0000880:	56                   	push   esi
c0000881:	53                   	push   ebx
c0000882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000886:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000088a:	89 c3                	mov    ebx,eax
c000088c:	eb 04                	jmp    c0000892 <strcat+0x12>
c000088e:	66 90                	xchg   ax,ax
c0000890:	89 d3                	mov    ebx,edx
c0000892:	8d 53 01             	lea    edx,[ebx+0x1]
c0000895:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000899:	75 f5                	jne    c0000890 <strcat+0x10>
c000089b:	31 d2                	xor    edx,edx
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008a3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008a6:	42                   	inc    edx
c00008a7:	84 c9                	test   cl,cl
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	5e                   	pop    esi
c00008ad:	c3                   	ret    
c00008ae:	66 90                	xchg   ax,ax

c00008b0 <strncat>:
c00008b0:	56                   	push   esi
c00008b1:	53                   	push   ebx
c00008b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008be:	85 f6                	test   esi,esi
c00008c0:	74 1e                	je     c00008e0 <strncat+0x30>
c00008c2:	89 c2                	mov    edx,eax
c00008c4:	42                   	inc    edx
c00008c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c9:	75 f9                	jne    c00008c4 <strncat+0x14>
c00008cb:	01 ce                	add    esi,ecx
c00008cd:	eb 06                	jmp    c00008d5 <strncat+0x25>
c00008cf:	90                   	nop
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 10                	je     c00008e4 <strncat+0x34>
c00008d4:	42                   	inc    edx
c00008d5:	41                   	inc    ecx
c00008d6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008dc:	84 db                	test   bl,bl
c00008de:	75 f0                	jne    c00008d0 <strncat+0x20>
c00008e0:	5b                   	pop    ebx
c00008e1:	5e                   	pop    esi
c00008e2:	c3                   	ret    
c00008e3:	90                   	nop
c00008e4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008e7:	5b                   	pop    ebx
c00008e8:	5e                   	pop    esi
c00008e9:	c3                   	ret    
c00008ea:	66 90                	xchg   ax,ax

c00008ec <strstr>:
c00008ec:	57                   	push   edi
c00008ed:	56                   	push   esi
c00008ee:	53                   	push   ebx
c00008ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008f7:	57                   	push   edi
c00008f8:	e8 a3 fd ff ff       	call   c00006a0 <strlen>
c00008fd:	59                   	pop    ecx
c00008fe:	85 c0                	test   eax,eax
c0000900:	74 2a                	je     c000092c <strstr+0x40>
c0000902:	89 c6                	mov    esi,eax
c0000904:	eb 12                	jmp    c0000918 <strstr+0x2c>
c0000906:	66 90                	xchg   ax,ax
c0000908:	56                   	push   esi
c0000909:	57                   	push   edi
c000090a:	53                   	push   ebx
c000090b:	e8 70 fc ff ff       	call   c0000580 <memcmp>
c0000910:	83 c4 0c             	add    esp,0xc
c0000913:	85 c0                	test   eax,eax
c0000915:	74 15                	je     c000092c <strstr+0x40>
c0000917:	43                   	inc    ebx
c0000918:	53                   	push   ebx
c0000919:	e8 82 fd ff ff       	call   c00006a0 <strlen>
c000091e:	5a                   	pop    edx
c000091f:	39 f0                	cmp    eax,esi
c0000921:	73 e5                	jae    c0000908 <strstr+0x1c>
c0000923:	5b                   	pop    ebx
c0000924:	31 c0                	xor    eax,eax
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d 76 00             	lea    esi,[esi+0x0]
c000092c:	89 d8                	mov    eax,ebx
c000092e:	5b                   	pop    ebx
c000092f:	5e                   	pop    esi
c0000930:	5f                   	pop    edi
c0000931:	c3                   	ret    
c0000932:	66 90                	xchg   ax,ax

c0000934 <toupper>:
c0000934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000938:	0f b6 d0             	movzx  edx,al
c000093b:	f6 82 e0 32 02 c0 02 	test   BYTE PTR [edx-0x3ffdcd20],0x2
c0000942:	74 03                	je     c0000947 <toupper+0x13>
c0000944:	83 e8 20             	sub    eax,0x20
c0000947:	c3                   	ret    

c0000948 <tolower>:
c0000948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000094c:	0f b6 d0             	movzx  edx,al
c000094f:	f6 82 e0 32 02 c0 01 	test   BYTE PTR [edx-0x3ffdcd20],0x1
c0000956:	74 03                	je     c000095b <tolower+0x13>
c0000958:	83 c0 20             	add    eax,0x20
c000095b:	c3                   	ret    

c000095c <simple_strtoul>:
c000095c:	55                   	push   ebp
c000095d:	57                   	push   edi
c000095e:	56                   	push   esi
c000095f:	53                   	push   ebx
c0000960:	83 ec 08             	sub    esp,0x8
c0000963:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000967:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000096b:	90                   	nop
c000096c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000096f:	f6 82 e0 32 02 c0 08 	test   BYTE PTR [edx-0x3ffdcd20],0x8
c0000976:	75 05                	jne    c000097d <simple_strtoul+0x21>
c0000978:	80 fa 09             	cmp    dl,0x9
c000097b:	75 03                	jne    c0000980 <simple_strtoul+0x24>
c000097d:	41                   	inc    ecx
c000097e:	eb ec                	jmp    c000096c <simple_strtoul+0x10>
c0000980:	80 fa 2d             	cmp    dl,0x2d
c0000983:	0f 84 1b 01 00 00    	je     c0000aa4 <simple_strtoul+0x148>
c0000989:	80 fa 2b             	cmp    dl,0x2b
c000098c:	0f 84 c2 00 00 00    	je     c0000a54 <simple_strtoul+0xf8>
c0000992:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000099a:	85 f6                	test   esi,esi
c000099c:	0f 85 c3 00 00 00    	jne    c0000a65 <simple_strtoul+0x109>
c00009a2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a4:	80 fa 30             	cmp    dl,0x30
c00009a7:	0f 84 47 01 00 00    	je     c0000af4 <simple_strtoul+0x198>
c00009ad:	be 0a 00 00 00       	mov    esi,0xa
c00009b2:	84 d2                	test   dl,dl
c00009b4:	0f 84 6f 01 00 00    	je     c0000b29 <simple_strtoul+0x1cd>
c00009ba:	31 ed                	xor    ebp,ebp
c00009bc:	31 ff                	xor    edi,edi
c00009be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009c5:	eb 2b                	jmp    c00009f2 <simple_strtoul+0x96>
c00009c7:	90                   	nop
c00009c8:	83 eb 30             	sub    ebx,0x30
c00009cb:	39 f3                	cmp    ebx,esi
c00009cd:	73 4d                	jae    c0000a1c <simple_strtoul+0xc0>
c00009cf:	31 d2                	xor    edx,edx
c00009d1:	89 d8                	mov    eax,ebx
c00009d3:	f7 d0                	not    eax
c00009d5:	f7 f6                	div    esi
c00009d7:	39 f8                	cmp    eax,edi
c00009d9:	0f 82 b1 00 00 00    	jb     c0000a90 <simple_strtoul+0x134>
c00009df:	0f af fe             	imul   edi,esi
c00009e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e9:	01 df                	add    edi,ebx
c00009eb:	41                   	inc    ecx
c00009ec:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009ee:	84 d2                	test   dl,dl
c00009f0:	74 2a                	je     c0000a1c <simple_strtoul+0xc0>
c00009f2:	0f b6 da             	movzx  ebx,dl
c00009f5:	f6 83 e0 32 02 c0 04 	test   BYTE PTR [ebx-0x3ffdcd20],0x4
c00009fc:	75 ca                	jne    c00009c8 <simple_strtoul+0x6c>
c00009fe:	0f be d2             	movsx  edx,dl
c0000a01:	52                   	push   edx
c0000a02:	e8 2d ff ff ff       	call   c0000934 <toupper>
c0000a07:	5b                   	pop    ebx
c0000a08:	0f b6 d0             	movzx  edx,al
c0000a0b:	f6 82 e0 32 02 c0 01 	test   BYTE PTR [edx-0x3ffdcd20],0x1
c0000a12:	74 08                	je     c0000a1c <simple_strtoul+0xc0>
c0000a14:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a17:	39 f3                	cmp    ebx,esi
c0000a19:	72 b4                	jb     c00009cf <simple_strtoul+0x73>
c0000a1b:	90                   	nop
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	85 c0                	test   eax,eax
c0000a22:	74 14                	je     c0000a38 <simple_strtoul+0xdc>
c0000a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a27:	09 f8                	or     eax,edi
c0000a29:	75 71                	jne    c0000a9c <simple_strtoul+0x140>
c0000a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a33:	31 ff                	xor    edi,edi
c0000a35:	89 30                	mov    DWORD PTR [eax],esi
c0000a37:	90                   	nop
c0000a38:	4d                   	dec    ebp
c0000a39:	75 05                	jne    c0000a40 <simple_strtoul+0xe4>
c0000a3b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a40:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a45:	75 02                	jne    c0000a49 <simple_strtoul+0xed>
c0000a47:	f7 df                	neg    edi
c0000a49:	83 c4 08             	add    esp,0x8
c0000a4c:	89 f8                	mov    eax,edi
c0000a4e:	5b                   	pop    ebx
c0000a4f:	5e                   	pop    esi
c0000a50:	5f                   	pop    edi
c0000a51:	5d                   	pop    ebp
c0000a52:	c3                   	ret    
c0000a53:	90                   	nop
c0000a54:	41                   	inc    ecx
c0000a55:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a5d:	85 f6                	test   esi,esi
c0000a5f:	0f 84 3d ff ff ff    	je     c00009a2 <simple_strtoul+0x46>
c0000a65:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a68:	83 f8 22             	cmp    eax,0x22
c0000a6b:	77 6a                	ja     c0000ad7 <simple_strtoul+0x17b>
c0000a6d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a6f:	83 fe 08             	cmp    esi,0x8
c0000a72:	0f 84 a2 00 00 00    	je     c0000b1a <simple_strtoul+0x1be>
c0000a78:	83 fe 10             	cmp    esi,0x10
c0000a7b:	0f 85 31 ff ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000a81:	80 fa 30             	cmp    dl,0x30
c0000a84:	74 2c                	je     c0000ab2 <simple_strtoul+0x156>
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	e9 22 ff ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000a90:	bd 01 00 00 00       	mov    ebp,0x1
c0000a95:	31 ff                	xor    edi,edi
c0000a97:	e9 4f ff ff ff       	jmp    c00009eb <simple_strtoul+0x8f>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	89 08                	mov    DWORD PTR [eax],ecx
c0000aa2:	eb 94                	jmp    c0000a38 <simple_strtoul+0xdc>
c0000aa4:	41                   	inc    ecx
c0000aa5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aad:	e9 e8 fe ff ff       	jmp    c000099a <simple_strtoul+0x3e>
c0000ab2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab9:	50                   	push   eax
c0000aba:	e8 89 fe ff ff       	call   c0000948 <tolower>
c0000abf:	5e                   	pop    esi
c0000ac0:	83 f8 78             	cmp    eax,0x78
c0000ac3:	0f 84 84 00 00 00    	je     c0000b4d <simple_strtoul+0x1f1>
c0000ac9:	41                   	inc    ecx
c0000aca:	be 10 00 00 00       	mov    esi,0x10
c0000acf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ad2:	e9 db fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000ad7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000adb:	85 ff                	test   edi,edi
c0000add:	74 5c                	je     c0000b3b <simple_strtoul+0x1df>
c0000adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ae3:	85 c9                	test   ecx,ecx
c0000ae5:	75 4e                	jne    c0000b35 <simple_strtoul+0x1d9>
c0000ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aed:	31 ff                	xor    edi,edi
c0000aef:	e9 4c ff ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000af4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af8:	88 04 24             	mov    BYTE PTR [esp],al
c0000afb:	50                   	push   eax
c0000afc:	e8 47 fe ff ff       	call   c0000948 <tolower>
c0000b01:	5d                   	pop    ebp
c0000b02:	83 f8 78             	cmp    eax,0x78
c0000b05:	74 3b                	je     c0000b42 <simple_strtoul+0x1e6>
c0000b07:	41                   	inc    ecx
c0000b08:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b0b:	80 fa 30             	cmp    dl,0x30
c0000b0e:	74 13                	je     c0000b23 <simple_strtoul+0x1c7>
c0000b10:	be 08 00 00 00       	mov    esi,0x8
c0000b15:	e9 98 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000b1a:	80 fa 30             	cmp    dl,0x30
c0000b1d:	0f 85 8f fe ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000b23:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b26:	41                   	inc    ecx
c0000b27:	eb e7                	jmp    c0000b10 <simple_strtoul+0x1b4>
c0000b29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b2d:	85 d2                	test   edx,edx
c0000b2f:	74 0a                	je     c0000b3b <simple_strtoul+0x1df>
c0000b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b39:	89 30                	mov    DWORD PTR [eax],esi
c0000b3b:	31 ff                	xor    edi,edi
c0000b3d:	e9 fe fe ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000b42:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b45:	83 c1 02             	add    ecx,0x2
c0000b48:	e9 34 ff ff ff       	jmp    c0000a81 <simple_strtoul+0x125>
c0000b4d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b50:	be 10 00 00 00       	mov    esi,0x10
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 55 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>

c0000b5d <largebin_index>:
c0000b5d:	89 c2                	mov    edx,eax
c0000b5f:	c1 ea 08             	shr    edx,0x8
c0000b62:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b68:	77 10                	ja     c0000b7a <largebin_index+0x1d>
c0000b6a:	0f bd d2             	bsr    edx,edx
c0000b6d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b70:	d3 e8                	shr    eax,cl
c0000b72:	83 e0 03             	and    eax,0x3
c0000b75:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b79:	c3                   	ret    
c0000b7a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b7f:	c3                   	ret    

c0000b80 <malloc_init_state>:
c0000b80:	53                   	push   ebx
c0000b81:	8d 50 34             	lea    edx,[eax+0x34]
c0000b84:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b8a:	89 d1                	mov    ecx,edx
c0000b8c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b8f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b92:	83 c2 08             	add    edx,0x8
c0000b95:	39 da                	cmp    edx,ebx
c0000b97:	75 f3                	jne    c0000b8c <malloc_init_state+0xc>
c0000b99:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b9b:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ba5:	83 e2 03             	and    edx,0x3
c0000ba8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bb2:	83 ca 48             	or     edx,0x48
c0000bb5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bbf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bd0:	89 10                	mov    DWORD PTR [eax],edx
c0000bd2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bd5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bdf:	5b                   	pop    ebx
c0000be0:	c3                   	ret    

c0000be1 <malloc_consolidate>:
c0000be1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000be3:	85 d2                	test   edx,edx
c0000be5:	0f 84 d8 00 00 00    	je     c0000cc3 <malloc_consolidate+0xe2>
c0000beb:	55                   	push   ebp
c0000bec:	83 e2 fd             	and    edx,0xfffffffd
c0000bef:	57                   	push   edi
c0000bf0:	89 c5                	mov    ebp,eax
c0000bf2:	56                   	push   esi
c0000bf3:	8d 78 34             	lea    edi,[eax+0x34]
c0000bf6:	53                   	push   ebx
c0000bf7:	83 ec 10             	sub    esp,0x10
c0000bfa:	89 10                	mov    DWORD PTR [eax],edx
c0000bfc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c00:	c1 ea 03             	shr    edx,0x3
c0000c03:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c0b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c0e:	85 d2                	test   edx,edx
c0000c10:	0f 84 98 00 00 00    	je     c0000cae <malloc_consolidate+0xcd>
c0000c16:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c1d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c20:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c27:	89 f9                	mov    ecx,edi
c0000c29:	83 e1 fe             	and    ecx,0xfffffffe
c0000c2c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c2f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c32:	83 e3 fc             	and    ebx,0xfffffffc
c0000c35:	83 e7 01             	and    edi,0x1
c0000c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c3b:	75 14                	jne    c0000c51 <malloc_consolidate+0x70>
c0000c3d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c3f:	29 fa                	sub    edx,edi
c0000c41:	01 f9                	add    ecx,edi
c0000c43:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c46:	89 fb                	mov    ebx,edi
c0000c48:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c4b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c4e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c51:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c54:	74 40                	je     c0000c96 <malloc_consolidate+0xb5>
c0000c56:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c59:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c5c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c60:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c63:	83 e7 01             	and    edi,0x1
c0000c66:	75 0e                	jne    c0000c76 <malloc_consolidate+0x95>
c0000c68:	01 d9                	add    ecx,ebx
c0000c6a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c6d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c70:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c73:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c76:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c79:	89 ce                	mov    esi,ecx
c0000c7b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c7e:	83 ce 01             	or     esi,0x1
c0000c81:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c84:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c87:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c8a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c8e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c91:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c94:	eb 0c                	jmp    c0000ca2 <malloc_consolidate+0xc1>
c0000c96:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c99:	83 c9 01             	or     ecx,0x1
c0000c9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ca6:	85 d2                	test   edx,edx
c0000ca8:	0f 85 6f ff ff ff    	jne    c0000c1d <malloc_consolidate+0x3c>
c0000cae:	83 c5 04             	add    ebp,0x4
c0000cb1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cb5:	0f 85 50 ff ff ff    	jne    c0000c0b <malloc_consolidate+0x2a>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	5d                   	pop    ebp
c0000cc2:	c3                   	ret    
c0000cc3:	e9 b8 fe ff ff       	jmp    c0000b80 <malloc_init_state>

c0000cc8 <dlfree>:
c0000cc8:	57                   	push   edi
c0000cc9:	56                   	push   esi
c0000cca:	53                   	push   ebx
c0000ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ccf:	85 db                	test   ebx,ebx
c0000cd1:	0f 84 e2 00 00 00    	je     c0000db9 <dlfree+0xf1>
c0000cd7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cda:	8b 0d 40 77 02 c0    	mov    ecx,DWORD PTR ds:0xc0027740
c0000ce0:	89 f0                	mov    eax,esi
c0000ce2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	39 c1                	cmp    ecx,eax
c0000cea:	72 24                	jb     c0000d10 <dlfree+0x48>
c0000cec:	83 c9 03             	or     ecx,0x3
c0000cef:	c1 e8 03             	shr    eax,0x3
c0000cf2:	89 0d 40 77 02 c0    	mov    DWORD PTR ds:0xc0027740,ecx
c0000cf8:	83 e8 02             	sub    eax,0x2
c0000cfb:	8b 0c 85 44 77 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd88bc]
c0000d02:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d04:	89 14 85 44 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd88bc],edx
c0000d0b:	e9 a9 00 00 00       	jmp    c0000db9 <dlfree+0xf1>
c0000d10:	83 e6 02             	and    esi,0x2
c0000d13:	0f 85 a0 00 00 00    	jne    c0000db9 <dlfree+0xf1>
c0000d19:	83 c9 01             	or     ecx,0x1
c0000d1c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d1f:	89 0d 40 77 02 c0    	mov    DWORD PTR ds:0xc0027740,ecx
c0000d25:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d28:	83 e1 fc             	and    ecx,0xfffffffc
c0000d2b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d2f:	75 13                	jne    c0000d44 <dlfree+0x7c>
c0000d31:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d34:	29 da                	sub    edx,ebx
c0000d36:	01 d8                	add    eax,ebx
c0000d38:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d44:	39 35 6c 77 02 c0    	cmp    DWORD PTR ds:0xc002776c,esi
c0000d4a:	74 40                	je     c0000d8c <dlfree+0xc4>
c0000d4c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d50:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d53:	80 e3 01             	and    bl,0x1
c0000d56:	75 0e                	jne    c0000d66 <dlfree+0x9e>
c0000d58:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d5b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d5e:	01 c8                	add    eax,ecx
c0000d60:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d63:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d66:	8b 0d 7c 77 02 c0    	mov    ecx,DWORD PTR ds:0xc002777c
c0000d6c:	c7 42 0c 74 77 02 c0 	mov    DWORD PTR [edx+0xc],0xc0027774
c0000d73:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d76:	89 15 7c 77 02 c0    	mov    DWORD PTR ds:0xc002777c,edx
c0000d7c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d8a:	eb 10                	jmp    c0000d9c <dlfree+0xd4>
c0000d8c:	01 c8                	add    eax,ecx
c0000d8e:	89 c1                	mov    ecx,eax
c0000d90:	83 c9 01             	or     ecx,0x1
c0000d93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d96:	89 15 6c 77 02 c0    	mov    DWORD PTR ds:0xc002776c,edx
c0000d9c:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000da1:	76 16                	jbe    c0000db9 <dlfree+0xf1>
c0000da3:	f6 05 40 77 02 c0 02 	test   BYTE PTR ds:0xc0027740,0x2
c0000daa:	74 0d                	je     c0000db9 <dlfree+0xf1>
c0000dac:	5b                   	pop    ebx
c0000dad:	b8 40 77 02 c0       	mov    eax,0xc0027740
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	e9 28 fe ff ff       	jmp    c0000be1 <malloc_consolidate>
c0000db9:	5b                   	pop    ebx
c0000dba:	5e                   	pop    esi
c0000dbb:	5f                   	pop    edi
c0000dbc:	c3                   	ret    

c0000dbd <sYSMALLOc>:
c0000dbd:	55                   	push   ebp
c0000dbe:	57                   	push   edi
c0000dbf:	56                   	push   esi
c0000dc0:	53                   	push   ebx
c0000dc1:	89 d3                	mov    ebx,edx
c0000dc3:	83 ec 2c             	sub    esp,0x2c
c0000dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dca:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dd0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dd3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dda:	74 1f                	je     c0000dfb <sYSMALLOc+0x3e>
c0000ddc:	89 d8                	mov    eax,ebx
c0000dde:	e8 fe fd ff ff       	call   c0000be1 <malloc_consolidate>
c0000de3:	83 ec 0c             	sub    esp,0xc
c0000de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dea:	83 e8 07             	sub    eax,0x7
c0000ded:	50                   	push   eax
c0000dee:	e8 30 02 00 00       	call   c0001023 <dlmalloc>
c0000df3:	83 c4 10             	add    esp,0x10
c0000df6:	e9 20 02 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000dfb:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dfe:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e04:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e07:	83 e0 fc             	and    eax,0xfffffffc
c0000e0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e12:	83 c0 10             	add    eax,0x10
c0000e15:	01 c1                	add    ecx,eax
c0000e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e1b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e22:	74 04                	je     c0000e28 <sYSMALLOc+0x6b>
c0000e24:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e28:	f7 da                	neg    edx
c0000e2a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e32:	21 d1                	and    ecx,edx
c0000e34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e38:	7f 07                	jg     c0000e41 <sYSMALLOc+0x84>
c0000e3a:	31 c0                	xor    eax,eax
c0000e3c:	e9 da 01 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000e41:	83 ec 0c             	sub    esp,0xc
c0000e44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e48:	e8 83 8a 00 00       	call   c00098d0 <sbrk>
c0000e4d:	83 c4 10             	add    esp,0x10
c0000e50:	89 c6                	mov    esi,eax
c0000e52:	83 f8 ff             	cmp    eax,0xffffffff
c0000e55:	74 e3                	je     c0000e3a <sYSMALLOc+0x7d>
c0000e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e5b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e5f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e62:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e68:	39 f1                	cmp    ecx,esi
c0000e6a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e70:	75 13                	jne    c0000e85 <sYSMALLOc+0xc8>
c0000e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e76:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 c8 01             	or     eax,0x1
c0000e7d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e80:	e9 3e 01 00 00       	jmp    c0000fc3 <sYSMALLOc+0x206>
c0000e85:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e8b:	88 d0                	mov    al,dl
c0000e8d:	83 e0 01             	and    eax,0x1
c0000e90:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e99:	0f 95 c0             	setne  al
c0000e9c:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000ea0:	39 f1                	cmp    ecx,esi
c0000ea2:	76 12                	jbe    c0000eb6 <sYSMALLOc+0xf9>
c0000ea4:	84 c0                	test   al,al
c0000ea6:	74 0e                	je     c0000eb6 <sYSMALLOc+0xf9>
c0000ea8:	83 e2 fe             	and    edx,0xfffffffe
c0000eab:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000eb1:	e9 83 00 00 00       	jmp    c0000f39 <sYSMALLOc+0x17c>
c0000eb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ebb:	74 7c                	je     c0000f39 <sYSMALLOc+0x17c>
c0000ebd:	84 c0                	test   al,al
c0000ebf:	74 0c                	je     c0000ecd <sYSMALLOc+0x110>
c0000ec1:	89 f0                	mov    eax,esi
c0000ec3:	29 c8                	sub    eax,ecx
c0000ec5:	01 e8                	add    eax,ebp
c0000ec7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ecd:	89 f2                	mov    edx,esi
c0000ecf:	83 e2 07             	and    edx,0x7
c0000ed2:	74 0c                	je     c0000ee0 <sYSMALLOc+0x123>
c0000ed4:	b8 08 00 00 00       	mov    eax,0x8
c0000ed9:	29 d0                	sub    eax,edx
c0000edb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ede:	eb 04                	jmp    c0000ee4 <sYSMALLOc+0x127>
c0000ee0:	89 f5                	mov    ebp,esi
c0000ee2:	31 c0                	xor    eax,eax
c0000ee4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000eec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ef0:	01 c1                	add    ecx,eax
c0000ef2:	83 ec 0c             	sub    esp,0xc
c0000ef5:	01 f1                	add    ecx,esi
c0000ef7:	01 ca                	add    edx,ecx
c0000ef9:	29 c8                	sub    eax,ecx
c0000efb:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000eff:	01 c2                	add    edx,eax
c0000f01:	52                   	push   edx
c0000f02:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f06:	e8 c5 89 00 00       	call   c00098d0 <sbrk>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f15:	75 0f                	jne    c0000f26 <sYSMALLOc+0x169>
c0000f17:	83 ec 0c             	sub    esp,0xc
c0000f1a:	6a 00                	push   0x0
c0000f1c:	e8 af 89 00 00       	call   c00098d0 <sbrk>
c0000f21:	83 c4 10             	add    esp,0x10
c0000f24:	eb 30                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f26:	39 c6                	cmp    esi,eax
c0000f28:	76 33                	jbe    c0000f5d <sYSMALLOc+0x1a0>
c0000f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f35:	01 f0                	add    eax,esi
c0000f37:	eb 1d                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f39:	83 ec 0c             	sub    esp,0xc
c0000f3c:	89 f5                	mov    ebp,esi
c0000f3e:	6a 00                	push   0x0
c0000f40:	e8 8b 89 00 00       	call   c00098d0 <sbrk>
c0000f45:	89 c2                	mov    edx,eax
c0000f47:	29 f2                	sub    edx,esi
c0000f49:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f4d:	83 c4 10             	add    esp,0x10
c0000f50:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f56:	31 d2                	xor    edx,edx
c0000f58:	83 f8 ff             	cmp    eax,0xffffffff
c0000f5b:	74 66                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f5d:	29 e8                	sub    eax,ebp
c0000f5f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f62:	01 d0                	add    eax,edx
c0000f64:	83 c8 01             	or     eax,0x1
c0000f67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f6a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f75:	74 4c                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f7b:	83 e8 0c             	sub    eax,0xc
c0000f7e:	83 e0 f8             	and    eax,0xfffffff8
c0000f81:	89 c2                	mov    edx,eax
c0000f83:	83 ca 01             	or     edx,0x1
c0000f86:	83 f8 0f             	cmp    eax,0xf
c0000f89:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f8c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f94:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f9c:	76 25                	jbe    c0000fc3 <sYSMALLOc+0x206>
c0000f9e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fa4:	83 ec 0c             	sub    esp,0xc
c0000fa7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fb1:	83 c7 08             	add    edi,0x8
c0000fb4:	57                   	push   edi
c0000fb5:	e8 0e fd ff ff       	call   c0000cc8 <dlfree>
c0000fba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fcf:	73 06                	jae    c0000fd7 <sYSMALLOc+0x21a>
c0000fd1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdd:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe3:	73 06                	jae    c0000feb <sYSMALLOc+0x22e>
c0000fe5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000feb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff1:	83 e2 fc             	and    edx,0xfffffffc
c0000ff4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff8:	0f 82 3c fe ff ff    	jb     c0000e3a <sYSMALLOc+0x7d>
c0000ffe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001002:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001005:	29 fa                	sub    edx,edi
c0001007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000100a:	83 ca 01             	or     edx,0x1
c000100d:	89 fb                	mov    ebx,edi
c000100f:	83 c0 08             	add    eax,0x8
c0001012:	83 cb 01             	or     ebx,0x1
c0001015:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001018:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101b:	83 c4 2c             	add    esp,0x2c
c000101e:	5b                   	pop    ebx
c000101f:	5e                   	pop    esi
c0001020:	5f                   	pop    edi
c0001021:	5d                   	pop    ebp
c0001022:	c3                   	ret    

c0001023 <dlmalloc>:
c0001023:	55                   	push   ebp
c0001024:	57                   	push   edi
c0001025:	56                   	push   esi
c0001026:	53                   	push   ebx
c0001027:	83 ec 1c             	sub    esp,0x1c
c000102a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000102e:	83 f8 df             	cmp    eax,0xffffffdf
c0001031:	0f 87 70 03 00 00    	ja     c00013a7 <dlmalloc+0x384>
c0001037:	83 c0 0b             	add    eax,0xb
c000103a:	be 10 00 00 00       	mov    esi,0x10
c000103f:	83 f8 0f             	cmp    eax,0xf
c0001042:	76 05                	jbe    c0001049 <dlmalloc+0x26>
c0001044:	83 e0 f8             	and    eax,0xfffffff8
c0001047:	89 c6                	mov    esi,eax
c0001049:	8b 3d 40 77 02 c0    	mov    edi,DWORD PTR ds:0xc0027740
c000104f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001055:	75 17                	jne    c000106e <dlmalloc+0x4b>
c0001057:	85 ff                	test   edi,edi
c0001059:	0f 85 05 03 00 00    	jne    c0001364 <dlmalloc+0x341>
c000105f:	b8 40 77 02 c0       	mov    eax,0xc0027740
c0001064:	e8 78 fb ff ff       	call   c0000be1 <malloc_consolidate>
c0001069:	e9 f6 02 00 00       	jmp    c0001364 <dlmalloc+0x341>
c000106e:	39 f7                	cmp    edi,esi
c0001070:	72 1f                	jb     c0001091 <dlmalloc+0x6e>
c0001072:	89 f2                	mov    edx,esi
c0001074:	c1 ea 03             	shr    edx,0x3
c0001077:	83 ea 02             	sub    edx,0x2
c000107a:	8b 04 95 44 77 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd88bc]
c0001081:	85 c0                	test   eax,eax
c0001083:	74 0c                	je     c0001091 <dlmalloc+0x6e>
c0001085:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001088:	89 0c 95 44 77 02 c0 	mov    DWORD PTR [edx*4-0x3ffd88bc],ecx
c000108f:	eb 30                	jmp    c00010c1 <dlmalloc+0x9e>
c0001091:	89 f0                	mov    eax,esi
c0001093:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001099:	77 2e                	ja     c00010c9 <dlmalloc+0xa6>
c000109b:	c1 e8 03             	shr    eax,0x3
c000109e:	8d 14 c5 74 77 02 c0 	lea    edx,[eax*8-0x3ffd888c]
c00010a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010ac:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010af:	39 c3                	cmp    ebx,eax
c00010b1:	74 2e                	je     c00010e1 <dlmalloc+0xbe>
c00010b3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010b6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010bb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010be:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010c1:	83 c0 08             	add    eax,0x8
c00010c4:	e9 e0 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c00010c9:	e8 8f fa ff ff       	call   c0000b5d <largebin_index>
c00010ce:	83 e7 02             	and    edi,0x2
c00010d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010d5:	74 0a                	je     c00010e1 <dlmalloc+0xbe>
c00010d7:	b8 40 77 02 c0       	mov    eax,0xc0027740
c00010dc:	e8 00 fb ff ff       	call   c0000be1 <malloc_consolidate>
c00010e1:	8d 46 10             	lea    eax,[esi+0x10]
c00010e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e8:	8b 1d 80 77 02 c0    	mov    ebx,DWORD PTR ds:0xc0027780
c00010ee:	81 fb 74 77 02 c0    	cmp    ebx,0xc0027774
c00010f4:	0f 84 13 01 00 00    	je     c000120d <dlmalloc+0x1ea>
c00010fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001100:	83 e7 fc             	and    edi,0xfffffffc
c0001103:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001109:	77 4c                	ja     c0001157 <dlmalloc+0x134>
c000110b:	3d 74 77 02 c0       	cmp    eax,0xc0027774
c0001110:	75 45                	jne    c0001157 <dlmalloc+0x134>
c0001112:	39 1d 70 77 02 c0    	cmp    DWORD PTR ds:0xc0027770,ebx
c0001118:	75 3d                	jne    c0001157 <dlmalloc+0x134>
c000111a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000111e:	73 37                	jae    c0001157 <dlmalloc+0x134>
c0001120:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001123:	89 fa                	mov    edx,edi
c0001125:	a3 7c 77 02 c0       	mov    ds:0xc002777c,eax
c000112a:	a3 80 77 02 c0       	mov    ds:0xc0027780,eax
c000112f:	a3 70 77 02 c0       	mov    ds:0xc0027770,eax
c0001134:	29 f2                	sub    edx,esi
c0001136:	c7 40 08 74 77 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027774
c000113d:	c7 40 0c 74 77 02 c0 	mov    DWORD PTR [eax+0xc],0xc0027774
c0001144:	83 ce 01             	or     esi,0x1
c0001147:	89 d1                	mov    ecx,edx
c0001149:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000114c:	83 c9 01             	or     ecx,0x1
c000114f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001152:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001155:	eb 15                	jmp    c000116c <dlmalloc+0x149>
c0001157:	a3 80 77 02 c0       	mov    ds:0xc0027780,eax
c000115c:	39 fe                	cmp    esi,edi
c000115e:	c7 40 08 74 77 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027774
c0001165:	75 0d                	jne    c0001174 <dlmalloc+0x151>
c0001167:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000116c:	8d 43 08             	lea    eax,[ebx+0x8]
c000116f:	e9 35 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001174:	89 f8                	mov    eax,edi
c0001176:	81 ff ff 00 00 00    	cmp    edi,0xff
c000117c:	77 19                	ja     c0001197 <dlmalloc+0x174>
c000117e:	c1 e8 03             	shr    eax,0x3
c0001181:	8d 14 00             	lea    edx,[eax+eax*1]
c0001184:	83 c2 0d             	add    edx,0xd
c0001187:	8d 2c 95 38 77 02 c0 	lea    ebp,[edx*4-0x3ffd88c8]
c000118e:	8b 14 95 40 77 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd88c0]
c0001195:	eb 46                	jmp    c00011dd <dlmalloc+0x1ba>
c0001197:	e8 c1 f9 ff ff       	call   c0000b5d <largebin_index>
c000119c:	8d 14 00             	lea    edx,[eax+eax*1]
c000119f:	83 c2 0d             	add    edx,0xd
c00011a2:	8d 0c 95 40 77 02 c0 	lea    ecx,[edx*4-0x3ffd88c0]
c00011a9:	8b 14 95 40 77 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd88c0]
c00011b0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011b7:	89 d5                	mov    ebp,edx
c00011b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011bd:	74 1e                	je     c00011dd <dlmalloc+0x1ba>
c00011bf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011c2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011c5:	77 12                	ja     c00011d9 <dlmalloc+0x1b6>
c00011c7:	83 cf 01             	or     edi,0x1
c00011ca:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011cd:	76 05                	jbe    c00011d4 <dlmalloc+0x1b1>
c00011cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011d2:	eb f6                	jmp    c00011ca <dlmalloc+0x1a7>
c00011d4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011d7:	eb 04                	jmp    c00011dd <dlmalloc+0x1ba>
c00011d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011dd:	89 c7                	mov    edi,eax
c00011df:	88 c1                	mov    cl,al
c00011e1:	c1 ff 05             	sar    edi,0x5
c00011e4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e8:	bf 01 00 00 00       	mov    edi,0x1
c00011ed:	d3 e7                	shl    edi,cl
c00011ef:	89 f8                	mov    eax,edi
c00011f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011f5:	09 04 bd 74 7a 02 c0 	or     DWORD PTR [edi*4-0x3ffd858c],eax
c00011fc:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011ff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001202:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001205:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001208:	e9 db fe ff ff       	jmp    c00010e8 <dlmalloc+0xc5>
c000120d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001213:	76 78                	jbe    c000128d <dlmalloc+0x26a>
c0001215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001219:	8d 04 c5 74 77 02 c0 	lea    eax,[eax*8-0x3ffd888c]
c0001220:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001223:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001226:	39 ca                	cmp    edx,ecx
c0001228:	74 63                	je     c000128d <dlmalloc+0x26a>
c000122a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000122d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001230:	83 e3 fc             	and    ebx,0xfffffffc
c0001233:	39 de                	cmp    esi,ebx
c0001235:	77 52                	ja     c0001289 <dlmalloc+0x266>
c0001237:	89 df                	mov    edi,ebx
c0001239:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000123c:	29 f7                	sub    edi,esi
c000123e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001241:	01 d3                	add    ebx,edx
c0001243:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001246:	83 ff 0f             	cmp    edi,0xf
c0001249:	8d 42 08             	lea    eax,[edx+0x8]
c000124c:	77 09                	ja     c0001257 <dlmalloc+0x234>
c000124e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001252:	e9 52 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001257:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000125a:	83 ce 01             	or     esi,0x1
c000125d:	89 0d 7c 77 02 c0    	mov    DWORD PTR ds:0xc002777c,ecx
c0001263:	89 0d 80 77 02 c0    	mov    DWORD PTR ds:0xc0027780,ecx
c0001269:	c7 41 08 74 77 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0027774
c0001270:	c7 41 0c 74 77 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0027774
c0001277:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000127a:	89 fa                	mov    edx,edi
c000127c:	83 ca 01             	or     edx,0x1
c000127f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001282:	89 3b                	mov    DWORD PTR [ebx],edi
c0001284:	e9 20 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001289:	89 c2                	mov    edx,eax
c000128b:	eb 99                	jmp    c0001226 <dlmalloc+0x203>
c000128d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001291:	b8 01 00 00 00       	mov    eax,0x1
c0001296:	41                   	inc    ecx
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	8d 14 cd 6c 77 02 c0 	lea    edx,[ecx*8-0x3ffd8894]
c00012a0:	c1 eb 05             	shr    ebx,0x5
c00012a3:	d3 e0                	shl    eax,cl
c00012a5:	8b 3c 9d 74 7a 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd858c]
c00012ac:	39 f8                	cmp    eax,edi
c00012ae:	77 04                	ja     c00012b4 <dlmalloc+0x291>
c00012b0:	85 c0                	test   eax,eax
c00012b2:	75 26                	jne    c00012da <dlmalloc+0x2b7>
c00012b4:	43                   	inc    ebx
c00012b5:	83 fb 02             	cmp    ebx,0x2
c00012b8:	0f 87 a6 00 00 00    	ja     c0001364 <dlmalloc+0x341>
c00012be:	8b 3c 9d 74 7a 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd858c]
c00012c5:	85 ff                	test   edi,edi
c00012c7:	74 eb                	je     c00012b4 <dlmalloc+0x291>
c00012c9:	89 d8                	mov    eax,ebx
c00012cb:	c1 e0 06             	shl    eax,0x6
c00012ce:	8d 14 85 6c 77 02 c0 	lea    edx,[eax*4-0x3ffd8894]
c00012d5:	b8 01 00 00 00       	mov    eax,0x1
c00012da:	85 f8                	test   eax,edi
c00012dc:	75 07                	jne    c00012e5 <dlmalloc+0x2c2>
c00012de:	83 c2 08             	add    edx,0x8
c00012e1:	01 c0                	add    eax,eax
c00012e3:	eb f5                	jmp    c00012da <dlmalloc+0x2b7>
c00012e5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e8:	39 ca                	cmp    edx,ecx
c00012ea:	75 14                	jne    c0001300 <dlmalloc+0x2dd>
c00012ec:	89 c1                	mov    ecx,eax
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	f7 d1                	not    ecx
c00012f3:	01 c0                	add    eax,eax
c00012f5:	21 cf                	and    edi,ecx
c00012f7:	89 3c 9d 74 7a 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd858c],edi
c00012fe:	eb ac                	jmp    c00012ac <dlmalloc+0x289>
c0001300:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001303:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001306:	83 e0 fc             	and    eax,0xfffffffc
c0001309:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000130c:	89 c3                	mov    ebx,eax
c000130e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001311:	29 f3                	sub    ebx,esi
c0001313:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001316:	83 fb 0f             	cmp    ebx,0xf
c0001319:	8d 41 08             	lea    eax,[ecx+0x8]
c000131c:	77 09                	ja     c0001327 <dlmalloc+0x304>
c000131e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001322:	e9 82 00 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001327:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000132a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001330:	89 3d 7c 77 02 c0    	mov    DWORD PTR ds:0xc002777c,edi
c0001336:	89 3d 80 77 02 c0    	mov    DWORD PTR ds:0xc0027780,edi
c000133c:	c7 47 08 74 77 02 c0 	mov    DWORD PTR [edi+0x8],0xc0027774
c0001343:	c7 47 0c 74 77 02 c0 	mov    DWORD PTR [edi+0xc],0xc0027774
c000134a:	77 06                	ja     c0001352 <dlmalloc+0x32f>
c000134c:	89 3d 70 77 02 c0    	mov    DWORD PTR ds:0xc0027770,edi
c0001352:	83 ce 01             	or     esi,0x1
c0001355:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001358:	89 d9                	mov    ecx,ebx
c000135a:	83 c9 01             	or     ecx,0x1
c000135d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001360:	89 1a                	mov    DWORD PTR [edx],ebx
c0001362:	eb 45                	jmp    c00013a9 <dlmalloc+0x386>
c0001364:	a1 6c 77 02 c0       	mov    eax,ds:0xc002776c
c0001369:	8d 4e 10             	lea    ecx,[esi+0x10]
c000136c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136f:	83 e2 fc             	and    edx,0xfffffffc
c0001372:	39 d1                	cmp    ecx,edx
c0001374:	77 1e                	ja     c0001394 <dlmalloc+0x371>
c0001376:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001379:	89 f3                	mov    ebx,esi
c000137b:	89 0d 6c 77 02 c0    	mov    DWORD PTR ds:0xc002776c,ecx
c0001381:	83 cb 01             	or     ebx,0x1
c0001384:	29 f2                	sub    edx,esi
c0001386:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001389:	83 ca 01             	or     edx,0x1
c000138c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000138f:	e9 2d fd ff ff       	jmp    c00010c1 <dlmalloc+0x9e>
c0001394:	83 c4 1c             	add    esp,0x1c
c0001397:	89 f0                	mov    eax,esi
c0001399:	5b                   	pop    ebx
c000139a:	ba 40 77 02 c0       	mov    edx,0xc0027740
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 16 fa ff ff       	jmp    c0000dbd <sYSMALLOc>
c00013a7:	31 c0                	xor    eax,eax
c00013a9:	83 c4 1c             	add    esp,0x1c
c00013ac:	5b                   	pop    ebx
c00013ad:	5e                   	pop    esi
c00013ae:	5f                   	pop    edi
c00013af:	5d                   	pop    ebp
c00013b0:	c3                   	ret    

c00013b1 <iALLOc>:
c00013b1:	55                   	push   ebp
c00013b2:	89 c5                	mov    ebp,eax
c00013b4:	57                   	push   edi
c00013b5:	56                   	push   esi
c00013b6:	53                   	push   ebx
c00013b7:	83 ec 2c             	sub    esp,0x2c
c00013ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013c6:	83 3d 40 77 02 c0 00 	cmp    DWORD PTR ds:0xc0027740,0x0
c00013cd:	75 12                	jne    c00013e1 <iALLOc+0x30>
c00013cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013d3:	b8 40 77 02 c0       	mov    eax,0xc0027740
c00013d8:	e8 04 f8 ff ff       	call   c0000be1 <malloc_consolidate>
c00013dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e6:	74 12                	je     c00013fa <iALLOc+0x49>
c00013e8:	85 ed                	test   ebp,ebp
c00013ea:	0f 84 64 01 00 00    	je     c0001554 <iALLOc+0x1a3>
c00013f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f8:	eb 33                	jmp    c000142d <iALLOc+0x7c>
c00013fa:	85 ed                	test   ebp,ebp
c00013fc:	75 14                	jne    c0001412 <iALLOc+0x61>
c00013fe:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001406:	83 c4 2c             	add    esp,0x2c
c0001409:	5b                   	pop    ebx
c000140a:	5e                   	pop    esi
c000140b:	5f                   	pop    edi
c000140c:	5d                   	pop    ebp
c000140d:	e9 11 fc ff ff       	jmp    c0001023 <dlmalloc>
c0001412:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001419:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001421:	83 f8 0f             	cmp    eax,0xf
c0001424:	76 07                	jbe    c000142d <iALLOc+0x7c>
c0001426:	83 e0 f8             	and    eax,0xfffffff8
c0001429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000142d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001432:	75 09                	jne    c000143d <iALLOc+0x8c>
c0001434:	89 d0                	mov    eax,edx
c0001436:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001439:	31 f6                	xor    esi,esi
c000143b:	eb 3b                	jmp    c0001478 <iALLOc+0xc7>
c000143d:	8b 02                	mov    eax,DWORD PTR [edx]
c000143f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001447:	83 c0 0b             	add    eax,0xb
c000144a:	83 f8 0f             	cmp    eax,0xf
c000144d:	76 07                	jbe    c0001456 <iALLOc+0xa5>
c000144f:	83 e0 f8             	and    eax,0xfffffff8
c0001452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000145a:	0f af f5             	imul   esi,ebp
c000145d:	eb 25                	jmp    c0001484 <iALLOc+0xd3>
c000145f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001461:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001464:	bb 10 00 00 00       	mov    ebx,0x10
c0001469:	83 f9 0f             	cmp    ecx,0xf
c000146c:	76 05                	jbe    c0001473 <iALLOc+0xc2>
c000146e:	83 e1 f8             	and    ecx,0xfffffff8
c0001471:	89 cb                	mov    ebx,ecx
c0001473:	01 de                	add    esi,ebx
c0001475:	83 c0 04             	add    eax,0x4
c0001478:	39 c7                	cmp    edi,eax
c000147a:	75 e3                	jne    c000145f <iALLOc+0xae>
c000147c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001484:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001488:	8b 1d 94 7a 02 c0    	mov    ebx,DWORD PTR ds:0xc0027a94
c000148e:	83 ec 0c             	sub    esp,0xc
c0001491:	c7 05 94 7a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027a94,0x0
c000149b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000149f:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014a3:	50                   	push   eax
c00014a4:	e8 7a fb ff ff       	call   c0001023 <dlmalloc>
c00014a9:	83 c4 10             	add    esp,0x10
c00014ac:	89 1d 94 7a 02 c0    	mov    DWORD PTR ds:0xc0027a94,ebx
c00014b2:	85 c0                	test   eax,eax
c00014b4:	0f 84 92 00 00 00    	je     c000154c <iALLOc+0x19b>
c00014ba:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014bd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014c0:	83 e3 fc             	and    ebx,0xfffffffc
c00014c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014c7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014cc:	74 1e                	je     c00014ec <iALLOc+0x13b>
c00014ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014d2:	89 d9                	mov    ecx,ebx
c00014d4:	52                   	push   edx
c00014d5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d9:	83 e9 04             	sub    ecx,0x4
c00014dc:	51                   	push   ecx
c00014dd:	6a 00                	push   0x0
c00014df:	50                   	push   eax
c00014e0:	e8 9f f1 ff ff       	call   c0000684 <memset>
c00014e5:	83 c4 10             	add    esp,0x10
c00014e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014f1:	75 14                	jne    c0001507 <iALLOc+0x156>
c00014f3:	8d 04 37             	lea    eax,[edi+esi*1]
c00014f6:	29 f3                	sub    ebx,esi
c00014f8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014fb:	83 cb 01             	or     ebx,0x1
c00014fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001502:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001505:	89 f3                	mov    ebx,esi
c0001507:	31 c0                	xor    eax,eax
c0001509:	4d                   	dec    ebp
c000150a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000150d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001511:	39 c5                	cmp    ebp,eax
c0001513:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001516:	74 2c                	je     c0001544 <iALLOc+0x193>
c0001518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000151c:	85 c9                	test   ecx,ecx
c000151e:	75 15                	jne    c0001535 <iALLOc+0x184>
c0001520:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001523:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001526:	b9 10 00 00 00       	mov    ecx,0x10
c000152b:	83 fe 0f             	cmp    esi,0xf
c000152e:	76 05                	jbe    c0001535 <iALLOc+0x184>
c0001530:	83 e6 f8             	and    esi,0xfffffff8
c0001533:	89 f1                	mov    ecx,esi
c0001535:	89 ce                	mov    esi,ecx
c0001537:	29 cb                	sub    ebx,ecx
c0001539:	83 ce 01             	or     esi,0x1
c000153c:	40                   	inc    eax
c000153d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001540:	01 cf                	add    edi,ecx
c0001542:	eb c6                	jmp    c000150a <iALLOc+0x159>
c0001544:	83 cb 01             	or     ebx,0x1
c0001547:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000154a:	eb 08                	jmp    c0001554 <iALLOc+0x1a3>
c000154c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001558:	83 c4 2c             	add    esp,0x2c
c000155b:	5b                   	pop    ebx
c000155c:	5e                   	pop    esi
c000155d:	5f                   	pop    edi
c000155e:	5d                   	pop    ebp
c000155f:	c3                   	ret    

c0001560 <dlrealloc>:
c0001560:	55                   	push   ebp
c0001561:	57                   	push   edi
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	83 ec 1c             	sub    esp,0x1c
c0001567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000156b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000156f:	85 db                	test   ebx,ebx
c0001571:	75 10                	jne    c0001583 <dlrealloc+0x23>
c0001573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001577:	83 c4 1c             	add    esp,0x1c
c000157a:	5b                   	pop    ebx
c000157b:	5e                   	pop    esi
c000157c:	5f                   	pop    edi
c000157d:	5d                   	pop    ebp
c000157e:	e9 a0 fa ff ff       	jmp    c0001023 <dlmalloc>
c0001583:	83 f8 df             	cmp    eax,0xffffffdf
c0001586:	76 07                	jbe    c000158f <dlrealloc+0x2f>
c0001588:	31 db                	xor    ebx,ebx
c000158a:	e9 6a 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c000158f:	83 c0 0b             	add    eax,0xb
c0001592:	bd 10 00 00 00       	mov    ebp,0x10
c0001597:	83 f8 0f             	cmp    eax,0xf
c000159a:	76 05                	jbe    c00015a1 <dlrealloc+0x41>
c000159c:	83 e0 f8             	and    eax,0xfffffff8
c000159f:	89 c5                	mov    ebp,eax
c00015a1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015a4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015a7:	89 c6                	mov    esi,eax
c00015a9:	83 e6 fc             	and    esi,0xfffffffc
c00015ac:	a8 02                	test   al,0x2
c00015ae:	75 d8                	jne    c0001588 <dlrealloc+0x28>
c00015b0:	39 f5                	cmp    ebp,esi
c00015b2:	0f 86 04 01 00 00    	jbe    c00016bc <dlrealloc+0x15c>
c00015b8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015be:	39 15 6c 77 02 c0    	cmp    DWORD PTR ds:0xc002776c,edx
c00015c4:	75 33                	jne    c00015f9 <dlrealloc+0x99>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015cf:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015d6:	77 49                	ja     c0001621 <dlrealloc+0xc1>
c00015d8:	01 ef                	add    edi,ebp
c00015da:	83 e0 01             	and    eax,0x1
c00015dd:	09 e8                	or     eax,ebp
c00015df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015e2:	89 3d 6c 77 02 c0    	mov    DWORD PTR ds:0xc002776c,edi
c00015e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ec:	29 e8                	sub    eax,ebp
c00015ee:	83 c8 01             	or     eax,0x1
c00015f1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015f4:	e9 00 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c00015f9:	89 c8                	mov    eax,ecx
c00015fb:	83 e0 fe             	and    eax,0xfffffffe
c00015fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001603:	75 1c                	jne    c0001621 <dlrealloc+0xc1>
c0001605:	83 e1 fc             	and    ecx,0xfffffffc
c0001608:	01 f1                	add    ecx,esi
c000160a:	39 cd                	cmp    ebp,ecx
c000160c:	77 13                	ja     c0001621 <dlrealloc+0xc1>
c000160e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001611:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001614:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001617:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000161a:	89 ce                	mov    esi,ecx
c000161c:	e9 9b 00 00 00       	jmp    c00016bc <dlrealloc+0x15c>
c0001621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001625:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001628:	83 ec 0c             	sub    esp,0xc
c000162b:	50                   	push   eax
c000162c:	e8 f2 f9 ff ff       	call   c0001023 <dlmalloc>
c0001631:	83 c4 10             	add    esp,0x10
c0001634:	85 c0                	test   eax,eax
c0001636:	0f 84 4c ff ff ff    	je     c0001588 <dlrealloc+0x28>
c000163c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000163f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001643:	39 ca                	cmp    edx,ecx
c0001645:	75 0a                	jne    c0001651 <dlrealloc+0xf1>
c0001647:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000164a:	83 e0 fc             	and    eax,0xfffffffc
c000164d:	01 c6                	add    esi,eax
c000164f:	eb 6b                	jmp    c00016bc <dlrealloc+0x15c>
c0001651:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001654:	83 f9 27             	cmp    ecx,0x27
c0001657:	76 08                	jbe    c0001661 <dlrealloc+0x101>
c0001659:	89 de                	mov    esi,ebx
c000165b:	89 c7                	mov    edi,eax
c000165d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000165f:	eb 43                	jmp    c00016a4 <dlrealloc+0x144>
c0001661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001663:	83 f9 13             	cmp    ecx,0x13
c0001666:	89 10                	mov    DWORD PTR [eax],edx
c0001668:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000166b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000166e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001674:	76 2e                	jbe    c00016a4 <dlrealloc+0x144>
c0001676:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001679:	83 f9 1b             	cmp    ecx,0x1b
c000167c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000167f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001685:	76 1d                	jbe    c00016a4 <dlrealloc+0x144>
c0001687:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000168a:	83 f9 23             	cmp    ecx,0x23
c000168d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001690:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001693:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001696:	76 0c                	jbe    c00016a4 <dlrealloc+0x144>
c0001698:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000169b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000169e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016a1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a8:	83 ec 0c             	sub    esp,0xc
c00016ab:	53                   	push   ebx
c00016ac:	e8 17 f6 ff ff       	call   c0000cc8 <dlfree>
c00016b1:	83 c4 10             	add    esp,0x10
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	89 c3                	mov    ebx,eax
c00016ba:	eb 3d                	jmp    c00016f9 <dlrealloc+0x199>
c00016bc:	89 f2                	mov    edx,esi
c00016be:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016c1:	29 ea                	sub    edx,ebp
c00016c3:	83 e1 01             	and    ecx,0x1
c00016c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c9:	83 fa 0f             	cmp    edx,0xf
c00016cc:	77 0b                	ja     c00016d9 <dlrealloc+0x179>
c00016ce:	09 ce                	or     esi,ecx
c00016d0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016d7:	eb 20                	jmp    c00016f9 <dlrealloc+0x199>
c00016d9:	01 ef                	add    edi,ebp
c00016db:	83 ec 0c             	sub    esp,0xc
c00016de:	09 cd                	or     ebp,ecx
c00016e0:	83 ca 01             	or     edx,0x1
c00016e3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016e6:	83 c7 08             	add    edi,0x8
c00016e9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ec:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016f0:	57                   	push   edi
c00016f1:	e8 d2 f5 ff ff       	call   c0000cc8 <dlfree>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	83 c4 1c             	add    esp,0x1c
c00016fc:	89 d8                	mov    eax,ebx
c00016fe:	5b                   	pop    ebx
c00016ff:	5e                   	pop    esi
c0001700:	5f                   	pop    edi
c0001701:	5d                   	pop    ebp
c0001702:	c3                   	ret    

c0001703 <dlmemalign>:
c0001703:	55                   	push   ebp
c0001704:	57                   	push   edi
c0001705:	56                   	push   esi
c0001706:	53                   	push   ebx
c0001707:	83 ec 0c             	sub    esp,0xc
c000170a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000170e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001712:	83 fa 08             	cmp    edx,0x8
c0001715:	77 10                	ja     c0001727 <dlmemalign+0x24>
c0001717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000171b:	83 c4 0c             	add    esp,0xc
c000171e:	5b                   	pop    ebx
c000171f:	5e                   	pop    esi
c0001720:	5f                   	pop    edi
c0001721:	5d                   	pop    ebp
c0001722:	e9 fc f8 ff ff       	jmp    c0001023 <dlmalloc>
c0001727:	bf 10 00 00 00       	mov    edi,0x10
c000172c:	83 fa 0f             	cmp    edx,0xf
c000172f:	76 13                	jbe    c0001744 <dlmemalign+0x41>
c0001731:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001734:	85 d1                	test   ecx,edx
c0001736:	75 04                	jne    c000173c <dlmemalign+0x39>
c0001738:	89 d7                	mov    edi,edx
c000173a:	eb 08                	jmp    c0001744 <dlmemalign+0x41>
c000173c:	39 d7                	cmp    edi,edx
c000173e:	73 04                	jae    c0001744 <dlmemalign+0x41>
c0001740:	01 ff                	add    edi,edi
c0001742:	eb f8                	jmp    c000173c <dlmemalign+0x39>
c0001744:	83 f8 df             	cmp    eax,0xffffffdf
c0001747:	76 07                	jbe    c0001750 <dlmemalign+0x4d>
c0001749:	31 c0                	xor    eax,eax
c000174b:	e9 ce 00 00 00       	jmp    c000181e <dlmemalign+0x11b>
c0001750:	83 c0 0b             	add    eax,0xb
c0001753:	bd 10 00 00 00       	mov    ebp,0x10
c0001758:	83 f8 0f             	cmp    eax,0xf
c000175b:	76 05                	jbe    c0001762 <dlmemalign+0x5f>
c000175d:	83 e0 f8             	and    eax,0xfffffff8
c0001760:	89 c5                	mov    ebp,eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001769:	50                   	push   eax
c000176a:	e8 b4 f8 ff ff       	call   c0001023 <dlmalloc>
c000176f:	83 c4 10             	add    esp,0x10
c0001772:	89 c1                	mov    ecx,eax
c0001774:	85 c0                	test   eax,eax
c0001776:	74 d1                	je     c0001749 <dlmemalign+0x46>
c0001778:	31 d2                	xor    edx,edx
c000177a:	8d 70 f8             	lea    esi,[eax-0x8]
c000177d:	f7 f7                	div    edi
c000177f:	85 d2                	test   edx,edx
c0001781:	74 62                	je     c00017e5 <dlmemalign+0xe2>
c0001783:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001787:	89 f8                	mov    eax,edi
c0001789:	f7 d8                	neg    eax
c000178b:	21 c3                	and    ebx,eax
c000178d:	83 eb 08             	sub    ebx,0x8
c0001790:	89 d8                	mov    eax,ebx
c0001792:	29 f0                	sub    eax,esi
c0001794:	83 f8 0f             	cmp    eax,0xf
c0001797:	77 02                	ja     c000179b <dlmemalign+0x98>
c0001799:	01 fb                	add    ebx,edi
c000179b:	89 d8                	mov    eax,ebx
c000179d:	29 f0                	sub    eax,esi
c000179f:	89 c6                	mov    esi,eax
c00017a1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a4:	89 c2                	mov    edx,eax
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	29 f2                	sub    edx,esi
c00017ab:	a8 02                	test   al,0x2
c00017ad:	74 10                	je     c00017bf <dlmemalign+0xbc>
c00017af:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017b2:	83 ca 02             	or     edx,0x2
c00017b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ba:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017bd:	eb 5f                	jmp    c000181e <dlmemalign+0x11b>
c00017bf:	83 ec 0c             	sub    esp,0xc
c00017c2:	89 d0                	mov    eax,edx
c00017c4:	83 c8 01             	or     eax,0x1
c00017c7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ca:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017cf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 f0                	or     eax,esi
c00017d7:	89 de                	mov    esi,ebx
c00017d9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017dc:	51                   	push   ecx
c00017dd:	e8 e6 f4 ff ff       	call   c0000cc8 <dlfree>
c00017e2:	83 c4 10             	add    esp,0x10
c00017e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e8:	a8 02                	test   al,0x2
c00017ea:	75 2f                	jne    c000181b <dlmemalign+0x118>
c00017ec:	83 e0 fc             	and    eax,0xfffffffc
c00017ef:	8d 55 10             	lea    edx,[ebp+0x10]
c00017f2:	39 c2                	cmp    edx,eax
c00017f4:	73 25                	jae    c000181b <dlmemalign+0x118>
c00017f6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f9:	83 ec 0c             	sub    esp,0xc
c00017fc:	29 e8                	sub    eax,ebp
c00017fe:	83 c2 08             	add    edx,0x8
c0001801:	83 c8 01             	or     eax,0x1
c0001804:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001807:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000180a:	83 e0 01             	and    eax,0x1
c000180d:	09 c5                	or     ebp,eax
c000180f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001812:	52                   	push   edx
c0001813:	e8 b0 f4 ff ff       	call   c0000cc8 <dlfree>
c0001818:	83 c4 10             	add    esp,0x10
c000181b:	8d 46 08             	lea    eax,[esi+0x8]
c000181e:	83 c4 0c             	add    esp,0xc
c0001821:	5b                   	pop    ebx
c0001822:	5e                   	pop    esi
c0001823:	5f                   	pop    edi
c0001824:	5d                   	pop    ebp
c0001825:	c3                   	ret    

c0001826 <dlcalloc>:
c0001826:	53                   	push   ebx
c0001827:	83 ec 14             	sub    esp,0x14
c000182a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000182e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001833:	50                   	push   eax
c0001834:	e8 ea f7 ff ff       	call   c0001023 <dlmalloc>
c0001839:	83 c4 10             	add    esp,0x10
c000183c:	89 c3                	mov    ebx,eax
c000183e:	85 c0                	test   eax,eax
c0001840:	74 77                	je     c00018b9 <dlcalloc+0x93>
c0001842:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001845:	89 d0                	mov    eax,edx
c0001847:	83 e0 fc             	and    eax,0xfffffffc
c000184a:	80 e2 02             	and    dl,0x2
c000184d:	75 5a                	jne    c00018a9 <dlcalloc+0x83>
c000184f:	83 e8 04             	sub    eax,0x4
c0001852:	83 f8 27             	cmp    eax,0x27
c0001855:	76 03                	jbe    c000185a <dlcalloc+0x34>
c0001857:	51                   	push   ecx
c0001858:	eb 53                	jmp    c00018ad <dlcalloc+0x87>
c000185a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001860:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001867:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000186e:	83 f8 13             	cmp    eax,0x13
c0001871:	76 46                	jbe    c00018b9 <dlcalloc+0x93>
c0001873:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000187a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001881:	83 f8 1b             	cmp    eax,0x1b
c0001884:	76 33                	jbe    c00018b9 <dlcalloc+0x93>
c0001886:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000188d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001894:	83 f8 23             	cmp    eax,0x23
c0001897:	76 20                	jbe    c00018b9 <dlcalloc+0x93>
c0001899:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018a7:	eb 10                	jmp    c00018b9 <dlcalloc+0x93>
c00018a9:	83 e8 08             	sub    eax,0x8
c00018ac:	52                   	push   edx
c00018ad:	50                   	push   eax
c00018ae:	6a 00                	push   0x0
c00018b0:	53                   	push   ebx
c00018b1:	e8 ce ed ff ff       	call   c0000684 <memset>
c00018b6:	83 c4 10             	add    esp,0x10
c00018b9:	89 d8                	mov    eax,ebx
c00018bb:	83 c4 08             	add    esp,0x8
c00018be:	5b                   	pop    ebx
c00018bf:	c3                   	ret    

c00018c0 <dlcfree>:
c00018c0:	e9 03 f4 ff ff       	jmp    c0000cc8 <dlfree>

c00018c5 <dlindependent_calloc>:
c00018c5:	83 ec 28             	sub    esp,0x28
c00018c8:	b9 03 00 00 00       	mov    ecx,0x3
c00018cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	e8 cb fa ff ff       	call   c00013b1 <iALLOc>
c00018e6:	83 c4 2c             	add    esp,0x2c
c00018e9:	c3                   	ret    

c00018ea <dlindependent_comalloc>:
c00018ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f2:	31 c9                	xor    ecx,ecx
c00018f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018fc:	e9 b0 fa ff ff       	jmp    c00013b1 <iALLOc>

c0001901 <dlvalloc>:
c0001901:	83 ec 0c             	sub    esp,0xc
c0001904:	83 3d 40 77 02 c0 00 	cmp    DWORD PTR ds:0xc0027740,0x0
c000190b:	75 0a                	jne    c0001917 <dlvalloc+0x16>
c000190d:	b8 40 77 02 c0       	mov    eax,0xc0027740
c0001912:	e8 ca f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001917:	50                   	push   eax
c0001918:	50                   	push   eax
c0001919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000191d:	ff 35 9c 7a 02 c0    	push   DWORD PTR ds:0xc0027a9c
c0001923:	e8 db fd ff ff       	call   c0001703 <dlmemalign>
c0001928:	83 c4 1c             	add    esp,0x1c
c000192b:	c3                   	ret    

c000192c <dlpvalloc>:
c000192c:	83 ec 0c             	sub    esp,0xc
c000192f:	83 3d 40 77 02 c0 00 	cmp    DWORD PTR ds:0xc0027740,0x0
c0001936:	75 0a                	jne    c0001942 <dlpvalloc+0x16>
c0001938:	b8 40 77 02 c0       	mov    eax,0xc0027740
c000193d:	e8 9f f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001942:	a1 9c 7a 02 c0       	mov    eax,ds:0xc0027a9c
c0001947:	89 c1                	mov    ecx,eax
c0001949:	52                   	push   edx
c000194a:	f7 d9                	neg    ecx
c000194c:	52                   	push   edx
c000194d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001951:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001955:	21 ca                	and    edx,ecx
c0001957:	52                   	push   edx
c0001958:	50                   	push   eax
c0001959:	e8 a5 fd ff ff       	call   c0001703 <dlmemalign>
c000195e:	83 c4 1c             	add    esp,0x1c
c0001961:	c3                   	ret    

c0001962 <dlmalloc_trim>:
c0001962:	b8 40 77 02 c0       	mov    eax,0xc0027740
c0001967:	e8 75 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c000196c:	31 c0                	xor    eax,eax
c000196e:	c3                   	ret    

c000196f <dlmalloc_usable_size>:
c000196f:	53                   	push   ebx
c0001970:	31 c0                	xor    eax,eax
c0001972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001976:	85 c9                	test   ecx,ecx
c0001978:	74 24                	je     c000199e <dlmalloc_usable_size+0x2f>
c000197a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000197d:	f6 c2 02             	test   dl,0x2
c0001980:	74 08                	je     c000198a <dlmalloc_usable_size+0x1b>
c0001982:	83 e2 fc             	and    edx,0xfffffffc
c0001985:	8d 42 f8             	lea    eax,[edx-0x8]
c0001988:	eb 14                	jmp    c000199e <dlmalloc_usable_size+0x2f>
c000198a:	89 d3                	mov    ebx,edx
c000198c:	31 c0                	xor    eax,eax
c000198e:	83 e3 fe             	and    ebx,0xfffffffe
c0001991:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001996:	74 06                	je     c000199e <dlmalloc_usable_size+0x2f>
c0001998:	83 e2 fc             	and    edx,0xfffffffc
c000199b:	8d 42 fc             	lea    eax,[edx-0x4]
c000199e:	5b                   	pop    ebx
c000199f:	c3                   	ret    

c00019a0 <dlmallinfo>:
c00019a0:	55                   	push   ebp
c00019a1:	57                   	push   edi
c00019a2:	56                   	push   esi
c00019a3:	53                   	push   ebx
c00019a4:	83 ec 08             	sub    esp,0x8
c00019a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019ab:	83 3d 6c 77 02 c0 00 	cmp    DWORD PTR ds:0xc002776c,0x0
c00019b2:	75 0a                	jne    c00019be <dlmallinfo+0x1e>
c00019b4:	b8 40 77 02 c0       	mov    eax,0xc0027740
c00019b9:	e8 23 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c00019be:	a1 6c 77 02 c0       	mov    eax,ds:0xc002776c
c00019c3:	31 ed                	xor    ebp,ebp
c00019c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c8:	31 c9                	xor    ecx,ecx
c00019ca:	83 e0 fc             	and    eax,0xfffffffc
c00019cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d1:	31 c0                	xor    eax,eax
c00019d3:	8b 14 85 44 77 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd88bc]
c00019da:	85 d2                	test   edx,edx
c00019dc:	74 0e                	je     c00019ec <dlmallinfo+0x4c>
c00019de:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019e1:	45                   	inc    ebp
c00019e2:	83 e6 fc             	and    esi,0xfffffffc
c00019e5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e8:	01 f1                	add    ecx,esi
c00019ea:	eb ee                	jmp    c00019da <dlmallinfo+0x3a>
c00019ec:	40                   	inc    eax
c00019ed:	83 f8 0a             	cmp    eax,0xa
c00019f0:	75 e1                	jne    c00019d3 <dlmallinfo+0x33>
c00019f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a00:	b8 74 77 02 c0       	mov    eax,0xc0027774
c0001a05:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a08:	39 f0                	cmp    eax,esi
c0001a0a:	74 10                	je     c0001a1c <dlmallinfo+0x7c>
c0001a0c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a0f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a12:	83 e7 fc             	and    edi,0xfffffffc
c0001a15:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a18:	01 fa                	add    edx,edi
c0001a1a:	eb ec                	jmp    c0001a08 <dlmallinfo+0x68>
c0001a1c:	83 c0 08             	add    eax,0x8
c0001a1f:	3d 6c 7a 02 c0       	cmp    eax,0xc0027a6c
c0001a24:	75 df                	jne    c0001a05 <dlmallinfo+0x65>
c0001a26:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a29:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a2c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a2f:	a1 a8 7a 02 c0       	mov    eax,ds:0xc0027aa8
c0001a34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a37:	89 03                	mov    DWORD PTR [ebx],eax
c0001a39:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a3c:	8b 35 90 7a 02 c0    	mov    esi,DWORD PTR ds:0xc0027a90
c0001a42:	29 d0                	sub    eax,edx
c0001a44:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a4a:	8b 35 a4 7a 02 c0    	mov    esi,DWORD PTR ds:0xc0027aa4
c0001a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a54:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a57:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a5a:	8b 35 b4 7a 02 c0    	mov    esi,DWORD PTR ds:0xc0027ab4
c0001a60:	89 d8                	mov    eax,ebx
c0001a62:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a65:	83 c4 08             	add    esp,0x8
c0001a68:	5b                   	pop    ebx
c0001a69:	5e                   	pop    esi
c0001a6a:	5f                   	pop    edi
c0001a6b:	5d                   	pop    ebp
c0001a6c:	c2 04 00             	ret    0x4

c0001a6f <dlmalloc_stats>:
c0001a6f:	83 ec 30             	sub    esp,0x30
c0001a72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a76:	50                   	push   eax
c0001a77:	e8 24 ff ff ff       	call   c00019a0 <dlmallinfo>
c0001a7c:	83 c4 30             	add    esp,0x30
c0001a7f:	c3                   	ret    

c0001a80 <dlmallopt>:
c0001a80:	56                   	push   esi
c0001a81:	b8 40 77 02 c0       	mov    eax,0xc0027740
c0001a86:	53                   	push   ebx
c0001a87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a8f:	e8 4d f1 ff ff       	call   c0000be1 <malloc_consolidate>
c0001a94:	8d 46 04             	lea    eax,[esi+0x4]
c0001a97:	83 f8 05             	cmp    eax,0x5
c0001a9a:	77 67                	ja     c0001b03 <dlmallopt+0x83>
c0001a9c:	ff 24 85 e4 33 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdcc1c]
c0001aa3:	83 fb 50             	cmp    ebx,0x50
c0001aa6:	77 5b                	ja     c0001b03 <dlmallopt+0x83>
c0001aa8:	ba 08 00 00 00       	mov    edx,0x8
c0001aad:	85 db                	test   ebx,ebx
c0001aaf:	74 12                	je     c0001ac3 <dlmallopt+0x43>
c0001ab1:	83 c3 0b             	add    ebx,0xb
c0001ab4:	ba 10 00 00 00       	mov    edx,0x10
c0001ab9:	83 fb 0f             	cmp    ebx,0xf
c0001abc:	76 05                	jbe    c0001ac3 <dlmallopt+0x43>
c0001abe:	89 da                	mov    edx,ebx
c0001ac0:	83 e2 f8             	and    edx,0xfffffff8
c0001ac3:	a1 40 77 02 c0       	mov    eax,ds:0xc0027740
c0001ac8:	83 e0 03             	and    eax,0x3
c0001acb:	09 d0                	or     eax,edx
c0001acd:	a3 40 77 02 c0       	mov    ds:0xc0027740,eax
c0001ad2:	eb 31                	jmp    c0001b05 <dlmallopt+0x85>
c0001ad4:	89 1d 84 7a 02 c0    	mov    DWORD PTR ds:0xc0027a84,ebx
c0001ada:	eb 06                	jmp    c0001ae2 <dlmallopt+0x62>
c0001adc:	89 1d 88 7a 02 c0    	mov    DWORD PTR ds:0xc0027a88,ebx
c0001ae2:	be 01 00 00 00       	mov    esi,0x1
c0001ae7:	eb 1c                	jmp    c0001b05 <dlmallopt+0x85>
c0001ae9:	89 1d 8c 7a 02 c0    	mov    DWORD PTR ds:0xc0027a8c,ebx
c0001aef:	eb f1                	jmp    c0001ae2 <dlmallopt+0x62>
c0001af1:	31 f6                	xor    esi,esi
c0001af3:	85 db                	test   ebx,ebx
c0001af5:	75 0e                	jne    c0001b05 <dlmallopt+0x85>
c0001af7:	c7 05 94 7a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027a94,0x0
c0001b01:	eb df                	jmp    c0001ae2 <dlmallopt+0x62>
c0001b03:	31 f6                	xor    esi,esi
c0001b05:	89 f0                	mov    eax,esi
c0001b07:	5b                   	pop    ebx
c0001b08:	5e                   	pop    esi
c0001b09:	c3                   	ret    

c0001b0a <disk_status>:
c0001b0a:	31 c0                	xor    eax,eax
c0001b0c:	c3                   	ret    

c0001b0d <disk_initialize>:
c0001b0d:	31 c0                	xor    eax,eax
c0001b0f:	c3                   	ret    

c0001b10 <disk_read>:
c0001b10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b15:	0f b6 04 85 a0 91 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6e60]
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	e9 32 9a 01 00       	jmp    c001b558 <fatWrapperReadDisk>

c0001b26 <disk_write>:
c0001b26:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b2b:	0f b6 04 85 a0 91 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6e60]
c0001b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b37:	e9 64 9a 01 00       	jmp    c001b5a0 <fatWrapperWriteDisk>

c0001b3c <disk_ioctl>:
c0001b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b45:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b4a:	0f b6 04 85 a0 91 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6e60]
c0001b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b56:	e9 8d 9a 01 00       	jmp    c001b5e8 <fatWrapperIoctl>

c0001b5b <ld_word>:
c0001b5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b62:	c1 e2 08             	shl    edx,0x8
c0001b65:	09 d0                	or     eax,edx
c0001b67:	c3                   	ret    

c0001b68 <ld_dword>:
c0001b68:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b6c:	89 d1                	mov    ecx,edx
c0001b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b72:	c1 e1 08             	shl    ecx,0x8
c0001b75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b78:	09 ca                	or     edx,ecx
c0001b7a:	c1 e2 08             	shl    edx,0x8
c0001b7d:	09 d0                	or     eax,edx
c0001b7f:	c3                   	ret    

c0001b80 <ld_qword>:
c0001b80:	57                   	push   edi
c0001b81:	56                   	push   esi
c0001b82:	53                   	push   ebx
c0001b83:	31 db                	xor    ebx,ebx
c0001b85:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b88:	89 df                	mov    edi,ebx
c0001b8a:	89 ce                	mov    esi,ecx
c0001b8c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b94:	c1 e6 08             	shl    esi,0x8
c0001b97:	09 f2                	or     edx,esi
c0001b99:	89 d6                	mov    esi,edx
c0001b9b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba3:	c1 e6 08             	shl    esi,0x8
c0001ba6:	09 f2                	or     edx,esi
c0001ba8:	89 d6                	mov    esi,edx
c0001baa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bae:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bb5:	c1 e6 08             	shl    esi,0x8
c0001bb8:	89 fb                	mov    ebx,edi
c0001bba:	09 f2                	or     edx,esi
c0001bbc:	89 d1                	mov    ecx,edx
c0001bbe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bc2:	c1 e1 08             	shl    ecx,0x8
c0001bc5:	89 da                	mov    edx,ebx
c0001bc7:	09 c8                	or     eax,ecx
c0001bc9:	5b                   	pop    ebx
c0001bca:	5e                   	pop    esi
c0001bcb:	5f                   	pop    edi
c0001bcc:	c3                   	ret    

c0001bcd <st_word>:
c0001bcd:	66 89 10             	mov    WORD PTR [eax],dx
c0001bd0:	c3                   	ret    

c0001bd1 <st_dword>:
c0001bd1:	89 10                	mov    DWORD PTR [eax],edx
c0001bd3:	c3                   	ret    

c0001bd4 <st_qword>:
c0001bd4:	89 10                	mov    DWORD PTR [eax],edx
c0001bd6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd9:	c3                   	ret    

c0001bda <mem_cpy>:
c0001bda:	85 c9                	test   ecx,ecx
c0001bdc:	74 10                	je     c0001bee <mem_cpy+0x14>
c0001bde:	57                   	push   edi
c0001bdf:	01 c1                	add    ecx,eax
c0001be1:	56                   	push   esi
c0001be2:	89 c7                	mov    edi,eax
c0001be4:	89 d6                	mov    esi,edx
c0001be6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001be7:	39 f9                	cmp    ecx,edi
c0001be9:	75 fb                	jne    c0001be6 <mem_cpy+0xc>
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	c3                   	ret    
c0001bee:	c3                   	ret    

c0001bef <mem_set>:
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	40                   	inc    eax
c0001bf2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bf5:	39 c8                	cmp    eax,ecx
c0001bf7:	75 f8                	jne    c0001bf1 <mem_set+0x2>
c0001bf9:	c3                   	ret    

c0001bfa <mem_cmp>:
c0001bfa:	57                   	push   edi
c0001bfb:	56                   	push   esi
c0001bfc:	89 c6                	mov    esi,eax
c0001bfe:	53                   	push   ebx
c0001bff:	46                   	inc    esi
c0001c00:	42                   	inc    edx
c0001c01:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c05:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c09:	29 fb                	sub    ebx,edi
c0001c0b:	89 cf                	mov    edi,ecx
c0001c0d:	29 f7                	sub    edi,esi
c0001c0f:	01 c7                	add    edi,eax
c0001c11:	74 04                	je     c0001c17 <mem_cmp+0x1d>
c0001c13:	85 db                	test   ebx,ebx
c0001c15:	74 e8                	je     c0001bff <mem_cmp+0x5>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	5b                   	pop    ebx
c0001c1a:	5e                   	pop    esi
c0001c1b:	5f                   	pop    edi
c0001c1c:	c3                   	ret    

c0001c1d <chk_chr>:
c0001c1d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c23:	74 07                	je     c0001c2c <chk_chr+0xf>
c0001c25:	39 d1                	cmp    ecx,edx
c0001c27:	74 03                	je     c0001c2c <chk_chr+0xf>
c0001c29:	40                   	inc    eax
c0001c2a:	eb f1                	jmp    c0001c1d <chk_chr>
c0001c2c:	89 c8                	mov    eax,ecx
c0001c2e:	c3                   	ret    

c0001c2f <dbc_1st>:
c0001c2f:	31 c0                	xor    eax,eax
c0001c31:	c3                   	ret    

c0001c32 <dbc_2nd>:
c0001c32:	31 c0                	xor    eax,eax
c0001c34:	c3                   	ret    

c0001c35 <tchar2uni>:
c0001c35:	57                   	push   edi
c0001c36:	89 c7                	mov    edi,eax
c0001c38:	56                   	push   esi
c0001c39:	53                   	push   ebx
c0001c3a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c3c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c3e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c41:	84 c9                	test   cl,cl
c0001c43:	78 0a                	js     c0001c4f <tchar2uni+0x1a>
c0001c45:	0f b6 d1             	movzx  edx,cl
c0001c48:	89 f3                	mov    ebx,esi
c0001c4a:	e9 9f 00 00 00       	jmp    c0001cee <tchar2uni+0xb9>
c0001c4f:	88 ca                	mov    dl,cl
c0001c51:	83 e2 e0             	and    edx,0xffffffe0
c0001c54:	80 fa c0             	cmp    dl,0xc0
c0001c57:	75 0c                	jne    c0001c65 <tchar2uni+0x30>
c0001c59:	89 ca                	mov    edx,ecx
c0001c5b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c60:	83 e2 1f             	and    edx,0x1f
c0001c63:	eb 2e                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c65:	88 ca                	mov    dl,cl
c0001c67:	83 e2 f0             	and    edx,0xfffffff0
c0001c6a:	80 fa e0             	cmp    dl,0xe0
c0001c6d:	75 0c                	jne    c0001c7b <tchar2uni+0x46>
c0001c6f:	89 ca                	mov    edx,ecx
c0001c71:	b9 02 00 00 00       	mov    ecx,0x2
c0001c76:	83 e2 0f             	and    edx,0xf
c0001c79:	eb 18                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c7b:	88 ca                	mov    dl,cl
c0001c7d:	83 e2 f8             	and    edx,0xfffffff8
c0001c80:	88 d0                	mov    al,dl
c0001c82:	83 ca ff             	or     edx,0xffffffff
c0001c85:	3c f0                	cmp    al,0xf0
c0001c87:	75 6c                	jne    c0001cf5 <tchar2uni+0xc0>
c0001c89:	89 ca                	mov    edx,ecx
c0001c8b:	b9 03 00 00 00       	mov    ecx,0x3
c0001c90:	83 e2 07             	and    edx,0x7
c0001c93:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c97:	46                   	inc    esi
c0001c98:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c9b:	88 c8                	mov    al,cl
c0001c9d:	83 e0 c0             	and    eax,0xffffffc0
c0001ca0:	3c 80                	cmp    al,0x80
c0001ca2:	75 4e                	jne    c0001cf2 <tchar2uni+0xbd>
c0001ca4:	c1 e2 06             	shl    edx,0x6
c0001ca7:	83 e1 3f             	and    ecx,0x3f
c0001caa:	09 ca                	or     edx,ecx
c0001cac:	39 de                	cmp    esi,ebx
c0001cae:	75 e7                	jne    c0001c97 <tchar2uni+0x62>
c0001cb0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cb3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb9:	77 37                	ja     c0001cf2 <tchar2uni+0xbd>
c0001cbb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cc1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cc7:	76 29                	jbe    c0001cf2 <tchar2uni+0xbd>
c0001cc9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ccf:	76 1d                	jbe    c0001cee <tchar2uni+0xb9>
c0001cd1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001cd7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cdd:	c1 e1 06             	shl    ecx,0x6
c0001ce0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ce6:	09 ca                	or     edx,ecx
c0001ce8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cee:	89 1f                	mov    DWORD PTR [edi],ebx
c0001cf0:	eb 03                	jmp    c0001cf5 <tchar2uni+0xc0>
c0001cf2:	83 ca ff             	or     edx,0xffffffff
c0001cf5:	5b                   	pop    ebx
c0001cf6:	89 d0                	mov    eax,edx
c0001cf8:	5e                   	pop    esi
c0001cf9:	5f                   	pop    edi
c0001cfa:	c3                   	ret    

c0001cfb <put_utf>:
c0001cfb:	53                   	push   ebx
c0001cfc:	83 f8 7f             	cmp    eax,0x7f
c0001cff:	89 c3                	mov    ebx,eax
c0001d01:	b0 00                	mov    al,0x0
c0001d03:	77 11                	ja     c0001d16 <put_utf+0x1b>
c0001d05:	85 c9                	test   ecx,ecx
c0001d07:	0f 84 e5 00 00 00    	je     c0001df2 <put_utf+0xf7>
c0001d0d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d0f:	b0 01                	mov    al,0x1
c0001d11:	e9 dc 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d1c:	77 23                	ja     c0001d41 <put_utf+0x46>
c0001d1e:	83 f9 01             	cmp    ecx,0x1
c0001d21:	0f 86 cb 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d27:	89 d8                	mov    eax,ebx
c0001d29:	83 e3 3f             	and    ebx,0x3f
c0001d2c:	c1 e8 06             	shr    eax,0x6
c0001d2f:	83 cb 80             	or     ebx,0xffffff80
c0001d32:	83 c8 c0             	or     eax,0xffffffc0
c0001d35:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d38:	88 02                	mov    BYTE PTR [edx],al
c0001d3a:	b0 02                	mov    al,0x2
c0001d3c:	e9 b1 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d41:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d47:	77 40                	ja     c0001d89 <put_utf+0x8e>
c0001d49:	83 f9 02             	cmp    ecx,0x2
c0001d4c:	0f 86 a0 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d52:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d58:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d5e:	0f 86 8e 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d64:	89 d8                	mov    eax,ebx
c0001d66:	c1 e8 0c             	shr    eax,0xc
c0001d69:	83 c8 e0             	or     eax,0xffffffe0
c0001d6c:	88 02                	mov    BYTE PTR [edx],al
c0001d6e:	89 d8                	mov    eax,ebx
c0001d70:	83 e3 3f             	and    ebx,0x3f
c0001d73:	c1 e8 06             	shr    eax,0x6
c0001d76:	83 cb 80             	or     ebx,0xffffff80
c0001d79:	83 e0 3f             	and    eax,0x3f
c0001d7c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d7f:	83 c8 80             	or     eax,0xffffff80
c0001d82:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d85:	b0 03                	mov    al,0x3
c0001d87:	eb 69                	jmp    c0001df2 <put_utf+0xf7>
c0001d89:	83 f9 03             	cmp    ecx,0x3
c0001d8c:	76 64                	jbe    c0001df2 <put_utf+0xf7>
c0001d8e:	89 d9                	mov    ecx,ebx
c0001d90:	0f b7 c3             	movzx  eax,bx
c0001d93:	66 31 c9             	xor    cx,cx
c0001d96:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d9c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001da2:	c1 e9 06             	shr    ecx,0x6
c0001da5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dab:	77 43                	ja     c0001df0 <put_utf+0xf5>
c0001dad:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001db3:	77 3b                	ja     c0001df0 <put_utf+0xf5>
c0001db5:	09 cb                	or     ebx,ecx
c0001db7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dbd:	89 d8                	mov    eax,ebx
c0001dbf:	c1 e8 12             	shr    eax,0x12
c0001dc2:	83 c8 f0             	or     eax,0xfffffff0
c0001dc5:	88 02                	mov    BYTE PTR [edx],al
c0001dc7:	89 d8                	mov    eax,ebx
c0001dc9:	c1 e8 0c             	shr    eax,0xc
c0001dcc:	83 e0 3f             	and    eax,0x3f
c0001dcf:	83 c8 80             	or     eax,0xffffff80
c0001dd2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dd5:	89 d8                	mov    eax,ebx
c0001dd7:	83 e3 3f             	and    ebx,0x3f
c0001dda:	c1 e8 06             	shr    eax,0x6
c0001ddd:	83 cb 80             	or     ebx,0xffffff80
c0001de0:	83 e0 3f             	and    eax,0x3f
c0001de3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001de6:	83 c8 80             	or     eax,0xffffff80
c0001de9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dec:	b0 04                	mov    al,0x4
c0001dee:	eb 02                	jmp    c0001df2 <put_utf+0xf7>
c0001df0:	31 c0                	xor    eax,eax
c0001df2:	5b                   	pop    ebx
c0001df3:	c3                   	ret    

c0001df4 <clst2sect>:
c0001df4:	89 c1                	mov    ecx,eax
c0001df6:	83 ea 02             	sub    edx,0x2
c0001df9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001dfc:	83 e8 02             	sub    eax,0x2
c0001dff:	39 d0                	cmp    eax,edx
c0001e01:	76 0d                	jbe    c0001e10 <clst2sect+0x1c>
c0001e03:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e07:	f7 e2                	mul    edx
c0001e09:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e0c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e0f:	c3                   	ret    
c0001e10:	31 c0                	xor    eax,eax
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	c3                   	ret    

c0001e15 <clmt_clust>:
c0001e15:	57                   	push   edi
c0001e16:	89 cf                	mov    edi,ecx
c0001e18:	56                   	push   esi
c0001e19:	89 d6                	mov    esi,edx
c0001e1b:	53                   	push   ebx
c0001e1c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e20:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e23:	89 f2                	mov    edx,esi
c0001e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e27:	c1 ef 09             	shr    edi,0x9
c0001e2a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e2e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e31:	89 f9                	mov    ecx,edi
c0001e33:	31 ff                	xor    edi,edi
c0001e35:	57                   	push   edi
c0001e36:	56                   	push   esi
c0001e37:	51                   	push   ecx
c0001e38:	52                   	push   edx
c0001e39:	e8 d6 05 02 00       	call   c0022414 <__udivdi3>
c0001e3e:	83 c4 10             	add    esp,0x10
c0001e41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e43:	85 d2                	test   edx,edx
c0001e45:	74 10                	je     c0001e57 <clmt_clust+0x42>
c0001e47:	39 d0                	cmp    eax,edx
c0001e49:	72 07                	jb     c0001e52 <clmt_clust+0x3d>
c0001e4b:	29 d0                	sub    eax,edx
c0001e4d:	83 c3 08             	add    ebx,0x8
c0001e50:	eb ef                	jmp    c0001e41 <clmt_clust+0x2c>
c0001e52:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e55:	89 c2                	mov    edx,eax
c0001e57:	5b                   	pop    ebx
c0001e58:	89 d0                	mov    eax,edx
c0001e5a:	5e                   	pop    esi
c0001e5b:	5f                   	pop    edi
c0001e5c:	c3                   	ret    

c0001e5d <pick_lfn>:
c0001e5d:	55                   	push   ebp
c0001e5e:	57                   	push   edi
c0001e5f:	56                   	push   esi
c0001e60:	89 d6                	mov    esi,edx
c0001e62:	53                   	push   ebx
c0001e63:	89 c3                	mov    ebx,eax
c0001e65:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e68:	e8 ee fc ff ff       	call   c0001b5b <ld_word>
c0001e6d:	66 85 c0             	test   ax,ax
c0001e70:	74 04                	je     c0001e76 <pick_lfn+0x19>
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	eb 5c                	jmp    c0001ed2 <pick_lfn+0x75>
c0001e76:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e79:	bd 01 00 00 00       	mov    ebp,0x1
c0001e7e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e81:	31 ff                	xor    edi,edi
c0001e83:	49                   	dec    ecx
c0001e84:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e87:	0f b6 87 00 35 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdcb00]
c0001e8e:	01 f0                	add    eax,esi
c0001e90:	e8 c6 fc ff ff       	call   c0001b5b <ld_word>
c0001e95:	66 85 ed             	test   bp,bp
c0001e98:	74 11                	je     c0001eab <pick_lfn+0x4e>
c0001e9a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ea0:	77 d0                	ja     c0001e72 <pick_lfn+0x15>
c0001ea2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ea6:	89 c5                	mov    ebp,eax
c0001ea8:	41                   	inc    ecx
c0001ea9:	eb 04                	jmp    c0001eaf <pick_lfn+0x52>
c0001eab:	66 40                	inc    ax
c0001ead:	75 c3                	jne    c0001e72 <pick_lfn+0x15>
c0001eaf:	47                   	inc    edi
c0001eb0:	83 ff 0d             	cmp    edi,0xd
c0001eb3:	75 d2                	jne    c0001e87 <pick_lfn+0x2a>
c0001eb5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb8:	74 13                	je     c0001ecd <pick_lfn+0x70>
c0001eba:	66 85 ed             	test   bp,bp
c0001ebd:	74 0e                	je     c0001ecd <pick_lfn+0x70>
c0001ebf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ec5:	77 ab                	ja     c0001e72 <pick_lfn+0x15>
c0001ec7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ecd:	b8 01 00 00 00       	mov    eax,0x1
c0001ed2:	5b                   	pop    ebx
c0001ed3:	5e                   	pop    esi
c0001ed4:	5f                   	pop    edi
c0001ed5:	5d                   	pop    ebp
c0001ed6:	c3                   	ret    

c0001ed7 <put_lfn>:
c0001ed7:	55                   	push   ebp
c0001ed8:	31 ed                	xor    ebp,ebp
c0001eda:	57                   	push   edi
c0001edb:	89 d7                	mov    edi,edx
c0001edd:	56                   	push   esi
c0001ede:	31 f6                	xor    esi,esi
c0001ee0:	53                   	push   ebx
c0001ee1:	83 ec 08             	sub    esp,0x8
c0001ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ee7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eef:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ef5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001efb:	31 d2                	xor    edx,edx
c0001efd:	e8 cb fc ff ff       	call   c0001bcd <st_word>
c0001f02:	0f b6 d9             	movzx  ebx,cl
c0001f05:	4b                   	dec    ebx
c0001f06:	6b db 0d             	imul   ebx,ebx,0xd
c0001f09:	66 83 fe ff          	cmp    si,0xffff
c0001f0d:	74 08                	je     c0001f17 <put_lfn+0x40>
c0001f0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f12:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f16:	43                   	inc    ebx
c0001f17:	0f b6 85 00 35 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdcb00]
c0001f1e:	0f b7 d6             	movzx  edx,si
c0001f21:	01 f8                	add    eax,edi
c0001f23:	e8 a5 fc ff ff       	call   c0001bcd <st_word>
c0001f28:	66 85 f6             	test   si,si
c0001f2b:	75 03                	jne    c0001f30 <put_lfn+0x59>
c0001f2d:	83 ce ff             	or     esi,0xffffffff
c0001f30:	45                   	inc    ebp
c0001f31:	83 fd 0d             	cmp    ebp,0xd
c0001f34:	75 d3                	jne    c0001f09 <put_lfn+0x32>
c0001f36:	66 46                	inc    si
c0001f38:	74 0a                	je     c0001f44 <put_lfn+0x6d>
c0001f3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f3d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f42:	75 09                	jne    c0001f4d <put_lfn+0x76>
c0001f44:	88 c8                	mov    al,cl
c0001f46:	83 c8 40             	or     eax,0x40
c0001f49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f4d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f51:	88 07                	mov    BYTE PTR [edi],al
c0001f53:	83 c4 08             	add    esp,0x8
c0001f56:	5b                   	pop    ebx
c0001f57:	5e                   	pop    esi
c0001f58:	5f                   	pop    edi
c0001f59:	5d                   	pop    ebp
c0001f5a:	c3                   	ret    

c0001f5b <gen_numname>:
c0001f5b:	57                   	push   edi
c0001f5c:	89 cf                	mov    edi,ecx
c0001f5e:	56                   	push   esi
c0001f5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f64:	53                   	push   ebx
c0001f65:	89 c6                	mov    esi,eax
c0001f67:	83 ec 10             	sub    esp,0x10
c0001f6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f6e:	e8 67 fc ff ff       	call   c0001bda <mem_cpy>
c0001f73:	83 fb 05             	cmp    ebx,0x5
c0001f76:	76 2d                	jbe    c0001fa5 <gen_numname+0x4a>
c0001f78:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 25                	je     c0001fa5 <gen_numname+0x4a>
c0001f80:	83 c7 02             	add    edi,0x2
c0001f83:	ba 10 00 00 00       	mov    edx,0x10
c0001f88:	01 db                	add    ebx,ebx
c0001f8a:	89 c1                	mov    ecx,eax
c0001f8c:	66 d1 e8             	shr    ax,1
c0001f8f:	83 e1 01             	and    ecx,0x1
c0001f92:	01 cb                	add    ebx,ecx
c0001f94:	0f ba e3 10          	bt     ebx,0x10
c0001f98:	73 06                	jae    c0001fa0 <gen_numname+0x45>
c0001f9a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fa0:	4a                   	dec    edx
c0001fa1:	75 e5                	jne    c0001f88 <gen_numname+0x2d>
c0001fa3:	eb d3                	jmp    c0001f78 <gen_numname+0x1d>
c0001fa5:	b8 07 00 00 00       	mov    eax,0x7
c0001faa:	88 d9                	mov    cl,bl
c0001fac:	83 e1 0f             	and    ecx,0xf
c0001faf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fb2:	80 fa 39             	cmp    dl,0x39
c0001fb5:	76 03                	jbe    c0001fba <gen_numname+0x5f>
c0001fb7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fba:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fbd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fc1:	89 da                	mov    edx,ebx
c0001fc3:	c1 ea 04             	shr    edx,0x4
c0001fc6:	83 fb 0f             	cmp    ebx,0xf
c0001fc9:	76 06                	jbe    c0001fd1 <gen_numname+0x76>
c0001fcb:	89 c8                	mov    eax,ecx
c0001fcd:	89 d3                	mov    ebx,edx
c0001fcf:	eb d9                	jmp    c0001faa <gen_numname+0x4f>
c0001fd1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fd6:	31 d2                	xor    edx,edx
c0001fd8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fdb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fde:	39 ca                	cmp    edx,ecx
c0001fe0:	73 18                	jae    c0001ffa <gen_numname+0x9f>
c0001fe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe5:	3c 20                	cmp    al,0x20
c0001fe7:	74 11                	je     c0001ffa <gen_numname+0x9f>
c0001fe9:	e8 41 fc ff ff       	call   c0001c2f <dbc_1st>
c0001fee:	85 c0                	test   eax,eax
c0001ff0:	74 05                	je     c0001ff7 <gen_numname+0x9c>
c0001ff2:	39 d3                	cmp    ebx,edx
c0001ff4:	74 04                	je     c0001ffa <gen_numname+0x9f>
c0001ff6:	42                   	inc    edx
c0001ff7:	42                   	inc    edx
c0001ff8:	eb e1                	jmp    c0001fdb <gen_numname+0x80>
c0001ffa:	b0 20                	mov    al,0x20
c0001ffc:	83 f9 07             	cmp    ecx,0x7
c0001fff:	77 05                	ja     c0002006 <gen_numname+0xab>
c0002001:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002005:	41                   	inc    ecx
c0002006:	42                   	inc    edx
c0002007:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000200b:	83 fa 07             	cmp    edx,0x7
c000200e:	76 ea                	jbe    c0001ffa <gen_numname+0x9f>
c0002010:	83 c4 10             	add    esp,0x10
c0002013:	5b                   	pop    ebx
c0002014:	5e                   	pop    esi
c0002015:	5f                   	pop    edi
c0002016:	c3                   	ret    

c0002017 <sum_sfn>:
c0002017:	31 c9                	xor    ecx,ecx
c0002019:	31 d2                	xor    edx,edx
c000201b:	d0 ca                	ror    dl,1
c000201d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002020:	41                   	inc    ecx
c0002021:	83 f9 0b             	cmp    ecx,0xb
c0002024:	75 f5                	jne    c000201b <sum_sfn+0x4>
c0002026:	88 d0                	mov    al,dl
c0002028:	c3                   	ret    

c0002029 <xdir_sum>:
c0002029:	56                   	push   esi
c000202a:	31 c9                	xor    ecx,ecx
c000202c:	53                   	push   ebx
c000202d:	31 d2                	xor    edx,edx
c000202f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002033:	43                   	inc    ebx
c0002034:	c1 e3 05             	shl    ebx,0x5
c0002037:	83 fa 02             	cmp    edx,0x2
c000203a:	74 0b                	je     c0002047 <xdir_sum+0x1e>
c000203c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002040:	66 d1 c9             	ror    cx,1
c0002043:	01 f1                	add    ecx,esi
c0002045:	eb 05                	jmp    c000204c <xdir_sum+0x23>
c0002047:	ba 03 00 00 00       	mov    edx,0x3
c000204c:	42                   	inc    edx
c000204d:	39 d3                	cmp    ebx,edx
c000204f:	77 e6                	ja     c0002037 <xdir_sum+0xe>
c0002051:	89 c8                	mov    eax,ecx
c0002053:	5b                   	pop    ebx
c0002054:	5e                   	pop    esi
c0002055:	c3                   	ret    

c0002056 <xsum32>:
c0002056:	d1 ca                	ror    edx,1
c0002058:	0f b6 c0             	movzx  eax,al
c000205b:	01 d0                	add    eax,edx
c000205d:	c3                   	ret    

c000205e <get_xfileinfo>:
c000205e:	55                   	push   ebp
c000205f:	31 c9                	xor    ecx,ecx
c0002061:	57                   	push   edi
c0002062:	bd 40 00 00 00       	mov    ebp,0x40
c0002067:	56                   	push   esi
c0002068:	31 ff                	xor    edi,edi
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 0c             	sub    esp,0xc
c0002070:	89 d3                	mov    ebx,edx
c0002072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002079:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000207d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002080:	76 6d                	jbe    c00020ef <get_xfileinfo+0x91>
c0002082:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002088:	76 0b                	jbe    c0002095 <get_xfileinfo+0x37>
c000208a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000208e:	bf 01 00 00 00       	mov    edi,0x1
c0002093:	eb 63                	jmp    c00020f8 <get_xfileinfo+0x9a>
c0002095:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000209b:	75 03                	jne    c00020a0 <get_xfileinfo+0x42>
c000209d:	83 c5 02             	add    ebp,0x2
c00020a0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020a3:	83 c5 02             	add    ebp,0x2
c00020a6:	e8 b0 fa ff ff       	call   c0001b5b <ld_word>
c00020ab:	ff 04 24             	inc    DWORD PTR [esp]
c00020ae:	66 85 c9             	test   cx,cx
c00020b1:	75 0d                	jne    c00020c0 <get_xfileinfo+0x62>
c00020b3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020be:	76 2b                	jbe    c00020eb <get_xfileinfo+0x8d>
c00020c0:	c1 e1 10             	shl    ecx,0x10
c00020c3:	ba ff 00 00 00       	mov    edx,0xff
c00020c8:	0f b7 c0             	movzx  eax,ax
c00020cb:	29 fa                	sub    edx,edi
c00020cd:	09 c8                	or     eax,ecx
c00020cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020d3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020db:	e8 1b fc ff ff       	call   c0001cfb <put_utf>
c00020e0:	84 c0                	test   al,al
c00020e2:	74 a6                	je     c000208a <get_xfileinfo+0x2c>
c00020e4:	0f b6 c0             	movzx  eax,al
c00020e7:	01 c7                	add    edi,eax
c00020e9:	31 c0                	xor    eax,eax
c00020eb:	89 c1                	mov    ecx,eax
c00020ed:	eb 8a                	jmp    c0002079 <get_xfileinfo+0x1b>
c00020ef:	85 ff                	test   edi,edi
c00020f1:	74 97                	je     c000208a <get_xfileinfo+0x2c>
c00020f3:	66 85 c9             	test   cx,cx
c00020f6:	75 92                	jne    c000208a <get_xfileinfo+0x2c>
c00020f8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020fd:	31 c0                	xor    eax,eax
c00020ff:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002103:	31 d2                	xor    edx,edx
c0002105:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002108:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000210b:	80 e1 10             	and    cl,0x10
c000210e:	75 08                	jne    c0002118 <get_xfileinfo+0xba>
c0002110:	8d 46 38             	lea    eax,[esi+0x38]
c0002113:	e8 68 fa ff ff       	call   c0001b80 <ld_qword>
c0002118:	89 03                	mov    DWORD PTR [ebx],eax
c000211a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000211d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002120:	e8 36 fa ff ff       	call   c0001b5b <ld_word>
c0002125:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002129:	8d 46 0e             	lea    eax,[esi+0xe]
c000212c:	e8 2a fa ff ff       	call   c0001b5b <ld_word>
c0002131:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002135:	83 c4 0c             	add    esp,0xc
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	5d                   	pop    ebp
c000213c:	c3                   	ret    

c000213d <get_ldnumber>:
c000213d:	8b 10                	mov    edx,DWORD PTR [eax]
c000213f:	85 d2                	test   edx,edx
c0002141:	74 14                	je     c0002157 <get_ldnumber+0x1a>
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d3                	mov    ebx,edx
c0002147:	43                   	inc    ebx
c0002148:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214b:	80 f9 1f             	cmp    cl,0x1f
c000214e:	76 0d                	jbe    c000215d <get_ldnumber+0x20>
c0002150:	80 f9 3a             	cmp    cl,0x3a
c0002153:	75 f2                	jne    c0002147 <get_ldnumber+0xa>
c0002155:	eb 0a                	jmp    c0002161 <get_ldnumber+0x24>
c0002157:	83 c9 ff             	or     ecx,0xffffffff
c000215a:	89 c8                	mov    eax,ecx
c000215c:	c3                   	ret    
c000215d:	31 c9                	xor    ecx,ecx
c000215f:	eb 24                	jmp    c0002185 <get_ldnumber+0x48>
c0002161:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002164:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002167:	80 f9 09             	cmp    cl,0x9
c000216a:	77 16                	ja     c0002182 <get_ldnumber+0x45>
c000216c:	83 c2 02             	add    edx,0x2
c000216f:	83 c9 ff             	or     ecx,0xffffffff
c0002172:	39 d3                	cmp    ebx,edx
c0002174:	75 0f                	jne    c0002185 <get_ldnumber+0x48>
c0002176:	89 f2                	mov    edx,esi
c0002178:	89 18                	mov    DWORD PTR [eax],ebx
c000217a:	0f be ca             	movsx  ecx,dl
c000217d:	83 e9 30             	sub    ecx,0x30
c0002180:	eb 03                	jmp    c0002185 <get_ldnumber+0x48>
c0002182:	83 c9 ff             	or     ecx,0xffffffff
c0002185:	89 c8                	mov    eax,ecx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <crc32>:
c000218a:	56                   	push   esi
c000218b:	89 d6                	mov    esi,edx
c000218d:	53                   	push   ebx
c000218e:	b2 01                	mov    dl,0x1
c0002190:	bb 08 00 00 00       	mov    ebx,0x8
c0002195:	89 f1                	mov    ecx,esi
c0002197:	84 d1                	test   cl,dl
c0002199:	0f 95 c1             	setne  cl
c000219c:	0f b6 c9             	movzx  ecx,cl
c000219f:	31 c1                	xor    ecx,eax
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	d1 e8                	shr    eax,1
c00021a5:	80 e1 01             	and    cl,0x1
c00021a8:	74 05                	je     c00021af <crc32+0x25>
c00021aa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021af:	d1 e2                	shl    edx,1
c00021b1:	4b                   	dec    ebx
c00021b2:	75 e1                	jne    c0002195 <crc32+0xb>
c00021b4:	5b                   	pop    ebx
c00021b5:	5e                   	pop    esi
c00021b6:	c3                   	ret    

c00021b7 <test_gpt_header>:
c00021b7:	55                   	push   ebp
c00021b8:	b9 10 00 00 00       	mov    ecx,0x10
c00021bd:	57                   	push   edi
c00021be:	ba 00 34 02 c0       	mov    edx,0xc0023400
c00021c3:	56                   	push   esi
c00021c4:	31 ff                	xor    edi,edi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	e8 2c fa ff ff       	call   c0001bfa <mem_cmp>
c00021ce:	85 c0                	test   eax,eax
c00021d0:	75 55                	jne    c0002227 <test_gpt_header+0x70>
c00021d2:	89 c7                	mov    edi,eax
c00021d4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d9:	83 ce ff             	or     esi,0xffffffff
c00021dc:	31 d2                	xor    edx,edx
c00021de:	83 fd 03             	cmp    ebp,0x3
c00021e1:	76 05                	jbe    c00021e8 <test_gpt_header+0x31>
c00021e3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e8:	89 f0                	mov    eax,esi
c00021ea:	45                   	inc    ebp
c00021eb:	e8 9a ff ff ff       	call   c000218a <crc32>
c00021f0:	83 fd 4c             	cmp    ebp,0x4c
c00021f3:	89 c6                	mov    esi,eax
c00021f5:	75 e5                	jne    c00021dc <test_gpt_header+0x25>
c00021f7:	8d 43 10             	lea    eax,[ebx+0x10]
c00021fa:	f7 d6                	not    esi
c00021fc:	e8 67 f9 ff ff       	call   c0001b68 <ld_dword>
c0002201:	39 c6                	cmp    esi,eax
c0002203:	75 22                	jne    c0002227 <test_gpt_header+0x70>
c0002205:	8d 43 54             	lea    eax,[ebx+0x54]
c0002208:	e8 5b f9 ff ff       	call   c0001b68 <ld_dword>
c000220d:	83 c0 80             	add    eax,0xffffff80
c0002210:	75 15                	jne    c0002227 <test_gpt_header+0x70>
c0002212:	8d 43 50             	lea    eax,[ebx+0x50]
c0002215:	e8 4e f9 ff ff       	call   c0001b68 <ld_dword>
c000221a:	3d 80 00 00 00       	cmp    eax,0x80
c000221f:	0f 96 c0             	setbe  al
c0002222:	0f b6 c0             	movzx  eax,al
c0002225:	89 c7                	mov    edi,eax
c0002227:	5b                   	pop    ebx
c0002228:	89 f8                	mov    eax,edi
c000222a:	5e                   	pop    esi
c000222b:	5f                   	pop    edi
c000222c:	5d                   	pop    ebp
c000222d:	c3                   	ret    

c000222e <make_rand>:
c000222e:	56                   	push   esi
c000222f:	85 c0                	test   eax,eax
c0002231:	53                   	push   ebx
c0002232:	75 05                	jne    c0002239 <make_rand+0xb>
c0002234:	b8 01 00 00 00       	mov    eax,0x1
c0002239:	01 d1                	add    ecx,edx
c000223b:	bb 08 00 00 00       	mov    ebx,0x8
c0002240:	89 c6                	mov    esi,eax
c0002242:	d1 e8                	shr    eax,1
c0002244:	83 e6 01             	and    esi,0x1
c0002247:	85 f6                	test   esi,esi
c0002249:	74 05                	je     c0002250 <make_rand+0x22>
c000224b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002250:	4b                   	dec    ebx
c0002251:	75 ed                	jne    c0002240 <make_rand+0x12>
c0002253:	42                   	inc    edx
c0002254:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002257:	39 ca                	cmp    edx,ecx
c0002259:	75 e0                	jne    c000223b <make_rand+0xd>
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	c3                   	ret    

c000225e <validate>:
c000225e:	56                   	push   esi
c000225f:	53                   	push   ebx
c0002260:	89 d6                	mov    esi,edx
c0002262:	51                   	push   ecx
c0002263:	85 c0                	test   eax,eax
c0002265:	75 09                	jne    c0002270 <validate+0x12>
c0002267:	b8 09 00 00 00       	mov    eax,0x9
c000226c:	31 c9                	xor    ecx,ecx
c000226e:	eb 2f                	jmp    c000229f <validate+0x41>
c0002270:	89 c3                	mov    ebx,eax
c0002272:	8b 00                	mov    eax,DWORD PTR [eax]
c0002274:	85 c0                	test   eax,eax
c0002276:	74 ef                	je     c0002267 <validate+0x9>
c0002278:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000227b:	74 ea                	je     c0002267 <validate+0x9>
c000227d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002281:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002285:	75 e0                	jne    c0002267 <validate+0x9>
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000228e:	50                   	push   eax
c000228f:	e8 76 f8 ff ff       	call   c0001b0a <disk_status>
c0002294:	83 c4 10             	add    esp,0x10
c0002297:	a8 01                	test   al,0x1
c0002299:	75 cc                	jne    c0002267 <validate+0x9>
c000229b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000229d:	31 c0                	xor    eax,eax
c000229f:	89 0e                	mov    DWORD PTR [esi],ecx
c00022a1:	5a                   	pop    edx
c00022a2:	5b                   	pop    ebx
c00022a3:	5e                   	pop    esi
c00022a4:	c3                   	ret    

c00022a5 <sync_window>:
c00022a5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a9:	0f 84 85 00 00 00    	je     c0002334 <sync_window+0x8f>
c00022af:	55                   	push   ebp
c00022b0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022b3:	57                   	push   edi
c00022b4:	56                   	push   esi
c00022b5:	53                   	push   ebx
c00022b6:	89 c3                	mov    ebx,eax
c00022b8:	83 ec 28             	sub    esp,0x28
c00022bb:	6a 01                	push   0x1
c00022bd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022c0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022c3:	55                   	push   ebp
c00022c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c8:	50                   	push   eax
c00022c9:	e8 58 f8 ff ff       	call   c0001b26 <disk_write>
c00022ce:	83 c4 20             	add    esp,0x20
c00022d1:	ba 01 00 00 00       	mov    edx,0x1
c00022d6:	85 c0                	test   eax,eax
c00022d8:	75 50                	jne    c000232a <sync_window+0x85>
c00022da:	31 ff                	xor    edi,edi
c00022dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022e7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022ea:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022ed:	89 c6                	mov    esi,eax
c00022ef:	89 d7                	mov    edi,edx
c00022f1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022f4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022fb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022ff:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002303:	73 23                	jae    c0002328 <sync_window+0x83>
c0002305:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002309:	75 1d                	jne    c0002328 <sync_window+0x83>
c000230b:	83 ec 0c             	sub    esp,0xc
c000230e:	6a 01                	push   0x1
c0002310:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002314:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002318:	52                   	push   edx
c0002319:	50                   	push   eax
c000231a:	55                   	push   ebp
c000231b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000231f:	50                   	push   eax
c0002320:	e8 01 f8 ff ff       	call   c0001b26 <disk_write>
c0002325:	83 c4 20             	add    esp,0x20
c0002328:	31 d2                	xor    edx,edx
c000232a:	83 c4 1c             	add    esp,0x1c
c000232d:	89 d0                	mov    eax,edx
c000232f:	5b                   	pop    ebx
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    
c0002334:	31 d2                	xor    edx,edx
c0002336:	89 d0                	mov    eax,edx
c0002338:	c3                   	ret    

c0002339 <move_window>:
c0002339:	56                   	push   esi
c000233a:	53                   	push   ebx
c000233b:	89 c3                	mov    ebx,eax
c000233d:	83 ec 14             	sub    esp,0x14
c0002340:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002343:	75 07                	jne    c000234c <move_window+0x13>
c0002345:	31 f6                	xor    esi,esi
c0002347:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000234a:	74 59                	je     c00023a5 <move_window+0x6c>
c000234c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002350:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002354:	89 d8                	mov    eax,ebx
c0002356:	e8 4a ff ff ff       	call   c00022a5 <sync_window>
c000235b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000235f:	89 c6                	mov    esi,eax
c0002361:	85 c0                	test   eax,eax
c0002363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002367:	75 3c                	jne    c00023a5 <move_window+0x6c>
c0002369:	83 ec 0c             	sub    esp,0xc
c000236c:	8d 43 54             	lea    eax,[ebx+0x54]
c000236f:	6a 01                	push   0x1
c0002371:	51                   	push   ecx
c0002372:	52                   	push   edx
c0002373:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002377:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000237b:	50                   	push   eax
c000237c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002380:	50                   	push   eax
c0002381:	e8 8a f7 ff ff       	call   c0001b10 <disk_read>
c0002386:	83 c4 20             	add    esp,0x20
c0002389:	85 c0                	test   eax,eax
c000238b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000238f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002393:	74 0a                	je     c000239f <move_window+0x66>
c0002395:	83 ca ff             	or     edx,0xffffffff
c0002398:	be 01 00 00 00       	mov    esi,0x1
c000239d:	89 d1                	mov    ecx,edx
c000239f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023a2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023a5:	89 f0                	mov    eax,esi
c00023a7:	83 c4 14             	add    esp,0x14
c00023aa:	5b                   	pop    ebx
c00023ab:	5e                   	pop    esi
c00023ac:	c3                   	ret    

c00023ad <check_fs>:
c00023ad:	53                   	push   ebx
c00023ae:	89 c3                	mov    ebx,eax
c00023b0:	83 ec 08             	sub    esp,0x8
c00023b3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023b7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023be:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023c5:	e8 6f ff ff ff       	call   c0002339 <move_window>
c00023ca:	ba 04 00 00 00       	mov    edx,0x4
c00023cf:	85 c0                	test   eax,eax
c00023d1:	0f 85 89 00 00 00    	jne    c0002460 <check_fs+0xb3>
c00023d7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023dd:	e8 79 f7 ff ff       	call   c0001b5b <ld_word>
c00023e2:	ba 03 00 00 00       	mov    edx,0x3
c00023e7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023eb:	75 73                	jne    c0002460 <check_fs+0xb3>
c00023ed:	ba 20 35 02 c0       	mov    edx,0xc0023520
c00023f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00023f5:	b9 0b 00 00 00       	mov    ecx,0xb
c00023fa:	e8 fb f7 ff ff       	call   c0001bfa <mem_cmp>
c00023ff:	ba 01 00 00 00       	mov    edx,0x1
c0002404:	85 c0                	test   eax,eax
c0002406:	74 58                	je     c0002460 <check_fs+0xb3>
c0002408:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000240b:	8d 50 18             	lea    edx,[eax+0x18]
c000240e:	80 fa 01             	cmp    dl,0x1
c0002411:	76 09                	jbe    c000241c <check_fs+0x6f>
c0002413:	ba 02 00 00 00       	mov    edx,0x2
c0002418:	3c eb                	cmp    al,0xeb
c000241a:	75 44                	jne    c0002460 <check_fs+0xb3>
c000241c:	ba 5c 5f 02 c0       	mov    edx,0xc0025f5c
c0002421:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002427:	b9 03 00 00 00       	mov    ecx,0x3
c000242c:	e8 c9 f7 ff ff       	call   c0001bfa <mem_cmp>
c0002431:	31 d2                	xor    edx,edx
c0002433:	85 c0                	test   eax,eax
c0002435:	74 29                	je     c0002460 <check_fs+0xb3>
c0002437:	ba 2c 35 02 c0       	mov    edx,0xc002352c
c000243c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002442:	b9 05 00 00 00       	mov    ecx,0x5
c0002447:	e8 ae f7 ff ff       	call   c0001bfa <mem_cmp>
c000244c:	31 d2                	xor    edx,edx
c000244e:	85 c0                	test   eax,eax
c0002450:	74 0e                	je     c0002460 <check_fs+0xb3>
c0002452:	31 d2                	xor    edx,edx
c0002454:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000245b:	0f 95 c2             	setne  dl
c000245e:	01 d2                	add    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	83 c4 08             	add    esp,0x8
c0002465:	5b                   	pop    ebx
c0002466:	c3                   	ret    

c0002467 <find_volume>:
c0002467:	55                   	push   ebp
c0002468:	31 c9                	xor    ecx,ecx
c000246a:	57                   	push   edi
c000246b:	56                   	push   esi
c000246c:	89 d6                	mov    esi,edx
c000246e:	53                   	push   ebx
c000246f:	31 d2                	xor    edx,edx
c0002471:	83 ec 3c             	sub    esp,0x3c
c0002474:	89 c3                	mov    ebx,eax
c0002476:	e8 32 ff ff ff       	call   c00023ad <check_fs>
c000247b:	83 f8 02             	cmp    eax,0x2
c000247e:	74 0e                	je     c000248e <find_volume+0x27>
c0002480:	0f 87 5d 01 00 00    	ja     c00025e3 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 84 55 01 00 00    	je     c00025e3 <find_volume+0x17c>
c000248e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002495:	0f 85 dd 00 00 00    	jne    c0002578 <find_volume+0x111>
c000249b:	31 c9                	xor    ecx,ecx
c000249d:	ba 01 00 00 00       	mov    edx,0x1
c00024a2:	89 d8                	mov    eax,ebx
c00024a4:	e8 90 fe ff ff       	call   c0002339 <move_window>
c00024a9:	85 c0                	test   eax,eax
c00024ab:	74 0a                	je     c00024b7 <find_volume+0x50>
c00024ad:	b8 04 00 00 00       	mov    eax,0x4
c00024b2:	e9 2c 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024b7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ba:	89 e8                	mov    eax,ebp
c00024bc:	e8 f6 fc ff ff       	call   c00021b7 <test_gpt_header>
c00024c1:	85 c0                	test   eax,eax
c00024c3:	75 0a                	jne    c00024cf <find_volume+0x68>
c00024c5:	b8 03 00 00 00       	mov    eax,0x3
c00024ca:	e9 14 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024cf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024d5:	e8 8e f6 ff ff       	call   c0001b68 <ld_dword>
c00024da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024de:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024e4:	e8 97 f6 ff ff       	call   c0001b80 <ld_qword>
c00024e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002501:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002505:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002509:	74 ba                	je     c00024c5 <find_volume+0x5e>
c000250b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000250f:	31 c9                	xor    ecx,ecx
c0002511:	c1 e7 07             	shl    edi,0x7
c0002514:	89 d8                	mov    eax,ebx
c0002516:	89 fa                	mov    edx,edi
c0002518:	c1 ea 09             	shr    edx,0x9
c000251b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000251f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002523:	e8 11 fe ff ff       	call   c0002339 <move_window>
c0002528:	85 c0                	test   eax,eax
c000252a:	75 81                	jne    c00024ad <find_volume+0x46>
c000252c:	81 e7 80 01 00 00    	and    edi,0x180
c0002532:	b9 10 00 00 00       	mov    ecx,0x10
c0002537:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000253b:	ba 10 35 02 c0       	mov    edx,0xc0023510
c0002540:	e8 b5 f6 ff ff       	call   c0001bfa <mem_cmp>
c0002545:	85 c0                	test   eax,eax
c0002547:	75 29                	jne    c0002572 <find_volume+0x10b>
c0002549:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000254d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002551:	e8 2a f6 ff ff       	call   c0001b80 <ld_qword>
c0002556:	89 d1                	mov    ecx,edx
c0002558:	89 c2                	mov    edx,eax
c000255a:	89 d8                	mov    eax,ebx
c000255c:	e8 4c fe ff ff       	call   c00023ad <check_fs>
c0002561:	85 f6                	test   esi,esi
c0002563:	75 07                	jne    c000256c <find_volume+0x105>
c0002565:	83 f8 01             	cmp    eax,0x1
c0002568:	77 08                	ja     c0002572 <find_volume+0x10b>
c000256a:	eb 77                	jmp    c00025e3 <find_volume+0x17c>
c000256c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002570:	74 71                	je     c00025e3 <find_volume+0x17c>
c0002572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002576:	eb 89                	jmp    c0002501 <find_volume+0x9a>
c0002578:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000257c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002582:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000258c:	89 cd                	mov    ebp,ecx
c000258e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002592:	89 f8                	mov    eax,edi
c0002594:	83 c7 10             	add    edi,0x10
c0002597:	e8 cc f5 ff ff       	call   c0001b68 <ld_dword>
c000259c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025a0:	89 01                	mov    DWORD PTR [ecx],eax
c00025a2:	83 c1 04             	add    ecx,0x4
c00025a5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a9:	75 e3                	jne    c000258e <find_volume+0x127>
c00025ab:	31 ff                	xor    edi,edi
c00025ad:	85 f6                	test   esi,esi
c00025af:	74 03                	je     c00025b4 <find_volume+0x14d>
c00025b1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025b4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b8:	85 d2                	test   edx,edx
c00025ba:	74 14                	je     c00025d0 <find_volume+0x169>
c00025bc:	31 c9                	xor    ecx,ecx
c00025be:	89 d8                	mov    eax,ebx
c00025c0:	e8 e8 fd ff ff       	call   c00023ad <check_fs>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 19                	jbe    c00025e3 <find_volume+0x17c>
c00025ca:	85 f6                	test   esi,esi
c00025cc:	74 0f                	je     c00025dd <find_volume+0x176>
c00025ce:	eb 13                	jmp    c00025e3 <find_volume+0x17c>
c00025d0:	85 f6                	test   esi,esi
c00025d2:	0f 85 ed fe ff ff    	jne    c00024c5 <find_volume+0x5e>
c00025d8:	b8 03 00 00 00       	mov    eax,0x3
c00025dd:	47                   	inc    edi
c00025de:	83 ff 03             	cmp    edi,0x3
c00025e1:	76 d1                	jbe    c00025b4 <find_volume+0x14d>
c00025e3:	83 c4 3c             	add    esp,0x3c
c00025e6:	5b                   	pop    ebx
c00025e7:	5e                   	pop    esi
c00025e8:	5f                   	pop    edi
c00025e9:	5d                   	pop    ebp
c00025ea:	c3                   	ret    

c00025eb <mount_volume>:
c00025eb:	55                   	push   ebp
c00025ec:	57                   	push   edi
c00025ed:	89 cf                	mov    edi,ecx
c00025ef:	56                   	push   esi
c00025f0:	53                   	push   ebx
c00025f1:	bb 0b 00 00 00       	mov    ebx,0xb
c00025f6:	83 ec 3c             	sub    esp,0x3c
c00025f9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002603:	e8 35 fb ff ff       	call   c000213d <get_ldnumber>
c0002608:	85 c0                	test   eax,eax
c000260a:	0f 88 3a 05 00 00    	js     c0002b4a <mount_volume+0x55f>
c0002610:	8b 2c 85 e0 7a 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd8520]
c0002617:	89 c6                	mov    esi,eax
c0002619:	bb 0c 00 00 00       	mov    ebx,0xc
c000261e:	85 ed                	test   ebp,ebp
c0002620:	0f 84 24 05 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000262a:	83 e7 fe             	and    edi,0xfffffffe
c000262d:	89 2a                	mov    DWORD PTR [edx],ebp
c000262f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002633:	74 32                	je     c0002667 <mount_volume+0x7c>
c0002635:	83 ec 0c             	sub    esp,0xc
c0002638:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000263c:	50                   	push   eax
c000263d:	e8 c8 f4 ff ff       	call   c0001b0a <disk_status>
c0002642:	83 c4 10             	add    esp,0x10
c0002645:	a8 01                	test   al,0x1
c0002647:	75 1e                	jne    c0002667 <mount_volume+0x7c>
c0002649:	31 db                	xor    ebx,ebx
c000264b:	89 f9                	mov    ecx,edi
c000264d:	84 c9                	test   cl,cl
c000264f:	0f 84 f5 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002655:	a8 04                	test   al,0x4
c0002657:	0f 84 ed 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c000265d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002662:	e9 e3 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c0002667:	83 ec 0c             	sub    esp,0xc
c000266a:	89 f0                	mov    eax,esi
c000266c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002670:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002673:	0f b6 f0             	movzx  esi,al
c0002676:	bb 03 00 00 00       	mov    ebx,0x3
c000267b:	56                   	push   esi
c000267c:	e8 8c f4 ff ff       	call   c0001b0d <disk_initialize>
c0002681:	83 c4 10             	add    esp,0x10
c0002684:	a8 01                	test   al,0x1
c0002686:	0f 85 be 04 00 00    	jne    c0002b4a <mount_volume+0x55f>
c000268c:	89 f9                	mov    ecx,edi
c000268e:	84 c9                	test   cl,cl
c0002690:	74 04                	je     c0002696 <mount_volume+0xab>
c0002692:	a8 04                	test   al,0x4
c0002694:	75 c7                	jne    c000265d <mount_volume+0x72>
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 e8                	mov    eax,ebp
c000269a:	e8 c8 fd ff ff       	call   c0002467 <find_volume>
c000269f:	83 f8 04             	cmp    eax,0x4
c00026a2:	75 0a                	jne    c00026ae <mount_volume+0xc3>
c00026a4:	bb 01 00 00 00       	mov    ebx,0x1
c00026a9:	e9 9c 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026ae:	83 f8 01             	cmp    eax,0x1
c00026b1:	76 0a                	jbe    c00026bd <mount_volume+0xd2>
c00026b3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b8:	e9 8d 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026bd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026c0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026cb:	75 17                	jne    c00026e4 <mount_volume+0xf9>
c00026cd:	b8 0b 00 00 00       	mov    eax,0xb
c00026d2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026d7:	75 da                	jne    c00026b3 <mount_volume+0xc8>
c00026d9:	40                   	inc    eax
c00026da:	83 f8 40             	cmp    eax,0x40
c00026dd:	75 f3                	jne    c00026d2 <mount_volume+0xe7>
c00026df:	e9 5a 02 00 00       	jmp    c000293e <mount_volume+0x353>
c00026e4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026e7:	e8 6f f4 ff ff       	call   c0001b5b <ld_word>
c00026ec:	66 3d 00 02          	cmp    ax,0x200
c00026f0:	75 c1                	jne    c00026b3 <mount_volume+0xc8>
c00026f2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026f5:	e8 61 f4 ff ff       	call   c0001b5b <ld_word>
c00026fa:	0f b7 c0             	movzx  eax,ax
c00026fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002701:	85 c0                	test   eax,eax
c0002703:	75 0c                	jne    c0002711 <mount_volume+0x126>
c0002705:	8d 45 78             	lea    eax,[ebp+0x78]
c0002708:	e8 5b f4 ff ff       	call   c0001b68 <ld_dword>
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002715:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002718:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000271b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000271f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002722:	48                   	dec    eax
c0002723:	3c 01                	cmp    al,0x1
c0002725:	77 8c                	ja     c00026b3 <mount_volume+0xc8>
c0002727:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000272b:	89 c3                	mov    ebx,eax
c000272d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002731:	66 85 c0             	test   ax,ax
c0002734:	0f 84 79 ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c000273a:	8d 40 ff             	lea    eax,[eax-0x1]
c000273d:	85 d8                	test   eax,ebx
c000273f:	0f 85 6e ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002745:	8d 45 65             	lea    eax,[ebp+0x65]
c0002748:	e8 0e f4 ff ff       	call   c0001b5b <ld_word>
c000274d:	89 c7                	mov    edi,eax
c000274f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002753:	a8 0f                	test   al,0xf
c0002755:	0f 85 58 ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c000275b:	8d 45 67             	lea    eax,[ebp+0x67]
c000275e:	e8 f8 f3 ff ff       	call   c0001b5b <ld_word>
c0002763:	0f b7 f0             	movzx  esi,ax
c0002766:	85 f6                	test   esi,esi
c0002768:	75 0a                	jne    c0002774 <mount_volume+0x189>
c000276a:	8d 45 74             	lea    eax,[ebp+0x74]
c000276d:	e8 f6 f3 ff ff       	call   c0001b68 <ld_dword>
c0002772:	89 c6                	mov    esi,eax
c0002774:	8d 45 62             	lea    eax,[ebp+0x62]
c0002777:	e8 df f3 ff ff       	call   c0001b5b <ld_word>
c000277c:	66 85 c0             	test   ax,ax
c000277f:	0f 84 2e ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002785:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000278a:	0f b7 c8             	movzx  ecx,ax
c000278d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002796:	89 fa                	mov    edx,edi
c0002798:	66 c1 ea 04          	shr    dx,0x4
c000279c:	0f b7 d2             	movzx  edx,dx
c000279f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027a3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027aa:	39 c6                	cmp    esi,eax
c00027ac:	0f 82 01 ff ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027b2:	29 c6                	sub    esi,eax
c00027b4:	31 d2                	xor    edx,edx
c00027b6:	89 f0                	mov    eax,esi
c00027b8:	f7 f3                	div    ebx
c00027ba:	39 de                	cmp    esi,ebx
c00027bc:	0f 82 f1 fe ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027c2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027c7:	0f 87 e6 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00027cd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027d2:	0f 86 63 03 00 00    	jbe    c0002b3b <mount_volume+0x550>
c00027d8:	bb 03 00 00 00       	mov    ebx,0x3
c00027dd:	8d 70 02             	lea    esi,[eax+0x2]
c00027e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027eb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027ee:	31 d2                	xor    edx,edx
c00027f0:	89 c8                	mov    eax,ecx
c00027f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002801:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002805:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002808:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000280b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000280f:	31 d2                	xor    edx,edx
c0002811:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002815:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002819:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000281f:	83 fb 03             	cmp    ebx,0x3
c0002822:	75 2b                	jne    c000284f <mount_volume+0x264>
c0002824:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002827:	e8 2f f3 ff ff       	call   c0001b5b <ld_word>
c000282c:	66 09 c7             	or     di,ax
c000282f:	0f 85 7e fe ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002835:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000283b:	c1 e6 02             	shl    esi,0x2
c000283e:	e8 25 f3 ff ff       	call   c0001b68 <ld_dword>
c0002843:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000284a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000284d:	eb 30                	jmp    c000287f <mount_volume+0x294>
c000284f:	66 85 ff             	test   di,di
c0002852:	0f 84 5b fe ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002858:	31 d2                	xor    edx,edx
c000285a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000285e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002862:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002866:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002869:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000286c:	83 fb 02             	cmp    ebx,0x2
c000286f:	75 04                	jne    c0002875 <mount_volume+0x28a>
c0002871:	01 f6                	add    esi,esi
c0002873:	eb 0a                	jmp    c000287f <mount_volume+0x294>
c0002875:	8d 04 76             	lea    eax,[esi+esi*2]
c0002878:	83 e6 01             	and    esi,0x1
c000287b:	d1 e8                	shr    eax,1
c000287d:	01 c6                	add    esi,eax
c000287f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002885:	c1 ee 09             	shr    esi,0x9
c0002888:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000288c:	0f 87 21 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c0002892:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002899:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028a0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028a4:	83 fb 03             	cmp    ebx,0x3
c00028a7:	75 7a                	jne    c0002923 <mount_volume+0x338>
c00028a9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028af:	e8 a7 f2 ff ff       	call   c0001b5b <ld_word>
c00028b4:	66 48                	dec    ax
c00028b6:	75 6b                	jne    c0002923 <mount_volume+0x338>
c00028b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028c0:	83 c2 01             	add    edx,0x1
c00028c3:	89 e8                	mov    eax,ebp
c00028c5:	83 d1 00             	adc    ecx,0x0
c00028c8:	e8 6c fa ff ff       	call   c0002339 <move_window>
c00028cd:	85 c0                	test   eax,eax
c00028cf:	75 52                	jne    c0002923 <mount_volume+0x338>
c00028d1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028d5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028db:	e8 7b f2 ff ff       	call   c0001b5b <ld_word>
c00028e0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028e4:	75 3d                	jne    c0002923 <mount_volume+0x338>
c00028e6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e9:	e8 7a f2 ff ff       	call   c0001b68 <ld_dword>
c00028ee:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028f3:	75 2e                	jne    c0002923 <mount_volume+0x338>
c00028f5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028fb:	e8 68 f2 ff ff       	call   c0001b68 <ld_dword>
c0002900:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002905:	75 1c                	jne    c0002923 <mount_volume+0x338>
c0002907:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000290d:	e8 56 f2 ff ff       	call   c0001b68 <ld_dword>
c0002912:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002915:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000291b:	e8 48 f2 ff ff       	call   c0001b68 <ld_dword>
c0002920:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002923:	66 a1 c0 7a 02 c0    	mov    ax,ds:0xc0027ac0
c0002929:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000292c:	40                   	inc    eax
c000292d:	31 db                	xor    ebx,ebx
c000292f:	66 a3 c0 7a 02 c0    	mov    ds:0xc0027ac0,ax
c0002935:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002939:	e9 0c 02 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c000293e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002944:	e8 12 f2 ff ff       	call   c0001b5b <ld_word>
c0002949:	66 3d 00 01          	cmp    ax,0x100
c000294d:	0f 85 60 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002953:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000295a:	0f 85 53 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002960:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002966:	e8 15 f2 ff ff       	call   c0001b80 <ld_qword>
c000296b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000296f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002973:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002979:	e8 ea f1 ff ff       	call   c0001b68 <ld_dword>
c000297e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002981:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002987:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000298a:	fe c8                	dec    al
c000298c:	0f 85 21 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002992:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002999:	bb 01 00 00 00       	mov    ebx,0x1
c000299e:	d3 e3                	shl    ebx,cl
c00029a0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029a4:	66 85 db             	test   bx,bx
c00029a7:	0f 84 06 fd ff ff    	je     c00026b3 <mount_volume+0xc8>
c00029ad:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029b3:	e8 b0 f1 ff ff       	call   c0001b68 <ld_dword>
c00029b8:	89 c6                	mov    esi,eax
c00029ba:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029bf:	0f 87 ee fc ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00029c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c9:	8d 40 02             	lea    eax,[eax+0x2]
c00029cc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029cf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029d6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029df:	e8 84 f1 ff ff       	call   c0001b68 <ld_dword>
c00029e4:	31 d2                	xor    edx,edx
c00029e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029f6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029fc:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a02:	e8 61 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a07:	31 d2                	xor    edx,edx
c0002a09:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a15:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a18:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a1b:	0f b7 c3             	movzx  eax,bx
c0002a1e:	31 d2                	xor    edx,edx
c0002a20:	0f af f0             	imul   esi,eax
c0002a23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a27:	89 f0                	mov    eax,esi
c0002a29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a2d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a31:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a35:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a39:	39 c1                	cmp    ecx,eax
c0002a3b:	89 df                	mov    edi,ebx
c0002a3d:	19 d7                	sbb    edi,edx
c0002a3f:	0f 82 6e fc ff ff    	jb     c00026b3 <mount_volume+0xc8>
c0002a45:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a4b:	31 db                	xor    ebx,ebx
c0002a4d:	e8 16 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a52:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a59:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a64:	85 db                	test   ebx,ebx
c0002a66:	75 39                	jne    c0002aa1 <mount_volume+0x4b6>
c0002a68:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a6c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a70:	0f 86 3d fc ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002a76:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a79:	31 ff                	xor    edi,edi
c0002a7b:	89 e8                	mov    eax,ebp
c0002a7d:	e8 72 f3 ff ff       	call   c0001df4 <clst2sect>
c0002a82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a86:	01 c6                	add    esi,eax
c0002a88:	89 e8                	mov    eax,ebp
c0002a8a:	11 d7                	adc    edi,edx
c0002a8c:	89 f2                	mov    edx,esi
c0002a8e:	89 f9                	mov    ecx,edi
c0002a90:	e8 a4 f8 ff ff       	call   c0002339 <move_window>
c0002a95:	85 c0                	test   eax,eax
c0002a97:	0f 85 07 fc ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002a9d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002aa1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002aa6:	74 0b                	je     c0002ab3 <mount_volume+0x4c8>
c0002aa8:	83 c3 20             	add    ebx,0x20
c0002aab:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ab1:	eb b1                	jmp    c0002a64 <mount_volume+0x479>
c0002ab3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ab6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aba:	e8 a9 f0 ff ff       	call   c0001b68 <ld_dword>
c0002abf:	89 c3                	mov    ebx,eax
c0002ac1:	83 f8 01             	cmp    eax,0x1
c0002ac4:	0f 86 e9 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002aca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002acd:	0f 86 e0 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002ad3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ad6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ada:	0f af c2             	imul   eax,edx
c0002add:	31 d2                	xor    edx,edx
c0002adf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ae2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002ae5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002aeb:	31 c9                	xor    ecx,ecx
c0002aed:	89 da                	mov    edx,ebx
c0002aef:	89 e8                	mov    eax,ebp
c0002af1:	c1 ea 07             	shr    edx,0x7
c0002af4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002af7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002afa:	e8 3a f8 ff ff       	call   c0002339 <move_window>
c0002aff:	85 c0                	test   eax,eax
c0002b01:	0f 85 9d fb ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002b07:	89 d8                	mov    eax,ebx
c0002b09:	83 e0 7f             	and    eax,0x7f
c0002b0c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b0f:	e8 54 f0 ff ff       	call   c0001b68 <ld_dword>
c0002b14:	83 f8 ff             	cmp    eax,0xffffffff
c0002b17:	74 0a                	je     c0002b23 <mount_volume+0x538>
c0002b19:	43                   	inc    ebx
c0002b1a:	39 d8                	cmp    eax,ebx
c0002b1c:	74 cd                	je     c0002aeb <mount_volume+0x500>
c0002b1e:	e9 90 fb ff ff       	jmp    c00026b3 <mount_volume+0xc8>
c0002b23:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b2a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b31:	bb 04 00 00 00       	mov    ebx,0x4
c0002b36:	e9 e8 fd ff ff       	jmp    c0002923 <mount_volume+0x338>
c0002b3b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b40:	19 db                	sbb    ebx,ebx
c0002b42:	83 c3 02             	add    ebx,0x2
c0002b45:	e9 93 fc ff ff       	jmp    c00027dd <mount_volume+0x1f2>
c0002b4a:	83 c4 3c             	add    esp,0x3c
c0002b4d:	89 d8                	mov    eax,ebx
c0002b4f:	5b                   	pop    ebx
c0002b50:	5e                   	pop    esi
c0002b51:	5f                   	pop    edi
c0002b52:	5d                   	pop    ebp
c0002b53:	c3                   	ret    

c0002b54 <find_bitmap>:
c0002b54:	55                   	push   ebp
c0002b55:	57                   	push   edi
c0002b56:	89 c7                	mov    edi,eax
c0002b58:	56                   	push   esi
c0002b59:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b5c:	53                   	push   ebx
c0002b5d:	83 ec 1c             	sub    esp,0x1c
c0002b60:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b67:	83 e8 02             	sub    eax,0x2
c0002b6a:	39 f0                	cmp    eax,esi
c0002b6c:	77 02                	ja     c0002b70 <find_bitmap+0x1c>
c0002b6e:	31 f6                	xor    esi,esi
c0002b70:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b74:	89 f3                	mov    ebx,esi
c0002b76:	31 ed                	xor    ebp,ebp
c0002b78:	31 c9                	xor    ecx,ecx
c0002b7a:	89 da                	mov    edx,ebx
c0002b7c:	89 f8                	mov    eax,edi
c0002b7e:	c1 ea 0c             	shr    edx,0xc
c0002b81:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b84:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b87:	e8 ad f7 ff ff       	call   c0002339 <move_window>
c0002b8c:	85 c0                	test   eax,eax
c0002b8e:	75 68                	jne    c0002bf8 <find_bitmap+0xa4>
c0002b90:	89 da                	mov    edx,ebx
c0002b92:	89 d9                	mov    ecx,ebx
c0002b94:	c1 ea 03             	shr    edx,0x3
c0002b97:	83 e1 07             	and    ecx,0x7
c0002b9a:	b8 01 00 00 00       	mov    eax,0x1
c0002b9f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ba5:	d3 e0                	shl    eax,cl
c0002ba7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002baa:	83 e9 02             	sub    ecx,0x2
c0002bad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bb1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bb5:	43                   	inc    ebx
c0002bb6:	21 c1                	and    ecx,eax
c0002bb8:	d1 e0                	shl    eax,1
c0002bba:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bbe:	77 09                	ja     c0002bc9 <find_bitmap+0x75>
c0002bc0:	31 db                	xor    ebx,ebx
c0002bc2:	ba 00 02 00 00       	mov    edx,0x200
c0002bc7:	31 c0                	xor    eax,eax
c0002bc9:	84 c9                	test   cl,cl
c0002bcb:	75 10                	jne    c0002bdd <find_bitmap+0x89>
c0002bcd:	45                   	inc    ebp
c0002bce:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bd2:	75 0f                	jne    c0002be3 <find_bitmap+0x8f>
c0002bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd8:	83 c0 02             	add    eax,0x2
c0002bdb:	eb 22                	jmp    c0002bff <find_bitmap+0xab>
c0002bdd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002be1:	31 ed                	xor    ebp,ebp
c0002be3:	39 de                	cmp    esi,ebx
c0002be5:	74 16                	je     c0002bfd <find_bitmap+0xa9>
c0002be7:	84 c0                	test   al,al
c0002be9:	75 c6                	jne    c0002bb1 <find_bitmap+0x5d>
c0002beb:	42                   	inc    edx
c0002bec:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bf2:	77 84                	ja     c0002b78 <find_bitmap+0x24>
c0002bf4:	b0 01                	mov    al,0x1
c0002bf6:	eb b9                	jmp    c0002bb1 <find_bitmap+0x5d>
c0002bf8:	83 c8 ff             	or     eax,0xffffffff
c0002bfb:	eb 02                	jmp    c0002bff <find_bitmap+0xab>
c0002bfd:	31 c0                	xor    eax,eax
c0002bff:	83 c4 1c             	add    esp,0x1c
c0002c02:	5b                   	pop    ebx
c0002c03:	5e                   	pop    esi
c0002c04:	5f                   	pop    edi
c0002c05:	5d                   	pop    ebp
c0002c06:	c3                   	ret    

c0002c07 <change_bitmap>:
c0002c07:	55                   	push   ebp
c0002c08:	89 cd                	mov    ebp,ecx
c0002c0a:	57                   	push   edi
c0002c0b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c0e:	56                   	push   esi
c0002c0f:	89 c7                	mov    edi,eax
c0002c11:	53                   	push   ebx
c0002c12:	89 c8                	mov    eax,ecx
c0002c14:	83 ec 1c             	sub    esp,0x1c
c0002c17:	31 d2                	xor    edx,edx
c0002c19:	89 ce                	mov    esi,ecx
c0002c1b:	c1 e8 0c             	shr    eax,0xc
c0002c1e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c23:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c26:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c29:	c1 ee 03             	shr    esi,0x3
c0002c2c:	83 e1 07             	and    ecx,0x7
c0002c2f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c35:	d3 e3                	shl    ebx,cl
c0002c37:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c3b:	89 c1                	mov    ecx,eax
c0002c3d:	89 d3                	mov    ebx,edx
c0002c3f:	83 c1 01             	add    ecx,0x1
c0002c42:	83 d3 00             	adc    ebx,0x0
c0002c45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c4d:	89 d1                	mov    ecx,edx
c0002c4f:	89 c2                	mov    edx,eax
c0002c51:	89 f8                	mov    eax,edi
c0002c53:	e8 e1 f6 ff ff       	call   c0002339 <move_window>
c0002c58:	89 c1                	mov    ecx,eax
c0002c5a:	85 c0                	test   eax,eax
c0002c5c:	75 48                	jne    c0002ca6 <change_bitmap+0x9f>
c0002c5e:	31 d2                	xor    edx,edx
c0002c60:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c64:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c68:	0f 95 c2             	setne  dl
c0002c6b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c6f:	74 3c                	je     c0002cad <change_bitmap+0xa6>
c0002c71:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c75:	4d                   	dec    ebp
c0002c76:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c7e:	74 32                	je     c0002cb2 <change_bitmap+0xab>
c0002c80:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c84:	75 d8                	jne    c0002c5e <change_bitmap+0x57>
c0002c86:	8d 46 01             	lea    eax,[esi+0x1]
c0002c89:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c8e:	89 c3                	mov    ebx,eax
c0002c90:	31 f6                	xor    esi,esi
c0002c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c9a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ca0:	74 99                	je     c0002c3b <change_bitmap+0x34>
c0002ca2:	89 de                	mov    esi,ebx
c0002ca4:	eb b8                	jmp    c0002c5e <change_bitmap+0x57>
c0002ca6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cab:	eb 05                	jmp    c0002cb2 <change_bitmap+0xab>
c0002cad:	b9 02 00 00 00       	mov    ecx,0x2
c0002cb2:	83 c4 1c             	add    esp,0x1c
c0002cb5:	89 c8                	mov    eax,ecx
c0002cb7:	5b                   	pop    ebx
c0002cb8:	5e                   	pop    esi
c0002cb9:	5f                   	pop    edi
c0002cba:	5d                   	pop    ebp
c0002cbb:	c3                   	ret    

c0002cbc <put_fat>:
c0002cbc:	83 fa 01             	cmp    edx,0x1
c0002cbf:	0f 86 7b 01 00 00    	jbe    c0002e40 <put_fat+0x184>
c0002cc5:	55                   	push   ebp
c0002cc6:	57                   	push   edi
c0002cc7:	89 cf                	mov    edi,ecx
c0002cc9:	56                   	push   esi
c0002cca:	b9 02 00 00 00       	mov    ecx,0x2
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c6                	mov    esi,eax
c0002cd2:	83 ec 1c             	sub    esp,0x1c
c0002cd5:	89 d3                	mov    ebx,edx
c0002cd7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cda:	0f 86 68 01 00 00    	jbe    c0002e48 <put_fat+0x18c>
c0002ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0002ce2:	3c 02                	cmp    al,0x2
c0002ce4:	0f 84 c7 00 00 00    	je     c0002db1 <put_fat+0xf5>
c0002cea:	77 09                	ja     c0002cf5 <put_fat+0x39>
c0002cec:	fe c8                	dec    al
c0002cee:	74 17                	je     c0002d07 <put_fat+0x4b>
c0002cf0:	e9 53 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002cf5:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfa:	3c 04                	cmp    al,0x4
c0002cfc:	0f 86 e1 00 00 00    	jbe    c0002de3 <put_fat+0x127>
c0002d02:	e9 41 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002d07:	89 d5                	mov    ebp,edx
c0002d09:	31 c9                	xor    ecx,ecx
c0002d0b:	d1 ed                	shr    ebp,1
c0002d0d:	89 f0                	mov    eax,esi
c0002d0f:	01 d5                	add    ebp,edx
c0002d11:	89 ea                	mov    edx,ebp
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d19:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d1c:	e8 18 f6 ff ff       	call   c0002339 <move_window>
c0002d21:	89 c1                	mov    ecx,eax
c0002d23:	85 c0                	test   eax,eax
c0002d25:	0f 85 1d 01 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d2b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d32:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d35:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d3f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d43:	89 f8                	mov    eax,edi
c0002d45:	83 e3 01             	and    ebx,0x1
c0002d48:	74 0d                	je     c0002d57 <put_fat+0x9b>
c0002d4a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d4d:	89 fa                	mov    edx,edi
c0002d4f:	83 e0 0f             	and    eax,0xf
c0002d52:	c1 e2 04             	shl    edx,0x4
c0002d55:	09 d0                	or     eax,edx
c0002d57:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d5e:	31 c9                	xor    ecx,ecx
c0002d60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d64:	c1 ea 09             	shr    edx,0x9
c0002d67:	89 f0                	mov    eax,esi
c0002d69:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d6c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d6f:	e8 c5 f5 ff ff       	call   c0002339 <move_window>
c0002d74:	89 c1                	mov    ecx,eax
c0002d76:	85 c0                	test   eax,eax
c0002d78:	0f 85 ca 00 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d7e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d82:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d88:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d8c:	85 db                	test   ebx,ebx
c0002d8e:	74 07                	je     c0002d97 <put_fat+0xdb>
c0002d90:	c1 ef 04             	shr    edi,0x4
c0002d93:	89 fa                	mov    edx,edi
c0002d95:	eb 0e                	jmp    c0002da5 <put_fat+0xe9>
c0002d97:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d9a:	c1 ef 08             	shr    edi,0x8
c0002d9d:	83 e2 f0             	and    edx,0xfffffff0
c0002da0:	83 e7 0f             	and    edi,0xf
c0002da3:	09 fa                	or     edx,edi
c0002da5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dac:	e9 97 00 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002db1:	31 c9                	xor    ecx,ecx
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	89 f0                	mov    eax,esi
c0002db8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dbb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dbe:	e8 76 f5 ff ff       	call   c0002339 <move_window>
c0002dc3:	89 c1                	mov    ecx,eax
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 7f                	jne    c0002e48 <put_fat+0x18c>
c0002dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dcd:	01 db                	add    ebx,ebx
c0002dcf:	0f b7 d7             	movzx  edx,di
c0002dd2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ddc:	e8 ec ed ff ff       	call   c0001bcd <st_word>
c0002de1:	eb 53                	jmp    c0002e36 <put_fat+0x17a>
c0002de3:	31 c9                	xor    ecx,ecx
c0002de5:	c1 ea 07             	shr    edx,0x7
c0002de8:	89 f0                	mov    eax,esi
c0002dea:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ded:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002df0:	e8 44 f5 ff ff       	call   c0002339 <move_window>
c0002df5:	89 c1                	mov    ecx,eax
c0002df7:	85 c0                	test   eax,eax
c0002df9:	75 4d                	jne    c0002e48 <put_fat+0x18c>
c0002dfb:	c1 e3 02             	shl    ebx,0x2
c0002dfe:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e04:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e07:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e0b:	74 1c                	je     c0002e29 <put_fat+0x16d>
c0002e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e11:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e17:	89 d8                	mov    eax,ebx
c0002e19:	e8 4a ed ff ff       	call   c0001b68 <ld_dword>
c0002e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e22:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e27:	09 c7                	or     edi,eax
c0002e29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e2d:	89 fa                	mov    edx,edi
c0002e2f:	89 d8                	mov    eax,ebx
c0002e31:	e8 9b ed ff ff       	call   c0001bd1 <st_dword>
c0002e36:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e3e:	eb 08                	jmp    c0002e48 <put_fat+0x18c>
c0002e40:	b9 02 00 00 00       	mov    ecx,0x2
c0002e45:	89 c8                	mov    eax,ecx
c0002e47:	c3                   	ret    
c0002e48:	83 c4 1c             	add    esp,0x1c
c0002e4b:	89 c8                	mov    eax,ecx
c0002e4d:	5b                   	pop    ebx
c0002e4e:	5e                   	pop    esi
c0002e4f:	5f                   	pop    edi
c0002e50:	5d                   	pop    ebp
c0002e51:	c3                   	ret    

c0002e52 <fill_last_frag>:
c0002e52:	57                   	push   edi
c0002e53:	89 cf                	mov    edi,ecx
c0002e55:	56                   	push   esi
c0002e56:	89 d6                	mov    esi,edx
c0002e58:	53                   	push   ebx
c0002e59:	89 c3                	mov    ebx,eax
c0002e5b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	74 21                	je     c0002e83 <fill_last_frag+0x31>
c0002e62:	89 f9                	mov    ecx,edi
c0002e64:	83 f8 01             	cmp    eax,0x1
c0002e67:	76 05                	jbe    c0002e6e <fill_last_frag+0x1c>
c0002e69:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e6c:	29 c1                	sub    ecx,eax
c0002e6e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e71:	29 c2                	sub    edx,eax
c0002e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e75:	e8 42 fe ff ff       	call   c0002cbc <put_fat>
c0002e7a:	85 c0                	test   eax,eax
c0002e7c:	75 05                	jne    c0002e83 <fill_last_frag+0x31>
c0002e7e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e81:	eb d8                	jmp    c0002e5b <fill_last_frag+0x9>
c0002e83:	5b                   	pop    ebx
c0002e84:	5e                   	pop    esi
c0002e85:	5f                   	pop    edi
c0002e86:	c3                   	ret    

c0002e87 <fill_first_frag>:
c0002e87:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e8b:	75 2d                	jne    c0002eba <fill_first_frag+0x33>
c0002e8d:	57                   	push   edi
c0002e8e:	56                   	push   esi
c0002e8f:	53                   	push   ebx
c0002e90:	89 c3                	mov    ebx,eax
c0002e92:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e95:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e98:	01 d7                	add    edi,edx
c0002e9a:	39 fa                	cmp    edx,edi
c0002e9c:	74 14                	je     c0002eb2 <fill_first_frag+0x2b>
c0002e9e:	8d 72 01             	lea    esi,[edx+0x1]
c0002ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ea3:	89 f1                	mov    ecx,esi
c0002ea5:	e8 12 fe ff ff       	call   c0002cbc <put_fat>
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	85 c0                	test   eax,eax
c0002eae:	74 ea                	je     c0002e9a <fill_first_frag+0x13>
c0002eb0:	eb 0b                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eb2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eb6:	31 c0                	xor    eax,eax
c0002eb8:	eb 03                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eba:	31 c0                	xor    eax,eax
c0002ebc:	c3                   	ret    
c0002ebd:	5b                   	pop    ebx
c0002ebe:	5e                   	pop    esi
c0002ebf:	5f                   	pop    edi
c0002ec0:	c3                   	ret    

c0002ec1 <get_fat>:
c0002ec1:	83 fa 01             	cmp    edx,0x1
c0002ec4:	0f 86 db 01 00 00    	jbe    c00030a5 <get_fat+0x1e4>
c0002eca:	55                   	push   ebp
c0002ecb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002edb:	0f 86 cc 01 00 00    	jbe    c00030ad <get_fat+0x1ec>
c0002ee1:	89 c3                	mov    ebx,eax
c0002ee3:	89 d6                	mov    esi,edx
c0002ee5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ee7:	3c 02                	cmp    al,0x2
c0002ee9:	0f 84 99 00 00 00    	je     c0002f88 <get_fat+0xc7>
c0002eef:	77 09                	ja     c0002efa <get_fat+0x39>
c0002ef1:	fe c8                	dec    al
c0002ef3:	74 1a                	je     c0002f0f <get_fat+0x4e>
c0002ef5:	e9 b3 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002efa:	3c 03                	cmp    al,0x3
c0002efc:	0f 84 b5 00 00 00    	je     c0002fb7 <get_fat+0xf6>
c0002f02:	3c 04                	cmp    al,0x4
c0002f04:	0f 84 e3 00 00 00    	je     c0002fed <get_fat+0x12c>
c0002f0a:	e9 9e 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f0f:	89 d3                	mov    ebx,edx
c0002f11:	31 c9                	xor    ecx,ecx
c0002f13:	d1 eb                	shr    ebx,1
c0002f15:	89 f8                	mov    eax,edi
c0002f17:	01 d3                	add    ebx,edx
c0002f19:	89 da                	mov    edx,ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f21:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f24:	e8 10 f4 ff ff       	call   c0002339 <move_window>
c0002f29:	85 c0                	test   eax,eax
c0002f2b:	74 08                	je     c0002f35 <get_fat+0x74>
c0002f2d:	83 c9 ff             	or     ecx,0xffffffff
c0002f30:	e9 78 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f35:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f38:	31 c9                	xor    ecx,ecx
c0002f3a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f40:	89 ea                	mov    edx,ebp
c0002f42:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f46:	c1 ea 09             	shr    edx,0x9
c0002f49:	89 f8                	mov    eax,edi
c0002f4b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f4e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f51:	e8 e3 f3 ff ff       	call   c0002339 <move_window>
c0002f56:	85 c0                	test   eax,eax
c0002f58:	75 d3                	jne    c0002f2d <get_fat+0x6c>
c0002f5a:	0f b6 c3             	movzx  eax,bl
c0002f5d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f63:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f68:	c1 e3 08             	shl    ebx,0x8
c0002f6b:	09 c3                	or     ebx,eax
c0002f6d:	89 d9                	mov    ecx,ebx
c0002f6f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f75:	83 e6 01             	and    esi,0x1
c0002f78:	0f 84 2f 01 00 00    	je     c00030ad <get_fat+0x1ec>
c0002f7e:	89 d9                	mov    ecx,ebx
c0002f80:	c1 e9 04             	shr    ecx,0x4
c0002f83:	e9 25 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f88:	31 c9                	xor    ecx,ecx
c0002f8a:	c1 ea 08             	shr    edx,0x8
c0002f8d:	89 f8                	mov    eax,edi
c0002f8f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f92:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f95:	e8 9f f3 ff ff       	call   c0002339 <move_window>
c0002f9a:	85 c0                	test   eax,eax
c0002f9c:	75 8f                	jne    c0002f2d <get_fat+0x6c>
c0002f9e:	01 f6                	add    esi,esi
c0002fa0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fa6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002faa:	e8 ac eb ff ff       	call   c0001b5b <ld_word>
c0002faf:	0f b7 c8             	movzx  ecx,ax
c0002fb2:	e9 f6 00 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002fb7:	31 c9                	xor    ecx,ecx
c0002fb9:	c1 ea 07             	shr    edx,0x7
c0002fbc:	89 f8                	mov    eax,edi
c0002fbe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fc1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fc4:	e8 70 f3 ff ff       	call   c0002339 <move_window>
c0002fc9:	85 c0                	test   eax,eax
c0002fcb:	0f 85 5c ff ff ff    	jne    c0002f2d <get_fat+0x6c>
c0002fd1:	c1 e6 02             	shl    esi,0x2
c0002fd4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fda:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fde:	e8 85 eb ff ff       	call   c0001b68 <ld_dword>
c0002fe3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe8:	e9 b4 00 00 00       	jmp    c00030a1 <get_fat+0x1e0>
c0002fed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ff0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff3:	89 d1                	mov    ecx,edx
c0002ff5:	09 c1                	or     ecx,eax
c0002ff7:	74 06                	je     c0002fff <get_fat+0x13e>
c0002ff9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ffd:	75 0f                	jne    c000300e <get_fat+0x14d>
c0002fff:	b9 01 00 00 00       	mov    ecx,0x1
c0003004:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003008:	0f 85 9f 00 00 00    	jne    c00030ad <get_fat+0x1ec>
c000300e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003012:	89 f5                	mov    ebp,esi
c0003014:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003019:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000301c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000301f:	80 f9 02             	cmp    cl,0x2
c0003022:	75 35                	jne    c0003059 <get_fat+0x198>
c0003024:	83 c0 ff             	add    eax,0xffffffff
c0003027:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000302c:	83 d2 ff             	adc    edx,0xffffffff
c000302f:	31 db                	xor    ebx,ebx
c0003031:	0f ac d0 09          	shrd   eax,edx,0x9
c0003035:	53                   	push   ebx
c0003036:	c1 ea 09             	shr    edx,0x9
c0003039:	51                   	push   ecx
c000303a:	52                   	push   edx
c000303b:	50                   	push   eax
c000303c:	e8 d3 f3 01 00       	call   c0022414 <__udivdi3>
c0003041:	83 c4 10             	add    esp,0x10
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	39 c5                	cmp    ebp,eax
c000304b:	77 60                	ja     c00030ad <get_fat+0x1ec>
c000304d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003052:	74 59                	je     c00030ad <get_fat+0x1ec>
c0003054:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003057:	eb 54                	jmp    c00030ad <get_fat+0x1ec>
c0003059:	80 f9 03             	cmp    cl,0x3
c000305c:	75 05                	jne    c0003063 <get_fat+0x1a2>
c000305e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003061:	77 f1                	ja     c0003054 <get_fat+0x193>
c0003063:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003068:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000306c:	75 3f                	jne    c00030ad <get_fat+0x1ec>
c000306e:	31 c9                	xor    ecx,ecx
c0003070:	89 f2                	mov    edx,esi
c0003072:	89 f8                	mov    eax,edi
c0003074:	c1 ea 07             	shr    edx,0x7
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 b7 f2 ff ff       	call   c0002339 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	0f 85 a3 fe ff ff    	jne    c0002f2d <get_fat+0x6c>
c000308a:	c1 e6 02             	shl    esi,0x2
c000308d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003093:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003097:	e8 cc ea ff ff       	call   c0001b68 <ld_dword>
c000309c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030a1:	89 c1                	mov    ecx,eax
c00030a3:	eb 08                	jmp    c00030ad <get_fat+0x1ec>
c00030a5:	b9 01 00 00 00       	mov    ecx,0x1
c00030aa:	89 c8                	mov    eax,ecx
c00030ac:	c3                   	ret    
c00030ad:	83 c4 1c             	add    esp,0x1c
c00030b0:	89 c8                	mov    eax,ecx
c00030b2:	5b                   	pop    ebx
c00030b3:	5e                   	pop    esi
c00030b4:	5f                   	pop    edi
c00030b5:	5d                   	pop    ebp
c00030b6:	c3                   	ret    

c00030b7 <dir_sdi>:
c00030b7:	55                   	push   ebp
c00030b8:	57                   	push   edi
c00030b9:	56                   	push   esi
c00030ba:	53                   	push   ebx
c00030bb:	89 c3                	mov    ebx,eax
c00030bd:	83 ec 1c             	sub    esp,0x1c
c00030c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030c2:	31 c0                	xor    eax,eax
c00030c4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030c7:	0f 94 c0             	sete   al
c00030ca:	48                   	dec    eax
c00030cb:	25 00 00 20 f0       	and    eax,0xf0200000
c00030d0:	05 00 00 00 10       	add    eax,0x10000000
c00030d5:	39 d0                	cmp    eax,edx
c00030d7:	77 0a                	ja     c00030e3 <dir_sdi+0x2c>
c00030d9:	b8 02 00 00 00       	mov    eax,0x2
c00030de:	e9 c4 00 00 00       	jmp    c00031a7 <dir_sdi+0xf0>
c00030e3:	89 d6                	mov    esi,edx
c00030e5:	f6 c2 1f             	test   dl,0x1f
c00030e8:	75 ef                	jne    c00030d9 <dir_sdi+0x22>
c00030ea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030ed:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030f0:	85 c9                	test   ecx,ecx
c00030f2:	75 2d                	jne    c0003121 <dir_sdi+0x6a>
c00030f4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030f7:	77 1b                	ja     c0003114 <dir_sdi+0x5d>
c00030f9:	89 f2                	mov    edx,esi
c00030fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030ff:	c1 ea 05             	shr    edx,0x5
c0003102:	39 c2                	cmp    edx,eax
c0003104:	73 d3                	jae    c00030d9 <dir_sdi+0x22>
c0003106:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003109:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000310c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000310f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003112:	eb 4b                	jmp    c000315f <dir_sdi+0xa8>
c0003114:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003117:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000311b:	85 c0                	test   eax,eax
c000311d:	74 da                	je     c00030f9 <dir_sdi+0x42>
c000311f:	89 c1                	mov    ecx,eax
c0003121:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003125:	c1 e5 09             	shl    ebp,0x9
c0003128:	89 ca                	mov    edx,ecx
c000312a:	39 ee                	cmp    esi,ebp
c000312c:	72 1c                	jb     c000314a <dir_sdi+0x93>
c000312e:	89 d8                	mov    eax,ebx
c0003130:	e8 8c fd ff ff       	call   c0002ec1 <get_fat>
c0003135:	89 c1                	mov    ecx,eax
c0003137:	83 f8 ff             	cmp    eax,0xffffffff
c000313a:	74 66                	je     c00031a2 <dir_sdi+0xeb>
c000313c:	83 f8 01             	cmp    eax,0x1
c000313f:	76 98                	jbe    c00030d9 <dir_sdi+0x22>
c0003141:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003144:	76 93                	jbe    c00030d9 <dir_sdi+0x22>
c0003146:	29 ee                	sub    esi,ebp
c0003148:	eb de                	jmp    c0003128 <dir_sdi+0x71>
c000314a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000314e:	89 f8                	mov    eax,edi
c0003150:	e8 9f ec ff ff       	call   c0001df4 <clst2sect>
c0003155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003159:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000315c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000315f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003162:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003165:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003168:	89 d1                	mov    ecx,edx
c000316a:	09 c1                	or     ecx,eax
c000316c:	0f 84 67 ff ff ff    	je     c00030d9 <dir_sdi+0x22>
c0003172:	89 f1                	mov    ecx,esi
c0003174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000317c:	c1 e9 09             	shr    ecx,0x9
c000317f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003183:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003187:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000318b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000318e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003194:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003197:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000319e:	31 c0                	xor    eax,eax
c00031a0:	eb 05                	jmp    c00031a7 <dir_sdi+0xf0>
c00031a2:	b8 01 00 00 00       	mov    eax,0x1
c00031a7:	83 c4 1c             	add    esp,0x1c
c00031aa:	5b                   	pop    ebx
c00031ab:	5e                   	pop    esi
c00031ac:	5f                   	pop    edi
c00031ad:	5d                   	pop    ebp
c00031ae:	c3                   	ret    

c00031af <create_chain>:
c00031af:	55                   	push   ebp
c00031b0:	89 c5                	mov    ebp,eax
c00031b2:	57                   	push   edi
c00031b3:	56                   	push   esi
c00031b4:	53                   	push   ebx
c00031b5:	83 ec 1c             	sub    esp,0x1c
c00031b8:	85 d2                	test   edx,edx
c00031ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	75 0e                	jne    c00031d0 <create_chain+0x21>
c00031c2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031c5:	85 ff                	test   edi,edi
c00031c7:	74 39                	je     c0003202 <create_chain+0x53>
c00031c9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031cc:	77 39                	ja     c0003207 <create_chain+0x58>
c00031ce:	eb 32                	jmp    c0003202 <create_chain+0x53>
c00031d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d4:	e8 e8 fc ff ff       	call   c0002ec1 <get_fat>
c00031d9:	89 c3                	mov    ebx,eax
c00031db:	83 f8 01             	cmp    eax,0x1
c00031de:	77 0a                	ja     c00031ea <create_chain+0x3b>
c00031e0:	bb 01 00 00 00       	mov    ebx,0x1
c00031e5:	e9 ba 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c00031ea:	83 f8 ff             	cmp    eax,0xffffffff
c00031ed:	0f 84 62 01 00 00    	je     c0003355 <create_chain+0x1a6>
c00031f3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031f6:	0f 87 a8 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c00031fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003200:	eb 05                	jmp    c0003207 <create_chain+0x58>
c0003202:	bf 01 00 00 00       	mov    edi,0x1
c0003207:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000320b:	75 07                	jne    c0003214 <create_chain+0x65>
c000320d:	31 db                	xor    ebx,ebx
c000320f:	e9 90 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c0003214:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003217:	75 74                	jne    c000328d <create_chain+0xde>
c0003219:	b9 01 00 00 00       	mov    ecx,0x1
c000321e:	89 fa                	mov    edx,edi
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 2d f9 ff ff       	call   c0002b54 <find_bitmap>
c0003227:	89 c3                	mov    ebx,eax
c0003229:	8d 40 ff             	lea    eax,[eax-0x1]
c000322c:	83 f8 fd             	cmp    eax,0xfffffffd
c000322f:	0f 87 6f 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c0003235:	83 ec 0c             	sub    esp,0xc
c0003238:	b9 01 00 00 00       	mov    ecx,0x1
c000323d:	6a 01                	push   0x1
c000323f:	89 da                	mov    edx,ebx
c0003241:	89 f0                	mov    eax,esi
c0003243:	e8 bf f9 ff ff       	call   c0002c07 <change_bitmap>
c0003248:	83 c4 10             	add    esp,0x10
c000324b:	83 f8 02             	cmp    eax,0x2
c000324e:	74 90                	je     c00031e0 <create_chain+0x31>
c0003250:	83 f8 01             	cmp    eax,0x1
c0003253:	0f 84 fc 00 00 00    	je     c0003355 <create_chain+0x1a6>
c0003259:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000325e:	75 09                	jne    c0003269 <create_chain+0xba>
c0003260:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003264:	e9 0c 01 00 00       	jmp    c0003375 <create_chain+0x1c6>
c0003269:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000326d:	0f 85 e7 00 00 00    	jne    c000335a <create_chain+0x1ab>
c0003273:	8d 57 01             	lea    edx,[edi+0x1]
c0003276:	39 da                	cmp    edx,ebx
c0003278:	0f 84 f7 00 00 00    	je     c0003375 <create_chain+0x1c6>
c000327e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003281:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003285:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003288:	e9 cd 00 00 00       	jmp    c000335a <create_chain+0x1ab>
c000328d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003291:	75 41                	jne    c00032d4 <create_chain+0x125>
c0003293:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003296:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003299:	77 05                	ja     c00032a0 <create_chain+0xf1>
c000329b:	bb 02 00 00 00       	mov    ebx,0x2
c00032a0:	89 da                	mov    edx,ebx
c00032a2:	89 e8                	mov    eax,ebp
c00032a4:	e8 18 fc ff ff       	call   c0002ec1 <get_fat>
c00032a9:	83 f8 01             	cmp    eax,0x1
c00032ac:	0f 84 2e ff ff ff    	je     c00031e0 <create_chain+0x31>
c00032b2:	83 f8 ff             	cmp    eax,0xffffffff
c00032b5:	0f 84 9a 00 00 00    	je     c0003355 <create_chain+0x1a6>
c00032bb:	85 c0                	test   eax,eax
c00032bd:	74 11                	je     c00032d0 <create_chain+0x121>
c00032bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	76 0d                	jbe    c00032d4 <create_chain+0x125>
c00032c7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032ca:	76 08                	jbe    c00032d4 <create_chain+0x125>
c00032cc:	89 c7                	mov    edi,eax
c00032ce:	eb 04                	jmp    c00032d4 <create_chain+0x125>
c00032d0:	85 db                	test   ebx,ebx
c00032d2:	75 38                	jne    c000330c <create_chain+0x15d>
c00032d4:	89 fb                	mov    ebx,edi
c00032d6:	43                   	inc    ebx
c00032d7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032da:	77 0e                	ja     c00032ea <create_chain+0x13b>
c00032dc:	83 ff 01             	cmp    edi,0x1
c00032df:	0f 86 28 ff ff ff    	jbe    c000320d <create_chain+0x5e>
c00032e5:	bb 02 00 00 00       	mov    ebx,0x2
c00032ea:	89 da                	mov    edx,ebx
c00032ec:	89 e8                	mov    eax,ebp
c00032ee:	e8 ce fb ff ff       	call   c0002ec1 <get_fat>
c00032f3:	85 c0                	test   eax,eax
c00032f5:	74 15                	je     c000330c <create_chain+0x15d>
c00032f7:	83 f8 01             	cmp    eax,0x1
c00032fa:	0f 84 e0 fe ff ff    	je     c00031e0 <create_chain+0x31>
c0003300:	40                   	inc    eax
c0003301:	74 52                	je     c0003355 <create_chain+0x1a6>
c0003303:	39 fb                	cmp    ebx,edi
c0003305:	75 cf                	jne    c00032d6 <create_chain+0x127>
c0003307:	e9 01 ff ff ff       	jmp    c000320d <create_chain+0x5e>
c000330c:	83 c9 ff             	or     ecx,0xffffffff
c000330f:	89 da                	mov    edx,ebx
c0003311:	89 f0                	mov    eax,esi
c0003313:	e8 a4 f9 ff ff       	call   c0002cbc <put_fat>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 32                	jne    c000334e <create_chain+0x19f>
c000331c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003321:	74 11                	je     c0003334 <create_chain+0x185>
c0003323:	89 d9                	mov    ecx,ebx
c0003325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 8c f9 ff ff       	call   c0002cbc <put_fat>
c0003330:	85 c0                	test   eax,eax
c0003332:	75 1a                	jne    c000334e <create_chain+0x19f>
c0003334:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003337:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000333a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000333d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003340:	39 d0                	cmp    eax,edx
c0003342:	77 04                	ja     c0003348 <create_chain+0x199>
c0003344:	48                   	dec    eax
c0003345:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003348:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000334c:	eb 56                	jmp    c00033a4 <create_chain+0x1f5>
c000334e:	48                   	dec    eax
c000334f:	0f 85 8b fe ff ff    	jne    c00031e0 <create_chain+0x31>
c0003355:	83 cb ff             	or     ebx,0xffffffff
c0003358:	eb 4a                	jmp    c00033a4 <create_chain+0x1f5>
c000335a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003361:	41                   	inc    ecx
c0003362:	39 d9                	cmp    ecx,ebx
c0003364:	75 19                	jne    c000337f <create_chain+0x1d0>
c0003366:	b9 02 00 00 00       	mov    ecx,0x2
c000336b:	85 d2                	test   edx,edx
c000336d:	74 03                	je     c0003372 <create_chain+0x1c3>
c000336f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003372:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003375:	85 c0                	test   eax,eax
c0003377:	0f 85 63 fe ff ff    	jne    c00031e0 <create_chain+0x31>
c000337d:	eb b5                	jmp    c0003334 <create_chain+0x185>
c000337f:	85 d2                	test   edx,edx
c0003381:	75 07                	jne    c000338a <create_chain+0x1db>
c0003383:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000338a:	89 d9                	mov    ecx,ebx
c000338c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003390:	89 e8                	mov    eax,ebp
c0003392:	e8 bb fa ff ff       	call   c0002e52 <fill_last_frag>
c0003397:	85 c0                	test   eax,eax
c0003399:	75 b3                	jne    c000334e <create_chain+0x19f>
c000339b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033a2:	eb 90                	jmp    c0003334 <create_chain+0x185>
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	89 d8                	mov    eax,ebx
c00033a9:	5b                   	pop    ebx
c00033aa:	5e                   	pop    esi
c00033ab:	5f                   	pop    edi
c00033ac:	5d                   	pop    ebp
c00033ad:	c3                   	ret    

c00033ae <remove_chain>:
c00033ae:	55                   	push   ebp
c00033af:	57                   	push   edi
c00033b0:	56                   	push   esi
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	83 fa 01             	cmp    edx,0x1
c00033b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033bc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033be:	77 0a                	ja     c00033ca <remove_chain+0x1c>
c00033c0:	b8 02 00 00 00       	mov    eax,0x2
c00033c5:	e9 24 01 00 00       	jmp    c00034ee <remove_chain+0x140>
c00033ca:	89 d6                	mov    esi,edx
c00033cc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033cf:	76 ef                	jbe    c00033c0 <remove_chain+0x12>
c00033d1:	89 c7                	mov    edi,eax
c00033d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d8:	75 06                	jne    c00033e0 <remove_chain+0x32>
c00033da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033de:	eb 54                	jmp    c0003434 <remove_chain+0x86>
c00033e0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033e3:	75 06                	jne    c00033eb <remove_chain+0x3d>
c00033e5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e9:	74 ef                	je     c00033da <remove_chain+0x2c>
c00033eb:	83 c9 ff             	or     ecx,0xffffffff
c00033ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f2:	89 d8                	mov    eax,ebx
c00033f4:	e8 c3 f8 ff ff       	call   c0002cbc <put_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 dd                	je     c00033da <remove_chain+0x2c>
c00033fd:	e9 ec 00 00 00       	jmp    c00034ee <remove_chain+0x140>
c0003402:	83 f8 01             	cmp    eax,0x1
c0003405:	74 b9                	je     c00033c0 <remove_chain+0x12>
c0003407:	83 f8 ff             	cmp    eax,0xffffffff
c000340a:	74 6d                	je     c0003479 <remove_chain+0xcb>
c000340c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000340f:	75 6f                	jne    c0003480 <remove_chain+0xd2>
c0003411:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003414:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003417:	8d 51 fe             	lea    edx,[ecx-0x2]
c000341a:	39 d0                	cmp    eax,edx
c000341c:	73 08                	jae    c0003426 <remove_chain+0x78>
c000341e:	40                   	inc    eax
c000341f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003423:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003426:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003429:	39 e9                	cmp    ecx,ebp
c000342b:	75 64                	jne    c0003491 <remove_chain+0xe3>
c000342d:	89 ee                	mov    esi,ebp
c000342f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003432:	76 0f                	jbe    c0003443 <remove_chain+0x95>
c0003434:	89 f2                	mov    edx,esi
c0003436:	89 f8                	mov    eax,edi
c0003438:	e8 84 fa ff ff       	call   c0002ec1 <get_fat>
c000343d:	89 c5                	mov    ebp,eax
c000343f:	85 c0                	test   eax,eax
c0003441:	75 bf                	jne    c0003402 <remove_chain+0x54>
c0003443:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003446:	0f 85 a0 00 00 00    	jne    c00034ec <remove_chain+0x13e>
c000344c:	eb 6c                	jmp    c00034ba <remove_chain+0x10c>
c000344e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003451:	84 c0                	test   al,al
c0003453:	75 7d                	jne    c00034d2 <remove_chain+0x124>
c0003455:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003458:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000345c:	0f 84 86 00 00 00    	je     c00034e8 <remove_chain+0x13a>
c0003462:	89 da                	mov    edx,ebx
c0003464:	89 f8                	mov    eax,edi
c0003466:	e8 56 fa ff ff       	call   c0002ec1 <get_fat>
c000346b:	83 f8 01             	cmp    eax,0x1
c000346e:	0f 86 4c ff ff ff    	jbe    c00033c0 <remove_chain+0x12>
c0003474:	83 f8 ff             	cmp    eax,0xffffffff
c0003477:	75 4e                	jne    c00034c7 <remove_chain+0x119>
c0003479:	b8 01 00 00 00       	mov    eax,0x1
c000347e:	eb 6e                	jmp    c00034ee <remove_chain+0x140>
c0003480:	31 c9                	xor    ecx,ecx
c0003482:	89 f2                	mov    edx,esi
c0003484:	89 d8                	mov    eax,ebx
c0003486:	e8 31 f8 ff ff       	call   c0002cbc <put_fat>
c000348b:	85 c0                	test   eax,eax
c000348d:	74 82                	je     c0003411 <remove_chain+0x63>
c000348f:	eb 5d                	jmp    c00034ee <remove_chain+0x140>
c0003491:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003494:	75 1b                	jne    c00034b1 <remove_chain+0x103>
c0003496:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000349a:	89 d8                	mov    eax,ebx
c000349c:	83 ec 0c             	sub    esp,0xc
c000349f:	6a 00                	push   0x0
c00034a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034a5:	e8 5d f7 ff ff       	call   c0002c07 <change_bitmap>
c00034aa:	83 c4 10             	add    esp,0x10
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 3d                	jne    c00034ee <remove_chain+0x140>
c00034b1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034b5:	e9 73 ff ff ff       	jmp    c000342d <remove_chain+0x7f>
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 8d                	jne    c000344e <remove_chain+0xa0>
c00034c1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034c5:	eb 25                	jmp    c00034ec <remove_chain+0x13e>
c00034c7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034ca:	89 c3                	mov    ebx,eax
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	74 88                	je     c0003458 <remove_chain+0xaa>
c00034d0:	eb 1a                	jmp    c00034ec <remove_chain+0x13e>
c00034d2:	3c 03                	cmp    al,0x3
c00034d4:	75 16                	jne    c00034ec <remove_chain+0x13e>
c00034d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034dd:	77 0d                	ja     c00034ec <remove_chain+0x13e>
c00034df:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034e2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034e6:	72 04                	jb     c00034ec <remove_chain+0x13e>
c00034e8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034ec:	31 c0                	xor    eax,eax
c00034ee:	83 c4 1c             	add    esp,0x1c
c00034f1:	5b                   	pop    ebx
c00034f2:	5e                   	pop    esi
c00034f3:	5f                   	pop    edi
c00034f4:	5d                   	pop    ebp
c00034f5:	c3                   	ret    

c00034f6 <dir_clear>:
c00034f6:	55                   	push   ebp
c00034f7:	57                   	push   edi
c00034f8:	56                   	push   esi
c00034f9:	89 c6                	mov    esi,eax
c00034fb:	53                   	push   ebx
c00034fc:	83 ec 1c             	sub    esp,0x1c
c00034ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003503:	e8 9d ed ff ff       	call   c00022a5 <sync_window>
c0003508:	85 c0                	test   eax,eax
c000350a:	0f 85 de 00 00 00    	jne    c00035ee <dir_clear+0xf8>
c0003510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003514:	89 f0                	mov    eax,esi
c0003516:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003519:	e8 d6 e8 ff ff       	call   c0001df4 <clst2sect>
c000351e:	b9 00 02 00 00       	mov    ecx,0x200
c0003523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000352e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003531:	89 e8                	mov    eax,ebp
c0003533:	31 d2                	xor    edx,edx
c0003535:	e8 b5 e6 ff ff       	call   c0001bef <mem_set>
c000353a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000353e:	c1 e3 09             	shl    ebx,0x9
c0003541:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003547:	76 1f                	jbe    c0003568 <dir_clear+0x72>
c0003549:	bb 00 80 00 00       	mov    ebx,0x8000
c000354e:	eb 18                	jmp    c0003568 <dir_clear+0x72>
c0003550:	83 ec 0c             	sub    esp,0xc
c0003553:	53                   	push   ebx
c0003554:	e8 6b 50 00 00       	call   c00085c4 <ff_memalloc>
c0003559:	83 c4 10             	add    esp,0x10
c000355c:	89 c7                	mov    edi,eax
c000355e:	85 c0                	test   eax,eax
c0003560:	0f 85 8f 00 00 00    	jne    c00035f5 <dir_clear+0xff>
c0003566:	d1 eb                	shr    ebx,1
c0003568:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000356e:	77 e0                	ja     c0003550 <dir_clear+0x5a>
c0003570:	31 db                	xor    ebx,ebx
c0003572:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003576:	39 d8                	cmp    eax,ebx
c0003578:	76 66                	jbe    c00035e0 <dir_clear+0xea>
c000357a:	83 ec 0c             	sub    esp,0xc
c000357d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003581:	6a 01                	push   0x1
c0003583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000358b:	55                   	push   ebp
c000358c:	50                   	push   eax
c000358d:	e8 94 e5 ff ff       	call   c0001b26 <disk_write>
c0003592:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003597:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000359c:	83 c4 20             	add    esp,0x20
c000359f:	85 c0                	test   eax,eax
c00035a1:	75 3d                	jne    c00035e0 <dir_clear+0xea>
c00035a3:	43                   	inc    ebx
c00035a4:	eb cc                	jmp    c0003572 <dir_clear+0x7c>
c00035a6:	83 ec 0c             	sub    esp,0xc
c00035a9:	31 d2                	xor    edx,edx
c00035ab:	55                   	push   ebp
c00035ac:	89 d8                	mov    eax,ebx
c00035ae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035b2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035b6:	52                   	push   edx
c00035b7:	50                   	push   eax
c00035b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035bc:	57                   	push   edi
c00035bd:	50                   	push   eax
c00035be:	e8 63 e5 ff ff       	call   c0001b26 <disk_write>
c00035c3:	83 c4 20             	add    esp,0x20
c00035c6:	85 c0                	test   eax,eax
c00035c8:	75 0a                	jne    c00035d4 <dir_clear+0xde>
c00035ca:	01 eb                	add    ebx,ebp
c00035cc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035d0:	39 d8                	cmp    eax,ebx
c00035d2:	77 d2                	ja     c00035a6 <dir_clear+0xb0>
c00035d4:	83 ec 0c             	sub    esp,0xc
c00035d7:	57                   	push   edi
c00035d8:	e8 ff 4f 00 00       	call   c00085dc <ff_memfree>
c00035dd:	83 c4 10             	add    esp,0x10
c00035e0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e4:	39 d8                	cmp    eax,ebx
c00035e6:	0f 95 c0             	setne  al
c00035e9:	0f b6 c0             	movzx  eax,al
c00035ec:	eb 19                	jmp    c0003607 <dir_clear+0x111>
c00035ee:	b8 01 00 00 00       	mov    eax,0x1
c00035f3:	eb 12                	jmp    c0003607 <dir_clear+0x111>
c00035f5:	89 d9                	mov    ecx,ebx
c00035f7:	31 d2                	xor    edx,edx
c00035f9:	c1 eb 09             	shr    ebx,0x9
c00035fc:	e8 ee e5 ff ff       	call   c0001bef <mem_set>
c0003601:	89 dd                	mov    ebp,ebx
c0003603:	31 db                	xor    ebx,ebx
c0003605:	eb c5                	jmp    c00035cc <dir_clear+0xd6>
c0003607:	83 c4 1c             	add    esp,0x1c
c000360a:	5b                   	pop    ebx
c000360b:	5e                   	pop    esi
c000360c:	5f                   	pop    edi
c000360d:	5d                   	pop    ebp
c000360e:	c3                   	ret    

c000360f <dir_next>:
c000360f:	55                   	push   ebp
c0003610:	57                   	push   edi
c0003611:	56                   	push   esi
c0003612:	53                   	push   ebx
c0003613:	89 c3                	mov    ebx,eax
c0003615:	83 ec 1c             	sub    esp,0x1c
c0003618:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003621:	8d 78 20             	lea    edi,[eax+0x20]
c0003624:	31 c0                	xor    eax,eax
c0003626:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000362a:	0f 94 c0             	sete   al
c000362d:	48                   	dec    eax
c000362e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003633:	05 00 00 00 10       	add    eax,0x10000000
c0003638:	39 f8                	cmp    eax,edi
c000363a:	77 0e                	ja     c000364a <dir_next+0x3b>
c000363c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003643:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000364a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000364d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003650:	b8 04 00 00 00       	mov    eax,0x4
c0003655:	89 ce                	mov    esi,ecx
c0003657:	09 d6                	or     esi,edx
c0003659:	0f 84 da 00 00 00    	je     c0003739 <dir_next+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	25 ff 01 00 00       	and    eax,0x1ff
c0003666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000366a:	0f 85 b9 00 00 00    	jne    c0003729 <dir_next+0x11a>
c0003670:	83 c2 01             	add    edx,0x1
c0003673:	83 d1 00             	adc    ecx,0x0
c0003676:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003679:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000367c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000367f:	85 d2                	test   edx,edx
c0003681:	75 29                	jne    c00036ac <dir_next+0x9d>
c0003683:	89 fa                	mov    edx,edi
c0003685:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003689:	c1 ea 05             	shr    edx,0x5
c000368c:	39 c2                	cmp    edx,eax
c000368e:	0f 82 95 00 00 00    	jb     c0003729 <dir_next+0x11a>
c0003694:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000369b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036a2:	b8 04 00 00 00       	mov    eax,0x4
c00036a7:	e9 8d 00 00 00       	jmp    c0003739 <dir_next+0x12a>
c00036ac:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036b0:	89 f9                	mov    ecx,edi
c00036b2:	48                   	dec    eax
c00036b3:	c1 e9 09             	shr    ecx,0x9
c00036b6:	85 c8                	test   eax,ecx
c00036b8:	75 6f                	jne    c0003729 <dir_next+0x11a>
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	e8 00 f8 ff ff       	call   c0002ec1 <get_fat>
c00036c1:	89 c6                	mov    esi,eax
c00036c3:	83 f8 01             	cmp    eax,0x1
c00036c6:	77 07                	ja     c00036cf <dir_next+0xc0>
c00036c8:	b8 02 00 00 00       	mov    eax,0x2
c00036cd:	eb 6a                	jmp    c0003739 <dir_next+0x12a>
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	75 07                	jne    c00036db <dir_next+0xcc>
c00036d4:	b8 01 00 00 00       	mov    eax,0x1
c00036d9:	eb 5e                	jmp    c0003739 <dir_next+0x12a>
c00036db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036de:	77 37                	ja     c0003717 <dir_next+0x108>
c00036e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036e5:	74 ad                	je     c0003694 <dir_next+0x85>
c00036e7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	e8 be fa ff ff       	call   c00031af <create_chain>
c00036f1:	89 c6                	mov    esi,eax
c00036f3:	b8 07 00 00 00       	mov    eax,0x7
c00036f8:	85 f6                	test   esi,esi
c00036fa:	74 3d                	je     c0003739 <dir_next+0x12a>
c00036fc:	83 fe 01             	cmp    esi,0x1
c00036ff:	74 c7                	je     c00036c8 <dir_next+0xb9>
c0003701:	83 fe ff             	cmp    esi,0xffffffff
c0003704:	74 ce                	je     c00036d4 <dir_next+0xc5>
c0003706:	89 f2                	mov    edx,esi
c0003708:	89 e8                	mov    eax,ebp
c000370a:	e8 e7 fd ff ff       	call   c00034f6 <dir_clear>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 c1                	jne    c00036d4 <dir_next+0xc5>
c0003713:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003717:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000371a:	89 f2                	mov    edx,esi
c000371c:	89 e8                	mov    eax,ebp
c000371e:	e8 d1 e6 ff ff       	call   c0001df4 <clst2sect>
c0003723:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003726:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000372d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003730:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003734:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003737:	31 c0                	xor    eax,eax
c0003739:	83 c4 1c             	add    esp,0x1c
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <load_xdir>:
c0003741:	55                   	push   ebp
c0003742:	57                   	push   edi
c0003743:	56                   	push   esi
c0003744:	89 c6                	mov    esi,eax
c0003746:	53                   	push   ebx
c0003747:	83 ec 1c             	sub    esp,0x1c
c000374a:	8b 00                	mov    eax,DWORD PTR [eax]
c000374c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000374f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003752:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003755:	e8 df eb ff ff       	call   c0002339 <move_window>
c000375a:	89 c3                	mov    ebx,eax
c000375c:	85 c0                	test   eax,eax
c000375e:	0f 85 0c 01 00 00    	jne    c0003870 <load_xdir+0x12f>
c0003764:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003767:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000376a:	0f 85 fb 00 00 00    	jne    c000386b <load_xdir+0x12a>
c0003770:	89 f8                	mov    eax,edi
c0003772:	b9 20 00 00 00       	mov    ecx,0x20
c0003777:	e8 5e e4 ff ff       	call   c0001bda <mem_cpy>
c000377c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003780:	40                   	inc    eax
c0003781:	c1 e0 05             	shl    eax,0x5
c0003784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003788:	83 e8 60             	sub    eax,0x60
c000378b:	3d 00 02 00 00       	cmp    eax,0x200
c0003790:	0f 87 d5 00 00 00    	ja     c000386b <load_xdir+0x12a>
c0003796:	31 d2                	xor    edx,edx
c0003798:	89 f0                	mov    eax,esi
c000379a:	e8 70 fe ff ff       	call   c000360f <dir_next>
c000379f:	89 c3                	mov    ebx,eax
c00037a1:	83 f8 04             	cmp    eax,0x4
c00037a4:	0f 84 c1 00 00 00    	je     c000386b <load_xdir+0x12a>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	0f 85 be 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037b2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037b5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ba:	e8 7a eb ff ff       	call   c0002339 <move_window>
c00037bf:	89 c3                	mov    ebx,eax
c00037c1:	85 c0                	test   eax,eax
c00037c3:	0f 85 a7 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037c9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037cc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037cf:	0f 85 96 00 00 00    	jne    c000386b <load_xdir+0x12a>
c00037d5:	8d 47 20             	lea    eax,[edi+0x20]
c00037d8:	b9 20 00 00 00       	mov    ecx,0x20
c00037dd:	e8 f8 e3 ff ff       	call   c0001bda <mem_cpy>
c00037e2:	31 d2                	xor    edx,edx
c00037e4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037ed:	83 c0 2c             	add    eax,0x2c
c00037f0:	f7 f1                	div    ecx
c00037f2:	c1 e0 05             	shl    eax,0x5
c00037f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f9:	77 70                	ja     c000386b <load_xdir+0x12a>
c00037fb:	bd 40 00 00 00       	mov    ebp,0x40
c0003800:	31 d2                	xor    edx,edx
c0003802:	89 f0                	mov    eax,esi
c0003804:	e8 06 fe ff ff       	call   c000360f <dir_next>
c0003809:	89 c3                	mov    ebx,eax
c000380b:	83 f8 04             	cmp    eax,0x4
c000380e:	74 5b                	je     c000386b <load_xdir+0x12a>
c0003810:	85 c0                	test   eax,eax
c0003812:	75 5c                	jne    c0003870 <load_xdir+0x12f>
c0003814:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003817:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000381a:	8b 06                	mov    eax,DWORD PTR [esi]
c000381c:	e8 18 eb ff ff       	call   c0002339 <move_window>
c0003821:	89 c3                	mov    ebx,eax
c0003823:	85 c0                	test   eax,eax
c0003825:	75 49                	jne    c0003870 <load_xdir+0x12f>
c0003827:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000382a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000382d:	75 3c                	jne    c000386b <load_xdir+0x12a>
c000382f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003835:	77 0d                	ja     c0003844 <load_xdir+0x103>
c0003837:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000383a:	b9 20 00 00 00       	mov    ecx,0x20
c000383f:	e8 96 e3 ff ff       	call   c0001bda <mem_cpy>
c0003844:	83 c5 20             	add    ebp,0x20
c0003847:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000384b:	77 b3                	ja     c0003800 <load_xdir+0xbf>
c000384d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003853:	77 1b                	ja     c0003870 <load_xdir+0x12f>
c0003855:	89 f8                	mov    eax,edi
c0003857:	e8 cd e7 ff ff       	call   c0002029 <xdir_sum>
c000385c:	89 c1                	mov    ecx,eax
c000385e:	8d 47 02             	lea    eax,[edi+0x2]
c0003861:	e8 f5 e2 ff ff       	call   c0001b5b <ld_word>
c0003866:	66 39 c1             	cmp    cx,ax
c0003869:	74 05                	je     c0003870 <load_xdir+0x12f>
c000386b:	bb 02 00 00 00       	mov    ebx,0x2
c0003870:	83 c4 1c             	add    esp,0x1c
c0003873:	89 d8                	mov    eax,ebx
c0003875:	5b                   	pop    ebx
c0003876:	5e                   	pop    esi
c0003877:	5f                   	pop    edi
c0003878:	5d                   	pop    ebp
c0003879:	c3                   	ret    

c000387a <load_obj_xdir>:
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	83 ec 08             	sub    esp,0x8
c0003880:	8b 02                	mov    eax,DWORD PTR [edx]
c0003882:	89 03                	mov    DWORD PTR [ebx],eax
c0003884:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003887:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000388a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003890:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003893:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000389a:	30 c0                	xor    al,al
c000389c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038a6:	89 d8                	mov    eax,ebx
c00038a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038ab:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038ae:	e8 04 f8 ff ff       	call   c00030b7 <dir_sdi>
c00038b3:	85 c0                	test   eax,eax
c00038b5:	75 0b                	jne    c00038c2 <load_obj_xdir+0x48>
c00038b7:	89 d8                	mov    eax,ebx
c00038b9:	83 c4 08             	add    esp,0x8
c00038bc:	5b                   	pop    ebx
c00038bd:	e9 7f fe ff ff       	jmp    c0003741 <load_xdir>
c00038c2:	83 c4 08             	add    esp,0x8
c00038c5:	5b                   	pop    ebx
c00038c6:	c3                   	ret    

c00038c7 <dir_read>:
c00038c7:	55                   	push   ebp
c00038c8:	bd 04 00 00 00       	mov    ebp,0x4
c00038cd:	57                   	push   edi
c00038ce:	56                   	push   esi
c00038cf:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d4:	53                   	push   ebx
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 ec 1c             	sub    esp,0x1c
c00038da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038de:	8b 38                	mov    edi,DWORD PTR [eax]
c00038e0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038eb:	89 c8                	mov    eax,ecx
c00038ed:	09 d0                	or     eax,edx
c00038ef:	0f 84 25 01 00 00    	je     c0003a1a <dir_read+0x153>
c00038f5:	89 f8                	mov    eax,edi
c00038f7:	e8 3d ea ff ff       	call   c0002339 <move_window>
c00038fc:	89 c5                	mov    ebp,eax
c00038fe:	85 c0                	test   eax,eax
c0003900:	0f 85 23 01 00 00    	jne    c0003a29 <dir_read+0x162>
c0003906:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003909:	8a 0a                	mov    cl,BYTE PTR [edx]
c000390b:	84 c9                	test   cl,cl
c000390d:	0f 84 11 01 00 00    	je     c0003a24 <dir_read+0x15d>
c0003913:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003916:	75 48                	jne    c0003960 <dir_read+0x99>
c0003918:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000391d:	74 10                	je     c000392f <dir_read+0x68>
c000391f:	80 f9 83             	cmp    cl,0x83
c0003922:	0f 85 dd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003928:	31 ed                	xor    ebp,ebp
c000392a:	e9 08 01 00 00       	jmp    c0003a37 <dir_read+0x170>
c000392f:	80 f9 85             	cmp    cl,0x85
c0003932:	0f 85 cd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000393b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000393e:	89 d8                	mov    eax,ebx
c0003940:	e8 fc fd ff ff       	call   c0003741 <load_xdir>
c0003945:	89 c5                	mov    ebp,eax
c0003947:	85 c0                	test   eax,eax
c0003949:	0f 85 da 00 00 00    	jne    c0003a29 <dir_read+0x162>
c000394f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003952:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003955:	83 e0 3f             	and    eax,0x3f
c0003958:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000395b:	e9 d7 00 00 00       	jmp    c0003a37 <dir_read+0x170>
c0003960:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003963:	83 e0 3f             	and    eax,0x3f
c0003966:	80 f9 2e             	cmp    cl,0x2e
c0003969:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000396d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003970:	0f 84 8a 00 00 00    	je     c0003a00 <dir_read+0x139>
c0003976:	80 f9 e5             	cmp    cl,0xe5
c0003979:	0f 84 81 00 00 00    	je     c0003a00 <dir_read+0x139>
c000397f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003983:	83 e0 1f             	and    eax,0x1f
c0003986:	83 f8 08             	cmp    eax,0x8
c0003989:	0f 94 c0             	sete   al
c000398c:	0f b6 c0             	movzx  eax,al
c000398f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003993:	75 6b                	jne    c0003a00 <dir_read+0x139>
c0003995:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000399a:	75 44                	jne    c00039e0 <dir_read+0x119>
c000399c:	f6 c1 40             	test   cl,0x40
c000399f:	74 12                	je     c00039b3 <dir_read+0xec>
c00039a1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039a4:	83 e1 bf             	and    ecx,0xffffffbf
c00039a7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039ae:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039b1:	eb 06                	jmp    c00039b9 <dir_read+0xf2>
c00039b3:	89 f0                	mov    eax,esi
c00039b5:	38 c8                	cmp    al,cl
c00039b7:	75 47                	jne    c0003a00 <dir_read+0x139>
c00039b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039bd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039c5:	75 3e                	jne    c0003a05 <dir_read+0x13e>
c00039c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039cb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039ce:	e8 8a e4 ff ff       	call   c0001e5d <pick_lfn>
c00039d3:	85 c0                	test   eax,eax
c00039d5:	74 2e                	je     c0003a05 <dir_read+0x13e>
c00039d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039db:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039de:	eb 25                	jmp    c0003a05 <dir_read+0x13e>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	84 c0                	test   al,al
c00039e4:	75 11                	jne    c00039f7 <dir_read+0x130>
c00039e6:	89 d0                	mov    eax,edx
c00039e8:	e8 2a e6 ff ff       	call   c0002017 <sum_sfn>
c00039ed:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039f1:	0f 84 31 ff ff ff    	je     c0003928 <dir_read+0x61>
c00039f7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039fe:	eb 37                	jmp    c0003a37 <dir_read+0x170>
c0003a00:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	e8 01 fc ff ff       	call   c000360f <dir_next>
c0003a0e:	89 c5                	mov    ebp,eax
c0003a10:	85 c0                	test   eax,eax
c0003a12:	0f 84 cd fe ff ff    	je     c00038e5 <dir_read+0x1e>
c0003a18:	eb 0f                	jmp    c0003a29 <dir_read+0x162>
c0003a1a:	85 ed                	test   ebp,ebp
c0003a1c:	0f 84 06 ff ff ff    	je     c0003928 <dir_read+0x61>
c0003a22:	eb 05                	jmp    c0003a29 <dir_read+0x162>
c0003a24:	bd 04 00 00 00       	mov    ebp,0x4
c0003a29:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a30:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a37:	83 c4 1c             	add    esp,0x1c
c0003a3a:	89 e8                	mov    eax,ebp
c0003a3c:	5b                   	pop    ebx
c0003a3d:	5e                   	pop    esi
c0003a3e:	5f                   	pop    edi
c0003a3f:	5d                   	pop    ebp
c0003a40:	c3                   	ret    

c0003a41 <dir_alloc>:
c0003a41:	55                   	push   ebp
c0003a42:	89 d5                	mov    ebp,edx
c0003a44:	57                   	push   edi
c0003a45:	31 d2                	xor    edx,edx
c0003a47:	56                   	push   esi
c0003a48:	53                   	push   ebx
c0003a49:	89 c3                	mov    ebx,eax
c0003a4b:	83 ec 0c             	sub    esp,0xc
c0003a4e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a50:	e8 62 f6 ff ff       	call   c00030b7 <dir_sdi>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 4e                	jne    c0003aa7 <dir_alloc+0x66>
c0003a59:	31 f6                	xor    esi,esi
c0003a5b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a61:	89 f8                	mov    eax,edi
c0003a63:	e8 d1 e8 ff ff       	call   c0002339 <move_window>
c0003a68:	85 c0                	test   eax,eax
c0003a6a:	75 3b                	jne    c0003aa7 <dir_alloc+0x66>
c0003a6c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a72:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a74:	75 07                	jne    c0003a7d <dir_alloc+0x3c>
c0003a76:	f7 d2                	not    edx
c0003a78:	c0 ea 07             	shr    dl,0x7
c0003a7b:	eb 0d                	jmp    c0003a8a <dir_alloc+0x49>
c0003a7d:	84 d2                	test   dl,dl
c0003a7f:	0f 94 c1             	sete   cl
c0003a82:	80 fa e5             	cmp    dl,0xe5
c0003a85:	0f 94 c2             	sete   dl
c0003a88:	09 ca                	or     edx,ecx
c0003a8a:	84 d2                	test   dl,dl
c0003a8c:	74 07                	je     c0003a95 <dir_alloc+0x54>
c0003a8e:	46                   	inc    esi
c0003a8f:	39 ee                	cmp    esi,ebp
c0003a91:	75 04                	jne    c0003a97 <dir_alloc+0x56>
c0003a93:	eb 1c                	jmp    c0003ab1 <dir_alloc+0x70>
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	ba 01 00 00 00       	mov    edx,0x1
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 6c fb ff ff       	call   c000360f <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 b4                	je     c0003a5b <dir_alloc+0x1a>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_alloc+0x70>
c0003aac:	b8 07 00 00 00       	mov    eax,0x7
c0003ab1:	83 c4 0c             	add    esp,0xc
c0003ab4:	5b                   	pop    ebx
c0003ab5:	5e                   	pop    esi
c0003ab6:	5f                   	pop    edi
c0003ab7:	5d                   	pop    ebp
c0003ab8:	c3                   	ret    

c0003ab9 <store_xdir>:
c0003ab9:	55                   	push   ebp
c0003aba:	57                   	push   edi
c0003abb:	89 c7                	mov    edi,eax
c0003abd:	56                   	push   esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 0c             	sub    esp,0xc
c0003ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ac4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ac7:	89 e8                	mov    eax,ebp
c0003ac9:	e8 5b e5 ff ff       	call   c0002029 <xdir_sum>
c0003ace:	0f b7 d0             	movzx  edx,ax
c0003ad1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ad4:	e8 f4 e0 ff ff       	call   c0001bcd <st_word>
c0003ad9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003add:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ae0:	89 f8                	mov    eax,edi
c0003ae2:	e8 d0 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003ae7:	89 c6                	mov    esi,eax
c0003ae9:	85 f6                	test   esi,esi
c0003aeb:	75 3d                	jne    c0003b2a <store_xdir+0x71>
c0003aed:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003af0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003af3:	8b 07                	mov    eax,DWORD PTR [edi]
c0003af5:	e8 3f e8 ff ff       	call   c0002339 <move_window>
c0003afa:	89 c6                	mov    esi,eax
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 2a                	jne    c0003b2a <store_xdir+0x71>
c0003b00:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b03:	b9 20 00 00 00       	mov    ecx,0x20
c0003b08:	89 ea                	mov    edx,ebp
c0003b0a:	e8 cb e0 ff ff       	call   c0001bda <mem_cpy>
c0003b0f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b11:	85 db                	test   ebx,ebx
c0003b13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b17:	74 11                	je     c0003b2a <store_xdir+0x71>
c0003b19:	31 d2                	xor    edx,edx
c0003b1b:	89 f8                	mov    eax,edi
c0003b1d:	83 c5 20             	add    ebp,0x20
c0003b20:	e8 ea fa ff ff       	call   c000360f <dir_next>
c0003b25:	4b                   	dec    ebx
c0003b26:	89 c6                	mov    esi,eax
c0003b28:	eb bf                	jmp    c0003ae9 <store_xdir+0x30>
c0003b2a:	89 f0                	mov    eax,esi
c0003b2c:	83 fe 02             	cmp    esi,0x2
c0003b2f:	76 05                	jbe    c0003b36 <store_xdir+0x7d>
c0003b31:	b8 02 00 00 00       	mov    eax,0x2
c0003b36:	83 c4 0c             	add    esp,0xc
c0003b39:	5b                   	pop    ebx
c0003b3a:	5e                   	pop    esi
c0003b3b:	5f                   	pop    edi
c0003b3c:	5d                   	pop    ebp
c0003b3d:	c3                   	ret    

c0003b3e <dir_remove>:
c0003b3e:	57                   	push   edi
c0003b3f:	56                   	push   esi
c0003b40:	53                   	push   ebx
c0003b41:	89 c3                	mov    ebx,eax
c0003b43:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b46:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b48:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b4b:	83 fa ff             	cmp    edx,0xffffffff
c0003b4e:	74 09                	je     c0003b59 <dir_remove+0x1b>
c0003b50:	e8 62 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003b55:	85 c0                	test   eax,eax
c0003b57:	75 41                	jne    c0003b9a <dir_remove+0x5c>
c0003b59:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b5c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b5f:	89 f0                	mov    eax,esi
c0003b61:	e8 d3 e7 ff ff       	call   c0002339 <move_window>
c0003b66:	85 c0                	test   eax,eax
c0003b68:	75 26                	jne    c0003b90 <dir_remove+0x52>
c0003b6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b6d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b70:	75 05                	jne    c0003b77 <dir_remove+0x39>
c0003b72:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b75:	eb 03                	jmp    c0003b7a <dir_remove+0x3c>
c0003b77:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b7a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b7e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b81:	73 17                	jae    c0003b9a <dir_remove+0x5c>
c0003b83:	31 d2                	xor    edx,edx
c0003b85:	89 d8                	mov    eax,ebx
c0003b87:	e8 83 fa ff ff       	call   c000360f <dir_next>
c0003b8c:	85 c0                	test   eax,eax
c0003b8e:	74 c9                	je     c0003b59 <dir_remove+0x1b>
c0003b90:	83 f8 04             	cmp    eax,0x4
c0003b93:	75 05                	jne    c0003b9a <dir_remove+0x5c>
c0003b95:	b8 02 00 00 00       	mov    eax,0x2
c0003b9a:	5b                   	pop    ebx
c0003b9b:	5e                   	pop    esi
c0003b9c:	5f                   	pop    edi
c0003b9d:	c3                   	ret    

c0003b9e <create_name>:
c0003b9e:	55                   	push   ebp
c0003b9f:	89 d5                	mov    ebp,edx
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	31 f6                	xor    esi,esi
c0003ba7:	53                   	push   ebx
c0003ba8:	83 ec 3c             	sub    esp,0x3c
c0003bab:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bb1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bbe:	e8 72 e0 ff ff       	call   c0001c35 <tchar2uni>
c0003bc3:	89 c3                	mov    ebx,eax
c0003bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc8:	75 0a                	jne    c0003bd4 <create_name+0x36>
c0003bca:	b8 06 00 00 00       	mov    eax,0x6
c0003bcf:	e9 9e 02 00 00       	jmp    c0003e72 <create_name+0x2d4>
c0003bd4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd9:	76 0c                	jbe    c0003be7 <create_name+0x49>
c0003bdb:	c1 e8 10             	shr    eax,0x10
c0003bde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003be2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003be6:	46                   	inc    esi
c0003be7:	66 83 fb 1f          	cmp    bx,0x1f
c0003beb:	76 4f                	jbe    c0003c3c <create_name+0x9e>
c0003bed:	66 83 fb 5c          	cmp    bx,0x5c
c0003bf1:	74 35                	je     c0003c28 <create_name+0x8a>
c0003bf3:	66 83 fb 2f          	cmp    bx,0x2f
c0003bf7:	74 2f                	je     c0003c28 <create_name+0x8a>
c0003bf9:	66 83 fb 7f          	cmp    bx,0x7f
c0003bfd:	77 11                	ja     c0003c10 <create_name+0x72>
c0003bff:	0f b7 d3             	movzx  edx,bx
c0003c02:	b8 32 35 02 c0       	mov    eax,0xc0023532
c0003c07:	e8 11 e0 ff ff       	call   c0001c1d <chk_chr>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	75 ba                	jne    c0003bca <create_name+0x2c>
c0003c10:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c16:	77 b2                	ja     c0003bca <create_name+0x2c>
c0003c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c1c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c20:	46                   	inc    esi
c0003c21:	eb 97                	jmp    c0003bba <create_name+0x1c>
c0003c23:	40                   	inc    eax
c0003c24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c2e:	80 fa 2f             	cmp    dl,0x2f
c0003c31:	74 f0                	je     c0003c23 <create_name+0x85>
c0003c33:	80 fa 5c             	cmp    dl,0x5c
c0003c36:	74 eb                	je     c0003c23 <create_name+0x85>
c0003c38:	31 db                	xor    ebx,ebx
c0003c3a:	eb 02                	jmp    c0003c3e <create_name+0xa0>
c0003c3c:	b3 04                	mov    bl,0x4
c0003c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c42:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c45:	85 f6                	test   esi,esi
c0003c47:	74 18                	je     c0003c61 <create_name+0xc3>
c0003c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c4d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c52:	66 83 f8 20          	cmp    ax,0x20
c0003c56:	74 06                	je     c0003c5e <create_name+0xc0>
c0003c58:	66 83 f8 2e          	cmp    ax,0x2e
c0003c5c:	75 03                	jne    c0003c61 <create_name+0xc3>
c0003c5e:	4e                   	dec    esi
c0003c5f:	eb e4                	jmp    c0003c45 <create_name+0xa7>
c0003c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c65:	31 ed                	xor    ebp,ebp
c0003c67:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c6d:	85 f6                	test   esi,esi
c0003c6f:	0f 84 55 ff ff ff    	je     c0003bca <create_name+0x2c>
c0003c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c79:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c7c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c80:	66 83 f8 20          	cmp    ax,0x20
c0003c84:	75 04                	jne    c0003c8a <create_name+0xec>
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	eb eb                	jmp    c0003c75 <create_name+0xd7>
c0003c8a:	85 ed                	test   ebp,ebp
c0003c8c:	75 06                	jne    c0003c94 <create_name+0xf6>
c0003c8e:	66 83 f8 2e          	cmp    ax,0x2e
c0003c92:	75 08                	jne    c0003c9c <create_name+0xfe>
c0003c94:	83 cb 03             	or     ebx,0x3
c0003c97:	eb 03                	jmp    c0003c9c <create_name+0xfe>
c0003c99:	4e                   	dec    esi
c0003c9a:	74 0c                	je     c0003ca8 <create_name+0x10a>
c0003c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ca0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ca6:	75 f1                	jne    c0003c99 <create_name+0xfb>
c0003ca8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cad:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cb0:	ba 20 00 00 00       	mov    edx,0x20
c0003cb5:	e8 35 df ff ff       	call   c0001bef <mem_set>
c0003cba:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cc2:	31 c9                	xor    ecx,ecx
c0003cc4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cd4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd8:	66 85 ed             	test   bp,bp
c0003cdb:	0f 84 30 01 00 00    	je     c0003e11 <create_name+0x273>
c0003ce1:	66 83 fd 20          	cmp    bp,0x20
c0003ce5:	74 10                	je     c0003cf7 <create_name+0x159>
c0003ce7:	66 83 fd 2e          	cmp    bp,0x2e
c0003ceb:	75 13                	jne    c0003d00 <create_name+0x162>
c0003ced:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003cf1:	0f 84 6b 01 00 00    	je     c0003e62 <create_name+0x2c4>
c0003cf7:	83 cb 03             	or     ebx,0x3
c0003cfa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cfe:	eb c9                	jmp    c0003cc9 <create_name+0x12b>
c0003d00:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d04:	73 0b                	jae    c0003d11 <create_name+0x173>
c0003d06:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d0a:	75 47                	jne    c0003d53 <create_name+0x1b5>
c0003d0c:	e9 51 01 00 00       	jmp    c0003e62 <create_name+0x2c4>
c0003d11:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d16:	75 10                	jne    c0003d28 <create_name+0x18a>
c0003d18:	83 cb 03             	or     ebx,0x3
c0003d1b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d23:	e9 e9 00 00 00       	jmp    c0003e11 <create_name+0x273>
c0003d28:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2c:	74 0d                	je     c0003d3b <create_name+0x19d>
c0003d2e:	83 cb 03             	or     ebx,0x3
c0003d31:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d35:	0f 87 d6 00 00 00    	ja     c0003e11 <create_name+0x273>
c0003d3b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d44:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d4c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d51:	eb a7                	jmp    c0003cfa <create_name+0x15c>
c0003d53:	66 83 fd 7f          	cmp    bp,0x7f
c0003d57:	76 68                	jbe    c0003dc1 <create_name+0x223>
c0003d59:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d5d:	88 da                	mov    dl,bl
c0003d5f:	83 ca 02             	or     edx,0x2
c0003d62:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d66:	50                   	push   eax
c0003d67:	50                   	push   eax
c0003d68:	68 b5 01 00 00       	push   0x1b5
c0003d6d:	55                   	push   ebp
c0003d6e:	e8 81 48 00 00       	call   c00085f4 <ff_uni2oem>
c0003d73:	83 c4 10             	add    esp,0x10
c0003d76:	89 c5                	mov    ebp,eax
c0003d78:	a8 80                	test   al,0x80
c0003d7a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d82:	74 0c                	je     c0003d90 <create_name+0x1f2>
c0003d84:	83 e5 7f             	and    ebp,0x7f
c0003d87:	0f b6 ad 80 34 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdcb80]
c0003d8e:	eb 2a                	jmp    c0003dba <create_name+0x21c>
c0003d90:	66 3d ff 00          	cmp    ax,0xff
c0003d94:	76 24                	jbe    c0003dba <create_name+0x21c>
c0003d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d9a:	48                   	dec    eax
c0003d9b:	39 c8                	cmp    eax,ecx
c0003d9d:	77 0c                	ja     c0003dab <create_name+0x20d>
c0003d9f:	83 cb 03             	or     ebx,0x3
c0003da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003da6:	e9 4f ff ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003dab:	89 e8                	mov    eax,ebp
c0003dad:	88 d3                	mov    bl,dl
c0003daf:	66 c1 e8 08          	shr    ax,0x8
c0003db3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003db7:	41                   	inc    ecx
c0003db8:	eb 4b                	jmp    c0003e05 <create_name+0x267>
c0003dba:	88 d3                	mov    bl,dl
c0003dbc:	66 85 ed             	test   bp,bp
c0003dbf:	74 19                	je     c0003dda <create_name+0x23c>
c0003dc1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dc5:	0f b7 d5             	movzx  edx,bp
c0003dc8:	b8 3b 35 02 c0       	mov    eax,0xc002353b
c0003dcd:	e8 4b de ff ff       	call   c0001c1d <chk_chr>
c0003dd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 0a                	je     c0003de4 <create_name+0x246>
c0003dda:	83 cb 03             	or     ebx,0x3
c0003ddd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003de2:	eb 21                	jmp    c0003e05 <create_name+0x267>
c0003de4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003de7:	66 83 f8 19          	cmp    ax,0x19
c0003deb:	77 07                	ja     c0003df4 <create_name+0x256>
c0003ded:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003df2:	eb 11                	jmp    c0003e05 <create_name+0x267>
c0003df4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 08                	ja     c0003e05 <create_name+0x267>
c0003dfd:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e02:	83 ed 20             	sub    ebp,0x20
c0003e05:	89 e8                	mov    eax,ebp
c0003e07:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e0b:	41                   	inc    ecx
c0003e0c:	e9 e9 fe ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003e11:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e15:	75 04                	jne    c0003e1b <create_name+0x27d>
c0003e17:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e1b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e20:	75 05                	jne    c0003e27 <create_name+0x289>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2b:	83 e0 0c             	and    eax,0xc
c0003e2e:	3c 0c                	cmp    al,0xc
c0003e30:	74 0b                	je     c0003e3d <create_name+0x29f>
c0003e32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e36:	83 e0 03             	and    eax,0x3
c0003e39:	3c 03                	cmp    al,0x3
c0003e3b:	75 05                	jne    c0003e42 <create_name+0x2a4>
c0003e3d:	83 cb 02             	or     ebx,0x2
c0003e40:	eb 19                	jmp    c0003e5b <create_name+0x2bd>
c0003e42:	f6 c3 02             	test   bl,0x2
c0003e45:	75 14                	jne    c0003e5b <create_name+0x2bd>
c0003e47:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e4c:	74 03                	je     c0003e51 <create_name+0x2b3>
c0003e4e:	83 cb 10             	or     ebx,0x10
c0003e51:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e56:	74 03                	je     c0003e5b <create_name+0x2bd>
c0003e58:	83 cb 08             	or     ebx,0x8
c0003e5b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e5e:	31 c0                	xor    eax,eax
c0003e60:	eb 10                	jmp    c0003e72 <create_name+0x2d4>
c0003e62:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e67:	0f 85 ce fe ff ff    	jne    c0003d3b <create_name+0x19d>
c0003e6d:	e9 a6 fe ff ff       	jmp    c0003d18 <create_name+0x17a>
c0003e72:	83 c4 3c             	add    esp,0x3c
c0003e75:	5b                   	pop    ebx
c0003e76:	5e                   	pop    esi
c0003e77:	5f                   	pop    edi
c0003e78:	5d                   	pop    ebp
c0003e79:	c3                   	ret    

c0003e7a <xname_sum>:
c0003e7a:	56                   	push   esi
c0003e7b:	53                   	push   ebx
c0003e7c:	89 c6                	mov    esi,eax
c0003e7e:	51                   	push   ecx
c0003e7f:	31 db                	xor    ebx,ebx
c0003e81:	83 c6 02             	add    esi,0x2
c0003e84:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e88:	66 85 c0             	test   ax,ax
c0003e8b:	74 1f                	je     c0003eac <xname_sum+0x32>
c0003e8d:	83 ec 0c             	sub    esp,0xc
c0003e90:	66 d1 cb             	ror    bx,1
c0003e93:	50                   	push   eax
c0003e94:	e8 67 48 00 00       	call   c0008700 <ff_wtoupper>
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	0f b6 d0             	movzx  edx,al
c0003e9f:	66 c1 e8 08          	shr    ax,0x8
c0003ea3:	01 d3                	add    ebx,edx
c0003ea5:	66 d1 cb             	ror    bx,1
c0003ea8:	01 c3                	add    ebx,eax
c0003eaa:	eb d5                	jmp    c0003e81 <xname_sum+0x7>
c0003eac:	89 d8                	mov    eax,ebx
c0003eae:	5a                   	pop    edx
c0003eaf:	5b                   	pop    ebx
c0003eb0:	5e                   	pop    esi
c0003eb1:	c3                   	ret    

c0003eb2 <create_xdir>:
c0003eb2:	55                   	push   ebp
c0003eb3:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb8:	57                   	push   edi
c0003eb9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ebe:	56                   	push   esi
c0003ebf:	31 ff                	xor    edi,edi
c0003ec1:	53                   	push   ebx
c0003ec2:	be 40 00 00 00       	mov    esi,0x40
c0003ec7:	89 c3                	mov    ebx,eax
c0003ec9:	83 ec 1c             	sub    esp,0x1c
c0003ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ed0:	31 d2                	xor    edx,edx
c0003ed2:	e8 18 dd ff ff       	call   c0001bef <mem_set>
c0003ed7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eda:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ede:	31 c9                	xor    ecx,ecx
c0003ee0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ee3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ee7:	83 c6 02             	add    esi,0x2
c0003eea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003eee:	66 85 ed             	test   bp,bp
c0003ef1:	74 12                	je     c0003f05 <create_xdir+0x53>
c0003ef3:	0f b6 c1             	movzx  eax,cl
c0003ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003efa:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003efe:	66 83 fd 01          	cmp    bp,0x1
c0003f02:	80 d9 ff             	sbb    cl,0xff
c0003f05:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f08:	0f b7 d5             	movzx  edx,bp
c0003f0b:	83 c6 02             	add    esi,0x2
c0003f0e:	e8 ba dc ff ff       	call   c0001bcd <st_word>
c0003f13:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f19:	75 d3                	jne    c0003eee <create_xdir+0x3c>
c0003f1b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f26:	0f b6 c1             	movzx  eax,cl
c0003f29:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f2e:	74 07                	je     c0003f37 <create_xdir+0x85>
c0003f30:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f35:	eb a9                	jmp    c0003ee0 <create_xdir+0x2e>
c0003f37:	8d 47 02             	lea    eax,[edi+0x2]
c0003f3a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f3d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f40:	89 d0                	mov    eax,edx
c0003f42:	e8 33 ff ff ff       	call   c0003e7a <xname_sum>
c0003f47:	83 c4 1c             	add    esp,0x1c
c0003f4a:	0f b7 d0             	movzx  edx,ax
c0003f4d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f50:	5b                   	pop    ebx
c0003f51:	5e                   	pop    esi
c0003f52:	5f                   	pop    edi
c0003f53:	5d                   	pop    ebp
c0003f54:	e9 74 dc ff ff       	jmp    c0001bcd <st_word>

c0003f59 <cmp_lfn>:
c0003f59:	55                   	push   ebp
c0003f5a:	57                   	push   edi
c0003f5b:	89 d7                	mov    edi,edx
c0003f5d:	56                   	push   esi
c0003f5e:	53                   	push   ebx
c0003f5f:	83 ec 1c             	sub    esp,0x1c
c0003f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f66:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f69:	e8 ed db ff ff       	call   c0001b5b <ld_word>
c0003f6e:	66 85 c0             	test   ax,ax
c0003f71:	74 07                	je     c0003f7a <cmp_lfn+0x21>
c0003f73:	31 c0                	xor    eax,eax
c0003f75:	e9 9a 00 00 00       	jmp    c0004014 <cmp_lfn+0xbb>
c0003f7a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f7c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f81:	83 e3 3f             	and    ebx,0x3f
c0003f84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f8c:	4b                   	dec    ebx
c0003f8d:	6b db 0d             	imul   ebx,ebx,0xd
c0003f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f94:	0f b6 80 00 35 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdcb00]
c0003f9b:	01 f8                	add    eax,edi
c0003f9d:	e8 b9 db ff ff       	call   c0001b5b <ld_word>
c0003fa2:	66 85 ed             	test   bp,bp
c0003fa5:	89 c6                	mov    esi,eax
c0003fa7:	74 3c                	je     c0003fe5 <cmp_lfn+0x8c>
c0003fa9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003faf:	77 c2                	ja     c0003f73 <cmp_lfn+0x1a>
c0003fb1:	83 ec 0c             	sub    esp,0xc
c0003fb4:	0f b7 c0             	movzx  eax,ax
c0003fb7:	50                   	push   eax
c0003fb8:	e8 43 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fbd:	89 c5                	mov    ebp,eax
c0003fbf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fca:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	e8 2a 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fd6:	83 c4 10             	add    esp,0x10
c0003fd9:	39 c5                	cmp    ebp,eax
c0003fdb:	75 96                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fdd:	89 f5                	mov    ebp,esi
c0003fdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fe3:	eb 04                	jmp    c0003fe9 <cmp_lfn+0x90>
c0003fe5:	66 46                	inc    si
c0003fe7:	75 8a                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fe9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fed:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ff2:	75 9c                	jne    c0003f90 <cmp_lfn+0x37>
c0003ff4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ff7:	74 16                	je     c000400f <cmp_lfn+0xb6>
c0003ff9:	66 85 ed             	test   bp,bp
c0003ffc:	74 11                	je     c000400f <cmp_lfn+0xb6>
c0003ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004002:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004007:	0f 94 c0             	sete   al
c000400a:	0f b6 c0             	movzx  eax,al
c000400d:	eb 05                	jmp    c0004014 <cmp_lfn+0xbb>
c000400f:	b8 01 00 00 00       	mov    eax,0x1
c0004014:	83 c4 1c             	add    esp,0x1c
c0004017:	5b                   	pop    ebx
c0004018:	5e                   	pop    esi
c0004019:	5f                   	pop    edi
c000401a:	5d                   	pop    ebp
c000401b:	c3                   	ret    

c000401c <dir_find>:
c000401c:	55                   	push   ebp
c000401d:	31 d2                	xor    edx,edx
c000401f:	57                   	push   edi
c0004020:	56                   	push   esi
c0004021:	53                   	push   ebx
c0004022:	89 c3                	mov    ebx,eax
c0004024:	83 ec 1c             	sub    esp,0x1c
c0004027:	8b 30                	mov    esi,DWORD PTR [eax]
c0004029:	e8 89 f0 ff ff       	call   c00030b7 <dir_sdi>
c000402e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004031:	85 c0                	test   eax,eax
c0004033:	0f 85 9e 01 00 00    	jne    c00041d7 <dir_find+0x1bb>
c0004039:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000403c:	0f 85 8d 00 00 00    	jne    c00040cf <dir_find+0xb3>
c0004042:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004045:	e8 30 fe ff ff       	call   c0003e7a <xname_sum>
c000404a:	89 c7                	mov    edi,eax
c000404c:	31 d2                	xor    edx,edx
c000404e:	89 d8                	mov    eax,ebx
c0004050:	e8 72 f8 ff ff       	call   c00038c7 <dir_read>
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 5e 01 00 00    	jne    c00041bb <dir_find+0x19f>
c000405d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004060:	8d 41 24             	lea    eax,[ecx+0x24]
c0004063:	e8 f3 da ff ff       	call   c0001b5b <ld_word>
c0004068:	66 39 f8             	cmp    ax,di
c000406b:	75 df                	jne    c000404c <dir_find+0x30>
c000406d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004070:	31 ed                	xor    ebp,ebp
c0004072:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004076:	ba 40 00 00 00       	mov    edx,0x40
c000407b:	89 e9                	mov    ecx,ebp
c000407d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004081:	0f 84 42 01 00 00    	je     c00041c9 <dir_find+0x1ad>
c0004087:	f6 c2 1f             	test   dl,0x1f
c000408a:	75 03                	jne    c000408f <dir_find+0x73>
c000408c:	83 c2 02             	add    edx,0x2
c000408f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004093:	89 d0                	mov    eax,edx
c0004095:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004098:	e8 be da ff ff       	call   c0001b5b <ld_word>
c000409d:	83 ec 0c             	sub    esp,0xc
c00040a0:	0f b7 c0             	movzx  eax,ax
c00040a3:	50                   	push   eax
c00040a4:	e8 57 46 00 00       	call   c0008700 <ff_wtoupper>
c00040a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040ad:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	e8 44 46 00 00       	call   c0008700 <ff_wtoupper>
c00040bc:	83 c4 10             	add    esp,0x10
c00040bf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040c3:	75 87                	jne    c000404c <dir_find+0x30>
c00040c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c9:	45                   	inc    ebp
c00040ca:	83 c2 02             	add    edx,0x2
c00040cd:	eb ac                	jmp    c000407b <dir_find+0x5f>
c00040cf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040d6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040e6:	89 f0                	mov    eax,esi
c00040e8:	e8 4c e2 ff ff       	call   c0002339 <move_window>
c00040ed:	85 c0                	test   eax,eax
c00040ef:	0f 85 c6 00 00 00    	jne    c00041bb <dir_find+0x19f>
c00040f5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040fb:	84 c9                	test   cl,cl
c00040fd:	0f 84 bd 00 00 00    	je     c00041c0 <dir_find+0x1a4>
c0004103:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004106:	88 d0                	mov    al,dl
c0004108:	83 e0 3f             	and    eax,0x3f
c000410b:	80 f9 e5             	cmp    cl,0xe5
c000410e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004111:	0f 84 87 00 00 00    	je     c000419e <dir_find+0x182>
c0004117:	80 e2 08             	and    dl,0x8
c000411a:	74 06                	je     c0004122 <dir_find+0x106>
c000411c:	3c 0f                	cmp    al,0xf
c000411e:	75 7e                	jne    c000419e <dir_find+0x182>
c0004120:	eb 04                	jmp    c0004126 <dir_find+0x10a>
c0004122:	3c 0f                	cmp    al,0xf
c0004124:	75 4c                	jne    c0004172 <dir_find+0x156>
c0004126:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000412a:	75 7e                	jne    c00041aa <dir_find+0x18e>
c000412c:	f6 c1 40             	test   cl,0x40
c000412f:	74 12                	je     c0004143 <dir_find+0x127>
c0004131:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004134:	83 e1 bf             	and    ecx,0xffffffbf
c0004137:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000413b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000413e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004141:	eb 06                	jmp    c0004149 <dir_find+0x12d>
c0004143:	89 f8                	mov    eax,edi
c0004145:	38 c8                	cmp    al,cl
c0004147:	75 5c                	jne    c00041a5 <dir_find+0x189>
c0004149:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000414d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004152:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004155:	75 53                	jne    c00041aa <dir_find+0x18e>
c0004157:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000415b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000415e:	89 ea                	mov    edx,ebp
c0004160:	e8 f4 fd ff ff       	call   c0003f59 <cmp_lfn>
c0004165:	85 c0                	test   eax,eax
c0004167:	74 41                	je     c00041aa <dir_find+0x18e>
c0004169:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000416d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004170:	eb 38                	jmp    c00041aa <dir_find+0x18e>
c0004172:	89 f8                	mov    eax,edi
c0004174:	84 c0                	test   al,al
c0004176:	75 0d                	jne    c0004185 <dir_find+0x169>
c0004178:	89 e8                	mov    eax,ebp
c000417a:	e8 98 de ff ff       	call   c0002017 <sum_sfn>
c000417f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004183:	74 52                	je     c00041d7 <dir_find+0x1bb>
c0004185:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004189:	75 13                	jne    c000419e <dir_find+0x182>
c000418b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000418e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004193:	89 e8                	mov    eax,ebp
c0004195:	e8 60 da ff ff       	call   c0001bfa <mem_cmp>
c000419a:	85 c0                	test   eax,eax
c000419c:	74 39                	je     c00041d7 <dir_find+0x1bb>
c000419e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041aa:	31 d2                	xor    edx,edx
c00041ac:	89 d8                	mov    eax,ebx
c00041ae:	e8 5c f4 ff ff       	call   c000360f <dir_next>
c00041b3:	85 c0                	test   eax,eax
c00041b5:	0f 84 25 ff ff ff    	je     c00040e0 <dir_find+0xc4>
c00041bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041be:	eb 17                	jmp    c00041d7 <dir_find+0x1bb>
c00041c0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041c7:	eb 0e                	jmp    c00041d7 <dir_find+0x1bb>
c00041c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041cc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041d1:	0f 85 75 fe ff ff    	jne    c000404c <dir_find+0x30>
c00041d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041da:	83 c4 1c             	add    esp,0x1c
c00041dd:	5b                   	pop    ebx
c00041de:	5e                   	pop    esi
c00041df:	5f                   	pop    edi
c00041e0:	5d                   	pop    ebp
c00041e1:	c3                   	ret    

c00041e2 <dir_register>:
c00041e2:	55                   	push   ebp
c00041e3:	57                   	push   edi
c00041e4:	56                   	push   esi
c00041e5:	be 06 00 00 00       	mov    esi,0x6
c00041ea:	53                   	push   ebx
c00041eb:	83 ec 6c             	sub    esp,0x6c
c00041ee:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041f2:	0f 85 62 02 00 00    	jne    c000445a <dir_register+0x278>
c00041f8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041fa:	31 ff                	xor    edi,edi
c00041fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ff:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004204:	74 03                	je     c0004209 <dir_register+0x27>
c0004206:	47                   	inc    edi
c0004207:	eb f6                	jmp    c00041ff <dir_register+0x1d>
c0004209:	89 c3                	mov    ebx,eax
c000420b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000420f:	0f 85 e1 00 00 00    	jne    c00042f6 <dir_register+0x114>
c0004215:	83 c7 0e             	add    edi,0xe
c0004218:	b9 0f 00 00 00       	mov    ecx,0xf
c000421d:	89 f8                	mov    eax,edi
c000421f:	31 d2                	xor    edx,edx
c0004221:	f7 f1                	div    ecx
c0004223:	8d 50 02             	lea    edx,[eax+0x2]
c0004226:	89 c7                	mov    edi,eax
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 12 f8 ff ff       	call   c0003a41 <dir_alloc>
c000422f:	89 c6                	mov    esi,eax
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 21 02 00 00    	jne    c000445a <dir_register+0x278>
c0004239:	81 c7 01 00 00 08    	add    edi,0x8000001
c000423f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004242:	c1 e7 05             	shl    edi,0x5
c0004245:	29 f8                	sub    eax,edi
c0004247:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000424d:	a8 04                	test   al,0x4
c000424f:	0f 84 91 00 00 00    	je     c00042e6 <dir_register+0x104>
c0004255:	83 e0 fb             	and    eax,0xfffffffb
c0004258:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 25 ec ff ff       	call   c0002e87 <fill_first_frag>
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 ee 01 00 00    	jne    c0004458 <dir_register+0x276>
c000426a:	83 c9 ff             	or     ecx,0xffffffff
c000426d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004270:	89 d8                	mov    eax,ebx
c0004272:	e8 db eb ff ff       	call   c0002e52 <fill_last_frag>
c0004277:	85 c0                	test   eax,eax
c0004279:	0f 85 d9 01 00 00    	jne    c0004458 <dir_register+0x276>
c000427f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004283:	74 61                	je     c00042e6 <dir_register+0x104>
c0004285:	89 da                	mov    edx,ebx
c0004287:	8d 44 24 14          	lea    eax,[esp+0x14]
c000428b:	e8 ea f5 ff ff       	call   c000387a <load_obj_xdir>
c0004290:	85 c0                	test   eax,eax
c0004292:	0f 85 c0 01 00 00    	jne    c0004458 <dir_register+0x276>
c0004298:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000429c:	31 c9                	xor    ecx,ecx
c000429e:	c1 e2 09             	shl    edx,0x9
c00042a1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042a4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042a7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042aa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b0:	83 c0 38             	add    eax,0x38
c00042b3:	e8 1c d9 ff ff       	call   c0001bd4 <st_qword>
c00042b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042be:	83 c0 28             	add    eax,0x28
c00042c1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042c4:	e8 0b d9 ff ff       	call   c0001bd4 <st_qword>
c00042c9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042cf:	83 c8 01             	or     eax,0x1
c00042d2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d9:	e8 db f7 ff ff       	call   c0003ab9 <store_xdir>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 85 72 01 00 00    	jne    c0004458 <dir_register+0x276>
c00042e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042ec:	e8 c1 fb ff ff       	call   c0003eb2 <create_xdir>
c00042f1:	e9 64 01 00 00       	jmp    c000445a <dir_register+0x278>
c00042f6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f9:	b9 0c 00 00 00       	mov    ecx,0xc
c00042fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004302:	89 c2                	mov    edx,eax
c0004304:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004308:	e8 cd d8 ff ff       	call   c0001bda <mem_cpy>
c000430d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004312:	74 58                	je     c000436c <dir_register+0x18a>
c0004314:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004318:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004320:	83 ec 0c             	sub    esp,0xc
c0004323:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000432a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000432e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004332:	e8 24 dc ff ff       	call   c0001f5b <gen_numname>
c0004337:	89 d8                	mov    eax,ebx
c0004339:	e8 de fc ff ff       	call   c000401c <dir_find>
c000433e:	83 c4 10             	add    esp,0x10
c0004341:	89 c6                	mov    esi,eax
c0004343:	85 c0                	test   eax,eax
c0004345:	75 15                	jne    c000435c <dir_register+0x17a>
c0004347:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000434b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004350:	75 ce                	jne    c0004320 <dir_register+0x13e>
c0004352:	be 07 00 00 00       	mov    esi,0x7
c0004357:	e9 fe 00 00 00       	jmp    c000445a <dir_register+0x278>
c000435c:	83 f8 04             	cmp    eax,0x4
c000435f:	0f 85 f5 00 00 00    	jne    c000445a <dir_register+0x278>
c0004365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004369:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000436c:	b9 01 00 00 00       	mov    ecx,0x1
c0004371:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004376:	74 0f                	je     c0004387 <dir_register+0x1a5>
c0004378:	b9 0d 00 00 00       	mov    ecx,0xd
c000437d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004380:	31 d2                	xor    edx,edx
c0004382:	f7 f1                	div    ecx
c0004384:	8d 48 01             	lea    ecx,[eax+0x1]
c0004387:	89 ca                	mov    edx,ecx
c0004389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000438d:	89 d8                	mov    eax,ebx
c000438f:	e8 ad f6 ff ff       	call   c0003a41 <dir_alloc>
c0004394:	89 c6                	mov    esi,eax
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 bc 00 00 00    	jne    c000445a <dir_register+0x278>
c000439e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043a2:	49                   	dec    ecx
c00043a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043a7:	74 6a                	je     c0004413 <dir_register+0x231>
c00043a9:	89 c8                	mov    eax,ecx
c00043ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ae:	c1 e0 05             	shl    eax,0x5
c00043b1:	29 c2                	sub    edx,eax
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 fd ec ff ff       	call   c00030b7 <dir_sdi>
c00043ba:	89 c6                	mov    esi,eax
c00043bc:	85 c0                	test   eax,eax
c00043be:	0f 85 96 00 00 00    	jne    c000445a <dir_register+0x278>
c00043c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c8:	e8 4a dc ff ff       	call   c0002017 <sum_sfn>
c00043cd:	0f b6 f8             	movzx  edi,al
c00043d0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043d3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043d6:	89 e8                	mov    eax,ebp
c00043d8:	e8 5c df ff ff       	call   c0002339 <move_window>
c00043dd:	89 c6                	mov    esi,eax
c00043df:	85 c0                	test   eax,eax
c00043e1:	75 77                	jne    c000445a <dir_register+0x278>
c00043e3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043eb:	83 ec 0c             	sub    esp,0xc
c00043ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043f1:	57                   	push   edi
c00043f2:	e8 e0 da ff ff       	call   c0001ed7 <put_lfn>
c00043f7:	31 d2                	xor    edx,edx
c00043f9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043fd:	89 d8                	mov    eax,ebx
c00043ff:	e8 0b f2 ff ff       	call   c000360f <dir_next>
c0004404:	83 c4 10             	add    esp,0x10
c0004407:	89 c6                	mov    esi,eax
c0004409:	85 c0                	test   eax,eax
c000440b:	75 4d                	jne    c000445a <dir_register+0x278>
c000440d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004411:	75 bd                	jne    c00043d0 <dir_register+0x1ee>
c0004413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004416:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004419:	89 e8                	mov    eax,ebp
c000441b:	e8 19 df ff ff       	call   c0002339 <move_window>
c0004420:	89 c6                	mov    esi,eax
c0004422:	85 c0                	test   eax,eax
c0004424:	75 34                	jne    c000445a <dir_register+0x278>
c0004426:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004429:	b9 20 00 00 00       	mov    ecx,0x20
c000442e:	31 d2                	xor    edx,edx
c0004430:	e8 ba d7 ff ff       	call   c0001bef <mem_set>
c0004435:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000443c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004441:	e8 94 d7 ff ff       	call   c0001bda <mem_cpy>
c0004446:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004449:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000444c:	83 e0 18             	and    eax,0x18
c000444f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004452:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004456:	eb 02                	jmp    c000445a <dir_register+0x278>
c0004458:	89 c6                	mov    esi,eax
c000445a:	83 c4 6c             	add    esp,0x6c
c000445d:	89 f0                	mov    eax,esi
c000445f:	5b                   	pop    ebx
c0004460:	5e                   	pop    esi
c0004461:	5f                   	pop    edi
c0004462:	5d                   	pop    ebp
c0004463:	c3                   	ret    

c0004464 <sync_fs>:
c0004464:	56                   	push   esi
c0004465:	53                   	push   ebx
c0004466:	53                   	push   ebx
c0004467:	89 c3                	mov    ebx,eax
c0004469:	e8 37 de ff ff       	call   c00022a5 <sync_window>
c000446e:	85 c0                	test   eax,eax
c0004470:	0f 85 b1 00 00 00    	jne    c0004527 <sync_fs+0xc3>
c0004476:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004479:	0f 85 8e 00 00 00    	jne    c000450d <sync_fs+0xa9>
c000447f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004483:	0f 85 84 00 00 00    	jne    c000450d <sync_fs+0xa9>
c0004489:	b9 00 02 00 00       	mov    ecx,0x200
c000448e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004491:	31 d2                	xor    edx,edx
c0004493:	89 f0                	mov    eax,esi
c0004495:	e8 55 d7 ff ff       	call   c0001bef <mem_set>
c000449a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044a0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044a5:	e8 23 d7 ff ff       	call   c0001bcd <st_word>
c00044aa:	ba 52 52 61 41       	mov    edx,0x41615252
c00044af:	89 f0                	mov    eax,esi
c00044b1:	e8 1b d7 ff ff       	call   c0001bd1 <st_dword>
c00044b6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044bc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044c1:	e8 0b d7 ff ff       	call   c0001bd1 <st_dword>
c00044c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044cf:	e8 fd d6 ff ff       	call   c0001bd1 <st_dword>
c00044d4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044d7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044dd:	e8 ef d6 ff ff       	call   c0001bd1 <st_dword>
c00044e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e8:	83 c0 01             	add    eax,0x1
c00044eb:	83 d2 00             	adc    edx,0x0
c00044ee:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044f7:	6a 01                	push   0x1
c00044f9:	52                   	push   edx
c00044fa:	50                   	push   eax
c00044fb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044ff:	56                   	push   esi
c0004500:	50                   	push   eax
c0004501:	e8 20 d6 ff ff       	call   c0001b26 <disk_write>
c0004506:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000450a:	83 c4 20             	add    esp,0x20
c000450d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004511:	51                   	push   ecx
c0004512:	6a 00                	push   0x0
c0004514:	6a 00                	push   0x0
c0004516:	50                   	push   eax
c0004517:	e8 20 d6 ff ff       	call   c0001b3c <disk_ioctl>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	85 c0                	test   eax,eax
c0004521:	0f 95 c0             	setne  al
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	5a                   	pop    edx
c0004528:	5b                   	pop    ebx
c0004529:	5e                   	pop    esi
c000452a:	c3                   	ret    

c000452b <create_partition>:
c000452b:	55                   	push   ebp
c000452c:	0f b6 c0             	movzx  eax,al
c000452f:	57                   	push   edi
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	83 ec 60             	sub    esp,0x60
c0004535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004539:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000453d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004541:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004545:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004549:	50                   	push   eax
c000454a:	6a 01                	push   0x1
c000454c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004550:	e8 e7 d5 ff ff       	call   c0001b3c <disk_ioctl>
c0004555:	83 c4 10             	add    esp,0x10
c0004558:	85 c0                	test   eax,eax
c000455a:	74 0a                	je     c0004566 <create_partition+0x3b>
c000455c:	b8 01 00 00 00       	mov    eax,0x1
c0004561:	e9 67 05 00 00       	jmp    c0004acd <create_partition+0x5a2>
c0004566:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000456a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000456e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004572:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004576:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000457b:	0f 86 ed 03 00 00    	jbe    c000496e <create_partition+0x443>
c0004581:	83 c0 df             	add    eax,0xffffffdf
c0004584:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000458c:	83 d2 ff             	adc    edx,0xffffffff
c000458f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004593:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000459b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000459f:	83 c0 bd             	add    eax,0xffffffbd
c00045a2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a9:	83 d2 ff             	adc    edx,0xffffffff
c00045ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045b4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045bc:	be 22 00 00 00       	mov    esi,0x22
c00045c1:	31 ff                	xor    edi,edi
c00045c3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045cb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045d3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045db:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045df:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e5:	75 0e                	jne    c00045f5 <create_partition+0xca>
c00045e7:	b9 00 02 00 00       	mov    ecx,0x200
c00045ec:	31 d2                	xor    edx,edx
c00045ee:	89 d8                	mov    eax,ebx
c00045f0:	e8 fa d5 ff ff       	call   c0001bef <mem_set>
c00045f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004601:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004604:	0f 84 23 01 00 00    	je     c000472d <create_partition+0x202>
c000460a:	89 f0                	mov    eax,esi
c000460c:	89 fa                	mov    edx,edi
c000460e:	05 ff 07 00 00       	add    eax,0x7ff
c0004613:	83 d2 00             	adc    edx,0x0
c0004616:	89 c1                	mov    ecx,eax
c0004618:	89 d7                	mov    edi,edx
c000461a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004620:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004624:	89 ce                	mov    esi,ecx
c0004626:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000462a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000462e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004632:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004635:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004639:	89 04 24             	mov    DWORD PTR [esp],eax
c000463c:	b8 64 00 00 00       	mov    eax,0x64
c0004641:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004644:	b8 00 00 00 00       	mov    eax,0x0
c0004649:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000464d:	72 41                	jb     c0004690 <create_partition+0x165>
c000464f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004657:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000465b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004660:	01 c1                	add    ecx,eax
c0004662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004666:	f7 24 24             	mul    DWORD PTR [esp]
c0004669:	6a 00                	push   0x0
c000466b:	01 ca                	add    edx,ecx
c000466d:	6a 64                	push   0x64
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	e8 9e dd 01 00       	call   c0022414 <__udivdi3>
c0004676:	83 c4 10             	add    esp,0x10
c0004679:	05 ff 07 00 00       	add    eax,0x7ff
c000467e:	83 d2 00             	adc    edx,0x0
c0004681:	89 c1                	mov    ecx,eax
c0004683:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004687:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000468d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004690:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004697:	01 f0                	add    eax,esi
c0004699:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000469d:	11 fa                	adc    edx,edi
c000469f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046a3:	19 d1                	sbb    ecx,edx
c00046a5:	73 2e                	jae    c00046d5 <create_partition+0x1aa>
c00046a7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046ab:	89 f8                	mov    eax,edi
c00046ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046b4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c0:	73 6b                	jae    c000472d <create_partition+0x202>
c00046c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046ca:	29 f0                	sub    eax,esi
c00046cc:	19 fa                	sbb    edx,edi
c00046ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046dc:	74 4f                	je     c000472d <create_partition+0x202>
c00046de:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046e1:	b9 10 00 00 00       	mov    ecx,0x10
c00046e6:	ba 10 35 02 c0       	mov    edx,0xc0023510
c00046eb:	e8 ea d4 ff ff       	call   c0001bda <mem_cpy>
c00046f0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046fd:	e8 2c db ff ff       	call   c000222e <make_rand>
c0004702:	89 f2                	mov    edx,esi
c0004704:	89 f9                	mov    ecx,edi
c0004706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000470a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000470e:	e8 c1 d4 ff ff       	call   c0001bd4 <st_qword>
c0004713:	03 34 24             	add    esi,DWORD PTR [esp]
c0004716:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000471a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000471e:	89 f2                	mov    edx,esi
c0004720:	89 f9                	mov    ecx,edi
c0004722:	83 c2 ff             	add    edx,0xffffffff
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	e8 a7 d4 ff ff       	call   c0001bd4 <st_qword>
c000472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004731:	83 e8 80             	sub    eax,0xffffff80
c0004734:	89 c5                	mov    ebp,eax
c0004736:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000473a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004740:	75 6b                	jne    c00047ad <create_partition+0x282>
c0004742:	45                   	inc    ebp
c0004743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004747:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000474c:	e8 39 da ff ff       	call   c000218a <crc32>
c0004751:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004757:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000475b:	75 e5                	jne    c0004742 <create_partition+0x217>
c000475d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004761:	31 d2                	xor    edx,edx
c0004763:	83 ec 0c             	sub    esp,0xc
c0004766:	c1 ed 09             	shr    ebp,0x9
c0004769:	6a 01                	push   0x1
c000476b:	8d 45 02             	lea    eax,[ebp+0x2]
c000476e:	52                   	push   edx
c000476f:	50                   	push   eax
c0004770:	53                   	push   ebx
c0004771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004775:	e8 ac d3 ff ff       	call   c0001b26 <disk_write>
c000477a:	83 c4 20             	add    esp,0x20
c000477d:	85 c0                	test   eax,eax
c000477f:	0f 85 d7 fd ff ff    	jne    c000455c <create_partition+0x31>
c0004785:	83 ec 0c             	sub    esp,0xc
c0004788:	31 d2                	xor    edx,edx
c000478a:	6a 01                	push   0x1
c000478c:	89 e8                	mov    eax,ebp
c000478e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004792:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004796:	52                   	push   edx
c0004797:	50                   	push   eax
c0004798:	53                   	push   ebx
c0004799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479d:	e8 84 d3 ff ff       	call   c0001b26 <disk_write>
c00047a2:	83 c4 20             	add    esp,0x20
c00047a5:	85 c0                	test   eax,eax
c00047a7:	0f 85 af fd ff ff    	jne    c000455c <create_partition+0x31>
c00047ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047b5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ba:	74 0d                	je     c00047c9 <create_partition+0x29e>
c00047bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047c4:	e9 12 fe ff ff       	jmp    c00045db <create_partition+0xb0>
c00047c9:	31 d2                	xor    edx,edx
c00047cb:	b9 00 02 00 00       	mov    ecx,0x200
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047d5:	e8 15 d4 ff ff       	call   c0001bef <mem_set>
c00047da:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047dd:	b9 10 00 00 00       	mov    ecx,0x10
c00047e2:	ba 00 34 02 c0       	mov    edx,0xc0023400
c00047e7:	89 d8                	mov    eax,ebx
c00047e9:	e8 ec d3 ff ff       	call   c0001bda <mem_cpy>
c00047ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047f2:	8d 43 58             	lea    eax,[ebx+0x58]
c00047f5:	f7 d2                	not    edx
c00047f7:	e8 d5 d3 ff ff       	call   c0001bd1 <st_dword>
c00047fc:	8d 43 18             	lea    eax,[ebx+0x18]
c00047ff:	31 c9                	xor    ecx,ecx
c0004801:	89 04 24             	mov    DWORD PTR [esp],eax
c0004804:	ba 01 00 00 00       	mov    edx,0x1
c0004809:	e8 c6 d3 ff ff       	call   c0001bd4 <st_qword>
c000480e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004812:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004816:	83 c2 ff             	add    edx,0xffffffff
c0004819:	89 e8                	mov    eax,ebp
c000481b:	83 d1 ff             	adc    ecx,0xffffffff
c000481e:	e8 b1 d3 ff ff       	call   c0001bd4 <st_qword>
c0004823:	31 c9                	xor    ecx,ecx
c0004825:	8d 43 28             	lea    eax,[ebx+0x28]
c0004828:	ba 22 00 00 00       	mov    edx,0x22
c000482d:	e8 a2 d3 ff ff       	call   c0001bd4 <st_qword>
c0004832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004836:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000483a:	83 c2 de             	add    edx,0xffffffde
c000483d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004840:	83 d1 ff             	adc    ecx,0xffffffff
c0004843:	31 f6                	xor    esi,esi
c0004845:	e8 8a d3 ff ff       	call   c0001bd4 <st_qword>
c000484a:	8d 43 54             	lea    eax,[ebx+0x54]
c000484d:	ba 80 00 00 00       	mov    edx,0x80
c0004852:	e8 7a d3 ff ff       	call   c0001bd1 <st_dword>
c0004857:	8d 43 50             	lea    eax,[ebx+0x50]
c000485a:	ba 80 00 00 00       	mov    edx,0x80
c000485f:	e8 6d d3 ff ff       	call   c0001bd1 <st_dword>
c0004864:	ba 02 00 00 00       	mov    edx,0x2
c0004869:	89 f8                	mov    eax,edi
c000486b:	e8 61 d3 ff ff       	call   c0001bd1 <st_dword>
c0004870:	8d 53 38             	lea    edx,[ebx+0x38]
c0004873:	b9 10 00 00 00       	mov    ecx,0x10
c0004878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000487c:	e8 ad d9 ff ff       	call   c000222e <make_rand>
c0004881:	83 c8 ff             	or     eax,0xffffffff
c0004884:	46                   	inc    esi
c0004885:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000488a:	e8 fb d8 ff ff       	call   c000218a <crc32>
c000488f:	83 fe 5c             	cmp    esi,0x5c
c0004892:	75 f0                	jne    c0004884 <create_partition+0x359>
c0004894:	f7 d0                	not    eax
c0004896:	8d 73 10             	lea    esi,[ebx+0x10]
c0004899:	89 c2                	mov    edx,eax
c000489b:	89 f0                	mov    eax,esi
c000489d:	e8 2f d3 ff ff       	call   c0001bd1 <st_dword>
c00048a2:	83 ec 0c             	sub    esp,0xc
c00048a5:	6a 01                	push   0x1
c00048a7:	6a 00                	push   0x0
c00048a9:	6a 01                	push   0x1
c00048ab:	53                   	push   ebx
c00048ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048b0:	e8 71 d2 ff ff       	call   c0001b26 <disk_write>
c00048b5:	83 c4 20             	add    esp,0x20
c00048b8:	85 c0                	test   eax,eax
c00048ba:	0f 85 9c fc ff ff    	jne    c000455c <create_partition+0x31>
c00048c0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c8:	83 c2 ff             	add    edx,0xffffffff
c00048cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048ce:	83 d1 ff             	adc    ecx,0xffffffff
c00048d1:	e8 fe d2 ff ff       	call   c0001bd4 <st_qword>
c00048d6:	ba 01 00 00 00       	mov    edx,0x1
c00048db:	31 c9                	xor    ecx,ecx
c00048dd:	89 e8                	mov    eax,ebp
c00048df:	e8 f0 d2 ff ff       	call   c0001bd4 <st_qword>
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048ee:	31 ff                	xor    edi,edi
c00048f0:	e8 df d2 ff ff       	call   c0001bd4 <st_qword>
c00048f5:	89 f0                	mov    eax,esi
c00048f7:	31 d2                	xor    edx,edx
c00048f9:	e8 d3 d2 ff ff       	call   c0001bd1 <st_dword>
c00048fe:	83 c8 ff             	or     eax,0xffffffff
c0004901:	47                   	inc    edi
c0004902:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004907:	e8 7e d8 ff ff       	call   c000218a <crc32>
c000490c:	83 ff 5c             	cmp    edi,0x5c
c000490f:	75 f0                	jne    c0004901 <create_partition+0x3d6>
c0004911:	f7 d0                	not    eax
c0004913:	89 c2                	mov    edx,eax
c0004915:	89 f0                	mov    eax,esi
c0004917:	e8 b5 d2 ff ff       	call   c0001bd1 <st_dword>
c000491c:	83 ec 0c             	sub    esp,0xc
c000491f:	6a 01                	push   0x1
c0004921:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004925:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004929:	83 c0 ff             	add    eax,0xffffffff
c000492c:	83 d2 ff             	adc    edx,0xffffffff
c000492f:	52                   	push   edx
c0004930:	50                   	push   eax
c0004931:	53                   	push   ebx
c0004932:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004936:	e8 eb d1 ff ff       	call   c0001b26 <disk_write>
c000493b:	83 c4 20             	add    esp,0x20
c000493e:	85 c0                	test   eax,eax
c0004940:	0f 85 16 fc ff ff    	jne    c000455c <create_partition+0x31>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	b9 00 02 00 00       	mov    ecx,0x200
c000494f:	e8 9b d2 ff ff       	call   c0001bef <mem_set>
c0004954:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	ba 10 34 02 c0       	mov    edx,0xc0023410
c0004964:	e8 71 d2 ff ff       	call   c0001bda <mem_cpy>
c0004969:	e9 21 01 00 00       	jmp    c0004a8f <create_partition+0x564>
c000496e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004972:	b9 05 00 00 00       	mov    ecx,0x5
c0004977:	89 04 24             	mov    DWORD PTR [esp],eax
c000497a:	bf 08 00 00 00       	mov    edi,0x8
c000497f:	89 f8                	mov    eax,edi
c0004981:	31 d2                	xor    edx,edx
c0004983:	0f b6 f0             	movzx  esi,al
c0004986:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004989:	f7 f6                	div    esi
c000498b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004990:	76 0a                	jbe    c000499c <create_partition+0x471>
c0004992:	d1 e7                	shl    edi,1
c0004994:	49                   	dec    ecx
c0004995:	75 e8                	jne    c000497f <create_partition+0x454>
c0004997:	bf ff ff ff ff       	mov    edi,0xffffffff
c000499c:	b9 00 02 00 00       	mov    ecx,0x200
c00049a1:	31 d2                	xor    edx,edx
c00049a3:	89 d8                	mov    eax,ebx
c00049a5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049ab:	e8 3f d2 ff ff       	call   c0001bef <mem_set>
c00049b0:	b9 64 00 00 00       	mov    ecx,0x64
c00049b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b8:	31 d2                	xor    edx,edx
c00049ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049c2:	f7 f1                	div    ecx
c00049c4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049cd:	89 f8                	mov    eax,edi
c00049cf:	0f b6 c0             	movzx  eax,al
c00049d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049d6:	e9 80 00 00 00       	jmp    c0004a5b <create_partition+0x530>
c00049db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049de:	29 cf                	sub    edi,ecx
c00049e0:	89 ca                	mov    edx,ecx
c00049e2:	89 f0                	mov    eax,esi
c00049e4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e9:	e8 e3 d1 ff ff       	call   c0001bd1 <st_dword>
c00049ee:	8d 46 04             	lea    eax,[esi+0x4]
c00049f1:	89 fa                	mov    edx,edi
c00049f3:	83 c6 10             	add    esi,0x10
c00049f6:	e8 d6 d1 ff ff       	call   c0001bd1 <st_dword>
c00049fb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049ff:	31 d2                	xor    edx,edx
c0004a01:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a04:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a08:	89 c8                	mov    eax,ecx
c0004a0a:	01 f9                	add    ecx,edi
c0004a0c:	f7 f5                	div    ebp
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	31 d2                	xor    edx,edx
c0004a12:	45                   	inc    ebp
c0004a13:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a17:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a1a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a1d:	89 c2                	mov    edx,eax
c0004a1f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a22:	c1 ea 02             	shr    edx,0x2
c0004a25:	83 e2 c0             	and    edx,0xffffffc0
c0004a28:	09 ea                	or     edx,ebp
c0004a2a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a2f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a32:	31 d2                	xor    edx,edx
c0004a34:	f7 f5                	div    ebp
c0004a36:	89 d7                	mov    edi,edx
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	47                   	inc    edi
c0004a3b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a3f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a42:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a45:	89 c5                	mov    ebp,eax
c0004a47:	c1 ed 02             	shr    ebp,0x2
c0004a4a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a4d:	09 ef                	or     edi,ebp
c0004a4f:	89 fa                	mov    edx,edi
c0004a51:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a54:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a59:	74 34                	je     c0004a8f <create_partition+0x564>
c0004a5b:	85 c9                	test   ecx,ecx
c0004a5d:	74 30                	je     c0004a8f <create_partition+0x564>
c0004a5f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a62:	76 2b                	jbe    c0004a8f <create_partition+0x564>
c0004a64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a6c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a6f:	83 ff 64             	cmp    edi,0x64
c0004a72:	76 4b                	jbe    c0004abf <create_partition+0x594>
c0004a74:	89 f8                	mov    eax,edi
c0004a76:	01 c8                	add    eax,ecx
c0004a78:	0f 82 5d ff ff ff    	jb     c00049db <create_partition+0x4b0>
c0004a7e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a81:	0f 87 54 ff ff ff    	ja     c00049db <create_partition+0x4b0>
c0004a87:	85 ff                	test   edi,edi
c0004a89:	0f 85 51 ff ff ff    	jne    c00049e0 <create_partition+0x4b5>
c0004a8f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a9a:	e8 2e d1 ff ff       	call   c0001bcd <st_word>
c0004a9f:	83 ec 0c             	sub    esp,0xc
c0004aa2:	6a 01                	push   0x1
c0004aa4:	6a 00                	push   0x0
c0004aa6:	6a 00                	push   0x0
c0004aa8:	53                   	push   ebx
c0004aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aad:	e8 74 d0 ff ff       	call   c0001b26 <disk_write>
c0004ab2:	83 c4 20             	add    esp,0x20
c0004ab5:	85 c0                	test   eax,eax
c0004ab7:	0f 95 c0             	setne  al
c0004aba:	0f b6 c0             	movzx  eax,al
c0004abd:	eb 0e                	jmp    c0004acd <create_partition+0x5a2>
c0004abf:	74 07                	je     c0004ac8 <create_partition+0x59d>
c0004ac1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ac6:	eb ac                	jmp    c0004a74 <create_partition+0x549>
c0004ac8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004acb:	eb a7                	jmp    c0004a74 <create_partition+0x549>
c0004acd:	83 c4 5c             	add    esp,0x5c
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	5d                   	pop    ebp
c0004ad4:	c3                   	ret    

c0004ad5 <get_fileinfo>:
c0004ad5:	55                   	push   ebp
c0004ad6:	57                   	push   edi
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 1c             	sub    esp,0x1c
c0004adc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ade:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ae2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ae6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004aec:	0f 84 dc 01 00 00    	je     c0004cce <get_fileinfo+0x1f9>
c0004af2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004af5:	75 0f                	jne    c0004b06 <get_fileinfo+0x31>
c0004af7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004afa:	83 c4 1c             	add    esp,0x1c
c0004afd:	5b                   	pop    ebx
c0004afe:	5e                   	pop    esi
c0004aff:	5f                   	pop    edi
c0004b00:	5d                   	pop    ebp
c0004b01:	e9 58 d5 ff ff       	jmp    c000205e <get_xfileinfo>
c0004b06:	89 d3                	mov    ebx,edx
c0004b08:	89 c6                	mov    esi,eax
c0004b0a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b0e:	74 6a                	je     c0004b7a <get_fileinfo+0xa5>
c0004b10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b18:	31 ed                	xor    ebp,ebp
c0004b1a:	31 ff                	xor    edi,edi
c0004b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b27:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b2b:	66 85 d2             	test   dx,dx
c0004b2e:	74 3e                	je     c0004b6e <get_fileinfo+0x99>
c0004b30:	66 85 ed             	test   bp,bp
c0004b33:	75 0c                	jne    c0004b41 <get_fileinfo+0x6c>
c0004b35:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b3b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b3f:	76 22                	jbe    c0004b63 <get_fileinfo+0x8e>
c0004b41:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b46:	89 e8                	mov    eax,ebp
c0004b48:	29 f9                	sub    ecx,edi
c0004b4a:	c1 e0 10             	shl    eax,0x10
c0004b4d:	09 d0                	or     eax,edx
c0004b4f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b53:	e8 a3 d1 ff ff       	call   c0001cfb <put_utf>
c0004b58:	84 c0                	test   al,al
c0004b5a:	74 10                	je     c0004b6c <get_fileinfo+0x97>
c0004b5c:	0f b6 c0             	movzx  eax,al
c0004b5f:	31 d2                	xor    edx,edx
c0004b61:	01 c7                	add    edi,eax
c0004b63:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b68:	89 d5                	mov    ebp,edx
c0004b6a:	eb b0                	jmp    c0004b1c <get_fileinfo+0x47>
c0004b6c:	31 ff                	xor    edi,edi
c0004b6e:	66 85 ed             	test   bp,bp
c0004b71:	74 02                	je     c0004b75 <get_fileinfo+0xa0>
c0004b73:	31 ff                	xor    edi,edi
c0004b75:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b7a:	31 ff                	xor    edi,edi
c0004b7c:	31 c9                	xor    ecx,ecx
c0004b7e:	83 f9 0a             	cmp    ecx,0xa
c0004b81:	0f 87 ad 00 00 00    	ja     c0004c34 <get_fileinfo+0x15f>
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b8d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b91:	66 83 fa 20          	cmp    dx,0x20
c0004b95:	0f 84 92 00 00 00    	je     c0004c2d <get_fileinfo+0x158>
c0004b9b:	66 83 fa 05          	cmp    dx,0x5
c0004b9f:	75 05                	jne    c0004ba6 <get_fileinfo+0xd1>
c0004ba1:	ba e5 00 00 00       	mov    edx,0xe5
c0004ba6:	83 ff 0b             	cmp    edi,0xb
c0004ba9:	77 0b                	ja     c0004bb6 <get_fileinfo+0xe1>
c0004bab:	83 fd 09             	cmp    ebp,0x9
c0004bae:	75 06                	jne    c0004bb6 <get_fileinfo+0xe1>
c0004bb0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bb5:	47                   	inc    edi
c0004bb6:	0f b7 c2             	movzx  eax,dx
c0004bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbd:	e8 6d d0 ff ff       	call   c0001c2f <dbc_1st>
c0004bc2:	85 c0                	test   eax,eax
c0004bc4:	74 2f                	je     c0004bf5 <get_fileinfo+0x120>
c0004bc6:	83 fd 08             	cmp    ebp,0x8
c0004bc9:	74 2a                	je     c0004bf5 <get_fileinfo+0x120>
c0004bcb:	83 fd 0b             	cmp    ebp,0xb
c0004bce:	74 25                	je     c0004bf5 <get_fileinfo+0x120>
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bd7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bdb:	e8 52 d0 ff ff       	call   c0001c32 <dbc_2nd>
c0004be0:	85 c0                	test   eax,eax
c0004be2:	74 11                	je     c0004bf5 <get_fileinfo+0x120>
c0004be4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bed:	c1 e2 08             	shl    edx,0x8
c0004bf0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004bf3:	09 c2                	or     edx,eax
c0004bf5:	0f b7 d2             	movzx  edx,dx
c0004bf8:	50                   	push   eax
c0004bf9:	50                   	push   eax
c0004bfa:	68 b5 01 00 00       	push   0x1b5
c0004bff:	52                   	push   edx
c0004c00:	e8 87 3a 00 00       	call   c000868c <ff_oem2uni>
c0004c05:	83 c4 10             	add    esp,0x10
c0004c08:	66 85 c0             	test   ax,ax
c0004c0b:	75 04                	jne    c0004c11 <get_fileinfo+0x13c>
c0004c0d:	31 ff                	xor    edi,edi
c0004c0f:	eb 23                	jmp    c0004c34 <get_fileinfo+0x15f>
c0004c11:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c16:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c1a:	29 f9                	sub    ecx,edi
c0004c1c:	0f b7 c0             	movzx  eax,ax
c0004c1f:	e8 d7 d0 ff ff       	call   c0001cfb <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 e5                	je     c0004c0d <get_fileinfo+0x138>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	01 c7                	add    edi,eax
c0004c2d:	89 e9                	mov    ecx,ebp
c0004c2f:	e9 4a ff ff ff       	jmp    c0004b7e <get_fileinfo+0xa9>
c0004c34:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c39:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c3d:	75 54                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c3f:	85 ff                	test   edi,edi
c0004c41:	75 0b                	jne    c0004c4e <get_fileinfo+0x179>
c0004c43:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c47:	ba 01 00 00 00       	mov    edx,0x1
c0004c4c:	eb 33                	jmp    c0004c81 <get_fileinfo+0x1ac>
c0004c4e:	b1 08                	mov    cl,0x8
c0004c50:	31 d2                	xor    edx,edx
c0004c52:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c58:	84 c0                	test   al,al
c0004c5a:	74 25                	je     c0004c81 <get_fileinfo+0x1ac>
c0004c5c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c60:	74 16                	je     c0004c78 <get_fileinfo+0x1a3>
c0004c62:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c65:	66 83 ff 19          	cmp    di,0x19
c0004c69:	77 0f                	ja     c0004c7a <get_fileinfo+0x1a5>
c0004c6b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c6e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c71:	74 07                	je     c0004c7a <get_fileinfo+0x1a5>
c0004c73:	83 c0 20             	add    eax,0x20
c0004c76:	eb 02                	jmp    c0004c7a <get_fileinfo+0x1a5>
c0004c78:	b1 10                	mov    cl,0x10
c0004c7a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c7e:	42                   	inc    edx
c0004c7f:	eb d1                	jmp    c0004c52 <get_fileinfo+0x17d>
c0004c81:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c89:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c8d:	75 04                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c8f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c96:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c99:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	83 c0 1c             	add    eax,0x1c
c0004ca2:	e8 c1 ce ff ff       	call   c0001b68 <ld_dword>
c0004ca7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cae:	89 03                	mov    DWORD PTR [ebx],eax
c0004cb0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb3:	83 c0 16             	add    eax,0x16
c0004cb6:	e8 a0 ce ff ff       	call   c0001b5b <ld_word>
c0004cbb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cbf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc2:	83 c0 18             	add    eax,0x18
c0004cc5:	e8 91 ce ff ff       	call   c0001b5b <ld_word>
c0004cca:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cce:	83 c4 1c             	add    esp,0x1c
c0004cd1:	5b                   	pop    ebx
c0004cd2:	5e                   	pop    esi
c0004cd3:	5f                   	pop    edi
c0004cd4:	5d                   	pop    ebp
c0004cd5:	c3                   	ret    

c0004cd6 <ld_clust.isra.0>:
c0004cd6:	56                   	push   esi
c0004cd7:	89 c6                	mov    esi,eax
c0004cd9:	53                   	push   ebx
c0004cda:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cdd:	89 d3                	mov    ebx,edx
c0004cdf:	e8 77 ce ff ff       	call   c0001b5b <ld_word>
c0004ce4:	0f b7 c8             	movzx  ecx,ax
c0004ce7:	89 f0                	mov    eax,esi
c0004ce9:	3c 03                	cmp    al,0x3
c0004ceb:	75 0d                	jne    c0004cfa <ld_clust.isra.0+0x24>
c0004ced:	8d 43 14             	lea    eax,[ebx+0x14]
c0004cf0:	e8 66 ce ff ff       	call   c0001b5b <ld_word>
c0004cf5:	c1 e0 10             	shl    eax,0x10
c0004cf8:	09 c1                	or     ecx,eax
c0004cfa:	89 c8                	mov    eax,ecx
c0004cfc:	5b                   	pop    ebx
c0004cfd:	5e                   	pop    esi
c0004cfe:	c3                   	ret    

c0004cff <st_clust.isra.1>:
c0004cff:	56                   	push   esi
c0004d00:	89 c6                	mov    esi,eax
c0004d02:	53                   	push   ebx
c0004d03:	89 d3                	mov    ebx,edx
c0004d05:	0f b7 d1             	movzx  edx,cx
c0004d08:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d0b:	e8 bd ce ff ff       	call   c0001bcd <st_word>
c0004d10:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d13:	75 0f                	jne    c0004d24 <st_clust.isra.1+0x25>
c0004d15:	c1 e9 10             	shr    ecx,0x10
c0004d18:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d1b:	89 ca                	mov    edx,ecx
c0004d1d:	5b                   	pop    ebx
c0004d1e:	5e                   	pop    esi
c0004d1f:	e9 a9 ce ff ff       	jmp    c0001bcd <st_word>
c0004d24:	5b                   	pop    ebx
c0004d25:	5e                   	pop    esi
c0004d26:	c3                   	ret    

c0004d27 <init_alloc_info.isra.2>:
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	89 d3                	mov    ebx,edx
c0004d2d:	51                   	push   ecx
c0004d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d30:	83 c0 34             	add    eax,0x34
c0004d33:	e8 30 ce ff ff       	call   c0001b68 <ld_dword>
c0004d38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d3d:	83 c0 38             	add    eax,0x38
c0004d40:	e8 3b ce ff ff       	call   c0001b80 <ld_qword>
c0004d45:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d48:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d57:	83 e0 02             	and    eax,0x2
c0004d5a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d5d:	5b                   	pop    ebx
c0004d5e:	5b                   	pop    ebx
c0004d5f:	5e                   	pop    esi
c0004d60:	c3                   	ret    

c0004d61 <follow_path>:
c0004d61:	56                   	push   esi
c0004d62:	53                   	push   ebx
c0004d63:	89 c3                	mov    ebx,eax
c0004d65:	83 ec 14             	sub    esp,0x14
c0004d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d6c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d72:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d74:	80 fa 5c             	cmp    dl,0x5c
c0004d77:	75 07                	jne    c0004d80 <follow_path+0x1f>
c0004d79:	40                   	inc    eax
c0004d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7e:	eb ee                	jmp    c0004d6e <follow_path+0xd>
c0004d80:	80 fa 2f             	cmp    dl,0x2f
c0004d83:	74 f4                	je     c0004d79 <follow_path+0x18>
c0004d85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d8c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d93:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d96:	77 52                	ja     c0004dea <follow_path+0x89>
c0004d98:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d9c:	31 d2                	xor    edx,edx
c0004d9e:	89 d8                	mov    eax,ebx
c0004da0:	e8 12 e3 ff ff       	call   c00030b7 <dir_sdi>
c0004da5:	eb 7c                	jmp    c0004e23 <follow_path+0xc2>
c0004da7:	89 d8                	mov    eax,ebx
c0004da9:	e8 6e f2 ff ff       	call   c000401c <dir_find>
c0004dae:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004db1:	85 c0                	test   eax,eax
c0004db3:	75 46                	jne    c0004dfb <follow_path+0x9a>
c0004db5:	80 e2 04             	and    dl,0x4
c0004db8:	75 69                	jne    c0004e23 <follow_path+0xc2>
c0004dba:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dbe:	74 5e                	je     c0004e1e <follow_path+0xbd>
c0004dc0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dc2:	3c 04                	cmp    al,0x4
c0004dc4:	75 41                	jne    c0004e07 <follow_path+0xa6>
c0004dc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dcd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dd3:	30 c0                	xor    al,al
c0004dd5:	09 d0                	or     eax,edx
c0004dd7:	89 da                	mov    edx,ebx
c0004dd9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ddc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ddf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004de2:	8d 46 10             	lea    eax,[esi+0x10]
c0004de5:	e8 3d ff ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004dea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dee:	89 d8                	mov    eax,ebx
c0004df0:	e8 a9 ed ff ff       	call   c0003b9e <create_name>
c0004df5:	85 c0                	test   eax,eax
c0004df7:	74 ae                	je     c0004da7 <follow_path+0x46>
c0004df9:	eb 28                	jmp    c0004e23 <follow_path+0xc2>
c0004dfb:	83 f8 04             	cmp    eax,0x4
c0004dfe:	75 23                	jne    c0004e23 <follow_path+0xc2>
c0004e00:	80 e2 04             	and    dl,0x4
c0004e03:	74 19                	je     c0004e1e <follow_path+0xbd>
c0004e05:	eb 1c                	jmp    c0004e23 <follow_path+0xc2>
c0004e07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e0a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e10:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e14:	e8 bd fe ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0004e19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e1c:	eb cc                	jmp    c0004dea <follow_path+0x89>
c0004e1e:	b8 05 00 00 00       	mov    eax,0x5
c0004e23:	83 c4 14             	add    esp,0x14
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <f_mount>:
c0004e29:	53                   	push   ebx
c0004e2a:	83 ec 18             	sub    esp,0x18
c0004e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e3d:	e8 fb d2 ff ff       	call   c000213d <get_ldnumber>
c0004e42:	89 c2                	mov    edx,eax
c0004e44:	b8 0b 00 00 00       	mov    eax,0xb
c0004e49:	85 d2                	test   edx,edx
c0004e4b:	78 39                	js     c0004e86 <f_mount+0x5d>
c0004e4d:	8b 04 95 e0 7a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8520]
c0004e54:	85 c0                	test   eax,eax
c0004e56:	74 03                	je     c0004e5b <f_mount+0x32>
c0004e58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e5f:	85 c0                	test   eax,eax
c0004e61:	74 03                	je     c0004e66 <f_mount+0x3d>
c0004e63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6a:	89 04 95 e0 7a 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8520],eax
c0004e71:	31 c0                	xor    eax,eax
c0004e73:	84 db                	test   bl,bl
c0004e75:	74 0f                	je     c0004e86 <f_mount+0x5d>
c0004e77:	31 c9                	xor    ecx,ecx
c0004e79:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e81:	e8 65 d7 ff ff       	call   c00025eb <mount_volume>
c0004e86:	83 c4 18             	add    esp,0x18
c0004e89:	5b                   	pop    ebx
c0004e8a:	c3                   	ret    

c0004e8b <f_open>:
c0004e8b:	55                   	push   ebp
c0004e8c:	bd 09 00 00 00       	mov    ebp,0x9
c0004e91:	57                   	push   edi
c0004e92:	56                   	push   esi
c0004e93:	53                   	push   ebx
c0004e94:	83 ec 7c             	sub    esp,0x7c
c0004e97:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e9e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ea5:	85 db                	test   ebx,ebx
c0004ea7:	0f 84 10 04 00 00    	je     c00052bd <f_open+0x432>
c0004ead:	89 fe                	mov    esi,edi
c0004eaf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eb3:	83 e6 3f             	and    esi,0x3f
c0004eb6:	89 f0                	mov    eax,esi
c0004eb8:	0f b6 c8             	movzx  ecx,al
c0004ebb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ec2:	e8 24 d7 ff ff       	call   c00025eb <mount_volume>
c0004ec7:	89 c5                	mov    ebp,eax
c0004ec9:	85 c0                	test   eax,eax
c0004ecb:	0f 85 e6 03 00 00    	jne    c00052b7 <f_open+0x42c>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ede:	83 ec 0c             	sub    esp,0xc
c0004ee1:	68 60 04 00 00       	push   0x460
c0004ee6:	e8 d9 36 00 00       	call   c00085c4 <ff_memalloc>
c0004eeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eef:	83 c4 10             	add    esp,0x10
c0004ef2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ef7:	0f 84 c0 03 00 00    	je     c00052bd <f_open+0x432>
c0004efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f05:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f0b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f0e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f11:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f18:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f1c:	e8 40 fe ff ff       	call   c0004d61 <follow_path>
c0004f21:	89 c5                	mov    ebp,eax
c0004f23:	85 c0                	test   eax,eax
c0004f25:	75 0c                	jne    c0004f33 <f_open+0xa8>
c0004f27:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f2c:	79 05                	jns    c0004f33 <f_open+0xa8>
c0004f2e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f33:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f39:	0f 84 84 01 00 00    	je     c00050c3 <f_open+0x238>
c0004f3f:	85 ed                	test   ebp,ebp
c0004f41:	74 20                	je     c0004f63 <f_open+0xd8>
c0004f43:	83 fd 04             	cmp    ebp,0x4
c0004f46:	0f 85 58 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f50:	83 ce 08             	or     esi,0x8
c0004f53:	e8 8a f2 ff ff       	call   c00041e2 <dir_register>
c0004f58:	89 c5                	mov    ebp,eax
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 2f                	je     c0004f8d <f_open+0x102>
c0004f5e:	e9 41 03 00 00       	jmp    c00052a4 <f_open+0x419>
c0004f63:	bd 07 00 00 00       	mov    ebp,0x7
c0004f68:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f6d:	0f 85 31 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f73:	bd 08 00 00 00       	mov    ebp,0x8
c0004f78:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f7e:	0f 85 20 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f84:	83 e7 08             	and    edi,0x8
c0004f87:	0f 84 65 01 00 00    	je     c00050f2 <f_open+0x267>
c0004f8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f91:	8a 02                	mov    al,BYTE PTR [edx]
c0004f93:	3c 04                	cmp    al,0x4
c0004f95:	0f 85 97 00 00 00    	jne    c0005032 <f_open+0x1a7>
c0004f9b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f9e:	89 13                	mov    DWORD PTR [ebx],edx
c0004fa0:	89 da                	mov    edx,ebx
c0004fa2:	e8 80 fd ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004fa7:	31 d2                	xor    edx,edx
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fb2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fb5:	83 c0 02             	add    eax,0x2
c0004fb8:	e8 32 cc ff ff       	call   c0001bef <mem_set>
c0004fbd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fc2:	31 d2                	xor    edx,edx
c0004fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fcb:	83 c0 26             	add    eax,0x26
c0004fce:	e8 1c cc ff ff       	call   c0001bef <mem_set>
c0004fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fda:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fde:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fe3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fe6:	83 c0 08             	add    eax,0x8
c0004fe9:	e8 e3 cb ff ff       	call   c0001bd1 <st_dword>
c0004fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ffd:	e8 b7 ea ff ff       	call   c0003ab9 <store_xdir>
c0005002:	89 c5                	mov    ebp,eax
c0005004:	85 c0                	test   eax,eax
c0005006:	0f 85 98 02 00 00    	jne    c00052a4 <f_open+0x419>
c000500c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500f:	85 d2                	test   edx,edx
c0005011:	0f 84 db 00 00 00    	je     c00050f2 <f_open+0x267>
c0005017:	31 c9                	xor    ecx,ecx
c0005019:	89 d8                	mov    eax,ebx
c000501b:	e8 8e e3 ff ff       	call   c00033ae <remove_chain>
c0005020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005024:	89 c5                	mov    ebp,eax
c0005026:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005029:	48                   	dec    eax
c000502a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000502d:	e9 b8 00 00 00       	jmp    c00050ea <f_open+0x25f>
c0005032:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005036:	89 ea                	mov    edx,ebp
c0005038:	e8 99 fc ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000503d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005042:	89 c7                	mov    edi,eax
c0005044:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005047:	e8 85 cb ff ff       	call   c0001bd1 <st_dword>
c000504c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005050:	31 c9                	xor    ecx,ecx
c0005052:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000505e:	e8 9c fc ff ff       	call   c0004cff <st_clust.isra.1>
c0005063:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005067:	31 d2                	xor    edx,edx
c0005069:	83 c0 1c             	add    eax,0x1c
c000506c:	e8 60 cb ff ff       	call   c0001bd1 <st_dword>
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	85 ff                	test   edi,edi
c0005077:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000507b:	74 75                	je     c00050f2 <f_open+0x267>
c000507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005081:	31 c9                	xor    ecx,ecx
c0005083:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005086:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000508d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005091:	89 fa                	mov    edx,edi
c0005093:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005097:	e8 12 e3 ff ff       	call   c00033ae <remove_chain>
c000509c:	89 c5                	mov    ebp,eax
c000509e:	85 c0                	test   eax,eax
c00050a0:	0f 85 fe 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	4f                   	dec    edi
c00050b3:	e8 81 d2 ff ff       	call   c0002339 <move_window>
c00050b8:	89 c5                	mov    ebp,eax
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050c1:	eb 27                	jmp    c00050ea <f_open+0x25f>
c00050c3:	85 ed                	test   ebp,ebp
c00050c5:	0f 85 d9 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050cb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050cf:	bd 04 00 00 00       	mov    ebp,0x4
c00050d4:	a8 10                	test   al,0x10
c00050d6:	0f 85 c8 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050dc:	83 e7 02             	and    edi,0x2
c00050df:	74 11                	je     c00050f2 <f_open+0x267>
c00050e1:	bd 07 00 00 00       	mov    ebp,0x7
c00050e6:	a8 01                	test   al,0x1
c00050e8:	eb 02                	jmp    c00050ec <f_open+0x261>
c00050ea:	85 ed                	test   ebp,ebp
c00050ec:	0f 85 b2 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050f2:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f8:	74 03                	je     c00050fd <f_open+0x272>
c00050fa:	83 ce 40             	or     esi,0x40
c00050fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005101:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005104:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005107:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000510a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000510d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005111:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005114:	8a 02                	mov    al,BYTE PTR [edx]
c0005116:	3c 04                	cmp    al,0x4
c0005118:	75 2a                	jne    c0005144 <f_open+0x2b9>
c000511a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000511e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005123:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000512a:	30 c0                	xor    al,al
c000512c:	09 c8                	or     eax,ecx
c000512e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005131:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005138:	8d 42 10             	lea    eax,[edx+0x10]
c000513b:	89 da                	mov    edx,ebx
c000513d:	e8 e5 fb ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005142:	eb 1c                	jmp    c0005160 <f_open+0x2d5>
c0005144:	89 fa                	mov    edx,edi
c0005146:	e8 8b fb ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000514b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000514e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005151:	e8 12 ca ff ff       	call   c0001b68 <ld_dword>
c0005156:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000515d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005164:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000516b:	89 03                	mov    DWORD PTR [ebx],eax
c000516d:	31 d2                	xor    edx,edx
c000516f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005173:	b9 00 02 00 00       	mov    ecx,0x200
c0005178:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000517c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005180:	89 f0                	mov    eax,esi
c0005182:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005189:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000518c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005193:	8d 43 50             	lea    eax,[ebx+0x50]
c0005196:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000519d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a8:	e8 42 ca ff ff       	call   c0001bef <mem_set>
c00051ad:	83 e6 20             	and    esi,0x20
c00051b0:	75 07                	jne    c00051b9 <f_open+0x32e>
c00051b2:	31 ed                	xor    ebp,ebp
c00051b4:	e9 eb 00 00 00       	jmp    c00052a4 <f_open+0x419>
c00051b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051cf:	74 e1                	je     c00051b2 <f_open+0x327>
c00051d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051dc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051e6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051ea:	31 ff                	xor    edi,edi
c00051ec:	c1 e5 09             	shl    ebp,0x9
c00051ef:	89 ee                	mov    esi,ebp
c00051f1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051f5:	89 f8                	mov    eax,edi
c00051f7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051fb:	73 22                	jae    c000521f <f_open+0x394>
c00051fd:	89 d8                	mov    eax,ebx
c00051ff:	e8 bd dc ff ff       	call   c0002ec1 <get_fat>
c0005204:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005208:	89 c2                	mov    edx,eax
c000520a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000520e:	83 f8 01             	cmp    eax,0x1
c0005211:	76 10                	jbe    c0005223 <f_open+0x398>
c0005213:	83 f8 ff             	cmp    eax,0xffffffff
c0005216:	75 d9                	jne    c00051f1 <f_open+0x366>
c0005218:	bd 01 00 00 00       	mov    ebp,0x1
c000521d:	eb 09                	jmp    c0005228 <f_open+0x39d>
c000521f:	31 ed                	xor    ebp,ebp
c0005221:	eb 05                	jmp    c0005228 <f_open+0x39d>
c0005223:	bd 02 00 00 00       	mov    ebp,0x2
c0005228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000522b:	85 ed                	test   ebp,ebp
c000522d:	75 75                	jne    c00052a4 <f_open+0x419>
c000522f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005233:	25 ff 01 00 00       	and    eax,0x1ff
c0005238:	0f 84 74 ff ff ff    	je     c00051b2 <f_open+0x327>
c000523e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005242:	bd 02 00 00 00       	mov    ebp,0x2
c0005247:	89 c8                	mov    eax,ecx
c0005249:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000524d:	e8 a2 cb ff ff       	call   c0001df4 <clst2sect>
c0005252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005256:	89 d7                	mov    edi,edx
c0005258:	09 c7                	or     edi,eax
c000525a:	74 48                	je     c00052a4 <f_open+0x419>
c000525c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005260:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005264:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000526c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005270:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005278:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000527b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000527f:	83 ec 0c             	sub    esp,0xc
c0005282:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005285:	6a 01                	push   0x1
c0005287:	52                   	push   edx
c0005288:	50                   	push   eax
c0005289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000528d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005291:	50                   	push   eax
c0005292:	e8 79 c8 ff ff       	call   c0001b10 <disk_read>
c0005297:	83 c4 20             	add    esp,0x20
c000529a:	85 c0                	test   eax,eax
c000529c:	0f 95 c0             	setne  al
c000529f:	0f b6 c0             	movzx  eax,al
c00052a2:	89 c5                	mov    ebp,eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052ab:	e8 2c 33 00 00       	call   c00085dc <ff_memfree>
c00052b0:	83 c4 10             	add    esp,0x10
c00052b3:	85 ed                	test   ebp,ebp
c00052b5:	74 06                	je     c00052bd <f_open+0x432>
c00052b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052bd:	83 c4 7c             	add    esp,0x7c
c00052c0:	89 e8                	mov    eax,ebp
c00052c2:	5b                   	pop    ebx
c00052c3:	5e                   	pop    esi
c00052c4:	5f                   	pop    edi
c00052c5:	5d                   	pop    ebp
c00052c6:	c3                   	ret    

c00052c7 <f_read>:
c00052c7:	55                   	push   ebp
c00052c8:	57                   	push   edi
c00052c9:	56                   	push   esi
c00052ca:	53                   	push   ebx
c00052cb:	83 ec 2c             	sub    esp,0x2c
c00052ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e0:	89 d8                	mov    eax,ebx
c00052e2:	e8 77 cf ff ff       	call   c000225e <validate>
c00052e7:	89 c5                	mov    ebp,eax
c00052e9:	85 c0                	test   eax,eax
c00052eb:	0f 85 4c 02 00 00    	jne    c000553d <f_read+0x276>
c00052f1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052f5:	85 ed                	test   ebp,ebp
c00052f7:	0f 85 40 02 00 00    	jne    c000553d <f_read+0x276>
c00052fd:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005301:	0f 84 31 02 00 00    	je     c0005538 <f_read+0x271>
c0005307:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005310:	bf 00 00 00 00       	mov    edi,0x0
c0005315:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005318:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000531c:	89 d1                	mov    ecx,edx
c000531e:	19 f9                	sbb    ecx,edi
c0005320:	0f 83 cf 00 00 00    	jae    c00053f5 <f_read+0x12e>
c0005326:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000532a:	e9 c6 00 00 00       	jmp    c00053f5 <f_read+0x12e>
c000532f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005332:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005335:	89 d0                	mov    eax,edx
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	0f 85 c9 01 00 00    	jne    c000550b <f_read+0x244>
c0005342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005346:	89 d6                	mov    esi,edx
c0005348:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000534c:	89 cf                	mov    edi,ecx
c000534e:	48                   	dec    eax
c000534f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005353:	21 f0                	and    eax,esi
c0005355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005359:	0f 84 a6 00 00 00    	je     c0005405 <f_read+0x13e>
c000535f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005363:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005366:	89 c8                	mov    eax,ecx
c0005368:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000536b:	e8 84 ca ff ff       	call   c0001df4 <clst2sect>
c0005370:	89 d7                	mov    edi,edx
c0005372:	09 c7                	or     edi,eax
c0005374:	0f 84 b4 00 00 00    	je     c000542e <f_read+0x167>
c000537a:	31 ff                	xor    edi,edi
c000537c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005380:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005383:	01 c6                	add    esi,eax
c0005385:	11 d7                	adc    edi,edx
c0005387:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000538f:	0f 86 fd 00 00 00    	jbe    c0005492 <f_read+0x1cb>
c0005395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000539d:	c1 e8 09             	shr    eax,0x9
c00053a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053a3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053a7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053aa:	39 c2                	cmp    edx,eax
c00053ac:	76 07                	jbe    c00053b5 <f_read+0xee>
c00053ae:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053bc:	57                   	push   edi
c00053bd:	56                   	push   esi
c00053be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 44 c7 ff ff       	call   c0001b10 <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	75 6e                	jne    c0005441 <f_read+0x17a>
c00053d3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053d7:	78 7e                	js     c0005457 <f_read+0x190>
c00053d9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053dc:	c1 e6 09             	shl    esi,0x9
c00053df:	31 ff                	xor    edi,edi
c00053e1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053ed:	01 30                	add    DWORD PTR [eax],esi
c00053ef:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053f2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053f5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053fa:	0f 85 2f ff ff ff    	jne    c000532f <f_read+0x68>
c0005400:	e9 38 01 00 00       	jmp    c000553d <f_read+0x276>
c0005405:	89 c8                	mov    eax,ecx
c0005407:	09 d0                	or     eax,edx
c0005409:	75 05                	jne    c0005410 <f_read+0x149>
c000540b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000540e:	eb 19                	jmp    c0005429 <f_read+0x162>
c0005410:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005414:	74 09                	je     c000541f <f_read+0x158>
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f8 c9 ff ff       	call   c0001e15 <clmt_clust>
c000541d:	eb 0a                	jmp    c0005429 <f_read+0x162>
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 d8                	mov    eax,ebx
c0005424:	e8 98 da ff ff       	call   c0002ec1 <get_fat>
c0005429:	83 f8 01             	cmp    eax,0x1
c000542c:	77 0e                	ja     c000543c <f_read+0x175>
c000542e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005432:	bd 02 00 00 00       	mov    ebp,0x2
c0005437:	e9 01 01 00 00       	jmp    c000553d <f_read+0x276>
c000543c:	83 f8 ff             	cmp    eax,0xffffffff
c000543f:	75 0e                	jne    c000544f <f_read+0x188>
c0005441:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005445:	bd 01 00 00 00       	mov    ebp,0x1
c000544a:	e9 ee 00 00 00       	jmp    c000553d <f_read+0x276>
c000544f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005452:	e9 08 ff ff ff       	jmp    c000535f <f_read+0x98>
c0005457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000545a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000545d:	29 f0                	sub    eax,esi
c000545f:	19 fa                	sbb    edx,edi
c0005461:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005464:	89 d7                	mov    edi,edx
c0005466:	ba 00 00 00 00       	mov    edx,0x0
c000546b:	89 f9                	mov    ecx,edi
c000546d:	19 d1                	sbb    ecx,edx
c000546f:	0f 83 64 ff ff ff    	jae    c00053d9 <f_read+0x112>
c0005475:	89 c7                	mov    edi,eax
c0005477:	8d 53 50             	lea    edx,[ebx+0x50]
c000547a:	c1 e7 09             	shl    edi,0x9
c000547d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005481:	b9 00 02 00 00       	mov    ecx,0x200
c0005486:	01 f8                	add    eax,edi
c0005488:	e8 4d c7 ff ff       	call   c0001bda <mem_cpy>
c000548d:	e9 47 ff ff ff       	jmp    c00053d9 <f_read+0x112>
c0005492:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005495:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005498:	89 04 24             	mov    DWORD PTR [esp],eax
c000549b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000549f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054a3:	75 05                	jne    c00054aa <f_read+0x1e3>
c00054a5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a8:	74 5b                	je     c0005505 <f_read+0x23e>
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b5:	79 2a                	jns    c00054e1 <f_read+0x21a>
c00054b7:	83 ec 0c             	sub    esp,0xc
c00054ba:	6a 01                	push   0x1
c00054bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 54 c6 ff ff       	call   c0001b26 <disk_write>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	0f 85 64 ff ff ff    	jne    c0005441 <f_read+0x17a>
c00054dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054e1:	83 ec 0c             	sub    esp,0xc
c00054e4:	6a 01                	push   0x1
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054f4:	50                   	push   eax
c00054f5:	e8 16 c6 ff ff       	call   c0001b10 <disk_read>
c00054fa:	83 c4 20             	add    esp,0x20
c00054fd:	85 c0                	test   eax,eax
c00054ff:	0f 85 3c ff ff ff    	jne    c0005441 <f_read+0x17a>
c0005505:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005508:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000550b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000550e:	ba 00 02 00 00       	mov    edx,0x200
c0005513:	25 ff 01 00 00       	and    eax,0x1ff
c0005518:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000551c:	29 c2                	sub    edx,eax
c000551e:	39 d6                	cmp    esi,edx
c0005520:	76 02                	jbe    c0005524 <f_read+0x25d>
c0005522:	89 d6                	mov    esi,edx
c0005524:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005528:	89 f1                	mov    ecx,esi
c000552a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000552e:	e8 a7 c6 ff ff       	call   c0001bda <mem_cpy>
c0005533:	e9 a7 fe ff ff       	jmp    c00053df <f_read+0x118>
c0005538:	bd 07 00 00 00       	mov    ebp,0x7
c000553d:	83 c4 2c             	add    esp,0x2c
c0005540:	89 e8                	mov    eax,ebp
c0005542:	5b                   	pop    ebx
c0005543:	5e                   	pop    esi
c0005544:	5f                   	pop    edi
c0005545:	5d                   	pop    ebp
c0005546:	c3                   	ret    

c0005547 <f_write>:
c0005547:	55                   	push   ebp
c0005548:	57                   	push   edi
c0005549:	56                   	push   esi
c000554a:	53                   	push   ebx
c000554b:	83 ec 2c             	sub    esp,0x2c
c000554e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005552:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000555c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005560:	89 d8                	mov    eax,ebx
c0005562:	e8 f7 cc ff ff       	call   c000225e <validate>
c0005567:	89 c5                	mov    ebp,eax
c0005569:	85 c0                	test   eax,eax
c000556b:	0f 85 86 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c0005571:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005575:	85 ed                	test   ebp,ebp
c0005577:	0f 85 7a 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c000557d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005581:	0f 84 6b 02 00 00    	je     c00057f2 <f_write+0x2ab>
c0005587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000558b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000558e:	0f 84 43 01 00 00    	je     c00056d7 <f_write+0x190>
c0005594:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005597:	89 c1                	mov    ecx,eax
c0005599:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000559d:	0f 83 34 01 00 00    	jae    c00056d7 <f_write+0x190>
c00055a3:	f7 d0                	not    eax
c00055a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a9:	e9 29 01 00 00       	jmp    c00056d7 <f_write+0x190>
c00055ae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055b1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055b4:	89 d0                	mov    eax,edx
c00055b6:	25 ff 01 00 00       	and    eax,0x1ff
c00055bb:	0f 85 00 02 00 00    	jne    c00057c1 <f_write+0x27a>
c00055c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c5:	89 d6                	mov    esi,edx
c00055c7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055cb:	89 cf                	mov    edi,ecx
c00055cd:	48                   	dec    eax
c00055ce:	0f ac fe 09          	shrd   esi,edi,0x9
c00055d2:	21 f0                	and    eax,esi
c00055d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d8:	0f 84 06 01 00 00    	je     c00056e4 <f_write+0x19d>
c00055de:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055e2:	0f 88 6e 01 00 00    	js     c0005756 <f_write+0x20f>
c00055e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ef:	89 c8                	mov    eax,ecx
c00055f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055f5:	e8 fa c7 ff ff       	call   c0001df4 <clst2sect>
c00055fa:	89 d1                	mov    ecx,edx
c00055fc:	09 c1                	or     ecx,eax
c00055fe:	0f 84 1c 01 00 00    	je     c0005720 <f_write+0x1d9>
c0005604:	31 ff                	xor    edi,edi
c0005606:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000560a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000560e:	01 c6                	add    esi,eax
c0005610:	11 d7                	adc    edi,edx
c0005612:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000561a:	0f 86 63 01 00 00    	jbe    c0005783 <f_write+0x23c>
c0005620:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005628:	c1 e8 09             	shr    eax,0x9
c000562b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000562f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005633:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005637:	39 c2                	cmp    edx,eax
c0005639:	76 08                	jbe    c0005643 <f_write+0xfc>
c000563b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000563f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000564a:	57                   	push   edi
c000564b:	56                   	push   esi
c000564c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005650:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005654:	50                   	push   eax
c0005655:	e8 cc c4 ff ff       	call   c0001b26 <disk_write>
c000565a:	83 c4 20             	add    esp,0x20
c000565d:	85 c0                	test   eax,eax
c000565f:	0f 85 ce 00 00 00    	jne    c0005733 <f_write+0x1ec>
c0005665:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005668:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000566b:	29 f0                	sub    eax,esi
c000566d:	19 fa                	sbb    edx,edi
c000566f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005673:	89 d7                	mov    edi,edx
c0005675:	ba 00 00 00 00       	mov    edx,0x0
c000567a:	89 f9                	mov    ecx,edi
c000567c:	19 d1                	sbb    ecx,edx
c000567e:	73 1c                	jae    c000569c <f_write+0x155>
c0005680:	89 c7                	mov    edi,eax
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	c1 e7 09             	shl    edi,0x9
c000568a:	8d 43 50             	lea    eax,[ebx+0x50]
c000568d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005691:	89 fa                	mov    edx,edi
c0005693:	e8 42 c5 ff ff       	call   c0001bda <mem_cpy>
c0005698:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000569c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056a0:	c1 e6 09             	shl    esi,0x9
c00056a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a7:	31 ff                	xor    edi,edi
c00056a9:	01 30                	add    DWORD PTR [eax],esi
c00056ab:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056af:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056b6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056bc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056bf:	89 c1                	mov    ecx,eax
c00056c1:	39 f2                	cmp    edx,esi
c00056c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056c6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c9:	19 f9                	sbb    ecx,edi
c00056cb:	73 04                	jae    c00056d1 <f_write+0x18a>
c00056cd:	89 f2                	mov    edx,esi
c00056cf:	89 f8                	mov    eax,edi
c00056d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056dc:	0f 85 cc fe ff ff    	jne    c00055ae <f_write+0x67>
c00056e2:	eb 2e                	jmp    c0005712 <f_write+0x1cb>
c00056e4:	89 c8                	mov    eax,ecx
c00056e6:	09 d0                	or     eax,edx
c00056e8:	75 0b                	jne    c00056f5 <f_write+0x1ae>
c00056ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ed:	31 d2                	xor    edx,edx
c00056ef:	85 c0                	test   eax,eax
c00056f1:	75 28                	jne    c000571b <f_write+0x1d4>
c00056f3:	eb 12                	jmp    c0005707 <f_write+0x1c0>
c00056f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f9:	74 09                	je     c0005704 <f_write+0x1bd>
c00056fb:	89 d8                	mov    eax,ebx
c00056fd:	e8 13 c7 ff ff       	call   c0001e15 <clmt_clust>
c0005702:	eb 0a                	jmp    c000570e <f_write+0x1c7>
c0005704:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005707:	89 d8                	mov    eax,ebx
c0005709:	e8 a1 da ff ff       	call   c00031af <create_chain>
c000570e:	85 c0                	test   eax,eax
c0005710:	75 09                	jne    c000571b <f_write+0x1d4>
c0005712:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005716:	e9 dc 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000571b:	83 f8 01             	cmp    eax,0x1
c000571e:	75 0e                	jne    c000572e <f_write+0x1e7>
c0005720:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005724:	bd 02 00 00 00       	mov    ebp,0x2
c0005729:	e9 c9 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000572e:	83 f8 ff             	cmp    eax,0xffffffff
c0005731:	75 0e                	jne    c0005741 <f_write+0x1fa>
c0005733:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005737:	bd 01 00 00 00       	mov    ebp,0x1
c000573c:	e9 b6 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c0005741:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005744:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005748:	0f 85 90 fe ff ff    	jne    c00055de <f_write+0x97>
c000574e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005751:	e9 88 fe ff ff       	jmp    c00055de <f_write+0x97>
c0005756:	83 ec 0c             	sub    esp,0xc
c0005759:	8d 43 50             	lea    eax,[ebx+0x50]
c000575c:	6a 01                	push   0x1
c000575e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005761:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005764:	50                   	push   eax
c0005765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005769:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000576d:	50                   	push   eax
c000576e:	e8 b3 c3 ff ff       	call   c0001b26 <disk_write>
c0005773:	83 c4 20             	add    esp,0x20
c0005776:	85 c0                	test   eax,eax
c0005778:	75 b9                	jne    c0005733 <f_write+0x1ec>
c000577a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000577e:	e9 65 fe ff ff       	jmp    c00055e8 <f_write+0xa1>
c0005783:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005786:	75 05                	jne    c000578d <f_write+0x246>
c0005788:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000578b:	74 2e                	je     c00057bb <f_write+0x274>
c000578d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005790:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005793:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005796:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005799:	73 20                	jae    c00057bb <f_write+0x274>
c000579b:	83 ec 0c             	sub    esp,0xc
c000579e:	8d 43 50             	lea    eax,[ebx+0x50]
c00057a1:	6a 01                	push   0x1
c00057a3:	57                   	push   edi
c00057a4:	56                   	push   esi
c00057a5:	50                   	push   eax
c00057a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057aa:	50                   	push   eax
c00057ab:	e8 60 c3 ff ff       	call   c0001b10 <disk_read>
c00057b0:	83 c4 20             	add    esp,0x20
c00057b3:	85 c0                	test   eax,eax
c00057b5:	0f 85 78 ff ff ff    	jne    c0005733 <f_write+0x1ec>
c00057bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057c4:	ba 00 02 00 00       	mov    edx,0x200
c00057c9:	25 ff 01 00 00       	and    eax,0x1ff
c00057ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057d2:	29 c2                	sub    edx,eax
c00057d4:	39 d6                	cmp    esi,edx
c00057d6:	76 02                	jbe    c00057da <f_write+0x293>
c00057d8:	89 d6                	mov    esi,edx
c00057da:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057de:	89 f1                	mov    ecx,esi
c00057e0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057e4:	e8 f1 c3 ff ff       	call   c0001bda <mem_cpy>
c00057e9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057ed:	e9 b1 fe ff ff       	jmp    c00056a3 <f_write+0x15c>
c00057f2:	bd 07 00 00 00       	mov    ebp,0x7
c00057f7:	83 c4 2c             	add    esp,0x2c
c00057fa:	89 e8                	mov    eax,ebp
c00057fc:	5b                   	pop    ebx
c00057fd:	5e                   	pop    esi
c00057fe:	5f                   	pop    edi
c00057ff:	5d                   	pop    ebp
c0005800:	c3                   	ret    

c0005801 <f_sync>:
c0005801:	56                   	push   esi
c0005802:	53                   	push   ebx
c0005803:	83 ec 64             	sub    esp,0x64
c0005806:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000580a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000580e:	89 d8                	mov    eax,ebx
c0005810:	e8 49 ca ff ff       	call   c000225e <validate>
c0005815:	85 c0                	test   eax,eax
c0005817:	0f 85 ba 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000581d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005820:	f6 c2 40             	test   dl,0x40
c0005823:	0f 84 ae 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c0005829:	84 d2                	test   dl,dl
c000582b:	79 33                	jns    c0005860 <f_sync+0x5f>
c000582d:	83 ec 0c             	sub    esp,0xc
c0005830:	8d 43 50             	lea    eax,[ebx+0x50]
c0005833:	6a 01                	push   0x1
c0005835:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005838:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000583b:	50                   	push   eax
c000583c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005840:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005844:	50                   	push   eax
c0005845:	e8 dc c2 ff ff       	call   c0001b26 <disk_write>
c000584a:	83 c4 20             	add    esp,0x20
c000584d:	89 c2                	mov    edx,eax
c000584f:	b8 01 00 00 00       	mov    eax,0x1
c0005854:	85 d2                	test   edx,edx
c0005856:	0f 85 7b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000585c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005864:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005867:	0f 85 11 01 00 00    	jne    c000597e <f_sync+0x17d>
c000586d:	89 d8                	mov    eax,ebx
c000586f:	e8 13 d6 ff ff       	call   c0002e87 <fill_first_frag>
c0005874:	85 c0                	test   eax,eax
c0005876:	0f 85 5b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000587c:	83 c9 ff             	or     ecx,0xffffffff
c000587f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005882:	89 d8                	mov    eax,ebx
c0005884:	e8 c9 d5 ff ff       	call   c0002e52 <fill_last_frag>
c0005889:	85 c0                	test   eax,eax
c000588b:	0f 85 46 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c0005891:	83 ec 0c             	sub    esp,0xc
c0005894:	68 60 04 00 00       	push   0x460
c0005899:	e8 26 2d 00 00       	call   c00085c4 <ff_memalloc>
c000589e:	83 c4 10             	add    esp,0x10
c00058a1:	89 c6                	mov    esi,eax
c00058a3:	b8 11 00 00 00       	mov    eax,0x11
c00058a8:	85 f6                	test   esi,esi
c00058aa:	0f 84 27 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c00058b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058c0:	89 da                	mov    edx,ebx
c00058c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058c6:	e8 af df ff ff       	call   c000387a <load_obj_xdir>
c00058cb:	85 c0                	test   eax,eax
c00058cd:	0f 85 95 00 00 00    	jne    c0005968 <f_sync+0x167>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058da:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058de:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058e1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058e4:	83 ca 01             	or     edx,0x1
c00058e7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058f0:	83 c0 34             	add    eax,0x34
c00058f3:	e8 d9 c2 ff ff       	call   c0001bd1 <st_dword>
c00058f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005902:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005905:	83 c0 38             	add    eax,0x38
c0005908:	e8 c7 c2 ff ff       	call   c0001bd4 <st_qword>
c000590d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005917:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000591a:	83 c0 28             	add    eax,0x28
c000591d:	e8 b2 c2 ff ff       	call   c0001bd4 <st_qword>
c0005922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005926:	ba 00 00 21 50       	mov    edx,0x50210000
c000592b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592e:	83 c0 0c             	add    eax,0xc
c0005931:	e8 9b c2 ff ff       	call   c0001bd1 <st_dword>
c0005936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000593a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000593d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005941:	31 d2                	xor    edx,edx
c0005943:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005946:	83 c0 10             	add    eax,0x10
c0005949:	e8 83 c2 ff ff       	call   c0001bd1 <st_dword>
c000594e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005952:	e8 62 e1 ff ff       	call   c0003ab9 <store_xdir>
c0005957:	85 c0                	test   eax,eax
c0005959:	75 0d                	jne    c0005968 <f_sync+0x167>
c000595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000595f:	e8 00 eb ff ff       	call   c0004464 <sync_fs>
c0005964:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000596c:	83 ec 0c             	sub    esp,0xc
c000596f:	56                   	push   esi
c0005970:	e8 67 2c 00 00       	call   c00085dc <ff_memfree>
c0005975:	83 c4 10             	add    esp,0x10
c0005978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000597c:	eb 59                	jmp    c00059d7 <f_sync+0x1d6>
c000597e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005981:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005984:	e8 b0 c9 ff ff       	call   c0002339 <move_window>
c0005989:	85 c0                	test   eax,eax
c000598b:	75 4a                	jne    c00059d7 <f_sync+0x1d6>
c000598d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005990:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005994:	89 f2                	mov    edx,esi
c0005996:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005999:	8b 03                	mov    eax,DWORD PTR [ebx]
c000599b:	e8 5f f3 ff ff       	call   c0004cff <st_clust.isra.1>
c00059a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059a3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059a6:	e8 26 c2 ff ff       	call   c0001bd1 <st_dword>
c00059ab:	8d 46 16             	lea    eax,[esi+0x16]
c00059ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00059b3:	e8 19 c2 ff ff       	call   c0001bd1 <st_dword>
c00059b8:	8d 46 12             	lea    eax,[esi+0x12]
c00059bb:	31 d2                	xor    edx,edx
c00059bd:	e8 0b c2 ff ff       	call   c0001bcd <st_word>
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ce:	e8 91 ea ff ff       	call   c0004464 <sync_fs>
c00059d3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059d7:	83 c4 64             	add    esp,0x64
c00059da:	5b                   	pop    ebx
c00059db:	5e                   	pop    esi
c00059dc:	c3                   	ret    

c00059dd <f_close>:
c00059dd:	53                   	push   ebx
c00059de:	83 ec 24             	sub    esp,0x24
c00059e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059e5:	53                   	push   ebx
c00059e6:	e8 16 fe ff ff       	call   c0005801 <f_sync>
c00059eb:	83 c4 10             	add    esp,0x10
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 15                	jne    c0005a07 <f_close+0x2a>
c00059f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 61 c8 ff ff       	call   c000225e <validate>
c00059fd:	85 c0                	test   eax,eax
c00059ff:	75 06                	jne    c0005a07 <f_close+0x2a>
c0005a01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a07:	83 c4 18             	add    esp,0x18
c0005a0a:	5b                   	pop    ebx
c0005a0b:	c3                   	ret    

c0005a0c <f_lseek>:
c0005a0c:	55                   	push   ebp
c0005a0d:	57                   	push   edi
c0005a0e:	56                   	push   esi
c0005a0f:	53                   	push   ebx
c0005a10:	83 ec 3c             	sub    esp,0x3c
c0005a13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a1b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a26:	89 d8                	mov    eax,ebx
c0005a28:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a2c:	e8 2d c8 ff ff       	call   c000225e <validate>
c0005a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a35:	85 c0                	test   eax,eax
c0005a37:	0f 85 7a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a3d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 6a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a51:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a54:	74 0c                	je     c0005a62 <f_lseek+0x56>
c0005a56:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a59:	85 c0                	test   eax,eax
c0005a5b:	75 1f                	jne    c0005a7c <f_lseek+0x70>
c0005a5d:	e9 b5 01 00 00       	jmp    c0005c17 <f_lseek+0x20b>
c0005a62:	83 c9 ff             	or     ecx,0xffffffff
c0005a65:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a68:	89 d8                	mov    eax,ebx
c0005a6a:	e8 e3 d3 ff ff       	call   c0002e52 <fill_last_frag>
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	74 e3                	je     c0005a56 <f_lseek+0x4a>
c0005a73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a77:	e9 3b 04 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005a7c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a81:	0f 85 ac 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a87:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a8b:	0f 85 a2 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a91:	8d 78 04             	lea    edi,[eax+0x4]
c0005a94:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a99:	be 02 00 00 00       	mov    esi,0x2
c0005a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005aa2:	85 ed                	test   ebp,ebp
c0005aa4:	74 73                	je     c0005b19 <f_lseek+0x10d>
c0005aa6:	89 e9                	mov    ecx,ebp
c0005aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aaf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ab2:	89 ca                	mov    edx,ecx
c0005ab4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab8:	89 d8                	mov    eax,ebx
c0005aba:	e8 02 d4 ff ff       	call   c0002ec1 <get_fat>
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	83 f8 01             	cmp    eax,0x1
c0005ac6:	77 11                	ja     c0005ad9 <f_lseek+0xcd>
c0005ac8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005acc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ad4:	e9 de 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005ad9:	83 f8 ff             	cmp    eax,0xffffffff
c0005adc:	75 11                	jne    c0005aef <f_lseek+0xe3>
c0005ade:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ae2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005aea:	e9 c8 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005aef:	8d 51 01             	lea    edx,[ecx+0x1]
c0005af2:	89 c1                	mov    ecx,eax
c0005af4:	39 c2                	cmp    edx,eax
c0005af6:	74 b7                	je     c0005aaf <f_lseek+0xa3>
c0005af8:	83 c6 02             	add    esi,0x2
c0005afb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005aff:	72 0b                	jb     c0005b0c <f_lseek+0x100>
c0005b01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b04:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b07:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b09:	83 c7 08             	add    edi,0x8
c0005b0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b10:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b13:	76 04                	jbe    c0005b19 <f_lseek+0x10d>
c0005b15:	89 c5                	mov    ebp,eax
c0005b17:	eb 8d                	jmp    c0005aa6 <f_lseek+0x9a>
c0005b19:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b1c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b20:	89 30                	mov    DWORD PTR [eax],esi
c0005b22:	0f 87 87 03 00 00    	ja     c0005eaf <f_lseek+0x4a3>
c0005b28:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b2e:	e9 84 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005b33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b36:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b45:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b4c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b50:	73 0f                	jae    c0005b61 <f_lseek+0x155>
c0005b52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b6c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b73:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b77:	0f 84 3a 03 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005b7d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b85:	83 c6 ff             	add    esi,0xffffffff
c0005b88:	89 d8                	mov    eax,ebx
c0005b8a:	83 d7 ff             	adc    edi,0xffffffff
c0005b8d:	89 f2                	mov    edx,esi
c0005b8f:	89 f9                	mov    ecx,edi
c0005b91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b95:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b98:	e8 78 c2 ff ff       	call   c0001e15 <clmt_clust>
c0005b9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ba1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba4:	89 c2                	mov    edx,eax
c0005ba6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005baa:	89 c8                	mov    eax,ecx
c0005bac:	e8 43 c2 ff ff       	call   c0001df4 <clst2sect>
c0005bb1:	89 d7                	mov    edi,edx
c0005bb3:	09 c7                	or     edi,eax
c0005bb5:	0f 84 0d ff ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005bbb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bbf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bc5:	0f 84 ec 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bcb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bd6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bda:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bde:	4d                   	dec    ebp
c0005bdf:	31 ff                	xor    edi,edi
c0005be1:	21 ee                	and    esi,ebp
c0005be3:	01 c6                	add    esi,eax
c0005be5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be8:	11 d7                	adc    edi,edx
c0005bea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bed:	39 fa                	cmp    edx,edi
c0005bef:	75 08                	jne    c0005bf9 <f_lseek+0x1ed>
c0005bf1:	39 f0                	cmp    eax,esi
c0005bf3:	0f 84 be 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bf9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bfc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c00:	0f 89 80 02 00 00    	jns    c0005e86 <f_lseek+0x47a>
c0005c06:	83 ec 0c             	sub    esp,0xc
c0005c09:	6a 01                	push   0x1
c0005c0b:	52                   	push   edx
c0005c0c:	50                   	push   eax
c0005c0d:	55                   	push   ebp
c0005c0e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c12:	e9 5a 02 00 00       	jmp    c0005e71 <f_lseek+0x465>
c0005c17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c1b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c1e:	74 16                	je     c0005c36 <f_lseek+0x22a>
c0005c20:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c25:	76 0f                	jbe    c0005c36 <f_lseek+0x22a>
c0005c27:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c3c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c3f:	89 c7                	mov    edi,eax
c0005c41:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c45:	73 0d                	jae    c0005c54 <f_lseek+0x248>
c0005c47:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c4b:	75 07                	jne    c0005c54 <f_lseek+0x248>
c0005c4d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c54:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c57:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c5a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c65:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c6c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c6f:	75 09                	jne    c0005c7a <f_lseek+0x26e>
c0005c71:	31 f6                	xor    esi,esi
c0005c73:	31 ff                	xor    edi,edi
c0005c75:	e9 af 01 00 00       	jmp    c0005e29 <f_lseek+0x41d>
c0005c7a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c7e:	89 d7                	mov    edi,edx
c0005c80:	c1 e1 09             	shl    ecx,0x9
c0005c83:	09 c7                	or     edi,eax
c0005c85:	89 cd                	mov    ebp,ecx
c0005c87:	74 6d                	je     c0005cf6 <f_lseek+0x2ea>
c0005c89:	83 c0 ff             	add    eax,0xffffffff
c0005c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c90:	83 d2 ff             	adc    edx,0xffffffff
c0005c93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c9a:	83 c0 ff             	add    eax,0xffffffff
c0005c9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca1:	83 d2 ff             	adc    edx,0xffffffff
c0005ca4:	31 ff                	xor    edi,edi
c0005ca6:	57                   	push   edi
c0005ca7:	51                   	push   ecx
c0005ca8:	52                   	push   edx
c0005ca9:	50                   	push   eax
c0005caa:	e8 65 c7 01 00       	call   c0022414 <__udivdi3>
c0005caf:	83 c4 10             	add    esp,0x10
c0005cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cba:	57                   	push   edi
c0005cbb:	55                   	push   ebp
c0005cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc4:	e8 4b c7 01 00       	call   c0022414 <__udivdi3>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005cd4:	19 d1                	sbb    ecx,edx
c0005cd6:	72 1e                	jb     c0005cf6 <f_lseek+0x2ea>
c0005cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cdc:	89 e9                	mov    ecx,ebp
c0005cde:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ce1:	f7 d9                	neg    ecx
c0005ce3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ce6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cea:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ced:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005cf0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cf4:	eb 28                	jmp    c0005d1e <f_lseek+0x312>
c0005cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf9:	85 c0                	test   eax,eax
c0005cfb:	75 1e                	jne    c0005d1b <f_lseek+0x30f>
c0005cfd:	31 d2                	xor    edx,edx
c0005cff:	89 d8                	mov    eax,ebx
c0005d01:	e8 a9 d4 ff ff       	call   c00031af <create_chain>
c0005d06:	83 f8 01             	cmp    eax,0x1
c0005d09:	0f 84 b9 fd ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005d0f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d12:	0f 84 c6 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005d18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d1b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d1e:	85 c0                	test   eax,eax
c0005d20:	0f 84 4b ff ff ff    	je     c0005c71 <f_lseek+0x265>
c0005d26:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d32:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d3c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d3f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d43:	0f 83 9d 00 00 00    	jae    c0005de6 <f_lseek+0x3da>
c0005d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d51:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d54:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d58:	01 f2                	add    edx,esi
c0005d5a:	11 f9                	adc    ecx,edi
c0005d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d64:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d67:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d6a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d6d:	f6 c1 02             	test   cl,0x2
c0005d70:	74 35                	je     c0005da7 <f_lseek+0x39b>
c0005d72:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d76:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d79:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d7c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d80:	73 16                	jae    c0005d98 <f_lseek+0x38c>
c0005d82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d86:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d8a:	88 ca                	mov    dl,cl
c0005d8c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d8f:	83 ca 40             	or     edx,0x40
c0005d92:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d95:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d98:	89 c2                	mov    edx,eax
c0005d9a:	89 d8                	mov    eax,ebx
c0005d9c:	e8 0e d4 ff ff       	call   c00031af <create_chain>
c0005da1:	85 c0                	test   eax,eax
c0005da3:	75 0b                	jne    c0005db0 <f_lseek+0x3a4>
c0005da5:	eb 30                	jmp    c0005dd7 <f_lseek+0x3cb>
c0005da7:	89 c2                	mov    edx,eax
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 11 d1 ff ff       	call   c0002ec1 <get_fat>
c0005db0:	83 f8 ff             	cmp    eax,0xffffffff
c0005db3:	0f 84 25 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005db9:	83 f8 01             	cmp    eax,0x1
c0005dbc:	0f 86 06 fd ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dc2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dc6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc9:	0f 86 f9 fc ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dcf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dd2:	e9 5b ff ff ff       	jmp    c0005d32 <f_lseek+0x326>
c0005dd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dde:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005de6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ded:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005df0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005df3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005df6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005dfc:	0f 84 6f fe ff ff    	je     c0005c71 <f_lseek+0x265>
c0005e02:	89 c2                	mov    edx,eax
c0005e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e08:	e8 e7 bf ff ff       	call   c0001df4 <clst2sect>
c0005e0d:	89 d7                	mov    edi,edx
c0005e0f:	09 c7                	or     edi,eax
c0005e11:	0f 84 b1 fc ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005e17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e1b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e1e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e22:	c1 ef 09             	shr    edi,0x9
c0005e25:	01 c6                	add    esi,eax
c0005e27:	11 d7                	adc    edi,edx
c0005e29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e2c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e32:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e35:	19 d1                	sbb    ecx,edx
c0005e37:	73 0a                	jae    c0005e43 <f_lseek+0x437>
c0005e39:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e3c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e3f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e43:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e48:	74 6d                	je     c0005eb7 <f_lseek+0x4ab>
c0005e4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e4d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e50:	39 fa                	cmp    edx,edi
c0005e52:	75 04                	jne    c0005e58 <f_lseek+0x44c>
c0005e54:	39 f0                	cmp    eax,esi
c0005e56:	74 5f                	je     c0005eb7 <f_lseek+0x4ab>
c0005e58:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e5b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e5f:	79 25                	jns    c0005e86 <f_lseek+0x47a>
c0005e61:	83 ec 0c             	sub    esp,0xc
c0005e64:	6a 01                	push   0x1
c0005e66:	52                   	push   edx
c0005e67:	50                   	push   eax
c0005e68:	55                   	push   ebp
c0005e69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e6d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e71:	50                   	push   eax
c0005e72:	e8 af bc ff ff       	call   c0001b26 <disk_write>
c0005e77:	83 c4 20             	add    esp,0x20
c0005e7a:	85 c0                	test   eax,eax
c0005e7c:	0f 85 5c fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005e82:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e86:	83 ec 0c             	sub    esp,0xc
c0005e89:	6a 01                	push   0x1
c0005e8b:	57                   	push   edi
c0005e8c:	56                   	push   esi
c0005e8d:	55                   	push   ebp
c0005e8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e92:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e96:	50                   	push   eax
c0005e97:	e8 74 bc ff ff       	call   c0001b10 <disk_read>
c0005e9c:	83 c4 20             	add    esp,0x20
c0005e9f:	85 c0                	test   eax,eax
c0005ea1:	0f 85 37 fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005ea7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eaa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ead:	eb 08                	jmp    c0005eb7 <f_lseek+0x4ab>
c0005eaf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ebb:	83 c4 3c             	add    esp,0x3c
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	5d                   	pop    ebp
c0005ec2:	c3                   	ret    

c0005ec3 <f_opendir>:
c0005ec3:	56                   	push   esi
c0005ec4:	b8 09 00 00 00       	mov    eax,0x9
c0005ec9:	53                   	push   ebx
c0005eca:	83 ec 24             	sub    esp,0x24
c0005ecd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed1:	85 db                	test   ebx,ebx
c0005ed3:	0f 84 e6 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005ed9:	31 c9                	xor    ecx,ecx
c0005edb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005edf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ee3:	e8 03 c7 ff ff       	call   c00025eb <mount_volume>
c0005ee8:	85 c0                	test   eax,eax
c0005eea:	0f 85 c9 00 00 00    	jne    c0005fb9 <f_opendir+0xf6>
c0005ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ef4:	83 ec 0c             	sub    esp,0xc
c0005ef7:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef9:	68 60 04 00 00       	push   0x460
c0005efe:	e8 c1 26 00 00       	call   c00085c4 <ff_memalloc>
c0005f03:	83 c4 10             	add    esp,0x10
c0005f06:	89 c6                	mov    esi,eax
c0005f08:	b8 11 00 00 00       	mov    eax,0x11
c0005f0d:	85 f6                	test   esi,esi
c0005f0f:	0f 84 aa 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f29:	89 d8                	mov    eax,ebx
c0005f2b:	e8 31 ee ff ff       	call   c0004d61 <follow_path>
c0005f30:	85 c0                	test   eax,eax
c0005f32:	75 61                	jne    c0005f95 <f_opendir+0xd2>
c0005f34:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f38:	78 46                	js     c0005f80 <f_opendir+0xbd>
c0005f3a:	b8 05 00 00 00       	mov    eax,0x5
c0005f3f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f43:	74 50                	je     c0005f95 <f_opendir+0xd2>
c0005f45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f49:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f4b:	3c 04                	cmp    al,0x4
c0005f4d:	75 26                	jne    c0005f75 <f_opendir+0xb2>
c0005f4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f52:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f58:	30 d2                	xor    dl,dl
c0005f5a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f5e:	09 c2                	or     edx,eax
c0005f60:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f63:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f66:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f69:	89 da                	mov    edx,ebx
c0005f6b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f6e:	e8 b4 ed ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005f73:	eb 0b                	jmp    c0005f80 <f_opendir+0xbd>
c0005f75:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f78:	e8 59 ed ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0005f7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f84:	31 d2                	xor    edx,edx
c0005f86:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f8a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f8e:	89 d8                	mov    eax,ebx
c0005f90:	e8 22 d1 ff ff       	call   c00030b7 <dir_sdi>
c0005f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f99:	83 ec 0c             	sub    esp,0xc
c0005f9c:	56                   	push   esi
c0005f9d:	e8 3a 26 00 00       	call   c00085dc <ff_memfree>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa9:	83 f8 04             	cmp    eax,0x4
c0005fac:	74 06                	je     c0005fb4 <f_opendir+0xf1>
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	74 0d                	je     c0005fbf <f_opendir+0xfc>
c0005fb2:	eb 05                	jmp    c0005fb9 <f_opendir+0xf6>
c0005fb4:	b8 05 00 00 00       	mov    eax,0x5
c0005fb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fbf:	83 c4 24             	add    esp,0x24
c0005fc2:	5b                   	pop    ebx
c0005fc3:	5e                   	pop    esi
c0005fc4:	c3                   	ret    

c0005fc5 <f_closedir>:
c0005fc5:	53                   	push   ebx
c0005fc6:	83 ec 18             	sub    esp,0x18
c0005fc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fcd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fd1:	89 d8                	mov    eax,ebx
c0005fd3:	e8 86 c2 ff ff       	call   c000225e <validate>
c0005fd8:	85 c0                	test   eax,eax
c0005fda:	75 06                	jne    c0005fe2 <f_closedir+0x1d>
c0005fdc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fe2:	83 c4 18             	add    esp,0x18
c0005fe5:	5b                   	pop    ebx
c0005fe6:	c3                   	ret    

c0005fe7 <f_readdir>:
c0005fe7:	57                   	push   edi
c0005fe8:	56                   	push   esi
c0005fe9:	53                   	push   ebx
c0005fea:	83 ec 20             	sub    esp,0x20
c0005fed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ff1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ff5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff9:	89 d8                	mov    eax,ebx
c0005ffb:	e8 5e c2 ff ff       	call   c000225e <validate>
c0006000:	85 c0                	test   eax,eax
c0006002:	75 77                	jne    c000607b <f_readdir+0x94>
c0006004:	85 ff                	test   edi,edi
c0006006:	75 0b                	jne    c0006013 <f_readdir+0x2c>
c0006008:	31 d2                	xor    edx,edx
c000600a:	89 d8                	mov    eax,ebx
c000600c:	e8 a6 d0 ff ff       	call   c00030b7 <dir_sdi>
c0006011:	eb 68                	jmp    c000607b <f_readdir+0x94>
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	68 60 04 00 00       	push   0x460
c000601b:	e8 a4 25 00 00       	call   c00085c4 <ff_memalloc>
c0006020:	83 c4 10             	add    esp,0x10
c0006023:	89 c6                	mov    esi,eax
c0006025:	b8 11 00 00 00       	mov    eax,0x11
c000602a:	85 f6                	test   esi,esi
c000602c:	74 4d                	je     c000607b <f_readdir+0x94>
c000602e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006032:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006038:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000603b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000603e:	31 d2                	xor    edx,edx
c0006040:	89 d8                	mov    eax,ebx
c0006042:	e8 80 d8 ff ff       	call   c00038c7 <dir_read>
c0006047:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000604c:	75 19                	jne    c0006067 <f_readdir+0x80>
c000604e:	89 fa                	mov    edx,edi
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 7e ea ff ff       	call   c0004ad5 <get_fileinfo>
c0006057:	31 d2                	xor    edx,edx
c0006059:	89 d8                	mov    eax,ebx
c000605b:	e8 af d5 ff ff       	call   c000360f <dir_next>
c0006060:	83 f8 04             	cmp    eax,0x4
c0006063:	75 02                	jne    c0006067 <f_readdir+0x80>
c0006065:	31 c0                	xor    eax,eax
c0006067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000606b:	83 ec 0c             	sub    esp,0xc
c000606e:	56                   	push   esi
c000606f:	e8 68 25 00 00       	call   c00085dc <ff_memfree>
c0006074:	83 c4 10             	add    esp,0x10
c0006077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000607b:	83 c4 20             	add    esp,0x20
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	c3                   	ret    

c0006082 <f_stat>:
c0006082:	57                   	push   edi
c0006083:	31 c9                	xor    ecx,ecx
c0006085:	56                   	push   esi
c0006086:	53                   	push   ebx
c0006087:	83 ec 50             	sub    esp,0x50
c000608a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000608e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006092:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006096:	e8 50 c5 ff ff       	call   c00025eb <mount_volume>
c000609b:	89 c3                	mov    ebx,eax
c000609d:	85 c0                	test   eax,eax
c000609f:	75 67                	jne    c0006108 <f_stat+0x86>
c00060a1:	83 ec 0c             	sub    esp,0xc
c00060a4:	bb 11 00 00 00       	mov    ebx,0x11
c00060a9:	68 60 04 00 00       	push   0x460
c00060ae:	e8 11 25 00 00       	call   c00085c4 <ff_memalloc>
c00060b3:	83 c4 10             	add    esp,0x10
c00060b6:	89 c6                	mov    esi,eax
c00060b8:	85 c0                	test   eax,eax
c00060ba:	74 4c                	je     c0006108 <f_stat+0x86>
c00060bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060c0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060c6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060cc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060d0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060d4:	e8 88 ec ff ff       	call   c0004d61 <follow_path>
c00060d9:	89 c3                	mov    ebx,eax
c00060db:	85 c0                	test   eax,eax
c00060dd:	75 1d                	jne    c00060fc <f_stat+0x7a>
c00060df:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060e4:	78 11                	js     c00060f7 <f_stat+0x75>
c00060e6:	85 ff                	test   edi,edi
c00060e8:	74 12                	je     c00060fc <f_stat+0x7a>
c00060ea:	89 fa                	mov    edx,edi
c00060ec:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060f0:	e8 e0 e9 ff ff       	call   c0004ad5 <get_fileinfo>
c00060f5:	eb 05                	jmp    c00060fc <f_stat+0x7a>
c00060f7:	bb 06 00 00 00       	mov    ebx,0x6
c00060fc:	83 ec 0c             	sub    esp,0xc
c00060ff:	56                   	push   esi
c0006100:	e8 d7 24 00 00       	call   c00085dc <ff_memfree>
c0006105:	83 c4 10             	add    esp,0x10
c0006108:	83 c4 50             	add    esp,0x50
c000610b:	89 d8                	mov    eax,ebx
c000610d:	5b                   	pop    ebx
c000610e:	5e                   	pop    esi
c000610f:	5f                   	pop    edi
c0006110:	c3                   	ret    

c0006111 <f_getfree>:
c0006111:	55                   	push   ebp
c0006112:	31 c9                	xor    ecx,ecx
c0006114:	57                   	push   edi
c0006115:	56                   	push   esi
c0006116:	53                   	push   ebx
c0006117:	83 ec 5c             	sub    esp,0x5c
c000611a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000611e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006122:	e8 c4 c4 ff ff       	call   c00025eb <mount_volume>
c0006127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000612b:	85 c0                	test   eax,eax
c000612d:	0f 85 9d 01 00 00    	jne    c00062d0 <f_getfree+0x1bf>
c0006133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006137:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000613b:	89 02                	mov    DWORD PTR [edx],eax
c000613d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006143:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006146:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000614a:	39 f2                	cmp    edx,esi
c000614c:	77 0b                	ja     c0006159 <f_getfree+0x48>
c000614e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006152:	89 10                	mov    DWORD PTR [eax],edx
c0006154:	e9 77 01 00 00       	jmp    c00062d0 <f_getfree+0x1bf>
c0006159:	8a 10                	mov    dl,BYTE PTR [eax]
c000615b:	80 fa 01             	cmp    dl,0x1
c000615e:	75 3a                	jne    c000619a <f_getfree+0x89>
c0006160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006164:	be 02 00 00 00       	mov    esi,0x2
c0006169:	31 db                	xor    ebx,ebx
c000616b:	89 f2                	mov    edx,esi
c000616d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006171:	e8 4b cd ff ff       	call   c0002ec1 <get_fat>
c0006176:	83 f8 ff             	cmp    eax,0xffffffff
c0006179:	0f 84 28 01 00 00    	je     c00062a7 <f_getfree+0x196>
c000617f:	83 f8 01             	cmp    eax,0x1
c0006182:	0f 84 29 01 00 00    	je     c00062b1 <f_getfree+0x1a0>
c0006188:	83 d3 00             	adc    ebx,0x0
c000618b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000618f:	46                   	inc    esi
c0006190:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006193:	77 d6                	ja     c000616b <f_getfree+0x5a>
c0006195:	e9 25 01 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000619a:	80 fa 04             	cmp    dl,0x4
c000619d:	0f 85 88 00 00 00    	jne    c000622b <f_getfree+0x11a>
c00061a3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061a6:	31 ed                	xor    ebp,ebp
c00061a8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061b3:	31 db                	xor    ebx,ebx
c00061b5:	85 ed                	test   ebp,ebp
c00061b7:	75 3f                	jne    c00061f8 <f_getfree+0xe7>
c00061b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061c1:	83 c0 01             	add    eax,0x1
c00061c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c8:	83 d2 00             	adc    edx,0x0
c00061cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061db:	e8 59 c1 ff ff       	call   c0002339 <move_window>
c00061e0:	85 c0                	test   eax,eax
c00061e2:	0f 85 d3 00 00 00    	jne    c00062bb <f_getfree+0x1aa>
c00061e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061fc:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061ff:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006203:	89 cf                	mov    edi,ecx
c0006205:	85 f6                	test   esi,esi
c0006207:	74 12                	je     c000621b <f_getfree+0x10a>
c0006209:	88 c1                	mov    cl,al
c000620b:	83 e1 01             	and    ecx,0x1
c000620e:	80 f9 01             	cmp    cl,0x1
c0006211:	83 d3 00             	adc    ebx,0x0
c0006214:	d0 e8                	shr    al,1
c0006216:	4e                   	dec    esi
c0006217:	39 fe                	cmp    esi,edi
c0006219:	75 ea                	jne    c0006205 <f_getfree+0xf4>
c000621b:	45                   	inc    ebp
c000621c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006222:	85 f6                	test   esi,esi
c0006224:	75 8f                	jne    c00061b5 <f_getfree+0xa4>
c0006226:	e9 94 00 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000622b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000622e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006231:	31 f6                	xor    esi,esi
c0006233:	31 db                	xor    ebx,ebx
c0006235:	85 f6                	test   esi,esi
c0006237:	75 1b                	jne    c0006254 <f_getfree+0x143>
c0006239:	89 d7                	mov    edi,edx
c000623b:	89 cd                	mov    ebp,ecx
c000623d:	83 c7 01             	add    edi,0x1
c0006240:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006244:	83 d5 00             	adc    ebp,0x0
c0006247:	e8 ed c0 ff ff       	call   c0002339 <move_window>
c000624c:	85 c0                	test   eax,eax
c000624e:	75 6b                	jne    c00062bb <f_getfree+0x1aa>
c0006250:	89 fa                	mov    edx,edi
c0006252:	89 e9                	mov    ecx,ebp
c0006254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006258:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000625c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006260:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006263:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006267:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000626b:	75 11                	jne    c000627e <f_getfree+0x16d>
c000626d:	e8 e9 b8 ff ff       	call   c0001b5b <ld_word>
c0006272:	66 83 f8 01          	cmp    ax,0x1
c0006276:	83 d3 00             	adc    ebx,0x0
c0006279:	83 c6 02             	add    esi,0x2
c000627c:	eb 13                	jmp    c0006291 <f_getfree+0x180>
c000627e:	e8 e5 b8 ff ff       	call   c0001b68 <ld_dword>
c0006283:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006288:	83 f8 01             	cmp    eax,0x1
c000628b:	83 d3 00             	adc    ebx,0x0
c000628e:	83 c6 04             	add    esi,0x4
c0006291:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000629b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000629f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062a3:	75 90                	jne    c0006235 <f_getfree+0x124>
c00062a5:	eb 18                	jmp    c00062bf <f_getfree+0x1ae>
c00062a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062af:	eb 0e                	jmp    c00062bf <f_getfree+0x1ae>
c00062b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b9:	eb 04                	jmp    c00062bf <f_getfree+0x1ae>
c00062bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062c3:	89 18                	mov    DWORD PTR [eax],ebx
c00062c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062cc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062d4:	83 c4 5c             	add    esp,0x5c
c00062d7:	5b                   	pop    ebx
c00062d8:	5e                   	pop    esi
c00062d9:	5f                   	pop    edi
c00062da:	5d                   	pop    ebp
c00062db:	c3                   	ret    

c00062dc <f_truncate>:
c00062dc:	56                   	push   esi
c00062dd:	53                   	push   ebx
c00062de:	83 ec 14             	sub    esp,0x14
c00062e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e9:	89 d8                	mov    eax,ebx
c00062eb:	e8 6e bf ff ff       	call   c000225e <validate>
c00062f0:	89 c6                	mov    esi,eax
c00062f2:	85 c0                	test   eax,eax
c00062f4:	0f 85 d2 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c00062fa:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062fe:	85 f6                	test   esi,esi
c0006300:	0f 85 c6 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c0006306:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000630a:	0f 84 b7 00 00 00    	je     c00063c7 <f_truncate+0xeb>
c0006310:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006313:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006316:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006319:	89 d1                	mov    ecx,edx
c000631b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000631e:	0f 83 a8 00 00 00    	jae    c00063cc <f_truncate+0xf0>
c0006324:	09 c2                	or     edx,eax
c0006326:	75 15                	jne    c000633d <f_truncate+0x61>
c0006328:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000632b:	31 c9                	xor    ecx,ecx
c000632d:	89 d8                	mov    eax,ebx
c000632f:	e8 7a d0 ff ff       	call   c00033ae <remove_chain>
c0006334:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000633b:	eb 35                	jmp    c0006372 <f_truncate+0x96>
c000633d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006340:	89 d8                	mov    eax,ebx
c0006342:	e8 7a cb ff ff       	call   c0002ec1 <get_fat>
c0006347:	89 c2                	mov    edx,eax
c0006349:	b8 01 00 00 00       	mov    eax,0x1
c000634e:	83 fa ff             	cmp    edx,0xffffffff
c0006351:	74 1f                	je     c0006372 <f_truncate+0x96>
c0006353:	b8 02 00 00 00       	mov    eax,0x2
c0006358:	83 fa 01             	cmp    edx,0x1
c000635b:	74 15                	je     c0006372 <f_truncate+0x96>
c000635d:	31 c0                	xor    eax,eax
c000635f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006363:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006366:	76 0a                	jbe    c0006372 <f_truncate+0x96>
c0006368:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000636b:	89 d8                	mov    eax,ebx
c000636d:	e8 3c d0 ff ff       	call   c00033ae <remove_chain>
c0006372:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006375:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006378:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000637b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000637e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006381:	83 ca 40             	or     edx,0x40
c0006384:	85 c0                	test   eax,eax
c0006386:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006389:	75 35                	jne    c00063c0 <f_truncate+0xe4>
c000638b:	84 d2                	test   dl,dl
c000638d:	79 3d                	jns    c00063cc <f_truncate+0xf0>
c000638f:	83 ec 0c             	sub    esp,0xc
c0006392:	8d 43 50             	lea    eax,[ebx+0x50]
c0006395:	6a 01                	push   0x1
c0006397:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000639a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000639d:	50                   	push   eax
c000639e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063a6:	50                   	push   eax
c00063a7:	e8 7a b7 ff ff       	call   c0001b26 <disk_write>
c00063ac:	83 c4 20             	add    esp,0x20
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 08                	jne    c00063bb <f_truncate+0xdf>
c00063b3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063b7:	31 f6                	xor    esi,esi
c00063b9:	eb 11                	jmp    c00063cc <f_truncate+0xf0>
c00063bb:	b8 01 00 00 00       	mov    eax,0x1
c00063c0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063c3:	89 c6                	mov    esi,eax
c00063c5:	eb 05                	jmp    c00063cc <f_truncate+0xf0>
c00063c7:	be 07 00 00 00       	mov    esi,0x7
c00063cc:	89 f0                	mov    eax,esi
c00063ce:	83 c4 14             	add    esp,0x14
c00063d1:	5b                   	pop    ebx
c00063d2:	5e                   	pop    esi
c00063d3:	c3                   	ret    

c00063d4 <f_unlink>:
c00063d4:	56                   	push   esi
c00063d5:	b9 02 00 00 00       	mov    ecx,0x2
c00063da:	53                   	push   ebx
c00063db:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063e5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063ec:	e8 fa c1 ff ff       	call   c00025eb <mount_volume>
c00063f1:	85 c0                	test   eax,eax
c00063f3:	0f 85 55 01 00 00    	jne    c000654e <f_unlink+0x17a>
c00063f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fd:	83 ec 0c             	sub    esp,0xc
c0006400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006404:	68 60 04 00 00       	push   0x460
c0006409:	e8 b6 21 00 00       	call   c00085c4 <ff_memalloc>
c000640e:	83 c4 10             	add    esp,0x10
c0006411:	89 c3                	mov    ebx,eax
c0006413:	b8 11 00 00 00       	mov    eax,0x11
c0006418:	85 db                	test   ebx,ebx
c000641a:	0f 84 2e 01 00 00    	je     c000654e <f_unlink+0x17a>
c0006420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006424:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000642a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000642d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006430:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006437:	8d 44 24 48          	lea    eax,[esp+0x48]
c000643b:	e8 21 e9 ff ff       	call   c0004d61 <follow_path>
c0006440:	85 c0                	test   eax,eax
c0006442:	0f 85 f2 00 00 00    	jne    c000653a <f_unlink+0x166>
c0006448:	b8 06 00 00 00       	mov    eax,0x6
c000644d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006455:	0f 88 df 00 00 00    	js     c000653a <f_unlink+0x166>
c000645b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006460:	74 0a                	je     c000646c <f_unlink+0x98>
c0006462:	b8 07 00 00 00       	mov    eax,0x7
c0006467:	e9 ce 00 00 00       	jmp    c000653a <f_unlink+0x166>
c000646c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006470:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006474:	8a 02                	mov    al,BYTE PTR [edx]
c0006476:	3c 04                	cmp    al,0x4
c0006478:	75 12                	jne    c000648c <f_unlink+0xb8>
c000647a:	8d 42 10             	lea    eax,[edx+0x10]
c000647d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006481:	e8 a1 e8 ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0006486:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000648a:	eb 0e                	jmp    c000649a <f_unlink+0xc6>
c000648c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006493:	e8 3e e8 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0006498:	89 c6                	mov    esi,eax
c000649a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000649f:	75 12                	jne    c00064b3 <f_unlink+0xdf>
c00064a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064a5:	e8 94 d6 ff ff       	call   c0003b3e <dir_remove>
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 6c                	je     c000651a <f_unlink+0x146>
c00064ae:	e9 87 00 00 00       	jmp    c000653a <f_unlink+0x166>
c00064b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064b7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064be:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c8:	75 21                	jne    c00064eb <f_unlink+0x117>
c00064ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064d2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064e0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064e4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064eb:	31 d2                	xor    edx,edx
c00064ed:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064f4:	e8 be cb ff ff       	call   c00030b7 <dir_sdi>
c00064f9:	85 c0                	test   eax,eax
c00064fb:	75 3d                	jne    c000653a <f_unlink+0x166>
c00064fd:	31 d2                	xor    edx,edx
c00064ff:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006506:	e8 bc d3 ff ff       	call   c00038c7 <dir_read>
c000650b:	85 c0                	test   eax,eax
c000650d:	0f 84 4f ff ff ff    	je     c0006462 <f_unlink+0x8e>
c0006513:	83 f8 04             	cmp    eax,0x4
c0006516:	75 22                	jne    c000653a <f_unlink+0x166>
c0006518:	eb 87                	jmp    c00064a1 <f_unlink+0xcd>
c000651a:	85 f6                	test   esi,esi
c000651c:	75 0b                	jne    c0006529 <f_unlink+0x155>
c000651e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006522:	e8 3d df ff ff       	call   c0004464 <sync_fs>
c0006527:	eb 11                	jmp    c000653a <f_unlink+0x166>
c0006529:	31 c9                	xor    ecx,ecx
c000652b:	89 f2                	mov    edx,esi
c000652d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006531:	e8 78 ce ff ff       	call   c00033ae <remove_chain>
c0006536:	85 c0                	test   eax,eax
c0006538:	74 e4                	je     c000651e <f_unlink+0x14a>
c000653a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000653e:	83 ec 0c             	sub    esp,0xc
c0006541:	53                   	push   ebx
c0006542:	e8 95 20 00 00       	call   c00085dc <ff_memfree>
c0006547:	83 c4 10             	add    esp,0x10
c000654a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000654e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006554:	5b                   	pop    ebx
c0006555:	5e                   	pop    esi
c0006556:	c3                   	ret    

c0006557 <f_mkdir>:
c0006557:	57                   	push   edi
c0006558:	b9 02 00 00 00       	mov    ecx,0x2
c000655d:	56                   	push   esi
c000655e:	53                   	push   ebx
c000655f:	83 c4 80             	add    esp,0xffffff80
c0006562:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006566:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000656d:	e8 79 c0 ff ff       	call   c00025eb <mount_volume>
c0006572:	89 c3                	mov    ebx,eax
c0006574:	85 c0                	test   eax,eax
c0006576:	0f 85 fe 01 00 00    	jne    c000677a <f_mkdir+0x223>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	bb 11 00 00 00       	mov    ebx,0x11
c0006585:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006589:	83 ec 0c             	sub    esp,0xc
c000658c:	68 60 04 00 00       	push   0x460
c0006591:	e8 2e 20 00 00       	call   c00085c4 <ff_memalloc>
c0006596:	83 c4 10             	add    esp,0x10
c0006599:	89 c7                	mov    edi,eax
c000659b:	85 c0                	test   eax,eax
c000659d:	0f 84 d7 01 00 00    	je     c000677a <f_mkdir+0x223>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065ad:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065b3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065be:	e8 9e e7 ff ff       	call   c0004d61 <follow_path>
c00065c3:	89 c3                	mov    ebx,eax
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 3e                	je     c0006607 <f_mkdir+0xb0>
c00065c9:	83 f8 04             	cmp    eax,0x4
c00065cc:	75 3e                	jne    c000660c <f_mkdir+0xb5>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065dc:	e8 ce cb ff ff       	call   c00031af <create_chain>
c00065e1:	89 c6                	mov    esi,eax
c00065e3:	85 c0                	test   eax,eax
c00065e5:	74 0c                	je     c00065f3 <f_mkdir+0x9c>
c00065e7:	bb 02 00 00 00       	mov    ebx,0x2
c00065ec:	83 f8 01             	cmp    eax,0x1
c00065ef:	74 07                	je     c00065f8 <f_mkdir+0xa1>
c00065f1:	eb 2a                	jmp    c000661d <f_mkdir+0xc6>
c00065f3:	bb 07 00 00 00       	mov    ebx,0x7
c00065f8:	31 c9                	xor    ecx,ecx
c00065fa:	89 f2                	mov    edx,esi
c00065fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006600:	e8 a9 cd ff ff       	call   c00033ae <remove_chain>
c0006605:	eb 05                	jmp    c000660c <f_mkdir+0xb5>
c0006607:	bb 08 00 00 00       	mov    ebx,0x8
c000660c:	83 ec 0c             	sub    esp,0xc
c000660f:	57                   	push   edi
c0006610:	e8 c7 1f 00 00       	call   c00085dc <ff_memfree>
c0006615:	83 c4 10             	add    esp,0x10
c0006618:	e9 5d 01 00 00       	jmp    c000677a <f_mkdir+0x223>
c000661d:	bb 01 00 00 00       	mov    ebx,0x1
c0006622:	83 f8 ff             	cmp    eax,0xffffffff
c0006625:	74 d1                	je     c00065f8 <f_mkdir+0xa1>
c0006627:	89 f2                	mov    edx,esi
c0006629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662d:	e8 c4 ce ff ff       	call   c00034f6 <dir_clear>
c0006632:	89 c3                	mov    ebx,eax
c0006634:	85 c0                	test   eax,eax
c0006636:	75 c0                	jne    c00065f8 <f_mkdir+0xa1>
c0006638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000663f:	74 69                	je     c00066aa <f_mkdir+0x153>
c0006641:	b9 0b 00 00 00       	mov    ecx,0xb
c0006646:	83 c0 54             	add    eax,0x54
c0006649:	ba 20 00 00 00       	mov    edx,0x20
c000664e:	e8 9c b5 ff ff       	call   c0001bef <mem_set>
c0006653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006657:	ba 00 00 21 50       	mov    edx,0x50210000
c000665c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006660:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006664:	83 c0 6a             	add    eax,0x6a
c0006667:	e8 65 b5 ff ff       	call   c0001bd1 <st_dword>
c000666c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006670:	89 f1                	mov    ecx,esi
c0006672:	8d 50 54             	lea    edx,[eax+0x54]
c0006675:	e8 85 e6 ff ff       	call   c0004cff <st_clust.isra.1>
c000667a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667e:	b9 20 00 00 00       	mov    ecx,0x20
c0006683:	8d 50 54             	lea    edx,[eax+0x54]
c0006686:	83 c0 74             	add    eax,0x74
c0006689:	e8 4c b5 ff ff       	call   c0001bda <mem_cpy>
c000668e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006692:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006696:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000669a:	8d 50 74             	lea    edx,[eax+0x74]
c000669d:	e8 5d e6 ff ff       	call   c0004cff <st_clust.isra.1>
c00066a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066ae:	e8 2f db ff ff       	call   c00041e2 <dir_register>
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	85 c0                	test   eax,eax
c00066b7:	0f 85 3b ff ff ff    	jne    c00065f8 <f_mkdir+0xa1>
c00066bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c4:	75 74                	jne    c000673a <f_mkdir+0x1e3>
c00066c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066ce:	83 c0 0c             	add    eax,0xc
c00066d1:	e8 fb b4 ff ff       	call   c0001bd1 <st_dword>
c00066d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066da:	89 f2                	mov    edx,esi
c00066dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066df:	83 c0 34             	add    eax,0x34
c00066e2:	e8 ea b4 ff ff       	call   c0001bd1 <st_dword>
c00066e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066eb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066f2:	c1 e2 09             	shl    edx,0x9
c00066f5:	83 c0 38             	add    eax,0x38
c00066f8:	e8 d4 b4 ff ff       	call   c0001bd1 <st_dword>
c00066fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006701:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006705:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006708:	c1 e2 09             	shl    edx,0x9
c000670b:	83 c0 28             	add    eax,0x28
c000670e:	e8 be b4 ff ff       	call   c0001bd1 <st_dword>
c0006713:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000671e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006721:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006725:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006729:	e8 8b d3 ff ff       	call   c0003ab9 <store_xdir>
c000672e:	89 c3                	mov    ebx,eax
c0006730:	85 c0                	test   eax,eax
c0006732:	0f 85 d4 fe ff ff    	jne    c000660c <f_mkdir+0xb5>
c0006738:	eb 30                	jmp    c000676a <f_mkdir+0x213>
c000673a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	83 c0 16             	add    eax,0x16
c0006746:	e8 86 b4 ff ff       	call   c0001bd1 <st_dword>
c000674b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674f:	89 f1                	mov    ecx,esi
c0006751:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006755:	e8 a5 e5 ff ff       	call   c0004cff <st_clust.isra.1>
c000675a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000675e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000676a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676e:	e8 f1 dc ff ff       	call   c0004464 <sync_fs>
c0006773:	89 c3                	mov    ebx,eax
c0006775:	e9 92 fe ff ff       	jmp    c000660c <f_mkdir+0xb5>
c000677a:	83 ec 80             	sub    esp,0xffffff80
c000677d:	89 d8                	mov    eax,ebx
c000677f:	5b                   	pop    ebx
c0006780:	5e                   	pop    esi
c0006781:	5f                   	pop    edi
c0006782:	c3                   	ret    

c0006783 <f_rename>:
c0006783:	55                   	push   ebp
c0006784:	57                   	push   edi
c0006785:	56                   	push   esi
c0006786:	53                   	push   ebx
c0006787:	81 ec fc 00 00 00    	sub    esp,0xfc
c000678d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006794:	e8 a4 b9 ff ff       	call   c000213d <get_ldnumber>
c0006799:	b9 02 00 00 00       	mov    ecx,0x2
c000679e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067a2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a9:	e8 3d be ff ff       	call   c00025eb <mount_volume>
c00067ae:	85 c0                	test   eax,eax
c00067b0:	0f 85 b5 02 00 00    	jne    c0006a6b <f_rename+0x2e8>
c00067b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ba:	83 ec 0c             	sub    esp,0xc
c00067bd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067c1:	68 60 04 00 00       	push   0x460
c00067c6:	e8 f9 1d 00 00       	call   c00085c4 <ff_memalloc>
c00067cb:	83 c4 10             	add    esp,0x10
c00067ce:	89 c3                	mov    ebx,eax
c00067d0:	b8 11 00 00 00       	mov    eax,0x11
c00067d5:	85 db                	test   ebx,ebx
c00067d7:	0f 84 8e 02 00 00    	je     c0006a6b <f_rename+0x2e8>
c00067dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067e7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067ed:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067f4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f8:	e8 64 e5 ff ff       	call   c0004d61 <follow_path>
c00067fd:	85 c0                	test   eax,eax
c00067ff:	0f 85 52 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006805:	b8 06 00 00 00       	mov    eax,0x6
c000680a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006812:	0f 85 3f 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000681c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000681f:	0f 85 05 01 00 00    	jne    c000692a <f_rename+0x1a7>
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	b9 40 00 00 00       	mov    ecx,0x40
c000682d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006831:	e8 a4 b3 ff ff       	call   c0001bda <mem_cpy>
c0006836:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 8f b3 ff ff       	call   c0001bda <mem_cpy>
c000684b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006852:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006859:	e8 03 e5 ff ff       	call   c0004d61 <follow_path>
c000685e:	85 c0                	test   eax,eax
c0006860:	75 29                	jne    c000688b <f_rename+0x108>
c0006862:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006866:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686d:	74 0a                	je     c0006879 <f_rename+0xf6>
c000686f:	b8 08 00 00 00       	mov    eax,0x8
c0006874:	e9 de 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c0006879:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006880:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006887:	75 e6                	jne    c000686f <f_rename+0xec>
c0006889:	eb 09                	jmp    c0006894 <f_rename+0x111>
c000688b:	83 f8 04             	cmp    eax,0x4
c000688e:	0f 85 c3 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006894:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000689b:	e8 42 d9 ff ff       	call   c00041e2 <dir_register>
c00068a0:	85 c0                	test   eax,eax
c00068a2:	0f 85 af 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00068a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ac:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068af:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068b2:	89 c5                	mov    ebp,eax
c00068b4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068bb:	8d 46 24             	lea    eax,[esi+0x24]
c00068be:	e8 98 b2 ff ff       	call   c0001b5b <ld_word>
c00068c3:	b9 40 00 00 00       	mov    ecx,0x40
c00068c8:	89 c7                	mov    edi,eax
c00068ca:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068ce:	89 f0                	mov    eax,esi
c00068d0:	e8 05 b3 ff ff       	call   c0001bda <mem_cpy>
c00068d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d9:	89 e9                	mov    ecx,ebp
c00068db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068de:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068ec:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ef:	0f b7 d7             	movzx  edx,di
c00068f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068f5:	83 c0 24             	add    eax,0x24
c00068f8:	e8 d0 b2 ff ff       	call   c0001bcd <st_word>
c00068fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006901:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006904:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006907:	a8 10                	test   al,0x10
c0006909:	75 06                	jne    c0006911 <f_rename+0x18e>
c000690b:	83 c8 20             	or     eax,0x20
c000690e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006911:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006918:	e8 9c d1 ff ff       	call   c0003ab9 <store_xdir>
c000691d:	85 c0                	test   eax,eax
c000691f:	0f 84 1c 01 00 00    	je     c0006a41 <f_rename+0x2be>
c0006925:	e9 2d 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c000692a:	b9 20 00 00 00       	mov    ecx,0x20
c000692f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006936:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693a:	e8 9b b2 ff ff       	call   c0001bda <mem_cpy>
c000693f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006944:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006948:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694f:	e8 86 b2 ff ff       	call   c0001bda <mem_cpy>
c0006954:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000695b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006962:	e8 fa e3 ff ff       	call   c0004d61 <follow_path>
c0006967:	85 c0                	test   eax,eax
c0006969:	75 27                	jne    c0006992 <f_rename+0x20f>
c000696b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006976:	0f 85 f3 fe ff ff    	jne    c000686f <f_rename+0xec>
c000697c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006983:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698a:	0f 85 df fe ff ff    	jne    c000686f <f_rename+0xec>
c0006990:	eb 09                	jmp    c000699b <f_rename+0x218>
c0006992:	83 f8 04             	cmp    eax,0x4
c0006995:	0f 85 bc 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c000699b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a2:	e8 3b d8 ff ff       	call   c00041e2 <dir_register>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 a8 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00069af:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069b6:	b9 13 00 00 00       	mov    ecx,0x13
c00069bb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069be:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069c2:	e8 13 b2 ff ff       	call   c0001bda <mem_cpy>
c00069c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069cb:	a8 10                	test   al,0x10
c00069cd:	75 03                	jne    c00069d2 <f_rename+0x24f>
c00069cf:	83 c8 20             	or     eax,0x20
c00069d2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069dd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069e1:	74 5e                	je     c0006a41 <f_rename+0x2be>
c00069e3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069ea:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069ee:	74 51                	je     c0006a41 <f_rename+0x2be>
c00069f0:	89 f2                	mov    edx,esi
c00069f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069f6:	8a 07                	mov    al,BYTE PTR [edi]
c00069f8:	e8 d9 e2 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c00069fd:	89 c2                	mov    edx,eax
c00069ff:	89 f8                	mov    eax,edi
c0006a01:	e8 ee b3 ff ff       	call   c0001df4 <clst2sect>
c0006a06:	89 c6                	mov    esi,eax
c0006a08:	89 d1                	mov    ecx,edx
c0006a0a:	b8 02 00 00 00       	mov    eax,0x2
c0006a0f:	09 f2                	or     edx,esi
c0006a11:	74 44                	je     c0006a57 <f_rename+0x2d4>
c0006a13:	89 f2                	mov    edx,esi
c0006a15:	89 f8                	mov    eax,edi
c0006a17:	e8 1d b9 ff ff       	call   c0002339 <move_window>
c0006a1c:	85 c0                	test   eax,eax
c0006a1e:	75 37                	jne    c0006a57 <f_rename+0x2d4>
c0006a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a24:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a28:	75 17                	jne    c0006a41 <f_rename+0x2be>
c0006a2a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a2d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a34:	e8 c6 e2 ff ff       	call   c0004cff <st_clust.isra.1>
c0006a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a45:	e8 f4 d0 ff ff       	call   c0003b3e <dir_remove>
c0006a4a:	85 c0                	test   eax,eax
c0006a4c:	75 09                	jne    c0006a57 <f_rename+0x2d4>
c0006a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a52:	e8 0d da ff ff       	call   c0004464 <sync_fs>
c0006a57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5b:	83 ec 0c             	sub    esp,0xc
c0006a5e:	53                   	push   ebx
c0006a5f:	e8 78 1b 00 00       	call   c00085dc <ff_memfree>
c0006a64:	83 c4 10             	add    esp,0x10
c0006a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a71:	5b                   	pop    ebx
c0006a72:	5e                   	pop    esi
c0006a73:	5f                   	pop    edi
c0006a74:	5d                   	pop    ebp
c0006a75:	c3                   	ret    

c0006a76 <f_chmod>:
c0006a76:	57                   	push   edi
c0006a77:	b9 02 00 00 00       	mov    ecx,0x2
c0006a7c:	56                   	push   esi
c0006a7d:	53                   	push   ebx
c0006a7e:	83 ec 60             	sub    esp,0x60
c0006a81:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a85:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a89:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a8d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a91:	e8 55 bb ff ff       	call   c00025eb <mount_volume>
c0006a96:	85 c0                	test   eax,eax
c0006a98:	0f 85 af 00 00 00    	jne    c0006b4d <f_chmod+0xd7>
c0006a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa2:	83 ec 0c             	sub    esp,0xc
c0006aa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa9:	68 60 04 00 00       	push   0x460
c0006aae:	e8 11 1b 00 00       	call   c00085c4 <ff_memalloc>
c0006ab3:	83 c4 10             	add    esp,0x10
c0006ab6:	89 c6                	mov    esi,eax
c0006ab8:	b8 11 00 00 00       	mov    eax,0x11
c0006abd:	85 f6                	test   esi,esi
c0006abf:	0f 84 88 00 00 00    	je     c0006b4d <f_chmod+0xd7>
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006acf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ad2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ad5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006add:	e8 7f e2 ff ff       	call   c0004d61 <follow_path>
c0006ae2:	85 c0                	test   eax,eax
c0006ae4:	75 53                	jne    c0006b39 <f_chmod+0xc3>
c0006ae6:	b8 06 00 00 00       	mov    eax,0x6
c0006aeb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006af0:	75 47                	jne    c0006b39 <f_chmod+0xc3>
c0006af2:	89 f9                	mov    ecx,edi
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	83 e1 27             	and    ecx,0x27
c0006afb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006afe:	75 1d                	jne    c0006b1d <f_chmod+0xa7>
c0006b00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b03:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b06:	21 cb                	and    ebx,ecx
c0006b08:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b0b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b12:	e8 a2 cf ff ff       	call   c0003ab9 <store_xdir>
c0006b17:	85 c0                	test   eax,eax
c0006b19:	75 1e                	jne    c0006b39 <f_chmod+0xc3>
c0006b1b:	eb 13                	jmp    c0006b30 <f_chmod+0xba>
c0006b1d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b21:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b24:	21 cb                	and    ebx,ecx
c0006b26:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b29:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b2c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b34:	e8 2b d9 ff ff       	call   c0004464 <sync_fs>
c0006b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b3d:	83 ec 0c             	sub    esp,0xc
c0006b40:	56                   	push   esi
c0006b41:	e8 96 1a 00 00       	call   c00085dc <ff_memfree>
c0006b46:	83 c4 10             	add    esp,0x10
c0006b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b4d:	83 c4 60             	add    esp,0x60
c0006b50:	5b                   	pop    ebx
c0006b51:	5e                   	pop    esi
c0006b52:	5f                   	pop    edi
c0006b53:	c3                   	ret    

c0006b54 <f_utime>:
c0006b54:	56                   	push   esi
c0006b55:	b9 02 00 00 00       	mov    ecx,0x2
c0006b5a:	53                   	push   ebx
c0006b5b:	83 ec 64             	sub    esp,0x64
c0006b5e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b66:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b6a:	e8 7c ba ff ff       	call   c00025eb <mount_volume>
c0006b6f:	85 c0                	test   eax,eax
c0006b71:	0f 85 b5 00 00 00    	jne    c0006c2c <f_utime+0xd8>
c0006b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7b:	83 ec 0c             	sub    esp,0xc
c0006b7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b82:	68 60 04 00 00       	push   0x460
c0006b87:	e8 38 1a 00 00       	call   c00085c4 <ff_memalloc>
c0006b8c:	83 c4 10             	add    esp,0x10
c0006b8f:	89 c3                	mov    ebx,eax
c0006b91:	b8 11 00 00 00       	mov    eax,0x11
c0006b96:	85 db                	test   ebx,ebx
c0006b98:	0f 84 8e 00 00 00    	je     c0006c2c <f_utime+0xd8>
c0006b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bab:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bae:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bb6:	e8 a6 e1 ff ff       	call   c0004d61 <follow_path>
c0006bbb:	85 c0                	test   eax,eax
c0006bbd:	75 59                	jne    c0006c18 <f_utime+0xc4>
c0006bbf:	b8 06 00 00 00       	mov    eax,0x6
c0006bc4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc9:	75 4d                	jne    c0006c18 <f_utime+0xc4>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bd3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bd7:	c1 e2 10             	shl    edx,0x10
c0006bda:	09 ca                	or     edx,ecx
c0006bdc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bdf:	75 1a                	jne    c0006bfb <f_utime+0xa7>
c0006be1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006be4:	83 c0 0c             	add    eax,0xc
c0006be7:	e8 e5 af ff ff       	call   c0001bd1 <st_dword>
c0006bec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf0:	e8 c4 ce ff ff       	call   c0003ab9 <store_xdir>
c0006bf5:	85 c0                	test   eax,eax
c0006bf7:	75 1f                	jne    c0006c18 <f_utime+0xc4>
c0006bf9:	eb 14                	jmp    c0006c0f <f_utime+0xbb>
c0006bfb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bff:	83 c0 16             	add    eax,0x16
c0006c02:	e8 ca af ff ff       	call   c0001bd1 <st_dword>
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	e8 4c d8 ff ff       	call   c0004464 <sync_fs>
c0006c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c1c:	83 ec 0c             	sub    esp,0xc
c0006c1f:	53                   	push   ebx
c0006c20:	e8 b7 19 00 00       	call   c00085dc <ff_memfree>
c0006c25:	83 c4 10             	add    esp,0x10
c0006c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c2c:	83 c4 64             	add    esp,0x64
c0006c2f:	5b                   	pop    ebx
c0006c30:	5e                   	pop    esi
c0006c31:	c3                   	ret    

c0006c32 <f_getlabel>:
c0006c32:	55                   	push   ebp
c0006c33:	31 c9                	xor    ecx,ecx
c0006c35:	57                   	push   edi
c0006c36:	56                   	push   esi
c0006c37:	53                   	push   ebx
c0006c38:	83 ec 6c             	sub    esp,0x6c
c0006c3b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c46:	e8 a0 b9 ff ff       	call   c00025eb <mount_volume>
c0006c4b:	89 c6                	mov    esi,eax
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	0f 85 c1 01 00 00    	jne    c0006e16 <f_getlabel+0x1e4>
c0006c55:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c5d:	0f 84 5f 01 00 00    	je     c0006dc2 <f_getlabel+0x190>
c0006c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c67:	31 d2                	xor    edx,edx
c0006c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c6d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c79:	e8 39 c4 ff ff       	call   c00030b7 <dir_sdi>
c0006c7e:	85 c0                	test   eax,eax
c0006c80:	0f 85 2d 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c86:	ba 01 00 00 00       	mov    edx,0x1
c0006c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c8f:	e8 33 cc ff ff       	call   c00038c7 <dir_read>
c0006c94:	85 c0                	test   eax,eax
c0006c96:	0f 85 17 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ca3:	74 09                	je     c0006cae <f_getlabel+0x7c>
c0006ca5:	31 db                	xor    ebx,ebx
c0006ca7:	31 c9                	xor    ecx,ecx
c0006ca9:	e9 c8 00 00 00       	jmp    c0006d76 <f_getlabel+0x144>
c0006cae:	31 ed                	xor    ebp,ebp
c0006cb0:	31 db                	xor    ebx,ebx
c0006cb2:	31 ff                	xor    edi,edi
c0006cb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cbc:	39 fa                	cmp    edx,edi
c0006cbe:	76 4b                	jbe    c0006d0b <f_getlabel+0xd9>
c0006cc0:	47                   	inc    edi
c0006cc1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cc4:	01 d0                	add    eax,edx
c0006cc6:	e8 90 ae ff ff       	call   c0001b5b <ld_word>
c0006ccb:	66 85 ed             	test   bp,bp
c0006cce:	75 0d                	jne    c0006cdd <f_getlabel+0xab>
c0006cd0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cd6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cdb:	76 28                	jbe    c0006d05 <f_getlabel+0xd3>
c0006cdd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ce4:	89 e9                	mov    ecx,ebp
c0006ce6:	01 da                	add    edx,ebx
c0006ce8:	c1 e1 10             	shl    ecx,0x10
c0006ceb:	0f b7 c0             	movzx  eax,ax
c0006cee:	09 c8                	or     eax,ecx
c0006cf0:	b9 04 00 00 00       	mov    ecx,0x4
c0006cf5:	e8 01 b0 ff ff       	call   c0001cfb <put_utf>
c0006cfa:	84 c0                	test   al,al
c0006cfc:	74 0b                	je     c0006d09 <f_getlabel+0xd7>
c0006cfe:	0f b6 c0             	movzx  eax,al
c0006d01:	01 c3                	add    ebx,eax
c0006d03:	31 c0                	xor    eax,eax
c0006d05:	89 c5                	mov    ebp,eax
c0006d07:	eb ab                	jmp    c0006cb4 <f_getlabel+0x82>
c0006d09:	31 db                	xor    ebx,ebx
c0006d0b:	66 85 ed             	test   bp,bp
c0006d0e:	74 02                	je     c0006d12 <f_getlabel+0xe0>
c0006d10:	31 db                	xor    ebx,ebx
c0006d12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d19:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d1d:	e9 a0 00 00 00       	jmp    c0006dc2 <f_getlabel+0x190>
c0006d22:	83 ff 0b             	cmp    edi,0xb
c0006d25:	74 11                	je     c0006d38 <f_getlabel+0x106>
c0006d27:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d30:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d33:	c1 e0 08             	shl    eax,0x8
c0006d36:	09 c2                	or     edx,eax
c0006d38:	0f b7 d2             	movzx  edx,dx
c0006d3b:	50                   	push   eax
c0006d3c:	50                   	push   eax
c0006d3d:	68 b5 01 00 00       	push   0x1b5
c0006d42:	52                   	push   edx
c0006d43:	e8 44 19 00 00       	call   c000868c <ff_oem2uni>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	66 85 c0             	test   ax,ax
c0006d4e:	74 46                	je     c0006d96 <f_getlabel+0x164>
c0006d50:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d57:	0f b7 c0             	movzx  eax,ax
c0006d5a:	01 da                	add    edx,ebx
c0006d5c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d61:	e8 95 af ff ff       	call   c0001cfb <put_utf>
c0006d66:	84 c0                	test   al,al
c0006d68:	74 2c                	je     c0006d96 <f_getlabel+0x164>
c0006d6a:	0f b6 c0             	movzx  eax,al
c0006d6d:	01 c3                	add    ebx,eax
c0006d6f:	83 ff 0b             	cmp    edi,0xb
c0006d72:	74 24                	je     c0006d98 <f_getlabel+0x166>
c0006d74:	89 f9                	mov    ecx,edi
c0006d76:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d7a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d7d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d82:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d8b:	e8 9f ae ff ff       	call   c0001c2f <dbc_1st>
c0006d90:	85 c0                	test   eax,eax
c0006d92:	74 a4                	je     c0006d38 <f_getlabel+0x106>
c0006d94:	eb 8c                	jmp    c0006d22 <f_getlabel+0xf0>
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d9f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006da2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da9:	74 17                	je     c0006dc2 <f_getlabel+0x190>
c0006dab:	4b                   	dec    ebx
c0006dac:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006daf:	74 ee                	je     c0006d9f <f_getlabel+0x16d>
c0006db1:	eb 0f                	jmp    c0006dc2 <f_getlabel+0x190>
c0006db3:	83 f8 04             	cmp    eax,0x4
c0006db6:	75 5c                	jne    c0006e14 <f_getlabel+0x1e2>
c0006db8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dbf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dc2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dca:	74 4a                	je     c0006e16 <f_getlabel+0x1e4>
c0006dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dd3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dd6:	e8 5e b5 ff ff       	call   c0002339 <move_window>
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	85 c0                	test   eax,eax
c0006ddf:	75 35                	jne    c0006e16 <f_getlabel+0x1e4>
c0006de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006de5:	b8 43 00 00 00       	mov    eax,0x43
c0006dea:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dec:	80 f9 03             	cmp    cl,0x3
c0006def:	74 0f                	je     c0006e00 <f_getlabel+0x1ce>
c0006df1:	31 c0                	xor    eax,eax
c0006df3:	80 f9 04             	cmp    cl,0x4
c0006df6:	0f 94 c0             	sete   al
c0006df9:	48                   	dec    eax
c0006dfa:	83 e0 c3             	and    eax,0xffffffc3
c0006dfd:	83 c0 64             	add    eax,0x64
c0006e00:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e04:	e8 5f ad ff ff       	call   c0001b68 <ld_dword>
c0006e09:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e10:	89 07                	mov    DWORD PTR [edi],eax
c0006e12:	eb 02                	jmp    c0006e16 <f_getlabel+0x1e4>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	83 c4 6c             	add    esp,0x6c
c0006e19:	89 f0                	mov    eax,esi
c0006e1b:	5b                   	pop    ebx
c0006e1c:	5e                   	pop    esi
c0006e1d:	5f                   	pop    edi
c0006e1e:	5d                   	pop    ebp
c0006e1f:	c3                   	ret    

c0006e20 <f_setlabel>:
c0006e20:	56                   	push   esi
c0006e21:	b9 02 00 00 00       	mov    ecx,0x2
c0006e26:	53                   	push   ebx
c0006e27:	83 ec 74             	sub    esp,0x74
c0006e2a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e35:	e8 b1 b7 ff ff       	call   c00025eb <mount_volume>
c0006e3a:	89 c6                	mov    esi,eax
c0006e3c:	85 c0                	test   eax,eax
c0006e3e:	0f 85 41 02 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e4b:	0f 85 8e 00 00 00    	jne    c0006edf <f_setlabel+0xbf>
c0006e51:	b9 16 00 00 00       	mov    ecx,0x16
c0006e56:	31 d2                	xor    edx,edx
c0006e58:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e5c:	31 db                	xor    ebx,ebx
c0006e5e:	e8 8c ad ff ff       	call   c0001bef <mem_set>
c0006e63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e6a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e6d:	0f 86 0a 01 00 00    	jbe    c0006f7d <f_setlabel+0x15d>
c0006e73:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e7a:	e8 b6 ad ff ff       	call   c0001c35 <tchar2uni>
c0006e7f:	89 c6                	mov    esi,eax
c0006e81:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e86:	76 2a                	jbe    c0006eb2 <f_setlabel+0x92>
c0006e88:	83 f8 ff             	cmp    eax,0xffffffff
c0006e8b:	74 05                	je     c0006e92 <f_setlabel+0x72>
c0006e8d:	83 fb 09             	cmp    ebx,0x9
c0006e90:	76 0a                	jbe    c0006e9c <f_setlabel+0x7c>
c0006e92:	be 06 00 00 00       	mov    esi,0x6
c0006e97:	e9 e9 01 00 00       	jmp    c0007085 <f_setlabel+0x265>
c0006e9c:	89 c2                	mov    edx,eax
c0006e9e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ea2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ea5:	c1 ea 10             	shr    edx,0x10
c0006ea8:	01 c8                	add    eax,ecx
c0006eaa:	43                   	inc    ebx
c0006eab:	e8 1d ad ff ff       	call   c0001bcd <st_word>
c0006eb0:	eb 04                	jmp    c0006eb6 <f_setlabel+0x96>
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 dc                	je     c0006e92 <f_setlabel+0x72>
c0006eb6:	89 f2                	mov    edx,esi
c0006eb8:	b8 57 34 02 c0       	mov    eax,0xc0023457
c0006ebd:	e8 5b ad ff ff       	call   c0001c1d <chk_chr>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	75 cc                	jne    c0006e92 <f_setlabel+0x72>
c0006ec6:	83 fb 0a             	cmp    ebx,0xa
c0006ec9:	77 c7                	ja     c0006e92 <f_setlabel+0x72>
c0006ecb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ece:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ed2:	0f b7 d6             	movzx  edx,si
c0006ed5:	01 c8                	add    eax,ecx
c0006ed7:	43                   	inc    ebx
c0006ed8:	e8 f0 ac ff ff       	call   c0001bcd <st_word>
c0006edd:	eb 84                	jmp    c0006e63 <f_setlabel+0x43>
c0006edf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee4:	ba 20 00 00 00       	mov    edx,0x20
c0006ee9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006eed:	31 db                	xor    ebx,ebx
c0006eef:	e8 fb ac ff ff       	call   c0001bef <mem_set>
c0006ef4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006efb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006efe:	76 60                	jbe    c0006f60 <f_setlabel+0x140>
c0006f00:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f07:	e8 29 ad ff ff       	call   c0001c35 <tchar2uni>
c0006f0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f11:	0f 87 7b ff ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0006f17:	83 ec 0c             	sub    esp,0xc
c0006f1a:	50                   	push   eax
c0006f1b:	e8 e0 17 00 00       	call   c0008700 <ff_wtoupper>
c0006f20:	5a                   	pop    edx
c0006f21:	59                   	pop    ecx
c0006f22:	68 b5 01 00 00       	push   0x1b5
c0006f27:	50                   	push   eax
c0006f28:	e8 c7 16 00 00       	call   c00085f4 <ff_uni2oem>
c0006f2d:	83 c4 10             	add    esp,0x10
c0006f30:	89 c6                	mov    esi,eax
c0006f32:	66 85 c0             	test   ax,ax
c0006f35:	0f 84 57 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f3b:	0f b7 d0             	movzx  edx,ax
c0006f3e:	b8 50 34 02 c0       	mov    eax,0xc0023450
c0006f43:	e8 d5 ac ff ff       	call   c0001c1d <chk_chr>
c0006f48:	85 c0                	test   eax,eax
c0006f4a:	0f 85 42 ff ff ff    	jne    c0006e92 <f_setlabel+0x72>
c0006f50:	66 81 fe ff 00       	cmp    si,0xff
c0006f55:	0f 87 14 01 00 00    	ja     c000706f <f_setlabel+0x24f>
c0006f5b:	e9 fa 00 00 00       	jmp    c000705a <f_setlabel+0x23a>
c0006f60:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f65:	0f 84 27 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f6b:	85 db                	test   ebx,ebx
c0006f6d:	74 0e                	je     c0006f7d <f_setlabel+0x15d>
c0006f6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f72:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f77:	75 04                	jne    c0006f7d <f_setlabel+0x15d>
c0006f79:	89 c3                	mov    ebx,eax
c0006f7b:	eb ee                	jmp    c0006f6b <f_setlabel+0x14b>
c0006f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f81:	31 d2                	xor    edx,edx
c0006f83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f93:	e8 1f c1 ff ff       	call   c00030b7 <dir_sdi>
c0006f98:	89 c6                	mov    esi,eax
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	0f 85 e3 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006fa2:	ba 01 00 00 00       	mov    edx,0x1
c0006fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fab:	e8 17 c9 ff ff       	call   c00038c7 <dir_read>
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	75 21                	jne    c0006fd5 <f_setlabel+0x1b5>
c0006fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fbc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fbf:	74 5d                	je     c000701e <f_setlabel+0x1fe>
c0006fc1:	85 db                	test   ebx,ebx
c0006fc3:	74 0b                	je     c0006fd0 <f_setlabel+0x1b0>
c0006fc5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fca:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fce:	eb 70                	jmp    c0007040 <f_setlabel+0x220>
c0006fd0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fd3:	eb 70                	jmp    c0007045 <f_setlabel+0x225>
c0006fd5:	83 f8 04             	cmp    eax,0x4
c0006fd8:	75 7c                	jne    c0007056 <f_setlabel+0x236>
c0006fda:	85 db                	test   ebx,ebx
c0006fdc:	0f 84 a3 00 00 00    	je     c0007085 <f_setlabel+0x265>
c0006fe2:	ba 01 00 00 00       	mov    edx,0x1
c0006fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006feb:	e8 51 ca ff ff       	call   c0003a41 <dir_alloc>
c0006ff0:	89 c6                	mov    esi,eax
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 85 8b 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006ffa:	31 d2                	xor    edx,edx
c0006ffc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007000:	b9 20 00 00 00       	mov    ecx,0x20
c0007005:	e8 e5 ab ff ff       	call   c0001bef <mem_set>
c000700a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000700e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007011:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007015:	75 18                	jne    c000702f <f_setlabel+0x20f>
c0007017:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000701a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000701e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007021:	b9 16 00 00 00       	mov    ecx,0x16
c0007026:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702a:	83 c0 02             	add    eax,0x2
c000702d:	eb 9b                	jmp    c0006fca <f_setlabel+0x1aa>
c000702f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007033:	b9 0b 00 00 00       	mov    ecx,0xb
c0007038:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000703c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007040:	e8 95 ab ff ff       	call   c0001bda <mem_cpy>
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000704d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007051:	e8 0e d4 ff ff       	call   c0004464 <sync_fs>
c0007056:	89 c6                	mov    esi,eax
c0007058:	eb 2b                	jmp    c0007085 <f_setlabel+0x265>
c000705a:	83 fb 0a             	cmp    ebx,0xa
c000705d:	0f 87 2f fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007063:	89 f0                	mov    eax,esi
c0007065:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007069:	43                   	inc    ebx
c000706a:	e9 85 fe ff ff       	jmp    c0006ef4 <f_setlabel+0xd4>
c000706f:	83 fb 09             	cmp    ebx,0x9
c0007072:	0f 87 1a fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007078:	89 f0                	mov    eax,esi
c000707a:	66 c1 e8 08          	shr    ax,0x8
c000707e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007082:	43                   	inc    ebx
c0007083:	eb de                	jmp    c0007063 <f_setlabel+0x243>
c0007085:	89 f0                	mov    eax,esi
c0007087:	83 c4 74             	add    esp,0x74
c000708a:	5b                   	pop    ebx
c000708b:	5e                   	pop    esi
c000708c:	c3                   	ret    

c000708d <f_expand>:
c000708d:	55                   	push   ebp
c000708e:	57                   	push   edi
c000708f:	56                   	push   esi
c0007090:	53                   	push   ebx
c0007091:	83 ec 3c             	sub    esp,0x3c
c0007094:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007098:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000709c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ac:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070b4:	89 d8                	mov    eax,ebx
c00070b6:	e8 a3 b1 ff ff       	call   c000225e <validate>
c00070bb:	89 c5                	mov    ebp,eax
c00070bd:	85 c0                	test   eax,eax
c00070bf:	0f 85 f4 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c9:	85 ed                	test   ebp,ebp
c00070cb:	0f 85 e8 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d9:	75 0a                	jne    c00070e5 <f_expand+0x58>
c00070db:	bd 07 00 00 00       	mov    ebp,0x7
c00070e0:	e9 d4 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00070e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070eb:	75 ee                	jne    c00070db <f_expand+0x4e>
c00070ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070f1:	74 e8                	je     c00070db <f_expand+0x4e>
c00070f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070f7:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f9:	80 f9 04             	cmp    cl,0x4
c00070fc:	74 07                	je     c0007105 <f_expand+0x78>
c00070fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007103:	77 d6                	ja     c00070db <f_expand+0x4e>
c0007105:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007109:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000710d:	c1 e0 09             	shl    eax,0x9
c0007110:	8d 50 ff             	lea    edx,[eax-0x1]
c0007113:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007117:	0f 95 c2             	setne  dl
c000711a:	0f b6 d2             	movzx  edx,dl
c000711d:	89 d7                	mov    edi,edx
c000711f:	31 d2                	xor    edx,edx
c0007121:	52                   	push   edx
c0007122:	50                   	push   eax
c0007123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000712b:	e8 e4 b2 01 00       	call   c0022414 <__udivdi3>
c0007130:	83 c4 10             	add    esp,0x10
c0007133:	01 f8                	add    eax,edi
c0007135:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007139:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000713c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007140:	83 ff 01             	cmp    edi,0x1
c0007143:	76 05                	jbe    c000714a <f_expand+0xbd>
c0007145:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007148:	77 05                	ja     c000714f <f_expand+0xc2>
c000714a:	bf 02 00 00 00       	mov    edi,0x2
c000714f:	80 f9 04             	cmp    cl,0x4
c0007152:	75 19                	jne    c000716d <f_expand+0xe0>
c0007154:	89 f0                	mov    eax,esi
c0007156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000715a:	89 fa                	mov    edx,edi
c000715c:	e8 f3 b9 ff ff       	call   c0002b54 <find_bitmap>
c0007161:	89 c6                	mov    esi,eax
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 70 ff ff ff    	je     c00070db <f_expand+0x4e>
c000716b:	eb 7f                	jmp    c00071ec <f_expand+0x15f>
c000716d:	89 fe                	mov    esi,edi
c000716f:	89 f9                	mov    ecx,edi
c0007171:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007179:	89 ca                	mov    edx,ecx
c000717b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000717f:	89 d8                	mov    eax,ebx
c0007181:	e8 3b bd ff ff       	call   c0002ec1 <get_fat>
c0007186:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000718a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718e:	41                   	inc    ecx
c000718f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007193:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007196:	77 05                	ja     c000719d <f_expand+0x110>
c0007198:	b9 02 00 00 00       	mov    ecx,0x2
c000719d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071a2:	74 3e                	je     c00071e2 <f_expand+0x155>
c00071a4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a9:	75 0a                	jne    c00071b5 <f_expand+0x128>
c00071ab:	bd 01 00 00 00       	mov    ebp,0x1
c00071b0:	e9 04 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071b5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ba:	75 13                	jne    c00071cf <f_expand+0x142>
c00071bc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071c4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c8:	75 0f                	jne    c00071d9 <f_expand+0x14c>
c00071ca:	e9 ce 00 00 00       	jmp    c000729d <f_expand+0x210>
c00071cf:	89 ce                	mov    esi,ecx
c00071d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d9:	39 f9                	cmp    ecx,edi
c00071db:	75 9c                	jne    c0007179 <f_expand+0xec>
c00071dd:	e9 f9 fe ff ff       	jmp    c00070db <f_expand+0x4e>
c00071e2:	bd 02 00 00 00       	mov    ebp,0x2
c00071e7:	e9 cd 00 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071ec:	83 f8 ff             	cmp    eax,0xffffffff
c00071ef:	74 ba                	je     c00071ab <f_expand+0x11e>
c00071f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00071f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007201:	74 51                	je     c0007254 <f_expand+0x1c7>
c0007203:	83 ec 0c             	sub    esp,0xc
c0007206:	89 f2                	mov    edx,esi
c0007208:	6a 01                	push   0x1
c000720a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000720e:	e8 f4 b9 ff ff       	call   c0002c07 <change_bitmap>
c0007213:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007217:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000721b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	85 c0                	test   eax,eax
c0007224:	74 2e                	je     c0007254 <f_expand+0x1c7>
c0007226:	eb 71                	jmp    c0007299 <f_expand+0x20c>
c0007228:	83 c9 ff             	or     ecx,0xffffffff
c000722b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007230:	74 03                	je     c0007235 <f_expand+0x1a8>
c0007232:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007235:	89 fa                	mov    edx,edi
c0007237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000723b:	e8 7c ba ff ff       	call   c0002cbc <put_fat>
c0007240:	85 c0                	test   eax,eax
c0007242:	75 55                	jne    c0007299 <f_expand+0x20c>
c0007244:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007248:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000724c:	47                   	inc    edi
c000724d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007252:	75 d4                	jne    c0007228 <f_expand+0x19b>
c0007254:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000725c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007261:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007264:	74 53                	je     c00072b9 <f_expand+0x22c>
c0007266:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007269:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000726d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007271:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007275:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007279:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000727c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000727f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007282:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007285:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007288:	39 ca                	cmp    edx,ecx
c000728a:	77 2d                	ja     c00072b9 <f_expand+0x22c>
c000728c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007290:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007297:	eb 20                	jmp    c00072b9 <f_expand+0x22c>
c0007299:	89 c5                	mov    ebp,eax
c000729b:	eb 1c                	jmp    c00072b9 <f_expand+0x22c>
c000729d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072a2:	74 0c                	je     c00072b0 <f_expand+0x223>
c00072a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a8:	89 f7                	mov    edi,esi
c00072aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072ae:	eb 9d                	jmp    c000724d <f_expand+0x1c0>
c00072b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072b7:	eb 9b                	jmp    c0007254 <f_expand+0x1c7>
c00072b9:	83 c4 3c             	add    esp,0x3c
c00072bc:	89 e8                	mov    eax,ebp
c00072be:	5b                   	pop    ebx
c00072bf:	5e                   	pop    esi
c00072c0:	5f                   	pop    edi
c00072c1:	5d                   	pop    ebp
c00072c2:	c3                   	ret    

c00072c3 <f_forward>:
c00072c3:	55                   	push   ebp
c00072c4:	57                   	push   edi
c00072c5:	56                   	push   esi
c00072c6:	53                   	push   ebx
c00072c7:	83 ec 2c             	sub    esp,0x2c
c00072ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072dc:	89 d8                	mov    eax,ebx
c00072de:	e8 7b af ff ff       	call   c000225e <validate>
c00072e3:	89 c5                	mov    ebp,eax
c00072e5:	85 c0                	test   eax,eax
c00072e7:	0f 85 aa 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072ed:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072f1:	85 ed                	test   ebp,ebp
c00072f3:	0f 85 9e 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072f9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072fd:	0f 84 8f 01 00 00    	je     c0007492 <f_forward+0x1cf>
c0007303:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007306:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007309:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000730c:	bf 00 00 00 00       	mov    edi,0x0
c0007311:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007314:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007318:	89 d1                	mov    ecx,edx
c000731a:	19 f9                	sbb    ecx,edi
c000731c:	0f 83 cf 00 00 00    	jae    c00073f1 <f_forward+0x12e>
c0007322:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007326:	e9 c6 00 00 00       	jmp    c00073f1 <f_forward+0x12e>
c000732b:	50                   	push   eax
c000732c:	50                   	push   eax
c000732d:	6a 00                	push   0x0
c000732f:	6a 00                	push   0x0
c0007331:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007335:	83 c4 10             	add    esp,0x10
c0007338:	85 c0                	test   eax,eax
c000733a:	0f 84 57 01 00 00    	je     c0007497 <f_forward+0x1d4>
c0007340:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007347:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000734a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000734e:	89 d7                	mov    edi,edx
c0007350:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007353:	89 c6                	mov    esi,eax
c0007355:	0f ac fe 09          	shrd   esi,edi,0x9
c0007359:	21 ce                	and    esi,ecx
c000735b:	89 c1                	mov    ecx,eax
c000735d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007363:	0f 84 98 00 00 00    	je     c0007401 <f_forward+0x13e>
c0007369:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000736d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007370:	89 c8                	mov    eax,ecx
c0007372:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007376:	e8 79 aa ff ff       	call   c0001df4 <clst2sect>
c000737b:	89 d7                	mov    edi,edx
c000737d:	09 c7                	or     edi,eax
c000737f:	0f 84 9e 00 00 00    	je     c0007423 <f_forward+0x160>
c0007385:	31 ff                	xor    edi,edi
c0007387:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000738a:	01 c6                	add    esi,eax
c000738c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007390:	11 d7                	adc    edi,edx
c0007392:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007395:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739c:	39 fa                	cmp    edx,edi
c000739e:	0f 85 a2 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073a4:	39 f0                	cmp    eax,esi
c00073a6:	0f 85 9a 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073af:	ba 00 02 00 00       	mov    edx,0x200
c00073b4:	25 ff 01 00 00       	and    eax,0x1ff
c00073b9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073bd:	29 c2                	sub    edx,eax
c00073bf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073c2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073c5:	39 d1                	cmp    ecx,edx
c00073c7:	76 02                	jbe    c00073cb <f_forward+0x108>
c00073c9:	89 d1                	mov    ecx,edx
c00073cb:	8d 73 50             	lea    esi,[ebx+0x50]
c00073ce:	52                   	push   edx
c00073cf:	01 c6                	add    esi,eax
c00073d1:	52                   	push   edx
c00073d2:	51                   	push   ecx
c00073d3:	56                   	push   esi
c00073d4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d8:	83 c4 10             	add    esp,0x10
c00073db:	85 c0                	test   eax,eax
c00073dd:	74 44                	je     c0007423 <f_forward+0x160>
c00073df:	31 ff                	xor    edi,edi
c00073e1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073e4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073e7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073eb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ef:	01 07                	add    DWORD PTR [edi],eax
c00073f1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073f6:	0f 85 2f ff ff ff    	jne    c000732b <f_forward+0x68>
c00073fc:	e9 96 00 00 00       	jmp    c0007497 <f_forward+0x1d4>
c0007401:	85 f6                	test   esi,esi
c0007403:	0f 85 60 ff ff ff    	jne    c0007369 <f_forward+0xa6>
c0007409:	89 d7                	mov    edi,edx
c000740b:	09 c7                	or     edi,eax
c000740d:	75 05                	jne    c0007414 <f_forward+0x151>
c000740f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007412:	eb 0a                	jmp    c000741e <f_forward+0x15b>
c0007414:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007417:	89 d8                	mov    eax,ebx
c0007419:	e8 a3 ba ff ff       	call   c0002ec1 <get_fat>
c000741e:	83 f8 01             	cmp    eax,0x1
c0007421:	77 0b                	ja     c000742e <f_forward+0x16b>
c0007423:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007427:	bd 02 00 00 00       	mov    ebp,0x2
c000742c:	eb 69                	jmp    c0007497 <f_forward+0x1d4>
c000742e:	83 f8 ff             	cmp    eax,0xffffffff
c0007431:	75 0b                	jne    c000743e <f_forward+0x17b>
c0007433:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007437:	bd 01 00 00 00       	mov    ebp,0x1
c000743c:	eb 59                	jmp    c0007497 <f_forward+0x1d4>
c000743e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007441:	e9 23 ff ff ff       	jmp    c0007369 <f_forward+0xa6>
c0007446:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000744a:	79 20                	jns    c000746c <f_forward+0x1a9>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	6a 01                	push   0x1
c0007451:	52                   	push   edx
c0007452:	50                   	push   eax
c0007453:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007457:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000745b:	50                   	push   eax
c000745c:	e8 c5 a6 ff ff       	call   c0001b26 <disk_write>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	85 c0                	test   eax,eax
c0007466:	75 cb                	jne    c0007433 <f_forward+0x170>
c0007468:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000746c:	83 ec 0c             	sub    esp,0xc
c000746f:	6a 01                	push   0x1
c0007471:	57                   	push   edi
c0007472:	56                   	push   esi
c0007473:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000747f:	50                   	push   eax
c0007480:	e8 8b a6 ff ff       	call   c0001b10 <disk_read>
c0007485:	83 c4 20             	add    esp,0x20
c0007488:	85 c0                	test   eax,eax
c000748a:	0f 84 1c ff ff ff    	je     c00073ac <f_forward+0xe9>
c0007490:	eb a1                	jmp    c0007433 <f_forward+0x170>
c0007492:	bd 07 00 00 00       	mov    ebp,0x7
c0007497:	83 c4 2c             	add    esp,0x2c
c000749a:	89 e8                	mov    eax,ebp
c000749c:	5b                   	pop    ebx
c000749d:	5e                   	pop    esi
c000749e:	5f                   	pop    edi
c000749f:	5d                   	pop    ebp
c00074a0:	c3                   	ret    

c00074a1 <f_mkfs>:
c00074a1:	55                   	push   ebp
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074aa:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074b0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074b7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074be:	e8 7a ac ff ff       	call   c000213d <get_ldnumber>
c00074c3:	85 c0                	test   eax,eax
c00074c5:	0f 88 ec 10 00 00    	js     c00085b7 <f_mkfs+0x1116>
c00074cb:	8b 14 85 e0 7a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8520]
c00074d2:	85 d2                	test   edx,edx
c00074d4:	74 03                	je     c00074d9 <f_mkfs+0x38>
c00074d6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d9:	85 f6                	test   esi,esi
c00074db:	75 05                	jne    c00074e2 <f_mkfs+0x41>
c00074dd:	be 40 34 02 c0       	mov    esi,0xc0023440
c00074e2:	83 ec 0c             	sub    esp,0xc
c00074e5:	0f b6 c0             	movzx  eax,al
c00074e8:	bb 03 00 00 00       	mov    ebx,0x3
c00074ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074f5:	e8 13 a6 ff ff       	call   c0001b0d <disk_initialize>
c00074fa:	83 c4 10             	add    esp,0x10
c00074fd:	a8 01                	test   al,0x1
c00074ff:	0f 85 b2 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007505:	bb 0a 00 00 00       	mov    ebx,0xa
c000750a:	a8 04                	test   al,0x4
c000750c:	0f 85 a5 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007512:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007515:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007519:	85 c0                	test   eax,eax
c000751b:	75 20                	jne    c000753d <f_mkfs+0x9c>
c000751d:	51                   	push   ecx
c000751e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007522:	50                   	push   eax
c0007523:	6a 03                	push   0x3
c0007525:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007529:	e8 0e a6 ff ff       	call   c0001b3c <disk_ioctl>
c000752e:	83 c4 10             	add    esp,0x10
c0007531:	85 c0                	test   eax,eax
c0007533:	74 08                	je     c000753d <f_mkfs+0x9c>
c0007535:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000753d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007541:	8d 42 ff             	lea    eax,[edx-0x1]
c0007544:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007549:	77 04                	ja     c000754f <f_mkfs+0xae>
c000754b:	85 c2                	test   edx,eax
c000754d:	74 08                	je     c0007557 <f_mkfs+0xb6>
c000754f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007557:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000755a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000755e:	48                   	dec    eax
c000755f:	3c 01                	cmp    al,0x1
c0007561:	76 05                	jbe    c0007568 <f_mkfs+0xc7>
c0007563:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000756b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000756f:	48                   	dec    eax
c0007570:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007575:	77 07                	ja     c000757e <f_mkfs+0xdd>
c0007577:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000757c:	74 08                	je     c0007586 <f_mkfs+0xe5>
c000757e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007586:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007589:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000758f:	77 07                	ja     c0007598 <f_mkfs+0xf7>
c0007591:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007594:	85 d8                	test   eax,ebx
c0007596:	74 02                	je     c000759a <f_mkfs+0xf9>
c0007598:	31 db                	xor    ebx,ebx
c000759a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075a5:	77 0a                	ja     c00075b1 <f_mkfs+0x110>
c00075a7:	bb 11 00 00 00       	mov    ebx,0x11
c00075ac:	e9 06 10 00 00       	jmp    c00085b7 <f_mkfs+0x1116>
c00075b1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ba:	85 ed                	test   ebp,ebp
c00075bc:	75 1e                	jne    c00075dc <f_mkfs+0x13b>
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075cd:	50                   	push   eax
c00075ce:	e8 f1 0f 00 00       	call   c00085c4 <ff_memalloc>
c00075d3:	83 c4 10             	add    esp,0x10
c00075d6:	89 c5                	mov    ebp,eax
c00075d8:	85 c0                	test   eax,eax
c00075da:	74 cb                	je     c00075a7 <f_mkfs+0x106>
c00075dc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075e4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075ec:	52                   	push   edx
c00075ed:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075f1:	50                   	push   eax
c00075f2:	6a 01                	push   0x1
c00075f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f8:	e8 3f a5 ff ff       	call   c0001b3c <disk_ioctl>
c00075fd:	83 c4 10             	add    esp,0x10
c0007600:	85 c0                	test   eax,eax
c0007602:	0f 85 4a 0f 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007608:	89 f1                	mov    ecx,esi
c000760a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007612:	83 e1 0f             	and    ecx,0xf
c0007615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000761d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007621:	83 e6 08             	and    esi,0x8
c0007624:	75 56                	jne    c000767c <f_mkfs+0x1db>
c0007626:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000762a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000762e:	83 ff 00             	cmp    edi,0x0
c0007631:	76 20                	jbe    c0007653 <f_mkfs+0x1b2>
c0007633:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007638:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007640:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007646:	83 d7 ff             	adc    edi,0xffffffff
c0007649:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000764d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007651:	eb 21                	jmp    c0007674 <f_mkfs+0x1d3>
c0007653:	ba 3f 00 00 00       	mov    edx,0x3f
c0007658:	39 f2                	cmp    edx,esi
c000765a:	19 f8                	sbb    eax,edi
c000765c:	73 1e                	jae    c000767c <f_mkfs+0x1db>
c000765e:	83 c6 c1             	add    esi,0xffffffc1
c0007661:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007669:	83 d7 ff             	adc    edi,0xffffffff
c000766c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007670:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007674:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000767c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007680:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007684:	89 04 24             	mov    DWORD PTR [esp],eax
c0007687:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000768b:	31 c0                	xor    eax,eax
c000768d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007692:	89 c7                	mov    edi,eax
c0007694:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007697:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000769b:	0f 83 c5 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c00076a1:	89 df                	mov    edi,ebx
c00076a3:	c1 ef 09             	shr    edi,0x9
c00076a6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076aa:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076b1:	c1 ef 09             	shr    edi,0x9
c00076b4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076bd:	74 29                	je     c00076e8 <f_mkfs+0x247>
c00076bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076c5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076ca:	0f 97 c2             	seta   dl
c00076cd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076d0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076d4:	0f 92 c0             	setb   al
c00076d7:	08 c2                	or     dl,al
c00076d9:	75 5b                	jne    c0007736 <f_mkfs+0x295>
c00076db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076df:	83 e0 07             	and    eax,0x7
c00076e2:	3c 04                	cmp    al,0x4
c00076e4:	74 50                	je     c0007736 <f_mkfs+0x295>
c00076e6:	eb 1b                	jmp    c0007703 <f_mkfs+0x262>
c00076e8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076ed:	0f 87 73 0a 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00076f3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f9:	76 08                	jbe    c0007703 <f_mkfs+0x262>
c00076fb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007703:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007707:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000770b:	83 e0 01             	and    eax,0x1
c000770e:	80 e1 02             	and    cl,0x2
c0007711:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007715:	74 0d                	je     c0007724 <f_mkfs+0x283>
c0007717:	84 c0                	test   al,al
c0007719:	0f 84 53 09 00 00    	je     c0008072 <f_mkfs+0xbd1>
c000771f:	e9 12 08 00 00       	jmp    c0007f36 <f_mkfs+0xa95>
c0007724:	bb 13 00 00 00       	mov    ebx,0x13
c0007729:	84 c0                	test   al,al
c000772b:	0f 85 05 08 00 00    	jne    c0007f36 <f_mkfs+0xa95>
c0007731:	e9 39 0e 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0007736:	31 c0                	xor    eax,eax
c0007738:	ba ff 0f 00 00       	mov    edx,0xfff
c000773d:	89 c7                	mov    edi,eax
c000773f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007742:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007746:	0f 83 1a 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c000774c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007752:	77 39                	ja     c000778d <f_mkfs+0x2ec>
c0007754:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007759:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007761:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007764:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007768:	73 08                	jae    c0007772 <f_mkfs+0x2d1>
c000776a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007772:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007777:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000777a:	b8 00 00 00 00       	mov    eax,0x0
c000777f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007783:	73 08                	jae    c000778d <f_mkfs+0x2ec>
c0007785:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007795:	83 c0 20             	add    eax,0x20
c0007798:	83 d2 00             	adc    edx,0x0
c000779b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000779f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a7:	31 d2                	xor    edx,edx
c00077a9:	31 ff                	xor    edi,edi
c00077ab:	52                   	push   edx
c00077ac:	89 fb                	mov    ebx,edi
c00077ae:	50                   	push   eax
c00077af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b7:	e8 58 ac 01 00       	call   c0022414 <__udivdi3>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	c1 e0 02             	shl    eax,0x2
c00077c2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077c6:	05 07 02 00 00       	add    eax,0x207
c00077cb:	89 f1                	mov    ecx,esi
c00077cd:	c1 e8 09             	shr    eax,0x9
c00077d0:	83 c1 ff             	add    ecx,0xffffffff
c00077d3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077d7:	83 d3 ff             	adc    ebx,0xffffffff
c00077da:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077de:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077e2:	31 d2                	xor    edx,edx
c00077e4:	01 c8                	add    eax,ecx
c00077e6:	11 da                	adc    edx,ebx
c00077e8:	89 c1                	mov    ecx,eax
c00077ea:	f7 de                	neg    esi
c00077ec:	89 d0                	mov    eax,edx
c00077ee:	83 d7 00             	adc    edi,0x0
c00077f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077f5:	f7 df                	neg    edi
c00077f7:	21 f1                	and    ecx,esi
c00077f9:	21 f8                	and    eax,edi
c00077fb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007807:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000780b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000780f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007812:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007816:	0f ac d0 01          	shrd   eax,edx,0x1
c000781a:	89 df                	mov    edi,ebx
c000781c:	d1 ea                	shr    edx,1
c000781e:	39 c1                	cmp    ecx,eax
c0007820:	19 d7                	sbb    edi,edx
c0007822:	0f 83 3e 09 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c0007828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000782c:	31 d2                	xor    edx,edx
c000782e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007836:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000783a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007841:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007845:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007849:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000784d:	83 f8 0f             	cmp    eax,0xf
c0007850:	0f 86 10 09 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c0007856:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000785e:	0f 87 02 09 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c0007864:	31 d2                	xor    edx,edx
c0007866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000786a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007872:	83 c0 07             	add    eax,0x7
c0007875:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000787d:	c1 e8 03             	shr    eax,0x3
c0007880:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007887:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000788b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000788f:	c1 e0 09             	shl    eax,0x9
c0007892:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007896:	48                   	dec    eax
c0007897:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000789b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000789f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078a3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078a7:	31 d2                	xor    edx,edx
c00078a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078ad:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078bd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078c1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078cd:	31 ff                	xor    edi,edi
c00078cf:	31 f6                	xor    esi,esi
c00078d1:	31 db                	xor    ebx,ebx
c00078d3:	85 ff                	test   edi,edi
c00078d5:	74 05                	je     c00078dc <f_mkfs+0x43b>
c00078d7:	4f                   	dec    edi
c00078d8:	74 44                	je     c000791e <f_mkfs+0x47d>
c00078da:	eb 4f                	jmp    c000792b <f_mkfs+0x48a>
c00078dc:	83 ec 0c             	sub    esp,0xc
c00078df:	0f b7 c3             	movzx  eax,bx
c00078e2:	50                   	push   eax
c00078e3:	e8 18 0e 00 00       	call   c0008700 <ff_wtoupper>
c00078e8:	83 c4 10             	add    esp,0x10
c00078eb:	89 c1                	mov    ecx,eax
c00078ed:	8d 53 01             	lea    edx,[ebx+0x1]
c00078f0:	66 39 c3             	cmp    bx,ax
c00078f3:	75 3e                	jne    c0007933 <f_mkfs+0x492>
c00078f5:	be 01 00 00 00       	mov    esi,0x1
c00078fa:	89 df                	mov    edi,ebx
c00078fc:	66 01 f7             	add    di,si
c00078ff:	75 07                	jne    c0007908 <f_mkfs+0x467>
c0007901:	83 fe 7f             	cmp    esi,0x7f
c0007904:	77 31                	ja     c0007937 <f_mkfs+0x496>
c0007906:	eb 16                	jmp    c000791e <f_mkfs+0x47d>
c0007908:	83 ec 0c             	sub    esp,0xc
c000790b:	0f b7 ff             	movzx  edi,di
c000790e:	57                   	push   edi
c000790f:	e8 ec 0d 00 00       	call   c0008700 <ff_wtoupper>
c0007914:	83 c4 10             	add    esp,0x10
c0007917:	39 c7                	cmp    edi,eax
c0007919:	75 e6                	jne    c0007901 <f_mkfs+0x460>
c000791b:	46                   	inc    esi
c000791c:	eb dc                	jmp    c00078fa <f_mkfs+0x459>
c000791e:	31 c0                	xor    eax,eax
c0007920:	89 d9                	mov    ecx,ebx
c0007922:	4e                   	dec    esi
c0007923:	0f 95 c0             	setne  al
c0007926:	43                   	inc    ebx
c0007927:	89 c7                	mov    edi,eax
c0007929:	eb 14                	jmp    c000793f <f_mkfs+0x49e>
c000792b:	89 f1                	mov    ecx,esi
c000792d:	01 f3                	add    ebx,esi
c000792f:	31 ff                	xor    edi,edi
c0007931:	eb 0c                	jmp    c000793f <f_mkfs+0x49e>
c0007933:	89 d3                	mov    ebx,edx
c0007935:	eb 08                	jmp    c000793f <f_mkfs+0x49e>
c0007937:	bf 02 00 00 00       	mov    edi,0x2
c000793c:	83 c9 ff             	or     ecx,0xffffffff
c000793f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007943:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007946:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000794a:	0f b6 c1             	movzx  eax,cl
c000794d:	e8 04 a7 ff ff       	call   c0002056 <xsum32>
c0007952:	66 c1 e9 08          	shr    cx,0x8
c0007956:	89 c2                	mov    edx,eax
c0007958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000795b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000795f:	0f b7 c1             	movzx  eax,cx
c0007962:	e8 ef a6 ff ff       	call   c0002056 <xsum32>
c0007967:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000796c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007970:	66 85 db             	test   bx,bx
c0007973:	74 1f                	je     c0007994 <f_mkfs+0x4f3>
c0007975:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007978:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000797f:	83 c0 02             	add    eax,0x2
c0007982:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007988:	39 c2                	cmp    edx,eax
c000798a:	74 08                	je     c0007994 <f_mkfs+0x4f3>
c000798c:	89 04 24             	mov    DWORD PTR [esp],eax
c000798f:	e9 3f ff ff ff       	jmp    c00078d3 <f_mkfs+0x432>
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	83 ec 0c             	sub    esp,0xc
c000799a:	05 01 02 00 00       	add    eax,0x201
c000799f:	c1 e8 09             	shr    eax,0x9
c00079a2:	50                   	push   eax
c00079a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079af:	55                   	push   ebp
c00079b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b4:	e8 6d a1 ff ff       	call   c0001b26 <disk_write>
c00079b9:	83 c4 20             	add    esp,0x20
c00079bc:	85 c0                	test   eax,eax
c00079be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079c1:	0f 85 8b 0b 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00079c7:	89 d0                	mov    eax,edx
c00079c9:	31 d2                	xor    edx,edx
c00079cb:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079cf:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079d3:	66 85 db             	test   bx,bx
c00079d6:	74 04                	je     c00079dc <f_mkfs+0x53b>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	eb b0                	jmp    c000798c <f_mkfs+0x4eb>
c00079dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079e0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079e4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079ee:	31 d2                	xor    edx,edx
c00079f0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079fb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079ff:	c1 eb 09             	shr    ebx,0x9
c0007a02:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a0d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a19:	8d 70 01             	lea    esi,[eax+0x1]
c0007a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a24:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a2b:	31 d2                	xor    edx,edx
c0007a2d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a35:	89 c1                	mov    ecx,eax
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 b1 a1 ff ff       	call   c0001bef <mem_set>
c0007a3e:	31 c0                	xor    eax,eax
c0007a40:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a43:	76 10                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a45:	83 fe 07             	cmp    esi,0x7
c0007a48:	76 0b                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a4a:	40                   	inc    eax
c0007a4b:	83 ee 08             	sub    esi,0x8
c0007a4e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a53:	eb eb                	jmp    c0007a40 <f_mkfs+0x59f>
c0007a55:	b2 01                	mov    dl,0x1
c0007a57:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a5b:	85 f6                	test   esi,esi
c0007a5d:	74 0c                	je     c0007a6b <f_mkfs+0x5ca>
c0007a5f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a62:	76 07                	jbe    c0007a6b <f_mkfs+0x5ca>
c0007a64:	08 11                	or     BYTE PTR [ecx],dl
c0007a66:	4e                   	dec    esi
c0007a67:	d1 e2                	shl    edx,1
c0007a69:	eb f0                	jmp    c0007a5b <f_mkfs+0x5ba>
c0007a6b:	89 df                	mov    edi,ebx
c0007a6d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a71:	76 04                	jbe    c0007a77 <f_mkfs+0x5d6>
c0007a73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a77:	83 ec 0c             	sub    esp,0xc
c0007a7a:	57                   	push   edi
c0007a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a83:	55                   	push   ebp
c0007a84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a88:	e8 99 a0 ff ff       	call   c0001b26 <disk_write>
c0007a8d:	83 c4 20             	add    esp,0x20
c0007a90:	85 c0                	test   eax,eax
c0007a92:	0f 85 ba 0a 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a9e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007aa2:	29 fb                	sub    ebx,edi
c0007aa4:	0f 85 7a ff ff ff    	jne    c0007a24 <f_mkfs+0x583>
c0007aaa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ab6:	31 f6                	xor    esi,esi
c0007ab8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007abc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007abf:	31 d2                	xor    edx,edx
c0007ac1:	89 e8                	mov    eax,ebp
c0007ac3:	e8 27 a1 ff ff       	call   c0001bef <mem_set>
c0007ac8:	31 c9                	xor    ecx,ecx
c0007aca:	85 db                	test   ebx,ebx
c0007acc:	75 40                	jne    c0007b0e <f_mkfs+0x66d>
c0007ace:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ad3:	89 e8                	mov    eax,ebp
c0007ad5:	bb 02 00 00 00       	mov    ebx,0x2
c0007ada:	e8 f2 a0 ff ff       	call   c0001bd1 <st_dword>
c0007adf:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ae2:	83 ca ff             	or     edx,0xffffffff
c0007ae5:	e8 e7 a0 ff ff       	call   c0001bd1 <st_dword>
c0007aea:	b9 08 00 00 00       	mov    ecx,0x8
c0007aef:	eb 1d                	jmp    c0007b0e <f_mkfs+0x66d>
c0007af1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007af4:	76 3b                	jbe    c0007b31 <f_mkfs+0x690>
c0007af6:	43                   	inc    ebx
c0007af7:	83 fe 01             	cmp    esi,0x1
c0007afa:	89 da                	mov    edx,ebx
c0007afc:	77 03                	ja     c0007b01 <f_mkfs+0x660>
c0007afe:	83 ca ff             	or     edx,0xffffffff
c0007b01:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b05:	4e                   	dec    esi
c0007b06:	e8 c6 a0 ff ff       	call   c0001bd1 <st_dword>
c0007b0b:	83 c1 04             	add    ecx,0x4
c0007b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b12:	85 f6                	test   esi,esi
c0007b14:	75 db                	jne    c0007af1 <f_mkfs+0x650>
c0007b16:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b1b:	77 14                	ja     c0007b31 <f_mkfs+0x690>
c0007b1d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b21:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b28:	85 f6                	test   esi,esi
c0007b2a:	74 05                	je     c0007b31 <f_mkfs+0x690>
c0007b2c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b2f:	77 dd                	ja     c0007b0e <f_mkfs+0x66d>
c0007b31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b39:	39 cf                	cmp    edi,ecx
c0007b3b:	76 02                	jbe    c0007b3f <f_mkfs+0x69e>
c0007b3d:	89 cf                	mov    edi,ecx
c0007b3f:	83 ec 0c             	sub    esp,0xc
c0007b42:	57                   	push   edi
c0007b43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b4b:	55                   	push   ebp
c0007b4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b50:	e8 d1 9f ff ff       	call   c0001b26 <disk_write>
c0007b55:	83 c4 20             	add    esp,0x20
c0007b58:	85 c0                	test   eax,eax
c0007b5a:	0f 85 f2 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b66:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b6a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b6e:	0f 85 48 ff ff ff    	jne    c0007abc <f_mkfs+0x61b>
c0007b74:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b77:	31 d2                	xor    edx,edx
c0007b79:	89 e8                	mov    eax,ebp
c0007b7b:	31 ff                	xor    edi,edi
c0007b7d:	e8 6d a0 ff ff       	call   c0001bef <mem_set>
c0007b82:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b85:	ba 02 00 00 00       	mov    edx,0x2
c0007b8a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b8e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b92:	e8 3a a0 ff ff       	call   c0001bd1 <st_dword>
c0007b97:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b9a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b9e:	e8 2e a0 ff ff       	call   c0001bd1 <st_dword>
c0007ba3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ba6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007baa:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bae:	e8 1e a0 ff ff       	call   c0001bd1 <st_dword>
c0007bb3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bbe:	83 c2 02             	add    edx,0x2
c0007bc1:	e8 0b a0 ff ff       	call   c0001bd1 <st_dword>
c0007bc6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bd1:	e8 fb 9f ff ff       	call   c0001bd1 <st_dword>
c0007bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bda:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bec:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007bf0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007bf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bf7:	39 cb                	cmp    ebx,ecx
c0007bf9:	76 02                	jbe    c0007bfd <f_mkfs+0x75c>
c0007bfb:	89 cb                	mov    ebx,ecx
c0007bfd:	83 ec 0c             	sub    esp,0xc
c0007c00:	53                   	push   ebx
c0007c01:	57                   	push   edi
c0007c02:	56                   	push   esi
c0007c03:	55                   	push   ebp
c0007c04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c08:	e8 19 9f ff ff       	call   c0001b26 <disk_write>
c0007c0d:	83 c4 20             	add    esp,0x20
c0007c10:	85 c0                	test   eax,eax
c0007c12:	0f 85 3a 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007c18:	31 d2                	xor    edx,edx
c0007c1a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c1f:	89 e8                	mov    eax,ebp
c0007c21:	e8 c9 9f ff ff       	call   c0001bef <mem_set>
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	01 de                	add    esi,ebx
c0007c2a:	11 d7                	adc    edi,edx
c0007c2c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c2f:	75 bf                	jne    c0007bf0 <f_mkfs+0x74f>
c0007c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c39:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c41:	b9 00 02 00 00       	mov    ecx,0x200
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	89 e8                	mov    eax,ebp
c0007c4a:	e8 a0 9f ff ff       	call   c0001bef <mem_set>
c0007c4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c54:	ba 20 35 02 c0       	mov    edx,0xc0023520
c0007c59:	89 e8                	mov    eax,ebp
c0007c5b:	e8 7a 9f ff ff       	call   c0001bda <mem_cpy>
c0007c60:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c6b:	e8 64 9f ff ff       	call   c0001bd4 <st_qword>
c0007c70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c74:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c7b:	e8 54 9f ff ff       	call   c0001bd4 <st_qword>
c0007c80:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c83:	ba 20 00 00 00       	mov    edx,0x20
c0007c88:	e8 44 9f ff ff       	call   c0001bd1 <st_dword>
c0007c8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c95:	e8 37 9f ff ff       	call   c0001bd1 <st_dword>
c0007c9a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ca2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007ca6:	e8 26 9f ff ff       	call   c0001bd1 <st_dword>
c0007cab:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cb2:	e8 1a 9f ff ff       	call   c0001bd1 <st_dword>
c0007cb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cbb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cbe:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cc1:	e8 0b 9f ff ff       	call   c0001bd1 <st_dword>
c0007cc6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cce:	e8 fe 9e ff ff       	call   c0001bd1 <st_dword>
c0007cd3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cd6:	ba 00 01 00 00       	mov    edx,0x100
c0007cdb:	e8 ed 9e ff ff       	call   c0001bcd <st_word>
c0007ce0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007ce4:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce9:	48                   	dec    eax
c0007cea:	74 05                	je     c0007cf1 <f_mkfs+0x850>
c0007cec:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cef:	eb f8                	jmp    c0007ce9 <f_mkfs+0x848>
c0007cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cfd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d01:	74 05                	je     c0007d08 <f_mkfs+0x867>
c0007d03:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d06:	eb f5                	jmp    c0007cfd <f_mkfs+0x85c>
c0007d08:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d0b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d10:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d16:	31 db                	xor    ebx,ebx
c0007d18:	e8 b0 9e ff ff       	call   c0001bcd <st_word>
c0007d1d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d23:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d2b:	e8 9d 9e ff ff       	call   c0001bcd <st_word>
c0007d30:	31 c9                	xor    ecx,ecx
c0007d32:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d35:	83 f8 01             	cmp    eax,0x1
c0007d38:	76 13                	jbe    c0007d4d <f_mkfs+0x8ac>
c0007d3a:	83 f9 70             	cmp    ecx,0x70
c0007d3d:	74 0e                	je     c0007d4d <f_mkfs+0x8ac>
c0007d3f:	89 da                	mov    edx,ebx
c0007d41:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d46:	e8 0b a3 ff ff       	call   c0002056 <xsum32>
c0007d4b:	89 c3                	mov    ebx,eax
c0007d4d:	41                   	inc    ecx
c0007d4e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d54:	75 dc                	jne    c0007d32 <f_mkfs+0x891>
c0007d56:	89 f0                	mov    eax,esi
c0007d58:	89 fa                	mov    edx,edi
c0007d5a:	83 c0 01             	add    eax,0x1
c0007d5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d61:	83 d2 00             	adc    edx,0x0
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d6b:	6a 01                	push   0x1
c0007d6d:	57                   	push   edi
c0007d6e:	56                   	push   esi
c0007d6f:	55                   	push   ebp
c0007d70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d74:	e8 ad 9d ff ff       	call   c0001b26 <disk_write>
c0007d79:	83 c4 20             	add    esp,0x20
c0007d7c:	85 c0                	test   eax,eax
c0007d7e:	0f 85 ce 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	b9 00 02 00 00       	mov    ecx,0x200
c0007d8b:	89 e8                	mov    eax,ebp
c0007d8d:	e8 5d 9e ff ff       	call   c0001bef <mem_set>
c0007d92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d9a:	e8 2e 9e ff ff       	call   c0001bcd <st_word>
c0007d9f:	89 f0                	mov    eax,esi
c0007da1:	89 fa                	mov    edx,edi
c0007da3:	83 c0 09             	add    eax,0x9
c0007da6:	83 d2 00             	adc    edx,0x0
c0007da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007db0:	31 c9                	xor    ecx,ecx
c0007db2:	41                   	inc    ecx
c0007db3:	89 da                	mov    edx,ebx
c0007db5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dba:	e8 97 a2 ff ff       	call   c0002056 <xsum32>
c0007dbf:	89 c3                	mov    ebx,eax
c0007dc1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dc7:	75 e9                	jne    c0007db2 <f_mkfs+0x911>
c0007dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dd1:	83 c0 01             	add    eax,0x1
c0007dd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd8:	83 d2 00             	adc    edx,0x0
c0007ddb:	83 ec 0c             	sub    esp,0xc
c0007dde:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007de2:	6a 01                	push   0x1
c0007de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dec:	55                   	push   ebp
c0007ded:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df1:	e8 30 9d ff ff       	call   c0001b26 <disk_write>
c0007df6:	83 c4 20             	add    esp,0x20
c0007df9:	85 c0                	test   eax,eax
c0007dfb:	0f 85 51 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e05:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e09:	75 09                	jne    c0007e14 <f_mkfs+0x973>
c0007e0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e0e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e12:	74 12                	je     c0007e26 <f_mkfs+0x985>
c0007e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e24:	eb 8a                	jmp    c0007db0 <f_mkfs+0x90f>
c0007e26:	31 d2                	xor    edx,edx
c0007e28:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2d:	89 e8                	mov    eax,ebp
c0007e2f:	e8 bb 9d ff ff       	call   c0001bef <mem_set>
c0007e34:	83 c6 0b             	add    esi,0xb
c0007e37:	83 d7 00             	adc    edi,0x0
c0007e3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e3e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e42:	31 c9                	xor    ecx,ecx
c0007e44:	41                   	inc    ecx
c0007e45:	89 da                	mov    edx,ebx
c0007e47:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e4c:	e8 05 a2 ff ff       	call   c0002056 <xsum32>
c0007e51:	89 c3                	mov    ebx,eax
c0007e53:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e59:	75 e9                	jne    c0007e44 <f_mkfs+0x9a3>
c0007e5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e5e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e62:	83 c6 01             	add    esi,0x1
c0007e65:	83 d7 00             	adc    edi,0x0
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	6a 01                	push   0x1
c0007e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e75:	55                   	push   ebp
c0007e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e7a:	e8 a7 9c ff ff       	call   c0001b26 <disk_write>
c0007e7f:	83 c4 20             	add    esp,0x20
c0007e82:	85 c0                	test   eax,eax
c0007e84:	0f 85 c8 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e8a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e8e:	75 06                	jne    c0007e96 <f_mkfs+0x9f5>
c0007e90:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e94:	74 09                	je     c0007e9f <f_mkfs+0x9fe>
c0007e96:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e99:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e9d:	eb a3                	jmp    c0007e42 <f_mkfs+0x9a1>
c0007e9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ea3:	89 da                	mov    edx,ebx
c0007ea5:	01 e8                	add    eax,ebp
c0007ea7:	e8 25 9d ff ff       	call   c0001bd1 <st_dword>
c0007eac:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007eb1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb9:	75 e4                	jne    c0007e9f <f_mkfs+0x9fe>
c0007ebb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ebe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ec2:	83 c6 02             	add    esi,0x2
c0007ec5:	83 d7 00             	adc    edi,0x0
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	6a 01                	push   0x1
c0007ecd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed5:	55                   	push   ebp
c0007ed6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eda:	e8 47 9c ff ff       	call   c0001b26 <disk_write>
c0007edf:	83 c4 20             	add    esp,0x20
c0007ee2:	85 c0                	test   eax,eax
c0007ee4:	0f 85 68 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007eea:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eef:	74 0d                	je     c0007efe <f_mkfs+0xa5d>
c0007ef1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef9:	e9 43 fd ff ff       	jmp    c0007c41 <f_mkfs+0x7a0>
c0007efe:	b1 07                	mov    cl,0x7
c0007f00:	e9 e3 05 00 00       	jmp    c00084e8 <f_mkfs+0x1047>
c0007f05:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f0a:	0f 85 4f 02 00 00    	jne    c000815f <f_mkfs+0xcbe>
c0007f10:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f15:	0f 86 22 02 00 00    	jbe    c000813d <f_mkfs+0xc9c>
c0007f1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f20:	0f 85 81 06 00 00    	jne    c00085a7 <f_mkfs+0x1106>
c0007f26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f2d:	83 f8 40             	cmp    eax,0x40
c0007f30:	0f 87 51 06 00 00    	ja     c0008587 <f_mkfs+0x10e6>
c0007f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f3a:	85 ff                	test   edi,edi
c0007f3c:	75 1c                	jne    c0007f5a <f_mkfs+0xab9>
c0007f3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f41:	ba 20 34 02 c0       	mov    edx,0xc0023420
c0007f46:	c1 e9 0c             	shr    ecx,0xc
c0007f49:	bf 01 00 00 00       	mov    edi,0x1
c0007f4e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f51:	66 85 c0             	test   ax,ax
c0007f54:	0f 85 95 01 00 00    	jne    c00080ef <f_mkfs+0xc4e>
c0007f5a:	31 d2                	xor    edx,edx
c0007f5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f5f:	f7 f7                	div    edi
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	0f 86 95 01 00 00    	jbe    c0008101 <f_mkfs+0xc60>
c0007f6c:	83 c0 02             	add    eax,0x2
c0007f6f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f74:	01 c0                	add    eax,eax
c0007f76:	05 ff 01 00 00       	add    eax,0x1ff
c0007f7b:	be 01 00 00 00       	mov    esi,0x1
c0007f80:	c1 e8 09             	shr    eax,0x9
c0007f83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f8b:	c1 e0 05             	shl    eax,0x5
c0007f8e:	c1 e8 09             	shr    eax,0x9
c0007f91:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f95:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f9a:	31 d2                	xor    edx,edx
c0007f9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fa0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fa4:	89 f0                	mov    eax,esi
c0007fa6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007faa:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fba:	31 d2                	xor    edx,edx
c0007fbc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fc1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fc5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc9:	31 db                	xor    ebx,ebx
c0007fcb:	01 c8                	add    eax,ecx
c0007fcd:	11 da                	adc    edx,ebx
c0007fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fd3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fd7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fdb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fdf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fe3:	f7 da                	neg    edx
c0007fe5:	21 d1                	and    ecx,edx
c0007fe7:	29 d9                	sub    ecx,ebx
c0007fe9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fee:	0f 85 20 01 00 00    	jne    c0008114 <f_mkfs+0xc73>
c0007ff4:	31 db                	xor    ebx,ebx
c0007ff6:	01 ce                	add    esi,ecx
c0007ff8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ffc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008000:	31 d2                	xor    edx,edx
c0008002:	89 f8                	mov    eax,edi
c0008004:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008008:	c1 e0 04             	shl    eax,0x4
c000800b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000800f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008013:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008017:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000801b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000801e:	19 d3                	sbb    ebx,edx
c0008020:	0f 82 40 01 00 00    	jb     c0008166 <f_mkfs+0xcc5>
c0008026:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008029:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000802d:	89 c8                	mov    eax,ecx
c000802f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008034:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008038:	29 f0                	sub    eax,esi
c000803a:	29 d0                	sub    eax,edx
c000803c:	31 d2                	xor    edx,edx
c000803e:	f7 f7                	div    edi
c0008040:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008045:	89 c3                	mov    ebx,eax
c0008047:	0f 85 b8 fe ff ff    	jne    c0007f05 <f_mkfs+0xa64>
c000804d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008052:	0f 87 1d 01 00 00    	ja     c0008175 <f_mkfs+0xcd4>
c0008058:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000805d:	0f 85 03 01 00 00    	jne    c0008166 <f_mkfs+0xcc5>
c0008063:	83 ff 01             	cmp    edi,0x1
c0008066:	0f 86 fa 00 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c000806c:	d1 ef                	shr    edi,1
c000806e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008072:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008076:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008079:	85 db                	test   ebx,ebx
c000807b:	75 2d                	jne    c00080aa <f_mkfs+0xc09>
c000807d:	89 cb                	mov    ebx,ecx
c000807f:	ba 30 34 02 c0       	mov    edx,0xc0023430
c0008084:	c1 eb 11             	shr    ebx,0x11
c0008087:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000808f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0008092:	66 85 c0             	test   ax,ax
c0008095:	74 11                	je     c00080a8 <f_mkfs+0xc07>
c0008097:	83 c2 02             	add    edx,0x2
c000809a:	39 d8                	cmp    eax,ebx
c000809c:	77 0a                	ja     c00080a8 <f_mkfs+0xc07>
c000809e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080a2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080a6:	eb e7                	jmp    c000808f <f_mkfs+0xbee>
c00080a8:	31 db                	xor    ebx,ebx
c00080aa:	31 d2                	xor    edx,edx
c00080ac:	89 c8                	mov    eax,ecx
c00080ae:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080b2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080be:	c1 ea 09             	shr    edx,0x9
c00080c1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080c6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080ca:	0f 87 96 00 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00080d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080e0:	be 20 00 00 00       	mov    esi,0x20
c00080e5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080ea:	e9 a6 fe ff ff       	jmp    c0007f95 <f_mkfs+0xaf4>
c00080ef:	83 c2 02             	add    edx,0x2
c00080f2:	39 c8                	cmp    eax,ecx
c00080f4:	0f 87 60 fe ff ff    	ja     c0007f5a <f_mkfs+0xab9>
c00080fa:	01 ff                	add    edi,edi
c00080fc:	e9 4d fe ff ff       	jmp    c0007f4e <f_mkfs+0xaad>
c0008101:	8d 04 40             	lea    eax,[eax+eax*2]
c0008104:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008109:	40                   	inc    eax
c000810a:	d1 e8                	shr    eax,1
c000810c:	83 c0 03             	add    eax,0x3
c000810f:	e9 62 fe ff ff       	jmp    c0007f76 <f_mkfs+0xad5>
c0008114:	31 d2                	xor    edx,edx
c0008116:	89 c8                	mov    eax,ecx
c0008118:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000811c:	85 d2                	test   edx,edx
c000811e:	74 0c                	je     c000812c <f_mkfs+0xc8b>
c0008120:	49                   	dec    ecx
c0008121:	46                   	inc    esi
c0008122:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008127:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000812c:	89 c8                	mov    eax,ecx
c000812e:	31 d2                	xor    edx,edx
c0008130:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008134:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008138:	e9 c3 fe ff ff       	jmp    c0008000 <f_mkfs+0xb5f>
c000813d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008142:	77 31                	ja     c0008175 <f_mkfs+0xcd4>
c0008144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008149:	75 1b                	jne    c0008166 <f_mkfs+0xcc5>
c000814b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000814e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008152:	3d 80 00 00 00       	cmp    eax,0x80
c0008157:	0f 86 d9 fd ff ff    	jbe    c0007f36 <f_mkfs+0xa95>
c000815d:	eb 07                	jmp    c0008166 <f_mkfs+0xcc5>
c000815f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008164:	76 0a                	jbe    c0008170 <f_mkfs+0xccf>
c0008166:	bb 0e 00 00 00       	mov    ebx,0xe
c000816b:	e9 ff 03 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0008170:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008175:	31 d2                	xor    edx,edx
c0008177:	b9 00 02 00 00       	mov    ecx,0x200
c000817c:	89 e8                	mov    eax,ebp
c000817e:	e8 6c 9a ff ff       	call   c0001bef <mem_set>
c0008183:	b9 0b 00 00 00       	mov    ecx,0xb
c0008188:	ba 42 35 02 c0       	mov    edx,0xc0023542
c000818d:	89 e8                	mov    eax,ebp
c000818f:	e8 46 9a ff ff       	call   c0001bda <mem_cpy>
c0008194:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008197:	ba 00 02 00 00       	mov    edx,0x200
c000819c:	e8 2c 9a ff ff       	call   c0001bcd <st_word>
c00081a1:	89 f8                	mov    eax,edi
c00081a3:	0f b7 d6             	movzx  edx,si
c00081a6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081ac:	e8 1c 9a ff ff       	call   c0001bcd <st_word>
c00081b1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ba:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081bd:	75 08                	jne    c00081c7 <f_mkfs+0xd26>
c00081bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081c7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081ce:	e8 fa 99 ff ff       	call   c0001bcd <st_word>
c00081d3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081dc:	39 d0                	cmp    eax,edx
c00081de:	b8 00 00 00 00       	mov    eax,0x0
c00081e3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081e7:	72 0a                	jb     c00081f3 <f_mkfs+0xd52>
c00081e9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081ec:	e8 dc 99 ff ff       	call   c0001bcd <st_word>
c00081f1:	eb 08                	jmp    c00081fb <f_mkfs+0xd5a>
c00081f3:	8d 45 20             	lea    eax,[ebp+0x20]
c00081f6:	e8 d6 99 ff ff       	call   c0001bd1 <st_dword>
c00081fb:	8d 45 18             	lea    eax,[ebp+0x18]
c00081fe:	ba 3f 00 00 00       	mov    edx,0x3f
c0008203:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008207:	e8 c1 99 ff ff       	call   c0001bcd <st_word>
c000820c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000820f:	ba ff 00 00 00       	mov    edx,0xff
c0008214:	e8 b4 99 ff ff       	call   c0001bcd <st_word>
c0008219:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000821c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008220:	e8 ac 99 ff ff       	call   c0001bd1 <st_dword>
c0008225:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000822a:	75 57                	jne    c0008283 <f_mkfs+0xde2>
c000822c:	8d 45 43             	lea    eax,[ebp+0x43]
c000822f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008234:	e8 98 99 ff ff       	call   c0001bd1 <st_dword>
c0008239:	8d 45 24             	lea    eax,[ebp+0x24]
c000823c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008240:	e8 8c 99 ff ff       	call   c0001bd1 <st_dword>
c0008245:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008248:	ba 02 00 00 00       	mov    edx,0x2
c000824d:	e8 7f 99 ff ff       	call   c0001bd1 <st_dword>
c0008252:	8d 45 30             	lea    eax,[ebp+0x30]
c0008255:	ba 01 00 00 00       	mov    edx,0x1
c000825a:	e8 6e 99 ff ff       	call   c0001bcd <st_word>
c000825f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008262:	ba 06 00 00 00       	mov    edx,0x6
c0008267:	e8 61 99 ff ff       	call   c0001bcd <st_word>
c000826c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008270:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008274:	8d 45 47             	lea    eax,[ebp+0x47]
c0008277:	b9 13 00 00 00       	mov    ecx,0x13
c000827c:	ba 4e 35 02 c0       	mov    edx,0xc002354e
c0008281:	eb 2f                	jmp    c00082b2 <f_mkfs+0xe11>
c0008283:	8d 45 27             	lea    eax,[ebp+0x27]
c0008286:	ba 00 00 21 50       	mov    edx,0x50210000
c000828b:	e8 41 99 ff ff       	call   c0001bd1 <st_dword>
c0008290:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008295:	8d 45 16             	lea    eax,[ebp+0x16]
c0008298:	e8 30 99 ff ff       	call   c0001bcd <st_word>
c000829d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082a1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082a5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a8:	b9 13 00 00 00       	mov    ecx,0x13
c00082ad:	ba 62 35 02 c0       	mov    edx,0xc0023562
c00082b2:	e8 23 99 ff ff       	call   c0001bda <mem_cpy>
c00082b7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082bd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082c2:	89 f0                	mov    eax,esi
c00082c4:	e8 04 99 ff ff       	call   c0001bcd <st_word>
c00082c9:	83 ec 0c             	sub    esp,0xc
c00082cc:	6a 01                	push   0x1
c00082ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d6:	55                   	push   ebp
c00082d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082db:	e8 46 98 ff ff       	call   c0001b26 <disk_write>
c00082e0:	83 c4 20             	add    esp,0x20
c00082e3:	85 c0                	test   eax,eax
c00082e5:	0f 85 67 02 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00082eb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f0:	0f 85 b7 00 00 00    	jne    c00083ad <f_mkfs+0xf0c>
c00082f6:	83 ec 0c             	sub    esp,0xc
c00082f9:	6a 01                	push   0x1
c00082fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008303:	83 c0 06             	add    eax,0x6
c0008306:	83 d2 00             	adc    edx,0x0
c0008309:	52                   	push   edx
c000830a:	50                   	push   eax
c000830b:	55                   	push   ebp
c000830c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008310:	e8 11 98 ff ff       	call   c0001b26 <disk_write>
c0008315:	83 c4 20             	add    esp,0x20
c0008318:	b9 00 02 00 00       	mov    ecx,0x200
c000831d:	31 d2                	xor    edx,edx
c000831f:	89 e8                	mov    eax,ebp
c0008321:	e8 c9 98 ff ff       	call   c0001bef <mem_set>
c0008326:	ba 52 52 61 41       	mov    edx,0x41615252
c000832b:	89 e8                	mov    eax,ebp
c000832d:	e8 9f 98 ff ff       	call   c0001bd1 <st_dword>
c0008332:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008338:	ba 72 72 41 61       	mov    edx,0x61417272
c000833d:	e8 8f 98 ff ff       	call   c0001bd1 <st_dword>
c0008342:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008345:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000834b:	e8 81 98 ff ff       	call   c0001bd1 <st_dword>
c0008350:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008356:	ba 02 00 00 00       	mov    edx,0x2
c000835b:	e8 71 98 ff ff       	call   c0001bd1 <st_dword>
c0008360:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008365:	89 f0                	mov    eax,esi
c0008367:	e8 61 98 ff ff       	call   c0001bcd <st_word>
c000836c:	83 ec 0c             	sub    esp,0xc
c000836f:	6a 01                	push   0x1
c0008371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008375:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008379:	83 c0 07             	add    eax,0x7
c000837c:	83 d2 00             	adc    edx,0x0
c000837f:	52                   	push   edx
c0008380:	50                   	push   eax
c0008381:	55                   	push   ebp
c0008382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008386:	e8 9b 97 ff ff       	call   c0001b26 <disk_write>
c000838b:	83 c4 14             	add    esp,0x14
c000838e:	6a 01                	push   0x1
c0008390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008398:	83 c0 01             	add    eax,0x1
c000839b:	83 d2 00             	adc    edx,0x0
c000839e:	52                   	push   edx
c000839f:	50                   	push   eax
c00083a0:	55                   	push   ebp
c00083a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a5:	e8 7c 97 ff ff       	call   c0001b26 <disk_write>
c00083aa:	83 c4 20             	add    esp,0x20
c00083ad:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083b4:	31 d2                	xor    edx,edx
c00083b6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083bc:	31 db                	xor    ebx,ebx
c00083be:	89 e8                	mov    eax,ebp
c00083c0:	e8 2a 98 ff ff       	call   c0001bef <mem_set>
c00083c5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083d1:	0f 94 c3             	sete   bl
c00083d4:	4b                   	dec    ebx
c00083d5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083db:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083e1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e6:	75 21                	jne    c0008409 <f_mkfs+0xf68>
c00083e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083ed:	89 e8                	mov    eax,ebp
c00083ef:	e8 dd 97 ff ff       	call   c0001bd1 <st_dword>
c00083f4:	8d 45 04             	lea    eax,[ebp+0x4]
c00083f7:	83 ca ff             	or     edx,0xffffffff
c00083fa:	e8 d2 97 ff ff       	call   c0001bd1 <st_dword>
c00083ff:	8d 45 08             	lea    eax,[ebp+0x8]
c0008402:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008407:	eb 04                	jmp    c000840d <f_mkfs+0xf6c>
c0008409:	89 da                	mov    edx,ebx
c000840b:	89 e8                	mov    eax,ebp
c000840d:	e8 bf 97 ff ff       	call   c0001bd1 <st_dword>
c0008412:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000841a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000841e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008422:	39 ce                	cmp    esi,ecx
c0008424:	76 02                	jbe    c0008428 <f_mkfs+0xf87>
c0008426:	89 ce                	mov    esi,ecx
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	56                   	push   esi
c000842c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008430:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008434:	55                   	push   ebp
c0008435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008439:	e8 e8 96 ff ff       	call   c0001b26 <disk_write>
c000843e:	83 c4 20             	add    esp,0x20
c0008441:	85 c0                	test   eax,eax
c0008443:	0f 85 09 01 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0008449:	31 d2                	xor    edx,edx
c000844b:	b9 00 02 00 00       	mov    ecx,0x200
c0008450:	89 e8                	mov    eax,ebp
c0008452:	e8 98 97 ff ff       	call   c0001bef <mem_set>
c0008457:	31 d2                	xor    edx,edx
c0008459:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000845d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008461:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008465:	75 b3                	jne    c000841a <f_mkfs+0xf79>
c0008467:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000846a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008471:	40                   	inc    eax
c0008472:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008476:	0f 87 65 ff ff ff    	ja     c00083e1 <f_mkfs+0xf40>
c000847c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008481:	74 04                	je     c0008487 <f_mkfs+0xfe6>
c0008483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008487:	89 fb                	mov    ebx,edi
c0008489:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000848d:	76 04                	jbe    c0008493 <f_mkfs+0xff2>
c000848f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	53                   	push   ebx
c0008497:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849f:	55                   	push   ebp
c00084a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084a4:	e8 7d 96 ff ff       	call   c0001b26 <disk_write>
c00084a9:	83 c4 20             	add    esp,0x20
c00084ac:	85 c0                	test   eax,eax
c00084ae:	0f 85 9e 00 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00084b4:	31 d2                	xor    edx,edx
c00084b6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ba:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084be:	29 df                	sub    edi,ebx
c00084c0:	75 c5                	jne    c0008487 <f_mkfs+0xfe6>
c00084c2:	b1 0c                	mov    cl,0xc
c00084c4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c9:	74 1d                	je     c00084e8 <f_mkfs+0x1047>
c00084cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00084d0:	b1 06                	mov    cl,0x6
c00084d2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084d6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084da:	72 0c                	jb     c00084e8 <f_mkfs+0x1047>
c00084dc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084e1:	0f 94 c1             	sete   cl
c00084e4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084ed:	75 4c                	jne    c000853b <f_mkfs+0x109a>
c00084ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084f7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008505:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008510:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000851b:	0f b6 c9             	movzx  ecx,cl
c000851e:	83 ec 0c             	sub    esp,0xc
c0008521:	55                   	push   ebp
c0008522:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000852d:	e8 f9 bf ff ff       	call   c000452b <create_partition>
c0008532:	83 c4 10             	add    esp,0x10
c0008535:	89 c3                	mov    ebx,eax
c0008537:	85 c0                	test   eax,eax
c0008539:	75 34                	jne    c000856f <f_mkfs+0x10ce>
c000853b:	31 db                	xor    ebx,ebx
c000853d:	50                   	push   eax
c000853e:	6a 00                	push   0x0
c0008540:	6a 00                	push   0x0
c0008542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008546:	e8 f1 95 ff ff       	call   c0001b3c <disk_ioctl>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	74 1d                	je     c000856f <f_mkfs+0x10ce>
c0008552:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000855a:	75 0c                	jne    c0008568 <f_mkfs+0x10c7>
c000855c:	83 ec 0c             	sub    esp,0xc
c000855f:	55                   	push   ebp
c0008560:	e8 77 00 00 00       	call   c00085dc <ff_memfree>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	bb 01 00 00 00       	mov    ebx,0x1
c000856d:	eb 48                	jmp    c00085b7 <f_mkfs+0x1116>
c000856f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008577:	75 3e                	jne    c00085b7 <f_mkfs+0x1116>
c0008579:	83 ec 0c             	sub    esp,0xc
c000857c:	55                   	push   ebp
c000857d:	e8 5a 00 00 00       	call   c00085dc <ff_memfree>
c0008582:	83 c4 10             	add    esp,0x10
c0008585:	eb 30                	jmp    c00085b7 <f_mkfs+0x1116>
c0008587:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000858c:	0f 85 eb fa ff ff    	jne    c000807d <f_mkfs+0xbdc>
c0008592:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008596:	81 ff 80 00 00 00    	cmp    edi,0x80
c000859c:	0f 86 b8 f9 ff ff    	jbe    c0007f5a <f_mkfs+0xab9>
c00085a2:	e9 bf fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085a7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085ac:	0f 85 c0 fa ff ff    	jne    c0008072 <f_mkfs+0xbd1>
c00085b2:	e9 af fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085b7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085bd:	89 d8                	mov    eax,ebx
c00085bf:	5b                   	pop    ebx
c00085c0:	5e                   	pop    esi
c00085c1:	5f                   	pop    edi
c00085c2:	5d                   	pop    ebp
c00085c3:	c3                   	ret    

c00085c4 <ff_memalloc>:
c00085c4:	83 ec 0c             	sub    esp,0xc
c00085c7:	83 ec 0c             	sub    esp,0xc
c00085ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ce:	e8 34 14 00 00       	call   c0009a07 <malloc>
c00085d3:	83 c4 10             	add    esp,0x10
c00085d6:	83 c4 0c             	add    esp,0xc
c00085d9:	c3                   	ret    
c00085da:	66 90                	xchg   ax,ax

c00085dc <ff_memfree>:
c00085dc:	83 ec 0c             	sub    esp,0xc
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085e6:	e8 2c 14 00 00       	call   c0009a17 <free>
c00085eb:	83 c4 10             	add    esp,0x10
c00085ee:	90                   	nop
c00085ef:	83 c4 0c             	add    esp,0xc
c00085f2:	c3                   	ret    
c00085f3:	90                   	nop

c00085f4 <ff_uni2oem>:
c00085f4:	83 ec 14             	sub    esp,0x14
c00085f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008606:	c7 44 24 0c 80 38 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023880
c000860e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008613:	77 0b                	ja     c0008620 <ff_uni2oem+0x2c>
c0008615:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008619:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000861e:	eb 60                	jmp    c0008680 <ff_uni2oem+0x8c>
c0008620:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008628:	77 56                	ja     c0008680 <ff_uni2oem+0x8c>
c000862a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008630:	75 4e                	jne    c0008680 <ff_uni2oem+0x8c>
c0008632:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008639:	eb 0d                	jmp    c0008648 <ff_uni2oem+0x54>
c000863b:	90                   	nop
c000863c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008641:	40                   	inc    eax
c0008642:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008647:	90                   	nop
c0008648:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000864e:	77 1c                	ja     c000866c <ff_uni2oem+0x78>
c0008650:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008655:	01 c0                	add    eax,eax
c0008657:	89 c2                	mov    edx,eax
c0008659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000865d:	01 d0                	add    eax,edx
c000865f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008662:	0f b7 c0             	movzx  eax,ax
c0008665:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008669:	75 d1                	jne    c000863c <ff_uni2oem+0x48>
c000866b:	90                   	nop
c000866c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008671:	83 e8 80             	sub    eax,0xffffff80
c0008674:	25 ff 00 00 00       	and    eax,0xff
c0008679:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000867e:	66 90                	xchg   ax,ax
c0008680:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008685:	83 c4 14             	add    esp,0x14
c0008688:	c3                   	ret    
c0008689:	8d 76 00             	lea    esi,[esi+0x0]

c000868c <ff_oem2uni>:
c000868c:	83 ec 18             	sub    esp,0x18
c000868f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008697:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000869c:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086a0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086a7:	c7 44 24 10 80 38 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023880
c00086af:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086b5:	77 0d                	ja     c00086c4 <ff_oem2uni+0x38>
c00086b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086c0:	eb 32                	jmp    c00086f4 <ff_oem2uni+0x68>
c00086c2:	66 90                	xchg   ax,ax
c00086c4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086ca:	75 28                	jne    c00086f4 <ff_oem2uni+0x68>
c00086cc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086d3:	77 1f                	ja     c00086f4 <ff_oem2uni+0x68>
c00086d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086da:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086df:	01 c0                	add    eax,eax
c00086e1:	89 c2                	mov    edx,eax
c00086e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086e7:	01 d0                	add    eax,edx
c00086e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086ec:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086f1:	8d 76 00             	lea    esi,[esi+0x0]
c00086f4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f9:	83 c4 18             	add    esp,0x18
c00086fc:	c3                   	ret    
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]

c0008700 <ff_wtoupper>:
c0008700:	83 ec 10             	sub    esp,0x10
c0008703:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000870b:	0f 87 4f 01 00 00    	ja     c0008860 <ff_wtoupper+0x160>
c0008711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008715:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000871a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008721:	77 09                	ja     c000872c <ff_wtoupper+0x2c>
c0008723:	b8 80 36 02 c0       	mov    eax,0xc0023680
c0008728:	eb 0a                	jmp    c0008734 <ff_wtoupper+0x34>
c000872a:	66 90                	xchg   ax,ax
c000872c:	b8 c0 35 02 c0       	mov    eax,0xc00235c0
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000873c:	8d 50 02             	lea    edx,[eax+0x2]
c000873f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008743:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008746:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000874b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008751:	0f 84 fd 00 00 00    	je     c0008854 <ff_wtoupper+0x154>
c0008757:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000875c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008761:	0f 82 ed 00 00 00    	jb     c0008854 <ff_wtoupper+0x154>
c0008767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000876b:	8d 50 02             	lea    edx,[eax+0x2]
c000876e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008772:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008775:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000877a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000877f:	66 c1 e8 08          	shr    ax,0x8
c0008783:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008788:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000878f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008794:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008799:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000879e:	01 ca                	add    edx,ecx
c00087a0:	39 d0                	cmp    eax,edx
c00087a2:	0f 8d 8c 00 00 00    	jge    c0008834 <ff_wtoupper+0x134>
c00087a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087ad:	83 f8 08             	cmp    eax,0x8
c00087b0:	0f 87 9a 00 00 00    	ja     c0008850 <ff_wtoupper+0x150>
c00087b6:	8b 04 85 80 35 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdca80]
c00087bd:	ff e0                	jmp    eax
c00087bf:	90                   	nop
c00087c0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087c5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087ca:	29 c2                	sub    edx,eax
c00087cc:	89 d0                	mov    eax,edx
c00087ce:	01 c0                	add    eax,eax
c00087d0:	89 c2                	mov    edx,eax
c00087d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d6:	01 d0                	add    eax,edx
c00087d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087db:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087e0:	eb 4e                	jmp    c0008830 <ff_wtoupper+0x130>
c00087e2:	66 90                	xchg   ax,ax
c00087e4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087ed:	83 e0 01             	and    eax,0x1
c00087f0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087f5:	eb 39                	jmp    c0008830 <ff_wtoupper+0x130>
c00087f7:	90                   	nop
c00087f8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087fe:	eb 30                	jmp    c0008830 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008806:	eb 28                	jmp    c0008830 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000880e:	eb 20                	jmp    c0008830 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008816:	eb 18                	jmp    c0008830 <ff_wtoupper+0x130>
c0008818:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000881e:	eb 10                	jmp    c0008830 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008826:	eb 08                	jmp    c0008830 <ff_wtoupper+0x130>
c0008828:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000882f:	90                   	nop
c0008830:	eb 1e                	jmp    c0008850 <ff_wtoupper+0x150>
c0008832:	66 90                	xchg   ax,ax
c0008834:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000883a:	0f 85 f8 fe ff ff    	jne    c0008738 <ff_wtoupper+0x38>
c0008840:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008845:	01 c0                	add    eax,eax
c0008847:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000884b:	e9 e8 fe ff ff       	jmp    c0008738 <ff_wtoupper+0x38>
c0008850:	90                   	nop
c0008851:	8d 76 00             	lea    esi,[esi+0x0]
c0008854:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008859:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000885d:	8d 76 00             	lea    esi,[esi+0x0]
c0008860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	c3                   	ret    

c0008868 <CPU::current()>:
c0008868:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c000886d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008873:	c3                   	ret    

c0008874 <operator new(unsigned long)>:
c0008874:	e9 8e 11 00 00       	jmp    c0009a07 <malloc>

c0008879 <operator delete(void*)>:
c0008879:	e9 a9 11 00 00       	jmp    c0009a27 <rfree>

c000887e <disableIRQs()>:
c000887e:	fa                   	cli    
c000887f:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c0008885:	c3                   	ret    

c0008886 <enableIRQs()>:
c0008886:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c000888b:	48                   	dec    eax
c000888c:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c0008891:	75 01                	jne    c0008894 <enableIRQs()+0xe>
c0008893:	fb                   	sti    
c0008894:	c3                   	ret    

c0008895 <lockScheduler()>:
c0008895:	fa                   	cli    
c0008896:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c000889c:	c3                   	ret    

c000889d <unlockScheduler()>:
c000889d:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c00088a2:	48                   	dec    eax
c00088a3:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c00088a8:	75 01                	jne    c00088ab <unlockScheduler()+0xe>
c00088aa:	fb                   	sti    
c00088ab:	c3                   	ret    

c00088ac <lockStuff()>:
c00088ac:	fa                   	cli    
c00088ad:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c00088b3:	ff 05 04 90 02 c0    	inc    DWORD PTR ds:0xc0029004
c00088b9:	c3                   	ret    

c00088ba <unlockStuff()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	a1 04 90 02 c0       	mov    eax,ds:0xc0029004
c00088c2:	48                   	dec    eax
c00088c3:	a3 04 90 02 c0       	mov    ds:0xc0029004,eax
c00088c8:	75 18                	jne    c00088e2 <unlockStuff()+0x28>
c00088ca:	83 3d 00 90 02 c0 00 	cmp    DWORD PTR ds:0xc0029000,0x0
c00088d1:	74 0f                	je     c00088e2 <unlockStuff()+0x28>
c00088d3:	c7 05 00 90 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029000,0x0
c00088dd:	e8 92 fb 00 00       	call   c0018474 <schedule()>
c00088e2:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c00088e7:	48                   	dec    eax
c00088e8:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c00088ed:	75 01                	jne    c00088f0 <unlockStuff()+0x36>
c00088ef:	fb                   	sti    
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	c3                   	ret    

c00088f4 <Virt::getAKernelVAS()>:
c00088f4:	a1 70 7c 02 c0       	mov    eax,ds:0xc0027c70
c00088f9:	c3                   	ret    

c00088fa <__not_memcpy>:
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008900:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008904:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008908:	89 c7                	mov    edi,eax
c000890a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	c3                   	ret    
c000890f:	90                   	nop

c0008910 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	68 80 39 02 c0       	push   0xc0023980
c000891b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891f:	e8 a8 7e ff ff       	call   c00007cc <strcmp>
c0008924:	83 c4 10             	add    esp,0x10
c0008927:	85 c0                	test   eax,eax
c0008929:	0f 94 c0             	sete   al
c000892c:	84 c0                	test   al,al
c000892e:	74 0c                	je     c000893c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008930:	b8 48 7b 02 c0       	mov    eax,0xc0027b48
c0008935:	e9 ea 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000893a:	66 90                	xchg   ax,ax
c000893c:	83 ec 08             	sub    esp,0x8
c000893f:	68 89 39 02 c0       	push   0xc0023989
c0008944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008948:	e8 7f 7e ff ff       	call   c00007cc <strcmp>
c000894d:	83 c4 10             	add    esp,0x10
c0008950:	85 c0                	test   eax,eax
c0008952:	0f 94 c0             	sete   al
c0008955:	84 c0                	test   al,al
c0008957:	74 0b                	je     c0008964 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008959:	b8 14 24 02 c0       	mov    eax,0xc0022414
c000895e:	e9 c1 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008963:	90                   	nop
c0008964:	83 ec 08             	sub    esp,0x8
c0008967:	68 93 39 02 c0       	push   0xc0023993
c000896c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008970:	e8 57 7e ff ff       	call   c00007cc <strcmp>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	0f 94 c0             	sete   al
c000897d:	84 c0                	test   al,al
c000897f:	74 0b                	je     c000898c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008981:	b8 48 21 02 c0       	mov    eax,0xc0022148
c0008986:	e9 99 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000898b:	90                   	nop
c000898c:	83 ec 08             	sub    esp,0x8
c000898f:	68 9c 39 02 c0       	push   0xc002399c
c0008994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008998:	e8 2f 7e ff ff       	call   c00007cc <strcmp>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	85 c0                	test   eax,eax
c00089a2:	0f 94 c0             	sete   al
c00089a5:	84 c0                	test   al,al
c00089a7:	74 07                	je     c00089b0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a9:	b8 14 25 02 c0       	mov    eax,0xc0022514
c00089ae:	eb 74                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089b0:	83 ec 08             	sub    esp,0x8
c00089b3:	68 a6 39 02 c0       	push   0xc00239a6
c00089b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bc:	e8 0b 7e ff ff       	call   c00007cc <strcmp>
c00089c1:	83 c4 10             	add    esp,0x10
c00089c4:	85 c0                	test   eax,eax
c00089c6:	0f 94 c0             	sete   al
c00089c9:	84 c0                	test   al,al
c00089cb:	74 07                	je     c00089d4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089cd:	b8 94 22 02 c0       	mov    eax,0xc0022294
c00089d2:	eb 50                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089d4:	83 ec 08             	sub    esp,0x8
c00089d7:	68 af 39 02 c0       	push   0xc00239af
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 e7 7d ff ff       	call   c00007cc <strcmp>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	85 c0                	test   eax,eax
c00089ea:	0f 94 c0             	sete   al
c00089ed:	84 c0                	test   al,al
c00089ef:	74 07                	je     c00089f8 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089f1:	b8 4c 7b 02 c0       	mov    eax,0xc0027b4c
c00089f6:	eb 2c                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f8:	83 ec 08             	sub    esp,0x8
c00089fb:	68 bc 39 02 c0       	push   0xc00239bc
c0008a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a04:	e8 c3 7d ff ff       	call   c00007cc <strcmp>
c0008a09:	83 c4 10             	add    esp,0x10
c0008a0c:	85 c0                	test   eax,eax
c0008a0e:	0f 94 c0             	sete   al
c0008a11:	84 c0                	test   al,al
c0008a13:	74 07                	je     c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a15:	b8 4d 7b 02 c0       	mov    eax,0xc0027b4d
c0008a1a:	eb 08                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a1c:	b8 00 00 00 00       	mov    eax,0x0
c0008a21:	8d 76 00             	lea    esi,[esi+0x0]
c0008a24:	83 c4 0c             	add    esp,0xc
c0008a27:	c3                   	ret    

c0008a28 <Computer::close(int, int, void*)>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a37:	83 ec 0c             	sub    esp,0xc
c0008a3a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a40:	e8 c3 58 00 00       	call   c000e308 <Device::closeAll()>
c0008a45:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a50:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a54:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a5c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a64:	5b                   	pop    ebx
c0008a65:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a68:	5e                   	pop    esi
c0008a69:	5f                   	pop    edi
c0008a6a:	ff e0                	jmp    eax

c0008a6c <Krnl::firstTask()>:
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 14             	sub    esp,0x14
c0008a70:	68 c9 39 02 c0       	push   0xc00239c9
c0008a75:	e8 e7 0f 00 00       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0008a7a:	fb                   	sti    
c0008a7b:	c7 04 24 e0 39 02 c0 	mov    DWORD PTR [esp],0xc00239e0
c0008a82:	e8 da 0f 00 00       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0008a87:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a8e:	e8 74 0f 00 00       	call   c0009a07 <malloc>
c0008a93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a9a:	89 c3                	mov    ebx,eax
c0008a9c:	ff 35 30 90 02 c0    	push   DWORD PTR ds:0xc0029030
c0008aa2:	68 f9 39 02 c0       	push   0xc00239f9
c0008aa7:	6a 01                	push   0x1
c0008aa9:	50                   	push   eax
c0008aaa:	e8 a1 f5 00 00       	call   c0018050 <Process::Process(bool, char const*, Process*, char**)>
c0008aaf:	83 c4 20             	add    esp,0x20
c0008ab2:	68 ff 00 00 00       	push   0xff
c0008ab7:	6a 00                	push   0x0
c0008ab9:	68 01 94 00 c0       	push   0xc0009401
c0008abe:	53                   	push   ebx
c0008abf:	e8 94 f7 00 00       	call   c0018258 <Process::createThread(void (*)(void*), void*, int)>
c0008ac4:	6a 7a                	push   0x7a
c0008ac6:	6a 00                	push   0x0
c0008ac8:	68 9c 8c 01 c0       	push   0xc0018c9c
c0008acd:	ff 35 30 90 02 c0    	push   DWORD PTR ds:0xc0029030
c0008ad3:	e8 80 f7 00 00       	call   c0018258 <Process::createThread(void (*)(void*), void*, int)>
c0008ad8:	83 c4 14             	add    esp,0x14
c0008adb:	a3 e8 8f 02 c0       	mov    ds:0xc0028fe8,eax
c0008ae0:	68 a0 3b 02 c0       	push   0xc0023ba0
c0008ae5:	c6 05 4d 7b 02 c0 01 	mov    BYTE PTR ds:0xc0027b4d,0x1
c0008aec:	e8 70 0f 00 00       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0008af1:	e8 81 05 01 00       	call   c0019077 <Vm::initialise8086()>
c0008af6:	e8 93 45 00 00       	call   c000d08e <Fs::initVFS()>
c0008afb:	c7 04 24 06 3a 02 c0 	mov    DWORD PTR [esp],0xc0023a06
c0008b02:	e8 5a 0f 00 00       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0008b07:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c0008b0c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b12:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b14:	6a 00                	push   0x0
c0008b16:	6a 00                	push   0x0
c0008b18:	6a 00                	push   0x0
c0008b1a:	50                   	push   eax
c0008b1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b1e:	83 c4 14             	add    esp,0x14
c0008b21:	68 a0 3b 02 c0       	push   0xc0023ba0
c0008b26:	e8 36 0f 00 00       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0008b2b:	e8 8e dd 00 00       	call   c00168be <Sys::loadSyscalls()>
c0008b30:	e8 65 bc 00 00       	call   c001479a <Krnl::loadSystemEnv()>
c0008b35:	83 c4 0c             	add    esp,0xc
c0008b38:	6a 3a                	push   0x3a
c0008b3a:	68 20 3a 02 c0       	push   0xc0023a20
c0008b3f:	68 29 3a 02 c0       	push   0xc0023a29
c0008b44:	e8 38 cb 00 00       	call   c0015681 <Reg::readIntWithDefault(char*, char*, int)>
c0008b49:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b4c:	e8 6f 50 00 00       	call   c000dbc0 <User::loadClockSettings(int)>
c0008b51:	c7 04 24 c4 3b 02 c0 	mov    DWORD PTR [esp],0xc0023bc4
c0008b58:	e8 04 0f 00 00       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0008b5d:	58                   	pop    eax
c0008b5e:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c0008b63:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b69:	e8 5a 57 00 00       	call   c000e2c8 <Device::loadDriversForAll()>
c0008b6e:	c7 04 24 31 3a 02 c0 	mov    DWORD PTR [esp],0xc0023a31
c0008b75:	e8 e7 0e 00 00       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0008b7a:	e8 83 b7 00 00       	call   c0014302 <Krnl::startCPUs()>
c0008b7f:	c7 04 24 4b 3a 02 c0 	mov    DWORD PTR [esp],0xc0023a4b
c0008b86:	e8 d6 0e 00 00       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0008b8b:	5a                   	pop    edx
c0008b8c:	8b 1d 48 7b 02 c0    	mov    ebx,DWORD PTR ds:0xc0027b48
c0008b92:	59                   	pop    ecx
c0008b93:	6a 01                	push   0x1
c0008b95:	68 5c 3a 02 c0       	push   0xc0023a5c
c0008b9a:	e8 ef ee 00 00       	call   c0017a8e <Thr::loadDLL(char const*, bool)>
c0008b9f:	5a                   	pop    edx
c0008ba0:	59                   	pop    ecx
c0008ba1:	53                   	push   ebx
c0008ba2:	50                   	push   eax
c0008ba3:	e8 17 f1 00 00       	call   c0017cbf <Thr::executeDLL(unsigned long, void*)>
c0008ba8:	83 c4 10             	add    esp,0x10
c0008bab:	83 ec 0c             	sub    esp,0xc
c0008bae:	6a 02                	push   0x2
c0008bb0:	e8 b7 fa 00 00       	call   c001866c <blockTask(TaskState)>
c0008bb5:	83 c4 10             	add    esp,0x10
c0008bb8:	eb f1                	jmp    c0008bab <Krnl::firstTask()+0x13f>

c0008bba <Computer::Computer()>:
c0008bba:	83 ec 0c             	sub    esp,0xc
c0008bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc1:	83 ec 08             	sub    esp,0x8
c0008bc4:	68 78 3a 02 c0       	push   0xc0023a78
c0008bc9:	50                   	push   eax
c0008bca:	e8 b3 57 00 00       	call   c000e382 <Device::Device(char const*)>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	ba 74 3c 02 c0       	mov    edx,0xc0023c74
c0008bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bdb:	89 10                	mov    DWORD PTR [eax],edx
c0008bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be1:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bef:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bfd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c03:	83 ca 04             	or     edx,0x4
c0008c06:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c16:	0f b6 d0             	movzx  edx,al
c0008c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c1d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c28:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2e:	0f b6 d0             	movzx  edx,al
c0008c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c35:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c44:	8d 50 01             	lea    edx,[eax+0x1]
c0008c47:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c4b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c51:	0f b6 d0             	movzx  edx,al
c0008c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c58:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c5c:	83 e1 3f             	and    ecx,0x3f
c0008c5f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c6d:	0f b6 d0             	movzx  edx,al
c0008c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c74:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c85:	0f b6 d0             	movzx  edx,al
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c95:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c9b:	8d 50 01             	lea    edx,[eax+0x1]
c0008c9e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ca8:	0f b6 d0             	movzx  edx,al
c0008cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb3:	83 e1 3f             	and    ecx,0x3f
c0008cb6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cc4:	0f b6 d0             	movzx  edx,al
c0008cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ccb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cdc:	0f b6 d0             	movzx  edx,al
c0008cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce3:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf2:	8d 50 01             	lea    edx,[eax+0x1]
c0008cf5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cf9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cff:	0f b6 d0             	movzx  edx,al
c0008d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d06:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d0a:	83 e1 3f             	and    ecx,0x3f
c0008d0d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d11:	90                   	nop
c0008d12:	83 c4 0c             	add    esp,0xc
c0008d15:	c3                   	ret    

c0008d16 <Computer::setBootMessage(char const*)>:
c0008d16:	c3                   	ret    
c0008d17:	90                   	nop

c0008d18 <Computer::detectFeatures()>:
c0008d18:	55                   	push   ebp
c0008d19:	57                   	push   edi
c0008d1a:	56                   	push   esi
c0008d1b:	53                   	push   ebx
c0008d1c:	83 ec 1c             	sub    esp,0x1c
c0008d1f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d23:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d2d:	e8 e7 74 ff ff       	call   c0000219 <detectCPUID>
c0008d32:	85 c0                	test   eax,eax
c0008d34:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d3a:	0f 95 c2             	setne  dl
c0008d3d:	83 e0 fd             	and    eax,0xfffffffd
c0008d40:	d1 e2                	shl    edx,1
c0008d42:	09 d0                	or     eax,edx
c0008d44:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d4a:	a8 02                	test   al,0x2
c0008d4c:	75 46                	jne    c0008d94 <Computer::detectFeatures()+0x7c>
c0008d4e:	f6 05 61 7b 02 c0 04 	test   BYTE PTR ds:0xc0027b61,0x4
c0008d55:	74 07                	je     c0008d5e <Computer::detectFeatures()+0x46>
c0008d57:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d5e:	e8 73 93 01 00       	call   c00220d6 <x87Detect>
c0008d63:	83 e0 01             	and    eax,0x1
c0008d66:	c1 e0 04             	shl    eax,0x4
c0008d69:	88 c2                	mov    dl,al
c0008d6b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d71:	83 e0 ef             	and    eax,0xffffffef
c0008d74:	09 d0                	or     eax,edx
c0008d76:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d7c:	a8 10                	test   al,0x10
c0008d7e:	0f 85 2a 01 00 00    	jne    c0008eae <Computer::detectFeatures()+0x196>
c0008d84:	84 c0                	test   al,al
c0008d86:	0f 88 45 01 00 00    	js     c0008ed1 <Computer::detectFeatures()+0x1b9>
c0008d8c:	83 c4 1c             	add    esp,0x1c
c0008d8f:	5b                   	pop    ebx
c0008d90:	5e                   	pop    esi
c0008d91:	5f                   	pop    edi
c0008d92:	5d                   	pop    ebp
c0008d93:	c3                   	ret    
c0008d94:	83 ec 0c             	sub    esp,0xc
c0008d97:	6a 20                	push   0x20
c0008d99:	e8 08 a4 00 00       	call   c00131a6 <CPU::cpuidCheckEDX(unsigned int)>
c0008d9e:	83 e0 01             	and    eax,0x1
c0008da1:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008da8:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dae:	83 e0 f7             	and    eax,0xfffffff7
c0008db1:	09 d0                	or     eax,edx
c0008db3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008db9:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dc0:	e8 e1 a3 00 00       	call   c00131a6 <CPU::cpuidCheckEDX(unsigned int)>
c0008dc5:	83 e0 01             	and    eax,0x1
c0008dc8:	88 c2                	mov    dl,al
c0008dca:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dd0:	83 e0 fe             	and    eax,0xfffffffe
c0008dd3:	09 d0                	or     eax,edx
c0008dd5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008ddb:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de2:	e8 bf a3 00 00       	call   c00131a6 <CPU::cpuidCheckEDX(unsigned int)>
c0008de7:	c1 e0 07             	shl    eax,0x7
c0008dea:	88 c2                	mov    dl,al
c0008dec:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df2:	83 e0 7f             	and    eax,0x7f
c0008df5:	09 d0                	or     eax,edx
c0008df7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dfd:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e04:	e8 9d a3 00 00       	call   c00131a6 <CPU::cpuidCheckEDX(unsigned int)>
c0008e09:	83 c4 10             	add    esp,0x10
c0008e0c:	83 e0 01             	and    eax,0x1
c0008e0f:	c1 e0 05             	shl    eax,0x5
c0008e12:	88 c2                	mov    dl,al
c0008e14:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e1a:	83 e0 df             	and    eax,0xffffffdf
c0008e1d:	09 d0                	or     eax,edx
c0008e1f:	f7 05 60 7b 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0027b60,0x401
c0008e29:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e2f:	0f 84 c2 00 00 00    	je     c0008ef7 <Computer::detectFeatures()+0x1df>
c0008e35:	83 e0 fe             	and    eax,0xfffffffe
c0008e38:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e3e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e44:	88 c2                	mov    dl,al
c0008e46:	83 e2 09             	and    edx,0x9
c0008e49:	fe ca                	dec    dl
c0008e4b:	75 09                	jne    c0008e56 <Computer::detectFeatures()+0x13e>
c0008e4d:	83 e0 fe             	and    eax,0xfffffffe
c0008e50:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e56:	83 ec 0c             	sub    esp,0xc
c0008e59:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e5d:	50                   	push   eax
c0008e5e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e62:	55                   	push   ebp
c0008e63:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e67:	57                   	push   edi
c0008e68:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e6c:	56                   	push   esi
c0008e6d:	68 00 00 00 80       	push   0x80000000
c0008e72:	e8 ab a2 00 00       	call   c0013122 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e77:	83 c4 20             	add    esp,0x20
c0008e7a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e81:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e85:	0f 86 c3 fe ff ff    	jbe    c0008d4e <Computer::detectFeatures()+0x36>
c0008e8b:	83 ec 0c             	sub    esp,0xc
c0008e8e:	50                   	push   eax
c0008e8f:	55                   	push   ebp
c0008e90:	57                   	push   edi
c0008e91:	56                   	push   esi
c0008e92:	68 01 00 00 80       	push   0x80000001
c0008e97:	e8 86 a2 00 00       	call   c0013122 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e9c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ea6:	83 c4 20             	add    esp,0x20
c0008ea9:	e9 a0 fe ff ff       	jmp    c0008d4e <Computer::detectFeatures()+0x36>
c0008eae:	e8 dd 91 01 00       	call   c0022090 <absolutelyNoChanceInHell>
c0008eb3:	88 c2                	mov    dl,al
c0008eb5:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ebb:	c1 e2 07             	shl    edx,0x7
c0008ebe:	83 e0 7f             	and    eax,0x7f
c0008ec1:	09 d0                	or     eax,edx
c0008ec3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ec9:	84 c0                	test   al,al
c0008ecb:	0f 89 bb fe ff ff    	jns    c0008d8c <Computer::detectFeatures()+0x74>
c0008ed1:	e8 9a 91 01 00       	call   c0022070 <avxDetect>
c0008ed6:	83 e0 01             	and    eax,0x1
c0008ed9:	c1 e0 05             	shl    eax,0x5
c0008edc:	88 c2                	mov    dl,al
c0008ede:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008ee4:	83 e0 df             	and    eax,0xffffffdf
c0008ee7:	09 d0                	or     eax,edx
c0008ee9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008eef:	83 c4 1c             	add    esp,0x1c
c0008ef2:	5b                   	pop    ebx
c0008ef3:	5e                   	pop    esi
c0008ef4:	5f                   	pop    edi
c0008ef5:	5d                   	pop    ebp
c0008ef6:	c3                   	ret    
c0008ef7:	83 ec 0c             	sub    esp,0xc
c0008efa:	68 00 02 00 00       	push   0x200
c0008eff:	e8 a2 a2 00 00       	call   c00131a6 <CPU::cpuidCheckEDX(unsigned int)>
c0008f04:	83 c4 10             	add    esp,0x10
c0008f07:	83 e0 01             	and    eax,0x1
c0008f0a:	88 c2                	mov    dl,al
c0008f0c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f12:	83 e0 fe             	and    eax,0xfffffffe
c0008f15:	09 d0                	or     eax,edx
c0008f17:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f1d:	e9 1c ff ff ff       	jmp    c0008e3e <Computer::detectFeatures()+0x126>

c0008f22 <Computer::displayFeatures()>:
c0008f22:	c3                   	ret    
c0008f23:	90                   	nop

c0008f24 <Computer::rdmsr(unsigned int)>:
c0008f24:	83 ec 0c             	sub    esp,0xc
c0008f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f2b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f32:	74 0a                	je     c0008f3e <Computer::rdmsr(unsigned int)+0x1a>
c0008f34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f38:	0f 32                	rdmsr  
c0008f3a:	83 c4 0c             	add    esp,0xc
c0008f3d:	c3                   	ret    
c0008f3e:	83 ec 0c             	sub    esp,0xc
c0008f41:	68 81 3a 02 c0       	push   0xc0023a81
c0008f46:	e8 58 b9 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c0008f4b:	83 c4 10             	add    esp,0x10
c0008f4e:	eb e4                	jmp    c0008f34 <Computer::rdmsr(unsigned int)+0x10>

c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008f50:	57                   	push   edi
c0008f51:	56                   	push   esi
c0008f52:	52                   	push   edx
c0008f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f57:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008f5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008f5f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f66:	74 0e                	je     c0008f76 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008f68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f6c:	89 f0                	mov    eax,esi
c0008f6e:	89 fa                	mov    edx,edi
c0008f70:	0f 30                	wrmsr  
c0008f72:	58                   	pop    eax
c0008f73:	5e                   	pop    esi
c0008f74:	5f                   	pop    edi
c0008f75:	c3                   	ret    
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	68 87 3a 02 c0       	push   0xc0023a87
c0008f7e:	e8 20 b9 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c0008f83:	83 c4 10             	add    esp,0x10
c0008f86:	eb e0                	jmp    c0008f68 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008f88 <Computer::shutdown()>:
c0008f88:	83 ec 0c             	sub    esp,0xc
c0008f8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f8f:	8b 10                	mov    edx,DWORD PTR [eax]
c0008f91:	6a 00                	push   0x0
c0008f93:	6a 00                	push   0x0
c0008f95:	6a 00                	push   0x0
c0008f97:	50                   	push   eax
c0008f98:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0008f9b:	83 c4 1c             	add    esp,0x1c
c0008f9e:	c3                   	ret    
c0008f9f:	90                   	nop

c0008fa0 <Computer::restart()>:
c0008fa0:	83 ec 0c             	sub    esp,0xc
c0008fa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fa7:	8b 10                	mov    edx,DWORD PTR [eax]
c0008fa9:	6a 00                	push   0x0
c0008fab:	6a 00                	push   0x0
c0008fad:	6a 01                	push   0x1
c0008faf:	50                   	push   eax
c0008fb0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0008fb3:	83 c4 1c             	add    esp,0x1c
c0008fb6:	c3                   	ret    
c0008fb7:	90                   	nop

c0008fb8 <Computer::sleep()>:
c0008fb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fbc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008fc2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008fc6:	e9 c9 97 00 00       	jmp    c0012794 <ACPI::sleep()>
c0008fcb:	90                   	nop

c0008fcc <Computer::nmiEnabled()>:
c0008fcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fd0:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008fd6:	c3                   	ret    
c0008fd7:	90                   	nop

c0008fd8 <Computer::readCMOS(unsigned char)>:
c0008fd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fdc:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008fe3:	19 c0                	sbb    eax,eax
c0008fe5:	83 e0 80             	and    eax,0xffffff80
c0008fe8:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008fec:	e6 70                	out    0x70,al
c0008fee:	e4 71                	in     al,0x71
c0008ff0:	c3                   	ret    
c0008ff1:	90                   	nop

c0008ff2 <Computer::enableNMI(bool)>:
c0008ff2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008ff6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008ffa:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0009000:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0009008:	eb ce                	jmp    c0008fd8 <Computer::readCMOS(unsigned char)>

c000900a <Computer::open(int, int, void*)>:
c000900a:	56                   	push   esi
c000900b:	53                   	push   ebx
c000900c:	83 ec 10             	sub    esp,0x10
c000900f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009013:	68 e4 3b 02 c0       	push   0xc0023be4
c0009018:	e8 44 0a 00 00       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c000901d:	58                   	pop    eax
c000901e:	f6 05 60 7b 02 c0 04 	test   BYTE PTR ds:0xc0027b60,0x4
c0009025:	5a                   	pop    edx
c0009026:	0f 94 05 20 6f 02 c0 	sete   BYTE PTR ds:0xc0026f20
c000902d:	68 58 01 00 00       	push   0x158
c0009032:	68 8d 3a 02 c0       	push   0xc0023a8d
c0009037:	e8 bb 3c 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000903c:	59                   	pop    ecx
c000903d:	5e                   	pop    esi
c000903e:	68 14 01 00 00       	push   0x114
c0009043:	68 a3 3a 02 c0       	push   0xc0023aa3
c0009048:	e8 aa 3c 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000904d:	58                   	pop    eax
c000904e:	5a                   	pop    edx
c000904f:	6a 14                	push   0x14
c0009051:	68 b7 3a 02 c0       	push   0xc0023ab7
c0009056:	e8 9c 3c 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000905b:	59                   	pop    ecx
c000905c:	5e                   	pop    esi
c000905d:	68 1f 07 00 00       	push   0x71f
c0009062:	68 ca 3a 02 c0       	push   0xc0023aca
c0009067:	e8 8b 3c 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000906c:	58                   	pop    eax
c000906d:	5a                   	pop    edx
c000906e:	6a 5f                	push   0x5f
c0009070:	68 e1 3a 02 c0       	push   0xc0023ae1
c0009075:	e8 7d 3c 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000907a:	c7 04 24 f7 3a 02 c0 	mov    DWORD PTR [esp],0xc0023af7
c0009081:	e8 71 3c 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0009086:	c7 04 24 09 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b09
c000908d:	e8 cf 09 00 00       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0009092:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0009099:	e8 69 09 00 00       	call   c0009a07 <malloc>
c000909e:	89 c6                	mov    esi,eax
c00090a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00090a3:	e8 a4 8f 00 00       	call   c001204c <ACPI::ACPI()>
c00090a8:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c00090ae:	c7 04 24 23 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b23
c00090b5:	e8 a7 09 00 00       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c00090ba:	59                   	pop    ecx
c00090bb:	5e                   	pop    esi
c00090bc:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c00090c2:	53                   	push   ebx
c00090c3:	e8 b6 50 00 00       	call   c000e17e <Device::addChild(Device*)>
c00090c8:	c7 04 24 08 3c 02 c0 	mov    DWORD PTR [esp],0xc0023c08
c00090cf:	e8 8d 09 00 00       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c00090d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00090d7:	e8 3c fc ff ff       	call   c0008d18 <Computer::detectFeatures()>
c00090dc:	c7 04 24 28 3c 02 c0 	mov    DWORD PTR [esp],0xc0023c28
c00090e3:	e8 79 09 00 00       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c00090e8:	c7 04 24 3d 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b3d
c00090ef:	e8 6d 09 00 00       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c00090f4:	58                   	pop    eax
c00090f5:	5a                   	pop    edx
c00090f6:	6a 01                	push   0x1
c00090f8:	53                   	push   ebx
c00090f9:	e8 f4 fe ff ff       	call   c0008ff2 <Computer::enableNMI(bool)>
c00090fe:	c7 04 24 31 3a 02 c0 	mov    DWORD PTR [esp],0xc0023a31
c0009105:	e8 57 09 00 00       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c000910a:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c0009111:	e8 f1 08 00 00       	call   c0009a07 <malloc>
c0009116:	89 04 24             	mov    DWORD PTR [esp],eax
c0009119:	89 c6                	mov    esi,eax
c000911b:	e8 3e a1 00 00       	call   c001325e <CPU::CPU()>
c0009120:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0009126:	59                   	pop    ecx
c0009127:	58                   	pop    eax
c0009128:	56                   	push   esi
c0009129:	53                   	push   ebx
c000912a:	e8 4f 50 00 00       	call   c000e17e <Device::addChild(Device*)>
c000912f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0009135:	8b 10                	mov    edx,DWORD PTR [eax]
c0009137:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000913b:	6a 00                	push   0x0
c000913d:	6a 00                	push   0x0
c000913f:	50                   	push   eax
c0009140:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0009143:	83 c4 14             	add    esp,0x14
c0009146:	68 48 3c 02 c0       	push   0xc0023c48
c000914b:	e8 11 09 00 00       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0009150:	e8 c5 55 00 00       	call   c000e71a <setupFPU()>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000915e:	85 c0                	test   eax,eax
c0009160:	74 1f                	je     c0009181 <Computer::open(int, int, void*)+0x177>
c0009162:	83 ec 08             	sub    esp,0x8
c0009165:	50                   	push   eax
c0009166:	53                   	push   ebx
c0009167:	e8 12 50 00 00       	call   c000e17e <Device::addChild(Device*)>
c000916c:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c0009172:	8b 10                	mov    edx,DWORD PTR [eax]
c0009174:	6a 00                	push   0x0
c0009176:	6a 00                	push   0x0
c0009178:	6a 00                	push   0x0
c000917a:	50                   	push   eax
c000917b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000917e:	83 c4 20             	add    esp,0x20
c0009181:	83 ec 0c             	sub    esp,0xc
c0009184:	68 4e 3b 02 c0       	push   0xc0023b4e
c0009189:	e8 d3 08 00 00       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c000918e:	c7 04 24 6c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a6c
c0009195:	e8 d2 f1 00 00       	call   c001836c <setupMultitasking(void (*)())>
c000919a:	83 c4 14             	add    esp,0x14
c000919d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00091a2:	5b                   	pop    ebx
c00091a3:	5e                   	pop    esi
c00091a4:	c3                   	ret    
c00091a5:	90                   	nop

c00091a6 <Computer::disableNMI()>:
c00091a6:	6a 00                	push   0x0
c00091a8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00091ac:	e8 41 fe ff ff       	call   c0008ff2 <Computer::enableNMI(bool)>
c00091b1:	58                   	pop    eax
c00091b2:	5a                   	pop    edx
c00091b3:	c3                   	ret    

c00091b4 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00091b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091b8:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c00091bf:	19 c0                	sbb    eax,eax
c00091c1:	83 e0 80             	and    eax,0xffffff80
c00091c4:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00091c8:	e6 70                	out    0x70,al
c00091ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00091ce:	e6 71                	out    0x71,al
c00091d0:	c3                   	ret    
c00091d1:	90                   	nop

c00091d2 <Computer::handleNMI()>:
c00091d2:	56                   	push   esi
c00091d3:	53                   	push   ebx
c00091d4:	83 ec 10             	sub    esp,0x10
c00091d7:	e4 92                	in     al,0x92
c00091d9:	89 c6                	mov    esi,eax
c00091db:	e4 61                	in     al,0x61
c00091dd:	68 69 3b 02 c0       	push   0xc0023b69
c00091e2:	88 c3                	mov    bl,al
c00091e4:	e8 0e 3b 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c00091e9:	83 c4 10             	add    esp,0x10
c00091ec:	83 e6 10             	and    esi,0x10
c00091ef:	75 0d                	jne    c00091fe <Computer::handleNMI()+0x2c>
c00091f1:	f6 c3 40             	test   bl,0x40
c00091f4:	75 1d                	jne    c0009213 <Computer::handleNMI()+0x41>
c00091f6:	84 db                	test   bl,bl
c00091f8:	78 2d                	js     c0009227 <Computer::handleNMI()+0x55>
c00091fa:	58                   	pop    eax
c00091fb:	5b                   	pop    ebx
c00091fc:	5e                   	pop    esi
c00091fd:	c3                   	ret    
c00091fe:	83 ec 0c             	sub    esp,0xc
c0009201:	68 7a 3b 02 c0       	push   0xc0023b7a
c0009206:	e8 98 b6 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c000920b:	83 c4 10             	add    esp,0x10
c000920e:	f6 c3 40             	test   bl,0x40
c0009211:	74 e3                	je     c00091f6 <Computer::handleNMI()+0x24>
c0009213:	83 ec 0c             	sub    esp,0xc
c0009216:	68 87 3b 02 c0       	push   0xc0023b87
c000921b:	e8 83 b6 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c0009220:	83 c4 10             	add    esp,0x10
c0009223:	84 db                	test   bl,bl
c0009225:	79 d3                	jns    c00091fa <Computer::handleNMI()+0x28>
c0009227:	c7 44 24 10 91 3b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023b91
c000922f:	5a                   	pop    edx
c0009230:	5b                   	pop    ebx
c0009231:	5e                   	pop    esi
c0009232:	e9 6c b6 00 00       	jmp    c00148a3 <Krnl::panic(char const*)>
c0009237:	90                   	nop

c0009238 <Computer::setDiskActivityLight(int, bool)>:
c0009238:	56                   	push   esi
c0009239:	53                   	push   ebx
c000923a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000923e:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009243:	77 1b                	ja     c0009260 <Computer::setDiskActivityLight(int, bool)+0x28>
c0009245:	e4 92                	in     al,0x92
c0009247:	bb 40 00 00 00       	mov    ebx,0x40
c000924c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0009250:	89 da                	mov    edx,ebx
c0009252:	d3 e2                	shl    edx,cl
c0009254:	89 f1                	mov    ecx,esi
c0009256:	f7 d2                	not    edx
c0009258:	d3 e3                	shl    ebx,cl
c000925a:	21 d0                	and    eax,edx
c000925c:	09 d8                	or     eax,ebx
c000925e:	e6 92                	out    0x92,al
c0009260:	5b                   	pop    ebx
c0009261:	5e                   	pop    esi
c0009262:	c3                   	ret    
c0009263:	90                   	nop

c0009264 <GDTEntry::setBase(unsigned int)>:
c0009264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009268:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000926c:	89 c1                	mov    ecx,eax
c000926e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0009272:	c1 e9 10             	shr    ecx,0x10
c0009275:	c1 e8 18             	shr    eax,0x18
c0009278:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000927b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000927e:	c3                   	ret    
c000927f:	90                   	nop

c0009280 <GDTEntry::setLimit(unsigned int)>:
c0009280:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009288:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000928b:	66 89 01             	mov    WORD PTR [ecx],ax
c000928e:	83 e2 f0             	and    edx,0xfffffff0
c0009291:	c1 e8 10             	shr    eax,0x10
c0009294:	83 e0 0f             	and    eax,0xf
c0009297:	09 d0                	or     eax,edx
c0009299:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000929c:	c3                   	ret    
c000929d:	90                   	nop

c000929e <GDT::GDT()>:
c000929e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00092a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00092b2:	90                   	nop
c00092b3:	c3                   	ret    

c00092b4 <GDT::addEntry(GDTEntry)>:
c00092b4:	53                   	push   ebx
c00092b5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00092b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00092bd:	8b 02                	mov    eax,DWORD PTR [edx]
c00092bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00092c3:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00092c7:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00092cb:	8d 48 01             	lea    ecx,[eax+0x1]
c00092ce:	c1 e0 03             	shl    eax,0x3
c00092d1:	89 0a                	mov    DWORD PTR [edx],ecx
c00092d3:	5b                   	pop    ebx
c00092d4:	c3                   	ret    
c00092d5:	90                   	nop

c00092d6 <GDT::getNumberOfEntries()>:
c00092d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092da:	8b 00                	mov    eax,DWORD PTR [eax]
c00092dc:	c3                   	ret    
c00092dd:	90                   	nop

c00092de <GDT::flush()>:
c00092de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092e2:	8b 10                	mov    edx,DWORD PTR [eax]
c00092e4:	83 c0 04             	add    eax,0x4
c00092e7:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00092ee:	a3 52 7b 02 c0       	mov    ds:0xc0027b52,eax
c00092f3:	66 89 15 50 7b 02 c0 	mov    WORD PTR ds:0xc0027b50,dx
c00092fa:	e9 86 70 ff ff       	jmp    c0000385 <loadGDT>
c00092ff:	90                   	nop

c0009300 <GDT::setup()>:
c0009300:	55                   	push   ebp
c0009301:	57                   	push   edi
c0009302:	56                   	push   esi
c0009303:	53                   	push   ebx
c0009304:	83 ec 3c             	sub    esp,0x3c
c0009307:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000930b:	6a 00                	push   0x0
c000930d:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0009311:	53                   	push   ebx
c0009312:	e8 4d ff ff ff       	call   c0009264 <GDTEntry::setBase(unsigned int)>
c0009317:	6a 00                	push   0x0
c0009319:	53                   	push   ebx
c000931a:	e8 61 ff ff ff       	call   c0009280 <GDTEntry::setLimit(unsigned int)>
c000931f:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c0009327:	6a 00                	push   0x0
c0009329:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000932d:	53                   	push   ebx
c000932e:	e8 31 ff ff ff       	call   c0009264 <GDTEntry::setBase(unsigned int)>
c0009333:	68 ff ff ff 00       	push   0xffffff
c0009338:	53                   	push   ebx
c0009339:	e8 42 ff ff ff       	call   c0009280 <GDTEntry::setLimit(unsigned int)>
c000933e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009342:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009347:	0d 00 9a c0 00       	or     eax,0xc09a00
c000934c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009350:	83 c4 20             	add    esp,0x20
c0009353:	6a 00                	push   0x0
c0009355:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0009359:	53                   	push   ebx
c000935a:	e8 05 ff ff ff       	call   c0009264 <GDTEntry::setBase(unsigned int)>
c000935f:	68 ff ff ff 00       	push   0xffffff
c0009364:	53                   	push   ebx
c0009365:	e8 16 ff ff ff       	call   c0009280 <GDTEntry::setLimit(unsigned int)>
c000936a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000936e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009372:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009376:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000937a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000937e:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009383:	0d 00 92 c0 00       	or     eax,0xc09200
c0009388:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000938c:	89 d8                	mov    eax,ebx
c000938e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009392:	80 cc 60             	or     ah,0x60
c0009395:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009399:	83 c4 0c             	add    esp,0xc
c000939c:	89 f8                	mov    eax,edi
c000939e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00093a2:	80 cc 60             	or     ah,0x60
c00093a5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00093a9:	89 c7                	mov    edi,eax
c00093ab:	55                   	push   ebp
c00093ac:	e8 03 ff ff ff       	call   c00092b4 <GDT::addEntry(GDTEntry)>
c00093b1:	83 c4 0c             	add    esp,0xc
c00093b4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00093b8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00093bc:	55                   	push   ebp
c00093bd:	e8 f2 fe ff ff       	call   c00092b4 <GDT::addEntry(GDTEntry)>
c00093c2:	83 c4 0c             	add    esp,0xc
c00093c5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00093c9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00093cd:	55                   	push   ebp
c00093ce:	e8 e1 fe ff ff       	call   c00092b4 <GDT::addEntry(GDTEntry)>
c00093d3:	83 c4 0c             	add    esp,0xc
c00093d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00093da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00093de:	53                   	push   ebx
c00093df:	51                   	push   ecx
c00093e0:	55                   	push   ebp
c00093e1:	e8 ce fe ff ff       	call   c00092b4 <GDT::addEntry(GDTEntry)>
c00093e6:	83 c4 0c             	add    esp,0xc
c00093e9:	57                   	push   edi
c00093ea:	56                   	push   esi
c00093eb:	55                   	push   ebp
c00093ec:	e8 c3 fe ff ff       	call   c00092b4 <GDT::addEntry(GDTEntry)>
c00093f1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093f4:	e8 e5 fe ff ff       	call   c00092de <GDT::flush()>
c00093f9:	83 c4 4c             	add    esp,0x4c
c00093fc:	5b                   	pop    ebx
c00093fd:	5e                   	pop    esi
c00093fe:	5f                   	pop    edi
c00093ff:	5d                   	pop    ebp
c0009400:	c3                   	ret    

c0009401 <idleFunction(void*)>:
c0009401:	53                   	push   ebx
c0009402:	83 ec 08             	sub    esp,0x8
c0009405:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c000940a:	48                   	dec    eax
c000940b:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c0009410:	75 01                	jne    c0009413 <idleFunction(void*)+0x12>
c0009412:	fb                   	sti    
c0009413:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c0009418:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000941e:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c0009425:	74 3c                	je     c0009463 <idleFunction(void*)+0x62>
c0009427:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000942e:	74 33                	je     c0009463 <idleFunction(void*)+0x62>
c0009430:	31 db                	xor    ebx,ebx
c0009432:	52                   	push   edx
c0009433:	52                   	push   edx
c0009434:	68 e1 00 00 00       	push   0xe1
c0009439:	50                   	push   eax
c000943a:	e8 e5 fa ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c000943f:	53                   	push   ebx
c0009440:	83 e0 02             	and    eax,0x2
c0009443:	50                   	push   eax
c0009444:	68 e1 00 00 00       	push   0xe1
c0009449:	ff 35 48 7b 02 c0    	push   DWORD PTR ds:0xc0027b48
c000944f:	e8 fc fa ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c0009454:	83 c4 20             	add    esp,0x20
c0009457:	e8 58 6d ff ff       	call   c00001b4 <doTPAUSE>
c000945c:	e8 35 92 01 00       	call   c0022696 <idleCommon()>
c0009461:	eb f4                	jmp    c0009457 <idleFunction(void*)+0x56>
c0009463:	fb                   	sti    
c0009464:	f4                   	hlt    
c0009465:	e8 2c 92 01 00       	call   c0022696 <idleCommon()>
c000946a:	eb f7                	jmp    c0009463 <idleFunction(void*)+0x62>

c000946c <IDTEntry::IDTEntry(bool)>:
c000946c:	83 ec 04             	sub    esp,0x4
c000946f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009473:	88 04 24             	mov    BYTE PTR [esp],al
c0009476:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000947a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0009480:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009484:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000948c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000948f:	83 e2 f0             	and    edx,0xfffffff0
c0009492:	83 ca 0e             	or     edx,0xe
c0009495:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009498:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000949c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000949f:	83 e2 ef             	and    edx,0xffffffef
c00094a2:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094a5:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00094a9:	74 05                	je     c00094b0 <IDTEntry::IDTEntry(bool)+0x44>
c00094ab:	b2 03                	mov    dl,0x3
c00094ad:	eb 05                	jmp    c00094b4 <IDTEntry::IDTEntry(bool)+0x48>
c00094af:	90                   	nop
c00094b0:	b2 00                	mov    dl,0x0
c00094b2:	66 90                	xchg   ax,ax
c00094b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094b8:	83 e2 03             	and    edx,0x3
c00094bb:	88 d1                	mov    cl,dl
c00094bd:	c1 e1 05             	shl    ecx,0x5
c00094c0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00094c3:	83 e2 9f             	and    edx,0xffffff9f
c00094c6:	09 ca                	or     edx,ecx
c00094c8:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094cf:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00094d2:	83 ca 80             	or     edx,0xffffff80
c00094d5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094d8:	90                   	nop
c00094d9:	83 c4 04             	add    esp,0x4
c00094dc:	c3                   	ret    
c00094dd:	90                   	nop

c00094de <IDTEntry::setOffset(unsigned int)>:
c00094de:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00094e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094e6:	66 89 02             	mov    WORD PTR [edx],ax
c00094e9:	c1 e8 10             	shr    eax,0x10
c00094ec:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00094f0:	c3                   	ret    
c00094f1:	90                   	nop
c00094f2:	66 90                	xchg   ax,ax

c00094f4 <IDT::IDT()>:
c00094f4:	90                   	nop
c00094f5:	c3                   	ret    

c00094f6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00094f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094fa:	83 c0 30             	add    eax,0x30
c00094fd:	c3                   	ret    

c00094fe <IDT::addEntry(IDTEntry, int)>:
c00094fe:	53                   	push   ebx
c00094ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009503:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009507:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000950b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000950f:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0009512:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0009516:	5b                   	pop    ebx
c0009517:	c3                   	ret    

c0009518 <IDT::addEntry(int, void (*)(), bool)>:
c0009518:	53                   	push   ebx
c0009519:	83 ec 10             	sub    esp,0x10
c000951c:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0009521:	50                   	push   eax
c0009522:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0009526:	53                   	push   ebx
c0009527:	e8 40 ff ff ff       	call   c000946c <IDTEntry::IDTEntry(bool)>
c000952c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009530:	53                   	push   ebx
c0009531:	e8 a8 ff ff ff       	call   c00094de <IDTEntry::setOffset(unsigned int)>
c0009536:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000953a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000953e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009542:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009546:	e8 b3 ff ff ff       	call   c00094fe <IDT::addEntry(IDTEntry, int)>
c000954b:	83 c4 30             	add    esp,0x30
c000954e:	5b                   	pop    ebx
c000954f:	c3                   	ret    

c0009550 <IDT::flush()>:
c0009550:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009554:	66 c7 05 58 7b 02 c0 ff 07 	mov    WORD PTR ds:0xc0027b58,0x7ff
c000955d:	a3 5a 7b 02 c0       	mov    ds:0xc0027b5a,eax
c0009562:	0f 01 1d 58 7b 02 c0 	lidtd  ds:0xc0027b58
c0009569:	c3                   	ret    

c000956a <IDT::setup()>:
c000956a:	57                   	push   edi
c000956b:	56                   	push   esi
c000956c:	53                   	push   ebx
c000956d:	83 ec 10             	sub    esp,0x10
c0009570:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009574:	6a 00                	push   0x0
c0009576:	68 a5 03 00 c0       	push   0xc00003a5
c000957b:	6a 00                	push   0x0
c000957d:	53                   	push   ebx
c000957e:	e8 95 ff ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c0009583:	6a 00                	push   0x0
c0009585:	68 b5 03 00 c0       	push   0xc00003b5
c000958a:	6a 01                	push   0x1
c000958c:	53                   	push   ebx
c000958d:	e8 86 ff ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c0009592:	83 c4 20             	add    esp,0x20
c0009595:	6a 00                	push   0x0
c0009597:	68 bf 03 00 c0       	push   0xc00003bf
c000959c:	6a 02                	push   0x2
c000959e:	53                   	push   ebx
c000959f:	e8 74 ff ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c00095a4:	6a 00                	push   0x0
c00095a6:	68 c9 03 00 c0       	push   0xc00003c9
c00095ab:	6a 03                	push   0x3
c00095ad:	53                   	push   ebx
c00095ae:	e8 65 ff ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c00095b3:	83 c4 20             	add    esp,0x20
c00095b6:	6a 00                	push   0x0
c00095b8:	68 d3 03 00 c0       	push   0xc00003d3
c00095bd:	6a 04                	push   0x4
c00095bf:	53                   	push   ebx
c00095c0:	e8 53 ff ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c00095c5:	6a 00                	push   0x0
c00095c7:	68 dd 03 00 c0       	push   0xc00003dd
c00095cc:	6a 05                	push   0x5
c00095ce:	53                   	push   ebx
c00095cf:	e8 44 ff ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c00095d4:	83 c4 20             	add    esp,0x20
c00095d7:	6a 00                	push   0x0
c00095d9:	68 e7 03 00 c0       	push   0xc00003e7
c00095de:	6a 06                	push   0x6
c00095e0:	53                   	push   ebx
c00095e1:	e8 32 ff ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c00095e6:	6a 00                	push   0x0
c00095e8:	68 f1 03 00 c0       	push   0xc00003f1
c00095ed:	6a 07                	push   0x7
c00095ef:	53                   	push   ebx
c00095f0:	e8 23 ff ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c00095f5:	83 c4 20             	add    esp,0x20
c00095f8:	6a 00                	push   0x0
c00095fa:	68 fb 03 00 c0       	push   0xc00003fb
c00095ff:	6a 08                	push   0x8
c0009601:	53                   	push   ebx
c0009602:	e8 11 ff ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c0009607:	6a 00                	push   0x0
c0009609:	68 03 04 00 c0       	push   0xc0000403
c000960e:	6a 09                	push   0x9
c0009610:	53                   	push   ebx
c0009611:	e8 02 ff ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c0009616:	83 c4 20             	add    esp,0x20
c0009619:	6a 00                	push   0x0
c000961b:	68 0d 04 00 c0       	push   0xc000040d
c0009620:	6a 0a                	push   0xa
c0009622:	53                   	push   ebx
c0009623:	e8 f0 fe ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c0009628:	6a 00                	push   0x0
c000962a:	68 15 04 00 c0       	push   0xc0000415
c000962f:	6a 0b                	push   0xb
c0009631:	53                   	push   ebx
c0009632:	e8 e1 fe ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c0009637:	83 c4 20             	add    esp,0x20
c000963a:	6a 00                	push   0x0
c000963c:	68 1d 04 00 c0       	push   0xc000041d
c0009641:	6a 0c                	push   0xc
c0009643:	53                   	push   ebx
c0009644:	e8 cf fe ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c0009649:	6a 00                	push   0x0
c000964b:	68 25 04 00 c0       	push   0xc0000425
c0009650:	6a 0d                	push   0xd
c0009652:	53                   	push   ebx
c0009653:	e8 c0 fe ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c0009658:	83 c4 20             	add    esp,0x20
c000965b:	6a 00                	push   0x0
c000965d:	68 2d 04 00 c0       	push   0xc000042d
c0009662:	6a 0e                	push   0xe
c0009664:	53                   	push   ebx
c0009665:	e8 ae fe ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c000966a:	6a 00                	push   0x0
c000966c:	68 35 04 00 c0       	push   0xc0000435
c0009671:	6a 0f                	push   0xf
c0009673:	53                   	push   ebx
c0009674:	e8 9f fe ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c0009679:	83 c4 20             	add    esp,0x20
c000967c:	6a 00                	push   0x0
c000967e:	68 3f 04 00 c0       	push   0xc000043f
c0009683:	6a 10                	push   0x10
c0009685:	53                   	push   ebx
c0009686:	e8 8d fe ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c000968b:	6a 00                	push   0x0
c000968d:	68 49 04 00 c0       	push   0xc0000449
c0009692:	6a 11                	push   0x11
c0009694:	53                   	push   ebx
c0009695:	e8 7e fe ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c000969a:	83 c4 20             	add    esp,0x20
c000969d:	6a 00                	push   0x0
c000969f:	68 53 04 00 c0       	push   0xc0000453
c00096a4:	6a 12                	push   0x12
c00096a6:	53                   	push   ebx
c00096a7:	e8 6c fe ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c00096ac:	6a 01                	push   0x1
c00096ae:	68 ed 04 00 c0       	push   0xc00004ed
c00096b3:	6a 60                	push   0x60
c00096b5:	53                   	push   ebx
c00096b6:	e8 5d fe ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c00096bb:	83 c4 20             	add    esp,0x20
c00096be:	6a 00                	push   0x0
c00096c0:	68 f4 04 00 c0       	push   0xc00004f4
c00096c5:	6a 20                	push   0x20
c00096c7:	53                   	push   ebx
c00096c8:	e8 4b fe ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c00096cd:	6a 00                	push   0x0
c00096cf:	68 df 04 00 c0       	push   0xc00004df
c00096d4:	6a 21                	push   0x21
c00096d6:	53                   	push   ebx
c00096d7:	e8 3c fe ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c00096dc:	83 c4 20             	add    esp,0x20
c00096df:	6a 00                	push   0x0
c00096e1:	68 e6 04 00 c0       	push   0xc00004e6
c00096e6:	6a 22                	push   0x22
c00096e8:	53                   	push   ebx
c00096e9:	e8 2a fe ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c00096ee:	6a 00                	push   0x0
c00096f0:	68 5d 04 00 c0       	push   0xc000045d
c00096f5:	6a 23                	push   0x23
c00096f7:	53                   	push   ebx
c00096f8:	e8 1b fe ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c00096fd:	83 c4 20             	add    esp,0x20
c0009700:	6a 00                	push   0x0
c0009702:	68 67 04 00 c0       	push   0xc0000467
c0009707:	6a 24                	push   0x24
c0009709:	53                   	push   ebx
c000970a:	e8 09 fe ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c000970f:	6a 00                	push   0x0
c0009711:	68 71 04 00 c0       	push   0xc0000471
c0009716:	6a 25                	push   0x25
c0009718:	53                   	push   ebx
c0009719:	e8 fa fd ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c000971e:	83 c4 20             	add    esp,0x20
c0009721:	6a 00                	push   0x0
c0009723:	68 7b 04 00 c0       	push   0xc000047b
c0009728:	6a 26                	push   0x26
c000972a:	53                   	push   ebx
c000972b:	e8 e8 fd ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c0009730:	6a 00                	push   0x0
c0009732:	68 85 04 00 c0       	push   0xc0000485
c0009737:	6a 27                	push   0x27
c0009739:	53                   	push   ebx
c000973a:	e8 d9 fd ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c000973f:	83 c4 20             	add    esp,0x20
c0009742:	6a 00                	push   0x0
c0009744:	68 8f 04 00 c0       	push   0xc000048f
c0009749:	6a 28                	push   0x28
c000974b:	53                   	push   ebx
c000974c:	e8 c7 fd ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c0009751:	6a 00                	push   0x0
c0009753:	68 99 04 00 c0       	push   0xc0000499
c0009758:	6a 29                	push   0x29
c000975a:	53                   	push   ebx
c000975b:	e8 b8 fd ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c0009760:	83 c4 20             	add    esp,0x20
c0009763:	6a 00                	push   0x0
c0009765:	68 a3 04 00 c0       	push   0xc00004a3
c000976a:	6a 2a                	push   0x2a
c000976c:	53                   	push   ebx
c000976d:	e8 a6 fd ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c0009772:	6a 00                	push   0x0
c0009774:	68 ad 04 00 c0       	push   0xc00004ad
c0009779:	6a 2b                	push   0x2b
c000977b:	53                   	push   ebx
c000977c:	e8 97 fd ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c0009781:	83 c4 20             	add    esp,0x20
c0009784:	6a 00                	push   0x0
c0009786:	68 b7 04 00 c0       	push   0xc00004b7
c000978b:	6a 2c                	push   0x2c
c000978d:	53                   	push   ebx
c000978e:	e8 85 fd ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c0009793:	6a 00                	push   0x0
c0009795:	68 c1 04 00 c0       	push   0xc00004c1
c000979a:	6a 2d                	push   0x2d
c000979c:	53                   	push   ebx
c000979d:	e8 76 fd ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c00097a2:	83 c4 20             	add    esp,0x20
c00097a5:	6a 00                	push   0x0
c00097a7:	68 cb 04 00 c0       	push   0xc00004cb
c00097ac:	6a 2e                	push   0x2e
c00097ae:	53                   	push   ebx
c00097af:	e8 64 fd ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c00097b4:	6a 00                	push   0x0
c00097b6:	68 d5 04 00 c0       	push   0xc00004d5
c00097bb:	6a 2f                	push   0x2f
c00097bd:	53                   	push   ebx
c00097be:	e8 55 fd ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c00097c3:	83 c4 20             	add    esp,0x20
c00097c6:	6a 00                	push   0x0
c00097c8:	68 2b 05 00 c0       	push   0xc000052b
c00097cd:	6a 30                	push   0x30
c00097cf:	53                   	push   ebx
c00097d0:	e8 43 fd ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c00097d5:	6a 00                	push   0x0
c00097d7:	68 35 05 00 c0       	push   0xc0000535
c00097dc:	6a 31                	push   0x31
c00097de:	53                   	push   ebx
c00097df:	e8 34 fd ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c00097e4:	83 c4 20             	add    esp,0x20
c00097e7:	6a 00                	push   0x0
c00097e9:	68 3f 05 00 c0       	push   0xc000053f
c00097ee:	6a 32                	push   0x32
c00097f0:	53                   	push   ebx
c00097f1:	e8 22 fd ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c00097f6:	6a 00                	push   0x0
c00097f8:	68 49 05 00 c0       	push   0xc0000549
c00097fd:	6a 33                	push   0x33
c00097ff:	53                   	push   ebx
c0009800:	e8 13 fd ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c0009805:	83 c4 20             	add    esp,0x20
c0009808:	6a 00                	push   0x0
c000980a:	68 53 05 00 c0       	push   0xc0000553
c000980f:	6a 34                	push   0x34
c0009811:	53                   	push   ebx
c0009812:	e8 01 fd ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c0009817:	6a 00                	push   0x0
c0009819:	68 5d 05 00 c0       	push   0xc000055d
c000981e:	6a 35                	push   0x35
c0009820:	53                   	push   ebx
c0009821:	e8 f2 fc ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c0009826:	83 c4 20             	add    esp,0x20
c0009829:	6a 00                	push   0x0
c000982b:	68 67 05 00 c0       	push   0xc0000567
c0009830:	6a 36                	push   0x36
c0009832:	53                   	push   ebx
c0009833:	e8 e0 fc ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c0009838:	6a 00                	push   0x0
c000983a:	68 71 05 00 c0       	push   0xc0000571
c000983f:	6a 37                	push   0x37
c0009841:	53                   	push   ebx
c0009842:	e8 d1 fc ff ff       	call   c0009518 <IDT::addEntry(int, void (*)(), bool)>
c0009847:	83 c4 1c             	add    esp,0x1c
c000984a:	6a 03                	push   0x3
c000984c:	6a 02                	push   0x2
c000984e:	ff 35 70 7c 02 c0    	push   DWORD PTR ds:0xc0027c70
c0009854:	e8 21 29 00 00       	call   c000c17a <VAS::allocatePages(int, int)>
c0009859:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009860:	89 c6                	mov    esi,eax
c0009862:	e8 a0 01 00 00       	call   c0009a07 <malloc>
c0009867:	81 c6 00 20 00 00    	add    esi,0x2000
c000986d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009870:	89 c7                	mov    edi,eax
c0009872:	e8 9d 1a 00 00       	call   c000b314 <TSS::TSS()>
c0009877:	83 c4 0c             	add    esp,0xc
c000987a:	68 fb 03 00 c0       	push   0xc00003fb
c000987f:	56                   	push   esi
c0009880:	57                   	push   edi
c0009881:	e8 d2 1a 00 00       	call   c000b358 <TSS::setup(unsigned long, unsigned long)>
c0009886:	89 c6                	mov    esi,eax
c0009888:	58                   	pop    eax
c0009889:	5a                   	pop    edx
c000988a:	6a 00                	push   0x0
c000988c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009890:	50                   	push   eax
c0009891:	e8 d6 fb ff ff       	call   c000946c <IDTEntry::IDTEntry(bool)>
c0009896:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000989a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000989f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00098a6:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c00098ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00098b0:	80 ce 05             	or     dh,0x5
c00098b3:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c00098b6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00098be:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00098c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00098c4:	e8 87 fc ff ff       	call   c0009550 <IDT::flush()>
c00098c9:	83 c4 20             	add    esp,0x20
c00098cc:	5b                   	pop    ebx
c00098cd:	5e                   	pop    esi
c00098ce:	5f                   	pop    edi
c00098cf:	c3                   	ret    

c00098d0 <sbrk>:
c00098d0:	55                   	push   ebp
c00098d1:	57                   	push   edi
c00098d2:	56                   	push   esi
c00098d3:	53                   	push   ebx
c00098d4:	83 ec 24             	sub    esp,0x24
c00098d7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00098db:	53                   	push   ebx
c00098dc:	68 98 3c 02 c0       	push   0xc0023c98
c00098e1:	e8 11 34 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c00098e6:	83 c4 10             	add    esp,0x10
c00098e9:	85 db                	test   ebx,ebx
c00098eb:	74 5f                	je     c000994c <sbrk+0x7c>
c00098ed:	78 64                	js     c0009953 <sbrk+0x83>
c00098ef:	a1 a4 6d 02 c0       	mov    eax,ds:0xc0026da4
c00098f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098f8:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c00098fe:	89 dd                	mov    ebp,ebx
c0009900:	78 69                	js     c000996b <sbrk+0x9b>
c0009902:	c1 fd 0c             	sar    ebp,0xc
c0009905:	bb 00 00 00 00       	mov    ebx,0x0
c000990a:	8b 35 70 7c 02 c0    	mov    esi,DWORD PTR ds:0xc0027c70
c0009910:	8b 3d a4 6d 02 c0    	mov    edi,DWORD PTR ds:0xc0026da4
c0009916:	e8 a3 07 00 00       	call   c000a0be <Phys::allocatePage()>
c000991b:	68 01 04 00 00       	push   0x401
c0009920:	57                   	push   edi
c0009921:	50                   	push   eax
c0009922:	56                   	push   esi
c0009923:	e8 50 27 00 00       	call   c000c078 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009928:	81 05 a4 6d 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0026da4,0x1000
c0009932:	43                   	inc    ebx
c0009933:	83 c4 10             	add    esp,0x10
c0009936:	39 dd                	cmp    ebp,ebx
c0009938:	75 d0                	jne    c000990a <sbrk+0x3a>
c000993a:	0f 20 d8             	mov    eax,cr3
c000993d:	0f 22 d8             	mov    cr3,eax
c0009940:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009944:	83 c4 1c             	add    esp,0x1c
c0009947:	5b                   	pop    ebx
c0009948:	5e                   	pop    esi
c0009949:	5f                   	pop    edi
c000994a:	5d                   	pop    ebp
c000994b:	c3                   	ret    
c000994c:	a1 a4 6d 02 c0       	mov    eax,ds:0xc0026da4
c0009951:	eb f1                	jmp    c0009944 <sbrk+0x74>
c0009953:	83 ec 08             	sub    esp,0x8
c0009956:	53                   	push   ebx
c0009957:	68 c4 3c 02 c0       	push   0xc0023cc4
c000995c:	e8 96 33 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0009961:	83 c4 10             	add    esp,0x10
c0009964:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009969:	eb d9                	jmp    c0009944 <sbrk+0x74>
c000996b:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c0009971:	eb 8f                	jmp    c0009902 <sbrk+0x32>

c0009973 <mmap>:
c0009973:	83 ec 18             	sub    esp,0x18
c0009976:	68 b6 3c 02 c0       	push   0xc0023cb6
c000997b:	e8 23 af 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c0009980:	b8 00 00 00 00       	mov    eax,0x0
c0009985:	83 c4 1c             	add    esp,0x1c
c0009988:	c3                   	ret    

c0009989 <munmap>:
c0009989:	83 ec 18             	sub    esp,0x18
c000998c:	68 bb 3c 02 c0       	push   0xc0023cbb
c0009991:	e8 0d af 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c0009996:	b8 00 00 00 00       	mov    eax,0x0
c000999b:	83 c4 1c             	add    esp,0x1c
c000999e:	c3                   	ret    

c000999f <liballoc_lock()>:
c000999f:	fa                   	cli    
c00099a0:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c00099a6:	b8 00 00 00 00       	mov    eax,0x0
c00099ab:	c3                   	ret    

c00099ac <liballoc_unlock()>:
c00099ac:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c00099b1:	48                   	dec    eax
c00099b2:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c00099b7:	75 01                	jne    c00099ba <liballoc_unlock()+0xe>
c00099b9:	fb                   	sti    
c00099ba:	b8 00 00 00 00       	mov    eax,0x0
c00099bf:	c3                   	ret    

c00099c0 <liballoc_alloc(int)>:
c00099c0:	83 ec 10             	sub    esp,0x10
c00099c3:	6a 01                	push   0x1
c00099c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00099c9:	ff 35 70 7c 02 c0    	push   DWORD PTR ds:0xc0027c70
c00099cf:	e8 a6 27 00 00       	call   c000c17a <VAS::allocatePages(int, int)>
c00099d4:	83 c4 1c             	add    esp,0x1c
c00099d7:	c3                   	ret    

c00099d8 <liballoc_free(void*, int)>:
c00099d8:	83 ec 14             	sub    esp,0x14
c00099db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00099df:	ff 35 70 7c 02 c0    	push   DWORD PTR ds:0xc0027c70
c00099e5:	e8 3a 24 00 00       	call   c000be24 <VAS::freeAllocatedPages(unsigned long)>
c00099ea:	b8 00 00 00 00       	mov    eax,0x0
c00099ef:	83 c4 1c             	add    esp,0x1c
c00099f2:	c3                   	ret    

c00099f3 <realloc>:
c00099f3:	83 ec 14             	sub    esp,0x14
c00099f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099fe:	e8 5d 7b ff ff       	call   c0001560 <dlrealloc>
c0009a03:	83 c4 1c             	add    esp,0x1c
c0009a06:	c3                   	ret    

c0009a07 <malloc>:
c0009a07:	83 ec 18             	sub    esp,0x18
c0009a0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a0e:	e8 10 76 ff ff       	call   c0001023 <dlmalloc>
c0009a13:	83 c4 1c             	add    esp,0x1c
c0009a16:	c3                   	ret    

c0009a17 <free>:
c0009a17:	83 ec 18             	sub    esp,0x18
c0009a1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a1e:	e8 a5 72 ff ff       	call   c0000cc8 <dlfree>
c0009a23:	83 c4 1c             	add    esp,0x1c
c0009a26:	c3                   	ret    

c0009a27 <rfree>:
c0009a27:	83 ec 18             	sub    esp,0x18
c0009a2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a2e:	e8 95 72 ff ff       	call   c0000cc8 <dlfree>
c0009a33:	83 c4 1c             	add    esp,0x1c
c0009a36:	c3                   	ret    

c0009a37 <calloc>:
c0009a37:	56                   	push   esi
c0009a38:	53                   	push   ebx
c0009a39:	83 ec 10             	sub    esp,0x10
c0009a3c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009a40:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009a45:	53                   	push   ebx
c0009a46:	e8 bc ff ff ff       	call   c0009a07 <malloc>
c0009a4b:	89 c6                	mov    esi,eax
c0009a4d:	83 c4 0c             	add    esp,0xc
c0009a50:	53                   	push   ebx
c0009a51:	6a 00                	push   0x0
c0009a53:	50                   	push   eax
c0009a54:	e8 2b 6c ff ff       	call   c0000684 <memset>
c0009a59:	89 f0                	mov    eax,esi
c0009a5b:	83 c4 14             	add    esp,0x14
c0009a5e:	5b                   	pop    ebx
c0009a5f:	5e                   	pop    esi
c0009a60:	c3                   	ret    

c0009a61 <Krnl::setBootMessage(char const*)>:
c0009a61:	57                   	push   edi
c0009a62:	56                   	push   esi
c0009a63:	53                   	push   ebx
c0009a64:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009a6a:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009a71:	68 9e 00 00 00       	push   0x9e
c0009a76:	6a 00                	push   0x0
c0009a78:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009a7c:	56                   	push   esi
c0009a7d:	e8 02 6c ff ff       	call   c0000684 <memset>
c0009a82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009a85:	e8 16 6c ff ff       	call   c00006a0 <strlen>
c0009a8a:	ba 50 00 00 00       	mov    edx,0x50
c0009a8f:	83 c4 10             	add    esp,0x10
c0009a92:	29 c2                	sub    edx,eax
c0009a94:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009a98:	d1 ea                	shr    edx,1
c0009a9a:	84 c0                	test   al,al
c0009a9c:	74 19                	je     c0009ab7 <Krnl::setBootMessage(char const*)+0x56>
c0009a9e:	01 d2                	add    edx,edx
c0009aa0:	43                   	inc    ebx
c0009aa1:	01 f2                	add    edx,esi
c0009aa3:	80 cc 0f             	or     ah,0xf
c0009aa6:	83 c2 02             	add    edx,0x2
c0009aa9:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009aad:	43                   	inc    ebx
c0009aae:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009ab3:	84 c0                	test   al,al
c0009ab5:	75 ec                	jne    c0009aa3 <Krnl::setBootMessage(char const*)+0x42>
c0009ab7:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009abc:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009ac1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009ac3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009ac9:	5b                   	pop    ebx
c0009aca:	5e                   	pop    esi
c0009acb:	5f                   	pop    edi
c0009acc:	c3                   	ret    

c0009acd <kernel_main>:
c0009acd:	57                   	push   edi
c0009ace:	56                   	push   esi
c0009acf:	53                   	push   ebx
c0009ad0:	83 ec 20             	sub    esp,0x20
c0009ad3:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009ad8:	a3 60 7b 02 c0       	mov    ds:0xc0027b60,eax
c0009add:	f6 c4 08             	test   ah,0x8
c0009ae0:	0f 85 7a 03 00 00    	jne    c0009e60 <kernel_main+0x393>
c0009ae6:	31 f6                	xor    esi,esi
c0009ae8:	bf f9 03 00 00       	mov    edi,0x3f9
c0009aed:	89 f0                	mov    eax,esi
c0009aef:	89 fa                	mov    edx,edi
c0009af1:	ee                   	out    dx,al
c0009af2:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009af7:	b0 80                	mov    al,0x80
c0009af9:	89 da                	mov    edx,ebx
c0009afb:	ee                   	out    dx,al
c0009afc:	b1 03                	mov    cl,0x3
c0009afe:	ba f8 03 00 00       	mov    edx,0x3f8
c0009b03:	88 c8                	mov    al,cl
c0009b05:	ee                   	out    dx,al
c0009b06:	89 f0                	mov    eax,esi
c0009b08:	89 fa                	mov    edx,edi
c0009b0a:	ee                   	out    dx,al
c0009b0b:	88 c8                	mov    al,cl
c0009b0d:	89 da                	mov    edx,ebx
c0009b0f:	ee                   	out    dx,al
c0009b10:	b0 c7                	mov    al,0xc7
c0009b12:	ba fa 03 00 00       	mov    edx,0x3fa
c0009b17:	ee                   	out    dx,al
c0009b18:	b0 0b                	mov    al,0xb
c0009b1a:	ba fc 03 00 00       	mov    edx,0x3fc
c0009b1f:	ee                   	out    dx,al
c0009b20:	83 ec 0c             	sub    esp,0xc
c0009b23:	68 f4 3c 02 c0       	push   0xc0023cf4
c0009b28:	e8 ca 31 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0009b2d:	83 c4 10             	add    esp,0x10
c0009b30:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c0009b37:	0f 85 eb 02 00 00    	jne    c0009e28 <kernel_main+0x35b>
c0009b3d:	e8 d2 0c 00 00       	call   c000a814 <installVgaTextImplementation()>
c0009b42:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c0009b49:	0f 85 94 02 00 00    	jne    c0009de3 <kernel_main+0x316>
c0009b4f:	0f b6 05 c0 6d 02 c0 	movzx  eax,BYTE PTR ds:0xc0026dc0
c0009b56:	84 c0                	test   al,al
c0009b58:	74 7b                	je     c0009bd5 <kernel_main+0x108>
c0009b5a:	31 db                	xor    ebx,ebx
c0009b5c:	bf 0a 00 00 00       	mov    edi,0xa
c0009b61:	be 05 00 00 00       	mov    esi,0x5
c0009b66:	31 c9                	xor    ecx,ecx
c0009b68:	eb 2a                	jmp    c0009b94 <kernel_main+0xc7>
c0009b6a:	3c 0d                	cmp    al,0xd
c0009b6c:	74 1a                	je     c0009b88 <kernel_main+0xbb>
c0009b6e:	3c 0a                	cmp    al,0xa
c0009b70:	74 40                	je     c0009bb2 <kernel_main+0xe5>
c0009b72:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009b75:	80 cc 0e             	or     ah,0xe
c0009b78:	c1 e2 04             	shl    edx,0x4
c0009b7b:	01 ca                	add    edx,ecx
c0009b7d:	41                   	inc    ecx
c0009b7e:	01 fa                	add    edx,edi
c0009b80:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009b88:	43                   	inc    ebx
c0009b89:	0f b6 83 c0 6d 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd9240]
c0009b90:	84 c0                	test   al,al
c0009b92:	74 32                	je     c0009bc6 <kernel_main+0xf9>
c0009b94:	80 b9 f6 6d 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd920a],0xdb
c0009b9b:	75 cd                	jne    c0009b6a <kernel_main+0x9d>
c0009b9d:	0f b6 91 f5 6d 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd920b]
c0009ba4:	83 e2 fe             	and    edx,0xfffffffe
c0009ba7:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009bad:	75 bb                	jne    c0009b6a <kernel_main+0x9d>
c0009baf:	47                   	inc    edi
c0009bb0:	eb b8                	jmp    c0009b6a <kernel_main+0x9d>
c0009bb2:	43                   	inc    ebx
c0009bb3:	46                   	inc    esi
c0009bb4:	31 c9                	xor    ecx,ecx
c0009bb6:	0f b6 83 c0 6d 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd9240]
c0009bbd:	bf 0a 00 00 00       	mov    edi,0xa
c0009bc2:	84 c0                	test   al,al
c0009bc4:	75 ce                	jne    c0009b94 <kernel_main+0xc7>
c0009bc6:	8b 15 60 7b 02 c0    	mov    edx,DWORD PTR ds:0xc0027b60
c0009bcc:	80 e6 08             	and    dh,0x8
c0009bcf:	0f 85 bf 00 00 00    	jne    c0009c94 <kernel_main+0x1c7>
c0009bd5:	83 ec 0c             	sub    esp,0xc
c0009bd8:	68 90 3d 02 c0       	push   0xc0023d90
c0009bdd:	e8 7f fe ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0009be2:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009be7:	05 ff 0f 00 00       	add    eax,0xfff
c0009bec:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009bf1:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf4:	e8 44 06 00 00       	call   c000a23d <Phys::physicalMemorySetup(unsigned int)>
c0009bf9:	83 c4 10             	add    esp,0x10
c0009bfc:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c0009c03:	0f 85 a2 01 00 00    	jne    c0009dab <kernel_main+0x2de>
c0009c09:	e8 82 1f 00 00       	call   c000bb90 <Virt::virtualMemorySetup()>
c0009c0e:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c0009c15:	0f 85 58 01 00 00    	jne    c0009d73 <kernel_main+0x2a6>
c0009c1b:	83 ec 0c             	sub    esp,0xc
c0009c1e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0009c22:	56                   	push   esi
c0009c23:	e8 24 20 00 00       	call   c000bc4c <VAS::VAS()>
c0009c28:	83 c4 10             	add    esp,0x10
c0009c2b:	89 35 70 7c 02 c0    	mov    DWORD PTR ds:0xc0027c70,esi
c0009c31:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c0009c38:	0f 85 fd 00 00 00    	jne    c0009d3b <kernel_main+0x26e>
c0009c3e:	e8 dd 63 ff ff       	call   c0000020 <callGlobalConstructors>
c0009c43:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c0009c4a:	0f 85 b3 00 00 00    	jne    c0009d03 <kernel_main+0x236>
c0009c50:	83 ec 0c             	sub    esp,0xc
c0009c53:	68 ec 01 00 00       	push   0x1ec
c0009c58:	e8 aa fd ff ff       	call   c0009a07 <malloc>
c0009c5d:	89 c3                	mov    ebx,eax
c0009c5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c62:	e8 53 ef ff ff       	call   c0008bba <Computer::Computer()>
c0009c67:	83 c4 10             	add    esp,0x10
c0009c6a:	89 1d 48 7b 02 c0    	mov    DWORD PTR ds:0xc0027b48,ebx
c0009c70:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c0009c77:	75 53                	jne    c0009ccc <kernel_main+0x1ff>
c0009c79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009c7b:	6a 00                	push   0x0
c0009c7d:	6a 00                	push   0x0
c0009c7f:	6a 00                	push   0x0
c0009c81:	53                   	push   ebx
c0009c82:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009c85:	89 34 24             	mov    DWORD PTR [esp],esi
c0009c88:	e8 6f 22 00 00       	call   c000befc <VAS::~VAS()>
c0009c8d:	83 c4 30             	add    esp,0x30
c0009c90:	5b                   	pop    ebx
c0009c91:	5e                   	pop    esi
c0009c92:	5f                   	pop    edi
c0009c93:	c3                   	ret    
c0009c94:	83 ec 0c             	sub    esp,0xc
c0009c97:	68 3f 3d 02 c0       	push   0xc0023d3f
c0009c9c:	e8 c0 fd ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0009ca1:	83 c4 10             	add    esp,0x10
c0009ca4:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c0009cab:	0f 85 24 ff ff ff    	jne    c0009bd5 <kernel_main+0x108>
c0009cb1:	eb 04                	jmp    c0009cb7 <kernel_main+0x1ea>
c0009cb3:	3c 1c                	cmp    al,0x1c
c0009cb5:	74 06                	je     c0009cbd <kernel_main+0x1f0>
c0009cb7:	e4 60                	in     al,0x60
c0009cb9:	3c 5a                	cmp    al,0x5a
c0009cbb:	75 f6                	jne    c0009cb3 <kernel_main+0x1e6>
c0009cbd:	e4 60                	in     al,0x60
c0009cbf:	3c 5a                	cmp    al,0x5a
c0009cc1:	74 fa                	je     c0009cbd <kernel_main+0x1f0>
c0009cc3:	3c 1c                	cmp    al,0x1c
c0009cc5:	74 f6                	je     c0009cbd <kernel_main+0x1f0>
c0009cc7:	e9 09 ff ff ff       	jmp    c0009bd5 <kernel_main+0x108>
c0009ccc:	83 ec 0c             	sub    esp,0xc
c0009ccf:	68 7e 3d 02 c0       	push   0xc0023d7e
c0009cd4:	e8 88 fd ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0009cd9:	83 c4 10             	add    esp,0x10
c0009cdc:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c0009ce3:	74 0c                	je     c0009cf1 <kernel_main+0x224>
c0009ce5:	8b 1d 48 7b 02 c0    	mov    ebx,DWORD PTR ds:0xc0027b48
c0009ceb:	eb 8c                	jmp    c0009c79 <kernel_main+0x1ac>
c0009ced:	3c 1c                	cmp    al,0x1c
c0009cef:	74 06                	je     c0009cf7 <kernel_main+0x22a>
c0009cf1:	e4 60                	in     al,0x60
c0009cf3:	3c 5a                	cmp    al,0x5a
c0009cf5:	75 f6                	jne    c0009ced <kernel_main+0x220>
c0009cf7:	e4 60                	in     al,0x60
c0009cf9:	3c 5a                	cmp    al,0x5a
c0009cfb:	74 fa                	je     c0009cf7 <kernel_main+0x22a>
c0009cfd:	3c 1c                	cmp    al,0x1c
c0009cff:	74 f6                	je     c0009cf7 <kernel_main+0x22a>
c0009d01:	eb e2                	jmp    c0009ce5 <kernel_main+0x218>
c0009d03:	83 ec 0c             	sub    esp,0xc
c0009d06:	68 6b 3d 02 c0       	push   0xc0023d6b
c0009d0b:	e8 51 fd ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0009d10:	83 c4 10             	add    esp,0x10
c0009d13:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c0009d1a:	0f 85 30 ff ff ff    	jne    c0009c50 <kernel_main+0x183>
c0009d20:	eb 04                	jmp    c0009d26 <kernel_main+0x259>
c0009d22:	3c 1c                	cmp    al,0x1c
c0009d24:	74 06                	je     c0009d2c <kernel_main+0x25f>
c0009d26:	e4 60                	in     al,0x60
c0009d28:	3c 5a                	cmp    al,0x5a
c0009d2a:	75 f6                	jne    c0009d22 <kernel_main+0x255>
c0009d2c:	e4 60                	in     al,0x60
c0009d2e:	3c 5a                	cmp    al,0x5a
c0009d30:	74 fa                	je     c0009d2c <kernel_main+0x25f>
c0009d32:	3c 1c                	cmp    al,0x1c
c0009d34:	74 f6                	je     c0009d2c <kernel_main+0x25f>
c0009d36:	e9 15 ff ff ff       	jmp    c0009c50 <kernel_main+0x183>
c0009d3b:	83 ec 0c             	sub    esp,0xc
c0009d3e:	68 61 3d 02 c0       	push   0xc0023d61
c0009d43:	e8 19 fd ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0009d48:	83 c4 10             	add    esp,0x10
c0009d4b:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c0009d52:	0f 85 e6 fe ff ff    	jne    c0009c3e <kernel_main+0x171>
c0009d58:	eb 04                	jmp    c0009d5e <kernel_main+0x291>
c0009d5a:	3c 1c                	cmp    al,0x1c
c0009d5c:	74 06                	je     c0009d64 <kernel_main+0x297>
c0009d5e:	e4 60                	in     al,0x60
c0009d60:	3c 5a                	cmp    al,0x5a
c0009d62:	75 f6                	jne    c0009d5a <kernel_main+0x28d>
c0009d64:	e4 60                	in     al,0x60
c0009d66:	3c 5a                	cmp    al,0x5a
c0009d68:	74 fa                	je     c0009d64 <kernel_main+0x297>
c0009d6a:	3c 1c                	cmp    al,0x1c
c0009d6c:	74 f6                	je     c0009d64 <kernel_main+0x297>
c0009d6e:	e9 cb fe ff ff       	jmp    c0009c3e <kernel_main+0x171>
c0009d73:	83 ec 0c             	sub    esp,0xc
c0009d76:	68 56 3d 02 c0       	push   0xc0023d56
c0009d7b:	e8 e1 fc ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0009d80:	83 c4 10             	add    esp,0x10
c0009d83:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c0009d8a:	0f 85 8b fe ff ff    	jne    c0009c1b <kernel_main+0x14e>
c0009d90:	eb 04                	jmp    c0009d96 <kernel_main+0x2c9>
c0009d92:	3c 1c                	cmp    al,0x1c
c0009d94:	74 06                	je     c0009d9c <kernel_main+0x2cf>
c0009d96:	e4 60                	in     al,0x60
c0009d98:	3c 5a                	cmp    al,0x5a
c0009d9a:	75 f6                	jne    c0009d92 <kernel_main+0x2c5>
c0009d9c:	e4 60                	in     al,0x60
c0009d9e:	3c 5a                	cmp    al,0x5a
c0009da0:	74 fa                	je     c0009d9c <kernel_main+0x2cf>
c0009da2:	3c 1c                	cmp    al,0x1c
c0009da4:	74 f6                	je     c0009d9c <kernel_main+0x2cf>
c0009da6:	e9 70 fe ff ff       	jmp    c0009c1b <kernel_main+0x14e>
c0009dab:	83 ec 0c             	sub    esp,0xc
c0009dae:	68 4b 3d 02 c0       	push   0xc0023d4b
c0009db3:	e8 a9 fc ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0009db8:	83 c4 10             	add    esp,0x10
c0009dbb:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c0009dc2:	0f 85 41 fe ff ff    	jne    c0009c09 <kernel_main+0x13c>
c0009dc8:	eb 04                	jmp    c0009dce <kernel_main+0x301>
c0009dca:	3c 1c                	cmp    al,0x1c
c0009dcc:	74 06                	je     c0009dd4 <kernel_main+0x307>
c0009dce:	e4 60                	in     al,0x60
c0009dd0:	3c 5a                	cmp    al,0x5a
c0009dd2:	75 f6                	jne    c0009dca <kernel_main+0x2fd>
c0009dd4:	e4 60                	in     al,0x60
c0009dd6:	3c 5a                	cmp    al,0x5a
c0009dd8:	74 fa                	je     c0009dd4 <kernel_main+0x307>
c0009dda:	3c 1c                	cmp    al,0x1c
c0009ddc:	74 f6                	je     c0009dd4 <kernel_main+0x307>
c0009dde:	e9 26 fe ff ff       	jmp    c0009c09 <kernel_main+0x13c>
c0009de3:	83 ec 0c             	sub    esp,0xc
c0009de6:	68 2d 3d 02 c0       	push   0xc0023d2d
c0009deb:	e8 71 fc ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0009df0:	8b 15 60 7b 02 c0    	mov    edx,DWORD PTR ds:0xc0027b60
c0009df6:	83 c4 10             	add    esp,0x10
c0009df9:	f6 c2 80             	test   dl,0x80
c0009dfc:	74 18                	je     c0009e16 <kernel_main+0x349>
c0009dfe:	0f b6 05 c0 6d 02 c0 	movzx  eax,BYTE PTR ds:0xc0026dc0
c0009e05:	84 c0                	test   al,al
c0009e07:	0f 85 4d fd ff ff    	jne    c0009b5a <kernel_main+0x8d>
c0009e0d:	e9 ba fd ff ff       	jmp    c0009bcc <kernel_main+0xff>
c0009e12:	3c 1c                	cmp    al,0x1c
c0009e14:	74 06                	je     c0009e1c <kernel_main+0x34f>
c0009e16:	e4 60                	in     al,0x60
c0009e18:	3c 5a                	cmp    al,0x5a
c0009e1a:	75 f6                	jne    c0009e12 <kernel_main+0x345>
c0009e1c:	e4 60                	in     al,0x60
c0009e1e:	3c 5a                	cmp    al,0x5a
c0009e20:	74 fa                	je     c0009e1c <kernel_main+0x34f>
c0009e22:	3c 1c                	cmp    al,0x1c
c0009e24:	74 f6                	je     c0009e1c <kernel_main+0x34f>
c0009e26:	eb d6                	jmp    c0009dfe <kernel_main+0x331>
c0009e28:	83 ec 0c             	sub    esp,0xc
c0009e2b:	68 1e 3d 02 c0       	push   0xc0023d1e
c0009e30:	e8 2c fc ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c0009e3f:	0f 85 f8 fc ff ff    	jne    c0009b3d <kernel_main+0x70>
c0009e45:	eb 04                	jmp    c0009e4b <kernel_main+0x37e>
c0009e47:	3c 1c                	cmp    al,0x1c
c0009e49:	74 06                	je     c0009e51 <kernel_main+0x384>
c0009e4b:	e4 60                	in     al,0x60
c0009e4d:	3c 5a                	cmp    al,0x5a
c0009e4f:	75 f6                	jne    c0009e47 <kernel_main+0x37a>
c0009e51:	e4 60                	in     al,0x60
c0009e53:	3c 5a                	cmp    al,0x5a
c0009e55:	74 fa                	je     c0009e51 <kernel_main+0x384>
c0009e57:	3c 1c                	cmp    al,0x1c
c0009e59:	74 f6                	je     c0009e51 <kernel_main+0x384>
c0009e5b:	e9 dd fc ff ff       	jmp    c0009b3d <kernel_main+0x70>
c0009e60:	83 ec 0c             	sub    esp,0xc
c0009e63:	68 0b 3d 02 c0       	push   0xc0023d0b
c0009e68:	e8 f4 fb ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0009e6d:	83 c4 10             	add    esp,0x10
c0009e70:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c0009e77:	0f 85 69 fc ff ff    	jne    c0009ae6 <kernel_main+0x19>
c0009e7d:	eb 04                	jmp    c0009e83 <kernel_main+0x3b6>
c0009e7f:	3c 1c                	cmp    al,0x1c
c0009e81:	74 06                	je     c0009e89 <kernel_main+0x3bc>
c0009e83:	e4 60                	in     al,0x60
c0009e85:	3c 5a                	cmp    al,0x5a
c0009e87:	75 f6                	jne    c0009e7f <kernel_main+0x3b2>
c0009e89:	e4 60                	in     al,0x60
c0009e8b:	3c 5a                	cmp    al,0x5a
c0009e8d:	74 fa                	je     c0009e89 <kernel_main+0x3bc>
c0009e8f:	3c 1c                	cmp    al,0x1c
c0009e91:	74 f6                	je     c0009e89 <kernel_main+0x3bc>
c0009e93:	e9 4e fc ff ff       	jmp    c0009ae6 <kernel_main+0x19>

c0009e98 <Phys::allocateDMA(unsigned long)>:
c0009e98:	55                   	push   ebp
c0009e99:	31 ed                	xor    ebp,ebp
c0009e9b:	57                   	push   edi
c0009e9c:	56                   	push   esi
c0009e9d:	53                   	push   ebx
c0009e9e:	31 db                	xor    ebx,ebx
c0009ea0:	83 ec 28             	sub    esp,0x28
c0009ea3:	68 af 3d 02 c0       	push   0xc0023daf
c0009ea8:	e8 4a 2e 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0009ead:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009eb1:	83 c4 10             	add    esp,0x10
c0009eb4:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0009eba:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009ec2:	c1 ef 0c             	shr    edi,0xc
c0009ec5:	31 c0                	xor    eax,eax
c0009ec7:	eb 19                	jmp    c0009ee2 <Phys::allocateDMA(unsigned long)+0x4a>
c0009ec9:	85 c0                	test   eax,eax
c0009ecb:	75 06                	jne    c0009ed3 <Phys::allocateDMA(unsigned long)+0x3b>
c0009ecd:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009ed1:	89 dd                	mov    ebp,ebx
c0009ed3:	8d 70 01             	lea    esi,[eax+0x1]
c0009ed6:	39 f7                	cmp    edi,esi
c0009ed8:	74 3f                	je     c0009f19 <Phys::allocateDMA(unsigned long)+0x81>
c0009eda:	89 f0                	mov    eax,esi
c0009edc:	43                   	inc    ebx
c0009edd:	83 fb 0f             	cmp    ebx,0xf
c0009ee0:	7f 11                	jg     c0009ef3 <Phys::allocateDMA(unsigned long)+0x5b>
c0009ee2:	80 bb 7c 7b 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd8484],0x0
c0009ee9:	74 de                	je     c0009ec9 <Phys::allocateDMA(unsigned long)+0x31>
c0009eeb:	31 c0                	xor    eax,eax
c0009eed:	43                   	inc    ebx
c0009eee:	83 fb 0f             	cmp    ebx,0xf
c0009ef1:	7e ef                	jle    c0009ee2 <Phys::allocateDMA(unsigned long)+0x4a>
c0009ef3:	83 ec 0c             	sub    esp,0xc
c0009ef6:	68 e3 3d 02 c0       	push   0xc0023de3
c0009efb:	e8 f7 2d 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0009f00:	c7 04 24 a0 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ea0
c0009f07:	e8 97 a9 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c0009f0c:	83 c4 10             	add    esp,0x10
c0009f0f:	31 c0                	xor    eax,eax
c0009f11:	83 c4 1c             	add    esp,0x1c
c0009f14:	5b                   	pop    ebx
c0009f15:	5e                   	pop    esi
c0009f16:	5f                   	pop    edi
c0009f17:	5d                   	pop    ebp
c0009f18:	c3                   	ret    
c0009f19:	89 e9                	mov    ecx,ebp
c0009f1b:	c1 f9 04             	sar    ecx,0x4
c0009f1e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009f22:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0009f26:	89 ca                	mov    edx,ecx
c0009f28:	4a                   	dec    edx
c0009f29:	79 03                	jns    c0009f2e <Phys::allocateDMA(unsigned long)+0x96>
c0009f2b:	8d 51 0e             	lea    edx,[ecx+0xe]
c0009f2e:	c1 fa 04             	sar    edx,0x4
c0009f31:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0009f35:	74 08                	je     c0009f3f <Phys::allocateDMA(unsigned long)+0xa7>
c0009f37:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f3b:	31 c0                	xor    eax,eax
c0009f3d:	eb ae                	jmp    c0009eed <Phys::allocateDMA(unsigned long)+0x55>
c0009f3f:	85 f6                	test   esi,esi
c0009f41:	74 15                	je     c0009f58 <Phys::allocateDMA(unsigned long)+0xc0>
c0009f43:	8d 95 7c 7b 02 c0    	lea    edx,[ebp-0x3ffd8484]
c0009f49:	8d 84 05 7d 7b 02 c0 	lea    eax,[ebp+eax*1-0x3ffd8483]
c0009f50:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009f53:	42                   	inc    edx
c0009f54:	39 d0                	cmp    eax,edx
c0009f56:	75 f8                	jne    c0009f50 <Phys::allocateDMA(unsigned long)+0xb8>
c0009f58:	83 ec 0c             	sub    esp,0xc
c0009f5b:	01 3d 74 7b 02 c0    	add    DWORD PTR ds:0xc0027b74,edi
c0009f61:	68 c8 3d 02 c0       	push   0xc0023dc8
c0009f66:	e8 8c 2d 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0009f6b:	83 c4 10             	add    esp,0x10
c0009f6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f72:	85 c0                	test   eax,eax
c0009f74:	74 23                	je     c0009f99 <Phys::allocateDMA(unsigned long)+0x101>
c0009f76:	83 ec 0c             	sub    esp,0xc
c0009f79:	68 df 3d 02 c0       	push   0xc0023ddf
c0009f7e:	e8 74 2d 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0009f83:	c7 04 24 a0 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ea0
c0009f8a:	e8 14 a9 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c0009f8f:	83 c4 10             	add    esp,0x10
c0009f92:	89 f0                	mov    eax,esi
c0009f94:	e9 43 ff ff ff       	jmp    c0009edc <Phys::allocateDMA(unsigned long)+0x44>
c0009f99:	c1 e5 0c             	shl    ebp,0xc
c0009f9c:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0009fa2:	e9 6a ff ff ff       	jmp    c0009f11 <Phys::allocateDMA(unsigned long)+0x79>

c0009fa7 <Phys::freeDMA(unsigned long, unsigned long)>:
c0009fa7:	83 ec 18             	sub    esp,0x18
c0009faa:	68 e7 3d 02 c0       	push   0xc0023de7
c0009faf:	e8 43 2d 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0009fb4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009fb8:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0009fbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009fc2:	c1 ea 0c             	shr    edx,0xc
c0009fc5:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0009fca:	29 15 74 7b 02 c0    	sub    DWORD PTR ds:0xc0027b74,edx
c0009fd0:	c1 e8 0c             	shr    eax,0xc
c0009fd3:	83 c4 10             	add    esp,0x10
c0009fd6:	85 d2                	test   edx,edx
c0009fd8:	74 0f                	je     c0009fe9 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c0009fda:	05 7c 7b 02 c0       	add    eax,0xc0027b7c
c0009fdf:	01 c2                	add    edx,eax
c0009fe1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009fe4:	40                   	inc    eax
c0009fe5:	39 d0                	cmp    eax,edx
c0009fe7:	75 f8                	jne    c0009fe1 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0009fe9:	83 c4 0c             	add    esp,0xc
c0009fec:	c3                   	ret    

c0009fed <Phys::setPageState(unsigned long, bool)>:
c0009fed:	56                   	push   esi
c0009fee:	ba 01 00 00 00       	mov    edx,0x1
c0009ff3:	53                   	push   ebx
c0009ff4:	8b 35 04 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026f04
c0009ffa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009ffe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a002:	89 c8                	mov    eax,ecx
c000a004:	83 e1 07             	and    ecx,0x7
c000a007:	c1 e8 03             	shr    eax,0x3
c000a00a:	d3 e3                	shl    ebx,cl
c000a00c:	01 c6                	add    esi,eax
c000a00e:	d3 e2                	shl    edx,cl
c000a010:	f7 d2                	not    edx
c000a012:	20 16                	and    BYTE PTR [esi],dl
c000a014:	03 05 04 6f 02 c0    	add    eax,DWORD PTR ds:0xc0026f04
c000a01a:	08 18                	or     BYTE PTR [eax],bl
c000a01c:	5b                   	pop    ebx
c000a01d:	5e                   	pop    esi
c000a01e:	c3                   	ret    

c000a01f <Phys::getPageState(unsigned long)>:
c000a01f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a023:	8b 15 04 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026f04
c000a029:	89 c8                	mov    eax,ecx
c000a02b:	83 e1 07             	and    ecx,0x7
c000a02e:	c1 e8 03             	shr    eax,0x3
c000a031:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000a035:	d3 f8                	sar    eax,cl
c000a037:	83 e0 01             	and    eax,0x1
c000a03a:	c3                   	ret    

c000a03b <Phys::freePage(unsigned long)>:
c000a03b:	53                   	push   ebx
c000a03c:	83 ec 10             	sub    esp,0x10
c000a03f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a043:	53                   	push   ebx
c000a044:	68 fd 3d 02 c0       	push   0xc0023dfd
c000a049:	e8 a9 2c 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000a04e:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c000a054:	83 c4 10             	add    esp,0x10
c000a057:	3d ff ff 00 00       	cmp    eax,0xffff
c000a05c:	76 3d                	jbe    c000a09b <Phys::freePage(unsigned long)+0x60>
c000a05e:	83 ec 0c             	sub    esp,0xc
c000a061:	c1 eb 0c             	shr    ebx,0xc
c000a064:	53                   	push   ebx
c000a065:	e8 b5 ff ff ff       	call   c000a01f <Phys::getPageState(unsigned long)>
c000a06a:	83 c4 10             	add    esp,0x10
c000a06d:	84 c0                	test   al,al
c000a06f:	74 19                	je     c000a08a <Phys::freePage(unsigned long)+0x4f>
c000a071:	83 ec 08             	sub    esp,0x8
c000a074:	ff 0d 74 7b 02 c0    	dec    DWORD PTR ds:0xc0027b74
c000a07a:	6a 00                	push   0x0
c000a07c:	53                   	push   ebx
c000a07d:	e8 6b ff ff ff       	call   c0009fed <Phys::setPageState(unsigned long, bool)>
c000a082:	83 c4 10             	add    esp,0x10
c000a085:	83 c4 08             	add    esp,0x8
c000a088:	5b                   	pop    ebx
c000a089:	c3                   	ret    
c000a08a:	c7 44 24 10 27 3e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023e27
c000a092:	83 c4 08             	add    esp,0x8
c000a095:	5b                   	pop    ebx
c000a096:	e9 08 a8 00 00       	jmp    c00148a3 <Krnl::panic(char const*)>
c000a09b:	83 ec 08             	sub    esp,0x8
c000a09e:	53                   	push   ebx
c000a09f:	68 10 3e 02 c0       	push   0xc0023e10
c000a0a4:	e8 4e 2c 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000a0a9:	58                   	pop    eax
c000a0aa:	5a                   	pop    edx
c000a0ab:	68 00 10 00 00       	push   0x1000
c000a0b0:	53                   	push   ebx
c000a0b1:	e8 f1 fe ff ff       	call   c0009fa7 <Phys::freeDMA(unsigned long, unsigned long)>
c000a0b6:	83 c4 10             	add    esp,0x10
c000a0b9:	83 c4 08             	add    esp,0x8
c000a0bc:	5b                   	pop    ebx
c000a0bd:	c3                   	ret    

c000a0be <Phys::allocatePage()>:
c000a0be:	56                   	push   esi
c000a0bf:	53                   	push   ebx
c000a0c0:	83 ec 14             	sub    esp,0x14
c000a0c3:	8b 35 68 7b 02 c0    	mov    esi,DWORD PTR ds:0xc0027b68
c000a0c9:	89 f3                	mov    ebx,esi
c000a0cb:	eb 0a                	jmp    c000a0d7 <Phys::allocatePage()+0x19>
c000a0cd:	89 1d 68 7b 02 c0    	mov    DWORD PTR ds:0xc0027b68,ebx
c000a0d3:	39 de                	cmp    esi,ebx
c000a0d5:	74 24                	je     c000a0fb <Phys::allocatePage()+0x3d>
c000a0d7:	53                   	push   ebx
c000a0d8:	e8 42 ff ff ff       	call   c000a01f <Phys::getPageState(unsigned long)>
c000a0dd:	5a                   	pop    edx
c000a0de:	84 c0                	test   al,al
c000a0e0:	74 69                	je     c000a14b <Phys::allocatePage()+0x8d>
c000a0e2:	43                   	inc    ebx
c000a0e3:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a0e9:	75 e2                	jne    c000a0cd <Phys::allocatePage()+0xf>
c000a0eb:	31 db                	xor    ebx,ebx
c000a0ed:	c7 05 68 7b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027b68,0x0
c000a0f7:	39 de                	cmp    esi,ebx
c000a0f9:	75 dc                	jne    c000a0d7 <Phys::allocatePage()+0x19>
c000a0fb:	83 ec 0c             	sub    esp,0xc
c000a0fe:	80 35 8c 7b 02 c0 01 	xor    BYTE PTR ds:0xc0027b8c,0x1
c000a105:	68 c8 3e 02 c0       	push   0xc0023ec8
c000a10a:	e8 e8 2b 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000a10f:	58                   	pop    eax
c000a110:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a115:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a118:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a11e:	e8 63 28 00 00       	call   c000c986 <VAS::scanForEviction()>
c000a123:	83 c4 10             	add    esp,0x10
c000a126:	85 c0                	test   eax,eax
c000a128:	75 62                	jne    c000a18c <Phys::allocatePage()+0xce>
c000a12a:	83 ec 0c             	sub    esp,0xc
c000a12d:	68 ec 3e 02 c0       	push   0xc0023eec
c000a132:	e8 6c a7 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c000a137:	83 c4 10             	add    esp,0x10
c000a13a:	8b 1d 68 7b 02 c0    	mov    ebx,DWORD PTR ds:0xc0027b68
c000a140:	53                   	push   ebx
c000a141:	e8 d9 fe ff ff       	call   c000a01f <Phys::getPageState(unsigned long)>
c000a146:	5a                   	pop    edx
c000a147:	84 c0                	test   al,al
c000a149:	75 97                	jne    c000a0e2 <Phys::allocatePage()+0x24>
c000a14b:	6a 01                	push   0x1
c000a14d:	53                   	push   ebx
c000a14e:	e8 9a fe ff ff       	call   c0009fed <Phys::setPageState(unsigned long, bool)>
c000a153:	5a                   	pop    edx
c000a154:	a1 74 7b 02 c0       	mov    eax,ds:0xc0027b74
c000a159:	59                   	pop    ecx
c000a15a:	40                   	inc    eax
c000a15b:	8b 15 68 7b 02 c0    	mov    edx,DWORD PTR ds:0xc0027b68
c000a161:	a3 74 7b 02 c0       	mov    ds:0xc0027b74,eax
c000a166:	c1 e2 0c             	shl    edx,0xc
c000a169:	52                   	push   edx
c000a16a:	ff 35 78 7b 02 c0    	push   DWORD PTR ds:0xc0027b78
c000a170:	50                   	push   eax
c000a171:	68 3d 3e 02 c0       	push   0xc0023e3d
c000a176:	e8 7c 2b 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000a17b:	a1 68 7b 02 c0       	mov    eax,ds:0xc0027b68
c000a180:	83 c4 10             	add    esp,0x10
c000a183:	c1 e0 0c             	shl    eax,0xc
c000a186:	83 c4 14             	add    esp,0x14
c000a189:	5b                   	pop    ebx
c000a18a:	5e                   	pop    esi
c000a18b:	c3                   	ret    
c000a18c:	83 ec 08             	sub    esp,0x8
c000a18f:	89 c2                	mov    edx,eax
c000a191:	6a 01                	push   0x1
c000a193:	c1 ea 0c             	shr    edx,0xc
c000a196:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a19a:	52                   	push   edx
c000a19b:	e8 4d fe ff ff       	call   c0009fed <Phys::setPageState(unsigned long, bool)>
c000a1a0:	83 c4 10             	add    esp,0x10
c000a1a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1a7:	eb dd                	jmp    c000a186 <Phys::allocatePage()+0xc8>

c000a1a9 <Phys::allocateContiguousPages(int)>:
c000a1a9:	57                   	push   edi
c000a1aa:	56                   	push   esi
c000a1ab:	53                   	push   ebx
c000a1ac:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a1b0:	fa                   	cli    
c000a1b1:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c000a1b7:	31 db                	xor    ebx,ebx
c000a1b9:	85 db                	test   ebx,ebx
c000a1bb:	75 11                	jne    c000a1ce <Phys::allocateContiguousPages(int)+0x25>
c000a1bd:	e8 fc fe ff ff       	call   c000a0be <Phys::allocatePage()>
c000a1c2:	83 fe 01             	cmp    esi,0x1
c000a1c5:	89 c7                	mov    edi,eax
c000a1c7:	74 21                	je     c000a1ea <Phys::allocateContiguousPages(int)+0x41>
c000a1c9:	bb 01 00 00 00       	mov    ebx,0x1
c000a1ce:	e8 eb fe ff ff       	call   c000a0be <Phys::allocatePage()>
c000a1d3:	89 da                	mov    edx,ebx
c000a1d5:	c1 e2 0c             	shl    edx,0xc
c000a1d8:	01 fa                	add    edx,edi
c000a1da:	39 c2                	cmp    edx,eax
c000a1dc:	74 20                	je     c000a1fe <Phys::allocateContiguousPages(int)+0x55>
c000a1de:	bb 01 00 00 00       	mov    ebx,0x1
c000a1e3:	89 c7                	mov    edi,eax
c000a1e5:	83 fe 01             	cmp    esi,0x1
c000a1e8:	75 e4                	jne    c000a1ce <Phys::allocateContiguousPages(int)+0x25>
c000a1ea:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c000a1ef:	48                   	dec    eax
c000a1f0:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c000a1f5:	75 01                	jne    c000a1f8 <Phys::allocateContiguousPages(int)+0x4f>
c000a1f7:	fb                   	sti    
c000a1f8:	89 f8                	mov    eax,edi
c000a1fa:	5b                   	pop    ebx
c000a1fb:	5e                   	pop    esi
c000a1fc:	5f                   	pop    edi
c000a1fd:	c3                   	ret    
c000a1fe:	43                   	inc    ebx
c000a1ff:	39 f3                	cmp    ebx,esi
c000a201:	75 b6                	jne    c000a1b9 <Phys::allocateContiguousPages(int)+0x10>
c000a203:	eb e5                	jmp    c000a1ea <Phys::allocateContiguousPages(int)+0x41>

c000a205 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a205:	56                   	push   esi
c000a206:	53                   	push   ebx
c000a207:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a20b:	39 1d 6c 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b6c,ebx
c000a211:	73 06                	jae    c000a219 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a213:	89 1d 6c 7b 02 c0    	mov    DWORD PTR ds:0xc0027b6c,ebx
c000a219:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a21d:	c1 eb 0c             	shr    ebx,0xc
c000a220:	c1 e8 0c             	shr    eax,0xc
c000a223:	39 d8                	cmp    eax,ebx
c000a225:	73 13                	jae    c000a23a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a227:	6a 00                	push   0x0
c000a229:	8d 70 01             	lea    esi,[eax+0x1]
c000a22c:	50                   	push   eax
c000a22d:	e8 bb fd ff ff       	call   c0009fed <Phys::setPageState(unsigned long, bool)>
c000a232:	5a                   	pop    edx
c000a233:	89 f0                	mov    eax,esi
c000a235:	59                   	pop    ecx
c000a236:	39 f3                	cmp    ebx,esi
c000a238:	75 ed                	jne    c000a227 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a23a:	5b                   	pop    ebx
c000a23b:	5e                   	pop    esi
c000a23c:	c3                   	ret    

c000a23d <Phys::physicalMemorySetup(unsigned int)>:
c000a23d:	55                   	push   ebp
c000a23e:	57                   	push   edi
c000a23f:	56                   	push   esi
c000a240:	53                   	push   ebx
c000a241:	31 db                	xor    ebx,ebx
c000a243:	83 ec 40             	sub    esp,0x40
c000a246:	6a 10                	push   0x10
c000a248:	6a 00                	push   0x0
c000a24a:	68 7c 7b 02 c0       	push   0xc0027b7c
c000a24f:	e8 30 64 ff ff       	call   c0000684 <memset>
c000a254:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a258:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a25d:	05 00 10 00 00       	add    eax,0x1000
c000a262:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a266:	5a                   	pop    edx
c000a267:	59                   	pop    ecx
c000a268:	50                   	push   eax
c000a269:	68 5b 3e 02 c0       	push   0xc0023e5b
c000a26e:	e8 84 2a 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000a273:	83 c4 10             	add    esp,0x10
c000a276:	83 ec 08             	sub    esp,0x8
c000a279:	6a 01                	push   0x1
c000a27b:	53                   	push   ebx
c000a27c:	43                   	inc    ebx
c000a27d:	e8 6b fd ff ff       	call   c0009fed <Phys::setPageState(unsigned long, bool)>
c000a282:	83 c4 10             	add    esp,0x10
c000a285:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a28b:	75 e9                	jne    c000a276 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a28d:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a294:	66 85 c0             	test   ax,ax
c000a297:	0f 84 8e 01 00 00    	je     c000a42b <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a29d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a2a1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a2a9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a2ad:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a2b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a2b6:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a2be:	eb 15                	jmp    c000a2d5 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a2c0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a2c4:	83 c3 18             	add    ebx,0x18
c000a2c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a2cb:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a2cf:	0f 84 66 01 00 00    	je     c000a43b <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a2d5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a2d8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a2db:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a2de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a2e2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a2e6:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a2e8:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a2eb:	01 f0                	add    eax,esi
c000a2ed:	55                   	push   ebp
c000a2ee:	11 fa                	adc    edx,edi
c000a2f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a2f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a2fc:	56                   	push   esi
c000a2fd:	68 1c 3f 02 c0       	push   0xc0023f1c
c000a302:	e8 f0 29 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000a307:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a30b:	83 c4 10             	add    esp,0x10
c000a30e:	09 f8                	or     eax,edi
c000a310:	0f 85 25 01 00 00    	jne    c000a43b <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a316:	4d                   	dec    ebp
c000a317:	75 a7                	jne    c000a2c0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a319:	ba 00 00 08 00       	mov    edx,0x80000
c000a31e:	89 c1                	mov    ecx,eax
c000a320:	39 f2                	cmp    edx,esi
c000a322:	19 f9                	sbb    ecx,edi
c000a324:	0f 82 a7 00 00 00    	jb     c000a3d1 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a32a:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a32e:	89 c1                	mov    ecx,eax
c000a330:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a334:	0f 83 97 00 00 00    	jae    c000a3d1 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a33a:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a33f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a343:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a347:	39 fa                	cmp    edx,edi
c000a349:	19 e8                	sbb    eax,ebp
c000a34b:	0f 82 a5 01 00 00    	jb     c000a4f6 <Phys::physicalMemorySetup(unsigned int)+0x2b9>
c000a351:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a355:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a359:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a35f:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a364:	83 d5 ff             	adc    ebp,0xffffffff
c000a367:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a36b:	31 c0                	xor    eax,eax
c000a36d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a371:	39 fa                	cmp    edx,edi
c000a373:	89 c1                	mov    ecx,eax
c000a375:	19 e9                	sbb    ecx,ebp
c000a377:	0f 83 43 ff ff ff    	jae    c000a2c0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a37d:	be 00 00 08 00       	mov    esi,0x80000
c000a382:	57                   	push   edi
c000a383:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a387:	57                   	push   edi
c000a388:	56                   	push   esi
c000a389:	68 40 3f 02 c0       	push   0xc0023f40
c000a38e:	e8 64 29 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000a393:	5d                   	pop    ebp
c000a394:	58                   	pop    eax
c000a395:	57                   	push   edi
c000a396:	56                   	push   esi
c000a397:	e8 69 fe ff ff       	call   c000a205 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a39c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a3a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a3a4:	83 c4 0c             	add    esp,0xc
c000a3a7:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a3ab:	03 05 78 7b 02 c0    	add    eax,DWORD PTR ds:0xc0027b78
c000a3b1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a3b8:	a3 78 7b 02 c0       	mov    ds:0xc0027b78,eax
c000a3bd:	52                   	push   edx
c000a3be:	50                   	push   eax
c000a3bf:	68 81 3e 02 c0       	push   0xc0023e81
c000a3c4:	e8 2e 29 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000a3c9:	83 c4 10             	add    esp,0x10
c000a3cc:	e9 ef fe ff ff       	jmp    c000a2c0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a3d1:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a3d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a3d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a3dd:	39 ea                	cmp    edx,ebp
c000a3df:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a3e3:	0f 82 d7 fe ff ff    	jb     c000a2c0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a3e9:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a3ee:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a3f2:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a3f6:	0f 83 c4 fe ff ff    	jae    c000a2c0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a3fc:	39 ee                	cmp    esi,ebp
c000a3fe:	89 f8                	mov    eax,edi
c000a400:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a404:	0f 83 78 ff ff ff    	jae    c000a382 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a412:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a416:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a41a:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a41e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a422:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a426:	e9 57 ff ff ff       	jmp    c000a382 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a42b:	83 ec 0c             	sub    esp,0xc
c000a42e:	68 73 3e 02 c0       	push   0xc0023e73
c000a433:	e8 6b a4 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c000a438:	83 c4 10             	add    esp,0x10
c000a43b:	83 ec 08             	sub    esp,0x8
c000a43e:	6a 00                	push   0x0
c000a440:	6a 05                	push   0x5
c000a442:	e8 a6 fb ff ff       	call   c0009fed <Phys::setPageState(unsigned long, bool)>
c000a447:	58                   	pop    eax
c000a448:	5a                   	pop    edx
c000a449:	6a 00                	push   0x0
c000a44b:	6a 06                	push   0x6
c000a44d:	e8 9b fb ff ff       	call   c0009fed <Phys::setPageState(unsigned long, bool)>
c000a452:	59                   	pop    ecx
c000a453:	5b                   	pop    ebx
c000a454:	bb 60 00 00 00       	mov    ebx,0x60
c000a459:	6a 00                	push   0x0
c000a45b:	6a 07                	push   0x7
c000a45d:	e8 8b fb ff ff       	call   c0009fed <Phys::setPageState(unsigned long, bool)>
c000a462:	83 05 78 7b 02 c0 03 	add    DWORD PTR ds:0xc0027b78,0x3
c000a469:	83 c4 10             	add    esp,0x10
c000a46c:	83 ec 08             	sub    esp,0x8
c000a46f:	6a 00                	push   0x0
c000a471:	53                   	push   ebx
c000a472:	43                   	inc    ebx
c000a473:	e8 75 fb ff ff       	call   c0009fed <Phys::setPageState(unsigned long, bool)>
c000a478:	83 c4 10             	add    esp,0x10
c000a47b:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a481:	75 e9                	jne    c000a46c <Phys::physicalMemorySetup(unsigned int)+0x22f>
c000a483:	a1 78 7b 02 c0       	mov    eax,ds:0xc0027b78
c000a488:	bb 40 01 00 00       	mov    ebx,0x140
c000a48d:	83 c0 20             	add    eax,0x20
c000a490:	a3 78 7b 02 c0       	mov    ds:0xc0027b78,eax
c000a495:	eb 22                	jmp    c000a4b9 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000a497:	83 ec 08             	sub    esp,0x8
c000a49a:	6a 00                	push   0x0
c000a49c:	53                   	push   ebx
c000a49d:	43                   	inc    ebx
c000a49e:	e8 4a fb ff ff       	call   c0009fed <Phys::setPageState(unsigned long, bool)>
c000a4a3:	a1 78 7b 02 c0       	mov    eax,ds:0xc0027b78
c000a4a8:	83 c4 10             	add    esp,0x10
c000a4ab:	40                   	inc    eax
c000a4ac:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a4b2:	a3 78 7b 02 c0       	mov    ds:0xc0027b78,eax
c000a4b7:	74 07                	je     c000a4c0 <Phys::physicalMemorySetup(unsigned int)+0x283>
c000a4b9:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a4be:	7e d7                	jle    c000a497 <Phys::physicalMemorySetup(unsigned int)+0x25a>
c000a4c0:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a4c5:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a4ca:	7f 22                	jg     c000a4ee <Phys::physicalMemorySetup(unsigned int)+0x2b1>
c000a4cc:	83 ec 08             	sub    esp,0x8
c000a4cf:	6a 00                	push   0x0
c000a4d1:	53                   	push   ebx
c000a4d2:	43                   	inc    ebx
c000a4d3:	e8 15 fb ff ff       	call   c0009fed <Phys::setPageState(unsigned long, bool)>
c000a4d8:	a1 78 7b 02 c0       	mov    eax,ds:0xc0027b78
c000a4dd:	83 c4 10             	add    esp,0x10
c000a4e0:	40                   	inc    eax
c000a4e1:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a4e7:	a3 78 7b 02 c0       	mov    ds:0xc0027b78,eax
c000a4ec:	75 d7                	jne    c000a4c5 <Phys::physicalMemorySetup(unsigned int)+0x288>
c000a4ee:	83 c4 3c             	add    esp,0x3c
c000a4f1:	5b                   	pop    ebx
c000a4f2:	5e                   	pop    esi
c000a4f3:	5f                   	pop    edi
c000a4f4:	5d                   	pop    ebp
c000a4f5:	c3                   	ret    
c000a4f6:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a4fe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a506:	e9 46 fe ff ff       	jmp    c000a351 <Phys::physicalMemorySetup(unsigned int)+0x114>
c000a50b:	90                   	nop

c000a50c <Pipe::isAtty()>:
c000a50c:	31 c0                	xor    eax,eax
c000a50e:	c3                   	ret    
c000a50f:	90                   	nop

c000a510 <Pipe::~Pipe()>:
c000a510:	83 ec 0c             	sub    esp,0xc
c000a513:	ba ac 3f 02 c0       	mov    edx,0xc0023fac
c000a518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a51c:	89 10                	mov    DWORD PTR [eax],edx
c000a51e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a522:	83 ec 0c             	sub    esp,0xc
c000a525:	50                   	push   eax
c000a526:	e8 45 12 00 00       	call   c000b770 <UnixFile::~UnixFile()>
c000a52b:	83 c4 10             	add    esp,0x10
c000a52e:	90                   	nop
c000a52f:	83 c4 0c             	add    esp,0xc
c000a532:	c3                   	ret    
c000a533:	90                   	nop

c000a534 <Pipe::~Pipe()>:
c000a534:	83 ec 0c             	sub    esp,0xc
c000a537:	83 ec 0c             	sub    esp,0xc
c000a53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a53e:	e8 cd ff ff ff       	call   c000a510 <Pipe::~Pipe()>
c000a543:	83 c4 10             	add    esp,0x10
c000a546:	83 ec 08             	sub    esp,0x8
c000a549:	6a 20                	push   0x20
c000a54b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a54f:	e8 c2 26 00 00       	call   c000cc16 <operator delete(void*, unsigned long)>
c000a554:	83 c4 10             	add    esp,0x10
c000a557:	83 c4 0c             	add    esp,0xc
c000a55a:	c3                   	ret    
c000a55b:	90                   	nop

c000a55c <Pipe::read(unsigned long long, void*, int*)>:
c000a55c:	55                   	push   ebp
c000a55d:	57                   	push   edi
c000a55e:	56                   	push   esi
c000a55f:	53                   	push   ebx
c000a560:	83 ec 1c             	sub    esp,0x1c
c000a563:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a567:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a56b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a56f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a572:	89 c8                	mov    eax,ecx
c000a574:	99                   	cdq    
c000a575:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a579:	74 24                	je     c000a59f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a57b:	39 f9                	cmp    ecx,edi
c000a57d:	89 d1                	mov    ecx,edx
c000a57f:	19 f1                	sbb    ecx,esi
c000a581:	73 1c                	jae    c000a59f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a583:	fa                   	cli    
c000a584:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c000a58a:	e8 e5 de 00 00       	call   c0018474 <schedule()>
c000a58f:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c000a594:	48                   	dec    eax
c000a595:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c000a59a:	75 d3                	jne    c000a56f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a59c:	fb                   	sti    
c000a59d:	eb d0                	jmp    c000a56f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a59f:	39 f8                	cmp    eax,edi
c000a5a1:	89 d1                	mov    ecx,edx
c000a5a3:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a5a6:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a5aa:	19 f1                	sbb    ecx,esi
c000a5ac:	73 07                	jae    c000a5b5 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a5ae:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5b1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5b5:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a5b8:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a5bb:	29 f7                	sub    edi,esi
c000a5bd:	89 f8                	mov    eax,edi
c000a5bf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a5c3:	99                   	cdq    
c000a5c4:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a5c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a5cb:	19 d0                	sbb    eax,edx
c000a5cd:	73 07                	jae    c000a5d6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a5cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a5d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a5d6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a5d9:	89 ea                	mov    edx,ebp
c000a5db:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a5df:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a5e4:	74 0d                	je     c000a5f3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a5e6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a5e9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a5ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a5f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a5f3:	85 d2                	test   edx,edx
c000a5f5:	74 11                	je     c000a608 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a5f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a5fb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a5fe:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a602:	89 d1                	mov    ecx,edx
c000a604:	89 c7                	mov    edi,eax
c000a606:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a608:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a60b:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a60e:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a611:	99                   	cdq    
c000a612:	89 f7                	mov    edi,esi
c000a614:	03 04 24             	add    eax,DWORD PTR [esp]
c000a617:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a61b:	c1 ff 1f             	sar    edi,0x1f
c000a61e:	57                   	push   edi
c000a61f:	56                   	push   esi
c000a620:	52                   	push   edx
c000a621:	50                   	push   eax
c000a622:	e8 ed 7e 01 00       	call   c0022514 <__umoddi3>
c000a627:	83 c4 10             	add    esp,0x10
c000a62a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a62d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a632:	75 10                	jne    c000a644 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a634:	83 ec 0c             	sub    esp,0xc
c000a637:	68 69 3f 02 c0       	push   0xc0023f69
c000a63c:	e8 62 a2 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c000a641:	83 c4 10             	add    esp,0x10
c000a644:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a648:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a64b:	89 10                	mov    DWORD PTR [eax],edx
c000a64d:	83 c4 1c             	add    esp,0x1c
c000a650:	31 c0                	xor    eax,eax
c000a652:	5b                   	pop    ebx
c000a653:	5e                   	pop    esi
c000a654:	5f                   	pop    edi
c000a655:	5d                   	pop    ebp
c000a656:	c3                   	ret    
c000a657:	90                   	nop

c000a658 <Pipe::write(unsigned long long, void*, int*)>:
c000a658:	55                   	push   ebp
c000a659:	57                   	push   edi
c000a65a:	56                   	push   esi
c000a65b:	53                   	push   ebx
c000a65c:	83 ec 1c             	sub    esp,0x1c
c000a65f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a663:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a667:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a66a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a66e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a671:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a675:	89 d8                	mov    eax,ebx
c000a677:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a67a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a67e:	89 d6                	mov    esi,edx
c000a680:	89 d7                	mov    edi,edx
c000a682:	c1 ff 1f             	sar    edi,0x1f
c000a685:	03 34 24             	add    esi,DWORD PTR [esp]
c000a688:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a68c:	c1 f8 1f             	sar    eax,0x1f
c000a68f:	39 f3                	cmp    ebx,esi
c000a691:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a695:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a699:	19 f8                	sbb    eax,edi
c000a69b:	b8 01 00 00 00       	mov    eax,0x1
c000a6a0:	72 6e                	jb     c000a710 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a6a2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a6a5:	01 d0                	add    eax,edx
c000a6a7:	99                   	cdq    
c000a6a8:	f7 fb                	idiv   ebx
c000a6aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6ae:	29 d3                	sub    ebx,edx
c000a6b0:	89 d7                	mov    edi,edx
c000a6b2:	89 de                	mov    esi,ebx
c000a6b4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a6b7:	c1 fb 1f             	sar    ebx,0x1f
c000a6ba:	39 f2                	cmp    edx,esi
c000a6bc:	19 d8                	sbb    eax,ebx
c000a6be:	b8 00 00 00 00       	mov    eax,0x0
c000a6c3:	72 04                	jb     c000a6c9 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a6c5:	89 d0                	mov    eax,edx
c000a6c7:	29 f0                	sub    eax,esi
c000a6c9:	89 d3                	mov    ebx,edx
c000a6cb:	29 c3                	sub    ebx,eax
c000a6cd:	74 0b                	je     c000a6da <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a6cf:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a6d2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a6d6:	89 d9                	mov    ecx,ebx
c000a6d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a6da:	85 c0                	test   eax,eax
c000a6dc:	74 0d                	je     c000a6eb <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a6de:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a6e2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a6e5:	89 de                	mov    esi,ebx
c000a6e7:	89 c1                	mov    ecx,eax
c000a6e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a6eb:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a6ee:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a6f3:	75 10                	jne    c000a705 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a6f5:	83 ec 0c             	sub    esp,0xc
c000a6f8:	68 85 3f 02 c0       	push   0xc0023f85
c000a6fd:	e8 a1 a1 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c000a702:	83 c4 10             	add    esp,0x10
c000a705:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a709:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a70c:	89 08                	mov    DWORD PTR [eax],ecx
c000a70e:	31 c0                	xor    eax,eax
c000a710:	83 c4 1c             	add    esp,0x1c
c000a713:	5b                   	pop    ebx
c000a714:	5e                   	pop    esi
c000a715:	5f                   	pop    edi
c000a716:	5d                   	pop    ebp
c000a717:	c3                   	ret    

c000a718 <Pipe::Pipe(int)>:
c000a718:	83 ec 0c             	sub    esp,0xc
c000a71b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a71f:	83 ec 08             	sub    esp,0x8
c000a722:	6a 00                	push   0x0
c000a724:	50                   	push   eax
c000a725:	e8 64 0e 00 00       	call   c000b58e <UnixFile::UnixFile(int)>
c000a72a:	83 c4 10             	add    esp,0x10
c000a72d:	ba ac 3f 02 c0       	mov    edx,0xc0023fac
c000a732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a736:	89 10                	mov    DWORD PTR [eax],edx
c000a738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a73c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a740:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a747:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a74e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a752:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a759:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a75d:	83 ec 0c             	sub    esp,0xc
c000a760:	50                   	push   eax
c000a761:	e8 a1 f2 ff ff       	call   c0009a07 <malloc>
c000a766:	83 c4 10             	add    esp,0x10
c000a769:	89 c2                	mov    edx,eax
c000a76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a76f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a776:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a77a:	90                   	nop
c000a77b:	83 c4 0c             	add    esp,0xc
c000a77e:	c3                   	ret    
c000a77f:	90                   	nop

c000a780 <VgaText::isAtty()>:
c000a780:	b0 01                	mov    al,0x1
c000a782:	c3                   	ret    
c000a783:	90                   	nop

c000a784 <VgaText::~VgaText()>:
c000a784:	83 ec 0c             	sub    esp,0xc
c000a787:	ba 34 40 02 c0       	mov    edx,0xc0024034
c000a78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a790:	89 10                	mov    DWORD PTR [eax],edx
c000a792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a796:	83 ec 0c             	sub    esp,0xc
c000a799:	50                   	push   eax
c000a79a:	e8 d1 0f 00 00       	call   c000b770 <UnixFile::~UnixFile()>
c000a79f:	83 c4 10             	add    esp,0x10
c000a7a2:	90                   	nop
c000a7a3:	83 c4 0c             	add    esp,0xc
c000a7a6:	c3                   	ret    
c000a7a7:	90                   	nop

c000a7a8 <VgaText::~VgaText()>:
c000a7a8:	83 ec 0c             	sub    esp,0xc
c000a7ab:	83 ec 0c             	sub    esp,0xc
c000a7ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7b2:	e8 cd ff ff ff       	call   c000a784 <VgaText::~VgaText()>
c000a7b7:	83 c4 10             	add    esp,0x10
c000a7ba:	83 ec 08             	sub    esp,0x8
c000a7bd:	68 c4 02 00 00       	push   0x2c4
c000a7c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7c6:	e8 4b 24 00 00       	call   c000cc16 <operator delete(void*, unsigned long)>
c000a7cb:	83 c4 10             	add    esp,0x10
c000a7ce:	83 c4 0c             	add    esp,0xc
c000a7d1:	c3                   	ret    

c000a7d2 <VgaText::read(unsigned long long, void*, int*)>:
c000a7d2:	83 ec 10             	sub    esp,0x10
c000a7d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a7d9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a7dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7e1:	e8 e0 57 00 00       	call   c000ffc6 <readKeyboard(VgaText*, char*, unsigned long)>
c000a7e6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a7ea:	89 02                	mov    DWORD PTR [edx],eax
c000a7ec:	31 c0                	xor    eax,eax
c000a7ee:	83 c4 1c             	add    esp,0x1c
c000a7f1:	c3                   	ret    

c000a7f2 <setTerminalScrollLock(bool)>:
c000a7f2:	c3                   	ret    

c000a7f3 <addToTerminalCycle(VgaText*)>:
c000a7f3:	8b 15 c0 7b 02 c0    	mov    edx,DWORD PTR ds:0xc0027bc0
c000a7f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7fd:	85 d2                	test   edx,edx
c000a7ff:	75 09                	jne    c000a80a <addToTerminalCycle(VgaText*)+0x17>
c000a801:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000a804:	a3 c0 7b 02 c0       	mov    ds:0xc0027bc0,eax
c000a809:	c3                   	ret    
c000a80a:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000a80d:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000a810:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000a813:	c3                   	ret    

c000a814 <installVgaTextImplementation()>:
c000a814:	83 ec 10             	sub    esp,0x10
c000a817:	6a 20                	push   0x20
c000a819:	6a 00                	push   0x0
c000a81b:	68 a0 7b 02 c0       	push   0xc0027ba0
c000a820:	e8 5f 5e ff ff       	call   c0000684 <memset>
c000a825:	83 c4 1c             	add    esp,0x1c
c000a828:	c3                   	ret    

c000a829 <scrollTerminalScrollLock(int)>:
c000a829:	c3                   	ret    

c000a82a <VgaText::updateTitle()>:
c000a82a:	53                   	push   ebx
c000a82b:	31 c0                	xor    eax,eax
c000a82d:	83 ec 58             	sub    esp,0x58
c000a830:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000a834:	89 e1                	mov    ecx,esp
c000a836:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000a83a:	40                   	inc    eax
c000a83b:	83 f8 50             	cmp    eax,0x50
c000a83e:	75 f6                	jne    c000a836 <VgaText::updateTitle()+0xc>
c000a840:	31 c0                	xor    eax,eax
c000a842:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000a849:	84 db                	test   bl,bl
c000a84b:	74 06                	je     c000a853 <VgaText::updateTitle()+0x29>
c000a84d:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000a850:	40                   	inc    eax
c000a851:	eb ef                	jmp    c000a842 <VgaText::updateTitle()+0x18>
c000a853:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000a856:	85 c0                	test   eax,eax
c000a858:	74 09                	je     c000a863 <VgaText::updateTitle()+0x39>
c000a85a:	53                   	push   ebx
c000a85b:	53                   	push   ebx
c000a85c:	51                   	push   ecx
c000a85d:	52                   	push   edx
c000a85e:	ff d0                	call   eax
c000a860:	83 c4 10             	add    esp,0x10
c000a863:	83 c4 58             	add    esp,0x58
c000a866:	5b                   	pop    ebx
c000a867:	c3                   	ret    

c000a868 <VgaText::load()>:
c000a868:	53                   	push   ebx
c000a869:	31 c0                	xor    eax,eax
c000a86b:	83 ec 58             	sub    esp,0x58
c000a86e:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a872:	89 e2                	mov    edx,esp
c000a874:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000a878:	40                   	inc    eax
c000a879:	83 f8 50             	cmp    eax,0x50
c000a87c:	75 f6                	jne    c000a874 <VgaText::load()+0xc>
c000a87e:	31 c0                	xor    eax,eax
c000a880:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000a887:	84 c9                	test   cl,cl
c000a889:	74 06                	je     c000a891 <VgaText::load()+0x29>
c000a88b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a88e:	40                   	inc    eax
c000a88f:	eb ef                	jmp    c000a880 <VgaText::load()+0x18>
c000a891:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000a894:	85 c0                	test   eax,eax
c000a896:	74 09                	je     c000a8a1 <VgaText::load()+0x39>
c000a898:	51                   	push   ecx
c000a899:	51                   	push   ecx
c000a89a:	52                   	push   edx
c000a89b:	53                   	push   ebx
c000a89c:	ff d0                	call   eax
c000a89e:	83 c4 10             	add    esp,0x10
c000a8a1:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000a8a4:	85 c0                	test   eax,eax
c000a8a6:	74 09                	je     c000a8b1 <VgaText::load()+0x49>
c000a8a8:	83 ec 0c             	sub    esp,0xc
c000a8ab:	53                   	push   ebx
c000a8ac:	ff d0                	call   eax
c000a8ae:	83 c4 10             	add    esp,0x10
c000a8b1:	83 c4 58             	add    esp,0x58
c000a8b4:	5b                   	pop    ebx
c000a8b5:	c3                   	ret    

c000a8b6 <VgaText::updateCursor()>:
c000a8b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8ba:	39 05 c4 7b 02 c0    	cmp    DWORD PTR ds:0xc0027bc4,eax
c000a8c0:	75 09                	jne    c000a8cb <VgaText::updateCursor()+0x15>
c000a8c2:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000a8c5:	85 c0                	test   eax,eax
c000a8c7:	74 02                	je     c000a8cb <VgaText::updateCursor()+0x15>
c000a8c9:	ff e0                	jmp    eax
c000a8cb:	c3                   	ret    

c000a8cc <VgaText::doANSI_SGR(int)>:
c000a8cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a8d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8d4:	85 d2                	test   edx,edx
c000a8d6:	75 0b                	jne    c000a8e3 <VgaText::doANSI_SGR(int)+0x17>
c000a8d8:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a8db:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a8de:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a8e1:	eb 59                	jmp    c000a93c <VgaText::doANSI_SGR(int)+0x70>
c000a8e3:	83 fa 07             	cmp    edx,0x7
c000a8e6:	75 0b                	jne    c000a8f3 <VgaText::doANSI_SGR(int)+0x27>
c000a8e8:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a8eb:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a8ee:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a8f1:	eb 49                	jmp    c000a93c <VgaText::doANSI_SGR(int)+0x70>
c000a8f3:	83 fa 1b             	cmp    edx,0x1b
c000a8f6:	74 e0                	je     c000a8d8 <VgaText::doANSI_SGR(int)+0xc>
c000a8f8:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a8fb:	83 f9 07             	cmp    ecx,0x7
c000a8fe:	77 09                	ja     c000a909 <VgaText::doANSI_SGR(int)+0x3d>
c000a900:	8b 14 8d 40 6f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd90c0]
c000a907:	eb 20                	jmp    c000a929 <VgaText::doANSI_SGR(int)+0x5d>
c000a909:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a90c:	83 f9 07             	cmp    ecx,0x7
c000a90f:	77 09                	ja     c000a91a <VgaText::doANSI_SGR(int)+0x4e>
c000a911:	8b 14 8d 40 6f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd90c0]
c000a918:	eb 22                	jmp    c000a93c <VgaText::doANSI_SGR(int)+0x70>
c000a91a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a91d:	83 f9 07             	cmp    ecx,0x7
c000a920:	77 0b                	ja     c000a92d <VgaText::doANSI_SGR(int)+0x61>
c000a922:	8b 14 95 f8 6d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9208]
c000a929:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a92c:	c3                   	ret    
c000a92d:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a930:	83 f9 07             	cmp    ecx,0x7
c000a933:	77 0a                	ja     c000a93f <VgaText::doANSI_SGR(int)+0x73>
c000a935:	8b 14 95 d0 6d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9230]
c000a93c:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a93f:	c3                   	ret    

c000a940 <VgaText::setDefaultBgColour(VgaColour)>:
c000a940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a944:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a948:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a94b:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a94e:	c3                   	ret    
c000a94f:	90                   	nop

c000a950 <VgaText::setDefaultFgColour(VgaColour)>:
c000a950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a954:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a958:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a95b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a95e:	c3                   	ret    
c000a95f:	90                   	nop

c000a960 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a960:	53                   	push   ebx
c000a961:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a965:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a969:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a96d:	51                   	push   ecx
c000a96e:	e8 cd ff ff ff       	call   c000a940 <VgaText::setDefaultBgColour(VgaColour)>
c000a973:	58                   	pop    eax
c000a974:	5a                   	pop    edx
c000a975:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a979:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a97d:	5b                   	pop    ebx
c000a97e:	eb d0                	jmp    c000a950 <VgaText::setDefaultFgColour(VgaColour)>

c000a980 <VgaText::setTitleTextColour(VgaColour)>:
c000a980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a988:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a98b:	e9 9a fe ff ff       	jmp    c000a82a <VgaText::updateTitle()>

c000a990 <VgaText::setTitleColour(VgaColour)>:
c000a990:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a994:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a998:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a99b:	e9 8a fe ff ff       	jmp    c000a82a <VgaText::updateTitle()>

c000a9a0 <VgaText::setTitle(char*)>:
c000a9a0:	53                   	push   ebx
c000a9a1:	83 ec 10             	sub    esp,0x10
c000a9a4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a9a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a9ac:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000a9b2:	50                   	push   eax
c000a9b3:	e8 88 5d ff ff       	call   c0000740 <strcpy>
c000a9b8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a9bc:	83 c4 18             	add    esp,0x18
c000a9bf:	5b                   	pop    ebx
c000a9c0:	e9 65 fe ff ff       	jmp    c000a82a <VgaText::updateTitle()>
c000a9c5:	90                   	nop

c000a9c6 <VgaText::combineColours(unsigned char, unsigned char)>:
c000a9c6:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a9ca:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a9cf:	83 e0 0f             	and    eax,0xf
c000a9d2:	c1 e2 04             	shl    edx,0x4
c000a9d5:	09 d0                	or     eax,edx
c000a9d7:	c3                   	ret    

c000a9d8 <VgaText::scrollScreen()>:
c000a9d8:	55                   	push   ebp
c000a9d9:	b9 01 00 00 00       	mov    ecx,0x1
c000a9de:	57                   	push   edi
c000a9df:	56                   	push   esi
c000a9e0:	53                   	push   ebx
c000a9e1:	83 ec 0c             	sub    esp,0xc
c000a9e4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a9e8:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a9ee:	31 ff                	xor    edi,edi
c000a9f0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a9f3:	83 f9 17             	cmp    ecx,0x17
c000a9f6:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000a9f9:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000aa00:	75 27                	jne    c000aa29 <VgaText::scrollScreen()+0x51>
c000aa02:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000aa05:	01 f5                	add    ebp,esi
c000aa07:	f7 c7 01 00 00 00    	test   edi,0x1
c000aa0d:	74 16                	je     c000aa25 <VgaText::scrollScreen()+0x4d>
c000aa0f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000aa13:	50                   	push   eax
c000aa14:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000aa18:	50                   	push   eax
c000aa19:	e8 a8 ff ff ff       	call   c000a9c6 <VgaText::combineColours(unsigned char, unsigned char)>
c000aa1e:	5a                   	pop    edx
c000aa1f:	5a                   	pop    edx
c000aa20:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000aa23:	eb 04                	jmp    c000aa29 <VgaText::scrollScreen()+0x51>
c000aa25:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000aa29:	47                   	inc    edi
c000aa2a:	46                   	inc    esi
c000aa2b:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000aa31:	75 bd                	jne    c000a9f0 <VgaText::scrollScreen()+0x18>
c000aa33:	41                   	inc    ecx
c000aa34:	83 f9 18             	cmp    ecx,0x18
c000aa37:	75 af                	jne    c000a9e8 <VgaText::scrollScreen()+0x10>
c000aa39:	39 1d c4 7b 02 c0    	cmp    DWORD PTR ds:0xc0027bc4,ebx
c000aa3f:	75 1b                	jne    c000aa5c <VgaText::scrollScreen()+0x84>
c000aa41:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000aa45:	74 05                	je     c000aa4c <VgaText::scrollScreen()+0x74>
c000aa47:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000aa4a:	eb 10                	jmp    c000aa5c <VgaText::scrollScreen()+0x84>
c000aa4c:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000aa4f:	85 c0                	test   eax,eax
c000aa51:	74 09                	je     c000aa5c <VgaText::scrollScreen()+0x84>
c000aa53:	83 ec 0c             	sub    esp,0xc
c000aa56:	53                   	push   ebx
c000aa57:	ff d0                	call   eax
c000aa59:	83 c4 10             	add    esp,0x10
c000aa5c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000aa60:	83 c4 0c             	add    esp,0xc
c000aa63:	5b                   	pop    ebx
c000aa64:	5e                   	pop    esi
c000aa65:	5f                   	pop    edi
c000aa66:	5d                   	pop    ebp
c000aa67:	e9 4a fe ff ff       	jmp    c000a8b6 <VgaText::updateCursor()>

c000aa6c <VgaText::combineCharAndColour(char, unsigned char)>:
c000aa6c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000aa71:	c1 e0 08             	shl    eax,0x8
c000aa74:	89 c2                	mov    edx,eax
c000aa76:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000aa7b:	09 d0                	or     eax,edx
c000aa7d:	c3                   	ret    

c000aa7e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000aa7e:	56                   	push   esi
c000aa7f:	53                   	push   ebx
c000aa80:	51                   	push   ecx
c000aa81:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aa85:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000aa8a:	50                   	push   eax
c000aa8b:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000aa90:	50                   	push   eax
c000aa91:	e8 30 ff ff ff       	call   c000a9c6 <VgaText::combineColours(unsigned char, unsigned char)>
c000aa96:	5b                   	pop    ebx
c000aa97:	0f b6 c0             	movzx  eax,al
c000aa9a:	5e                   	pop    esi
c000aa9b:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000aaa0:	50                   	push   eax
c000aaa1:	53                   	push   ebx
c000aaa2:	e8 c5 ff ff ff       	call   c000aa6c <VgaText::combineCharAndColour(char, unsigned char)>
c000aaa7:	5a                   	pop    edx
c000aaa8:	5e                   	pop    esi
c000aaa9:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000aaac:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000aab2:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000aab6:	0f b7 d2             	movzx  edx,dx
c000aab9:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000aabd:	39 0d c4 7b 02 c0    	cmp    DWORD PTR ds:0xc0027bc4,ecx
c000aac3:	75 10                	jne    c000aad5 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aac5:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000aac8:	85 c0                	test   eax,eax
c000aaca:	74 09                	je     c000aad5 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aacc:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000aad0:	5a                   	pop    edx
c000aad1:	5b                   	pop    ebx
c000aad2:	5e                   	pop    esi
c000aad3:	ff e0                	jmp    eax
c000aad5:	58                   	pop    eax
c000aad6:	5b                   	pop    ebx
c000aad7:	5e                   	pop    esi
c000aad8:	c3                   	ret    
c000aad9:	90                   	nop

c000aada <VgaText::getCursorX()>:
c000aada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aade:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000aae1:	c3                   	ret    

c000aae2 <VgaText::getCursorY()>:
c000aae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aae6:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000aae9:	c3                   	ret    

c000aaea <VgaText::setCursor(int, int)>:
c000aaea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aaee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aaf2:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000aaf5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aaf9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000aafc:	e9 b5 fd ff ff       	jmp    c000a8b6 <VgaText::updateCursor()>

c000ab01 <setActiveTerminal(VgaText*)>:
c000ab01:	53                   	push   ebx
c000ab02:	83 ec 08             	sub    esp,0x8
c000ab05:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab09:	85 db                	test   ebx,ebx
c000ab0b:	75 11                	jne    c000ab1e <setActiveTerminal(VgaText*)+0x1d>
c000ab0d:	c7 44 24 10 c0 3f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023fc0
c000ab15:	83 c4 08             	add    esp,0x8
c000ab18:	5b                   	pop    ebx
c000ab19:	e9 85 9d 00 00       	jmp    c00148a3 <Krnl::panic(char const*)>
c000ab1e:	a1 c4 7b 02 c0       	mov    eax,ds:0xc0027bc4
c000ab23:	85 c0                	test   eax,eax
c000ab25:	74 0c                	je     c000ab33 <setActiveTerminal(VgaText*)+0x32>
c000ab27:	83 ec 0c             	sub    esp,0xc
c000ab2a:	50                   	push   eax
c000ab2b:	e8 86 fd ff ff       	call   c000a8b6 <VgaText::updateCursor()>
c000ab30:	83 c4 10             	add    esp,0x10
c000ab33:	89 1d c4 7b 02 c0    	mov    DWORD PTR ds:0xc0027bc4,ebx
c000ab39:	51                   	push   ecx
c000ab3a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ab3d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ab40:	53                   	push   ebx
c000ab41:	e8 a4 ff ff ff       	call   c000aaea <VgaText::setCursor(int, int)>
c000ab46:	83 c4 10             	add    esp,0x10
c000ab49:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ab4d:	75 07                	jne    c000ab56 <setActiveTerminal(VgaText*)+0x55>
c000ab4f:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000ab56:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab5a:	83 c4 08             	add    esp,0x8
c000ab5d:	5b                   	pop    ebx
c000ab5e:	e9 05 fd ff ff       	jmp    c000a868 <VgaText::load()>

c000ab63 <doTerminalCycle()>:
c000ab63:	83 ec 18             	sub    esp,0x18
c000ab66:	a1 c0 7b 02 c0       	mov    eax,ds:0xc0027bc0
c000ab6b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000ab6e:	50                   	push   eax
c000ab6f:	a3 c0 7b 02 c0       	mov    ds:0xc0027bc0,eax
c000ab74:	e8 88 ff ff ff       	call   c000ab01 <setActiveTerminal(VgaText*)>
c000ab79:	83 c4 1c             	add    esp,0x1c
c000ab7c:	c3                   	ret    
c000ab7d:	90                   	nop

c000ab7e <VgaText::setCursorX(int)>:
c000ab7e:	83 ec 10             	sub    esp,0x10
c000ab81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ab85:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000ab88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab8c:	50                   	push   eax
c000ab8d:	e8 58 ff ff ff       	call   c000aaea <VgaText::setCursor(int, int)>
c000ab92:	83 c4 1c             	add    esp,0x1c
c000ab95:	c3                   	ret    

c000ab96 <VgaText::setCursorY(int)>:
c000ab96:	83 ec 10             	sub    esp,0x10
c000ab99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ab9d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aba1:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000aba4:	50                   	push   eax
c000aba5:	e8 40 ff ff ff       	call   c000aaea <VgaText::setCursor(int, int)>
c000abaa:	83 c4 1c             	add    esp,0x1c
c000abad:	c3                   	ret    

c000abae <VgaText::incrementCursor(bool)>:
c000abae:	56                   	push   esi
c000abaf:	53                   	push   ebx
c000abb0:	51                   	push   ecx
c000abb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000abb5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000abb9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000abbc:	40                   	inc    eax
c000abbd:	83 f8 50             	cmp    eax,0x50
c000abc0:	74 05                	je     c000abc7 <VgaText::incrementCursor(bool)+0x19>
c000abc2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000abc5:	eb 24                	jmp    c000abeb <VgaText::incrementCursor(bool)+0x3d>
c000abc7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000abca:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000abd1:	8d 50 01             	lea    edx,[eax+0x1]
c000abd4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000abd7:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000abda:	75 0f                	jne    c000abeb <VgaText::incrementCursor(bool)+0x3d>
c000abdc:	83 ec 0c             	sub    esp,0xc
c000abdf:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000abe2:	53                   	push   ebx
c000abe3:	e8 f0 fd ff ff       	call   c000a9d8 <VgaText::scrollScreen()>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	89 f0                	mov    eax,esi
c000abed:	84 c0                	test   al,al
c000abef:	74 0c                	je     c000abfd <VgaText::incrementCursor(bool)+0x4f>
c000abf1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000abf5:	5a                   	pop    edx
c000abf6:	5b                   	pop    ebx
c000abf7:	5e                   	pop    esi
c000abf8:	e9 b9 fc ff ff       	jmp    c000a8b6 <VgaText::updateCursor()>
c000abfd:	58                   	pop    eax
c000abfe:	5b                   	pop    ebx
c000abff:	5e                   	pop    esi
c000ac00:	c3                   	ret    
c000ac01:	90                   	nop

c000ac02 <VgaText::decrementCursor(bool)>:
c000ac02:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ac06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ac0a:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000ac0d:	85 c0                	test   eax,eax
c000ac0f:	74 04                	je     c000ac15 <VgaText::decrementCursor(bool)+0x13>
c000ac11:	48                   	dec    eax
c000ac12:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000ac15:	84 c9                	test   cl,cl
c000ac17:	74 09                	je     c000ac22 <VgaText::decrementCursor(bool)+0x20>
c000ac19:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac1d:	e9 94 fc ff ff       	jmp    c000a8b6 <VgaText::updateCursor()>
c000ac22:	c3                   	ret    
c000ac23:	90                   	nop

c000ac24 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000ac24:	53                   	push   ebx
c000ac25:	83 ec 08             	sub    esp,0x8
c000ac28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac2c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ac30:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ac34:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ac38:	3c 07                	cmp    al,0x7
c000ac3a:	75 2a                	jne    c000ac66 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000ac3c:	a1 78 7c 02 c0       	mov    eax,ds:0xc0027c78
c000ac41:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ac49:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000ac51:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000ac59:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac5d:	83 c4 08             	add    esp,0x8
c000ac60:	5b                   	pop    ebx
c000ac61:	e9 ec 2e 00 00       	jmp    c000db52 <Buzzer::beep(int, int, bool)>
c000ac66:	3c 0d                	cmp    al,0xd
c000ac68:	75 09                	jne    c000ac73 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000ac6a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ac71:	eb 2c                	jmp    c000ac9f <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000ac73:	3c 0a                	cmp    al,0xa
c000ac75:	75 31                	jne    c000aca8 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000ac77:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac7a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ac81:	8d 50 01             	lea    edx,[eax+0x1]
c000ac84:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000ac87:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000ac8a:	75 0f                	jne    c000ac9b <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000ac8c:	83 ec 0c             	sub    esp,0xc
c000ac8f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000ac92:	53                   	push   ebx
c000ac93:	e8 40 fd ff ff       	call   c000a9d8 <VgaText::scrollScreen()>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ac9f:	83 c4 08             	add    esp,0x8
c000aca2:	5b                   	pop    ebx
c000aca3:	e9 0e fc ff ff       	jmp    c000a8b6 <VgaText::updateCursor()>
c000aca8:	3c 08                	cmp    al,0x8
c000acaa:	75 25                	jne    c000acd1 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000acac:	50                   	push   eax
c000acad:	50                   	push   eax
c000acae:	6a 01                	push   0x1
c000acb0:	53                   	push   ebx
c000acb1:	e8 4c ff ff ff       	call   c000ac02 <VgaText::decrementCursor(bool)>
c000acb6:	5a                   	pop    edx
c000acb7:	59                   	pop    ecx
c000acb8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000acbb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000acbe:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000acc1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000acc4:	6a 20                	push   0x20
c000acc6:	53                   	push   ebx
c000acc7:	e8 b2 fd ff ff       	call   c000aa7e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000accc:	83 c4 28             	add    esp,0x28
c000accf:	5b                   	pop    ebx
c000acd0:	c3                   	ret    
c000acd1:	83 ec 08             	sub    esp,0x8
c000acd4:	0f be c0             	movsx  eax,al
c000acd7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000acda:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000acdd:	51                   	push   ecx
c000acde:	52                   	push   edx
c000acdf:	50                   	push   eax
c000ace0:	53                   	push   ebx
c000ace1:	e8 98 fd ff ff       	call   c000aa7e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ace6:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000acea:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000acf2:	83 c4 28             	add    esp,0x28
c000acf5:	5b                   	pop    ebx
c000acf6:	e9 b3 fe ff ff       	jmp    c000abae <VgaText::incrementCursor(bool)>
c000acfb:	90                   	nop

c000acfc <VgaText::doUpdate()>:
c000acfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad00:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000ad03:	85 c0                	test   eax,eax
c000ad05:	74 02                	je     c000ad09 <VgaText::doUpdate()+0xd>
c000ad07:	ff e0                	jmp    eax
c000ad09:	c3                   	ret    

c000ad0a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000ad0a:	55                   	push   ebp
c000ad0b:	31 ed                	xor    ebp,ebp
c000ad0d:	57                   	push   edi
c000ad0e:	56                   	push   esi
c000ad0f:	53                   	push   ebx
c000ad10:	83 ec 1c             	sub    esp,0x1c
c000ad13:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ad17:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000ad1c:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000ad23:	50                   	push   eax
c000ad24:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000ad29:	50                   	push   eax
c000ad2a:	e8 97 fc ff ff       	call   c000a9c6 <VgaText::combineColours(unsigned char, unsigned char)>
c000ad2f:	59                   	pop    ecx
c000ad30:	0f b6 c0             	movzx  eax,al
c000ad33:	5e                   	pop    esi
c000ad34:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ad39:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ad3d:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ad40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ad44:	0f b7 f6             	movzx  esi,si
c000ad47:	01 f6                	add    esi,esi
c000ad49:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ad4c:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ad4f:	84 c0                	test   al,al
c000ad51:	0f 84 fd 00 00 00    	je     c000ae54 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000ad57:	3c 0d                	cmp    al,0xd
c000ad59:	75 0c                	jne    c000ad67 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000ad5b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ad62:	e9 e7 00 00 00       	jmp    c000ae4e <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000ad67:	3c 0a                	cmp    al,0xa
c000ad69:	75 47                	jne    c000adb2 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000ad6b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ad6e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ad75:	8d 48 01             	lea    ecx,[eax+0x1]
c000ad78:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000ad7b:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000ad7e:	75 0f                	jne    c000ad8f <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000ad80:	83 ec 0c             	sub    esp,0xc
c000ad83:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000ad86:	53                   	push   ebx
c000ad87:	e8 4c fc ff ff       	call   c000a9d8 <VgaText::scrollScreen()>
c000ad8c:	83 c4 10             	add    esp,0x10
c000ad8f:	83 ec 0c             	sub    esp,0xc
c000ad92:	31 ed                	xor    ebp,ebp
c000ad94:	53                   	push   ebx
c000ad95:	e8 1c fb ff ff       	call   c000a8b6 <VgaText::updateCursor()>
c000ad9a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ad9f:	83 c4 10             	add    esp,0x10
c000ada2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ada5:	0f b7 f6             	movzx  esi,si
c000ada8:	01 f6                	add    esi,esi
c000adaa:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000adad:	e9 9c 00 00 00       	jmp    c000ae4e <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000adb2:	3c 08                	cmp    al,0x8
c000adb4:	75 35                	jne    c000adeb <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000adb6:	56                   	push   esi
c000adb7:	56                   	push   esi
c000adb8:	6a 01                	push   0x1
c000adba:	53                   	push   ebx
c000adbb:	e8 42 fe ff ff       	call   c000ac02 <VgaText::decrementCursor(bool)>
c000adc0:	58                   	pop    eax
c000adc1:	5a                   	pop    edx
c000adc2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000adc5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000adc8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000adcb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000adce:	6a 20                	push   0x20
c000add0:	53                   	push   ebx
c000add1:	e8 a8 fc ff ff       	call   c000aa7e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000add6:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000addb:	83 c4 20             	add    esp,0x20
c000adde:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ade1:	0f b7 f6             	movzx  esi,si
c000ade4:	01 f6                	add    esi,esi
c000ade6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ade9:	eb 63                	jmp    c000ae4e <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000adeb:	51                   	push   ecx
c000adec:	51                   	push   ecx
c000aded:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adf1:	50                   	push   eax
c000adf2:	e8 75 fc ff ff       	call   c000aa6c <VgaText::combineCharAndColour(char, unsigned char)>
c000adf7:	83 c4 10             	add    esp,0x10
c000adfa:	66 89 06             	mov    WORD PTR [esi],ax
c000adfd:	39 1d c4 7b 02 c0    	cmp    DWORD PTR ds:0xc0027bc4,ebx
c000ae03:	75 21                	jne    c000ae26 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ae05:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000ae08:	85 c0                	test   eax,eax
c000ae0a:	74 1a                	je     c000ae26 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ae0c:	52                   	push   edx
c000ae0d:	52                   	push   edx
c000ae0e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ae11:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ae14:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae18:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae1c:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000ae1f:	51                   	push   ecx
c000ae20:	53                   	push   ebx
c000ae21:	ff d0                	call   eax
c000ae23:	83 c4 20             	add    esp,0x20
c000ae26:	83 c6 02             	add    esi,0x2
c000ae29:	50                   	push   eax
c000ae2a:	50                   	push   eax
c000ae2b:	6a 00                	push   0x0
c000ae2d:	53                   	push   ebx
c000ae2e:	e8 7b fd ff ff       	call   c000abae <VgaText::incrementCursor(bool)>
c000ae33:	83 c4 10             	add    esp,0x10
c000ae36:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000ae3a:	75 0d                	jne    c000ae49 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000ae3c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ae41:	0f b7 f6             	movzx  esi,si
c000ae44:	01 f6                	add    esi,esi
c000ae46:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ae49:	bd 01 00 00 00       	mov    ebp,0x1
c000ae4e:	47                   	inc    edi
c000ae4f:	e9 f8 fe ff ff       	jmp    c000ad4c <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000ae54:	83 ec 0c             	sub    esp,0xc
c000ae57:	53                   	push   ebx
c000ae58:	e8 59 fa ff ff       	call   c000a8b6 <VgaText::updateCursor()>
c000ae5d:	83 c4 10             	add    esp,0x10
c000ae60:	89 e8                	mov    eax,ebp
c000ae62:	84 c0                	test   al,al
c000ae64:	74 0c                	je     c000ae72 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000ae66:	83 ec 0c             	sub    esp,0xc
c000ae69:	53                   	push   ebx
c000ae6a:	e8 8d fe ff ff       	call   c000acfc <VgaText::doUpdate()>
c000ae6f:	83 c4 10             	add    esp,0x10
c000ae72:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ae79:	83 c4 1c             	add    esp,0x1c
c000ae7c:	5b                   	pop    ebx
c000ae7d:	5e                   	pop    esi
c000ae7e:	5f                   	pop    edi
c000ae7f:	5d                   	pop    ebp
c000ae80:	c3                   	ret    
c000ae81:	90                   	nop

c000ae82 <VgaText::clearScreen()>:
c000ae82:	57                   	push   edi
c000ae83:	56                   	push   esi
c000ae84:	31 f6                	xor    esi,esi
c000ae86:	53                   	push   ebx
c000ae87:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae8b:	52                   	push   edx
c000ae8c:	6a 00                	push   0x0
c000ae8e:	6a 00                	push   0x0
c000ae90:	53                   	push   ebx
c000ae91:	e8 54 fc ff ff       	call   c000aaea <VgaText::setCursor(int, int)>
c000ae96:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000ae9d:	83 c4 10             	add    esp,0x10
c000aea0:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000aea3:	7e 20                	jle    c000aec5 <VgaText::clearScreen()+0x43>
c000aea5:	31 ff                	xor    edi,edi
c000aea7:	50                   	push   eax
c000aea8:	50                   	push   eax
c000aea9:	56                   	push   esi
c000aeaa:	57                   	push   edi
c000aeab:	47                   	inc    edi
c000aeac:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000aeaf:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000aeb2:	6a 20                	push   0x20
c000aeb4:	53                   	push   ebx
c000aeb5:	e8 c4 fb ff ff       	call   c000aa7e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aeba:	83 c4 20             	add    esp,0x20
c000aebd:	83 ff 50             	cmp    edi,0x50
c000aec0:	75 e5                	jne    c000aea7 <VgaText::clearScreen()+0x25>
c000aec2:	46                   	inc    esi
c000aec3:	eb db                	jmp    c000aea0 <VgaText::clearScreen()+0x1e>
c000aec5:	83 ec 0c             	sub    esp,0xc
c000aec8:	53                   	push   ebx
c000aec9:	e8 2e fe ff ff       	call   c000acfc <VgaText::doUpdate()>
c000aece:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000aed5:	83 c4 10             	add    esp,0x10
c000aed8:	5b                   	pop    ebx
c000aed9:	5e                   	pop    esi
c000aeda:	5f                   	pop    edi
c000aedb:	c3                   	ret    

c000aedc <VgaText::putchar(char)>:
c000aedc:	56                   	push   esi
c000aedd:	53                   	push   ebx
c000aede:	83 ec 14             	sub    esp,0x14
c000aee1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aee5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000aee9:	3c 5b                	cmp    al,0x5b
c000aeeb:	75 18                	jne    c000af05 <VgaText::putchar(char)+0x29>
c000aeed:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000aef1:	74 1f                	je     c000af12 <VgaText::putchar(char)+0x36>
c000aef3:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000aef9:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000af00:	e9 bd 00 00 00       	jmp    c000afc2 <VgaText::putchar(char)+0xe6>
c000af05:	3c 1b                	cmp    al,0x1b
c000af07:	75 09                	jne    c000af12 <VgaText::putchar(char)+0x36>
c000af09:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000af0d:	e9 b0 00 00 00       	jmp    c000afc2 <VgaText::putchar(char)+0xe6>
c000af12:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000af15:	84 c9                	test   cl,cl
c000af17:	0f 84 92 00 00 00    	je     c000afaf <VgaText::putchar(char)+0xd3>
c000af1d:	8d 50 c0             	lea    edx,[eax-0x40]
c000af20:	80 fa 3e             	cmp    dl,0x3e
c000af23:	77 76                	ja     c000af9b <VgaText::putchar(char)+0xbf>
c000af25:	3c 6d                	cmp    al,0x6d
c000af27:	75 47                	jne    c000af70 <VgaText::putchar(char)+0x94>
c000af29:	31 f6                	xor    esi,esi
c000af2b:	31 d2                	xor    edx,edx
c000af2d:	31 c0                	xor    eax,eax
c000af2f:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000af32:	7e 2d                	jle    c000af61 <VgaText::putchar(char)+0x85>
c000af34:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000af39:	80 fa 3b             	cmp    dl,0x3b
c000af3c:	75 17                	jne    c000af55 <VgaText::putchar(char)+0x79>
c000af3e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000af42:	50                   	push   eax
c000af43:	53                   	push   ebx
c000af44:	e8 83 f9 ff ff       	call   c000a8cc <VgaText::doANSI_SGR(int)>
c000af49:	59                   	pop    ecx
c000af4a:	31 d2                	xor    edx,edx
c000af4c:	58                   	pop    eax
c000af4d:	31 c0                	xor    eax,eax
c000af4f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000af53:	eb 09                	jmp    c000af5e <VgaText::putchar(char)+0x82>
c000af55:	6b c0 0a             	imul   eax,eax,0xa
c000af58:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000af5c:	88 ca                	mov    dl,cl
c000af5e:	46                   	inc    esi
c000af5f:	eb ce                	jmp    c000af2f <VgaText::putchar(char)+0x53>
c000af61:	84 d2                	test   dl,dl
c000af63:	74 2e                	je     c000af93 <VgaText::putchar(char)+0xb7>
c000af65:	50                   	push   eax
c000af66:	53                   	push   ebx
c000af67:	e8 60 f9 ff ff       	call   c000a8cc <VgaText::doANSI_SGR(int)>
c000af6c:	58                   	pop    eax
c000af6d:	5a                   	pop    edx
c000af6e:	eb 23                	jmp    c000af93 <VgaText::putchar(char)+0xb7>
c000af70:	3c 4a                	cmp    al,0x4a
c000af72:	75 1f                	jne    c000af93 <VgaText::putchar(char)+0xb7>
c000af74:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000af78:	75 19                	jne    c000af93 <VgaText::putchar(char)+0xb7>
c000af7a:	83 ec 0c             	sub    esp,0xc
c000af7d:	53                   	push   ebx
c000af7e:	e8 ff fe ff ff       	call   c000ae82 <VgaText::clearScreen()>
c000af83:	83 c4 0c             	add    esp,0xc
c000af86:	6a 00                	push   0x0
c000af88:	6a 00                	push   0x0
c000af8a:	53                   	push   ebx
c000af8b:	e8 5a fb ff ff       	call   c000aaea <VgaText::setCursor(int, int)>
c000af90:	83 c4 10             	add    esp,0x10
c000af93:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000af99:	eb 27                	jmp    c000afc2 <VgaText::putchar(char)+0xe6>
c000af9b:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000af9e:	83 fa 0e             	cmp    edx,0xe
c000afa1:	7f 1f                	jg     c000afc2 <VgaText::putchar(char)+0xe6>
c000afa3:	8d 4a 01             	lea    ecx,[edx+0x1]
c000afa6:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000afa9:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000afad:	eb 13                	jmp    c000afc2 <VgaText::putchar(char)+0xe6>
c000afaf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000afb2:	0f be c0             	movsx  eax,al
c000afb5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000afb8:	50                   	push   eax
c000afb9:	53                   	push   ebx
c000afba:	e8 65 fc ff ff       	call   c000ac24 <VgaText::putchar(char, VgaColour, VgaColour)>
c000afbf:	83 c4 10             	add    esp,0x10
c000afc2:	83 c4 14             	add    esp,0x14
c000afc5:	5b                   	pop    ebx
c000afc6:	5e                   	pop    esi
c000afc7:	c3                   	ret    

c000afc8 <VgaText::putx(unsigned int)>:
c000afc8:	57                   	push   edi
c000afc9:	b9 11 00 00 00       	mov    ecx,0x11
c000afce:	56                   	push   esi
c000afcf:	be ce 3f 02 c0       	mov    esi,0xc0023fce
c000afd4:	53                   	push   ebx
c000afd5:	83 ec 20             	sub    esp,0x20
c000afd8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000afdc:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000afe0:	fc                   	cld    
c000afe1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000afe3:	be 08 00 00 00       	mov    esi,0x8
c000afe8:	50                   	push   eax
c000afe9:	50                   	push   eax
c000afea:	89 d8                	mov    eax,ebx
c000afec:	c1 e3 04             	shl    ebx,0x4
c000afef:	c1 e8 1c             	shr    eax,0x1c
c000aff2:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000aff7:	50                   	push   eax
c000aff8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000affc:	e8 db fe ff ff       	call   c000aedc <VgaText::putchar(char)>
c000b001:	83 c4 10             	add    esp,0x10
c000b004:	4e                   	dec    esi
c000b005:	75 e1                	jne    c000afe8 <VgaText::putx(unsigned int)+0x20>
c000b007:	83 c4 20             	add    esp,0x20
c000b00a:	5b                   	pop    ebx
c000b00b:	5e                   	pop    esi
c000b00c:	5f                   	pop    edi
c000b00d:	c3                   	ret    

c000b00e <VgaText::puts(char const*)>:
c000b00e:	53                   	push   ebx
c000b00f:	83 ec 08             	sub    esp,0x8
c000b012:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b016:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000b019:	84 c0                	test   al,al
c000b01b:	74 12                	je     c000b02f <VgaText::puts(char const*)+0x21>
c000b01d:	43                   	inc    ebx
c000b01e:	51                   	push   ecx
c000b01f:	51                   	push   ecx
c000b020:	50                   	push   eax
c000b021:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b025:	e8 b2 fe ff ff       	call   c000aedc <VgaText::putchar(char)>
c000b02a:	83 c4 10             	add    esp,0x10
c000b02d:	eb e7                	jmp    c000b016 <VgaText::puts(char const*)+0x8>
c000b02f:	83 c4 08             	add    esp,0x8
c000b032:	5b                   	pop    ebx
c000b033:	c3                   	ret    

c000b034 <VgaText::VgaText(char const*)>:
c000b034:	57                   	push   edi
c000b035:	56                   	push   esi
c000b036:	53                   	push   ebx
c000b037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b03b:	83 ec 08             	sub    esp,0x8
c000b03e:	6a 00                	push   0x0
c000b040:	50                   	push   eax
c000b041:	e8 48 05 00 00       	call   c000b58e <UnixFile::UnixFile(int)>
c000b046:	83 c4 10             	add    esp,0x10
c000b049:	ba 34 40 02 c0       	mov    edx,0xc0024034
c000b04e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b052:	89 10                	mov    DWORD PTR [eax],edx
c000b054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b058:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b05f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b063:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000b06a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b06e:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000b072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b076:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000b07a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b07e:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000b085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b089:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000b090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b094:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000b09b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b09f:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000b0a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0aa:	8d 50 60             	lea    edx,[eax+0x60]
c000b0ad:	bb a0 7b 02 c0       	mov    ebx,0xc0027ba0
c000b0b2:	b8 08 00 00 00       	mov    eax,0x8
c000b0b7:	fc                   	cld    
c000b0b8:	89 d7                	mov    edi,edx
c000b0ba:	89 de                	mov    esi,ebx
c000b0bc:	89 c1                	mov    ecx,eax
c000b0be:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b0c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0c4:	05 82 00 00 00       	add    eax,0x82
c000b0c9:	83 ec 08             	sub    esp,0x8
c000b0cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0d0:	50                   	push   eax
c000b0d1:	e8 6a 56 ff ff       	call   c0000740 <strcpy>
c000b0d6:	83 c4 10             	add    esp,0x10
c000b0d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0dd:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b0e4:	83 ec 0c             	sub    esp,0xc
c000b0e7:	6a 01                	push   0x1
c000b0e9:	e8 e3 08 00 00       	call   c000b9d1 <Virt::allocateKernelVirtualPages(int)>
c000b0ee:	83 c4 10             	add    esp,0x10
c000b0f1:	89 c2                	mov    edx,eax
c000b0f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0f7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b0fa:	8b 1d 70 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027c70
c000b100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b104:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b107:	89 c6                	mov    esi,eax
c000b109:	e8 b0 ef ff ff       	call   c000a0be <Phys::allocatePage()>
c000b10e:	68 05 0c 00 00       	push   0xc05
c000b113:	56                   	push   esi
c000b114:	50                   	push   eax
c000b115:	53                   	push   ebx
c000b116:	e8 5d 0f 00 00       	call   c000c078 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b11b:	83 c4 10             	add    esp,0x10
c000b11e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b122:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b125:	83 ec 04             	sub    esp,0x4
c000b128:	68 00 0f 00 00       	push   0xf00
c000b12d:	6a 00                	push   0x0
c000b12f:	50                   	push   eax
c000b130:	e8 4f 55 ff ff       	call   c0000684 <memset>
c000b135:	83 c4 10             	add    esp,0x10
c000b138:	83 ec 04             	sub    esp,0x4
c000b13b:	6a 00                	push   0x0
c000b13d:	6a 07                	push   0x7
c000b13f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b143:	e8 18 f8 ff ff       	call   c000a960 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b148:	83 c4 10             	add    esp,0x10
c000b14b:	83 ec 04             	sub    esp,0x4
c000b14e:	6a 00                	push   0x0
c000b150:	6a 00                	push   0x0
c000b152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b156:	e8 8f f9 ff ff       	call   c000aaea <VgaText::setCursor(int, int)>
c000b15b:	83 c4 10             	add    esp,0x10
c000b15e:	83 ec 0c             	sub    esp,0xc
c000b161:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b165:	e8 18 fd ff ff       	call   c000ae82 <VgaText::clearScreen()>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b171:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b179:	05 02 01 00 00       	add    eax,0x102
c000b17e:	83 ec 04             	sub    esp,0x4
c000b181:	68 96 00 00 00       	push   0x96
c000b186:	6a 00                	push   0x0
c000b188:	50                   	push   eax
c000b189:	e8 f6 54 ff ff       	call   c0000684 <memset>
c000b18e:	83 c4 10             	add    esp,0x10
c000b191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b195:	05 98 01 00 00       	add    eax,0x198
c000b19a:	83 ec 04             	sub    esp,0x4
c000b19d:	68 2c 01 00 00       	push   0x12c
c000b1a2:	6a 00                	push   0x0
c000b1a4:	50                   	push   eax
c000b1a5:	e8 da 54 ff ff       	call   c0000684 <memset>
c000b1aa:	83 c4 10             	add    esp,0x10
c000b1ad:	90                   	nop
c000b1ae:	5b                   	pop    ebx
c000b1af:	5e                   	pop    esi
c000b1b0:	5f                   	pop    edi
c000b1b1:	c3                   	ret    

c000b1b2 <VgaText::receiveKey(unsigned char)>:
c000b1b2:	55                   	push   ebp
c000b1b3:	57                   	push   edi
c000b1b4:	56                   	push   esi
c000b1b5:	53                   	push   ebx
c000b1b6:	83 ec 1c             	sub    esp,0x1c
c000b1b9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b1bd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b1c1:	84 db                	test   bl,bl
c000b1c3:	0f 84 c9 00 00 00    	je     c000b292 <VgaText::receiveKey(unsigned char)+0xe0>
c000b1c9:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b1cf:	80 fb 08             	cmp    bl,0x8
c000b1d2:	75 2c                	jne    c000b200 <VgaText::receiveKey(unsigned char)+0x4e>
c000b1d4:	83 ec 0c             	sub    esp,0xc
c000b1d7:	57                   	push   edi
c000b1d8:	e8 c3 54 ff ff       	call   c00006a0 <strlen>
c000b1dd:	83 c4 10             	add    esp,0x10
c000b1e0:	85 c0                	test   eax,eax
c000b1e2:	74 41                	je     c000b225 <VgaText::receiveKey(unsigned char)+0x73>
c000b1e4:	50                   	push   eax
c000b1e5:	50                   	push   eax
c000b1e6:	6a 08                	push   0x8
c000b1e8:	56                   	push   esi
c000b1e9:	e8 ee fc ff ff       	call   c000aedc <VgaText::putchar(char)>
c000b1ee:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b1f1:	e8 aa 54 ff ff       	call   c00006a0 <strlen>
c000b1f6:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b1fe:	eb 22                	jmp    c000b222 <VgaText::receiveKey(unsigned char)+0x70>
c000b200:	0f be c3             	movsx  eax,bl
c000b203:	52                   	push   edx
c000b204:	52                   	push   edx
c000b205:	50                   	push   eax
c000b206:	56                   	push   esi
c000b207:	e8 d0 fc ff ff       	call   c000aedc <VgaText::putchar(char)>
c000b20c:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b210:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b215:	59                   	pop    ecx
c000b216:	5d                   	pop    ebp
c000b217:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b21b:	50                   	push   eax
c000b21c:	57                   	push   edi
c000b21d:	e8 5e 56 ff ff       	call   c0000880 <strcat>
c000b222:	83 c4 10             	add    esp,0x10
c000b225:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b22c:	75 05                	jne    c000b233 <VgaText::receiveKey(unsigned char)+0x81>
c000b22e:	80 fb 0a             	cmp    bl,0xa
c000b231:	75 53                	jne    c000b286 <VgaText::receiveKey(unsigned char)+0xd4>
c000b233:	83 ec 0c             	sub    esp,0xc
c000b236:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c000b23c:	53                   	push   ebx
c000b23d:	e8 5e 54 ff ff       	call   c00006a0 <strlen>
c000b242:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b245:	89 c5                	mov    ebp,eax
c000b247:	e8 54 54 ff ff       	call   c00006a0 <strlen>
c000b24c:	83 c4 10             	add    esp,0x10
c000b24f:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b253:	3d 2c 01 00 00       	cmp    eax,0x12c
c000b258:	76 10                	jbe    c000b26a <VgaText::receiveKey(unsigned char)+0xb8>
c000b25a:	83 ec 0c             	sub    esp,0xc
c000b25d:	68 df 3f 02 c0       	push   0xc0023fdf
c000b262:	e8 3c 96 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c000b267:	83 c4 10             	add    esp,0x10
c000b26a:	50                   	push   eax
c000b26b:	50                   	push   eax
c000b26c:	57                   	push   edi
c000b26d:	53                   	push   ebx
c000b26e:	e8 0d 56 ff ff       	call   c0000880 <strcat>
c000b273:	83 c4 0c             	add    esp,0xc
c000b276:	68 96 00 00 00       	push   0x96
c000b27b:	6a 00                	push   0x0
c000b27d:	57                   	push   edi
c000b27e:	e8 01 54 ff ff       	call   c0000684 <memset>
c000b283:	83 c4 10             	add    esp,0x10
c000b286:	83 ec 0c             	sub    esp,0xc
c000b289:	56                   	push   esi
c000b28a:	e8 6d fa ff ff       	call   c000acfc <VgaText::doUpdate()>
c000b28f:	83 c4 10             	add    esp,0x10
c000b292:	83 c4 1c             	add    esp,0x1c
c000b295:	5b                   	pop    ebx
c000b296:	5e                   	pop    esi
c000b297:	5f                   	pop    edi
c000b298:	5d                   	pop    ebp
c000b299:	c3                   	ret    

c000b29a <VgaText::write(unsigned long long, void*, int*)>:
c000b29a:	55                   	push   ebp
c000b29b:	57                   	push   edi
c000b29c:	56                   	push   esi
c000b29d:	53                   	push   ebx
c000b29e:	83 ec 0c             	sub    esp,0xc
c000b2a1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b2a5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b2a9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b2ad:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b2b4:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b2b7:	39 eb                	cmp    ebx,ebp
c000b2b9:	74 13                	je     c000b2ce <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b2bb:	43                   	inc    ebx
c000b2bc:	50                   	push   eax
c000b2bd:	50                   	push   eax
c000b2be:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b2c2:	50                   	push   eax
c000b2c3:	56                   	push   esi
c000b2c4:	e8 13 fc ff ff       	call   c000aedc <VgaText::putchar(char)>
c000b2c9:	83 c4 10             	add    esp,0x10
c000b2cc:	eb e9                	jmp    c000b2b7 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b2ce:	83 ec 0c             	sub    esp,0xc
c000b2d1:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b2d8:	56                   	push   esi
c000b2d9:	e8 1e fa ff ff       	call   c000acfc <VgaText::doUpdate()>
c000b2de:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b2e2:	89 38                	mov    DWORD PTR [eax],edi
c000b2e4:	83 c4 1c             	add    esp,0x1c
c000b2e7:	31 c0                	xor    eax,eax
c000b2e9:	5b                   	pop    ebx
c000b2ea:	5e                   	pop    esi
c000b2eb:	5f                   	pop    edi
c000b2ec:	5d                   	pop    ebp
c000b2ed:	c3                   	ret    

c000b2ee <newTerminal(char*)>:
c000b2ee:	83 ec 28             	sub    esp,0x28
c000b2f1:	68 c4 02 00 00       	push   0x2c4
c000b2f6:	e8 0c e7 ff ff       	call   c0009a07 <malloc>
c000b2fb:	5a                   	pop    edx
c000b2fc:	59                   	pop    ecx
c000b2fd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b301:	50                   	push   eax
c000b302:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b306:	e8 29 fd ff ff       	call   c000b034 <VgaText::VgaText(char const*)>
c000b30b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b30f:	83 c4 2c             	add    esp,0x2c
c000b312:	c3                   	ret    
c000b313:	90                   	nop

c000b314 <TSS::TSS()>:
c000b314:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b318:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b31f:	90                   	nop
c000b320:	c3                   	ret    
c000b321:	90                   	nop
c000b322:	66 90                	xchg   ax,ax

c000b324 <TSS::setESP(unsigned long)>:
c000b324:	55                   	push   ebp
c000b325:	89 e5                	mov    ebp,esp
c000b327:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b32a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b32d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b330:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b333:	90                   	nop
c000b334:	5d                   	pop    ebp
c000b335:	c3                   	ret    
c000b336:	66 90                	xchg   ax,ax

c000b338 <TSS::flush()>:
c000b338:	55                   	push   ebp
c000b339:	89 e5                	mov    ebp,esp
c000b33b:	83 ec 10             	sub    esp,0x10
c000b33e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b341:	8b 00                	mov    eax,DWORD PTR [eax]
c000b343:	83 c8 03             	or     eax,0x3
c000b346:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b34a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b34e:	66 89 d0             	mov    ax,dx
c000b351:	0f 00 d8             	ltr    ax
c000b354:	90                   	nop
c000b355:	c9                   	leave  
c000b356:	c3                   	ret    
c000b357:	90                   	nop

c000b358 <TSS::setup(unsigned long, unsigned long)>:
c000b358:	55                   	push   ebp
c000b359:	89 e5                	mov    ebp,esp
c000b35b:	83 ec 18             	sub    esp,0x18
c000b35e:	83 ec 0c             	sub    esp,0xc
c000b361:	6a 68                	push   0x68
c000b363:	e8 9f e6 ff ff       	call   c0009a07 <malloc>
c000b368:	83 c4 10             	add    esp,0x10
c000b36b:	89 c2                	mov    edx,eax
c000b36d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b370:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b373:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b376:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b379:	83 ec 04             	sub    esp,0x4
c000b37c:	6a 68                	push   0x68
c000b37e:	6a 00                	push   0x0
c000b380:	50                   	push   eax
c000b381:	e8 fe 52 ff ff       	call   c0000684 <memset>
c000b386:	83 c4 10             	add    esp,0x10
c000b389:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b38c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b38f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b395:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b398:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b39b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b3a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3a7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b3aa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b3ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3b3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b3b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3bf:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b3c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3cb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b3d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3d7:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b3dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3e3:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b3e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3ef:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b3f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3fb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b3fe:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b401:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b404:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b407:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b40a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b40d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b410:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b413:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b41a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b41d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b420:	0f 20 da             	mov    edx,cr3
c000b423:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b426:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b429:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b42c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b42f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b432:	83 ec 08             	sub    esp,0x8
c000b435:	50                   	push   eax
c000b436:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b439:	50                   	push   eax
c000b43a:	e8 25 de ff ff       	call   c0009264 <GDTEntry::setBase(unsigned int)>
c000b43f:	83 c4 10             	add    esp,0x10
c000b442:	83 ec 08             	sub    esp,0x8
c000b445:	6a 68                	push   0x68
c000b447:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b44a:	50                   	push   eax
c000b44b:	e8 30 de ff ff       	call   c0009280 <GDTEntry::setLimit(unsigned int)>
c000b450:	83 c4 10             	add    esp,0x10
c000b453:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b457:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b45a:	83 e0 0f             	and    eax,0xf
c000b45d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b460:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b463:	83 c8 40             	or     eax,0x40
c000b466:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b469:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c000b46e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b474:	05 78 01 00 00       	add    eax,0x178
c000b479:	83 ec 04             	sub    esp,0x4
c000b47c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b47f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b482:	50                   	push   eax
c000b483:	e8 2c de ff ff       	call   c00092b4 <GDT::addEntry(GDTEntry)>
c000b488:	83 c4 10             	add    esp,0x10
c000b48b:	89 c2                	mov    edx,eax
c000b48d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b490:	89 10                	mov    DWORD PTR [eax],edx
c000b492:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c000b497:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b49d:	05 78 01 00 00       	add    eax,0x178
c000b4a2:	83 ec 0c             	sub    esp,0xc
c000b4a5:	50                   	push   eax
c000b4a6:	e8 33 de ff ff       	call   c00092de <GDT::flush()>
c000b4ab:	83 c4 10             	add    esp,0x10
c000b4ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b4b1:	8b 00                	mov    eax,DWORD PTR [eax]
c000b4b3:	c9                   	leave  
c000b4b4:	c3                   	ret    
c000b4b5:	90                   	nop

c000b4b6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b4b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b4be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b4c1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b4c6:	75 08                	jne    c000b4d0 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b4c8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b4ce:	eb 38                	jmp    c000b508 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b4d0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b4d5:	75 17                	jne    c000b4ee <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b4d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b4dc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b4df:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b4e5:	8b 10                	mov    edx,DWORD PTR [eax]
c000b4e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b4eb:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b4ee:	89 c1                	mov    ecx,eax
c000b4f0:	83 e1 fd             	and    ecx,0xfffffffd
c000b4f3:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b4f9:	74 cd                	je     c000b4c8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b4fb:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b500:	83 e0 ef             	and    eax,0xffffffef
c000b503:	83 f8 08             	cmp    eax,0x8
c000b506:	76 c0                	jbe    c000b4c8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b508:	31 c0                	xor    eax,eax
c000b50a:	c3                   	ret    
c000b50b:	90                   	nop

c000b50c <ReservedFilename::isAtty()>:
c000b50c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b510:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b513:	31 c0                	xor    eax,eax
c000b515:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b51b:	74 09                	je     c000b526 <ReservedFilename::isAtty()+0x1a>
c000b51d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b523:	0f 94 c0             	sete   al
c000b526:	c3                   	ret    
c000b527:	90                   	nop

c000b528 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b528:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b52c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b530:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b533:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b537:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b53c:	75 08                	jne    c000b546 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b53e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b544:	eb 3d                	jmp    c000b583 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b546:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b54b:	75 17                	jne    c000b564 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b54d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b552:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b555:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b55b:	8b 10                	mov    edx,DWORD PTR [eax]
c000b55d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b561:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b564:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b569:	75 04                	jne    c000b56f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b56b:	89 0a                	mov    DWORD PTR [edx],ecx
c000b56d:	eb 14                	jmp    c000b583 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b56f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b574:	74 c8                	je     c000b53e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b576:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b57b:	83 e0 ef             	and    eax,0xffffffef
c000b57e:	83 f8 08             	cmp    eax,0x8
c000b581:	76 bb                	jbe    c000b53e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b583:	31 c0                	xor    eax,eax
c000b585:	c3                   	ret    

c000b586 <UnixFile::getFileDescriptor()>:
c000b586:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b58a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b58d:	c3                   	ret    

c000b58e <UnixFile::UnixFile(int)>:
c000b58e:	53                   	push   ebx
c000b58f:	83 ec 28             	sub    esp,0x28
c000b592:	ba fc 40 02 c0       	mov    edx,0xc00240fc
c000b597:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b59b:	89 10                	mov    DWORD PTR [eax],edx
c000b59d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b5a5:	0f 8f 8c 01 00 00    	jg     c000b737 <UnixFile::UnixFile(int)+0x1a9>
c000b5ab:	a1 80 6f 02 c0       	mov    eax,ds:0xc0026f80
c000b5b0:	8d 50 01             	lea    edx,[eax+0x1]
c000b5b3:	89 15 80 6f 02 c0    	mov    DWORD PTR ds:0xc0026f80,edx
c000b5b9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b5bd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b5c0:	83 ec 08             	sub    esp,0x8
c000b5c3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b5c7:	68 58 7c 02 c0       	push   0xc0027c58
c000b5cc:	e8 2b 71 01 00       	call   c00226fc <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b5d1:	83 c4 10             	add    esp,0x10
c000b5d4:	a0 54 7c 02 c0       	mov    al,ds:0xc0027c54
c000b5d9:	83 f0 01             	xor    eax,0x1
c000b5dc:	84 c0                	test   al,al
c000b5de:	0f 84 54 01 00 00    	je     c000b738 <UnixFile::UnixFile(int)+0x1aa>
c000b5e4:	c6 05 54 7c 02 c0 01 	mov    BYTE PTR ds:0xc0027c54,0x1
c000b5eb:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b5f3:	83 ec 0c             	sub    esp,0xc
c000b5f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b5fa:	e8 08 e4 ff ff       	call   c0009a07 <malloc>
c000b5ff:	83 c4 10             	add    esp,0x10
c000b602:	89 c3                	mov    ebx,eax
c000b604:	83 ec 08             	sub    esp,0x8
c000b607:	68 03 ff ff 0f       	push   0xfffff03
c000b60c:	53                   	push   ebx
c000b60d:	e8 2c 01 00 00       	call   c000b73e <ReservedFilename::ReservedFilename(int)>
c000b612:	83 c4 10             	add    esp,0x10
c000b615:	89 1d 4c 7c 02 c0    	mov    DWORD PTR ds:0xc0027c4c,ebx
c000b61b:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b623:	83 ec 0c             	sub    esp,0xc
c000b626:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b62a:	e8 d8 e3 ff ff       	call   c0009a07 <malloc>
c000b62f:	83 c4 10             	add    esp,0x10
c000b632:	89 c3                	mov    ebx,eax
c000b634:	83 ec 08             	sub    esp,0x8
c000b637:	68 01 ff ff 0f       	push   0xfffff01
c000b63c:	53                   	push   ebx
c000b63d:	e8 fc 00 00 00       	call   c000b73e <ReservedFilename::ReservedFilename(int)>
c000b642:	83 c4 10             	add    esp,0x10
c000b645:	89 1d 50 7c 02 c0    	mov    DWORD PTR ds:0xc0027c50,ebx
c000b64b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b653:	83 ec 0c             	sub    esp,0xc
c000b656:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b65a:	e8 a8 e3 ff ff       	call   c0009a07 <malloc>
c000b65f:	83 c4 10             	add    esp,0x10
c000b662:	89 c3                	mov    ebx,eax
c000b664:	83 ec 08             	sub    esp,0x8
c000b667:	68 00 ff ff 0f       	push   0xfffff00
c000b66c:	53                   	push   ebx
c000b66d:	e8 cc 00 00 00       	call   c000b73e <ReservedFilename::ReservedFilename(int)>
c000b672:	83 c4 10             	add    esp,0x10
c000b675:	89 1d 44 7c 02 c0    	mov    DWORD PTR ds:0xc0027c44,ebx
c000b67b:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b683:	83 ec 0c             	sub    esp,0xc
c000b686:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b68a:	e8 78 e3 ff ff       	call   c0009a07 <malloc>
c000b68f:	83 c4 10             	add    esp,0x10
c000b692:	89 c3                	mov    ebx,eax
c000b694:	83 ec 08             	sub    esp,0x8
c000b697:	68 02 ff ff 0f       	push   0xfffff02
c000b69c:	53                   	push   ebx
c000b69d:	e8 9c 00 00 00       	call   c000b73e <ReservedFilename::ReservedFilename(int)>
c000b6a2:	83 c4 10             	add    esp,0x10
c000b6a5:	89 1d 48 7c 02 c0    	mov    DWORD PTR ds:0xc0027c48,ebx
c000b6ab:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b6b3:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b6b8:	7f 7e                	jg     c000b738 <UnixFile::UnixFile(int)+0x1aa>
c000b6ba:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b6c2:	83 ec 0c             	sub    esp,0xc
c000b6c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b6c9:	e8 39 e3 ff ff       	call   c0009a07 <malloc>
c000b6ce:	83 c4 10             	add    esp,0x10
c000b6d1:	89 c3                	mov    ebx,eax
c000b6d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6d7:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b6dc:	83 ec 08             	sub    esp,0x8
c000b6df:	50                   	push   eax
c000b6e0:	53                   	push   ebx
c000b6e1:	e8 58 00 00 00       	call   c000b73e <ReservedFilename::ReservedFilename(int)>
c000b6e6:	83 c4 10             	add    esp,0x10
c000b6e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6ed:	89 1c 85 20 7c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd83e0],ebx
c000b6f4:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b6fc:	83 ec 0c             	sub    esp,0xc
c000b6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b703:	e8 ff e2 ff ff       	call   c0009a07 <malloc>
c000b708:	83 c4 10             	add    esp,0x10
c000b70b:	89 c3                	mov    ebx,eax
c000b70d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b711:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b716:	83 ec 08             	sub    esp,0x8
c000b719:	50                   	push   eax
c000b71a:	53                   	push   ebx
c000b71b:	e8 1e 00 00 00       	call   c000b73e <ReservedFilename::ReservedFilename(int)>
c000b720:	83 c4 10             	add    esp,0x10
c000b723:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b727:	89 1c 85 e0 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8420],ebx
c000b72e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b732:	e9 7c ff ff ff       	jmp    c000b6b3 <UnixFile::UnixFile(int)+0x125>
c000b737:	90                   	nop
c000b738:	83 c4 28             	add    esp,0x28
c000b73b:	5b                   	pop    ebx
c000b73c:	c3                   	ret    
c000b73d:	90                   	nop

c000b73e <ReservedFilename::ReservedFilename(int)>:
c000b73e:	83 ec 0c             	sub    esp,0xc
c000b741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b745:	83 ec 08             	sub    esp,0x8
c000b748:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b74c:	50                   	push   eax
c000b74d:	e8 3c fe ff ff       	call   c000b58e <UnixFile::UnixFile(int)>
c000b752:	83 c4 10             	add    esp,0x10
c000b755:	ba 18 41 02 c0       	mov    edx,0xc0024118
c000b75a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b75e:	89 10                	mov    DWORD PTR [eax],edx
c000b760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b764:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b768:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b76b:	90                   	nop
c000b76c:	83 c4 0c             	add    esp,0xc
c000b76f:	c3                   	ret    

c000b770 <UnixFile::~UnixFile()>:
c000b770:	83 ec 1c             	sub    esp,0x1c
c000b773:	ba fc 40 02 c0       	mov    edx,0xc00240fc
c000b778:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b77c:	89 10                	mov    DWORD PTR [eax],edx
c000b77e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b782:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b785:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b78a:	7f 73                	jg     c000b7ff <UnixFile::~UnixFile()+0x8f>
c000b78c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b794:	83 ec 0c             	sub    esp,0xc
c000b797:	68 58 7c 02 c0       	push   0xc0027c58
c000b79c:	e8 2f 70 01 00       	call   c00227d0 <LinkedList<UnixFile>::getFirstElement()>
c000b7a1:	83 c4 10             	add    esp,0x10
c000b7a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7a8:	83 ec 0c             	sub    esp,0xc
c000b7ab:	68 58 7c 02 c0       	push   0xc0027c58
c000b7b0:	e8 23 70 01 00       	call   c00227d8 <LinkedList<UnixFile>::removeFirst()>
c000b7b5:	83 c4 10             	add    esp,0x10
c000b7b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7bc:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b7c0:	74 40                	je     c000b802 <UnixFile::~UnixFile()+0x92>
c000b7c2:	83 ec 08             	sub    esp,0x8
c000b7c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b7c9:	68 58 7c 02 c0       	push   0xc0027c58
c000b7ce:	e8 29 6f 01 00       	call   c00226fc <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b7d3:	83 c4 10             	add    esp,0x10
c000b7d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b7da:	8d 50 01             	lea    edx,[eax+0x1]
c000b7dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7e1:	3d 88 13 00 00       	cmp    eax,0x1388
c000b7e6:	0f 94 c0             	sete   al
c000b7e9:	84 c0                	test   al,al
c000b7eb:	74 a7                	je     c000b794 <UnixFile::~UnixFile()+0x24>
c000b7ed:	83 ec 0c             	sub    esp,0xc
c000b7f0:	68 d4 40 02 c0       	push   0xc00240d4
c000b7f5:	e8 a9 90 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c000b7fa:	83 c4 10             	add    esp,0x10
c000b7fd:	eb 95                	jmp    c000b794 <UnixFile::~UnixFile()+0x24>
c000b7ff:	90                   	nop
c000b800:	eb 01                	jmp    c000b803 <UnixFile::~UnixFile()+0x93>
c000b802:	90                   	nop
c000b803:	90                   	nop
c000b804:	83 c4 1c             	add    esp,0x1c
c000b807:	c3                   	ret    

c000b808 <UnixFile::~UnixFile()>:
c000b808:	83 ec 0c             	sub    esp,0xc
c000b80b:	83 ec 0c             	sub    esp,0xc
c000b80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b812:	e8 59 ff ff ff       	call   c000b770 <UnixFile::~UnixFile()>
c000b817:	83 c4 10             	add    esp,0x10
c000b81a:	83 ec 08             	sub    esp,0x8
c000b81d:	6a 0c                	push   0xc
c000b81f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b823:	e8 ee 13 00 00       	call   c000cc16 <operator delete(void*, unsigned long)>
c000b828:	83 c4 10             	add    esp,0x10
c000b82b:	83 c4 0c             	add    esp,0xc
c000b82e:	c3                   	ret    
c000b82f:	90                   	nop

c000b830 <ReservedFilename::~ReservedFilename()>:
c000b830:	83 ec 0c             	sub    esp,0xc
c000b833:	ba 18 41 02 c0       	mov    edx,0xc0024118
c000b838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b83c:	89 10                	mov    DWORD PTR [eax],edx
c000b83e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b842:	83 ec 0c             	sub    esp,0xc
c000b845:	50                   	push   eax
c000b846:	e8 25 ff ff ff       	call   c000b770 <UnixFile::~UnixFile()>
c000b84b:	83 c4 10             	add    esp,0x10
c000b84e:	90                   	nop
c000b84f:	83 c4 0c             	add    esp,0xc
c000b852:	c3                   	ret    
c000b853:	90                   	nop

c000b854 <ReservedFilename::~ReservedFilename()>:
c000b854:	83 ec 0c             	sub    esp,0xc
c000b857:	83 ec 0c             	sub    esp,0xc
c000b85a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b85e:	e8 cd ff ff ff       	call   c000b830 <ReservedFilename::~ReservedFilename()>
c000b863:	83 c4 10             	add    esp,0x10
c000b866:	83 ec 08             	sub    esp,0x8
c000b869:	6a 0c                	push   0xc
c000b86b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b86f:	e8 a2 13 00 00       	call   c000cc16 <operator delete(void*, unsigned long)>
c000b874:	83 c4 10             	add    esp,0x10
c000b877:	83 c4 0c             	add    esp,0xc
c000b87a:	c3                   	ret    

c000b87b <getFromFileDescriptor(int)>:
c000b87b:	53                   	push   ebx
c000b87c:	83 ec 08             	sub    esp,0x8
c000b87f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b883:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b889:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b88f:	7f 2c                	jg     c000b8bd <getFromFileDescriptor(int)+0x42>
c000b891:	83 ec 0c             	sub    esp,0xc
c000b894:	68 58 7c 02 c0       	push   0xc0027c58
c000b899:	e8 32 6f 01 00       	call   c00227d0 <LinkedList<UnixFile>::getFirstElement()>
c000b89e:	83 c4 10             	add    esp,0x10
c000b8a1:	85 c0                	test   eax,eax
c000b8a3:	75 04                	jne    c000b8a9 <getFromFileDescriptor(int)+0x2e>
c000b8a5:	31 c0                	xor    eax,eax
c000b8a7:	eb 6e                	jmp    c000b917 <getFromFileDescriptor(int)+0x9c>
c000b8a9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b8ac:	74 69                	je     c000b917 <getFromFileDescriptor(int)+0x9c>
c000b8ae:	52                   	push   edx
c000b8af:	52                   	push   edx
c000b8b0:	50                   	push   eax
c000b8b1:	68 58 7c 02 c0       	push   0xc0027c58
c000b8b6:	e8 bf 6f 01 00       	call   c002287a <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b8bb:	eb e1                	jmp    c000b89e <getFromFileDescriptor(int)+0x23>
c000b8bd:	a1 4c 7c 02 c0       	mov    eax,ds:0xc0027c4c
c000b8c2:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b8c8:	74 4d                	je     c000b917 <getFromFileDescriptor(int)+0x9c>
c000b8ca:	a1 50 7c 02 c0       	mov    eax,ds:0xc0027c50
c000b8cf:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b8d5:	74 40                	je     c000b917 <getFromFileDescriptor(int)+0x9c>
c000b8d7:	a1 48 7c 02 c0       	mov    eax,ds:0xc0027c48
c000b8dc:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b8e2:	74 33                	je     c000b917 <getFromFileDescriptor(int)+0x9c>
c000b8e4:	a1 44 7c 02 c0       	mov    eax,ds:0xc0027c44
c000b8e9:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b8ef:	74 26                	je     c000b917 <getFromFileDescriptor(int)+0x9c>
c000b8f1:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b8f7:	83 f8 08             	cmp    eax,0x8
c000b8fa:	77 09                	ja     c000b905 <getFromFileDescriptor(int)+0x8a>
c000b8fc:	8b 04 85 20 7c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd83e0]
c000b903:	eb 12                	jmp    c000b917 <getFromFileDescriptor(int)+0x9c>
c000b905:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b90b:	83 fb 08             	cmp    ebx,0x8
c000b90e:	77 95                	ja     c000b8a5 <getFromFileDescriptor(int)+0x2a>
c000b910:	8b 04 9d e0 7b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8420]
c000b917:	83 c4 08             	add    esp,0x8
c000b91a:	5b                   	pop    ebx
c000b91b:	c3                   	ret    

c000b91c <__static_initialization_and_destruction_0(int, int)>:
c000b91c:	83 ec 0c             	sub    esp,0xc
c000b91f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b924:	75 34                	jne    c000b95a <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b926:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b92e:	75 2a                	jne    c000b95a <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b930:	83 ec 0c             	sub    esp,0xc
c000b933:	68 58 7c 02 c0       	push   0xc0027c58
c000b938:	e8 7d 6d 01 00       	call   c00226ba <LinkedList<UnixFile>::LinkedList()>
c000b93d:	83 c4 10             	add    esp,0x10
c000b940:	83 ec 04             	sub    esp,0x4
c000b943:	68 a0 6d 02 c0       	push   0xc0026da0
c000b948:	68 58 7c 02 c0       	push   0xc0027c58
c000b94d:	68 b8 26 02 c0       	push   0xc00226b8
c000b952:	e8 39 12 00 00       	call   c000cb90 <__cxa_atexit>
c000b957:	83 c4 10             	add    esp,0x10
c000b95a:	90                   	nop
c000b95b:	83 c4 0c             	add    esp,0xc
c000b95e:	c3                   	ret    

c000b95f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b95f:	83 ec 0c             	sub    esp,0xc
c000b962:	83 ec 08             	sub    esp,0x8
c000b965:	68 ff ff 00 00       	push   0xffff
c000b96a:	6a 01                	push   0x1
c000b96c:	e8 ab ff ff ff       	call   c000b91c <__static_initialization_and_destruction_0(int, int)>
c000b971:	83 c4 10             	add    esp,0x10
c000b974:	83 c4 0c             	add    esp,0xc
c000b977:	c3                   	ret    

c000b978 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b978:	53                   	push   ebx
c000b979:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b97d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b981:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b987:	89 c8                	mov    eax,ecx
c000b989:	d1 e8                	shr    eax,1
c000b98b:	03 05 88 6f 02 c0    	add    eax,DWORD PTR ds:0xc0026f88
c000b991:	83 e1 01             	and    ecx,0x1
c000b994:	8a 10                	mov    dl,BYTE PTR [eax]
c000b996:	75 09                	jne    c000b9a1 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b998:	83 e2 f0             	and    edx,0xfffffff0
c000b99b:	09 da                	or     edx,ebx
c000b99d:	88 10                	mov    BYTE PTR [eax],dl
c000b99f:	5b                   	pop    ebx
c000b9a0:	c3                   	ret    
c000b9a1:	c1 e3 04             	shl    ebx,0x4
c000b9a4:	83 e2 0f             	and    edx,0xf
c000b9a7:	09 da                	or     edx,ebx
c000b9a9:	88 10                	mov    BYTE PTR [eax],dl
c000b9ab:	5b                   	pop    ebx
c000b9ac:	c3                   	ret    

c000b9ad <Virt::getPageState(unsigned long)>:
c000b9ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9b1:	8b 0d 88 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026f88
c000b9b7:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b9bd:	89 d0                	mov    eax,edx
c000b9bf:	d1 e8                	shr    eax,1
c000b9c1:	83 e2 01             	and    edx,0x1
c000b9c4:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b9c7:	75 04                	jne    c000b9cd <Virt::getPageState(unsigned long)+0x20>
c000b9c9:	83 e0 0f             	and    eax,0xf
c000b9cc:	c3                   	ret    
c000b9cd:	c0 e8 04             	shr    al,0x4
c000b9d0:	c3                   	ret    

c000b9d1 <Virt::allocateKernelVirtualPages(int)>:
c000b9d1:	55                   	push   ebp
c000b9d2:	31 ed                	xor    ebp,ebp
c000b9d4:	57                   	push   edi
c000b9d5:	56                   	push   esi
c000b9d6:	53                   	push   ebx
c000b9d7:	31 db                	xor    ebx,ebx
c000b9d9:	83 ec 1c             	sub    esp,0x1c
c000b9dc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b9e0:	8b 3d 84 6f 02 c0    	mov    edi,DWORD PTR ds:0xc0026f84
c000b9e6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b9eb:	57                   	push   edi
c000b9ec:	e8 bc ff ff ff       	call   c000b9ad <Virt::getPageState(unsigned long)>
c000b9f1:	5a                   	pop    edx
c000b9f2:	84 c0                	test   al,al
c000b9f4:	75 3a                	jne    c000ba30 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b9f6:	85 db                	test   ebx,ebx
c000b9f8:	75 02                	jne    c000b9fc <Virt::allocateKernelVirtualPages(int)+0x2b>
c000b9fa:	89 fd                	mov    ebp,edi
c000b9fc:	43                   	inc    ebx
c000b9fd:	39 f3                	cmp    ebx,esi
c000b9ff:	74 5a                	je     c000ba5b <Virt::allocateKernelVirtualPages(int)+0x8a>
c000ba01:	47                   	inc    edi
c000ba02:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000ba08:	76 31                	jbe    c000ba3b <Virt::allocateKernelVirtualPages(int)+0x6a>
c000ba0a:	c7 05 84 6f 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0026f84,0xc8000
c000ba14:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000ba19:	75 28                	jne    c000ba43 <Virt::allocateKernelVirtualPages(int)+0x72>
c000ba1b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000ba20:	bf 00 80 0c 00       	mov    edi,0xc8000
c000ba25:	57                   	push   edi
c000ba26:	e8 82 ff ff ff       	call   c000b9ad <Virt::getPageState(unsigned long)>
c000ba2b:	5a                   	pop    edx
c000ba2c:	84 c0                	test   al,al
c000ba2e:	74 c6                	je     c000b9f6 <Virt::allocateKernelVirtualPages(int)+0x25>
c000ba30:	31 db                	xor    ebx,ebx
c000ba32:	47                   	inc    edi
c000ba33:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000ba39:	77 cf                	ja     c000ba0a <Virt::allocateKernelVirtualPages(int)+0x39>
c000ba3b:	89 3d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,edi
c000ba41:	eb a8                	jmp    c000b9eb <Virt::allocateKernelVirtualPages(int)+0x1a>
c000ba43:	83 ec 0c             	sub    esp,0xc
c000ba46:	68 2c 41 02 c0       	push   0xc002412c
c000ba4b:	e8 53 8e 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c000ba50:	8b 3d 84 6f 02 c0    	mov    edi,DWORD PTR ds:0xc0026f84
c000ba56:	83 c4 10             	add    esp,0x10
c000ba59:	eb 90                	jmp    c000b9eb <Virt::allocateKernelVirtualPages(int)+0x1a>
c000ba5b:	89 2d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebp
c000ba61:	4b                   	dec    ebx
c000ba62:	74 5f                	je     c000bac3 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000ba64:	85 f6                	test   esi,esi
c000ba66:	74 3d                	je     c000baa5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000ba68:	89 e8                	mov    eax,ebp
c000ba6a:	31 db                	xor    ebx,ebx
c000ba6c:	8d 7e ff             	lea    edi,[esi-0x1]
c000ba6f:	eb 14                	jmp    c000ba85 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000ba71:	6a 01                	push   0x1
c000ba73:	43                   	inc    ebx
c000ba74:	50                   	push   eax
c000ba75:	e8 fe fe ff ff       	call   c000b978 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ba7a:	58                   	pop    eax
c000ba7b:	39 f3                	cmp    ebx,esi
c000ba7d:	5a                   	pop    edx
c000ba7e:	74 25                	je     c000baa5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000ba80:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c000ba85:	8d 50 01             	lea    edx,[eax+0x1]
c000ba88:	85 db                	test   ebx,ebx
c000ba8a:	89 15 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,edx
c000ba90:	74 20                	je     c000bab2 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000ba92:	39 df                	cmp    edi,ebx
c000ba94:	75 db                	jne    c000ba71 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000ba96:	6a 03                	push   0x3
c000ba98:	43                   	inc    ebx
c000ba99:	50                   	push   eax
c000ba9a:	e8 d9 fe ff ff       	call   c000b978 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ba9f:	59                   	pop    ecx
c000baa0:	39 f3                	cmp    ebx,esi
c000baa2:	58                   	pop    eax
c000baa3:	75 db                	jne    c000ba80 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000baa5:	83 c4 1c             	add    esp,0x1c
c000baa8:	89 e8                	mov    eax,ebp
c000baaa:	5b                   	pop    ebx
c000baab:	c1 e0 0c             	shl    eax,0xc
c000baae:	5e                   	pop    esi
c000baaf:	5f                   	pop    edi
c000bab0:	5d                   	pop    ebp
c000bab1:	c3                   	ret    
c000bab2:	6a 02                	push   0x2
c000bab4:	bb 01 00 00 00       	mov    ebx,0x1
c000bab9:	50                   	push   eax
c000baba:	e8 b9 fe ff ff       	call   c000b978 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000babf:	58                   	pop    eax
c000bac0:	5a                   	pop    edx
c000bac1:	eb bd                	jmp    c000ba80 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000bac3:	6a 04                	push   0x4
c000bac5:	8d 45 01             	lea    eax,[ebp+0x1]
c000bac8:	55                   	push   ebp
c000bac9:	a3 84 6f 02 c0       	mov    ds:0xc0026f84,eax
c000bace:	e8 a5 fe ff ff       	call   c000b978 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bad3:	59                   	pop    ecx
c000bad4:	89 e8                	mov    eax,ebp
c000bad6:	5b                   	pop    ebx
c000bad7:	c1 e0 0c             	shl    eax,0xc
c000bada:	83 c4 1c             	add    esp,0x1c
c000badd:	5b                   	pop    ebx
c000bade:	5e                   	pop    esi
c000badf:	5f                   	pop    edi
c000bae0:	5d                   	pop    ebp
c000bae1:	c3                   	ret    

c000bae2 <Virt::freeSwapfilePage(unsigned long)>:
c000bae2:	53                   	push   ebx
c000bae3:	8b 15 6c 7c 02 c0    	mov    edx,DWORD PTR ds:0xc0027c6c
c000bae9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000baed:	b8 01 00 00 00       	mov    eax,0x1
c000baf2:	89 cb                	mov    ebx,ecx
c000baf4:	d3 e0                	shl    eax,cl
c000baf6:	c1 eb 05             	shr    ebx,0x5
c000baf9:	f7 d0                	not    eax
c000bafb:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000bafe:	5b                   	pop    ebx
c000baff:	c3                   	ret    

c000bb00 <Virt::swapIDToSector(unsigned long)>:
c000bb00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb04:	0f af 05 8c 6f 02 c0 	imul   eax,DWORD PTR ds:0xc0026f8c
c000bb0b:	03 05 94 6f 02 c0    	add    eax,DWORD PTR ds:0xc0026f94
c000bb11:	c3                   	ret    

c000bb12 <Virt::allocateSwapfilePage()>:
c000bb12:	55                   	push   ebp
c000bb13:	31 d2                	xor    edx,edx
c000bb15:	57                   	push   edi
c000bb16:	56                   	push   esi
c000bb17:	53                   	push   ebx
c000bb18:	83 ec 0c             	sub    esp,0xc
c000bb1b:	8b 0d 8c 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026f8c
c000bb21:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c000bb26:	f7 f1                	div    ecx
c000bb28:	39 0d 90 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f90,ecx
c000bb2e:	72 2d                	jb     c000bb5d <Virt::allocateSwapfilePage()+0x4b>
c000bb30:	8b 35 6c 7c 02 c0    	mov    esi,DWORD PTR ds:0xc0027c6c
c000bb36:	8b 16                	mov    edx,DWORD PTR [esi]
c000bb38:	f6 c2 01             	test   dl,0x1
c000bb3b:	74 3c                	je     c000bb79 <Virt::allocateSwapfilePage()+0x67>
c000bb3d:	31 c9                	xor    ecx,ecx
c000bb3f:	bf 01 00 00 00       	mov    edi,0x1
c000bb44:	eb 12                	jmp    c000bb58 <Virt::allocateSwapfilePage()+0x46>
c000bb46:	89 fd                	mov    ebp,edi
c000bb48:	89 ca                	mov    edx,ecx
c000bb4a:	d3 e5                	shl    ebp,cl
c000bb4c:	c1 ea 05             	shr    edx,0x5
c000bb4f:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000bb52:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bb54:	85 ea                	test   edx,ebp
c000bb56:	74 2a                	je     c000bb82 <Virt::allocateSwapfilePage()+0x70>
c000bb58:	41                   	inc    ecx
c000bb59:	39 c8                	cmp    eax,ecx
c000bb5b:	77 e9                	ja     c000bb46 <Virt::allocateSwapfilePage()+0x34>
c000bb5d:	83 ec 0c             	sub    esp,0xc
c000bb60:	68 e4 42 02 c0       	push   0xc00242e4
c000bb65:	e8 39 8d 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c000bb6a:	83 c4 10             	add    esp,0x10
c000bb6d:	31 c9                	xor    ecx,ecx
c000bb6f:	83 c4 0c             	add    esp,0xc
c000bb72:	89 c8                	mov    eax,ecx
c000bb74:	5b                   	pop    ebx
c000bb75:	5e                   	pop    esi
c000bb76:	5f                   	pop    edi
c000bb77:	5d                   	pop    ebp
c000bb78:	c3                   	ret    
c000bb79:	89 f3                	mov    ebx,esi
c000bb7b:	bd 01 00 00 00       	mov    ebp,0x1
c000bb80:	31 c9                	xor    ecx,ecx
c000bb82:	09 ea                	or     edx,ebp
c000bb84:	89 c8                	mov    eax,ecx
c000bb86:	89 13                	mov    DWORD PTR [ebx],edx
c000bb88:	83 c4 0c             	add    esp,0xc
c000bb8b:	5b                   	pop    ebx
c000bb8c:	5e                   	pop    esi
c000bb8d:	5f                   	pop    edi
c000bb8e:	5d                   	pop    ebp
c000bb8f:	c3                   	ret    

c000bb90 <Virt::virtualMemorySetup()>:
c000bb90:	53                   	push   ebx
c000bb91:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bb96:	6a 0f                	push   0xf
c000bb98:	53                   	push   ebx
c000bb99:	43                   	inc    ebx
c000bb9a:	e8 d9 fd ff ff       	call   c000b978 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bb9f:	58                   	pop    eax
c000bba0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bba6:	5a                   	pop    edx
c000bba7:	75 ed                	jne    c000bb96 <Virt::virtualMemorySetup()+0x6>
c000bba9:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bbae:	6a 00                	push   0x0
c000bbb0:	53                   	push   ebx
c000bbb1:	43                   	inc    ebx
c000bbb2:	e8 c1 fd ff ff       	call   c000b978 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bbb7:	59                   	pop    ecx
c000bbb8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bbbe:	58                   	pop    eax
c000bbbf:	75 ed                	jne    c000bbae <Virt::virtualMemorySetup()+0x1e>
c000bbc1:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000bbc6:	6a 0f                	push   0xf
c000bbc8:	53                   	push   ebx
c000bbc9:	43                   	inc    ebx
c000bbca:	e8 a9 fd ff ff       	call   c000b978 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bbcf:	58                   	pop    eax
c000bbd0:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000bbd6:	5a                   	pop    edx
c000bbd7:	75 ed                	jne    c000bbc6 <Virt::virtualMemorySetup()+0x36>
c000bbd9:	5b                   	pop    ebx
c000bbda:	c3                   	ret    

c000bbdb <Virt::setupPageSwapping(int)>:
c000bbdb:	53                   	push   ebx
c000bbdc:	83 ec 0c             	sub    esp,0xc
c000bbdf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bbe3:	a1 08 81 02 c0       	mov    eax,ds:0xc0028108
c000bbe8:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000bbee:	8b 10                	mov    edx,DWORD PTR [eax]
c000bbf0:	53                   	push   ebx
c000bbf1:	c1 e3 0b             	shl    ebx,0xb
c000bbf4:	68 fb 42 02 c0       	push   0xc00242fb
c000bbf9:	50                   	push   eax
c000bbfa:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000bbfd:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c000bc03:	c6 05 98 6f 02 c0 43 	mov    BYTE PTR ds:0xc0026f98,0x43
c000bc0a:	c1 eb 08             	shr    ebx,0x8
c000bc0d:	a3 94 6f 02 c0       	mov    ds:0xc0026f94,eax
c000bc12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bc15:	c7 05 8c 6f 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0026f8c,0x8
c000bc1f:	e8 e3 dd ff ff       	call   c0009a07 <malloc>
c000bc24:	83 c4 0c             	add    esp,0xc
c000bc27:	89 c1                	mov    ecx,eax
c000bc29:	a3 6c 7c 02 c0       	mov    ds:0xc0027c6c,eax
c000bc2e:	31 d2                	xor    edx,edx
c000bc30:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c000bc35:	f7 35 8c 6f 02 c0    	div    DWORD PTR ds:0xc0026f8c
c000bc3b:	c1 e8 05             	shr    eax,0x5
c000bc3e:	50                   	push   eax
c000bc3f:	6a 00                	push   0x0
c000bc41:	51                   	push   ecx
c000bc42:	e8 3d 4a ff ff       	call   c0000684 <memset>
c000bc47:	83 c4 18             	add    esp,0x18
c000bc4a:	5b                   	pop    ebx
c000bc4b:	c3                   	ret    

c000bc4c <VAS::VAS()>:
c000bc4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc50:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc5b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bc62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc66:	a3 70 7c 02 c0       	mov    ds:0xc0027c70,eax
c000bc6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc6f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000bc73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc77:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000bc7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc7e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000bc85:	90                   	nop
c000bc86:	c3                   	ret    
c000bc87:	90                   	nop

c000bc88 <VAS::VAS(VAS*)>:
c000bc88:	83 ec 0c             	sub    esp,0xc
c000bc8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc8f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc9a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bca1:	83 ec 0c             	sub    esp,0xc
c000bca4:	68 4c 41 02 c0       	push   0xc002414c
c000bca9:	e8 f5 8b 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c000bcae:	83 c4 10             	add    esp,0x10
c000bcb1:	90                   	nop
c000bcb2:	83 c4 0c             	add    esp,0xc
c000bcb5:	c3                   	ret    

c000bcb6 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000bcb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bcba:	89 c2                	mov    edx,eax
c000bcbc:	c1 e8 0a             	shr    eax,0xa
c000bcbf:	c1 ea 16             	shr    edx,0x16
c000bcc2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bcc7:	19 c9                	sbb    ecx,ecx
c000bcc9:	c1 e2 0c             	shl    edx,0xc
c000bccc:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000bcd2:	25 fc 0f 00 00       	and    eax,0xffc
c000bcd7:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000bcde:	01 d0                	add    eax,edx
c000bce0:	c3                   	ret    
c000bce1:	90                   	nop

c000bce2 <VAS::getPageTableEntry(unsigned long)>:
c000bce2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bce6:	89 ca                	mov    edx,ecx
c000bce8:	c1 e9 0a             	shr    ecx,0xa
c000bceb:	c1 ea 16             	shr    edx,0x16
c000bcee:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000bcf4:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000bcfa:	c1 e0 0c             	shl    eax,0xc
c000bcfd:	8d 04 08             	lea    eax,[eax+ecx*1]
c000bd00:	c3                   	ret    

c000bd01 <Virt::freeKernelVirtualPages(unsigned long)>:
c000bd01:	57                   	push   edi
c000bd02:	56                   	push   esi
c000bd03:	be 01 00 00 00       	mov    esi,0x1
c000bd08:	53                   	push   ebx
c000bd09:	83 ec 10             	sub    esp,0x10
c000bd0c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bd10:	c1 eb 0c             	shr    ebx,0xc
c000bd13:	eb 3f                	jmp    c000bd54 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000bd15:	83 ec 08             	sub    esp,0x8
c000bd18:	57                   	push   edi
c000bd19:	ff 35 70 7c 02 c0    	push   DWORD PTR ds:0xc0027c70
c000bd1f:	e8 be ff ff ff       	call   c000bce2 <VAS::getPageTableEntry(unsigned long)>
c000bd24:	83 c4 10             	add    esp,0x10
c000bd27:	8b 00                	mov    eax,DWORD PTR [eax]
c000bd29:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bd2d:	f6 c4 04             	test   ah,0x4
c000bd30:	75 5f                	jne    c000bd91 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000bd32:	80 fa 04             	cmp    dl,0x4
c000bd35:	74 78                	je     c000bdaf <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000bd37:	80 fa 02             	cmp    dl,0x2
c000bd3a:	0f 84 88 00 00 00    	je     c000bdc8 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000bd40:	80 fa 03             	cmp    dl,0x3
c000bd43:	0f 84 ad 00 00 00    	je     c000bdf6 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000bd49:	fe ca                	dec    dl
c000bd4b:	0f 84 92 00 00 00    	je     c000bde3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bd51:	43                   	inc    ebx
c000bd52:	31 f6                	xor    esi,esi
c000bd54:	53                   	push   ebx
c000bd55:	89 df                	mov    edi,ebx
c000bd57:	e8 51 fc ff ff       	call   c000b9ad <Virt::getPageState(unsigned long)>
c000bd5c:	c1 e7 0c             	shl    edi,0xc
c000bd5f:	59                   	pop    ecx
c000bd60:	84 c0                	test   al,al
c000bd62:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000bd66:	75 ad                	jne    c000bd15 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000bd68:	83 ec 0c             	sub    esp,0xc
c000bd6b:	68 12 43 02 c0       	push   0xc0024312
c000bd70:	e8 2e 8b 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c000bd75:	58                   	pop    eax
c000bd76:	5a                   	pop    edx
c000bd77:	57                   	push   edi
c000bd78:	ff 35 70 7c 02 c0    	push   DWORD PTR ds:0xc0027c70
c000bd7e:	e8 5f ff ff ff       	call   c000bce2 <VAS::getPageTableEntry(unsigned long)>
c000bd83:	83 c4 10             	add    esp,0x10
c000bd86:	8b 00                	mov    eax,DWORD PTR [eax]
c000bd88:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bd8c:	f6 c4 04             	test   ah,0x4
c000bd8f:	74 c0                	je     c000bd51 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bd91:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000bd95:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bd9a:	83 ec 0c             	sub    esp,0xc
c000bd9d:	50                   	push   eax
c000bd9e:	e8 98 e2 ff ff       	call   c000a03b <Phys::freePage(unsigned long)>
c000bda3:	83 c4 10             	add    esp,0x10
c000bda6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bdaa:	80 fa 04             	cmp    dl,0x4
c000bdad:	75 88                	jne    c000bd37 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000bdaf:	89 f0                	mov    eax,esi
c000bdb1:	84 c0                	test   al,al
c000bdb3:	75 47                	jne    c000bdfc <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000bdb5:	c7 44 24 20 70 41 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024170
c000bdbd:	83 c4 10             	add    esp,0x10
c000bdc0:	5b                   	pop    ebx
c000bdc1:	5e                   	pop    esi
c000bdc2:	5f                   	pop    edi
c000bdc3:	e9 db 8a 00 00       	jmp    c00148a3 <Krnl::panic(char const*)>
c000bdc8:	89 f0                	mov    eax,esi
c000bdca:	84 c0                	test   al,al
c000bdcc:	75 15                	jne    c000bde3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bdce:	83 ec 0c             	sub    esp,0xc
c000bdd1:	68 2e 43 02 c0       	push   0xc002432e
c000bdd6:	e8 c8 8a 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c000bddb:	83 c4 10             	add    esp,0x10
c000bdde:	e9 6e ff ff ff       	jmp    c000bd51 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bde3:	83 ec 08             	sub    esp,0x8
c000bde6:	6a 00                	push   0x0
c000bde8:	53                   	push   ebx
c000bde9:	e8 8a fb ff ff       	call   c000b978 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bdee:	83 c4 10             	add    esp,0x10
c000bdf1:	e9 5b ff ff ff       	jmp    c000bd51 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bdf6:	89 f0                	mov    eax,esi
c000bdf8:	84 c0                	test   al,al
c000bdfa:	75 15                	jne    c000be11 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000bdfc:	83 ec 08             	sub    esp,0x8
c000bdff:	6a 00                	push   0x0
c000be01:	53                   	push   ebx
c000be02:	e8 71 fb ff ff       	call   c000b978 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be07:	83 c4 10             	add    esp,0x10
c000be0a:	83 c4 10             	add    esp,0x10
c000be0d:	5b                   	pop    ebx
c000be0e:	5e                   	pop    esi
c000be0f:	5f                   	pop    edi
c000be10:	c3                   	ret    
c000be11:	c7 44 24 20 4a 43 02 c0 	mov    DWORD PTR [esp+0x20],0xc002434a
c000be19:	83 c4 10             	add    esp,0x10
c000be1c:	5b                   	pop    ebx
c000be1d:	5e                   	pop    esi
c000be1e:	5f                   	pop    edi
c000be1f:	e9 7f 8a 00 00       	jmp    c00148a3 <Krnl::panic(char const*)>

c000be24 <VAS::freeAllocatedPages(unsigned long)>:
c000be24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000be2c:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000be30:	74 09                	je     c000be3b <VAS::freeAllocatedPages(unsigned long)+0x17>
c000be32:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000be36:	e9 c6 fe ff ff       	jmp    c000bd01 <Virt::freeKernelVirtualPages(unsigned long)>
c000be3b:	c7 44 24 04 94 41 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024194
c000be43:	e9 af 0e 00 00       	jmp    c000ccf7 <Dbg::kprintf(char const*, ...)>

c000be48 <VAS::virtualToPhysical(unsigned long)>:
c000be48:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000be4c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000be50:	e8 8d fe ff ff       	call   c000bce2 <VAS::getPageTableEntry(unsigned long)>
c000be55:	5a                   	pop    edx
c000be56:	8b 00                	mov    eax,DWORD PTR [eax]
c000be58:	59                   	pop    ecx
c000be59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000be5e:	c3                   	ret    
c000be5f:	90                   	nop

c000be60 <VAS::reflagRange(unsigned long, int, int, int)>:
c000be60:	55                   	push   ebp
c000be61:	57                   	push   edi
c000be62:	56                   	push   esi
c000be63:	53                   	push   ebx
c000be64:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be68:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000be6c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000be70:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000be74:	85 db                	test   ebx,ebx
c000be76:	7e 22                	jle    c000be9a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000be78:	c1 e3 0c             	shl    ebx,0xc
c000be7b:	01 f3                	add    ebx,esi
c000be7d:	56                   	push   esi
c000be7e:	81 c6 00 10 00 00    	add    esi,0x1000
c000be84:	55                   	push   ebp
c000be85:	e8 58 fe ff ff       	call   c000bce2 <VAS::getPageTableEntry(unsigned long)>
c000be8a:	5a                   	pop    edx
c000be8b:	59                   	pop    ecx
c000be8c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000be8e:	21 f9                	and    ecx,edi
c000be90:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000be94:	39 f3                	cmp    ebx,esi
c000be96:	89 08                	mov    DWORD PTR [eax],ecx
c000be98:	75 e3                	jne    c000be7d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000be9a:	5b                   	pop    ebx
c000be9b:	5e                   	pop    esi
c000be9c:	5f                   	pop    edi
c000be9d:	5d                   	pop    ebp
c000be9e:	c3                   	ret    
c000be9f:	90                   	nop

c000bea0 <VAS::setToWriteCombining(unsigned long, int)>:
c000bea0:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c000bea5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000beab:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000beb2:	75 01                	jne    c000beb5 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000beb4:	c3                   	ret    
c000beb5:	68 80 00 00 00       	push   0x80
c000beba:	6a ff                	push   0xffffffff
c000bebc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bec0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bec4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bec8:	e8 93 ff ff ff       	call   c000be60 <VAS::reflagRange(unsigned long, int, int, int)>
c000becd:	83 c4 14             	add    esp,0x14
c000bed0:	c3                   	ret    
c000bed1:	90                   	nop

c000bed2 <VAS::mapOtherVASIn(bool, VAS*)>:
c000bed2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bed7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bedb:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000bede:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bee2:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000bee5:	19 c0                	sbb    eax,eax
c000bee7:	83 ca 03             	or     edx,0x3
c000beea:	83 e0 fc             	and    eax,0xfffffffc
c000beed:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000bef4:	0f 20 d8             	mov    eax,cr3
c000bef7:	0f 22 d8             	mov    cr3,eax
c000befa:	c3                   	ret    
c000befb:	90                   	nop

c000befc <VAS::~VAS()>:
c000befc:	83 ec 2c             	sub    esp,0x2c
c000beff:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bf07:	fa                   	cli    
c000bf08:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c000bf0d:	40                   	inc    eax
c000bf0e:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c000bf13:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bf18:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf1a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bf1d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bf23:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bf27:	6a 01                	push   0x1
c000bf29:	50                   	push   eax
c000bf2a:	e8 a3 ff ff ff       	call   c000bed2 <VAS::mapOtherVASIn(bool, VAS*)>
c000bf2f:	83 c4 0c             	add    esp,0xc
c000bf32:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bf3a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000bf42:	0f 8f d4 00 00 00    	jg     c000c01c <VAS::~VAS()+0x120>
c000bf48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf4c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf4f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bf53:	c1 e2 02             	shl    edx,0x2
c000bf56:	01 d0                	add    eax,edx
c000bf58:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf62:	83 e0 01             	and    eax,0x1
c000bf65:	0f 84 a8 00 00 00    	je     c000c013 <VAS::~VAS()+0x117>
c000bf6b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bf73:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000bf7b:	7f 72                	jg     c000bfef <VAS::~VAS()+0xf3>
c000bf7d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf81:	c1 e0 0a             	shl    eax,0xa
c000bf84:	89 c2                	mov    edx,eax
c000bf86:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf8a:	01 d0                	add    eax,edx
c000bf8c:	c1 e0 0c             	shl    eax,0xc
c000bf8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bf93:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bf98:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf9a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bf9d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bfa3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfa7:	6a 01                	push   0x1
c000bfa9:	50                   	push   eax
c000bfaa:	e8 07 fd ff ff       	call   c000bcb6 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000bfaf:	83 c4 0c             	add    esp,0xc
c000bfb2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bfba:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfbc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bfc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfc4:	25 01 04 00 00       	and    eax,0x401
c000bfc9:	3d 01 04 00 00       	cmp    eax,0x401
c000bfce:	75 19                	jne    c000bfe9 <VAS::~VAS()+0xed>
c000bfd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfd4:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bfd9:	83 ec 0c             	sub    esp,0xc
c000bfdc:	50                   	push   eax
c000bfdd:	e8 59 e0 ff ff       	call   c000a03b <Phys::freePage(unsigned long)>
c000bfe2:	83 c4 10             	add    esp,0x10
c000bfe5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bfe9:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bfed:	eb 84                	jmp    c000bf73 <VAS::~VAS()+0x77>
c000bfef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bff3:	25 00 04 00 00       	and    eax,0x400
c000bff8:	74 19                	je     c000c013 <VAS::~VAS()+0x117>
c000bffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bffe:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c003:	83 ec 0c             	sub    esp,0xc
c000c006:	50                   	push   eax
c000c007:	e8 2f e0 ff ff       	call   c000a03b <Phys::freePage(unsigned long)>
c000c00c:	83 c4 10             	add    esp,0x10
c000c00f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c013:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c017:	e9 1e ff ff ff       	jmp    c000bf3a <VAS::~VAS()+0x3e>
c000c01c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c020:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c023:	83 ec 0c             	sub    esp,0xc
c000c026:	50                   	push   eax
c000c027:	e8 d5 fc ff ff       	call   c000bd01 <Virt::freeKernelVirtualPages(unsigned long)>
c000c02c:	83 c4 10             	add    esp,0x10
c000c02f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c033:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c036:	83 ec 0c             	sub    esp,0xc
c000c039:	50                   	push   eax
c000c03a:	e8 fc df ff ff       	call   c000a03b <Phys::freePage(unsigned long)>
c000c03f:	83 c4 10             	add    esp,0x10
c000c042:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c046:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c04a:	c1 e0 02             	shl    eax,0x2
c000c04d:	83 ec 08             	sub    esp,0x8
c000c050:	50                   	push   eax
c000c051:	68 b8 41 02 c0       	push   0xc00241b8
c000c056:	e8 9c 0c 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000c05b:	83 c4 10             	add    esp,0x10
c000c05e:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c000c063:	48                   	dec    eax
c000c064:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c000c069:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c000c06e:	85 c0                	test   eax,eax
c000c070:	75 01                	jne    c000c073 <VAS::~VAS()+0x177>
c000c072:	fb                   	sti    
c000c073:	90                   	nop
c000c074:	83 c4 2c             	add    esp,0x2c
c000c077:	c3                   	ret    

c000c078 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000c078:	55                   	push   ebp
c000c079:	57                   	push   edi
c000c07a:	56                   	push   esi
c000c07b:	53                   	push   ebx
c000c07c:	83 ec 1c             	sub    esp,0x1c
c000c07f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c083:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c087:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000c08d:	77 08                	ja     c000c097 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000c08f:	0f 20 d8             	mov    eax,cr3
c000c092:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000c095:	75 47                	jne    c000c0de <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000c097:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c09b:	09 d8                	or     eax,ebx
c000c09d:	a9 ff 0f 00 00       	test   eax,0xfff
c000c0a2:	75 57                	jne    c000c0fb <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000c0a4:	89 de                	mov    esi,ebx
c000c0a6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c0a9:	c1 ee 16             	shr    esi,0x16
c000c0ac:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000c0b3:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000c0b7:	74 54                	je     c000c10d <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000c0b9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c0bd:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000c0c3:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c0c7:	c1 e6 0c             	shl    esi,0xc
c000c0ca:	c1 eb 0a             	shr    ebx,0xa
c000c0cd:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000c0d3:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000c0d6:	83 c4 1c             	add    esp,0x1c
c000c0d9:	5b                   	pop    ebx
c000c0da:	5e                   	pop    esi
c000c0db:	5f                   	pop    edi
c000c0dc:	5d                   	pop    ebp
c000c0dd:	c3                   	ret    
c000c0de:	83 ec 0c             	sub    esp,0xc
c000c0e1:	68 d8 41 02 c0       	push   0xc00241d8
c000c0e6:	e8 0c 0c 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000c0eb:	83 c4 10             	add    esp,0x10
c000c0ee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c0f2:	09 d8                	or     eax,ebx
c000c0f4:	a9 ff 0f 00 00       	test   eax,0xfff
c000c0f9:	74 a9                	je     c000c0a4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c0fb:	83 ec 0c             	sub    esp,0xc
c000c0fe:	68 40 42 02 c0       	push   0xc0024240
c000c103:	e8 9b 87 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c000c108:	83 c4 10             	add    esp,0x10
c000c10b:	eb 97                	jmp    c000c0a4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c10d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c111:	e8 a8 df ff ff       	call   c000a0be <Phys::allocatePage()>
c000c116:	83 ec 0c             	sub    esp,0xc
c000c119:	89 c5                	mov    ebp,eax
c000c11b:	8b 0d 70 7c 02 c0    	mov    ecx,DWORD PTR ds:0xc0027c70
c000c121:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c125:	6a 01                	push   0x1
c000c127:	e8 a5 f8 ff ff       	call   c000b9d1 <Virt::allocateKernelVirtualPages(int)>
c000c12c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c133:	6a 01                	push   0x1
c000c135:	50                   	push   eax
c000c136:	55                   	push   ebp
c000c137:	81 cd 07 04 00 00    	or     ebp,0x407
c000c13d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c141:	51                   	push   ecx
c000c142:	e8 27 02 00 00       	call   c000c36e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c147:	83 c4 1c             	add    esp,0x1c
c000c14a:	68 00 10 00 00       	push   0x1000
c000c14f:	6a 00                	push   0x0
c000c151:	50                   	push   eax
c000c152:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c156:	e8 29 45 ff ff       	call   c0000684 <memset>
c000c15b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c15f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c162:	e8 9a fb ff ff       	call   c000bd01 <Virt::freeKernelVirtualPages(unsigned long)>
c000c167:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c16b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c16e:	83 c4 10             	add    esp,0x10
c000c171:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c174:	e9 40 ff ff ff       	jmp    c000c0b9 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000c179:	90                   	nop

c000c17a <VAS::allocatePages(int, int)>:
c000c17a:	55                   	push   ebp
c000c17b:	57                   	push   edi
c000c17c:	56                   	push   esi
c000c17d:	53                   	push   ebx
c000c17e:	83 ec 1c             	sub    esp,0x1c
c000c181:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c185:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c000c18a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c190:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c196:	83 e0 01             	and    eax,0x1
c000c199:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c19d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c1a1:	0f 85 cc 00 00 00    	jne    c000c273 <VAS::allocatePages(int, int)+0xf9>
c000c1a7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c1aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c1ae:	85 c0                	test   eax,eax
c000c1b0:	0f 84 a1 00 00 00    	je     c000c257 <VAS::allocatePages(int, int)+0xdd>
c000c1b6:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c1ba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c1be:	c1 e6 0c             	shl    esi,0xc
c000c1c1:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c1c5:	85 c0                	test   eax,eax
c000c1c7:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c1ca:	7e 33                	jle    c000c1ff <VAS::allocatePages(int, int)+0x85>
c000c1cc:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c1d0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c1d4:	81 cd 00 04 00 00    	or     ebp,0x400
c000c1da:	e8 df de ff ff       	call   c000a0be <Phys::allocatePage()>
c000c1df:	55                   	push   ebp
c000c1e0:	53                   	push   ebx
c000c1e1:	50                   	push   eax
c000c1e2:	57                   	push   edi
c000c1e3:	e8 90 fe ff ff       	call   c000c078 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c1e8:	83 c4 10             	add    esp,0x10
c000c1eb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c1f0:	74 03                	je     c000c1f5 <VAS::allocatePages(int, int)+0x7b>
c000c1f2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c1f5:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c1fb:	39 de                	cmp    esi,ebx
c000c1fd:	75 db                	jne    c000c1da <VAS::allocatePages(int, int)+0x60>
c000c1ff:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c204:	75 12                	jne    c000c218 <VAS::allocatePages(int, int)+0x9e>
c000c206:	0f 20 d8             	mov    eax,cr3
c000c209:	0f 22 d8             	mov    cr3,eax
c000c20c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c210:	83 c4 1c             	add    esp,0x1c
c000c213:	5b                   	pop    ebx
c000c214:	5e                   	pop    esi
c000c215:	5f                   	pop    edi
c000c216:	5d                   	pop    ebp
c000c217:	c3                   	ret    
c000c218:	c1 ee 0a             	shr    esi,0xa
c000c21b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c21f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c225:	c1 eb 0a             	shr    ebx,0xa
c000c228:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c22e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c234:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c23a:	39 c3                	cmp    ebx,eax
c000c23c:	77 ce                	ja     c000c20c <VAS::allocatePages(int, int)+0x92>
c000c23e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c241:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c247:	39 d8                	cmp    eax,ebx
c000c249:	73 f3                	jae    c000c23e <VAS::allocatePages(int, int)+0xc4>
c000c24b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c24f:	83 c4 1c             	add    esp,0x1c
c000c252:	5b                   	pop    ebx
c000c253:	5e                   	pop    esi
c000c254:	5f                   	pop    edi
c000c255:	5d                   	pop    ebp
c000c256:	c3                   	ret    
c000c257:	83 ec 0c             	sub    esp,0xc
c000c25a:	68 64 42 02 c0       	push   0xc0024264
c000c25f:	e8 3f 86 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c000c264:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c267:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c26b:	83 c4 10             	add    esp,0x10
c000c26e:	e9 43 ff ff ff       	jmp    c000c1b6 <VAS::allocatePages(int, int)+0x3c>
c000c273:	83 ec 0c             	sub    esp,0xc
c000c276:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c27a:	e8 52 f7 ff ff       	call   c000b9d1 <Virt::allocateKernelVirtualPages(int)>
c000c27f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c283:	83 c4 10             	add    esp,0x10
c000c286:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c28b:	0f 87 9b 00 00 00    	ja     c000c32c <VAS::allocatePages(int, int)+0x1b2>
c000c291:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c295:	85 d2                	test   edx,edx
c000c297:	7e 3c                	jle    c000c2d5 <VAS::allocatePages(int, int)+0x15b>
c000c299:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c29d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c2a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c2a5:	c1 e5 0c             	shl    ebp,0xc
c000c2a8:	81 ce 00 04 00 00    	or     esi,0x400
c000c2ae:	01 dd                	add    ebp,ebx
c000c2b0:	e8 09 de ff ff       	call   c000a0be <Phys::allocatePage()>
c000c2b5:	56                   	push   esi
c000c2b6:	53                   	push   ebx
c000c2b7:	50                   	push   eax
c000c2b8:	57                   	push   edi
c000c2b9:	e8 ba fd ff ff       	call   c000c078 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c2be:	83 c4 10             	add    esp,0x10
c000c2c1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c2c6:	74 03                	je     c000c2cb <VAS::allocatePages(int, int)+0x151>
c000c2c8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c2cb:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c2d1:	39 dd                	cmp    ebp,ebx
c000c2d3:	75 db                	jne    c000c2b0 <VAS::allocatePages(int, int)+0x136>
c000c2d5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c2da:	0f 84 26 ff ff ff    	je     c000c206 <VAS::allocatePages(int, int)+0x8c>
c000c2e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c2e4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c2e8:	89 d3                	mov    ebx,edx
c000c2ea:	c1 e0 0c             	shl    eax,0xc
c000c2ed:	c1 eb 0a             	shr    ebx,0xa
c000c2f0:	01 d0                	add    eax,edx
c000c2f2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c2f8:	c1 e8 0a             	shr    eax,0xa
c000c2fb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c301:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c306:	2d 00 00 40 00       	sub    eax,0x400000
c000c30b:	39 c3                	cmp    ebx,eax
c000c30d:	0f 87 f9 fe ff ff    	ja     c000c20c <VAS::allocatePages(int, int)+0x92>
c000c313:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c316:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c31c:	39 d8                	cmp    eax,ebx
c000c31e:	73 f3                	jae    c000c313 <VAS::allocatePages(int, int)+0x199>
c000c320:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c324:	83 c4 1c             	add    esp,0x1c
c000c327:	5b                   	pop    ebx
c000c328:	5e                   	pop    esi
c000c329:	5f                   	pop    edi
c000c32a:	5d                   	pop    ebp
c000c32b:	c3                   	ret    
c000c32c:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c000c331:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c337:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c33e:	0f 84 4d ff ff ff    	je     c000c291 <VAS::allocatePages(int, int)+0x117>
c000c344:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c34c:	e9 40 ff ff ff       	jmp    c000c291 <VAS::allocatePages(int, int)+0x117>
c000c351:	90                   	nop

c000c352 <VAS::setCPUSpecific(unsigned long)>:
c000c352:	83 ec 0c             	sub    esp,0xc
c000c355:	6a 05                	push   0x5
c000c357:	68 00 00 40 c2       	push   0xc2400000
c000c35c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c360:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c364:	e8 0f fd ff ff       	call   c000c078 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c369:	83 c4 1c             	add    esp,0x1c
c000c36c:	c3                   	ret    
c000c36d:	90                   	nop

c000c36e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c36e:	55                   	push   ebp
c000c36f:	57                   	push   edi
c000c370:	56                   	push   esi
c000c371:	53                   	push   ebx
c000c372:	83 ec 1c             	sub    esp,0x1c
c000c375:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c000c37a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c37e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c384:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c388:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c38e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c392:	83 e0 01             	and    eax,0x1
c000c395:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c399:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c39d:	85 c0                	test   eax,eax
c000c39f:	7e 39                	jle    c000c3da <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c3a1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3a5:	89 f3                	mov    ebx,esi
c000c3a7:	c1 e0 0c             	shl    eax,0xc
c000c3aa:	01 f0                	add    eax,esi
c000c3ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c3b0:	55                   	push   ebp
c000c3b1:	53                   	push   ebx
c000c3b2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3b6:	29 f0                	sub    eax,esi
c000c3b8:	01 d8                	add    eax,ebx
c000c3ba:	50                   	push   eax
c000c3bb:	57                   	push   edi
c000c3bc:	e8 b7 fc ff ff       	call   c000c078 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c3c1:	83 c4 10             	add    esp,0x10
c000c3c4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c3c9:	74 03                	je     c000c3ce <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c3cb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c3ce:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c3d4:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c3d8:	75 d6                	jne    c000c3b0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c3da:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c3df:	75 10                	jne    c000c3f1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c3e1:	0f 20 d8             	mov    eax,cr3
c000c3e4:	0f 22 d8             	mov    cr3,eax
c000c3e7:	83 c4 1c             	add    esp,0x1c
c000c3ea:	89 f0                	mov    eax,esi
c000c3ec:	5b                   	pop    ebx
c000c3ed:	5e                   	pop    esi
c000c3ee:	5f                   	pop    edi
c000c3ef:	5d                   	pop    ebp
c000c3f0:	c3                   	ret    
c000c3f1:	89 f3                	mov    ebx,esi
c000c3f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3f7:	c1 eb 0a             	shr    ebx,0xa
c000c3fa:	c1 e0 0c             	shl    eax,0xc
c000c3fd:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c403:	01 f0                	add    eax,esi
c000c405:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c40b:	c1 e8 0a             	shr    eax,0xa
c000c40e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c413:	2d 00 00 40 00       	sub    eax,0x400000
c000c418:	39 c3                	cmp    ebx,eax
c000c41a:	77 cb                	ja     c000c3e7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c41c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c41f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c425:	39 d8                	cmp    eax,ebx
c000c427:	73 f3                	jae    c000c41c <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c429:	83 c4 1c             	add    esp,0x1c
c000c42c:	89 f0                	mov    eax,esi
c000c42e:	5b                   	pop    ebx
c000c42f:	5e                   	pop    esi
c000c430:	5f                   	pop    edi
c000c431:	5d                   	pop    ebp
c000c432:	c3                   	ret    
c000c433:	90                   	nop

c000c434 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c434:	55                   	push   ebp
c000c435:	57                   	push   edi
c000c436:	56                   	push   esi
c000c437:	53                   	push   ebx
c000c438:	83 ec 1c             	sub    esp,0x1c
c000c43b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c43f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c443:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c447:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c44b:	a9 ff 0f 00 00       	test   eax,0xfff
c000c450:	75 4a                	jne    c000c49c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c452:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c456:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c459:	c1 eb 16             	shr    ebx,0x16
c000c45c:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c463:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c467:	74 4d                	je     c000c4b6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c469:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c46d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c471:	c1 e8 0a             	shr    eax,0xa
c000c474:	80 fa 01             	cmp    dl,0x1
c000c477:	19 d2                	sbb    edx,edx
c000c479:	c1 e3 0c             	shl    ebx,0xc
c000c47c:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c480:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c486:	25 fc 0f 00 00       	and    eax,0xffc
c000c48b:	01 d8                	add    eax,ebx
c000c48d:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c494:	83 c4 1c             	add    esp,0x1c
c000c497:	5b                   	pop    ebx
c000c498:	5e                   	pop    esi
c000c499:	5f                   	pop    edi
c000c49a:	5d                   	pop    ebp
c000c49b:	c3                   	ret    
c000c49c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c4a0:	83 ec 0c             	sub    esp,0xc
c000c4a3:	68 90 42 02 c0       	push   0xc0024290
c000c4a8:	e8 f6 83 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c000c4ad:	83 c4 10             	add    esp,0x10
c000c4b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c4b4:	eb 9c                	jmp    c000c452 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c4b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c4ba:	e8 ff db ff ff       	call   c000a0be <Phys::allocatePage()>
c000c4bf:	83 ec 0c             	sub    esp,0xc
c000c4c2:	89 c5                	mov    ebp,eax
c000c4c4:	8b 0d 70 7c 02 c0    	mov    ecx,DWORD PTR ds:0xc0027c70
c000c4ca:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c4ce:	6a 01                	push   0x1
c000c4d0:	e8 fc f4 ff ff       	call   c000b9d1 <Virt::allocateKernelVirtualPages(int)>
c000c4d5:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c4dc:	6a 01                	push   0x1
c000c4de:	50                   	push   eax
c000c4df:	55                   	push   ebp
c000c4e0:	81 cd 07 04 00 00    	or     ebp,0x407
c000c4e6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c4ea:	51                   	push   ecx
c000c4eb:	e8 7e fe ff ff       	call   c000c36e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c4f0:	83 c4 1c             	add    esp,0x1c
c000c4f3:	68 00 10 00 00       	push   0x1000
c000c4f8:	6a 00                	push   0x0
c000c4fa:	50                   	push   eax
c000c4fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4ff:	e8 80 41 ff ff       	call   c0000684 <memset>
c000c504:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c508:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c50b:	e8 f1 f7 ff ff       	call   c000bd01 <Virt::freeKernelVirtualPages(unsigned long)>
c000c510:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c519:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c51d:	e9 47 ff ff ff       	jmp    c000c469 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c522 <VAS::VAS(bool)>:
c000c522:	53                   	push   ebx
c000c523:	83 ec 28             	sub    esp,0x28
c000c526:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c52a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c52e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c532:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c539:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c53d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c544:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c548:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c54c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c54f:	e8 6a db ff ff       	call   c000a0be <Phys::allocatePage()>
c000c554:	89 c2                	mov    edx,eax
c000c556:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c55a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c55d:	8b 1d 70 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027c70
c000c563:	83 ec 0c             	sub    esp,0xc
c000c566:	6a 01                	push   0x1
c000c568:	e8 64 f4 ff ff       	call   c000b9d1 <Virt::allocateKernelVirtualPages(int)>
c000c56d:	83 c4 10             	add    esp,0x10
c000c570:	89 c2                	mov    edx,eax
c000c572:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c576:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c579:	83 ec 0c             	sub    esp,0xc
c000c57c:	6a 03                	push   0x3
c000c57e:	6a 01                	push   0x1
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	53                   	push   ebx
c000c583:	e8 e6 fd ff ff       	call   c000c36e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c588:	83 c4 20             	add    esp,0x20
c000c58b:	89 c2                	mov    edx,eax
c000c58d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c591:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c594:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c59c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c5a4:	7f 1c                	jg     c000c5c2 <VAS::VAS(bool)+0xa0>
c000c5a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c5aa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c5ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c5b1:	c1 e2 02             	shl    edx,0x2
c000c5b4:	01 d0                	add    eax,edx
c000c5b6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c5bc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c5c0:	eb da                	jmp    c000c59c <VAS::VAS(bool)+0x7a>
c000c5c2:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c5ca:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c5d2:	7f 7a                	jg     c000c64e <VAS::VAS(bool)+0x12c>
c000c5d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c5d8:	2d 00 02 00 00       	sub    eax,0x200
c000c5dd:	c1 e0 0c             	shl    eax,0xc
c000c5e0:	83 c8 03             	or     eax,0x3
c000c5e3:	89 c2                	mov    edx,eax
c000c5e5:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c000c5ea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c5f0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c5f6:	83 e0 10             	and    eax,0x10
c000c5f9:	84 c0                	test   al,al
c000c5fb:	74 07                	je     c000c604 <VAS::VAS(bool)+0xe2>
c000c5fd:	b8 00 01 00 00       	mov    eax,0x100
c000c602:	eb 05                	jmp    c000c609 <VAS::VAS(bool)+0xe7>
c000c604:	b8 00 00 00 00       	mov    eax,0x0
c000c609:	09 d0                	or     eax,edx
c000c60b:	89 c1                	mov    ecx,eax
c000c60d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c611:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c614:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c618:	c1 e2 02             	shl    edx,0x2
c000c61b:	01 d0                	add    eax,edx
c000c61d:	89 ca                	mov    edx,ecx
c000c61f:	89 10                	mov    DWORD PTR [eax],edx
c000c621:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c625:	2d 40 03 00 00       	sub    eax,0x340
c000c62a:	83 f8 7f             	cmp    eax,0x7f
c000c62d:	77 16                	ja     c000c645 <VAS::VAS(bool)+0x123>
c000c62f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c633:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c636:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c63a:	c1 e2 02             	shl    edx,0x2
c000c63d:	01 d0                	add    eax,edx
c000c63f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c645:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c649:	e9 7c ff ff ff       	jmp    c000c5ca <VAS::VAS(bool)+0xa8>
c000c64e:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c000c653:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c659:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c65f:	83 e0 10             	and    eax,0x10
c000c662:	84 c0                	test   al,al
c000c664:	74 07                	je     c000c66d <VAS::VAS(bool)+0x14b>
c000c666:	b8 03 41 00 00       	mov    eax,0x4103
c000c66b:	eb 05                	jmp    c000c672 <VAS::VAS(bool)+0x150>
c000c66d:	b8 03 40 00 00       	mov    eax,0x4003
c000c672:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c676:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c679:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c67f:	89 02                	mov    DWORD PTR [edx],eax
c000c681:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c000c686:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c68c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c692:	83 ec 08             	sub    esp,0x8
c000c695:	50                   	push   eax
c000c696:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c69a:	e8 b3 fc ff ff       	call   c000c352 <VAS::setCPUSpecific(unsigned long)>
c000c69f:	83 c4 10             	add    esp,0x10
c000c6a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6a6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c6a9:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c000c6ae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6b4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c6ba:	83 e0 10             	and    eax,0x10
c000c6bd:	84 c0                	test   al,al
c000c6bf:	74 07                	je     c000c6c8 <VAS::VAS(bool)+0x1a6>
c000c6c1:	b8 00 01 00 00       	mov    eax,0x100
c000c6c6:	eb 05                	jmp    c000c6cd <VAS::VAS(bool)+0x1ab>
c000c6c8:	b8 00 00 00 00       	mov    eax,0x0
c000c6cd:	09 c2                	or     edx,eax
c000c6cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c6d6:	05 fc 0f 00 00       	add    eax,0xffc
c000c6db:	83 ca 03             	or     edx,0x3
c000c6de:	89 10                	mov    DWORD PTR [eax],edx
c000c6e0:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c000c6e5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6eb:	83 ec 0c             	sub    esp,0xc
c000c6ee:	50                   	push   eax
c000c6ef:	e8 8a 1d 00 00       	call   c000e47e <Device::getName()>
c000c6f4:	83 c4 10             	add    esp,0x10
c000c6f7:	83 ec 08             	sub    esp,0x8
c000c6fa:	68 64 43 02 c0       	push   0xc0024364
c000c6ff:	50                   	push   eax
c000c700:	e8 c7 40 ff ff       	call   c00007cc <strcmp>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	85 c0                	test   eax,eax
c000c70a:	0f 94 c0             	sete   al
c000c70d:	84 c0                	test   al,al
c000c70f:	0f 84 87 00 00 00    	je     c000c79c <VAS::VAS(bool)+0x27a>
c000c715:	fa                   	cli    
c000c716:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c000c71b:	40                   	inc    eax
c000c71c:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c000c721:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c000c726:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c72c:	05 7c 09 00 00       	add    eax,0x97c
c000c731:	83 ec 0c             	sub    esp,0xc
c000c734:	50                   	push   eax
c000c735:	e8 bc cd ff ff       	call   c00094f6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c73a:	83 c4 10             	add    esp,0x10
c000c73d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c742:	89 c3                	mov    ebx,eax
c000c744:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c000c749:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c74f:	05 7c 09 00 00       	add    eax,0x97c
c000c754:	83 ec 0c             	sub    esp,0xc
c000c757:	50                   	push   eax
c000c758:	e8 99 cd ff ff       	call   c00094f6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c75d:	83 c4 10             	add    esp,0x10
c000c760:	83 ec 08             	sub    esp,0x8
c000c763:	50                   	push   eax
c000c764:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c768:	e8 75 f5 ff ff       	call   c000bce2 <VAS::getPageTableEntry(unsigned long)>
c000c76d:	83 c4 10             	add    esp,0x10
c000c770:	8b 00                	mov    eax,DWORD PTR [eax]
c000c772:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c777:	6a 11                	push   0x11
c000c779:	53                   	push   ebx
c000c77a:	50                   	push   eax
c000c77b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c77f:	e8 f4 f8 ff ff       	call   c000c078 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c784:	83 c4 10             	add    esp,0x10
c000c787:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c000c78c:	48                   	dec    eax
c000c78d:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c000c792:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c000c797:	85 c0                	test   eax,eax
c000c799:	75 01                	jne    c000c79c <VAS::VAS(bool)+0x27a>
c000c79b:	fb                   	sti    
c000c79c:	90                   	nop
c000c79d:	83 c4 28             	add    esp,0x28
c000c7a0:	5b                   	pop    ebx
c000c7a1:	c3                   	ret    

c000c7a2 <VAS::evict(unsigned long)>:
c000c7a2:	55                   	push   ebp
c000c7a3:	57                   	push   edi
c000c7a4:	56                   	push   esi
c000c7a5:	53                   	push   ebx
c000c7a6:	83 ec 1c             	sub    esp,0x1c
c000c7a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7ad:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c7b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7b5:	e8 58 f3 ff ff       	call   c000bb12 <Virt::allocateSwapfilePage()>
c000c7ba:	89 c7                	mov    edi,eax
c000c7bc:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c000c7c1:	85 c0                	test   eax,eax
c000c7c3:	7e 3d                	jle    c000c802 <VAS::evict(unsigned long)+0x60>
c000c7c5:	89 ee                	mov    esi,ebp
c000c7c7:	31 db                	xor    ebx,ebx
c000c7c9:	83 ec 0c             	sub    esp,0xc
c000c7cc:	57                   	push   edi
c000c7cd:	e8 2e f3 ff ff       	call   c000bb00 <Virt::swapIDToSector(unsigned long)>
c000c7d2:	89 34 24             	mov    DWORD PTR [esp],esi
c000c7d5:	01 d8                	add    eax,ebx
c000c7d7:	6a 01                	push   0x1
c000c7d9:	31 d2                	xor    edx,edx
c000c7db:	43                   	inc    ebx
c000c7dc:	52                   	push   edx
c000c7dd:	81 c6 00 02 00 00    	add    esi,0x200
c000c7e3:	50                   	push   eax
c000c7e4:	0f be 05 98 6f 02 c0 	movsx  eax,BYTE PTR ds:0xc0026f98
c000c7eb:	ff 34 85 fc 7f 02 c0 	push   DWORD PTR [eax*4-0x3ffd8004]
c000c7f2:	e8 c9 3c 00 00       	call   c00104c0 <LogicalDisk::write(unsigned long long, int, void*)>
c000c7f7:	83 c4 20             	add    esp,0x20
c000c7fa:	39 1d 8c 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f8c,ebx
c000c800:	7f c7                	jg     c000c7c9 <VAS::evict(unsigned long)+0x27>
c000c802:	83 ec 08             	sub    esp,0x8
c000c805:	c1 e7 0b             	shl    edi,0xb
c000c808:	55                   	push   ebp
c000c809:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c80d:	e8 d0 f4 ff ff       	call   c000bce2 <VAS::getPageTableEntry(unsigned long)>
c000c812:	8b 10                	mov    edx,DWORD PTR [eax]
c000c814:	89 d3                	mov    ebx,edx
c000c816:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c81c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c822:	09 d7                	or     edi,edx
c000c824:	89 38                	mov    DWORD PTR [eax],edi
c000c826:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c829:	ff 05 68 7c 02 c0    	inc    DWORD PTR ds:0xc0027c68
c000c82f:	e8 07 d8 ff ff       	call   c000a03b <Phys::freePage(unsigned long)>
c000c834:	0f 20 d8             	mov    eax,cr3
c000c837:	0f 22 d8             	mov    cr3,eax
c000c83a:	ff 35 68 7c 02 c0    	push   DWORD PTR ds:0xc0027c68
c000c840:	55                   	push   ebp
c000c841:	53                   	push   ebx
c000c842:	68 b4 42 02 c0       	push   0xc00242b4
c000c847:	e8 ab 04 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000c84c:	a1 64 7c 02 c0       	mov    eax,ds:0xc0027c64
c000c851:	c7 44 24 50 72 43 02 c0 	mov    DWORD PTR [esp+0x50],0xc0024372
c000c859:	8d 50 01             	lea    edx,[eax+0x1]
c000c85c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c860:	89 15 64 7c 02 c0    	mov    DWORD PTR ds:0xc0027c64,edx
c000c866:	83 c4 3c             	add    esp,0x3c
c000c869:	5b                   	pop    ebx
c000c86a:	5e                   	pop    esi
c000c86b:	5f                   	pop    edi
c000c86c:	5d                   	pop    ebp
c000c86d:	e9 85 04 00 00       	jmp    c000ccf7 <Dbg::kprintf(char const*, ...)>

c000c872 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c872:	55                   	push   ebp
c000c873:	57                   	push   edi
c000c874:	56                   	push   esi
c000c875:	53                   	push   ebx
c000c876:	83 ec 14             	sub    esp,0x14
c000c879:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c87d:	68 83 43 02 c0       	push   0xc0024383
c000c882:	e8 70 04 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000c887:	83 c4 10             	add    esp,0x10
c000c88a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000c88e:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000c894:	74 20                	je     c000c8b6 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c896:	83 ec 08             	sub    esp,0x8
c000c899:	55                   	push   ebp
c000c89a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c89e:	e8 3f f4 ff ff       	call   c000bce2 <VAS::getPageTableEntry(unsigned long)>
c000c8a3:	83 c4 10             	add    esp,0x10
c000c8a6:	89 c3                	mov    ebx,eax
c000c8a8:	85 c0                	test   eax,eax
c000c8aa:	74 0a                	je     c000c8b6 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c8ac:	8b 38                	mov    edi,DWORD PTR [eax]
c000c8ae:	f7 c7 01 00 00 00    	test   edi,0x1
c000c8b4:	74 0a                	je     c000c8c0 <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000c8b6:	31 c0                	xor    eax,eax
c000c8b8:	83 c4 0c             	add    esp,0xc
c000c8bb:	5b                   	pop    ebx
c000c8bc:	5e                   	pop    esi
c000c8bd:	5f                   	pop    edi
c000c8be:	5d                   	pop    ebp
c000c8bf:	c3                   	ret    
c000c8c0:	e8 f9 d7 ff ff       	call   c000a0be <Phys::allocatePage()>
c000c8c5:	c1 ef 0b             	shr    edi,0xb
c000c8c8:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c8ca:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c8d0:	09 c2                	or     edx,eax
c000c8d2:	81 ca 01 08 00 00    	or     edx,0x801
c000c8d8:	89 13                	mov    DWORD PTR [ebx],edx
c000c8da:	8b 0d 8c 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026f8c
c000c8e0:	85 c9                	test   ecx,ecx
c000c8e2:	7e 3d                	jle    c000c921 <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000c8e4:	89 ee                	mov    esi,ebp
c000c8e6:	31 db                	xor    ebx,ebx
c000c8e8:	83 ec 0c             	sub    esp,0xc
c000c8eb:	57                   	push   edi
c000c8ec:	e8 0f f2 ff ff       	call   c000bb00 <Virt::swapIDToSector(unsigned long)>
c000c8f1:	89 34 24             	mov    DWORD PTR [esp],esi
c000c8f4:	01 d8                	add    eax,ebx
c000c8f6:	6a 01                	push   0x1
c000c8f8:	31 d2                	xor    edx,edx
c000c8fa:	43                   	inc    ebx
c000c8fb:	52                   	push   edx
c000c8fc:	81 c6 00 02 00 00    	add    esi,0x200
c000c902:	50                   	push   eax
c000c903:	0f be 05 98 6f 02 c0 	movsx  eax,BYTE PTR ds:0xc0026f98
c000c90a:	ff 34 85 fc 7f 02 c0 	push   DWORD PTR [eax*4-0x3ffd8004]
c000c911:	e8 3e 3b 00 00       	call   c0010454 <LogicalDisk::read(unsigned long long, int, void*)>
c000c916:	83 c4 20             	add    esp,0x20
c000c919:	39 1d 8c 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f8c,ebx
c000c91f:	7f c7                	jg     c000c8e8 <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000c921:	a1 68 7c 02 c0       	mov    eax,ds:0xc0027c68
c000c926:	48                   	dec    eax
c000c927:	52                   	push   edx
c000c928:	a3 68 7c 02 c0       	mov    ds:0xc0027c68,eax
c000c92d:	50                   	push   eax
c000c92e:	55                   	push   ebp
c000c92f:	68 96 43 02 c0       	push   0xc0024396
c000c934:	e8 be 03 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000c939:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c93c:	e8 a1 f1 ff ff       	call   c000bae2 <Virt::freeSwapfilePage(unsigned long)>
c000c941:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c000c946:	83 c4 10             	add    esp,0x10
c000c949:	48                   	dec    eax
c000c94a:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c000c94f:	85 c0                	test   eax,eax
c000c951:	74 1d                	je     c000c970 <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000c953:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c957:	25 ff 0f 00 00       	and    eax,0xfff
c000c95c:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c961:	77 10                	ja     c000c973 <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000c963:	0f 20 d8             	mov    eax,cr3
c000c966:	0f 22 d8             	mov    cr3,eax
c000c969:	b0 01                	mov    al,0x1
c000c96b:	e9 48 ff ff ff       	jmp    c000c8b8 <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000c970:	fb                   	sti    
c000c971:	eb e0                	jmp    c000c953 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000c973:	83 ec 0c             	sub    esp,0xc
c000c976:	68 ab 43 02 c0       	push   0xc00243ab
c000c97b:	e8 77 03 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000c980:	83 c4 10             	add    esp,0x10
c000c983:	eb de                	jmp    c000c963 <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000c985:	90                   	nop

c000c986 <VAS::scanForEviction()>:
c000c986:	57                   	push   edi
c000c987:	31 ff                	xor    edi,edi
c000c989:	56                   	push   esi
c000c98a:	53                   	push   ebx
c000c98b:	83 ec 10             	sub    esp,0x10
c000c98e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c992:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c995:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c99b:	75 0e                	jne    c000c9ab <VAS::scanForEviction()+0x25>
c000c99d:	89 da                	mov    edx,ebx
c000c99f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c9a2:	c1 ea 16             	shr    edx,0x16
c000c9a5:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c9a9:	74 4e                	je     c000c9f9 <VAS::scanForEviction()+0x73>
c000c9ab:	53                   	push   ebx
c000c9ac:	56                   	push   esi
c000c9ad:	e8 30 f3 ff ff       	call   c000bce2 <VAS::getPageTableEntry(unsigned long)>
c000c9b2:	5a                   	pop    edx
c000c9b3:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9b5:	59                   	pop    ecx
c000c9b6:	89 d1                	mov    ecx,edx
c000c9b8:	81 e1 01 08 00 00    	and    ecx,0x801
c000c9be:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000c9c4:	74 3e                	je     c000ca04 <VAS::scanForEviction()+0x7e>
c000c9c6:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c9cc:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c9d2:	76 2b                	jbe    c000c9ff <VAS::scanForEviction()+0x79>
c000c9d4:	47                   	inc    edi
c000c9d5:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c9dc:	83 ff 03             	cmp    edi,0x3
c000c9df:	74 32                	je     c000ca13 <VAS::scanForEviction()+0x8d>
c000c9e1:	31 db                	xor    ebx,ebx
c000c9e3:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c9e9:	75 c0                	jne    c000c9ab <VAS::scanForEviction()+0x25>
c000c9eb:	89 da                	mov    edx,ebx
c000c9ed:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c9f0:	c1 ea 16             	shr    edx,0x16
c000c9f3:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c9f7:	75 b2                	jne    c000c9ab <VAS::scanForEviction()+0x25>
c000c9f9:	81 c3 00 00 40 00    	add    ebx,0x400000
c000c9ff:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000ca02:	eb 91                	jmp    c000c995 <VAS::scanForEviction()+0xf>
c000ca04:	f6 c2 20             	test   dl,0x20
c000ca07:	74 13                	je     c000ca1c <VAS::scanForEviction()+0x96>
c000ca09:	83 e2 df             	and    edx,0xffffffdf
c000ca0c:	89 10                	mov    DWORD PTR [eax],edx
c000ca0e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000ca11:	eb b3                	jmp    c000c9c6 <VAS::scanForEviction()+0x40>
c000ca13:	83 c4 10             	add    esp,0x10
c000ca16:	31 c0                	xor    eax,eax
c000ca18:	5b                   	pop    ebx
c000ca19:	5e                   	pop    esi
c000ca1a:	5f                   	pop    edi
c000ca1b:	c3                   	ret    
c000ca1c:	83 ec 08             	sub    esp,0x8
c000ca1f:	89 d0                	mov    eax,edx
c000ca21:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ca26:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ca2a:	53                   	push   ebx
c000ca2b:	68 bb 43 02 c0       	push   0xc00243bb
c000ca30:	e8 c2 02 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000ca35:	58                   	pop    eax
c000ca36:	5a                   	pop    edx
c000ca37:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000ca3a:	56                   	push   esi
c000ca3b:	e8 62 fd ff ff       	call   c000c7a2 <VAS::evict(unsigned long)>
c000ca40:	59                   	pop    ecx
c000ca41:	5b                   	pop    ebx
c000ca42:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000ca45:	68 cf 43 02 c0       	push   0xc00243cf
c000ca4a:	e8 a8 02 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000ca4f:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000ca56:	83 c4 10             	add    esp,0x10
c000ca59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca5d:	83 c4 10             	add    esp,0x10
c000ca60:	5b                   	pop    ebx
c000ca61:	5e                   	pop    esi
c000ca62:	5f                   	pop    edi
c000ca63:	c3                   	ret    

c000ca64 <mapVASFirstTime>:
c000ca64:	55                   	push   ebp
c000ca65:	57                   	push   edi
c000ca66:	56                   	push   esi
c000ca67:	53                   	push   ebx
c000ca68:	83 ec 0c             	sub    esp,0xc
c000ca6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ca70:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ca73:	4a                   	dec    edx
c000ca74:	0f 84 fe 00 00 00    	je     c000cb78 <mapVASFirstTime+0x114>
c000ca7a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000ca7d:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000ca80:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ca85:	c1 e5 15             	shl    ebp,0x15
c000ca88:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000ca8d:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000ca93:	29 eb                	sub    ebx,ebp
c000ca95:	29 ef                	sub    edi,ebp
c000ca97:	83 ec 08             	sub    esp,0x8
c000ca9a:	53                   	push   ebx
c000ca9b:	68 fb 43 02 c0       	push   0xc00243fb
c000caa0:	e8 52 02 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000caa5:	e8 14 d6 ff ff       	call   c000a0be <Phys::allocatePage()>
c000caaa:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000cab1:	6a 01                	push   0x1
c000cab3:	53                   	push   ebx
c000cab4:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000caba:	50                   	push   eax
c000cabb:	56                   	push   esi
c000cabc:	e8 ad f8 ff ff       	call   c000c36e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cac1:	83 c4 20             	add    esp,0x20
c000cac4:	39 fb                	cmp    ebx,edi
c000cac6:	75 cf                	jne    c000ca97 <mapVASFirstTime+0x33>
c000cac8:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000cacd:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000cad2:	29 eb                	sub    ebx,ebp
c000cad4:	29 ef                	sub    edi,ebp
c000cad6:	83 ec 08             	sub    esp,0x8
c000cad9:	53                   	push   ebx
c000cada:	68 17 44 02 c0       	push   0xc0024417
c000cadf:	e8 13 02 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000cae4:	58                   	pop    eax
c000cae5:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000cae9:	5a                   	pop    edx
c000caea:	19 c0                	sbb    eax,eax
c000caec:	83 e0 04             	and    eax,0x4
c000caef:	05 03 04 00 00       	add    eax,0x403
c000caf4:	50                   	push   eax
c000caf5:	68 2b 44 02 c0       	push   0xc002442b
c000cafa:	e8 f8 01 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000caff:	e8 ba d5 ff ff       	call   c000a0be <Phys::allocatePage()>
c000cb04:	59                   	pop    ecx
c000cb05:	89 c5                	mov    ebp,eax
c000cb07:	58                   	pop    eax
c000cb08:	55                   	push   ebp
c000cb09:	68 39 44 02 c0       	push   0xc0024439
c000cb0e:	e8 e4 01 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000cb13:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000cb17:	19 d2                	sbb    edx,edx
c000cb19:	83 e2 04             	and    edx,0x4
c000cb1c:	81 c2 03 04 00 00    	add    edx,0x403
c000cb22:	89 14 24             	mov    DWORD PTR [esp],edx
c000cb25:	6a 01                	push   0x1
c000cb27:	53                   	push   ebx
c000cb28:	55                   	push   ebp
c000cb29:	56                   	push   esi
c000cb2a:	e8 3f f8 ff ff       	call   c000c36e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cb2f:	83 c4 18             	add    esp,0x18
c000cb32:	53                   	push   ebx
c000cb33:	56                   	push   esi
c000cb34:	e8 a9 f1 ff ff       	call   c000bce2 <VAS::getPageTableEntry(unsigned long)>
c000cb39:	5a                   	pop    edx
c000cb3a:	59                   	pop    ecx
c000cb3b:	ff 30                	push   DWORD PTR [eax]
c000cb3d:	68 55 44 02 c0       	push   0xc0024455
c000cb42:	e8 b0 01 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000cb47:	0f 20 d8             	mov    eax,cr3
c000cb4a:	83 c4 0c             	add    esp,0xc
c000cb4d:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cb53:	56                   	push   esi
c000cb54:	50                   	push   eax
c000cb55:	68 60 44 02 c0       	push   0xc0024460
c000cb5a:	e8 98 01 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000cb5f:	83 c4 10             	add    esp,0x10
c000cb62:	39 df                	cmp    edi,ebx
c000cb64:	0f 85 6c ff ff ff    	jne    c000cad6 <mapVASFirstTime+0x72>
c000cb6a:	0f 20 d8             	mov    eax,cr3
c000cb6d:	0f 22 d8             	mov    cr3,eax
c000cb70:	83 c4 0c             	add    esp,0xc
c000cb73:	5b                   	pop    ebx
c000cb74:	5e                   	pop    esi
c000cb75:	5f                   	pop    edi
c000cb76:	5d                   	pop    ebp
c000cb77:	c3                   	ret    
c000cb78:	83 ec 0c             	sub    esp,0xc
c000cb7b:	68 e2 43 02 c0       	push   0xc00243e2
c000cb80:	e8 72 01 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000cb85:	83 c4 10             	add    esp,0x10
c000cb88:	83 c4 0c             	add    esp,0xc
c000cb8b:	5b                   	pop    ebx
c000cb8c:	5e                   	pop    esi
c000cb8d:	5f                   	pop    edi
c000cb8e:	5d                   	pop    ebp
c000cb8f:	c3                   	ret    

c000cb90 <__cxa_atexit>:
c000cb90:	31 c0                	xor    eax,eax
c000cb92:	c3                   	ret    

c000cb93 <__cxa_finalize>:
c000cb93:	c3                   	ret    

c000cb94 <__stack_chk_fail>:
c000cb94:	55                   	push   ebp
c000cb95:	89 e5                	mov    ebp,esp
c000cb97:	83 ec 14             	sub    esp,0x14
c000cb9a:	68 78 44 02 c0       	push   0xc0024478
c000cb9f:	e8 53 01 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000cba4:	58                   	pop    eax
c000cba5:	5a                   	pop    edx
c000cba6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cba9:	68 c8 44 02 c0       	push   0xc00244c8
c000cbae:	e8 44 01 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000cbb3:	59                   	pop    ecx
c000cbb4:	58                   	pop    eax
c000cbb5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbb8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cbbb:	68 c8 44 02 c0       	push   0xc00244c8
c000cbc0:	e8 32 01 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000cbc5:	5a                   	pop    edx
c000cbc6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbc9:	59                   	pop    ecx
c000cbca:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbcc:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cbcf:	68 c8 44 02 c0       	push   0xc00244c8
c000cbd4:	e8 1e 01 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000cbd9:	5a                   	pop    edx
c000cbda:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbdd:	59                   	pop    ecx
c000cbde:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbe0:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbe2:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cbe5:	68 c8 44 02 c0       	push   0xc00244c8
c000cbea:	e8 08 01 00 00       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000cbef:	c7 04 24 d0 44 02 c0 	mov    DWORD PTR [esp],0xc00244d0
c000cbf6:	e8 a8 7c 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c000cbfb:	83 c4 10             	add    esp,0x10
c000cbfe:	c9                   	leave  
c000cbff:	c3                   	ret    

c000cc00 <__cxa_pure_virtual>:
c000cc00:	83 ec 18             	sub    esp,0x18
c000cc03:	68 e8 44 02 c0       	push   0xc00244e8
c000cc08:	e8 96 7c 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c000cc0d:	83 c4 1c             	add    esp,0x1c
c000cc10:	c3                   	ret    

c000cc11 <operator new[](unsigned long)>:
c000cc11:	e9 f1 cd ff ff       	jmp    c0009a07 <malloc>

c000cc16 <operator delete(void*, unsigned long)>:
c000cc16:	e9 0c ce ff ff       	jmp    c0009a27 <rfree>

c000cc1b <operator delete[](void*)>:
c000cc1b:	e9 07 ce ff ff       	jmp    c0009a27 <rfree>

c000cc20 <operator delete[](void*, unsigned long)>:
c000cc20:	e9 02 ce ff ff       	jmp    c0009a27 <rfree>

c000cc25 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000cc25:	55                   	push   ebp
c000cc26:	b9 11 00 00 00       	mov    ecx,0x11
c000cc2b:	57                   	push   edi
c000cc2c:	56                   	push   esi
c000cc2d:	be ce 3f 02 c0       	mov    esi,0xc0023fce
c000cc32:	53                   	push   ebx
c000cc33:	83 ec 20             	sub    esp,0x20
c000cc36:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cc3a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cc3e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000cc42:	fc                   	cld    
c000cc43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cc45:	89 ee                	mov    esi,ebp
c000cc47:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cc4b:	eb 02                	jmp    c000cc4f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000cc4d:	89 c6                	mov    esi,eax
c000cc4f:	31 d2                	xor    edx,edx
c000cc51:	41                   	inc    ecx
c000cc52:	89 f0                	mov    eax,esi
c000cc54:	f7 f3                	div    ebx
c000cc56:	39 de                	cmp    esi,ebx
c000cc58:	73 f3                	jae    c000cc4d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000cc5a:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cc5d:	eb 02                	jmp    c000cc61 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000cc5f:	89 c5                	mov    ebp,eax
c000cc61:	31 d2                	xor    edx,edx
c000cc63:	49                   	dec    ecx
c000cc64:	89 e8                	mov    eax,ebp
c000cc66:	f7 f3                	div    ebx
c000cc68:	39 dd                	cmp    ebp,ebx
c000cc6a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000cc6e:	88 11                	mov    BYTE PTR [ecx],dl
c000cc70:	73 ed                	jae    c000cc5f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000cc72:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc76:	83 c4 20             	add    esp,0x20
c000cc79:	5b                   	pop    ebx
c000cc7a:	5e                   	pop    esi
c000cc7b:	5f                   	pop    edi
c000cc7c:	5d                   	pop    ebp
c000cc7d:	c3                   	ret    

c000cc7e <Dbg::logc(char)>:
c000cc7e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cc82:	f6 05 60 7b 02 c0 10 	test   BYTE PTR ds:0xc0027b60,0x10
c000cc89:	75 12                	jne    c000cc9d <Dbg::logc(char)+0x1f>
c000cc8b:	ba fd 03 00 00       	mov    edx,0x3fd
c000cc90:	ec                   	in     al,dx
c000cc91:	a8 20                	test   al,0x20
c000cc93:	74 fb                	je     c000cc90 <Dbg::logc(char)+0x12>
c000cc95:	ba f8 03 00 00       	mov    edx,0x3f8
c000cc9a:	88 c8                	mov    al,cl
c000cc9c:	ee                   	out    dx,al
c000cc9d:	c3                   	ret    

c000cc9e <Dbg::logs(char*)>:
c000cc9e:	53                   	push   ebx
c000cc9f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000cca3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cca6:	84 c0                	test   al,al
c000cca8:	74 0f                	je     c000ccb9 <Dbg::logs(char*)+0x1b>
c000ccaa:	50                   	push   eax
c000ccab:	43                   	inc    ebx
c000ccac:	e8 cd ff ff ff       	call   c000cc7e <Dbg::logc(char)>
c000ccb1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ccb4:	5a                   	pop    edx
c000ccb5:	84 c0                	test   al,al
c000ccb7:	75 f1                	jne    c000ccaa <Dbg::logs(char*)+0xc>
c000ccb9:	5b                   	pop    ebx
c000ccba:	c3                   	ret    

c000ccbb <Dbg::logWriteInt(unsigned int)>:
c000ccbb:	83 ec 10             	sub    esp,0x10
c000ccbe:	6a 0a                	push   0xa
c000ccc0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ccc4:	50                   	push   eax
c000ccc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc9:	e8 57 ff ff ff       	call   c000cc25 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ccce:	50                   	push   eax
c000cccf:	e8 ca ff ff ff       	call   c000cc9e <Dbg::logs(char*)>
c000ccd4:	83 c4 20             	add    esp,0x20
c000ccd7:	c3                   	ret    

c000ccd8 <Dbg::logWriteIntBase(unsigned int, int)>:
c000ccd8:	83 ec 10             	sub    esp,0x10
c000ccdb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ccdf:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cce3:	50                   	push   eax
c000cce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce8:	e8 38 ff ff ff       	call   c000cc25 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000cced:	50                   	push   eax
c000ccee:	e8 ab ff ff ff       	call   c000cc9e <Dbg::logs(char*)>
c000ccf3:	83 c4 20             	add    esp,0x20
c000ccf6:	c3                   	ret    

c000ccf7 <Dbg::kprintf(char const*, ...)>:
c000ccf7:	55                   	push   ebp
c000ccf8:	57                   	push   edi
c000ccf9:	56                   	push   esi
c000ccfa:	53                   	push   ebx
c000ccfb:	83 ec 0c             	sub    esp,0xc
c000ccfe:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cd02:	f6 05 60 7b 02 c0 10 	test   BYTE PTR ds:0xc0027b60,0x10
c000cd09:	74 08                	je     c000cd13 <Dbg::kprintf(char const*, ...)+0x1c>
c000cd0b:	83 c4 0c             	add    esp,0xc
c000cd0e:	5b                   	pop    ebx
c000cd0f:	5e                   	pop    esi
c000cd10:	5f                   	pop    edi
c000cd11:	5d                   	pop    ebp
c000cd12:	c3                   	ret    
c000cd13:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cd17:	31 db                	xor    ebx,ebx
c000cd19:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cd1d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cd20:	84 c0                	test   al,al
c000cd22:	74 e7                	je     c000cd0b <Dbg::kprintf(char const*, ...)+0x14>
c000cd24:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cd27:	3c 25                	cmp    al,0x25
c000cd29:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cd2c:	75 44                	jne    c000cd72 <Dbg::kprintf(char const*, ...)+0x7b>
c000cd2e:	83 c3 02             	add    ebx,0x2
c000cd31:	8a 07                	mov    al,BYTE PTR [edi]
c000cd33:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000cd36:	83 e8 25             	sub    eax,0x25
c000cd39:	3c 53                	cmp    al,0x53
c000cd3b:	0f 87 c9 00 00 00    	ja     c000ce0a <Dbg::kprintf(char const*, ...)+0x113>
c000cd41:	0f b6 c0             	movzx  eax,al
c000cd44:	ff 24 85 fc 44 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdbb04]
c000cd4b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cd4f:	89 c8                	mov    eax,ecx
c000cd51:	83 c1 04             	add    ecx,0x4
c000cd54:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cd58:	ff 30                	push   DWORD PTR [eax]
c000cd5a:	e8 5c ff ff ff       	call   c000ccbb <Dbg::logWriteInt(unsigned int)>
c000cd5f:	5f                   	pop    edi
c000cd60:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cd64:	84 c0                	test   al,al
c000cd66:	74 a3                	je     c000cd0b <Dbg::kprintf(char const*, ...)+0x14>
c000cd68:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cd6b:	3c 25                	cmp    al,0x25
c000cd6d:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cd70:	74 bc                	je     c000cd2e <Dbg::kprintf(char const*, ...)+0x37>
c000cd72:	50                   	push   eax
c000cd73:	89 eb                	mov    ebx,ebp
c000cd75:	e8 04 ff ff ff       	call   c000cc7e <Dbg::logc(char)>
c000cd7a:	89 fd                	mov    ebp,edi
c000cd7c:	58                   	pop    eax
c000cd7d:	eb e1                	jmp    c000cd60 <Dbg::kprintf(char const*, ...)+0x69>
c000cd7f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cd83:	89 c8                	mov    eax,ecx
c000cd85:	83 c1 04             	add    ecx,0x4
c000cd88:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cd8c:	ff 30                	push   DWORD PTR [eax]
c000cd8e:	e8 0b ff ff ff       	call   c000cc9e <Dbg::logs(char*)>
c000cd93:	58                   	pop    eax
c000cd94:	eb ca                	jmp    c000cd60 <Dbg::kprintf(char const*, ...)+0x69>
c000cd96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd9a:	89 d0                	mov    eax,edx
c000cd9c:	83 c2 04             	add    edx,0x4
c000cd9f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cda3:	ff 30                	push   DWORD PTR [eax]
c000cda5:	e8 11 ff ff ff       	call   c000ccbb <Dbg::logWriteInt(unsigned int)>
c000cdaa:	58                   	pop    eax
c000cdab:	eb b3                	jmp    c000cd60 <Dbg::kprintf(char const*, ...)+0x69>
c000cdad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cdb1:	89 d0                	mov    eax,edx
c000cdb3:	83 c2 04             	add    edx,0x4
c000cdb6:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cdb9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cdbd:	50                   	push   eax
c000cdbe:	e8 bb fe ff ff       	call   c000cc7e <Dbg::logc(char)>
c000cdc3:	58                   	pop    eax
c000cdc4:	eb 9a                	jmp    c000cd60 <Dbg::kprintf(char const*, ...)+0x69>
c000cdc6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cdca:	89 c8                	mov    eax,ecx
c000cdcc:	83 c1 04             	add    ecx,0x4
c000cdcf:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cdd3:	6a 10                	push   0x10
c000cdd5:	ff 30                	push   DWORD PTR [eax]
c000cdd7:	e8 fc fe ff ff       	call   c000ccd8 <Dbg::logWriteIntBase(unsigned int, int)>
c000cddc:	59                   	pop    ecx
c000cddd:	5f                   	pop    edi
c000cdde:	eb 80                	jmp    c000cd60 <Dbg::kprintf(char const*, ...)+0x69>
c000cde0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cde4:	89 d0                	mov    eax,edx
c000cde6:	83 c2 08             	add    edx,0x8
c000cde9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cded:	6a 10                	push   0x10
c000cdef:	ff 30                	push   DWORD PTR [eax]
c000cdf1:	e8 e2 fe ff ff       	call   c000ccd8 <Dbg::logWriteIntBase(unsigned int, int)>
c000cdf6:	58                   	pop    eax
c000cdf7:	5a                   	pop    edx
c000cdf8:	e9 63 ff ff ff       	jmp    c000cd60 <Dbg::kprintf(char const*, ...)+0x69>
c000cdfd:	6a 25                	push   0x25
c000cdff:	e8 7a fe ff ff       	call   c000cc7e <Dbg::logc(char)>
c000ce04:	58                   	pop    eax
c000ce05:	e9 56 ff ff ff       	jmp    c000cd60 <Dbg::kprintf(char const*, ...)+0x69>
c000ce0a:	6a 25                	push   0x25
c000ce0c:	e8 6d fe ff ff       	call   c000cc7e <Dbg::logc(char)>
c000ce11:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ce14:	50                   	push   eax
c000ce15:	e8 64 fe ff ff       	call   c000cc7e <Dbg::logc(char)>
c000ce1a:	5a                   	pop    edx
c000ce1b:	59                   	pop    ecx
c000ce1c:	e9 3f ff ff ff       	jmp    c000cd60 <Dbg::kprintf(char const*, ...)+0x69>
c000ce21:	90                   	nop

c000ce22 <File::read(unsigned long long, void*, int*)>:
c000ce22:	53                   	push   ebx
c000ce23:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce27:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ce2b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ce32:	3c 19                	cmp    al,0x19
c000ce34:	77 35                	ja     c000ce6b <File::read(unsigned long long, void*, int*)+0x49>
c000ce36:	8b 04 85 00 81 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f00]
c000ce3d:	85 c0                	test   eax,eax
c000ce3f:	74 2a                	je     c000ce6b <File::read(unsigned long long, void*, int*)+0x49>
c000ce41:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ce47:	85 c0                	test   eax,eax
c000ce49:	74 20                	je     c000ce6b <File::read(unsigned long long, void*, int*)+0x49>
c000ce4b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ce4f:	74 21                	je     c000ce72 <File::read(unsigned long long, void*, int*)+0x50>
c000ce51:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ce53:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce57:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ce5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce61:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce65:	5b                   	pop    ebx
c000ce66:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ce69:	ff e0                	jmp    eax
c000ce6b:	b8 0b 00 00 00       	mov    eax,0xb
c000ce70:	eb 05                	jmp    c000ce77 <File::read(unsigned long long, void*, int*)+0x55>
c000ce72:	b8 05 00 00 00       	mov    eax,0x5
c000ce77:	5b                   	pop    ebx
c000ce78:	c3                   	ret    
c000ce79:	90                   	nop

c000ce7a <File::write(unsigned long long, void*, int*)>:
c000ce7a:	53                   	push   ebx
c000ce7b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce7f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ce83:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ce8a:	3c 19                	cmp    al,0x19
c000ce8c:	77 35                	ja     c000cec3 <File::write(unsigned long long, void*, int*)+0x49>
c000ce8e:	8b 04 85 00 81 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f00]
c000ce95:	85 c0                	test   eax,eax
c000ce97:	74 2a                	je     c000cec3 <File::write(unsigned long long, void*, int*)+0x49>
c000ce99:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ce9f:	85 c0                	test   eax,eax
c000cea1:	74 20                	je     c000cec3 <File::write(unsigned long long, void*, int*)+0x49>
c000cea3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cea7:	74 21                	je     c000ceca <File::write(unsigned long long, void*, int*)+0x50>
c000cea9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ceab:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ceaf:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ceb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ceb9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cebd:	5b                   	pop    ebx
c000cebe:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000cec1:	ff e0                	jmp    eax
c000cec3:	b8 0b 00 00 00       	mov    eax,0xb
c000cec8:	eb 05                	jmp    c000cecf <File::write(unsigned long long, void*, int*)+0x55>
c000ceca:	b8 05 00 00 00       	mov    eax,0x5
c000cecf:	5b                   	pop    ebx
c000ced0:	c3                   	ret    
c000ced1:	90                   	nop

c000ced2 <Directory::read(unsigned long long, void*, int*)>:
c000ced2:	53                   	push   ebx
c000ced3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ced7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cedb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cee2:	3c 19                	cmp    al,0x19
c000cee4:	77 35                	ja     c000cf1b <Directory::read(unsigned long long, void*, int*)+0x49>
c000cee6:	8b 04 85 00 81 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f00]
c000ceed:	85 c0                	test   eax,eax
c000ceef:	74 2a                	je     c000cf1b <Directory::read(unsigned long long, void*, int*)+0x49>
c000cef1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cef7:	85 c0                	test   eax,eax
c000cef9:	74 20                	je     c000cf1b <Directory::read(unsigned long long, void*, int*)+0x49>
c000cefb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ceff:	74 21                	je     c000cf22 <Directory::read(unsigned long long, void*, int*)+0x50>
c000cf01:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cf03:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf07:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cf0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf11:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf15:	5b                   	pop    ebx
c000cf16:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000cf19:	ff e0                	jmp    eax
c000cf1b:	b8 0b 00 00 00       	mov    eax,0xb
c000cf20:	eb 05                	jmp    c000cf27 <Directory::read(unsigned long long, void*, int*)+0x55>
c000cf22:	b8 05 00 00 00       	mov    eax,0x5
c000cf27:	5b                   	pop    ebx
c000cf28:	c3                   	ret    
c000cf29:	90                   	nop

c000cf2a <Directory::write(unsigned long long, void*, int*)>:
c000cf2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf2e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000cf35:	b8 0b 00 00 00       	mov    eax,0xb
c000cf3a:	80 fa 19             	cmp    dl,0x19
c000cf3d:	77 18                	ja     c000cf57 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cf3f:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c000cf46:	85 d2                	test   edx,edx
c000cf48:	74 0d                	je     c000cf57 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cf4a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000cf51:	19 c0                	sbb    eax,eax
c000cf53:	83 e0 0a             	and    eax,0xa
c000cf56:	40                   	inc    eax
c000cf57:	c3                   	ret    

c000cf58 <File::isAtty()>:
c000cf58:	31 c0                	xor    eax,eax
c000cf5a:	c3                   	ret    
c000cf5b:	90                   	nop

c000cf5c <Directory::isAtty()>:
c000cf5c:	31 c0                	xor    eax,eax
c000cf5e:	c3                   	ret    
c000cf5f:	90                   	nop

c000cf60 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000cf60:	b8 0a 00 00 00       	mov    eax,0xa
c000cf65:	c3                   	ret    

c000cf66 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000cf66:	b8 0a 00 00 00       	mov    eax,0xa
c000cf6b:	c3                   	ret    

c000cf6c <Filesystem::allocateSwapfile(char const*, int)>:
c000cf6c:	31 c0                	xor    eax,eax
c000cf6e:	31 d2                	xor    edx,edx
c000cf70:	c3                   	ret    
c000cf71:	90                   	nop

c000cf72 <File::~File()>:
c000cf72:	83 ec 0c             	sub    esp,0xc
c000cf75:	ba bc 46 02 c0       	mov    edx,0xc00246bc
c000cf7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf7e:	89 10                	mov    DWORD PTR [eax],edx
c000cf80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf84:	83 ec 0c             	sub    esp,0xc
c000cf87:	50                   	push   eax
c000cf88:	e8 e3 e7 ff ff       	call   c000b770 <UnixFile::~UnixFile()>
c000cf8d:	83 c4 10             	add    esp,0x10
c000cf90:	90                   	nop
c000cf91:	83 c4 0c             	add    esp,0xc
c000cf94:	c3                   	ret    
c000cf95:	90                   	nop

c000cf96 <File::~File()>:
c000cf96:	83 ec 0c             	sub    esp,0xc
c000cf99:	83 ec 0c             	sub    esp,0xc
c000cf9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfa0:	e8 cd ff ff ff       	call   c000cf72 <File::~File()>
c000cfa5:	83 c4 10             	add    esp,0x10
c000cfa8:	83 ec 08             	sub    esp,0x8
c000cfab:	68 14 01 00 00       	push   0x114
c000cfb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb4:	e8 5d fc ff ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c000cfb9:	83 c4 10             	add    esp,0x10
c000cfbc:	83 c4 0c             	add    esp,0xc
c000cfbf:	c3                   	ret    

c000cfc0 <Directory::~Directory()>:
c000cfc0:	83 ec 0c             	sub    esp,0xc
c000cfc3:	ba d8 46 02 c0       	mov    edx,0xc00246d8
c000cfc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfcc:	89 10                	mov    DWORD PTR [eax],edx
c000cfce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfd2:	83 ec 0c             	sub    esp,0xc
c000cfd5:	50                   	push   eax
c000cfd6:	e8 95 e7 ff ff       	call   c000b770 <UnixFile::~UnixFile()>
c000cfdb:	83 c4 10             	add    esp,0x10
c000cfde:	90                   	nop
c000cfdf:	83 c4 0c             	add    esp,0xc
c000cfe2:	c3                   	ret    
c000cfe3:	90                   	nop

c000cfe4 <Directory::~Directory()>:
c000cfe4:	83 ec 0c             	sub    esp,0xc
c000cfe7:	83 ec 0c             	sub    esp,0xc
c000cfea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfee:	e8 cd ff ff ff       	call   c000cfc0 <Directory::~Directory()>
c000cff3:	83 c4 10             	add    esp,0x10
c000cff6:	83 ec 08             	sub    esp,0x8
c000cff9:	68 14 01 00 00       	push   0x114
c000cffe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d002:	e8 0f fc ff ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c000d007:	83 c4 10             	add    esp,0x10
c000d00a:	83 c4 0c             	add    esp,0xc
c000d00d:	c3                   	ret    

c000d00e <Filesystem::Filesystem()>:
c000d00e:	ba 54 46 02 c0       	mov    edx,0xc0024654
c000d013:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d017:	89 10                	mov    DWORD PTR [eax],edx
c000d019:	8b 15 74 7c 02 c0    	mov    edx,DWORD PTR ds:0xc0027c74
c000d01f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d023:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d026:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d02a:	a3 74 7c 02 c0       	mov    ds:0xc0027c74,eax
c000d02f:	90                   	nop
c000d030:	c3                   	ret    
c000d031:	90                   	nop

c000d032 <Filesystem::~Filesystem()>:
c000d032:	ba 54 46 02 c0       	mov    edx,0xc0024654
c000d037:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d03b:	89 10                	mov    DWORD PTR [eax],edx
c000d03d:	90                   	nop
c000d03e:	c3                   	ret    
c000d03f:	90                   	nop

c000d040 <Filesystem::~Filesystem()>:
c000d040:	83 ec 0c             	sub    esp,0xc
c000d043:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d047:	e8 e6 ff ff ff       	call   c000d032 <Filesystem::~Filesystem()>
c000d04c:	83 c4 04             	add    esp,0x4
c000d04f:	83 ec 08             	sub    esp,0x8
c000d052:	6a 08                	push   0x8
c000d054:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d058:	e8 b9 fb ff ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c000d05d:	83 c4 10             	add    esp,0x10
c000d060:	83 c4 0c             	add    esp,0xc
c000d063:	c3                   	ret    

c000d064 <Fs::getcwd(Process*, char*, int)>:
c000d064:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d068:	31 c0                	xor    eax,eax
c000d06a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d06d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d071:	7d 15                	jge    c000d088 <Fs::getcwd(Process*, char*, int)+0x24>
c000d073:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d077:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000d07e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000d081:	84 c9                	test   cl,cl
c000d083:	74 06                	je     c000d08b <Fs::getcwd(Process*, char*, int)+0x27>
c000d085:	40                   	inc    eax
c000d086:	eb e2                	jmp    c000d06a <Fs::getcwd(Process*, char*, int)+0x6>
c000d088:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d08b:	31 c0                	xor    eax,eax
c000d08d:	c3                   	ret    

c000d08e <Fs::initVFS()>:
c000d08e:	83 ec 18             	sub    esp,0x18
c000d091:	6a 08                	push   0x8
c000d093:	e8 6f c9 ff ff       	call   c0009a07 <malloc>
c000d098:	89 04 24             	mov    DWORD PTR [esp],eax
c000d09b:	e8 58 e6 00 00       	call   c001b6f8 <FAT::FAT()>
c000d0a0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000d0a7:	e8 5b c9 ff ff       	call   c0009a07 <malloc>
c000d0ac:	89 04 24             	mov    DWORD PTR [esp],eax
c000d0af:	e8 a2 f8 00 00       	call   c001c956 <ISO9660::ISO9660()>
c000d0b4:	83 c4 1c             	add    esp,0x1c
c000d0b7:	c3                   	ret    

c000d0b8 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d0b8:	55                   	push   ebp
c000d0b9:	57                   	push   edi
c000d0ba:	56                   	push   esi
c000d0bb:	53                   	push   ebx
c000d0bc:	81 ec 10 04 00 00    	sub    esp,0x410
c000d0c2:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d0c9:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d0d0:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d0d7:	68 00 04 00 00       	push   0x400
c000d0dc:	6a 00                	push   0x0
c000d0de:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d0e2:	56                   	push   esi
c000d0e3:	e8 9c 35 ff ff       	call   c0000684 <memset>
c000d0e8:	83 c4 10             	add    esp,0x10
c000d0eb:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d0ef:	75 0b                	jne    c000d0fc <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d0f1:	50                   	push   eax
c000d0f2:	50                   	push   eax
c000d0f3:	57                   	push   edi
c000d0f4:	56                   	push   esi
c000d0f5:	e8 46 36 ff ff       	call   c0000740 <strcpy>
c000d0fa:	eb 41                	jmp    c000d13d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d0fc:	8a 07                	mov    al,BYTE PTR [edi]
c000d0fe:	3c 5c                	cmp    al,0x5c
c000d100:	74 04                	je     c000d106 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d102:	3c 2f                	cmp    al,0x2f
c000d104:	75 18                	jne    c000d11e <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d106:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d109:	3c 60                	cmp    al,0x60
c000d10b:	7e 03                	jle    c000d110 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d10d:	83 e8 20             	sub    eax,0x20
c000d110:	88 04 24             	mov    BYTE PTR [esp],al
c000d113:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d11a:	50                   	push   eax
c000d11b:	50                   	push   eax
c000d11c:	eb 18                	jmp    c000d136 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d11e:	50                   	push   eax
c000d11f:	50                   	push   eax
c000d120:	55                   	push   ebp
c000d121:	56                   	push   esi
c000d122:	e8 19 36 ff ff       	call   c0000740 <strcpy>
c000d127:	5a                   	pop    edx
c000d128:	59                   	pop    ecx
c000d129:	68 72 5c 02 c0       	push   0xc0025c72
c000d12e:	56                   	push   esi
c000d12f:	e8 4c 37 ff ff       	call   c0000880 <strcat>
c000d134:	5d                   	pop    ebp
c000d135:	58                   	pop    eax
c000d136:	57                   	push   edi
c000d137:	56                   	push   esi
c000d138:	e8 43 37 ff ff       	call   c0000880 <strcat>
c000d13d:	83 c4 10             	add    esp,0x10
c000d140:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d143:	3c 60                	cmp    al,0x60
c000d145:	7e 03                	jle    c000d14a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d147:	83 e8 20             	sub    eax,0x20
c000d14a:	88 04 24             	mov    BYTE PTR [esp],al
c000d14d:	88 03                	mov    BYTE PTR [ebx],al
c000d14f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d156:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d15c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d160:	bf 03 00 00 00       	mov    edi,0x3
c000d165:	b8 03 00 00 00       	mov    eax,0x3
c000d16a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d16d:	84 d2                	test   dl,dl
c000d16f:	0f 84 91 00 00 00    	je     c000d206 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d175:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d178:	80 fa 5c             	cmp    dl,0x5c
c000d17b:	74 05                	je     c000d182 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d17d:	80 fa 2f             	cmp    dl,0x2f
c000d180:	75 12                	jne    c000d194 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d182:	89 c5                	mov    ebp,eax
c000d184:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d189:	74 09                	je     c000d194 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d18b:	40                   	inc    eax
c000d18c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d190:	89 cf                	mov    edi,ecx
c000d192:	eb d6                	jmp    c000d16a <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d194:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d199:	75 5b                	jne    c000d1f6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d19b:	80 fa 2e             	cmp    dl,0x2e
c000d19e:	75 56                	jne    c000d1f6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d1a0:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d1a4:	74 19                	je     c000d1bf <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d1a6:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d1ab:	74 53                	je     c000d200 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d1ad:	89 f9                	mov    ecx,edi
c000d1af:	41                   	inc    ecx
c000d1b0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d1b3:	80 fa 2f             	cmp    dl,0x2f
c000d1b6:	74 f7                	je     c000d1af <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d1b8:	80 fa 5c             	cmp    dl,0x5c
c000d1bb:	74 f2                	je     c000d1af <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d1bd:	eb d1                	jmp    c000d190 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1bf:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d1c4:	74 3a                	je     c000d200 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d1c6:	83 f8 03             	cmp    eax,0x3
c000d1c9:	74 c5                	je     c000d190 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1cb:	41                   	inc    ecx
c000d1cc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d1cf:	80 fa 2f             	cmp    dl,0x2f
c000d1d2:	74 f7                	je     c000d1cb <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d1d4:	80 fa 5c             	cmp    dl,0x5c
c000d1d7:	74 f2                	je     c000d1cb <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d1d9:	48                   	dec    eax
c000d1da:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d1de:	75 06                	jne    c000d1e6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d1e0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d1e4:	eb f3                	jmp    c000d1d9 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d1e6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d1ea:	74 07                	je     c000d1f3 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d1ec:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d1f0:	48                   	dec    eax
c000d1f1:	eb f3                	jmp    c000d1e6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d1f3:	40                   	inc    eax
c000d1f4:	eb 9a                	jmp    c000d190 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1f6:	80 fa 2f             	cmp    dl,0x2f
c000d1f9:	74 95                	je     c000d190 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1fb:	80 fa 5c             	cmp    dl,0x5c
c000d1fe:	74 90                	je     c000d190 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d200:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d203:	40                   	inc    eax
c000d204:	eb 8a                	jmp    c000d190 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d206:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d20a:	83 ec 0c             	sub    esp,0xc
c000d20d:	53                   	push   ebx
c000d20e:	e8 8d 34 ff ff       	call   c00006a0 <strlen>
c000d213:	83 c4 10             	add    esp,0x10
c000d216:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d21b:	75 26                	jne    c000d243 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d21d:	83 ec 0c             	sub    esp,0xc
c000d220:	53                   	push   ebx
c000d221:	e8 7a 34 ff ff       	call   c00006a0 <strlen>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d22e:	74 26                	je     c000d256 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d230:	83 ec 0c             	sub    esp,0xc
c000d233:	53                   	push   ebx
c000d234:	e8 67 34 ff ff       	call   c00006a0 <strlen>
c000d239:	83 c4 10             	add    esp,0x10
c000d23c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d241:	eb c7                	jmp    c000d20a <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d243:	83 ec 0c             	sub    esp,0xc
c000d246:	53                   	push   ebx
c000d247:	e8 54 34 ff ff       	call   c00006a0 <strlen>
c000d24c:	83 c4 10             	add    esp,0x10
c000d24f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d254:	74 c7                	je     c000d21d <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d256:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d25c:	5b                   	pop    ebx
c000d25d:	5e                   	pop    esi
c000d25e:	5f                   	pop    edi
c000d25f:	5d                   	pop    ebp
c000d260:	c3                   	ret    
c000d261:	90                   	nop

c000d262 <File::File(char const*, Process*)>:
c000d262:	83 ec 0c             	sub    esp,0xc
c000d265:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d269:	83 ec 08             	sub    esp,0x8
c000d26c:	6a 00                	push   0x0
c000d26e:	50                   	push   eax
c000d26f:	e8 1a e3 ff ff       	call   c000b58e <UnixFile::UnixFile(int)>
c000d274:	83 c4 10             	add    esp,0x10
c000d277:	ba bc 46 02 c0       	mov    edx,0xc00246bc
c000d27c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d280:	89 10                	mov    DWORD PTR [eax],edx
c000d282:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d286:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d28c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d290:	83 c0 0d             	add    eax,0xd
c000d293:	83 ec 04             	sub    esp,0x4
c000d296:	52                   	push   edx
c000d297:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d29b:	50                   	push   eax
c000d29c:	e8 17 fe ff ff       	call   c000d0b8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d2a1:	83 c4 10             	add    esp,0x10
c000d2a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2a8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d2ab:	8d 50 bf             	lea    edx,[eax-0x41]
c000d2ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2b2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d2b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2bc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d2c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2c4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d2ca:	0f b6 c0             	movzx  eax,al
c000d2cd:	8b 04 85 00 81 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f00]
c000d2d4:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	75 20                	jne    c000d2fe <File::File(char const*, Process*)+0x9c>
c000d2de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2e2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d2e8:	0f b6 c0             	movzx  eax,al
c000d2eb:	8b 04 85 00 81 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f00]
c000d2f2:	83 ec 0c             	sub    esp,0xc
c000d2f5:	50                   	push   eax
c000d2f6:	e8 97 30 00 00       	call   c0010392 <LogicalDisk::mount()>
c000d2fb:	83 c4 10             	add    esp,0x10
c000d2fe:	90                   	nop
c000d2ff:	83 c4 0c             	add    esp,0xc
c000d302:	c3                   	ret    
c000d303:	90                   	nop

c000d304 <File::open(FileOpenMode)>:
c000d304:	53                   	push   ebx
c000d305:	b8 0b 00 00 00       	mov    eax,0xb
c000d30a:	83 ec 08             	sub    esp,0x8
c000d30d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d311:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d318:	80 fa 19             	cmp    dl,0x19
c000d31b:	77 40                	ja     c000d35d <File::open(FileOpenMode)+0x59>
c000d31d:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c000d324:	85 d2                	test   edx,edx
c000d326:	74 35                	je     c000d35d <File::open(FileOpenMode)+0x59>
c000d328:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d32e:	85 d2                	test   edx,edx
c000d330:	74 2b                	je     c000d35d <File::open(FileOpenMode)+0x59>
c000d332:	b8 06 00 00 00       	mov    eax,0x6
c000d337:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d33b:	75 20                	jne    c000d35d <File::open(FileOpenMode)+0x59>
c000d33d:	8b 02                	mov    eax,DWORD PTR [edx]
c000d33f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d345:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d349:	51                   	push   ecx
c000d34a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d34d:	51                   	push   ecx
c000d34e:	52                   	push   edx
c000d34f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d352:	83 c4 10             	add    esp,0x10
c000d355:	85 c0                	test   eax,eax
c000d357:	75 04                	jne    c000d35d <File::open(FileOpenMode)+0x59>
c000d359:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d35d:	83 c4 08             	add    esp,0x8
c000d360:	5b                   	pop    ebx
c000d361:	c3                   	ret    

c000d362 <File::close()>:
c000d362:	53                   	push   ebx
c000d363:	b8 0b 00 00 00       	mov    eax,0xb
c000d368:	83 ec 08             	sub    esp,0x8
c000d36b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d36f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d376:	80 fa 19             	cmp    dl,0x19
c000d379:	77 41                	ja     c000d3bc <File::close()+0x5a>
c000d37b:	8b 1c 95 00 81 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7f00]
c000d382:	85 db                	test   ebx,ebx
c000d384:	74 36                	je     c000d3bc <File::close()+0x5a>
c000d386:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d38d:	74 2d                	je     c000d3bc <File::close()+0x5a>
c000d38f:	b8 05 00 00 00       	mov    eax,0x5
c000d394:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d398:	74 22                	je     c000d3bc <File::close()+0x5a>
c000d39a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d39e:	8b 04 95 00 81 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7f00]
c000d3a5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d3ab:	53                   	push   ebx
c000d3ac:	53                   	push   ebx
c000d3ad:	8b 10                	mov    edx,DWORD PTR [eax]
c000d3af:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d3b5:	50                   	push   eax
c000d3b6:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d3b9:	83 c4 10             	add    esp,0x10
c000d3bc:	83 c4 08             	add    esp,0x8
c000d3bf:	5b                   	pop    ebx
c000d3c0:	c3                   	ret    
c000d3c1:	90                   	nop

c000d3c2 <File::seek(unsigned long long)>:
c000d3c2:	56                   	push   esi
c000d3c3:	53                   	push   ebx
c000d3c4:	b8 0b 00 00 00       	mov    eax,0xb
c000d3c9:	51                   	push   ecx
c000d3ca:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d3ce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3d2:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d3d9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d3dd:	80 fa 19             	cmp    dl,0x19
c000d3e0:	77 31                	ja     c000d413 <File::seek(unsigned long long)+0x51>
c000d3e2:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c000d3e9:	85 d2                	test   edx,edx
c000d3eb:	74 26                	je     c000d413 <File::seek(unsigned long long)+0x51>
c000d3ed:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d3f3:	85 d2                	test   edx,edx
c000d3f5:	74 1c                	je     c000d413 <File::seek(unsigned long long)+0x51>
c000d3f7:	b8 05 00 00 00       	mov    eax,0x5
c000d3fc:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d400:	74 11                	je     c000d413 <File::seek(unsigned long long)+0x51>
c000d402:	8b 02                	mov    eax,DWORD PTR [edx]
c000d404:	53                   	push   ebx
c000d405:	51                   	push   ecx
c000d406:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d40c:	52                   	push   edx
c000d40d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d410:	83 c4 10             	add    esp,0x10
c000d413:	5a                   	pop    edx
c000d414:	5b                   	pop    ebx
c000d415:	5e                   	pop    esi
c000d416:	c3                   	ret    
c000d417:	90                   	nop

c000d418 <File::tell(unsigned long long*)>:
c000d418:	83 ec 0c             	sub    esp,0xc
c000d41b:	b8 0b 00 00 00       	mov    eax,0xb
c000d420:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d424:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d42b:	80 fa 19             	cmp    dl,0x19
c000d42e:	77 34                	ja     c000d464 <File::tell(unsigned long long*)+0x4c>
c000d430:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c000d437:	85 d2                	test   edx,edx
c000d439:	74 29                	je     c000d464 <File::tell(unsigned long long*)+0x4c>
c000d43b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d441:	85 d2                	test   edx,edx
c000d443:	74 1f                	je     c000d464 <File::tell(unsigned long long*)+0x4c>
c000d445:	b8 05 00 00 00       	mov    eax,0x5
c000d44a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d44e:	74 14                	je     c000d464 <File::tell(unsigned long long*)+0x4c>
c000d450:	50                   	push   eax
c000d451:	8b 02                	mov    eax,DWORD PTR [edx]
c000d453:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d457:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d45d:	52                   	push   edx
c000d45e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d461:	83 c4 10             	add    esp,0x10
c000d464:	83 c4 0c             	add    esp,0xc
c000d467:	c3                   	ret    

c000d468 <File::rewind()>:
c000d468:	83 ec 10             	sub    esp,0x10
c000d46b:	6a 00                	push   0x0
c000d46d:	6a 00                	push   0x0
c000d46f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d473:	e8 4a ff ff ff       	call   c000d3c2 <File::seek(unsigned long long)>
c000d478:	83 c4 1c             	add    esp,0x1c
c000d47b:	c3                   	ret    

c000d47c <File::unlink()>:
c000d47c:	83 ec 0c             	sub    esp,0xc
c000d47f:	b8 0b 00 00 00       	mov    eax,0xb
c000d484:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d488:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d48f:	80 f9 19             	cmp    cl,0x19
c000d492:	77 2f                	ja     c000d4c3 <File::unlink()+0x47>
c000d494:	8b 0c 8d 00 81 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7f00]
c000d49b:	85 c9                	test   ecx,ecx
c000d49d:	74 24                	je     c000d4c3 <File::unlink()+0x47>
c000d49f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d4a5:	85 c9                	test   ecx,ecx
c000d4a7:	74 1a                	je     c000d4c3 <File::unlink()+0x47>
c000d4a9:	b8 06 00 00 00       	mov    eax,0x6
c000d4ae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d4b2:	75 0f                	jne    c000d4c3 <File::unlink()+0x47>
c000d4b4:	83 c2 0d             	add    edx,0xd
c000d4b7:	50                   	push   eax
c000d4b8:	50                   	push   eax
c000d4b9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d4bb:	52                   	push   edx
c000d4bc:	51                   	push   ecx
c000d4bd:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d4c0:	83 c4 10             	add    esp,0x10
c000d4c3:	83 c4 0c             	add    esp,0xc
c000d4c6:	c3                   	ret    
c000d4c7:	90                   	nop

c000d4c8 <File::rename(char const*)>:
c000d4c8:	83 ec 0c             	sub    esp,0xc
c000d4cb:	b8 0b 00 00 00       	mov    eax,0xb
c000d4d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d4d4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d4db:	80 f9 19             	cmp    cl,0x19
c000d4de:	77 32                	ja     c000d512 <File::rename(char const*)+0x4a>
c000d4e0:	8b 0c 8d 00 81 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7f00]
c000d4e7:	85 c9                	test   ecx,ecx
c000d4e9:	74 27                	je     c000d512 <File::rename(char const*)+0x4a>
c000d4eb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d4f1:	85 c9                	test   ecx,ecx
c000d4f3:	74 1d                	je     c000d512 <File::rename(char const*)+0x4a>
c000d4f5:	b8 06 00 00 00       	mov    eax,0x6
c000d4fa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d4fe:	75 12                	jne    c000d512 <File::rename(char const*)+0x4a>
c000d500:	83 c2 0d             	add    edx,0xd
c000d503:	50                   	push   eax
c000d504:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d506:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d50a:	52                   	push   edx
c000d50b:	51                   	push   ecx
c000d50c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d50f:	83 c4 10             	add    esp,0x10
c000d512:	83 c4 0c             	add    esp,0xc
c000d515:	c3                   	ret    

c000d516 <File::chfatattr(unsigned char, unsigned char)>:
c000d516:	57                   	push   edi
c000d517:	b8 0b 00 00 00       	mov    eax,0xb
c000d51c:	56                   	push   esi
c000d51d:	53                   	push   ebx
c000d51e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d522:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d526:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d52d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d531:	80 f9 19             	cmp    cl,0x19
c000d534:	77 37                	ja     c000d56d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d536:	8b 0c 8d 00 81 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7f00]
c000d53d:	85 c9                	test   ecx,ecx
c000d53f:	74 2c                	je     c000d56d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d541:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d547:	85 c9                	test   ecx,ecx
c000d549:	74 22                	je     c000d56d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d54b:	b8 06 00 00 00       	mov    eax,0x6
c000d550:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d554:	75 17                	jne    c000d56d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d556:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d558:	89 f0                	mov    eax,esi
c000d55a:	83 c2 0d             	add    edx,0xd
c000d55d:	0f b6 f0             	movzx  esi,al
c000d560:	0f b6 db             	movzx  ebx,bl
c000d563:	56                   	push   esi
c000d564:	53                   	push   ebx
c000d565:	52                   	push   edx
c000d566:	51                   	push   ecx
c000d567:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d56a:	83 c4 10             	add    esp,0x10
c000d56d:	5b                   	pop    ebx
c000d56e:	5e                   	pop    esi
c000d56f:	5f                   	pop    edi
c000d570:	c3                   	ret    
c000d571:	90                   	nop

c000d572 <File::exists()>:
c000d572:	83 ec 0c             	sub    esp,0xc
c000d575:	31 c0                	xor    eax,eax
c000d577:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d57b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d582:	80 f9 19             	cmp    cl,0x19
c000d585:	77 24                	ja     c000d5ab <File::exists()+0x39>
c000d587:	8b 0c 8d 00 81 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7f00]
c000d58e:	85 c9                	test   ecx,ecx
c000d590:	74 19                	je     c000d5ab <File::exists()+0x39>
c000d592:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d598:	85 c9                	test   ecx,ecx
c000d59a:	74 0f                	je     c000d5ab <File::exists()+0x39>
c000d59c:	83 c2 0d             	add    edx,0xd
c000d59f:	50                   	push   eax
c000d5a0:	50                   	push   eax
c000d5a1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d5a3:	52                   	push   edx
c000d5a4:	51                   	push   ecx
c000d5a5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d5a8:	83 c4 10             	add    esp,0x10
c000d5ab:	83 c4 0c             	add    esp,0xc
c000d5ae:	c3                   	ret    
c000d5af:	90                   	nop

c000d5b0 <File::stat(unsigned long long*, bool*)>:
c000d5b0:	56                   	push   esi
c000d5b1:	53                   	push   ebx
c000d5b2:	50                   	push   eax
c000d5b3:	b8 0b 00 00 00       	mov    eax,0xb
c000d5b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d5c0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d5c7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d5cb:	80 f9 19             	cmp    cl,0x19
c000d5ce:	77 3d                	ja     c000d60d <File::stat(unsigned long long*, bool*)+0x5d>
c000d5d0:	8b 0c 8d 00 81 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7f00]
c000d5d7:	85 c9                	test   ecx,ecx
c000d5d9:	74 32                	je     c000d60d <File::stat(unsigned long long*, bool*)+0x5d>
c000d5db:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d5e1:	85 c9                	test   ecx,ecx
c000d5e3:	74 28                	je     c000d60d <File::stat(unsigned long long*, bool*)+0x5d>
c000d5e5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d5e7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d5eb:	74 13                	je     c000d600 <File::stat(unsigned long long*, bool*)+0x50>
c000d5ed:	83 ec 04             	sub    esp,0x4
c000d5f0:	56                   	push   esi
c000d5f1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d5f7:	51                   	push   ecx
c000d5f8:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d5fb:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d5fe:	eb 0a                	jmp    c000d60a <File::stat(unsigned long long*, bool*)+0x5a>
c000d600:	53                   	push   ebx
c000d601:	83 c2 0d             	add    edx,0xd
c000d604:	56                   	push   esi
c000d605:	52                   	push   edx
c000d606:	51                   	push   ecx
c000d607:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d60a:	83 c4 10             	add    esp,0x10
c000d60d:	5a                   	pop    edx
c000d60e:	5b                   	pop    ebx
c000d60f:	5e                   	pop    esi
c000d610:	c3                   	ret    

c000d611 <Fs::setcwd(Process*, char*)>:
c000d611:	55                   	push   ebp
c000d612:	57                   	push   edi
c000d613:	56                   	push   esi
c000d614:	53                   	push   ebx
c000d615:	81 ec 20 02 00 00    	sub    esp,0x220
c000d61b:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d622:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d628:	57                   	push   edi
c000d629:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d630:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d634:	56                   	push   esi
c000d635:	e8 7e fa ff ff       	call   c000d0b8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d63a:	89 34 24             	mov    DWORD PTR [esp],esi
c000d63d:	e8 5e 30 ff ff       	call   c00006a0 <strlen>
c000d642:	83 c4 10             	add    esp,0x10
c000d645:	83 f8 02             	cmp    eax,0x2
c000d648:	77 17                	ja     c000d661 <Fs::setcwd(Process*, char*)+0x50>
c000d64a:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000d64f:	83 e8 41             	sub    eax,0x41
c000d652:	83 f8 19             	cmp    eax,0x19
c000d655:	76 24                	jbe    c000d67b <Fs::setcwd(Process*, char*)+0x6a>
c000d657:	b8 03 00 00 00       	mov    eax,0x3
c000d65c:	e9 e0 00 00 00       	jmp    c000d741 <Fs::setcwd(Process*, char*)+0x130>
c000d661:	83 ec 0c             	sub    esp,0xc
c000d664:	56                   	push   esi
c000d665:	e8 36 30 ff ff       	call   c00006a0 <strlen>
c000d66a:	83 c4 10             	add    esp,0x10
c000d66d:	83 f8 03             	cmp    eax,0x3
c000d670:	75 34                	jne    c000d6a6 <Fs::setcwd(Process*, char*)+0x95>
c000d672:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d677:	75 2d                	jne    c000d6a6 <Fs::setcwd(Process*, char*)+0x95>
c000d679:	eb cf                	jmp    c000d64a <Fs::setcwd(Process*, char*)+0x39>
c000d67b:	8b 14 85 00 81 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7f00]
c000d682:	b8 05 00 00 00       	mov    eax,0x5
c000d687:	85 d2                	test   edx,edx
c000d689:	0f 84 b2 00 00 00    	je     c000d741 <Fs::setcwd(Process*, char*)+0x130>
c000d68f:	b8 06 00 00 00       	mov    eax,0x6
c000d694:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d69b:	0f 85 92 00 00 00    	jne    c000d733 <Fs::setcwd(Process*, char*)+0x122>
c000d6a1:	e9 9b 00 00 00       	jmp    c000d741 <Fs::setcwd(Process*, char*)+0x130>
c000d6a6:	83 ec 0c             	sub    esp,0xc
c000d6a9:	68 14 01 00 00       	push   0x114
c000d6ae:	e8 54 c3 ff ff       	call   c0009a07 <malloc>
c000d6b3:	83 c4 0c             	add    esp,0xc
c000d6b6:	89 c3                	mov    ebx,eax
c000d6b8:	55                   	push   ebp
c000d6b9:	56                   	push   esi
c000d6ba:	50                   	push   eax
c000d6bb:	e8 a2 fb ff ff       	call   c000d262 <File::File(char const*, Process*)>
c000d6c0:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d6c5:	83 c4 0c             	add    esp,0xc
c000d6c8:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d6cc:	50                   	push   eax
c000d6cd:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d6d1:	50                   	push   eax
c000d6d2:	53                   	push   ebx
c000d6d3:	e8 d8 fe ff ff       	call   c000d5b0 <File::stat(unsigned long long*, bool*)>
c000d6d8:	83 c4 10             	add    esp,0x10
c000d6db:	83 f8 02             	cmp    eax,0x2
c000d6de:	74 04                	je     c000d6e4 <Fs::setcwd(Process*, char*)+0xd3>
c000d6e0:	85 c0                	test   eax,eax
c000d6e2:	74 1c                	je     c000d700 <Fs::setcwd(Process*, char*)+0xef>
c000d6e4:	b8 01 00 00 00       	mov    eax,0x1
c000d6e9:	85 db                	test   ebx,ebx
c000d6eb:	74 54                	je     c000d741 <Fs::setcwd(Process*, char*)+0x130>
c000d6ed:	83 ec 0c             	sub    esp,0xc
c000d6f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d6f2:	53                   	push   ebx
c000d6f3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d6f6:	83 c4 10             	add    esp,0x10
c000d6f9:	b8 01 00 00 00       	mov    eax,0x1
c000d6fe:	eb 41                	jmp    c000d741 <Fs::setcwd(Process*, char*)+0x130>
c000d700:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d705:	75 1c                	jne    c000d723 <Fs::setcwd(Process*, char*)+0x112>
c000d707:	b8 02 00 00 00       	mov    eax,0x2
c000d70c:	85 db                	test   ebx,ebx
c000d70e:	74 31                	je     c000d741 <Fs::setcwd(Process*, char*)+0x130>
c000d710:	83 ec 0c             	sub    esp,0xc
c000d713:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d715:	53                   	push   ebx
c000d716:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d719:	83 c4 10             	add    esp,0x10
c000d71c:	b8 02 00 00 00       	mov    eax,0x2
c000d721:	eb 1e                	jmp    c000d741 <Fs::setcwd(Process*, char*)+0x130>
c000d723:	85 db                	test   ebx,ebx
c000d725:	74 0c                	je     c000d733 <Fs::setcwd(Process*, char*)+0x122>
c000d727:	83 ec 0c             	sub    esp,0xc
c000d72a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d72c:	53                   	push   ebx
c000d72d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d730:	83 c4 10             	add    esp,0x10
c000d733:	50                   	push   eax
c000d734:	50                   	push   eax
c000d735:	56                   	push   esi
c000d736:	57                   	push   edi
c000d737:	e8 04 30 ff ff       	call   c0000740 <strcpy>
c000d73c:	83 c4 10             	add    esp,0x10
c000d73f:	31 c0                	xor    eax,eax
c000d741:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d747:	5b                   	pop    ebx
c000d748:	5e                   	pop    esi
c000d749:	5f                   	pop    edi
c000d74a:	5d                   	pop    ebp
c000d74b:	c3                   	ret    

c000d74c <Directory::Directory(char const*, Process*)>:
c000d74c:	83 ec 0c             	sub    esp,0xc
c000d74f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d753:	83 ec 08             	sub    esp,0x8
c000d756:	6a 00                	push   0x0
c000d758:	50                   	push   eax
c000d759:	e8 30 de ff ff       	call   c000b58e <UnixFile::UnixFile(int)>
c000d75e:	83 c4 10             	add    esp,0x10
c000d761:	ba d8 46 02 c0       	mov    edx,0xc00246d8
c000d766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d76a:	89 10                	mov    DWORD PTR [eax],edx
c000d76c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d770:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d77a:	83 c0 0d             	add    eax,0xd
c000d77d:	83 ec 04             	sub    esp,0x4
c000d780:	52                   	push   edx
c000d781:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d785:	50                   	push   eax
c000d786:	e8 2d f9 ff ff       	call   c000d0b8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d78b:	83 c4 10             	add    esp,0x10
c000d78e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d792:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d795:	8d 50 bf             	lea    edx,[eax-0x41]
c000d798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d79c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d7a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7a6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d7aa:	90                   	nop
c000d7ab:	83 c4 0c             	add    esp,0xc
c000d7ae:	c3                   	ret    
c000d7af:	90                   	nop

c000d7b0 <Directory::open()>:
c000d7b0:	53                   	push   ebx
c000d7b1:	b8 0b 00 00 00       	mov    eax,0xb
c000d7b6:	83 ec 08             	sub    esp,0x8
c000d7b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d7bd:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d7c4:	80 fa 19             	cmp    dl,0x19
c000d7c7:	77 3d                	ja     c000d806 <Directory::open()+0x56>
c000d7c9:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c000d7d0:	85 d2                	test   edx,edx
c000d7d2:	74 32                	je     c000d806 <Directory::open()+0x56>
c000d7d4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d7da:	85 d2                	test   edx,edx
c000d7dc:	74 28                	je     c000d806 <Directory::open()+0x56>
c000d7de:	b8 06 00 00 00       	mov    eax,0x6
c000d7e3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d7e7:	75 1d                	jne    c000d806 <Directory::open()+0x56>
c000d7e9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d7ef:	50                   	push   eax
c000d7f0:	8b 02                	mov    eax,DWORD PTR [edx]
c000d7f2:	51                   	push   ecx
c000d7f3:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d7f6:	51                   	push   ecx
c000d7f7:	52                   	push   edx
c000d7f8:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d7fb:	83 c4 10             	add    esp,0x10
c000d7fe:	85 c0                	test   eax,eax
c000d800:	75 04                	jne    c000d806 <Directory::open()+0x56>
c000d802:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d806:	83 c4 08             	add    esp,0x8
c000d809:	5b                   	pop    ebx
c000d80a:	c3                   	ret    
c000d80b:	90                   	nop

c000d80c <Directory::close()>:
c000d80c:	53                   	push   ebx
c000d80d:	b8 0b 00 00 00       	mov    eax,0xb
c000d812:	83 ec 08             	sub    esp,0x8
c000d815:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d819:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d820:	80 fa 19             	cmp    dl,0x19
c000d823:	77 41                	ja     c000d866 <Directory::close()+0x5a>
c000d825:	8b 1c 95 00 81 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7f00]
c000d82c:	85 db                	test   ebx,ebx
c000d82e:	74 36                	je     c000d866 <Directory::close()+0x5a>
c000d830:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d837:	74 2d                	je     c000d866 <Directory::close()+0x5a>
c000d839:	b8 05 00 00 00       	mov    eax,0x5
c000d83e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d842:	74 22                	je     c000d866 <Directory::close()+0x5a>
c000d844:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d848:	8b 04 95 00 81 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7f00]
c000d84f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d855:	53                   	push   ebx
c000d856:	53                   	push   ebx
c000d857:	8b 10                	mov    edx,DWORD PTR [eax]
c000d859:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d85f:	50                   	push   eax
c000d860:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d863:	83 c4 10             	add    esp,0x10
c000d866:	83 c4 08             	add    esp,0x8
c000d869:	5b                   	pop    ebx
c000d86a:	c3                   	ret    
c000d86b:	90                   	nop

c000d86c <Directory::unlink()>:
c000d86c:	83 ec 0c             	sub    esp,0xc
c000d86f:	b8 0b 00 00 00       	mov    eax,0xb
c000d874:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d878:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d87f:	80 f9 19             	cmp    cl,0x19
c000d882:	77 2f                	ja     c000d8b3 <Directory::unlink()+0x47>
c000d884:	8b 0c 8d 00 81 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7f00]
c000d88b:	85 c9                	test   ecx,ecx
c000d88d:	74 24                	je     c000d8b3 <Directory::unlink()+0x47>
c000d88f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d895:	85 c9                	test   ecx,ecx
c000d897:	74 1a                	je     c000d8b3 <Directory::unlink()+0x47>
c000d899:	b8 06 00 00 00       	mov    eax,0x6
c000d89e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d8a2:	75 0f                	jne    c000d8b3 <Directory::unlink()+0x47>
c000d8a4:	83 c2 0d             	add    edx,0xd
c000d8a7:	50                   	push   eax
c000d8a8:	50                   	push   eax
c000d8a9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d8ab:	52                   	push   edx
c000d8ac:	51                   	push   ecx
c000d8ad:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d8b0:	83 c4 10             	add    esp,0x10
c000d8b3:	83 c4 0c             	add    esp,0xc
c000d8b6:	c3                   	ret    
c000d8b7:	90                   	nop

c000d8b8 <Directory::rename(char const*)>:
c000d8b8:	83 ec 0c             	sub    esp,0xc
c000d8bb:	b8 0b 00 00 00       	mov    eax,0xb
c000d8c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8c4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d8cb:	80 f9 19             	cmp    cl,0x19
c000d8ce:	77 32                	ja     c000d902 <Directory::rename(char const*)+0x4a>
c000d8d0:	8b 0c 8d 00 81 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7f00]
c000d8d7:	85 c9                	test   ecx,ecx
c000d8d9:	74 27                	je     c000d902 <Directory::rename(char const*)+0x4a>
c000d8db:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d8e1:	85 c9                	test   ecx,ecx
c000d8e3:	74 1d                	je     c000d902 <Directory::rename(char const*)+0x4a>
c000d8e5:	b8 06 00 00 00       	mov    eax,0x6
c000d8ea:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d8ee:	75 12                	jne    c000d902 <Directory::rename(char const*)+0x4a>
c000d8f0:	83 c2 0d             	add    edx,0xd
c000d8f3:	50                   	push   eax
c000d8f4:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d8f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d8fa:	52                   	push   edx
c000d8fb:	51                   	push   ecx
c000d8fc:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d8ff:	83 c4 10             	add    esp,0x10
c000d902:	83 c4 0c             	add    esp,0xc
c000d905:	c3                   	ret    

c000d906 <Directory::exists()>:
c000d906:	83 ec 0c             	sub    esp,0xc
c000d909:	31 c0                	xor    eax,eax
c000d90b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d90f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d916:	80 f9 19             	cmp    cl,0x19
c000d919:	77 24                	ja     c000d93f <Directory::exists()+0x39>
c000d91b:	8b 0c 8d 00 81 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7f00]
c000d922:	85 c9                	test   ecx,ecx
c000d924:	74 19                	je     c000d93f <Directory::exists()+0x39>
c000d926:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d92c:	85 c9                	test   ecx,ecx
c000d92e:	74 0f                	je     c000d93f <Directory::exists()+0x39>
c000d930:	83 c2 0d             	add    edx,0xd
c000d933:	50                   	push   eax
c000d934:	50                   	push   eax
c000d935:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d937:	52                   	push   edx
c000d938:	51                   	push   ecx
c000d939:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d93c:	83 c4 10             	add    esp,0x10
c000d93f:	83 c4 0c             	add    esp,0xc
c000d942:	c3                   	ret    
c000d943:	90                   	nop

c000d944 <Directory::read(dirent*)>:
c000d944:	83 ec 1c             	sub    esp,0x1c
c000d947:	b8 0b 00 00 00       	mov    eax,0xb
c000d94c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d950:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d957:	80 fa 19             	cmp    dl,0x19
c000d95a:	77 30                	ja     c000d98c <Directory::read(dirent*)+0x48>
c000d95c:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c000d963:	85 d2                	test   edx,edx
c000d965:	74 25                	je     c000d98c <Directory::read(dirent*)+0x48>
c000d967:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d96e:	74 1c                	je     c000d98c <Directory::read(dirent*)+0x48>
c000d970:	83 ec 0c             	sub    esp,0xc
c000d973:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d975:	8d 54 24 18          	lea    edx,[esp+0x18]
c000d979:	52                   	push   edx
c000d97a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d97e:	6a 00                	push   0x0
c000d980:	68 10 01 00 00       	push   0x110
c000d985:	51                   	push   ecx
c000d986:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d989:	83 c4 20             	add    esp,0x20
c000d98c:	83 c4 1c             	add    esp,0x1c
c000d98f:	c3                   	ret    

c000d990 <Directory::create()>:
c000d990:	83 ec 0c             	sub    esp,0xc
c000d993:	b8 0b 00 00 00       	mov    eax,0xb
c000d998:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d99c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d9a3:	80 f9 19             	cmp    cl,0x19
c000d9a6:	77 2f                	ja     c000d9d7 <Directory::create()+0x47>
c000d9a8:	8b 0c 8d 00 81 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7f00]
c000d9af:	85 c9                	test   ecx,ecx
c000d9b1:	74 24                	je     c000d9d7 <Directory::create()+0x47>
c000d9b3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d9b9:	85 c9                	test   ecx,ecx
c000d9bb:	74 1a                	je     c000d9d7 <Directory::create()+0x47>
c000d9bd:	b8 06 00 00 00       	mov    eax,0x6
c000d9c2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d9c6:	75 0f                	jne    c000d9d7 <Directory::create()+0x47>
c000d9c8:	83 c2 0d             	add    edx,0xd
c000d9cb:	50                   	push   eax
c000d9cc:	50                   	push   eax
c000d9cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d9cf:	52                   	push   edx
c000d9d0:	51                   	push   ecx
c000d9d1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000d9d4:	83 c4 10             	add    esp,0x10
c000d9d7:	83 c4 0c             	add    esp,0xc
c000d9da:	c3                   	ret    
c000d9db:	90                   	nop

c000d9dc <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000d9dc:	b8 0a 00 00 00       	mov    eax,0xa
c000d9e1:	c3                   	ret    
c000d9e2:	66 90                	xchg   ax,ax

c000d9e4 <Bus::Bus(char const*)>:
c000d9e4:	83 ec 0c             	sub    esp,0xc
c000d9e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9eb:	83 ec 08             	sub    esp,0x8
c000d9ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9f2:	50                   	push   eax
c000d9f3:	e8 8a 09 00 00       	call   c000e382 <Device::Device(char const*)>
c000d9f8:	83 c4 10             	add    esp,0x10
c000d9fb:	ba f4 46 02 c0       	mov    edx,0xc00246f4
c000da00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da04:	89 10                	mov    DWORD PTR [eax],edx
c000da06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da0a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000da14:	90                   	nop
c000da15:	83 c4 0c             	add    esp,0xc
c000da18:	c3                   	ret    
c000da19:	90                   	nop
c000da1a:	66 90                	xchg   ax,ax

c000da1c <Bus::~Bus()>:
c000da1c:	83 ec 0c             	sub    esp,0xc
c000da1f:	ba f4 46 02 c0       	mov    edx,0xc00246f4
c000da24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da28:	89 10                	mov    DWORD PTR [eax],edx
c000da2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da2e:	83 ec 0c             	sub    esp,0xc
c000da31:	50                   	push   eax
c000da32:	e8 15 06 00 00       	call   c000e04c <Device::~Device()>
c000da37:	83 c4 10             	add    esp,0x10
c000da3a:	90                   	nop
c000da3b:	83 c4 0c             	add    esp,0xc
c000da3e:	c3                   	ret    
c000da3f:	90                   	nop

c000da40 <Bus::~Bus()>:
c000da40:	83 ec 0c             	sub    esp,0xc
c000da43:	83 ec 0c             	sub    esp,0xc
c000da46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da4a:	e8 cd ff ff ff       	call   c000da1c <Bus::~Bus()>
c000da4f:	83 c4 10             	add    esp,0x10
c000da52:	83 ec 08             	sub    esp,0x8
c000da55:	68 58 01 00 00       	push   0x158
c000da5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da5e:	e8 b3 f1 ff ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c000da63:	83 c4 10             	add    esp,0x10
c000da66:	83 c4 0c             	add    esp,0xc
c000da69:	c3                   	ret    
c000da6a:	66 90                	xchg   ax,ax

c000da6c <Buzzer::Buzzer(char const*)>:
c000da6c:	83 ec 0c             	sub    esp,0xc
c000da6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da73:	83 ec 08             	sub    esp,0x8
c000da76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da7a:	50                   	push   eax
c000da7b:	e8 02 09 00 00       	call   c000e382 <Device::Device(char const*)>
c000da80:	83 c4 10             	add    esp,0x10
c000da83:	ba 20 47 02 c0       	mov    edx,0xc0024720
c000da88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da8c:	89 10                	mov    DWORD PTR [eax],edx
c000da8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da92:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000da9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daa0:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000daaa:	90                   	nop
c000daab:	83 c4 0c             	add    esp,0xc
c000daae:	c3                   	ret    
c000daaf:	90                   	nop

c000dab0 <Buzzer::~Buzzer()>:
c000dab0:	83 ec 0c             	sub    esp,0xc
c000dab3:	ba 20 47 02 c0       	mov    edx,0xc0024720
c000dab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dabc:	89 10                	mov    DWORD PTR [eax],edx
c000dabe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dac2:	83 ec 0c             	sub    esp,0xc
c000dac5:	50                   	push   eax
c000dac6:	e8 81 05 00 00       	call   c000e04c <Device::~Device()>
c000dacb:	83 c4 10             	add    esp,0x10
c000dace:	90                   	nop
c000dacf:	83 c4 0c             	add    esp,0xc
c000dad2:	c3                   	ret    
c000dad3:	90                   	nop

c000dad4 <Buzzer::~Buzzer()>:
c000dad4:	83 ec 0c             	sub    esp,0xc
c000dad7:	83 ec 0c             	sub    esp,0xc
c000dada:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dade:	e8 cd ff ff ff       	call   c000dab0 <Buzzer::~Buzzer()>
c000dae3:	83 c4 10             	add    esp,0x10
c000dae6:	83 ec 08             	sub    esp,0x8
c000dae9:	68 5c 01 00 00       	push   0x15c
c000daee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daf2:	e8 1f f1 ff ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c000daf7:	83 c4 10             	add    esp,0x10
c000dafa:	83 c4 0c             	add    esp,0xc
c000dafd:	c3                   	ret    

c000dafe <Buzzer::stop()>:
c000dafe:	83 ec 14             	sub    esp,0x14
c000db01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000db05:	8b 10                	mov    edx,DWORD PTR [eax]
c000db07:	6a 00                	push   0x0
c000db09:	50                   	push   eax
c000db0a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000db0d:	83 c4 1c             	add    esp,0x1c
c000db10:	c3                   	ret    

c000db11 <beepThread(void*)>:
c000db11:	53                   	push   ebx
c000db12:	83 ec 08             	sub    esp,0x8
c000db15:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c000db1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db1e:	48                   	dec    eax
c000db1f:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c000db24:	75 02                	jne    c000db28 <beepThread(void*)+0x17>
c000db26:	fb                   	sti    
c000db27:	90                   	nop
c000db28:	83 ec 0c             	sub    esp,0xc
c000db2b:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000db32:	50                   	push   eax
c000db33:	e8 34 ac 00 00       	call   c001876c <milliTenthSleep(unsigned int)>
c000db38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000db3b:	e8 be ff ff ff       	call   c000dafe <Buzzer::stop()>
c000db40:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000db48:	83 c4 18             	add    esp,0x18
c000db4b:	5b                   	pop    ebx
c000db4c:	e9 1b ab 00 00       	jmp    c001866c <blockTask(TaskState)>
c000db51:	90                   	nop

c000db52 <Buzzer::beep(int, int, bool)>:
c000db52:	57                   	push   edi
c000db53:	56                   	push   esi
c000db54:	53                   	push   ebx
c000db55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db59:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000db5d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000db61:	50                   	push   eax
c000db62:	50                   	push   eax
c000db63:	8b 03                	mov    eax,DWORD PTR [ebx]
c000db65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db69:	53                   	push   ebx
c000db6a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000db6d:	83 c4 10             	add    esp,0x10
c000db70:	89 f8                	mov    eax,edi
c000db72:	84 c0                	test   al,al
c000db74:	74 1e                	je     c000db94 <Buzzer::beep(int, int, bool)+0x42>
c000db76:	83 ec 0c             	sub    esp,0xc
c000db79:	6b f6 0a             	imul   esi,esi,0xa
c000db7c:	56                   	push   esi
c000db7d:	e8 ea ab 00 00       	call   c001876c <milliTenthSleep(unsigned int)>
c000db82:	83 c4 10             	add    esp,0x10
c000db85:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000db89:	5b                   	pop    ebx
c000db8a:	5e                   	pop    esi
c000db8b:	5f                   	pop    edi
c000db8c:	e9 6d ff ff ff       	jmp    c000dafe <Buzzer::stop()>
c000db91:	8d 76 00             	lea    esi,[esi+0x0]
c000db94:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000db9a:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000db9f:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000dba7:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dbab:	c7 44 24 14 11 db 00 c0 	mov    DWORD PTR [esp+0x14],0xc000db11
c000dbb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbb7:	5b                   	pop    ebx
c000dbb8:	5e                   	pop    esi
c000dbb9:	5f                   	pop    edi
c000dbba:	e9 99 a6 00 00       	jmp    c0018258 <Process::createThread(void (*)(void*), void*, int)>
c000dbbf:	90                   	nop

c000dbc0 <User::loadClockSettings(int)>:
c000dbc0:	53                   	push   ebx
c000dbc1:	83 ec 14             	sub    esp,0x14
c000dbc4:	68 14 01 00 00       	push   0x114
c000dbc9:	e8 39 be ff ff       	call   c0009a07 <malloc>
c000dbce:	83 c4 0c             	add    esp,0xc
c000dbd1:	89 c3                	mov    ebx,eax
c000dbd3:	ff 35 30 90 02 c0    	push   DWORD PTR ds:0xc0029030
c000dbd9:	68 48 47 02 c0       	push   0xc0024748
c000dbde:	50                   	push   eax
c000dbdf:	e8 7e f6 ff ff       	call   c000d262 <File::File(char const*, Process*)>
c000dbe4:	58                   	pop    eax
c000dbe5:	5a                   	pop    edx
c000dbe6:	6a 01                	push   0x1
c000dbe8:	53                   	push   ebx
c000dbe9:	e8 16 f7 ff ff       	call   c000d304 <File::open(FileOpenMode)>
c000dbee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dbf1:	e8 6c f7 ff ff       	call   c000d362 <File::close()>
c000dbf6:	83 c4 10             	add    esp,0x10
c000dbf9:	85 db                	test   ebx,ebx
c000dbfb:	74 0f                	je     c000dc0c <User::loadClockSettings(int)+0x4c>
c000dbfd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dbff:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000dc03:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000dc06:	83 c4 08             	add    esp,0x8
c000dc09:	5b                   	pop    ebx
c000dc0a:	ff e0                	jmp    eax
c000dc0c:	83 c4 08             	add    esp,0x8
c000dc0f:	5b                   	pop    ebx
c000dc10:	c3                   	ret    
c000dc11:	90                   	nop

c000dc12 <Clock::Clock(char const*)>:
c000dc12:	83 ec 0c             	sub    esp,0xc
c000dc15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc19:	83 ec 08             	sub    esp,0x8
c000dc1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc20:	50                   	push   eax
c000dc21:	e8 5c 07 00 00       	call   c000e382 <Device::Device(char const*)>
c000dc26:	83 c4 10             	add    esp,0x10
c000dc29:	ba 70 47 02 c0       	mov    edx,0xc0024770
c000dc2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc32:	89 10                	mov    DWORD PTR [eax],edx
c000dc34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc38:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000dc42:	90                   	nop
c000dc43:	83 c4 0c             	add    esp,0xc
c000dc46:	c3                   	ret    
c000dc47:	90                   	nop

c000dc48 <Clock::~Clock()>:
c000dc48:	83 ec 0c             	sub    esp,0xc
c000dc4b:	ba 70 47 02 c0       	mov    edx,0xc0024770
c000dc50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc54:	89 10                	mov    DWORD PTR [eax],edx
c000dc56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc5a:	83 ec 0c             	sub    esp,0xc
c000dc5d:	50                   	push   eax
c000dc5e:	e8 e9 03 00 00       	call   c000e04c <Device::~Device()>
c000dc63:	83 c4 10             	add    esp,0x10
c000dc66:	90                   	nop
c000dc67:	83 c4 0c             	add    esp,0xc
c000dc6a:	c3                   	ret    
c000dc6b:	90                   	nop

c000dc6c <Clock::~Clock()>:
c000dc6c:	83 ec 0c             	sub    esp,0xc
c000dc6f:	83 ec 0c             	sub    esp,0xc
c000dc72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc76:	e8 cd ff ff ff       	call   c000dc48 <Clock::~Clock()>
c000dc7b:	83 c4 10             	add    esp,0x10
c000dc7e:	83 ec 08             	sub    esp,0x8
c000dc81:	68 58 01 00 00       	push   0x158
c000dc86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc8a:	e8 87 ef ff ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c000dc8f:	83 c4 10             	add    esp,0x10
c000dc92:	83 c4 0c             	add    esp,0xc
c000dc95:	c3                   	ret    

c000dc96 <Clock::timeInSecondsLocal()>:
c000dc96:	53                   	push   ebx
c000dc97:	83 ec 14             	sub    esp,0x14
c000dc9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dc9e:	8b 10                	mov    edx,DWORD PTR [eax]
c000dca0:	50                   	push   eax
c000dca1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dca4:	0f b6 0d 7c 7c 02 c0 	movzx  ecx,BYTE PTR ds:0xc0027c7c
c000dcab:	03 0d 80 7c 02 c0    	add    ecx,DWORD PTR ds:0xc0027c80
c000dcb1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dcb7:	89 cb                	mov    ebx,ecx
c000dcb9:	c1 fb 1f             	sar    ebx,0x1f
c000dcbc:	01 c8                	add    eax,ecx
c000dcbe:	11 da                	adc    edx,ebx
c000dcc0:	83 c4 10             	add    esp,0x10
c000dcc3:	31 c9                	xor    ecx,ecx
c000dcc5:	80 3d 7d 7c 02 c0 00 	cmp    BYTE PTR ds:0xc0027c7d,0x0
c000dccc:	74 05                	je     c000dcd3 <Clock::timeInSecondsLocal()+0x3d>
c000dcce:	b9 08 07 00 00       	mov    ecx,0x708
c000dcd3:	31 db                	xor    ebx,ebx
c000dcd5:	01 c8                	add    eax,ecx
c000dcd7:	11 da                	adc    edx,ebx
c000dcd9:	83 c4 08             	add    esp,0x8
c000dcdc:	5b                   	pop    ebx
c000dcdd:	c3                   	ret    

c000dcde <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000dcde:	57                   	push   edi
c000dcdf:	56                   	push   esi
c000dce0:	53                   	push   ebx
c000dce1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dce5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000dce9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dceb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000dcef:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000dcf2:	0f b6 05 7c 7c 02 c0 	movzx  eax,BYTE PTR ds:0xc0027c7c
c000dcf9:	03 05 80 7c 02 c0    	add    eax,DWORD PTR ds:0xc0027c80
c000dcff:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000dd05:	99                   	cdq    
c000dd06:	29 c6                	sub    esi,eax
c000dd08:	19 d7                	sbb    edi,edx
c000dd0a:	89 f0                	mov    eax,esi
c000dd0c:	89 fa                	mov    edx,edi
c000dd0e:	31 f6                	xor    esi,esi
c000dd10:	80 3d 7d 7c 02 c0 00 	cmp    BYTE PTR ds:0xc0027c7d,0x0
c000dd17:	74 05                	je     c000dd1e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000dd19:	be 08 07 00 00       	mov    esi,0x708
c000dd1e:	31 ff                	xor    edi,edi
c000dd20:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000dd24:	29 f0                	sub    eax,esi
c000dd26:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd2a:	19 fa                	sbb    edx,edi
c000dd2c:	89 d8                	mov    eax,ebx
c000dd2e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd32:	5b                   	pop    ebx
c000dd33:	5e                   	pop    esi
c000dd34:	5f                   	pop    edi
c000dd35:	ff e0                	jmp    eax

c000dd37 <datetimeToSeconds(datetime_t)>:
c000dd37:	55                   	push   ebp
c000dd38:	57                   	push   edi
c000dd39:	56                   	push   esi
c000dd3a:	53                   	push   ebx
c000dd3b:	83 ec 14             	sub    esp,0x14
c000dd3e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dd42:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000dd46:	89 d3                	mov    ebx,edx
c000dd48:	0f b6 c6             	movzx  eax,dh
c000dd4b:	c1 eb 10             	shr    ebx,0x10
c000dd4e:	48                   	dec    eax
c000dd4f:	66 81 eb 6c 07       	sub    bx,0x76c
c000dd54:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000dd58:	0f b6 f5             	movzx  esi,ch
c000dd5b:	89 cf                	mov    edi,ecx
c000dd5d:	6b f6 3c             	imul   esi,esi,0x3c
c000dd60:	c1 ef 10             	shr    edi,0x10
c000dd63:	0f b6 c9             	movzx  ecx,cl
c000dd66:	89 f8                	mov    eax,edi
c000dd68:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dd6e:	0f b6 f8             	movzx  edi,al
c000dd71:	0f b6 d2             	movzx  edx,dl
c000dd74:	01 fe                	add    esi,edi
c000dd76:	01 f1                	add    ecx,esi
c000dd78:	0f b7 f3             	movzx  esi,bx
c000dd7b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000dd7f:	c1 f9 1f             	sar    ecx,0x1f
c000dd82:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000dd87:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dd8b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000dd90:	8b 0c 8d c0 47 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb840]
c000dd97:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000dd9b:	76 29                	jbe    c000ddc6 <datetimeToSeconds(datetime_t)+0x8f>
c000dd9d:	f6 c3 03             	test   bl,0x3
c000dda0:	75 24                	jne    c000ddc6 <datetimeToSeconds(datetime_t)+0x8f>
c000dda2:	31 d2                	xor    edx,edx
c000dda4:	bf 64 00 00 00       	mov    edi,0x64
c000dda9:	89 d8                	mov    eax,ebx
c000ddab:	66 f7 f7             	div    di
c000ddae:	66 85 d2             	test   dx,dx
c000ddb1:	75 12                	jne    c000ddc5 <datetimeToSeconds(datetime_t)+0x8e>
c000ddb3:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000ddb9:	bf 90 01 00 00       	mov    edi,0x190
c000ddbe:	99                   	cdq    
c000ddbf:	f7 ff                	idiv   edi
c000ddc1:	85 d2                	test   edx,edx
c000ddc3:	75 01                	jne    c000ddc6 <datetimeToSeconds(datetime_t)+0x8f>
c000ddc5:	41                   	inc    ecx
c000ddc6:	66 83 fb 46          	cmp    bx,0x46
c000ddca:	76 45                	jbe    c000de11 <datetimeToSeconds(datetime_t)+0xda>
c000ddcc:	bb 46 00 00 00       	mov    ebx,0x46
c000ddd1:	bf 64 00 00 00       	mov    edi,0x64
c000ddd6:	bd 90 01 00 00       	mov    ebp,0x190
c000dddb:	b8 6d 01 00 00       	mov    eax,0x16d
c000dde0:	f6 c3 03             	test   bl,0x3
c000dde3:	75 23                	jne    c000de08 <datetimeToSeconds(datetime_t)+0xd1>
c000dde5:	89 d8                	mov    eax,ebx
c000dde7:	99                   	cdq    
c000dde8:	f7 ff                	idiv   edi
c000ddea:	b8 6e 01 00 00       	mov    eax,0x16e
c000ddef:	85 d2                	test   edx,edx
c000ddf1:	75 15                	jne    c000de08 <datetimeToSeconds(datetime_t)+0xd1>
c000ddf3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000ddf9:	99                   	cdq    
c000ddfa:	f7 fd                	idiv   ebp
c000ddfc:	83 fa 01             	cmp    edx,0x1
c000ddff:	19 c0                	sbb    eax,eax
c000de01:	f7 d0                	not    eax
c000de03:	05 6e 01 00 00       	add    eax,0x16e
c000de08:	01 c1                	add    ecx,eax
c000de0a:	43                   	inc    ebx
c000de0b:	39 f3                	cmp    ebx,esi
c000de0d:	7c cc                	jl     c000dddb <datetimeToSeconds(datetime_t)+0xa4>
c000de0f:	eb 35                	jmp    c000de46 <datetimeToSeconds(datetime_t)+0x10f>
c000de11:	74 33                	je     c000de46 <datetimeToSeconds(datetime_t)+0x10f>
c000de13:	b8 45 00 00 00       	mov    eax,0x45
c000de18:	89 c2                	mov    edx,eax
c000de1a:	83 e2 03             	and    edx,0x3
c000de1d:	39 f0                	cmp    eax,esi
c000de1f:	7e 0f                	jle    c000de30 <datetimeToSeconds(datetime_t)+0xf9>
c000de21:	83 fa 01             	cmp    edx,0x1
c000de24:	19 d2                	sbb    edx,edx
c000de26:	48                   	dec    eax
c000de27:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000de2e:	eb e8                	jmp    c000de18 <datetimeToSeconds(datetime_t)+0xe1>
c000de30:	b8 6d 01 00 00       	mov    eax,0x16d
c000de35:	85 d2                	test   edx,edx
c000de37:	75 0b                	jne    c000de44 <datetimeToSeconds(datetime_t)+0x10d>
c000de39:	66 83 fb 01          	cmp    bx,0x1
c000de3d:	19 c0                	sbb    eax,eax
c000de3f:	05 6e 01 00 00       	add    eax,0x16e
c000de44:	29 c1                	sub    ecx,eax
c000de46:	b8 80 51 01 00       	mov    eax,0x15180
c000de4b:	f7 e9                	imul   ecx
c000de4d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000de51:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000de55:	83 c4 14             	add    esp,0x14
c000de58:	5b                   	pop    ebx
c000de59:	5e                   	pop    esi
c000de5a:	5f                   	pop    edi
c000de5b:	5d                   	pop    ebp
c000de5c:	c3                   	ret    
c000de5d:	90                   	nop

c000de5e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000de5e:	57                   	push   edi
c000de5f:	56                   	push   esi
c000de60:	53                   	push   ebx
c000de61:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de65:	8b 06                	mov    eax,DWORD PTR [esi]
c000de67:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000de6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de72:	e8 c0 fe ff ff       	call   c000dd37 <datetimeToSeconds(datetime_t)>
c000de77:	59                   	pop    ecx
c000de78:	0f b6 0d 7c 7c 02 c0 	movzx  ecx,BYTE PTR ds:0xc0027c7c
c000de7f:	5b                   	pop    ebx
c000de80:	03 0d 80 7c 02 c0    	add    ecx,DWORD PTR ds:0xc0027c80
c000de86:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000de8c:	89 cb                	mov    ebx,ecx
c000de8e:	c1 fb 1f             	sar    ebx,0x1f
c000de91:	29 c8                	sub    eax,ecx
c000de93:	19 da                	sbb    edx,ebx
c000de95:	31 c9                	xor    ecx,ecx
c000de97:	80 3d 7d 7c 02 c0 00 	cmp    BYTE PTR ds:0xc0027c7d,0x0
c000de9e:	74 05                	je     c000dea5 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000dea0:	b9 08 07 00 00       	mov    ecx,0x708
c000dea5:	31 db                	xor    ebx,ebx
c000dea7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000deab:	29 c8                	sub    eax,ecx
c000dead:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000deb1:	19 da                	sbb    edx,ebx
c000deb3:	89 f8                	mov    eax,edi
c000deb5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000deb9:	5b                   	pop    ebx
c000deba:	5e                   	pop    esi
c000debb:	5f                   	pop    edi
c000debc:	ff e0                	jmp    eax

c000debe <secondsToDatetime(unsigned long long)>:
c000debe:	55                   	push   ebp
c000debf:	57                   	push   edi
c000dec0:	56                   	push   esi
c000dec1:	53                   	push   ebx
c000dec2:	83 ec 1c             	sub    esp,0x1c
c000dec5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dec9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000decd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000ded1:	6a 00                	push   0x0
c000ded3:	68 80 51 01 00       	push   0x15180
c000ded8:	55                   	push   ebp
c000ded9:	57                   	push   edi
c000deda:	e8 35 45 01 00       	call   c0022414 <__udivdi3>
c000dedf:	83 c4 10             	add    esp,0x10
c000dee2:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000dee8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000deec:	6a 00                	push   0x0
c000deee:	68 80 51 01 00       	push   0x15180
c000def3:	55                   	push   ebp
c000def4:	57                   	push   edi
c000def5:	bf 10 0e 00 00       	mov    edi,0xe10
c000defa:	e8 15 46 01 00       	call   c0022514 <__umoddi3>
c000deff:	83 c4 10             	add    esp,0x10
c000df02:	99                   	cdq    
c000df03:	f7 ff                	idiv   edi
c000df05:	bf 3c 00 00 00       	mov    edi,0x3c
c000df0a:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000df0d:	89 d0                	mov    eax,edx
c000df0f:	99                   	cdq    
c000df10:	f7 ff                	idiv   edi
c000df12:	85 db                	test   ebx,ebx
c000df14:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000df17:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000df1a:	79 11                	jns    c000df2d <secondsToDatetime(unsigned long long)+0x6f>
c000df1c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000df20:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000df26:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000df2b:	eb 07                	jmp    c000df34 <secondsToDatetime(unsigned long long)+0x76>
c000df2d:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000df32:	89 d8                	mov    eax,ebx
c000df34:	bf b4 05 00 00       	mov    edi,0x5b4
c000df39:	99                   	cdq    
c000df3a:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000df3f:	f7 f9                	idiv   ecx
c000df41:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000df46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df4a:	31 d2                	xor    edx,edx
c000df4c:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000df54:	01 c3                	add    ebx,eax
c000df56:	89 d8                	mov    eax,ebx
c000df58:	f7 f1                	div    ecx
c000df5a:	31 d2                	xor    edx,edx
c000df5c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000df5f:	89 d8                	mov    eax,ebx
c000df61:	f7 f7                	div    edi
c000df63:	31 d2                	xor    edx,edx
c000df65:	29 c1                	sub    ecx,eax
c000df67:	89 d8                	mov    eax,ebx
c000df69:	f7 f5                	div    ebp
c000df6b:	bd 6d 01 00 00       	mov    ebp,0x16d
c000df70:	29 c1                	sub    ecx,eax
c000df72:	31 d2                	xor    edx,edx
c000df74:	89 c8                	mov    eax,ecx
c000df76:	f7 f5                	div    ebp
c000df78:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000df7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000df81:	31 d2                	xor    edx,edx
c000df83:	89 c8                	mov    eax,ecx
c000df85:	f7 f5                	div    ebp
c000df87:	31 d2                	xor    edx,edx
c000df89:	01 c3                	add    ebx,eax
c000df8b:	89 c8                	mov    eax,ecx
c000df8d:	f7 f7                	div    edi
c000df8f:	bf 99 00 00 00       	mov    edi,0x99
c000df94:	29 c3                	sub    ebx,eax
c000df96:	31 d2                	xor    edx,edx
c000df98:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000dfa0:	29 c3                	sub    ebx,eax
c000dfa2:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000dfa5:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000dfa8:	bb 05 00 00 00       	mov    ebx,0x5
c000dfad:	83 c1 02             	add    ecx,0x2
c000dfb0:	89 c8                	mov    eax,ecx
c000dfb2:	f7 f7                	div    edi
c000dfb4:	31 d2                	xor    edx,edx
c000dfb6:	89 c7                	mov    edi,eax
c000dfb8:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000dfbe:	83 c0 02             	add    eax,0x2
c000dfc1:	f7 f3                	div    ebx
c000dfc3:	89 eb                	mov    ebx,ebp
c000dfc5:	29 c3                	sub    ebx,eax
c000dfc7:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000dfcd:	88 1e                	mov    BYTE PTR [esi],bl
c000dfcf:	19 c0                	sbb    eax,eax
c000dfd1:	31 d2                	xor    edx,edx
c000dfd3:	83 e0 0c             	and    eax,0xc
c000dfd6:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000dfda:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000dfe2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dfe6:	83 f9 01             	cmp    ecx,0x1
c000dfe9:	0f 96 c2             	setbe  dl
c000dfec:	41                   	inc    ecx
c000dfed:	01 d0                	add    eax,edx
c000dfef:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000dff2:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000dff6:	83 c4 1c             	add    esp,0x1c
c000dff9:	89 f0                	mov    eax,esi
c000dffb:	5b                   	pop    ebx
c000dffc:	5e                   	pop    esi
c000dffd:	5f                   	pop    edi
c000dffe:	5d                   	pop    ebp
c000dfff:	c2 04 00             	ret    0x4

c000e002 <Clock::timeInDatetimeLocal()>:
c000e002:	53                   	push   ebx
c000e003:	83 ec 14             	sub    esp,0x14
c000e006:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e00a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e00e:	e8 83 fc ff ff       	call   c000dc96 <Clock::timeInSecondsLocal()>
c000e013:	83 c4 0c             	add    esp,0xc
c000e016:	52                   	push   edx
c000e017:	50                   	push   eax
c000e018:	53                   	push   ebx
c000e019:	e8 a0 fe ff ff       	call   c000debe <secondsToDatetime(unsigned long long)>
c000e01e:	89 d8                	mov    eax,ebx
c000e020:	83 c4 14             	add    esp,0x14
c000e023:	5b                   	pop    ebx
c000e024:	c2 04 00             	ret    0x4
c000e027:	90                   	nop

c000e028 <Device::hibernate()>:
c000e028:	c3                   	ret    
c000e029:	90                   	nop

c000e02a <Device::wake()>:
c000e02a:	c3                   	ret    
c000e02b:	90                   	nop

c000e02c <Device::detect()>:
c000e02c:	c3                   	ret    
c000e02d:	90                   	nop

c000e02e <Device::disableLegacy()>:
c000e02e:	c3                   	ret    
c000e02f:	90                   	nop

c000e030 <Device::powerSaving(PowerSavingLevel)>:
c000e030:	c3                   	ret    
c000e031:	90                   	nop

c000e032 <DriverlessDevice::close(int, int, void*)>:
c000e032:	31 c0                	xor    eax,eax
c000e034:	c3                   	ret    
c000e035:	90                   	nop

c000e036 <DriverlessDevice::detect()>:
c000e036:	c3                   	ret    
c000e037:	90                   	nop

c000e038 <DriverlessDevice::open(int, int, void*)>:
c000e038:	83 ec 18             	sub    esp,0x18
c000e03b:	68 f0 47 02 c0       	push   0xc00247f0
c000e040:	e8 5e 68 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c000e045:	83 c8 ff             	or     eax,0xffffffff
c000e048:	83 c4 1c             	add    esp,0x1c
c000e04b:	c3                   	ret    

c000e04c <Device::~Device()>:
c000e04c:	ba 50 48 02 c0       	mov    edx,0xc0024850
c000e051:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e055:	89 10                	mov    DWORD PTR [eax],edx
c000e057:	90                   	nop
c000e058:	c3                   	ret    
c000e059:	90                   	nop

c000e05a <Device::~Device()>:
c000e05a:	83 ec 0c             	sub    esp,0xc
c000e05d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e061:	e8 e6 ff ff ff       	call   c000e04c <Device::~Device()>
c000e066:	83 c4 04             	add    esp,0x4
c000e069:	83 ec 08             	sub    esp,0x8
c000e06c:	68 58 01 00 00       	push   0x158
c000e071:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e075:	e8 9c eb ff ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c000e07a:	83 c4 10             	add    esp,0x10
c000e07d:	83 c4 0c             	add    esp,0xc
c000e080:	c3                   	ret    
c000e081:	90                   	nop

c000e082 <Device::findAndLoadDriver()>:
c000e082:	c7 44 24 04 0e 48 02 c0 	mov    DWORD PTR [esp+0x4],0xc002480e
c000e08a:	e9 68 ec ff ff       	jmp    c000ccf7 <Dbg::kprintf(char const*, ...)>
c000e08f:	90                   	nop

c000e090 <Device::preOpenPCI(PCIDeviceInfo)>:
c000e090:	57                   	push   edi
c000e091:	b9 09 00 00 00       	mov    ecx,0x9
c000e096:	56                   	push   esi
c000e097:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e09b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e09f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000e0a9:	81 c7 18 01 00 00    	add    edi,0x118
c000e0af:	fc                   	cld    
c000e0b0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e0b2:	5e                   	pop    esi
c000e0b3:	5f                   	pop    edi
c000e0b4:	c3                   	ret    
c000e0b5:	90                   	nop

c000e0b6 <Device::preOpenACPI(void*, char*, char*)>:
c000e0b6:	57                   	push   edi
c000e0b7:	b9 1e 00 00 00       	mov    ecx,0x1e
c000e0bc:	56                   	push   esi
c000e0bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e0c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e0c5:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000e0cf:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000e0d5:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000e0db:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e0df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e0e1:	b9 0e 00 00 00       	mov    ecx,0xe
c000e0e6:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000e0ec:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e0f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e0f2:	5e                   	pop    esi
c000e0f3:	5f                   	pop    edi
c000e0f4:	c3                   	ret    
c000e0f5:	90                   	nop

c000e0f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e0f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0fa:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e0ff:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e106:	75 0b                	jne    c000e113 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000e108:	8b 00                	mov    eax,DWORD PTR [eax]
c000e10a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e10e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e111:	eb 1e                	jmp    c000e131 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000e113:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c000e118:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e11e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e124:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e126:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e12a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e12e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000e131:	ff e0                	jmp    eax
c000e133:	90                   	nop

c000e134 <Device::getParent()>:
c000e134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e138:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e13e:	c3                   	ret    
c000e13f:	90                   	nop

c000e140 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e144:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e149:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e150:	75 0b                	jne    c000e15d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e152:	8b 00                	mov    eax,DWORD PTR [eax]
c000e154:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e158:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e15b:	eb 1e                	jmp    c000e17b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000e15d:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c000e162:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e168:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e16e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e170:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e174:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e178:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000e17b:	ff e0                	jmp    eax
c000e17d:	90                   	nop

c000e17e <Device::addChild(Device*)>:
c000e17e:	53                   	push   ebx
c000e17f:	83 ec 08             	sub    esp,0x8
c000e182:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e186:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e18a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e190:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e196:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e198:	85 d2                	test   edx,edx
c000e19a:	74 04                	je     c000e1a0 <Device::addChild(Device*)+0x22>
c000e19c:	89 d3                	mov    ebx,edx
c000e19e:	eb f6                	jmp    c000e196 <Device::addChild(Device*)+0x18>
c000e1a0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e1a3:	83 ec 0c             	sub    esp,0xc
c000e1a6:	6a 08                	push   0x8
c000e1a8:	e8 5a b8 ff ff       	call   c0009a07 <malloc>
c000e1ad:	89 03                	mov    DWORD PTR [ebx],eax
c000e1af:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e1b5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e1bc:	83 c4 18             	add    esp,0x18
c000e1bf:	5b                   	pop    ebx
c000e1c0:	c3                   	ret    
c000e1c1:	90                   	nop

c000e1c2 <Device::removeAllChildren()>:
c000e1c2:	56                   	push   esi
c000e1c3:	53                   	push   ebx
c000e1c4:	52                   	push   edx
c000e1c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e1c9:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e1cf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e1d2:	74 17                	je     c000e1eb <Device::removeAllChildren()+0x29>
c000e1d4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e1d7:	85 c0                	test   eax,eax
c000e1d9:	74 0c                	je     c000e1e7 <Device::removeAllChildren()+0x25>
c000e1db:	83 ec 0c             	sub    esp,0xc
c000e1de:	8b 10                	mov    edx,DWORD PTR [eax]
c000e1e0:	50                   	push   eax
c000e1e1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e1e4:	83 c4 10             	add    esp,0x10
c000e1e7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e1e9:	eb e4                	jmp    c000e1cf <Device::removeAllChildren()+0xd>
c000e1eb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e1f1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e1f7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e1fd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e204:	58                   	pop    eax
c000e205:	5b                   	pop    ebx
c000e206:	5e                   	pop    esi
c000e207:	c3                   	ret    

c000e208 <Device::hibernateAll()>:
c000e208:	53                   	push   ebx
c000e209:	83 ec 14             	sub    esp,0x14
c000e20c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e210:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e212:	53                   	push   ebx
c000e213:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e216:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e21c:	83 c4 10             	add    esp,0x10
c000e21f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e222:	74 0f                	je     c000e233 <Device::hibernateAll()+0x2b>
c000e224:	83 ec 0c             	sub    esp,0xc
c000e227:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e22a:	e8 d9 ff ff ff       	call   c000e208 <Device::hibernateAll()>
c000e22f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e231:	eb e9                	jmp    c000e21c <Device::hibernateAll()+0x14>
c000e233:	83 c4 08             	add    esp,0x8
c000e236:	5b                   	pop    ebx
c000e237:	c3                   	ret    

c000e238 <Device::wakeAll()>:
c000e238:	53                   	push   ebx
c000e239:	83 ec 14             	sub    esp,0x14
c000e23c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e240:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e242:	53                   	push   ebx
c000e243:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e246:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e24c:	83 c4 10             	add    esp,0x10
c000e24f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e252:	74 0f                	je     c000e263 <Device::wakeAll()+0x2b>
c000e254:	83 ec 0c             	sub    esp,0xc
c000e257:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e25a:	e8 d9 ff ff ff       	call   c000e238 <Device::wakeAll()>
c000e25f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e261:	eb e9                	jmp    c000e24c <Device::wakeAll()+0x14>
c000e263:	83 c4 08             	add    esp,0x8
c000e266:	5b                   	pop    ebx
c000e267:	c3                   	ret    

c000e268 <Device::detectAll()>:
c000e268:	53                   	push   ebx
c000e269:	83 ec 14             	sub    esp,0x14
c000e26c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e270:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e272:	53                   	push   ebx
c000e273:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e276:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e27c:	83 c4 10             	add    esp,0x10
c000e27f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e282:	74 0f                	je     c000e293 <Device::detectAll()+0x2b>
c000e284:	83 ec 0c             	sub    esp,0xc
c000e287:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e28a:	e8 d9 ff ff ff       	call   c000e268 <Device::detectAll()>
c000e28f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e291:	eb e9                	jmp    c000e27c <Device::detectAll()+0x14>
c000e293:	83 c4 08             	add    esp,0x8
c000e296:	5b                   	pop    ebx
c000e297:	c3                   	ret    

c000e298 <Device::disableLegacyAll()>:
c000e298:	53                   	push   ebx
c000e299:	83 ec 14             	sub    esp,0x14
c000e29c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e2a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e2a2:	53                   	push   ebx
c000e2a3:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e2a6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e2ac:	83 c4 10             	add    esp,0x10
c000e2af:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e2b2:	74 0f                	je     c000e2c3 <Device::disableLegacyAll()+0x2b>
c000e2b4:	83 ec 0c             	sub    esp,0xc
c000e2b7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e2ba:	e8 d9 ff ff ff       	call   c000e298 <Device::disableLegacyAll()>
c000e2bf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e2c1:	eb e9                	jmp    c000e2ac <Device::disableLegacyAll()+0x14>
c000e2c3:	83 c4 08             	add    esp,0x8
c000e2c6:	5b                   	pop    ebx
c000e2c7:	c3                   	ret    

c000e2c8 <Device::loadDriversForAll()>:
c000e2c8:	53                   	push   ebx
c000e2c9:	83 ec 08             	sub    esp,0x8
c000e2cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e2d0:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e2d7:	75 0c                	jne    c000e2e5 <Device::loadDriversForAll()+0x1d>
c000e2d9:	83 ec 0c             	sub    esp,0xc
c000e2dc:	53                   	push   ebx
c000e2dd:	e8 a0 fd ff ff       	call   c000e082 <Device::findAndLoadDriver()>
c000e2e2:	83 c4 10             	add    esp,0x10
c000e2e5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e2eb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e2ee:	74 12                	je     c000e302 <Device::loadDriversForAll()+0x3a>
c000e2f0:	83 ec 0c             	sub    esp,0xc
c000e2f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e2f6:	e8 cd ff ff ff       	call   c000e2c8 <Device::loadDriversForAll()>
c000e2fb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e2fd:	83 c4 10             	add    esp,0x10
c000e300:	eb e9                	jmp    c000e2eb <Device::loadDriversForAll()+0x23>
c000e302:	83 c4 08             	add    esp,0x8
c000e305:	5b                   	pop    ebx
c000e306:	c3                   	ret    
c000e307:	90                   	nop

c000e308 <Device::closeAll()>:
c000e308:	53                   	push   ebx
c000e309:	83 ec 08             	sub    esp,0x8
c000e30c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e310:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e312:	6a 00                	push   0x0
c000e314:	6a 00                	push   0x0
c000e316:	6a 00                	push   0x0
c000e318:	53                   	push   ebx
c000e319:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e31c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e322:	83 c4 10             	add    esp,0x10
c000e325:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e328:	74 0f                	je     c000e339 <Device::closeAll()+0x31>
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e330:	e8 d3 ff ff ff       	call   c000e308 <Device::closeAll()>
c000e335:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e337:	eb e9                	jmp    c000e322 <Device::closeAll()+0x1a>
c000e339:	83 c4 08             	add    esp,0x8
c000e33c:	5b                   	pop    ebx
c000e33d:	c3                   	ret    

c000e33e <Device::powerSavingAll(PowerSavingLevel)>:
c000e33e:	56                   	push   esi
c000e33f:	53                   	push   ebx
c000e340:	83 ec 0c             	sub    esp,0xc
c000e343:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e347:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e34b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e34d:	56                   	push   esi
c000e34e:	53                   	push   ebx
c000e34f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e352:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e358:	83 c4 10             	add    esp,0x10
c000e35b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e35e:	74 0f                	je     c000e36f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e360:	52                   	push   edx
c000e361:	52                   	push   edx
c000e362:	56                   	push   esi
c000e363:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e366:	e8 d3 ff ff ff       	call   c000e33e <Device::powerSavingAll(PowerSavingLevel)>
c000e36b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e36d:	eb e9                	jmp    c000e358 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e36f:	58                   	pop    eax
c000e370:	5b                   	pop    ebx
c000e371:	5e                   	pop    esi
c000e372:	c3                   	ret    
c000e373:	90                   	nop

c000e374 <Device::setName(char const*)>:
c000e374:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e37c:	e9 bf 23 ff ff       	jmp    c0000740 <strcpy>
c000e381:	90                   	nop

c000e382 <Device::Device(char const*)>:
c000e382:	83 ec 1c             	sub    esp,0x1c
c000e385:	ba 50 48 02 c0       	mov    edx,0xc0024850
c000e38a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e38e:	89 10                	mov    DWORD PTR [eax],edx
c000e390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e394:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e39e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3a2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e3ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3b0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e3ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3be:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e3c8:	83 ec 08             	sub    esp,0x8
c000e3cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e3cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e3d3:	e8 9c ff ff ff       	call   c000e374 <Device::setName(char const*)>
c000e3d8:	83 c4 10             	add    esp,0x10
c000e3db:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e3e3:	83 ec 0c             	sub    esp,0xc
c000e3e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3ea:	e8 18 b6 ff ff       	call   c0009a07 <malloc>
c000e3ef:	83 c4 10             	add    esp,0x10
c000e3f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e3f8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e3ff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e403:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e409:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e40d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e413:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e419:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e41d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e423:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e42a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e42e:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e435:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e439:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e440:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e444:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e44e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e452:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e45c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e460:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e46a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e46e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e478:	90                   	nop
c000e479:	83 c4 1c             	add    esp,0x1c
c000e47c:	c3                   	ret    
c000e47d:	90                   	nop

c000e47e <Device::getName()>:
c000e47e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e482:	05 d0 00 00 00       	add    eax,0xd0
c000e487:	c3                   	ret    

c000e488 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e488:	83 ec 0c             	sub    esp,0xc
c000e48b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e48f:	83 ec 08             	sub    esp,0x8
c000e492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e496:	50                   	push   eax
c000e497:	e8 e6 fe ff ff       	call   c000e382 <Device::Device(char const*)>
c000e49c:	83 c4 10             	add    esp,0x10
c000e49f:	ba 7c 48 02 c0       	mov    edx,0xc002487c
c000e4a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4a8:	89 10                	mov    DWORD PTR [eax],edx
c000e4aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4ae:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e4b8:	90                   	nop
c000e4b9:	83 c4 0c             	add    esp,0xc
c000e4bc:	c3                   	ret    
c000e4bd:	90                   	nop

c000e4be <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e4be:	57                   	push   edi
c000e4bf:	56                   	push   esi
c000e4c0:	53                   	push   ebx
c000e4c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e4c5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e4c9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e4cd:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e4d3:	75 0c                	jne    c000e4e1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e4d5:	52                   	push   edx
c000e4d6:	52                   	push   edx
c000e4d7:	53                   	push   ebx
c000e4d8:	56                   	push   esi
c000e4d9:	e8 e8 43 01 00       	call   c00228c6 <LinkedList<Device>::addElement(Device*)>
c000e4de:	83 c4 10             	add    esp,0x10
c000e4e1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e4e7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e4ea:	74 12                	je     c000e4fe <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e4ec:	50                   	push   eax
c000e4ed:	57                   	push   edi
c000e4ee:	56                   	push   esi
c000e4ef:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e4f2:	e8 c7 ff ff ff       	call   c000e4be <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e4f7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e4f9:	83 c4 10             	add    esp,0x10
c000e4fc:	eb e9                	jmp    c000e4e7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e4fe:	5b                   	pop    ebx
c000e4ff:	5e                   	pop    esi
c000e500:	5f                   	pop    edi
c000e501:	c3                   	ret    

c000e502 <getDevicesOfType(DeviceType)>:
c000e502:	53                   	push   ebx
c000e503:	83 ec 14             	sub    esp,0x14
c000e506:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e50a:	53                   	push   ebx
c000e50b:	e8 92 44 01 00       	call   c00229a2 <LinkedList<Device>::LinkedList()>
c000e510:	83 c4 0c             	add    esp,0xc
c000e513:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e517:	53                   	push   ebx
c000e518:	ff 35 48 7b 02 c0    	push   DWORD PTR ds:0xc0027b48
c000e51e:	e8 9b ff ff ff       	call   c000e4be <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e523:	89 d8                	mov    eax,ebx
c000e525:	83 c4 18             	add    esp,0x18
c000e528:	5b                   	pop    ebx
c000e529:	c2 04 00             	ret    0x4

c000e52c <HardDiskController::HardDiskController(char const*)>:
c000e52c:	83 ec 0c             	sub    esp,0xc
c000e52f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e533:	83 ec 08             	sub    esp,0x8
c000e536:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e53a:	50                   	push   eax
c000e53b:	e8 42 fe ff ff       	call   c000e382 <Device::Device(char const*)>
c000e540:	83 c4 10             	add    esp,0x10
c000e543:	ba a8 48 02 c0       	mov    edx,0xc00248a8
c000e548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e54c:	89 10                	mov    DWORD PTR [eax],edx
c000e54e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e552:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e55c:	90                   	nop
c000e55d:	83 c4 0c             	add    esp,0xc
c000e560:	c3                   	ret    
c000e561:	90                   	nop
c000e562:	66 90                	xchg   ax,ax

c000e564 <HardDiskController::~HardDiskController()>:
c000e564:	83 ec 0c             	sub    esp,0xc
c000e567:	ba a8 48 02 c0       	mov    edx,0xc00248a8
c000e56c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e570:	89 10                	mov    DWORD PTR [eax],edx
c000e572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e576:	83 ec 0c             	sub    esp,0xc
c000e579:	50                   	push   eax
c000e57a:	e8 cd fa ff ff       	call   c000e04c <Device::~Device()>
c000e57f:	83 c4 10             	add    esp,0x10
c000e582:	90                   	nop
c000e583:	83 c4 0c             	add    esp,0xc
c000e586:	c3                   	ret    
c000e587:	90                   	nop

c000e588 <HardDiskController::~HardDiskController()>:
c000e588:	83 ec 0c             	sub    esp,0xc
c000e58b:	83 ec 0c             	sub    esp,0xc
c000e58e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e592:	e8 cd ff ff ff       	call   c000e564 <HardDiskController::~HardDiskController()>
c000e597:	83 c4 10             	add    esp,0x10
c000e59a:	83 ec 08             	sub    esp,0x8
c000e59d:	68 58 01 00 00       	push   0x158
c000e5a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5a6:	e8 6b e6 ff ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c000e5ab:	83 c4 10             	add    esp,0x10
c000e5ae:	83 c4 0c             	add    esp,0xc
c000e5b1:	c3                   	ret    

c000e5b2 <PhysicalDisk::eject()>:
c000e5b2:	83 c8 ff             	or     eax,0xffffffff
c000e5b5:	c3                   	ret    

c000e5b6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e5b6:	83 ec 0c             	sub    esp,0xc
c000e5b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5bd:	83 ec 08             	sub    esp,0x8
c000e5c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c4:	50                   	push   eax
c000e5c5:	e8 b8 fd ff ff       	call   c000e382 <Device::Device(char const*)>
c000e5ca:	83 c4 10             	add    esp,0x10
c000e5cd:	ba d4 48 02 c0       	mov    edx,0xc00248d4
c000e5d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5d6:	89 10                	mov    DWORD PTR [eax],edx
c000e5d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5dc:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e5e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5e7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e5ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5f2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e5fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e600:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e604:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e60a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e60e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e618:	90                   	nop
c000e619:	83 c4 0c             	add    esp,0xc
c000e61c:	c3                   	ret    
c000e61d:	90                   	nop

c000e61e <PhysicalDisk::startCache()>:
c000e61e:	56                   	push   esi
c000e61f:	53                   	push   ebx
c000e620:	83 ec 10             	sub    esp,0x10
c000e623:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e627:	6a 44                	push   0x44
c000e629:	e8 d9 b3 ff ff       	call   c0009a07 <malloc>
c000e62e:	89 c6                	mov    esi,eax
c000e630:	58                   	pop    eax
c000e631:	5a                   	pop    edx
c000e632:	53                   	push   ebx
c000e633:	56                   	push   esi
c000e634:	e8 2f 26 00 00       	call   c0010c68 <VCache::VCache(PhysicalDisk*)>
c000e639:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e63f:	83 c4 14             	add    esp,0x14
c000e642:	5b                   	pop    ebx
c000e643:	5e                   	pop    esi
c000e644:	c3                   	ret    
c000e645:	90                   	nop

c000e646 <PhysicalDisk::~PhysicalDisk()>:
c000e646:	83 ec 0c             	sub    esp,0xc
c000e649:	ba d4 48 02 c0       	mov    edx,0xc00248d4
c000e64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e652:	89 10                	mov    DWORD PTR [eax],edx
c000e654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e658:	83 ec 0c             	sub    esp,0xc
c000e65b:	50                   	push   eax
c000e65c:	e8 eb f9 ff ff       	call   c000e04c <Device::~Device()>
c000e661:	83 c4 10             	add    esp,0x10
c000e664:	90                   	nop
c000e665:	83 c4 0c             	add    esp,0xc
c000e668:	c3                   	ret    
c000e669:	90                   	nop

c000e66a <PhysicalDisk::~PhysicalDisk()>:
c000e66a:	83 ec 0c             	sub    esp,0xc
c000e66d:	83 ec 0c             	sub    esp,0xc
c000e670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e674:	e8 cd ff ff ff       	call   c000e646 <PhysicalDisk::~PhysicalDisk()>
c000e679:	83 c4 10             	add    esp,0x10
c000e67c:	83 ec 08             	sub    esp,0x8
c000e67f:	68 6c 01 00 00       	push   0x16c
c000e684:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e688:	e8 89 e5 ff ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c000e68d:	83 c4 10             	add    esp,0x10
c000e690:	83 c4 0c             	add    esp,0xc
c000e693:	c3                   	ret    

c000e694 <FPU::FPU(char const*)>:
c000e694:	83 ec 0c             	sub    esp,0xc
c000e697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e69b:	83 ec 08             	sub    esp,0x8
c000e69e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6a2:	50                   	push   eax
c000e6a3:	e8 da fc ff ff       	call   c000e382 <Device::Device(char const*)>
c000e6a8:	83 c4 10             	add    esp,0x10
c000e6ab:	ba 18 49 02 c0       	mov    edx,0xc0024918
c000e6b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6b4:	89 10                	mov    DWORD PTR [eax],edx
c000e6b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6ba:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e6c4:	90                   	nop
c000e6c5:	83 c4 0c             	add    esp,0xc
c000e6c8:	c3                   	ret    
c000e6c9:	90                   	nop
c000e6ca:	66 90                	xchg   ax,ax

c000e6cc <FPU::~FPU()>:
c000e6cc:	83 ec 0c             	sub    esp,0xc
c000e6cf:	ba 18 49 02 c0       	mov    edx,0xc0024918
c000e6d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6d8:	89 10                	mov    DWORD PTR [eax],edx
c000e6da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6de:	83 ec 0c             	sub    esp,0xc
c000e6e1:	50                   	push   eax
c000e6e2:	e8 65 f9 ff ff       	call   c000e04c <Device::~Device()>
c000e6e7:	83 c4 10             	add    esp,0x10
c000e6ea:	90                   	nop
c000e6eb:	83 c4 0c             	add    esp,0xc
c000e6ee:	c3                   	ret    
c000e6ef:	90                   	nop

c000e6f0 <FPU::~FPU()>:
c000e6f0:	83 ec 0c             	sub    esp,0xc
c000e6f3:	83 ec 0c             	sub    esp,0xc
c000e6f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6fa:	e8 cd ff ff ff       	call   c000e6cc <FPU::~FPU()>
c000e6ff:	83 c4 10             	add    esp,0x10
c000e702:	83 ec 08             	sub    esp,0x8
c000e705:	68 58 01 00 00       	push   0x158
c000e70a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e70e:	e8 03 e5 ff ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c000e713:	83 c4 10             	add    esp,0x10
c000e716:	83 c4 0c             	add    esp,0xc
c000e719:	c3                   	ret    

c000e71a <setupFPU()>:
c000e71a:	53                   	push   ebx
c000e71b:	83 ec 08             	sub    esp,0x8
c000e71e:	8b 15 48 7b 02 c0    	mov    edx,DWORD PTR ds:0xc0027b48
c000e724:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000e72b:	74 1b                	je     c000e748 <setupFPU()+0x2e>
c000e72d:	83 ec 0c             	sub    esp,0xc
c000e730:	68 58 01 00 00       	push   0x158
c000e735:	e8 cd b2 ff ff       	call   c0009a07 <malloc>
c000e73a:	89 c3                	mov    ebx,eax
c000e73c:	89 04 24             	mov    DWORD PTR [esp],eax
c000e73f:	e8 64 28 01 00       	call   c0020fa8 <AVX::AVX()>
c000e744:	eb 62                	jmp    c000e7a8 <setupFPU()+0x8e>
c000e746:	66 90                	xchg   ax,ax
c000e748:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000e74e:	84 c0                	test   al,al
c000e750:	79 1a                	jns    c000e76c <setupFPU()+0x52>
c000e752:	83 ec 0c             	sub    esp,0xc
c000e755:	68 58 01 00 00       	push   0x158
c000e75a:	e8 a8 b2 ff ff       	call   c0009a07 <malloc>
c000e75f:	89 c3                	mov    ebx,eax
c000e761:	89 04 24             	mov    DWORD PTR [esp],eax
c000e764:	e8 6f 29 01 00       	call   c00210d8 <SSE::SSE()>
c000e769:	eb 3d                	jmp    c000e7a8 <setupFPU()+0x8e>
c000e76b:	90                   	nop
c000e76c:	a8 20                	test   al,0x20
c000e76e:	74 1c                	je     c000e78c <setupFPU()+0x72>
c000e770:	83 ec 0c             	sub    esp,0xc
c000e773:	68 58 01 00 00       	push   0x158
c000e778:	e8 8a b2 ff ff       	call   c0009a07 <malloc>
c000e77d:	89 c3                	mov    ebx,eax
c000e77f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e782:	e8 b5 28 01 00       	call   c002103c <MMX::MMX()>
c000e787:	eb 1f                	jmp    c000e7a8 <setupFPU()+0x8e>
c000e789:	8d 76 00             	lea    esi,[esi+0x0]
c000e78c:	a8 10                	test   al,0x10
c000e78e:	74 20                	je     c000e7b0 <setupFPU()+0x96>
c000e790:	83 ec 0c             	sub    esp,0xc
c000e793:	68 58 01 00 00       	push   0x158
c000e798:	e8 6a b2 ff ff       	call   c0009a07 <malloc>
c000e79d:	89 c3                	mov    ebx,eax
c000e79f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7a2:	e8 c5 29 01 00       	call   c002116c <x87::x87()>
c000e7a7:	90                   	nop
c000e7a8:	83 c4 10             	add    esp,0x10
c000e7ab:	eb 27                	jmp    c000e7d4 <setupFPU()+0xba>
c000e7ad:	8d 76 00             	lea    esi,[esi+0x0]
c000e7b0:	83 e0 ef             	and    eax,0xffffffef
c000e7b3:	83 ec 0c             	sub    esp,0xc
c000e7b6:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000e7bc:	68 04 49 02 c0       	push   0xc0024904
c000e7c1:	e8 31 e5 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000e7c6:	0f 20 c0             	mov    eax,cr0
c000e7c9:	83 c8 04             	or     eax,0x4
c000e7cc:	0f 22 c0             	mov    cr0,eax
c000e7cf:	31 db                	xor    ebx,ebx
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	89 d8                	mov    eax,ebx
c000e7d6:	83 c4 08             	add    esp,0x8
c000e7d9:	5b                   	pop    ebx
c000e7da:	c3                   	ret    
c000e7db:	90                   	nop

c000e7dc <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e7dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e7e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e7e4:	c1 e0 04             	shl    eax,0x4
c000e7e7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000e7eb:	8d 50 10             	lea    edx,[eax+0x10]
c000e7ee:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000e7f4:	74 08                	je     c000e7fe <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000e7f6:	83 c0 04             	add    eax,0x4
c000e7f9:	39 d0                	cmp    eax,edx
c000e7fb:	75 f1                	jne    c000e7ee <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000e7fd:	c3                   	ret    
c000e7fe:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e808:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e812:	eb e2                	jmp    c000e7f6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000e814 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e814:	57                   	push   edi
c000e815:	31 c0                	xor    eax,eax
c000e817:	56                   	push   esi
c000e818:	53                   	push   ebx
c000e819:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e81d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e821:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e825:	89 da                	mov    edx,ebx
c000e827:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e82b:	c1 e2 04             	shl    edx,0x4
c000e82e:	01 ca                	add    edx,ecx
c000e830:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000e838:	74 16                	je     c000e850 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000e83a:	40                   	inc    eax
c000e83b:	83 f8 04             	cmp    eax,0x4
c000e83e:	75 f0                	jne    c000e830 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000e840:	c7 44 24 10 48 49 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024948
c000e848:	5b                   	pop    ebx
c000e849:	5e                   	pop    esi
c000e84a:	5f                   	pop    edi
c000e84b:	e9 53 60 00 00       	jmp    c00148a3 <Krnl::panic(char const*)>
c000e850:	8d 04 98             	lea    eax,[eax+ebx*4]
c000e853:	8d 04 81             	lea    eax,[ecx+eax*4]
c000e856:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000e85c:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000e862:	5b                   	pop    ebx
c000e863:	5e                   	pop    esi
c000e864:	5f                   	pop    edi
c000e865:	c3                   	ret    

c000e866 <doubleFault(regs*, void*)>:
c000e866:	55                   	push   ebp
c000e867:	89 e5                	mov    ebp,esp
c000e869:	83 ec 08             	sub    esp,0x8
c000e86c:	83 ec 0c             	sub    esp,0xc
c000e86f:	68 55 49 02 c0       	push   0xc0024955
c000e874:	e8 2a 60 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c000e879:	83 c4 10             	add    esp,0x10
c000e87c:	90                   	nop
c000e87d:	c9                   	leave  
c000e87e:	c3                   	ret    
c000e87f:	90                   	nop

c000e880 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e880:	56                   	push   esi
c000e881:	53                   	push   ebx
c000e882:	50                   	push   eax
c000e883:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e887:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e88b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e890:	75 35                	jne    c000e8c7 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000e892:	8d 43 20             	lea    eax,[ebx+0x20]
c000e895:	31 d2                	xor    edx,edx
c000e897:	89 c1                	mov    ecx,eax
c000e899:	c1 e1 04             	shl    ecx,0x4
c000e89c:	01 f1                	add    ecx,esi
c000e89e:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000e8a6:	74 3e                	je     c000e8e6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000e8a8:	42                   	inc    edx
c000e8a9:	83 fa 04             	cmp    edx,0x4
c000e8ac:	75 f0                	jne    c000e89e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000e8ae:	83 ec 0c             	sub    esp,0xc
c000e8b1:	68 6f 49 02 c0       	push   0xc002496f
c000e8b6:	e8 e8 5f 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c000e8bb:	83 c4 10             	add    esp,0x10
c000e8be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e8c3:	5a                   	pop    edx
c000e8c4:	5b                   	pop    ebx
c000e8c5:	5e                   	pop    esi
c000e8c6:	c3                   	ret    
c000e8c7:	83 ec 0c             	sub    esp,0xc
c000e8ca:	56                   	push   esi
c000e8cb:	e8 ae fb ff ff       	call   c000e47e <Device::getName()>
c000e8d0:	83 c4 10             	add    esp,0x10
c000e8d3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e8d6:	75 ba                	jne    c000e892 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e8d8:	83 fb 0f             	cmp    ebx,0xf
c000e8db:	7f 29                	jg     c000e906 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000e8dd:	0f b6 9b 40 72 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd8dc0]
c000e8e4:	eb ac                	jmp    c000e892 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e8e6:	8d 04 82             	lea    eax,[edx+eax*4]
c000e8e9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e8ed:	8d 04 86             	lea    eax,[esi+eax*4]
c000e8f0:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000e8f6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e8fa:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000e900:	89 d8                	mov    eax,ebx
c000e902:	5a                   	pop    edx
c000e903:	5b                   	pop    ebx
c000e904:	5e                   	pop    esi
c000e905:	c3                   	ret    
c000e906:	83 ec 0c             	sub    esp,0xc
c000e909:	68 62 49 02 c0       	push   0xc0024962
c000e90e:	e8 90 5f 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c000e913:	83 c4 10             	add    esp,0x10
c000e916:	e9 77 ff ff ff       	jmp    c000e892 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e91b:	90                   	nop

c000e91c <InterruptController::clearAllHandlers(int, bool)>:
c000e91c:	56                   	push   esi
c000e91d:	53                   	push   ebx
c000e91e:	52                   	push   edx
c000e91f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e923:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e927:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e92c:	75 61                	jne    c000e98f <InterruptController::clearAllHandlers(int, bool)+0x73>
c000e92e:	8d 46 20             	lea    eax,[esi+0x20]
c000e931:	c1 e6 04             	shl    esi,0x4
c000e934:	c1 e0 04             	shl    eax,0x4
c000e937:	01 de                	add    esi,ebx
c000e939:	01 d8                	add    eax,ebx
c000e93b:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000e945:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000e94f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000e959:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e963:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000e96d:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000e977:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000e981:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000e98b:	58                   	pop    eax
c000e98c:	5b                   	pop    ebx
c000e98d:	5e                   	pop    esi
c000e98e:	c3                   	ret    
c000e98f:	83 ec 0c             	sub    esp,0xc
c000e992:	53                   	push   ebx
c000e993:	e8 e6 fa ff ff       	call   c000e47e <Device::getName()>
c000e998:	83 c4 10             	add    esp,0x10
c000e99b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e99e:	75 8e                	jne    c000e92e <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e9a0:	83 fe 0f             	cmp    esi,0xf
c000e9a3:	7f 09                	jg     c000e9ae <InterruptController::clearAllHandlers(int, bool)+0x92>
c000e9a5:	0f b6 b6 40 72 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd8dc0]
c000e9ac:	eb 80                	jmp    c000e92e <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e9ae:	83 ec 0c             	sub    esp,0xc
c000e9b1:	68 7c 49 02 c0       	push   0xc002497c
c000e9b6:	e8 e8 5e 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c000e9bb:	83 c4 10             	add    esp,0x10
c000e9be:	e9 6b ff ff ff       	jmp    c000e92e <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e9c3:	90                   	nop

c000e9c4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e9c4:	56                   	push   esi
c000e9c5:	53                   	push   ebx
c000e9c6:	52                   	push   edx
c000e9c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e9cb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e9cf:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e9d4:	75 3a                	jne    c000ea10 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000e9d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9da:	8d 50 20             	lea    edx,[eax+0x20]
c000e9dd:	c1 e2 04             	shl    edx,0x4
c000e9e0:	8d 04 16             	lea    eax,[esi+edx*1]
c000e9e3:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000e9e7:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000e9ed:	74 0b                	je     c000e9fa <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000e9ef:	83 c0 04             	add    eax,0x4
c000e9f2:	39 d0                	cmp    eax,edx
c000e9f4:	75 f1                	jne    c000e9e7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000e9f6:	58                   	pop    eax
c000e9f7:	5b                   	pop    ebx
c000e9f8:	5e                   	pop    esi
c000e9f9:	c3                   	ret    
c000e9fa:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ea04:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000ea0e:	eb df                	jmp    c000e9ef <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000ea10:	83 ec 0c             	sub    esp,0xc
c000ea13:	56                   	push   esi
c000ea14:	e8 65 fa ff ff       	call   c000e47e <Device::getName()>
c000ea19:	83 c4 10             	add    esp,0x10
c000ea1c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ea1f:	75 b5                	jne    c000e9d6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ea21:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000ea26:	7f 11                	jg     c000ea39 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000ea28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea2c:	0f b6 80 40 72 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd8dc0]
c000ea33:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ea37:	eb 9d                	jmp    c000e9d6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ea39:	83 ec 0c             	sub    esp,0xc
c000ea3c:	68 89 49 02 c0       	push   0xc0024989
c000ea41:	e8 5d 5e 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c000ea46:	83 c4 10             	add    esp,0x10
c000ea49:	eb 8b                	jmp    c000e9d6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000ea4b <nmiHandler(regs*, void*)>:
c000ea4b:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c000ea50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ea54:	e9 79 a7 ff ff       	jmp    c00091d2 <Computer::handleNMI()>

c000ea59 <int_handler>:
c000ea59:	55                   	push   ebp
c000ea5a:	57                   	push   edi
c000ea5b:	56                   	push   esi
c000ea5c:	53                   	push   ebx
c000ea5d:	83 ec 0c             	sub    esp,0xc
c000ea60:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ea64:	80 3d 24 86 02 c0 00 	cmp    BYTE PTR ds:0xc0028624,0x0
c000ea6b:	74 0b                	je     c000ea78 <int_handler+0x1f>
c000ea6d:	fa                   	cli    
c000ea6e:	f4                   	hlt    
c000ea6f:	80 3d 24 86 02 c0 00 	cmp    BYTE PTR ds:0xc0028624,0x0
c000ea76:	75 f5                	jne    c000ea6d <int_handler+0x14>
c000ea78:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c000ea7d:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000ea80:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ea86:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000ea8c:	8d 43 e0             	lea    eax,[ebx-0x20]
c000ea8f:	83 f8 17             	cmp    eax,0x17
c000ea92:	77 13                	ja     c000eaa7 <int_handler+0x4e>
c000ea94:	83 ec 08             	sub    esp,0x8
c000ea97:	8b 17                	mov    edx,DWORD PTR [edi]
c000ea99:	8d 43 e0             	lea    eax,[ebx-0x20]
c000ea9c:	0f b6 c0             	movzx  eax,al
c000ea9f:	50                   	push   eax
c000eaa0:	57                   	push   edi
c000eaa1:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000eaa4:	83 c4 10             	add    esp,0x10
c000eaa7:	83 c3 15             	add    ebx,0x15
c000eaaa:	c1 e3 04             	shl    ebx,0x4
c000eaad:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000eab1:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000eab8:	31 db                	xor    ebx,ebx
c000eaba:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000eabe:	85 c0                	test   eax,eax
c000eac0:	74 13                	je     c000ead5 <int_handler+0x7c>
c000eac2:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000eac5:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000eac9:	74 1c                	je     c000eae7 <int_handler+0x8e>
c000eacb:	83 ec 08             	sub    esp,0x8
c000eace:	52                   	push   edx
c000eacf:	56                   	push   esi
c000ead0:	ff d0                	call   eax
c000ead2:	83 c4 10             	add    esp,0x10
c000ead5:	43                   	inc    ebx
c000ead6:	83 fb 04             	cmp    ebx,0x4
c000ead9:	75 df                	jne    c000eaba <int_handler+0x61>
c000eadb:	83 c4 0c             	add    esp,0xc
c000eade:	31 c0                	xor    eax,eax
c000eae0:	5b                   	pop    ebx
c000eae1:	31 d2                	xor    edx,edx
c000eae3:	5e                   	pop    esi
c000eae4:	5f                   	pop    edi
c000eae5:	5d                   	pop    ebp
c000eae6:	c3                   	ret    
c000eae7:	83 ec 08             	sub    esp,0x8
c000eaea:	52                   	push   edx
c000eaeb:	56                   	push   esi
c000eaec:	ff d0                	call   eax
c000eaee:	83 c4 10             	add    esp,0x10
c000eaf1:	83 c4 0c             	add    esp,0xc
c000eaf4:	5b                   	pop    ebx
c000eaf5:	5e                   	pop    esi
c000eaf6:	5f                   	pop    edi
c000eaf7:	5d                   	pop    ebp
c000eaf8:	c3                   	ret    
c000eaf9:	90                   	nop

c000eafa <InterruptController::InterruptController(char const*)>:
c000eafa:	83 ec 1c             	sub    esp,0x1c
c000eafd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eb01:	83 ec 08             	sub    esp,0x8
c000eb04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eb08:	50                   	push   eax
c000eb09:	e8 74 f8 ff ff       	call   c000e382 <Device::Device(char const*)>
c000eb0e:	83 c4 10             	add    esp,0x10
c000eb11:	ba 40 4c 02 c0       	mov    edx,0xc0024c40
c000eb16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eb1a:	89 10                	mov    DWORD PTR [eax],edx
c000eb1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eb20:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000eb2a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000eb32:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000eb3a:	7f 5e                	jg     c000eb9a <InterruptController::InterruptController(char const*)+0xa0>
c000eb3c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000eb44:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000eb49:	7f 49                	jg     c000eb94 <InterruptController::InterruptController(char const*)+0x9a>
c000eb4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eb4f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb53:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000eb5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb5e:	01 ca                	add    edx,ecx
c000eb60:	83 c2 54             	add    edx,0x54
c000eb63:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000eb6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eb6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb73:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000eb7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb7e:	01 ca                	add    edx,ecx
c000eb80:	81 c2 54 04 00 00    	add    edx,0x454
c000eb86:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000eb8e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000eb92:	eb b0                	jmp    c000eb44 <InterruptController::InterruptController(char const*)+0x4a>
c000eb94:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000eb98:	eb 98                	jmp    c000eb32 <InterruptController::InterruptController(char const*)+0x38>
c000eb9a:	90                   	nop
c000eb9b:	83 c4 1c             	add    esp,0x1c
c000eb9e:	c3                   	ret    
c000eb9f:	90                   	nop

c000eba0 <InterruptController::~InterruptController()>:
c000eba0:	83 ec 0c             	sub    esp,0xc
c000eba3:	ba 40 4c 02 c0       	mov    edx,0xc0024c40
c000eba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebac:	89 10                	mov    DWORD PTR [eax],edx
c000ebae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebb2:	83 ec 0c             	sub    esp,0xc
c000ebb5:	50                   	push   eax
c000ebb6:	e8 91 f4 ff ff       	call   c000e04c <Device::~Device()>
c000ebbb:	83 c4 10             	add    esp,0x10
c000ebbe:	90                   	nop
c000ebbf:	83 c4 0c             	add    esp,0xc
c000ebc2:	c3                   	ret    
c000ebc3:	90                   	nop

c000ebc4 <InterruptController::~InterruptController()>:
c000ebc4:	83 ec 0c             	sub    esp,0xc
c000ebc7:	83 ec 0c             	sub    esp,0xc
c000ebca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebce:	e8 cd ff ff ff       	call   c000eba0 <InterruptController::~InterruptController()>
c000ebd3:	83 c4 10             	add    esp,0x10
c000ebd6:	83 ec 08             	sub    esp,0x8
c000ebd9:	68 58 21 00 00       	push   0x2158
c000ebde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebe2:	e8 2f e0 ff ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c000ebe7:	83 c4 10             	add    esp,0x10
c000ebea:	83 c4 0c             	add    esp,0xc
c000ebed:	c3                   	ret    

c000ebee <displayDebugInfo(regs*)>:
c000ebee:	55                   	push   ebp
c000ebef:	57                   	push   edi
c000ebf0:	56                   	push   esi
c000ebf1:	53                   	push   ebx
c000ebf2:	83 ec 24             	sub    esp,0x24
c000ebf5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ebf9:	0f 20 c2             	mov    edx,cr0
c000ebfc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ec00:	0f 20 d7             	mov    edi,cr2
c000ec03:	0f 20 de             	mov    esi,cr3
c000ec06:	0f 20 e5             	mov    ebp,cr4
c000ec09:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000ec0c:	68 96 49 02 c0       	push   0xc0024996
c000ec11:	e8 e1 e0 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000ec16:	59                   	pop    ecx
c000ec17:	58                   	pop    eax
c000ec18:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000ec1b:	68 a1 49 02 c0       	push   0xc00249a1
c000ec20:	e8 d2 e0 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000ec25:	58                   	pop    eax
c000ec26:	5a                   	pop    edx
c000ec27:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000ec2a:	68 ac 49 02 c0       	push   0xc00249ac
c000ec2f:	e8 c3 e0 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000ec34:	59                   	pop    ecx
c000ec35:	58                   	pop    eax
c000ec36:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000ec39:	68 b7 49 02 c0       	push   0xc00249b7
c000ec3e:	e8 b4 e0 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000ec43:	58                   	pop    eax
c000ec44:	5a                   	pop    edx
c000ec45:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ec48:	68 c2 49 02 c0       	push   0xc00249c2
c000ec4d:	e8 a5 e0 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000ec52:	59                   	pop    ecx
c000ec53:	58                   	pop    eax
c000ec54:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ec57:	68 cd 49 02 c0       	push   0xc00249cd
c000ec5c:	e8 96 e0 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000ec61:	58                   	pop    eax
c000ec62:	5a                   	pop    edx
c000ec63:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ec66:	68 d8 49 02 c0       	push   0xc00249d8
c000ec6b:	e8 87 e0 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000ec70:	59                   	pop    ecx
c000ec71:	58                   	pop    eax
c000ec72:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ec75:	68 e3 49 02 c0       	push   0xc00249e3
c000ec7a:	e8 78 e0 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000ec7f:	58                   	pop    eax
c000ec80:	5a                   	pop    edx
c000ec81:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ec84:	68 ee 49 02 c0       	push   0xc00249ee
c000ec89:	e8 69 e0 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000ec8e:	59                   	pop    ecx
c000ec8f:	58                   	pop    eax
c000ec90:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ec93:	68 fd 49 02 c0       	push   0xc00249fd
c000ec98:	e8 5a e0 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000ec9d:	58                   	pop    eax
c000ec9e:	5a                   	pop    edx
c000ec9f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000eca2:	68 08 4a 02 c0       	push   0xc0024a08
c000eca7:	e8 4b e0 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000ecac:	59                   	pop    ecx
c000ecad:	58                   	pop    eax
c000ecae:	57                   	push   edi
c000ecaf:	68 13 4a 02 c0       	push   0xc0024a13
c000ecb4:	e8 3e e0 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000ecb9:	58                   	pop    eax
c000ecba:	5a                   	pop    edx
c000ecbb:	56                   	push   esi
c000ecbc:	68 1e 4a 02 c0       	push   0xc0024a1e
c000ecc1:	e8 31 e0 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000ecc6:	59                   	pop    ecx
c000ecc7:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000eccc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecd2:	e8 2a be ff ff       	call   c000ab01 <setActiveTerminal(VgaText*)>
c000ecd7:	58                   	pop    eax
c000ecd8:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ecdb:	5a                   	pop    edx
c000ecdc:	c1 e0 05             	shl    eax,0x5
c000ecdf:	05 a0 6f 02 c0       	add    eax,0xc0026fa0
c000ece4:	50                   	push   eax
c000ece5:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000ecea:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecf0:	e8 19 c3 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c000ecf5:	59                   	pop    ecx
c000ecf6:	58                   	pop    eax
c000ecf7:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000ecfc:	68 29 4a 02 c0       	push   0xc0024a29
c000ed01:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed07:	e8 02 c3 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c000ed0c:	58                   	pop    eax
c000ed0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ed12:	5a                   	pop    edx
c000ed13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ed16:	83 c0 0c             	add    eax,0xc
c000ed19:	50                   	push   eax
c000ed1a:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000ed1f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed25:	e8 e4 c2 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c000ed2a:	59                   	pop    ecx
c000ed2b:	58                   	pop    eax
c000ed2c:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000ed31:	68 32 4a 02 c0       	push   0xc0024a32
c000ed36:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed3c:	e8 cd c2 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c000ed41:	58                   	pop    eax
c000ed42:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000ed47:	5a                   	pop    edx
c000ed48:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ed4b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed51:	e8 72 c2 ff ff       	call   c000afc8 <VgaText::putx(unsigned int)>
c000ed56:	59                   	pop    ecx
c000ed57:	58                   	pop    eax
c000ed58:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000ed5d:	68 3a 4a 02 c0       	push   0xc0024a3a
c000ed62:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed68:	e8 a1 c2 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c000ed6d:	58                   	pop    eax
c000ed6e:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000ed73:	5a                   	pop    edx
c000ed74:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ed77:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed7d:	e8 46 c2 ff ff       	call   c000afc8 <VgaText::putx(unsigned int)>
c000ed82:	59                   	pop    ecx
c000ed83:	58                   	pop    eax
c000ed84:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000ed89:	68 42 4a 02 c0       	push   0xc0024a42
c000ed8e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed94:	e8 75 c2 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c000ed99:	58                   	pop    eax
c000ed9a:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000ed9f:	5a                   	pop    edx
c000eda0:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000eda3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eda9:	e8 1a c2 ff ff       	call   c000afc8 <VgaText::putx(unsigned int)>
c000edae:	59                   	pop    ecx
c000edaf:	58                   	pop    eax
c000edb0:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000edb5:	68 4a 4a 02 c0       	push   0xc0024a4a
c000edba:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edc0:	e8 49 c2 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c000edc5:	58                   	pop    eax
c000edc6:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000edcb:	5a                   	pop    edx
c000edcc:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000edcf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edd5:	e8 ee c1 ff ff       	call   c000afc8 <VgaText::putx(unsigned int)>
c000edda:	59                   	pop    ecx
c000eddb:	58                   	pop    eax
c000eddc:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000ede1:	68 52 4a 02 c0       	push   0xc0024a52
c000ede6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edec:	e8 1d c2 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c000edf1:	58                   	pop    eax
c000edf2:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000edf7:	5a                   	pop    edx
c000edf8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000edfb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee01:	e8 c2 c1 ff ff       	call   c000afc8 <VgaText::putx(unsigned int)>
c000ee06:	59                   	pop    ecx
c000ee07:	58                   	pop    eax
c000ee08:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000ee0d:	68 5a 4a 02 c0       	push   0xc0024a5a
c000ee12:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee18:	e8 f1 c1 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c000ee1d:	58                   	pop    eax
c000ee1e:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000ee23:	5a                   	pop    edx
c000ee24:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000ee27:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee2d:	e8 96 c1 ff ff       	call   c000afc8 <VgaText::putx(unsigned int)>
c000ee32:	59                   	pop    ecx
c000ee33:	58                   	pop    eax
c000ee34:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000ee39:	68 62 4a 02 c0       	push   0xc0024a62
c000ee3e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee44:	e8 c5 c1 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c000ee49:	58                   	pop    eax
c000ee4a:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000ee4f:	5a                   	pop    edx
c000ee50:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ee54:	52                   	push   edx
c000ee55:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee5b:	e8 68 c1 ff ff       	call   c000afc8 <VgaText::putx(unsigned int)>
c000ee60:	59                   	pop    ecx
c000ee61:	58                   	pop    eax
c000ee62:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000ee67:	68 6b 4a 02 c0       	push   0xc0024a6b
c000ee6c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee72:	e8 97 c1 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c000ee77:	58                   	pop    eax
c000ee78:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000ee7d:	5a                   	pop    edx
c000ee7e:	57                   	push   edi
c000ee7f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee85:	e8 3e c1 ff ff       	call   c000afc8 <VgaText::putx(unsigned int)>
c000ee8a:	59                   	pop    ecx
c000ee8b:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000ee90:	5f                   	pop    edi
c000ee91:	68 73 4a 02 c0       	push   0xc0024a73
c000ee96:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee9c:	e8 6d c1 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c000eea1:	58                   	pop    eax
c000eea2:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000eea7:	5a                   	pop    edx
c000eea8:	56                   	push   esi
c000eea9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eeaf:	e8 14 c1 ff ff       	call   c000afc8 <VgaText::putx(unsigned int)>
c000eeb4:	59                   	pop    ecx
c000eeb5:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000eeba:	5e                   	pop    esi
c000eebb:	68 7b 4a 02 c0       	push   0xc0024a7b
c000eec0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eec6:	e8 43 c1 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c000eecb:	5f                   	pop    edi
c000eecc:	58                   	pop    eax
c000eecd:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000eed2:	55                   	push   ebp
c000eed3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eed9:	e8 ea c0 ff ff       	call   c000afc8 <VgaText::putx(unsigned int)>
c000eede:	58                   	pop    eax
c000eedf:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000eee4:	5a                   	pop    edx
c000eee5:	68 83 4a 02 c0       	push   0xc0024a83
c000eeea:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eef0:	e8 19 c1 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c000eef5:	0f 21 c0             	mov    eax,db0
c000eef8:	59                   	pop    ecx
c000eef9:	5e                   	pop    esi
c000eefa:	50                   	push   eax
c000eefb:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000ef00:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef06:	e8 bd c0 ff ff       	call   c000afc8 <VgaText::putx(unsigned int)>
c000ef0b:	5f                   	pop    edi
c000ef0c:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000ef11:	5d                   	pop    ebp
c000ef12:	68 8c 4a 02 c0       	push   0xc0024a8c
c000ef17:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef1d:	e8 ec c0 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c000ef22:	0f 21 c8             	mov    eax,db1
c000ef25:	5a                   	pop    edx
c000ef26:	59                   	pop    ecx
c000ef27:	50                   	push   eax
c000ef28:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000ef2d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef33:	e8 90 c0 ff ff       	call   c000afc8 <VgaText::putx(unsigned int)>
c000ef38:	5e                   	pop    esi
c000ef39:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000ef3e:	5f                   	pop    edi
c000ef3f:	68 94 4a 02 c0       	push   0xc0024a94
c000ef44:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef4a:	e8 bf c0 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c000ef4f:	0f 21 d0             	mov    eax,db2
c000ef52:	5d                   	pop    ebp
c000ef53:	5a                   	pop    edx
c000ef54:	50                   	push   eax
c000ef55:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000ef5a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef60:	e8 63 c0 ff ff       	call   c000afc8 <VgaText::putx(unsigned int)>
c000ef65:	59                   	pop    ecx
c000ef66:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000ef6b:	5e                   	pop    esi
c000ef6c:	68 9c 4a 02 c0       	push   0xc0024a9c
c000ef71:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef77:	e8 92 c0 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c000ef7c:	0f 21 d8             	mov    eax,db3
c000ef7f:	5f                   	pop    edi
c000ef80:	5d                   	pop    ebp
c000ef81:	50                   	push   eax
c000ef82:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000ef87:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef8d:	e8 36 c0 ff ff       	call   c000afc8 <VgaText::putx(unsigned int)>
c000ef92:	58                   	pop    eax
c000ef93:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000ef98:	5a                   	pop    edx
c000ef99:	68 a4 4a 02 c0       	push   0xc0024aa4
c000ef9e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efa4:	e8 65 c0 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c000efa9:	0f 21 f0             	mov    eax,db6
c000efac:	59                   	pop    ecx
c000efad:	5e                   	pop    esi
c000efae:	50                   	push   eax
c000efaf:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000efb4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efba:	e8 09 c0 ff ff       	call   c000afc8 <VgaText::putx(unsigned int)>
c000efbf:	5f                   	pop    edi
c000efc0:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000efc5:	5d                   	pop    ebp
c000efc6:	68 ac 4a 02 c0       	push   0xc0024aac
c000efcb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efd1:	e8 38 c0 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c000efd6:	0f 21 f8             	mov    eax,db7
c000efd9:	5a                   	pop    edx
c000efda:	59                   	pop    ecx
c000efdb:	50                   	push   eax
c000efdc:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000efe1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efe7:	e8 dc bf ff ff       	call   c000afc8 <VgaText::putx(unsigned int)>
c000efec:	5e                   	pop    esi
c000efed:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000eff0:	e8 48 8a 00 00       	call   c0017a3d <Thr::getDriverNameFromAddress(unsigned long)>
c000eff5:	83 c4 10             	add    esp,0x10
c000eff8:	85 c0                	test   eax,eax
c000effa:	74 7d                	je     c000f079 <displayDebugInfo(regs*)+0x48b>
c000effc:	89 c6                	mov    esi,eax
c000effe:	50                   	push   eax
c000efff:	50                   	push   eax
c000f000:	56                   	push   esi
c000f001:	68 b4 4a 02 c0       	push   0xc0024ab4
c000f006:	e8 ec dc ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000f00b:	5a                   	pop    edx
c000f00c:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000f011:	59                   	pop    ecx
c000f012:	68 c2 4a 02 c0       	push   0xc0024ac2
c000f017:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f01d:	e8 ec bf ff ff       	call   c000b00e <VgaText::puts(char const*)>
c000f022:	5f                   	pop    edi
c000f023:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000f028:	5d                   	pop    ebp
c000f029:	56                   	push   esi
c000f02a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f030:	e8 d9 bf ff ff       	call   c000b00e <VgaText::puts(char const*)>
c000f035:	58                   	pop    eax
c000f036:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000f03b:	5a                   	pop    edx
c000f03c:	68 ce 4a 02 c0       	push   0xc0024ace
c000f041:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f047:	e8 c2 bf ff ff       	call   c000b00e <VgaText::puts(char const*)>
c000f04c:	59                   	pop    ecx
c000f04d:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000f052:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000f058:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f05b:	e8 14 8a 00 00       	call   c0017a74 <Thr::getDriverOffsetFromAddress(unsigned long)>
c000f060:	5b                   	pop    ebx
c000f061:	5d                   	pop    ebp
c000f062:	50                   	push   eax
c000f063:	57                   	push   edi
c000f064:	e8 5f bf ff ff       	call   c000afc8 <VgaText::putx(unsigned int)>
c000f069:	58                   	pop    eax
c000f06a:	5a                   	pop    edx
c000f06b:	56                   	push   esi
c000f06c:	68 da 4a 02 c0       	push   0xc0024ada
c000f071:	e8 81 dc ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000f076:	83 c4 10             	add    esp,0x10
c000f079:	fa                   	cli    
c000f07a:	f4                   	hlt    
c000f07b:	eb fe                	jmp    c000f07b <displayDebugInfo(regs*)+0x48d>

c000f07d <x87EmulHandler(regs*, void*)>:
c000f07d:	83 ec 0c             	sub    esp,0xc
c000f080:	0f 20 c2             	mov    edx,cr0
c000f083:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f088:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000f08c:	75 4b                	jne    c000f0d9 <x87EmulHandler(regs*, void*)+0x5c>
c000f08e:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c000f093:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000f099:	85 c0                	test   eax,eax
c000f09b:	74 05                	je     c000f0a2 <x87EmulHandler(regs*, void*)+0x25>
c000f09d:	83 e2 08             	and    edx,0x8
c000f0a0:	75 17                	jne    c000f0b9 <x87EmulHandler(regs*, void*)+0x3c>
c000f0a2:	83 ec 0c             	sub    esp,0xc
c000f0a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0a9:	e8 3c ae 00 00       	call   c0019eea <Vm::x87Handler(regs*)>
c000f0ae:	83 c4 10             	add    esp,0x10
c000f0b1:	84 c0                	test   al,al
c000f0b3:	74 24                	je     c000f0d9 <x87EmulHandler(regs*, void*)+0x5c>
c000f0b5:	83 c4 0c             	add    esp,0xc
c000f0b8:	c3                   	ret    
c000f0b9:	83 ec 0c             	sub    esp,0xc
c000f0bc:	68 00 4b 02 c0       	push   0xc0024b00
c000f0c1:	e8 31 dc ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000f0c6:	0f 06                	clts   
c000f0c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f0cd:	83 c4 10             	add    esp,0x10
c000f0d0:	a3 88 7c 02 c0       	mov    ds:0xc0027c88,eax
c000f0d5:	83 c4 0c             	add    esp,0xc
c000f0d8:	c3                   	ret    
c000f0d9:	83 ec 0c             	sub    esp,0xc
c000f0dc:	68 ea 4a 02 c0       	push   0xc0024aea
c000f0e1:	e8 11 dc ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000f0e6:	5a                   	pop    edx
c000f0e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0eb:	e8 fe fa ff ff       	call   c000ebee <displayDebugInfo(regs*)>

c000f0f0 <gpFault(regs*, void*)>:
c000f0f0:	53                   	push   ebx
c000f0f1:	83 ec 14             	sub    esp,0x14
c000f0f4:	c7 05 84 7c 02 c0 a6 93 01 c0 	mov    DWORD PTR ds:0xc0027c84,0xc00193a6
c000f0fe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000f102:	53                   	push   ebx
c000f103:	e8 9e a2 00 00       	call   c00193a6 <Vm::faultHandler(regs*)>
c000f108:	83 c4 10             	add    esp,0x10
c000f10b:	84 c0                	test   al,al
c000f10d:	74 05                	je     c000f114 <gpFault(regs*, void*)+0x24>
c000f10f:	83 c4 08             	add    esp,0x8
c000f112:	5b                   	pop    ebx
c000f113:	c3                   	ret    
c000f114:	83 ec 0c             	sub    esp,0xc
c000f117:	68 0d 4b 02 c0       	push   0xc0024b0d
c000f11c:	e8 d6 db ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000f121:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f124:	e8 c5 fa ff ff       	call   c000ebee <displayDebugInfo(regs*)>

c000f129 <pgFault(regs*, void*)>:
c000f129:	53                   	push   ebx
c000f12a:	83 ec 10             	sub    esp,0x10
c000f12d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f131:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f134:	68 28 4b 02 c0       	push   0xc0024b28
c000f139:	e8 b9 db ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000f13e:	0f 20 d0             	mov    eax,cr2
c000f141:	5a                   	pop    edx
c000f142:	59                   	pop    ecx
c000f143:	50                   	push   eax
c000f144:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f149:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f14c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000f152:	e8 1b d7 ff ff       	call   c000c872 <VAS::tryLoadBackOffDisk(unsigned long)>
c000f157:	83 c4 10             	add    esp,0x10
c000f15a:	84 c0                	test   al,al
c000f15c:	74 05                	je     c000f163 <pgFault(regs*, void*)+0x3a>
c000f15e:	83 c4 08             	add    esp,0x8
c000f161:	5b                   	pop    ebx
c000f162:	c3                   	ret    
c000f163:	83 ec 0c             	sub    esp,0xc
c000f166:	68 3d 4b 02 c0       	push   0xc0024b3d
c000f16b:	e8 87 db ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000f170:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f173:	e8 76 fa ff ff       	call   c000ebee <displayDebugInfo(regs*)>

c000f178 <otherISRHandler(regs*, void*)>:
c000f178:	53                   	push   ebx
c000f179:	83 ec 0c             	sub    esp,0xc
c000f17c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f180:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f183:	50                   	push   eax
c000f184:	50                   	push   eax
c000f185:	68 4a 4b 02 c0       	push   0xc0024b4a
c000f18a:	e8 68 db ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000f18f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f192:	e8 57 fa ff ff       	call   c000ebee <displayDebugInfo(regs*)>

c000f197 <opcodeFault(regs*, void*)>:
c000f197:	55                   	push   ebp
c000f198:	89 e5                	mov    ebp,esp
c000f19a:	56                   	push   esi
c000f19b:	53                   	push   ebx
c000f19c:	83 ec 30             	sub    esp,0x30
c000f19f:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c000f1a4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f1aa:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000f1b0:	84 c0                	test   al,al
c000f1b2:	74 24                	je     c000f1d8 <opcodeFault(regs*, void*)+0x41>
c000f1b4:	83 ec 0c             	sub    esp,0xc
c000f1b7:	68 68 4b 02 c0       	push   0xc0024b68
c000f1bc:	e8 36 db ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000f1c1:	83 c4 10             	add    esp,0x10
c000f1c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1c7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f1ca:	8d 50 19             	lea    edx,[eax+0x19]
c000f1cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1d0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f1d3:	e9 7b 03 00 00       	jmp    c000f553 <opcodeFault(regs*, void*)+0x3bc>
c000f1d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1db:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f1de:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f1e1:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000f1e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1e8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f1eb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f1ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f1f1:	8a 00                	mov    al,BYTE PTR [eax]
c000f1f3:	3c f0                	cmp    al,0xf0
c000f1f5:	75 17                	jne    c000f20e <opcodeFault(regs*, void*)+0x77>
c000f1f7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f1fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1fd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f200:	8d 50 01             	lea    edx,[eax+0x1]
c000f203:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f206:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f209:	e9 d6 00 00 00       	jmp    c000f2e4 <opcodeFault(regs*, void*)+0x14d>
c000f20e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f211:	8a 00                	mov    al,BYTE PTR [eax]
c000f213:	3c f2                	cmp    al,0xf2
c000f215:	74 09                	je     c000f220 <opcodeFault(regs*, void*)+0x89>
c000f217:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f21a:	8a 00                	mov    al,BYTE PTR [eax]
c000f21c:	3c f3                	cmp    al,0xf3
c000f21e:	75 1b                	jne    c000f23b <opcodeFault(regs*, void*)+0xa4>
c000f220:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f224:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f227:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f22a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f22d:	8d 50 01             	lea    edx,[eax+0x1]
c000f230:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f233:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f236:	e9 a9 00 00 00       	jmp    c000f2e4 <opcodeFault(regs*, void*)+0x14d>
c000f23b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f23e:	8a 00                	mov    al,BYTE PTR [eax]
c000f240:	3c 66                	cmp    al,0x66
c000f242:	75 1b                	jne    c000f25f <opcodeFault(regs*, void*)+0xc8>
c000f244:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f248:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f24b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f24e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f251:	8d 50 01             	lea    edx,[eax+0x1]
c000f254:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f257:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f25a:	e9 85 00 00 00       	jmp    c000f2e4 <opcodeFault(regs*, void*)+0x14d>
c000f25f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f262:	8a 00                	mov    al,BYTE PTR [eax]
c000f264:	3c 67                	cmp    al,0x67
c000f266:	75 18                	jne    c000f280 <opcodeFault(regs*, void*)+0xe9>
c000f268:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f26c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f26f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f272:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f275:	8d 50 01             	lea    edx,[eax+0x1]
c000f278:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f27b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f27e:	eb 64                	jmp    c000f2e4 <opcodeFault(regs*, void*)+0x14d>
c000f280:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f283:	8a 00                	mov    al,BYTE PTR [eax]
c000f285:	3c 2e                	cmp    al,0x2e
c000f287:	74 09                	je     c000f292 <opcodeFault(regs*, void*)+0xfb>
c000f289:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f28c:	8a 00                	mov    al,BYTE PTR [eax]
c000f28e:	3c 3e                	cmp    al,0x3e
c000f290:	75 18                	jne    c000f2aa <opcodeFault(regs*, void*)+0x113>
c000f292:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f296:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f299:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f29c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f29f:	8d 50 01             	lea    edx,[eax+0x1]
c000f2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2a5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f2a8:	eb 3a                	jmp    c000f2e4 <opcodeFault(regs*, void*)+0x14d>
c000f2aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2ad:	8a 00                	mov    al,BYTE PTR [eax]
c000f2af:	3c 36                	cmp    al,0x36
c000f2b1:	74 1b                	je     c000f2ce <opcodeFault(regs*, void*)+0x137>
c000f2b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2b6:	8a 00                	mov    al,BYTE PTR [eax]
c000f2b8:	3c 26                	cmp    al,0x26
c000f2ba:	74 12                	je     c000f2ce <opcodeFault(regs*, void*)+0x137>
c000f2bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2bf:	8a 00                	mov    al,BYTE PTR [eax]
c000f2c1:	3c 64                	cmp    al,0x64
c000f2c3:	74 09                	je     c000f2ce <opcodeFault(regs*, void*)+0x137>
c000f2c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2c8:	8a 00                	mov    al,BYTE PTR [eax]
c000f2ca:	3c 65                	cmp    al,0x65
c000f2cc:	75 16                	jne    c000f2e4 <opcodeFault(regs*, void*)+0x14d>
c000f2ce:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f2d2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f2d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2d8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2db:	8d 50 01             	lea    edx,[eax+0x1]
c000f2de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2e1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f2e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2e7:	8a 00                	mov    al,BYTE PTR [eax]
c000f2e9:	3c 0f                	cmp    al,0xf
c000f2eb:	0f 85 8d 01 00 00    	jne    c000f47e <opcodeFault(regs*, void*)+0x2e7>
c000f2f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2f4:	40                   	inc    eax
c000f2f5:	8a 00                	mov    al,BYTE PTR [eax]
c000f2f7:	3c c7                	cmp    al,0xc7
c000f2f9:	0f 85 7f 01 00 00    	jne    c000f47e <opcodeFault(regs*, void*)+0x2e7>
c000f2ff:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f302:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f305:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f308:	8d 50 01             	lea    edx,[eax+0x1]
c000f30b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f30e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f311:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f314:	50                   	push   eax
c000f315:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f318:	50                   	push   eax
c000f319:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f31c:	50                   	push   eax
c000f31d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f320:	e8 97 4c 00 00       	call   c0013fbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f325:	83 c4 10             	add    esp,0x10
c000f328:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f32b:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f32e:	83 f0 01             	xor    eax,0x1
c000f331:	84 c0                	test   al,al
c000f333:	0f 84 45 01 00 00    	je     c000f47e <opcodeFault(regs*, void*)+0x2e7>
c000f339:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f33c:	3c 01                	cmp    al,0x1
c000f33e:	0f 85 3a 01 00 00    	jne    c000f47e <opcodeFault(regs*, void*)+0x2e7>
c000f344:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f347:	83 f0 01             	xor    eax,0x1
c000f34a:	84 c0                	test   al,al
c000f34c:	0f 84 2c 01 00 00    	je     c000f47e <opcodeFault(regs*, void*)+0x2e7>
c000f352:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f355:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f358:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f35b:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f362:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f365:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f368:	89 c2                	mov    edx,eax
c000f36a:	b8 00 00 00 00       	mov    eax,0x0
c000f36f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f372:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f378:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f37b:	ba 00 00 00 00       	mov    edx,0x0
c000f380:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f383:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f386:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f389:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f38c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f38f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f396:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f399:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f39c:	89 c2                	mov    edx,eax
c000f39e:	b8 00 00 00 00       	mov    eax,0x0
c000f3a3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f3a6:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f3a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3ac:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f3af:	ba 00 00 00 00       	mov    edx,0x0
c000f3b4:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f3b7:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f3ba:	fa                   	cli    
c000f3bb:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c000f3c0:	40                   	inc    eax
c000f3c1:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c000f3c6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f3c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f3cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3ce:	89 c1                	mov    ecx,eax
c000f3d0:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f3d3:	89 cb                	mov    ebx,ecx
c000f3d5:	89 d0                	mov    eax,edx
c000f3d7:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f3da:	89 c6                	mov    esi,eax
c000f3dc:	89 f0                	mov    eax,esi
c000f3de:	09 d8                	or     eax,ebx
c000f3e0:	85 c0                	test   eax,eax
c000f3e2:	75 21                	jne    c000f405 <opcodeFault(regs*, void*)+0x26e>
c000f3e4:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f3e7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f3ea:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f3ed:	89 01                	mov    DWORD PTR [ecx],eax
c000f3ef:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f3f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3f5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f3f8:	83 c8 40             	or     eax,0x40
c000f3fb:	89 c2                	mov    edx,eax
c000f3fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f400:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f403:	eb 3e                	jmp    c000f443 <opcodeFault(regs*, void*)+0x2ac>
c000f405:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f408:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f40b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f40d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f410:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f413:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f416:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f419:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f41c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f41f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f422:	89 d0                	mov    eax,edx
c000f424:	31 d2                	xor    edx,edx
c000f426:	89 c3                	mov    ebx,eax
c000f428:	89 d6                	mov    esi,edx
c000f42a:	89 da                	mov    edx,ebx
c000f42c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f42f:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f432:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f435:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f438:	83 e0 bf             	and    eax,0xffffffbf
c000f43b:	89 c2                	mov    edx,eax
c000f43d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f440:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f443:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c000f448:	48                   	dec    eax
c000f449:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c000f44e:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c000f453:	85 c0                	test   eax,eax
c000f455:	75 01                	jne    c000f458 <opcodeFault(regs*, void*)+0x2c1>
c000f457:	fb                   	sti    
c000f458:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f45b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f45e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f461:	01 c2                	add    edx,eax
c000f463:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f466:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f469:	83 ec 0c             	sub    esp,0xc
c000f46c:	68 8b 4b 02 c0       	push   0xc0024b8b
c000f471:	e8 81 d8 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000f476:	83 c4 10             	add    esp,0x10
c000f479:	e9 d5 00 00 00       	jmp    c000f553 <opcodeFault(regs*, void*)+0x3bc>
c000f47e:	83 ec 0c             	sub    esp,0xc
c000f481:	68 9e 4b 02 c0       	push   0xc0024b9e
c000f486:	e8 6c d8 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000f48b:	83 c4 10             	add    esp,0x10
c000f48e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f491:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f494:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f497:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f49a:	c1 e0 04             	shl    eax,0x4
c000f49d:	01 d0                	add    eax,edx
c000f49f:	83 c0 03             	add    eax,0x3
c000f4a2:	8a 00                	mov    al,BYTE PTR [eax]
c000f4a4:	0f b6 d8             	movzx  ebx,al
c000f4a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4aa:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f4ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4b0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f4b3:	c1 e0 04             	shl    eax,0x4
c000f4b6:	01 d0                	add    eax,edx
c000f4b8:	83 c0 02             	add    eax,0x2
c000f4bb:	8a 00                	mov    al,BYTE PTR [eax]
c000f4bd:	0f b6 c8             	movzx  ecx,al
c000f4c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4c3:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f4c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4c9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f4cc:	c1 e0 04             	shl    eax,0x4
c000f4cf:	01 d0                	add    eax,edx
c000f4d1:	40                   	inc    eax
c000f4d2:	8a 00                	mov    al,BYTE PTR [eax]
c000f4d4:	0f b6 d0             	movzx  edx,al
c000f4d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4da:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f4dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4e0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f4e3:	c1 e0 04             	shl    eax,0x4
c000f4e6:	01 f0                	add    eax,esi
c000f4e8:	8a 00                	mov    al,BYTE PTR [eax]
c000f4ea:	0f b6 c0             	movzx  eax,al
c000f4ed:	83 ec 0c             	sub    esp,0xc
c000f4f0:	53                   	push   ebx
c000f4f1:	51                   	push   ecx
c000f4f2:	52                   	push   edx
c000f4f3:	50                   	push   eax
c000f4f4:	68 b0 4b 02 c0       	push   0xc0024bb0
c000f4f9:	e8 f9 d7 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000f4fe:	83 c4 20             	add    esp,0x20
c000f501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f504:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f507:	83 c0 03             	add    eax,0x3
c000f50a:	8a 00                	mov    al,BYTE PTR [eax]
c000f50c:	0f b6 d8             	movzx  ebx,al
c000f50f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f512:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f515:	83 c0 02             	add    eax,0x2
c000f518:	8a 00                	mov    al,BYTE PTR [eax]
c000f51a:	0f b6 c8             	movzx  ecx,al
c000f51d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f520:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f523:	40                   	inc    eax
c000f524:	8a 00                	mov    al,BYTE PTR [eax]
c000f526:	0f b6 d0             	movzx  edx,al
c000f529:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f52c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f52f:	8a 00                	mov    al,BYTE PTR [eax]
c000f531:	0f b6 c0             	movzx  eax,al
c000f534:	83 ec 0c             	sub    esp,0xc
c000f537:	53                   	push   ebx
c000f538:	51                   	push   ecx
c000f539:	52                   	push   edx
c000f53a:	50                   	push   eax
c000f53b:	68 d8 4b 02 c0       	push   0xc0024bd8
c000f540:	e8 b2 d7 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c000f545:	83 c4 20             	add    esp,0x20
c000f548:	83 ec 0c             	sub    esp,0xc
c000f54b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f54e:	e8 9b f6 ff ff       	call   c000ebee <displayDebugInfo(regs*)>
c000f553:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f556:	5b                   	pop    ebx
c000f557:	5e                   	pop    esi
c000f558:	5d                   	pop    ebp
c000f559:	c3                   	ret    

c000f55a <displayProgramFault(char const*)>:
c000f55a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f55f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f562:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f568:	85 c0                	test   eax,eax
c000f56a:	74 15                	je     c000f581 <displayProgramFault(char const*)+0x27>
c000f56c:	83 ec 0c             	sub    esp,0xc
c000f56f:	6a 04                	push   0x4
c000f571:	6a 0f                	push   0xf
c000f573:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f577:	50                   	push   eax
c000f578:	e8 8d b7 ff ff       	call   c000ad0a <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f57d:	83 c4 1c             	add    esp,0x1c
c000f580:	c3                   	ret    
c000f581:	c3                   	ret    

c000f582 <setupInterruptController()>:
c000f582:	55                   	push   ebp
c000f583:	89 e5                	mov    ebp,esp
c000f585:	53                   	push   ebx
c000f586:	83 ec 24             	sub    esp,0x24
c000f589:	b8 00 00 00 00       	mov    eax,0x0
c000f58e:	85 c0                	test   eax,eax
c000f590:	0f 95 c0             	setne  al
c000f593:	84 c0                	test   al,al
c000f595:	74 5b                	je     c000f5f2 <setupInterruptController()+0x70>
c000f597:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f59e:	83 ec 0c             	sub    esp,0xc
c000f5a1:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f5a4:	e8 5e a4 ff ff       	call   c0009a07 <malloc>
c000f5a9:	83 c4 10             	add    esp,0x10
c000f5ac:	89 c3                	mov    ebx,eax
c000f5ae:	83 ec 0c             	sub    esp,0xc
c000f5b1:	53                   	push   ebx
c000f5b2:	e8 f3 1d 01 00       	call   c00213aa <APIC::APIC()>
c000f5b7:	83 c4 10             	add    esp,0x10
c000f5ba:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f5bd:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f5c0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f5c3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5c5:	83 c0 08             	add    eax,0x8
c000f5c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5ca:	6a 00                	push   0x0
c000f5cc:	6a 00                	push   0x0
c000f5ce:	6a 00                	push   0x0
c000f5d0:	52                   	push   edx
c000f5d1:	ff d0                	call   eax
c000f5d3:	83 c4 10             	add    esp,0x10
c000f5d6:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c000f5db:	83 ec 08             	sub    esp,0x8
c000f5de:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f5e1:	50                   	push   eax
c000f5e2:	e8 97 eb ff ff       	call   c000e17e <Device::addChild(Device*)>
c000f5e7:	83 c4 10             	add    esp,0x10
c000f5ea:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f5ed:	e9 79 03 00 00       	jmp    c000f96b <setupInterruptController()+0x3e9>
c000f5f2:	a0 60 84 02 c0       	mov    al,ds:0xc0028460
c000f5f7:	84 c0                	test   al,al
c000f5f9:	75 14                	jne    c000f60f <setupInterruptController()+0x8d>
c000f5fb:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c000f600:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000f606:	83 e2 fe             	and    edx,0xfffffffe
c000f609:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000f60f:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c000f614:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000f61a:	83 e0 01             	and    eax,0x1
c000f61d:	84 c0                	test   al,al
c000f61f:	0f 95 c0             	setne  al
c000f622:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000f625:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000f62c:	83 ec 0c             	sub    esp,0xc
c000f62f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000f632:	e8 d0 a3 ff ff       	call   c0009a07 <malloc>
c000f637:	83 c4 10             	add    esp,0x10
c000f63a:	89 c3                	mov    ebx,eax
c000f63c:	83 ec 0c             	sub    esp,0xc
c000f63f:	53                   	push   ebx
c000f640:	e8 bd 22 01 00       	call   c0021902 <PIC::PIC()>
c000f645:	83 c4 10             	add    esp,0x10
c000f648:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f64b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f64e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f651:	8b 00                	mov    eax,DWORD PTR [eax]
c000f653:	83 c0 08             	add    eax,0x8
c000f656:	8b 00                	mov    eax,DWORD PTR [eax]
c000f658:	6a 00                	push   0x0
c000f65a:	6a 00                	push   0x0
c000f65c:	6a 00                	push   0x0
c000f65e:	52                   	push   edx
c000f65f:	ff d0                	call   eax
c000f661:	83 c4 10             	add    esp,0x10
c000f664:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000f668:	74 73                	je     c000f6dd <setupInterruptController()+0x15b>
c000f66a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f66d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f670:	8b 00                	mov    eax,DWORD PTR [eax]
c000f672:	83 c0 0c             	add    eax,0xc
c000f675:	8b 00                	mov    eax,DWORD PTR [eax]
c000f677:	6a 00                	push   0x0
c000f679:	6a 00                	push   0x0
c000f67b:	6a 00                	push   0x0
c000f67d:	52                   	push   edx
c000f67e:	ff d0                	call   eax
c000f680:	83 c4 10             	add    esp,0x10
c000f683:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f687:	74 15                	je     c000f69e <setupInterruptController()+0x11c>
c000f689:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f68c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f68e:	83 c0 04             	add    eax,0x4
c000f691:	8b 00                	mov    eax,DWORD PTR [eax]
c000f693:	83 ec 0c             	sub    esp,0xc
c000f696:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f699:	ff d0                	call   eax
c000f69b:	83 c4 10             	add    esp,0x10
c000f69e:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000f6a5:	83 ec 0c             	sub    esp,0xc
c000f6a8:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f6ab:	e8 57 a3 ff ff       	call   c0009a07 <malloc>
c000f6b0:	83 c4 10             	add    esp,0x10
c000f6b3:	89 c3                	mov    ebx,eax
c000f6b5:	83 ec 0c             	sub    esp,0xc
c000f6b8:	53                   	push   ebx
c000f6b9:	e8 ec 1c 01 00       	call   c00213aa <APIC::APIC()>
c000f6be:	83 c4 10             	add    esp,0x10
c000f6c1:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f6c4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f6c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6ca:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6cc:	83 c0 08             	add    eax,0x8
c000f6cf:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6d1:	6a 00                	push   0x0
c000f6d3:	6a 00                	push   0x0
c000f6d5:	6a 00                	push   0x0
c000f6d7:	52                   	push   edx
c000f6d8:	ff d0                	call   eax
c000f6da:	83 c4 10             	add    esp,0x10
c000f6dd:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c000f6e2:	83 ec 08             	sub    esp,0x8
c000f6e5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6e8:	50                   	push   eax
c000f6e9:	e8 90 ea ff ff       	call   c000e17e <Device::addChild(Device*)>
c000f6ee:	83 c4 10             	add    esp,0x10
c000f6f1:	c7 05 88 7c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027c88,0x0
c000f6fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6fe:	8b 00                	mov    eax,DWORD PTR [eax]
c000f700:	83 c0 24             	add    eax,0x24
c000f703:	8b 00                	mov    eax,DWORD PTR [eax]
c000f705:	6a 00                	push   0x0
c000f707:	68 78 f1 00 c0       	push   0xc000f178
c000f70c:	6a 00                	push   0x0
c000f70e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f711:	ff d0                	call   eax
c000f713:	83 c4 10             	add    esp,0x10
c000f716:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f719:	8b 00                	mov    eax,DWORD PTR [eax]
c000f71b:	83 c0 24             	add    eax,0x24
c000f71e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f720:	6a 00                	push   0x0
c000f722:	68 78 f1 00 c0       	push   0xc000f178
c000f727:	6a 01                	push   0x1
c000f729:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f72c:	ff d0                	call   eax
c000f72e:	83 c4 10             	add    esp,0x10
c000f731:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f734:	8b 00                	mov    eax,DWORD PTR [eax]
c000f736:	83 c0 24             	add    eax,0x24
c000f739:	8b 00                	mov    eax,DWORD PTR [eax]
c000f73b:	6a 00                	push   0x0
c000f73d:	68 4b ea 00 c0       	push   0xc000ea4b
c000f742:	6a 02                	push   0x2
c000f744:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f747:	ff d0                	call   eax
c000f749:	83 c4 10             	add    esp,0x10
c000f74c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f74f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f751:	83 c0 24             	add    eax,0x24
c000f754:	8b 00                	mov    eax,DWORD PTR [eax]
c000f756:	6a 00                	push   0x0
c000f758:	68 78 f1 00 c0       	push   0xc000f178
c000f75d:	6a 03                	push   0x3
c000f75f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f762:	ff d0                	call   eax
c000f764:	83 c4 10             	add    esp,0x10
c000f767:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f76a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f76c:	83 c0 24             	add    eax,0x24
c000f76f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f771:	6a 00                	push   0x0
c000f773:	68 78 f1 00 c0       	push   0xc000f178
c000f778:	6a 04                	push   0x4
c000f77a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f77d:	ff d0                	call   eax
c000f77f:	83 c4 10             	add    esp,0x10
c000f782:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f785:	8b 00                	mov    eax,DWORD PTR [eax]
c000f787:	83 c0 24             	add    eax,0x24
c000f78a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f78c:	6a 00                	push   0x0
c000f78e:	68 78 f1 00 c0       	push   0xc000f178
c000f793:	6a 05                	push   0x5
c000f795:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f798:	ff d0                	call   eax
c000f79a:	83 c4 10             	add    esp,0x10
c000f79d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7a0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7a2:	83 c0 24             	add    eax,0x24
c000f7a5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7a7:	6a 00                	push   0x0
c000f7a9:	68 97 f1 00 c0       	push   0xc000f197
c000f7ae:	6a 06                	push   0x6
c000f7b0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7b3:	ff d0                	call   eax
c000f7b5:	83 c4 10             	add    esp,0x10
c000f7b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7bd:	83 c0 24             	add    eax,0x24
c000f7c0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7c2:	6a 00                	push   0x0
c000f7c4:	68 7d f0 00 c0       	push   0xc000f07d
c000f7c9:	6a 07                	push   0x7
c000f7cb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7ce:	ff d0                	call   eax
c000f7d0:	83 c4 10             	add    esp,0x10
c000f7d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7d6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7d8:	83 c0 24             	add    eax,0x24
c000f7db:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7dd:	6a 00                	push   0x0
c000f7df:	68 66 e8 00 c0       	push   0xc000e866
c000f7e4:	6a 08                	push   0x8
c000f7e6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7e9:	ff d0                	call   eax
c000f7eb:	83 c4 10             	add    esp,0x10
c000f7ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7f1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7f3:	83 c0 24             	add    eax,0x24
c000f7f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7f8:	6a 00                	push   0x0
c000f7fa:	68 78 f1 00 c0       	push   0xc000f178
c000f7ff:	6a 09                	push   0x9
c000f801:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f804:	ff d0                	call   eax
c000f806:	83 c4 10             	add    esp,0x10
c000f809:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f80c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f80e:	83 c0 24             	add    eax,0x24
c000f811:	8b 00                	mov    eax,DWORD PTR [eax]
c000f813:	6a 00                	push   0x0
c000f815:	68 78 f1 00 c0       	push   0xc000f178
c000f81a:	6a 0a                	push   0xa
c000f81c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f81f:	ff d0                	call   eax
c000f821:	83 c4 10             	add    esp,0x10
c000f824:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f827:	8b 00                	mov    eax,DWORD PTR [eax]
c000f829:	83 c0 24             	add    eax,0x24
c000f82c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f82e:	6a 00                	push   0x0
c000f830:	68 78 f1 00 c0       	push   0xc000f178
c000f835:	6a 0b                	push   0xb
c000f837:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f83a:	ff d0                	call   eax
c000f83c:	83 c4 10             	add    esp,0x10
c000f83f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f842:	8b 00                	mov    eax,DWORD PTR [eax]
c000f844:	83 c0 24             	add    eax,0x24
c000f847:	8b 00                	mov    eax,DWORD PTR [eax]
c000f849:	6a 00                	push   0x0
c000f84b:	68 78 f1 00 c0       	push   0xc000f178
c000f850:	6a 0c                	push   0xc
c000f852:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f855:	ff d0                	call   eax
c000f857:	83 c4 10             	add    esp,0x10
c000f85a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f85d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f85f:	83 c0 24             	add    eax,0x24
c000f862:	8b 00                	mov    eax,DWORD PTR [eax]
c000f864:	6a 00                	push   0x0
c000f866:	68 f0 f0 00 c0       	push   0xc000f0f0
c000f86b:	6a 0d                	push   0xd
c000f86d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f870:	ff d0                	call   eax
c000f872:	83 c4 10             	add    esp,0x10
c000f875:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f878:	8b 00                	mov    eax,DWORD PTR [eax]
c000f87a:	83 c0 24             	add    eax,0x24
c000f87d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f87f:	6a 00                	push   0x0
c000f881:	68 29 f1 00 c0       	push   0xc000f129
c000f886:	6a 0e                	push   0xe
c000f888:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f88b:	ff d0                	call   eax
c000f88d:	83 c4 10             	add    esp,0x10
c000f890:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f893:	8b 00                	mov    eax,DWORD PTR [eax]
c000f895:	83 c0 24             	add    eax,0x24
c000f898:	8b 00                	mov    eax,DWORD PTR [eax]
c000f89a:	6a 00                	push   0x0
c000f89c:	68 78 f1 00 c0       	push   0xc000f178
c000f8a1:	6a 0f                	push   0xf
c000f8a3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8a6:	ff d0                	call   eax
c000f8a8:	83 c4 10             	add    esp,0x10
c000f8ab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8b0:	83 c0 24             	add    eax,0x24
c000f8b3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8b5:	6a 00                	push   0x0
c000f8b7:	68 78 f1 00 c0       	push   0xc000f178
c000f8bc:	6a 10                	push   0x10
c000f8be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8c1:	ff d0                	call   eax
c000f8c3:	83 c4 10             	add    esp,0x10
c000f8c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8c9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8cb:	83 c0 24             	add    eax,0x24
c000f8ce:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8d0:	6a 00                	push   0x0
c000f8d2:	68 78 f1 00 c0       	push   0xc000f178
c000f8d7:	6a 11                	push   0x11
c000f8d9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8dc:	ff d0                	call   eax
c000f8de:	83 c4 10             	add    esp,0x10
c000f8e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8e4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8e6:	83 c0 24             	add    eax,0x24
c000f8e9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8eb:	6a 00                	push   0x0
c000f8ed:	68 78 f1 00 c0       	push   0xc000f178
c000f8f2:	6a 12                	push   0x12
c000f8f4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8f7:	ff d0                	call   eax
c000f8f9:	83 c4 10             	add    esp,0x10
c000f8fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8ff:	8b 00                	mov    eax,DWORD PTR [eax]
c000f901:	83 c0 24             	add    eax,0x24
c000f904:	8b 00                	mov    eax,DWORD PTR [eax]
c000f906:	6a 00                	push   0x0
c000f908:	68 78 f1 00 c0       	push   0xc000f178
c000f90d:	6a 13                	push   0x13
c000f90f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f912:	ff d0                	call   eax
c000f914:	83 c4 10             	add    esp,0x10
c000f917:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f91a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f91c:	83 c0 24             	add    eax,0x24
c000f91f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f921:	6a 00                	push   0x0
c000f923:	68 78 f1 00 c0       	push   0xc000f178
c000f928:	6a 14                	push   0x14
c000f92a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f92d:	ff d0                	call   eax
c000f92f:	83 c4 10             	add    esp,0x10
c000f932:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f935:	8b 00                	mov    eax,DWORD PTR [eax]
c000f937:	83 c0 24             	add    eax,0x24
c000f93a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f93c:	6a 00                	push   0x0
c000f93e:	68 78 f1 00 c0       	push   0xc000f178
c000f943:	6a 1e                	push   0x1e
c000f945:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f948:	ff d0                	call   eax
c000f94a:	83 c4 10             	add    esp,0x10
c000f94d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f950:	8b 00                	mov    eax,DWORD PTR [eax]
c000f952:	83 c0 24             	add    eax,0x24
c000f955:	8b 00                	mov    eax,DWORD PTR [eax]
c000f957:	6a 00                	push   0x0
c000f959:	68 b3 6a 01 c0       	push   0xc0016ab3
c000f95e:	6a 60                	push   0x60
c000f960:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f963:	ff d0                	call   eax
c000f965:	83 c4 10             	add    esp,0x10
c000f968:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f96b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f96e:	c9                   	leave  
c000f96f:	c3                   	ret    

c000f970 <InterruptController::convertLegacyIRQNumber(int)>:
c000f970:	55                   	push   ebp
c000f971:	89 e5                	mov    ebp,esp
c000f973:	83 ec 08             	sub    esp,0x8
c000f976:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f979:	83 ec 0c             	sub    esp,0xc
c000f97c:	50                   	push   eax
c000f97d:	e8 fc ea ff ff       	call   c000e47e <Device::getName()>
c000f982:	83 c4 10             	add    esp,0x10
c000f985:	8a 00                	mov    al,BYTE PTR [eax]
c000f987:	3c 41                	cmp    al,0x41
c000f989:	0f 94 c0             	sete   al
c000f98c:	84 c0                	test   al,al
c000f98e:	74 28                	je     c000f9b8 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f990:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000f994:	7f 12                	jg     c000f9a8 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000f996:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f999:	05 40 72 02 c0       	add    eax,0xc0027240
c000f99e:	8a 00                	mov    al,BYTE PTR [eax]
c000f9a0:	0f b6 c0             	movzx  eax,al
c000f9a3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000f9a6:	eb 10                	jmp    c000f9b8 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f9a8:	83 ec 0c             	sub    esp,0xc
c000f9ab:	68 00 4c 02 c0       	push   0xc0024c00
c000f9b0:	e8 ee 4e 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c000f9b5:	83 c4 10             	add    esp,0x10
c000f9b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f9bb:	c9                   	leave  
c000f9bc:	c3                   	ret    
c000f9bd:	90                   	nop

c000f9be <startGUI(void*)>:
c000f9be:	55                   	push   ebp
c000f9bf:	89 e5                	mov    ebp,esp
c000f9c1:	53                   	push   ebx
c000f9c2:	83 ec 04             	sub    esp,0x4
c000f9c5:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c000f9ca:	48                   	dec    eax
c000f9cb:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c000f9d0:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c000f9d5:	85 c0                	test   eax,eax
c000f9d7:	75 01                	jne    c000f9da <startGUI(void*)+0x1c>
c000f9d9:	fb                   	sti    
c000f9da:	8b 1d 48 7b 02 c0    	mov    ebx,DWORD PTR ds:0xc0027b48
c000f9e0:	83 ec 08             	sub    esp,0x8
c000f9e3:	6a 01                	push   0x1
c000f9e5:	68 80 4c 02 c0       	push   0xc0024c80
c000f9ea:	e8 9f 80 00 00       	call   c0017a8e <Thr::loadDLL(char const*, bool)>
c000f9ef:	83 c4 10             	add    esp,0x10
c000f9f2:	83 ec 08             	sub    esp,0x8
c000f9f5:	53                   	push   ebx
c000f9f6:	50                   	push   eax
c000f9f7:	e8 c3 82 00 00       	call   c0017cbf <Thr::executeDLL(unsigned long, void*)>
c000f9fc:	83 c4 10             	add    esp,0x10
c000f9ff:	8b 1d 48 7b 02 c0    	mov    ebx,DWORD PTR ds:0xc0027b48
c000fa05:	83 ec 08             	sub    esp,0x8
c000fa08:	6a 01                	push   0x1
c000fa0a:	68 9a 4c 02 c0       	push   0xc0024c9a
c000fa0f:	e8 7a 80 00 00       	call   c0017a8e <Thr::loadDLL(char const*, bool)>
c000fa14:	83 c4 10             	add    esp,0x10
c000fa17:	83 ec 08             	sub    esp,0x8
c000fa1a:	53                   	push   ebx
c000fa1b:	50                   	push   eax
c000fa1c:	e8 9e 82 00 00       	call   c0017cbf <Thr::executeDLL(unsigned long, void*)>
c000fa21:	83 c4 10             	add    esp,0x10
c000fa24:	90                   	nop
c000fa25:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fa28:	c9                   	leave  
c000fa29:	c3                   	ret    

c000fa2a <startGUIVESA(void*)>:
c000fa2a:	55                   	push   ebp
c000fa2b:	89 e5                	mov    ebp,esp
c000fa2d:	53                   	push   ebx
c000fa2e:	83 ec 04             	sub    esp,0x4
c000fa31:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c000fa36:	48                   	dec    eax
c000fa37:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c000fa3c:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c000fa41:	85 c0                	test   eax,eax
c000fa43:	75 01                	jne    c000fa46 <startGUIVESA(void*)+0x1c>
c000fa45:	fb                   	sti    
c000fa46:	8b 1d 48 7b 02 c0    	mov    ebx,DWORD PTR ds:0xc0027b48
c000fa4c:	83 ec 08             	sub    esp,0x8
c000fa4f:	6a 01                	push   0x1
c000fa51:	68 b4 4c 02 c0       	push   0xc0024cb4
c000fa56:	e8 33 80 00 00       	call   c0017a8e <Thr::loadDLL(char const*, bool)>
c000fa5b:	83 c4 10             	add    esp,0x10
c000fa5e:	83 ec 08             	sub    esp,0x8
c000fa61:	53                   	push   ebx
c000fa62:	50                   	push   eax
c000fa63:	e8 57 82 00 00       	call   c0017cbf <Thr::executeDLL(unsigned long, void*)>
c000fa68:	83 c4 10             	add    esp,0x10
c000fa6b:	8b 1d 48 7b 02 c0    	mov    ebx,DWORD PTR ds:0xc0027b48
c000fa71:	83 ec 08             	sub    esp,0x8
c000fa74:	6a 01                	push   0x1
c000fa76:	68 9a 4c 02 c0       	push   0xc0024c9a
c000fa7b:	e8 0e 80 00 00       	call   c0017a8e <Thr::loadDLL(char const*, bool)>
c000fa80:	83 c4 10             	add    esp,0x10
c000fa83:	83 ec 08             	sub    esp,0x8
c000fa86:	53                   	push   ebx
c000fa87:	50                   	push   eax
c000fa88:	e8 32 82 00 00       	call   c0017cbf <Thr::executeDLL(unsigned long, void*)>
c000fa8d:	83 c4 10             	add    esp,0x10
c000fa90:	90                   	nop
c000fa91:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fa94:	c9                   	leave  
c000fa95:	c3                   	ret    

c000fa96 <sendKeyToTerminal(unsigned char)>:
c000fa96:	55                   	push   ebp
c000fa97:	89 e5                	mov    ebp,esp
c000fa99:	83 ec 28             	sub    esp,0x28
c000fa9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa9f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000faa2:	a1 c4 7b 02 c0       	mov    eax,ds:0xc0027bc4
c000faa7:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000faab:	83 ec 08             	sub    esp,0x8
c000faae:	52                   	push   edx
c000faaf:	50                   	push   eax
c000fab0:	e8 fd b6 ff ff       	call   c000b1b2 <VgaText::receiveKey(unsigned char)>
c000fab5:	83 c4 10             	add    esp,0x10
c000fab8:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000fabc:	0f 85 8f 00 00 00    	jne    c000fb51 <sendKeyToTerminal(unsigned char)+0xbb>
c000fac2:	fa                   	cli    
c000fac3:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c000fac8:	40                   	inc    eax
c000fac9:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c000face:	a1 04 90 02 c0       	mov    eax,ds:0xc0029004
c000fad3:	40                   	inc    eax
c000fad4:	a3 04 90 02 c0       	mov    ds:0xc0029004,eax
c000fad9:	a1 a0 7c 02 c0       	mov    eax,ds:0xc0027ca0
c000fade:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fae1:	c7 05 a0 7c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027ca0,0x0
c000faeb:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000faef:	74 1f                	je     c000fb10 <sendKeyToTerminal(unsigned char)+0x7a>
c000faf1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000faf4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000faf7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fafa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000fafd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fb00:	83 ec 0c             	sub    esp,0xc
c000fb03:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fb06:	e8 25 8e 00 00       	call   c0018930 <unblockTask(ThreadControlBlock*)>
c000fb0b:	83 c4 10             	add    esp,0x10
c000fb0e:	eb db                	jmp    c000faeb <sendKeyToTerminal(unsigned char)+0x55>
c000fb10:	a1 04 90 02 c0       	mov    eax,ds:0xc0029004
c000fb15:	48                   	dec    eax
c000fb16:	a3 04 90 02 c0       	mov    ds:0xc0029004,eax
c000fb1b:	a1 04 90 02 c0       	mov    eax,ds:0xc0029004
c000fb20:	85 c0                	test   eax,eax
c000fb22:	75 18                	jne    c000fb3c <sendKeyToTerminal(unsigned char)+0xa6>
c000fb24:	a1 00 90 02 c0       	mov    eax,ds:0xc0029000
c000fb29:	85 c0                	test   eax,eax
c000fb2b:	74 0f                	je     c000fb3c <sendKeyToTerminal(unsigned char)+0xa6>
c000fb2d:	c7 05 00 90 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029000,0x0
c000fb37:	e8 38 89 00 00       	call   c0018474 <schedule()>
c000fb3c:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c000fb41:	48                   	dec    eax
c000fb42:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c000fb47:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c000fb4c:	85 c0                	test   eax,eax
c000fb4e:	75 01                	jne    c000fb51 <sendKeyToTerminal(unsigned char)+0xbb>
c000fb50:	fb                   	sti    
c000fb51:	90                   	nop
c000fb52:	c9                   	leave  
c000fb53:	c3                   	ret    

c000fb54 <sendKeyboardToken(KeyboardToken)>:
c000fb54:	55                   	push   ebp
c000fb55:	89 e5                	mov    ebp,esp
c000fb57:	83 ec 18             	sub    esp,0x18
c000fb5a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000fb5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb60:	0f b7 c0             	movzx  eax,ax
c000fb63:	83 f2 01             	xor    edx,0x1
c000fb66:	88 90 c0 7c 02 c0    	mov    BYTE PTR [eax-0x3ffd8340],dl
c000fb6c:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000fb71:	85 c0                	test   eax,eax
c000fb73:	74 24                	je     c000fb99 <sendKeyboardToken(KeyboardToken)+0x45>
c000fb75:	8b 0d a8 7c 02 c0    	mov    ecx,DWORD PTR ds:0xc0027ca8
c000fb7b:	83 ec 04             	sub    esp,0x4
c000fb7e:	68 c0 7c 02 c0       	push   0xc0027cc0
c000fb83:	83 ec 08             	sub    esp,0x8
c000fb86:	89 e2                	mov    edx,esp
c000fb88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb8b:	89 02                	mov    DWORD PTR [edx],eax
c000fb8d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fb90:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000fb94:	ff d1                	call   ecx
c000fb96:	83 c4 10             	add    esp,0x10
c000fb99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb9c:	66 3d 03 02          	cmp    ax,0x203
c000fba0:	75 07                	jne    c000fba9 <sendKeyboardToken(KeyboardToken)+0x55>
c000fba2:	a0 c0 7d 02 c0       	mov    al,ds:0xc0027dc0
c000fba7:	84 c0                	test   al,al
c000fba9:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fbad:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000fbb0:	a0 c8 80 02 c0       	mov    al,ds:0xc00280c8
c000fbb5:	38 c2                	cmp    dl,al
c000fbb7:	74 1c                	je     c000fbd5 <sendKeyboardToken(KeyboardToken)+0x81>
c000fbb9:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000fbbc:	a2 c8 80 02 c0       	mov    ds:0xc00280c8,al
c000fbc1:	a0 c8 80 02 c0       	mov    al,ds:0xc00280c8
c000fbc6:	0f b6 c0             	movzx  eax,al
c000fbc9:	83 ec 0c             	sub    esp,0xc
c000fbcc:	50                   	push   eax
c000fbcd:	e8 20 ac ff ff       	call   c000a7f2 <setTerminalScrollLock(bool)>
c000fbd2:	83 c4 10             	add    esp,0x10
c000fbd5:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000fbd8:	84 c0                	test   al,al
c000fbda:	0f 84 ae 00 00 00    	je     c000fc8e <sendKeyboardToken(KeyboardToken)+0x13a>
c000fbe0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbe3:	66 3d 10 03          	cmp    ax,0x310
c000fbe7:	75 06                	jne    c000fbef <sendKeyboardToken(KeyboardToken)+0x9b>
c000fbe9:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000fbef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbf2:	66 3d 11 03          	cmp    ax,0x311
c000fbf6:	75 06                	jne    c000fbfe <sendKeyboardToken(KeyboardToken)+0xaa>
c000fbf8:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000fbfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc01:	66 3d 12 03          	cmp    ax,0x312
c000fc05:	75 06                	jne    c000fc0d <sendKeyboardToken(KeyboardToken)+0xb9>
c000fc07:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000fc0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc10:	66 3d 13 03          	cmp    ax,0x313
c000fc14:	75 06                	jne    c000fc1c <sendKeyboardToken(KeyboardToken)+0xc8>
c000fc16:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000fc1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc1f:	66 3d 14 03          	cmp    ax,0x314
c000fc23:	75 06                	jne    c000fc2b <sendKeyboardToken(KeyboardToken)+0xd7>
c000fc25:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000fc2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc2e:	66 3d 15 03          	cmp    ax,0x315
c000fc32:	75 06                	jne    c000fc3a <sendKeyboardToken(KeyboardToken)+0xe6>
c000fc34:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fc3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc3d:	66 3d 16 03          	cmp    ax,0x316
c000fc41:	75 06                	jne    c000fc49 <sendKeyboardToken(KeyboardToken)+0xf5>
c000fc43:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000fc49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc4c:	66 3d 17 03          	cmp    ax,0x317
c000fc50:	75 06                	jne    c000fc58 <sendKeyboardToken(KeyboardToken)+0x104>
c000fc52:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000fc58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc5b:	66 3d 18 03          	cmp    ax,0x318
c000fc5f:	75 06                	jne    c000fc67 <sendKeyboardToken(KeyboardToken)+0x113>
c000fc61:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000fc67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc6a:	66 3d 19 03          	cmp    ax,0x319
c000fc6e:	75 06                	jne    c000fc76 <sendKeyboardToken(KeyboardToken)+0x122>
c000fc70:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000fc76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc79:	66 3d 1a 03          	cmp    ax,0x31a
c000fc7d:	0f 85 c9 00 00 00    	jne    c000fd4c <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fc83:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000fc89:	e9 be 00 00 00       	jmp    c000fd4c <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fc8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc91:	66 3d 10 03          	cmp    ax,0x310
c000fc95:	75 0a                	jne    c000fca1 <sendKeyboardToken(KeyboardToken)+0x14d>
c000fc97:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000fc9d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fca1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fca4:	66 3d 11 03          	cmp    ax,0x311
c000fca8:	75 0a                	jne    c000fcb4 <sendKeyboardToken(KeyboardToken)+0x160>
c000fcaa:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000fcb0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fcb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcb7:	66 3d 12 03          	cmp    ax,0x312
c000fcbb:	75 0a                	jne    c000fcc7 <sendKeyboardToken(KeyboardToken)+0x173>
c000fcbd:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000fcc3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fcc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcca:	66 3d 13 03          	cmp    ax,0x313
c000fcce:	75 0a                	jne    c000fcda <sendKeyboardToken(KeyboardToken)+0x186>
c000fcd0:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000fcd6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fcda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcdd:	66 3d 14 03          	cmp    ax,0x314
c000fce1:	75 0a                	jne    c000fced <sendKeyboardToken(KeyboardToken)+0x199>
c000fce3:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000fce9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fced:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcf0:	66 3d 15 03          	cmp    ax,0x315
c000fcf4:	75 0a                	jne    c000fd00 <sendKeyboardToken(KeyboardToken)+0x1ac>
c000fcf6:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fcfc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd03:	66 3d 16 03          	cmp    ax,0x316
c000fd07:	75 0a                	jne    c000fd13 <sendKeyboardToken(KeyboardToken)+0x1bf>
c000fd09:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000fd0f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd16:	66 3d 17 03          	cmp    ax,0x317
c000fd1a:	75 0a                	jne    c000fd26 <sendKeyboardToken(KeyboardToken)+0x1d2>
c000fd1c:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000fd22:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd29:	66 3d 18 03          	cmp    ax,0x318
c000fd2d:	75 0a                	jne    c000fd39 <sendKeyboardToken(KeyboardToken)+0x1e5>
c000fd2f:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000fd35:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd3c:	66 3d 19 03          	cmp    ax,0x319
c000fd40:	75 0a                	jne    c000fd4c <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fd42:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000fd48:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd4f:	66 3d 00 02          	cmp    ax,0x200
c000fd53:	75 2c                	jne    c000fd81 <sendKeyboardToken(KeyboardToken)+0x22d>
c000fd55:	a0 c0 80 02 c0       	mov    al,ds:0xc00280c0
c000fd5a:	83 f0 01             	xor    eax,0x1
c000fd5d:	84 c0                	test   al,al
c000fd5f:	74 20                	je     c000fd81 <sendKeyboardToken(KeyboardToken)+0x22d>
c000fd61:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000fd66:	6a 01                	push   0x1
c000fd68:	6a 00                	push   0x0
c000fd6a:	68 be f9 00 c0       	push   0xc000f9be
c000fd6f:	50                   	push   eax
c000fd70:	e8 e3 84 00 00       	call   c0018258 <Process::createThread(void (*)(void*), void*, int)>
c000fd75:	83 c4 10             	add    esp,0x10
c000fd78:	c6 05 c0 80 02 c0 01 	mov    BYTE PTR ds:0xc00280c0,0x1
c000fd7f:	eb 33                	jmp    c000fdb4 <sendKeyboardToken(KeyboardToken)+0x260>
c000fd81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd84:	66 3d 01 02          	cmp    ax,0x201
c000fd88:	75 2a                	jne    c000fdb4 <sendKeyboardToken(KeyboardToken)+0x260>
c000fd8a:	a0 c0 80 02 c0       	mov    al,ds:0xc00280c0
c000fd8f:	83 f0 01             	xor    eax,0x1
c000fd92:	84 c0                	test   al,al
c000fd94:	74 1e                	je     c000fdb4 <sendKeyboardToken(KeyboardToken)+0x260>
c000fd96:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c000fd9b:	6a 01                	push   0x1
c000fd9d:	6a 00                	push   0x0
c000fd9f:	68 2a fa 00 c0       	push   0xc000fa2a
c000fda4:	50                   	push   eax
c000fda5:	e8 ae 84 00 00       	call   c0018258 <Process::createThread(void (*)(void*), void*, int)>
c000fdaa:	83 c4 10             	add    esp,0x10
c000fdad:	c6 05 c0 80 02 c0 01 	mov    BYTE PTR ds:0xc00280c0,0x1
c000fdb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdb7:	66 3d 1d 03          	cmp    ax,0x31d
c000fdbb:	75 06                	jne    c000fdc3 <sendKeyboardToken(KeyboardToken)+0x26f>
c000fdbd:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000fdc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdc6:	66 3d 1c 03          	cmp    ax,0x31c
c000fdca:	75 06                	jne    c000fdd2 <sendKeyboardToken(KeyboardToken)+0x27e>
c000fdcc:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000fdd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdd5:	66 3d 1b 03          	cmp    ax,0x31b
c000fdd9:	75 06                	jne    c000fde1 <sendKeyboardToken(KeyboardToken)+0x28d>
c000fddb:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000fde1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fde4:	66 3d 1e 03          	cmp    ax,0x31e
c000fde8:	75 06                	jne    c000fdf0 <sendKeyboardToken(KeyboardToken)+0x29c>
c000fdea:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000fdf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdf3:	66 3d 1f 03          	cmp    ax,0x31f
c000fdf7:	75 06                	jne    c000fdff <sendKeyboardToken(KeyboardToken)+0x2ab>
c000fdf9:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000fdff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe02:	66 3d 1a 03          	cmp    ax,0x31a
c000fe06:	75 06                	jne    c000fe0e <sendKeyboardToken(KeyboardToken)+0x2ba>
c000fe08:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000fe0e:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000fe12:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fe15:	83 f0 01             	xor    eax,0x1
c000fe18:	84 c0                	test   al,al
c000fe1a:	74 77                	je     c000fe93 <sendKeyboardToken(KeyboardToken)+0x33f>
c000fe1c:	a0 c1 7d 02 c0       	mov    al,ds:0xc0027dc1
c000fe21:	84 c0                	test   al,al
c000fe23:	74 41                	je     c000fe66 <sendKeyboardToken(KeyboardToken)+0x312>
c000fe25:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fe29:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000fe2d:	74 2b                	je     c000fe5a <sendKeyboardToken(KeyboardToken)+0x306>
c000fe2f:	8b 15 c4 80 02 c0    	mov    edx,DWORD PTR ds:0xc00280c4
c000fe35:	89 d0                	mov    eax,edx
c000fe37:	c1 e0 02             	shl    eax,0x2
c000fe3a:	01 d0                	add    eax,edx
c000fe3c:	01 c0                	add    eax,eax
c000fe3e:	a3 c4 80 02 c0       	mov    ds:0xc00280c4,eax
c000fe43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe46:	0f b7 c0             	movzx  eax,ax
c000fe49:	8d 50 d0             	lea    edx,[eax-0x30]
c000fe4c:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c000fe51:	01 d0                	add    eax,edx
c000fe53:	a3 c4 80 02 c0       	mov    ds:0xc00280c4,eax
c000fe58:	eb 6d                	jmp    c000fec7 <sendKeyboardToken(KeyboardToken)+0x373>
c000fe5a:	c7 05 c4 80 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00280c4,0x0
c000fe64:	eb 61                	jmp    c000fec7 <sendKeyboardToken(KeyboardToken)+0x373>
c000fe66:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c000fe6b:	85 c0                	test   eax,eax
c000fe6d:	74 18                	je     c000fe87 <sendKeyboardToken(KeyboardToken)+0x333>
c000fe6f:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c000fe74:	0f b6 c0             	movzx  eax,al
c000fe77:	83 ec 0c             	sub    esp,0xc
c000fe7a:	50                   	push   eax
c000fe7b:	e8 16 fc ff ff       	call   c000fa96 <sendKeyToTerminal(unsigned char)>
c000fe80:	83 c4 10             	add    esp,0x10
c000fe83:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fe87:	c7 05 c4 80 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00280c4,0x0
c000fe91:	eb 34                	jmp    c000fec7 <sendKeyboardToken(KeyboardToken)+0x373>
c000fe93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe96:	66 3d 01 01          	cmp    ax,0x101
c000fe9a:	75 2b                	jne    c000fec7 <sendKeyboardToken(KeyboardToken)+0x373>
c000fe9c:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c000fea1:	85 c0                	test   eax,eax
c000fea3:	74 18                	je     c000febd <sendKeyboardToken(KeyboardToken)+0x369>
c000fea5:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c000feaa:	0f b6 c0             	movzx  eax,al
c000fead:	83 ec 0c             	sub    esp,0xc
c000feb0:	50                   	push   eax
c000feb1:	e8 e0 fb ff ff       	call   c000fa96 <sendKeyToTerminal(unsigned char)>
c000feb6:	83 c4 10             	add    esp,0x10
c000feb9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000febd:	c7 05 c4 80 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00280c4,0x0
c000fec7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000feca:	83 f0 01             	xor    eax,0x1
c000fecd:	84 c0                	test   al,al
c000fecf:	74 4c                	je     c000ff1d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fed1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fed4:	83 f0 01             	xor    eax,0x1
c000fed7:	84 c0                	test   al,al
c000fed9:	74 42                	je     c000ff1d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fedb:	a0 c0 7d 02 c0       	mov    al,ds:0xc0027dc0
c000fee0:	83 f0 01             	xor    eax,0x1
c000fee3:	84 c0                	test   al,al
c000fee5:	74 36                	je     c000ff1d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fee7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000feea:	66 83 f8 1f          	cmp    ax,0x1f
c000feee:	76 09                	jbe    c000fef9 <sendKeyboardToken(KeyboardToken)+0x3a5>
c000fef0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fef3:	66 83 f8 7e          	cmp    ax,0x7e
c000fef7:	76 12                	jbe    c000ff0b <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fef9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fefc:	66 83 f8 0a          	cmp    ax,0xa
c000ff00:	74 09                	je     c000ff0b <sendKeyboardToken(KeyboardToken)+0x3b7>
c000ff02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff05:	66 83 f8 08          	cmp    ax,0x8
c000ff09:	75 12                	jne    c000ff1d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000ff0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff0e:	0f b6 c0             	movzx  eax,al
c000ff11:	83 ec 0c             	sub    esp,0xc
c000ff14:	50                   	push   eax
c000ff15:	e8 7c fb ff ff       	call   c000fa96 <sendKeyToTerminal(unsigned char)>
c000ff1a:	83 c4 10             	add    esp,0x10
c000ff1d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ff20:	83 f0 01             	xor    eax,0x1
c000ff23:	84 c0                	test   al,al
c000ff25:	74 4f                	je     c000ff76 <sendKeyboardToken(KeyboardToken)+0x422>
c000ff27:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ff2a:	83 f0 01             	xor    eax,0x1
c000ff2d:	84 c0                	test   al,al
c000ff2f:	74 45                	je     c000ff76 <sendKeyboardToken(KeyboardToken)+0x422>
c000ff31:	a0 c0 7d 02 c0       	mov    al,ds:0xc0027dc0
c000ff36:	84 c0                	test   al,al
c000ff38:	74 3c                	je     c000ff76 <sendKeyboardToken(KeyboardToken)+0x422>
c000ff3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff3d:	66 83 f8 3f          	cmp    ax,0x3f
c000ff41:	76 33                	jbe    c000ff76 <sendKeyboardToken(KeyboardToken)+0x422>
c000ff43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff46:	66 83 f8 7f          	cmp    ax,0x7f
c000ff4a:	77 2a                	ja     c000ff76 <sendKeyboardToken(KeyboardToken)+0x422>
c000ff4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff4f:	88 c2                	mov    dl,al
c000ff51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff54:	66 83 f8 5f          	cmp    ax,0x5f
c000ff58:	76 04                	jbe    c000ff5e <sendKeyboardToken(KeyboardToken)+0x40a>
c000ff5a:	b0 20                	mov    al,0x20
c000ff5c:	eb 02                	jmp    c000ff60 <sendKeyboardToken(KeyboardToken)+0x40c>
c000ff5e:	b0 00                	mov    al,0x0
c000ff60:	29 c2                	sub    edx,eax
c000ff62:	88 d0                	mov    al,dl
c000ff64:	83 e8 40             	sub    eax,0x40
c000ff67:	0f b6 c0             	movzx  eax,al
c000ff6a:	83 ec 0c             	sub    esp,0xc
c000ff6d:	50                   	push   eax
c000ff6e:	e8 23 fb ff ff       	call   c000fa96 <sendKeyToTerminal(unsigned char)>
c000ff73:	83 c4 10             	add    esp,0x10
c000ff76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff79:	66 3d 00 03          	cmp    ax,0x300
c000ff7d:	75 0f                	jne    c000ff8e <sendKeyboardToken(KeyboardToken)+0x43a>
c000ff7f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ff82:	83 f0 01             	xor    eax,0x1
c000ff85:	84 c0                	test   al,al
c000ff87:	74 05                	je     c000ff8e <sendKeyboardToken(KeyboardToken)+0x43a>
c000ff89:	e8 d5 ab ff ff       	call   c000ab63 <doTerminalCycle()>
c000ff8e:	90                   	nop
c000ff8f:	c9                   	leave  
c000ff90:	c3                   	ret    

c000ff91 <clearInternalKeybuffer(VgaText*)>:
c000ff91:	55                   	push   ebp
c000ff92:	89 e5                	mov    ebp,esp
c000ff94:	83 ec 08             	sub    esp,0x8
c000ff97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff9a:	05 98 01 00 00       	add    eax,0x198
c000ff9f:	83 ec 0c             	sub    esp,0xc
c000ffa2:	50                   	push   eax
c000ffa3:	e8 f8 06 ff ff       	call   c00006a0 <strlen>
c000ffa8:	83 c4 10             	add    esp,0x10
c000ffab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ffae:	81 c2 98 01 00 00    	add    edx,0x198
c000ffb4:	83 ec 04             	sub    esp,0x4
c000ffb7:	50                   	push   eax
c000ffb8:	6a 00                	push   0x0
c000ffba:	52                   	push   edx
c000ffbb:	e8 c4 06 ff ff       	call   c0000684 <memset>
c000ffc0:	83 c4 10             	add    esp,0x10
c000ffc3:	90                   	nop
c000ffc4:	c9                   	leave  
c000ffc5:	c3                   	ret    

c000ffc6 <readKeyboard(VgaText*, char*, unsigned long)>:
c000ffc6:	55                   	push   ebp
c000ffc7:	89 e5                	mov    ebp,esp
c000ffc9:	83 ec 18             	sub    esp,0x18
c000ffcc:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000ffd1:	85 c0                	test   eax,eax
c000ffd3:	74 2a                	je     c000ffff <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000ffd5:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000ffdb:	8b 0d a8 7c 02 c0    	mov    ecx,DWORD PTR ds:0xc0027ca8
c000ffe1:	83 ec 04             	sub    esp,0x4
c000ffe4:	68 c0 7c 02 c0       	push   0xc0027cc0
c000ffe9:	83 ec 08             	sub    esp,0x8
c000ffec:	89 e2                	mov    edx,esp
c000ffee:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000fff1:	89 02                	mov    DWORD PTR [edx],eax
c000fff3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fff6:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000fffa:	ff d1                	call   ecx
c000fffc:	83 c4 10             	add    esp,0x10
c000ffff:	fb                   	sti    
c0010000:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0010007:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001000b:	0f 84 a1 00 00 00    	je     c00100b2 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0010011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010014:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c001001a:	84 c0                	test   al,al
c001001c:	75 28                	jne    c0010046 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c001001e:	fa                   	cli    
c001001f:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c0010024:	40                   	inc    eax
c0010025:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c001002a:	e8 45 84 00 00       	call   c0018474 <schedule()>
c001002f:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c0010034:	48                   	dec    eax
c0010035:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c001003a:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c001003f:	85 c0                	test   eax,eax
c0010041:	75 ce                	jne    c0010011 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0010043:	fb                   	sti    
c0010044:	eb cb                	jmp    c0010011 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0010046:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0010049:	8d 50 01             	lea    edx,[eax+0x1]
c001004c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001004f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010052:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0010058:	88 10                	mov    BYTE PTR [eax],dl
c001005a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001005d:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0010063:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0010066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010069:	05 98 01 00 00       	add    eax,0x198
c001006e:	83 ec 0c             	sub    esp,0xc
c0010071:	50                   	push   eax
c0010072:	e8 29 06 ff ff       	call   c00006a0 <strlen>
c0010077:	83 c4 10             	add    esp,0x10
c001007a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001007d:	81 c2 98 01 00 00    	add    edx,0x198
c0010083:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010086:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010089:	81 c2 98 01 00 00    	add    edx,0x198
c001008f:	83 ec 04             	sub    esp,0x4
c0010092:	50                   	push   eax
c0010093:	51                   	push   ecx
c0010094:	52                   	push   edx
c0010095:	e8 22 05 ff ff       	call   c00005bc <memmove>
c001009a:	83 c4 10             	add    esp,0x10
c001009d:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00100a0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00100a3:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00100a7:	0f 85 5a ff ff ff    	jne    c0010007 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c00100ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00100b0:	eb 03                	jmp    c00100b5 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c00100b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00100b5:	c9                   	leave  
c00100b6:	c3                   	ret    
c00100b7:	90                   	nop

c00100b8 <Keyboard::Keyboard(char const*)>:
c00100b8:	83 ec 0c             	sub    esp,0xc
c00100bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100bf:	83 ec 08             	sub    esp,0x8
c00100c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100c6:	50                   	push   eax
c00100c7:	e8 b6 e2 ff ff       	call   c000e382 <Device::Device(char const*)>
c00100cc:	83 c4 10             	add    esp,0x10
c00100cf:	ba d8 4c 02 c0       	mov    edx,0xc0024cd8
c00100d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100d8:	89 10                	mov    DWORD PTR [eax],edx
c00100da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100de:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00100e8:	c6 05 a4 7c 02 c0 01 	mov    BYTE PTR ds:0xc0027ca4,0x1
c00100ef:	90                   	nop
c00100f0:	83 c4 0c             	add    esp,0xc
c00100f3:	c3                   	ret    

c00100f4 <Keyboard::~Keyboard()>:
c00100f4:	83 ec 0c             	sub    esp,0xc
c00100f7:	ba d8 4c 02 c0       	mov    edx,0xc0024cd8
c00100fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010100:	89 10                	mov    DWORD PTR [eax],edx
c0010102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010106:	83 ec 0c             	sub    esp,0xc
c0010109:	50                   	push   eax
c001010a:	e8 3d df ff ff       	call   c000e04c <Device::~Device()>
c001010f:	83 c4 10             	add    esp,0x10
c0010112:	90                   	nop
c0010113:	83 c4 0c             	add    esp,0xc
c0010116:	c3                   	ret    
c0010117:	90                   	nop

c0010118 <Keyboard::~Keyboard()>:
c0010118:	83 ec 0c             	sub    esp,0xc
c001011b:	83 ec 0c             	sub    esp,0xc
c001011e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010122:	e8 cd ff ff ff       	call   c00100f4 <Keyboard::~Keyboard()>
c0010127:	83 c4 10             	add    esp,0x10
c001012a:	83 ec 08             	sub    esp,0x8
c001012d:	68 5c 01 00 00       	push   0x15c
c0010132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010136:	e8 db ca ff ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c001013b:	83 c4 10             	add    esp,0x10
c001013e:	83 c4 0c             	add    esp,0xc
c0010141:	c3                   	ret    

c0010142 <LogicalDisk::close(int, int, void*)>:
c0010142:	83 c8 ff             	or     eax,0xffffffff
c0010145:	c3                   	ret    

c0010146 <LogicalDisk::~LogicalDisk()>:
c0010146:	83 ec 0c             	sub    esp,0xc
c0010149:	ba 50 4d 02 c0       	mov    edx,0xc0024d50
c001014e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010152:	89 10                	mov    DWORD PTR [eax],edx
c0010154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010158:	83 ec 0c             	sub    esp,0xc
c001015b:	50                   	push   eax
c001015c:	e8 eb de ff ff       	call   c000e04c <Device::~Device()>
c0010161:	83 c4 10             	add    esp,0x10
c0010164:	90                   	nop
c0010165:	83 c4 0c             	add    esp,0xc
c0010168:	c3                   	ret    
c0010169:	90                   	nop

c001016a <LogicalDisk::~LogicalDisk()>:
c001016a:	83 ec 0c             	sub    esp,0xc
c001016d:	83 ec 0c             	sub    esp,0xc
c0010170:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010174:	e8 cd ff ff ff       	call   c0010146 <LogicalDisk::~LogicalDisk()>
c0010179:	83 c4 10             	add    esp,0x10
c001017c:	83 ec 08             	sub    esp,0x8
c001017f:	68 74 01 00 00       	push   0x174
c0010184:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010188:	e8 89 ca ff ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c001018d:	83 c4 10             	add    esp,0x10
c0010190:	83 c4 0c             	add    esp,0xc
c0010193:	c3                   	ret    

c0010194 <LogicalDisk::open(int, int, void*)>:
c0010194:	83 ec 18             	sub    esp,0x18
c0010197:	68 04 4d 02 c0       	push   0xc0024d04
c001019c:	e8 02 47 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c00101a1:	83 c8 ff             	or     eax,0xffffffff
c00101a4:	83 c4 1c             	add    esp,0x1c
c00101a7:	c3                   	ret    

c00101a8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00101a8:	53                   	push   ebx
c00101a9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00101ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00101b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00101b5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00101bb:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00101c1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00101c7:	77 10                	ja     c00101d9 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00101c9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00101cf:	89 d3                	mov    ebx,edx
c00101d1:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00101d7:	72 05                	jb     c00101de <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00101d9:	83 c8 ff             	or     eax,0xffffffff
c00101dc:	89 c2                	mov    edx,eax
c00101de:	5b                   	pop    ebx
c00101df:	c3                   	ret    

c00101e0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00101e0:	56                   	push   esi
c00101e1:	83 c8 ff             	or     eax,0xffffffff
c00101e4:	53                   	push   ebx
c00101e5:	89 c2                	mov    edx,eax
c00101e7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00101eb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00101ef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00101f3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00101f9:	77 27                	ja     c0010222 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00101fb:	89 d8                	mov    eax,ebx
c00101fd:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0010203:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0010209:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001020e:	89 c2                	mov    edx,eax
c0010210:	73 10                	jae    c0010222 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0010212:	89 c8                	mov    eax,ecx
c0010214:	89 da                	mov    edx,ebx
c0010216:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001021c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0010222:	5b                   	pop    ebx
c0010223:	5e                   	pop    esi
c0010224:	c3                   	ret    
c0010225:	90                   	nop

c0010226 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0010226:	83 ec 1c             	sub    esp,0x1c
c0010229:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001022d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010231:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010235:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010239:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001023d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010240:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010244:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010248:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001024c:	83 ec 08             	sub    esp,0x8
c001024f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010253:	50                   	push   eax
c0010254:	e8 29 e1 ff ff       	call   c000e382 <Device::Device(char const*)>
c0010259:	83 c4 10             	add    esp,0x10
c001025c:	ba 50 4d 02 c0       	mov    edx,0xc0024d50
c0010261:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010265:	89 10                	mov    DWORD PTR [eax],edx
c0010267:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001026b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010272:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010276:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001027d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010281:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001028b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001028f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010293:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010297:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001029d:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00102a3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00102a7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00102aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00102ae:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00102b4:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00102ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00102be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00102c2:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00102c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00102cc:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00102d6:	90                   	nop
c00102d7:	83 c4 1c             	add    esp,0x1c
c00102da:	c3                   	ret    
c00102db:	90                   	nop

c00102dc <LogicalDisk::assignDriveLetter()>:
c00102dc:	55                   	push   ebp
c00102dd:	57                   	push   edi
c00102de:	56                   	push   esi
c00102df:	53                   	push   ebx
c00102e0:	83 ec 14             	sub    esp,0x14
c00102e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00102e7:	8b 3d e0 80 02 c0    	mov    edi,DWORD PTR ds:0xc00280e0
c00102ed:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00102f3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00102f7:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00102fd:	8b 3d e4 80 02 c0    	mov    edi,DWORD PTR ds:0xc00280e4
c0010303:	3c 01                	cmp    al,0x1
c0010305:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0010309:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001030d:	19 c0                	sbb    eax,eax
c001030f:	83 e0 02             	and    eax,0x2
c0010312:	83 c0 41             	add    eax,0x41
c0010315:	0f be e8             	movsx  ebp,al
c0010318:	3c 43                	cmp    al,0x43
c001031a:	75 10                	jne    c001032c <LogicalDisk::assignDriveLetter()+0x50>
c001031c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0010323:	75 5d                	jne    c0010382 <LogicalDisk::assignDriveLetter()+0xa6>
c0010325:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001032a:	75 56                	jne    c0010382 <LogicalDisk::assignDriveLetter()+0xa6>
c001032c:	8d 75 bf             	lea    esi,[ebp-0x41]
c001032f:	ba 01 00 00 00       	mov    edx,0x1
c0010334:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010338:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001033c:	d3 e2                	shl    edx,cl
c001033e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010342:	89 d7                	mov    edi,edx
c0010344:	89 d6                	mov    esi,edx
c0010346:	c1 ff 1f             	sar    edi,0x1f
c0010349:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001034d:	21 f9                	and    ecx,edi
c001034f:	09 d1                	or     ecx,edx
c0010351:	75 2f                	jne    c0010382 <LogicalDisk::assignDriveLetter()+0xa6>
c0010353:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010357:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001035b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0010361:	09 f2                	or     edx,esi
c0010363:	89 15 e0 80 02 c0    	mov    DWORD PTR ds:0xc00280e0,edx
c0010369:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001036d:	09 fa                	or     edx,edi
c001036f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0010373:	89 15 e4 80 02 c0    	mov    DWORD PTR ds:0xc00280e4,edx
c0010379:	89 1c bd 00 81 02 c0 	mov    DWORD PTR [edi*4-0x3ffd7f00],ebx
c0010380:	eb 08                	jmp    c001038a <LogicalDisk::assignDriveLetter()+0xae>
c0010382:	45                   	inc    ebp
c0010383:	40                   	inc    eax
c0010384:	3c 5b                	cmp    al,0x5b
c0010386:	75 90                	jne    c0010318 <LogicalDisk::assignDriveLetter()+0x3c>
c0010388:	31 c0                	xor    eax,eax
c001038a:	83 c4 14             	add    esp,0x14
c001038d:	5b                   	pop    ebx
c001038e:	5e                   	pop    esi
c001038f:	5f                   	pop    edi
c0010390:	5d                   	pop    ebp
c0010391:	c3                   	ret    

c0010392 <LogicalDisk::mount()>:
c0010392:	56                   	push   esi
c0010393:	53                   	push   ebx
c0010394:	53                   	push   ebx
c0010395:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010399:	8b 1d 74 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027c74
c001039f:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00103a9:	85 db                	test   ebx,ebx
c00103ab:	74 27                	je     c00103d4 <LogicalDisk::mount()+0x42>
c00103ad:	51                   	push   ecx
c00103ae:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00103b5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00103b7:	83 e8 41             	sub    eax,0x41
c00103ba:	50                   	push   eax
c00103bb:	56                   	push   esi
c00103bc:	53                   	push   ebx
c00103bd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00103c0:	83 c4 10             	add    esp,0x10
c00103c3:	84 c0                	test   al,al
c00103c5:	74 08                	je     c00103cf <LogicalDisk::mount()+0x3d>
c00103c7:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00103cd:	eb 07                	jmp    c00103d6 <LogicalDisk::mount()+0x44>
c00103cf:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00103d2:	eb d5                	jmp    c00103a9 <LogicalDisk::mount()+0x17>
c00103d4:	31 c0                	xor    eax,eax
c00103d6:	5a                   	pop    edx
c00103d7:	5b                   	pop    ebx
c00103d8:	5e                   	pop    esi
c00103d9:	c3                   	ret    

c00103da <LogicalDisk::unmount()>:
c00103da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103de:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00103e8:	c3                   	ret    
c00103e9:	90                   	nop

c00103ea <LogicalDisk::eject()>:
c00103ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103ee:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00103f4:	8b 10                	mov    edx,DWORD PTR [eax]
c00103f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00103fa:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00103fd:	90                   	nop

c00103fe <LogicalDisk::unassignDriveLetter()>:
c00103fe:	57                   	push   edi
c00103ff:	56                   	push   esi
c0010400:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010404:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001040b:	84 c9                	test   cl,cl
c001040d:	75 0f                	jne    c001041e <LogicalDisk::unassignDriveLetter()+0x20>
c001040f:	c7 44 24 0c 28 4d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0024d28
c0010417:	5e                   	pop    esi
c0010418:	5f                   	pop    edi
c0010419:	e9 85 44 00 00       	jmp    c00148a3 <Krnl::panic(char const*)>
c001041e:	83 e9 41             	sub    ecx,0x41
c0010421:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0010428:	b8 01 00 00 00       	mov    eax,0x1
c001042d:	c7 04 8d 00 81 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7f00],0x0
c0010438:	d3 e0                	shl    eax,cl
c001043a:	89 c7                	mov    edi,eax
c001043c:	f7 d0                	not    eax
c001043e:	c1 ff 1f             	sar    edi,0x1f
c0010441:	21 05 e0 80 02 c0    	and    DWORD PTR ds:0xc00280e0,eax
c0010447:	89 fe                	mov    esi,edi
c0010449:	f7 d6                	not    esi
c001044b:	21 35 e4 80 02 c0    	and    DWORD PTR ds:0xc00280e4,esi
c0010451:	5e                   	pop    esi
c0010452:	5f                   	pop    edi
c0010453:	c3                   	ret    

c0010454 <LogicalDisk::read(unsigned long long, int, void*)>:
c0010454:	57                   	push   edi
c0010455:	56                   	push   esi
c0010456:	53                   	push   ebx
c0010457:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001045b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001045f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010463:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010467:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001046d:	77 41                	ja     c00104b0 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001046f:	99                   	cdq    
c0010470:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010476:	01 c8                	add    eax,ecx
c0010478:	11 da                	adc    edx,ebx
c001047a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010480:	19 d7                	sbb    edi,edx
c0010482:	72 33                	jb     c00104b7 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0010484:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001048a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010490:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010494:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010498:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001049e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00104a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00104a8:	5b                   	pop    ebx
c00104a9:	5e                   	pop    esi
c00104aa:	5f                   	pop    edi
c00104ab:	e9 e2 0a 00 00       	jmp    c0010f92 <VCache::read(unsigned long long, int, void*)>
c00104b0:	b8 05 00 00 00       	mov    eax,0x5
c00104b5:	eb 05                	jmp    c00104bc <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00104b7:	b8 07 00 00 00       	mov    eax,0x7
c00104bc:	5b                   	pop    ebx
c00104bd:	5e                   	pop    esi
c00104be:	5f                   	pop    edi
c00104bf:	c3                   	ret    

c00104c0 <LogicalDisk::write(unsigned long long, int, void*)>:
c00104c0:	57                   	push   edi
c00104c1:	56                   	push   esi
c00104c2:	53                   	push   ebx
c00104c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00104c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00104cb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00104cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00104d3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00104d9:	77 41                	ja     c001051c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00104db:	99                   	cdq    
c00104dc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00104e2:	01 c8                	add    eax,ecx
c00104e4:	11 da                	adc    edx,ebx
c00104e6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00104ec:	19 d7                	sbb    edi,edx
c00104ee:	72 33                	jb     c0010523 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00104f0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00104f6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00104fc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010500:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010504:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001050a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010510:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010514:	5b                   	pop    ebx
c0010515:	5e                   	pop    esi
c0010516:	5f                   	pop    edi
c0010517:	e9 7c 09 00 00       	jmp    c0010e98 <VCache::write(unsigned long long, int, void*)>
c001051c:	b8 05 00 00 00       	mov    eax,0x5
c0010521:	eb 05                	jmp    c0010528 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0010523:	b8 07 00 00 00       	mov    eax,0x7
c0010528:	5b                   	pop    ebx
c0010529:	5e                   	pop    esi
c001052a:	5f                   	pop    edi
c001052b:	c3                   	ret    

c001052c <Mouse::Mouse(char const*)>:
c001052c:	83 ec 0c             	sub    esp,0xc
c001052f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010533:	83 ec 08             	sub    esp,0x8
c0010536:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001053a:	50                   	push   eax
c001053b:	e8 42 de ff ff       	call   c000e382 <Device::Device(char const*)>
c0010540:	83 c4 10             	add    esp,0x10
c0010543:	ba 7c 4d 02 c0       	mov    edx,0xc0024d7c
c0010548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001054c:	89 10                	mov    DWORD PTR [eax],edx
c001054e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010552:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001055c:	90                   	nop
c001055d:	83 c4 0c             	add    esp,0xc
c0010560:	c3                   	ret    
c0010561:	90                   	nop
c0010562:	66 90                	xchg   ax,ax

c0010564 <Mouse::~Mouse()>:
c0010564:	83 ec 0c             	sub    esp,0xc
c0010567:	ba 7c 4d 02 c0       	mov    edx,0xc0024d7c
c001056c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010570:	89 10                	mov    DWORD PTR [eax],edx
c0010572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010576:	83 ec 0c             	sub    esp,0xc
c0010579:	50                   	push   eax
c001057a:	e8 cd da ff ff       	call   c000e04c <Device::~Device()>
c001057f:	83 c4 10             	add    esp,0x10
c0010582:	90                   	nop
c0010583:	83 c4 0c             	add    esp,0xc
c0010586:	c3                   	ret    
c0010587:	90                   	nop

c0010588 <Mouse::~Mouse()>:
c0010588:	83 ec 0c             	sub    esp,0xc
c001058b:	83 ec 0c             	sub    esp,0xc
c001058e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010592:	e8 cd ff ff ff       	call   c0010564 <Mouse::~Mouse()>
c0010597:	83 c4 10             	add    esp,0x10
c001059a:	83 ec 08             	sub    esp,0x8
c001059d:	68 58 01 00 00       	push   0x158
c00105a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105a6:	e8 6b c6 ff ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c00105ab:	83 c4 10             	add    esp,0x10
c00105ae:	83 c4 0c             	add    esp,0xc
c00105b1:	c3                   	ret    

c00105b2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00105b2:	55                   	push   ebp
c00105b3:	57                   	push   edi
c00105b4:	56                   	push   esi
c00105b5:	53                   	push   ebx
c00105b6:	81 ec 28 01 00 00    	sub    esp,0x128
c00105bc:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00105c3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00105ca:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00105d1:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00105d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00105dc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00105e0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00105e7:	e8 92 de ff ff       	call   c000e47e <Device::getName()>
c00105ec:	5a                   	pop    edx
c00105ed:	59                   	pop    ecx
c00105ee:	50                   	push   eax
c00105ef:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00105f3:	55                   	push   ebp
c00105f4:	e8 47 01 ff ff       	call   c0000740 <strcpy>
c00105f9:	5b                   	pop    ebx
c00105fa:	58                   	pop    eax
c00105fb:	68 a0 4d 02 c0       	push   0xc0024da0
c0010600:	55                   	push   ebp
c0010601:	e8 7a 02 ff ff       	call   c0000880 <strcat>
c0010606:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001060d:	e8 f5 93 ff ff       	call   c0009a07 <malloc>
c0010612:	83 c4 0c             	add    esp,0xc
c0010615:	89 c3                	mov    ebx,eax
c0010617:	57                   	push   edi
c0010618:	56                   	push   esi
c0010619:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001061d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010621:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0010628:	55                   	push   ebp
c0010629:	50                   	push   eax
c001062a:	e8 f7 fb ff ff       	call   c0010226 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001062f:	83 c4 14             	add    esp,0x14
c0010632:	53                   	push   ebx
c0010633:	e8 a4 fc ff ff       	call   c00102dc <LogicalDisk::assignDriveLetter()>
c0010638:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001063b:	e8 52 fd ff ff       	call   c0010392 <LogicalDisk::mount()>
c0010640:	58                   	pop    eax
c0010641:	5a                   	pop    edx
c0010642:	53                   	push   ebx
c0010643:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001064a:	e8 2f db ff ff       	call   c000e17e <Device::addChild(Device*)>
c001064f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010655:	5b                   	pop    ebx
c0010656:	5e                   	pop    esi
c0010657:	5f                   	pop    edi
c0010658:	5d                   	pop    ebp
c0010659:	c3                   	ret    

c001065a <createPartitionsForDisk(PhysicalDisk*)>:
c001065a:	55                   	push   ebp
c001065b:	57                   	push   edi
c001065c:	56                   	push   esi
c001065d:	53                   	push   ebx
c001065e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010664:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001066b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0010671:	3d 00 02 00 00       	cmp    eax,0x200
c0010676:	74 27                	je     c001069f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0010678:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001067e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0010684:	83 ec 10             	sub    esp,0x10
c0010687:	0f a4 f7 0a          	shld   edi,esi,0xa
c001068b:	99                   	cdq    
c001068c:	c1 e6 0a             	shl    esi,0xa
c001068f:	52                   	push   edx
c0010690:	89 fd                	mov    ebp,edi
c0010692:	50                   	push   eax
c0010693:	55                   	push   ebp
c0010694:	56                   	push   esi
c0010695:	e8 7a 1d 01 00       	call   c0022414 <__udivdi3>
c001069a:	e9 b1 00 00 00       	jmp    c0010750 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001069f:	83 ec 0c             	sub    esp,0xc
c00106a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106a4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00106a8:	56                   	push   esi
c00106a9:	6a 01                	push   0x1
c00106ab:	6a 00                	push   0x0
c00106ad:	6a 00                	push   0x0
c00106af:	53                   	push   ebx
c00106b0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00106b3:	83 c4 20             	add    esp,0x20
c00106b6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00106be:	75 0a                	jne    c00106ca <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00106c0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00106c8:	74 2c                	je     c00106f6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00106ca:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00106d0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00106d6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00106dc:	83 ec 10             	sub    esp,0x10
c00106df:	0f a4 c2 0a          	shld   edx,eax,0xa
c00106e3:	89 f7                	mov    edi,esi
c00106e5:	c1 e0 0a             	shl    eax,0xa
c00106e8:	c1 ff 1f             	sar    edi,0x1f
c00106eb:	57                   	push   edi
c00106ec:	56                   	push   esi
c00106ed:	52                   	push   edx
c00106ee:	50                   	push   eax
c00106ef:	e8 20 1d 01 00       	call   c0022414 <__udivdi3>
c00106f4:	eb 5a                	jmp    c0010750 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00106f6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00106fd:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0010704:	83 e1 7f             	and    ecx,0x7f
c0010707:	83 e0 7f             	and    eax,0x7f
c001070a:	01 c1                	add    ecx,eax
c001070c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0010713:	83 e0 7f             	and    eax,0x7f
c0010716:	01 c1                	add    ecx,eax
c0010718:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001071f:	83 e0 7f             	and    eax,0x7f
c0010722:	00 c1                	add    cl,al
c0010724:	74 41                	je     c0010767 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0010726:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001072c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010732:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010738:	83 ec 10             	sub    esp,0x10
c001073b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001073f:	89 f7                	mov    edi,esi
c0010741:	c1 e0 0a             	shl    eax,0xa
c0010744:	c1 ff 1f             	sar    edi,0x1f
c0010747:	57                   	push   edi
c0010748:	56                   	push   esi
c0010749:	52                   	push   edx
c001074a:	50                   	push   eax
c001074b:	e8 c4 1c 01 00       	call   c0022414 <__udivdi3>
c0010750:	83 c4 14             	add    esp,0x14
c0010753:	52                   	push   edx
c0010754:	50                   	push   eax
c0010755:	6a 00                	push   0x0
c0010757:	6a 00                	push   0x0
c0010759:	53                   	push   ebx
c001075a:	e8 53 fe ff ff       	call   c00105b2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001075f:	83 c4 20             	add    esp,0x20
c0010762:	e9 79 01 00 00       	jmp    c00108e0 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0010767:	89 f0                	mov    eax,esi
c0010769:	31 f6                	xor    esi,esi
c001076b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0010772:	75 02                	jne    c0010776 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0010774:	89 f1                	mov    ecx,esi
c0010776:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001077d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0010784:	c1 e2 08             	shl    edx,0x8
c0010787:	c1 e7 10             	shl    edi,0x10
c001078a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0010792:	09 fa                	or     edx,edi
c0010794:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001079c:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00107a3:	83 c0 10             	add    eax,0x10
c00107a6:	09 fa                	or     edx,edi
c00107a8:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00107af:	c1 e7 18             	shl    edi,0x18
c00107b2:	09 fa                	or     edx,edi
c00107b4:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00107bb:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00107bf:	c1 e7 10             	shl    edi,0x10
c00107c2:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00107c9:	c1 e2 08             	shl    edx,0x8
c00107cc:	09 fa                	or     edx,edi
c00107ce:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00107d5:	09 fa                	or     edx,edi
c00107d7:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00107de:	c1 e7 18             	shl    edi,0x18
c00107e1:	09 fa                	or     edx,edi
c00107e3:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00107e7:	46                   	inc    esi
c00107e8:	83 fe 04             	cmp    esi,0x4
c00107eb:	0f 85 7a ff ff ff    	jne    c001076b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00107f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107f5:	83 f0 01             	xor    eax,0x1
c00107f8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00107fc:	75 57                	jne    c0010855 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00107fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010802:	83 f0 01             	xor    eax,0x1
c0010805:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0010809:	75 4a                	jne    c0010855 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001080b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001080f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0010817:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001081f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010825:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001082b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010831:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010835:	89 f7                	mov    edi,esi
c0010837:	c1 e0 0a             	shl    eax,0xa
c001083a:	c1 ff 1f             	sar    edi,0x1f
c001083d:	57                   	push   edi
c001083e:	56                   	push   esi
c001083f:	52                   	push   edx
c0010840:	50                   	push   eax
c0010841:	e8 ce 1b 01 00       	call   c0022414 <__udivdi3>
c0010846:	83 c4 10             	add    esp,0x10
c0010849:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001084d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010851:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010855:	84 c9                	test   cl,cl
c0010857:	74 53                	je     c00108ac <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010859:	0f b6 c9             	movzx  ecx,cl
c001085c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010860:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010864:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010868:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001086c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010870:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010874:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0010878:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001087c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010880:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010884:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010888:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001088c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0010890:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0010894:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0010898:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001089c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00108a0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00108a4:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00108a8:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00108ac:	31 ed                	xor    ebp,ebp
c00108ae:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00108b2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00108b6:	89 f8                	mov    eax,edi
c00108b8:	09 f0                	or     eax,esi
c00108ba:	74 1e                	je     c00108da <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00108bc:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00108c0:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00108c4:	89 d1                	mov    ecx,edx
c00108c6:	09 c1                	or     ecx,eax
c00108c8:	74 10                	je     c00108da <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00108ca:	83 ec 0c             	sub    esp,0xc
c00108cd:	57                   	push   edi
c00108ce:	56                   	push   esi
c00108cf:	52                   	push   edx
c00108d0:	50                   	push   eax
c00108d1:	53                   	push   ebx
c00108d2:	e8 db fc ff ff       	call   c00105b2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00108d7:	83 c4 20             	add    esp,0x20
c00108da:	45                   	inc    ebp
c00108db:	83 fd 04             	cmp    ebp,0x4
c00108de:	75 ce                	jne    c00108ae <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00108e0:	81 c4 5c 02 00 00    	add    esp,0x25c
c00108e6:	5b                   	pop    ebx
c00108e7:	5e                   	pop    esi
c00108e8:	5f                   	pop    edi
c00108e9:	5d                   	pop    ebp
c00108ea:	c3                   	ret    
c00108eb:	90                   	nop

c00108ec <Serial::Serial(char const*)>:
c00108ec:	83 ec 0c             	sub    esp,0xc
c00108ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f3:	83 ec 08             	sub    esp,0x8
c00108f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108fa:	50                   	push   eax
c00108fb:	e8 82 da ff ff       	call   c000e382 <Device::Device(char const*)>
c0010900:	83 c4 10             	add    esp,0x10
c0010903:	ba b4 4d 02 c0       	mov    edx,0xc0024db4
c0010908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001090c:	89 10                	mov    DWORD PTR [eax],edx
c001090e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010912:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001091c:	90                   	nop
c001091d:	83 c4 0c             	add    esp,0xc
c0010920:	c3                   	ret    
c0010921:	90                   	nop
c0010922:	66 90                	xchg   ax,ax

c0010924 <Serial::~Serial()>:
c0010924:	83 ec 0c             	sub    esp,0xc
c0010927:	ba b4 4d 02 c0       	mov    edx,0xc0024db4
c001092c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010930:	89 10                	mov    DWORD PTR [eax],edx
c0010932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010936:	83 ec 0c             	sub    esp,0xc
c0010939:	50                   	push   eax
c001093a:	e8 0d d7 ff ff       	call   c000e04c <Device::~Device()>
c001093f:	83 c4 10             	add    esp,0x10
c0010942:	90                   	nop
c0010943:	83 c4 0c             	add    esp,0xc
c0010946:	c3                   	ret    
c0010947:	90                   	nop

c0010948 <Serial::~Serial()>:
c0010948:	83 ec 0c             	sub    esp,0xc
c001094b:	83 ec 0c             	sub    esp,0xc
c001094e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010952:	e8 cd ff ff ff       	call   c0010924 <Serial::~Serial()>
c0010957:	83 c4 10             	add    esp,0x10
c001095a:	83 ec 08             	sub    esp,0x8
c001095d:	68 58 01 00 00       	push   0x158
c0010962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010966:	e8 ab c2 ff ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c001096b:	83 c4 10             	add    esp,0x10
c001096e:	83 c4 0c             	add    esp,0xc
c0010971:	c3                   	ret    
c0010972:	66 90                	xchg   ax,ax

c0010974 <Timer::Timer(char const*)>:
c0010974:	83 ec 0c             	sub    esp,0xc
c0010977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001097b:	83 ec 08             	sub    esp,0x8
c001097e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010982:	50                   	push   eax
c0010983:	e8 fa d9 ff ff       	call   c000e382 <Device::Device(char const*)>
c0010988:	83 c4 10             	add    esp,0x10
c001098b:	ba f8 4d 02 c0       	mov    edx,0xc0024df8
c0010990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010994:	89 10                	mov    DWORD PTR [eax],edx
c0010996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001099a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00109a4:	90                   	nop
c00109a5:	83 c4 0c             	add    esp,0xc
c00109a8:	c3                   	ret    
c00109a9:	90                   	nop
c00109aa:	66 90                	xchg   ax,ax

c00109ac <Timer::~Timer()>:
c00109ac:	83 ec 0c             	sub    esp,0xc
c00109af:	ba f8 4d 02 c0       	mov    edx,0xc0024df8
c00109b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b8:	89 10                	mov    DWORD PTR [eax],edx
c00109ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109be:	83 ec 0c             	sub    esp,0xc
c00109c1:	50                   	push   eax
c00109c2:	e8 85 d6 ff ff       	call   c000e04c <Device::~Device()>
c00109c7:	83 c4 10             	add    esp,0x10
c00109ca:	90                   	nop
c00109cb:	83 c4 0c             	add    esp,0xc
c00109ce:	c3                   	ret    
c00109cf:	90                   	nop

c00109d0 <Timer::~Timer()>:
c00109d0:	83 ec 0c             	sub    esp,0xc
c00109d3:	83 ec 0c             	sub    esp,0xc
c00109d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109da:	e8 cd ff ff ff       	call   c00109ac <Timer::~Timer()>
c00109df:	83 c4 10             	add    esp,0x10
c00109e2:	83 ec 08             	sub    esp,0x8
c00109e5:	68 5c 01 00 00       	push   0x15c
c00109ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109ee:	e8 23 c2 ff ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c00109f3:	83 c4 10             	add    esp,0x10
c00109f6:	83 c4 0c             	add    esp,0xc
c00109f9:	c3                   	ret    

c00109fa <Timer::read()>:
c00109fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109fe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010a04:	c3                   	ret    

c0010a05 <timerHandler(unsigned int)>:
c0010a05:	56                   	push   esi
c0010a06:	53                   	push   ebx
c0010a07:	51                   	push   ecx
c0010a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a0c:	01 05 6c 81 02 c0    	add    DWORD PTR ds:0xc002816c,eax
c0010a12:	80 3d 4d 7b 02 c0 00 	cmp    BYTE PTR ds:0xc0027b4d,0x0
c0010a19:	0f 84 49 01 00 00    	je     c0010b68 <timerHandler(unsigned int)+0x163>
c0010a1f:	fa                   	cli    
c0010a20:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c0010a26:	83 ec 0c             	sub    esp,0xc
c0010a29:	ff 05 04 90 02 c0    	inc    DWORD PTR ds:0xc0029004
c0010a2f:	68 18 90 02 c0       	push   0xc0029018
c0010a34:	e8 ab 1f 01 00       	call   c00229e4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010a39:	83 c4 10             	add    esp,0x10
c0010a3c:	84 c0                	test   al,al
c0010a3e:	0f 85 a0 00 00 00    	jne    c0010ae4 <timerHandler(unsigned int)+0xdf>
c0010a44:	83 ec 0c             	sub    esp,0xc
c0010a47:	68 18 90 02 c0       	push   0xc0029018
c0010a4c:	e8 af 1f 01 00       	call   c0022a00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010a51:	83 c4 10             	add    esp,0x10
c0010a54:	89 c6                	mov    esi,eax
c0010a56:	66 90                	xchg   ax,ax
c0010a58:	83 ec 0c             	sub    esp,0xc
c0010a5b:	68 18 90 02 c0       	push   0xc0029018
c0010a60:	e8 9b 1f 01 00       	call   c0022a00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010a65:	c7 04 24 18 90 02 c0 	mov    DWORD PTR [esp],0xc0029018
c0010a6c:	89 c3                	mov    ebx,eax
c0010a6e:	e8 95 1f 01 00       	call   c0022a08 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0010a73:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010a76:	83 c4 10             	add    esp,0x10
c0010a79:	3b 05 6c 81 02 c0    	cmp    eax,DWORD PTR ds:0xc002816c
c0010a7f:	77 23                	ja     c0010aa4 <timerHandler(unsigned int)+0x9f>
c0010a81:	83 ec 0c             	sub    esp,0xc
c0010a84:	53                   	push   ebx
c0010a85:	e8 a6 7e 00 00       	call   c0018930 <unblockTask(ThreadControlBlock*)>
c0010a8a:	83 c4 10             	add    esp,0x10
c0010a8d:	39 de                	cmp    esi,ebx
c0010a8f:	75 27                	jne    c0010ab8 <timerHandler(unsigned int)+0xb3>
c0010a91:	83 ec 0c             	sub    esp,0xc
c0010a94:	68 18 90 02 c0       	push   0xc0029018
c0010a99:	e8 62 1f 01 00       	call   c0022a00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010a9e:	89 c6                	mov    esi,eax
c0010aa0:	eb 12                	jmp    c0010ab4 <timerHandler(unsigned int)+0xaf>
c0010aa2:	66 90                	xchg   ax,ax
c0010aa4:	52                   	push   edx
c0010aa5:	52                   	push   edx
c0010aa6:	53                   	push   ebx
c0010aa7:	68 18 90 02 c0       	push   0xc0029018
c0010aac:	e8 0f 20 01 00       	call   c0022ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0010ab1:	8d 76 00             	lea    esi,[esi+0x0]
c0010ab4:	83 c4 10             	add    esp,0x10
c0010ab7:	90                   	nop
c0010ab8:	83 ec 0c             	sub    esp,0xc
c0010abb:	68 18 90 02 c0       	push   0xc0029018
c0010ac0:	e8 1f 1f 01 00       	call   c00229e4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010ac5:	83 c4 10             	add    esp,0x10
c0010ac8:	84 c0                	test   al,al
c0010aca:	75 18                	jne    c0010ae4 <timerHandler(unsigned int)+0xdf>
c0010acc:	83 ec 0c             	sub    esp,0xc
c0010acf:	68 18 90 02 c0       	push   0xc0029018
c0010ad4:	e8 27 1f 01 00       	call   c0022a00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010ad9:	83 c4 10             	add    esp,0x10
c0010adc:	39 f0                	cmp    eax,esi
c0010ade:	0f 85 74 ff ff ff    	jne    c0010a58 <timerHandler(unsigned int)+0x53>
c0010ae4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ae9:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0010aed:	74 41                	je     c0010b30 <timerHandler(unsigned int)+0x12b>
c0010aef:	80 3d 4c 7b 02 c0 00 	cmp    BYTE PTR ds:0xc0027b4c,0x0
c0010af6:	74 38                	je     c0010b30 <timerHandler(unsigned int)+0x12b>
c0010af8:	fa                   	cli    
c0010af9:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c0010aff:	a1 6c 81 02 c0       	mov    eax,ds:0xc002816c
c0010b04:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010b0a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0010b0d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010b13:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c0010b16:	72 08                	jb     c0010b20 <timerHandler(unsigned int)+0x11b>
c0010b18:	e8 57 79 00 00       	call   c0018474 <schedule()>
c0010b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0010b20:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c0010b25:	48                   	dec    eax
c0010b26:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c0010b2b:	75 03                	jne    c0010b30 <timerHandler(unsigned int)+0x12b>
c0010b2d:	fb                   	sti    
c0010b2e:	66 90                	xchg   ax,ax
c0010b30:	a1 04 90 02 c0       	mov    eax,ds:0xc0029004
c0010b35:	48                   	dec    eax
c0010b36:	a3 04 90 02 c0       	mov    ds:0xc0029004,eax
c0010b3b:	75 1b                	jne    c0010b58 <timerHandler(unsigned int)+0x153>
c0010b3d:	83 3d 00 90 02 c0 00 	cmp    DWORD PTR ds:0xc0029000,0x0
c0010b44:	74 12                	je     c0010b58 <timerHandler(unsigned int)+0x153>
c0010b46:	c7 05 00 90 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029000,0x0
c0010b50:	e8 1f 79 00 00       	call   c0018474 <schedule()>
c0010b55:	8d 76 00             	lea    esi,[esi+0x0]
c0010b58:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c0010b5d:	48                   	dec    eax
c0010b5e:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c0010b63:	75 03                	jne    c0010b68 <timerHandler(unsigned int)+0x163>
c0010b65:	fb                   	sti    
c0010b66:	66 90                	xchg   ax,ax
c0010b68:	58                   	pop    eax
c0010b69:	5b                   	pop    ebx
c0010b6a:	5e                   	pop    esi
c0010b6b:	c3                   	ret    

c0010b6c <setupTimer(int)>:
c0010b6c:	57                   	push   edi
c0010b6d:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c0010b72:	56                   	push   esi
c0010b73:	53                   	push   ebx
c0010b74:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010b78:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010b7e:	83 ec 0c             	sub    esp,0xc
c0010b81:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010b87:	e8 f2 d8 ff ff       	call   c000e47e <Device::getName()>
c0010b8c:	83 c4 10             	add    esp,0x10
c0010b8f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010b92:	0f 85 94 00 00 00    	jne    c0010c2c <setupTimer(int)+0xc0>
c0010b98:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c0010b9d:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0010ba4:	0f 84 82 00 00 00    	je     c0010c2c <setupTimer(int)+0xc0>
c0010baa:	83 ec 0c             	sub    esp,0xc
c0010bad:	68 5c 01 00 00       	push   0x15c
c0010bb2:	e8 50 8e ff ff       	call   c0009a07 <malloc>
c0010bb7:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bba:	89 c3                	mov    ebx,eax
c0010bbc:	e8 2b 14 01 00       	call   c0021fec <PIT::PIT()>
c0010bc1:	59                   	pop    ecx
c0010bc2:	5f                   	pop    edi
c0010bc3:	53                   	push   ebx
c0010bc4:	ff 35 48 7b 02 c0    	push   DWORD PTR ds:0xc0027b48
c0010bca:	e8 af d5 ff ff       	call   c000e17e <Device::addChild(Device*)>
c0010bcf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010bd1:	6a 00                	push   0x0
c0010bd3:	6a 00                	push   0x0
c0010bd5:	56                   	push   esi
c0010bd6:	53                   	push   ebx
c0010bd7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010bda:	83 c4 14             	add    esp,0x14
c0010bdd:	68 60 01 00 00       	push   0x160
c0010be2:	e8 20 8e ff ff       	call   c0009a07 <malloc>
c0010be7:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bea:	89 c7                	mov    edi,eax
c0010bec:	e8 af 12 01 00       	call   c0021ea0 <APICTimer::APICTimer()>
c0010bf1:	6a 00                	push   0x0
c0010bf3:	6a 00                	push   0x0
c0010bf5:	56                   	push   esi
c0010bf6:	57                   	push   edi
c0010bf7:	e8 a4 11 01 00       	call   c0021da0 <APICTimer::open(int, int, void*)>
c0010bfc:	83 c4 20             	add    esp,0x20
c0010bff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c01:	6a 00                	push   0x0
c0010c03:	6a 00                	push   0x0
c0010c05:	6a 00                	push   0x0
c0010c07:	53                   	push   ebx
c0010c08:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010c0b:	58                   	pop    eax
c0010c0c:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c0010c11:	5a                   	pop    edx
c0010c12:	57                   	push   edi
c0010c13:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010c19:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010c1f:	e8 5a d5 ff ff       	call   c000e17e <Device::addChild(Device*)>
c0010c24:	83 c4 10             	add    esp,0x10
c0010c27:	eb 37                	jmp    c0010c60 <setupTimer(int)+0xf4>
c0010c29:	8d 76 00             	lea    esi,[esi+0x0]
c0010c2c:	83 ec 0c             	sub    esp,0xc
c0010c2f:	68 5c 01 00 00       	push   0x15c
c0010c34:	e8 ce 8d ff ff       	call   c0009a07 <malloc>
c0010c39:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c3c:	89 c3                	mov    ebx,eax
c0010c3e:	e8 a9 13 01 00       	call   c0021fec <PIT::PIT()>
c0010c43:	58                   	pop    eax
c0010c44:	5a                   	pop    edx
c0010c45:	53                   	push   ebx
c0010c46:	ff 35 48 7b 02 c0    	push   DWORD PTR ds:0xc0027b48
c0010c4c:	e8 2d d5 ff ff       	call   c000e17e <Device::addChild(Device*)>
c0010c51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c53:	6a 00                	push   0x0
c0010c55:	6a 00                	push   0x0
c0010c57:	56                   	push   esi
c0010c58:	53                   	push   ebx
c0010c59:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010c5c:	83 c4 20             	add    esp,0x20
c0010c5f:	90                   	nop
c0010c60:	89 d8                	mov    eax,ebx
c0010c62:	5b                   	pop    ebx
c0010c63:	5e                   	pop    esi
c0010c64:	5f                   	pop    edi
c0010c65:	c3                   	ret    
c0010c66:	66 90                	xchg   ax,ax

c0010c68 <VCache::VCache(PhysicalDisk*)>:
c0010c68:	53                   	push   ebx
c0010c69:	83 ec 18             	sub    esp,0x18
c0010c6c:	ba 28 4e 02 c0       	mov    edx,0xc0024e28
c0010c71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c75:	89 10                	mov    DWORD PTR [eax],edx
c0010c77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c7b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0010c82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c86:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0010c8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c91:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0010c98:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0010c9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ca3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0010caa:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010cb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cb5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0010cbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cc0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010cc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cc8:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0010ccf:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0010cd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cda:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010cde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ce2:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0010ce6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cea:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010cee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cf2:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010cf9:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0010d01:	83 ec 0c             	sub    esp,0xc
c0010d04:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010d08:	e8 fa 8c ff ff       	call   c0009a07 <malloc>
c0010d0d:	83 c4 10             	add    esp,0x10
c0010d10:	89 c3                	mov    ebx,eax
c0010d12:	83 ec 0c             	sub    esp,0xc
c0010d15:	53                   	push   ebx
c0010d16:	e8 29 75 00 00       	call   c0018244 <Mutex::Mutex()>
c0010d1b:	83 c4 10             	add    esp,0x10
c0010d1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d22:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010d25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d29:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010d2d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d34:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0010d3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010d3f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0010d45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d49:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010d4c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010d50:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0010d56:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010d5c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010d60:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0010d63:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0010d66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d6a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010d6e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010d72:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010d78:	05 00 01 00 00       	add    eax,0x100
c0010d7d:	c1 e0 04             	shl    eax,0x4
c0010d80:	83 ec 0c             	sub    esp,0xc
c0010d83:	50                   	push   eax
c0010d84:	e8 7e 8c ff ff       	call   c0009a07 <malloc>
c0010d89:	83 c4 10             	add    esp,0x10
c0010d8c:	89 c2                	mov    edx,eax
c0010d8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d92:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010d95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d99:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010da0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010da4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010da8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010dac:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010db2:	c1 e0 06             	shl    eax,0x6
c0010db5:	83 ec 0c             	sub    esp,0xc
c0010db8:	50                   	push   eax
c0010db9:	e8 49 8c ff ff       	call   c0009a07 <malloc>
c0010dbe:	83 c4 10             	add    esp,0x10
c0010dc1:	89 c2                	mov    edx,eax
c0010dc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dc7:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010dca:	90                   	nop
c0010dcb:	83 c4 18             	add    esp,0x18
c0010dce:	5b                   	pop    ebx
c0010dcf:	c3                   	ret    

c0010dd0 <VCache::invalidateReadBuffer()>:
c0010dd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dd4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010dda:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010dde:	c3                   	ret    
c0010ddf:	90                   	nop

c0010de0 <VCache::writeWriteBuffer()>:
c0010de0:	53                   	push   ebx
c0010de1:	83 ec 14             	sub    esp,0x14
c0010de4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010de8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010deb:	8b 10                	mov    edx,DWORD PTR [eax]
c0010ded:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010df0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010df3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010df6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010df9:	50                   	push   eax
c0010dfa:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010dfd:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0010e04:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010e0b:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0010e0f:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010e16:	83 c4 28             	add    esp,0x28
c0010e19:	5b                   	pop    ebx
c0010e1a:	c3                   	ret    
c0010e1b:	90                   	nop

c0010e1c <VCache::~VCache()>:
c0010e1c:	83 ec 0c             	sub    esp,0xc
c0010e1f:	ba 28 4e 02 c0       	mov    edx,0xc0024e28
c0010e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e28:	89 10                	mov    DWORD PTR [eax],edx
c0010e2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e2e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0010e31:	84 c0                	test   al,al
c0010e33:	74 0f                	je     c0010e44 <VCache::~VCache()+0x28>
c0010e35:	83 ec 0c             	sub    esp,0xc
c0010e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e3c:	e8 9f ff ff ff       	call   c0010de0 <VCache::writeWriteBuffer()>
c0010e41:	83 c4 10             	add    esp,0x10
c0010e44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e48:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010e4b:	83 ec 0c             	sub    esp,0xc
c0010e4e:	50                   	push   eax
c0010e4f:	e8 c3 8b ff ff       	call   c0009a17 <free>
c0010e54:	83 c4 10             	add    esp,0x10
c0010e57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e5b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0010e5e:	83 ec 0c             	sub    esp,0xc
c0010e61:	50                   	push   eax
c0010e62:	e8 b0 8b ff ff       	call   c0009a17 <free>
c0010e67:	83 c4 10             	add    esp,0x10
c0010e6a:	90                   	nop
c0010e6b:	83 c4 0c             	add    esp,0xc
c0010e6e:	c3                   	ret    
c0010e6f:	90                   	nop

c0010e70 <VCache::~VCache()>:
c0010e70:	83 ec 0c             	sub    esp,0xc
c0010e73:	83 ec 0c             	sub    esp,0xc
c0010e76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e7a:	e8 9d ff ff ff       	call   c0010e1c <VCache::~VCache()>
c0010e7f:	83 c4 10             	add    esp,0x10
c0010e82:	83 ec 08             	sub    esp,0x8
c0010e85:	6a 44                	push   0x44
c0010e87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e8b:	e8 86 bd ff ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c0010e90:	83 c4 10             	add    esp,0x10
c0010e93:	83 c4 0c             	add    esp,0xc
c0010e96:	c3                   	ret    
c0010e97:	90                   	nop

c0010e98 <VCache::write(unsigned long long, int, void*)>:
c0010e98:	55                   	push   ebp
c0010e99:	31 c0                	xor    eax,eax
c0010e9b:	57                   	push   edi
c0010e9c:	56                   	push   esi
c0010e9d:	53                   	push   ebx
c0010e9e:	83 ec 0c             	sub    esp,0xc
c0010ea1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010ea5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010ea9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010ead:	8d 76 00             	lea    esi,[esi+0x0]
c0010eb0:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0010eb4:	7d 1a                	jge    c0010ed0 <VCache::write(unsigned long long, int, void*)+0x38>
c0010eb6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010eb9:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010ebf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010ec3:	0f af c8             	imul   ecx,eax
c0010ec6:	01 ca                	add    edx,ecx
c0010ec8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010eca:	40                   	inc    eax
c0010ecb:	eb e3                	jmp    c0010eb0 <VCache::write(unsigned long long, int, void*)+0x18>
c0010ecd:	8d 76 00             	lea    esi,[esi+0x0]
c0010ed0:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010ed4:	74 0a                	je     c0010ee0 <VCache::write(unsigned long long, int, void*)+0x48>
c0010ed6:	53                   	push   ebx
c0010ed7:	e8 f4 fe ff ff       	call   c0010dd0 <VCache::invalidateReadBuffer()>
c0010edc:	58                   	pop    eax
c0010edd:	8d 76 00             	lea    esi,[esi+0x0]
c0010ee0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010ee4:	74 5e                	je     c0010f44 <VCache::write(unsigned long long, int, void*)+0xac>
c0010ee6:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0010ee9:	89 e8                	mov    eax,ebp
c0010eeb:	99                   	cdq    
c0010eec:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0010eef:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0010ef2:	89 c1                	mov    ecx,eax
c0010ef4:	89 d0                	mov    eax,edx
c0010ef6:	31 f1                	xor    ecx,esi
c0010ef8:	31 f8                	xor    eax,edi
c0010efa:	09 c1                	or     ecx,eax
c0010efc:	75 3a                	jne    c0010f38 <VCache::write(unsigned long long, int, void*)+0xa0>
c0010efe:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0010f03:	75 33                	jne    c0010f38 <VCache::write(unsigned long long, int, void*)+0xa0>
c0010f05:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010f08:	89 ef                	mov    edi,ebp
c0010f0a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010f10:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010f14:	0f af f9             	imul   edi,ecx
c0010f17:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0010f1a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f1c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010f1f:	40                   	inc    eax
c0010f20:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010f23:	83 f8 40             	cmp    eax,0x40
c0010f26:	75 60                	jne    c0010f88 <VCache::write(unsigned long long, int, void*)+0xf0>
c0010f28:	83 ec 0c             	sub    esp,0xc
c0010f2b:	53                   	push   ebx
c0010f2c:	e8 af fe ff ff       	call   c0010de0 <VCache::writeWriteBuffer()>
c0010f31:	83 c4 10             	add    esp,0x10
c0010f34:	eb 52                	jmp    c0010f88 <VCache::write(unsigned long long, int, void*)+0xf0>
c0010f36:	66 90                	xchg   ax,ax
c0010f38:	83 ec 0c             	sub    esp,0xc
c0010f3b:	53                   	push   ebx
c0010f3c:	e8 9f fe ff ff       	call   c0010de0 <VCache::writeWriteBuffer()>
c0010f41:	83 c4 10             	add    esp,0x10
c0010f44:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010f47:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c0010f4c:	7f 22                	jg     c0010f70 <VCache::write(unsigned long long, int, void*)+0xd8>
c0010f4e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0010f51:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0010f54:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010f58:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0010f5c:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0010f5f:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010f62:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010f68:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010f6c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f6e:	eb 18                	jmp    c0010f88 <VCache::write(unsigned long long, int, void*)+0xf0>
c0010f70:	83 ec 0c             	sub    esp,0xc
c0010f73:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f75:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010f79:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010f7d:	57                   	push   edi
c0010f7e:	56                   	push   esi
c0010f7f:	50                   	push   eax
c0010f80:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010f83:	83 c4 20             	add    esp,0x20
c0010f86:	66 90                	xchg   ax,ax
c0010f88:	83 c4 0c             	add    esp,0xc
c0010f8b:	31 c0                	xor    eax,eax
c0010f8d:	5b                   	pop    ebx
c0010f8e:	5e                   	pop    esi
c0010f8f:	5f                   	pop    edi
c0010f90:	5d                   	pop    ebp
c0010f91:	c3                   	ret    

c0010f92 <VCache::read(unsigned long long, int, void*)>:
c0010f92:	55                   	push   ebp
c0010f93:	31 c0                	xor    eax,eax
c0010f95:	57                   	push   edi
c0010f96:	56                   	push   esi
c0010f97:	53                   	push   ebx
c0010f98:	83 ec 1c             	sub    esp,0x1c
c0010f9b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010f9f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010fa3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0010fa7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010fab:	90                   	nop
c0010fac:	39 e8                	cmp    eax,ebp
c0010fae:	7d 18                	jge    c0010fc8 <VCache::read(unsigned long long, int, void*)+0x36>
c0010fb0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010fb3:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010fb9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0010fbd:	0f af c8             	imul   ecx,eax
c0010fc0:	01 ca                	add    edx,ecx
c0010fc2:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010fc4:	40                   	inc    eax
c0010fc5:	eb e5                	jmp    c0010fac <VCache::read(unsigned long long, int, void*)+0x1a>
c0010fc7:	90                   	nop
c0010fc8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010fcc:	74 0e                	je     c0010fdc <VCache::read(unsigned long long, int, void*)+0x4a>
c0010fce:	83 ec 0c             	sub    esp,0xc
c0010fd1:	53                   	push   ebx
c0010fd2:	e8 09 fe ff ff       	call   c0010de0 <VCache::writeWriteBuffer()>
c0010fd7:	83 c4 10             	add    esp,0x10
c0010fda:	66 90                	xchg   ax,ax
c0010fdc:	83 fd 01             	cmp    ebp,0x1
c0010fdf:	0f 85 87 00 00 00    	jne    c001106c <VCache::read(unsigned long long, int, void*)+0xda>
c0010fe5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010fe8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010fec:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0010ff3:	75 77                	jne    c001106c <VCache::read(unsigned long long, int, void*)+0xda>
c0010ff5:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0010ff8:	89 e9                	mov    ecx,ebp
c0010ffa:	f7 d9                	neg    ecx
c0010ffc:	89 c8                	mov    eax,ecx
c0010ffe:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0011002:	c1 f8 1f             	sar    eax,0x1f
c0011005:	21 f1                	and    ecx,esi
c0011007:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001100b:	89 c8                	mov    eax,ecx
c001100d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011011:	21 f9                	and    ecx,edi
c0011013:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0011017:	89 ca                	mov    edx,ecx
c0011019:	74 0d                	je     c0011028 <VCache::read(unsigned long long, int, void*)+0x96>
c001101b:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001101e:	75 08                	jne    c0011028 <VCache::read(unsigned long long, int, void*)+0x96>
c0011020:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0011023:	74 27                	je     c001104c <VCache::read(unsigned long long, int, void*)+0xba>
c0011025:	8d 76 00             	lea    esi,[esi+0x0]
c0011028:	83 ec 0c             	sub    esp,0xc
c001102b:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001102f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0011033:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0011036:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0011039:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001103b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001103e:	55                   	push   ebp
c001103f:	52                   	push   edx
c0011040:	50                   	push   eax
c0011041:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011045:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0011048:	83 c4 20             	add    esp,0x20
c001104b:	90                   	nop
c001104c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001104f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0011053:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011059:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001105c:	48                   	dec    eax
c001105d:	21 c6                	and    esi,eax
c001105f:	0f af f1             	imul   esi,ecx
c0011062:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0011065:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011067:	eb 23                	jmp    c001108c <VCache::read(unsigned long long, int, void*)+0xfa>
c0011069:	8d 76 00             	lea    esi,[esi+0x0]
c001106c:	83 ec 0c             	sub    esp,0xc
c001106f:	53                   	push   ebx
c0011070:	e8 5b fd ff ff       	call   c0010dd0 <VCache::invalidateReadBuffer()>
c0011075:	5a                   	pop    edx
c0011076:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011079:	8b 10                	mov    edx,DWORD PTR [eax]
c001107b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001107f:	55                   	push   ebp
c0011080:	57                   	push   edi
c0011081:	56                   	push   esi
c0011082:	50                   	push   eax
c0011083:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0011086:	83 c4 20             	add    esp,0x20
c0011089:	8d 76 00             	lea    esi,[esi+0x0]
c001108c:	83 c4 1c             	add    esp,0x1c
c001108f:	31 c0                	xor    eax,eax
c0011091:	5b                   	pop    ebx
c0011092:	5e                   	pop    esi
c0011093:	5f                   	pop    edi
c0011094:	5d                   	pop    ebp
c0011095:	c3                   	ret    

c0011096 <Video::putrect(int, int, int, int, unsigned int)>:
c0011096:	55                   	push   ebp
c0011097:	57                   	push   edi
c0011098:	56                   	push   esi
c0011099:	53                   	push   ebx
c001109a:	83 ec 1c             	sub    esp,0x1c
c001109d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00110a1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00110a5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00110a9:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00110ad:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00110b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00110b5:	01 df                	add    edi,ebx
c00110b7:	39 fb                	cmp    ebx,edi
c00110b9:	7d 1f                	jge    c00110da <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00110bb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00110bf:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00110c3:	7d 12                	jge    c00110d7 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00110c5:	8b 16                	mov    edx,DWORD PTR [esi]
c00110c7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00110cb:	53                   	push   ebx
c00110cc:	55                   	push   ebp
c00110cd:	45                   	inc    ebp
c00110ce:	56                   	push   esi
c00110cf:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00110d2:	83 c4 10             	add    esp,0x10
c00110d5:	eb e8                	jmp    c00110bf <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00110d7:	43                   	inc    ebx
c00110d8:	eb dd                	jmp    c00110b7 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00110da:	83 c4 1c             	add    esp,0x1c
c00110dd:	5b                   	pop    ebx
c00110de:	5e                   	pop    esi
c00110df:	5f                   	pop    edi
c00110e0:	5d                   	pop    ebp
c00110e1:	c3                   	ret    

c00110e2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00110e2:	55                   	push   ebp
c00110e3:	57                   	push   edi
c00110e4:	31 ff                	xor    edi,edi
c00110e6:	56                   	push   esi
c00110e7:	53                   	push   ebx
c00110e8:	83 ec 1c             	sub    esp,0x1c
c00110eb:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00110ef:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00110f3:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00110fa:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00110ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011103:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0011107:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001110b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001110e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011112:	01 f9                	add    ecx,edi
c0011114:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0011118:	7d 2f                	jge    c0011149 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001111a:	31 f6                	xor    esi,esi
c001111c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011120:	01 f2                	add    edx,esi
c0011122:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0011126:	7d 1a                	jge    c0011142 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0011128:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001112b:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001112e:	46                   	inc    esi
c001112f:	51                   	push   ecx
c0011130:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011134:	52                   	push   edx
c0011135:	55                   	push   ebp
c0011136:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011139:	83 c4 10             	add    esp,0x10
c001113c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011140:	eb da                	jmp    c001111c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0011142:	47                   	inc    edi
c0011143:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0011147:	eb c5                	jmp    c001110e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0011149:	83 c4 1c             	add    esp,0x1c
c001114c:	5b                   	pop    ebx
c001114d:	5e                   	pop    esi
c001114e:	5f                   	pop    edi
c001114f:	5d                   	pop    ebp
c0011150:	c3                   	ret    
c0011151:	90                   	nop

c0011152 <Video::blit(unsigned int*, int, int, int, int)>:
c0011152:	55                   	push   ebp
c0011153:	57                   	push   edi
c0011154:	56                   	push   esi
c0011155:	53                   	push   ebx
c0011156:	83 ec 1c             	sub    esp,0x1c
c0011159:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001115d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011161:	85 c0                	test   eax,eax
c0011163:	79 02                	jns    c0011167 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0011165:	31 c0                	xor    eax,eax
c0011167:	c1 e0 02             	shl    eax,0x2
c001116a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001116e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011172:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011176:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001117a:	39 d8                	cmp    eax,ebx
c001117c:	7e 49                	jle    c00111c7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001117e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0011184:	7c 41                	jl     c00111c7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0011186:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001118a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001118e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011192:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0011196:	39 f9                	cmp    ecx,edi
c0011198:	7e 22                	jle    c00111bc <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001119a:	83 c5 04             	add    ebp,0x4
c001119d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00111a3:	7c 14                	jl     c00111b9 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00111a5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00111a7:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00111aa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00111ae:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00111b2:	56                   	push   esi
c00111b3:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00111b6:	83 c4 10             	add    esp,0x10
c00111b9:	47                   	inc    edi
c00111ba:	eb d2                	jmp    c001118e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00111bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00111c0:	43                   	inc    ebx
c00111c1:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00111c5:	eb ab                	jmp    c0011172 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00111c7:	83 c4 1c             	add    esp,0x1c
c00111ca:	5b                   	pop    ebx
c00111cb:	5e                   	pop    esi
c00111cc:	5f                   	pop    edi
c00111cd:	5d                   	pop    ebp
c00111ce:	c3                   	ret    
c00111cf:	90                   	nop

c00111d0 <Video::clearScreen(unsigned int)>:
c00111d0:	57                   	push   edi
c00111d1:	56                   	push   esi
c00111d2:	53                   	push   ebx
c00111d3:	31 db                	xor    ebx,ebx
c00111d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00111d9:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00111df:	7e 1f                	jle    c0011200 <Video::clearScreen(unsigned int)+0x30>
c00111e1:	31 ff                	xor    edi,edi
c00111e3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00111e9:	7e 12                	jle    c00111fd <Video::clearScreen(unsigned int)+0x2d>
c00111eb:	8b 06                	mov    eax,DWORD PTR [esi]
c00111ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00111f1:	53                   	push   ebx
c00111f2:	57                   	push   edi
c00111f3:	47                   	inc    edi
c00111f4:	56                   	push   esi
c00111f5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00111f8:	83 c4 10             	add    esp,0x10
c00111fb:	eb e6                	jmp    c00111e3 <Video::clearScreen(unsigned int)+0x13>
c00111fd:	43                   	inc    ebx
c00111fe:	eb d9                	jmp    c00111d9 <Video::clearScreen(unsigned int)+0x9>
c0011200:	5b                   	pop    ebx
c0011201:	5e                   	pop    esi
c0011202:	5f                   	pop    edi
c0011203:	c3                   	ret    

c0011204 <Video::putpixel(int, int, unsigned int)>:
c0011204:	c7 44 24 04 30 4e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024e30
c001120c:	e9 92 36 00 00       	jmp    c00148a3 <Krnl::panic(char const*)>
c0011211:	90                   	nop

c0011212 <Video::Video(char const*)>:
c0011212:	83 ec 0c             	sub    esp,0xc
c0011215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011219:	83 ec 08             	sub    esp,0x8
c001121c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011220:	50                   	push   eax
c0011221:	e8 5c d1 ff ff       	call   c000e382 <Device::Device(char const*)>
c0011226:	83 c4 10             	add    esp,0x10
c0011229:	ba a0 4e 02 c0       	mov    edx,0xc0024ea0
c001122e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011232:	89 10                	mov    DWORD PTR [eax],edx
c0011234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011238:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0011242:	90                   	nop
c0011243:	83 c4 0c             	add    esp,0xc
c0011246:	c3                   	ret    
c0011247:	90                   	nop

c0011248 <Video::~Video()>:
c0011248:	83 ec 0c             	sub    esp,0xc
c001124b:	ba a0 4e 02 c0       	mov    edx,0xc0024ea0
c0011250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011254:	89 10                	mov    DWORD PTR [eax],edx
c0011256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001125a:	83 ec 0c             	sub    esp,0xc
c001125d:	50                   	push   eax
c001125e:	e8 e9 cd ff ff       	call   c000e04c <Device::~Device()>
c0011263:	83 c4 10             	add    esp,0x10
c0011266:	90                   	nop
c0011267:	83 c4 0c             	add    esp,0xc
c001126a:	c3                   	ret    
c001126b:	90                   	nop

c001126c <Video::~Video()>:
c001126c:	83 ec 0c             	sub    esp,0xc
c001126f:	83 ec 0c             	sub    esp,0xc
c0011272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011276:	e8 cd ff ff ff       	call   c0011248 <Video::~Video()>
c001127b:	83 c4 10             	add    esp,0x10
c001127e:	83 ec 08             	sub    esp,0x8
c0011281:	68 64 01 00 00       	push   0x164
c0011286:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001128a:	e8 87 b9 ff ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c001128f:	83 c4 10             	add    esp,0x10
c0011292:	83 c4 0c             	add    esp,0xc
c0011295:	c3                   	ret    

c0011296 <Video::isMonochrome()>:
c0011296:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001129a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00112a0:	c3                   	ret    
c00112a1:	90                   	nop

c00112a2 <Video::getWidth()>:
c00112a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112a6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00112ac:	c3                   	ret    
c00112ad:	90                   	nop

c00112ae <Video::getHeight()>:
c00112ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112b2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00112b8:	c3                   	ret    
c00112b9:	90                   	nop

c00112ba <Video::drawCursor(int, int, unsigned char*, int)>:
c00112ba:	55                   	push   ebp
c00112bb:	57                   	push   edi
c00112bc:	56                   	push   esi
c00112bd:	53                   	push   ebx
c00112be:	83 ec 2c             	sub    esp,0x2c
c00112c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00112c5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00112c9:	83 f8 01             	cmp    eax,0x1
c00112cc:	19 c9                	sbb    ecx,ecx
c00112ce:	31 db                	xor    ebx,ebx
c00112d0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00112d4:	89 cd                	mov    ebp,ecx
c00112d6:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00112de:	f7 d5                	not    ebp
c00112e0:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00112e6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00112ea:	01 d8                	add    eax,ebx
c00112ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00112f0:	56                   	push   esi
c00112f1:	e8 b8 ff ff ff       	call   c00112ae <Video::getHeight()>
c00112f6:	59                   	pop    ecx
c00112f7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00112fb:	7e 70                	jle    c001136d <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00112fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011301:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0011305:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0011308:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001130c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011310:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0011317:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001131b:	89 f8                	mov    eax,edi
c001131d:	83 c0 20             	add    eax,0x20
c0011320:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011324:	56                   	push   esi
c0011325:	e8 78 ff ff ff       	call   c00112a2 <Video::getWidth()>
c001132a:	5a                   	pop    edx
c001132b:	39 c7                	cmp    edi,eax
c001132d:	7d 34                	jge    c0011363 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001132f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0011334:	74 05                	je     c001133b <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0011336:	8b 06                	mov    eax,DWORD PTR [esi]
c0011338:	55                   	push   ebp
c0011339:	eb 0d                	jmp    c0011348 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001133b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0011340:	74 12                	je     c0011354 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0011342:	8b 06                	mov    eax,DWORD PTR [esi]
c0011344:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011348:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001134c:	57                   	push   edi
c001134d:	56                   	push   esi
c001134e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011351:	83 c4 10             	add    esp,0x10
c0011354:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0011358:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001135c:	47                   	inc    edi
c001135d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011361:	75 c1                	jne    c0011324 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0011363:	43                   	inc    ebx
c0011364:	83 fb 20             	cmp    ebx,0x20
c0011367:	0f 85 79 ff ff ff    	jne    c00112e6 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001136d:	83 c4 2c             	add    esp,0x2c
c0011370:	5b                   	pop    ebx
c0011371:	5e                   	pop    esi
c0011372:	5f                   	pop    edi
c0011373:	5d                   	pop    ebp
c0011374:	c3                   	ret    
c0011375:	90                   	nop

c0011376 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0011376:	55                   	push   ebp
c0011377:	57                   	push   edi
c0011378:	56                   	push   esi
c0011379:	53                   	push   ebx
c001137a:	83 ec 28             	sub    esp,0x28
c001137d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011381:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0011385:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0011389:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001138d:	c1 e6 08             	shl    esi,0x8
c0011390:	01 c6                	add    esi,eax
c0011392:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0011396:	c1 e0 08             	shl    eax,0x8
c0011399:	01 d0                	add    eax,edx
c001139b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001139f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113a3:	0f af c6             	imul   eax,esi
c00113a6:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00113ad:	50                   	push   eax
c00113ae:	e8 54 86 ff ff       	call   c0009a07 <malloc>
c00113b3:	83 c4 10             	add    esp,0x10
c00113b6:	89 c7                	mov    edi,eax
c00113b8:	85 c0                	test   eax,eax
c00113ba:	75 10                	jne    c00113cc <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c00113bc:	83 ec 0c             	sub    esp,0xc
c00113bf:	68 51 4e 02 c0       	push   0xc0024e51
c00113c4:	e8 da 34 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c00113c9:	83 c4 10             	add    esp,0x10
c00113cc:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00113cf:	ba 12 00 00 00       	mov    edx,0x12
c00113d4:	84 c0                	test   al,al
c00113d6:	74 11                	je     c00113e9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c00113d8:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c00113dc:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c00113e0:	c1 fa 03             	sar    edx,0x3
c00113e3:	0f af d1             	imul   edx,ecx
c00113e6:	83 c2 12             	add    edx,0x12
c00113e9:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00113ed:	74 04                	je     c00113f3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c00113ef:	85 f6                	test   esi,esi
c00113f1:	75 12                	jne    c0011405 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c00113f3:	83 ec 0c             	sub    esp,0xc
c00113f6:	68 61 4e 02 c0       	push   0xc0024e61
c00113fb:	e8 f7 b8 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0011400:	e9 b8 00 00 00       	jmp    c00114bd <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0011405:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0011409:	80 f9 02             	cmp    cl,0x2
c001140c:	0f 85 96 00 00 00    	jne    c00114a8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0011412:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0011417:	75 0e                	jne    c0011427 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011419:	84 c0                	test   al,al
c001141b:	75 0a                	jne    c0011427 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c001141d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0011420:	83 e8 18             	sub    eax,0x18
c0011423:	a8 f7                	test   al,0xf7
c0011425:	74 0a                	je     c0011431 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0011427:	83 ec 0c             	sub    esp,0xc
c001142a:	68 76 4e 02 c0       	push   0xc0024e76
c001142f:	eb 7f                	jmp    c00114b0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0011431:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011439:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011441:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0011445:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001144d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0011451:	75 0c                	jne    c001145f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0011453:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0011458:	c1 e0 18             	shl    eax,0x18
c001145b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001145f:	45                   	inc    ebp
c0011460:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0011465:	c1 e1 10             	shl    ecx,0x10
c0011468:	89 c8                	mov    eax,ecx
c001146a:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c001146f:	c1 e1 08             	shl    ecx,0x8
c0011472:	09 c1                	or     ecx,eax
c0011474:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0011478:	09 c1                	or     ecx,eax
c001147a:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c001147e:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0011482:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0011486:	c1 f8 03             	sar    eax,0x3
c0011489:	01 c2                	add    edx,eax
c001148b:	89 e8                	mov    eax,ebp
c001148d:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0011491:	39 c6                	cmp    esi,eax
c0011493:	7f b0                	jg     c0011445 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0011495:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011499:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001149d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00114a0:	7e 22                	jle    c00114c4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c00114a2:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c00114a6:	eb 99                	jmp    c0011441 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00114a8:	50                   	push   eax
c00114a9:	50                   	push   eax
c00114aa:	51                   	push   ecx
c00114ab:	68 84 4e 02 c0       	push   0xc0024e84
c00114b0:	e8 42 b8 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c00114b5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114b8:	e8 5a 85 ff ff       	call   c0009a17 <free>
c00114bd:	83 c4 10             	add    esp,0x10
c00114c0:	31 ff                	xor    edi,edi
c00114c2:	eb 0f                	jmp    c00114d3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c00114c4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00114c8:	89 30                	mov    DWORD PTR [eax],esi
c00114ca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00114ce:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00114d1:	89 30                	mov    DWORD PTR [eax],esi
c00114d3:	83 c4 1c             	add    esp,0x1c
c00114d6:	89 f8                	mov    eax,edi
c00114d8:	5b                   	pop    ebx
c00114d9:	5e                   	pop    esi
c00114da:	5f                   	pop    edi
c00114db:	5d                   	pop    ebp
c00114dc:	c3                   	ret    
c00114dd:	90                   	nop

c00114de <Video::putTGA(int, int, unsigned char*, int)>:
c00114de:	55                   	push   ebp
c00114df:	57                   	push   edi
c00114e0:	56                   	push   esi
c00114e1:	53                   	push   ebx
c00114e2:	83 ec 28             	sub    esp,0x28
c00114e5:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00114e9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00114ed:	50                   	push   eax
c00114ee:	8d 44 24 18          	lea    eax,[esp+0x18]
c00114f2:	50                   	push   eax
c00114f3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00114f7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00114fb:	56                   	push   esi
c00114fc:	e8 75 fe ff ff       	call   c0011376 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0011501:	83 c4 20             	add    esp,0x20
c0011504:	85 c0                	test   eax,eax
c0011506:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001150a:	74 35                	je     c0011541 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001150c:	89 c7                	mov    edi,eax
c001150e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011512:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0011516:	39 d8                	cmp    eax,ebx
c0011518:	7e 27                	jle    c0011541 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001151a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001151e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011522:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0011526:	39 e8                	cmp    eax,ebp
c0011528:	7e 14                	jle    c001153e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001152a:	8b 06                	mov    eax,DWORD PTR [esi]
c001152c:	83 c7 04             	add    edi,0x4
c001152f:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0011532:	53                   	push   ebx
c0011533:	55                   	push   ebp
c0011534:	45                   	inc    ebp
c0011535:	56                   	push   esi
c0011536:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011539:	83 c4 10             	add    esp,0x10
c001153c:	eb e0                	jmp    c001151e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001153e:	43                   	inc    ebx
c001153f:	eb cd                	jmp    c001150e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0011541:	83 c4 1c             	add    esp,0x1c
c0011544:	5b                   	pop    ebx
c0011545:	5e                   	pop    esi
c0011546:	5f                   	pop    edi
c0011547:	5d                   	pop    ebp
c0011548:	c3                   	ret    
c0011549:	66 90                	xchg   ax,ax
c001154b:	90                   	nop

c001154c <ACPI::close(int, int, void*)>:
c001154c:	83 ec 1c             	sub    esp,0x1c
c001154f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0011557:	74 0b                	je     c0011564 <ACPI::close(int, int, void*)+0x18>
c0011559:	b8 00 00 00 00       	mov    eax,0x0
c001155e:	e9 99 00 00 00       	jmp    c00115fc <ACPI::close(int, int, void*)+0xb0>
c0011563:	90                   	nop
c0011564:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0011569:	75 29                	jne    c0011594 <ACPI::close(int, int, void*)+0x48>
c001156b:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c0011570:	85 c0                	test   eax,eax
c0011572:	74 08                	je     c001157c <ACPI::close(int, int, void*)+0x30>
c0011574:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c0011579:	ff d0                	call   eax
c001157b:	90                   	nop
c001157c:	83 ec 0c             	sub    esp,0xc
c001157f:	68 e0 4e 02 c0       	push   0xc0024ee0
c0011584:	e8 1a 33 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c0011589:	83 c4 10             	add    esp,0x10
c001158c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011591:	eb 69                	jmp    c00115fc <ACPI::close(int, int, void*)+0xb0>
c0011593:	90                   	nop
c0011594:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0011599:	75 59                	jne    c00115f4 <ACPI::close(int, int, void*)+0xa8>
c001159b:	a1 84 81 02 c0       	mov    eax,ds:0xc0028184
c00115a0:	85 c0                	test   eax,eax
c00115a2:	74 08                	je     c00115ac <ACPI::close(int, int, void*)+0x60>
c00115a4:	a1 84 81 02 c0       	mov    eax,ds:0xc0028184
c00115a9:	ff d0                	call   eax
c00115ab:	90                   	nop
c00115ac:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00115b1:	8d 76 00             	lea    esi,[esi+0x0]
c00115b4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00115b9:	83 e0 02             	and    eax,0x2
c00115bc:	74 1e                	je     c00115dc <ACPI::close(int, int, void*)+0x90>
c00115be:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00115c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115c9:	89 c2                	mov    edx,eax
c00115cb:	ec                   	in     al,dx
c00115cc:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00115d0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00115d4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00115d8:	eb da                	jmp    c00115b4 <ACPI::close(int, int, void*)+0x68>
c00115da:	66 90                	xchg   ax,ax
c00115dc:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00115e3:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00115e8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00115ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00115f0:	ee                   	out    dx,al
c00115f1:	8d 76 00             	lea    esi,[esi+0x0]
c00115f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115f9:	8d 76 00             	lea    esi,[esi+0x0]
c00115fc:	83 c4 1c             	add    esp,0x1c
c00115ff:	c3                   	ret    

c0011600 <findRSDP()>:
c0011600:	83 ec 1c             	sub    esp,0x1c
c0011603:	83 ec 0c             	sub    esp,0xc
c0011606:	68 03 50 02 c0       	push   0xc0025003
c001160b:	e8 51 84 ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0011610:	83 c4 10             	add    esp,0x10
c0011613:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c0011618:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001161e:	83 e0 04             	and    eax,0x4
c0011621:	84 c0                	test   al,al
c0011623:	75 0b                	jne    c0011630 <findRSDP()+0x30>
c0011625:	b8 00 00 00 00       	mov    eax,0x0
c001162a:	e9 a1 00 00 00       	jmp    c00116d0 <findRSDP()+0xd0>
c001162f:	90                   	nop
c0011630:	a1 78 7b 02 c0       	mov    eax,ds:0xc0027b78
c0011635:	3d ff 07 00 00       	cmp    eax,0x7ff
c001163a:	7f 1c                	jg     c0011658 <findRSDP()+0x58>
c001163c:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c0011641:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011647:	83 e2 fb             	and    edx,0xfffffffb
c001164a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011650:	b8 00 00 00 00       	mov    eax,0x0
c0011655:	eb 79                	jmp    c00116d0 <findRSDP()+0xd0>
c0011657:	90                   	nop
c0011658:	83 ec 0c             	sub    esp,0xc
c001165b:	68 13 50 02 c0       	push   0xc0025013
c0011660:	e8 fc 83 ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0011665:	83 c4 10             	add    esp,0x10
c0011668:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0011670:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0011678:	77 3e                	ja     c00116b8 <findRSDP()+0xb8>
c001167a:	83 ec 04             	sub    esp,0x4
c001167d:	6a 08                	push   0x8
c001167f:	68 2c 50 02 c0       	push   0xc002502c
c0011684:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011688:	e8 f3 ee fe ff       	call   c0000580 <memcmp>
c001168d:	83 c4 10             	add    esp,0x10
c0011690:	85 c0                	test   eax,eax
c0011692:	0f 94 c0             	sete   al
c0011695:	84 c0                	test   al,al
c0011697:	74 17                	je     c00116b0 <findRSDP()+0xb0>
c0011699:	83 ec 0c             	sub    esp,0xc
c001169c:	68 35 50 02 c0       	push   0xc0025035
c00116a1:	e8 bb 83 ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c00116a6:	83 c4 10             	add    esp,0x10
c00116a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116ad:	eb 21                	jmp    c00116d0 <findRSDP()+0xd0>
c00116af:	90                   	nop
c00116b0:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00116b5:	eb b9                	jmp    c0011670 <findRSDP()+0x70>
c00116b7:	90                   	nop
c00116b8:	83 ec 0c             	sub    esp,0xc
c00116bb:	68 43 50 02 c0       	push   0xc0025043
c00116c0:	e8 9c 83 ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c00116c5:	83 c4 10             	add    esp,0x10
c00116c8:	b8 00 00 00 00       	mov    eax,0x0
c00116cd:	8d 76 00             	lea    esi,[esi+0x0]
c00116d0:	83 c4 1c             	add    esp,0x1c
c00116d3:	c3                   	ret    

c00116d4 <loadACPITables(unsigned char*)>:
c00116d4:	57                   	push   edi
c00116d5:	56                   	push   esi
c00116d6:	53                   	push   ebx
c00116d7:	83 ec 60             	sub    esp,0x60
c00116da:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c00116df:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00116e5:	83 e0 04             	and    eax,0x4
c00116e8:	84 c0                	test   al,al
c00116ea:	0f 84 3c 02 00 00    	je     c001192c <loadACPITables(unsigned char*)+0x258>
c00116f0:	a0 a0 83 02 c0       	mov    al,ds:0xc00283a0
c00116f5:	84 c0                	test   al,al
c00116f7:	74 77                	je     c0011770 <loadACPITables(unsigned char*)+0x9c>
c00116f9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00116fd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0011701:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011705:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011708:	83 e8 24             	sub    eax,0x24
c001170b:	c1 e8 03             	shr    eax,0x3
c001170e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011712:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001171a:	66 90                	xchg   ax,ax
c001171c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011720:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0011724:	0f 8d b6 00 00 00    	jge    c00117e0 <loadACPITables(unsigned char*)+0x10c>
c001172a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001172e:	83 c0 24             	add    eax,0x24
c0011731:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0011735:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011739:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001173d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011741:	c1 e0 03             	shl    eax,0x3
c0011744:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0011748:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001174c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001174f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011751:	89 c1                	mov    ecx,eax
c0011753:	a1 8c 81 02 c0       	mov    eax,ds:0xc002818c
c0011758:	8d 50 01             	lea    edx,[eax+0x1]
c001175b:	89 15 8c 81 02 c0    	mov    DWORD PTR ds:0xc002818c,edx
c0011761:	89 ca                	mov    edx,ecx
c0011763:	89 14 c5 a4 81 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7e5c],edx
c001176a:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001176e:	eb ac                	jmp    c001171c <loadACPITables(unsigned char*)+0x48>
c0011770:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011774:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011778:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001177c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001177f:	83 e8 24             	sub    eax,0x24
c0011782:	c1 e8 02             	shr    eax,0x2
c0011785:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011789:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0011791:	8d 76 00             	lea    esi,[esi+0x0]
c0011794:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011798:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001179c:	7d 42                	jge    c00117e0 <loadACPITables(unsigned char*)+0x10c>
c001179e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00117a2:	83 c0 24             	add    eax,0x24
c00117a5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00117a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00117ad:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00117b1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00117b5:	c1 e0 02             	shl    eax,0x2
c00117b8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00117bc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00117c0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00117c2:	a1 8c 81 02 c0       	mov    eax,ds:0xc002818c
c00117c7:	8d 50 01             	lea    edx,[eax+0x1]
c00117ca:	89 15 8c 81 02 c0    	mov    DWORD PTR ds:0xc002818c,edx
c00117d0:	89 ca                	mov    edx,ecx
c00117d2:	89 14 c5 a4 81 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7e5c],edx
c00117d9:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00117dd:	eb b5                	jmp    c0011794 <loadACPITables(unsigned char*)+0xc0>
c00117df:	90                   	nop
c00117e0:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00117e8:	a1 8c 81 02 c0       	mov    eax,ds:0xc002818c
c00117ed:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00117f1:	0f 8d 39 01 00 00    	jge    c0011930 <loadACPITables(unsigned char*)+0x25c>
c00117f7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00117fb:	8b 04 c5 a4 81 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd7e5c]
c0011802:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011806:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001180a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001180e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011812:	25 ff 0f 00 00       	and    eax,0xfff
c0011817:	89 c6                	mov    esi,eax
c0011819:	8b 1d 70 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027c70
c001181f:	83 ec 0c             	sub    esp,0xc
c0011822:	6a 01                	push   0x1
c0011824:	e8 a8 a1 ff ff       	call   c000b9d1 <Virt::allocateKernelVirtualPages(int)>
c0011829:	83 c4 10             	add    esp,0x10
c001182c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011830:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011836:	83 ec 0c             	sub    esp,0xc
c0011839:	6a 01                	push   0x1
c001183b:	6a 01                	push   0x1
c001183d:	50                   	push   eax
c001183e:	52                   	push   edx
c001183f:	53                   	push   ebx
c0011840:	e8 29 ab ff ff       	call   c000c36e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011845:	83 c4 20             	add    esp,0x20
c0011848:	09 f0                	or     eax,esi
c001184a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001184e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011852:	c1 e0 03             	shl    eax,0x3
c0011855:	05 a0 81 02 c0       	add    eax,0xc00281a0
c001185a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001185e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011862:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011866:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001186e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011872:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011876:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001187a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001187e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011882:	89 c6                	mov    esi,eax
c0011884:	89 d7                	mov    edi,edx
c0011886:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011888:	89 c8                	mov    eax,ecx
c001188a:	89 fa                	mov    edx,edi
c001188c:	89 f3                	mov    ebx,esi
c001188e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011892:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011896:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001189a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001189e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118a1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00118a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00118a9:	05 00 10 00 00       	add    eax,0x1000
c00118ae:	c1 e8 0c             	shr    eax,0xc
c00118b1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00118b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118b9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00118bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118c1:	25 ff 0f 00 00       	and    eax,0xfff
c00118c6:	89 c6                	mov    esi,eax
c00118c8:	8b 1d 70 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027c70
c00118ce:	83 ec 0c             	sub    esp,0xc
c00118d1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00118d5:	e8 f7 a0 ff ff       	call   c000b9d1 <Virt::allocateKernelVirtualPages(int)>
c00118da:	83 c4 10             	add    esp,0x10
c00118dd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00118e1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00118e7:	83 ec 0c             	sub    esp,0xc
c00118ea:	6a 01                	push   0x1
c00118ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00118f0:	50                   	push   eax
c00118f1:	52                   	push   edx
c00118f2:	53                   	push   ebx
c00118f3:	e8 76 aa ff ff       	call   c000c36e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00118f8:	83 c4 20             	add    esp,0x20
c00118fb:	09 f0                	or     eax,esi
c00118fd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011901:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011905:	83 ec 0c             	sub    esp,0xc
c0011908:	50                   	push   eax
c0011909:	e8 f3 a3 ff ff       	call   c000bd01 <Virt::freeKernelVirtualPages(unsigned long)>
c001190e:	83 c4 10             	add    esp,0x10
c0011911:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011915:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011919:	89 14 c5 a4 81 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7e5c],edx
c0011920:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0011924:	e9 bf fe ff ff       	jmp    c00117e8 <loadACPITables(unsigned char*)+0x114>
c0011929:	8d 76 00             	lea    esi,[esi+0x0]
c001192c:	90                   	nop
c001192d:	8d 76 00             	lea    esi,[esi+0x0]
c0011930:	83 c4 60             	add    esp,0x60
c0011933:	5b                   	pop    ebx
c0011934:	5e                   	pop    esi
c0011935:	5f                   	pop    edi
c0011936:	c3                   	ret    
c0011937:	90                   	nop

c0011938 <findRSDT(unsigned char*)>:
c0011938:	57                   	push   edi
c0011939:	56                   	push   esi
c001193a:	53                   	push   ebx
c001193b:	83 ec 50             	sub    esp,0x50
c001193e:	83 ec 0c             	sub    esp,0xc
c0011941:	68 57 50 02 c0       	push   0xc0025057
c0011946:	e8 16 81 ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001194b:	83 c4 10             	add    esp,0x10
c001194e:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c0011953:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011959:	83 e0 04             	and    eax,0x4
c001195c:	84 c0                	test   al,al
c001195e:	75 0c                	jne    c001196c <findRSDT(unsigned char*)+0x34>
c0011960:	b8 00 00 00 00       	mov    eax,0x0
c0011965:	e9 86 01 00 00       	jmp    c0011af0 <findRSDT(unsigned char*)+0x1b8>
c001196a:	66 90                	xchg   ax,ax
c001196c:	83 ec 0c             	sub    esp,0xc
c001196f:	68 69 50 02 c0       	push   0xc0025069
c0011974:	e8 e8 80 ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0011979:	83 c4 10             	add    esp,0x10
c001197c:	89 e0                	mov    eax,esp
c001197e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011982:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011986:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001198a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0011992:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011996:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001199a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001199e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00119a2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00119a6:	89 c6                	mov    esi,eax
c00119a8:	89 d7                	mov    edi,edx
c00119aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00119ac:	89 c8                	mov    eax,ecx
c00119ae:	89 fa                	mov    edx,edi
c00119b0:	89 f3                	mov    ebx,esi
c00119b2:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00119b6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00119ba:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00119be:	83 ec 0c             	sub    esp,0xc
c00119c1:	68 7b 50 02 c0       	push   0xc002507b
c00119c6:	e8 96 80 ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c00119cb:	83 c4 10             	add    esp,0x10
c00119ce:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00119d2:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00119d6:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00119de:	83 ec 0c             	sub    esp,0xc
c00119e1:	68 8d 50 02 c0       	push   0xc002508d
c00119e6:	e8 76 80 ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c00119eb:	83 c4 10             	add    esp,0x10
c00119ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00119f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00119f6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00119fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119fe:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011a02:	83 ec 04             	sub    esp,0x4
c0011a05:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011a09:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011a0d:	68 04 4f 02 c0       	push   0xc0024f04
c0011a12:	e8 e0 b2 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0011a17:	83 c4 10             	add    esp,0x10
c0011a1a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011a1e:	25 ff 0f 00 00       	and    eax,0xfff
c0011a23:	89 c6                	mov    esi,eax
c0011a25:	8b 1d 70 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027c70
c0011a2b:	83 ec 0c             	sub    esp,0xc
c0011a2e:	6a 02                	push   0x2
c0011a30:	e8 9c 9f ff ff       	call   c000b9d1 <Virt::allocateKernelVirtualPages(int)>
c0011a35:	83 c4 10             	add    esp,0x10
c0011a38:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011a3c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011a42:	83 ec 0c             	sub    esp,0xc
c0011a45:	6a 01                	push   0x1
c0011a47:	6a 02                	push   0x2
c0011a49:	50                   	push   eax
c0011a4a:	52                   	push   edx
c0011a4b:	53                   	push   ebx
c0011a4c:	e8 1d a9 ff ff       	call   c000c36e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a51:	83 c4 20             	add    esp,0x20
c0011a54:	09 f0                	or     eax,esi
c0011a56:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011a5a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011a5e:	25 ff 0f 00 00       	and    eax,0xfff
c0011a63:	89 c6                	mov    esi,eax
c0011a65:	8b 1d 70 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027c70
c0011a6b:	83 ec 0c             	sub    esp,0xc
c0011a6e:	6a 02                	push   0x2
c0011a70:	e8 5c 9f ff ff       	call   c000b9d1 <Virt::allocateKernelVirtualPages(int)>
c0011a75:	83 c4 10             	add    esp,0x10
c0011a78:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011a7c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011a82:	83 ec 0c             	sub    esp,0xc
c0011a85:	6a 01                	push   0x1
c0011a87:	6a 02                	push   0x2
c0011a89:	50                   	push   eax
c0011a8a:	52                   	push   edx
c0011a8b:	53                   	push   ebx
c0011a8c:	e8 dd a8 ff ff       	call   c000c36e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a91:	83 c4 20             	add    esp,0x20
c0011a94:	09 f0                	or     eax,esi
c0011a96:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011a9a:	83 ec 04             	sub    esp,0x4
c0011a9d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011aa1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011aa5:	68 24 4f 02 c0       	push   0xc0024f24
c0011aaa:	e8 48 b2 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0011aaf:	83 c4 10             	add    esp,0x10
c0011ab2:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0011ab7:	75 13                	jne    c0011acc <findRSDT(unsigned char*)+0x194>
c0011ab9:	c6 05 a0 83 02 c0 00 	mov    BYTE PTR ds:0xc00283a0,0x0
c0011ac0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011ac4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011ac8:	eb 22                	jmp    c0011aec <findRSDT(unsigned char*)+0x1b4>
c0011aca:	66 90                	xchg   ax,ax
c0011acc:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0011ad1:	75 11                	jne    c0011ae4 <findRSDT(unsigned char*)+0x1ac>
c0011ad3:	c6 05 a0 83 02 c0 01 	mov    BYTE PTR ds:0xc00283a0,0x1
c0011ada:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011ade:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011ae2:	eb 08                	jmp    c0011aec <findRSDT(unsigned char*)+0x1b4>
c0011ae4:	b8 00 00 00 00       	mov    eax,0x0
c0011ae9:	eb 05                	jmp    c0011af0 <findRSDT(unsigned char*)+0x1b8>
c0011aeb:	90                   	nop
c0011aec:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011af0:	83 c4 50             	add    esp,0x50
c0011af3:	5b                   	pop    ebx
c0011af4:	5e                   	pop    esi
c0011af5:	5f                   	pop    edi
c0011af6:	c3                   	ret    
c0011af7:	90                   	nop

c0011af8 <findDataTable(unsigned char*, char*)>:
c0011af8:	83 ec 1c             	sub    esp,0x1c
c0011afb:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c0011b00:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011b06:	83 e0 04             	and    eax,0x4
c0011b09:	84 c0                	test   al,al
c0011b0b:	75 07                	jne    c0011b14 <findDataTable(unsigned char*, char*)+0x1c>
c0011b0d:	b8 00 00 00 00       	mov    eax,0x0
c0011b12:	eb 58                	jmp    c0011b6c <findDataTable(unsigned char*, char*)+0x74>
c0011b14:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011b1c:	a1 8c 81 02 c0       	mov    eax,ds:0xc002818c
c0011b21:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0011b25:	7d 3d                	jge    c0011b64 <findDataTable(unsigned char*, char*)+0x6c>
c0011b27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b2b:	c1 e0 03             	shl    eax,0x3
c0011b2e:	05 a0 81 02 c0       	add    eax,0xc00281a0
c0011b33:	83 ec 04             	sub    esp,0x4
c0011b36:	6a 04                	push   0x4
c0011b38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011b3c:	50                   	push   eax
c0011b3d:	e8 3e ea fe ff       	call   c0000580 <memcmp>
c0011b42:	83 c4 10             	add    esp,0x10
c0011b45:	85 c0                	test   eax,eax
c0011b47:	0f 94 c0             	sete   al
c0011b4a:	84 c0                	test   al,al
c0011b4c:	74 0e                	je     c0011b5c <findDataTable(unsigned char*, char*)+0x64>
c0011b4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b52:	8b 04 c5 a4 81 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd7e5c]
c0011b59:	eb 11                	jmp    c0011b6c <findDataTable(unsigned char*, char*)+0x74>
c0011b5b:	90                   	nop
c0011b5c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011b60:	eb ba                	jmp    c0011b1c <findDataTable(unsigned char*, char*)+0x24>
c0011b62:	66 90                	xchg   ax,ax
c0011b64:	b8 00 00 00 00       	mov    eax,0x0
c0011b69:	8d 76 00             	lea    esi,[esi+0x0]
c0011b6c:	83 c4 1c             	add    esp,0x1c
c0011b6f:	c3                   	ret    

c0011b70 <scanMADT()>:
c0011b70:	53                   	push   ebx
c0011b71:	83 ec 38             	sub    esp,0x38
c0011b74:	83 ec 0c             	sub    esp,0xc
c0011b77:	68 9f 50 02 c0       	push   0xc002509f
c0011b7c:	e8 e0 7e ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0011b81:	83 c4 10             	add    esp,0x10
c0011b84:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c0011b89:	25 00 04 00 00       	and    eax,0x400
c0011b8e:	74 14                	je     c0011ba4 <scanMADT()+0x34>
c0011b90:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c0011b95:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011b9b:	83 e2 fb             	and    edx,0xfffffffb
c0011b9e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011ba4:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c0011ba9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011baf:	83 e0 04             	and    eax,0x4
c0011bb2:	84 c0                	test   al,al
c0011bb4:	0f 84 82 04 00 00    	je     c001203c <scanMADT()+0x4cc>
c0011bba:	83 ec 0c             	sub    esp,0xc
c0011bbd:	68 ac 50 02 c0       	push   0xc00250ac
c0011bc2:	e8 9a 7e ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0011bc7:	83 c4 10             	add    esp,0x10
c0011bca:	e8 31 fa ff ff       	call   c0011600 <findRSDP()>
c0011bcf:	a3 ac 83 02 c0       	mov    ds:0xc00283ac,eax
c0011bd4:	a1 ac 83 02 c0       	mov    eax,ds:0xc00283ac
c0011bd9:	85 c0                	test   eax,eax
c0011bdb:	75 1b                	jne    c0011bf8 <scanMADT()+0x88>
c0011bdd:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c0011be2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011be8:	83 e2 fb             	and    edx,0xfffffffb
c0011beb:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011bf1:	e9 4e 04 00 00       	jmp    c0012044 <scanMADT()+0x4d4>
c0011bf6:	66 90                	xchg   ax,ax
c0011bf8:	83 ec 0c             	sub    esp,0xc
c0011bfb:	68 be 50 02 c0       	push   0xc00250be
c0011c00:	e8 5c 7e ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0011c05:	83 c4 10             	add    esp,0x10
c0011c08:	a1 ac 83 02 c0       	mov    eax,ds:0xc00283ac
c0011c0d:	83 ec 0c             	sub    esp,0xc
c0011c10:	50                   	push   eax
c0011c11:	e8 22 fd ff ff       	call   c0011938 <findRSDT(unsigned char*)>
c0011c16:	83 c4 10             	add    esp,0x10
c0011c19:	a3 a8 83 02 c0       	mov    ds:0xc00283a8,eax
c0011c1e:	a1 a8 83 02 c0       	mov    eax,ds:0xc00283a8
c0011c23:	85 c0                	test   eax,eax
c0011c25:	75 19                	jne    c0011c40 <scanMADT()+0xd0>
c0011c27:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c0011c2c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011c32:	83 e2 fb             	and    edx,0xfffffffb
c0011c35:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011c3b:	e9 04 04 00 00       	jmp    c0012044 <scanMADT()+0x4d4>
c0011c40:	83 ec 0c             	sub    esp,0xc
c0011c43:	68 ce 50 02 c0       	push   0xc00250ce
c0011c48:	e8 14 7e ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0011c4d:	83 c4 10             	add    esp,0x10
c0011c50:	a1 a8 83 02 c0       	mov    eax,ds:0xc00283a8
c0011c55:	83 ec 0c             	sub    esp,0xc
c0011c58:	50                   	push   eax
c0011c59:	e8 76 fa ff ff       	call   c00116d4 <loadACPITables(unsigned char*)>
c0011c5e:	83 c4 10             	add    esp,0x10
c0011c61:	a1 a8 83 02 c0       	mov    eax,ds:0xc00283a8
c0011c66:	83 ec 08             	sub    esp,0x8
c0011c69:	68 e6 50 02 c0       	push   0xc00250e6
c0011c6e:	50                   	push   eax
c0011c6f:	e8 84 fe ff ff       	call   c0011af8 <findDataTable(unsigned char*, char*)>
c0011c74:	83 c4 10             	add    esp,0x10
c0011c77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011c7b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011c80:	75 1a                	jne    c0011c9c <scanMADT()+0x12c>
c0011c82:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c0011c87:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011c8d:	83 e2 fe             	and    edx,0xfffffffe
c0011c90:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011c96:	e9 a9 03 00 00       	jmp    c0012044 <scanMADT()+0x4d4>
c0011c9b:	90                   	nop
c0011c9c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011ca4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ca8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011cab:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0011caf:	0f 87 8f 03 00 00    	ja     c0012044 <scanMADT()+0x4d4>
c0011cb5:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0011cbd:	0f 87 81 03 00 00    	ja     c0012044 <scanMADT()+0x4d4>
c0011cc3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cc7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011ccb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ccf:	8d 50 01             	lea    edx,[eax+0x1]
c0011cd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011cd6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011cda:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011cde:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0011ce2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ce6:	8d 50 01             	lea    edx,[eax+0x1]
c0011ce9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011ced:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011cf1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011cf5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0011cf9:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0011cfe:	0f 86 3c 03 00 00    	jbe    c0012040 <scanMADT()+0x4d0>
c0011d04:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0011d09:	75 59                	jne    c0011d64 <scanMADT()+0x1f4>
c0011d0b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d0f:	8d 50 01             	lea    edx,[eax+0x1]
c0011d12:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011d16:	8a 15 a0 85 02 c0    	mov    dl,BYTE PTR ds:0xc00285a0
c0011d1c:	0f b6 d2             	movzx  edx,dl
c0011d1f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011d23:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011d27:	88 82 e0 85 02 c0    	mov    BYTE PTR [edx-0x3ffd7a20],al
c0011d2d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d31:	8d 50 01             	lea    edx,[eax+0x1]
c0011d34:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011d38:	8a 15 a0 85 02 c0    	mov    dl,BYTE PTR ds:0xc00285a0
c0011d3e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011d41:	88 0d a0 85 02 c0    	mov    BYTE PTR ds:0xc00285a0,cl
c0011d47:	0f b6 d2             	movzx  edx,dl
c0011d4a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011d4e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011d52:	88 82 c0 85 02 c0    	mov    BYTE PTR [edx-0x3ffd7a40],al
c0011d58:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011d5d:	e9 c6 02 00 00       	jmp    c0012028 <scanMADT()+0x4b8>
c0011d62:	66 90                	xchg   ax,ax
c0011d64:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0011d69:	0f 85 15 01 00 00    	jne    c0011e84 <scanMADT()+0x314>
c0011d6f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d73:	8d 50 01             	lea    edx,[eax+0x1]
c0011d76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011d7a:	8a 15 60 84 02 c0    	mov    dl,BYTE PTR ds:0xc0028460
c0011d80:	0f b6 d2             	movzx  edx,dl
c0011d83:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011d87:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011d8b:	88 82 80 84 02 c0    	mov    BYTE PTR [edx-0x3ffd7b80],al
c0011d91:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011d95:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d99:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d9d:	01 d0                	add    eax,edx
c0011d9f:	83 c0 2c             	add    eax,0x2c
c0011da2:	8a 00                	mov    al,BYTE PTR [eax]
c0011da4:	0f b6 d0             	movzx  edx,al
c0011da7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dab:	8d 48 01             	lea    ecx,[eax+0x1]
c0011dae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011db2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011db6:	0f b6 c0             	movzx  eax,al
c0011db9:	c1 e0 08             	shl    eax,0x8
c0011dbc:	89 d1                	mov    ecx,edx
c0011dbe:	09 c1                	or     ecx,eax
c0011dc0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dc4:	8d 50 02             	lea    edx,[eax+0x2]
c0011dc7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011dcb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011dcf:	0f b6 c0             	movzx  eax,al
c0011dd2:	c1 e0 10             	shl    eax,0x10
c0011dd5:	09 c1                	or     ecx,eax
c0011dd7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ddb:	8d 50 03             	lea    edx,[eax+0x3]
c0011dde:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011de2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011de6:	0f b6 c0             	movzx  eax,al
c0011de9:	c1 e0 18             	shl    eax,0x18
c0011dec:	09 c1                	or     ecx,eax
c0011dee:	89 ca                	mov    edx,ecx
c0011df0:	a0 60 84 02 c0       	mov    al,ds:0xc0028460
c0011df5:	0f b6 c0             	movzx  eax,al
c0011df8:	89 14 85 a0 84 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7b60],edx
c0011dff:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011e04:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e08:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e0c:	01 d0                	add    eax,edx
c0011e0e:	83 c0 2c             	add    eax,0x2c
c0011e11:	8a 00                	mov    al,BYTE PTR [eax]
c0011e13:	0f b6 d0             	movzx  edx,al
c0011e16:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e1a:	8d 48 01             	lea    ecx,[eax+0x1]
c0011e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e21:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011e25:	0f b6 c0             	movzx  eax,al
c0011e28:	c1 e0 08             	shl    eax,0x8
c0011e2b:	89 d1                	mov    ecx,edx
c0011e2d:	09 c1                	or     ecx,eax
c0011e2f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e33:	8d 50 02             	lea    edx,[eax+0x2]
c0011e36:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e3a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011e3e:	0f b6 c0             	movzx  eax,al
c0011e41:	c1 e0 10             	shl    eax,0x10
c0011e44:	09 c1                	or     ecx,eax
c0011e46:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e4a:	8d 50 03             	lea    edx,[eax+0x3]
c0011e4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e51:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011e55:	0f b6 c0             	movzx  eax,al
c0011e58:	c1 e0 18             	shl    eax,0x18
c0011e5b:	09 c1                	or     ecx,eax
c0011e5d:	89 ca                	mov    edx,ecx
c0011e5f:	a0 60 84 02 c0       	mov    al,ds:0xc0028460
c0011e64:	0f b6 c0             	movzx  eax,al
c0011e67:	89 14 85 20 85 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7ae0],edx
c0011e6e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011e73:	a0 60 84 02 c0       	mov    al,ds:0xc0028460
c0011e78:	40                   	inc    eax
c0011e79:	a2 60 84 02 c0       	mov    ds:0xc0028460,al
c0011e7e:	e9 a5 01 00 00       	jmp    c0012028 <scanMADT()+0x4b8>
c0011e83:	90                   	nop
c0011e84:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0011e89:	0f 85 e9 00 00 00    	jne    c0011f78 <scanMADT()+0x408>
c0011e8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e93:	8d 50 01             	lea    edx,[eax+0x1]
c0011e96:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e9a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e9e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011ea2:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011ea6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011eaa:	8d 50 01             	lea    edx,[eax+0x1]
c0011ead:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011eb1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011eb5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011eb9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0011ebd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011ec1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ec5:	01 d0                	add    eax,edx
c0011ec7:	83 c0 2c             	add    eax,0x2c
c0011eca:	8a 00                	mov    al,BYTE PTR [eax]
c0011ecc:	0f b6 d0             	movzx  edx,al
c0011ecf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ed3:	8d 48 01             	lea    ecx,[eax+0x1]
c0011ed6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011eda:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011ede:	0f b6 c0             	movzx  eax,al
c0011ee1:	c1 e0 08             	shl    eax,0x8
c0011ee4:	89 d1                	mov    ecx,edx
c0011ee6:	09 c1                	or     ecx,eax
c0011ee8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011eec:	8d 50 02             	lea    edx,[eax+0x2]
c0011eef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ef3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011ef7:	0f b6 c0             	movzx  eax,al
c0011efa:	c1 e0 10             	shl    eax,0x10
c0011efd:	09 c1                	or     ecx,eax
c0011eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f03:	8d 50 03             	lea    edx,[eax+0x3]
c0011f06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f0a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011f0e:	0f b6 c0             	movzx  eax,al
c0011f11:	c1 e0 18             	shl    eax,0x18
c0011f14:	09 c8                	or     eax,ecx
c0011f16:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f1a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011f1f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f27:	01 d0                	add    eax,edx
c0011f29:	83 c0 2c             	add    eax,0x2c
c0011f2c:	8a 00                	mov    al,BYTE PTR [eax]
c0011f2e:	0f b6 c0             	movzx  eax,al
c0011f31:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011f35:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011f38:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f3c:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0011f40:	0f b6 d2             	movzx  edx,dl
c0011f43:	c1 e2 08             	shl    edx,0x8
c0011f46:	09 d0                	or     eax,edx
c0011f48:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0011f4d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011f52:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0011f57:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f5b:	88 90 40 72 02 c0    	mov    BYTE PTR [eax-0x3ffd8dc0],dl
c0011f61:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0011f66:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0011f6b:	66 89 84 12 40 84 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd7bc0],ax
c0011f73:	e9 b0 00 00 00       	jmp    c0012028 <scanMADT()+0x4b8>
c0011f78:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0011f7d:	0f 85 99 00 00 00    	jne    c001201c <scanMADT()+0x4ac>
c0011f83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f87:	8d 50 01             	lea    edx,[eax+0x1]
c0011f8a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011f8e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f92:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011f96:	0f b6 c0             	movzx  eax,al
c0011f99:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011f9d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011fa1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fa5:	01 d0                	add    eax,edx
c0011fa7:	83 c0 2c             	add    eax,0x2c
c0011faa:	8a 00                	mov    al,BYTE PTR [eax]
c0011fac:	0f b6 d0             	movzx  edx,al
c0011faf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fb3:	8d 48 01             	lea    ecx,[eax+0x1]
c0011fb6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011fba:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011fbe:	0f b6 c0             	movzx  eax,al
c0011fc1:	c1 e0 08             	shl    eax,0x8
c0011fc4:	09 d0                	or     eax,edx
c0011fc6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011fca:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011fcf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fd3:	8d 50 01             	lea    edx,[eax+0x1]
c0011fd6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011fda:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011fde:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011fe2:	0f b6 c0             	movzx  eax,al
c0011fe5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011fe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fed:	c1 e0 08             	shl    eax,0x8
c0011ff0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011ff4:	89 c1                	mov    ecx,eax
c0011ff6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ffa:	c1 e0 18             	shl    eax,0x18
c0011ffd:	89 c3                	mov    ebx,eax
c0011fff:	a1 b0 83 02 c0       	mov    eax,ds:0xc00283b0
c0012004:	8d 50 01             	lea    edx,[eax+0x1]
c0012007:	89 15 b0 83 02 c0    	mov    DWORD PTR ds:0xc00283b0,edx
c001200d:	09 d9                	or     ecx,ebx
c001200f:	89 ca                	mov    edx,ecx
c0012011:	89 14 85 c0 83 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7c40],edx
c0012018:	eb 0e                	jmp    c0012028 <scanMADT()+0x4b8>
c001201a:	66 90                	xchg   ax,ax
c001201c:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0012021:	75 05                	jne    c0012028 <scanMADT()+0x4b8>
c0012023:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0012028:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001202d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012031:	01 d0                	add    eax,edx
c0012033:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012037:	e9 68 fc ff ff       	jmp    c0011ca4 <scanMADT()+0x134>
c001203c:	90                   	nop
c001203d:	eb 05                	jmp    c0012044 <scanMADT()+0x4d4>
c001203f:	90                   	nop
c0012040:	90                   	nop
c0012041:	8d 76 00             	lea    esi,[esi+0x0]
c0012044:	83 c4 38             	add    esp,0x38
c0012047:	5b                   	pop    ebx
c0012048:	c3                   	ret    
c0012049:	90                   	nop
c001204a:	66 90                	xchg   ax,ax

c001204c <ACPI::ACPI()>:
c001204c:	83 ec 0c             	sub    esp,0xc
c001204f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012053:	83 ec 08             	sub    esp,0x8
c0012056:	68 eb 50 02 c0       	push   0xc00250eb
c001205b:	50                   	push   eax
c001205c:	e8 21 c3 ff ff       	call   c000e382 <Device::Device(char const*)>
c0012061:	83 c4 10             	add    esp,0x10
c0012064:	ba 84 52 02 c0       	mov    edx,0xc0025284
c0012069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001206d:	89 10                	mov    DWORD PTR [eax],edx
c001206f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012073:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001207a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001207e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0012088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001208c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0012096:	83 ec 0c             	sub    esp,0xc
c0012099:	68 f0 50 02 c0       	push   0xc00250f0
c001209e:	e8 be 79 ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c00120a3:	83 c4 10             	add    esp,0x10
c00120a6:	e8 c5 fa ff ff       	call   c0011b70 <scanMADT()>
c00120ab:	90                   	nop
c00120ac:	83 c4 0c             	add    esp,0xc
c00120af:	c3                   	ret    

c00120b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00120b0:	83 ec 2c             	sub    esp,0x2c
c00120b3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00120b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00120bb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00120bf:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00120c3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00120c8:	88 d0                	mov    al,dl
c00120ca:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00120ce:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00120d3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00120db:	90                   	nop
c00120dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00120e0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00120e6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00120ea:	0f 8d 9c 00 00 00    	jge    c001218c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c00120f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00120f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00120f8:	83 c2 2a             	add    edx,0x2a
c00120fb:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00120ff:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0012104:	75 7a                	jne    c0012180 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0012106:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001210a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001210e:	83 c2 2a             	add    edx,0x2a
c0012111:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0012115:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0012119:	75 65                	jne    c0012180 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c001211b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012120:	74 3a                	je     c001215c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c0012122:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012126:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001212a:	83 c2 2a             	add    edx,0x2a
c001212d:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0012131:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012135:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012138:	39 c2                	cmp    edx,eax
c001213a:	74 10                	je     c001214c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c001213c:	83 ec 0c             	sub    esp,0xc
c001213f:	68 44 4f 02 c0       	push   0xc0024f44
c0012144:	e8 5a 27 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c0012149:	83 c4 10             	add    esp,0x10
c001214c:	83 ec 0c             	sub    esp,0xc
c001214f:	68 fe 50 02 c0       	push   0xc00250fe
c0012154:	e8 4a 27 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c0012159:	83 c4 10             	add    esp,0x10
c001215c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012160:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012164:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012168:	83 c2 2a             	add    edx,0x2a
c001216b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001216f:	8b 02                	mov    eax,DWORD PTR [edx]
c0012171:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0012174:	89 01                	mov    DWORD PTR [ecx],eax
c0012176:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0012179:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001217e:	66 90                	xchg   ax,ax
c0012180:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012184:	e9 53 ff ff ff       	jmp    c00120dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0012189:	8d 76 00             	lea    esi,[esi+0x0]
c001218c:	90                   	nop
c001218d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012191:	83 c4 2c             	add    esp,0x2c
c0012194:	c2 04 00             	ret    0x4
c0012197:	90                   	nop

c0012198 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0012198:	83 ec 1c             	sub    esp,0x1c
c001219b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001219f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00121a3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00121a7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00121ac:	88 c8                	mov    al,cl
c00121ae:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00121b2:	88 d0                	mov    al,dl
c00121b4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00121b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121bc:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00121c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121c6:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00121c9:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00121cd:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00121d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121d5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00121db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00121df:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00121e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121e6:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00121eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121ef:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00121f5:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00121f9:	8d 48 01             	lea    ecx,[eax+0x1]
c00121fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012200:	83 c2 2a             	add    edx,0x2a
c0012203:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0012207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001220b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012211:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012215:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0012218:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001221c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0012220:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012224:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001222a:	8d 50 01             	lea    edx,[eax+0x1]
c001222d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012231:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0012237:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001223b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012241:	3d 00 02 00 00       	cmp    eax,0x200
c0012246:	75 10                	jne    c0012258 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0012248:	83 ec 0c             	sub    esp,0xc
c001224b:	68 0d 51 02 c0       	push   0xc002510d
c0012250:	e8 4e 26 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c0012255:	83 c4 10             	add    esp,0x10
c0012258:	90                   	nop
c0012259:	83 c4 1c             	add    esp,0x1c
c001225c:	c3                   	ret    
c001225d:	90                   	nop
c001225e:	66 90                	xchg   ax,ax

c0012260 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0012260:	b8 00 00 00 00       	mov    eax,0x0
c0012265:	c3                   	ret    
c0012266:	66 90                	xchg   ax,ax

c0012268 <ACPI::detectPCI()>:
c0012268:	53                   	push   ebx
c0012269:	83 ec 68             	sub    esp,0x68
c001226c:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c0012271:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c0012276:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c001227b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012281:	83 e0 04             	and    eax,0x4
c0012284:	84 c0                	test   al,al
c0012286:	74 2c                	je     c00122b4 <ACPI::detectPCI()+0x4c>
c0012288:	a1 a8 83 02 c0       	mov    eax,ds:0xc00283a8
c001228d:	83 ec 08             	sub    esp,0x8
c0012290:	68 2a 51 02 c0       	push   0xc002512a
c0012295:	50                   	push   eax
c0012296:	e8 5d f8 ff ff       	call   c0011af8 <findDataTable(unsigned char*, char*)>
c001229b:	83 c4 10             	add    esp,0x10
c001229e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00122a2:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c00122a7:	74 0b                	je     c00122b4 <ACPI::detectPCI()+0x4c>
c00122a9:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00122ae:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00122b3:	90                   	nop
c00122b4:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c00122bc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00122c0:	8a 00                	mov    al,BYTE PTR [eax]
c00122c2:	3c 01                	cmp    al,0x1
c00122c4:	75 0e                	jne    c00122d4 <ACPI::detectPCI()+0x6c>
c00122c6:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00122cb:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00122d0:	eb 2a                	jmp    c00122fc <ACPI::detectPCI()+0x94>
c00122d2:	66 90                	xchg   ax,ax
c00122d4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00122d8:	8a 00                	mov    al,BYTE PTR [eax]
c00122da:	3c 02                	cmp    al,0x2
c00122dc:	75 1e                	jne    c00122fc <ACPI::detectPCI()+0x94>
c00122de:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00122e3:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00122e8:	74 12                	je     c00122fc <ACPI::detectPCI()+0x94>
c00122ea:	83 ec 0c             	sub    esp,0xc
c00122ed:	68 74 4f 02 c0       	push   0xc0024f74
c00122f2:	e8 ac 25 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c00122f7:	83 c4 10             	add    esp,0x10
c00122fa:	66 90                	xchg   ax,ax
c00122fc:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c0012300:	83 f0 01             	xor    eax,0x1
c0012303:	84 c0                	test   al,al
c0012305:	74 41                	je     c0012348 <ACPI::detectPCI()+0xe0>
c0012307:	e8 44 de fe ff       	call   c0000150 <manualPCIProbe>
c001230c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0012310:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c0012315:	75 0d                	jne    c0012324 <ACPI::detectPCI()+0xbc>
c0012317:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001231c:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012321:	eb 25                	jmp    c0012348 <ACPI::detectPCI()+0xe0>
c0012323:	90                   	nop
c0012324:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c0012329:	75 1d                	jne    c0012348 <ACPI::detectPCI()+0xe0>
c001232b:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012330:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012335:	74 11                	je     c0012348 <ACPI::detectPCI()+0xe0>
c0012337:	83 ec 0c             	sub    esp,0xc
c001233a:	68 74 4f 02 c0       	push   0xc0024f74
c001233f:	e8 5f 25 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c0012344:	83 c4 10             	add    esp,0x10
c0012347:	90                   	nop
c0012348:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c001234d:	0f 84 49 03 00 00    	je     c001269c <ACPI::detectPCI()+0x434>
c0012353:	83 ec 0c             	sub    esp,0xc
c0012356:	68 2f 51 02 c0       	push   0xc002512f
c001235b:	e8 01 77 ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0012360:	83 c4 10             	add    esp,0x10
c0012363:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012368:	0f 84 8e 00 00 00    	je     c00123fc <ACPI::detectPCI()+0x194>
c001236e:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c0012373:	25 00 08 00 00       	and    eax,0x800
c0012378:	0f 84 16 01 00 00    	je     c0012494 <ACPI::detectPCI()+0x22c>
c001237e:	83 ec 0c             	sub    esp,0xc
c0012381:	68 9c 4f 02 c0       	push   0xc0024f9c
c0012386:	e8 d6 76 ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001238b:	83 c4 10             	add    esp,0x10
c001238e:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c0012393:	25 80 00 00 00       	and    eax,0x80
c0012398:	0f 85 f6 00 00 00    	jne    c0012494 <ACPI::detectPCI()+0x22c>
c001239e:	66 90                	xchg   ax,ax
c00123a0:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c00123a7:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c00123ac:	89 c2                	mov    edx,eax
c00123ae:	ec                   	in     al,dx
c00123af:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c00123b3:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c00123b7:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c00123bb:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c00123c0:	74 0a                	je     c00123cc <ACPI::detectPCI()+0x164>
c00123c2:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c00123c7:	74 03                	je     c00123cc <ACPI::detectPCI()+0x164>
c00123c9:	eb d5                	jmp    c00123a0 <ACPI::detectPCI()+0x138>
c00123cb:	90                   	nop
c00123cc:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c00123d3:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c00123d8:	89 c2                	mov    edx,eax
c00123da:	ec                   	in     al,dx
c00123db:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c00123df:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c00123e3:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c00123e7:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c00123ec:	74 de                	je     c00123cc <ACPI::detectPCI()+0x164>
c00123ee:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c00123f3:	0f 85 93 00 00 00    	jne    c001248c <ACPI::detectPCI()+0x224>
c00123f9:	eb d1                	jmp    c00123cc <ACPI::detectPCI()+0x164>
c00123fb:	90                   	nop
c00123fc:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c0012400:	83 f0 01             	xor    eax,0x1
c0012403:	84 c0                	test   al,al
c0012405:	0f 84 89 00 00 00    	je     c0012494 <ACPI::detectPCI()+0x22c>
c001240b:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c0012410:	25 00 08 00 00       	and    eax,0x800
c0012415:	74 7d                	je     c0012494 <ACPI::detectPCI()+0x22c>
c0012417:	83 ec 0c             	sub    esp,0xc
c001241a:	68 c0 4f 02 c0       	push   0xc0024fc0
c001241f:	e8 3d 76 ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0012424:	83 c4 10             	add    esp,0x10
c0012427:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c001242c:	25 80 00 00 00       	and    eax,0x80
c0012431:	75 61                	jne    c0012494 <ACPI::detectPCI()+0x22c>
c0012433:	90                   	nop
c0012434:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c001243b:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c0012440:	89 c2                	mov    edx,eax
c0012442:	ec                   	in     al,dx
c0012443:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0012447:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c001244b:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c001244f:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c0012454:	74 0a                	je     c0012460 <ACPI::detectPCI()+0x1f8>
c0012456:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c001245b:	74 03                	je     c0012460 <ACPI::detectPCI()+0x1f8>
c001245d:	eb d5                	jmp    c0012434 <ACPI::detectPCI()+0x1cc>
c001245f:	90                   	nop
c0012460:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c0012467:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c001246c:	89 c2                	mov    edx,eax
c001246e:	ec                   	in     al,dx
c001246f:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0012473:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c0012477:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001247b:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c0012480:	74 de                	je     c0012460 <ACPI::detectPCI()+0x1f8>
c0012482:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c0012487:	75 07                	jne    c0012490 <ACPI::detectPCI()+0x228>
c0012489:	eb d5                	jmp    c0012460 <ACPI::detectPCI()+0x1f8>
c001248b:	90                   	nop
c001248c:	90                   	nop
c001248d:	eb 05                	jmp    c0012494 <ACPI::detectPCI()+0x22c>
c001248f:	90                   	nop
c0012490:	90                   	nop
c0012491:	8d 76 00             	lea    esi,[esi+0x0]
c0012494:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c001249c:	83 ec 0c             	sub    esp,0xc
c001249f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00124a3:	e8 5f 75 ff ff       	call   c0009a07 <malloc>
c00124a8:	83 c4 10             	add    esp,0x10
c00124ab:	89 c3                	mov    ebx,eax
c00124ad:	83 ec 0c             	sub    esp,0xc
c00124b0:	53                   	push   ebx
c00124b1:	e8 7c ab 00 00       	call   c001d032 <PCI::PCI()>
c00124b6:	83 c4 10             	add    esp,0x10
c00124b9:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c00124bd:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c00124c2:	25 00 08 00 00       	and    eax,0x800
c00124c7:	74 7b                	je     c0012544 <ACPI::detectPCI()+0x2dc>
c00124c9:	83 ec 0c             	sub    esp,0xc
c00124cc:	68 47 51 02 c0       	push   0xc0025147
c00124d1:	e8 8b 75 ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c00124d6:	83 c4 10             	add    esp,0x10
c00124d9:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c00124de:	25 80 00 00 00       	and    eax,0x80
c00124e3:	75 5f                	jne    c0012544 <ACPI::detectPCI()+0x2dc>
c00124e5:	8d 76 00             	lea    esi,[esi+0x0]
c00124e8:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c00124ef:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00124f4:	89 c2                	mov    edx,eax
c00124f6:	ec                   	in     al,dx
c00124f7:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c00124fb:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c00124ff:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0012503:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c0012508:	74 0a                	je     c0012514 <ACPI::detectPCI()+0x2ac>
c001250a:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c001250f:	74 03                	je     c0012514 <ACPI::detectPCI()+0x2ac>
c0012511:	eb d5                	jmp    c00124e8 <ACPI::detectPCI()+0x280>
c0012513:	90                   	nop
c0012514:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c001251b:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c0012520:	89 c2                	mov    edx,eax
c0012522:	ec                   	in     al,dx
c0012523:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0012527:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c001252b:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001252f:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c0012534:	74 de                	je     c0012514 <ACPI::detectPCI()+0x2ac>
c0012536:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c001253b:	75 03                	jne    c0012540 <ACPI::detectPCI()+0x2d8>
c001253d:	eb d5                	jmp    c0012514 <ACPI::detectPCI()+0x2ac>
c001253f:	90                   	nop
c0012540:	90                   	nop
c0012541:	8d 76 00             	lea    esi,[esi+0x0]
c0012544:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012548:	83 ec 08             	sub    esp,0x8
c001254b:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001254f:	50                   	push   eax
c0012550:	e8 29 bc ff ff       	call   c000e17e <Device::addChild(Device*)>
c0012555:	83 c4 10             	add    esp,0x10
c0012558:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c001255d:	25 00 08 00 00       	and    eax,0x800
c0012562:	74 78                	je     c00125dc <ACPI::detectPCI()+0x374>
c0012564:	83 ec 0c             	sub    esp,0xc
c0012567:	68 4d 51 02 c0       	push   0xc002514d
c001256c:	e8 f0 74 ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0012571:	83 c4 10             	add    esp,0x10
c0012574:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c0012579:	25 80 00 00 00       	and    eax,0x80
c001257e:	75 5c                	jne    c00125dc <ACPI::detectPCI()+0x374>
c0012580:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c0012587:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001258c:	89 c2                	mov    edx,eax
c001258e:	ec                   	in     al,dx
c001258f:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0012593:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0012597:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c001259b:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c00125a0:	74 0a                	je     c00125ac <ACPI::detectPCI()+0x344>
c00125a2:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c00125a7:	74 03                	je     c00125ac <ACPI::detectPCI()+0x344>
c00125a9:	eb d5                	jmp    c0012580 <ACPI::detectPCI()+0x318>
c00125ab:	90                   	nop
c00125ac:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c00125b3:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00125b8:	89 c2                	mov    edx,eax
c00125ba:	ec                   	in     al,dx
c00125bb:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c00125bf:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c00125c3:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c00125c7:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c00125cc:	74 de                	je     c00125ac <ACPI::detectPCI()+0x344>
c00125ce:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c00125d3:	75 03                	jne    c00125d8 <ACPI::detectPCI()+0x370>
c00125d5:	eb d5                	jmp    c00125ac <ACPI::detectPCI()+0x344>
c00125d7:	90                   	nop
c00125d8:	90                   	nop
c00125d9:	8d 76 00             	lea    esi,[esi+0x0]
c00125dc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00125e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00125e2:	83 c0 08             	add    eax,0x8
c00125e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00125e7:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00125ec:	74 0a                	je     c00125f8 <ACPI::detectPCI()+0x390>
c00125ee:	ba 01 00 00 00       	mov    edx,0x1
c00125f3:	eb 0b                	jmp    c0012600 <ACPI::detectPCI()+0x398>
c00125f5:	8d 76 00             	lea    esi,[esi+0x0]
c00125f8:	ba 02 00 00 00       	mov    edx,0x2
c00125fd:	8d 76 00             	lea    esi,[esi+0x0]
c0012600:	6a 00                	push   0x0
c0012602:	6a 00                	push   0x0
c0012604:	52                   	push   edx
c0012605:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012609:	ff d0                	call   eax
c001260b:	83 c4 10             	add    esp,0x10
c001260e:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c0012613:	25 00 08 00 00       	and    eax,0x800
c0012618:	0f 84 26 01 00 00    	je     c0012744 <ACPI::detectPCI()+0x4dc>
c001261e:	83 ec 0c             	sub    esp,0xc
c0012621:	68 53 51 02 c0       	push   0xc0025153
c0012626:	e8 36 74 ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001262b:	83 c4 10             	add    esp,0x10
c001262e:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c0012633:	25 80 00 00 00       	and    eax,0x80
c0012638:	0f 85 06 01 00 00    	jne    c0012744 <ACPI::detectPCI()+0x4dc>
c001263e:	66 90                	xchg   ax,ax
c0012640:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c0012647:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c001264c:	89 c2                	mov    edx,eax
c001264e:	ec                   	in     al,dx
c001264f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012653:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0012657:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001265b:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c0012660:	74 0a                	je     c001266c <ACPI::detectPCI()+0x404>
c0012662:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c0012667:	74 03                	je     c001266c <ACPI::detectPCI()+0x404>
c0012669:	eb d5                	jmp    c0012640 <ACPI::detectPCI()+0x3d8>
c001266b:	90                   	nop
c001266c:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c0012673:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0012678:	89 c2                	mov    edx,eax
c001267a:	ec                   	in     al,dx
c001267b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001267f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0012683:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c0012687:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c001268c:	74 de                	je     c001266c <ACPI::detectPCI()+0x404>
c001268e:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c0012693:	0f 85 a7 00 00 00    	jne    c0012740 <ACPI::detectPCI()+0x4d8>
c0012699:	eb d1                	jmp    c001266c <ACPI::detectPCI()+0x404>
c001269b:	90                   	nop
c001269c:	83 ec 0c             	sub    esp,0xc
c001269f:	68 59 51 02 c0       	push   0xc0025159
c00126a4:	e8 4e a6 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c00126a9:	83 c4 10             	add    esp,0x10
c00126ac:	83 ec 0c             	sub    esp,0xc
c00126af:	68 64 51 02 c0       	push   0xc0025164
c00126b4:	e8 a8 73 ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c00126b9:	83 c4 10             	add    esp,0x10
c00126bc:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c00126c4:	83 ec 0c             	sub    esp,0xc
c00126c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126cb:	e8 37 73 ff ff       	call   c0009a07 <malloc>
c00126d0:	83 c4 10             	add    esp,0x10
c00126d3:	89 c3                	mov    ebx,eax
c00126d5:	83 ec 0c             	sub    esp,0xc
c00126d8:	53                   	push   ebx
c00126d9:	e8 be ba 00 00       	call   c001e19c <IDE::IDE()>
c00126de:	83 c4 10             	add    esp,0x10
c00126e1:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c00126e5:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00126e9:	83 ec 08             	sub    esp,0x8
c00126ec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00126f0:	50                   	push   eax
c00126f1:	e8 88 ba ff ff       	call   c000e17e <Device::addChild(Device*)>
c00126f6:	83 c4 10             	add    esp,0x10
c00126f9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126fd:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0012707:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001270b:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0012714:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012718:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0012721:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012725:	8b 00                	mov    eax,DWORD PTR [eax]
c0012727:	83 c0 08             	add    eax,0x8
c001272a:	8b 00                	mov    eax,DWORD PTR [eax]
c001272c:	6a 00                	push   0x0
c001272e:	6a 00                	push   0x0
c0012730:	6a 00                	push   0x0
c0012732:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012736:	ff d0                	call   eax
c0012738:	83 c4 10             	add    esp,0x10
c001273b:	eb 07                	jmp    c0012744 <ACPI::detectPCI()+0x4dc>
c001273d:	8d 76 00             	lea    esi,[esi+0x0]
c0012740:	90                   	nop
c0012741:	8d 76 00             	lea    esi,[esi+0x0]
c0012744:	90                   	nop
c0012745:	83 c4 68             	add    esp,0x68
c0012748:	5b                   	pop    ebx
c0012749:	c3                   	ret    
c001274a:	66 90                	xchg   ax,ax

c001274c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001274c:	83 ec 1c             	sub    esp,0x1c
c001274f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012753:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0012756:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001275a:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c001275f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012764:	83 ec 08             	sub    esp,0x8
c0012767:	52                   	push   edx
c0012768:	50                   	push   eax
c0012769:	e8 6a 68 ff ff       	call   c0008fd8 <Computer::readCMOS(unsigned char)>
c001276e:	83 c4 10             	add    esp,0x10
c0012771:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0012775:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c001277a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001277f:	83 ec 04             	sub    esp,0x4
c0012782:	6a 01                	push   0x1
c0012784:	52                   	push   edx
c0012785:	50                   	push   eax
c0012786:	e8 29 6a ff ff       	call   c00091b4 <Computer::writeCMOS(unsigned char, unsigned char)>
c001278b:	83 c4 10             	add    esp,0x10
c001278e:	90                   	nop
c001278f:	83 c4 1c             	add    esp,0x1c
c0012792:	c3                   	ret    
c0012793:	90                   	nop

c0012794 <ACPI::sleep()>:
c0012794:	83 ec 0c             	sub    esp,0xc
c0012797:	a1 80 81 02 c0       	mov    eax,ds:0xc0028180
c001279c:	85 c0                	test   eax,eax
c001279e:	74 08                	je     c00127a8 <ACPI::sleep()+0x14>
c00127a0:	a1 80 81 02 c0       	mov    eax,ds:0xc0028180
c00127a5:	ff d0                	call   eax
c00127a7:	90                   	nop
c00127a8:	90                   	nop
c00127a9:	83 c4 0c             	add    esp,0xc
c00127ac:	c3                   	ret    
c00127ad:	90                   	nop
c00127ae:	66 90                	xchg   ax,ax

c00127b0 <ACPI::open(int, int, void*)>:
c00127b0:	57                   	push   edi
c00127b1:	56                   	push   esi
c00127b2:	53                   	push   ebx
c00127b3:	81 ec 70 01 00 00    	sub    esp,0x170
c00127b9:	83 ec 0c             	sub    esp,0xc
c00127bc:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00127c3:	e8 a0 fa ff ff       	call   c0012268 <ACPI::detectPCI()>
c00127c8:	83 c4 10             	add    esp,0x10
c00127cb:	83 ec 0c             	sub    esp,0xc
c00127ce:	68 e4 4f 02 c0       	push   0xc0024fe4
c00127d3:	e8 89 72 ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c00127d8:	83 c4 10             	add    esp,0x10
c00127db:	83 ec 0c             	sub    esp,0xc
c00127de:	68 79 51 02 c0       	push   0xc0025179
c00127e3:	e8 2f 48 00 00       	call   c0017017 <Thr::loadKernelSymbolTable(char const*)>
c00127e8:	83 c4 10             	add    esp,0x10
c00127eb:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c00127f3:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c00127fe:	83 ec 0c             	sub    esp,0xc
c0012801:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012808:	e8 fa 71 ff ff       	call   c0009a07 <malloc>
c001280d:	83 c4 10             	add    esp,0x10
c0012810:	89 c3                	mov    ebx,eax
c0012812:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c0012817:	83 ec 04             	sub    esp,0x4
c001281a:	50                   	push   eax
c001281b:	68 97 51 02 c0       	push   0xc0025197
c0012820:	53                   	push   ebx
c0012821:	e8 3c aa ff ff       	call   c000d262 <File::File(char const*, Process*)>
c0012826:	83 c4 10             	add    esp,0x10
c0012829:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0012830:	83 ec 08             	sub    esp,0x8
c0012833:	6a 01                	push   0x1
c0012835:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001283c:	e8 c3 aa ff ff       	call   c000d304 <File::open(FileOpenMode)>
c0012841:	83 c4 10             	add    esp,0x10
c0012844:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c001284b:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c0012853:	75 17                	jne    c001286c <ACPI::open(int, int, void*)+0xbc>
c0012855:	83 ec 0c             	sub    esp,0xc
c0012858:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001285f:	e8 fe aa ff ff       	call   c000d362 <File::close()>
c0012864:	83 c4 10             	add    esp,0x10
c0012867:	eb 0b                	jmp    c0012874 <ACPI::open(int, int, void*)+0xc4>
c0012869:	8d 76 00             	lea    esi,[esi+0x0]
c001286c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0012874:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c001287c:	74 1e                	je     c001289c <ACPI::open(int, int, void*)+0xec>
c001287e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0012885:	8b 00                	mov    eax,DWORD PTR [eax]
c0012887:	83 c0 08             	add    eax,0x8
c001288a:	8b 00                	mov    eax,DWORD PTR [eax]
c001288c:	83 ec 0c             	sub    esp,0xc
c001288f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012896:	ff d0                	call   eax
c0012898:	83 c4 10             	add    esp,0x10
c001289b:	90                   	nop
c001289c:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c00128a3:	83 f0 01             	xor    eax,0x1
c00128a6:	84 c0                	test   al,al
c00128a8:	74 42                	je     c00128ec <ACPI::open(int, int, void*)+0x13c>
c00128aa:	83 ec 0c             	sub    esp,0xc
c00128ad:	68 b5 51 02 c0       	push   0xc00251b5
c00128b2:	e8 aa 71 ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c00128b7:	83 c4 10             	add    esp,0x10
c00128ba:	83 ec 04             	sub    esp,0x4
c00128bd:	6a 0c                	push   0xc
c00128bf:	68 d0 51 02 c0       	push   0xc00251d0
c00128c4:	68 e1 51 02 c0       	push   0xc00251e1
c00128c9:	e8 b3 2d 00 00       	call   c0015681 <Reg::readIntWithDefault(char*, char*, int)>
c00128ce:	83 c4 10             	add    esp,0x10
c00128d1:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c00128d8:	83 ec 0c             	sub    esp,0xc
c00128db:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c00128e2:	e8 f4 92 ff ff       	call   c000bbdb <Virt::setupPageSwapping(int)>
c00128e7:	83 c4 10             	add    esp,0x10
c00128ea:	66 90                	xchg   ax,ax
c00128ec:	83 ec 0c             	sub    esp,0xc
c00128ef:	68 06 3a 02 c0       	push   0xc0023a06
c00128f4:	e8 68 71 ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c00128f9:	83 c4 10             	add    esp,0x10
c00128fc:	8b 1d 48 7b 02 c0    	mov    ebx,DWORD PTR ds:0xc0027b48
c0012902:	83 ec 08             	sub    esp,0x8
c0012905:	6a 01                	push   0x1
c0012907:	68 e8 51 02 c0       	push   0xc00251e8
c001290c:	e8 7d 51 00 00       	call   c0017a8e <Thr::loadDLL(char const*, bool)>
c0012911:	83 c4 10             	add    esp,0x10
c0012914:	83 ec 08             	sub    esp,0x8
c0012917:	53                   	push   ebx
c0012918:	50                   	push   eax
c0012919:	e8 a1 53 00 00       	call   c0017cbf <Thr::executeDLL(unsigned long, void*)>
c001291e:	83 c4 10             	add    esp,0x10
c0012921:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012928:	83 ec 08             	sub    esp,0x8
c001292b:	6a 12                	push   0x12
c001292d:	50                   	push   eax
c001292e:	e8 cf bb ff ff       	call   c000e502 <getDevicesOfType(DeviceType)>
c0012933:	83 c4 0c             	add    esp,0xc
c0012936:	66 90                	xchg   ax,ax
c0012938:	83 ec 0c             	sub    esp,0xc
c001293b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012942:	50                   	push   eax
c0012943:	e8 a8 02 01 00       	call   c0022bf0 <LinkedList<Device>::isEmpty()>
c0012948:	83 c4 10             	add    esp,0x10
c001294b:	83 f0 01             	xor    eax,0x1
c001294e:	84 c0                	test   al,al
c0012950:	0f 84 46 01 00 00    	je     c0012a9c <ACPI::open(int, int, void*)+0x2ec>
c0012956:	83 ec 0c             	sub    esp,0xc
c0012959:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012960:	50                   	push   eax
c0012961:	e8 a6 02 01 00       	call   c0022c0c <LinkedList<Device>::getFirstElement()>
c0012966:	83 c4 10             	add    esp,0x10
c0012969:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0012970:	83 ec 0c             	sub    esp,0xc
c0012973:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001297a:	50                   	push   eax
c001297b:	e8 94 02 01 00       	call   c0022c14 <LinkedList<Device>::removeFirst()>
c0012980:	83 c4 10             	add    esp,0x10
c0012983:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c001298a:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0012991:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0012998:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001299c:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c00129a2:	ba 09 00 00 00       	mov    edx,0x9
c00129a7:	fc                   	cld    
c00129a8:	89 c7                	mov    edi,eax
c00129aa:	89 de                	mov    esi,ebx
c00129ac:	89 d1                	mov    ecx,edx
c00129ae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00129b0:	83 ec 08             	sub    esp,0x8
c00129b3:	8d 44 24 38          	lea    eax,[esp+0x38]
c00129b7:	50                   	push   eax
c00129b8:	83 ec 24             	sub    esp,0x24
c00129bb:	89 e0                	mov    eax,esp
c00129bd:	89 c3                	mov    ebx,eax
c00129bf:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00129c3:	ba 09 00 00 00       	mov    edx,0x9
c00129c8:	89 df                	mov    edi,ebx
c00129ca:	89 c6                	mov    esi,eax
c00129cc:	89 d1                	mov    ecx,edx
c00129ce:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00129d0:	e8 3b ab 00 00       	call   c001d510 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c00129d5:	83 c4 30             	add    esp,0x30
c00129d8:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c00129df:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c00129e7:	0f 84 4b ff ff ff    	je     c0012938 <ACPI::open(int, int, void*)+0x188>
c00129ed:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c00129f8:	83 ec 0c             	sub    esp,0xc
c00129fb:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0012a02:	e8 00 70 ff ff       	call   c0009a07 <malloc>
c0012a07:	83 c4 10             	add    esp,0x10
c0012a0a:	89 c3                	mov    ebx,eax
c0012a0c:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c0012a11:	83 ec 04             	sub    esp,0x4
c0012a14:	50                   	push   eax
c0012a15:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012a1c:	53                   	push   ebx
c0012a1d:	e8 40 a8 ff ff       	call   c000d262 <File::File(char const*, Process*)>
c0012a22:	83 c4 10             	add    esp,0x10
c0012a25:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0012a2c:	83 ec 0c             	sub    esp,0xc
c0012a2f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012a36:	e8 37 ab ff ff       	call   c000d572 <File::exists()>
c0012a3b:	83 c4 10             	add    esp,0x10
c0012a3e:	84 c0                	test   al,al
c0012a40:	74 2a                	je     c0012a6c <ACPI::open(int, int, void*)+0x2bc>
c0012a42:	83 ec 08             	sub    esp,0x8
c0012a45:	6a 01                	push   0x1
c0012a47:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012a4e:	e8 3b 50 00 00       	call   c0017a8e <Thr::loadDLL(char const*, bool)>
c0012a53:	83 c4 10             	add    esp,0x10
c0012a56:	83 ec 08             	sub    esp,0x8
c0012a59:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012a60:	50                   	push   eax
c0012a61:	e8 59 52 00 00       	call   c0017cbf <Thr::executeDLL(unsigned long, void*)>
c0012a66:	83 c4 10             	add    esp,0x10
c0012a69:	8d 76 00             	lea    esi,[esi+0x0]
c0012a6c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0012a74:	0f 84 be fe ff ff    	je     c0012938 <ACPI::open(int, int, void*)+0x188>
c0012a7a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0012a81:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a83:	83 c0 08             	add    eax,0x8
c0012a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a88:	83 ec 0c             	sub    esp,0xc
c0012a8b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012a92:	ff d0                	call   eax
c0012a94:	83 c4 10             	add    esp,0x10
c0012a97:	e9 9c fe ff ff       	jmp    c0012938 <ACPI::open(int, int, void*)+0x188>
c0012a9c:	83 ec 0c             	sub    esp,0xc
c0012a9f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012aa6:	50                   	push   eax
c0012aa7:	e8 40 01 01 00       	call   c0022bec <LinkedList<Device>::~LinkedList()>
c0012aac:	83 c4 10             	add    esp,0x10
c0012aaf:	8b 1d 48 7b 02 c0    	mov    ebx,DWORD PTR ds:0xc0027b48
c0012ab5:	83 ec 08             	sub    esp,0x8
c0012ab8:	6a 01                	push   0x1
c0012aba:	68 03 52 02 c0       	push   0xc0025203
c0012abf:	e8 ca 4f 00 00       	call   c0017a8e <Thr::loadDLL(char const*, bool)>
c0012ac4:	83 c4 10             	add    esp,0x10
c0012ac7:	83 ec 08             	sub    esp,0x8
c0012aca:	53                   	push   ebx
c0012acb:	50                   	push   eax
c0012acc:	e8 ee 51 00 00       	call   c0017cbf <Thr::executeDLL(unsigned long, void*)>
c0012ad1:	83 c4 10             	add    esp,0x10
c0012ad4:	8b 1d 48 7b 02 c0    	mov    ebx,DWORD PTR ds:0xc0027b48
c0012ada:	83 ec 08             	sub    esp,0x8
c0012add:	6a 01                	push   0x1
c0012adf:	68 20 52 02 c0       	push   0xc0025220
c0012ae4:	e8 a5 4f 00 00       	call   c0017a8e <Thr::loadDLL(char const*, bool)>
c0012ae9:	83 c4 10             	add    esp,0x10
c0012aec:	83 ec 08             	sub    esp,0x8
c0012aef:	53                   	push   ebx
c0012af0:	50                   	push   eax
c0012af1:	e8 c9 51 00 00       	call   c0017cbf <Thr::executeDLL(unsigned long, void*)>
c0012af6:	83 c4 10             	add    esp,0x10
c0012af9:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c0012afe:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012b04:	83 e0 04             	and    eax,0x4
c0012b07:	84 c0                	test   al,al
c0012b09:	0f 84 15 01 00 00    	je     c0012c24 <ACPI::open(int, int, void*)+0x474>
c0012b0f:	83 ec 0c             	sub    esp,0xc
c0012b12:	68 3d 52 02 c0       	push   0xc002523d
c0012b17:	e8 45 6f ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0012b1c:	83 c4 10             	add    esp,0x10
c0012b1f:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0012b2a:	83 ec 0c             	sub    esp,0xc
c0012b2d:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0012b34:	e8 ce 6e ff ff       	call   c0009a07 <malloc>
c0012b39:	83 c4 10             	add    esp,0x10
c0012b3c:	89 c3                	mov    ebx,eax
c0012b3e:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c0012b43:	83 ec 04             	sub    esp,0x4
c0012b46:	50                   	push   eax
c0012b47:	68 5a 52 02 c0       	push   0xc002525a
c0012b4c:	53                   	push   ebx
c0012b4d:	e8 10 a7 ff ff       	call   c000d262 <File::File(char const*, Process*)>
c0012b52:	83 c4 10             	add    esp,0x10
c0012b55:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0012b5c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012b64:	74 1a                	je     c0012b80 <ACPI::open(int, int, void*)+0x3d0>
c0012b66:	83 ec 0c             	sub    esp,0xc
c0012b69:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012b70:	e8 fd a9 ff ff       	call   c000d572 <File::exists()>
c0012b75:	83 c4 10             	add    esp,0x10
c0012b78:	84 c0                	test   al,al
c0012b7a:	74 04                	je     c0012b80 <ACPI::open(int, int, void*)+0x3d0>
c0012b7c:	b0 01                	mov    al,0x1
c0012b7e:	eb 04                	jmp    c0012b84 <ACPI::open(int, int, void*)+0x3d4>
c0012b80:	b0 00                	mov    al,0x0
c0012b82:	66 90                	xchg   ax,ax
c0012b84:	84 c0                	test   al,al
c0012b86:	74 28                	je     c0012bb0 <ACPI::open(int, int, void*)+0x400>
c0012b88:	83 ec 08             	sub    esp,0x8
c0012b8b:	6a 01                	push   0x1
c0012b8d:	68 5a 52 02 c0       	push   0xc002525a
c0012b92:	e8 f7 4e 00 00       	call   c0017a8e <Thr::loadDLL(char const*, bool)>
c0012b97:	83 c4 10             	add    esp,0x10
c0012b9a:	83 ec 08             	sub    esp,0x8
c0012b9d:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0012ba4:	50                   	push   eax
c0012ba5:	e8 15 51 00 00       	call   c0017cbf <Thr::executeDLL(unsigned long, void*)>
c0012baa:	83 c4 10             	add    esp,0x10
c0012bad:	8d 76 00             	lea    esi,[esi+0x0]
c0012bb0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012bb8:	74 2a                	je     c0012be4 <ACPI::open(int, int, void*)+0x434>
c0012bba:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012bc2:	74 20                	je     c0012be4 <ACPI::open(int, int, void*)+0x434>
c0012bc4:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0012bcb:	8b 00                	mov    eax,DWORD PTR [eax]
c0012bcd:	83 c0 08             	add    eax,0x8
c0012bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0012bd2:	83 ec 0c             	sub    esp,0xc
c0012bd5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012bdc:	ff d0                	call   eax
c0012bde:	83 c4 10             	add    esp,0x10
c0012be1:	8d 76 00             	lea    esi,[esi+0x0]
c0012be4:	a1 a8 83 02 c0       	mov    eax,ds:0xc00283a8
c0012be9:	83 ec 08             	sub    esp,0x8
c0012bec:	68 77 52 02 c0       	push   0xc0025277
c0012bf1:	50                   	push   eax
c0012bf2:	e8 01 ef ff ff       	call   c0011af8 <findDataTable(unsigned char*, char*)>
c0012bf7:	83 c4 10             	add    esp,0x10
c0012bfa:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0012c01:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0012c09:	74 19                	je     c0012c24 <ACPI::open(int, int, void*)+0x474>
c0012c0b:	83 ec 08             	sub    esp,0x8
c0012c0e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012c15:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012c1c:	e8 2b fb ff ff       	call   c001274c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0012c21:	83 c4 10             	add    esp,0x10
c0012c24:	b8 00 00 00 00       	mov    eax,0x0
c0012c29:	81 c4 70 01 00 00    	add    esp,0x170
c0012c2f:	5b                   	pop    ebx
c0012c30:	5e                   	pop    esi
c0012c31:	5f                   	pop    edi
c0012c32:	c3                   	ret    
c0012c33:	90                   	nop

c0012c34 <CPU::close(int, int, void*)>:
c0012c34:	31 c0                	xor    eax,eax
c0012c36:	c3                   	ret    
c0012c37:	90                   	nop

c0012c38 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0012c38:	55                   	push   ebp
c0012c39:	57                   	push   edi
c0012c3a:	56                   	push   esi
c0012c3b:	53                   	push   ebx
c0012c3c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012c40:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012c44:	89 ce                	mov    esi,ecx
c0012c46:	89 d5                	mov    ebp,edx
c0012c48:	80 f9 04             	cmp    cl,0x4
c0012c4b:	75 28                	jne    c0012c75 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0012c4d:	8d 42 f9             	lea    eax,[edx-0x7]
c0012c50:	3c 03                	cmp    al,0x3
c0012c52:	0f 86 63 01 00 00    	jbe    c0012dbb <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012c58:	80 fa 03             	cmp    dl,0x3
c0012c5b:	0f 84 5a 01 00 00    	je     c0012dbb <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012c61:	8d 7a f2             	lea    edi,[edx-0xe]
c0012c64:	b8 10 74 02 c0       	mov    eax,0xc0027410
c0012c69:	89 fb                	mov    ebx,edi
c0012c6b:	80 fb 01             	cmp    bl,0x1
c0012c6e:	77 4e                	ja     c0012cbe <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0012c70:	e9 52 01 00 00       	jmp    c0012dc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012c75:	80 f9 05             	cmp    cl,0x5
c0012c78:	75 4d                	jne    c0012cc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0012c7a:	b8 20 74 02 c0       	mov    eax,0xc0027420
c0012c7f:	80 fa 03             	cmp    dl,0x3
c0012c82:	0f 86 3f 01 00 00    	jbe    c0012dc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012c88:	8d 7a fa             	lea    edi,[edx-0x6]
c0012c8b:	b8 30 74 02 c0       	mov    eax,0xc0027430
c0012c90:	89 fb                	mov    ebx,edi
c0012c92:	80 fb 01             	cmp    bl,0x1
c0012c95:	0f 86 2c 01 00 00    	jbe    c0012dc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012c9b:	b8 40 74 02 c0       	mov    eax,0xc0027440
c0012ca0:	80 fa 08             	cmp    dl,0x8
c0012ca3:	0f 84 1e 01 00 00    	je     c0012dc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ca9:	89 d7                	mov    edi,edx
c0012cab:	b8 50 74 02 c0       	mov    eax,0xc0027450
c0012cb0:	83 e7 fb             	and    edi,0xfffffffb
c0012cb3:	89 fb                	mov    ebx,edi
c0012cb5:	80 fb 09             	cmp    bl,0x9
c0012cb8:	0f 84 09 01 00 00    	je     c0012dc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012cbe:	31 c0                	xor    eax,eax
c0012cc0:	89 eb                	mov    ebx,ebp
c0012cc2:	0f b6 fb             	movzx  edi,bl
c0012cc5:	eb 30                	jmp    c0012cf7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0012cc7:	31 c0                	xor    eax,eax
c0012cc9:	80 f9 06             	cmp    cl,0x6
c0012ccc:	75 f2                	jne    c0012cc0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012cce:	80 fa 0a             	cmp    dl,0xa
c0012cd1:	77 ed                	ja     c0012cc0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012cd3:	bf de 05 00 00       	mov    edi,0x5de
c0012cd8:	0f a3 d7             	bt     edi,edx
c0012cdb:	73 e3                	jae    c0012cc0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012cdd:	b8 60 74 02 c0       	mov    eax,0xc0027460
c0012ce2:	e9 e0 00 00 00       	jmp    c0012dc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ce7:	39 c7                	cmp    edi,eax
c0012ce9:	0f 84 d3 00 00 00    	je     c0012dc2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012cef:	40                   	inc    eax
c0012cf0:	3d d0 00 00 00       	cmp    eax,0xd0
c0012cf5:	74 09                	je     c0012d00 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0012cf7:	89 f3                	mov    ebx,esi
c0012cf9:	80 fb 0f             	cmp    bl,0xf
c0012cfc:	75 f1                	jne    c0012cef <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0012cfe:	eb e7                	jmp    c0012ce7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0012d00:	80 f9 10             	cmp    cl,0x10
c0012d03:	75 14                	jne    c0012d19 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0012d05:	8d 42 fc             	lea    eax,[edx-0x4]
c0012d08:	83 e0 fb             	and    eax,0xfffffffb
c0012d0b:	3c 02                	cmp    al,0x2
c0012d0d:	76 34                	jbe    c0012d43 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0012d0f:	b8 fd 53 02 c0       	mov    eax,0xc00253fd
c0012d14:	80 fa 02             	cmp    dl,0x2
c0012d17:	eb 24                	jmp    c0012d3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0012d19:	80 f9 11             	cmp    cl,0x11
c0012d1c:	75 13                	jne    c0012d31 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0012d1e:	b8 fd 53 02 c0       	mov    eax,0xc00253fd
c0012d23:	80 fa 03             	cmp    dl,0x3
c0012d26:	0f 85 9b 00 00 00    	jne    c0012dc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d2c:	e9 91 00 00 00       	jmp    c0012dc2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012d31:	80 f9 12             	cmp    cl,0x12
c0012d34:	75 14                	jne    c0012d4a <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0012d36:	b8 fd 53 02 c0       	mov    eax,0xc00253fd
c0012d3b:	fe ca                	dec    dl
c0012d3d:	0f 85 84 00 00 00    	jne    c0012dc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d43:	b8 80 74 02 c0       	mov    eax,0xc0027480
c0012d48:	eb 7d                	jmp    c0012dc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d4a:	80 f9 14             	cmp    cl,0x14
c0012d4d:	75 12                	jne    c0012d61 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0012d4f:	4a                   	dec    edx
c0012d50:	b8 fd 53 02 c0       	mov    eax,0xc00253fd
c0012d55:	80 fa 01             	cmp    dl,0x1
c0012d58:	77 6d                	ja     c0012dc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d5a:	b8 90 74 02 c0       	mov    eax,0xc0027490
c0012d5f:	eb 66                	jmp    c0012dc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d61:	80 f9 15             	cmp    cl,0x15
c0012d64:	75 31                	jne    c0012d97 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0012d66:	b8 a0 74 02 c0       	mov    eax,0xc00274a0
c0012d6b:	80 fa 01             	cmp    dl,0x1
c0012d6e:	74 57                	je     c0012dc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d70:	b8 fd 53 02 c0       	mov    eax,0xc00253fd
c0012d75:	80 fa 13             	cmp    dl,0x13
c0012d78:	76 0c                	jbe    c0012d86 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0012d7a:	80 fa 30             	cmp    dl,0x30
c0012d7d:	75 48                	jne    c0012dc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d7f:	b8 c0 74 02 c0       	mov    eax,0xc00274c0
c0012d84:	eb 41                	jmp    c0012dc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d86:	b9 04 00 09 00       	mov    ecx,0x90004
c0012d8b:	0f a3 d1             	bt     ecx,edx
c0012d8e:	73 37                	jae    c0012dc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d90:	b8 b0 74 02 c0       	mov    eax,0xc00274b0
c0012d95:	eb 30                	jmp    c0012dc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d97:	b8 fd 53 02 c0       	mov    eax,0xc00253fd
c0012d9c:	80 f9 16             	cmp    cl,0x16
c0012d9f:	75 26                	jne    c0012dc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012da1:	b8 d0 74 02 c0       	mov    eax,0xc00274d0
c0012da6:	84 d2                	test   dl,dl
c0012da8:	74 1d                	je     c0012dc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012daa:	b8 fd 53 02 c0       	mov    eax,0xc00253fd
c0012daf:	80 fa 30             	cmp    dl,0x30
c0012db2:	75 13                	jne    c0012dc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012db4:	b8 e0 74 02 c0       	mov    eax,0xc00274e0
c0012db9:	eb 0c                	jmp    c0012dc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012dbb:	b8 00 74 02 c0       	mov    eax,0xc0027400
c0012dc0:	eb 05                	jmp    c0012dc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012dc2:	b8 70 74 02 c0       	mov    eax,0xc0027470
c0012dc7:	5b                   	pop    ebx
c0012dc8:	5e                   	pop    esi
c0012dc9:	5f                   	pop    edi
c0012dca:	5d                   	pop    ebp
c0012dcb:	c3                   	ret    

c0012dcc <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0012dcc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012dd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012dd4:	80 f9 04             	cmp    cl,0x4
c0012dd7:	75 6b                	jne    c0012e44 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0012dd9:	b8 60 72 02 c0       	mov    eax,0xc0027260
c0012dde:	80 fa 01             	cmp    dl,0x1
c0012de1:	0f 86 92 02 00 00    	jbe    c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012de7:	b8 70 72 02 c0       	mov    eax,0xc0027270
c0012dec:	80 fa 02             	cmp    dl,0x2
c0012def:	0f 84 84 02 00 00    	je     c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012df5:	b8 80 72 02 c0       	mov    eax,0xc0027280
c0012dfa:	80 fa 03             	cmp    dl,0x3
c0012dfd:	0f 84 76 02 00 00    	je     c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e03:	b8 90 72 02 c0       	mov    eax,0xc0027290
c0012e08:	80 fa 04             	cmp    dl,0x4
c0012e0b:	0f 84 68 02 00 00    	je     c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e11:	b8 a0 72 02 c0       	mov    eax,0xc00272a0
c0012e16:	80 fa 05             	cmp    dl,0x5
c0012e19:	0f 84 5a 02 00 00    	je     c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e1f:	b8 80 72 02 c0       	mov    eax,0xc0027280
c0012e24:	80 fa 07             	cmp    dl,0x7
c0012e27:	0f 84 4c 02 00 00    	je     c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e2d:	83 ea 08             	sub    edx,0x8
c0012e30:	b8 fd 53 02 c0       	mov    eax,0xc00253fd
c0012e35:	80 fa 01             	cmp    dl,0x1
c0012e38:	0f 87 3b 02 00 00    	ja     c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e3e:	b8 b0 72 02 c0       	mov    eax,0xc00272b0
c0012e43:	c3                   	ret    
c0012e44:	80 f9 05             	cmp    cl,0x5
c0012e47:	75 45                	jne    c0012e8e <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0012e49:	8d 4a ff             	lea    ecx,[edx-0x1]
c0012e4c:	b8 c0 72 02 c0       	mov    eax,0xc00272c0
c0012e51:	80 f9 02             	cmp    cl,0x2
c0012e54:	0f 86 1f 02 00 00    	jbe    c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e5a:	80 fa 04             	cmp    dl,0x4
c0012e5d:	0f 84 f3 01 00 00    	je     c0013056 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0012e63:	80 fa 07             	cmp    dl,0x7
c0012e66:	0f 84 0d 02 00 00    	je     c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e6c:	b8 d0 72 02 c0       	mov    eax,0xc00272d0
c0012e71:	80 fa 08             	cmp    dl,0x8
c0012e74:	0f 84 ff 01 00 00    	je     c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e7a:	b8 fd 53 02 c0       	mov    eax,0xc00253fd
c0012e7f:	80 fa 09             	cmp    dl,0x9
c0012e82:	0f 85 f1 01 00 00    	jne    c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e88:	b8 e0 72 02 c0       	mov    eax,0xc00272e0
c0012e8d:	c3                   	ret    
c0012e8e:	80 f9 06             	cmp    cl,0x6
c0012e91:	0f 85 85 01 00 00    	jne    c001301c <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0012e97:	b8 f0 72 02 c0       	mov    eax,0xc00272f0
c0012e9c:	80 fa 01             	cmp    dl,0x1
c0012e9f:	0f 84 d4 01 00 00    	je     c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ea5:	8d 42 fb             	lea    eax,[edx-0x5]
c0012ea8:	3c 01                	cmp    al,0x1
c0012eaa:	0f 86 ac 01 00 00    	jbe    c001305c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012eb0:	80 fa 03             	cmp    dl,0x3
c0012eb3:	0f 84 a3 01 00 00    	je     c001305c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012eb9:	8d 4a f9             	lea    ecx,[edx-0x7]
c0012ebc:	b8 10 73 02 c0       	mov    eax,0xc0027310
c0012ec1:	80 f9 01             	cmp    cl,0x1
c0012ec4:	0f 86 af 01 00 00    	jbe    c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012eca:	80 fa 09             	cmp    dl,0x9
c0012ecd:	0f 84 8f 01 00 00    	je     c0013062 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0012ed3:	8d 4a f6             	lea    ecx,[edx-0xa]
c0012ed6:	80 f9 01             	cmp    cl,0x1
c0012ed9:	0f 86 9a 01 00 00    	jbe    c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012edf:	b8 20 73 02 c0       	mov    eax,0xc0027320
c0012ee4:	80 fa 0d             	cmp    dl,0xd
c0012ee7:	0f 84 8c 01 00 00    	je     c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012eed:	b8 30 73 02 c0       	mov    eax,0xc0027330
c0012ef2:	80 fa 0e             	cmp    dl,0xe
c0012ef5:	0f 84 7e 01 00 00    	je     c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012efb:	b8 40 73 02 c0       	mov    eax,0xc0027340
c0012f00:	80 fa 0f             	cmp    dl,0xf
c0012f03:	0f 84 70 01 00 00    	je     c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f09:	b8 20 73 02 c0       	mov    eax,0xc0027320
c0012f0e:	80 fa 15             	cmp    dl,0x15
c0012f11:	0f 84 62 01 00 00    	je     c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f17:	8d 4a ea             	lea    ecx,[edx-0x16]
c0012f1a:	b8 40 73 02 c0       	mov    eax,0xc0027340
c0012f1f:	80 f9 01             	cmp    cl,0x1
c0012f22:	0f 86 51 01 00 00    	jbe    c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f28:	80 fa 1a             	cmp    dl,0x1a
c0012f2b:	0f 84 37 01 00 00    	je     c0013068 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0012f31:	80 fa 1c             	cmp    dl,0x1c
c0012f34:	0f 84 34 01 00 00    	je     c001306e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0012f3a:	80 fa 1d             	cmp    dl,0x1d
c0012f3d:	0f 84 36 01 00 00    	je     c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f43:	b8 70 73 02 c0       	mov    eax,0xc0027370
c0012f48:	80 fa 25             	cmp    dl,0x25
c0012f4b:	0f 84 28 01 00 00    	je     c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f51:	8d 4a da             	lea    ecx,[edx-0x26]
c0012f54:	b8 60 73 02 c0       	mov    eax,0xc0027360
c0012f59:	80 f9 01             	cmp    cl,0x1
c0012f5c:	0f 86 17 01 00 00    	jbe    c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f62:	b8 80 73 02 c0       	mov    eax,0xc0027380
c0012f67:	80 fa 2a             	cmp    dl,0x2a
c0012f6a:	0f 84 09 01 00 00    	je     c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f70:	b8 70 73 02 c0       	mov    eax,0xc0027370
c0012f75:	80 fa 2c             	cmp    dl,0x2c
c0012f78:	0f 84 fb 00 00 00    	je     c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f7e:	b8 80 73 02 c0       	mov    eax,0xc0027380
c0012f83:	80 fa 2d             	cmp    dl,0x2d
c0012f86:	0f 84 ed 00 00 00    	je     c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f8c:	b8 50 73 02 c0       	mov    eax,0xc0027350
c0012f91:	80 fa 2e             	cmp    dl,0x2e
c0012f94:	0f 84 df 00 00 00    	je     c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f9a:	b8 70 73 02 c0       	mov    eax,0xc0027370
c0012f9f:	80 fa 2f             	cmp    dl,0x2f
c0012fa2:	0f 84 d1 00 00 00    	je     c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fa8:	8d 4a cb             	lea    ecx,[edx-0x35]
c0012fab:	b8 60 73 02 c0       	mov    eax,0xc0027360
c0012fb0:	80 f9 01             	cmp    cl,0x1
c0012fb3:	0f 86 c0 00 00 00    	jbe    c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fb9:	b8 90 73 02 c0       	mov    eax,0xc0027390
c0012fbe:	80 fa 37             	cmp    dl,0x37
c0012fc1:	0f 84 b2 00 00 00    	je     c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fc7:	b8 a0 73 02 c0       	mov    eax,0xc00273a0
c0012fcc:	80 fa 3a             	cmp    dl,0x3a
c0012fcf:	0f 84 a4 00 00 00    	je     c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fd5:	b8 b0 73 02 c0       	mov    eax,0xc00273b0
c0012fda:	80 fa 3c             	cmp    dl,0x3c
c0012fdd:	0f 84 96 00 00 00    	je     c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fe3:	b8 c0 73 02 c0       	mov    eax,0xc00273c0
c0012fe8:	80 fa 3d             	cmp    dl,0x3d
c0012feb:	0f 84 88 00 00 00    	je     c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ff1:	b8 a0 73 02 c0       	mov    eax,0xc00273a0
c0012ff6:	80 fa 3e             	cmp    dl,0x3e
c0012ff9:	74 7e                	je     c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ffb:	8d 42 bb             	lea    eax,[edx-0x45]
c0012ffe:	3c 01                	cmp    al,0x1
c0013000:	76 72                	jbe    c0013074 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0013002:	80 fa 3f             	cmp    dl,0x3f
c0013005:	74 6d                	je     c0013074 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0013007:	80 fa 4a             	cmp    dl,0x4a
c001300a:	74 0a                	je     c0013016 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c001300c:	b8 fd 53 02 c0       	mov    eax,0xc00253fd
c0013011:	80 fa 4d             	cmp    dl,0x4d
c0013014:	75 63                	jne    c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013016:	b8 90 73 02 c0       	mov    eax,0xc0027390
c001301b:	c3                   	ret    
c001301c:	b8 fd 53 02 c0       	mov    eax,0xc00253fd
c0013021:	80 f9 0b             	cmp    cl,0xb
c0013024:	75 0a                	jne    c0013030 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0013026:	fe ca                	dec    dl
c0013028:	75 4f                	jne    c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001302a:	b8 d0 73 02 c0       	mov    eax,0xc00273d0
c001302f:	c3                   	ret    
c0013030:	80 f9 0f             	cmp    cl,0xf
c0013033:	75 44                	jne    c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013035:	b8 e0 73 02 c0       	mov    eax,0xc00273e0
c001303a:	80 fa 02             	cmp    dl,0x2
c001303d:	76 3a                	jbe    c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001303f:	8d 42 fd             	lea    eax,[edx-0x3]
c0013042:	3c 01                	cmp    al,0x1
c0013044:	76 0a                	jbe    c0013050 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0013046:	b8 fd 53 02 c0       	mov    eax,0xc00253fd
c001304b:	80 fa 06             	cmp    dl,0x6
c001304e:	75 29                	jne    c0013079 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013050:	b8 f0 73 02 c0       	mov    eax,0xc00273f0
c0013055:	c3                   	ret    
c0013056:	b8 d0 72 02 c0       	mov    eax,0xc00272d0
c001305b:	c3                   	ret    
c001305c:	b8 00 73 02 c0       	mov    eax,0xc0027300
c0013061:	c3                   	ret    
c0013062:	b8 20 73 02 c0       	mov    eax,0xc0027320
c0013067:	c3                   	ret    
c0013068:	b8 50 73 02 c0       	mov    eax,0xc0027350
c001306d:	c3                   	ret    
c001306e:	b8 60 73 02 c0       	mov    eax,0xc0027360
c0013073:	c3                   	ret    
c0013074:	b8 b0 73 02 c0       	mov    eax,0xc00273b0
c0013079:	c3                   	ret    

c001307a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001307a:	60                   	pusha  
c001307b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001307f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013083:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013087:	9c                   	pushf  
c0013088:	fa                   	cli    
c0013089:	0f 09                	wbinvd 
c001308b:	0f 30                	wrmsr  
c001308d:	9d                   	popf   
c001308e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013092:	89 02                	mov    DWORD PTR [edx],eax
c0013094:	61                   	popa   
c0013095:	c3                   	ret    

c0013096 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0013096:	60                   	pusha  
c0013097:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001309b:	9c                   	pushf  
c001309c:	fa                   	cli    
c001309d:	0f 09                	wbinvd 
c001309f:	31 c0                	xor    eax,eax
c00130a1:	31 d2                	xor    edx,edx
c00130a3:	0f 32                	rdmsr  
c00130a5:	9d                   	popf   
c00130a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130aa:	89 02                	mov    DWORD PTR [edx],eax
c00130ac:	61                   	popa   
c00130ad:	c3                   	ret    

c00130ae <CPU::AMD_K6_writeback(int, int, int)>:
c00130ae:	56                   	push   esi
c00130af:	53                   	push   ebx
c00130b0:	83 ec 10             	sub    esp,0x10
c00130b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00130b7:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00130bc:	75 5d                	jne    c001311b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00130be:	83 f8 08             	cmp    eax,0x8
c00130c1:	75 09                	jne    c00130cc <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00130c3:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00130c8:	7e 13                	jle    c00130dd <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00130ca:	eb 30                	jmp    c00130fc <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00130cc:	83 f8 06             	cmp    eax,0x6
c00130cf:	7c 4a                	jl     c001311b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00130d1:	83 f8 07             	cmp    eax,0x7
c00130d4:	7e 07                	jle    c00130dd <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00130d6:	83 f8 09             	cmp    eax,0x9
c00130d9:	74 21                	je     c00130fc <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00130db:	eb 3e                	jmp    c001311b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00130dd:	89 e6                	mov    esi,esp
c00130df:	8b 1d 6c 7b 02 c0    	mov    ebx,DWORD PTR ds:0xc0027b6c
c00130e5:	56                   	push   esi
c00130e6:	c1 eb 15             	shr    ebx,0x15
c00130e9:	68 82 00 00 c0       	push   0xc0000082
c00130ee:	83 e3 7e             	and    ebx,0x7e
c00130f1:	e8 a0 ff ff ff       	call   c0013096 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00130f6:	56                   	push   esi
c00130f7:	6a 00                	push   0x0
c00130f9:	53                   	push   ebx
c00130fa:	eb 12                	jmp    c001310e <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00130fc:	89 e3                	mov    ebx,esp
c00130fe:	53                   	push   ebx
c00130ff:	68 82 00 00 c0       	push   0xc0000082
c0013104:	e8 8d ff ff ff       	call   c0013096 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0013109:	53                   	push   ebx
c001310a:	6a 00                	push   0x0
c001310c:	6a 00                	push   0x0
c001310e:	68 82 00 00 c0       	push   0xc0000082
c0013113:	e8 62 ff ff ff       	call   c001307a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0013118:	83 c4 18             	add    esp,0x18
c001311b:	83 c4 10             	add    esp,0x10
c001311e:	5b                   	pop    ebx
c001311f:	5e                   	pop    esi
c0013120:	c3                   	ret    
c0013121:	90                   	nop

c0013122 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0013122:	55                   	push   ebp
c0013123:	57                   	push   edi
c0013124:	56                   	push   esi
c0013125:	53                   	push   ebx
c0013126:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001312a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001312e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013132:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013136:	39 05 00 75 02 c0    	cmp    DWORD PTR ds:0xc0027500,eax
c001313c:	75 23                	jne    c0013161 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001313e:	a1 0c 86 02 c0       	mov    eax,ds:0xc002860c
c0013143:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013147:	89 06                	mov    DWORD PTR [esi],eax
c0013149:	a1 08 86 02 c0       	mov    eax,ds:0xc0028608
c001314e:	89 07                	mov    DWORD PTR [edi],eax
c0013150:	a1 04 86 02 c0       	mov    eax,ds:0xc0028604
c0013155:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013158:	a1 00 86 02 c0       	mov    eax,ds:0xc0028600
c001315d:	89 02                	mov    DWORD PTR [edx],eax
c001315f:	eb 3f                	jmp    c00131a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0013161:	31 c9                	xor    ecx,ecx
c0013163:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013167:	0f a2                	cpuid  
c0013169:	89 06                	mov    DWORD PTR [esi],eax
c001316b:	89 1f                	mov    DWORD PTR [edi],ebx
c001316d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013171:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0013174:	89 10                	mov    DWORD PTR [eax],edx
c0013176:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001317a:	a3 00 75 02 c0       	mov    ds:0xc0027500,eax
c001317f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013181:	a3 0c 86 02 c0       	mov    ds:0xc002860c,eax
c0013186:	8b 07                	mov    eax,DWORD PTR [edi]
c0013188:	a3 08 86 02 c0       	mov    ds:0xc0028608,eax
c001318d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013190:	a3 04 86 02 c0       	mov    ds:0xc0028604,eax
c0013195:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013199:	8b 00                	mov    eax,DWORD PTR [eax]
c001319b:	a3 00 86 02 c0       	mov    ds:0xc0028600,eax
c00131a0:	5b                   	pop    ebx
c00131a1:	5e                   	pop    esi
c00131a2:	5f                   	pop    edi
c00131a3:	5d                   	pop    ebp
c00131a4:	c3                   	ret    
c00131a5:	90                   	nop

c00131a6 <CPU::cpuidCheckEDX(unsigned int)>:
c00131a6:	83 ec 10             	sub    esp,0x10
c00131a9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131ad:	50                   	push   eax
c00131ae:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131b2:	50                   	push   eax
c00131b3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131b7:	50                   	push   eax
c00131b8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131bc:	50                   	push   eax
c00131bd:	6a 01                	push   0x1
c00131bf:	e8 5e ff ff ff       	call   c0013122 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00131c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00131c8:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00131cc:	0f 95 c0             	setne  al
c00131cf:	83 c4 24             	add    esp,0x24
c00131d2:	c3                   	ret    
c00131d3:	90                   	nop

c00131d4 <CPU::cpuidCheckECX(unsigned int)>:
c00131d4:	83 ec 10             	sub    esp,0x10
c00131d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131db:	50                   	push   eax
c00131dc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131e0:	50                   	push   eax
c00131e1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131e5:	50                   	push   eax
c00131e6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131ea:	50                   	push   eax
c00131eb:	6a 01                	push   0x1
c00131ed:	e8 30 ff ff ff       	call   c0013122 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00131f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00131f6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00131fa:	0f 95 c0             	setne  al
c00131fd:	83 c4 24             	add    esp,0x24
c0013200:	c3                   	ret    
c0013201:	90                   	nop

c0013202 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0013202:	83 ec 10             	sub    esp,0x10
c0013205:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013209:	50                   	push   eax
c001320a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001320e:	50                   	push   eax
c001320f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013213:	50                   	push   eax
c0013214:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013218:	50                   	push   eax
c0013219:	6a 07                	push   0x7
c001321b:	e8 02 ff ff ff       	call   c0013122 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013220:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013224:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0013228:	0f 95 c0             	setne  al
c001322b:	83 c4 24             	add    esp,0x24
c001322e:	c3                   	ret    
c001322f:	90                   	nop

c0013230 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0013230:	83 ec 10             	sub    esp,0x10
c0013233:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013237:	50                   	push   eax
c0013238:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001323c:	50                   	push   eax
c001323d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013241:	50                   	push   eax
c0013242:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013246:	50                   	push   eax
c0013247:	6a 07                	push   0x7
c0013249:	e8 d4 fe ff ff       	call   c0013122 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001324e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013252:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013256:	0f 95 c0             	setne  al
c0013259:	83 c4 24             	add    esp,0x24
c001325c:	c3                   	ret    
c001325d:	90                   	nop

c001325e <CPU::CPU()>:
c001325e:	83 ec 0c             	sub    esp,0xc
c0013261:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013265:	83 ec 08             	sub    esp,0x8
c0013268:	68 fd 53 02 c0       	push   0xc00253fd
c001326d:	50                   	push   eax
c001326e:	e8 0f b1 ff ff       	call   c000e382 <Device::Device(char const*)>
c0013273:	83 c4 10             	add    esp,0x10
c0013276:	ba 60 56 02 c0       	mov    edx,0xc0025660
c001327b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001327f:	89 10                	mov    DWORD PTR [eax],edx
c0013281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013285:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001328f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013293:	05 78 01 00 00       	add    eax,0x178
c0013298:	83 ec 0c             	sub    esp,0xc
c001329b:	50                   	push   eax
c001329c:	e8 fd 5f ff ff       	call   c000929e <GDT::GDT()>
c00132a1:	83 c4 10             	add    esp,0x10
c00132a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132a8:	05 7c 09 00 00       	add    eax,0x97c
c00132ad:	83 ec 0c             	sub    esp,0xc
c00132b0:	50                   	push   eax
c00132b1:	e8 3e 62 ff ff       	call   c00094f4 <IDT::IDT()>
c00132b6:	83 c4 10             	add    esp,0x10
c00132b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132bd:	05 7c 11 00 00       	add    eax,0x117c
c00132c2:	83 ec 0c             	sub    esp,0xc
c00132c5:	50                   	push   eax
c00132c6:	e8 49 80 ff ff       	call   c000b314 <TSS::TSS()>
c00132cb:	83 c4 10             	add    esp,0x10
c00132ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132d2:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00132d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132dd:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00132e7:	90                   	nop
c00132e8:	83 c4 0c             	add    esp,0xc
c00132eb:	c3                   	ret    

c00132ec <CPU::displayFeatures()>:
c00132ec:	c3                   	ret    
c00132ed:	90                   	nop

c00132ee <CPU::detectFeatures()>:
c00132ee:	55                   	push   ebp
c00132ef:	57                   	push   edi
c00132f0:	56                   	push   esi
c00132f1:	53                   	push   ebx
c00132f2:	83 ec 50             	sub    esp,0x50
c00132f5:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00132f9:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0013303:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001330a:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0013310:	6a 0d                	push   0xd
c0013312:	6a 00                	push   0x0
c0013314:	55                   	push   ebp
c0013315:	e8 6a d3 fe ff       	call   c0000684 <memset>
c001331a:	83 c4 10             	add    esp,0x10
c001331d:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c0013322:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0013329:	0f 84 22 09 00 00    	je     c0013c51 <CPU::detectFeatures()+0x963>
c001332f:	83 ec 0c             	sub    esp,0xc
c0013332:	89 ef                	mov    edi,ebp
c0013334:	6a 10                	push   0x10
c0013336:	e8 6b fe ff ff       	call   c00131a6 <CPU::cpuidCheckEDX(unsigned int)>
c001333b:	83 e0 01             	and    eax,0x1
c001333e:	8d 14 00             	lea    edx,[eax+eax*1]
c0013341:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013347:	83 e0 fd             	and    eax,0xfffffffd
c001334a:	09 d0                	or     eax,edx
c001334c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013352:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0013359:	e8 48 fe ff ff       	call   c00131a6 <CPU::cpuidCheckEDX(unsigned int)>
c001335e:	83 e0 01             	and    eax,0x1
c0013361:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013368:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001336e:	83 e0 fb             	and    eax,0xfffffffb
c0013371:	09 d0                	or     eax,edx
c0013373:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013379:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013380:	e8 21 fe ff ff       	call   c00131a6 <CPU::cpuidCheckEDX(unsigned int)>
c0013385:	83 e0 01             	and    eax,0x1
c0013388:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001338f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013395:	83 e0 f7             	and    eax,0xfffffff7
c0013398:	09 d0                	or     eax,edx
c001339a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00133a0:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00133a7:	e8 fa fd ff ff       	call   c00131a6 <CPU::cpuidCheckEDX(unsigned int)>
c00133ac:	83 e0 01             	and    eax,0x1
c00133af:	c1 e0 04             	shl    eax,0x4
c00133b2:	88 c2                	mov    dl,al
c00133b4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00133ba:	83 e0 ef             	and    eax,0xffffffef
c00133bd:	09 d0                	or     eax,edx
c00133bf:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00133c5:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00133cc:	e8 d5 fd ff ff       	call   c00131a6 <CPU::cpuidCheckEDX(unsigned int)>
c00133d1:	83 e0 01             	and    eax,0x1
c00133d4:	c1 e0 05             	shl    eax,0x5
c00133d7:	88 c2                	mov    dl,al
c00133d9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00133df:	83 e0 df             	and    eax,0xffffffdf
c00133e2:	09 d0                	or     eax,edx
c00133e4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00133ea:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00133f1:	e8 b0 fd ff ff       	call   c00131a6 <CPU::cpuidCheckEDX(unsigned int)>
c00133f6:	83 e0 01             	and    eax,0x1
c00133f9:	8d 14 00             	lea    edx,[eax+eax*1]
c00133fc:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013402:	83 e0 fd             	and    eax,0xfffffffd
c0013405:	09 d0                	or     eax,edx
c0013407:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001340d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0013414:	e8 8d fd ff ff       	call   c00131a6 <CPU::cpuidCheckEDX(unsigned int)>
c0013419:	83 e0 01             	and    eax,0x1
c001341c:	c1 e0 06             	shl    eax,0x6
c001341f:	88 c2                	mov    dl,al
c0013421:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013427:	83 e0 bf             	and    eax,0xffffffbf
c001342a:	09 d0                	or     eax,edx
c001342c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013432:	58                   	pop    eax
c0013433:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013437:	50                   	push   eax
c0013438:	8d 44 24 28          	lea    eax,[esp+0x28]
c001343c:	50                   	push   eax
c001343d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013441:	56                   	push   esi
c0013442:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013446:	50                   	push   eax
c0013447:	6a 00                	push   0x0
c0013449:	e8 d4 fc ff ff       	call   c0013122 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001344e:	b8 04 00 00 00       	mov    eax,0x4
c0013453:	89 c1                	mov    ecx,eax
c0013455:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013457:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001345d:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013461:	89 c1                	mov    ecx,eax
c0013463:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013465:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001346b:	8d 74 24 38          	lea    esi,[esp+0x38]
c001346f:	89 c1                	mov    ecx,eax
c0013471:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013473:	83 c4 18             	add    esp,0x18
c0013476:	68 a8 52 02 c0       	push   0xc00252a8
c001347b:	55                   	push   ebp
c001347c:	e8 4b d3 fe ff       	call   c00007cc <strcmp>
c0013481:	83 c4 10             	add    esp,0x10
c0013484:	85 c0                	test   eax,eax
c0013486:	75 0f                	jne    c0013497 <CPU::detectFeatures()+0x1a9>
c0013488:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0013492:	e9 22 02 00 00       	jmp    c00136b9 <CPU::detectFeatures()+0x3cb>
c0013497:	50                   	push   eax
c0013498:	50                   	push   eax
c0013499:	68 b5 52 02 c0       	push   0xc00252b5
c001349e:	55                   	push   ebp
c001349f:	e8 28 d3 fe ff       	call   c00007cc <strcmp>
c00134a4:	83 c4 10             	add    esp,0x10
c00134a7:	85 c0                	test   eax,eax
c00134a9:	74 dd                	je     c0013488 <CPU::detectFeatures()+0x19a>
c00134ab:	50                   	push   eax
c00134ac:	50                   	push   eax
c00134ad:	68 c2 52 02 c0       	push   0xc00252c2
c00134b2:	55                   	push   ebp
c00134b3:	e8 14 d3 fe ff       	call   c00007cc <strcmp>
c00134b8:	83 c4 10             	add    esp,0x10
c00134bb:	85 c0                	test   eax,eax
c00134bd:	74 2a                	je     c00134e9 <CPU::detectFeatures()+0x1fb>
c00134bf:	50                   	push   eax
c00134c0:	50                   	push   eax
c00134c1:	68 cf 52 02 c0       	push   0xc00252cf
c00134c6:	55                   	push   ebp
c00134c7:	e8 00 d3 fe ff       	call   c00007cc <strcmp>
c00134cc:	83 c4 10             	add    esp,0x10
c00134cf:	85 c0                	test   eax,eax
c00134d1:	74 16                	je     c00134e9 <CPU::detectFeatures()+0x1fb>
c00134d3:	50                   	push   eax
c00134d4:	50                   	push   eax
c00134d5:	68 dc 52 02 c0       	push   0xc00252dc
c00134da:	55                   	push   ebp
c00134db:	e8 ec d2 fe ff       	call   c00007cc <strcmp>
c00134e0:	83 c4 10             	add    esp,0x10
c00134e3:	85 c0                	test   eax,eax
c00134e5:	74 48                	je     c001352f <CPU::detectFeatures()+0x241>
c00134e7:	eb 0f                	jmp    c00134f8 <CPU::detectFeatures()+0x20a>
c00134e9:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00134f3:	e9 c1 01 00 00       	jmp    c00136b9 <CPU::detectFeatures()+0x3cb>
c00134f8:	50                   	push   eax
c00134f9:	50                   	push   eax
c00134fa:	68 e9 52 02 c0       	push   0xc00252e9
c00134ff:	55                   	push   ebp
c0013500:	e8 c7 d2 fe ff       	call   c00007cc <strcmp>
c0013505:	83 c4 10             	add    esp,0x10
c0013508:	85 c0                	test   eax,eax
c001350a:	74 23                	je     c001352f <CPU::detectFeatures()+0x241>
c001350c:	57                   	push   edi
c001350d:	57                   	push   edi
c001350e:	68 f6 52 02 c0       	push   0xc00252f6
c0013513:	55                   	push   ebp
c0013514:	e8 b3 d2 fe ff       	call   c00007cc <strcmp>
c0013519:	83 c4 10             	add    esp,0x10
c001351c:	85 c0                	test   eax,eax
c001351e:	75 1e                	jne    c001353e <CPU::detectFeatures()+0x250>
c0013520:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001352a:	e9 8a 01 00 00       	jmp    c00136b9 <CPU::detectFeatures()+0x3cb>
c001352f:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013539:	e9 7b 01 00 00       	jmp    c00136b9 <CPU::detectFeatures()+0x3cb>
c001353e:	56                   	push   esi
c001353f:	56                   	push   esi
c0013540:	68 03 53 02 c0       	push   0xc0025303
c0013545:	55                   	push   ebp
c0013546:	e8 81 d2 fe ff       	call   c00007cc <strcmp>
c001354b:	83 c4 10             	add    esp,0x10
c001354e:	85 c0                	test   eax,eax
c0013550:	75 0f                	jne    c0013561 <CPU::detectFeatures()+0x273>
c0013552:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001355c:	e9 58 01 00 00       	jmp    c00136b9 <CPU::detectFeatures()+0x3cb>
c0013561:	51                   	push   ecx
c0013562:	51                   	push   ecx
c0013563:	68 c2 52 02 c0       	push   0xc00252c2
c0013568:	55                   	push   ebp
c0013569:	e8 5e d2 fe ff       	call   c00007cc <strcmp>
c001356e:	83 c4 10             	add    esp,0x10
c0013571:	85 c0                	test   eax,eax
c0013573:	75 0f                	jne    c0013584 <CPU::detectFeatures()+0x296>
c0013575:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001357f:	e9 35 01 00 00       	jmp    c00136b9 <CPU::detectFeatures()+0x3cb>
c0013584:	52                   	push   edx
c0013585:	52                   	push   edx
c0013586:	68 10 53 02 c0       	push   0xc0025310
c001358b:	55                   	push   ebp
c001358c:	e8 3b d2 fe ff       	call   c00007cc <strcmp>
c0013591:	83 c4 10             	add    esp,0x10
c0013594:	85 c0                	test   eax,eax
c0013596:	75 0f                	jne    c00135a7 <CPU::detectFeatures()+0x2b9>
c0013598:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00135a2:	e9 12 01 00 00       	jmp    c00136b9 <CPU::detectFeatures()+0x3cb>
c00135a7:	50                   	push   eax
c00135a8:	50                   	push   eax
c00135a9:	68 1d 53 02 c0       	push   0xc002531d
c00135ae:	55                   	push   ebp
c00135af:	e8 18 d2 fe ff       	call   c00007cc <strcmp>
c00135b4:	83 c4 10             	add    esp,0x10
c00135b7:	85 c0                	test   eax,eax
c00135b9:	75 0f                	jne    c00135ca <CPU::detectFeatures()+0x2dc>
c00135bb:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00135c5:	e9 ef 00 00 00       	jmp    c00136b9 <CPU::detectFeatures()+0x3cb>
c00135ca:	50                   	push   eax
c00135cb:	50                   	push   eax
c00135cc:	68 2a 53 02 c0       	push   0xc002532a
c00135d1:	55                   	push   ebp
c00135d2:	e8 f5 d1 fe ff       	call   c00007cc <strcmp>
c00135d7:	83 c4 10             	add    esp,0x10
c00135da:	85 c0                	test   eax,eax
c00135dc:	75 0f                	jne    c00135ed <CPU::detectFeatures()+0x2ff>
c00135de:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00135e8:	e9 cc 00 00 00       	jmp    c00136b9 <CPU::detectFeatures()+0x3cb>
c00135ed:	50                   	push   eax
c00135ee:	50                   	push   eax
c00135ef:	68 37 53 02 c0       	push   0xc0025337
c00135f4:	55                   	push   ebp
c00135f5:	e8 d2 d1 fe ff       	call   c00007cc <strcmp>
c00135fa:	83 c4 10             	add    esp,0x10
c00135fd:	85 c0                	test   eax,eax
c00135ff:	75 0f                	jne    c0013610 <CPU::detectFeatures()+0x322>
c0013601:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001360b:	e9 a9 00 00 00       	jmp    c00136b9 <CPU::detectFeatures()+0x3cb>
c0013610:	50                   	push   eax
c0013611:	50                   	push   eax
c0013612:	68 44 53 02 c0       	push   0xc0025344
c0013617:	55                   	push   ebp
c0013618:	e8 af d1 fe ff       	call   c00007cc <strcmp>
c001361d:	83 c4 10             	add    esp,0x10
c0013620:	85 c0                	test   eax,eax
c0013622:	75 0f                	jne    c0013633 <CPU::detectFeatures()+0x345>
c0013624:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001362e:	e9 86 00 00 00       	jmp    c00136b9 <CPU::detectFeatures()+0x3cb>
c0013633:	50                   	push   eax
c0013634:	50                   	push   eax
c0013635:	68 51 53 02 c0       	push   0xc0025351
c001363a:	55                   	push   ebp
c001363b:	e8 8c d1 fe ff       	call   c00007cc <strcmp>
c0013640:	83 c4 10             	add    esp,0x10
c0013643:	85 c0                	test   eax,eax
c0013645:	75 0c                	jne    c0013653 <CPU::detectFeatures()+0x365>
c0013647:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0013651:	eb 66                	jmp    c00136b9 <CPU::detectFeatures()+0x3cb>
c0013653:	50                   	push   eax
c0013654:	50                   	push   eax
c0013655:	68 5e 53 02 c0       	push   0xc002535e
c001365a:	55                   	push   ebp
c001365b:	e8 6c d1 fe ff       	call   c00007cc <strcmp>
c0013660:	83 c4 10             	add    esp,0x10
c0013663:	85 c0                	test   eax,eax
c0013665:	75 0c                	jne    c0013673 <CPU::detectFeatures()+0x385>
c0013667:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0013671:	eb 46                	jmp    c00136b9 <CPU::detectFeatures()+0x3cb>
c0013673:	57                   	push   edi
c0013674:	57                   	push   edi
c0013675:	68 6b 53 02 c0       	push   0xc002536b
c001367a:	55                   	push   ebp
c001367b:	e8 4c d1 fe ff       	call   c00007cc <strcmp>
c0013680:	83 c4 10             	add    esp,0x10
c0013683:	85 c0                	test   eax,eax
c0013685:	74 e0                	je     c0013667 <CPU::detectFeatures()+0x379>
c0013687:	56                   	push   esi
c0013688:	56                   	push   esi
c0013689:	68 78 53 02 c0       	push   0xc0025378
c001368e:	55                   	push   ebp
c001368f:	e8 38 d1 fe ff       	call   c00007cc <strcmp>
c0013694:	83 c4 10             	add    esp,0x10
c0013697:	85 c0                	test   eax,eax
c0013699:	74 cc                	je     c0013667 <CPU::detectFeatures()+0x379>
c001369b:	51                   	push   ecx
c001369c:	51                   	push   ecx
c001369d:	68 85 53 02 c0       	push   0xc0025385
c00136a2:	55                   	push   ebp
c00136a3:	e8 24 d1 fe ff       	call   c00007cc <strcmp>
c00136a8:	83 c4 10             	add    esp,0x10
c00136ab:	85 c0                	test   eax,eax
c00136ad:	74 b8                	je     c0013667 <CPU::detectFeatures()+0x379>
c00136af:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00136b9:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00136be:	0f 86 be 00 00 00    	jbe    c0013782 <CPU::detectFeatures()+0x494>
c00136c4:	83 ec 0c             	sub    esp,0xc
c00136c7:	68 80 00 00 00       	push   0x80
c00136cc:	e8 31 fb ff ff       	call   c0013202 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00136d1:	83 e0 01             	and    eax,0x1
c00136d4:	c1 e0 06             	shl    eax,0x6
c00136d7:	88 c2                	mov    dl,al
c00136d9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00136df:	83 e0 bf             	and    eax,0xffffffbf
c00136e2:	09 d0                	or     eax,edx
c00136e4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00136ea:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00136f1:	e8 0c fb ff ff       	call   c0013202 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00136f6:	83 e0 01             	and    eax,0x1
c00136f9:	c1 e0 04             	shl    eax,0x4
c00136fc:	88 c2                	mov    dl,al
c00136fe:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013704:	83 e0 ef             	and    eax,0xffffffef
c0013707:	09 d0                	or     eax,edx
c0013709:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001370f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0013716:	e8 e7 fa ff ff       	call   c0013202 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001371b:	c1 e0 07             	shl    eax,0x7
c001371e:	88 c2                	mov    dl,al
c0013720:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013726:	83 e0 7f             	and    eax,0x7f
c0013729:	09 d0                	or     eax,edx
c001372b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013731:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013738:	e8 f3 fa ff ff       	call   c0013230 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001373d:	83 e0 01             	and    eax,0x1
c0013740:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013747:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001374d:	83 e0 f7             	and    eax,0xfffffff7
c0013750:	09 d0                	or     eax,edx
c0013752:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013758:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001375f:	e8 cc fa ff ff       	call   c0013230 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013764:	83 c4 10             	add    esp,0x10
c0013767:	83 e0 01             	and    eax,0x1
c001376a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013771:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013777:	83 e0 fb             	and    eax,0xfffffffb
c001377a:	09 d0                	or     eax,edx
c001377c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013782:	83 ec 0c             	sub    esp,0xc
c0013785:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013789:	50                   	push   eax
c001378a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001378e:	50                   	push   eax
c001378f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013793:	56                   	push   esi
c0013794:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013798:	50                   	push   eax
c0013799:	6a 01                	push   0x1
c001379b:	e8 82 f9 ff ff       	call   c0013122 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00137a0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00137a4:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00137aa:	88 ca                	mov    dl,cl
c00137ac:	83 e0 f0             	and    eax,0xfffffff0
c00137af:	83 e2 0f             	and    edx,0xf
c00137b2:	09 d0                	or     eax,edx
c00137b4:	88 ca                	mov    dl,cl
c00137b6:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00137bc:	c0 ea 04             	shr    dl,0x4
c00137bf:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00137c3:	0f b6 c2             	movzx  eax,dl
c00137c6:	83 c4 20             	add    esp,0x20
c00137c9:	c1 e0 06             	shl    eax,0x6
c00137cc:	89 c7                	mov    edi,eax
c00137ce:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00137d4:	66 25 3f c0          	and    ax,0xc03f
c00137d8:	09 f8                	or     eax,edi
c00137da:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00137e1:	89 c8                	mov    eax,ecx
c00137e3:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c00137ea:	c1 e8 08             	shr    eax,0x8
c00137ed:	83 e5 3f             	and    ebp,0x3f
c00137f0:	83 e0 0f             	and    eax,0xf
c00137f3:	89 c7                	mov    edi,eax
c00137f5:	c1 e7 06             	shl    edi,0x6
c00137f8:	09 ef                	or     edi,ebp
c00137fa:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0013801:	89 fa                	mov    edx,edi
c0013803:	83 e5 c0             	and    ebp,0xffffffc0
c0013806:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001380c:	88 c2                	mov    dl,al
c001380e:	c0 ea 02             	shr    dl,0x2
c0013811:	89 d7                	mov    edi,edx
c0013813:	09 ef                	or     edi,ebp
c0013815:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001381b:	89 fa                	mov    edx,edi
c001381d:	83 e5 cf             	and    ebp,0xffffffcf
c0013820:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0013826:	89 cf                	mov    edi,ecx
c0013828:	c1 ef 0c             	shr    edi,0xc
c001382b:	83 e7 03             	and    edi,0x3
c001382e:	c1 e7 04             	shl    edi,0x4
c0013831:	09 ef                	or     edi,ebp
c0013833:	3c 06                	cmp    al,0x6
c0013835:	89 fa                	mov    edx,edi
c0013837:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001383d:	74 04                	je     c0013843 <CPU::detectFeatures()+0x555>
c001383f:	3c 0f                	cmp    al,0xf
c0013841:	75 5c                	jne    c001389f <CPU::detectFeatures()+0x5b1>
c0013843:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0013847:	89 cf                	mov    edi,ecx
c0013849:	c1 ef 10             	shr    edi,0x10
c001384c:	c1 e7 04             	shl    edi,0x4
c001384f:	09 fa                	or     edx,edi
c0013851:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0013857:	0f b6 d2             	movzx  edx,dl
c001385a:	66 81 e7 3f c0       	and    di,0xc03f
c001385f:	c1 e2 06             	shl    edx,0x6
c0013862:	09 fa                	or     edx,edi
c0013864:	3c 0f                	cmp    al,0xf
c0013866:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001386d:	75 30                	jne    c001389f <CPU::detectFeatures()+0x5b1>
c001386f:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0013875:	c1 e9 14             	shr    ecx,0x14
c0013878:	83 e0 3f             	and    eax,0x3f
c001387b:	83 c1 0f             	add    ecx,0xf
c001387e:	88 ca                	mov    dl,cl
c0013880:	c0 e9 02             	shr    cl,0x2
c0013883:	c1 e2 06             	shl    edx,0x6
c0013886:	09 d0                	or     eax,edx
c0013888:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001388e:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0013894:	83 e0 c0             	and    eax,0xffffffc0
c0013897:	09 c1                	or     ecx,eax
c0013899:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001389f:	83 ec 0c             	sub    esp,0xc
c00138a2:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00138a9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00138ad:	50                   	push   eax
c00138ae:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00138b2:	55                   	push   ebp
c00138b3:	56                   	push   esi
c00138b4:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00138b8:	57                   	push   edi
c00138b9:	68 00 00 00 80       	push   0x80000000
c00138be:	e8 5f f8 ff ff       	call   c0013122 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00138c3:	83 c4 20             	add    esp,0x20
c00138c6:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00138ce:	76 22                	jbe    c00138f2 <CPU::detectFeatures()+0x604>
c00138d0:	83 ec 0c             	sub    esp,0xc
c00138d3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00138d7:	50                   	push   eax
c00138d8:	55                   	push   ebp
c00138d9:	56                   	push   esi
c00138da:	57                   	push   edi
c00138db:	68 01 00 00 80       	push   0x80000001
c00138e0:	e8 3d f8 ff ff       	call   c0013122 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00138e5:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00138ef:	83 c4 20             	add    esp,0x20
c00138f2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00138f8:	83 f8 01             	cmp    eax,0x1
c00138fb:	75 6f                	jne    c001396c <CPU::detectFeatures()+0x67e>
c00138fd:	51                   	push   ecx
c00138fe:	51                   	push   ecx
c00138ff:	68 91 53 02 c0       	push   0xc0025391
c0013904:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013908:	56                   	push   esi
c0013909:	e8 32 ce fe ff       	call   c0000740 <strcpy>
c001390e:	5f                   	pop    edi
c001390f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013915:	5d                   	pop    ebp
c0013916:	66 c1 e8 06          	shr    ax,0x6
c001391a:	0f b6 c0             	movzx  eax,al
c001391d:	50                   	push   eax
c001391e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013924:	c1 e8 0e             	shr    eax,0xe
c0013927:	0f b6 c0             	movzx  eax,al
c001392a:	50                   	push   eax
c001392b:	e8 9c f4 ff ff       	call   c0012dcc <CPU::lookupIntelName(unsigned char, unsigned char)>
c0013930:	5a                   	pop    edx
c0013931:	59                   	pop    ecx
c0013932:	50                   	push   eax
c0013933:	56                   	push   esi
c0013934:	e8 47 cf fe ff       	call   c0000880 <strcat>
c0013939:	5f                   	pop    edi
c001393a:	5d                   	pop    ebp
c001393b:	56                   	push   esi
c001393c:	53                   	push   ebx
c001393d:	e8 32 aa ff ff       	call   c000e374 <Device::setName(char const*)>
c0013942:	58                   	pop    eax
c0013943:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013949:	5a                   	pop    edx
c001394a:	68 98 53 02 c0       	push   0xc0025398
c001394f:	50                   	push   eax
c0013950:	e8 77 ce fe ff       	call   c00007cc <strcmp>
c0013955:	83 c4 10             	add    esp,0x10
c0013958:	85 c0                	test   eax,eax
c001395a:	0f 85 71 03 00 00    	jne    c0013cd1 <CPU::detectFeatures()+0x9e3>
c0013960:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0013967:	e9 65 03 00 00       	jmp    c0013cd1 <CPU::detectFeatures()+0x9e3>
c001396c:	83 f8 02             	cmp    eax,0x2
c001396f:	0f 85 b5 00 00 00    	jne    c0013a2a <CPU::detectFeatures()+0x73c>
c0013975:	57                   	push   edi
c0013976:	57                   	push   edi
c0013977:	68 aa 53 02 c0       	push   0xc00253aa
c001397c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013980:	56                   	push   esi
c0013981:	e8 ba cd fe ff       	call   c0000740 <strcpy>
c0013986:	5d                   	pop    ebp
c0013987:	58                   	pop    eax
c0013988:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001398e:	66 c1 e8 06          	shr    ax,0x6
c0013992:	0f b6 c0             	movzx  eax,al
c0013995:	50                   	push   eax
c0013996:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001399c:	c1 e8 0e             	shr    eax,0xe
c001399f:	0f b6 c0             	movzx  eax,al
c00139a2:	50                   	push   eax
c00139a3:	e8 90 f2 ff ff       	call   c0012c38 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00139a8:	5a                   	pop    edx
c00139a9:	59                   	pop    ecx
c00139aa:	50                   	push   eax
c00139ab:	56                   	push   esi
c00139ac:	e8 cf ce fe ff       	call   c0000880 <strcat>
c00139b1:	5f                   	pop    edi
c00139b2:	5d                   	pop    ebp
c00139b3:	56                   	push   esi
c00139b4:	53                   	push   ebx
c00139b5:	e8 ba a9 ff ff       	call   c000e374 <Device::setName(char const*)>
c00139ba:	58                   	pop    eax
c00139bb:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00139c1:	5a                   	pop    edx
c00139c2:	68 af 53 02 c0       	push   0xc00253af
c00139c7:	50                   	push   eax
c00139c8:	e8 ff cd fe ff       	call   c00007cc <strcmp>
c00139cd:	83 c4 10             	add    esp,0x10
c00139d0:	85 c0                	test   eax,eax
c00139d2:	75 20                	jne    c00139f4 <CPU::detectFeatures()+0x706>
c00139d4:	8b 15 48 7b 02 c0    	mov    edx,DWORD PTR ds:0xc0027b48
c00139da:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00139e0:	a8 01                	test   al,0x1
c00139e2:	74 10                	je     c00139f4 <CPU::detectFeatures()+0x706>
c00139e4:	83 e0 fe             	and    eax,0xfffffffe
c00139e7:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00139ed:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00139f4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00139fa:	c1 e8 0e             	shr    eax,0xe
c00139fd:	3c 05                	cmp    al,0x5
c00139ff:	0f 85 cc 02 00 00    	jne    c0013cd1 <CPU::detectFeatures()+0x9e3>
c0013a05:	56                   	push   esi
c0013a06:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013a0c:	83 e0 0f             	and    eax,0xf
c0013a0f:	50                   	push   eax
c0013a10:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013a16:	66 c1 e8 06          	shr    ax,0x6
c0013a1a:	0f b6 c0             	movzx  eax,al
c0013a1d:	50                   	push   eax
c0013a1e:	6a 05                	push   0x5
c0013a20:	e8 89 f6 ff ff       	call   c00130ae <CPU::AMD_K6_writeback(int, int, int)>
c0013a25:	e9 1f 02 00 00       	jmp    c0013c49 <CPU::detectFeatures()+0x95b>
c0013a2a:	8d 50 fd             	lea    edx,[eax-0x3]
c0013a2d:	83 fa 01             	cmp    edx,0x1
c0013a30:	76 09                	jbe    c0013a3b <CPU::detectFeatures()+0x74d>
c0013a32:	83 f8 06             	cmp    eax,0x6
c0013a35:	0f 85 91 01 00 00    	jne    c0013bcc <CPU::detectFeatures()+0x8de>
c0013a3b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013a41:	c1 ea 0e             	shr    edx,0xe
c0013a44:	80 fa 05             	cmp    dl,0x5
c0013a47:	75 7b                	jne    c0013ac4 <CPU::detectFeatures()+0x7d6>
c0013a49:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013a4f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013a54:	66 81 fa 00 01       	cmp    dx,0x100
c0013a59:	75 0c                	jne    c0013a67 <CPU::detectFeatures()+0x779>
c0013a5b:	51                   	push   ecx
c0013a5c:	51                   	push   ecx
c0013a5d:	68 b6 53 02 c0       	push   0xc00253b6
c0013a62:	e9 dc 01 00 00       	jmp    c0013c43 <CPU::detectFeatures()+0x955>
c0013a67:	66 81 fa 00 02       	cmp    dx,0x200
c0013a6c:	75 0c                	jne    c0013a7a <CPU::detectFeatures()+0x78c>
c0013a6e:	52                   	push   edx
c0013a6f:	52                   	push   edx
c0013a70:	68 c9 53 02 c0       	push   0xc00253c9
c0013a75:	e9 c9 01 00 00       	jmp    c0013c43 <CPU::detectFeatures()+0x955>
c0013a7a:	66 81 fa 40 02       	cmp    dx,0x240
c0013a7f:	75 0c                	jne    c0013a8d <CPU::detectFeatures()+0x79f>
c0013a81:	50                   	push   eax
c0013a82:	50                   	push   eax
c0013a83:	68 db 53 02 c0       	push   0xc00253db
c0013a88:	e9 b6 01 00 00       	jmp    c0013c43 <CPU::detectFeatures()+0x955>
c0013a8d:	83 f8 06             	cmp    eax,0x6
c0013a90:	75 0c                	jne    c0013a9e <CPU::detectFeatures()+0x7b0>
c0013a92:	50                   	push   eax
c0013a93:	50                   	push   eax
c0013a94:	68 ed 53 02 c0       	push   0xc00253ed
c0013a99:	e9 a5 01 00 00       	jmp    c0013c43 <CPU::detectFeatures()+0x955>
c0013a9e:	83 f8 04             	cmp    eax,0x4
c0013aa1:	75 0c                	jne    c0013aaf <CPU::detectFeatures()+0x7c1>
c0013aa3:	50                   	push   eax
c0013aa4:	50                   	push   eax
c0013aa5:	68 f9 53 02 c0       	push   0xc00253f9
c0013aaa:	e9 94 01 00 00       	jmp    c0013c43 <CPU::detectFeatures()+0x955>
c0013aaf:	83 f8 03             	cmp    eax,0x3
c0013ab2:	0f 85 19 02 00 00    	jne    c0013cd1 <CPU::detectFeatures()+0x9e3>
c0013ab8:	50                   	push   eax
c0013ab9:	50                   	push   eax
c0013aba:	68 01 54 02 c0       	push   0xc0025401
c0013abf:	e9 7f 01 00 00       	jmp    c0013c43 <CPU::detectFeatures()+0x955>
c0013ac4:	80 fa 06             	cmp    dl,0x6
c0013ac7:	0f 85 db 00 00 00    	jne    c0013ba8 <CPU::detectFeatures()+0x8ba>
c0013acd:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013ad3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013ad8:	66 81 fa 80 01       	cmp    dx,0x180
c0013add:	75 0c                	jne    c0013aeb <CPU::detectFeatures()+0x7fd>
c0013adf:	50                   	push   eax
c0013ae0:	50                   	push   eax
c0013ae1:	68 0c 54 02 c0       	push   0xc002540c
c0013ae6:	e9 58 01 00 00       	jmp    c0013c43 <CPU::detectFeatures()+0x955>
c0013aeb:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0013af1:	66 f7 c1 80 ff       	test   cx,0xff80
c0013af6:	75 0c                	jne    c0013b04 <CPU::detectFeatures()+0x816>
c0013af8:	50                   	push   eax
c0013af9:	50                   	push   eax
c0013afa:	68 1c 54 02 c0       	push   0xc002541c
c0013aff:	e9 3f 01 00 00       	jmp    c0013c43 <CPU::detectFeatures()+0x955>
c0013b04:	66 81 fa 40 02       	cmp    dx,0x240
c0013b09:	75 0c                	jne    c0013b17 <CPU::detectFeatures()+0x829>
c0013b0b:	55                   	push   ebp
c0013b0c:	55                   	push   ebp
c0013b0d:	68 23 54 02 c0       	push   0xc0025423
c0013b12:	e9 2c 01 00 00       	jmp    c0013c43 <CPU::detectFeatures()+0x955>
c0013b17:	66 81 fa 80 02       	cmp    dx,0x280
c0013b1c:	75 0c                	jne    c0013b2a <CPU::detectFeatures()+0x83c>
c0013b1e:	57                   	push   edi
c0013b1f:	57                   	push   edi
c0013b20:	68 2c 54 02 c0       	push   0xc002542c
c0013b25:	e9 19 01 00 00       	jmp    c0013c43 <CPU::detectFeatures()+0x955>
c0013b2a:	66 81 fa 40 03       	cmp    dx,0x340
c0013b2f:	74 ed                	je     c0013b1e <CPU::detectFeatures()+0x830>
c0013b31:	66 81 fa c0 03       	cmp    dx,0x3c0
c0013b36:	75 0c                	jne    c0013b44 <CPU::detectFeatures()+0x856>
c0013b38:	56                   	push   esi
c0013b39:	56                   	push   esi
c0013b3a:	68 33 54 02 c0       	push   0xc0025433
c0013b3f:	e9 ff 00 00 00       	jmp    c0013c43 <CPU::detectFeatures()+0x955>
c0013b44:	83 f8 06             	cmp    eax,0x6
c0013b47:	0f 84 45 ff ff ff    	je     c0013a92 <CPU::detectFeatures()+0x7a4>
c0013b4d:	83 f8 04             	cmp    eax,0x4
c0013b50:	0f 84 4d ff ff ff    	je     c0013aa3 <CPU::detectFeatures()+0x7b5>
c0013b56:	83 f8 03             	cmp    eax,0x3
c0013b59:	0f 85 72 01 00 00    	jne    c0013cd1 <CPU::detectFeatures()+0x9e3>
c0013b5f:	51                   	push   ecx
c0013b60:	51                   	push   ecx
c0013b61:	68 3c 54 02 c0       	push   0xc002543c
c0013b66:	53                   	push   ebx
c0013b67:	e8 08 a8 ff ff       	call   c000e374 <Device::setName(char const*)>
c0013b6c:	b1 c1                	mov    cl,0xc1
c0013b6e:	88 c8                	mov    al,cl
c0013b70:	e6 22                	out    0x22,al
c0013b72:	e4 23                	in     al,0x23
c0013b74:	88 c2                	mov    dl,al
c0013b76:	88 c8                	mov    al,cl
c0013b78:	e6 22                	out    0x22,al
c0013b7a:	88 d0                	mov    al,dl
c0013b7c:	83 c8 10             	or     eax,0x10
c0013b7f:	e6 23                	out    0x23,al
c0013b81:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0013b88:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0013b8b:	89 d0                	mov    eax,edx
c0013b8d:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0013b93:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0013b97:	40                   	inc    eax
c0013b98:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0013b9e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0013ba3:	e9 a1 00 00 00       	jmp    c0013c49 <CPU::detectFeatures()+0x95b>
c0013ba8:	83 f8 06             	cmp    eax,0x6
c0013bab:	0f 84 e1 fe ff ff    	je     c0013a92 <CPU::detectFeatures()+0x7a4>
c0013bb1:	83 f8 04             	cmp    eax,0x4
c0013bb4:	0f 84 e9 fe ff ff    	je     c0013aa3 <CPU::detectFeatures()+0x7b5>
c0013bba:	83 f8 03             	cmp    eax,0x3
c0013bbd:	0f 85 0e 01 00 00    	jne    c0013cd1 <CPU::detectFeatures()+0x9e3>
c0013bc3:	52                   	push   edx
c0013bc4:	52                   	push   edx
c0013bc5:	68 47 54 02 c0       	push   0xc0025447
c0013bca:	eb 77                	jmp    c0013c43 <CPU::detectFeatures()+0x955>
c0013bcc:	83 f8 07             	cmp    eax,0x7
c0013bcf:	75 09                	jne    c0013bda <CPU::detectFeatures()+0x8ec>
c0013bd1:	50                   	push   eax
c0013bd2:	50                   	push   eax
c0013bd3:	68 51 54 02 c0       	push   0xc0025451
c0013bd8:	eb 69                	jmp    c0013c43 <CPU::detectFeatures()+0x955>
c0013bda:	83 f8 0a             	cmp    eax,0xa
c0013bdd:	75 09                	jne    c0013be8 <CPU::detectFeatures()+0x8fa>
c0013bdf:	50                   	push   eax
c0013be0:	50                   	push   eax
c0013be1:	68 5c 54 02 c0       	push   0xc002545c
c0013be6:	eb 5b                	jmp    c0013c43 <CPU::detectFeatures()+0x955>
c0013be8:	83 f8 0b             	cmp    eax,0xb
c0013beb:	75 09                	jne    c0013bf6 <CPU::detectFeatures()+0x908>
c0013bed:	50                   	push   eax
c0013bee:	50                   	push   eax
c0013bef:	68 64 54 02 c0       	push   0xc0025464
c0013bf4:	eb 4d                	jmp    c0013c43 <CPU::detectFeatures()+0x955>
c0013bf6:	83 f8 08             	cmp    eax,0x8
c0013bf9:	75 09                	jne    c0013c04 <CPU::detectFeatures()+0x916>
c0013bfb:	50                   	push   eax
c0013bfc:	50                   	push   eax
c0013bfd:	68 6d 54 02 c0       	push   0xc002546d
c0013c02:	eb 3f                	jmp    c0013c43 <CPU::detectFeatures()+0x955>
c0013c04:	83 f8 09             	cmp    eax,0x9
c0013c07:	75 09                	jne    c0013c12 <CPU::detectFeatures()+0x924>
c0013c09:	50                   	push   eax
c0013c0a:	50                   	push   eax
c0013c0b:	68 75 54 02 c0       	push   0xc0025475
c0013c10:	eb 31                	jmp    c0013c43 <CPU::detectFeatures()+0x955>
c0013c12:	83 f8 05             	cmp    eax,0x5
c0013c15:	75 09                	jne    c0013c20 <CPU::detectFeatures()+0x932>
c0013c17:	50                   	push   eax
c0013c18:	50                   	push   eax
c0013c19:	68 7d 54 02 c0       	push   0xc002547d
c0013c1e:	eb 23                	jmp    c0013c43 <CPU::detectFeatures()+0x955>
c0013c20:	83 f8 0c             	cmp    eax,0xc
c0013c23:	75 09                	jne    c0013c2e <CPU::detectFeatures()+0x940>
c0013c25:	55                   	push   ebp
c0013c26:	55                   	push   ebp
c0013c27:	68 8b 54 02 c0       	push   0xc002548b
c0013c2c:	eb 15                	jmp    c0013c43 <CPU::detectFeatures()+0x955>
c0013c2e:	83 f8 0d             	cmp    eax,0xd
c0013c31:	75 09                	jne    c0013c3c <CPU::detectFeatures()+0x94e>
c0013c33:	57                   	push   edi
c0013c34:	57                   	push   edi
c0013c35:	68 96 54 02 c0       	push   0xc0025496
c0013c3a:	eb 07                	jmp    c0013c43 <CPU::detectFeatures()+0x955>
c0013c3c:	56                   	push   esi
c0013c3d:	56                   	push   esi
c0013c3e:	68 aa 54 02 c0       	push   0xc00254aa
c0013c43:	53                   	push   ebx
c0013c44:	e8 2b a7 ff ff       	call   c000e374 <Device::setName(char const*)>
c0013c49:	83 c4 10             	add    esp,0x10
c0013c4c:	e9 80 00 00 00       	jmp    c0013cd1 <CPU::detectFeatures()+0x9e3>
c0013c51:	51                   	push   ecx
c0013c52:	51                   	push   ecx
c0013c53:	68 f6 52 02 c0       	push   0xc00252f6
c0013c58:	55                   	push   ebp
c0013c59:	e8 e2 ca fe ff       	call   c0000740 <strcpy>
c0013c5e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013c68:	e8 76 c5 fe ff       	call   c00001e3 <is486>
c0013c6d:	83 c4 10             	add    esp,0x10
c0013c70:	85 c0                	test   eax,eax
c0013c72:	74 2b                	je     c0013c9f <CPU::detectFeatures()+0x9b1>
c0013c74:	52                   	push   edx
c0013c75:	52                   	push   edx
c0013c76:	68 b6 54 02 c0       	push   0xc00254b6
c0013c7b:	53                   	push   ebx
c0013c7c:	e8 f3 a6 ff ff       	call   c000e374 <Device::setName(char const*)>
c0013c81:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013c88:	0f 20 c0             	mov    eax,cr0
c0013c8b:	83 e0 14             	and    eax,0x14
c0013c8e:	83 c4 10             	add    esp,0x10
c0013c91:	83 f8 04             	cmp    eax,0x4
c0013c94:	75 1f                	jne    c0013cb5 <CPU::detectFeatures()+0x9c7>
c0013c96:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0013c9d:	eb 32                	jmp    c0013cd1 <CPU::detectFeatures()+0x9e3>
c0013c9f:	50                   	push   eax
c0013ca0:	50                   	push   eax
c0013ca1:	68 c1 54 02 c0       	push   0xc00254c1
c0013ca6:	53                   	push   ebx
c0013ca7:	e8 c8 a6 ff ff       	call   c000e374 <Device::setName(char const*)>
c0013cac:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0013cb3:	eb d3                	jmp    c0013c88 <CPU::detectFeatures()+0x99a>
c0013cb5:	e8 04 c5 fe ff       	call   c00001be <hasLegacyFPU>
c0013cba:	83 e0 01             	and    eax,0x1
c0013cbd:	8d 14 00             	lea    edx,[eax+eax*1]
c0013cc0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013cc6:	83 e0 fd             	and    eax,0xfffffffd
c0013cc9:	09 d0                	or     eax,edx
c0013ccb:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013cd1:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0013cd8:	83 c4 4c             	add    esp,0x4c
c0013cdb:	5b                   	pop    ebx
c0013cdc:	5e                   	pop    esi
c0013cdd:	5f                   	pop    edi
c0013cde:	5d                   	pop    ebp
c0013cdf:	c3                   	ret    

c0013ce0 <CPU::setupSMEP()>:
c0013ce0:	0f 20 e0             	mov    eax,cr4
c0013ce3:	0d 00 00 10 00       	or     eax,0x100000
c0013ce8:	0f 22 e0             	mov    cr4,eax
c0013ceb:	c3                   	ret    

c0013cec <CPU::setupUMIP()>:
c0013cec:	0f 20 e0             	mov    eax,cr4
c0013cef:	80 cc 08             	or     ah,0x8
c0013cf2:	0f 22 e0             	mov    cr4,eax
c0013cf5:	c3                   	ret    

c0013cf6 <CPU::setupTSC()>:
c0013cf6:	0f 20 e0             	mov    eax,cr4
c0013cf9:	83 c8 04             	or     eax,0x4
c0013cfc:	0f 22 e0             	mov    cr4,eax
c0013cff:	c3                   	ret    

c0013d00 <CPU::setupLargePages()>:
c0013d00:	0f 20 e0             	mov    eax,cr4
c0013d03:	83 c8 10             	or     eax,0x10
c0013d06:	0f 22 e0             	mov    cr4,eax
c0013d09:	c3                   	ret    

c0013d0a <CPU::setupPAT()>:
c0013d0a:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c0013d0f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013d16:	74 2c                	je     c0013d44 <CPU::setupPAT()+0x3a>
c0013d18:	53                   	push   ebx
c0013d19:	83 ec 10             	sub    esp,0x10
c0013d1c:	68 77 02 00 00       	push   0x277
c0013d21:	50                   	push   eax
c0013d22:	e8 fd 51 ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c0013d27:	83 e2 f8             	and    edx,0xfffffff8
c0013d2a:	83 ca 01             	or     edx,0x1
c0013d2d:	52                   	push   edx
c0013d2e:	50                   	push   eax
c0013d2f:	68 77 02 00 00       	push   0x277
c0013d34:	ff 35 48 7b 02 c0    	push   DWORD PTR ds:0xc0027b48
c0013d3a:	e8 11 52 ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c0013d3f:	83 c4 28             	add    esp,0x28
c0013d42:	5b                   	pop    ebx
c0013d43:	c3                   	ret    
c0013d44:	c3                   	ret    
c0013d45:	90                   	nop

c0013d46 <CPU::setupMTRR()>:
c0013d46:	c3                   	ret    
c0013d47:	90                   	nop

c0013d48 <CPU::setupGlobalPages()>:
c0013d48:	0f 20 e0             	mov    eax,cr4
c0013d4b:	0c 80                	or     al,0x80
c0013d4d:	0f 22 e0             	mov    cr4,eax
c0013d50:	c3                   	ret    
c0013d51:	90                   	nop

c0013d52 <CPU::allowUsermodeDataAccess()>:
c0013d52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d56:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013d5d:	74 03                	je     c0013d62 <CPU::allowUsermodeDataAccess()+0x10>
c0013d5f:	0f 01 cb             	stac   
c0013d62:	c3                   	ret    
c0013d63:	90                   	nop

c0013d64 <CPU::prohibitUsermodeDataAccess()>:
c0013d64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d68:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013d6f:	74 03                	je     c0013d74 <CPU::prohibitUsermodeDataAccess()+0x10>
c0013d71:	0f 01 ca             	clac   
c0013d74:	c3                   	ret    
c0013d75:	90                   	nop

c0013d76 <CPU::setupSMAP()>:
c0013d76:	0f 20 e0             	mov    eax,cr4
c0013d79:	0d 00 00 20 00       	or     eax,0x200000
c0013d7e:	0f 22 e0             	mov    cr4,eax
c0013d81:	eb e1                	jmp    c0013d64 <CPU::prohibitUsermodeDataAccess()>
c0013d83:	90                   	nop

c0013d84 <CPU::setupFeatures()>:
c0013d84:	53                   	push   ebx
c0013d85:	83 ec 08             	sub    esp,0x8
c0013d88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d8c:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0013d93:	74 18                	je     c0013dad <CPU::setupFeatures()+0x29>
c0013d95:	83 ec 0c             	sub    esp,0xc
c0013d98:	68 cc 54 02 c0       	push   0xc00254cc
c0013d9d:	e8 55 8f ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0013da2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013da5:	e8 42 ff ff ff       	call   c0013cec <CPU::setupUMIP()>
c0013daa:	83 c4 10             	add    esp,0x10
c0013dad:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0013db4:	74 18                	je     c0013dce <CPU::setupFeatures()+0x4a>
c0013db6:	83 ec 0c             	sub    esp,0xc
c0013db9:	68 d6 54 02 c0       	push   0xc00254d6
c0013dbe:	e8 34 8f ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0013dc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013dc6:	e8 2b ff ff ff       	call   c0013cf6 <CPU::setupTSC()>
c0013dcb:	83 c4 10             	add    esp,0x10
c0013dce:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0013dd5:	74 18                	je     c0013def <CPU::setupFeatures()+0x6b>
c0013dd7:	83 ec 0c             	sub    esp,0xc
c0013dda:	68 df 54 02 c0       	push   0xc00254df
c0013ddf:	e8 13 8f ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0013de4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013de7:	e8 14 ff ff ff       	call   c0013d00 <CPU::setupLargePages()>
c0013dec:	83 c4 10             	add    esp,0x10
c0013def:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0013df6:	74 18                	je     c0013e10 <CPU::setupFeatures()+0x8c>
c0013df8:	83 ec 0c             	sub    esp,0xc
c0013dfb:	68 e8 54 02 c0       	push   0xc00254e8
c0013e00:	e8 f2 8e ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0013e05:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e08:	e8 3b ff ff ff       	call   c0013d48 <CPU::setupGlobalPages()>
c0013e0d:	83 c4 10             	add    esp,0x10
c0013e10:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0013e17:	74 18                	je     c0013e31 <CPU::setupFeatures()+0xad>
c0013e19:	83 ec 0c             	sub    esp,0xc
c0013e1c:	68 fa 54 02 c0       	push   0xc00254fa
c0013e21:	e8 d1 8e ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0013e26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e29:	e8 dc fe ff ff       	call   c0013d0a <CPU::setupPAT()>
c0013e2e:	83 c4 10             	add    esp,0x10
c0013e31:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0013e38:	74 11                	je     c0013e4b <CPU::setupFeatures()+0xc7>
c0013e3a:	c7 44 24 10 03 55 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025503
c0013e42:	83 c4 08             	add    esp,0x8
c0013e45:	5b                   	pop    ebx
c0013e46:	e9 ac 8e ff ff       	jmp    c000ccf7 <Dbg::kprintf(char const*, ...)>
c0013e4b:	83 c4 08             	add    esp,0x8
c0013e4e:	5b                   	pop    ebx
c0013e4f:	c3                   	ret    

c0013e50 <CPU::open(int, int, void*)>:
c0013e50:	57                   	push   edi
c0013e51:	56                   	push   esi
c0013e52:	53                   	push   ebx
c0013e53:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e57:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e5b:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0013e61:	83 ec 0c             	sub    esp,0xc
c0013e64:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0013e6a:	68 0d 55 02 c0       	push   0xc002550d
c0013e6f:	e8 ed 5b ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0013e74:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0013e7a:	89 04 24             	mov    DWORD PTR [esp],eax
c0013e7d:	e8 7e 54 ff ff       	call   c0009300 <GDT::setup()>
c0013e82:	c7 04 24 1f 55 02 c0 	mov    DWORD PTR [esp],0xc002551f
c0013e89:	e8 d3 5b ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0013e8e:	83 c4 0c             	add    esp,0xc
c0013e91:	6a 00                	push   0x0
c0013e93:	68 ef be ad de       	push   0xdeadbeef
c0013e98:	57                   	push   edi
c0013e99:	e8 ba 74 ff ff       	call   c000b358 <TSS::setup(unsigned long, unsigned long)>
c0013e9e:	c7 04 24 31 55 02 c0 	mov    DWORD PTR [esp],0xc0025531
c0013ea5:	e8 b7 5b ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0013eaa:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013ead:	e8 86 74 ff ff       	call   c000b338 <TSS::flush()>
c0013eb2:	c7 04 24 45 55 02 c0 	mov    DWORD PTR [esp],0xc0025545
c0013eb9:	e8 a3 5b ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0013ebe:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0013ec4:	89 04 24             	mov    DWORD PTR [esp],eax
c0013ec7:	e8 9e 56 ff ff       	call   c000956a <IDT::setup()>
c0013ecc:	c7 04 24 57 55 02 c0 	mov    DWORD PTR [esp],0xc0025557
c0013ed3:	e8 89 5b ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0013ed8:	b8 00 04 00 00       	mov    eax,0x400
c0013edd:	0f 23 f8             	mov    db7,eax
c0013ee0:	c7 04 24 75 55 02 c0 	mov    DWORD PTR [esp],0xc0025575
c0013ee7:	e8 75 5b ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0013eec:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0013ef6:	e8 c3 61 ff ff       	call   c000a0be <Phys::allocatePage()>
c0013efb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0013f01:	89 30                	mov    DWORD PTR [eax],esi
c0013f03:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0013f09:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0013f0c:	c7 04 24 97 55 02 c0 	mov    DWORD PTR [esp],0xc0025597
c0013f13:	e8 49 5b ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0013f18:	58                   	pop    eax
c0013f19:	5a                   	pop    edx
c0013f1a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0013f20:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013f24:	e8 29 84 ff ff       	call   c000c352 <VAS::setCPUSpecific(unsigned long)>
c0013f29:	c7 04 24 bf 55 02 c0 	mov    DWORD PTR [esp],0xc00255bf
c0013f30:	e8 2c 5b ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0013f35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f38:	e8 b1 f3 ff ff       	call   c00132ee <CPU::detectFeatures()>
c0013f3d:	c7 04 24 e2 55 02 c0 	mov    DWORD PTR [esp],0xc00255e2
c0013f44:	e8 18 5b ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0013f49:	e8 34 b6 ff ff       	call   c000f582 <setupInterruptController()>
c0013f4e:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0013f54:	c7 04 24 06 56 02 c0 	mov    DWORD PTR [esp],0xc0025606
c0013f5b:	e8 01 5b ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0013f60:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c0013f65:	83 e0 10             	and    eax,0x10
c0013f68:	83 f8 01             	cmp    eax,0x1
c0013f6b:	19 c0                	sbb    eax,eax
c0013f6d:	83 e0 46             	and    eax,0x46
c0013f70:	83 c0 1e             	add    eax,0x1e
c0013f73:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f76:	e8 f1 cb ff ff       	call   c0010b6c <setupTimer(int)>
c0013f7b:	83 c4 10             	add    esp,0x10
c0013f7e:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0013f84:	f6 05 60 7b 02 c0 20 	test   BYTE PTR ds:0xc0027b60,0x20
c0013f8b:	74 18                	je     c0013fa5 <CPU::open(int, int, void*)+0x155>
c0013f8d:	83 ec 0c             	sub    esp,0xc
c0013f90:	68 21 56 02 c0       	push   0xc0025621
c0013f95:	e8 c7 5a ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0013f9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f9d:	e8 e2 fd ff ff       	call   c0013d84 <CPU::setupFeatures()>
c0013fa2:	83 c4 10             	add    esp,0x10
c0013fa5:	83 ec 0c             	sub    esp,0xc
c0013fa8:	68 3c 56 02 c0       	push   0xc002563c
c0013fad:	e8 af 5a ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0013fb2:	83 c4 10             	add    esp,0x10
c0013fb5:	31 c0                	xor    eax,eax
c0013fb7:	5b                   	pop    ebx
c0013fb8:	5e                   	pop    esi
c0013fb9:	5f                   	pop    edi
c0013fba:	c3                   	ret    
c0013fbb:	90                   	nop

c0013fbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0013fbc:	57                   	push   edi
c0013fbd:	56                   	push   esi
c0013fbe:	53                   	push   ebx
c0013fbf:	51                   	push   ecx
c0013fc0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013fc4:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0013fc7:	0f 02 c0             	lar    eax,ax
c0013fca:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0013fcd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013fd1:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0013fd4:	88 ca                	mov    dl,cl
c0013fd6:	c0 ea 06             	shr    dl,0x6
c0013fd9:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0013fdd:	89 ca                	mov    edx,ecx
c0013fdf:	66 c1 ea 03          	shr    dx,0x3
c0013fe3:	83 e2 07             	and    edx,0x7
c0013fe6:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0013feb:	88 17                	mov    BYTE PTR [edi],dl
c0013fed:	0f 84 a6 01 00 00    	je     c0014199 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0013ff3:	83 e1 07             	and    ecx,0x7
c0013ff6:	80 f9 04             	cmp    cl,0x4
c0013ff9:	0f 84 98 00 00 00    	je     c0014097 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0013fff:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014004:	0f 95 c0             	setne  al
c0014007:	80 f9 05             	cmp    cl,0x5
c001400a:	0f 95 c2             	setne  dl
c001400d:	08 c2                	or     dl,al
c001400f:	74 79                	je     c001408a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0014011:	84 c9                	test   cl,cl
c0014013:	75 05                	jne    c001401a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0014015:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0014018:	eb 3c                	jmp    c0014056 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001401a:	80 f9 01             	cmp    cl,0x1
c001401d:	75 05                	jne    c0014024 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001401f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014022:	eb 32                	jmp    c0014056 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014024:	80 f9 02             	cmp    cl,0x2
c0014027:	75 05                	jne    c001402e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0014029:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001402c:	eb 28                	jmp    c0014056 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001402e:	31 c0                	xor    eax,eax
c0014030:	80 f9 03             	cmp    cl,0x3
c0014033:	75 05                	jne    c001403a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0014035:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0014038:	eb 1c                	jmp    c0014056 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001403a:	80 f9 05             	cmp    cl,0x5
c001403d:	75 05                	jne    c0014044 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001403f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0014042:	eb 12                	jmp    c0014056 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014044:	80 f9 06             	cmp    cl,0x6
c0014047:	75 05                	jne    c001404e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0014049:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001404c:	eb 08                	jmp    c0014056 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001404e:	80 f9 07             	cmp    cl,0x7
c0014051:	75 03                	jne    c0014056 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014053:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014056:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001405b:	75 10                	jne    c001406d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001405d:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0014061:	b9 03 00 00 00       	mov    ecx,0x3
c0014066:	01 d0                	add    eax,edx
c0014068:	e9 37 01 00 00       	jmp    c00141a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001406d:	b9 02 00 00 00       	mov    ecx,0x2
c0014072:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0014077:	0f 85 27 01 00 00    	jne    c00141a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001407d:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0014080:	b9 06 00 00 00       	mov    ecx,0x6
c0014085:	e9 1a 01 00 00       	jmp    c00141a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001408a:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001408d:	b9 06 00 00 00       	mov    ecx,0x6
c0014092:	e9 0f 01 00 00       	jmp    c00141a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014097:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001409a:	88 ca                	mov    dl,cl
c001409c:	c0 ea 06             	shr    dl,0x6
c001409f:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00140a3:	89 ca                	mov    edx,ecx
c00140a5:	66 c1 ea 03          	shr    dx,0x3
c00140a9:	83 e2 07             	and    edx,0x7
c00140ac:	80 e1 07             	and    cl,0x7
c00140af:	75 05                	jne    c00140b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00140b1:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00140b4:	eb 4c                	jmp    c0014102 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00140b6:	80 f9 01             	cmp    cl,0x1
c00140b9:	75 05                	jne    c00140c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00140bb:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00140be:	eb 42                	jmp    c0014102 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00140c0:	80 f9 02             	cmp    cl,0x2
c00140c3:	75 05                	jne    c00140ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00140c5:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00140c8:	eb 38                	jmp    c0014102 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00140ca:	80 f9 03             	cmp    cl,0x3
c00140cd:	75 05                	jne    c00140d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00140cf:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00140d2:	eb 2e                	jmp    c0014102 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00140d4:	80 f9 04             	cmp    cl,0x4
c00140d7:	75 12                	jne    c00140eb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00140d9:	f6 c4 60             	test   ah,0x60
c00140dc:	75 08                	jne    c00140e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00140de:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00140e1:	8d 78 14             	lea    edi,[eax+0x14]
c00140e4:	eb 1c                	jmp    c0014102 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00140e6:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00140e9:	eb 17                	jmp    c0014102 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00140eb:	80 f9 05             	cmp    cl,0x5
c00140ee:	75 05                	jne    c00140f5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00140f0:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00140f3:	eb 0d                	jmp    c0014102 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00140f5:	80 f9 06             	cmp    cl,0x6
c00140f8:	75 05                	jne    c00140ff <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00140fa:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00140fd:	eb 03                	jmp    c0014102 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00140ff:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0014102:	84 d2                	test   dl,dl
c0014104:	75 05                	jne    c001410b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0014106:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0014109:	eb 3c                	jmp    c0014147 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001410b:	80 fa 01             	cmp    dl,0x1
c001410e:	75 05                	jne    c0014115 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0014110:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014113:	eb 32                	jmp    c0014147 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014115:	80 fa 02             	cmp    dl,0x2
c0014118:	75 05                	jne    c001411f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001411a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001411d:	eb 28                	jmp    c0014147 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001411f:	80 fa 03             	cmp    dl,0x3
c0014122:	75 05                	jne    c0014129 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0014124:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0014127:	eb 1e                	jmp    c0014147 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014129:	31 c0                	xor    eax,eax
c001412b:	80 fa 04             	cmp    dl,0x4
c001412e:	74 17                	je     c0014147 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014130:	80 fa 05             	cmp    dl,0x5
c0014133:	75 05                	jne    c001413a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0014135:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0014138:	eb 0d                	jmp    c0014147 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001413a:	80 fa 06             	cmp    dl,0x6
c001413d:	75 05                	jne    c0014144 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001413f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014142:	eb 03                	jmp    c0014147 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014144:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014147:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001414c:	0f 94 c2             	sete   dl
c001414f:	80 f9 05             	cmp    cl,0x5
c0014152:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0014156:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001415b:	d3 e0                	shl    eax,cl
c001415d:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0014161:	74 0a                	je     c001416d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0014163:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0014166:	b9 07 00 00 00       	mov    ecx,0x7
c001416b:	eb 37                	jmp    c00141a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001416d:	01 f8                	add    eax,edi
c001416f:	b9 03 00 00 00       	mov    ecx,0x3
c0014174:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014179:	74 2b                	je     c00141a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001417b:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0014180:	75 0d                	jne    c001418f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0014182:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0014186:	01 c8                	add    eax,ecx
c0014188:	b9 04 00 00 00       	mov    ecx,0x4
c001418d:	eb 17                	jmp    c00141a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001418f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0014192:	b9 07 00 00 00       	mov    ecx,0x7
c0014197:	eb 0d                	jmp    c00141a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014199:	b9 02 00 00 00       	mov    ecx,0x2
c001419e:	b2 01                	mov    dl,0x1
c00141a0:	31 c0                	xor    eax,eax
c00141a2:	eb 02                	jmp    c00141a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00141a4:	31 d2                	xor    edx,edx
c00141a6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00141aa:	89 0b                	mov    DWORD PTR [ebx],ecx
c00141ac:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00141b0:	88 11                	mov    BYTE PTR [ecx],dl
c00141b2:	5a                   	pop    edx
c00141b3:	5b                   	pop    ebx
c00141b4:	5e                   	pop    esi
c00141b5:	5f                   	pop    edi
c00141b6:	c3                   	ret    

c00141b7 <Krnl::smpEntry()>:
c00141b7:	eb fe                	jmp    c00141b7 <Krnl::smpEntry()>

c00141b9 <Krnl::startCPU(int)>:
c00141b9:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c00141be:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00141c5:	0f 84 36 01 00 00    	je     c0014301 <Krnl::startCPU(int)+0x148>
c00141cb:	53                   	push   ebx
c00141cc:	83 ec 10             	sub    esp,0x10
c00141cf:	fa                   	cli    
c00141d0:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c00141d6:	6a 1b                	push   0x1b
c00141d8:	ff 35 48 7b 02 c0    	push   DWORD PTR ds:0xc0027b48
c00141de:	e8 41 4d ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c00141e3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00141e8:	89 c3                	mov    ebx,eax
c00141ea:	58                   	pop    eax
c00141eb:	5a                   	pop    edx
c00141ec:	53                   	push   ebx
c00141ed:	68 84 56 02 c0       	push   0xc0025684
c00141f2:	e8 00 8b ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c00141f7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014201:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014205:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001420f:	c1 e0 18             	shl    eax,0x18
c0014212:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0014218:	83 c4 10             	add    esp,0x10
c001421b:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0014221:	09 c2                	or     edx,eax
c0014223:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0014229:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001422f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014235:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001423b:	80 cd c5             	or     ch,0xc5
c001423e:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014244:	f3 90                	pause  
c0014246:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014248:	0f ba e1 0c          	bt     ecx,0xc
c001424c:	72 f6                	jb     c0014244 <Krnl::startCPU(int)+0x8b>
c001424e:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014254:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001425a:	09 c1                	or     ecx,eax
c001425c:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0014262:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014268:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001426e:	80 cd 85             	or     ch,0x85
c0014271:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014277:	f3 90                	pause  
c0014279:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001427b:	0f ba e1 0c          	bt     ecx,0xc
c001427f:	72 f6                	jb     c0014277 <Krnl::startCPU(int)+0xbe>
c0014281:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001428b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014291:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014297:	09 c1                	or     ecx,eax
c0014299:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001429f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00142a5:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c00142ab:	81 c9 02 06 00 00    	or     ecx,0x602
c00142b1:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00142b7:	f3 90                	pause  
c00142b9:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00142bb:	0f ba e1 0c          	bt     ecx,0xc
c00142bf:	72 f6                	jb     c00142b7 <Krnl::startCPU(int)+0xfe>
c00142c1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00142cb:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00142d1:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00142d7:	09 c8                	or     eax,ecx
c00142d9:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c00142df:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c00142e5:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c00142ea:	0d 02 06 00 00       	or     eax,0x602
c00142ef:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c00142f5:	f3 90                	pause  
c00142f7:	8b 02                	mov    eax,DWORD PTR [edx]
c00142f9:	0f ba e0 0c          	bt     eax,0xc
c00142fd:	72 f6                	jb     c00142f5 <Krnl::startCPU(int)+0x13c>
c00142ff:	eb fe                	jmp    c00142ff <Krnl::startCPU(int)+0x146>
c0014301:	c3                   	ret    

c0014302 <Krnl::startCPUs()>:
c0014302:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c0014307:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001430d:	88 c2                	mov    dl,al
c001430f:	83 e2 0a             	and    edx,0xa
c0014312:	80 fa 0a             	cmp    dl,0xa
c0014315:	75 09                	jne    c0014320 <Krnl::startCPUs()+0x1e>
c0014317:	a8 01                	test   al,0x1
c0014319:	74 05                	je     c0014320 <Krnl::startCPUs()+0x1e>
c001431b:	e9 7b be fe ff       	jmp    c000019b <prepareTramp>
c0014320:	c3                   	ret    
c0014321:	90                   	nop

c0014322 <EnvVarContainer::getEnv(char const*)>:
c0014322:	57                   	push   edi
c0014323:	56                   	push   esi
c0014324:	53                   	push   ebx
c0014325:	31 db                	xor    ebx,ebx
c0014327:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001432b:	39 1e                	cmp    DWORD PTR [esi],ebx
c001432d:	7e 2b                	jle    c001435a <EnvVarContainer::getEnv(char const*)+0x38>
c001432f:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0014336:	50                   	push   eax
c0014337:	50                   	push   eax
c0014338:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001433b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001433e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014342:	e8 85 c4 fe ff       	call   c00007cc <strcmp>
c0014347:	83 c4 10             	add    esp,0x10
c001434a:	85 c0                	test   eax,eax
c001434c:	75 09                	jne    c0014357 <EnvVarContainer::getEnv(char const*)+0x35>
c001434e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014351:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0014355:	eb 05                	jmp    c001435c <EnvVarContainer::getEnv(char const*)+0x3a>
c0014357:	43                   	inc    ebx
c0014358:	eb d1                	jmp    c001432b <EnvVarContainer::getEnv(char const*)+0x9>
c001435a:	31 c0                	xor    eax,eax
c001435c:	5b                   	pop    ebx
c001435d:	5e                   	pop    esi
c001435e:	5f                   	pop    edi
c001435f:	c3                   	ret    

c0014360 <EnvVarContainer::setEnv(char const*, char const*)>:
c0014360:	55                   	push   ebp
c0014361:	57                   	push   edi
c0014362:	56                   	push   esi
c0014363:	53                   	push   ebx
c0014364:	83 ec 28             	sub    esp,0x28
c0014367:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001436b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001436f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0014373:	56                   	push   esi
c0014374:	e8 27 c3 fe ff       	call   c00006a0 <strlen>
c0014379:	40                   	inc    eax
c001437a:	89 04 24             	mov    DWORD PTR [esp],eax
c001437d:	e8 85 56 ff ff       	call   c0009a07 <malloc>
c0014382:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014385:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014389:	e8 12 c3 fe ff       	call   c00006a0 <strlen>
c001438e:	40                   	inc    eax
c001438f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014392:	e8 70 56 ff ff       	call   c0009a07 <malloc>
c0014397:	89 34 24             	mov    DWORD PTR [esp],esi
c001439a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001439e:	e8 fd c2 fe ff       	call   c00006a0 <strlen>
c00143a3:	83 c4 0c             	add    esp,0xc
c00143a6:	40                   	inc    eax
c00143a7:	50                   	push   eax
c00143a8:	6a 00                	push   0x0
c00143aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00143ae:	e8 d1 c2 fe ff       	call   c0000684 <memset>
c00143b3:	89 34 24             	mov    DWORD PTR [esp],esi
c00143b6:	e8 e5 c2 fe ff       	call   c00006a0 <strlen>
c00143bb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00143bf:	8d 48 01             	lea    ecx,[eax+0x1]
c00143c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00143c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00143c7:	89 de                	mov    esi,ebx
c00143c9:	e8 d2 c2 fe ff       	call   c00006a0 <strlen>
c00143ce:	83 c4 0c             	add    esp,0xc
c00143d1:	40                   	inc    eax
c00143d2:	50                   	push   eax
c00143d3:	6a 00                	push   0x0
c00143d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00143d9:	e8 a6 c2 fe ff       	call   c0000684 <memset>
c00143de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00143e1:	e8 ba c2 fe ff       	call   c00006a0 <strlen>
c00143e6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00143ea:	8d 48 01             	lea    ecx,[eax+0x1]
c00143ed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00143ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00143f2:	40                   	inc    eax
c00143f3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00143f6:	c1 e0 03             	shl    eax,0x3
c00143f9:	5a                   	pop    edx
c00143fa:	59                   	pop    ecx
c00143fb:	50                   	push   eax
c00143fc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00143ff:	e8 ef 55 ff ff       	call   c00099f3 <realloc>
c0014404:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014408:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001440b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001440e:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014412:	b9 08 00 00 00       	mov    ecx,0x8
c0014417:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014419:	83 c4 2c             	add    esp,0x2c
c001441c:	5b                   	pop    ebx
c001441d:	5e                   	pop    esi
c001441e:	5f                   	pop    edi
c001441f:	5d                   	pop    ebp
c0014420:	c3                   	ret    
c0014421:	90                   	nop

c0014422 <EnvVarContainer::deleteEnv(char const*)>:
c0014422:	c3                   	ret    
c0014423:	90                   	nop

c0014424 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0014424:	55                   	push   ebp
c0014425:	57                   	push   edi
c0014426:	56                   	push   esi
c0014427:	53                   	push   ebx
c0014428:	81 ec 38 01 00 00    	sub    esp,0x138
c001442e:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014435:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001443c:	68 14 01 00 00       	push   0x114
c0014441:	e8 c1 55 ff ff       	call   c0009a07 <malloc>
c0014446:	83 c4 0c             	add    esp,0xc
c0014449:	89 c3                	mov    ebx,eax
c001444b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001444e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0014455:	50                   	push   eax
c0014456:	e8 07 8e ff ff       	call   c000d262 <File::File(char const*, Process*)>
c001445b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001445e:	e8 0f 91 ff ff       	call   c000d572 <File::exists()>
c0014463:	83 c4 10             	add    esp,0x10
c0014466:	84 c0                	test   al,al
c0014468:	75 31                	jne    c001449b <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001446a:	50                   	push   eax
c001446b:	50                   	push   eax
c001446c:	6a 12                	push   0x12
c001446e:	53                   	push   ebx
c001446f:	e8 90 8e ff ff       	call   c000d304 <File::open(FileOpenMode)>
c0014474:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014476:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0014479:	89 34 24             	mov    DWORD PTR [esp],esi
c001447c:	e8 1f c2 fe ff       	call   c00006a0 <strlen>
c0014481:	5a                   	pop    edx
c0014482:	31 d2                	xor    edx,edx
c0014484:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014488:	51                   	push   ecx
c0014489:	56                   	push   esi
c001448a:	52                   	push   edx
c001448b:	50                   	push   eax
c001448c:	53                   	push   ebx
c001448d:	ff d7                	call   edi
c001448f:	83 c4 14             	add    esp,0x14
c0014492:	53                   	push   ebx
c0014493:	e8 ca 8e ff ff       	call   c000d362 <File::close()>
c0014498:	83 c4 10             	add    esp,0x10
c001449b:	56                   	push   esi
c001449c:	31 f6                	xor    esi,esi
c001449e:	68 00 01 00 00       	push   0x100
c00144a3:	6a 00                	push   0x0
c00144a5:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00144a9:	50                   	push   eax
c00144aa:	e8 d5 c1 fe ff       	call   c0000684 <memset>
c00144af:	5f                   	pop    edi
c00144b0:	58                   	pop    eax
c00144b1:	6a 01                	push   0x1
c00144b3:	53                   	push   ebx
c00144b4:	e8 4b 8e ff ff       	call   c000d304 <File::open(FileOpenMode)>
c00144b9:	83 c4 10             	add    esp,0x10
c00144bc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00144c4:	83 ec 0c             	sub    esp,0xc
c00144c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144c9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00144cd:	51                   	push   ecx
c00144ce:	8d 54 24 23          	lea    edx,[esp+0x23]
c00144d2:	52                   	push   edx
c00144d3:	6a 00                	push   0x0
c00144d5:	6a 01                	push   0x1
c00144d7:	53                   	push   ebx
c00144d8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00144db:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00144df:	83 c4 20             	add    esp,0x20
c00144e2:	3c 0d                	cmp    al,0xd
c00144e4:	0f 84 09 01 00 00    	je     c00145f3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00144ea:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00144ef:	0f 84 ef 00 00 00    	je     c00145e4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00144f5:	3c 0a                	cmp    al,0xa
c00144f7:	74 13                	je     c001450c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00144f9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00144fe:	74 0c                	je     c001450c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014500:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0014506:	0f 8e d8 00 00 00    	jle    c00145e4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c001450c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014510:	83 ec 0c             	sub    esp,0xc
c0014513:	8d 78 01             	lea    edi,[eax+0x1]
c0014516:	57                   	push   edi
c0014517:	e8 eb 54 ff ff       	call   c0009a07 <malloc>
c001451c:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0014520:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014524:	8d 56 04             	lea    edx,[esi+0x4]
c0014527:	89 14 24             	mov    DWORD PTR [esp],edx
c001452a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001452e:	e8 d4 54 ff ff       	call   c0009a07 <malloc>
c0014533:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014537:	83 c4 0c             	add    esp,0xc
c001453a:	57                   	push   edi
c001453b:	6a 00                	push   0x0
c001453d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014541:	e8 3e c1 fe ff       	call   c0000684 <memset>
c0014546:	8d 74 24 30          	lea    esi,[esp+0x30]
c001454a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001454e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014552:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014554:	83 c4 0c             	add    esp,0xc
c0014557:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001455b:	52                   	push   edx
c001455c:	6a 00                	push   0x0
c001455e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014562:	e8 1d c1 fe ff       	call   c0000684 <memset>
c0014567:	8d 74 24 30          	lea    esi,[esp+0x30]
c001456b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001456f:	89 34 24             	mov    DWORD PTR [esp],esi
c0014572:	e8 29 c1 fe ff       	call   c00006a0 <strlen>
c0014577:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001457b:	89 c1                	mov    ecx,eax
c001457d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001457f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014582:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0014585:	40                   	inc    eax
c0014586:	83 c4 10             	add    esp,0x10
c0014589:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001458c:	85 d2                	test   edx,edx
c001458e:	75 0c                	jne    c001459c <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0014590:	83 ec 0c             	sub    esp,0xc
c0014593:	6a 08                	push   0x8
c0014595:	e8 6d 54 ff ff       	call   c0009a07 <malloc>
c001459a:	eb 0c                	jmp    c00145a8 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c001459c:	c1 e0 03             	shl    eax,0x3
c001459f:	51                   	push   ecx
c00145a0:	51                   	push   ecx
c00145a1:	50                   	push   eax
c00145a2:	52                   	push   edx
c00145a3:	e8 4b 54 ff ff       	call   c00099f3 <realloc>
c00145a8:	83 c4 10             	add    esp,0x10
c00145ab:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00145ae:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00145b1:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00145b4:	8d 74 24 18          	lea    esi,[esp+0x18]
c00145b8:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00145bc:	b9 08 00 00 00       	mov    ecx,0x8
c00145c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00145c3:	31 f6                	xor    esi,esi
c00145c5:	50                   	push   eax
c00145c6:	68 00 01 00 00       	push   0x100
c00145cb:	6a 00                	push   0x0
c00145cd:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00145d1:	50                   	push   eax
c00145d2:	e8 ad c0 fe ff       	call   c0000684 <memset>
c00145d7:	83 c4 10             	add    esp,0x10
c00145da:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00145e2:	eb 0f                	jmp    c00145f3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00145e4:	3c 3d                	cmp    al,0x3d
c00145e6:	74 07                	je     c00145ef <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c00145e8:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00145ec:	46                   	inc    esi
c00145ed:	eb 04                	jmp    c00145f3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00145ef:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00145f3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00145f8:	0f 85 c6 fe ff ff    	jne    c00144c4 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00145fe:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014604:	5b                   	pop    ebx
c0014605:	5e                   	pop    esi
c0014606:	5f                   	pop    edi
c0014607:	5d                   	pop    ebp
c0014608:	c3                   	ret    
c0014609:	90                   	nop

c001460a <EnvVarContainer::__loadSystem()>:
c001460a:	83 ec 10             	sub    esp,0x10
c001460d:	68 20 75 02 c0       	push   0xc0027520
c0014612:	68 95 56 02 c0       	push   0xc0025695
c0014617:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001461b:	e8 04 fe ff ff       	call   c0014424 <EnvVarContainer::loadFrom(char const*, char const*)>
c0014620:	83 c4 1c             	add    esp,0x1c
c0014623:	c3                   	ret    

c0014624 <EnvVarContainer::__loadUser()>:
c0014624:	c3                   	ret    
c0014625:	90                   	nop

c0014626 <EnvVarContainer::EnvVarContainer(Process*)>:
c0014626:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001462a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014634:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014638:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001463b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001463f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014646:	90                   	nop
c0014647:	c3                   	ret    

c0014648 <EnvVarContainer::~EnvVarContainer()>:
c0014648:	83 ec 0c             	sub    esp,0xc
c001464b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001464f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014652:	85 c0                	test   eax,eax
c0014654:	74 1d                	je     c0014673 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001465a:	8b 00                	mov    eax,DWORD PTR [eax]
c001465c:	85 c0                	test   eax,eax
c001465e:	74 13                	je     c0014673 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014664:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014667:	83 ec 0c             	sub    esp,0xc
c001466a:	50                   	push   eax
c001466b:	e8 a7 53 ff ff       	call   c0009a17 <free>
c0014670:	83 c4 10             	add    esp,0x10
c0014673:	90                   	nop
c0014674:	83 c4 0c             	add    esp,0xc
c0014677:	c3                   	ret    

c0014678 <Krnl::getEnv(Process*, char const*)>:
c0014678:	53                   	push   ebx
c0014679:	83 ec 08             	sub    esp,0x8
c001467c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014680:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014684:	39 05 30 90 02 c0    	cmp    DWORD PTR ds:0xc0029030,eax
c001468a:	74 04                	je     c0014690 <Krnl::getEnv(Process*, char const*)+0x18>
c001468c:	85 c0                	test   eax,eax
c001468e:	75 0b                	jne    c001469b <Krnl::getEnv(Process*, char const*)+0x23>
c0014690:	a1 14 86 02 c0       	mov    eax,ds:0xc0028614
c0014695:	85 c0                	test   eax,eax
c0014697:	75 19                	jne    c00146b2 <Krnl::getEnv(Process*, char const*)+0x3a>
c0014699:	eb 27                	jmp    c00146c2 <Krnl::getEnv(Process*, char const*)+0x4a>
c001469b:	52                   	push   edx
c001469c:	52                   	push   edx
c001469d:	53                   	push   ebx
c001469e:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00146a4:	e8 79 fc ff ff       	call   c0014322 <EnvVarContainer::getEnv(char const*)>
c00146a9:	83 c4 10             	add    esp,0x10
c00146ac:	85 c0                	test   eax,eax
c00146ae:	75 28                	jne    c00146d8 <Krnl::getEnv(Process*, char const*)+0x60>
c00146b0:	eb de                	jmp    c0014690 <Krnl::getEnv(Process*, char const*)+0x18>
c00146b2:	52                   	push   edx
c00146b3:	52                   	push   edx
c00146b4:	53                   	push   ebx
c00146b5:	50                   	push   eax
c00146b6:	e8 67 fc ff ff       	call   c0014322 <EnvVarContainer::getEnv(char const*)>
c00146bb:	83 c4 10             	add    esp,0x10
c00146be:	85 c0                	test   eax,eax
c00146c0:	75 16                	jne    c00146d8 <Krnl::getEnv(Process*, char const*)+0x60>
c00146c2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00146c6:	a1 18 86 02 c0       	mov    eax,ds:0xc0028618
c00146cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00146cf:	83 c4 08             	add    esp,0x8
c00146d2:	5b                   	pop    ebx
c00146d3:	e9 4a fc ff ff       	jmp    c0014322 <EnvVarContainer::getEnv(char const*)>
c00146d8:	83 c4 08             	add    esp,0x8
c00146db:	5b                   	pop    ebx
c00146dc:	c3                   	ret    

c00146dd <Krnl::setEnvSystem(char const*, char const*)>:
c00146dd:	83 ec 10             	sub    esp,0x10
c00146e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146e8:	ff 35 18 86 02 c0    	push   DWORD PTR ds:0xc0028618
c00146ee:	e8 6d fc ff ff       	call   c0014360 <EnvVarContainer::setEnv(char const*, char const*)>
c00146f3:	83 c4 1c             	add    esp,0x1c
c00146f6:	c3                   	ret    

c00146f7 <Krnl::setEnvUser(char const*, char const*)>:
c00146f7:	a1 14 86 02 c0       	mov    eax,ds:0xc0028614
c00146fc:	85 c0                	test   eax,eax
c00146fe:	74 15                	je     c0014715 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0014700:	83 ec 10             	sub    esp,0x10
c0014703:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014707:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001470b:	50                   	push   eax
c001470c:	e8 4f fc ff ff       	call   c0014360 <EnvVarContainer::setEnv(char const*, char const*)>
c0014711:	83 c4 1c             	add    esp,0x1c
c0014714:	c3                   	ret    
c0014715:	c3                   	ret    

c0014716 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0014716:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001471a:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0014720:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014724:	e9 37 fc ff ff       	jmp    c0014360 <EnvVarContainer::setEnv(char const*, char const*)>

c0014729 <Krnl::deleteEnvSystem(char const*)>:
c0014729:	c3                   	ret    

c001472a <Krnl::deleteEnvUser(char const*)>:
c001472a:	c3                   	ret    

c001472b <Krnl::deleteEnvProcess(Process*, char const*)>:
c001472b:	c3                   	ret    

c001472c <Krnl::newProcessEnv(Process*)>:
c001472c:	83 ec 28             	sub    esp,0x28
c001472f:	6a 0c                	push   0xc
c0014731:	e8 d1 52 ff ff       	call   c0009a07 <malloc>
c0014736:	5a                   	pop    edx
c0014737:	59                   	pop    ecx
c0014738:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001473c:	50                   	push   eax
c001473d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014741:	e8 e0 fe ff ff       	call   c0014626 <EnvVarContainer::EnvVarContainer(Process*)>
c0014746:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001474a:	83 c4 2c             	add    esp,0x2c
c001474d:	c3                   	ret    

c001474e <Krnl::copyProcessEnv(Process*, Process*)>:
c001474e:	57                   	push   edi
c001474f:	56                   	push   esi
c0014750:	53                   	push   ebx
c0014751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014755:	83 ec 0c             	sub    esp,0xc
c0014758:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001475e:	6a 0c                	push   0xc
c0014760:	e8 a2 52 ff ff       	call   c0009a07 <malloc>
c0014765:	89 c3                	mov    ebx,eax
c0014767:	58                   	pop    eax
c0014768:	5a                   	pop    edx
c0014769:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001476d:	53                   	push   ebx
c001476e:	e8 b3 fe ff ff       	call   c0014626 <EnvVarContainer::EnvVarContainer(Process*)>
c0014773:	8b 07                	mov    eax,DWORD PTR [edi]
c0014775:	89 03                	mov    DWORD PTR [ebx],eax
c0014777:	c1 e0 03             	shl    eax,0x3
c001477a:	89 04 24             	mov    DWORD PTR [esp],eax
c001477d:	e8 85 52 ff ff       	call   c0009a07 <malloc>
c0014782:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014785:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014787:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001478a:	c1 e1 03             	shl    ecx,0x3
c001478d:	89 c7                	mov    edi,eax
c001478f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014791:	83 c4 10             	add    esp,0x10
c0014794:	89 d8                	mov    eax,ebx
c0014796:	5b                   	pop    ebx
c0014797:	5e                   	pop    esi
c0014798:	5f                   	pop    edi
c0014799:	c3                   	ret    

c001479a <Krnl::loadSystemEnv()>:
c001479a:	53                   	push   ebx
c001479b:	83 ec 14             	sub    esp,0x14
c001479e:	6a 0c                	push   0xc
c00147a0:	e8 62 52 ff ff       	call   c0009a07 <malloc>
c00147a5:	89 c3                	mov    ebx,eax
c00147a7:	58                   	pop    eax
c00147a8:	5a                   	pop    edx
c00147a9:	ff 35 30 90 02 c0    	push   DWORD PTR ds:0xc0029030
c00147af:	53                   	push   ebx
c00147b0:	e8 71 fe ff ff       	call   c0014626 <EnvVarContainer::EnvVarContainer(Process*)>
c00147b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00147b8:	89 1d 18 86 02 c0    	mov    DWORD PTR ds:0xc0028618,ebx
c00147be:	e8 47 fe ff ff       	call   c001460a <EnvVarContainer::__loadSystem()>
c00147c3:	83 c4 18             	add    esp,0x18
c00147c6:	5b                   	pop    ebx
c00147c7:	c3                   	ret    

c00147c8 <Krnl::loadUserEnv()>:
c00147c8:	53                   	push   ebx
c00147c9:	83 ec 14             	sub    esp,0x14
c00147cc:	6a 0c                	push   0xc
c00147ce:	e8 34 52 ff ff       	call   c0009a07 <malloc>
c00147d3:	89 c3                	mov    ebx,eax
c00147d5:	58                   	pop    eax
c00147d6:	5a                   	pop    edx
c00147d7:	ff 35 30 90 02 c0    	push   DWORD PTR ds:0xc0029030
c00147dd:	53                   	push   ebx
c00147de:	e8 43 fe ff ff       	call   c0014626 <EnvVarContainer::EnvVarContainer(Process*)>
c00147e3:	89 1d 14 86 02 c0    	mov    DWORD PTR ds:0xc0028614,ebx
c00147e9:	83 c4 18             	add    esp,0x18
c00147ec:	5b                   	pop    ebx
c00147ed:	c3                   	ret    

c00147ee <Krnl::flushEnv()>:
c00147ee:	c3                   	ret    

c00147ef <Krnl::getProcessTotalEnvCount(Process*)>:
c00147ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00147f3:	8b 15 14 86 02 c0    	mov    edx,DWORD PTR ds:0xc0028614
c00147f9:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00147ff:	a1 18 86 02 c0       	mov    eax,ds:0xc0028618
c0014804:	8b 00                	mov    eax,DWORD PTR [eax]
c0014806:	03 01                	add    eax,DWORD PTR [ecx]
c0014808:	85 d2                	test   edx,edx
c001480a:	74 02                	je     c001480e <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001480c:	03 02                	add    eax,DWORD PTR [edx]
c001480e:	c3                   	ret    

c001480f <Krnl::getProcessEnvPair(Process*, int)>:
c001480f:	57                   	push   edi
c0014810:	56                   	push   esi
c0014811:	8b 35 14 86 02 c0    	mov    esi,DWORD PTR ds:0xc0028614
c0014817:	53                   	push   ebx
c0014818:	85 f6                	test   esi,esi
c001481a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001481e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014822:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014828:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001482c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001482e:	75 16                	jne    c0014846 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0014830:	39 c2                	cmp    edx,eax
c0014832:	7c 16                	jl     c001484a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014834:	8b 0d 18 86 02 c0    	mov    ecx,DWORD PTR ds:0xc0028618
c001483a:	8b 31                	mov    esi,DWORD PTR [ecx]
c001483c:	01 c6                	add    esi,eax
c001483e:	39 d6                	cmp    esi,edx
c0014840:	7e 3c                	jle    c001487e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014842:	29 c2                	sub    edx,eax
c0014844:	eb 04                	jmp    c001484a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014846:	39 c2                	cmp    edx,eax
c0014848:	7d 05                	jge    c001484f <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001484a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001484d:	eb 20                	jmp    c001486f <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001484f:	8b 3e                	mov    edi,DWORD PTR [esi]
c0014851:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0014854:	39 d1                	cmp    ecx,edx
c0014856:	7e 04                	jle    c001485c <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0014858:	29 c2                	sub    edx,eax
c001485a:	eb 10                	jmp    c001486c <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001485c:	8b 35 18 86 02 c0    	mov    esi,DWORD PTR ds:0xc0028618
c0014862:	03 0e                	add    ecx,DWORD PTR [esi]
c0014864:	39 d1                	cmp    ecx,edx
c0014866:	7e 16                	jle    c001487e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014868:	29 c2                	sub    edx,eax
c001486a:	29 fa                	sub    edx,edi
c001486c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001486f:	8d 14 d0             	lea    edx,[eax+edx*8]
c0014872:	8b 02                	mov    eax,DWORD PTR [edx]
c0014874:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0014877:	89 03                	mov    DWORD PTR [ebx],eax
c0014879:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001487c:	eb 1d                	jmp    c001489b <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001487e:	83 ec 0c             	sub    esp,0xc
c0014881:	68 b7 56 02 c0       	push   0xc00256b7
c0014886:	e8 18 00 00 00       	call   c00148a3 <Krnl::panic(char const*)>
c001488b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0014891:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0014898:	83 c4 10             	add    esp,0x10
c001489b:	89 d8                	mov    eax,ebx
c001489d:	5b                   	pop    ebx
c001489e:	5e                   	pop    esi
c001489f:	5f                   	pop    edi
c00148a0:	c2 04 00             	ret    0x4

c00148a3 <Krnl::panic(char const*)>:
c00148a3:	55                   	push   ebp
c00148a4:	89 e5                	mov    ebp,esp
c00148a6:	53                   	push   ebx
c00148a7:	83 ec 10             	sub    esp,0x10
c00148aa:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00148ad:	fa                   	cli    
c00148ae:	c6 05 24 86 02 c0 01 	mov    BYTE PTR ds:0xc0028624,0x1
c00148b5:	53                   	push   ebx
c00148b6:	e8 a6 51 ff ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c00148bb:	58                   	pop    eax
c00148bc:	c6 05 20 6f 02 c0 00 	mov    BYTE PTR ds:0xc0026f20,0x0
c00148c3:	5a                   	pop    edx
c00148c4:	53                   	push   ebx
c00148c5:	68 d1 56 02 c0       	push   0xc00256d1
c00148ca:	e8 28 84 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c00148cf:	59                   	pop    ecx
c00148d0:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c00148d5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00148db:	e8 21 62 ff ff       	call   c000ab01 <setActiveTerminal(VgaText*)>
c00148e0:	83 c4 0c             	add    esp,0xc
c00148e3:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c00148e8:	6a 01                	push   0x1
c00148ea:	6a 0f                	push   0xf
c00148ec:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00148f2:	e8 69 60 ff ff       	call   c000a960 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00148f7:	58                   	pop    eax
c00148f8:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c00148fd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014903:	e8 7a 65 ff ff       	call   c000ae82 <VgaText::clearScreen()>
c0014908:	58                   	pop    eax
c0014909:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c001490e:	5a                   	pop    edx
c001490f:	68 ea 56 02 c0       	push   0xc00256ea
c0014914:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001491a:	e8 ef 66 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c001491f:	59                   	pop    ecx
c0014920:	58                   	pop    eax
c0014921:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c0014926:	68 90 57 02 c0       	push   0xc0025790
c001492b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014931:	e8 d8 66 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c0014936:	58                   	pop    eax
c0014937:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c001493c:	5a                   	pop    edx
c001493d:	68 06 57 02 c0       	push   0xc0025706
c0014942:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014948:	e8 c1 66 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c001494d:	59                   	pop    ecx
c001494e:	58                   	pop    eax
c001494f:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c0014954:	53                   	push   ebx
c0014955:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001495b:	e8 ae 66 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c0014960:	58                   	pop    eax
c0014961:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c0014966:	5a                   	pop    edx
c0014967:	68 26 57 02 c0       	push   0xc0025726
c001496c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014972:	e8 97 66 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c0014977:	a1 20 86 02 c0       	mov    eax,ds:0xc0028620
c001497c:	83 c4 10             	add    esp,0x10
c001497f:	85 c0                	test   eax,eax
c0014981:	74 02                	je     c0014985 <Krnl::panic(char const*)+0xe2>
c0014983:	ff d0                	call   eax
c0014985:	83 ec 0c             	sub    esp,0xc
c0014988:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001498b:	e8 ad 30 00 00       	call   c0017a3d <Thr::getDriverNameFromAddress(unsigned long)>
c0014990:	83 c4 10             	add    esp,0x10
c0014993:	89 c3                	mov    ebx,eax
c0014995:	85 c0                	test   eax,eax
c0014997:	0f 84 4e 02 00 00    	je     c0014beb <Krnl::panic(char const*)+0x348>
c001499d:	83 ec 08             	sub    esp,0x8
c00149a0:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c00149a5:	68 cc 57 02 c0       	push   0xc00257cc
c00149aa:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00149b0:	e8 59 66 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c00149b5:	58                   	pop    eax
c00149b6:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c00149bb:	5a                   	pop    edx
c00149bc:	68 06 57 02 c0       	push   0xc0025706
c00149c1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00149c7:	e8 42 66 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c00149cc:	59                   	pop    ecx
c00149cd:	58                   	pop    eax
c00149ce:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c00149d3:	53                   	push   ebx
c00149d4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00149da:	e8 2f 66 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c00149df:	83 c4 10             	add    esp,0x10
c00149e2:	83 ec 08             	sub    esp,0x8
c00149e5:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c00149ea:	68 25 57 02 c0       	push   0xc0025725
c00149ef:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00149f5:	e8 14 66 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c00149fa:	58                   	pop    eax
c00149fb:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c0014a00:	5a                   	pop    edx
c0014a01:	68 24 58 02 c0       	push   0xc0025824
c0014a06:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a0c:	e8 fd 65 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c0014a11:	59                   	pop    ecx
c0014a12:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c0014a17:	5b                   	pop    ebx
c0014a18:	68 64 58 02 c0       	push   0xc0025864
c0014a1d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a23:	e8 e6 65 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c0014a28:	58                   	pop    eax
c0014a29:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c0014a2e:	5a                   	pop    edx
c0014a2f:	68 11 57 02 c0       	push   0xc0025711
c0014a34:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a3a:	e8 cf 65 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c0014a3f:	59                   	pop    ecx
c0014a40:	5b                   	pop    ebx
c0014a41:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014a44:	68 29 57 02 c0       	push   0xc0025729
c0014a49:	e8 a9 82 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0014a4e:	58                   	pop    eax
c0014a4f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014a52:	5a                   	pop    edx
c0014a53:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014a56:	68 32 57 02 c0       	push   0xc0025732
c0014a5b:	e8 97 82 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0014a60:	59                   	pop    ecx
c0014a61:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014a64:	5b                   	pop    ebx
c0014a65:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a67:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014a6a:	68 3b 57 02 c0       	push   0xc002573b
c0014a6f:	e8 83 82 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0014a74:	58                   	pop    eax
c0014a75:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c0014a7a:	5a                   	pop    edx
c0014a7b:	68 a8 58 02 c0       	push   0xc00258a8
c0014a80:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a86:	e8 83 65 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c0014a8b:	59                   	pop    ecx
c0014a8c:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c0014a91:	5b                   	pop    ebx
c0014a92:	68 44 57 02 c0       	push   0xc0025744
c0014a97:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a9d:	e8 6c 65 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c0014aa2:	0f 20 c0             	mov    eax,cr0
c0014aa5:	5a                   	pop    edx
c0014aa6:	59                   	pop    ecx
c0014aa7:	50                   	push   eax
c0014aa8:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c0014aad:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014ab3:	e8 10 65 ff ff       	call   c000afc8 <VgaText::putx(unsigned int)>
c0014ab8:	5b                   	pop    ebx
c0014ab9:	58                   	pop    eax
c0014aba:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c0014abf:	68 4e 57 02 c0       	push   0xc002574e
c0014ac4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014aca:	e8 3f 65 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c0014acf:	0f 20 d0             	mov    eax,cr2
c0014ad2:	5a                   	pop    edx
c0014ad3:	59                   	pop    ecx
c0014ad4:	50                   	push   eax
c0014ad5:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c0014ada:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014ae0:	e8 e3 64 ff ff       	call   c000afc8 <VgaText::putx(unsigned int)>
c0014ae5:	5b                   	pop    ebx
c0014ae6:	58                   	pop    eax
c0014ae7:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c0014aec:	68 58 57 02 c0       	push   0xc0025758
c0014af1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014af7:	e8 12 65 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c0014afc:	0f 20 d8             	mov    eax,cr3
c0014aff:	5a                   	pop    edx
c0014b00:	59                   	pop    ecx
c0014b01:	50                   	push   eax
c0014b02:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c0014b07:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b0d:	e8 b6 64 ff ff       	call   c000afc8 <VgaText::putx(unsigned int)>
c0014b12:	5b                   	pop    ebx
c0014b13:	58                   	pop    eax
c0014b14:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c0014b19:	68 6b 57 02 c0       	push   0xc002576b
c0014b1e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b24:	e8 e5 64 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c0014b29:	0f 20 e0             	mov    eax,cr4
c0014b2c:	5a                   	pop    edx
c0014b2d:	59                   	pop    ecx
c0014b2e:	50                   	push   eax
c0014b2f:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c0014b34:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b3a:	e8 89 64 ff ff       	call   c000afc8 <VgaText::putx(unsigned int)>
c0014b3f:	5b                   	pop    ebx
c0014b40:	58                   	pop    eax
c0014b41:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c0014b46:	68 75 57 02 c0       	push   0xc0025775
c0014b4b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b51:	e8 b8 64 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c0014b56:	5a                   	pop    edx
c0014b57:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c0014b5c:	59                   	pop    ecx
c0014b5d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b63:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014b66:	50                   	push   eax
c0014b67:	e8 5c 64 ff ff       	call   c000afc8 <VgaText::putx(unsigned int)>
c0014b6c:	5b                   	pop    ebx
c0014b6d:	58                   	pop    eax
c0014b6e:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c0014b73:	68 8c 57 02 c0       	push   0xc002578c
c0014b78:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b7e:	e8 8b 64 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c0014b83:	5a                   	pop    edx
c0014b84:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c0014b89:	59                   	pop    ecx
c0014b8a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b90:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014b93:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014b96:	50                   	push   eax
c0014b97:	e8 2c 64 ff ff       	call   c000afc8 <VgaText::putx(unsigned int)>
c0014b9c:	5b                   	pop    ebx
c0014b9d:	58                   	pop    eax
c0014b9e:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c0014ba3:	68 8c 57 02 c0       	push   0xc002578c
c0014ba8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014bae:	e8 5b 64 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c0014bb3:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c0014bb8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014bbb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bc1:	8b 12                	mov    edx,DWORD PTR [edx]
c0014bc3:	59                   	pop    ecx
c0014bc4:	5b                   	pop    ebx
c0014bc5:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014bc8:	50                   	push   eax
c0014bc9:	e8 fa 63 ff ff       	call   c000afc8 <VgaText::putx(unsigned int)>
c0014bce:	83 c4 10             	add    esp,0x10
c0014bd1:	b2 fe                	mov    dl,0xfe
c0014bd3:	e4 60                	in     al,0x60
c0014bd5:	3c 1c                	cmp    al,0x1c
c0014bd7:	74 04                	je     c0014bdd <Krnl::panic(char const*)+0x33a>
c0014bd9:	3c 5a                	cmp    al,0x5a
c0014bdb:	75 f6                	jne    c0014bd3 <Krnl::panic(char const*)+0x330>
c0014bdd:	e4 64                	in     al,0x64
c0014bdf:	a8 02                	test   al,0x2
c0014be1:	75 fa                	jne    c0014bdd <Krnl::panic(char const*)+0x33a>
c0014be3:	88 d0                	mov    al,dl
c0014be5:	e6 64                	out    0x64,al
c0014be7:	fa                   	cli    
c0014be8:	f4                   	hlt    
c0014be9:	eb e8                	jmp    c0014bd3 <Krnl::panic(char const*)+0x330>
c0014beb:	50                   	push   eax
c0014bec:	50                   	push   eax
c0014bed:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c0014bf2:	68 f8 57 02 c0       	push   0xc00257f8
c0014bf7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014bfd:	e8 0c 64 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c0014c02:	58                   	pop    eax
c0014c03:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c0014c08:	5a                   	pop    edx
c0014c09:	68 06 57 02 c0       	push   0xc0025706
c0014c0e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014c14:	e8 f5 63 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c0014c19:	59                   	pop    ecx
c0014c1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c1f:	5b                   	pop    ebx
c0014c20:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014c23:	83 c0 0c             	add    eax,0xc
c0014c26:	50                   	push   eax
c0014c27:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c0014c2c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014c32:	e8 d7 63 ff ff       	call   c000b00e <VgaText::puts(char const*)>
c0014c37:	83 c4 10             	add    esp,0x10
c0014c3a:	e9 a3 fd ff ff       	jmp    c00149e2 <Krnl::panic(char const*)+0x13f>
c0014c3f:	90                   	nop

c0014c40 <Net::switchEndian16(unsigned short)>:
c0014c40:	83 ec 04             	sub    esp,0x4
c0014c43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014c47:	66 89 04 24          	mov    WORD PTR [esp],ax
c0014c4b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0014c4f:	c1 f8 08             	sar    eax,0x8
c0014c52:	89 c2                	mov    edx,eax
c0014c54:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0014c58:	c1 e0 08             	shl    eax,0x8
c0014c5b:	09 d0                	or     eax,edx
c0014c5d:	83 c4 04             	add    esp,0x4
c0014c60:	c3                   	ret    
c0014c61:	8d 76 00             	lea    esi,[esi+0x0]

c0014c64 <Net::switchEndian32(unsigned int)>:
c0014c64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c68:	c1 e8 18             	shr    eax,0x18
c0014c6b:	89 c2                	mov    edx,eax
c0014c6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c71:	c1 e0 08             	shl    eax,0x8
c0014c74:	25 00 00 ff 00       	and    eax,0xff0000
c0014c79:	09 c2                	or     edx,eax
c0014c7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c7f:	c1 e8 08             	shr    eax,0x8
c0014c82:	25 00 ff 00 00       	and    eax,0xff00
c0014c87:	09 c2                	or     edx,eax
c0014c89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c8d:	c1 e0 18             	shl    eax,0x18
c0014c90:	09 d0                	or     eax,edx
c0014c92:	c3                   	ret    
c0014c93:	90                   	nop

c0014c94 <Net::crc32Calc(unsigned char*, int)>:
c0014c94:	83 ec 10             	sub    esp,0x10
c0014c97:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014c9c:	75 0a                	jne    c0014ca8 <Net::crc32Calc(unsigned char*, int)+0x14>
c0014c9e:	b8 00 00 00 00       	mov    eax,0x0
c0014ca3:	e9 8c 00 00 00       	jmp    c0014d34 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014ca8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014cad:	7f 09                	jg     c0014cb8 <Net::crc32Calc(unsigned char*, int)+0x24>
c0014caf:	b8 00 00 00 00       	mov    eax,0x0
c0014cb4:	eb 7e                	jmp    c0014d34 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014cb6:	66 90                	xchg   ax,ax
c0014cb8:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0014cc0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014cc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014ccc:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0014cd0:	7d 5a                	jge    c0014d2c <Net::crc32Calc(unsigned char*, int)+0x98>
c0014cd2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014cd6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014cda:	01 d0                	add    eax,edx
c0014cdc:	8a 00                	mov    al,BYTE PTR [eax]
c0014cde:	0f b6 c0             	movzx  eax,al
c0014ce1:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0014ce5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014ced:	8d 76 00             	lea    esi,[esi+0x0]
c0014cf0:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0014cf5:	7f 2d                	jg     c0014d24 <Net::crc32Calc(unsigned char*, int)+0x90>
c0014cf7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014cfb:	83 e0 01             	and    eax,0x1
c0014cfe:	74 10                	je     c0014d10 <Net::crc32Calc(unsigned char*, int)+0x7c>
c0014d00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d04:	d1 e8                	shr    eax,1
c0014d06:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0014d0b:	eb 0b                	jmp    c0014d18 <Net::crc32Calc(unsigned char*, int)+0x84>
c0014d0d:	8d 76 00             	lea    esi,[esi+0x0]
c0014d10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d14:	d1 e8                	shr    eax,1
c0014d16:	66 90                	xchg   ax,ax
c0014d18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d1c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014d20:	eb ce                	jmp    c0014cf0 <Net::crc32Calc(unsigned char*, int)+0x5c>
c0014d22:	66 90                	xchg   ax,ax
c0014d24:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014d28:	eb 9e                	jmp    c0014cc8 <Net::crc32Calc(unsigned char*, int)+0x34>
c0014d2a:	66 90                	xchg   ax,ax
c0014d2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d30:	f7 d0                	not    eax
c0014d32:	66 90                	xchg   ax,ax
c0014d34:	83 c4 10             	add    esp,0x10
c0014d37:	c3                   	ret    

c0014d38 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0014d38:	57                   	push   edi
c0014d39:	56                   	push   esi
c0014d3a:	53                   	push   ebx
c0014d3b:	83 ec 60             	sub    esp,0x60
c0014d3e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014d45:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0014d49:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0014d51:	8d 76 00             	lea    esi,[esi+0x0]
c0014d54:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c0014d59:	7f 1d                	jg     c0014d78 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c0014d5b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014d62:	8d 50 01             	lea    edx,[eax+0x1]
c0014d65:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014d6c:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0014d6f:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0014d73:	eb df                	jmp    c0014d54 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c0014d75:	8d 76 00             	lea    esi,[esi+0x0]
c0014d78:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014d7f:	8d 50 01             	lea    edx,[eax+0x1]
c0014d82:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014d89:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0014d8c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014d93:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d97:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c0014d9b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d9f:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c0014da7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014dab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014daf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014db3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014db7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014dbb:	89 c6                	mov    esi,eax
c0014dbd:	89 d7                	mov    edi,edx
c0014dbf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014dc1:	89 c8                	mov    eax,ecx
c0014dc3:	89 fa                	mov    edx,edi
c0014dc5:	89 f3                	mov    ebx,esi
c0014dc7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014dcb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014dcf:	89 04 24             	mov    DWORD PTR [esp],eax
c0014dd2:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0014dda:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014de1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014de5:	8d 44 24 78          	lea    eax,[esp+0x78]
c0014de9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014ded:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0014df5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014df9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014dfd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014e01:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014e05:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014e09:	89 c6                	mov    esi,eax
c0014e0b:	89 d7                	mov    edi,edx
c0014e0d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014e0f:	89 c8                	mov    eax,ecx
c0014e11:	89 fa                	mov    edx,edi
c0014e13:	89 f3                	mov    ebx,esi
c0014e15:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0014e19:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0014e1d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014e21:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0014e29:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014e30:	0f b7 c0             	movzx  eax,ax
c0014e33:	c1 f8 08             	sar    eax,0x8
c0014e36:	89 c1                	mov    ecx,eax
c0014e38:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014e3f:	8d 50 01             	lea    edx,[eax+0x1]
c0014e42:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014e49:	88 ca                	mov    dl,cl
c0014e4b:	88 10                	mov    BYTE PTR [eax],dl
c0014e4d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0014e54:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014e5b:	8d 48 01             	lea    ecx,[eax+0x1]
c0014e5e:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c0014e65:	88 10                	mov    BYTE PTR [eax],dl
c0014e67:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0014e6b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0014e6f:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c0014e76:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c0014e7a:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0014e7e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0014e82:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014e86:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014e8a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014e8e:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014e92:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0014e96:	89 c6                	mov    esi,eax
c0014e98:	89 d7                	mov    edi,edx
c0014e9a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014e9c:	89 c8                	mov    eax,ecx
c0014e9e:	89 fa                	mov    edx,edi
c0014ea0:	89 f3                	mov    ebx,esi
c0014ea2:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0014ea6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014eaa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014eae:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0014eb2:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c0014eb9:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014ec0:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c0014ec4:	50                   	push   eax
c0014ec5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014ec9:	e8 c6 fd ff ff       	call   c0014c94 <Net::crc32Calc(unsigned char*, int)>
c0014ece:	83 c4 08             	add    esp,0x8
c0014ed1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0014ed5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014ed9:	c1 e8 18             	shr    eax,0x18
c0014edc:	89 c1                	mov    ecx,eax
c0014ede:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014ee5:	8d 50 01             	lea    edx,[eax+0x1]
c0014ee8:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014eef:	88 ca                	mov    dl,cl
c0014ef1:	88 10                	mov    BYTE PTR [eax],dl
c0014ef3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014ef7:	c1 e8 10             	shr    eax,0x10
c0014efa:	89 c1                	mov    ecx,eax
c0014efc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014f03:	8d 50 01             	lea    edx,[eax+0x1]
c0014f06:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014f0d:	88 ca                	mov    dl,cl
c0014f0f:	88 10                	mov    BYTE PTR [eax],dl
c0014f11:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014f15:	c1 e8 08             	shr    eax,0x8
c0014f18:	89 c1                	mov    ecx,eax
c0014f1a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014f21:	8d 50 01             	lea    edx,[eax+0x1]
c0014f24:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014f2b:	88 ca                	mov    dl,cl
c0014f2d:	88 10                	mov    BYTE PTR [eax],dl
c0014f2f:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014f36:	8d 50 01             	lea    edx,[eax+0x1]
c0014f39:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014f40:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0014f44:	88 10                	mov    BYTE PTR [eax],dl
c0014f46:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0014f4a:	83 c4 60             	add    esp,0x60
c0014f4d:	5b                   	pop    ebx
c0014f4e:	5e                   	pop    esi
c0014f4f:	5f                   	pop    edi
c0014f50:	c3                   	ret    
c0014f51:	8d 76 00             	lea    esi,[esi+0x0]

c0014f54 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0014f54:	57                   	push   edi
c0014f55:	56                   	push   esi
c0014f56:	53                   	push   ebx
c0014f57:	83 ec 70             	sub    esp,0x70
c0014f5a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014f61:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0014f65:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c0014f6d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014f74:	83 c0 0e             	add    eax,0xe
c0014f77:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014f7b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014f82:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014f86:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0014f8e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014f92:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014f96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f9a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014f9e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014fa2:	89 c6                	mov    esi,eax
c0014fa4:	89 d7                	mov    edi,edx
c0014fa6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014fa8:	89 c8                	mov    eax,ecx
c0014faa:	89 fa                	mov    edx,edi
c0014fac:	89 f3                	mov    ebx,esi
c0014fae:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0014fb2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0014fb6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014fba:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014fc2:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014fc9:	83 c0 08             	add    eax,0x8
c0014fcc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0014fd0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014fd7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0014fdb:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c0014fe3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014fe7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014feb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014fef:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014ff3:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0014ff7:	89 c6                	mov    esi,eax
c0014ff9:	89 d7                	mov    edi,edx
c0014ffb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014ffd:	89 c8                	mov    eax,ecx
c0014fff:	89 fa                	mov    edx,edi
c0015001:	89 f3                	mov    ebx,esi
c0015003:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0015007:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001500b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001500f:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0015017:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001501e:	8d 50 01             	lea    edx,[eax+0x1]
c0015021:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015028:	8a 00                	mov    al,BYTE PTR [eax]
c001502a:	0f b6 c0             	movzx  eax,al
c001502d:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c0015032:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015039:	8d 50 01             	lea    edx,[eax+0x1]
c001503c:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015043:	8a 00                	mov    al,BYTE PTR [eax]
c0015045:	0f b6 c0             	movzx  eax,al
c0015048:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001504d:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c0015052:	c1 e0 08             	shl    eax,0x8
c0015055:	89 c2                	mov    edx,eax
c0015057:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001505b:	09 d0                	or     eax,edx
c001505d:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0015064:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0015068:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c0015070:	75 46                	jne    c00150b8 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0015072:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015079:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001507c:	66 3d dc 05          	cmp    ax,0x5dc
c0015080:	77 16                	ja     c0015098 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c0015082:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015089:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001508c:	0f b7 c0             	movzx  eax,ax
c001508f:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0015096:	eb 20                	jmp    c00150b8 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0015098:	83 ec 0c             	sub    esp,0xc
c001509b:	68 d0 58 02 c0       	push   0xc00258d0
c00150a0:	e8 52 7c ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c00150a5:	83 c4 10             	add    esp,0x10
c00150a8:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00150af:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c00150b3:	e9 18 01 00 00       	jmp    c00151d0 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c00150b8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00150bf:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00150c6:	8b 12                	mov    edx,DWORD PTR [edx]
c00150c8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00150cc:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c00150d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00150d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00150db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00150e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00150e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00150eb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00150ef:	89 c6                	mov    esi,eax
c00150f1:	89 d7                	mov    edi,edx
c00150f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00150f5:	89 c8                	mov    eax,ecx
c00150f7:	89 fa                	mov    edx,edi
c00150f9:	89 f3                	mov    ebx,esi
c00150fb:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00150ff:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015103:	89 04 24             	mov    DWORD PTR [esp],eax
c0015106:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001510d:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c0015114:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001511b:	8d 50 01             	lea    edx,[eax+0x1]
c001511e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015125:	8a 00                	mov    al,BYTE PTR [eax]
c0015127:	0f b6 c0             	movzx  eax,al
c001512a:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001512e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015135:	8d 50 01             	lea    edx,[eax+0x1]
c0015138:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001513f:	8a 00                	mov    al,BYTE PTR [eax]
c0015141:	0f b6 c0             	movzx  eax,al
c0015144:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0015148:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001514f:	8d 50 01             	lea    edx,[eax+0x1]
c0015152:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015159:	8a 00                	mov    al,BYTE PTR [eax]
c001515b:	0f b6 c0             	movzx  eax,al
c001515e:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0015162:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015169:	8d 50 01             	lea    edx,[eax+0x1]
c001516c:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015173:	8a 00                	mov    al,BYTE PTR [eax]
c0015175:	0f b6 c0             	movzx  eax,al
c0015178:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001517c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0015180:	c1 e0 18             	shl    eax,0x18
c0015183:	89 c2                	mov    edx,eax
c0015185:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0015189:	c1 e0 10             	shl    eax,0x10
c001518c:	09 c2                	or     edx,eax
c001518e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0015192:	c1 e0 08             	shl    eax,0x8
c0015195:	09 d0                	or     eax,edx
c0015197:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001519b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001519f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00151a6:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00151aa:	83 e8 04             	sub    eax,0x4
c00151ad:	83 ec 08             	sub    esp,0x8
c00151b0:	50                   	push   eax
c00151b1:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00151b5:	e8 da fa ff ff       	call   c0014c94 <Net::crc32Calc(unsigned char*, int)>
c00151ba:	83 c4 10             	add    esp,0x10
c00151bd:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00151c1:	0f 94 c2             	sete   dl
c00151c4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00151cb:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c00151ce:	90                   	nop
c00151cf:	90                   	nop
c00151d0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00151d7:	83 c4 70             	add    esp,0x70
c00151da:	5b                   	pop    ebx
c00151db:	5e                   	pop    esi
c00151dc:	5f                   	pop    edi
c00151dd:	c2 04 00             	ret    0x4

c00151e0 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00151e0:	55                   	push   ebp
c00151e1:	57                   	push   edi
c00151e2:	56                   	push   esi
c00151e3:	53                   	push   ebx
c00151e4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00151ea:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00151f1:	8a 1e                	mov    bl,BYTE PTR [esi]
c00151f3:	8d 6e 01             	lea    ebp,[esi+0x1]
c00151f6:	80 fb 40             	cmp    bl,0x40
c00151f9:	75 1b                	jne    c0015216 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00151fb:	8a 16                	mov    dl,BYTE PTR [esi]
c00151fd:	84 d2                	test   dl,dl
c00151ff:	0f 84 f1 00 00 00    	je     c00152f6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015205:	8d 46 01             	lea    eax,[esi+0x1]
c0015208:	80 fa 3a             	cmp    dl,0x3a
c001520b:	74 04                	je     c0015211 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001520d:	89 c6                	mov    esi,eax
c001520f:	eb ea                	jmp    c00151fb <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0015211:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015214:	89 c6                	mov    esi,eax
c0015216:	50                   	push   eax
c0015217:	6a 40                	push   0x40
c0015219:	6a 00                	push   0x0
c001521b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001521f:	50                   	push   eax
c0015220:	e8 5f b4 fe ff       	call   c0000684 <memset>
c0015225:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001522c:	31 c0                	xor    eax,eax
c001522e:	83 c4 10             	add    esp,0x10
c0015231:	8a 0f                	mov    cl,BYTE PTR [edi]
c0015233:	84 c9                	test   cl,cl
c0015235:	0f 84 bb 00 00 00    	je     c00152f6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001523b:	3d c7 00 00 00       	cmp    eax,0xc7
c0015240:	0f 8f b0 00 00 00    	jg     c00152f6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015246:	80 f9 0a             	cmp    cl,0xa
c0015249:	0f 85 98 00 00 00    	jne    c00152e7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001524f:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0015254:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0015258:	a8 df                	test   al,0xdf
c001525a:	0f 94 c1             	sete   cl
c001525d:	3c 23                	cmp    al,0x23
c001525f:	0f 94 c2             	sete   dl
c0015262:	08 d1                	or     cl,dl
c0015264:	75 4a                	jne    c00152b0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015266:	8d 50 f7             	lea    edx,[eax-0x9]
c0015269:	80 fa 01             	cmp    dl,0x1
c001526c:	76 42                	jbe    c00152b0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001526e:	3c 5b                	cmp    al,0x5b
c0015270:	75 42                	jne    c00152b4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0015272:	80 fb 40             	cmp    bl,0x40
c0015275:	75 39                	jne    c00152b0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015277:	83 ec 0c             	sub    esp,0xc
c001527a:	8d 54 24 65          	lea    edx,[esp+0x65]
c001527e:	52                   	push   edx
c001527f:	e8 1c b4 fe ff       	call   c00006a0 <strlen>
c0015284:	83 c4 10             	add    esp,0x10
c0015287:	83 f8 3f             	cmp    eax,0x3f
c001528a:	77 6a                	ja     c00152f6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001528c:	50                   	push   eax
c001528d:	50                   	push   eax
c001528e:	8d 54 24 61          	lea    edx,[esp+0x61]
c0015292:	52                   	push   edx
c0015293:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015297:	52                   	push   edx
c0015298:	e8 a3 b4 fe ff       	call   c0000740 <strcpy>
c001529d:	58                   	pop    eax
c001529e:	8d 54 24 24          	lea    edx,[esp+0x24]
c00152a2:	52                   	push   edx
c00152a3:	e8 f8 b3 fe ff       	call   c00006a0 <strlen>
c00152a8:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00152ad:	83 c4 10             	add    esp,0x10
c00152b0:	31 d2                	xor    edx,edx
c00152b2:	eb 3a                	jmp    c00152ee <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c00152b4:	80 fb 40             	cmp    bl,0x40
c00152b7:	74 06                	je     c00152bf <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c00152b9:	8d 44 24 58          	lea    eax,[esp+0x58]
c00152bd:	eb 20                	jmp    c00152df <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c00152bf:	50                   	push   eax
c00152c0:	50                   	push   eax
c00152c1:	55                   	push   ebp
c00152c2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00152c6:	50                   	push   eax
c00152c7:	e8 00 b5 fe ff       	call   c00007cc <strcmp>
c00152cc:	83 c4 10             	add    esp,0x10
c00152cf:	85 c0                	test   eax,eax
c00152d1:	75 dd                	jne    c00152b0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00152d3:	eb e4                	jmp    c00152b9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c00152d5:	8d 50 01             	lea    edx,[eax+0x1]
c00152d8:	80 f9 3d             	cmp    cl,0x3d
c00152db:	74 1d                	je     c00152fa <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c00152dd:	89 d0                	mov    eax,edx
c00152df:	8a 08                	mov    cl,BYTE PTR [eax]
c00152e1:	84 c9                	test   cl,cl
c00152e3:	75 f0                	jne    c00152d5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c00152e5:	eb 0f                	jmp    c00152f6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00152e7:	8d 50 01             	lea    edx,[eax+0x1]
c00152ea:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00152ee:	47                   	inc    edi
c00152ef:	89 d0                	mov    eax,edx
c00152f1:	e9 3b ff ff ff       	jmp    c0015231 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c00152f6:	31 c0                	xor    eax,eax
c00152f8:	eb 33                	jmp    c001532d <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c00152fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00152fe:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015301:	50                   	push   eax
c0015302:	50                   	push   eax
c0015303:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015307:	50                   	push   eax
c0015308:	56                   	push   esi
c0015309:	e8 be b4 fe ff       	call   c00007cc <strcmp>
c001530e:	83 c4 10             	add    esp,0x10
c0015311:	85 c0                	test   eax,eax
c0015313:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015317:	75 97                	jne    c00152b0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015319:	51                   	push   ecx
c001531a:	51                   	push   ecx
c001531b:	52                   	push   edx
c001531c:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015323:	e8 18 b4 fe ff       	call   c0000740 <strcpy>
c0015328:	83 c4 10             	add    esp,0x10
c001532b:	b0 01                	mov    al,0x1
c001532d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015333:	5b                   	pop    ebx
c0015334:	5e                   	pop    esi
c0015335:	5f                   	pop    edi
c0015336:	5d                   	pop    ebp
c0015337:	c3                   	ret    

c0015338 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015338:	57                   	push   edi
c0015339:	56                   	push   esi
c001533a:	53                   	push   ebx
c001533b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015341:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0015348:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001534f:	53                   	push   ebx
c0015350:	e8 4b b3 fe ff       	call   c00006a0 <strlen>
c0015355:	89 34 24             	mov    DWORD PTR [esp],esi
c0015358:	89 c7                	mov    edi,eax
c001535a:	e8 41 b3 fe ff       	call   c00006a0 <strlen>
c001535f:	83 c4 10             	add    esp,0x10
c0015362:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015366:	3d ff 00 00 00       	cmp    eax,0xff
c001536b:	0f 87 d3 00 00 00    	ja     c0015444 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015371:	57                   	push   edi
c0015372:	57                   	push   edi
c0015373:	56                   	push   esi
c0015374:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015378:	56                   	push   esi
c0015379:	e8 c2 b3 fe ff       	call   c0000740 <strcpy>
c001537e:	58                   	pop    eax
c001537f:	5a                   	pop    edx
c0015380:	68 72 5c 02 c0       	push   0xc0025c72
c0015385:	56                   	push   esi
c0015386:	e8 f5 b4 fe ff       	call   c0000880 <strcat>
c001538b:	59                   	pop    ecx
c001538c:	5f                   	pop    edi
c001538d:	53                   	push   ebx
c001538e:	56                   	push   esi
c001538f:	e8 ec b4 fe ff       	call   c0000880 <strcat>
c0015394:	58                   	pop    eax
c0015395:	5a                   	pop    edx
c0015396:	68 1c 59 02 c0       	push   0xc002591c
c001539b:	56                   	push   esi
c001539c:	e8 df b4 fe ff       	call   c0000880 <strcat>
c00153a1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00153a8:	e8 5a 46 ff ff       	call   c0009a07 <malloc>
c00153ad:	83 c4 0c             	add    esp,0xc
c00153b0:	89 c3                	mov    ebx,eax
c00153b2:	ff 35 30 90 02 c0    	push   DWORD PTR ds:0xc0029030
c00153b8:	56                   	push   esi
c00153b9:	50                   	push   eax
c00153ba:	e8 a3 7e ff ff       	call   c000d262 <File::File(char const*, Process*)>
c00153bf:	83 c4 10             	add    esp,0x10
c00153c2:	85 db                	test   ebx,ebx
c00153c4:	74 7e                	je     c0015444 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00153c6:	51                   	push   ecx
c00153c7:	51                   	push   ecx
c00153c8:	6a 01                	push   0x1
c00153ca:	53                   	push   ebx
c00153cb:	e8 34 7f ff ff       	call   c000d304 <File::open(FileOpenMode)>
c00153d0:	83 c4 10             	add    esp,0x10
c00153d3:	85 c0                	test   eax,eax
c00153d5:	74 08                	je     c00153df <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00153d7:	83 ec 0c             	sub    esp,0xc
c00153da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00153dc:	53                   	push   ebx
c00153dd:	eb 5f                	jmp    c001543e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00153df:	52                   	push   edx
c00153e0:	8d 44 24 17          	lea    eax,[esp+0x17]
c00153e4:	50                   	push   eax
c00153e5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00153e9:	50                   	push   eax
c00153ea:	53                   	push   ebx
c00153eb:	e8 c0 81 ff ff       	call   c000d5b0 <File::stat(unsigned long long*, bool*)>
c00153f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00153f4:	83 c4 10             	add    esp,0x10
c00153f7:	89 c1                	mov    ecx,eax
c00153f9:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00153fd:	74 31                	je     c0015430 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00153ff:	83 ec 0c             	sub    esp,0xc
c0015402:	50                   	push   eax
c0015403:	e8 ff 45 ff ff       	call   c0009a07 <malloc>
c0015408:	89 c6                	mov    esi,eax
c001540a:	58                   	pop    eax
c001540b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001540d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0015411:	52                   	push   edx
c0015412:	56                   	push   esi
c0015413:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015417:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001541b:	53                   	push   ebx
c001541c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001541f:	83 c4 20             	add    esp,0x20
c0015422:	85 c0                	test   eax,eax
c0015424:	75 0a                	jne    c0015430 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015426:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001542a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001542e:	74 18                	je     c0015448 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0015430:	83 ec 0c             	sub    esp,0xc
c0015433:	53                   	push   ebx
c0015434:	e8 29 7f ff ff       	call   c000d362 <File::close()>
c0015439:	8b 03                	mov    eax,DWORD PTR [ebx]
c001543b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001543e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015441:	83 c4 10             	add    esp,0x10
c0015444:	31 c0                	xor    eax,eax
c0015446:	eb 3b                	jmp    c0015483 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0015448:	83 ec 0c             	sub    esp,0xc
c001544b:	53                   	push   ebx
c001544c:	e8 11 7f ff ff       	call   c000d362 <File::close()>
c0015451:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015453:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015456:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015459:	83 c4 0c             	add    esp,0xc
c001545c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015463:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001546a:	56                   	push   esi
c001546b:	e8 70 fd ff ff       	call   c00151e0 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015470:	89 34 24             	mov    DWORD PTR [esp],esi
c0015473:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015477:	e8 9b 45 ff ff       	call   c0009a17 <free>
c001547c:	83 c4 10             	add    esp,0x10
c001547f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015483:	81 c4 20 01 00 00    	add    esp,0x120
c0015489:	5b                   	pop    ebx
c001548a:	5e                   	pop    esi
c001548b:	5f                   	pop    edi
c001548c:	c3                   	ret    

c001548d <Reg::getLine(char*, char*, char*)>:
c001548d:	57                   	push   edi
c001548e:	56                   	push   esi
c001548f:	53                   	push   ebx
c0015490:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015494:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015498:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001549c:	57                   	push   edi
c001549d:	56                   	push   esi
c001549e:	53                   	push   ebx
c001549f:	68 21 59 02 c0       	push   0xc0025921
c00154a4:	e8 8f fe ff ff       	call   c0015338 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00154a9:	83 c4 10             	add    esp,0x10
c00154ac:	84 c0                	test   al,al
c00154ae:	75 10                	jne    c00154c0 <Reg::getLine(char*, char*, char*)+0x33>
c00154b0:	57                   	push   edi
c00154b1:	56                   	push   esi
c00154b2:	53                   	push   ebx
c00154b3:	68 46 59 02 c0       	push   0xc0025946
c00154b8:	e8 7b fe ff ff       	call   c0015338 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00154bd:	83 c4 10             	add    esp,0x10
c00154c0:	5b                   	pop    ebx
c00154c1:	5e                   	pop    esi
c00154c2:	5f                   	pop    edi
c00154c3:	c3                   	ret    

c00154c4 <Reg::readInt(char*, char*, int*)>:
c00154c4:	55                   	push   ebp
c00154c5:	57                   	push   edi
c00154c6:	56                   	push   esi
c00154c7:	53                   	push   ebx
c00154c8:	81 ec f0 00 00 00    	sub    esp,0xf0
c00154ce:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00154d2:	57                   	push   edi
c00154d3:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00154da:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00154e1:	e8 a7 ff ff ff       	call   c001548d <Reg::getLine(char*, char*, char*)>
c00154e6:	83 c4 10             	add    esp,0x10
c00154e9:	84 c0                	test   al,al
c00154eb:	0f 84 b3 00 00 00    	je     c00155a4 <Reg::readInt(char*, char*, int*)+0xe0>
c00154f1:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00154f5:	80 fa 2b             	cmp    dl,0x2b
c00154f8:	74 0c                	je     c0015506 <Reg::readInt(char*, char*, int*)+0x42>
c00154fa:	80 fa 2d             	cmp    dl,0x2d
c00154fd:	75 0e                	jne    c001550d <Reg::readInt(char*, char*, int*)+0x49>
c00154ff:	ba 01 00 00 00       	mov    edx,0x1
c0015504:	eb 0b                	jmp    c0015511 <Reg::readInt(char*, char*, int*)+0x4d>
c0015506:	ba 01 00 00 00       	mov    edx,0x1
c001550b:	eb 02                	jmp    c001550f <Reg::readInt(char*, char*, int*)+0x4b>
c001550d:	31 d2                	xor    edx,edx
c001550f:	31 c0                	xor    eax,eax
c0015511:	be 0a 00 00 00       	mov    esi,0xa
c0015516:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001551b:	75 20                	jne    c001553d <Reg::readInt(char*, char*, int*)+0x79>
c001551d:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015521:	80 f9 78             	cmp    cl,0x78
c0015524:	75 0a                	jne    c0015530 <Reg::readInt(char*, char*, int*)+0x6c>
c0015526:	83 c2 02             	add    edx,0x2
c0015529:	be 10 00 00 00       	mov    esi,0x10
c001552e:	eb 0d                	jmp    c001553d <Reg::readInt(char*, char*, int*)+0x79>
c0015530:	80 f9 62             	cmp    cl,0x62
c0015533:	75 08                	jne    c001553d <Reg::readInt(char*, char*, int*)+0x79>
c0015535:	83 c2 02             	add    edx,0x2
c0015538:	be 02 00 00 00       	mov    esi,0x2
c001553d:	01 d7                	add    edi,edx
c001553f:	31 d2                	xor    edx,edx
c0015541:	8a 1f                	mov    bl,BYTE PTR [edi]
c0015543:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0015547:	80 fb 0d             	cmp    bl,0xd
c001554a:	0f 94 c3             	sete   bl
c001554d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015552:	0f 94 c1             	sete   cl
c0015555:	08 cb                	or     bl,cl
c0015557:	75 3a                	jne    c0015593 <Reg::readInt(char*, char*, int*)+0xcf>
c0015559:	0f af d6             	imul   edx,esi
c001555c:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015561:	83 fe 10             	cmp    esi,0x10
c0015564:	75 26                	jne    c001558c <Reg::readInt(char*, char*, int*)+0xc8>
c0015566:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001556a:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001556d:	89 e9                	mov    ecx,ebp
c001556f:	80 f9 05             	cmp    cl,0x5
c0015572:	77 06                	ja     c001557a <Reg::readInt(char*, char*, int*)+0xb6>
c0015574:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015578:	eb 16                	jmp    c0015590 <Reg::readInt(char*, char*, int*)+0xcc>
c001557a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001557e:	83 e9 61             	sub    ecx,0x61
c0015581:	80 f9 05             	cmp    cl,0x5
c0015584:	77 06                	ja     c001558c <Reg::readInt(char*, char*, int*)+0xc8>
c0015586:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001558a:	eb 04                	jmp    c0015590 <Reg::readInt(char*, char*, int*)+0xcc>
c001558c:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0015590:	47                   	inc    edi
c0015591:	eb ae                	jmp    c0015541 <Reg::readInt(char*, char*, int*)+0x7d>
c0015593:	84 c0                	test   al,al
c0015595:	74 02                	je     c0015599 <Reg::readInt(char*, char*, int*)+0xd5>
c0015597:	f7 da                	neg    edx
c0015599:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00155a0:	89 10                	mov    DWORD PTR [eax],edx
c00155a2:	88 d8                	mov    al,bl
c00155a4:	81 c4 ec 00 00 00    	add    esp,0xec
c00155aa:	5b                   	pop    ebx
c00155ab:	5e                   	pop    esi
c00155ac:	5f                   	pop    edi
c00155ad:	5d                   	pop    ebp
c00155ae:	c3                   	ret    

c00155af <Reg::readString(char*, char*, char*, int)>:
c00155af:	57                   	push   edi
c00155b0:	56                   	push   esi
c00155b1:	53                   	push   ebx
c00155b2:	81 ec d4 00 00 00    	sub    esp,0xd4
c00155b8:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00155bf:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00155c3:	57                   	push   edi
c00155c4:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00155cb:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00155d2:	e8 b6 fe ff ff       	call   c001548d <Reg::getLine(char*, char*, char*)>
c00155d7:	83 c4 10             	add    esp,0x10
c00155da:	89 c6                	mov    esi,eax
c00155dc:	84 c0                	test   al,al
c00155de:	74 44                	je     c0015624 <Reg::readString(char*, char*, char*, int)+0x75>
c00155e0:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00155e7:	31 c0                	xor    eax,eax
c00155e9:	4a                   	dec    edx
c00155ea:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00155ed:	84 c9                	test   cl,cl
c00155ef:	74 0f                	je     c0015600 <Reg::readString(char*, char*, char*, int)+0x51>
c00155f1:	39 c2                	cmp    edx,eax
c00155f3:	7e 0b                	jle    c0015600 <Reg::readString(char*, char*, char*, int)+0x51>
c00155f5:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00155f8:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00155fd:	40                   	inc    eax
c00155fe:	eb ea                	jmp    c00155ea <Reg::readString(char*, char*, char*, int)+0x3b>
c0015600:	83 ec 0c             	sub    esp,0xc
c0015603:	53                   	push   ebx
c0015604:	e8 97 b0 fe ff       	call   c00006a0 <strlen>
c0015609:	83 c4 10             	add    esp,0x10
c001560c:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0015611:	75 11                	jne    c0015624 <Reg::readString(char*, char*, char*, int)+0x75>
c0015613:	83 ec 0c             	sub    esp,0xc
c0015616:	53                   	push   ebx
c0015617:	e8 84 b0 fe ff       	call   c00006a0 <strlen>
c001561c:	83 c4 10             	add    esp,0x10
c001561f:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0015624:	81 c4 d0 00 00 00    	add    esp,0xd0
c001562a:	89 f0                	mov    eax,esi
c001562c:	5b                   	pop    ebx
c001562d:	5e                   	pop    esi
c001562e:	5f                   	pop    edi
c001562f:	c3                   	ret    

c0015630 <Reg::readBool(char*, char*, bool*)>:
c0015630:	83 ec 20             	sub    esp,0x20
c0015633:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015637:	50                   	push   eax
c0015638:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001563c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015640:	e8 7f fe ff ff       	call   c00154c4 <Reg::readInt(char*, char*, int*)>
c0015645:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001564a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001564e:	0f 95 02             	setne  BYTE PTR [edx]
c0015651:	83 c4 2c             	add    esp,0x2c
c0015654:	c3                   	ret    

c0015655 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0015655:	53                   	push   ebx
c0015656:	83 ec 1c             	sub    esp,0x1c
c0015659:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001565d:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015661:	50                   	push   eax
c0015662:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015666:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001566a:	e8 c1 ff ff ff       	call   c0015630 <Reg::readBool(char*, char*, bool*)>
c001566f:	83 c4 10             	add    esp,0x10
c0015672:	84 c0                	test   al,al
c0015674:	74 04                	je     c001567a <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0015676:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001567a:	88 d8                	mov    al,bl
c001567c:	83 c4 18             	add    esp,0x18
c001567f:	5b                   	pop    ebx
c0015680:	c3                   	ret    

c0015681 <Reg::readIntWithDefault(char*, char*, int)>:
c0015681:	53                   	push   ebx
c0015682:	83 ec 1c             	sub    esp,0x1c
c0015685:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015689:	8d 44 24 10          	lea    eax,[esp+0x10]
c001568d:	50                   	push   eax
c001568e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015692:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015696:	e8 29 fe ff ff       	call   c00154c4 <Reg::readInt(char*, char*, int*)>
c001569b:	83 c4 10             	add    esp,0x10
c001569e:	84 c0                	test   al,al
c00156a0:	74 04                	je     c00156a6 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00156a2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00156a6:	89 d8                	mov    eax,ebx
c00156a8:	83 c4 18             	add    esp,0x18
c00156ab:	5b                   	pop    ebx
c00156ac:	c3                   	ret    

c00156ad <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00156ad:	57                   	push   edi
c00156ae:	56                   	push   esi
c00156af:	56                   	push   esi
c00156b0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00156b4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00156b8:	56                   	push   esi
c00156b9:	57                   	push   edi
c00156ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00156be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00156c2:	e8 e8 fe ff ff       	call   c00155af <Reg::readString(char*, char*, char*, int)>
c00156c7:	83 c4 10             	add    esp,0x10
c00156ca:	84 c0                	test   al,al
c00156cc:	75 1a                	jne    c00156e8 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00156ce:	51                   	push   ecx
c00156cf:	56                   	push   esi
c00156d0:	6a 00                	push   0x0
c00156d2:	57                   	push   edi
c00156d3:	e8 ac af fe ff       	call   c0000684 <memset>
c00156d8:	8d 4e ff             	lea    ecx,[esi-0x1]
c00156db:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00156df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00156e1:	83 c4 10             	add    esp,0x10
c00156e4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00156e8:	89 f8                	mov    eax,edi
c00156ea:	5a                   	pop    edx
c00156eb:	5e                   	pop    esi
c00156ec:	5f                   	pop    edi
c00156ed:	c3                   	ret    

c00156ee <Sys::eject(regs*)>:
c00156ee:	83 ec 0c             	sub    esp,0xc
c00156f1:	83 ca ff             	or     edx,0xffffffff
c00156f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156f8:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00156fb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015700:	83 e9 41             	sub    ecx,0x41
c0015703:	83 f9 19             	cmp    ecx,0x19
c0015706:	77 18                	ja     c0015720 <Sys::eject(regs*)+0x32>
c0015708:	8b 0c 8d 00 81 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7f00]
c001570f:	85 c9                	test   ecx,ecx
c0015711:	74 0d                	je     c0015720 <Sys::eject(regs*)+0x32>
c0015713:	83 ec 0c             	sub    esp,0xc
c0015716:	51                   	push   ecx
c0015717:	e8 ce ac ff ff       	call   c00103ea <LogicalDisk::eject()>
c001571c:	83 c4 10             	add    esp,0x10
c001571f:	99                   	cdq    
c0015720:	83 c4 0c             	add    esp,0xc
c0015723:	c3                   	ret    

c0015724 <Sys::exit(regs*)>:
c0015724:	83 ec 18             	sub    esp,0x18
c0015727:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001572b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001572e:	e8 59 36 00 00       	call   c0018d8c <terminateTask(int)>
c0015733:	83 c8 ff             	or     eax,0xffffffff
c0015736:	83 c4 1c             	add    esp,0x1c
c0015739:	89 c2                	mov    edx,eax
c001573b:	c3                   	ret    

c001573c <Sys::getCwd(regs*)>:
c001573c:	83 ec 10             	sub    esp,0x10
c001573f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015743:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015746:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015749:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001574e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015751:	e8 0e 79 ff ff       	call   c000d064 <Fs::getcwd(Process*, char*, int)>
c0015756:	83 c4 1c             	add    esp,0x1c
c0015759:	99                   	cdq    
c001575a:	c3                   	ret    

c001575b <Sys::getPID(regs*)>:
c001575b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015760:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015763:	8b 00                	mov    eax,DWORD PTR [eax]
c0015765:	99                   	cdq    
c0015766:	c3                   	ret    

c0015767 <Sys::getRAMData(regs*)>:
c0015767:	8b 0d 78 7b 02 c0    	mov    ecx,DWORD PTR ds:0xc0027b78
c001576d:	69 05 74 7b 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0027b74,0xc8
c0015777:	99                   	cdq    
c0015778:	f7 f9                	idiv   ecx
c001577a:	c1 e0 18             	shl    eax,0x18
c001577d:	09 c8                	or     eax,ecx
c001577f:	99                   	cdq    
c0015780:	c3                   	ret    

c0015781 <Sys::getVGAPtr(regs*)>:
c0015781:	55                   	push   ebp
c0015782:	57                   	push   edi
c0015783:	56                   	push   esi
c0015784:	53                   	push   ebx
c0015785:	83 ec 18             	sub    esp,0x18
c0015788:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001578c:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001578f:	e8 fc 30 00 00       	call   c0018890 <Thr::processFromPID(int)>
c0015794:	83 c4 10             	add    esp,0x10
c0015797:	89 c1                	mov    ecx,eax
c0015799:	b8 01 00 00 00       	mov    eax,0x1
c001579e:	85 c9                	test   ecx,ecx
c00157a0:	74 59                	je     c00157fb <Sys::getVGAPtr(regs*)+0x7a>
c00157a2:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c00157a8:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00157ac:	74 0c                	je     c00157ba <Sys::getVGAPtr(regs*)+0x39>
c00157ae:	83 ec 0c             	sub    esp,0xc
c00157b1:	53                   	push   ebx
c00157b2:	e8 4a 53 ff ff       	call   c000ab01 <setActiveTerminal(VgaText*)>
c00157b7:	83 c4 10             	add    esp,0x10
c00157ba:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00157bd:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c00157c0:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00157c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00157c7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00157ca:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00157cd:	81 c3 82 00 00 00    	add    ebx,0x82
c00157d3:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00157d9:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00157dc:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c00157df:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00157e5:	50                   	push   eax
c00157e6:	50                   	push   eax
c00157e7:	53                   	push   ebx
c00157e8:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00157eb:	05 a8 0f 00 00       	add    eax,0xfa8
c00157f0:	50                   	push   eax
c00157f1:	e8 4a af fe ff       	call   c0000740 <strcpy>
c00157f6:	83 c4 10             	add    esp,0x10
c00157f9:	31 c0                	xor    eax,eax
c00157fb:	83 c4 0c             	add    esp,0xc
c00157fe:	31 d2                	xor    edx,edx
c0015800:	5b                   	pop    ebx
c0015801:	5e                   	pop    esi
c0015802:	5f                   	pop    edi
c0015803:	5d                   	pop    ebp
c0015804:	c3                   	ret    

c0015805 <Sys::loadDLL(regs*)>:
c0015805:	56                   	push   esi
c0015806:	53                   	push   ebx
c0015807:	31 d2                	xor    edx,edx
c0015809:	51                   	push   ecx
c001580a:	b8 01 00 00 00       	mov    eax,0x1
c001580f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015813:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0015817:	0f 84 8c 00 00 00    	je     c00158a9 <Sys::loadDLL(regs*)+0xa4>
c001581d:	83 ec 0c             	sub    esp,0xc
c0015820:	68 14 01 00 00       	push   0x114
c0015825:	e8 dd 41 ff ff       	call   c0009a07 <malloc>
c001582a:	83 c4 0c             	add    esp,0xc
c001582d:	89 c3                	mov    ebx,eax
c001582f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015834:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015837:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001583a:	53                   	push   ebx
c001583b:	e8 22 7a ff ff       	call   c000d262 <File::File(char const*, Process*)>
c0015840:	83 c4 10             	add    esp,0x10
c0015843:	31 d2                	xor    edx,edx
c0015845:	b8 02 00 00 00       	mov    eax,0x2
c001584a:	85 db                	test   ebx,ebx
c001584c:	74 5b                	je     c00158a9 <Sys::loadDLL(regs*)+0xa4>
c001584e:	83 ec 0c             	sub    esp,0xc
c0015851:	53                   	push   ebx
c0015852:	e8 1b 7d ff ff       	call   c000d572 <File::exists()>
c0015857:	83 c4 10             	add    esp,0x10
c001585a:	84 c0                	test   al,al
c001585c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001585e:	75 11                	jne    c0015871 <Sys::loadDLL(regs*)+0x6c>
c0015860:	83 ec 0c             	sub    esp,0xc
c0015863:	53                   	push   ebx
c0015864:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015867:	83 c4 10             	add    esp,0x10
c001586a:	b8 03 00 00 00       	mov    eax,0x3
c001586f:	eb 36                	jmp    c00158a7 <Sys::loadDLL(regs*)+0xa2>
c0015871:	83 ec 0c             	sub    esp,0xc
c0015874:	53                   	push   ebx
c0015875:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015878:	58                   	pop    eax
c0015879:	5a                   	pop    edx
c001587a:	6a 00                	push   0x0
c001587c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001587f:	e8 0a 22 00 00       	call   c0017a8e <Thr::loadDLL(char const*, bool)>
c0015884:	83 c4 10             	add    esp,0x10
c0015887:	89 c1                	mov    ecx,eax
c0015889:	31 d2                	xor    edx,edx
c001588b:	b8 04 00 00 00       	mov    eax,0x4
c0015890:	85 c9                	test   ecx,ecx
c0015892:	74 15                	je     c00158a9 <Sys::loadDLL(regs*)+0xa4>
c0015894:	53                   	push   ebx
c0015895:	53                   	push   ebx
c0015896:	ff 35 48 7b 02 c0    	push   DWORD PTR ds:0xc0027b48
c001589c:	51                   	push   ecx
c001589d:	e8 1d 24 00 00       	call   c0017cbf <Thr::executeDLL(unsigned long, void*)>
c00158a2:	83 c4 10             	add    esp,0x10
c00158a5:	31 c0                	xor    eax,eax
c00158a7:	31 d2                	xor    edx,edx
c00158a9:	59                   	pop    ecx
c00158aa:	5b                   	pop    ebx
c00158ab:	5e                   	pop    esi
c00158ac:	c3                   	ret    

c00158ad <Sys::read(regs*)>:
c00158ad:	57                   	push   edi
c00158ae:	56                   	push   esi
c00158af:	53                   	push   ebx
c00158b0:	83 ec 10             	sub    esp,0x10
c00158b3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00158b7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00158ba:	83 f8 02             	cmp    eax,0x2
c00158bd:	77 10                	ja     c00158cf <Sys::read(regs*)+0x22>
c00158bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158c4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158c7:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00158cd:	eb 0e                	jmp    c00158dd <Sys::read(regs*)+0x30>
c00158cf:	83 ec 0c             	sub    esp,0xc
c00158d2:	50                   	push   eax
c00158d3:	e8 a3 5f ff ff       	call   c000b87b <getFromFileDescriptor(int)>
c00158d8:	83 c4 10             	add    esp,0x10
c00158db:	89 c1                	mov    ecx,eax
c00158dd:	83 c8 ff             	or     eax,0xffffffff
c00158e0:	85 c9                	test   ecx,ecx
c00158e2:	89 c2                	mov    edx,eax
c00158e4:	74 28                	je     c001590e <Sys::read(regs*)+0x61>
c00158e6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00158ee:	31 ff                	xor    edi,edi
c00158f0:	83 ec 0c             	sub    esp,0xc
c00158f3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00158f5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00158f9:	52                   	push   edx
c00158fa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00158fd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015900:	57                   	push   edi
c0015901:	56                   	push   esi
c0015902:	51                   	push   ecx
c0015903:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015906:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001590a:	83 c4 20             	add    esp,0x20
c001590d:	99                   	cdq    
c001590e:	83 c4 10             	add    esp,0x10
c0015911:	5b                   	pop    ebx
c0015912:	5e                   	pop    esi
c0015913:	5f                   	pop    edi
c0015914:	c3                   	ret    

c0015915 <Sys::sbrk(regs*)>:
c0015915:	56                   	push   esi
c0015916:	53                   	push   ebx
c0015917:	50                   	push   eax
c0015918:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001591d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015921:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015924:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0015927:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001592d:	85 db                	test   ebx,ebx
c001592f:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0015932:	74 02                	je     c0015936 <Sys::sbrk(regs*)+0x21>
c0015934:	79 06                	jns    c001593c <Sys::sbrk(regs*)+0x27>
c0015936:	89 f0                	mov    eax,esi
c0015938:	31 d2                	xor    edx,edx
c001593a:	eb 2a                	jmp    c0015966 <Sys::sbrk(regs*)+0x51>
c001593c:	83 c8 ff             	or     eax,0xffffffff
c001593f:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0015945:	89 c2                	mov    edx,eax
c0015947:	77 1d                	ja     c0015966 <Sys::sbrk(regs*)+0x51>
c0015949:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001594f:	50                   	push   eax
c0015950:	c1 ea 0c             	shr    edx,0xc
c0015953:	68 07 0c 00 00       	push   0xc07
c0015958:	52                   	push   edx
c0015959:	51                   	push   ecx
c001595a:	e8 1b 68 ff ff       	call   c000c17a <VAS::allocatePages(int, int)>
c001595f:	89 f0                	mov    eax,esi
c0015961:	31 d2                	xor    edx,edx
c0015963:	83 c4 10             	add    esp,0x10
c0015966:	59                   	pop    ecx
c0015967:	5b                   	pop    ebx
c0015968:	5e                   	pop    esi
c0015969:	c3                   	ret    

c001596a <Sys::setCwd(regs*)>:
c001596a:	83 ec 14             	sub    esp,0x14
c001596d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015971:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015974:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015979:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001597c:	e8 90 7c ff ff       	call   c000d611 <Fs::setcwd(Process*, char*)>
c0015981:	83 c4 1c             	add    esp,0x1c
c0015984:	99                   	cdq    
c0015985:	c3                   	ret    

c0015986 <Sys::setTime(regs*)>:
c0015986:	55                   	push   ebp
c0015987:	31 c9                	xor    ecx,ecx
c0015989:	57                   	push   edi
c001598a:	bd 0c 00 00 00       	mov    ebp,0xc
c001598f:	56                   	push   esi
c0015990:	53                   	push   ebx
c0015991:	31 db                	xor    ebx,ebx
c0015993:	83 ec 10             	sub    esp,0x10
c0015996:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001599a:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001599d:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00159a0:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00159a3:	89 c2                	mov    edx,eax
c00159a5:	66 81 ef 6c 07       	sub    di,0x76c
c00159aa:	83 e2 1f             	and    edx,0x1f
c00159ad:	c1 e7 10             	shl    edi,0x10
c00159b0:	42                   	inc    edx
c00159b1:	c1 e8 05             	shr    eax,0x5
c00159b4:	88 d1                	mov    cl,dl
c00159b6:	31 d2                	xor    edx,edx
c00159b8:	f7 f5                	div    ebp
c00159ba:	89 dd                	mov    ebp,ebx
c00159bc:	88 d5                	mov    ch,dl
c00159be:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00159c4:	0f b7 c1             	movzx  eax,cx
c00159c7:	31 d2                	xor    edx,edx
c00159c9:	09 f8                	or     eax,edi
c00159cb:	bf 3c 00 00 00       	mov    edi,0x3c
c00159d0:	89 c1                	mov    ecx,eax
c00159d2:	89 f0                	mov    eax,esi
c00159d4:	f7 f7                	div    edi
c00159d6:	c1 e2 10             	shl    edx,0x10
c00159d9:	09 d5                	or     ebp,edx
c00159db:	31 d2                	xor    edx,edx
c00159dd:	89 eb                	mov    ebx,ebp
c00159df:	f7 f7                	div    edi
c00159e1:	bf 10 0e 00 00       	mov    edi,0xe10
c00159e6:	88 d7                	mov    bh,dl
c00159e8:	89 f0                	mov    eax,esi
c00159ea:	31 d2                	xor    edx,edx
c00159ec:	f7 f7                	div    edi
c00159ee:	bf 18 00 00 00       	mov    edi,0x18
c00159f3:	31 d2                	xor    edx,edx
c00159f5:	f7 f7                	div    edi
c00159f7:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c00159fc:	88 d3                	mov    bl,dl
c00159fe:	53                   	push   ebx
c00159ff:	51                   	push   ecx
c0015a00:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0015a06:	e8 53 84 ff ff       	call   c000de5e <Clock::setTimeInDatetimeLocal(datetime_t)>
c0015a0b:	83 c4 1c             	add    esp,0x1c
c0015a0e:	83 f0 01             	xor    eax,0x1
c0015a11:	5b                   	pop    ebx
c0015a12:	0f b6 c0             	movzx  eax,al
c0015a15:	5e                   	pop    esi
c0015a16:	31 d2                	xor    edx,edx
c0015a18:	5f                   	pop    edi
c0015a19:	5d                   	pop    ebp
c0015a1a:	c3                   	ret    

c0015a1b <Sys::timezone(regs*)>:
c0015a1b:	53                   	push   ebx
c0015a1c:	83 ec 08             	sub    esp,0x8
c0015a1f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015a23:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0015a27:	75 17                	jne    c0015a40 <Sys::timezone(regs*)+0x25>
c0015a29:	83 ec 0c             	sub    esp,0xc
c0015a2c:	68 61 59 02 c0       	push   0xc0025961
c0015a31:	e8 c1 72 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0015a36:	83 c8 ff             	or     eax,0xffffffff
c0015a39:	83 c4 10             	add    esp,0x10
c0015a3c:	89 c2                	mov    edx,eax
c0015a3e:	eb 20                	jmp    c0015a60 <Sys::timezone(regs*)+0x45>
c0015a40:	83 ec 0c             	sub    esp,0xc
c0015a43:	68 76 59 02 c0       	push   0xc0025976
c0015a48:	e8 aa 72 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0015a4d:	58                   	pop    eax
c0015a4e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015a51:	e8 6a 81 ff ff       	call   c000dbc0 <User::loadClockSettings(int)>
c0015a56:	83 c4 10             	add    esp,0x10
c0015a59:	b8 01 00 00 00       	mov    eax,0x1
c0015a5e:	31 d2                	xor    edx,edx
c0015a60:	83 c4 08             	add    esp,0x8
c0015a63:	5b                   	pop    ebx
c0015a64:	c3                   	ret    

c0015a65 <Sys::write(regs*)>:
c0015a65:	57                   	push   edi
c0015a66:	56                   	push   esi
c0015a67:	53                   	push   ebx
c0015a68:	83 ec 10             	sub    esp,0x10
c0015a6b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015a6f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015a72:	83 f8 02             	cmp    eax,0x2
c0015a75:	77 10                	ja     c0015a87 <Sys::write(regs*)+0x22>
c0015a77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a7c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015a7f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015a85:	eb 0e                	jmp    c0015a95 <Sys::write(regs*)+0x30>
c0015a87:	83 ec 0c             	sub    esp,0xc
c0015a8a:	50                   	push   eax
c0015a8b:	e8 eb 5d ff ff       	call   c000b87b <getFromFileDescriptor(int)>
c0015a90:	83 c4 10             	add    esp,0x10
c0015a93:	89 c1                	mov    ecx,eax
c0015a95:	83 c8 ff             	or     eax,0xffffffff
c0015a98:	85 c9                	test   ecx,ecx
c0015a9a:	89 c2                	mov    edx,eax
c0015a9c:	74 28                	je     c0015ac6 <Sys::write(regs*)+0x61>
c0015a9e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015aa6:	31 ff                	xor    edi,edi
c0015aa8:	83 ec 0c             	sub    esp,0xc
c0015aab:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015aad:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015ab1:	52                   	push   edx
c0015ab2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015ab5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015ab8:	57                   	push   edi
c0015ab9:	56                   	push   esi
c0015aba:	51                   	push   ecx
c0015abb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015abe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015ac2:	83 c4 20             	add    esp,0x20
c0015ac5:	99                   	cdq    
c0015ac6:	83 c4 10             	add    esp,0x10
c0015ac9:	5b                   	pop    ebx
c0015aca:	5e                   	pop    esi
c0015acb:	5f                   	pop    edi
c0015acc:	c3                   	ret    

c0015acd <Sys::wsbe(regs*)>:
c0015acd:	57                   	push   edi
c0015ace:	b9 0b 00 00 00       	mov    ecx,0xb
c0015ad3:	56                   	push   esi
c0015ad4:	be b5 59 02 c0       	mov    esi,0xc00259b5
c0015ad9:	53                   	push   ebx
c0015ada:	83 ec 30             	sub    esp,0x30
c0015add:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015ae1:	fc                   	cld    
c0015ae2:	83 ec 0c             	sub    esp,0xc
c0015ae5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015ae7:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015aeb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015af0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015af3:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0015af9:	8b 06                	mov    eax,DWORD PTR [esi]
c0015afb:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0015afe:	57                   	push   edi
c0015aff:	e8 9c ab fe ff       	call   c00006a0 <strlen>
c0015b04:	5a                   	pop    edx
c0015b05:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015b09:	52                   	push   edx
c0015b0a:	31 d2                	xor    edx,edx
c0015b0c:	57                   	push   edi
c0015b0d:	52                   	push   edx
c0015b0e:	50                   	push   eax
c0015b0f:	56                   	push   esi
c0015b10:	ff d3                	call   ebx
c0015b12:	83 c4 14             	add    esp,0x14
c0015b15:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015b19:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015b1c:	e8 6b 32 00 00       	call   c0018d8c <terminateTask(int)>
c0015b21:	83 c4 40             	add    esp,0x40
c0015b24:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015b29:	5b                   	pop    ebx
c0015b2a:	31 d2                	xor    edx,edx
c0015b2c:	5e                   	pop    esi
c0015b2d:	5f                   	pop    edi
c0015b2e:	c3                   	ret    

c0015b2f <Sys::yield(regs*)>:
c0015b2f:	83 ec 0c             	sub    esp,0xc
c0015b32:	fa                   	cli    
c0015b33:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c0015b39:	e8 36 29 00 00       	call   c0018474 <schedule()>
c0015b3e:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c0015b43:	48                   	dec    eax
c0015b44:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c0015b49:	75 01                	jne    c0015b4c <Sys::yield(regs*)+0x1d>
c0015b4b:	fb                   	sti    
c0015b4c:	8b 15 6c 81 02 c0    	mov    edx,DWORD PTR ds:0xc002816c
c0015b52:	83 c4 0c             	add    esp,0xc
c0015b55:	89 d0                	mov    eax,edx
c0015b57:	c1 ea 11             	shr    edx,0x11
c0015b5a:	c1 e0 07             	shl    eax,0x7
c0015b5d:	25 80 30 0f 00       	and    eax,0xf3080
c0015b62:	31 d0                	xor    eax,edx
c0015b64:	31 d2                	xor    edx,edx
c0015b66:	c3                   	ret    

c0015b67 <sysCallSeekDir(regs*)>:
c0015b67:	31 c0                	xor    eax,eax
c0015b69:	31 d2                	xor    edx,edx
c0015b6b:	c3                   	ret    

c0015b6c <sysCallTellDir(regs*)>:
c0015b6c:	31 c0                	xor    eax,eax
c0015b6e:	31 d2                	xor    edx,edx
c0015b70:	c3                   	ret    

c0015b71 <sysCallVerify(regs*)>:
c0015b71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b75:	31 d2                	xor    edx,edx
c0015b77:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015b7a:	c3                   	ret    

c0015b7b <sysCallGetArgc(regs*)>:
c0015b7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b80:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015b83:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0015b89:	99                   	cdq    
c0015b8a:	c3                   	ret    

c0015b8b <sysFormatDisk(regs*)>:
c0015b8b:	56                   	push   esi
c0015b8c:	53                   	push   ebx
c0015b8d:	53                   	push   ebx
c0015b8e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015b92:	8b 1d 74 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027c74
c0015b98:	eb 25                	jmp    c0015bbf <sysFormatDisk(regs*)+0x34>
c0015b9a:	83 ec 0c             	sub    esp,0xc
c0015b9d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015ba0:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015ba2:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015ba5:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015ba8:	50                   	push   eax
c0015ba9:	ff 34 85 00 81 02 c0 	push   DWORD PTR [eax*4-0x3ffd7f00]
c0015bb0:	53                   	push   ebx
c0015bb1:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0015bb4:	83 c4 20             	add    esp,0x20
c0015bb7:	83 f8 08             	cmp    eax,0x8
c0015bba:	75 12                	jne    c0015bce <sysFormatDisk(regs*)+0x43>
c0015bbc:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015bbf:	85 db                	test   ebx,ebx
c0015bc1:	75 d7                	jne    c0015b9a <sysFormatDisk(regs*)+0xf>
c0015bc3:	59                   	pop    ecx
c0015bc4:	b8 03 00 00 00       	mov    eax,0x3
c0015bc9:	31 d2                	xor    edx,edx
c0015bcb:	5b                   	pop    ebx
c0015bcc:	5e                   	pop    esi
c0015bcd:	c3                   	ret    
c0015bce:	85 c0                	test   eax,eax
c0015bd0:	74 1b                	je     c0015bed <sysFormatDisk(regs*)+0x62>
c0015bd2:	83 f8 09             	cmp    eax,0x9
c0015bd5:	74 0b                	je     c0015be2 <sysFormatDisk(regs*)+0x57>
c0015bd7:	59                   	pop    ecx
c0015bd8:	b8 02 00 00 00       	mov    eax,0x2
c0015bdd:	31 d2                	xor    edx,edx
c0015bdf:	5b                   	pop    ebx
c0015be0:	5e                   	pop    esi
c0015be1:	c3                   	ret    
c0015be2:	59                   	pop    ecx
c0015be3:	b8 01 00 00 00       	mov    eax,0x1
c0015be8:	31 d2                	xor    edx,edx
c0015bea:	5b                   	pop    ebx
c0015beb:	5e                   	pop    esi
c0015bec:	c3                   	ret    
c0015bed:	59                   	pop    ecx
c0015bee:	31 c0                	xor    eax,eax
c0015bf0:	31 d2                	xor    edx,edx
c0015bf2:	5b                   	pop    ebx
c0015bf3:	5e                   	pop    esi
c0015bf4:	c3                   	ret    

c0015bf5 <sysSetDiskVolumeLabel(regs*)>:
c0015bf5:	56                   	push   esi
c0015bf6:	53                   	push   ebx
c0015bf7:	53                   	push   ebx
c0015bf8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015bfc:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015bff:	83 f8 19             	cmp    eax,0x19
c0015c02:	77 2d                	ja     c0015c31 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015c04:	8b 0c 85 00 81 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7f00]
c0015c0b:	85 c9                	test   ecx,ecx
c0015c0d:	74 22                	je     c0015c31 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015c0f:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0015c12:	85 db                	test   ebx,ebx
c0015c14:	74 1b                	je     c0015c31 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015c16:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0015c1c:	85 d2                	test   edx,edx
c0015c1e:	74 11                	je     c0015c31 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015c20:	8b 32                	mov    esi,DWORD PTR [edx]
c0015c22:	53                   	push   ebx
c0015c23:	50                   	push   eax
c0015c24:	51                   	push   ecx
c0015c25:	52                   	push   edx
c0015c26:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015c29:	83 c4 10             	add    esp,0x10
c0015c2c:	99                   	cdq    
c0015c2d:	59                   	pop    ecx
c0015c2e:	5b                   	pop    ebx
c0015c2f:	5e                   	pop    esi
c0015c30:	c3                   	ret    
c0015c31:	59                   	pop    ecx
c0015c32:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015c37:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c3c:	5b                   	pop    ebx
c0015c3d:	5e                   	pop    esi
c0015c3e:	c3                   	ret    

c0015c3f <sysGetDiskVolumeLabel(regs*)>:
c0015c3f:	57                   	push   edi
c0015c40:	56                   	push   esi
c0015c41:	53                   	push   ebx
c0015c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c46:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015c49:	83 fa 19             	cmp    edx,0x19
c0015c4c:	77 38                	ja     c0015c86 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015c4e:	8b 0c 95 00 81 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7f00]
c0015c55:	85 c9                	test   ecx,ecx
c0015c57:	74 2d                	je     c0015c86 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015c59:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015c5c:	85 db                	test   ebx,ebx
c0015c5e:	74 26                	je     c0015c86 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015c60:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0015c63:	85 f6                	test   esi,esi
c0015c65:	74 1f                	je     c0015c86 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015c67:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0015c6d:	85 c0                	test   eax,eax
c0015c6f:	74 15                	je     c0015c86 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015c71:	83 ec 0c             	sub    esp,0xc
c0015c74:	8b 38                	mov    edi,DWORD PTR [eax]
c0015c76:	56                   	push   esi
c0015c77:	53                   	push   ebx
c0015c78:	52                   	push   edx
c0015c79:	51                   	push   ecx
c0015c7a:	50                   	push   eax
c0015c7b:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0015c7e:	83 c4 20             	add    esp,0x20
c0015c81:	99                   	cdq    
c0015c82:	5b                   	pop    ebx
c0015c83:	5e                   	pop    esi
c0015c84:	5f                   	pop    edi
c0015c85:	c3                   	ret    
c0015c86:	5b                   	pop    ebx
c0015c87:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015c8c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c91:	5e                   	pop    esi
c0015c92:	5f                   	pop    edi
c0015c93:	c3                   	ret    

c0015c94 <sysShutdown(regs*)>:
c0015c94:	83 ec 0c             	sub    esp,0xc
c0015c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c9b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015c9e:	85 c0                	test   eax,eax
c0015ca0:	74 18                	je     c0015cba <sysShutdown(regs*)+0x26>
c0015ca2:	83 f8 01             	cmp    eax,0x1
c0015ca5:	74 38                	je     c0015cdf <sysShutdown(regs*)+0x4b>
c0015ca7:	83 f8 02             	cmp    eax,0x2
c0015caa:	74 24                	je     c0015cd0 <sysShutdown(regs*)+0x3c>
c0015cac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015cb1:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015cb6:	83 c4 0c             	add    esp,0xc
c0015cb9:	c3                   	ret    
c0015cba:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c0015cbf:	8b 10                	mov    edx,DWORD PTR [eax]
c0015cc1:	6a 00                	push   0x0
c0015cc3:	6a 00                	push   0x0
c0015cc5:	6a 00                	push   0x0
c0015cc7:	50                   	push   eax
c0015cc8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015ccb:	83 c4 10             	add    esp,0x10
c0015cce:	eb dc                	jmp    c0015cac <sysShutdown(regs*)+0x18>
c0015cd0:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c0015cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0015cd7:	6a 00                	push   0x0
c0015cd9:	6a 00                	push   0x0
c0015cdb:	6a 01                	push   0x1
c0015cdd:	eb e8                	jmp    c0015cc7 <sysShutdown(regs*)+0x33>
c0015cdf:	a1 80 81 02 c0       	mov    eax,ds:0xc0028180
c0015ce4:	85 c0                	test   eax,eax
c0015ce6:	74 02                	je     c0015cea <sysShutdown(regs*)+0x56>
c0015ce8:	ff d0                	call   eax
c0015cea:	31 c0                	xor    eax,eax
c0015cec:	31 d2                	xor    edx,edx
c0015cee:	83 c4 0c             	add    esp,0xc
c0015cf1:	c3                   	ret    

c0015cf2 <sysCallRealpath(regs*)>:
c0015cf2:	83 ec 0c             	sub    esp,0xc
c0015cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cf9:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015cfc:	85 d2                	test   edx,edx
c0015cfe:	74 07                	je     c0015d07 <sysCallRealpath(regs*)+0x15>
c0015d00:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015d03:	85 c0                	test   eax,eax
c0015d05:	75 0b                	jne    c0015d12 <sysCallRealpath(regs*)+0x20>
c0015d07:	b8 01 00 00 00       	mov    eax,0x1
c0015d0c:	31 d2                	xor    edx,edx
c0015d0e:	83 c4 0c             	add    esp,0xc
c0015d11:	c3                   	ret    
c0015d12:	51                   	push   ecx
c0015d13:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015d19:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015d1c:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0015d22:	51                   	push   ecx
c0015d23:	52                   	push   edx
c0015d24:	50                   	push   eax
c0015d25:	e8 8e 73 ff ff       	call   c000d0b8 <Fs::standardiseFiles(char*, char const*, char const*)>
c0015d2a:	83 c4 10             	add    esp,0x10
c0015d2d:	31 c0                	xor    eax,eax
c0015d2f:	31 d2                	xor    edx,edx
c0015d31:	83 c4 0c             	add    esp,0xc
c0015d34:	c3                   	ret    

c0015d35 <sysCallReadDir(regs*)>:
c0015d35:	53                   	push   ebx
c0015d36:	83 ec 18             	sub    esp,0x18
c0015d39:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015d3d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015d40:	83 f8 02             	cmp    eax,0x2
c0015d43:	76 60                	jbe    c0015da5 <sysCallReadDir(regs*)+0x70>
c0015d45:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0015d4c:	77 48                	ja     c0015d96 <sysCallReadDir(regs*)+0x61>
c0015d4e:	83 ec 0c             	sub    esp,0xc
c0015d51:	50                   	push   eax
c0015d52:	e8 24 5b ff ff       	call   c000b87b <getFromFileDescriptor(int)>
c0015d57:	83 c4 10             	add    esp,0x10
c0015d5a:	85 c0                	test   eax,eax
c0015d5c:	74 38                	je     c0015d96 <sysCallReadDir(regs*)+0x61>
c0015d5e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015d66:	83 ec 0c             	sub    esp,0xc
c0015d69:	8b 10                	mov    edx,DWORD PTR [eax]
c0015d6b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0015d6f:	51                   	push   ecx
c0015d70:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015d73:	6a 00                	push   0x0
c0015d75:	68 10 01 00 00       	push   0x110
c0015d7a:	50                   	push   eax
c0015d7b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015d7e:	83 c4 20             	add    esp,0x20
c0015d81:	85 c0                	test   eax,eax
c0015d83:	74 29                	je     c0015dae <sysCallReadDir(regs*)+0x79>
c0015d85:	83 f8 07             	cmp    eax,0x7
c0015d88:	74 1b                	je     c0015da5 <sysCallReadDir(regs*)+0x70>
c0015d8a:	b8 02 00 00 00       	mov    eax,0x2
c0015d8f:	31 d2                	xor    edx,edx
c0015d91:	83 c4 18             	add    esp,0x18
c0015d94:	5b                   	pop    ebx
c0015d95:	c3                   	ret    
c0015d96:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d9b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015da0:	83 c4 18             	add    esp,0x18
c0015da3:	5b                   	pop    ebx
c0015da4:	c3                   	ret    
c0015da5:	b8 01 00 00 00       	mov    eax,0x1
c0015daa:	31 d2                	xor    edx,edx
c0015dac:	eb e3                	jmp    c0015d91 <sysCallReadDir(regs*)+0x5c>
c0015dae:	31 c0                	xor    eax,eax
c0015db0:	31 d2                	xor    edx,edx
c0015db2:	eb dd                	jmp    c0015d91 <sysCallReadDir(regs*)+0x5c>

c0015db4 <sysCallIsATTY(regs*)>:
c0015db4:	83 ec 0c             	sub    esp,0xc
c0015db7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dbb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015dbe:	83 f8 02             	cmp    eax,0x2
c0015dc1:	76 07                	jbe    c0015dca <sysCallIsATTY(regs*)+0x16>
c0015dc3:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015dc8:	75 26                	jne    c0015df0 <sysCallIsATTY(regs*)+0x3c>
c0015dca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015dcf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015dd2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015dd8:	85 c0                	test   eax,eax
c0015dda:	74 24                	je     c0015e00 <sysCallIsATTY(regs*)+0x4c>
c0015ddc:	83 ec 0c             	sub    esp,0xc
c0015ddf:	8b 10                	mov    edx,DWORD PTR [eax]
c0015de1:	50                   	push   eax
c0015de2:	ff 12                	call   DWORD PTR [edx]
c0015de4:	31 d2                	xor    edx,edx
c0015de6:	0f b6 c0             	movzx  eax,al
c0015de9:	83 c4 10             	add    esp,0x10
c0015dec:	83 c4 0c             	add    esp,0xc
c0015def:	c3                   	ret    
c0015df0:	83 ec 0c             	sub    esp,0xc
c0015df3:	50                   	push   eax
c0015df4:	e8 82 5a ff ff       	call   c000b87b <getFromFileDescriptor(int)>
c0015df9:	83 c4 10             	add    esp,0x10
c0015dfc:	85 c0                	test   eax,eax
c0015dfe:	75 dc                	jne    c0015ddc <sysCallIsATTY(regs*)+0x28>
c0015e00:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015e05:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015e0a:	83 c4 0c             	add    esp,0xc
c0015e0d:	c3                   	ret    

c0015e0e <sysCallSeek(regs*)>:
c0015e0e:	53                   	push   ebx
c0015e0f:	83 ec 08             	sub    esp,0x8
c0015e12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e16:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015e19:	8d 50 fd             	lea    edx,[eax-0x3]
c0015e1c:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015e22:	77 32                	ja     c0015e56 <sysCallSeek(regs*)+0x48>
c0015e24:	83 ec 0c             	sub    esp,0xc
c0015e27:	50                   	push   eax
c0015e28:	e8 4e 5a ff ff       	call   c000b87b <getFromFileDescriptor(int)>
c0015e2d:	83 c4 0c             	add    esp,0xc
c0015e30:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015e33:	31 db                	xor    ebx,ebx
c0015e35:	53                   	push   ebx
c0015e36:	51                   	push   ecx
c0015e37:	50                   	push   eax
c0015e38:	e8 85 75 ff ff       	call   c000d3c2 <File::seek(unsigned long long)>
c0015e3d:	83 c4 10             	add    esp,0x10
c0015e40:	85 c0                	test   eax,eax
c0015e42:	0f 95 c0             	setne  al
c0015e45:	31 d2                	xor    edx,edx
c0015e47:	0f b6 c0             	movzx  eax,al
c0015e4a:	f7 d8                	neg    eax
c0015e4c:	83 d2 00             	adc    edx,0x0
c0015e4f:	83 c4 08             	add    esp,0x8
c0015e52:	f7 da                	neg    edx
c0015e54:	5b                   	pop    ebx
c0015e55:	c3                   	ret    
c0015e56:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015e5b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015e60:	83 c4 08             	add    esp,0x8
c0015e63:	5b                   	pop    ebx
c0015e64:	c3                   	ret    

c0015e65 <sysCallTell(regs*)>:
c0015e65:	53                   	push   ebx
c0015e66:	83 ec 08             	sub    esp,0x8
c0015e69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e6d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015e70:	83 f8 02             	cmp    eax,0x2
c0015e73:	76 4d                	jbe    c0015ec2 <sysCallTell(regs*)+0x5d>
c0015e75:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015e7a:	76 19                	jbe    c0015e95 <sysCallTell(regs*)+0x30>
c0015e7c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015e7f:	31 d2                	xor    edx,edx
c0015e81:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015e87:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015e8e:	31 c0                	xor    eax,eax
c0015e90:	83 c4 08             	add    esp,0x8
c0015e93:	5b                   	pop    ebx
c0015e94:	c3                   	ret    
c0015e95:	83 ec 0c             	sub    esp,0xc
c0015e98:	50                   	push   eax
c0015e99:	e8 dd 59 ff ff       	call   c000b87b <getFromFileDescriptor(int)>
c0015e9e:	5a                   	pop    edx
c0015e9f:	59                   	pop    ecx
c0015ea0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015ea3:	50                   	push   eax
c0015ea4:	e8 6f 75 ff ff       	call   c000d418 <File::tell(unsigned long long*)>
c0015ea9:	83 c4 10             	add    esp,0x10
c0015eac:	85 c0                	test   eax,eax
c0015eae:	0f 95 c0             	setne  al
c0015eb1:	31 d2                	xor    edx,edx
c0015eb3:	0f b6 c0             	movzx  eax,al
c0015eb6:	f7 d8                	neg    eax
c0015eb8:	83 d2 00             	adc    edx,0x0
c0015ebb:	83 c4 08             	add    esp,0x8
c0015ebe:	f7 da                	neg    edx
c0015ec0:	5b                   	pop    ebx
c0015ec1:	c3                   	ret    
c0015ec2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ec7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015ecc:	83 c4 08             	add    esp,0x8
c0015ecf:	5b                   	pop    ebx
c0015ed0:	c3                   	ret    

c0015ed1 <sysCallSize(regs*)>:
c0015ed1:	53                   	push   ebx
c0015ed2:	83 ec 18             	sub    esp,0x18
c0015ed5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015ed9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015edc:	83 f8 02             	cmp    eax,0x2
c0015edf:	76 53                	jbe    c0015f34 <sysCallSize(regs*)+0x63>
c0015ee1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015ee6:	76 19                	jbe    c0015f01 <sysCallSize(regs*)+0x30>
c0015ee8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015eeb:	31 d2                	xor    edx,edx
c0015eed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015ef3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015efa:	31 c0                	xor    eax,eax
c0015efc:	83 c4 18             	add    esp,0x18
c0015eff:	5b                   	pop    ebx
c0015f00:	c3                   	ret    
c0015f01:	83 ec 0c             	sub    esp,0xc
c0015f04:	50                   	push   eax
c0015f05:	e8 71 59 ff ff       	call   c000b87b <getFromFileDescriptor(int)>
c0015f0a:	83 c4 0c             	add    esp,0xc
c0015f0d:	8d 54 24 13          	lea    edx,[esp+0x13]
c0015f11:	52                   	push   edx
c0015f12:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015f15:	50                   	push   eax
c0015f16:	e8 95 76 ff ff       	call   c000d5b0 <File::stat(unsigned long long*, bool*)>
c0015f1b:	83 c4 10             	add    esp,0x10
c0015f1e:	85 c0                	test   eax,eax
c0015f20:	0f 95 c0             	setne  al
c0015f23:	31 d2                	xor    edx,edx
c0015f25:	0f b6 c0             	movzx  eax,al
c0015f28:	f7 d8                	neg    eax
c0015f2a:	83 d2 00             	adc    edx,0x0
c0015f2d:	83 c4 18             	add    esp,0x18
c0015f30:	f7 da                	neg    edx
c0015f32:	5b                   	pop    ebx
c0015f33:	c3                   	ret    
c0015f34:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f39:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015f3e:	83 c4 18             	add    esp,0x18
c0015f41:	5b                   	pop    ebx
c0015f42:	c3                   	ret    

c0015f43 <sysCallSizeFromFilename(regs*)>:
c0015f43:	57                   	push   edi
c0015f44:	56                   	push   esi
c0015f45:	53                   	push   ebx
c0015f46:	83 ec 20             	sub    esp,0x20
c0015f49:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015f4d:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0015f50:	83 fb 02             	cmp    ebx,0x2
c0015f53:	0f 86 88 00 00 00    	jbe    c0015fe1 <sysCallSizeFromFilename(regs*)+0x9e>
c0015f59:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0015f5f:	76 1b                	jbe    c0015f7c <sysCallSizeFromFilename(regs*)+0x39>
c0015f61:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015f64:	31 d2                	xor    edx,edx
c0015f66:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015f6c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015f73:	83 c4 20             	add    esp,0x20
c0015f76:	31 c0                	xor    eax,eax
c0015f78:	5b                   	pop    ebx
c0015f79:	5e                   	pop    esi
c0015f7a:	5f                   	pop    edi
c0015f7b:	c3                   	ret    
c0015f7c:	83 ec 0c             	sub    esp,0xc
c0015f7f:	68 14 01 00 00       	push   0x114
c0015f84:	e8 7e 3a ff ff       	call   c0009a07 <malloc>
c0015f89:	83 c4 0c             	add    esp,0xc
c0015f8c:	89 c7                	mov    edi,eax
c0015f8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f93:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015f96:	53                   	push   ebx
c0015f97:	57                   	push   edi
c0015f98:	e8 c5 72 ff ff       	call   c000d262 <File::File(char const*, Process*)>
c0015f9d:	83 c4 0c             	add    esp,0xc
c0015fa0:	8d 44 24 23          	lea    eax,[esp+0x23]
c0015fa4:	50                   	push   eax
c0015fa5:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015fa8:	57                   	push   edi
c0015fa9:	e8 02 76 ff ff       	call   c000d5b0 <File::stat(unsigned long long*, bool*)>
c0015fae:	83 c4 10             	add    esp,0x10
c0015fb1:	85 ff                	test   edi,edi
c0015fb3:	74 14                	je     c0015fc9 <sysCallSizeFromFilename(regs*)+0x86>
c0015fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015fb9:	8b 17                	mov    edx,DWORD PTR [edi]
c0015fbb:	83 ec 0c             	sub    esp,0xc
c0015fbe:	57                   	push   edi
c0015fbf:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015fc2:	83 c4 10             	add    esp,0x10
c0015fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fc9:	85 c0                	test   eax,eax
c0015fcb:	0f 95 c0             	setne  al
c0015fce:	31 d2                	xor    edx,edx
c0015fd0:	0f b6 c0             	movzx  eax,al
c0015fd3:	f7 d8                	neg    eax
c0015fd5:	83 d2 00             	adc    edx,0x0
c0015fd8:	83 c4 20             	add    esp,0x20
c0015fdb:	f7 da                	neg    edx
c0015fdd:	5b                   	pop    ebx
c0015fde:	5e                   	pop    esi
c0015fdf:	5f                   	pop    edi
c0015fe0:	c3                   	ret    
c0015fe1:	83 c4 20             	add    esp,0x20
c0015fe4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015fe9:	5b                   	pop    ebx
c0015fea:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015fef:	5e                   	pop    esi
c0015ff0:	5f                   	pop    edi
c0015ff1:	c3                   	ret    

c0015ff2 <sysCallClose(regs*)>:
c0015ff2:	53                   	push   ebx
c0015ff3:	83 ec 08             	sub    esp,0x8
c0015ff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ffa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015ffd:	83 f8 02             	cmp    eax,0x2
c0016000:	76 41                	jbe    c0016043 <sysCallClose(regs*)+0x51>
c0016002:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0016008:	83 fa 01             	cmp    edx,0x1
c001600b:	76 2d                	jbe    c001603a <sysCallClose(regs*)+0x48>
c001600d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016012:	77 2f                	ja     c0016043 <sysCallClose(regs*)+0x51>
c0016014:	83 ec 0c             	sub    esp,0xc
c0016017:	50                   	push   eax
c0016018:	e8 5e 58 ff ff       	call   c000b87b <getFromFileDescriptor(int)>
c001601d:	89 c3                	mov    ebx,eax
c001601f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016022:	e8 3b 73 ff ff       	call   c000d362 <File::close()>
c0016027:	83 c4 10             	add    esp,0x10
c001602a:	85 db                	test   ebx,ebx
c001602c:	74 0c                	je     c001603a <sysCallClose(regs*)+0x48>
c001602e:	83 ec 0c             	sub    esp,0xc
c0016031:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016033:	53                   	push   ebx
c0016034:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016037:	83 c4 10             	add    esp,0x10
c001603a:	31 c0                	xor    eax,eax
c001603c:	31 d2                	xor    edx,edx
c001603e:	83 c4 08             	add    esp,0x8
c0016041:	5b                   	pop    ebx
c0016042:	c3                   	ret    
c0016043:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016048:	ba ff ff ff ff       	mov    edx,0xffffffff
c001604d:	83 c4 08             	add    esp,0x8
c0016050:	5b                   	pop    ebx
c0016051:	c3                   	ret    

c0016052 <sysCallOpenDir(regs*)>:
c0016052:	56                   	push   esi
c0016053:	53                   	push   ebx
c0016054:	53                   	push   ebx
c0016055:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016059:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001605c:	85 f6                	test   esi,esi
c001605e:	74 59                	je     c00160b9 <sysCallOpenDir(regs*)+0x67>
c0016060:	83 ec 0c             	sub    esp,0xc
c0016063:	68 14 01 00 00       	push   0x114
c0016068:	e8 9a 39 ff ff       	call   c0009a07 <malloc>
c001606d:	83 c4 0c             	add    esp,0xc
c0016070:	89 c6                	mov    esi,eax
c0016072:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016077:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001607a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001607d:	56                   	push   esi
c001607e:	e8 c9 76 ff ff       	call   c000d74c <Directory::Directory(char const*, Process*)>
c0016083:	83 c4 10             	add    esp,0x10
c0016086:	85 f6                	test   esi,esi
c0016088:	74 2f                	je     c00160b9 <sysCallOpenDir(regs*)+0x67>
c001608a:	83 ec 0c             	sub    esp,0xc
c001608d:	56                   	push   esi
c001608e:	e8 1d 77 ff ff       	call   c000d7b0 <Directory::open()>
c0016093:	83 c4 10             	add    esp,0x10
c0016096:	85 c0                	test   eax,eax
c0016098:	75 1f                	jne    c00160b9 <sysCallOpenDir(regs*)+0x67>
c001609a:	83 ec 0c             	sub    esp,0xc
c001609d:	56                   	push   esi
c001609e:	e8 e3 54 ff ff       	call   c000b586 <UnixFile::getFileDescriptor()>
c00160a3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00160a6:	83 c4 10             	add    esp,0x10
c00160a9:	89 02                	mov    DWORD PTR [edx],eax
c00160ab:	c1 f8 1f             	sar    eax,0x1f
c00160ae:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00160b1:	31 c0                	xor    eax,eax
c00160b3:	59                   	pop    ecx
c00160b4:	31 d2                	xor    edx,edx
c00160b6:	5b                   	pop    ebx
c00160b7:	5e                   	pop    esi
c00160b8:	c3                   	ret    
c00160b9:	59                   	pop    ecx
c00160ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00160bf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00160c4:	5b                   	pop    ebx
c00160c5:	5e                   	pop    esi
c00160c6:	c3                   	ret    

c00160c7 <sysCallCloseDir(regs*)>:
c00160c7:	53                   	push   ebx
c00160c8:	83 ec 08             	sub    esp,0x8
c00160cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160cf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00160d2:	8d 50 fd             	lea    edx,[eax-0x3]
c00160d5:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00160db:	77 2f                	ja     c001610c <sysCallCloseDir(regs*)+0x45>
c00160dd:	83 ec 0c             	sub    esp,0xc
c00160e0:	50                   	push   eax
c00160e1:	e8 95 57 ff ff       	call   c000b87b <getFromFileDescriptor(int)>
c00160e6:	89 c3                	mov    ebx,eax
c00160e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00160eb:	e8 1c 77 ff ff       	call   c000d80c <Directory::close()>
c00160f0:	83 c4 10             	add    esp,0x10
c00160f3:	85 db                	test   ebx,ebx
c00160f5:	74 0c                	je     c0016103 <sysCallCloseDir(regs*)+0x3c>
c00160f7:	83 ec 0c             	sub    esp,0xc
c00160fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00160fc:	53                   	push   ebx
c00160fd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016100:	83 c4 10             	add    esp,0x10
c0016103:	31 c0                	xor    eax,eax
c0016105:	31 d2                	xor    edx,edx
c0016107:	83 c4 08             	add    esp,0x8
c001610a:	5b                   	pop    ebx
c001610b:	c3                   	ret    
c001610c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016111:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016116:	83 c4 08             	add    esp,0x8
c0016119:	5b                   	pop    ebx
c001611a:	c3                   	ret    

c001611b <sysCallMakeDir(regs*)>:
c001611b:	56                   	push   esi
c001611c:	53                   	push   ebx
c001611d:	83 ec 10             	sub    esp,0x10
c0016120:	68 14 01 00 00       	push   0x114
c0016125:	e8 dd 38 ff ff       	call   c0009a07 <malloc>
c001612a:	83 c4 0c             	add    esp,0xc
c001612d:	89 c3                	mov    ebx,eax
c001612f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016134:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016137:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001613b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001613e:	53                   	push   ebx
c001613f:	e8 08 76 ff ff       	call   c000d74c <Directory::Directory(char const*, Process*)>
c0016144:	83 c4 10             	add    esp,0x10
c0016147:	85 db                	test   ebx,ebx
c0016149:	74 32                	je     c001617d <sysCallMakeDir(regs*)+0x62>
c001614b:	83 ec 0c             	sub    esp,0xc
c001614e:	53                   	push   ebx
c001614f:	e8 3c 78 ff ff       	call   c000d990 <Directory::create()>
c0016154:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016157:	89 c6                	mov    esi,eax
c0016159:	e8 ae 76 ff ff       	call   c000d80c <Directory::close()>
c001615e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016160:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016163:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016166:	83 c4 10             	add    esp,0x10
c0016169:	31 c0                	xor    eax,eax
c001616b:	59                   	pop    ecx
c001616c:	85 f6                	test   esi,esi
c001616e:	5b                   	pop    ebx
c001616f:	0f 95 c0             	setne  al
c0016172:	5e                   	pop    esi
c0016173:	31 d2                	xor    edx,edx
c0016175:	f7 d8                	neg    eax
c0016177:	83 d2 00             	adc    edx,0x0
c001617a:	f7 da                	neg    edx
c001617c:	c3                   	ret    
c001617d:	59                   	pop    ecx
c001617e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016183:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016188:	5b                   	pop    ebx
c0016189:	5e                   	pop    esi
c001618a:	c3                   	ret    

c001618b <sysCallWait(regs*)>:
c001618b:	83 ec 10             	sub    esp,0x10
c001618e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016192:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0016195:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016198:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001619b:	e8 fc 24 00 00       	call   c001869c <waitTask(int, int*, int)>
c00161a0:	83 c4 1c             	add    esp,0x1c
c00161a3:	99                   	cdq    
c00161a4:	c3                   	ret    

c00161a5 <sysCallNotImpl(regs*)>:
c00161a5:	83 ec 18             	sub    esp,0x18
c00161a8:	68 e1 59 02 c0       	push   0xc00259e1
c00161ad:	e8 f1 e6 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c00161b2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00161b7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00161bc:	83 c4 1c             	add    esp,0x1c
c00161bf:	c3                   	ret    

c00161c0 <sysPanic(regs*)>:
c00161c0:	83 ec 18             	sub    esp,0x18
c00161c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00161c7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00161ca:	e8 d4 e6 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c00161cf:	b8 01 00 00 00       	mov    eax,0x1
c00161d4:	31 d2                	xor    edx,edx
c00161d6:	83 c4 1c             	add    esp,0x1c
c00161d9:	c3                   	ret    

c00161da <sysCallRmdir(regs*)>:
c00161da:	56                   	push   esi
c00161db:	53                   	push   ebx
c00161dc:	83 ec 20             	sub    esp,0x20
c00161df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00161e3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00161e6:	68 14 01 00 00       	push   0x114
c00161eb:	e8 17 38 ff ff       	call   c0009a07 <malloc>
c00161f0:	83 c4 0c             	add    esp,0xc
c00161f3:	89 c3                	mov    ebx,eax
c00161f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161fa:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00161fd:	56                   	push   esi
c00161fe:	53                   	push   ebx
c00161ff:	e8 5e 70 ff ff       	call   c000d262 <File::File(char const*, Process*)>
c0016204:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016207:	e8 70 72 ff ff       	call   c000d47c <File::unlink()>
c001620c:	83 c4 10             	add    esp,0x10
c001620f:	85 db                	test   ebx,ebx
c0016211:	74 14                	je     c0016227 <sysCallRmdir(regs*)+0x4d>
c0016213:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016217:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016219:	83 ec 0c             	sub    esp,0xc
c001621c:	53                   	push   ebx
c001621d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016220:	83 c4 10             	add    esp,0x10
c0016223:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016227:	85 c0                	test   eax,eax
c0016229:	0f 95 c0             	setne  al
c001622c:	31 d2                	xor    edx,edx
c001622e:	0f b6 c0             	movzx  eax,al
c0016231:	f7 d8                	neg    eax
c0016233:	83 d2 00             	adc    edx,0x0
c0016236:	83 c4 14             	add    esp,0x14
c0016239:	f7 da                	neg    edx
c001623b:	5b                   	pop    ebx
c001623c:	5e                   	pop    esi
c001623d:	c3                   	ret    

c001623e <sysCallUnlink(regs*)>:
c001623e:	56                   	push   esi
c001623f:	53                   	push   ebx
c0016240:	83 ec 20             	sub    esp,0x20
c0016243:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016247:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001624a:	68 14 01 00 00       	push   0x114
c001624f:	e8 b3 37 ff ff       	call   c0009a07 <malloc>
c0016254:	83 c4 0c             	add    esp,0xc
c0016257:	89 c3                	mov    ebx,eax
c0016259:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001625e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016261:	56                   	push   esi
c0016262:	53                   	push   ebx
c0016263:	e8 fa 6f ff ff       	call   c000d262 <File::File(char const*, Process*)>
c0016268:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001626b:	e8 0c 72 ff ff       	call   c000d47c <File::unlink()>
c0016270:	83 c4 10             	add    esp,0x10
c0016273:	85 db                	test   ebx,ebx
c0016275:	74 14                	je     c001628b <sysCallUnlink(regs*)+0x4d>
c0016277:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001627b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001627d:	83 ec 0c             	sub    esp,0xc
c0016280:	53                   	push   ebx
c0016281:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016284:	83 c4 10             	add    esp,0x10
c0016287:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001628b:	85 c0                	test   eax,eax
c001628d:	0f 95 c0             	setne  al
c0016290:	31 d2                	xor    edx,edx
c0016292:	0f b6 c0             	movzx  eax,al
c0016295:	f7 d8                	neg    eax
c0016297:	83 d2 00             	adc    edx,0x0
c001629a:	83 c4 14             	add    esp,0x14
c001629d:	f7 da                	neg    edx
c001629f:	5b                   	pop    ebx
c00162a0:	5e                   	pop    esi
c00162a1:	c3                   	ret    

c00162a2 <sysCallGetArgv(regs*)>:
c00162a2:	83 ec 0c             	sub    esp,0xc
c00162a5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00162a9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00162ac:	85 c0                	test   eax,eax
c00162ae:	78 2b                	js     c00162db <sysCallGetArgv(regs*)+0x39>
c00162b0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00162b6:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00162b9:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00162bf:	7d 1a                	jge    c00162db <sysCallGetArgv(regs*)+0x39>
c00162c1:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00162c8:	85 c0                	test   eax,eax
c00162ca:	74 17                	je     c00162e3 <sysCallGetArgv(regs*)+0x41>
c00162cc:	83 ec 08             	sub    esp,0x8
c00162cf:	50                   	push   eax
c00162d0:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00162d3:	e8 68 a4 fe ff       	call   c0000740 <strcpy>
c00162d8:	83 c4 10             	add    esp,0x10
c00162db:	31 c0                	xor    eax,eax
c00162dd:	31 d2                	xor    edx,edx
c00162df:	83 c4 0c             	add    esp,0xc
c00162e2:	c3                   	ret    
c00162e3:	b8 01 00 00 00       	mov    eax,0x1
c00162e8:	31 d2                	xor    edx,edx
c00162ea:	83 c4 0c             	add    esp,0xc
c00162ed:	c3                   	ret    

c00162ee <sysCallTTYName(regs*)>:
c00162ee:	56                   	push   esi
c00162ef:	53                   	push   ebx
c00162f0:	53                   	push   ebx
c00162f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162f5:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00162f8:	85 c0                	test   eax,eax
c00162fa:	74 5f                	je     c001635b <sysCallTTYName(regs*)+0x6d>
c00162fc:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00162ff:	83 f8 02             	cmp    eax,0x2
c0016302:	77 3e                	ja     c0016342 <sysCallTTYName(regs*)+0x54>
c0016304:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016309:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001630c:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0016312:	85 db                	test   ebx,ebx
c0016314:	74 45                	je     c001635b <sysCallTTYName(regs*)+0x6d>
c0016316:	83 ec 0c             	sub    esp,0xc
c0016319:	8b 03                	mov    eax,DWORD PTR [ebx]
c001631b:	53                   	push   ebx
c001631c:	ff 10                	call   DWORD PTR [eax]
c001631e:	83 c4 10             	add    esp,0x10
c0016321:	84 c0                	test   al,al
c0016323:	74 41                	je     c0016366 <sysCallTTYName(regs*)+0x78>
c0016325:	83 ec 08             	sub    esp,0x8
c0016328:	81 c3 82 00 00 00    	add    ebx,0x82
c001632e:	53                   	push   ebx
c001632f:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016332:	e8 09 a4 fe ff       	call   c0000740 <strcpy>
c0016337:	83 c4 10             	add    esp,0x10
c001633a:	31 c0                	xor    eax,eax
c001633c:	59                   	pop    ecx
c001633d:	31 d2                	xor    edx,edx
c001633f:	5b                   	pop    ebx
c0016340:	5e                   	pop    esi
c0016341:	c3                   	ret    
c0016342:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016347:	74 bb                	je     c0016304 <sysCallTTYName(regs*)+0x16>
c0016349:	83 ec 0c             	sub    esp,0xc
c001634c:	50                   	push   eax
c001634d:	e8 29 55 ff ff       	call   c000b87b <getFromFileDescriptor(int)>
c0016352:	83 c4 10             	add    esp,0x10
c0016355:	89 c3                	mov    ebx,eax
c0016357:	85 db                	test   ebx,ebx
c0016359:	75 bb                	jne    c0016316 <sysCallTTYName(regs*)+0x28>
c001635b:	59                   	pop    ecx
c001635c:	b8 01 00 00 00       	mov    eax,0x1
c0016361:	31 d2                	xor    edx,edx
c0016363:	5b                   	pop    ebx
c0016364:	5e                   	pop    esi
c0016365:	c3                   	ret    
c0016366:	59                   	pop    ecx
c0016367:	b8 02 00 00 00       	mov    eax,0x2
c001636c:	31 d2                	xor    edx,edx
c001636e:	5b                   	pop    ebx
c001636f:	5e                   	pop    esi
c0016370:	c3                   	ret    

c0016371 <sysCallUSleep(regs*)>:
c0016371:	83 ec 1c             	sub    esp,0x1c
c0016374:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016378:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001637b:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001637e:	6a 00                	push   0x0
c0016380:	6a 64                	push   0x64
c0016382:	52                   	push   edx
c0016383:	50                   	push   eax
c0016384:	e8 8b c0 00 00       	call   c0022414 <__udivdi3>
c0016389:	83 c4 14             	add    esp,0x14
c001638c:	50                   	push   eax
c001638d:	e8 da 23 00 00       	call   c001876c <milliTenthSleep(unsigned int)>
c0016392:	31 c0                	xor    eax,eax
c0016394:	31 d2                	xor    edx,edx
c0016396:	83 c4 1c             	add    esp,0x1c
c0016399:	c3                   	ret    

c001639a <sysCallSpawn(regs*)>:
c001639a:	56                   	push   esi
c001639b:	53                   	push   ebx
c001639c:	50                   	push   eax
c001639d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00163a1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00163a4:	85 c0                	test   eax,eax
c00163a6:	75 08                	jne    c00163b0 <sysCallSpawn(regs*)+0x16>
c00163a8:	59                   	pop    ecx
c00163a9:	31 c0                	xor    eax,eax
c00163ab:	31 d2                	xor    edx,edx
c00163ad:	5b                   	pop    ebx
c00163ae:	5e                   	pop    esi
c00163af:	c3                   	ret    
c00163b0:	83 ec 0c             	sub    esp,0xc
c00163b3:	68 1f 07 00 00       	push   0x71f
c00163b8:	e8 4a 36 ff ff       	call   c0009a07 <malloc>
c00163bd:	83 c4 10             	add    esp,0x10
c00163c0:	89 c6                	mov    esi,eax
c00163c2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00163c5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00163c8:	85 c0                	test   eax,eax
c00163ca:	75 32                	jne    c00163fe <sysCallSpawn(regs*)+0x64>
c00163cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163d1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00163d4:	52                   	push   edx
c00163d5:	50                   	push   eax
c00163d6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00163d9:	56                   	push   esi
c00163da:	e8 85 1a 00 00       	call   c0017e64 <Process::Process(char const*, Process*, char**)>
c00163df:	83 c4 10             	add    esp,0x10
c00163e2:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00163e9:	75 bd                	jne    c00163a8 <sysCallSpawn(regs*)+0xe>
c00163eb:	83 ec 0c             	sub    esp,0xc
c00163ee:	56                   	push   esi
c00163ef:	e8 5c 1f 00 00       	call   c0018350 <Process::createUserThread()>
c00163f4:	8b 06                	mov    eax,DWORD PTR [esi]
c00163f6:	83 c4 10             	add    esp,0x10
c00163f9:	99                   	cdq    
c00163fa:	59                   	pop    ecx
c00163fb:	5b                   	pop    ebx
c00163fc:	5e                   	pop    esi
c00163fd:	c3                   	ret    
c00163fe:	31 c0                	xor    eax,eax
c0016400:	eb d2                	jmp    c00163d4 <sysCallSpawn(regs*)+0x3a>

c0016402 <sysCallGetEnv(regs*)>:
c0016402:	57                   	push   edi
c0016403:	56                   	push   esi
c0016404:	53                   	push   ebx
c0016405:	83 ec 1c             	sub    esp,0x1c
c0016408:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001640c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016411:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0016414:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0016417:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001641a:	e8 d0 e3 ff ff       	call   c00147ef <Krnl::getProcessTotalEnvCount(Process*)>
c001641f:	83 c4 10             	add    esp,0x10
c0016422:	39 c7                	cmp    edi,eax
c0016424:	7c 14                	jl     c001643a <sysCallGetEnv(regs*)+0x38>
c0016426:	85 f6                	test   esi,esi
c0016428:	75 0b                	jne    c0016435 <sysCallGetEnv(regs*)+0x33>
c001642a:	83 c4 10             	add    esp,0x10
c001642d:	31 c0                	xor    eax,eax
c001642f:	5b                   	pop    ebx
c0016430:	31 d2                	xor    edx,edx
c0016432:	5e                   	pop    esi
c0016433:	5f                   	pop    edi
c0016434:	c3                   	ret    
c0016435:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016438:	eb f0                	jmp    c001642a <sysCallGetEnv(regs*)+0x28>
c001643a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001643e:	52                   	push   edx
c001643f:	57                   	push   edi
c0016440:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016446:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0016449:	50                   	push   eax
c001644a:	e8 c0 e3 ff ff       	call   c001480f <Krnl::getProcessEnvPair(Process*, int)>
c001644f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0016452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016456:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001645a:	83 c4 0c             	add    esp,0xc
c001645d:	85 c9                	test   ecx,ecx
c001645f:	75 23                	jne    c0016484 <sysCallGetEnv(regs*)+0x82>
c0016461:	83 ec 0c             	sub    esp,0xc
c0016464:	50                   	push   eax
c0016465:	e8 36 a2 fe ff       	call   c00006a0 <strlen>
c001646a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001646d:	89 c3                	mov    ebx,eax
c001646f:	e8 2c a2 fe ff       	call   c00006a0 <strlen>
c0016474:	83 c4 10             	add    esp,0x10
c0016477:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001647b:	83 c4 10             	add    esp,0x10
c001647e:	31 d2                	xor    edx,edx
c0016480:	5b                   	pop    ebx
c0016481:	5e                   	pop    esi
c0016482:	5f                   	pop    edi
c0016483:	c3                   	ret    
c0016484:	83 ec 08             	sub    esp,0x8
c0016487:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001648a:	50                   	push   eax
c001648b:	56                   	push   esi
c001648c:	e8 af a2 fe ff       	call   c0000740 <strcpy>
c0016491:	58                   	pop    eax
c0016492:	5a                   	pop    edx
c0016493:	68 fb 59 02 c0       	push   0xc00259fb
c0016498:	56                   	push   esi
c0016499:	e8 e2 a3 fe ff       	call   c0000880 <strcat>
c001649e:	59                   	pop    ecx
c001649f:	5b                   	pop    ebx
c00164a0:	57                   	push   edi
c00164a1:	56                   	push   esi
c00164a2:	e8 d9 a3 fe ff       	call   c0000880 <strcat>
c00164a7:	83 c4 10             	add    esp,0x10
c00164aa:	e9 7b ff ff ff       	jmp    c001642a <sysCallGetEnv(regs*)+0x28>

c00164af <sysAppSettings(regs*)>:
c00164af:	57                   	push   edi
c00164b0:	56                   	push   esi
c00164b1:	56                   	push   esi
c00164b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164b6:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00164b9:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c00164bf:	25 e0 1f 00 00       	and    eax,0x1fe0
c00164c4:	66 3d c0 09          	cmp    ax,0x9c0
c00164c8:	75 2e                	jne    c00164f8 <sysAppSettings(regs*)+0x49>
c00164ca:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c00164d0:	83 e0 1f             	and    eax,0x1f
c00164d3:	3c 01                	cmp    al,0x1
c00164d5:	74 2c                	je     c0016503 <sysAppSettings(regs*)+0x54>
c00164d7:	3c 07                	cmp    al,0x7
c00164d9:	0f 84 b3 00 00 00    	je     c0016592 <sysAppSettings(regs*)+0xe3>
c00164df:	84 c0                	test   al,al
c00164e1:	0f 84 d2 00 00 00    	je     c00165b9 <sysAppSettings(regs*)+0x10a>
c00164e7:	3c 08                	cmp    al,0x8
c00164e9:	74 63                	je     c001654e <sysAppSettings(regs*)+0x9f>
c00164eb:	59                   	pop    ecx
c00164ec:	0f b6 c0             	movzx  eax,al
c00164ef:	5e                   	pop    esi
c00164f0:	05 e8 03 00 00       	add    eax,0x3e8
c00164f5:	5f                   	pop    edi
c00164f6:	99                   	cdq    
c00164f7:	c3                   	ret    
c00164f8:	b8 01 00 00 00       	mov    eax,0x1
c00164fd:	59                   	pop    ecx
c00164fe:	31 d2                	xor    edx,edx
c0016500:	5e                   	pop    esi
c0016501:	5f                   	pop    edi
c0016502:	c3                   	ret    
c0016503:	50                   	push   eax
c0016504:	68 00 01 00 00       	push   0x100
c0016509:	6a 00                	push   0x0
c001650b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016510:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016513:	83 c0 0c             	add    eax,0xc
c0016516:	50                   	push   eax
c0016517:	e8 68 a1 fe ff       	call   c0000684 <memset>
c001651c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016521:	b9 ff 00 00 00       	mov    ecx,0xff
c0016526:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0016529:	83 c7 0c             	add    edi,0xc
c001652c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001652e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016533:	5a                   	pop    edx
c0016534:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016537:	59                   	pop    ecx
c0016538:	8d 50 0c             	lea    edx,[eax+0xc]
c001653b:	52                   	push   edx
c001653c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016542:	e8 59 44 ff ff       	call   c000a9a0 <VgaText::setTitle(char*)>
c0016547:	83 c4 10             	add    esp,0x10
c001654a:	31 c0                	xor    eax,eax
c001654c:	eb af                	jmp    c00164fd <sysAppSettings(regs*)+0x4e>
c001654e:	83 ec 08             	sub    esp,0x8
c0016551:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016557:	83 e0 0f             	and    eax,0xf
c001655a:	50                   	push   eax
c001655b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016560:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016563:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016569:	e8 22 44 ff ff       	call   c000a990 <VgaText::setTitleColour(VgaColour)>
c001656e:	5f                   	pop    edi
c001656f:	58                   	pop    eax
c0016570:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016576:	c1 e8 04             	shr    eax,0x4
c0016579:	83 e0 0f             	and    eax,0xf
c001657c:	50                   	push   eax
c001657d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016582:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016585:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001658b:	e8 f0 43 ff ff       	call   c000a980 <VgaText::setTitleTextColour(VgaColour)>
c0016590:	eb b5                	jmp    c0016547 <sysAppSettings(regs*)+0x98>
c0016592:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016597:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001659a:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00165a0:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c00165a6:	c0 e8 06             	shr    al,0x6
c00165a9:	83 e0 01             	and    eax,0x1
c00165ac:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c00165b2:	31 c0                	xor    eax,eax
c00165b4:	e9 44 ff ff ff       	jmp    c00164fd <sysAppSettings(regs*)+0x4e>
c00165b9:	b8 02 00 00 00       	mov    eax,0x2
c00165be:	e9 3a ff ff ff       	jmp    c00164fd <sysAppSettings(regs*)+0x4e>

c00165c3 <sysSetFatAttrib(regs*)>:
c00165c3:	57                   	push   edi
c00165c4:	56                   	push   esi
c00165c5:	53                   	push   ebx
c00165c6:	83 ec 1c             	sub    esp,0x1c
c00165c9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00165cd:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00165d0:	68 14 01 00 00       	push   0x114
c00165d5:	e8 2d 34 ff ff       	call   c0009a07 <malloc>
c00165da:	83 c4 0c             	add    esp,0xc
c00165dd:	89 c3                	mov    ebx,eax
c00165df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165e4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00165e7:	57                   	push   edi
c00165e8:	53                   	push   ebx
c00165e9:	e8 74 6c ff ff       	call   c000d262 <File::File(char const*, Process*)>
c00165ee:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00165f1:	83 c4 0c             	add    esp,0xc
c00165f4:	0f b6 d4             	movzx  edx,ah
c00165f7:	0f b6 c0             	movzx  eax,al
c00165fa:	52                   	push   edx
c00165fb:	50                   	push   eax
c00165fc:	53                   	push   ebx
c00165fd:	e8 14 6f ff ff       	call   c000d516 <File::chfatattr(unsigned char, unsigned char)>
c0016602:	83 c4 10             	add    esp,0x10
c0016605:	85 db                	test   ebx,ebx
c0016607:	74 14                	je     c001661d <sysSetFatAttrib(regs*)+0x5a>
c0016609:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001660d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001660f:	83 ec 0c             	sub    esp,0xc
c0016612:	53                   	push   ebx
c0016613:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016616:	83 c4 10             	add    esp,0x10
c0016619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001661d:	85 c0                	test   eax,eax
c001661f:	0f 95 c0             	setne  al
c0016622:	31 d2                	xor    edx,edx
c0016624:	0f b6 c0             	movzx  eax,al
c0016627:	f7 d8                	neg    eax
c0016629:	83 d2 00             	adc    edx,0x0
c001662c:	83 c4 10             	add    esp,0x10
c001662f:	f7 da                	neg    edx
c0016631:	5b                   	pop    ebx
c0016632:	5e                   	pop    esi
c0016633:	5f                   	pop    edi
c0016634:	c3                   	ret    

c0016635 <sysPipe(regs*)>:
c0016635:	57                   	push   edi
c0016636:	56                   	push   esi
c0016637:	53                   	push   ebx
c0016638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001663c:	83 ec 0c             	sub    esp,0xc
c001663f:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016642:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016645:	6a 20                	push   0x20
c0016647:	e8 bb 33 ff ff       	call   c0009a07 <malloc>
c001664c:	89 c3                	mov    ebx,eax
c001664e:	58                   	pop    eax
c001664f:	5a                   	pop    edx
c0016650:	68 00 50 00 00       	push   0x5000
c0016655:	53                   	push   ebx
c0016656:	e8 bd 40 ff ff       	call   c000a718 <Pipe::Pipe(int)>
c001665b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001665e:	e8 23 4f ff ff       	call   c000b586 <UnixFile::getFileDescriptor()>
c0016663:	89 07                	mov    DWORD PTR [edi],eax
c0016665:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016668:	e8 19 4f ff ff       	call   c000b586 <UnixFile::getFileDescriptor()>
c001666d:	83 c4 10             	add    esp,0x10
c0016670:	89 06                	mov    DWORD PTR [esi],eax
c0016672:	31 d2                	xor    edx,edx
c0016674:	5b                   	pop    ebx
c0016675:	31 c0                	xor    eax,eax
c0016677:	5e                   	pop    esi
c0016678:	5f                   	pop    edi
c0016679:	c3                   	ret    

c001667a <sysGetUnixTime(regs*)>:
c001667a:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c001667f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016685:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016689:	e9 08 76 ff ff       	jmp    c000dc96 <Clock::timeInSecondsLocal()>

c001668e <string_ends_with(char const*, char const*)>:
c001668e:	57                   	push   edi
c001668f:	56                   	push   esi
c0016690:	53                   	push   ebx
c0016691:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016695:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016699:	83 ec 0c             	sub    esp,0xc
c001669c:	53                   	push   ebx
c001669d:	e8 fe 9f fe ff       	call   c00006a0 <strlen>
c00166a2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00166a5:	89 c6                	mov    esi,eax
c00166a7:	e8 f4 9f fe ff       	call   c00006a0 <strlen>
c00166ac:	83 c4 10             	add    esp,0x10
c00166af:	39 c6                	cmp    esi,eax
c00166b1:	7d 06                	jge    c00166b9 <string_ends_with(char const*, char const*)+0x2b>
c00166b3:	5b                   	pop    ebx
c00166b4:	31 c0                	xor    eax,eax
c00166b6:	5e                   	pop    esi
c00166b7:	5f                   	pop    edi
c00166b8:	c3                   	ret    
c00166b9:	83 ec 08             	sub    esp,0x8
c00166bc:	29 c6                	sub    esi,eax
c00166be:	57                   	push   edi
c00166bf:	01 f3                	add    ebx,esi
c00166c1:	53                   	push   ebx
c00166c2:	e8 05 a1 fe ff       	call   c00007cc <strcmp>
c00166c7:	83 c4 10             	add    esp,0x10
c00166ca:	85 c0                	test   eax,eax
c00166cc:	5b                   	pop    ebx
c00166cd:	0f 94 c0             	sete   al
c00166d0:	5e                   	pop    esi
c00166d1:	0f b6 c0             	movzx  eax,al
c00166d4:	5f                   	pop    edi
c00166d5:	c3                   	ret    

c00166d6 <sysCallOpen(regs*)>:
c00166d6:	56                   	push   esi
c00166d7:	53                   	push   ebx
c00166d8:	81 ec 04 01 00 00    	sub    esp,0x104
c00166de:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00166e5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00166e8:	85 c9                	test   ecx,ecx
c00166ea:	0f 84 ad 01 00 00    	je     c001689d <sysCallOpen(regs*)+0x1c7>
c00166f0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00166f3:	85 c0                	test   eax,eax
c00166f5:	0f 84 a2 01 00 00    	je     c001689d <sysCallOpen(regs*)+0x1c7>
c00166fb:	52                   	push   edx
c00166fc:	68 fd 59 02 c0       	push   0xc00259fd
c0016701:	50                   	push   eax
c0016702:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0016706:	56                   	push   esi
c0016707:	e8 ac 69 ff ff       	call   c000d0b8 <Fs::standardiseFiles(char*, char const*, char const*)>
c001670c:	89 34 24             	mov    DWORD PTR [esp],esi
c001670f:	e8 8c 9f fe ff       	call   c00006a0 <strlen>
c0016714:	83 c4 10             	add    esp,0x10
c0016717:	48                   	dec    eax
c0016718:	74 1d                	je     c0016737 <sysCallOpen(regs*)+0x61>
c001671a:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001671d:	eb 0f                	jmp    c001672e <sysCallOpen(regs*)+0x58>
c001671f:	80 fa 3a             	cmp    dl,0x3a
c0016722:	74 0f                	je     c0016733 <sysCallOpen(regs*)+0x5d>
c0016724:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016728:	48                   	dec    eax
c0016729:	74 0c                	je     c0016737 <sysCallOpen(regs*)+0x61>
c001672b:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001672e:	80 fa 2e             	cmp    dl,0x2e
c0016731:	75 ec                	jne    c001671f <sysCallOpen(regs*)+0x49>
c0016733:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0016737:	83 ec 08             	sub    esp,0x8
c001673a:	68 01 5a 02 c0       	push   0xc0025a01
c001673f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016742:	e8 47 ff ff ff       	call   c001668e <string_ends_with(char const*, char const*)>
c0016747:	83 c4 10             	add    esp,0x10
c001674a:	85 c0                	test   eax,eax
c001674c:	74 1d                	je     c001676b <sysCallOpen(regs*)+0x95>
c001674e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016751:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0016757:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001675e:	81 c4 04 01 00 00    	add    esp,0x104
c0016764:	31 c0                	xor    eax,eax
c0016766:	31 d2                	xor    edx,edx
c0016768:	5b                   	pop    ebx
c0016769:	5e                   	pop    esi
c001676a:	c3                   	ret    
c001676b:	83 ec 08             	sub    esp,0x8
c001676e:	68 06 5a 02 c0       	push   0xc0025a06
c0016773:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016776:	e8 13 ff ff ff       	call   c001668e <string_ends_with(char const*, char const*)>
c001677b:	83 c4 10             	add    esp,0x10
c001677e:	85 c0                	test   eax,eax
c0016780:	75 cc                	jne    c001674e <sysCallOpen(regs*)+0x78>
c0016782:	83 ec 08             	sub    esp,0x8
c0016785:	68 02 5a 02 c0       	push   0xc0025a02
c001678a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001678d:	e8 3a a0 fe ff       	call   c00007cc <strcmp>
c0016792:	83 c4 10             	add    esp,0x10
c0016795:	85 c0                	test   eax,eax
c0016797:	74 b5                	je     c001674e <sysCallOpen(regs*)+0x78>
c0016799:	83 ec 08             	sub    esp,0x8
c001679c:	68 01 5a 02 c0       	push   0xc0025a01
c00167a1:	56                   	push   esi
c00167a2:	e8 e7 fe ff ff       	call   c001668e <string_ends_with(char const*, char const*)>
c00167a7:	83 c4 10             	add    esp,0x10
c00167aa:	85 c0                	test   eax,eax
c00167ac:	75 a0                	jne    c001674e <sysCallOpen(regs*)+0x78>
c00167ae:	83 ec 08             	sub    esp,0x8
c00167b1:	68 0b 5a 02 c0       	push   0xc0025a0b
c00167b6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00167b9:	e8 d0 fe ff ff       	call   c001668e <string_ends_with(char const*, char const*)>
c00167be:	83 c4 10             	add    esp,0x10
c00167c1:	85 c0                	test   eax,eax
c00167c3:	0f 85 e7 00 00 00    	jne    c00168b0 <sysCallOpen(regs*)+0x1da>
c00167c9:	83 ec 08             	sub    esp,0x8
c00167cc:	68 10 5a 02 c0       	push   0xc0025a10
c00167d1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00167d4:	e8 b5 fe ff ff       	call   c001668e <string_ends_with(char const*, char const*)>
c00167d9:	83 c4 10             	add    esp,0x10
c00167dc:	85 c0                	test   eax,eax
c00167de:	0f 85 cc 00 00 00    	jne    c00168b0 <sysCallOpen(regs*)+0x1da>
c00167e4:	83 ec 08             	sub    esp,0x8
c00167e7:	68 0c 5a 02 c0       	push   0xc0025a0c
c00167ec:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00167ef:	e8 d8 9f fe ff       	call   c00007cc <strcmp>
c00167f4:	83 c4 10             	add    esp,0x10
c00167f7:	85 c0                	test   eax,eax
c00167f9:	0f 84 b1 00 00 00    	je     c00168b0 <sysCallOpen(regs*)+0x1da>
c00167ff:	83 ec 08             	sub    esp,0x8
c0016802:	68 0b 5a 02 c0       	push   0xc0025a0b
c0016807:	56                   	push   esi
c0016808:	e8 81 fe ff ff       	call   c001668e <string_ends_with(char const*, char const*)>
c001680d:	83 c4 10             	add    esp,0x10
c0016810:	85 c0                	test   eax,eax
c0016812:	0f 85 98 00 00 00    	jne    c00168b0 <sysCallOpen(regs*)+0x1da>
c0016818:	83 ec 0c             	sub    esp,0xc
c001681b:	68 14 01 00 00       	push   0x114
c0016820:	e8 e2 31 ff ff       	call   c0009a07 <malloc>
c0016825:	83 c4 0c             	add    esp,0xc
c0016828:	89 c6                	mov    esi,eax
c001682a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001682f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016832:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016835:	56                   	push   esi
c0016836:	e8 27 6a ff ff       	call   c000d262 <File::File(char const*, Process*)>
c001683b:	83 c4 10             	add    esp,0x10
c001683e:	85 f6                	test   esi,esi
c0016840:	74 5b                	je     c001689d <sysCallOpen(regs*)+0x1c7>
c0016842:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016845:	0f b6 c2             	movzx  eax,dl
c0016848:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001684b:	89 d0                	mov    eax,edx
c001684d:	83 e0 01             	and    eax,0x1
c0016850:	f6 c2 02             	test   dl,0x2
c0016853:	74 03                	je     c0016858 <sysCallOpen(regs*)+0x182>
c0016855:	83 c8 02             	or     eax,0x2
c0016858:	f6 c2 04             	test   dl,0x4
c001685b:	74 03                	je     c0016860 <sysCallOpen(regs*)+0x18a>
c001685d:	83 c8 04             	or     eax,0x4
c0016860:	f6 c2 08             	test   dl,0x8
c0016863:	74 03                	je     c0016868 <sysCallOpen(regs*)+0x192>
c0016865:	83 c8 0a             	or     eax,0xa
c0016868:	83 e2 10             	and    edx,0x10
c001686b:	74 03                	je     c0016870 <sysCallOpen(regs*)+0x19a>
c001686d:	83 c8 12             	or     eax,0x12
c0016870:	83 ec 08             	sub    esp,0x8
c0016873:	50                   	push   eax
c0016874:	56                   	push   esi
c0016875:	e8 8a 6a ff ff       	call   c000d304 <File::open(FileOpenMode)>
c001687a:	83 c4 10             	add    esp,0x10
c001687d:	85 c0                	test   eax,eax
c001687f:	75 1c                	jne    c001689d <sysCallOpen(regs*)+0x1c7>
c0016881:	83 ec 0c             	sub    esp,0xc
c0016884:	56                   	push   esi
c0016885:	e8 fc 4c ff ff       	call   c000b586 <UnixFile::getFileDescriptor()>
c001688a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001688d:	83 c4 10             	add    esp,0x10
c0016890:	89 02                	mov    DWORD PTR [edx],eax
c0016892:	c1 f8 1f             	sar    eax,0x1f
c0016895:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016898:	e9 c1 fe ff ff       	jmp    c001675e <sysCallOpen(regs*)+0x88>
c001689d:	81 c4 04 01 00 00    	add    esp,0x104
c00168a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00168a8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00168ad:	5b                   	pop    ebx
c00168ae:	5e                   	pop    esi
c00168af:	c3                   	ret    
c00168b0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00168b3:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00168b9:	e9 99 fe ff ff       	jmp    c0016757 <sysCallOpen(regs*)+0x81>

c00168be <Sys::loadSyscalls()>:
c00168be:	c7 05 40 86 02 c0 2f 5b 01 c0 	mov    DWORD PTR ds:0xc0028640,0xc0015b2f
c00168c8:	c7 05 44 86 02 c0 24 57 01 c0 	mov    DWORD PTR ds:0xc0028644,0xc0015724
c00168d2:	c7 05 48 86 02 c0 15 59 01 c0 	mov    DWORD PTR ds:0xc0028648,0xc0015915
c00168dc:	c7 05 4c 86 02 c0 65 5a 01 c0 	mov    DWORD PTR ds:0xc002864c,0xc0015a65
c00168e6:	c7 05 50 86 02 c0 ad 58 01 c0 	mov    DWORD PTR ds:0xc0028650,0xc00158ad
c00168f0:	c7 05 54 86 02 c0 5b 57 01 c0 	mov    DWORD PTR ds:0xc0028654,0xc001575b
c00168fa:	c7 05 58 86 02 c0 3c 57 01 c0 	mov    DWORD PTR ds:0xc0028658,0xc001573c
c0016904:	c7 05 5c 86 02 c0 6a 59 01 c0 	mov    DWORD PTR ds:0xc002865c,0xc001596a
c001690e:	c7 05 64 86 02 c0 f2 5f 01 c0 	mov    DWORD PTR ds:0xc0028664,0xc0015ff2
c0016918:	c7 05 60 86 02 c0 d6 66 01 c0 	mov    DWORD PTR ds:0xc0028660,0xc00166d6
c0016922:	c7 05 68 86 02 c0 52 60 01 c0 	mov    DWORD PTR ds:0xc0028668,0xc0016052
c001692c:	c7 05 6c 86 02 c0 35 5d 01 c0 	mov    DWORD PTR ds:0xc002866c,0xc0015d35
c0016936:	c7 05 70 86 02 c0 67 5b 01 c0 	mov    DWORD PTR ds:0xc0028670,0xc0015b67
c0016940:	c7 05 74 86 02 c0 6c 5b 01 c0 	mov    DWORD PTR ds:0xc0028674,0xc0015b6c
c001694a:	c7 05 78 86 02 c0 1b 61 01 c0 	mov    DWORD PTR ds:0xc0028678,0xc001611b
c0016954:	c7 05 7c 86 02 c0 c7 60 01 c0 	mov    DWORD PTR ds:0xc002867c,0xc00160c7
c001695e:	c7 05 80 86 02 c0 0e 5e 01 c0 	mov    DWORD PTR ds:0xc0028680,0xc0015e0e
c0016968:	c7 05 84 86 02 c0 65 5e 01 c0 	mov    DWORD PTR ds:0xc0028684,0xc0015e65
c0016972:	c7 05 88 86 02 c0 d1 5e 01 c0 	mov    DWORD PTR ds:0xc0028688,0xc0015ed1
c001697c:	c7 05 8c 86 02 c0 71 5b 01 c0 	mov    DWORD PTR ds:0xc002868c,0xc0015b71
c0016986:	c7 05 90 86 02 c0 8b 61 01 c0 	mov    DWORD PTR ds:0xc0028690,0xc001618b
c0016990:	c7 05 94 86 02 c0 a5 61 01 c0 	mov    DWORD PTR ds:0xc0028694,0xc00161a5
c001699a:	c7 05 98 86 02 c0 a5 61 01 c0 	mov    DWORD PTR ds:0xc0028698,0xc00161a5
c00169a4:	c7 05 9c 86 02 c0 da 61 01 c0 	mov    DWORD PTR ds:0xc002869c,0xc00161da
c00169ae:	c7 05 a0 86 02 c0 3e 62 01 c0 	mov    DWORD PTR ds:0xc00286a0,0xc001623e
c00169b8:	c7 05 a4 86 02 c0 7b 5b 01 c0 	mov    DWORD PTR ds:0xc00286a4,0xc0015b7b
c00169c2:	c7 05 a8 86 02 c0 a2 62 01 c0 	mov    DWORD PTR ds:0xc00286a8,0xc00162a2
c00169cc:	c7 05 ac 86 02 c0 f2 5c 01 c0 	mov    DWORD PTR ds:0xc00286ac,0xc0015cf2
c00169d6:	c7 05 b0 86 02 c0 ee 62 01 c0 	mov    DWORD PTR ds:0xc00286b0,0xc00162ee
c00169e0:	c7 05 b4 86 02 c0 b4 5d 01 c0 	mov    DWORD PTR ds:0xc00286b4,0xc0015db4
c00169ea:	c7 05 b8 86 02 c0 71 63 01 c0 	mov    DWORD PTR ds:0xc00286b8,0xc0016371
c00169f4:	c7 05 bc 86 02 c0 43 5f 01 c0 	mov    DWORD PTR ds:0xc00286bc,0xc0015f43
c00169fe:	c7 05 c0 86 02 c0 9a 63 01 c0 	mov    DWORD PTR ds:0xc00286c0,0xc001639a
c0016a08:	c7 05 c4 86 02 c0 02 64 01 c0 	mov    DWORD PTR ds:0xc00286c4,0xc0016402
c0016a12:	c7 05 c8 86 02 c0 af 64 01 c0 	mov    DWORD PTR ds:0xc00286c8,0xc00164af
c0016a1c:	c7 05 cc 86 02 c0 8b 5b 01 c0 	mov    DWORD PTR ds:0xc00286cc,0xc0015b8b
c0016a26:	c7 05 d0 86 02 c0 f5 5b 01 c0 	mov    DWORD PTR ds:0xc00286d0,0xc0015bf5
c0016a30:	c7 05 d4 86 02 c0 3f 5c 01 c0 	mov    DWORD PTR ds:0xc00286d4,0xc0015c3f
c0016a3a:	c7 05 d8 86 02 c0 c3 65 01 c0 	mov    DWORD PTR ds:0xc00286d8,0xc00165c3
c0016a44:	c7 05 dc 86 02 c0 c0 61 01 c0 	mov    DWORD PTR ds:0xc00286dc,0xc00161c0
c0016a4e:	c7 05 e0 86 02 c0 94 5c 01 c0 	mov    DWORD PTR ds:0xc00286e0,0xc0015c94
c0016a58:	c7 05 e4 86 02 c0 35 66 01 c0 	mov    DWORD PTR ds:0xc00286e4,0xc0016635
c0016a62:	c7 05 e8 86 02 c0 7a 66 01 c0 	mov    DWORD PTR ds:0xc00286e8,0xc001667a
c0016a6c:	c7 05 ec 86 02 c0 05 58 01 c0 	mov    DWORD PTR ds:0xc00286ec,0xc0015805
c0016a76:	c7 05 f0 86 02 c0 86 59 01 c0 	mov    DWORD PTR ds:0xc00286f0,0xc0015986
c0016a80:	c7 05 f4 86 02 c0 1b 5a 01 c0 	mov    DWORD PTR ds:0xc00286f4,0xc0015a1b
c0016a8a:	c7 05 f8 86 02 c0 ee 56 01 c0 	mov    DWORD PTR ds:0xc00286f8,0xc00156ee
c0016a94:	c7 05 fc 86 02 c0 cd 5a 01 c0 	mov    DWORD PTR ds:0xc00286fc,0xc0015acd
c0016a9e:	c7 05 00 87 02 c0 67 57 01 c0 	mov    DWORD PTR ds:0xc0028700,0xc0015767
c0016aa8:	c7 05 04 87 02 c0 81 57 01 c0 	mov    DWORD PTR ds:0xc0028704,0xc0015781
c0016ab2:	c3                   	ret    

c0016ab3 <Sys::systemCall(regs*, void*)>:
c0016ab3:	53                   	push   ebx
c0016ab4:	83 ec 08             	sub    esp,0x8
c0016ab7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016abb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016abe:	83 f8 7f             	cmp    eax,0x7f
c0016ac1:	77 16                	ja     c0016ad9 <Sys::systemCall(regs*, void*)+0x26>
c0016ac3:	8b 14 85 40 86 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd79c0]
c0016aca:	85 d2                	test   edx,edx
c0016acc:	74 0b                	je     c0016ad9 <Sys::systemCall(regs*, void*)+0x26>
c0016ace:	83 ec 0c             	sub    esp,0xc
c0016ad1:	53                   	push   ebx
c0016ad2:	ff d2                	call   edx
c0016ad4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016ad7:	eb 0d                	jmp    c0016ae6 <Sys::systemCall(regs*, void*)+0x33>
c0016ad9:	52                   	push   edx
c0016ada:	52                   	push   edx
c0016adb:	50                   	push   eax
c0016adc:	68 15 5a 02 c0       	push   0xc0025a15
c0016ae1:	e8 11 62 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0016ae6:	83 c4 10             	add    esp,0x10
c0016ae9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016aee:	31 d2                	xor    edx,edx
c0016af0:	83 c4 08             	add    esp,0x8
c0016af3:	5b                   	pop    ebx
c0016af4:	c3                   	ret    

c0016af5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0016af5:	55                   	push   ebp
c0016af6:	57                   	push   edi
c0016af7:	56                   	push   esi
c0016af8:	53                   	push   ebx
c0016af9:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0016aff:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016b06:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0016b0d:	85 c0                	test   eax,eax
c0016b0f:	0f 95 c1             	setne  cl
c0016b12:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0016b1a:	0f 94 c2             	sete   dl
c0016b1d:	84 d1                	test   cl,dl
c0016b1f:	74 23                	je     c0016b44 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016b21:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c0016b27:	74 1b                	je     c0016b44 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016b29:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016b2f:	89 da                	mov    edx,ebx
c0016b31:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0016b37:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0016b3d:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0016b44:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c0016b4b:	05 ff 0f 00 00       	add    eax,0xfff
c0016b50:	83 ec 0c             	sub    esp,0xc
c0016b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b57:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c0016b5d:	c1 e8 0c             	shr    eax,0xc
c0016b60:	89 fe                	mov    esi,edi
c0016b62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016b66:	c1 ee 0c             	shr    esi,0xc
c0016b69:	6a 01                	push   0x1
c0016b6b:	e8 61 4e ff ff       	call   c000b9d1 <Virt::allocateKernelVirtualPages(int)>
c0016b70:	89 c5                	mov    ebp,eax
c0016b72:	58                   	pop    eax
c0016b73:	5a                   	pop    edx
c0016b74:	56                   	push   esi
c0016b75:	68 29 5a 02 c0       	push   0xc0025a29
c0016b7a:	e8 78 61 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0016b7f:	59                   	pop    ecx
c0016b80:	58                   	pop    eax
c0016b81:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016b85:	68 3b 5a 02 c0       	push   0xc0025a3b
c0016b8a:	e8 68 61 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0016b8f:	83 c4 10             	add    esp,0x10
c0016b92:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0016b98:	0f 86 31 01 00 00    	jbe    c0016ccf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0016b9e:	c1 e6 0c             	shl    esi,0xc
c0016ba1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ba4:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0016ba7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016bab:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0016bb2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016bb5:	01 df                	add    edi,ebx
c0016bb7:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0016bba:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016bbe:	0f 84 08 01 00 00    	je     c0016ccc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0016bc4:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0016bca:	76 05                	jbe    c0016bd1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0016bcc:	bf 00 10 00 00       	mov    edi,0x1000
c0016bd1:	83 ec 0c             	sub    esp,0xc
c0016bd4:	31 d2                	xor    edx,edx
c0016bd6:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016bdd:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016bdf:	8d 44 24 28          	lea    eax,[esp+0x28]
c0016be3:	50                   	push   eax
c0016be4:	8d 74 24 30          	lea    esi,[esp+0x30]
c0016be8:	56                   	push   esi
c0016be9:	52                   	push   edx
c0016bea:	57                   	push   edi
c0016beb:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0016bf2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016bf5:	83 c4 20             	add    esp,0x20
c0016bf8:	85 c0                	test   eax,eax
c0016bfa:	74 0a                	je     c0016c06 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0016bfc:	53                   	push   ebx
c0016bfd:	53                   	push   ebx
c0016bfe:	50                   	push   eax
c0016bff:	68 4d 5a 02 c0       	push   0xc0025a4d
c0016c04:	eb 0f                	jmp    c0016c15 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c0016c06:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016c0a:	74 20                	je     c0016c2c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0016c0c:	51                   	push   ecx
c0016c0d:	51                   	push   ecx
c0016c0e:	6a 00                	push   0x0
c0016c10:	68 78 5a 02 c0       	push   0xc0025a78
c0016c15:	e8 dd 60 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0016c1a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016c1d:	e8 df 50 ff ff       	call   c000bd01 <Virt::freeKernelVirtualPages(unsigned long)>
c0016c22:	83 c4 10             	add    esp,0x10
c0016c25:	31 c0                	xor    eax,eax
c0016c27:	e9 68 01 00 00       	jmp    c0016d94 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c0016c2c:	fa                   	cli    
c0016c2d:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c0016c33:	e8 86 34 ff ff       	call   c000a0be <Phys::allocatePage()>
c0016c38:	6a 07                	push   0x7
c0016c3a:	89 c7                	mov    edi,eax
c0016c3c:	55                   	push   ebp
c0016c3d:	50                   	push   eax
c0016c3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c43:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c46:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c4c:	e8 27 54 ff ff       	call   c000c078 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016c51:	83 c4 0c             	add    esp,0xc
c0016c54:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016c5b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c61:	6a 00                	push   0x0
c0016c63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c68:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c6b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c71:	e8 5c 52 ff ff       	call   c000bed2 <VAS::mapOtherVASIn(bool, VAS*)>
c0016c76:	58                   	pop    eax
c0016c77:	5a                   	pop    edx
c0016c78:	68 07 0c 00 00       	push   0xc07
c0016c7d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016c81:	57                   	push   edi
c0016c82:	89 ef                	mov    edi,ebp
c0016c84:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016c8b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c91:	6a 00                	push   0x0
c0016c93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c98:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c9b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016ca1:	e8 8e 57 ff ff       	call   c000c434 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016ca6:	b9 00 10 00 00       	mov    ecx,0x1000
c0016cab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016cad:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c0016cb2:	83 c4 20             	add    esp,0x20
c0016cb5:	48                   	dec    eax
c0016cb6:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c0016cbb:	85 c0                	test   eax,eax
c0016cbd:	75 01                	jne    c0016cc0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0016cbf:	fb                   	sti    
c0016cc0:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c0016cc7:	e9 df fe ff ff       	jmp    c0016bab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0016ccc:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0016ccf:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c0016cd7:	0f 86 a9 00 00 00    	jbe    c0016d86 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016cdd:	fa                   	cli    
c0016cde:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c0016ce4:	51                   	push   ecx
c0016ce5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016cec:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016cf2:	6a 00                	push   0x0
c0016cf4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cf9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016cfc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016d02:	e8 cb 51 ff ff       	call   c000bed2 <VAS::mapOtherVASIn(bool, VAS*)>
c0016d07:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016d0b:	c1 e6 0c             	shl    esi,0xc
c0016d0e:	01 de                	add    esi,ebx
c0016d10:	83 c4 10             	add    esp,0x10
c0016d13:	39 de                	cmp    esi,ebx
c0016d15:	74 61                	je     c0016d78 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0016d17:	e8 a2 33 ff ff       	call   c000a0be <Phys::allocatePage()>
c0016d1c:	6a 07                	push   0x7
c0016d1e:	89 c7                	mov    edi,eax
c0016d20:	55                   	push   ebp
c0016d21:	50                   	push   eax
c0016d22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d27:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016d2a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016d30:	e8 43 53 ff ff       	call   c000c078 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016d35:	58                   	pop    eax
c0016d36:	5a                   	pop    edx
c0016d37:	68 07 0c 00 00       	push   0xc07
c0016d3c:	53                   	push   ebx
c0016d3d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016d43:	57                   	push   edi
c0016d44:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016d4b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016d51:	6a 00                	push   0x0
c0016d53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d58:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016d5b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016d61:	e8 ce 56 ff ff       	call   c000c434 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016d66:	83 c4 1c             	add    esp,0x1c
c0016d69:	68 00 10 00 00       	push   0x1000
c0016d6e:	6a 00                	push   0x0
c0016d70:	55                   	push   ebp
c0016d71:	e8 0e 99 fe ff       	call   c0000684 <memset>
c0016d76:	eb 98                	jmp    c0016d10 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0016d78:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c0016d7d:	48                   	dec    eax
c0016d7e:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c0016d83:	75 01                	jne    c0016d86 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016d85:	fb                   	sti    
c0016d86:	83 ec 0c             	sub    esp,0xc
c0016d89:	55                   	push   ebp
c0016d8a:	e8 72 4f ff ff       	call   c000bd01 <Virt::freeKernelVirtualPages(unsigned long)>
c0016d8f:	83 c4 10             	add    esp,0x10
c0016d92:	b0 01                	mov    al,0x1
c0016d94:	81 c4 2c 10 00 00    	add    esp,0x102c
c0016d9a:	5b                   	pop    ebx
c0016d9b:	5e                   	pop    esi
c0016d9c:	5f                   	pop    edi
c0016d9d:	5d                   	pop    ebp
c0016d9e:	c3                   	ret    

c0016d9f <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0016d9f:	55                   	push   ebp
c0016da0:	57                   	push   edi
c0016da1:	56                   	push   esi
c0016da2:	53                   	push   ebx
c0016da3:	83 ec 48             	sub    esp,0x48
c0016da6:	68 14 01 00 00       	push   0x114
c0016dab:	e8 57 2c ff ff       	call   c0009a07 <malloc>
c0016db0:	83 c4 0c             	add    esp,0xc
c0016db3:	89 c6                	mov    esi,eax
c0016db5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016db9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0016dbd:	50                   	push   eax
c0016dbe:	e8 9f 64 ff ff       	call   c000d262 <File::File(char const*, Process*)>
c0016dc3:	58                   	pop    eax
c0016dc4:	5a                   	pop    edx
c0016dc5:	6a 01                	push   0x1
c0016dc7:	56                   	push   esi
c0016dc8:	e8 37 65 ff ff       	call   c000d304 <File::open(FileOpenMode)>
c0016dcd:	83 c4 10             	add    esp,0x10
c0016dd0:	85 c0                	test   eax,eax
c0016dd2:	0f 85 47 01 00 00    	jne    c0016f1f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016dd8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016de0:	83 ec 0c             	sub    esp,0xc
c0016de3:	6a 34                	push   0x34
c0016de5:	e8 1d 2c ff ff       	call   c0009a07 <malloc>
c0016dea:	89 c3                	mov    ebx,eax
c0016dec:	58                   	pop    eax
c0016ded:	8b 06                	mov    eax,DWORD PTR [esi]
c0016def:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0016df3:	57                   	push   edi
c0016df4:	53                   	push   ebx
c0016df5:	6a 00                	push   0x0
c0016df7:	6a 34                	push   0x34
c0016df9:	56                   	push   esi
c0016dfa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016dfd:	83 c4 20             	add    esp,0x20
c0016e00:	85 c0                	test   eax,eax
c0016e02:	0f 85 17 01 00 00    	jne    c0016f1f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016e08:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0016e0e:	0f 85 0b 01 00 00    	jne    c0016f1f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016e14:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016e17:	85 c0                	test   eax,eax
c0016e19:	0f 84 00 01 00 00    	je     c0016f1f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016e1f:	31 d2                	xor    edx,edx
c0016e21:	55                   	push   ebp
c0016e22:	52                   	push   edx
c0016e23:	50                   	push   eax
c0016e24:	56                   	push   esi
c0016e25:	e8 98 65 ff ff       	call   c000d3c2 <File::seek(unsigned long long)>
c0016e2a:	83 c4 10             	add    esp,0x10
c0016e2d:	85 c0                	test   eax,eax
c0016e2f:	0f 85 ea 00 00 00    	jne    c0016f1f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016e35:	83 ec 0c             	sub    esp,0xc
c0016e38:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016e3b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016e3f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016e43:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016e47:	0f af c2             	imul   eax,edx
c0016e4a:	50                   	push   eax
c0016e4b:	e8 b7 2b ff ff       	call   c0009a07 <malloc>
c0016e50:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016e52:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016e56:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016e59:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016e5d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016e61:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016e65:	0f af c2             	imul   eax,edx
c0016e68:	99                   	cdq    
c0016e69:	52                   	push   edx
c0016e6a:	50                   	push   eax
c0016e6b:	56                   	push   esi
c0016e6c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016e6f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0016e72:	83 c4 20             	add    esp,0x20
c0016e75:	85 c0                	test   eax,eax
c0016e77:	0f 84 a2 00 00 00    	je     c0016f1f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016e7d:	31 d2                	xor    edx,edx
c0016e7f:	51                   	push   ecx
c0016e80:	52                   	push   edx
c0016e81:	50                   	push   eax
c0016e82:	56                   	push   esi
c0016e83:	e8 3a 65 ff ff       	call   c000d3c2 <File::seek(unsigned long long)>
c0016e88:	83 c4 10             	add    esp,0x10
c0016e8b:	85 c0                	test   eax,eax
c0016e8d:	0f 85 8c 00 00 00    	jne    c0016f1f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016e93:	83 ec 0c             	sub    esp,0xc
c0016e96:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016e9a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016e9e:	31 ed                	xor    ebp,ebp
c0016ea0:	0f af c2             	imul   eax,edx
c0016ea3:	50                   	push   eax
c0016ea4:	e8 5e 2b ff ff       	call   c0009a07 <malloc>
c0016ea9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016eab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016eaf:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016eb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016eb6:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016eba:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016ebe:	0f af c2             	imul   eax,edx
c0016ec1:	99                   	cdq    
c0016ec2:	52                   	push   edx
c0016ec3:	50                   	push   eax
c0016ec4:	56                   	push   esi
c0016ec5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016ec8:	83 c4 20             	add    esp,0x20
c0016ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016ed3:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0016ed7:	0f 86 80 00 00 00    	jbe    c0016f5d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0016edd:	0f b7 fd             	movzx  edi,bp
c0016ee0:	c1 e7 05             	shl    edi,0x5
c0016ee3:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0016ee7:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0016eea:	75 6b                	jne    c0016f57 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016eec:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0016eef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ef3:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0016ef6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016efa:	52                   	push   edx
c0016efb:	31 d2                	xor    edx,edx
c0016efd:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0016f00:	52                   	push   edx
c0016f01:	50                   	push   eax
c0016f02:	56                   	push   esi
c0016f03:	e8 ba 64 ff ff       	call   c000d3c2 <File::seek(unsigned long long)>
c0016f08:	83 c4 10             	add    esp,0x10
c0016f0b:	85 c0                	test   eax,eax
c0016f0d:	74 17                	je     c0016f26 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0016f0f:	83 ec 0c             	sub    esp,0xc
c0016f12:	68 a4 5a 02 c0       	push   0xc0025aa4
c0016f17:	e8 db 5d ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0016f1c:	83 c4 10             	add    esp,0x10
c0016f1f:	31 c0                	xor    eax,eax
c0016f21:	e9 87 00 00 00       	jmp    c0016fad <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0016f26:	83 ec 0c             	sub    esp,0xc
c0016f29:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0016f2c:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0016f2f:	50                   	push   eax
c0016f30:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016f34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f38:	56                   	push   esi
c0016f39:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0016f3d:	e8 b3 fb ff ff       	call   c0016af5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0016f42:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f46:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0016f4a:	83 c4 20             	add    esp,0x20
c0016f4d:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016f51:	73 04                	jae    c0016f57 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016f53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f57:	45                   	inc    ebp
c0016f58:	e9 76 ff ff ff       	jmp    c0016ed3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0016f5d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0016f61:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016f65:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f69:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0016f6f:	83 ec 0c             	sub    esp,0xc
c0016f72:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0016f78:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016f7d:	05 00 10 00 00       	add    eax,0x1000
c0016f82:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016f85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f89:	e8 89 2a ff ff       	call   c0009a17 <free>
c0016f8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f91:	e8 81 2a ff ff       	call   c0009a17 <free>
c0016f96:	58                   	pop    eax
c0016f97:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f9b:	e8 77 2a ff ff       	call   c0009a17 <free>
c0016fa0:	89 34 24             	mov    DWORD PTR [esp],esi
c0016fa3:	e8 ba 63 ff ff       	call   c000d362 <File::close()>
c0016fa8:	83 c4 10             	add    esp,0x10
c0016fab:	b0 01                	mov    al,0x1
c0016fad:	83 c4 3c             	add    esp,0x3c
c0016fb0:	5b                   	pop    ebx
c0016fb1:	5e                   	pop    esi
c0016fb2:	5f                   	pop    edi
c0016fb3:	5d                   	pop    ebp
c0016fb4:	c3                   	ret    

c0016fb5 <Thr::runtimeReferenceHelper()>:
c0016fb5:	83 ec 18             	sub    esp,0x18
c0016fb8:	68 ac 5a 02 c0       	push   0xc0025aac
c0016fbd:	e8 35 5d ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0016fc2:	fa                   	cli    
c0016fc3:	83 c4 10             	add    esp,0x10
c0016fc6:	eb fe                	jmp    c0016fc6 <Thr::runtimeReferenceHelper()+0x11>

c0016fc8 <Thr::getAddressOfKernelSymbol(char const*)>:
c0016fc8:	57                   	push   edi
c0016fc9:	56                   	push   esi
c0016fca:	53                   	push   ebx
c0016fcb:	31 db                	xor    ebx,ebx
c0016fcd:	39 1d e0 8f 02 c0    	cmp    DWORD PTR ds:0xc0028fe0,ebx
c0016fd3:	7e 3c                	jle    c0017011 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0016fd5:	8b 34 9d 60 8f 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd70a0]
c0016fdc:	31 ff                	xor    edi,edi
c0016fde:	39 3c 9d 60 8e 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd71a0],edi
c0016fe5:	7e 27                	jle    c001700e <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0016fe7:	50                   	push   eax
c0016fe8:	50                   	push   eax
c0016fe9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016fed:	8b 06                	mov    eax,DWORD PTR [esi]
c0016fef:	03 04 9d e0 8e 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd7120]
c0016ff6:	50                   	push   eax
c0016ff7:	e8 d0 97 fe ff       	call   c00007cc <strcmp>
c0016ffc:	83 c4 10             	add    esp,0x10
c0016fff:	85 c0                	test   eax,eax
c0017001:	75 05                	jne    c0017008 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0017003:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017006:	eb 0b                	jmp    c0017013 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0017008:	83 c6 10             	add    esi,0x10
c001700b:	47                   	inc    edi
c001700c:	eb d0                	jmp    c0016fde <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001700e:	43                   	inc    ebx
c001700f:	eb bc                	jmp    c0016fcd <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0017011:	31 c0                	xor    eax,eax
c0017013:	5b                   	pop    ebx
c0017014:	5e                   	pop    esi
c0017015:	5f                   	pop    edi
c0017016:	c3                   	ret    

c0017017 <Thr::loadKernelSymbolTable(char const*)>:
c0017017:	55                   	push   ebp
c0017018:	57                   	push   edi
c0017019:	56                   	push   esi
c001701a:	53                   	push   ebx
c001701b:	83 ec 68             	sub    esp,0x68
c001701e:	8b 35 30 90 02 c0    	mov    esi,DWORD PTR ds:0xc0029030
c0017024:	68 14 01 00 00       	push   0x114
c0017029:	e8 d9 29 ff ff       	call   c0009a07 <malloc>
c001702e:	83 c4 0c             	add    esp,0xc
c0017031:	89 c3                	mov    ebx,eax
c0017033:	56                   	push   esi
c0017034:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0017038:	50                   	push   eax
c0017039:	e8 24 62 ff ff       	call   c000d262 <File::File(char const*, Process*)>
c001703e:	5e                   	pop    esi
c001703f:	5f                   	pop    edi
c0017040:	6a 01                	push   0x1
c0017042:	53                   	push   ebx
c0017043:	e8 bc 62 ff ff       	call   c000d304 <File::open(FileOpenMode)>
c0017048:	83 c4 10             	add    esp,0x10
c001704b:	85 c0                	test   eax,eax
c001704d:	74 0a                	je     c0017059 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001704f:	83 ec 0c             	sub    esp,0xc
c0017052:	68 ce 5a 02 c0       	push   0xc0025ace
c0017057:	eb 34                	jmp    c001708d <Thr::loadKernelSymbolTable(char const*)+0x76>
c0017059:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017061:	83 ec 0c             	sub    esp,0xc
c0017064:	6a 34                	push   0x34
c0017066:	e8 9c 29 ff ff       	call   c0009a07 <malloc>
c001706b:	59                   	pop    ecx
c001706c:	89 c7                	mov    edi,eax
c001706e:	8d 74 24 34          	lea    esi,[esp+0x34]
c0017072:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017074:	56                   	push   esi
c0017075:	57                   	push   edi
c0017076:	6a 00                	push   0x0
c0017078:	6a 34                	push   0x34
c001707a:	53                   	push   ebx
c001707b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001707e:	83 c4 20             	add    esp,0x20
c0017081:	85 c0                	test   eax,eax
c0017083:	74 17                	je     c001709c <Thr::loadKernelSymbolTable(char const*)+0x85>
c0017085:	83 ec 0c             	sub    esp,0xc
c0017088:	68 e5 5a 02 c0       	push   0xc0025ae5
c001708d:	e8 11 d8 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0017092:	83 c4 10             	add    esp,0x10
c0017095:	31 c0                	xor    eax,eax
c0017097:	e9 31 02 00 00       	jmp    c00172cd <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001709c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00170a2:	75 e1                	jne    c0017085 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00170a4:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00170a7:	85 c0                	test   eax,eax
c00170a9:	74 da                	je     c0017085 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00170ab:	52                   	push   edx
c00170ac:	31 d2                	xor    edx,edx
c00170ae:	52                   	push   edx
c00170af:	50                   	push   eax
c00170b0:	53                   	push   ebx
c00170b1:	e8 0c 63 ff ff       	call   c000d3c2 <File::seek(unsigned long long)>
c00170b6:	83 c4 10             	add    esp,0x10
c00170b9:	85 c0                	test   eax,eax
c00170bb:	75 c8                	jne    c0017085 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00170bd:	83 ec 0c             	sub    esp,0xc
c00170c0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00170c4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00170c8:	31 ed                	xor    ebp,ebp
c00170ca:	0f af c2             	imul   eax,edx
c00170cd:	50                   	push   eax
c00170ce:	e8 34 29 ff ff       	call   c0009a07 <malloc>
c00170d3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00170d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00170d9:	89 34 24             	mov    DWORD PTR [esp],esi
c00170dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170e0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00170e4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00170e8:	0f af c2             	imul   eax,edx
c00170eb:	99                   	cdq    
c00170ec:	52                   	push   edx
c00170ed:	50                   	push   eax
c00170ee:	53                   	push   ebx
c00170ef:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00170f2:	83 c4 20             	add    esp,0x20
c00170f5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00170fd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017105:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001710d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017115:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0017119:	0f 86 aa 00 00 00    	jbe    c00171c9 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001711f:	0f b7 f5             	movzx  esi,bp
c0017122:	6b f6 28             	imul   esi,esi,0x28
c0017125:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0017129:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001712c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017130:	50                   	push   eax
c0017131:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017135:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0017139:	8b 16                	mov    edx,DWORD PTR [esi]
c001713b:	6b c0 28             	imul   eax,eax,0x28
c001713e:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0017142:	89 d0                	mov    eax,edx
c0017144:	31 d2                	xor    edx,edx
c0017146:	52                   	push   edx
c0017147:	50                   	push   eax
c0017148:	53                   	push   ebx
c0017149:	e8 74 62 ff ff       	call   c000d3c2 <File::seek(unsigned long long)>
c001714e:	83 c4 0c             	add    esp,0xc
c0017151:	6a 20                	push   0x20
c0017153:	6a 00                	push   0x0
c0017155:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017159:	52                   	push   edx
c001715a:	e8 25 95 fe ff       	call   c0000684 <memset>
c001715f:	58                   	pop    eax
c0017160:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017162:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0017166:	51                   	push   ecx
c0017167:	8d 54 24 40          	lea    edx,[esp+0x40]
c001716b:	52                   	push   edx
c001716c:	6a 00                	push   0x0
c001716e:	6a 1f                	push   0x1f
c0017170:	53                   	push   ebx
c0017171:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017174:	83 c4 18             	add    esp,0x18
c0017177:	68 fc 5a 02 c0       	push   0xc0025afc
c001717c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017180:	52                   	push   edx
c0017181:	e8 46 96 fe ff       	call   c00007cc <strcmp>
c0017186:	83 c4 10             	add    esp,0x10
c0017189:	85 c0                	test   eax,eax
c001718b:	75 0f                	jne    c001719c <Thr::loadKernelSymbolTable(char const*)+0x185>
c001718d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017190:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017194:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017198:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001719c:	50                   	push   eax
c001719d:	50                   	push   eax
c001719e:	68 04 5b 02 c0       	push   0xc0025b04
c00171a3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00171a7:	50                   	push   eax
c00171a8:	e8 1f 96 fe ff       	call   c00007cc <strcmp>
c00171ad:	83 c4 10             	add    esp,0x10
c00171b0:	85 c0                	test   eax,eax
c00171b2:	75 0f                	jne    c00171c3 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00171b4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00171b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00171bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00171bf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00171c3:	45                   	inc    ebp
c00171c4:	e9 4c ff ff ff       	jmp    c0017115 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00171c9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00171ce:	75 10                	jne    c00171e0 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00171d0:	83 ec 0c             	sub    esp,0xc
c00171d3:	68 0c 5b 02 c0       	push   0xc0025b0c
c00171d8:	e8 c6 d6 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c00171dd:	83 c4 10             	add    esp,0x10
c00171e0:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00171e5:	75 10                	jne    c00171f7 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00171e7:	83 ec 0c             	sub    esp,0xc
c00171ea:	68 0c 5b 02 c0       	push   0xc0025b0c
c00171ef:	e8 af d6 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c00171f4:	83 c4 10             	add    esp,0x10
c00171f7:	31 d2                	xor    edx,edx
c00171f9:	50                   	push   eax
c00171fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171fe:	52                   	push   edx
c00171ff:	50                   	push   eax
c0017200:	53                   	push   ebx
c0017201:	e8 bc 61 ff ff       	call   c000d3c2 <File::seek(unsigned long long)>
c0017206:	5a                   	pop    edx
c0017207:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001720b:	e8 f7 27 ff ff       	call   c0009a07 <malloc>
c0017210:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017214:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017218:	31 c9                	xor    ecx,ecx
c001721a:	5e                   	pop    esi
c001721b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001721d:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017221:	55                   	push   ebp
c0017222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017226:	51                   	push   ecx
c0017227:	52                   	push   edx
c0017228:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001722c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0017230:	53                   	push   ebx
c0017231:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017234:	83 c4 14             	add    esp,0x14
c0017237:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001723b:	e8 c7 27 ff ff       	call   c0009a07 <malloc>
c0017240:	89 c6                	mov    esi,eax
c0017242:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017244:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017247:	56                   	push   esi
c0017248:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001724c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017250:	51                   	push   ecx
c0017251:	52                   	push   edx
c0017252:	53                   	push   ebx
c0017253:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017256:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001725a:	8b 15 e0 8f 02 c0    	mov    edx,DWORD PTR ds:0xc0028fe0
c0017260:	83 c4 1c             	add    esp,0x1c
c0017263:	c1 e8 04             	shr    eax,0x4
c0017266:	89 04 95 60 8e 02 c0 	mov    DWORD PTR [edx*4-0x3ffd71a0],eax
c001726d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017271:	31 d2                	xor    edx,edx
c0017273:	52                   	push   edx
c0017274:	50                   	push   eax
c0017275:	53                   	push   ebx
c0017276:	e8 47 61 ff ff       	call   c000d3c2 <File::seek(unsigned long long)>
c001727b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001727d:	31 d2                	xor    edx,edx
c001727f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017282:	56                   	push   esi
c0017283:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017287:	52                   	push   edx
c0017288:	50                   	push   eax
c0017289:	53                   	push   ebx
c001728a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001728d:	83 c4 14             	add    esp,0x14
c0017290:	53                   	push   ebx
c0017291:	e8 cc 60 ff ff       	call   c000d362 <File::close()>
c0017296:	5d                   	pop    ebp
c0017297:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001729b:	e8 77 27 ff ff       	call   c0009a17 <free>
c00172a0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00172a3:	e8 6f 27 ff ff       	call   c0009a17 <free>
c00172a8:	a1 e0 8f 02 c0       	mov    eax,ds:0xc0028fe0
c00172ad:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00172b1:	8d 50 01             	lea    edx,[eax+0x1]
c00172b4:	89 0c 85 60 8f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd70a0],ecx
c00172bb:	89 34 85 e0 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7120],esi
c00172c2:	89 15 e0 8f 02 c0    	mov    DWORD PTR ds:0xc0028fe0,edx
c00172c8:	83 c4 10             	add    esp,0x10
c00172cb:	b0 01                	mov    al,0x1
c00172cd:	83 c4 5c             	add    esp,0x5c
c00172d0:	5b                   	pop    ebx
c00172d1:	5e                   	pop    esi
c00172d2:	5f                   	pop    edi
c00172d3:	5d                   	pop    ebp
c00172d4:	c3                   	ret    

c00172d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00172d5:	55                   	push   ebp
c00172d6:	57                   	push   edi
c00172d7:	56                   	push   esi
c00172d8:	53                   	push   ebx
c00172d9:	81 ec 68 03 00 00    	sub    esp,0x368
c00172df:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00172e6:	8b 1d 30 90 02 c0    	mov    ebx,DWORD PTR ds:0xc0029030
c00172ec:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00172f0:	68 14 01 00 00       	push   0x114
c00172f5:	e8 0d 27 ff ff       	call   c0009a07 <malloc>
c00172fa:	83 c4 0c             	add    esp,0xc
c00172fd:	89 c5                	mov    ebp,eax
c00172ff:	53                   	push   ebx
c0017300:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017307:	50                   	push   eax
c0017308:	e8 55 5f ff ff       	call   c000d262 <File::File(char const*, Process*)>
c001730d:	5e                   	pop    esi
c001730e:	5f                   	pop    edi
c001730f:	6a 01                	push   0x1
c0017311:	55                   	push   ebp
c0017312:	e8 ed 5f ff ff       	call   c000d304 <File::open(FileOpenMode)>
c0017317:	83 c4 10             	add    esp,0x10
c001731a:	85 c0                	test   eax,eax
c001731c:	0f 85 a7 06 00 00    	jne    c00179c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017322:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001732a:	83 ec 0c             	sub    esp,0xc
c001732d:	6a 34                	push   0x34
c001732f:	e8 d3 26 ff ff       	call   c0009a07 <malloc>
c0017334:	5b                   	pop    ebx
c0017335:	89 c7                	mov    edi,eax
c0017337:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001733b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001733e:	53                   	push   ebx
c001733f:	57                   	push   edi
c0017340:	6a 00                	push   0x0
c0017342:	6a 34                	push   0x34
c0017344:	55                   	push   ebp
c0017345:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017348:	83 c4 20             	add    esp,0x20
c001734b:	85 c0                	test   eax,eax
c001734d:	0f 85 76 06 00 00    	jne    c00179c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017353:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017359:	0f 85 6a 06 00 00    	jne    c00179c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001735f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017362:	85 c0                	test   eax,eax
c0017364:	0f 84 5f 06 00 00    	je     c00179c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001736a:	31 d2                	xor    edx,edx
c001736c:	51                   	push   ecx
c001736d:	52                   	push   edx
c001736e:	50                   	push   eax
c001736f:	55                   	push   ebp
c0017370:	e8 4d 60 ff ff       	call   c000d3c2 <File::seek(unsigned long long)>
c0017375:	83 c4 10             	add    esp,0x10
c0017378:	85 c0                	test   eax,eax
c001737a:	0f 85 49 06 00 00    	jne    c00179c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017380:	83 ec 0c             	sub    esp,0xc
c0017383:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0017386:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001738a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001738e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017392:	0f af c2             	imul   eax,edx
c0017395:	50                   	push   eax
c0017396:	e8 6c 26 ff ff       	call   c0009a07 <malloc>
c001739b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001739e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00173a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00173a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173a9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00173ad:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00173b1:	0f af c2             	imul   eax,edx
c00173b4:	99                   	cdq    
c00173b5:	52                   	push   edx
c00173b6:	50                   	push   eax
c00173b7:	55                   	push   ebp
c00173b8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00173bb:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00173be:	83 c4 20             	add    esp,0x20
c00173c1:	85 c0                	test   eax,eax
c00173c3:	0f 84 00 06 00 00    	je     c00179c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00173c9:	52                   	push   edx
c00173ca:	31 d2                	xor    edx,edx
c00173cc:	52                   	push   edx
c00173cd:	50                   	push   eax
c00173ce:	55                   	push   ebp
c00173cf:	e8 ee 5f ff ff       	call   c000d3c2 <File::seek(unsigned long long)>
c00173d4:	83 c4 10             	add    esp,0x10
c00173d7:	85 c0                	test   eax,eax
c00173d9:	0f 85 ea 05 00 00    	jne    c00179c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00173df:	83 ec 0c             	sub    esp,0xc
c00173e2:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00173e6:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00173ea:	31 f6                	xor    esi,esi
c00173ec:	0f af c2             	imul   eax,edx
c00173ef:	50                   	push   eax
c00173f0:	e8 12 26 ff ff       	call   c0009a07 <malloc>
c00173f5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00173f8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00173fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00173ff:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017403:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0017407:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001740b:	0f af c2             	imul   eax,edx
c001740e:	99                   	cdq    
c001740f:	52                   	push   edx
c0017410:	50                   	push   eax
c0017411:	55                   	push   ebp
c0017412:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017415:	83 c4 20             	add    esp,0x20
c0017418:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001741c:	0f 86 8a 00 00 00    	jbe    c00174ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0017422:	0f b7 de             	movzx  ebx,si
c0017425:	c1 e3 05             	shl    ebx,0x5
c0017428:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001742c:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001742f:	75 75                	jne    c00174a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0017431:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017434:	31 d2                	xor    edx,edx
c0017436:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001743a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001743d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017441:	50                   	push   eax
c0017442:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017445:	52                   	push   edx
c0017446:	50                   	push   eax
c0017447:	55                   	push   ebp
c0017448:	e8 75 5f ff ff       	call   c000d3c2 <File::seek(unsigned long long)>
c001744d:	83 c4 10             	add    esp,0x10
c0017450:	85 c0                	test   eax,eax
c0017452:	0f 85 71 05 00 00    	jne    c00179c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017458:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001745f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017462:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0017466:	31 d2                	xor    edx,edx
c0017468:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001746c:	83 ec 0c             	sub    esp,0xc
c001746f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017473:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001747a:	50                   	push   eax
c001747b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001747f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017483:	52                   	push   edx
c0017484:	50                   	push   eax
c0017485:	55                   	push   ebp
c0017486:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017489:	83 c4 1c             	add    esp,0x1c
c001748c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001748f:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017492:	50                   	push   eax
c0017493:	6a 00                	push   0x0
c0017495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017499:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001749d:	50                   	push   eax
c001749e:	e8 e1 91 fe ff       	call   c0000684 <memset>
c00174a3:	83 c4 10             	add    esp,0x10
c00174a6:	46                   	inc    esi
c00174a7:	e9 6c ff ff ff       	jmp    c0017418 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00174ac:	53                   	push   ebx
c00174ad:	31 db                	xor    ebx,ebx
c00174af:	68 00 01 00 00       	push   0x100
c00174b4:	6a 00                	push   0x0
c00174b6:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00174ba:	50                   	push   eax
c00174bb:	e8 c4 91 fe ff       	call   c0000684 <memset>
c00174c0:	83 c4 0c             	add    esp,0xc
c00174c3:	68 00 01 00 00       	push   0x100
c00174c8:	6a 00                	push   0x0
c00174ca:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00174d1:	50                   	push   eax
c00174d2:	e8 ad 91 fe ff       	call   c0000684 <memset>
c00174d7:	83 c4 10             	add    esp,0x10
c00174da:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00174e2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00174ea:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00174f2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00174fa:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017502:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0017506:	0f 86 30 01 00 00    	jbe    c001763c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001750c:	0f b7 f3             	movzx  esi,bx
c001750f:	6b f6 28             	imul   esi,esi,0x28
c0017512:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0017516:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017519:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001751d:	52                   	push   edx
c001751e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017522:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0017526:	8b 06                	mov    eax,DWORD PTR [esi]
c0017528:	6b d2 28             	imul   edx,edx,0x28
c001752b:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001752f:	31 d2                	xor    edx,edx
c0017531:	52                   	push   edx
c0017532:	50                   	push   eax
c0017533:	55                   	push   ebp
c0017534:	e8 89 5e ff ff       	call   c000d3c2 <File::seek(unsigned long long)>
c0017539:	83 c4 0c             	add    esp,0xc
c001753c:	6a 20                	push   0x20
c001753e:	6a 00                	push   0x0
c0017540:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017547:	51                   	push   ecx
c0017548:	e8 37 91 fe ff       	call   c0000684 <memset>
c001754d:	59                   	pop    ecx
c001754e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017551:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017555:	52                   	push   edx
c0017556:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001755d:	51                   	push   ecx
c001755e:	6a 00                	push   0x0
c0017560:	6a 1f                	push   0x1f
c0017562:	55                   	push   ebp
c0017563:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017566:	83 c4 1c             	add    esp,0x1c
c0017569:	6a 09                	push   0x9
c001756b:	68 26 5b 02 c0       	push   0xc0025b26
c0017570:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017577:	51                   	push   ecx
c0017578:	e8 03 90 fe ff       	call   c0000580 <memcmp>
c001757d:	83 c4 10             	add    esp,0x10
c0017580:	85 c0                	test   eax,eax
c0017582:	75 21                	jne    c00175a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0017584:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017588:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001758c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017590:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017594:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017597:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001759e:	89 d0                	mov    eax,edx
c00175a0:	40                   	inc    eax
c00175a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00175a5:	50                   	push   eax
c00175a6:	6a 09                	push   0x9
c00175a8:	68 30 5b 02 c0       	push   0xc0025b30
c00175ad:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00175b4:	50                   	push   eax
c00175b5:	e8 c6 8f fe ff       	call   c0000580 <memcmp>
c00175ba:	83 c4 10             	add    esp,0x10
c00175bd:	85 c0                	test   eax,eax
c00175bf:	75 21                	jne    c00175e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00175c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00175c9:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00175cd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00175d1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00175d4:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00175db:	89 d0                	mov    eax,edx
c00175dd:	40                   	inc    eax
c00175de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00175e2:	50                   	push   eax
c00175e3:	50                   	push   eax
c00175e4:	68 fc 5a 02 c0       	push   0xc0025afc
c00175e9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00175f0:	50                   	push   eax
c00175f1:	e8 d6 91 fe ff       	call   c00007cc <strcmp>
c00175f6:	83 c4 10             	add    esp,0x10
c00175f9:	85 c0                	test   eax,eax
c00175fb:	75 0f                	jne    c001760c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00175fd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017600:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017604:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017608:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001760c:	50                   	push   eax
c001760d:	50                   	push   eax
c001760e:	68 04 5b 02 c0       	push   0xc0025b04
c0017613:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001761a:	50                   	push   eax
c001761b:	e8 ac 91 fe ff       	call   c00007cc <strcmp>
c0017620:	83 c4 10             	add    esp,0x10
c0017623:	85 c0                	test   eax,eax
c0017625:	75 0f                	jne    c0017636 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0017627:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001762a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001762e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017632:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017636:	43                   	inc    ebx
c0017637:	e9 c6 fe ff ff       	jmp    c0017502 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001763c:	31 d2                	xor    edx,edx
c001763e:	50                   	push   eax
c001763f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017643:	52                   	push   edx
c0017644:	50                   	push   eax
c0017645:	55                   	push   ebp
c0017646:	e8 77 5d ff ff       	call   c000d3c2 <File::seek(unsigned long long)>
c001764b:	58                   	pop    eax
c001764c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017650:	e8 b2 23 ff ff       	call   c0009a07 <malloc>
c0017655:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017658:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001765c:	31 d2                	xor    edx,edx
c001765e:	58                   	pop    eax
c001765f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017663:	53                   	push   ebx
c0017664:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017668:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001766c:	52                   	push   edx
c001766d:	50                   	push   eax
c001766e:	55                   	push   ebp
c001766f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017672:	83 c4 14             	add    esp,0x14
c0017675:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017679:	e8 89 23 ff ff       	call   c0009a07 <malloc>
c001767e:	31 d2                	xor    edx,edx
c0017680:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017684:	83 c4 0c             	add    esp,0xc
c0017687:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001768b:	52                   	push   edx
c001768c:	50                   	push   eax
c001768d:	55                   	push   ebp
c001768e:	e8 2f 5d ff ff       	call   c000d3c2 <File::seek(unsigned long long)>
c0017693:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017696:	31 d2                	xor    edx,edx
c0017698:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001769b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001769f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176a3:	52                   	push   edx
c00176a4:	50                   	push   eax
c00176a5:	55                   	push   ebp
c00176a6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00176a9:	83 c4 20             	add    esp,0x20
c00176ac:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00176b4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00176b8:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00176bc:	0f 84 0b 03 00 00    	je     c00179cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00176c2:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00176c9:	31 d2                	xor    edx,edx
c00176cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176cf:	c1 e8 03             	shr    eax,0x3
c00176d2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00176d6:	51                   	push   ecx
c00176d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00176db:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00176df:	52                   	push   edx
c00176e0:	50                   	push   eax
c00176e1:	55                   	push   ebp
c00176e2:	e8 db 5c ff ff       	call   c000d3c2 <File::seek(unsigned long long)>
c00176e7:	5b                   	pop    ebx
c00176e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176ec:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00176f3:	e8 0f 23 ff ff       	call   c0009a07 <malloc>
c00176f8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00176fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00176ff:	31 d2                	xor    edx,edx
c0017701:	5e                   	pop    esi
c0017702:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017706:	50                   	push   eax
c0017707:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001770b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001770f:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0017716:	52                   	push   edx
c0017717:	50                   	push   eax
c0017718:	55                   	push   ebp
c0017719:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001771c:	83 c4 20             	add    esp,0x20
c001771f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017727:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001772b:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001772f:	0f 8d 7c 02 00 00    	jge    c00179b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0017735:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017739:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001773d:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0017742:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0017745:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017749:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001774d:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0017751:	89 d8                	mov    eax,ebx
c0017753:	c1 e8 08             	shr    eax,0x8
c0017756:	89 c6                	mov    esi,eax
c0017758:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001775c:	c1 e6 04             	shl    esi,0x4
c001775f:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0017763:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0017766:	85 d2                	test   edx,edx
c0017768:	0f 85 bf 00 00 00    	jne    c001782d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001776e:	83 ec 0c             	sub    esp,0xc
c0017771:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017775:	03 06                	add    eax,DWORD PTR [esi]
c0017777:	50                   	push   eax
c0017778:	e8 4b f8 ff ff       	call   c0016fc8 <Thr::getAddressOfKernelSymbol(char const*)>
c001777d:	83 c4 10             	add    esp,0x10
c0017780:	89 c2                	mov    edx,eax
c0017782:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0017787:	85 c0                	test   eax,eax
c0017789:	0f 85 9e 00 00 00    	jne    c001782d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001778f:	83 ec 0c             	sub    esp,0xc
c0017792:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017796:	03 06                	add    eax,DWORD PTR [esi]
c0017798:	50                   	push   eax
c0017799:	e8 72 11 ff ff       	call   c0008910 <Krnl::resolveCompatibilitySymbol(char*)>
c001779e:	83 c4 10             	add    esp,0x10
c00177a1:	89 c2                	mov    edx,eax
c00177a3:	85 c0                	test   eax,eax
c00177a5:	0f 85 82 00 00 00    	jne    c001782d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00177ab:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00177af:	50                   	push   eax
c00177b0:	50                   	push   eax
c00177b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177b5:	03 06                	add    eax,DWORD PTR [esi]
c00177b7:	50                   	push   eax
c00177b8:	68 3a 5b 02 c0       	push   0xc0025b3a
c00177bd:	e8 35 55 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c00177c2:	58                   	pop    eax
c00177c3:	5a                   	pop    edx
c00177c4:	68 54 5b 02 c0       	push   0xc0025b54
c00177c9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00177d0:	50                   	push   eax
c00177d1:	e8 6a 8f fe ff       	call   c0000740 <strcpy>
c00177d6:	59                   	pop    ecx
c00177d7:	58                   	pop    eax
c00177d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177dc:	03 06                	add    eax,DWORD PTR [esi]
c00177de:	50                   	push   eax
c00177df:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00177e6:	50                   	push   eax
c00177e7:	e8 94 90 fe ff       	call   c0000880 <strcat>
c00177ec:	58                   	pop    eax
c00177ed:	5a                   	pop    edx
c00177ee:	68 ea 5b 02 c0       	push   0xc0025bea
c00177f3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00177fa:	50                   	push   eax
c00177fb:	e8 80 90 fe ff       	call   c0000880 <strcat>
c0017800:	83 c4 10             	add    esp,0x10
c0017803:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017808:	0f 84 5d 01 00 00    	je     c001796b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001780e:	83 ec 0c             	sub    esp,0xc
c0017811:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017818:	50                   	push   eax
c0017819:	e8 85 d0 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c001781e:	83 c4 10             	add    esp,0x10
c0017821:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017825:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017829:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001782d:	80 fb 01             	cmp    bl,0x1
c0017830:	0f 85 88 00 00 00    	jne    c00178be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0017836:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001783d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017841:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0017845:	01 ce                	add    esi,ecx
c0017847:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001784d:	0f 94 c0             	sete   al
c0017850:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017856:	0f 94 c3             	sete   bl
c0017859:	09 c3                	or     ebx,eax
c001785b:	8b 06                	mov    eax,DWORD PTR [esi]
c001785d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017862:	74 41                	je     c00178a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0017864:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017867:	84 db                	test   bl,bl
c0017869:	75 15                	jne    c0017880 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001786b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001786f:	66 83 f8 0c          	cmp    ax,0xc
c0017873:	76 05                	jbe    c001787a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0017875:	b8 0c 00 00 00       	mov    eax,0xc
c001787a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001787e:	76 37                	jbe    c00178b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017880:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0017884:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017889:	0f 84 dc 00 00 00    	je     c001796b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001788f:	83 ec 0c             	sub    esp,0xc
c0017892:	68 6b 5b 02 c0       	push   0xc0025b6b
c0017897:	e8 07 d0 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c001789c:	83 c4 10             	add    esp,0x10
c001789f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00178a3:	eb 12                	jmp    c00178b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00178a5:	01 c1                	add    ecx,eax
c00178a7:	84 db                	test   bl,bl
c00178a9:	75 0c                	jne    c00178b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00178ab:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00178af:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00178b3:	77 02                	ja     c00178b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00178b5:	01 d1                	add    ecx,edx
c00178b7:	89 0e                	mov    DWORD PTR [esi],ecx
c00178b9:	e9 ea 00 00 00       	jmp    c00179a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00178be:	80 fb 02             	cmp    bl,0x2
c00178c1:	75 7c                	jne    c001793f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00178c3:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00178ca:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c00178ce:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c00178d2:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00178d8:	74 20                	je     c00178fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00178da:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00178e0:	74 18                	je     c00178fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00178e2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00178e6:	b9 0a 00 00 00       	mov    ecx,0xa
c00178eb:	66 83 f8 0e          	cmp    ax,0xe
c00178ef:	77 03                	ja     c00178f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c00178f1:	8d 48 fc             	lea    ecx,[eax-0x4]
c00178f4:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c00178f8:	76 1f                	jbe    c0017919 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c00178fa:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00178fe:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017903:	74 66                	je     c001796b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017905:	83 ec 0c             	sub    esp,0xc
c0017908:	68 87 5b 02 c0       	push   0xc0025b87
c001790d:	e8 91 cf ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0017912:	83 c4 10             	add    esp,0x10
c0017915:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017919:	8b 06                	mov    eax,DWORD PTR [esi]
c001791b:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017920:	74 13                	je     c0017935 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0017922:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017926:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001792d:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0017931:	01 c8                	add    eax,ecx
c0017933:	eb 04                	jmp    c0017939 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0017935:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0017939:	01 c2                	add    edx,eax
c001793b:	89 16                	mov    DWORD PTR [esi],edx
c001793d:	eb 69                	jmp    c00179a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001793f:	0f b6 db             	movzx  ebx,bl
c0017942:	50                   	push   eax
c0017943:	50                   	push   eax
c0017944:	53                   	push   ebx
c0017945:	68 a3 5b 02 c0       	push   0xc0025ba3
c001794a:	e8 a8 53 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c001794f:	83 c4 10             	add    esp,0x10
c0017952:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017957:	74 12                	je     c001796b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017959:	83 ec 0c             	sub    esp,0xc
c001795c:	68 ae 5b 02 c0       	push   0xc0025bae
c0017961:	e8 3d cf ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0017966:	83 c4 10             	add    esp,0x10
c0017969:	eb 3d                	jmp    c00179a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001796b:	83 ec 0c             	sub    esp,0xc
c001796e:	55                   	push   ebp
c001796f:	e8 ee 59 ff ff       	call   c000d362 <File::close()>
c0017974:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017977:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001797a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001797d:	59                   	pop    ecx
c001797e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017982:	e8 90 20 ff ff       	call   c0009a17 <free>
c0017987:	5b                   	pop    ebx
c0017988:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001798c:	e8 86 20 ff ff       	call   c0009a17 <free>
c0017991:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017994:	e8 7e 20 ff ff       	call   c0009a17 <free>
c0017999:	5e                   	pop    esi
c001799a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001799e:	e8 74 20 ff ff       	call   c0009a17 <free>
c00179a3:	83 c4 10             	add    esp,0x10
c00179a6:	eb 21                	jmp    c00179c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00179a8:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00179ac:	e9 76 fd ff ff       	jmp    c0017727 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c00179b1:	83 ec 0c             	sub    esp,0xc
c00179b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179b8:	e8 5a 20 ff ff       	call   c0009a17 <free>
c00179bd:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00179c1:	83 c4 10             	add    esp,0x10
c00179c4:	e9 eb fc ff ff       	jmp    c00176b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c00179c9:	31 c0                	xor    eax,eax
c00179cb:	eb 33                	jmp    c0017a00 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c00179cd:	83 ec 0c             	sub    esp,0xc
c00179d0:	55                   	push   ebp
c00179d1:	e8 8c 59 ff ff       	call   c000d362 <File::close()>
c00179d6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00179d9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00179dc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00179df:	58                   	pop    eax
c00179e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00179e4:	e8 2e 20 ff ff       	call   c0009a17 <free>
c00179e9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00179ec:	e8 26 20 ff ff       	call   c0009a17 <free>
c00179f1:	5a                   	pop    edx
c00179f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179f6:	e8 1c 20 ff ff       	call   c0009a17 <free>
c00179fb:	83 c4 10             	add    esp,0x10
c00179fe:	b0 01                	mov    al,0x1
c0017a00:	81 c4 5c 03 00 00    	add    esp,0x35c
c0017a06:	5b                   	pop    ebx
c0017a07:	5e                   	pop    esi
c0017a08:	5f                   	pop    edi
c0017a09:	5d                   	pop    ebp
c0017a0a:	c3                   	ret    

c0017a0b <Thr::getDriverBaseFromAddress(unsigned long)>:
c0017a0b:	56                   	push   esi
c0017a0c:	31 d2                	xor    edx,edx
c0017a0e:	53                   	push   ebx
c0017a0f:	8b 1d 40 88 02 c0    	mov    ebx,DWORD PTR ds:0xc0028840
c0017a15:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017a19:	39 d3                	cmp    ebx,edx
c0017a1b:	7e 1b                	jle    c0017a38 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017a1d:	8b 04 95 60 8a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd75a0]
c0017a24:	39 c8                	cmp    eax,ecx
c0017a26:	77 0d                	ja     c0017a35 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0017a28:	8b 34 95 60 88 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd77a0]
c0017a2f:	01 c6                	add    esi,eax
c0017a31:	39 ce                	cmp    esi,ecx
c0017a33:	77 05                	ja     c0017a3a <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0017a35:	42                   	inc    edx
c0017a36:	eb e1                	jmp    c0017a19 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0017a38:	31 c0                	xor    eax,eax
c0017a3a:	5b                   	pop    ebx
c0017a3b:	5e                   	pop    esi
c0017a3c:	c3                   	ret    

c0017a3d <Thr::getDriverNameFromAddress(unsigned long)>:
c0017a3d:	53                   	push   ebx
c0017a3e:	31 c0                	xor    eax,eax
c0017a40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017a44:	8b 1d 40 88 02 c0    	mov    ebx,DWORD PTR ds:0xc0028840
c0017a4a:	39 c3                	cmp    ebx,eax
c0017a4c:	7e 22                	jle    c0017a70 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0017a4e:	8b 14 85 60 8a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd75a0]
c0017a55:	39 ca                	cmp    edx,ecx
c0017a57:	77 14                	ja     c0017a6d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017a59:	03 14 85 60 88 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd77a0]
c0017a60:	39 ca                	cmp    edx,ecx
c0017a62:	76 09                	jbe    c0017a6d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017a64:	8b 04 85 60 8c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd73a0]
c0017a6b:	eb 05                	jmp    c0017a72 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0017a6d:	40                   	inc    eax
c0017a6e:	eb da                	jmp    c0017a4a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0017a70:	31 c0                	xor    eax,eax
c0017a72:	5b                   	pop    ebx
c0017a73:	c3                   	ret    

c0017a74 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0017a74:	53                   	push   ebx
c0017a75:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017a79:	53                   	push   ebx
c0017a7a:	e8 8c ff ff ff       	call   c0017a0b <Thr::getDriverBaseFromAddress(unsigned long)>
c0017a7f:	5a                   	pop    edx
c0017a80:	31 d2                	xor    edx,edx
c0017a82:	85 c0                	test   eax,eax
c0017a84:	74 04                	je     c0017a8a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0017a86:	89 da                	mov    edx,ebx
c0017a88:	29 c2                	sub    edx,eax
c0017a8a:	89 d0                	mov    eax,edx
c0017a8c:	5b                   	pop    ebx
c0017a8d:	c3                   	ret    

c0017a8e <Thr::loadDLL(char const*, bool)>:
c0017a8e:	55                   	push   ebp
c0017a8f:	57                   	push   edi
c0017a90:	56                   	push   esi
c0017a91:	53                   	push   ebx
c0017a92:	81 ec 34 01 00 00    	sub    esp,0x134
c0017a98:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0017a9f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0017aa6:	56                   	push   esi
c0017aa7:	68 c6 5b 02 c0       	push   0xc0025bc6
c0017aac:	e8 46 52 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0017ab1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017ab8:	e8 4a 1f ff ff       	call   c0009a07 <malloc>
c0017abd:	83 c4 0c             	add    esp,0xc
c0017ac0:	89 c3                	mov    ebx,eax
c0017ac2:	ff 35 30 90 02 c0    	push   DWORD PTR ds:0xc0029030
c0017ac8:	56                   	push   esi
c0017ac9:	50                   	push   eax
c0017aca:	e8 93 57 ff ff       	call   c000d262 <File::File(char const*, Process*)>
c0017acf:	83 c4 10             	add    esp,0x10
c0017ad2:	85 db                	test   ebx,ebx
c0017ad4:	75 3c                	jne    c0017b12 <Thr::loadDLL(char const*, bool)+0x84>
c0017ad6:	89 f8                	mov    eax,edi
c0017ad8:	84 c0                	test   al,al
c0017ada:	0f 84 d2 01 00 00    	je     c0017cb2 <Thr::loadDLL(char const*, bool)+0x224>
c0017ae0:	55                   	push   ebp
c0017ae1:	55                   	push   ebp
c0017ae2:	68 d7 5b 02 c0       	push   0xc0025bd7
c0017ae7:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0017aeb:	55                   	push   ebp
c0017aec:	e8 4f 8c fe ff       	call   c0000740 <strcpy>
c0017af1:	58                   	pop    eax
c0017af2:	5a                   	pop    edx
c0017af3:	56                   	push   esi
c0017af4:	55                   	push   ebp
c0017af5:	e8 86 8d fe ff       	call   c0000880 <strcat>
c0017afa:	59                   	pop    ecx
c0017afb:	58                   	pop    eax
c0017afc:	68 ea 5b 02 c0       	push   0xc0025bea
c0017b01:	55                   	push   ebp
c0017b02:	e8 79 8d fe ff       	call   c0000880 <strcat>
c0017b07:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017b0a:	e8 94 cd ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0017b0f:	83 c4 10             	add    esp,0x10
c0017b12:	51                   	push   ecx
c0017b13:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0017b17:	50                   	push   eax
c0017b18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017b1c:	50                   	push   eax
c0017b1d:	53                   	push   ebx
c0017b1e:	e8 8d 5a ff ff       	call   c000d5b0 <File::stat(unsigned long long*, bool*)>
c0017b23:	83 c4 10             	add    esp,0x10
c0017b26:	85 db                	test   ebx,ebx
c0017b28:	74 0c                	je     c0017b36 <Thr::loadDLL(char const*, bool)+0xa8>
c0017b2a:	83 ec 0c             	sub    esp,0xc
c0017b2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017b2f:	53                   	push   ebx
c0017b30:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017b33:	83 c4 10             	add    esp,0x10
c0017b36:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0017b3b:	75 0a                	jne    c0017b47 <Thr::loadDLL(char const*, bool)+0xb9>
c0017b3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b41:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0017b45:	75 3c                	jne    c0017b83 <Thr::loadDLL(char const*, bool)+0xf5>
c0017b47:	89 f8                	mov    eax,edi
c0017b49:	84 c0                	test   al,al
c0017b4b:	0f 84 49 01 00 00    	je     c0017c9a <Thr::loadDLL(char const*, bool)+0x20c>
c0017b51:	51                   	push   ecx
c0017b52:	51                   	push   ecx
c0017b53:	68 d7 5b 02 c0       	push   0xc0025bd7
c0017b58:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0017b5c:	53                   	push   ebx
c0017b5d:	e8 de 8b fe ff       	call   c0000740 <strcpy>
c0017b62:	5d                   	pop    ebp
c0017b63:	58                   	pop    eax
c0017b64:	56                   	push   esi
c0017b65:	53                   	push   ebx
c0017b66:	e8 15 8d fe ff       	call   c0000880 <strcat>
c0017b6b:	58                   	pop    eax
c0017b6c:	5a                   	pop    edx
c0017b6d:	68 ea 5b 02 c0       	push   0xc0025bea
c0017b72:	53                   	push   ebx
c0017b73:	e8 08 8d fe ff       	call   c0000880 <strcat>
c0017b78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017b7b:	e8 23 cd ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0017b80:	83 c4 10             	add    esp,0x10
c0017b83:	52                   	push   edx
c0017b84:	6a 03                	push   0x3
c0017b86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b8a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017b8e:	05 ff 0f 00 00       	add    eax,0xfff
c0017b93:	83 d2 00             	adc    edx,0x0
c0017b96:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017b9a:	50                   	push   eax
c0017b9b:	ff 35 70 7c 02 c0    	push   DWORD PTR ds:0xc0027c70
c0017ba1:	e8 d4 45 ff ff       	call   c000c17a <VAS::allocatePages(int, int)>
c0017ba6:	59                   	pop    ecx
c0017ba7:	89 c3                	mov    ebx,eax
c0017ba9:	5d                   	pop    ebp
c0017baa:	50                   	push   eax
c0017bab:	68 66 3e 02 c0       	push   0xc0023e66
c0017bb0:	e8 42 51 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0017bb5:	89 34 24             	mov    DWORD PTR [esp],esi
c0017bb8:	e8 e3 8a fe ff       	call   c00006a0 <strlen>
c0017bbd:	8b 2d 40 88 02 c0    	mov    ebp,DWORD PTR ds:0xc0028840
c0017bc3:	40                   	inc    eax
c0017bc4:	89 04 24             	mov    DWORD PTR [esp],eax
c0017bc7:	e8 3b 1e ff ff       	call   c0009a07 <malloc>
c0017bcc:	89 04 ad 60 8c 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd73a0],eax
c0017bd3:	58                   	pop    eax
c0017bd4:	a1 40 88 02 c0       	mov    eax,ds:0xc0028840
c0017bd9:	5a                   	pop    edx
c0017bda:	56                   	push   esi
c0017bdb:	ff 34 85 60 8c 02 c0 	push   DWORD PTR [eax*4-0x3ffd73a0]
c0017be2:	e8 59 8b fe ff       	call   c0000740 <strcpy>
c0017be7:	a1 40 88 02 c0       	mov    eax,ds:0xc0028840
c0017bec:	8d 50 01             	lea    edx,[eax+0x1]
c0017bef:	89 1c 85 60 8a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd75a0],ebx
c0017bf6:	89 15 40 88 02 c0    	mov    DWORD PTR ds:0xc0028840,edx
c0017bfc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c00:	83 c4 0c             	add    esp,0xc
c0017c03:	89 14 85 60 88 02 c0 	mov    DWORD PTR [eax*4-0x3ffd77a0],edx
c0017c0a:	6a 01                	push   0x1
c0017c0c:	53                   	push   ebx
c0017c0d:	56                   	push   esi
c0017c0e:	e8 c2 f6 ff ff       	call   c00172d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0017c13:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017c17:	83 c4 10             	add    esp,0x10
c0017c1a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017c1f:	0f 85 89 00 00 00    	jne    c0017cae <Thr::loadDLL(char const*, bool)+0x220>
c0017c25:	89 f8                	mov    eax,edi
c0017c27:	84 c0                	test   al,al
c0017c29:	74 73                	je     c0017c9e <Thr::loadDLL(char const*, bool)+0x210>
c0017c2b:	83 ec 0c             	sub    esp,0xc
c0017c2e:	68 ec 5b 02 c0       	push   0xc0025bec
c0017c33:	e8 6b cc ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0017c38:	83 c4 10             	add    esp,0x10
c0017c3b:	eb 61                	jmp    c0017c9e <Thr::loadDLL(char const*, bool)+0x210>
c0017c3d:	50                   	push   eax
c0017c3e:	50                   	push   eax
c0017c3f:	89 e8                	mov    eax,ebp
c0017c41:	c1 e0 0c             	shl    eax,0xc
c0017c44:	01 d8                	add    eax,ebx
c0017c46:	50                   	push   eax
c0017c47:	ff 35 70 7c 02 c0    	push   DWORD PTR ds:0xc0027c70
c0017c4d:	e8 90 40 ff ff       	call   c000bce2 <VAS::getPageTableEntry(unsigned long)>
c0017c52:	83 c4 10             	add    esp,0x10
c0017c55:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c57:	a8 60                	test   al,0x60
c0017c59:	75 11                	jne    c0017c6c <Thr::loadDLL(char const*, bool)+0x1de>
c0017c5b:	83 ec 0c             	sub    esp,0xc
c0017c5e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017c63:	50                   	push   eax
c0017c64:	e8 d2 23 ff ff       	call   c000a03b <Phys::freePage(unsigned long)>
c0017c69:	83 c4 10             	add    esp,0x10
c0017c6c:	45                   	inc    ebp
c0017c6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c71:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c75:	05 ff 0f 00 00       	add    eax,0xfff
c0017c7a:	bf 00 00 00 00       	mov    edi,0x0
c0017c7f:	83 d2 00             	adc    edx,0x0
c0017c82:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017c86:	c1 ea 0c             	shr    edx,0xc
c0017c89:	39 c5                	cmp    ebp,eax
c0017c8b:	89 d1                	mov    ecx,edx
c0017c8d:	89 f8                	mov    eax,edi
c0017c8f:	19 c8                	sbb    eax,ecx
c0017c91:	72 aa                	jb     c0017c3d <Thr::loadDLL(char const*, bool)+0x1af>
c0017c93:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017c98:	75 18                	jne    c0017cb2 <Thr::loadDLL(char const*, bool)+0x224>
c0017c9a:	31 db                	xor    ebx,ebx
c0017c9c:	eb 14                	jmp    c0017cb2 <Thr::loadDLL(char const*, bool)+0x224>
c0017c9e:	83 ec 0c             	sub    esp,0xc
c0017ca1:	68 0b 5c 02 c0       	push   0xc0025c0b
c0017ca6:	e8 f8 cb ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0017cab:	83 c4 10             	add    esp,0x10
c0017cae:	31 ed                	xor    ebp,ebp
c0017cb0:	eb bb                	jmp    c0017c6d <Thr::loadDLL(char const*, bool)+0x1df>
c0017cb2:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017cb8:	89 d8                	mov    eax,ebx
c0017cba:	5b                   	pop    ebx
c0017cbb:	5e                   	pop    esi
c0017cbc:	5f                   	pop    edi
c0017cbd:	5d                   	pop    ebp
c0017cbe:	c3                   	ret    

c0017cbf <Thr::executeDLL(unsigned long, void*)>:
c0017cbf:	56                   	push   esi
c0017cc0:	53                   	push   ebx
c0017cc1:	52                   	push   edx
c0017cc2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017cc6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017cca:	85 db                	test   ebx,ebx
c0017ccc:	75 10                	jne    c0017cde <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017cce:	83 ec 0c             	sub    esp,0xc
c0017cd1:	68 27 5c 02 c0       	push   0xc0025c27
c0017cd6:	e8 c8 cb ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0017cdb:	83 c4 10             	add    esp,0x10
c0017cde:	50                   	push   eax
c0017cdf:	50                   	push   eax
c0017ce0:	53                   	push   ebx
c0017ce1:	68 51 5c 02 c0       	push   0xc0025c51
c0017ce6:	e8 0c 50 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0017ceb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017cef:	89 d8                	mov    eax,ebx
c0017cf1:	83 c4 14             	add    esp,0x14
c0017cf4:	5b                   	pop    ebx
c0017cf5:	5e                   	pop    esi
c0017cf6:	ff e0                	jmp    eax

c0017cf8 <userModeEntryPoint(void*)>:
c0017cf8:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c0017cfd:	48                   	dec    eax
c0017cfe:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c0017d03:	75 03                	jne    c0017d08 <userModeEntryPoint(void*)+0x10>
c0017d05:	fb                   	sti    
c0017d06:	66 90                	xchg   ax,ax
c0017d08:	fb                   	sti    
c0017d09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017d0e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d11:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0017d17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017d1b:	e9 3f 85 fe ff       	jmp    c000025f <goToUsermode>

c0017d20 <changeTSS>:
c0017d20:	83 ec 14             	sub    esp,0x14
c0017d23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017d28:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017d2b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0017d30:	c1 e2 15             	shl    edx,0x15
c0017d33:	29 d0                	sub    eax,edx
c0017d35:	50                   	push   eax
c0017d36:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c0017d3b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017d41:	05 7c 11 00 00       	add    eax,0x117c
c0017d46:	50                   	push   eax
c0017d47:	e8 d8 35 ff ff       	call   c000b324 <TSS::setESP(unsigned long)>
c0017d4c:	83 c4 1c             	add    esp,0x1c
c0017d4f:	c3                   	ret    

c0017d50 <switchToThread(ThreadControlBlock*)>:
c0017d50:	57                   	push   edi
c0017d51:	a1 04 90 02 c0       	mov    eax,ds:0xc0029004
c0017d56:	56                   	push   esi
c0017d57:	85 c0                	test   eax,eax
c0017d59:	53                   	push   ebx
c0017d5a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017d5e:	0f 85 90 00 00 00    	jne    c0017df4 <switchToThread(ThreadControlBlock*)+0xa4>
c0017d64:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c0017d67:	3c ff                	cmp    al,0xff
c0017d69:	0f 84 81 00 00 00    	je     c0017df0 <switchToThread(ThreadControlBlock*)+0xa0>
c0017d6f:	0f b6 d0             	movzx  edx,al
c0017d72:	b8 00 04 00 00       	mov    eax,0x400
c0017d77:	29 d0                	sub    eax,edx
c0017d79:	d1 f8                	sar    eax,1
c0017d7b:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c0017d7e:	66 90                	xchg   ax,ax
c0017d80:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c0017d83:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c0017d88:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017d8e:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0017d95:	74 4d                	je     c0017de4 <switchToThread(ThreadControlBlock*)+0x94>
c0017d97:	0f 31                	rdtsc  
c0017d99:	a3 48 90 02 c0       	mov    ds:0xc0029048,eax
c0017d9e:	89 c6                	mov    esi,eax
c0017da0:	89 d7                	mov    edi,edx
c0017da2:	2b 35 38 90 02 c0    	sub    esi,DWORD PTR ds:0xc0029038
c0017da8:	89 15 4c 90 02 c0    	mov    DWORD PTR ds:0xc002904c,edx
c0017dae:	1b 3d 3c 90 02 c0    	sbb    edi,DWORD PTR ds:0xc002903c
c0017db4:	89 35 40 90 02 c0    	mov    DWORD PTR ds:0xc0029040,esi
c0017dba:	a3 38 90 02 c0       	mov    ds:0xc0029038,eax
c0017dbf:	89 3d 44 90 02 c0    	mov    DWORD PTR ds:0xc0029044,edi
c0017dc5:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017dcb:	89 15 3c 90 02 c0    	mov    DWORD PTR ds:0xc002903c,edx
c0017dd1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017dd4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0017dd7:	01 c6                	add    esi,eax
c0017dd9:	11 d7                	adc    edi,edx
c0017ddb:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0017dde:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0017de1:	8d 76 00             	lea    esi,[esi+0x0]
c0017de4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0017de8:	5b                   	pop    ebx
c0017de9:	5e                   	pop    esi
c0017dea:	5f                   	pop    edi
c0017deb:	e9 a7 84 fe ff       	jmp    c0000297 <switchToThreadASM>
c0017df0:	31 c0                	xor    eax,eax
c0017df2:	eb 8c                	jmp    c0017d80 <switchToThread(ThreadControlBlock*)+0x30>
c0017df4:	5b                   	pop    ebx
c0017df5:	c7 05 00 90 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029000,0x1
c0017dff:	5e                   	pop    esi
c0017e00:	5f                   	pop    edi
c0017e01:	c3                   	ret    
c0017e02:	66 90                	xchg   ax,ax

c0017e04 <Process::addArgs(char**)>:
c0017e04:	57                   	push   edi
c0017e05:	56                   	push   esi
c0017e06:	53                   	push   ebx
c0017e07:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017e0b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017e0f:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0017e19:	85 ff                	test   edi,edi
c0017e1b:	74 43                	je     c0017e60 <Process::addArgs(char**)+0x5c>
c0017e1d:	8b 07                	mov    eax,DWORD PTR [edi]
c0017e1f:	85 c0                	test   eax,eax
c0017e21:	74 3d                	je     c0017e60 <Process::addArgs(char**)+0x5c>
c0017e23:	31 db                	xor    ebx,ebx
c0017e25:	8d 76 00             	lea    esi,[esi+0x0]
c0017e28:	83 ec 0c             	sub    esp,0xc
c0017e2b:	50                   	push   eax
c0017e2c:	e8 6f 88 fe ff       	call   c00006a0 <strlen>
c0017e31:	40                   	inc    eax
c0017e32:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e35:	e8 cd 1b ff ff       	call   c0009a07 <malloc>
c0017e3a:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0017e41:	5a                   	pop    edx
c0017e42:	59                   	pop    ecx
c0017e43:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0017e46:	43                   	inc    ebx
c0017e47:	50                   	push   eax
c0017e48:	e8 f3 88 fe ff       	call   c0000740 <strcpy>
c0017e4d:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0017e53:	83 c4 10             	add    esp,0x10
c0017e56:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017e59:	85 c0                	test   eax,eax
c0017e5b:	75 cb                	jne    c0017e28 <Process::addArgs(char**)+0x24>
c0017e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0017e60:	5b                   	pop    ebx
c0017e61:	5e                   	pop    esi
c0017e62:	5f                   	pop    edi
c0017e63:	c3                   	ret    

c0017e64 <Process::Process(char const*, Process*, char**)>:
c0017e64:	56                   	push   esi
c0017e65:	53                   	push   ebx
c0017e66:	83 ec 14             	sub    esp,0x14
c0017e69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e6d:	05 0c 02 00 00       	add    eax,0x20c
c0017e72:	bb 07 00 00 00       	mov    ebx,0x7
c0017e77:	89 c6                	mov    esi,eax
c0017e79:	8d 76 00             	lea    esi,[esi+0x0]
c0017e7c:	85 db                	test   ebx,ebx
c0017e7e:	78 14                	js     c0017e94 <Process::Process(char const*, Process*, char**)+0x30>
c0017e80:	83 ec 0c             	sub    esp,0xc
c0017e83:	56                   	push   esi
c0017e84:	e8 97 ae 00 00       	call   c0022d20 <ThreadControlBlock::ThreadControlBlock()>
c0017e89:	83 c4 10             	add    esp,0x10
c0017e8c:	83 c6 5f             	add    esi,0x5f
c0017e8f:	4b                   	dec    ebx
c0017e90:	eb ea                	jmp    c0017e7c <Process::Process(char const*, Process*, char**)+0x18>
c0017e92:	66 90                	xchg   ax,ax
c0017e94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e98:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0017e9f:	83 ec 0c             	sub    esp,0xc
c0017ea2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ea6:	e8 81 c8 ff ff       	call   c001472c <Krnl::newProcessEnv(Process*)>
c0017eab:	83 c4 10             	add    esp,0x10
c0017eae:	89 c2                	mov    edx,eax
c0017eb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eb4:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0017eba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ebe:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0017ec7:	a1 70 75 02 c0       	mov    eax,ds:0xc0027570
c0017ecc:	8d 50 01             	lea    edx,[eax+0x1]
c0017ecf:	89 15 70 75 02 c0    	mov    DWORD PTR ds:0xc0027570,edx
c0017ed5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ed9:	89 02                	mov    DWORD PTR [edx],eax
c0017edb:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0017ee3:	83 ec 0c             	sub    esp,0xc
c0017ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017eea:	e8 18 1b ff ff       	call   c0009a07 <malloc>
c0017eef:	83 c4 10             	add    esp,0x10
c0017ef2:	89 c3                	mov    ebx,eax
c0017ef4:	83 ec 08             	sub    esp,0x8
c0017ef7:	6a 00                	push   0x0
c0017ef9:	53                   	push   ebx
c0017efa:	e8 23 46 ff ff       	call   c000c522 <VAS::VAS(bool)>
c0017eff:	83 c4 10             	add    esp,0x10
c0017f02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f06:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0017f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f10:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0017f1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f1e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f22:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0017f28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f2c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017f32:	85 c0                	test   eax,eax
c0017f34:	74 42                	je     c0017f78 <Process::Process(char const*, Process*, char**)+0x114>
c0017f36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f3a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017f40:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017f46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f4a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0017f50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f54:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017f5a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017f60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f64:	05 0c 01 00 00       	add    eax,0x10c
c0017f69:	83 ec 08             	sub    esp,0x8
c0017f6c:	52                   	push   edx
c0017f6d:	50                   	push   eax
c0017f6e:	e8 cd 87 fe ff       	call   c0000740 <strcpy>
c0017f73:	83 c4 10             	add    esp,0x10
c0017f76:	eb 64                	jmp    c0017fdc <Process::Process(char const*, Process*, char**)+0x178>
c0017f78:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c0017f80:	83 ec 0c             	sub    esp,0xc
c0017f83:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017f87:	e8 7b 1a ff ff       	call   c0009a07 <malloc>
c0017f8c:	83 c4 10             	add    esp,0x10
c0017f8f:	89 c3                	mov    ebx,eax
c0017f91:	83 ec 08             	sub    esp,0x8
c0017f94:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f98:	53                   	push   ebx
c0017f99:	e8 96 30 ff ff       	call   c000b034 <VgaText::VgaText(char const*)>
c0017f9e:	83 c4 10             	add    esp,0x10
c0017fa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fa5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017fab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017faf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017fb5:	83 ec 0c             	sub    esp,0xc
c0017fb8:	50                   	push   eax
c0017fb9:	e8 35 28 ff ff       	call   c000a7f3 <addToTerminalCycle(VgaText*)>
c0017fbe:	83 c4 10             	add    esp,0x10
c0017fc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fc5:	05 0c 01 00 00       	add    eax,0x10c
c0017fca:	83 ec 08             	sub    esp,0x8
c0017fcd:	68 70 5c 02 c0       	push   0xc0025c70
c0017fd2:	50                   	push   eax
c0017fd3:	e8 68 87 fe ff       	call   c0000740 <strcpy>
c0017fd8:	83 c4 10             	add    esp,0x10
c0017fdb:	90                   	nop
c0017fdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fe0:	83 c0 0c             	add    eax,0xc
c0017fe3:	83 ec 08             	sub    esp,0x8
c0017fe6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017fea:	50                   	push   eax
c0017feb:	e8 50 87 fe ff       	call   c0000740 <strcpy>
c0017ff0:	83 c4 10             	add    esp,0x10
c0017ff3:	83 ec 08             	sub    esp,0x8
c0017ff6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017ffa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ffe:	e8 01 fe ff ff       	call   c0017e04 <Process::addArgs(char**)>
c0018003:	83 c4 10             	add    esp,0x10
c0018006:	83 ec 08             	sub    esp,0x8
c0018009:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001800d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018011:	e8 89 ed ff ff       	call   c0016d9f <Thr::loadProgramIntoMemory(Process*, char const*)>
c0018016:	83 c4 10             	add    esp,0x10
c0018019:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001801d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018021:	83 f0 01             	xor    eax,0x1
c0018024:	88 c2                	mov    dl,al
c0018026:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001802a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0018030:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018035:	83 ec 08             	sub    esp,0x8
c0018038:	50                   	push   eax
c0018039:	68 c8 5c 02 c0       	push   0xc0025cc8
c001803e:	e8 b4 4c ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0018043:	83 c4 10             	add    esp,0x10
c0018046:	90                   	nop
c0018047:	83 c4 14             	add    esp,0x14
c001804a:	5b                   	pop    ebx
c001804b:	5e                   	pop    esi
c001804c:	c3                   	ret    
c001804d:	90                   	nop
c001804e:	66 90                	xchg   ax,ax

c0018050 <Process::Process(bool, char const*, Process*, char**)>:
c0018050:	56                   	push   esi
c0018051:	53                   	push   ebx
c0018052:	83 ec 24             	sub    esp,0x24
c0018055:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018059:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001805d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018061:	05 0c 02 00 00       	add    eax,0x20c
c0018066:	bb 07 00 00 00       	mov    ebx,0x7
c001806b:	89 c6                	mov    esi,eax
c001806d:	8d 76 00             	lea    esi,[esi+0x0]
c0018070:	85 db                	test   ebx,ebx
c0018072:	78 14                	js     c0018088 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0018074:	83 ec 0c             	sub    esp,0xc
c0018077:	56                   	push   esi
c0018078:	e8 a3 ac 00 00       	call   c0022d20 <ThreadControlBlock::ThreadControlBlock()>
c001807d:	83 c4 10             	add    esp,0x10
c0018080:	83 c6 5f             	add    esi,0x5f
c0018083:	4b                   	dec    ebx
c0018084:	eb ea                	jmp    c0018070 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0018086:	66 90                	xchg   ax,ax
c0018088:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001808c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0018093:	83 ec 0c             	sub    esp,0xc
c0018096:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001809a:	e8 8d c6 ff ff       	call   c001472c <Krnl::newProcessEnv(Process*)>
c001809f:	83 c4 10             	add    esp,0x10
c00180a2:	89 c2                	mov    edx,eax
c00180a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180a8:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00180ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180b2:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00180bb:	a1 70 75 02 c0       	mov    eax,ds:0xc0027570
c00180c0:	8d 50 01             	lea    edx,[eax+0x1]
c00180c3:	89 15 70 75 02 c0    	mov    DWORD PTR ds:0xc0027570,edx
c00180c9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00180cd:	89 02                	mov    DWORD PTR [edx],eax
c00180cf:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00180d7:	83 ec 0c             	sub    esp,0xc
c00180da:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00180de:	e8 24 19 ff ff       	call   c0009a07 <malloc>
c00180e3:	83 c4 10             	add    esp,0x10
c00180e6:	89 c3                	mov    ebx,eax
c00180e8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00180ed:	83 ec 08             	sub    esp,0x8
c00180f0:	50                   	push   eax
c00180f1:	53                   	push   ebx
c00180f2:	e8 2b 44 ff ff       	call   c000c522 <VAS::VAS(bool)>
c00180f7:	83 c4 10             	add    esp,0x10
c00180fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180fe:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0018104:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018108:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018112:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018116:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001811a:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0018120:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018124:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001812a:	85 c0                	test   eax,eax
c001812c:	74 42                	je     c0018170 <Process::Process(bool, char const*, Process*, char**)+0x120>
c001812e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018132:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018138:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001813e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018142:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0018148:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001814c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018152:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018158:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001815c:	05 0c 01 00 00       	add    eax,0x10c
c0018161:	83 ec 08             	sub    esp,0x8
c0018164:	52                   	push   edx
c0018165:	50                   	push   eax
c0018166:	e8 d5 85 fe ff       	call   c0000740 <strcpy>
c001816b:	83 c4 10             	add    esp,0x10
c001816e:	eb 64                	jmp    c00181d4 <Process::Process(bool, char const*, Process*, char**)+0x184>
c0018170:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c0018178:	83 ec 0c             	sub    esp,0xc
c001817b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001817f:	e8 83 18 ff ff       	call   c0009a07 <malloc>
c0018184:	83 c4 10             	add    esp,0x10
c0018187:	89 c3                	mov    ebx,eax
c0018189:	83 ec 08             	sub    esp,0x8
c001818c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018190:	53                   	push   ebx
c0018191:	e8 9e 2e ff ff       	call   c000b034 <VgaText::VgaText(char const*)>
c0018196:	83 c4 10             	add    esp,0x10
c0018199:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001819d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00181a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00181a7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00181ad:	83 ec 0c             	sub    esp,0xc
c00181b0:	50                   	push   eax
c00181b1:	e8 3d 26 ff ff       	call   c000a7f3 <addToTerminalCycle(VgaText*)>
c00181b6:	83 c4 10             	add    esp,0x10
c00181b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00181bd:	05 0c 01 00 00       	add    eax,0x10c
c00181c2:	83 ec 08             	sub    esp,0x8
c00181c5:	68 70 5c 02 c0       	push   0xc0025c70
c00181ca:	50                   	push   eax
c00181cb:	e8 70 85 fe ff       	call   c0000740 <strcpy>
c00181d0:	83 c4 10             	add    esp,0x10
c00181d3:	90                   	nop
c00181d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00181d8:	83 c0 0c             	add    eax,0xc
c00181db:	83 ec 08             	sub    esp,0x8
c00181de:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00181e2:	50                   	push   eax
c00181e3:	e8 58 85 fe ff       	call   c0000740 <strcpy>
c00181e8:	83 c4 10             	add    esp,0x10
c00181eb:	83 ec 08             	sub    esp,0x8
c00181ee:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00181f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00181f6:	e8 09 fc ff ff       	call   c0017e04 <Process::addArgs(char**)>
c00181fb:	83 c4 10             	add    esp,0x10
c00181fe:	90                   	nop
c00181ff:	83 c4 24             	add    esp,0x24
c0018202:	5b                   	pop    ebx
c0018203:	5e                   	pop    esi
c0018204:	c3                   	ret    
c0018205:	8d 76 00             	lea    esi,[esi+0x0]

c0018208 <taskStartupFunction>:
c0018208:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001820d:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0018210:	c3                   	ret    
c0018211:	90                   	nop
c0018212:	66 90                	xchg   ax,ax

c0018214 <Semaphore::Semaphore(int)>:
c0018214:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018218:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001821c:	89 10                	mov    DWORD PTR [eax],edx
c001821e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018222:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018229:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001822d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018234:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018238:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001823f:	90                   	nop
c0018240:	c3                   	ret    
c0018241:	90                   	nop
c0018242:	66 90                	xchg   ax,ax

c0018244 <Mutex::Mutex()>:
c0018244:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018248:	6a 01                	push   0x1
c001824a:	50                   	push   eax
c001824b:	e8 c4 ff ff ff       	call   c0018214 <Semaphore::Semaphore(int)>
c0018250:	83 c4 08             	add    esp,0x8
c0018253:	90                   	nop
c0018254:	c3                   	ret    
c0018255:	90                   	nop
c0018256:	66 90                	xchg   ax,ax

c0018258 <Process::createThread(void (*)(void*), void*, int)>:
c0018258:	57                   	push   edi
c0018259:	31 c9                	xor    ecx,ecx
c001825b:	56                   	push   esi
c001825c:	53                   	push   ebx
c001825d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018261:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0018268:	89 f2                	mov    edx,esi
c001826a:	66 90                	xchg   ax,ax
c001826c:	0f b7 c2             	movzx  eax,dx
c001826f:	83 e2 01             	and    edx,0x1
c0018272:	74 14                	je     c0018288 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0018274:	d1 f8                	sar    eax,1
c0018276:	41                   	inc    ecx
c0018277:	89 c2                	mov    edx,eax
c0018279:	83 f9 10             	cmp    ecx,0x10
c001827c:	75 ee                	jne    c001826c <Process::createThread(void (*)(void*), void*, int)+0x14>
c001827e:	31 db                	xor    ebx,ebx
c0018280:	89 d8                	mov    eax,ebx
c0018282:	5b                   	pop    ebx
c0018283:	5e                   	pop    esi
c0018284:	5f                   	pop    edi
c0018285:	c3                   	ret    
c0018286:	66 90                	xchg   ax,ax
c0018288:	b8 01 00 00 00       	mov    eax,0x1
c001828d:	d3 e0                	shl    eax,cl
c001828f:	09 c6                	or     esi,eax
c0018291:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018294:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001829b:	01 c0                	add    eax,eax
c001829d:	01 c8                	add    eax,ecx
c001829f:	8d 04 80             	lea    eax,[eax+eax*4]
c00182a2:	01 d8                	add    eax,ebx
c00182a4:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00182ab:	75 0b                	jne    c00182b8 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00182ad:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00182b7:	90                   	nop
c00182b8:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00182be:	83 ec 08             	sub    esp,0x8
c00182c1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00182c4:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00182c7:	01 c0                	add    eax,eax
c00182c9:	01 c8                	add    eax,ecx
c00182cb:	8d 3c 80             	lea    edi,[eax+eax*4]
c00182ce:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00182d1:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00182d7:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00182dd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00182e1:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00182e7:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00182ed:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00182f4:	89 ca                	mov    edx,ecx
c00182f6:	f7 da                	neg    edx
c00182f8:	c1 e2 15             	shl    edx,0x15
c00182fb:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018301:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018307:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001830b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018315:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001831b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001831f:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018325:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001832f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018339:	53                   	push   ebx
c001833a:	68 24 90 02 c0       	push   0xc0029024
c001833f:	e8 7c a7 00 00       	call   c0022ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018344:	83 c4 10             	add    esp,0x10
c0018347:	89 d8                	mov    eax,ebx
c0018349:	5b                   	pop    ebx
c001834a:	5e                   	pop    esi
c001834b:	5f                   	pop    edi
c001834c:	c3                   	ret    
c001834d:	90                   	nop
c001834e:	66 90                	xchg   ax,ax

c0018350 <Process::createUserThread()>:
c0018350:	83 ec 0c             	sub    esp,0xc
c0018353:	68 80 00 00 00       	push   0x80
c0018358:	6a 00                	push   0x0
c001835a:	68 f8 7c 01 c0       	push   0xc0017cf8
c001835f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018363:	e8 f0 fe ff ff       	call   c0018258 <Process::createThread(void (*)(void*), void*, int)>
c0018368:	83 c4 1c             	add    esp,0x1c
c001836b:	c3                   	ret    

c001836c <setupMultitasking(void (*)())>:
c001836c:	56                   	push   esi
c001836d:	53                   	push   ebx
c001836e:	51                   	push   ecx
c001836f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018373:	eb 13                	jmp    c0018388 <setupMultitasking(void (*)())+0x1c>
c0018375:	8d 76 00             	lea    esi,[esi+0x0]
c0018378:	83 ec 0c             	sub    esp,0xc
c001837b:	68 24 90 02 c0       	push   0xc0029024
c0018380:	e8 83 a6 00 00       	call   c0022a08 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018385:	83 c4 10             	add    esp,0x10
c0018388:	83 ec 0c             	sub    esp,0xc
c001838b:	68 24 90 02 c0       	push   0xc0029024
c0018390:	e8 4f a6 00 00       	call   c00229e4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018395:	83 c4 10             	add    esp,0x10
c0018398:	84 c0                	test   al,al
c001839a:	74 dc                	je     c0018378 <setupMultitasking(void (*)())+0xc>
c001839c:	83 ec 0c             	sub    esp,0xc
c001839f:	68 1f 07 00 00       	push   0x71f
c00183a4:	e8 5e 16 ff ff       	call   c0009a07 <malloc>
c00183a9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00183b0:	89 c3                	mov    ebx,eax
c00183b2:	6a 00                	push   0x0
c00183b4:	68 74 5c 02 c0       	push   0xc0025c74
c00183b9:	6a 01                	push   0x1
c00183bb:	50                   	push   eax
c00183bc:	e8 8f fc ff ff       	call   c0018050 <Process::Process(bool, char const*, Process*, char**)>
c00183c1:	83 c4 14             	add    esp,0x14
c00183c4:	89 1d 30 90 02 c0    	mov    DWORD PTR ds:0xc0029030,ebx
c00183ca:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c00183d0:	e8 2c 27 ff ff       	call   c000ab01 <setActiveTerminal(VgaText*)>
c00183d5:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00183dd:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00183e7:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00183ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00183f0:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00183fa:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018400:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0018406:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018410:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001841a:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018424:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001842a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018434:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001843a:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018444:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001844a:	58                   	pop    eax
c001844b:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018451:	5a                   	pop    edx
c0018452:	68 70 5c 02 c0       	push   0xc0025c70
c0018457:	50                   	push   eax
c0018458:	e8 e3 82 fe ff       	call   c0000740 <strcpy>
c001845d:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0018464:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018468:	83 c4 14             	add    esp,0x14
c001846b:	5b                   	pop    ebx
c001846c:	5e                   	pop    esi
c001846d:	e9 17 7e fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0018472:	66 90                	xchg   ax,ax

c0018474 <schedule()>:
c0018474:	a1 04 90 02 c0       	mov    eax,ds:0xc0029004
c0018479:	85 c0                	test   eax,eax
c001847b:	74 0b                	je     c0018488 <schedule()+0x14>
c001847d:	c7 05 00 90 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029000,0x1
c0018487:	c3                   	ret    
c0018488:	53                   	push   ebx
c0018489:	83 ec 14             	sub    esp,0x14
c001848c:	68 24 90 02 c0       	push   0xc0029024
c0018491:	e8 4e a5 00 00       	call   c00229e4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018496:	83 c4 10             	add    esp,0x10
c0018499:	84 c0                	test   al,al
c001849b:	75 3b                	jne    c00184d8 <schedule()+0x64>
c001849d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00184a2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00184a5:	4a                   	dec    edx
c00184a6:	74 38                	je     c00184e0 <schedule()+0x6c>
c00184a8:	83 ec 0c             	sub    esp,0xc
c00184ab:	68 24 90 02 c0       	push   0xc0029024
c00184b0:	e8 4b a5 00 00       	call   c0022a00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00184b5:	c7 04 24 24 90 02 c0 	mov    DWORD PTR [esp],0xc0029024
c00184bc:	89 c3                	mov    ebx,eax
c00184be:	e8 45 a5 00 00       	call   c0022a08 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00184c3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00184ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00184cd:	e8 7e f8 ff ff       	call   c0017d50 <switchToThread(ThreadControlBlock*)>
c00184d2:	83 c4 10             	add    esp,0x10
c00184d5:	8d 76 00             	lea    esi,[esi+0x0]
c00184d8:	83 c4 08             	add    esp,0x8
c00184db:	5b                   	pop    ebx
c00184dc:	c3                   	ret    
c00184dd:	8d 76 00             	lea    esi,[esi+0x0]
c00184e0:	83 ec 08             	sub    esp,0x8
c00184e3:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00184ea:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00184f0:	68 24 90 02 c0       	push   0xc0029024
c00184f5:	e8 c6 a5 00 00       	call   c0022ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00184fa:	83 c4 10             	add    esp,0x10
c00184fd:	eb a9                	jmp    c00184a8 <schedule()+0x34>
c00184ff:	90                   	nop

c0018500 <Semaphore::tryAcquire()>:
c0018500:	53                   	push   ebx
c0018501:	83 ec 08             	sub    esp,0x8
c0018504:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018508:	fa                   	cli    
c0018509:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c001850e:	8d 50 01             	lea    edx,[eax+0x1]
c0018511:	89 15 08 90 02 c0    	mov    DWORD PTR ds:0xc0029008,edx
c0018517:	8b 15 04 90 02 c0    	mov    edx,DWORD PTR ds:0xc0029004
c001851d:	8d 5a 01             	lea    ebx,[edx+0x1]
c0018520:	89 1d 04 90 02 c0    	mov    DWORD PTR ds:0xc0029004,ebx
c0018526:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0018529:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001852b:	7c 33                	jl     c0018560 <Semaphore::tryAcquire()+0x60>
c001852d:	89 15 04 90 02 c0    	mov    DWORD PTR ds:0xc0029004,edx
c0018533:	85 d2                	test   edx,edx
c0018535:	75 0d                	jne    c0018544 <Semaphore::tryAcquire()+0x44>
c0018537:	8b 15 00 90 02 c0    	mov    edx,DWORD PTR ds:0xc0029000
c001853d:	85 d2                	test   edx,edx
c001853f:	75 6b                	jne    c00185ac <Semaphore::tryAcquire()+0xac>
c0018541:	8d 76 00             	lea    esi,[esi+0x0]
c0018544:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c0018549:	85 c0                	test   eax,eax
c001854b:	74 0b                	je     c0018558 <Semaphore::tryAcquire()+0x58>
c001854d:	8d 76 00             	lea    esi,[esi+0x0]
c0018550:	31 c0                	xor    eax,eax
c0018552:	83 c4 08             	add    esp,0x8
c0018555:	5b                   	pop    ebx
c0018556:	c3                   	ret    
c0018557:	90                   	nop
c0018558:	fb                   	sti    
c0018559:	83 c4 08             	add    esp,0x8
c001855c:	5b                   	pop    ebx
c001855d:	c3                   	ret    
c001855e:	66 90                	xchg   ax,ax
c0018560:	43                   	inc    ebx
c0018561:	89 15 04 90 02 c0    	mov    DWORD PTR ds:0xc0029004,edx
c0018567:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001856a:	85 d2                	test   edx,edx
c001856c:	75 22                	jne    c0018590 <Semaphore::tryAcquire()+0x90>
c001856e:	8b 0d 00 90 02 c0    	mov    ecx,DWORD PTR ds:0xc0029000
c0018574:	85 c9                	test   ecx,ecx
c0018576:	74 18                	je     c0018590 <Semaphore::tryAcquire()+0x90>
c0018578:	c7 05 00 90 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029000,0x0
c0018582:	e8 ed fe ff ff       	call   c0018474 <schedule()>
c0018587:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c001858c:	48                   	dec    eax
c001858d:	8d 76 00             	lea    esi,[esi+0x0]
c0018590:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c0018595:	85 c0                	test   eax,eax
c0018597:	75 0b                	jne    c00185a4 <Semaphore::tryAcquire()+0xa4>
c0018599:	fb                   	sti    
c001859a:	b0 01                	mov    al,0x1
c001859c:	83 c4 08             	add    esp,0x8
c001859f:	5b                   	pop    ebx
c00185a0:	c3                   	ret    
c00185a1:	8d 76 00             	lea    esi,[esi+0x0]
c00185a4:	b0 01                	mov    al,0x1
c00185a6:	83 c4 08             	add    esp,0x8
c00185a9:	5b                   	pop    ebx
c00185aa:	c3                   	ret    
c00185ab:	90                   	nop
c00185ac:	c7 05 00 90 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029000,0x0
c00185b6:	e8 b9 fe ff ff       	call   c0018474 <schedule()>
c00185bb:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c00185c0:	48                   	dec    eax
c00185c1:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c00185c6:	85 c0                	test   eax,eax
c00185c8:	75 86                	jne    c0018550 <Semaphore::tryAcquire()+0x50>
c00185ca:	eb 8c                	jmp    c0018558 <Semaphore::tryAcquire()+0x58>

c00185cc <Semaphore::assertLocked(char const*)>:
c00185cc:	83 ec 0c             	sub    esp,0xc
c00185cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00185d3:	fa                   	cli    
c00185d4:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c00185da:	a1 04 90 02 c0       	mov    eax,ds:0xc0029004
c00185df:	8d 48 01             	lea    ecx,[eax+0x1]
c00185e2:	89 0d 04 90 02 c0    	mov    DWORD PTR ds:0xc0029004,ecx
c00185e8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00185ea:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00185ed:	7c 29                	jl     c0018618 <Semaphore::assertLocked(char const*)+0x4c>
c00185ef:	90                   	nop
c00185f0:	a3 04 90 02 c0       	mov    ds:0xc0029004,eax
c00185f5:	85 c0                	test   eax,eax
c00185f7:	75 0b                	jne    c0018604 <Semaphore::assertLocked(char const*)+0x38>
c00185f9:	a1 00 90 02 c0       	mov    eax,ds:0xc0029000
c00185fe:	85 c0                	test   eax,eax
c0018600:	75 2e                	jne    c0018630 <Semaphore::assertLocked(char const*)+0x64>
c0018602:	66 90                	xchg   ax,ax
c0018604:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c0018609:	48                   	dec    eax
c001860a:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c001860f:	75 03                	jne    c0018614 <Semaphore::assertLocked(char const*)+0x48>
c0018611:	fb                   	sti    
c0018612:	66 90                	xchg   ax,ax
c0018614:	83 c4 0c             	add    esp,0xc
c0018617:	c3                   	ret    
c0018618:	83 ec 0c             	sub    esp,0xc
c001861b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001861f:	e8 7f c2 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0018624:	a1 04 90 02 c0       	mov    eax,ds:0xc0029004
c0018629:	83 c4 10             	add    esp,0x10
c001862c:	48                   	dec    eax
c001862d:	eb c1                	jmp    c00185f0 <Semaphore::assertLocked(char const*)+0x24>
c001862f:	90                   	nop
c0018630:	c7 05 00 90 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029000,0x0
c001863a:	e8 35 fe ff ff       	call   c0018474 <schedule()>
c001863f:	eb c3                	jmp    c0018604 <Semaphore::assertLocked(char const*)+0x38>
c0018641:	8d 76 00             	lea    esi,[esi+0x0]

c0018644 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018644:	83 ec 0c             	sub    esp,0xc
c0018647:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001864c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018650:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018653:	e8 1c fe ff ff       	call   c0018474 <schedule()>
c0018658:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c001865d:	48                   	dec    eax
c001865e:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c0018663:	75 03                	jne    c0018668 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0018665:	fb                   	sti    
c0018666:	66 90                	xchg   ax,ax
c0018668:	83 c4 0c             	add    esp,0xc
c001866b:	c3                   	ret    

c001866c <blockTask(TaskState)>:
c001866c:	83 ec 0c             	sub    esp,0xc
c001866f:	fa                   	cli    
c0018670:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c0018676:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001867a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001867f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018682:	e8 ed fd ff ff       	call   c0018474 <schedule()>
c0018687:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c001868c:	48                   	dec    eax
c001868d:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c0018692:	75 04                	jne    c0018698 <blockTask(TaskState)+0x2c>
c0018694:	fb                   	sti    
c0018695:	8d 76 00             	lea    esi,[esi+0x0]
c0018698:	83 c4 0c             	add    esp,0xc
c001869b:	c3                   	ret    

c001869c <waitTask(int, int*, int)>:
c001869c:	83 ec 18             	sub    esp,0x18
c001869f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00186a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00186a8:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00186ab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00186af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00186b4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00186b7:	6a 07                	push   0x7
c00186b9:	e8 ae ff ff ff       	call   c001866c <blockTask(TaskState)>
c00186be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00186c3:	83 c4 10             	add    esp,0x10
c00186c6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00186c9:	85 d2                	test   edx,edx
c00186cb:	74 0b                	je     c00186d8 <waitTask(int, int*, int)+0x3c>
c00186cd:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00186d0:	89 02                	mov    DWORD PTR [edx],eax
c00186d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00186d7:	90                   	nop
c00186d8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00186db:	83 c4 0c             	add    esp,0xc
c00186de:	c3                   	ret    
c00186df:	90                   	nop

c00186e0 <milliTenthSleepUntil(unsigned int)>:
c00186e0:	83 ec 0c             	sub    esp,0xc
c00186e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186e7:	39 05 6c 81 02 c0    	cmp    DWORD PTR ds:0xc002816c,eax
c00186ed:	76 05                	jbe    c00186f4 <milliTenthSleepUntil(unsigned int)+0x14>
c00186ef:	90                   	nop
c00186f0:	83 c4 0c             	add    esp,0xc
c00186f3:	c3                   	ret    
c00186f4:	fa                   	cli    
c00186f5:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c00186fb:	83 ec 08             	sub    esp,0x8
c00186fe:	ff 05 04 90 02 c0    	inc    DWORD PTR ds:0xc0029004
c0018704:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001870a:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001870d:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018713:	68 18 90 02 c0       	push   0xc0029018
c0018718:	e8 a3 a3 00 00       	call   c0022ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001871d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018724:	e8 43 ff ff ff       	call   c001866c <blockTask(TaskState)>
c0018729:	a1 04 90 02 c0       	mov    eax,ds:0xc0029004
c001872e:	83 c4 10             	add    esp,0x10
c0018731:	48                   	dec    eax
c0018732:	a3 04 90 02 c0       	mov    ds:0xc0029004,eax
c0018737:	85 c0                	test   eax,eax
c0018739:	75 09                	jne    c0018744 <milliTenthSleepUntil(unsigned int)+0x64>
c001873b:	a1 00 90 02 c0       	mov    eax,ds:0xc0029000
c0018740:	85 c0                	test   eax,eax
c0018742:	75 14                	jne    c0018758 <milliTenthSleepUntil(unsigned int)+0x78>
c0018744:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c0018749:	48                   	dec    eax
c001874a:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c001874f:	75 9f                	jne    c00186f0 <milliTenthSleepUntil(unsigned int)+0x10>
c0018751:	fb                   	sti    
c0018752:	83 c4 0c             	add    esp,0xc
c0018755:	c3                   	ret    
c0018756:	66 90                	xchg   ax,ax
c0018758:	c7 05 00 90 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029000,0x0
c0018762:	e8 0d fd ff ff       	call   c0018474 <schedule()>
c0018767:	eb db                	jmp    c0018744 <milliTenthSleepUntil(unsigned int)+0x64>
c0018769:	8d 76 00             	lea    esi,[esi+0x0]

c001876c <milliTenthSleep(unsigned int)>:
c001876c:	a1 6c 81 02 c0       	mov    eax,ds:0xc002816c
c0018771:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018775:	e9 66 ff ff ff       	jmp    c00186e0 <milliTenthSleepUntil(unsigned int)>
c001877a:	66 90                	xchg   ax,ax

c001877c <sleep(unsigned int)>:
c001877c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018780:	8d 04 80             	lea    eax,[eax+eax*4]
c0018783:	8d 04 80             	lea    eax,[eax+eax*4]
c0018786:	8d 04 80             	lea    eax,[eax+eax*4]
c0018789:	8d 04 80             	lea    eax,[eax+eax*4]
c001878c:	c1 e0 04             	shl    eax,0x4
c001878f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018793:	eb d7                	jmp    c001876c <milliTenthSleep(unsigned int)>
c0018795:	90                   	nop
c0018796:	66 90                	xchg   ax,ax

c0018798 <Semaphore::acquire()>:
c0018798:	83 ec 0c             	sub    esp,0xc
c001879b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001879f:	fa                   	cli    
c00187a0:	a1 04 90 02 c0       	mov    eax,ds:0xc0029004
c00187a5:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c00187ab:	8d 48 01             	lea    ecx,[eax+0x1]
c00187ae:	89 0d 04 90 02 c0    	mov    DWORD PTR ds:0xc0029004,ecx
c00187b4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00187b7:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00187b9:	7d 2d                	jge    c00187e8 <Semaphore::acquire()+0x50>
c00187bb:	41                   	inc    ecx
c00187bc:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00187bf:	90                   	nop
c00187c0:	a3 04 90 02 c0       	mov    ds:0xc0029004,eax
c00187c5:	85 c0                	test   eax,eax
c00187c7:	75 0b                	jne    c00187d4 <Semaphore::acquire()+0x3c>
c00187c9:	a1 00 90 02 c0       	mov    eax,ds:0xc0029000
c00187ce:	85 c0                	test   eax,eax
c00187d0:	75 62                	jne    c0018834 <Semaphore::acquire()+0x9c>
c00187d2:	66 90                	xchg   ax,ax
c00187d4:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c00187d9:	48                   	dec    eax
c00187da:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c00187df:	75 03                	jne    c00187e4 <Semaphore::acquire()+0x4c>
c00187e1:	fb                   	sti    
c00187e2:	66 90                	xchg   ax,ax
c00187e4:	83 c4 0c             	add    esp,0xc
c00187e7:	c3                   	ret    
c00187e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187ed:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00187f4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00187f7:	85 c9                	test   ecx,ecx
c00187f9:	74 4d                	je     c0018848 <Semaphore::acquire()+0xb0>
c00187fb:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00187fe:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018804:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0018807:	90                   	nop
c0018808:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001880d:	83 ec 0c             	sub    esp,0xc
c0018810:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0018813:	68 f0 5c 02 c0       	push   0xc0025cf0
c0018818:	e8 da 44 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c001881d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0018824:	e8 43 fe ff ff       	call   c001866c <blockTask(TaskState)>
c0018829:	a1 04 90 02 c0       	mov    eax,ds:0xc0029004
c001882e:	83 c4 10             	add    esp,0x10
c0018831:	48                   	dec    eax
c0018832:	eb 8c                	jmp    c00187c0 <Semaphore::acquire()+0x28>
c0018834:	c7 05 00 90 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029000,0x0
c001883e:	e8 31 fc ff ff       	call   c0018474 <schedule()>
c0018843:	eb 8f                	jmp    c00187d4 <Semaphore::acquire()+0x3c>
c0018845:	8d 76 00             	lea    esi,[esi+0x0]
c0018848:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001884d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018850:	eb b6                	jmp    c0018808 <Semaphore::acquire()+0x70>
c0018852:	66 90                	xchg   ax,ax

c0018854 <taskReturned>:
c0018854:	83 ec 18             	sub    esp,0x18
c0018857:	68 10 5d 02 c0       	push   0xc0025d10
c001885c:	e8 42 c0 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0018861:	83 c4 10             	add    esp,0x10
c0018864:	83 ec 0c             	sub    esp,0xc
c0018867:	6a 02                	push   0x2
c0018869:	e8 fe fd ff ff       	call   c001866c <blockTask(TaskState)>
c001886e:	fa                   	cli    
c001886f:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c0018875:	e8 fa fb ff ff       	call   c0018474 <schedule()>
c001887a:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c001887f:	83 c4 10             	add    esp,0x10
c0018882:	48                   	dec    eax
c0018883:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c0018888:	85 c0                	test   eax,eax
c001888a:	75 d8                	jne    c0018864 <taskReturned+0x10>
c001888c:	fb                   	sti    
c001888d:	eb d5                	jmp    c0018864 <taskReturned+0x10>
c001888f:	90                   	nop

c0018890 <Thr::processFromPID(int)>:
c0018890:	57                   	push   edi
c0018891:	56                   	push   esi
c0018892:	53                   	push   ebx
c0018893:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018897:	fa                   	cli    
c0018898:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c001889e:	83 ec 0c             	sub    esp,0xc
c00188a1:	68 24 90 02 c0       	push   0xc0029024
c00188a6:	e8 55 a1 00 00       	call   c0022a00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00188ab:	83 c4 10             	add    esp,0x10
c00188ae:	89 c7                	mov    edi,eax
c00188b0:	eb 16                	jmp    c00188c8 <Thr::processFromPID(int)+0x38>
c00188b2:	66 90                	xchg   ax,ax
c00188b4:	83 ec 0c             	sub    esp,0xc
c00188b7:	68 24 90 02 c0       	push   0xc0029024
c00188bc:	e8 3f a1 00 00       	call   c0022a00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00188c1:	83 c4 10             	add    esp,0x10
c00188c4:	39 f8                	cmp    eax,edi
c00188c6:	74 4c                	je     c0018914 <Thr::processFromPID(int)+0x84>
c00188c8:	83 ec 0c             	sub    esp,0xc
c00188cb:	68 24 90 02 c0       	push   0xc0029024
c00188d0:	e8 2b a1 00 00       	call   c0022a00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00188d5:	c7 04 24 24 90 02 c0 	mov    DWORD PTR [esp],0xc0029024
c00188dc:	89 c3                	mov    ebx,eax
c00188de:	e8 25 a1 00 00       	call   c0022a08 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00188e3:	58                   	pop    eax
c00188e4:	5a                   	pop    edx
c00188e5:	53                   	push   ebx
c00188e6:	68 24 90 02 c0       	push   0xc0029024
c00188eb:	e8 d0 a1 00 00       	call   c0022ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00188f0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00188f3:	83 c4 10             	add    esp,0x10
c00188f6:	39 30                	cmp    DWORD PTR [eax],esi
c00188f8:	75 ba                	jne    c00188b4 <Thr::processFromPID(int)+0x24>
c00188fa:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c00188ff:	48                   	dec    eax
c0018900:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c0018905:	74 09                	je     c0018910 <Thr::processFromPID(int)+0x80>
c0018907:	90                   	nop
c0018908:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001890b:	5b                   	pop    ebx
c001890c:	5e                   	pop    esi
c001890d:	5f                   	pop    edi
c001890e:	c3                   	ret    
c001890f:	90                   	nop
c0018910:	fb                   	sti    
c0018911:	eb f5                	jmp    c0018908 <Thr::processFromPID(int)+0x78>
c0018913:	90                   	nop
c0018914:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c0018919:	48                   	dec    eax
c001891a:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c001891f:	75 07                	jne    c0018928 <Thr::processFromPID(int)+0x98>
c0018921:	fb                   	sti    
c0018922:	5b                   	pop    ebx
c0018923:	5e                   	pop    esi
c0018924:	5f                   	pop    edi
c0018925:	c3                   	ret    
c0018926:	66 90                	xchg   ax,ax
c0018928:	5b                   	pop    ebx
c0018929:	31 c0                	xor    eax,eax
c001892b:	5e                   	pop    esi
c001892c:	5f                   	pop    edi
c001892d:	c3                   	ret    
c001892e:	66 90                	xchg   ax,ax

c0018930 <unblockTask(ThreadControlBlock*)>:
c0018930:	53                   	push   ebx
c0018931:	83 ec 08             	sub    esp,0x8
c0018934:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018938:	fa                   	cli    
c0018939:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c001893f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018942:	85 c0                	test   eax,eax
c0018944:	74 66                	je     c00189ac <unblockTask(ThreadControlBlock*)+0x7c>
c0018946:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018949:	48                   	dec    eax
c001894a:	74 38                	je     c0018984 <unblockTask(ThreadControlBlock*)+0x54>
c001894c:	83 ec 0c             	sub    esp,0xc
c001894f:	68 24 90 02 c0       	push   0xc0029024
c0018954:	e8 a7 a0 00 00       	call   c0022a00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018959:	83 c4 10             	add    esp,0x10
c001895c:	85 c0                	test   eax,eax
c001895e:	75 1c                	jne    c001897c <unblockTask(ThreadControlBlock*)+0x4c>
c0018960:	eb 5e                	jmp    c00189c0 <unblockTask(ThreadControlBlock*)+0x90>
c0018962:	66 90                	xchg   ax,ax
c0018964:	83 ec 08             	sub    esp,0x8
c0018967:	50                   	push   eax
c0018968:	68 24 90 02 c0       	push   0xc0029024
c001896d:	e8 3e a4 00 00       	call   c0022db0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018972:	83 c4 10             	add    esp,0x10
c0018975:	85 c0                	test   eax,eax
c0018977:	74 47                	je     c00189c0 <unblockTask(ThreadControlBlock*)+0x90>
c0018979:	8d 76 00             	lea    esi,[esi+0x0]
c001897c:	39 c3                	cmp    ebx,eax
c001897e:	75 e4                	jne    c0018964 <unblockTask(ThreadControlBlock*)+0x34>
c0018980:	eb 12                	jmp    c0018994 <unblockTask(ThreadControlBlock*)+0x64>
c0018982:	66 90                	xchg   ax,ax
c0018984:	83 ec 0c             	sub    esp,0xc
c0018987:	68 92 5c 02 c0       	push   0xc0025c92
c001898c:	e8 66 43 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0018991:	83 c4 10             	add    esp,0x10
c0018994:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c0018999:	48                   	dec    eax
c001899a:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c001899f:	75 03                	jne    c00189a4 <unblockTask(ThreadControlBlock*)+0x74>
c00189a1:	fb                   	sti    
c00189a2:	66 90                	xchg   ax,ax
c00189a4:	83 c4 08             	add    esp,0x8
c00189a7:	5b                   	pop    ebx
c00189a8:	c3                   	ret    
c00189a9:	8d 76 00             	lea    esi,[esi+0x0]
c00189ac:	83 ec 0c             	sub    esp,0xc
c00189af:	68 7b 5c 02 c0       	push   0xc0025c7b
c00189b4:	e8 3e 43 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c00189b9:	83 c4 10             	add    esp,0x10
c00189bc:	eb d6                	jmp    c0018994 <unblockTask(ThreadControlBlock*)+0x64>
c00189be:	66 90                	xchg   ax,ax
c00189c0:	83 ec 08             	sub    esp,0x8
c00189c3:	53                   	push   ebx
c00189c4:	68 24 90 02 c0       	push   0xc0029024
c00189c9:	e8 f2 a0 00 00       	call   c0022ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00189ce:	83 c4 10             	add    esp,0x10
c00189d1:	eb c1                	jmp    c0018994 <unblockTask(ThreadControlBlock*)+0x64>
c00189d3:	90                   	nop

c00189d4 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00189d4:	55                   	push   ebp
c00189d5:	57                   	push   edi
c00189d6:	56                   	push   esi
c00189d7:	53                   	push   ebx
c00189d8:	83 ec 1c             	sub    esp,0x1c
c00189db:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00189df:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00189e2:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c00189e8:	85 ff                	test   edi,edi
c00189ea:	7e 24                	jle    c0018a10 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c00189ec:	31 f6                	xor    esi,esi
c00189ee:	66 90                	xchg   ax,ax
c00189f0:	83 ec 0c             	sub    esp,0xc
c00189f3:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c00189fa:	46                   	inc    esi
c00189fb:	e8 17 10 ff ff       	call   c0009a17 <free>
c0018a00:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018a03:	83 c4 10             	add    esp,0x10
c0018a06:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0018a0c:	7f e2                	jg     c00189f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0018a0e:	66 90                	xchg   ax,ax
c0018a10:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018a1a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0018a1f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0018a22:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0018a25:	d3 c0                	rol    eax,cl
c0018a27:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0018a2e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018a31:	89 f7                	mov    edi,esi
c0018a33:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0018a3b:	0f 85 73 01 00 00    	jne    c0018bb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018a41:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0018a47:	85 ed                	test   ebp,ebp
c0018a49:	74 1d                	je     c0018a68 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0018a4b:	83 ec 0c             	sub    esp,0xc
c0018a4e:	55                   	push   ebp
c0018a4f:	e8 f4 bb ff ff       	call   c0014648 <EnvVarContainer::~EnvVarContainer()>
c0018a54:	59                   	pop    ecx
c0018a55:	5e                   	pop    esi
c0018a56:	6a 0c                	push   0xc
c0018a58:	55                   	push   ebp
c0018a59:	e8 b8 41 ff ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c0018a5e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018a61:	83 c4 10             	add    esp,0x10
c0018a64:	89 f7                	mov    edi,esi
c0018a66:	66 90                	xchg   ax,ax
c0018a68:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018a6e:	85 c0                	test   eax,eax
c0018a70:	0f 84 b2 00 00 00    	je     c0018b28 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018a76:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0018a79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018a7d:	31 c9                	xor    ecx,ecx
c0018a7f:	eb 17                	jmp    c0018a98 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0018a81:	8d 76 00             	lea    esi,[esi+0x0]
c0018a84:	41                   	inc    ecx
c0018a85:	83 f9 10             	cmp    ecx,0x10
c0018a88:	0f 84 9a 00 00 00    	je     c0018b28 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018a8e:	66 90                	xchg   ax,ax
c0018a90:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018a96:	66 90                	xchg   ax,ax
c0018a98:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0018a9f:	d3 fa                	sar    edx,cl
c0018aa1:	83 e2 01             	and    edx,0x1
c0018aa4:	74 de                	je     c0018a84 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018aa6:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0018aa9:	01 d2                	add    edx,edx
c0018aab:	01 ca                	add    edx,ecx
c0018aad:	8d 14 92             	lea    edx,[edx+edx*4]
c0018ab0:	01 d0                	add    eax,edx
c0018ab2:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0018ab8:	83 fd 07             	cmp    ebp,0x7
c0018abb:	75 c7                	jne    c0018a84 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018abd:	05 40 02 00 00       	add    eax,0x240
c0018ac2:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0018ac5:	83 fd ff             	cmp    ebp,0xffffffff
c0018ac8:	0f 8c ee 00 00 00    	jl     c0018bbc <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0018ace:	0f 84 ac 01 00 00    	je     c0018c80 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0018ad4:	85 ed                	test   ebp,ebp
c0018ad6:	0f 84 90 01 00 00    	je     c0018c6c <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0018adc:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018ade:	75 a4                	jne    c0018a84 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018ae0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018ae6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018aea:	01 d0                	add    eax,edx
c0018aec:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018af0:	83 ec 0c             	sub    esp,0xc
c0018af3:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0018af9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018afc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018b02:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018b09:	50                   	push   eax
c0018b0a:	e8 21 fe ff ff       	call   c0018930 <unblockTask(ThreadControlBlock*)>
c0018b0f:	83 c4 10             	add    esp,0x10
c0018b12:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018b15:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018b19:	89 f7                	mov    edi,esi
c0018b1b:	41                   	inc    ecx
c0018b1c:	83 f9 10             	cmp    ecx,0x10
c0018b1f:	0f 85 6b ff ff ff    	jne    c0018a90 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0018b25:	8d 76 00             	lea    esi,[esi+0x0]
c0018b28:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0018b2e:	85 c0                	test   eax,eax
c0018b30:	74 62                	je     c0018b94 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018b32:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0018b38:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0018b3e:	74 54                	je     c0018b94 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018b40:	83 ec 0c             	sub    esp,0xc
c0018b43:	68 24 90 02 c0       	push   0xc0029024
c0018b48:	e8 b3 9e 00 00       	call   c0022a00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018b4d:	c7 04 24 24 90 02 c0 	mov    DWORD PTR [esp],0xc0029024
c0018b54:	89 c7                	mov    edi,eax
c0018b56:	e8 89 9e 00 00       	call   c00229e4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018b5b:	83 c4 10             	add    esp,0x10
c0018b5e:	84 c0                	test   al,al
c0018b60:	0f 84 ce 00 00 00    	je     c0018c34 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0018b66:	66 90                	xchg   ax,ax
c0018b68:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018b6b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018b71:	85 d2                	test   edx,edx
c0018b73:	74 0f                	je     c0018b84 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0018b75:	83 ec 0c             	sub    esp,0xc
c0018b78:	8b 02                	mov    eax,DWORD PTR [edx]
c0018b7a:	52                   	push   edx
c0018b7b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018b7e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018b81:	83 c4 10             	add    esp,0x10
c0018b84:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0018b8e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0018b91:	8d 76 00             	lea    esi,[esi+0x0]
c0018b94:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0018b9a:	85 db                	test   ebx,ebx
c0018b9c:	74 16                	je     c0018bb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018b9e:	83 ec 0c             	sub    esp,0xc
c0018ba1:	53                   	push   ebx
c0018ba2:	e8 55 33 ff ff       	call   c000befc <VAS::~VAS()>
c0018ba7:	58                   	pop    eax
c0018ba8:	5a                   	pop    edx
c0018ba9:	6a 14                	push   0x14
c0018bab:	53                   	push   ebx
c0018bac:	e8 65 40 ff ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c0018bb1:	83 c4 10             	add    esp,0x10
c0018bb4:	83 c4 1c             	add    esp,0x1c
c0018bb7:	5b                   	pop    ebx
c0018bb8:	5e                   	pop    esi
c0018bb9:	5f                   	pop    edi
c0018bba:	5d                   	pop    ebp
c0018bbb:	c3                   	ret    
c0018bbc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018bc0:	83 ec 0c             	sub    esp,0xc
c0018bc3:	68 44 5d 02 c0       	push   0xc0025d44
c0018bc8:	e8 d6 bc ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0018bcd:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018bd0:	83 c4 10             	add    esp,0x10
c0018bd3:	89 f7                	mov    edi,esi
c0018bd5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018bd9:	e9 a6 fe ff ff       	jmp    c0018a84 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018bde:	66 90                	xchg   ax,ax
c0018be0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018be6:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0018bec:	75 1e                	jne    c0018c0c <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018bee:	83 ec 0c             	sub    esp,0xc
c0018bf1:	68 ac 5d 02 c0       	push   0xc0025dac
c0018bf6:	e8 fc 40 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0018bfb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018c02:	e8 65 fa ff ff       	call   c001866c <blockTask(TaskState)>
c0018c07:	83 c4 10             	add    esp,0x10
c0018c0a:	66 90                	xchg   ax,ax
c0018c0c:	83 ec 08             	sub    esp,0x8
c0018c0f:	56                   	push   esi
c0018c10:	68 24 90 02 c0       	push   0xc0029024
c0018c15:	e8 a6 9e 00 00       	call   c0022ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018c1a:	c7 04 24 24 90 02 c0 	mov    DWORD PTR [esp],0xc0029024
c0018c21:	e8 da 9d 00 00       	call   c0022a00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018c26:	83 c4 10             	add    esp,0x10
c0018c29:	39 f8                	cmp    eax,edi
c0018c2b:	0f 84 37 ff ff ff    	je     c0018b68 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c0018c31:	8d 76 00             	lea    esi,[esi+0x0]
c0018c34:	83 ec 0c             	sub    esp,0xc
c0018c37:	68 24 90 02 c0       	push   0xc0029024
c0018c3c:	e8 bf 9d 00 00       	call   c0022a00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018c41:	c7 04 24 24 90 02 c0 	mov    DWORD PTR [esp],0xc0029024
c0018c48:	89 c6                	mov    esi,eax
c0018c4a:	e8 b9 9d 00 00       	call   c0022a08 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018c4f:	83 c4 10             	add    esp,0x10
c0018c52:	39 f3                	cmp    ebx,esi
c0018c54:	74 b6                	je     c0018c0c <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018c56:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0018c59:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018c5c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0018c62:	75 a8                	jne    c0018c0c <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018c64:	e9 77 ff ff ff       	jmp    c0018be0 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0018c69:	8d 76 00             	lea    esi,[esi+0x0]
c0018c6c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018c70:	83 ec 0c             	sub    esp,0xc
c0018c73:	68 78 5d 02 c0       	push   0xc0025d78
c0018c78:	e9 4b ff ff ff       	jmp    c0018bc8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0018c7d:	8d 76 00             	lea    esi,[esi+0x0]
c0018c80:	8b 36                	mov    esi,DWORD PTR [esi]
c0018c82:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018c86:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0018c89:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018c8c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0018c92:	01 d7                	add    edi,edx
c0018c94:	89 f8                	mov    eax,edi
c0018c96:	e9 51 fe ff ff       	jmp    c0018aec <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0018c9b:	90                   	nop

c0018c9c <cleanerTaskFunction(void*)>:
c0018c9c:	53                   	push   ebx
c0018c9d:	83 ec 08             	sub    esp,0x8
c0018ca0:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c0018ca5:	48                   	dec    eax
c0018ca6:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c0018cab:	75 03                	jne    c0018cb0 <cleanerTaskFunction(void*)+0x14>
c0018cad:	fb                   	sti    
c0018cae:	66 90                	xchg   ax,ax
c0018cb0:	fa                   	cli    
c0018cb1:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c0018cb6:	80 3d ec 8f 02 c0 00 	cmp    BYTE PTR ds:0xc0028fec,0x0
c0018cbd:	8d 50 01             	lea    edx,[eax+0x1]
c0018cc0:	89 15 08 90 02 c0    	mov    DWORD PTR ds:0xc0029008,edx
c0018cc6:	0f 84 ac 00 00 00    	je     c0018d78 <cleanerTaskFunction(void*)+0xdc>
c0018ccc:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c0018cd1:	85 c0                	test   eax,eax
c0018cd3:	75 03                	jne    c0018cd8 <cleanerTaskFunction(void*)+0x3c>
c0018cd5:	fb                   	sti    
c0018cd6:	66 90                	xchg   ax,ax
c0018cd8:	c6 05 ec 8f 02 c0 00 	mov    BYTE PTR ds:0xc0028fec,0x0
c0018cdf:	fa                   	cli    
c0018ce0:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c0018ce6:	ff 05 04 90 02 c0    	inc    DWORD PTR ds:0xc0029004
c0018cec:	fa                   	cli    
c0018ced:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c0018cf3:	eb 2b                	jmp    c0018d20 <cleanerTaskFunction(void*)+0x84>
c0018cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0018cf8:	83 ec 0c             	sub    esp,0xc
c0018cfb:	68 0c 90 02 c0       	push   0xc002900c
c0018d00:	e8 fb 9c 00 00       	call   c0022a00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018d05:	c7 04 24 0c 90 02 c0 	mov    DWORD PTR [esp],0xc002900c
c0018d0c:	89 c3                	mov    ebx,eax
c0018d0e:	e8 f5 9c 00 00       	call   c0022a08 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018d13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018d16:	e8 b9 fc ff ff       	call   c00189d4 <cleanupTerminatedTask(ThreadControlBlock*)>
c0018d1b:	83 c4 10             	add    esp,0x10
c0018d1e:	66 90                	xchg   ax,ax
c0018d20:	83 ec 0c             	sub    esp,0xc
c0018d23:	68 0c 90 02 c0       	push   0xc002900c
c0018d28:	e8 b7 9c 00 00       	call   c00229e4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018d2d:	83 c4 10             	add    esp,0x10
c0018d30:	84 c0                	test   al,al
c0018d32:	74 c4                	je     c0018cf8 <cleanerTaskFunction(void*)+0x5c>
c0018d34:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c0018d39:	48                   	dec    eax
c0018d3a:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c0018d3f:	75 03                	jne    c0018d44 <cleanerTaskFunction(void*)+0xa8>
c0018d41:	fb                   	sti    
c0018d42:	66 90                	xchg   ax,ax
c0018d44:	a1 04 90 02 c0       	mov    eax,ds:0xc0029004
c0018d49:	48                   	dec    eax
c0018d4a:	a3 04 90 02 c0       	mov    ds:0xc0029004,eax
c0018d4f:	0f 85 4b ff ff ff    	jne    c0018ca0 <cleanerTaskFunction(void*)+0x4>
c0018d55:	a1 00 90 02 c0       	mov    eax,ds:0xc0029000
c0018d5a:	85 c0                	test   eax,eax
c0018d5c:	0f 84 3e ff ff ff    	je     c0018ca0 <cleanerTaskFunction(void*)+0x4>
c0018d62:	c7 05 00 90 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029000,0x0
c0018d6c:	e8 03 f7 ff ff       	call   c0018474 <schedule()>
c0018d71:	e9 2a ff ff ff       	jmp    c0018ca0 <cleanerTaskFunction(void*)+0x4>
c0018d76:	66 90                	xchg   ax,ax
c0018d78:	83 ec 0c             	sub    esp,0xc
c0018d7b:	6a 02                	push   0x2
c0018d7d:	e8 c2 f8 ff ff       	call   c0018644 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018d82:	83 c4 10             	add    esp,0x10
c0018d85:	e9 4e ff ff ff       	jmp    c0018cd8 <cleanerTaskFunction(void*)+0x3c>
c0018d8a:	66 90                	xchg   ax,ax

c0018d8c <terminateTask(int)>:
c0018d8c:	83 ec 14             	sub    esp,0x14
c0018d8f:	fa                   	cli    
c0018d90:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c0018d96:	ff 05 04 90 02 c0    	inc    DWORD PTR ds:0xc0029004
c0018d9c:	fa                   	cli    
c0018d9d:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c0018da3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018da7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018dac:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0018daf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018db4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0018db7:	50                   	push   eax
c0018db8:	68 0c 90 02 c0       	push   0xc002900c
c0018dbd:	e8 fe 9c 00 00       	call   c0022ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018dc2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018dc7:	83 c4 10             	add    esp,0x10
c0018dca:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0018dd1:	a1 e8 8f 02 c0       	mov    eax,ds:0xc0028fe8
c0018dd6:	85 c0                	test   eax,eax
c0018dd8:	74 5e                	je     c0018e38 <terminateTask(int)+0xac>
c0018dda:	83 ec 0c             	sub    esp,0xc
c0018ddd:	c6 05 ec 8f 02 c0 01 	mov    BYTE PTR ds:0xc0028fec,0x1
c0018de4:	50                   	push   eax
c0018de5:	e8 46 fb ff ff       	call   c0018930 <unblockTask(ThreadControlBlock*)>
c0018dea:	83 c4 10             	add    esp,0x10
c0018ded:	8d 76 00             	lea    esi,[esi+0x0]
c0018df0:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c0018df5:	48                   	dec    eax
c0018df6:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c0018dfb:	75 03                	jne    c0018e00 <terminateTask(int)+0x74>
c0018dfd:	fb                   	sti    
c0018dfe:	66 90                	xchg   ax,ax
c0018e00:	a1 04 90 02 c0       	mov    eax,ds:0xc0029004
c0018e05:	48                   	dec    eax
c0018e06:	a3 04 90 02 c0       	mov    ds:0xc0029004,eax
c0018e0b:	75 0b                	jne    c0018e18 <terminateTask(int)+0x8c>
c0018e0d:	83 3d 00 90 02 c0 00 	cmp    DWORD PTR ds:0xc0029000,0x0
c0018e14:	75 36                	jne    c0018e4c <terminateTask(int)+0xc0>
c0018e16:	66 90                	xchg   ax,ax
c0018e18:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c0018e1d:	48                   	dec    eax
c0018e1e:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c0018e23:	75 03                	jne    c0018e28 <terminateTask(int)+0x9c>
c0018e25:	fb                   	sti    
c0018e26:	66 90                	xchg   ax,ax
c0018e28:	fa                   	cli    
c0018e29:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c0018e2f:	90                   	nop
c0018e30:	e8 3f f6 ff ff       	call   c0018474 <schedule()>
c0018e35:	eb e1                	jmp    c0018e18 <terminateTask(int)+0x8c>
c0018e37:	90                   	nop
c0018e38:	83 ec 0c             	sub    esp,0xc
c0018e3b:	68 a9 5c 02 c0       	push   0xc0025ca9
c0018e40:	e8 b2 3e ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0018e45:	83 c4 10             	add    esp,0x10
c0018e48:	eb a6                	jmp    c0018df0 <terminateTask(int)+0x64>
c0018e4a:	66 90                	xchg   ax,ax
c0018e4c:	c7 05 00 90 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029000,0x0
c0018e56:	eb d8                	jmp    c0018e30 <terminateTask(int)+0xa4>

c0018e58 <Thr::terminateFromIRQ(int)>:
c0018e58:	83 ec 18             	sub    esp,0x18
c0018e5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e5f:	e8 28 ff ff ff       	call   c0018d8c <terminateTask(int)>

c0018e64 <Semaphore::release()>:
c0018e64:	83 ec 0c             	sub    esp,0xc
c0018e67:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e6b:	fa                   	cli    
c0018e6c:	a1 04 90 02 c0       	mov    eax,ds:0xc0029004
c0018e71:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c0018e77:	8d 48 01             	lea    ecx,[eax+0x1]
c0018e7a:	89 0d 04 90 02 c0    	mov    DWORD PTR ds:0xc0029004,ecx
c0018e80:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018e83:	85 c9                	test   ecx,ecx
c0018e85:	74 41                	je     c0018ec8 <Semaphore::release()+0x64>
c0018e87:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0018e8a:	83 ec 0c             	sub    esp,0xc
c0018e8d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018e90:	51                   	push   ecx
c0018e91:	e8 9a fa ff ff       	call   c0018930 <unblockTask(ThreadControlBlock*)>
c0018e96:	a1 04 90 02 c0       	mov    eax,ds:0xc0029004
c0018e9b:	83 c4 10             	add    esp,0x10
c0018e9e:	48                   	dec    eax
c0018e9f:	90                   	nop
c0018ea0:	a3 04 90 02 c0       	mov    ds:0xc0029004,eax
c0018ea5:	85 c0                	test   eax,eax
c0018ea7:	75 0b                	jne    c0018eb4 <Semaphore::release()+0x50>
c0018ea9:	a1 00 90 02 c0       	mov    eax,ds:0xc0029000
c0018eae:	85 c0                	test   eax,eax
c0018eb0:	75 1e                	jne    c0018ed0 <Semaphore::release()+0x6c>
c0018eb2:	66 90                	xchg   ax,ax
c0018eb4:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c0018eb9:	48                   	dec    eax
c0018eba:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c0018ebf:	75 03                	jne    c0018ec4 <Semaphore::release()+0x60>
c0018ec1:	fb                   	sti    
c0018ec2:	66 90                	xchg   ax,ax
c0018ec4:	83 c4 0c             	add    esp,0xc
c0018ec7:	c3                   	ret    
c0018ec8:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0018ecb:	eb d3                	jmp    c0018ea0 <Semaphore::release()+0x3c>
c0018ecd:	8d 76 00             	lea    esi,[esi+0x0]
c0018ed0:	c7 05 00 90 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029000,0x0
c0018eda:	e8 95 f5 ff ff       	call   c0018474 <schedule()>
c0018edf:	eb d3                	jmp    c0018eb4 <Semaphore::release()+0x50>
c0018ee1:	8d 76 00             	lea    esi,[esi+0x0]

c0018ee4 <__static_initialization_and_destruction_0(int, int)>:
c0018ee4:	83 ec 0c             	sub    esp,0xc
c0018ee7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018eec:	0f 85 8e 00 00 00    	jne    c0018f80 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0018ef2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018efa:	0f 85 80 00 00 00    	jne    c0018f80 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0018f00:	83 ec 0c             	sub    esp,0xc
c0018f03:	68 24 90 02 c0       	push   0xc0029024
c0018f08:	e8 5f 9e 00 00       	call   c0022d6c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018f0d:	83 c4 10             	add    esp,0x10
c0018f10:	83 ec 04             	sub    esp,0x4
c0018f13:	68 a0 6d 02 c0       	push   0xc0026da0
c0018f18:	68 24 90 02 c0       	push   0xc0029024
c0018f1d:	68 1c 2d 02 c0       	push   0xc0022d1c
c0018f22:	e8 69 3c ff ff       	call   c000cb90 <__cxa_atexit>
c0018f27:	83 c4 10             	add    esp,0x10
c0018f2a:	83 ec 0c             	sub    esp,0xc
c0018f2d:	68 18 90 02 c0       	push   0xc0029018
c0018f32:	e8 35 9e 00 00       	call   c0022d6c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018f37:	83 c4 10             	add    esp,0x10
c0018f3a:	83 ec 04             	sub    esp,0x4
c0018f3d:	68 a0 6d 02 c0       	push   0xc0026da0
c0018f42:	68 18 90 02 c0       	push   0xc0029018
c0018f47:	68 1c 2d 02 c0       	push   0xc0022d1c
c0018f4c:	e8 3f 3c ff ff       	call   c000cb90 <__cxa_atexit>
c0018f51:	83 c4 10             	add    esp,0x10
c0018f54:	83 ec 0c             	sub    esp,0xc
c0018f57:	68 0c 90 02 c0       	push   0xc002900c
c0018f5c:	e8 0b 9e 00 00       	call   c0022d6c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018f61:	83 c4 10             	add    esp,0x10
c0018f64:	83 ec 04             	sub    esp,0x4
c0018f67:	68 a0 6d 02 c0       	push   0xc0026da0
c0018f6c:	68 0c 90 02 c0       	push   0xc002900c
c0018f71:	68 1c 2d 02 c0       	push   0xc0022d1c
c0018f76:	e8 15 3c ff ff       	call   c000cb90 <__cxa_atexit>
c0018f7b:	83 c4 10             	add    esp,0x10
c0018f7e:	66 90                	xchg   ax,ax
c0018f80:	90                   	nop
c0018f81:	83 c4 0c             	add    esp,0xc
c0018f84:	c3                   	ret    
c0018f85:	8d 76 00             	lea    esi,[esi+0x0]

c0018f88 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0018f88:	83 ec 0c             	sub    esp,0xc
c0018f8b:	83 ec 08             	sub    esp,0x8
c0018f8e:	68 ff ff 00 00       	push   0xffff
c0018f93:	6a 01                	push   0x1
c0018f95:	e8 4a ff ff ff       	call   c0018ee4 <__static_initialization_and_destruction_0(int, int)>
c0018f9a:	83 c4 10             	add    esp,0x10
c0018f9d:	83 c4 0c             	add    esp,0xc
c0018fa0:	c3                   	ret    

c0018fa1 <Vm::inbv(unsigned short)>:
c0018fa1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018fa5:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018faa:	75 06                	jne    c0018fb2 <Vm::inbv(unsigned short)+0x11>
c0018fac:	a0 6c 90 02 c0       	mov    al,ds:0xc002906c
c0018fb1:	c3                   	ret    
c0018fb2:	ec                   	in     al,dx
c0018fb3:	c3                   	ret    

c0018fb4 <Vm::outbv(unsigned short, unsigned char)>:
c0018fb4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018fb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018fbc:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018fc1:	75 25                	jne    c0018fe8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0018fc3:	8b 0d 6c 90 02 c0    	mov    ecx,DWORD PTR ds:0xc002906c
c0018fc9:	8d 51 01             	lea    edx,[ecx+0x1]
c0018fcc:	88 81 80 90 02 c0    	mov    BYTE PTR [ecx-0x3ffd6f80],al
c0018fd2:	89 15 6c 90 02 c0    	mov    DWORD PTR ds:0xc002906c,edx
c0018fd8:	83 fa 20             	cmp    edx,0x20
c0018fdb:	75 0c                	jne    c0018fe9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0018fdd:	c7 05 6c 90 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002906c,0x1f
c0018fe7:	c3                   	ret    
c0018fe8:	ee                   	out    dx,al
c0018fe9:	c3                   	ret    

c0018fea <Vm::realToLinear(unsigned short, unsigned short)>:
c0018fea:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018fef:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018ff4:	c1 e0 04             	shl    eax,0x4
c0018ff7:	01 d0                	add    eax,edx
c0018ff9:	c3                   	ret    

c0018ffa <Vm::getSegment(unsigned int)>:
c0018ffa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ffe:	c1 e8 10             	shr    eax,0x10
c0019001:	c3                   	ret    

c0019002 <Vm::getOffset(unsigned int)>:
c0019002:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019006:	c3                   	ret    

c0019007 <Vm::mainloop2()>:
c0019007:	83 ec 18             	sub    esp,0x18
c001900a:	fa                   	cli    
c001900b:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c0019011:	6a 02                	push   0x2
c0019013:	c6 05 65 90 02 c0 01 	mov    BYTE PTR ds:0xc0029065,0x1
c001901a:	e8 25 f6 ff ff       	call   c0018644 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001901f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019024:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0019028:	52                   	push   edx
c0019029:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c001902d:	52                   	push   edx
c001902e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0019032:	52                   	push   edx
c0019033:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0019037:	50                   	push   eax
c0019038:	e8 f2 71 fe ff       	call   c000022f <goToVM86>
c001903d:	83 c4 2c             	add    esp,0x2c
c0019040:	c3                   	ret    

c0019041 <Vm::mainVm8086Loop(void*)>:
c0019041:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c0019046:	48                   	dec    eax
c0019047:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c001904c:	75 01                	jne    c001904f <Vm::mainVm8086Loop(void*)+0xe>
c001904e:	fb                   	sti    
c001904f:	eb b6                	jmp    c0019007 <Vm::mainloop2()>

c0019051 <Vm::mainloop3(unsigned long)>:
c0019051:	83 ec 18             	sub    esp,0x18
c0019054:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019058:	fa                   	cli    
c0019059:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c001905f:	6a 02                	push   0x2
c0019061:	c6 05 64 90 02 c0 01 	mov    BYTE PTR ds:0xc0029064,0x1
c0019068:	a3 60 90 02 c0       	mov    ds:0xc0029060,eax
c001906d:	e8 d2 f5 ff ff       	call   c0018644 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0019072:	83 c4 1c             	add    esp,0x1c
c0019075:	eb 90                	jmp    c0019007 <Vm::mainloop2()>

c0019077 <Vm::initialise8086()>:
c0019077:	83 ec 0c             	sub    esp,0xc
c001907a:	68 80 00 00 00       	push   0x80
c001907f:	6a 00                	push   0x0
c0019081:	68 41 90 01 c0       	push   0xc0019041
c0019086:	ff 35 30 90 02 c0    	push   DWORD PTR ds:0xc0029030
c001908c:	e8 c7 f1 ff ff       	call   c0018258 <Process::createThread(void (*)(void*), void*, int)>
c0019091:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019098:	a3 68 90 02 c0       	mov    ds:0xc0029068,eax
c001909d:	68 00 01 00 00       	push   0x100
c00190a2:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c00190a7:	6a 00                	push   0x0
c00190a9:	6a 00                	push   0x0
c00190ab:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00190b1:	e8 b8 32 ff ff       	call   c000c36e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00190b6:	83 c4 2c             	add    esp,0x2c
c00190b9:	c3                   	ret    

c00190ba <Vm::finish8086()>:
c00190ba:	53                   	push   ebx
c00190bb:	83 ec 08             	sub    esp,0x8
c00190be:	fa                   	cli    
c00190bf:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c00190c5:	80 3d 64 90 02 c0 00 	cmp    BYTE PTR ds:0xc0029064,0x0
c00190cc:	75 15                	jne    c00190e3 <Vm::finish8086()+0x29>
c00190ce:	e8 a1 f3 ff ff       	call   c0018474 <schedule()>
c00190d3:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c00190d8:	48                   	dec    eax
c00190d9:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c00190de:	75 de                	jne    c00190be <Vm::finish8086()+0x4>
c00190e0:	fb                   	sti    
c00190e1:	eb db                	jmp    c00190be <Vm::finish8086()+0x4>
c00190e3:	83 ec 0c             	sub    esp,0xc
c00190e6:	8b 1d 60 90 02 c0    	mov    ebx,DWORD PTR ds:0xc0029060
c00190ec:	ff 35 68 90 02 c0    	push   DWORD PTR ds:0xc0029068
c00190f2:	c6 05 64 90 02 c0 00 	mov    BYTE PTR ds:0xc0029064,0x0
c00190f9:	e8 32 f8 ff ff       	call   c0018930 <unblockTask(ThreadControlBlock*)>
c00190fe:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c0019103:	83 c4 10             	add    esp,0x10
c0019106:	8d 50 ff             	lea    edx,[eax-0x1]
c0019109:	89 15 08 90 02 c0    	mov    DWORD PTR ds:0xc0029008,edx
c001910f:	85 d2                	test   edx,edx
c0019111:	75 01                	jne    c0019114 <Vm::finish8086()+0x5a>
c0019113:	fb                   	sti    
c0019114:	89 d8                	mov    eax,ebx
c0019116:	83 c4 08             	add    esp,0x8
c0019119:	5b                   	pop    ebx
c001911a:	c3                   	ret    

c001911b <Vm::getOutput8086(unsigned char*)>:
c001911b:	57                   	push   edi
c001911c:	8b 0d 6c 90 02 c0    	mov    ecx,DWORD PTR ds:0xc002906c
c0019122:	56                   	push   esi
c0019123:	be 80 90 02 c0       	mov    esi,0xc0029080
c0019128:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001912c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001912e:	a1 6c 90 02 c0       	mov    eax,ds:0xc002906c
c0019133:	5e                   	pop    esi
c0019134:	c7 05 6c 90 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002906c,0x0
c001913e:	5f                   	pop    edi
c001913f:	c3                   	ret    

c0019140 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019140:	55                   	push   ebp
c0019141:	57                   	push   edi
c0019142:	56                   	push   esi
c0019143:	53                   	push   ebx
c0019144:	83 ec 2c             	sub    esp,0x2c
c0019147:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001914b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001914f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0019153:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0019157:	fa                   	cli    
c0019158:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c001915e:	0f b6 35 65 90 02 c0 	movzx  esi,BYTE PTR ds:0xc0029065
c0019165:	89 f0                	mov    eax,esi
c0019167:	84 c0                	test   al,al
c0019169:	75 1d                	jne    c0019188 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001916b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001916f:	e8 00 f3 ff ff       	call   c0018474 <schedule()>
c0019174:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c0019179:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001917d:	48                   	dec    eax
c001917e:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c0019183:	75 d2                	jne    c0019157 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019185:	fb                   	sti    
c0019186:	eb cf                	jmp    c0019157 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019188:	a1 68 90 02 c0       	mov    eax,ds:0xc0029068
c001918d:	c7 05 6c 90 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002906c,0x0
c0019197:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c001919b:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001919f:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00191a3:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00191a7:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00191ab:	50                   	push   eax
c00191ac:	6a 20                	push   0x20
c00191ae:	6a 00                	push   0x0
c00191b0:	68 80 90 02 c0       	push   0xc0029080
c00191b5:	e8 ca 74 fe ff       	call   c0000684 <memset>
c00191ba:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00191c1:	e8 41 08 ff ff       	call   c0009a07 <malloc>
c00191c6:	83 c4 0c             	add    esp,0xc
c00191c9:	89 c3                	mov    ebx,eax
c00191cb:	ff 35 30 90 02 c0    	push   DWORD PTR ds:0xc0029030
c00191d1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191d5:	50                   	push   eax
c00191d6:	e8 87 40 ff ff       	call   c000d262 <File::File(char const*, Process*)>
c00191db:	83 c4 10             	add    esp,0x10
c00191de:	85 db                	test   ebx,ebx
c00191e0:	75 0a                	jne    c00191ec <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00191e2:	83 ec 0c             	sub    esp,0xc
c00191e5:	68 d4 5d 02 c0       	push   0xc0025dd4
c00191ea:	eb 3e                	jmp    c001922a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00191ec:	50                   	push   eax
c00191ed:	8d 44 24 17          	lea    eax,[esp+0x17]
c00191f1:	50                   	push   eax
c00191f2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00191f6:	50                   	push   eax
c00191f7:	53                   	push   ebx
c00191f8:	e8 b3 43 ff ff       	call   c000d5b0 <File::stat(unsigned long long*, bool*)>
c00191fd:	83 c4 10             	add    esp,0x10
c0019200:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0019205:	74 0a                	je     c0019211 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0019207:	83 ec 0c             	sub    esp,0xc
c001920a:	68 e8 5d 02 c0       	push   0xc0025de8
c001920f:	eb 19                	jmp    c001922a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019211:	51                   	push   ecx
c0019212:	51                   	push   ecx
c0019213:	6a 01                	push   0x1
c0019215:	53                   	push   ebx
c0019216:	e8 e9 40 ff ff       	call   c000d304 <File::open(FileOpenMode)>
c001921b:	83 c4 10             	add    esp,0x10
c001921e:	85 c0                	test   eax,eax
c0019220:	74 24                	je     c0019246 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0019222:	83 ec 0c             	sub    esp,0xc
c0019225:	68 01 5e 02 c0       	push   0xc0025e01
c001922a:	e8 74 b6 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c001922f:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c0019234:	83 c4 10             	add    esp,0x10
c0019237:	48                   	dec    eax
c0019238:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c001923d:	85 c0                	test   eax,eax
c001923f:	75 01                	jne    c0019242 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0019241:	fb                   	sti    
c0019242:	31 f6                	xor    esi,esi
c0019244:	eb 58                	jmp    c001929e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0019246:	0f b7 ed             	movzx  ebp,bp
c0019249:	50                   	push   eax
c001924a:	0f b7 ff             	movzx  edi,di
c001924d:	50                   	push   eax
c001924e:	55                   	push   ebp
c001924f:	57                   	push   edi
c0019250:	e8 95 fd ff ff       	call   c0018fea <Vm::realToLinear(unsigned short, unsigned short)>
c0019255:	5a                   	pop    edx
c0019256:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019258:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001925c:	51                   	push   ecx
c001925d:	50                   	push   eax
c001925e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019262:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019266:	53                   	push   ebx
c0019267:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001926a:	83 c4 14             	add    esp,0x14
c001926d:	53                   	push   ebx
c001926e:	e8 ef 40 ff ff       	call   c000d362 <File::close()>
c0019273:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c0019278:	83 c4 10             	add    esp,0x10
c001927b:	48                   	dec    eax
c001927c:	c6 05 65 90 02 c0 00 	mov    BYTE PTR ds:0xc0029065,0x0
c0019283:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c0019288:	85 c0                	test   eax,eax
c001928a:	75 01                	jne    c001928d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001928c:	fb                   	sti    
c001928d:	83 ec 0c             	sub    esp,0xc
c0019290:	ff 35 68 90 02 c0    	push   DWORD PTR ds:0xc0029068
c0019296:	e8 95 f6 ff ff       	call   c0018930 <unblockTask(ThreadControlBlock*)>
c001929b:	83 c4 10             	add    esp,0x10
c001929e:	83 c4 2c             	add    esp,0x2c
c00192a1:	89 f0                	mov    eax,esi
c00192a3:	5b                   	pop    ebx
c00192a4:	5e                   	pop    esi
c00192a5:	5f                   	pop    edi
c00192a6:	5d                   	pop    ebp
c00192a7:	c3                   	ret    

c00192a8 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00192a8:	57                   	push   edi
c00192a9:	56                   	push   esi
c00192aa:	53                   	push   ebx
c00192ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00192af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00192b3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00192b7:	83 e8 06             	sub    eax,0x6
c00192ba:	0f b7 c0             	movzx  eax,ax
c00192bd:	50                   	push   eax
c00192be:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00192c3:	50                   	push   eax
c00192c4:	e8 21 fd ff ff       	call   c0018fea <Vm::realToLinear(unsigned short, unsigned short)>
c00192c9:	5a                   	pop    edx
c00192ca:	5e                   	pop    esi
c00192cb:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00192ce:	8d 56 fa             	lea    edx,[esi-0x6]
c00192d1:	81 e2 ff ff 00 00    	and    edx,0xffff
c00192d7:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00192da:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00192dd:	83 c2 02             	add    edx,0x2
c00192e0:	66 89 10             	mov    WORD PTR [eax],dx
c00192e3:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00192e6:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00192ea:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00192ed:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00192f1:	89 d6                	mov    esi,edx
c00192f3:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00192f9:	66 81 e6 ff fd       	and    si,0xfdff
c00192fe:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0019302:	74 07                	je     c001930b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0019304:	89 d6                	mov    esi,edx
c0019306:	66 81 ce 00 02       	or     si,0x200
c001930b:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001930f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019314:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0019318:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019320:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019323:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001932b:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001932e:	5b                   	pop    ebx
c001932f:	5e                   	pop    esi
c0019330:	5f                   	pop    edi
c0019331:	c3                   	ret    

c0019332 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019332:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019337:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001933c:	c1 e0 04             	shl    eax,0x4
c001933f:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019342:	c3                   	ret    

c0019343 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019343:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019348:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001934d:	c1 e0 04             	shl    eax,0x4
c0019350:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019354:	c3                   	ret    

c0019355 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019355:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001935a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001935f:	c1 e0 04             	shl    eax,0x4
c0019362:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0019365:	c3                   	ret    

c0019366 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0019366:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001936b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019370:	c1 e0 04             	shl    eax,0x4
c0019373:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019377:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001937a:	c3                   	ret    

c001937b <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001937b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019380:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019385:	c1 e0 04             	shl    eax,0x4
c0019388:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001938c:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0019390:	c3                   	ret    

c0019391 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0019391:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019396:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001939b:	c1 e0 04             	shl    eax,0x4
c001939e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00193a2:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00193a5:	c3                   	ret    

c00193a6 <Vm::faultHandler(regs*)>:
c00193a6:	55                   	push   ebp
c00193a7:	57                   	push   edi
c00193a8:	56                   	push   esi
c00193a9:	53                   	push   ebx
c00193aa:	83 ec 1c             	sub    esp,0x1c
c00193ad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00193b1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00193b4:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00193b8:	0f b7 f8             	movzx  edi,ax
c00193bb:	52                   	push   edx
c00193bc:	0f b7 c0             	movzx  eax,ax
c00193bf:	50                   	push   eax
c00193c0:	e8 25 fc ff ff       	call   c0018fea <Vm::realToLinear(unsigned short, unsigned short)>
c00193c5:	5a                   	pop    edx
c00193c6:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00193c9:	59                   	pop    ecx
c00193ca:	89 c1                	mov    ecx,eax
c00193cc:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00193cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00193d3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00193d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00193dc:	0f b7 c5             	movzx  eax,bp
c00193df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193e3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00193e7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00193eb:	e8 fa fb ff ff       	call   c0018fea <Vm::realToLinear(unsigned short, unsigned short)>
c00193f0:	5e                   	pop    esi
c00193f1:	be 06 00 00 00       	mov    esi,0x6
c00193f6:	5a                   	pop    edx
c00193f7:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00193fc:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0019401:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0019404:	80 fa 9d             	cmp    dl,0x9d
c0019407:	0f 84 2c 02 00 00    	je     c0019639 <Vm::faultHandler(regs*)+0x293>
c001940d:	0f 87 91 00 00 00    	ja     c00194a4 <Vm::faultHandler(regs*)+0xfe>
c0019413:	80 fa 66             	cmp    dl,0x66
c0019416:	0f 84 98 01 00 00    	je     c00195b4 <Vm::faultHandler(regs*)+0x20e>
c001941c:	77 47                	ja     c0019465 <Vm::faultHandler(regs*)+0xbf>
c001941e:	80 fa 36             	cmp    dl,0x36
c0019421:	0f 84 80 01 00 00    	je     c00195a7 <Vm::faultHandler(regs*)+0x201>
c0019427:	77 1a                	ja     c0019443 <Vm::faultHandler(regs*)+0x9d>
c0019429:	80 fa 26             	cmp    dl,0x26
c001942c:	0f 84 4e 01 00 00    	je     c0019580 <Vm::faultHandler(regs*)+0x1da>
c0019432:	80 fa 2e             	cmp    dl,0x2e
c0019435:	0f 85 e2 05 00 00    	jne    c0019a1d <Vm::faultHandler(regs*)+0x677>
c001943b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001943e:	31 f6                	xor    esi,esi
c0019440:	41                   	inc    ecx
c0019441:	eb be                	jmp    c0019401 <Vm::faultHandler(regs*)+0x5b>
c0019443:	80 fa 64             	cmp    dl,0x64
c0019446:	0f 84 41 01 00 00    	je     c001958d <Vm::faultHandler(regs*)+0x1e7>
c001944c:	0f 87 48 01 00 00    	ja     c001959a <Vm::faultHandler(regs*)+0x1f4>
c0019452:	80 fa 3e             	cmp    dl,0x3e
c0019455:	0f 85 c2 05 00 00    	jne    c0019a1d <Vm::faultHandler(regs*)+0x677>
c001945b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001945e:	be 01 00 00 00       	mov    esi,0x1
c0019463:	eb db                	jmp    c0019440 <Vm::faultHandler(regs*)+0x9a>
c0019465:	80 fa 6d             	cmp    dl,0x6d
c0019468:	0f 84 ec 02 00 00    	je     c001975a <Vm::faultHandler(regs*)+0x3b4>
c001946e:	77 17                	ja     c0019487 <Vm::faultHandler(regs*)+0xe1>
c0019470:	80 fa 67             	cmp    dl,0x67
c0019473:	0f 84 48 01 00 00    	je     c00195c1 <Vm::faultHandler(regs*)+0x21b>
c0019479:	80 fa 6c             	cmp    dl,0x6c
c001947c:	0f 84 69 02 00 00    	je     c00196eb <Vm::faultHandler(regs*)+0x345>
c0019482:	e9 96 05 00 00       	jmp    c0019a1d <Vm::faultHandler(regs*)+0x677>
c0019487:	80 fa 6f             	cmp    dl,0x6f
c001948a:	0f 84 f4 03 00 00    	je     c0019884 <Vm::faultHandler(regs*)+0x4de>
c0019490:	0f 82 59 03 00 00    	jb     c00197ef <Vm::faultHandler(regs*)+0x449>
c0019496:	80 fa 9c             	cmp    dl,0x9c
c0019499:	0f 84 2f 01 00 00    	je     c00195ce <Vm::faultHandler(regs*)+0x228>
c001949f:	e9 79 05 00 00       	jmp    c0019a1d <Vm::faultHandler(regs*)+0x677>
c00194a4:	80 fa ec             	cmp    dl,0xec
c00194a7:	0f 84 14 05 00 00    	je     c00199c1 <Vm::faultHandler(regs*)+0x61b>
c00194ad:	77 7b                	ja     c001952a <Vm::faultHandler(regs*)+0x184>
c00194af:	80 fa e4             	cmp    dl,0xe4
c00194b2:	0f 84 93 04 00 00    	je     c001994b <Vm::faultHandler(regs*)+0x5a5>
c00194b8:	77 53                	ja     c001950d <Vm::faultHandler(regs*)+0x167>
c00194ba:	80 fa cd             	cmp    dl,0xcd
c00194bd:	0f 84 d9 01 00 00    	je     c001969c <Vm::faultHandler(regs*)+0x2f6>
c00194c3:	80 fa cf             	cmp    dl,0xcf
c00194c6:	0f 85 51 05 00 00    	jne    c0019a1d <Vm::faultHandler(regs*)+0x677>
c00194cc:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00194cf:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00194d2:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00194d6:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00194d9:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00194dd:	81 ca 00 02 02 00    	or     edx,0x20200
c00194e3:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00194e6:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00194ea:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00194f0:	66 c1 e8 09          	shr    ax,0x9
c00194f4:	83 e0 01             	and    eax,0x1
c00194f7:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00194fa:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00194fd:	83 c0 06             	add    eax,0x6
c0019500:	25 ff ff 00 00       	and    eax,0xffff
c0019505:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019508:	e9 0c 05 00 00       	jmp    c0019a19 <Vm::faultHandler(regs*)+0x673>
c001950d:	80 fa e6             	cmp    dl,0xe6
c0019510:	0f 84 7f 04 00 00    	je     c0019995 <Vm::faultHandler(regs*)+0x5ef>
c0019516:	0f 82 4b 04 00 00    	jb     c0019967 <Vm::faultHandler(regs*)+0x5c1>
c001951c:	80 fa e7             	cmp    dl,0xe7
c001951f:	0f 84 87 04 00 00    	je     c00199ac <Vm::faultHandler(regs*)+0x606>
c0019525:	e9 f3 04 00 00       	jmp    c0019a1d <Vm::faultHandler(regs*)+0x677>
c001952a:	80 fa ef             	cmp    dl,0xef
c001952d:	0f 84 d1 04 00 00    	je     c0019a04 <Vm::faultHandler(regs*)+0x65e>
c0019533:	77 28                	ja     c001955d <Vm::faultHandler(regs*)+0x1b7>
c0019535:	80 fa ed             	cmp    dl,0xed
c0019538:	0f 84 9f 04 00 00    	je     c00199dd <Vm::faultHandler(regs*)+0x637>
c001953e:	80 fa ee             	cmp    dl,0xee
c0019541:	0f 85 d6 04 00 00    	jne    c0019a1d <Vm::faultHandler(regs*)+0x677>
c0019547:	50                   	push   eax
c0019548:	50                   	push   eax
c0019549:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001954d:	50                   	push   eax
c001954e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019552:	50                   	push   eax
c0019553:	e8 5c fa ff ff       	call   c0018fb4 <Vm::outbv(unsigned short, unsigned char)>
c0019558:	e9 9f 04 00 00       	jmp    c00199fc <Vm::faultHandler(regs*)+0x656>
c001955d:	80 fa fa             	cmp    dl,0xfa
c0019560:	0f 84 69 01 00 00    	je     c00196cf <Vm::faultHandler(regs*)+0x329>
c0019566:	80 fa fb             	cmp    dl,0xfb
c0019569:	0f 84 6e 01 00 00    	je     c00196dd <Vm::faultHandler(regs*)+0x337>
c001956f:	80 fa f3             	cmp    dl,0xf3
c0019572:	0f 85 a5 04 00 00    	jne    c0019a1d <Vm::faultHandler(regs*)+0x677>
c0019578:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001957b:	e9 c0 fe ff ff       	jmp    c0019440 <Vm::faultHandler(regs*)+0x9a>
c0019580:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019583:	be 02 00 00 00       	mov    esi,0x2
c0019588:	e9 b3 fe ff ff       	jmp    c0019440 <Vm::faultHandler(regs*)+0x9a>
c001958d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019590:	be 03 00 00 00       	mov    esi,0x3
c0019595:	e9 a6 fe ff ff       	jmp    c0019440 <Vm::faultHandler(regs*)+0x9a>
c001959a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001959d:	be 04 00 00 00       	mov    esi,0x4
c00195a2:	e9 99 fe ff ff       	jmp    c0019440 <Vm::faultHandler(regs*)+0x9a>
c00195a7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00195aa:	be 05 00 00 00       	mov    esi,0x5
c00195af:	e9 8c fe ff ff       	jmp    c0019440 <Vm::faultHandler(regs*)+0x9a>
c00195b4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00195b7:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00195bc:	e9 7f fe ff ff       	jmp    c0019440 <Vm::faultHandler(regs*)+0x9a>
c00195c1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00195c4:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00195c9:	e9 72 fe ff ff       	jmp    c0019440 <Vm::faultHandler(regs*)+0x9a>
c00195ce:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00195d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00195d5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00195da:	74 30                	je     c001960c <Vm::faultHandler(regs*)+0x266>
c00195dc:	83 e9 04             	sub    ecx,0x4
c00195df:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00195e5:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00195eb:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00195ee:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00195f1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00195f7:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00195fb:	0f 84 15 04 00 00    	je     c0019a16 <Vm::faultHandler(regs*)+0x670>
c0019601:	80 ce 02             	or     dh,0x2
c0019604:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019607:	e9 0a 04 00 00       	jmp    c0019a16 <Vm::faultHandler(regs*)+0x670>
c001960c:	83 e9 02             	sub    ecx,0x2
c001960f:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019615:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019618:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001961c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019622:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0019626:	74 05                	je     c001962d <Vm::faultHandler(regs*)+0x287>
c0019628:	80 ce 02             	or     dh,0x2
c001962b:	eb 03                	jmp    c0019630 <Vm::faultHandler(regs*)+0x28a>
c001962d:	80 e6 fd             	and    dh,0xfd
c0019630:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019634:	e9 dd 03 00 00       	jmp    c0019a16 <Vm::faultHandler(regs*)+0x670>
c0019639:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001963e:	74 2a                	je     c001966a <Vm::faultHandler(regs*)+0x2c4>
c0019640:	8b 10                	mov    edx,DWORD PTR [eax]
c0019642:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019648:	81 ca 00 02 02 00    	or     edx,0x20200
c001964e:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019651:	8b 00                	mov    eax,DWORD PTR [eax]
c0019653:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019659:	c1 e8 09             	shr    eax,0x9
c001965c:	83 e0 01             	and    eax,0x1
c001965f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019662:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019665:	83 c0 04             	add    eax,0x4
c0019668:	eb 25                	jmp    c001968f <Vm::faultHandler(regs*)+0x2e9>
c001966a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001966d:	81 ca 00 02 02 00    	or     edx,0x20200
c0019673:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019676:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019679:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001967f:	66 c1 e8 09          	shr    ax,0x9
c0019683:	83 e0 01             	and    eax,0x1
c0019686:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019689:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001968c:	83 c0 02             	add    eax,0x2
c001968f:	25 ff ff 00 00       	and    eax,0xffff
c0019694:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019697:	e9 7a 03 00 00       	jmp    c0019a16 <Vm::faultHandler(regs*)+0x670>
c001969c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00196a0:	3c ee                	cmp    al,0xee
c00196a2:	75 10                	jne    c00196b4 <Vm::faultHandler(regs*)+0x30e>
c00196a4:	83 ec 0c             	sub    esp,0xc
c00196a7:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00196aa:	e8 a2 f9 ff ff       	call   c0019051 <Vm::mainloop3(unsigned long)>
c00196af:	e9 4b 03 00 00       	jmp    c00199ff <Vm::faultHandler(regs*)+0x659>
c00196b4:	83 ec 0c             	sub    esp,0xc
c00196b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00196bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00196bf:	51                   	push   ecx
c00196c0:	50                   	push   eax
c00196c1:	53                   	push   ebx
c00196c2:	e8 e1 fb ff ff       	call   c00192a8 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00196c7:	83 c4 20             	add    esp,0x20
c00196ca:	e9 4a 03 00 00       	jmp    c0019a19 <Vm::faultHandler(regs*)+0x673>
c00196cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00196d4:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00196d8:	e9 39 03 00 00       	jmp    c0019a16 <Vm::faultHandler(regs*)+0x670>
c00196dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00196e2:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00196e6:	e9 2b 03 00 00       	jmp    c0019a16 <Vm::faultHandler(regs*)+0x670>
c00196eb:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00196ee:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00196f3:	74 2b                	je     c0019720 <Vm::faultHandler(regs*)+0x37a>
c00196f5:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00196fc:	76 22                	jbe    c0019720 <Vm::faultHandler(regs*)+0x37a>
c00196fe:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019702:	50                   	push   eax
c0019703:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019707:	50                   	push   eax
c0019708:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001970c:	50                   	push   eax
c001970d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019711:	50                   	push   eax
c0019712:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019716:	50                   	push   eax
c0019717:	6a 6c                	push   0x6c
c0019719:	6a 6c                	push   0x6c
c001971b:	e9 b9 01 00 00       	jmp    c00198d9 <Vm::faultHandler(regs*)+0x533>
c0019720:	83 ec 0c             	sub    esp,0xc
c0019723:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019727:	0f b7 f6             	movzx  esi,si
c001972a:	50                   	push   eax
c001972b:	e8 71 f8 ff ff       	call   c0018fa1 <Vm::inbv(unsigned short)>
c0019730:	83 c4 0c             	add    esp,0xc
c0019733:	0f b6 c0             	movzx  eax,al
c0019736:	50                   	push   eax
c0019737:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001973b:	50                   	push   eax
c001973c:	56                   	push   esi
c001973d:	e8 24 fc ff ff       	call   c0019366 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019742:	83 c4 10             	add    esp,0x10
c0019745:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019748:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001974c:	74 03                	je     c0019751 <Vm::faultHandler(regs*)+0x3ab>
c001974e:	48                   	dec    eax
c001974f:	eb 01                	jmp    c0019752 <Vm::faultHandler(regs*)+0x3ac>
c0019751:	40                   	inc    eax
c0019752:	0f b7 c0             	movzx  eax,ax
c0019755:	e9 8d 00 00 00       	jmp    c00197e7 <Vm::faultHandler(regs*)+0x441>
c001975a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001975d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019760:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019765:	74 29                	je     c0019790 <Vm::faultHandler(regs*)+0x3ea>
c0019767:	3d ff ff 00 00       	cmp    eax,0xffff
c001976c:	76 22                	jbe    c0019790 <Vm::faultHandler(regs*)+0x3ea>
c001976e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019772:	50                   	push   eax
c0019773:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019777:	50                   	push   eax
c0019778:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001977c:	50                   	push   eax
c001977d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019781:	50                   	push   eax
c0019782:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019786:	50                   	push   eax
c0019787:	6a 6d                	push   0x6d
c0019789:	6a 6d                	push   0x6d
c001978b:	e9 49 01 00 00       	jmp    c00198d9 <Vm::faultHandler(regs*)+0x533>
c0019790:	0f b7 c8             	movzx  ecx,ax
c0019793:	0f b7 f6             	movzx  esi,si
c0019796:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019799:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001979e:	74 20                	je     c00197c0 <Vm::faultHandler(regs*)+0x41a>
c00197a0:	ed                   	in     eax,dx
c00197a1:	55                   	push   ebp
c00197a2:	50                   	push   eax
c00197a3:	51                   	push   ecx
c00197a4:	56                   	push   esi
c00197a5:	e8 e7 fb ff ff       	call   c0019391 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00197aa:	83 c4 10             	add    esp,0x10
c00197ad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00197b0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00197b4:	74 05                	je     c00197bb <Vm::faultHandler(regs*)+0x415>
c00197b6:	83 e8 04             	sub    eax,0x4
c00197b9:	eb 27                	jmp    c00197e2 <Vm::faultHandler(regs*)+0x43c>
c00197bb:	83 c0 04             	add    eax,0x4
c00197be:	eb 22                	jmp    c00197e2 <Vm::faultHandler(regs*)+0x43c>
c00197c0:	66 ed                	in     ax,dx
c00197c2:	0f b7 c0             	movzx  eax,ax
c00197c5:	57                   	push   edi
c00197c6:	50                   	push   eax
c00197c7:	51                   	push   ecx
c00197c8:	56                   	push   esi
c00197c9:	e8 ad fb ff ff       	call   c001937b <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00197ce:	83 c4 10             	add    esp,0x10
c00197d1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00197d4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00197d8:	74 05                	je     c00197df <Vm::faultHandler(regs*)+0x439>
c00197da:	83 e8 02             	sub    eax,0x2
c00197dd:	eb 03                	jmp    c00197e2 <Vm::faultHandler(regs*)+0x43c>
c00197df:	83 c0 02             	add    eax,0x2
c00197e2:	25 ff ff 00 00       	and    eax,0xffff
c00197e7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00197ea:	e9 27 02 00 00       	jmp    c0019a16 <Vm::faultHandler(regs*)+0x670>
c00197ef:	8d 46 ff             	lea    eax,[esi-0x1]
c00197f2:	3c 05                	cmp    al,0x5
c00197f4:	77 24                	ja     c001981a <Vm::faultHandler(regs*)+0x474>
c00197f6:	0f b6 c0             	movzx  eax,al
c00197f9:	ff 24 85 74 5e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda18c]
c0019800:	0f b7 fd             	movzx  edi,bp
c0019803:	eb 15                	jmp    c001981a <Vm::faultHandler(regs*)+0x474>
c0019805:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0019809:	eb 0f                	jmp    c001981a <Vm::faultHandler(regs*)+0x474>
c001980b:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001980f:	eb 09                	jmp    c001981a <Vm::faultHandler(regs*)+0x474>
c0019811:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0019815:	eb 03                	jmp    c001981a <Vm::faultHandler(regs*)+0x474>
c0019817:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001981a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001981d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019822:	74 29                	je     c001984d <Vm::faultHandler(regs*)+0x4a7>
c0019824:	3d ff ff 00 00       	cmp    eax,0xffff
c0019829:	76 22                	jbe    c001984d <Vm::faultHandler(regs*)+0x4a7>
c001982b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001982f:	50                   	push   eax
c0019830:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019834:	50                   	push   eax
c0019835:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019839:	50                   	push   eax
c001983a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001983e:	50                   	push   eax
c001983f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019843:	50                   	push   eax
c0019844:	6a 6e                	push   0x6e
c0019846:	6a 6e                	push   0x6e
c0019848:	e9 8c 00 00 00       	jmp    c00198d9 <Vm::faultHandler(regs*)+0x533>
c001984d:	0f b7 c0             	movzx  eax,ax
c0019850:	52                   	push   edx
c0019851:	52                   	push   edx
c0019852:	50                   	push   eax
c0019853:	57                   	push   edi
c0019854:	e8 d9 fa ff ff       	call   c0019332 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019859:	59                   	pop    ecx
c001985a:	0f b6 c0             	movzx  eax,al
c001985d:	5e                   	pop    esi
c001985e:	50                   	push   eax
c001985f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019863:	50                   	push   eax
c0019864:	e8 4b f7 ff ff       	call   c0018fb4 <Vm::outbv(unsigned short, unsigned char)>
c0019869:	83 c4 10             	add    esp,0x10
c001986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001986f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019873:	74 03                	je     c0019878 <Vm::faultHandler(regs*)+0x4d2>
c0019875:	48                   	dec    eax
c0019876:	eb 01                	jmp    c0019879 <Vm::faultHandler(regs*)+0x4d3>
c0019878:	40                   	inc    eax
c0019879:	0f b7 c0             	movzx  eax,ax
c001987c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001987f:	e9 92 01 00 00       	jmp    c0019a16 <Vm::faultHandler(regs*)+0x670>
c0019884:	8d 46 ff             	lea    eax,[esi-0x1]
c0019887:	3c 05                	cmp    al,0x5
c0019889:	77 1f                	ja     c00198aa <Vm::faultHandler(regs*)+0x504>
c001988b:	0f b6 c0             	movzx  eax,al
c001988e:	ff 24 85 8c 5e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda174]
c0019895:	89 ef                	mov    edi,ebp
c0019897:	eb 11                	jmp    c00198aa <Vm::faultHandler(regs*)+0x504>
c0019899:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001989c:	eb 0c                	jmp    c00198aa <Vm::faultHandler(regs*)+0x504>
c001989e:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00198a1:	eb 07                	jmp    c00198aa <Vm::faultHandler(regs*)+0x504>
c00198a3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00198a6:	eb 02                	jmp    c00198aa <Vm::faultHandler(regs*)+0x504>
c00198a8:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00198aa:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00198ad:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00198b2:	74 37                	je     c00198eb <Vm::faultHandler(regs*)+0x545>
c00198b4:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00198ba:	76 2f                	jbe    c00198eb <Vm::faultHandler(regs*)+0x545>
c00198bc:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00198c0:	50                   	push   eax
c00198c1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00198c5:	50                   	push   eax
c00198c6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00198ca:	50                   	push   eax
c00198cb:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00198cf:	50                   	push   eax
c00198d0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00198d4:	50                   	push   eax
c00198d5:	6a 6f                	push   0x6f
c00198d7:	6a 6f                	push   0x6f
c00198d9:	68 1a 5e 02 c0       	push   0xc0025e1a
c00198de:	e8 14 34 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c00198e3:	83 c4 20             	add    esp,0x20
c00198e6:	e9 86 01 00 00       	jmp    c0019a71 <Vm::faultHandler(regs*)+0x6cb>
c00198eb:	0f b7 d7             	movzx  edx,di
c00198ee:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00198f1:	0f b7 c6             	movzx  eax,si
c00198f4:	81 e1 00 04 00 00    	and    ecx,0x400
c00198fa:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00198fd:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019902:	74 1d                	je     c0019921 <Vm::faultHandler(regs*)+0x57b>
c0019904:	55                   	push   ebp
c0019905:	55                   	push   ebp
c0019906:	50                   	push   eax
c0019907:	52                   	push   edx
c0019908:	e8 48 fa ff ff       	call   c0019355 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001990d:	83 c4 10             	add    esp,0x10
c0019910:	89 fa                	mov    edx,edi
c0019912:	ef                   	out    dx,eax
c0019913:	85 c9                	test   ecx,ecx
c0019915:	74 05                	je     c001991c <Vm::faultHandler(regs*)+0x576>
c0019917:	83 ee 04             	sub    esi,0x4
c001991a:	eb 21                	jmp    c001993d <Vm::faultHandler(regs*)+0x597>
c001991c:	83 c6 04             	add    esi,0x4
c001991f:	eb 1c                	jmp    c001993d <Vm::faultHandler(regs*)+0x597>
c0019921:	55                   	push   ebp
c0019922:	55                   	push   ebp
c0019923:	50                   	push   eax
c0019924:	52                   	push   edx
c0019925:	e8 19 fa ff ff       	call   c0019343 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001992a:	83 c4 10             	add    esp,0x10
c001992d:	89 fa                	mov    edx,edi
c001992f:	66 ef                	out    dx,ax
c0019931:	85 c9                	test   ecx,ecx
c0019933:	74 05                	je     c001993a <Vm::faultHandler(regs*)+0x594>
c0019935:	83 ee 02             	sub    esi,0x2
c0019938:	eb 03                	jmp    c001993d <Vm::faultHandler(regs*)+0x597>
c001993a:	83 c6 02             	add    esi,0x2
c001993d:	81 e6 ff ff 00 00    	and    esi,0xffff
c0019943:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0019946:	e9 cb 00 00 00       	jmp    c0019a16 <Vm::faultHandler(regs*)+0x670>
c001994b:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019952:	83 ec 0c             	sub    esp,0xc
c0019955:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019959:	50                   	push   eax
c001995a:	e8 42 f6 ff ff       	call   c0018fa1 <Vm::inbv(unsigned short)>
c001995f:	0f b6 c0             	movzx  eax,al
c0019962:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019965:	eb 3f                	jmp    c00199a6 <Vm::faultHandler(regs*)+0x600>
c0019967:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001996c:	74 07                	je     c0019975 <Vm::faultHandler(regs*)+0x5cf>
c001996e:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019972:	ed                   	in     eax,dx
c0019973:	eb 14                	jmp    c0019989 <Vm::faultHandler(regs*)+0x5e3>
c0019975:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0019978:	66 31 f6             	xor    si,si
c001997b:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001997e:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019982:	66 ed                	in     ax,dx
c0019984:	0f b7 c0             	movzx  eax,ax
c0019987:	09 f0                	or     eax,esi
c0019989:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001998c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019990:	e9 84 00 00 00       	jmp    c0019a19 <Vm::faultHandler(regs*)+0x673>
c0019995:	52                   	push   edx
c0019996:	52                   	push   edx
c0019997:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001999b:	50                   	push   eax
c001999c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00199a0:	50                   	push   eax
c00199a1:	e8 0e f6 ff ff       	call   c0018fb4 <Vm::outbv(unsigned short, unsigned char)>
c00199a6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00199aa:	eb 53                	jmp    c00199ff <Vm::faultHandler(regs*)+0x659>
c00199ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00199af:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00199b3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00199b8:	74 03                	je     c00199bd <Vm::faultHandler(regs*)+0x617>
c00199ba:	ef                   	out    dx,eax
c00199bb:	eb cf                	jmp    c001998c <Vm::faultHandler(regs*)+0x5e6>
c00199bd:	66 ef                	out    dx,ax
c00199bf:	eb cb                	jmp    c001998c <Vm::faultHandler(regs*)+0x5e6>
c00199c1:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00199c8:	83 ec 0c             	sub    esp,0xc
c00199cb:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00199cf:	50                   	push   eax
c00199d0:	e8 cc f5 ff ff       	call   c0018fa1 <Vm::inbv(unsigned short)>
c00199d5:	0f b6 c0             	movzx  eax,al
c00199d8:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00199db:	eb 1f                	jmp    c00199fc <Vm::faultHandler(regs*)+0x656>
c00199dd:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00199e0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00199e5:	74 03                	je     c00199ea <Vm::faultHandler(regs*)+0x644>
c00199e7:	ed                   	in     eax,dx
c00199e8:	eb 0d                	jmp    c00199f7 <Vm::faultHandler(regs*)+0x651>
c00199ea:	66 ed                	in     ax,dx
c00199ec:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00199ef:	0f b7 c0             	movzx  eax,ax
c00199f2:	66 31 d2             	xor    dx,dx
c00199f5:	09 d0                	or     eax,edx
c00199f7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00199fa:	eb 1a                	jmp    c0019a16 <Vm::faultHandler(regs*)+0x670>
c00199fc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199ff:	83 c4 10             	add    esp,0x10
c0019a02:	eb 15                	jmp    c0019a19 <Vm::faultHandler(regs*)+0x673>
c0019a04:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019a07:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019a0a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019a0f:	74 03                	je     c0019a14 <Vm::faultHandler(regs*)+0x66e>
c0019a11:	ef                   	out    dx,eax
c0019a12:	eb 02                	jmp    c0019a16 <Vm::faultHandler(regs*)+0x670>
c0019a14:	66 ef                	out    dx,ax
c0019a16:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019a19:	b0 01                	mov    al,0x1
c0019a1b:	eb 56                	jmp    c0019a73 <Vm::faultHandler(regs*)+0x6cd>
c0019a1d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019a21:	50                   	push   eax
c0019a22:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019a26:	50                   	push   eax
c0019a27:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019a2b:	50                   	push   eax
c0019a2c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019a30:	50                   	push   eax
c0019a31:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019a35:	50                   	push   eax
c0019a36:	52                   	push   edx
c0019a37:	52                   	push   edx
c0019a38:	68 47 5e 02 c0       	push   0xc0025e47
c0019a3d:	e8 b5 32 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0019a42:	83 c4 20             	add    esp,0x20
c0019a45:	83 ec 0c             	sub    esp,0xc
c0019a48:	6a 60                	push   0x60
c0019a4a:	e8 52 f5 ff ff       	call   c0018fa1 <Vm::inbv(unsigned short)>
c0019a4f:	83 c4 10             	add    esp,0x10
c0019a52:	3c 1c                	cmp    al,0x1c
c0019a54:	74 04                	je     c0019a5a <Vm::faultHandler(regs*)+0x6b4>
c0019a56:	3c 5a                	cmp    al,0x5a
c0019a58:	75 eb                	jne    c0019a45 <Vm::faultHandler(regs*)+0x69f>
c0019a5a:	3c 5a                	cmp    al,0x5a
c0019a5c:	74 04                	je     c0019a62 <Vm::faultHandler(regs*)+0x6bc>
c0019a5e:	3c 1c                	cmp    al,0x1c
c0019a60:	75 0f                	jne    c0019a71 <Vm::faultHandler(regs*)+0x6cb>
c0019a62:	83 ec 0c             	sub    esp,0xc
c0019a65:	6a 60                	push   0x60
c0019a67:	e8 35 f5 ff ff       	call   c0018fa1 <Vm::inbv(unsigned short)>
c0019a6c:	83 c4 10             	add    esp,0x10
c0019a6f:	eb e9                	jmp    c0019a5a <Vm::faultHandler(regs*)+0x6b4>
c0019a71:	31 c0                	xor    eax,eax
c0019a73:	83 c4 1c             	add    esp,0x1c
c0019a76:	5b                   	pop    ebx
c0019a77:	5e                   	pop    esi
c0019a78:	5f                   	pop    edi
c0019a79:	5d                   	pop    ebp
c0019a7a:	c3                   	ret    
c0019a7b:	90                   	nop

c0019a7c <Vm::fpuInternalTo32(unsigned long long)>:
c0019a7c:	57                   	push   edi
c0019a7d:	56                   	push   esi
c0019a7e:	53                   	push   ebx
c0019a7f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a87:	89 d6                	mov    esi,edx
c0019a89:	89 d7                	mov    edi,edx
c0019a8b:	89 c1                	mov    ecx,eax
c0019a8d:	c1 ef 14             	shr    edi,0x14
c0019a90:	89 d3                	mov    ebx,edx
c0019a92:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0019a98:	31 d2                	xor    edx,edx
c0019a9a:	89 f8                	mov    eax,edi
c0019a9c:	81 e6 00 00 00 80    	and    esi,0x80000000
c0019aa2:	bf ff 00 00 00       	mov    edi,0xff
c0019aa7:	05 80 fc ff ff       	add    eax,0xfffffc80
c0019aac:	83 d2 ff             	adc    edx,0xffffffff
c0019aaf:	39 c7                	cmp    edi,eax
c0019ab1:	bf 00 00 00 00       	mov    edi,0x0
c0019ab6:	19 d7                	sbb    edi,edx
c0019ab8:	72 16                	jb     c0019ad0 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c0019aba:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c0019abe:	c1 e0 17             	shl    eax,0x17
c0019ac1:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c0019ac7:	09 f1                	or     ecx,esi
c0019ac9:	09 c1                	or     ecx,eax
c0019acb:	89 cf                	mov    edi,ecx
c0019acd:	eb 05                	jmp    c0019ad4 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c0019acf:	90                   	nop
c0019ad0:	31 ff                	xor    edi,edi
c0019ad2:	66 90                	xchg   ax,ax
c0019ad4:	89 f8                	mov    eax,edi
c0019ad6:	5b                   	pop    ebx
c0019ad7:	5e                   	pop    esi
c0019ad8:	5f                   	pop    edi
c0019ad9:	c3                   	ret    

c0019ada <Vm::fpuInternalTo64(unsigned long long)>:
c0019ada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ade:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ae2:	c3                   	ret    

c0019ae3 <Vm::fpu32ToInternal(unsigned int)>:
c0019ae3:	57                   	push   edi
c0019ae4:	31 ff                	xor    edi,edi
c0019ae6:	56                   	push   esi
c0019ae7:	53                   	push   ebx
c0019ae8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019aec:	89 cb                	mov    ebx,ecx
c0019aee:	89 ce                	mov    esi,ecx
c0019af0:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0019af6:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0019afc:	c1 e9 17             	shr    ecx,0x17
c0019aff:	89 f0                	mov    eax,esi
c0019b01:	0f b6 d1             	movzx  edx,cl
c0019b04:	81 c2 80 03 00 00    	add    edx,0x380
c0019b0a:	89 d1                	mov    ecx,edx
c0019b0c:	89 fa                	mov    edx,edi
c0019b0e:	c1 e1 14             	shl    ecx,0x14
c0019b11:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0019b15:	c1 e0 1d             	shl    eax,0x1d
c0019b18:	89 d7                	mov    edi,edx
c0019b1a:	89 c6                	mov    esi,eax
c0019b1c:	89 ca                	mov    edx,ecx
c0019b1e:	89 f0                	mov    eax,esi
c0019b20:	09 fa                	or     edx,edi
c0019b22:	09 da                	or     edx,ebx
c0019b24:	5b                   	pop    ebx
c0019b25:	5e                   	pop    esi
c0019b26:	5f                   	pop    edi
c0019b27:	c3                   	ret    

c0019b28 <Vm::fpu64ToInternal(unsigned long long)>:
c0019b28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019b30:	c3                   	ret    

c0019b31 <Vm::fpuFloatToLong(unsigned long long)>:
c0019b31:	57                   	push   edi
c0019b32:	31 c0                	xor    eax,eax
c0019b34:	56                   	push   esi
c0019b35:	31 d2                	xor    edx,edx
c0019b37:	53                   	push   ebx
c0019b38:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019b3c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019b40:	89 d9                	mov    ecx,ebx
c0019b42:	c1 e9 14             	shr    ecx,0x14
c0019b45:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0019b4b:	89 cf                	mov    edi,ecx
c0019b4d:	81 ef ff 03 00 00    	sub    edi,0x3ff
c0019b53:	78 37                	js     c0019b8c <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019b55:	89 d9                	mov    ecx,ebx
c0019b57:	89 f0                	mov    eax,esi
c0019b59:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019b5f:	81 c9 00 00 10 00    	or     ecx,0x100000
c0019b65:	89 ca                	mov    edx,ecx
c0019b67:	b9 34 00 00 00       	mov    ecx,0x34
c0019b6c:	29 f9                	sub    ecx,edi
c0019b6e:	0f ad d0             	shrd   eax,edx,cl
c0019b71:	d3 fa                	sar    edx,cl
c0019b73:	f6 c1 20             	test   cl,0x20
c0019b76:	74 08                	je     c0019b80 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c0019b78:	89 d0                	mov    eax,edx
c0019b7a:	c1 fa 1f             	sar    edx,0x1f
c0019b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0019b80:	85 db                	test   ebx,ebx
c0019b82:	79 08                	jns    c0019b8c <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019b84:	f7 d8                	neg    eax
c0019b86:	83 d2 00             	adc    edx,0x0
c0019b89:	f7 da                	neg    edx
c0019b8b:	90                   	nop
c0019b8c:	5b                   	pop    ebx
c0019b8d:	5e                   	pop    esi
c0019b8e:	5f                   	pop    edi
c0019b8f:	c3                   	ret    

c0019b90 <Vm::fpuULongToFloat(unsigned long long)>:
c0019b90:	57                   	push   edi
c0019b91:	31 c9                	xor    ecx,ecx
c0019b93:	56                   	push   esi
c0019b94:	53                   	push   ebx
c0019b95:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019b99:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019b9d:	8d 76 00             	lea    esi,[esi+0x0]
c0019ba0:	0f ba e7 14          	bt     edi,0x14
c0019ba4:	72 0a                	jb     c0019bb0 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c0019ba6:	01 f6                	add    esi,esi
c0019ba8:	11 ff                	adc    edi,edi
c0019baa:	41                   	inc    ecx
c0019bab:	eb f3                	jmp    c0019ba0 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0019bad:	8d 76 00             	lea    esi,[esi+0x0]
c0019bb0:	89 fa                	mov    edx,edi
c0019bb2:	89 f0                	mov    eax,esi
c0019bb4:	bb 33 04 00 00       	mov    ebx,0x433
c0019bb9:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0019bbf:	29 cb                	sub    ebx,ecx
c0019bc1:	89 d9                	mov    ecx,ebx
c0019bc3:	5b                   	pop    ebx
c0019bc4:	c1 e1 14             	shl    ecx,0x14
c0019bc7:	5e                   	pop    esi
c0019bc8:	09 ca                	or     edx,ecx
c0019bca:	5f                   	pop    edi
c0019bcb:	c3                   	ret    

c0019bcc <Vm::fpuLongToFloat(long long)>:
c0019bcc:	56                   	push   esi
c0019bcd:	31 c0                	xor    eax,eax
c0019bcf:	53                   	push   ebx
c0019bd0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019bd4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019bd8:	39 c8                	cmp    eax,ecx
c0019bda:	19 d8                	sbb    eax,ebx
c0019bdc:	7d 06                	jge    c0019be4 <Vm::fpuLongToFloat(long long)+0x18>
c0019bde:	31 f6                	xor    esi,esi
c0019be0:	eb 0e                	jmp    c0019bf0 <Vm::fpuLongToFloat(long long)+0x24>
c0019be2:	66 90                	xchg   ax,ax
c0019be4:	f7 d9                	neg    ecx
c0019be6:	be 01 00 00 00       	mov    esi,0x1
c0019beb:	83 d3 00             	adc    ebx,0x0
c0019bee:	f7 db                	neg    ebx
c0019bf0:	31 c0                	xor    eax,eax
c0019bf2:	66 90                	xchg   ax,ax
c0019bf4:	0f ba e3 14          	bt     ebx,0x14
c0019bf8:	72 0a                	jb     c0019c04 <Vm::fpuLongToFloat(long long)+0x38>
c0019bfa:	01 c9                	add    ecx,ecx
c0019bfc:	11 db                	adc    ebx,ebx
c0019bfe:	40                   	inc    eax
c0019bff:	eb f3                	jmp    c0019bf4 <Vm::fpuLongToFloat(long long)+0x28>
c0019c01:	8d 76 00             	lea    esi,[esi+0x0]
c0019c04:	ba 33 04 00 00       	mov    edx,0x433
c0019c09:	29 c2                	sub    edx,eax
c0019c0b:	89 c8                	mov    eax,ecx
c0019c0d:	c1 e2 14             	shl    edx,0x14
c0019c10:	89 d9                	mov    ecx,ebx
c0019c12:	89 f3                	mov    ebx,esi
c0019c14:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019c1a:	09 ca                	or     edx,ecx
c0019c1c:	84 db                	test   bl,bl
c0019c1e:	74 08                	je     c0019c28 <Vm::fpuLongToFloat(long long)+0x5c>
c0019c20:	81 ca 00 00 00 80    	or     edx,0x80000000
c0019c26:	66 90                	xchg   ax,ax
c0019c28:	5b                   	pop    ebx
c0019c29:	5e                   	pop    esi
c0019c2a:	c3                   	ret    

c0019c2b <Vm::fpuGet0()>:
c0019c2b:	31 c0                	xor    eax,eax
c0019c2d:	31 d2                	xor    edx,edx
c0019c2f:	c3                   	ret    

c0019c30 <Vm::fpuGet1()>:
c0019c30:	b8 01 00 00 00       	mov    eax,0x1
c0019c35:	31 d2                	xor    edx,edx
c0019c37:	c3                   	ret    

c0019c38 <Vm::fpuGetPi()>:
c0019c38:	b8 03 00 00 00       	mov    eax,0x3
c0019c3d:	31 d2                	xor    edx,edx
c0019c3f:	c3                   	ret    

c0019c40 <Vm::fpuGetLog2E()>:
c0019c40:	83 ec 18             	sub    esp,0x18
c0019c43:	68 a4 5e 02 c0       	push   0xc0025ea4
c0019c48:	e8 56 ac ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0019c4d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019c52:	31 d2                	xor    edx,edx
c0019c54:	83 c4 1c             	add    esp,0x1c
c0019c57:	c3                   	ret    

c0019c58 <Vm::fpuGetLogE2()>:
c0019c58:	83 ec 18             	sub    esp,0x18
c0019c5b:	68 b0 5e 02 c0       	push   0xc0025eb0
c0019c60:	e8 3e ac ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0019c65:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019c6a:	31 d2                	xor    edx,edx
c0019c6c:	83 c4 1c             	add    esp,0x1c
c0019c6f:	c3                   	ret    

c0019c70 <Vm::fpuGetLog210()>:
c0019c70:	83 ec 18             	sub    esp,0x18
c0019c73:	68 bc 5e 02 c0       	push   0xc0025ebc
c0019c78:	e8 26 ac ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0019c7d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019c82:	31 d2                	xor    edx,edx
c0019c84:	83 c4 1c             	add    esp,0x1c
c0019c87:	c3                   	ret    

c0019c88 <Vm::fpuGetLog102()>:
c0019c88:	83 ec 18             	sub    esp,0x18
c0019c8b:	68 c9 5e 02 c0       	push   0xc0025ec9
c0019c90:	e8 0e ac ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0019c95:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019c9a:	31 d2                	xor    edx,edx
c0019c9c:	83 c4 1c             	add    esp,0x1c
c0019c9f:	c3                   	ret    

c0019ca0 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0019ca0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ca4:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019ca8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cac:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0019cb0:	0f 92 c0             	setb   al
c0019cb3:	c3                   	ret    

c0019cb4 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0019cb4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cbc:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0019cc0:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0019cc4:	09 c2                	or     edx,eax
c0019cc6:	0f 94 c0             	sete   al
c0019cc9:	c3                   	ret    

c0019cca <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0019cca:	57                   	push   edi
c0019ccb:	56                   	push   esi
c0019ccc:	53                   	push   ebx
c0019ccd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019cd1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019cd5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019cd9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019cdd:	57                   	push   edi
c0019cde:	56                   	push   esi
c0019cdf:	53                   	push   ebx
c0019ce0:	51                   	push   ecx
c0019ce1:	e8 ce ff ff ff       	call   c0019cb4 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c0019ce6:	83 c4 10             	add    esp,0x10
c0019ce9:	88 c2                	mov    dl,al
c0019ceb:	31 c0                	xor    eax,eax
c0019ced:	84 d2                	test   dl,dl
c0019cef:	75 0f                	jne    c0019d00 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c0019cf1:	57                   	push   edi
c0019cf2:	56                   	push   esi
c0019cf3:	53                   	push   ebx
c0019cf4:	51                   	push   ecx
c0019cf5:	e8 a6 ff ff ff       	call   c0019ca0 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0019cfa:	83 c4 10             	add    esp,0x10
c0019cfd:	8d 76 00             	lea    esi,[esi+0x0]
c0019d00:	83 e0 01             	and    eax,0x1
c0019d03:	5b                   	pop    ebx
c0019d04:	88 c1                	mov    cl,al
c0019d06:	83 e2 01             	and    edx,0x1
c0019d09:	a0 a1 90 02 c0       	mov    al,ds:0xc00290a1
c0019d0e:	c1 e2 06             	shl    edx,0x6
c0019d11:	83 e0 ba             	and    eax,0xffffffba
c0019d14:	5e                   	pop    esi
c0019d15:	09 c8                	or     eax,ecx
c0019d17:	5f                   	pop    edi
c0019d18:	09 d0                	or     eax,edx
c0019d1a:	a2 a1 90 02 c0       	mov    ds:0xc00290a1,al
c0019d1f:	c3                   	ret    

c0019d20 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0019d20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d24:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019d28:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0019d2c:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0019d30:	c3                   	ret    

c0019d31 <Vm::fpuAbs(unsigned long long)>:
c0019d31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019d39:	c3                   	ret    

c0019d3a <Vm::fpuChs(unsigned long long)>:
c0019d3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d3e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019d42:	f7 d8                	neg    eax
c0019d44:	83 d2 00             	adc    edx,0x0
c0019d47:	f7 da                	neg    edx
c0019d49:	c3                   	ret    

c0019d4a <Vm::fpuSub(unsigned long long, unsigned long long)>:
c0019d4a:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c0019d4e:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c0019d53:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c0019d57:	eb c7                	jmp    c0019d20 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c0019d59 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c0019d59:	53                   	push   ebx
c0019d5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d5e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019d62:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019d66:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019d6a:	0f af ca             	imul   ecx,edx
c0019d6d:	0f af d8             	imul   ebx,eax
c0019d70:	f7 e2                	mul    edx
c0019d72:	01 d9                	add    ecx,ebx
c0019d74:	5b                   	pop    ebx
c0019d75:	01 ca                	add    edx,ecx
c0019d77:	c3                   	ret    

c0019d78 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c0019d78:	83 ec 0c             	sub    esp,0xc
c0019d7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d8b:	e8 84 86 00 00       	call   c0022414 <__udivdi3>
c0019d90:	83 c4 1c             	add    esp,0x1c
c0019d93:	c3                   	ret    

c0019d94 <Vm::fpuSquare(unsigned long long)>:
c0019d94:	50                   	push   eax
c0019d95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019d9d:	52                   	push   edx
c0019d9e:	50                   	push   eax
c0019d9f:	52                   	push   edx
c0019da0:	50                   	push   eax
c0019da1:	e8 b3 ff ff ff       	call   c0019d59 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019da6:	83 c4 14             	add    esp,0x14
c0019da9:	c3                   	ret    

c0019daa <Vm::fpuGetReg(int)>:
c0019daa:	83 ec 0c             	sub    esp,0xc
c0019dad:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019db2:	76 10                	jbe    c0019dc4 <Vm::fpuGetReg(int)+0x1a>
c0019db4:	83 ec 0c             	sub    esp,0xc
c0019db7:	68 d6 5e 02 c0       	push   0xc0025ed6
c0019dbc:	e8 e2 aa ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0019dc1:	83 c4 10             	add    esp,0x10
c0019dc4:	a0 a1 90 02 c0       	mov    al,ds:0xc00290a1
c0019dc9:	b9 08 00 00 00       	mov    ecx,0x8
c0019dce:	c0 e8 03             	shr    al,0x3
c0019dd1:	83 e0 07             	and    eax,0x7
c0019dd4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019dd8:	99                   	cdq    
c0019dd9:	f7 f9                	idiv   ecx
c0019ddb:	8b 04 d5 a4 90 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd6f5c]
c0019de2:	8b 14 d5 a8 90 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd6f58]
c0019de9:	83 c4 0c             	add    esp,0xc
c0019dec:	c3                   	ret    

c0019ded <Vm::fpuSetReg(int, unsigned long long)>:
c0019ded:	57                   	push   edi
c0019dee:	56                   	push   esi
c0019def:	52                   	push   edx
c0019df0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019df4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019df8:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019dfd:	76 11                	jbe    c0019e10 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c0019dff:	83 ec 0c             	sub    esp,0xc
c0019e02:	68 e9 5e 02 c0       	push   0xc0025ee9
c0019e07:	e8 97 aa ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0019e0c:	83 c4 10             	add    esp,0x10
c0019e0f:	90                   	nop
c0019e10:	a0 a1 90 02 c0       	mov    al,ds:0xc00290a1
c0019e15:	b9 08 00 00 00       	mov    ecx,0x8
c0019e1a:	c0 e8 03             	shr    al,0x3
c0019e1d:	83 e0 07             	and    eax,0x7
c0019e20:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019e24:	99                   	cdq    
c0019e25:	f7 f9                	idiv   ecx
c0019e27:	89 34 d5 a4 90 02 c0 	mov    DWORD PTR [edx*8-0x3ffd6f5c],esi
c0019e2e:	89 3c d5 a8 90 02 c0 	mov    DWORD PTR [edx*8-0x3ffd6f58],edi
c0019e35:	58                   	pop    eax
c0019e36:	5e                   	pop    esi
c0019e37:	5f                   	pop    edi
c0019e38:	c3                   	ret    

c0019e39 <Vm::fpuPush(unsigned long long)>:
c0019e39:	a0 a1 90 02 c0       	mov    al,ds:0xc00290a1
c0019e3e:	c0 e8 03             	shr    al,0x3
c0019e41:	83 e0 07             	and    eax,0x7
c0019e44:	83 c0 07             	add    eax,0x7
c0019e47:	88 c2                	mov    dl,al
c0019e49:	83 e0 07             	and    eax,0x7
c0019e4c:	83 e2 07             	and    edx,0x7
c0019e4f:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c0019e56:	8a 15 a1 90 02 c0    	mov    dl,BYTE PTR ds:0xc00290a1
c0019e5c:	83 e2 c7             	and    edx,0xffffffc7
c0019e5f:	09 ca                	or     edx,ecx
c0019e61:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019e65:	88 15 a1 90 02 c0    	mov    BYTE PTR ds:0xc00290a1,dl
c0019e6b:	89 0c c5 a8 90 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6f58],ecx
c0019e72:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019e76:	89 14 c5 a4 90 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6f5c],edx
c0019e7d:	a1 e4 90 02 c0       	mov    eax,ds:0xc00290e4
c0019e82:	83 f8 08             	cmp    eax,0x8
c0019e85:	75 09                	jne    c0019e90 <Vm::fpuPush(unsigned long long)+0x57>
c0019e87:	80 0d a0 90 02 c0 40 	or     BYTE PTR ds:0xc00290a0,0x40
c0019e8e:	c3                   	ret    
c0019e8f:	90                   	nop
c0019e90:	40                   	inc    eax
c0019e91:	a3 e4 90 02 c0       	mov    ds:0xc00290e4,eax
c0019e96:	c3                   	ret    

c0019e97 <Vm::fpuPop()>:
c0019e97:	8a 0d a1 90 02 c0    	mov    cl,BYTE PTR ds:0xc00290a1
c0019e9d:	53                   	push   ebx
c0019e9e:	c0 e9 03             	shr    cl,0x3
c0019ea1:	8a 1d a1 90 02 c0    	mov    bl,BYTE PTR ds:0xc00290a1
c0019ea7:	83 e1 07             	and    ecx,0x7
c0019eaa:	83 e3 c7             	and    ebx,0xffffffc7
c0019ead:	8b 04 cd a4 90 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd6f5c]
c0019eb4:	8b 14 cd a8 90 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd6f58]
c0019ebb:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c0019ec2:	83 e1 38             	and    ecx,0x38
c0019ec5:	09 d9                	or     ecx,ebx
c0019ec7:	88 0d a1 90 02 c0    	mov    BYTE PTR ds:0xc00290a1,cl
c0019ecd:	8b 0d e4 90 02 c0    	mov    ecx,DWORD PTR ds:0xc00290e4
c0019ed3:	85 c9                	test   ecx,ecx
c0019ed5:	74 09                	je     c0019ee0 <Vm::fpuPop()+0x49>
c0019ed7:	49                   	dec    ecx
c0019ed8:	89 0d e4 90 02 c0    	mov    DWORD PTR ds:0xc00290e4,ecx
c0019ede:	eb 08                	jmp    c0019ee8 <Vm::fpuPop()+0x51>
c0019ee0:	80 0d a0 90 02 c0 40 	or     BYTE PTR ds:0xc00290a0,0x40
c0019ee7:	90                   	nop
c0019ee8:	5b                   	pop    ebx
c0019ee9:	c3                   	ret    

c0019eea <Vm::x87Handler(regs*)>:
c0019eea:	55                   	push   ebp
c0019eeb:	57                   	push   edi
c0019eec:	56                   	push   esi
c0019eed:	53                   	push   ebx
c0019eee:	83 ec 1c             	sub    esp,0x1c
c0019ef1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019ef5:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c0019efa:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0019efd:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0019f05:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0019f09:	50                   	push   eax
c0019f0a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0019f0e:	50                   	push   eax
c0019f0f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f13:	50                   	push   eax
c0019f14:	53                   	push   ebx
c0019f15:	e8 a2 a0 ff ff       	call   c0013fbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0019f1a:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0019f1d:	83 c4 10             	add    esp,0x10
c0019f20:	89 c6                	mov    esi,eax
c0019f22:	80 fa d9             	cmp    dl,0xd9
c0019f25:	0f 85 79 01 00 00    	jne    c001a0a4 <Vm::x87Handler(regs*)+0x1ba>
c0019f2b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f2f:	8d 50 20             	lea    edx,[eax+0x20]
c0019f32:	80 fa 0e             	cmp    dl,0xe
c0019f35:	0f 87 a5 00 00 00    	ja     c0019fe0 <Vm::x87Handler(regs*)+0xf6>
c0019f3b:	0f b6 d2             	movzx  edx,dl
c0019f3e:	ff 24 95 fc 5e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffda104]
c0019f45:	8d 76 00             	lea    esi,[esi+0x0]
c0019f48:	e8 de fc ff ff       	call   c0019c2b <Vm::fpuGet0()>
c0019f4d:	eb 09                	jmp    c0019f58 <Vm::x87Handler(regs*)+0x6e>
c0019f4f:	90                   	nop
c0019f50:	e8 db fc ff ff       	call   c0019c30 <Vm::fpuGet1()>
c0019f55:	8d 76 00             	lea    esi,[esi+0x0]
c0019f58:	57                   	push   edi
c0019f59:	57                   	push   edi
c0019f5a:	66 90                	xchg   ax,ax
c0019f5c:	52                   	push   edx
c0019f5d:	50                   	push   eax
c0019f5e:	e8 d6 fe ff ff       	call   c0019e39 <Vm::fpuPush(unsigned long long)>
c0019f63:	90                   	nop
c0019f64:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019f68:	83 c4 10             	add    esp,0x10
c0019f6b:	90                   	nop
c0019f6c:	b0 01                	mov    al,0x1
c0019f6e:	e9 89 0a 00 00       	jmp    c001a9fc <Vm::x87Handler(regs*)+0xb12>
c0019f73:	90                   	nop
c0019f74:	83 ec 0c             	sub    esp,0xc
c0019f77:	6a 00                	push   0x0
c0019f79:	e8 2c fe ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c0019f7e:	59                   	pop    ecx
c0019f7f:	5e                   	pop    esi
c0019f80:	52                   	push   edx
c0019f81:	50                   	push   eax
c0019f82:	e8 b3 fd ff ff       	call   c0019d3a <Vm::fpuChs(unsigned long long)>
c0019f87:	eb 17                	jmp    c0019fa0 <Vm::x87Handler(regs*)+0xb6>
c0019f89:	8d 76 00             	lea    esi,[esi+0x0]
c0019f8c:	83 ec 0c             	sub    esp,0xc
c0019f8f:	6a 00                	push   0x0
c0019f91:	e8 14 fe ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c0019f96:	5f                   	pop    edi
c0019f97:	5d                   	pop    ebp
c0019f98:	52                   	push   edx
c0019f99:	50                   	push   eax
c0019f9a:	e8 92 fd ff ff       	call   c0019d31 <Vm::fpuAbs(unsigned long long)>
c0019f9f:	90                   	nop
c0019fa0:	83 c4 0c             	add    esp,0xc
c0019fa3:	90                   	nop
c0019fa4:	52                   	push   edx
c0019fa5:	50                   	push   eax
c0019fa6:	66 90                	xchg   ax,ax
c0019fa8:	6a 00                	push   0x0
c0019faa:	66 90                	xchg   ax,ax
c0019fac:	e8 3c fe ff ff       	call   c0019ded <Vm::fpuSetReg(int, unsigned long long)>
c0019fb1:	eb b1                	jmp    c0019f64 <Vm::x87Handler(regs*)+0x7a>
c0019fb3:	90                   	nop
c0019fb4:	e8 b7 fc ff ff       	call   c0019c70 <Vm::fpuGetLog210()>
c0019fb9:	eb 9d                	jmp    c0019f58 <Vm::x87Handler(regs*)+0x6e>
c0019fbb:	90                   	nop
c0019fbc:	e8 7f fc ff ff       	call   c0019c40 <Vm::fpuGetLog2E()>
c0019fc1:	eb 95                	jmp    c0019f58 <Vm::x87Handler(regs*)+0x6e>
c0019fc3:	90                   	nop
c0019fc4:	e8 6f fc ff ff       	call   c0019c38 <Vm::fpuGetPi()>
c0019fc9:	eb 8d                	jmp    c0019f58 <Vm::x87Handler(regs*)+0x6e>
c0019fcb:	90                   	nop
c0019fcc:	e8 b7 fc ff ff       	call   c0019c88 <Vm::fpuGetLog102()>
c0019fd1:	eb 85                	jmp    c0019f58 <Vm::x87Handler(regs*)+0x6e>
c0019fd3:	90                   	nop
c0019fd4:	e8 7f fc ff ff       	call   c0019c58 <Vm::fpuGetLogE2()>
c0019fd9:	e9 7a ff ff ff       	jmp    c0019f58 <Vm::x87Handler(regs*)+0x6e>
c0019fde:	66 90                	xchg   ax,ax
c0019fe0:	8d 50 40             	lea    edx,[eax+0x40]
c0019fe3:	80 fa 07             	cmp    dl,0x7
c0019fe6:	77 18                	ja     c001a000 <Vm::x87Handler(regs*)+0x116>
c0019fe8:	83 ec 0c             	sub    esp,0xc
c0019feb:	2d c0 00 00 00       	sub    eax,0xc0
c0019ff0:	50                   	push   eax
c0019ff1:	e8 b4 fd ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c0019ff6:	59                   	pop    ecx
c0019ff7:	5e                   	pop    esi
c0019ff8:	e9 5f ff ff ff       	jmp    c0019f5c <Vm::x87Handler(regs*)+0x72>
c0019ffd:	8d 76 00             	lea    esi,[esi+0x0]
c001a000:	8d 50 38             	lea    edx,[eax+0x38]
c001a003:	80 fa 07             	cmp    dl,0x7
c001a006:	77 3c                	ja     c001a044 <Vm::x87Handler(regs*)+0x15a>
c001a008:	83 ec 0c             	sub    esp,0xc
c001a00b:	2d c8 00 00 00       	sub    eax,0xc8
c001a010:	50                   	push   eax
c001a011:	e8 94 fd ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a016:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a01d:	89 c6                	mov    esi,eax
c001a01f:	89 d7                	mov    edi,edx
c001a021:	e8 84 fd ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a026:	83 c4 0c             	add    esp,0xc
c001a029:	52                   	push   edx
c001a02a:	50                   	push   eax
c001a02b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a02f:	2d c8 00 00 00       	sub    eax,0xc8
c001a034:	50                   	push   eax
c001a035:	e8 b3 fd ff ff       	call   c0019ded <Vm::fpuSetReg(int, unsigned long long)>
c001a03a:	83 c4 0c             	add    esp,0xc
c001a03d:	57                   	push   edi
c001a03e:	56                   	push   esi
c001a03f:	e9 64 ff ff ff       	jmp    c0019fa8 <Vm::x87Handler(regs*)+0xbe>
c001a044:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a048:	84 d2                	test   dl,dl
c001a04a:	75 10                	jne    c001a05c <Vm::x87Handler(regs*)+0x172>
c001a04c:	83 ec 0c             	sub    esp,0xc
c001a04f:	ff 36                	push   DWORD PTR [esi]
c001a051:	e8 8d fa ff ff       	call   c0019ae3 <Vm::fpu32ToInternal(unsigned int)>
c001a056:	e9 c9 00 00 00       	jmp    c001a124 <Vm::x87Handler(regs*)+0x23a>
c001a05b:	90                   	nop
c001a05c:	80 fa 03             	cmp    dl,0x3
c001a05f:	75 13                	jne    c001a074 <Vm::x87Handler(regs*)+0x18a>
c001a061:	e8 31 fe ff ff       	call   c0019e97 <Vm::fpuPop()>
c001a066:	55                   	push   ebp
c001a067:	55                   	push   ebp
c001a068:	52                   	push   edx
c001a069:	50                   	push   eax
c001a06a:	e8 0d fa ff ff       	call   c0019a7c <Vm::fpuInternalTo32(unsigned long long)>
c001a06f:	e9 90 00 00 00       	jmp    c001a104 <Vm::x87Handler(regs*)+0x21a>
c001a074:	80 fa 05             	cmp    dl,0x5
c001a077:	75 0f                	jne    c001a088 <Vm::x87Handler(regs*)+0x19e>
c001a079:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a07c:	66 a3 a2 90 02 c0    	mov    ds:0xc00290a2,ax
c001a082:	e9 ed 00 00 00       	jmp    c001a174 <Vm::x87Handler(regs*)+0x28a>
c001a087:	90                   	nop
c001a088:	31 c0                	xor    eax,eax
c001a08a:	80 fa 07             	cmp    dl,0x7
c001a08d:	0f 85 69 09 00 00    	jne    c001a9fc <Vm::x87Handler(regs*)+0xb12>
c001a093:	66 a1 a2 90 02 c0    	mov    ax,ds:0xc00290a2
c001a099:	66 89 06             	mov    WORD PTR [esi],ax
c001a09c:	e9 d3 00 00 00       	jmp    c001a174 <Vm::x87Handler(regs*)+0x28a>
c001a0a1:	8d 76 00             	lea    esi,[esi+0x0]
c001a0a4:	80 fa d8             	cmp    dl,0xd8
c001a0a7:	0f 84 d3 00 00 00    	je     c001a180 <Vm::x87Handler(regs*)+0x296>
c001a0ad:	80 fa dc             	cmp    dl,0xdc
c001a0b0:	0f 84 2a 02 00 00    	je     c001a2e0 <Vm::x87Handler(regs*)+0x3f6>
c001a0b6:	80 fa de             	cmp    dl,0xde
c001a0b9:	0f 84 f1 02 00 00    	je     c001a3b0 <Vm::x87Handler(regs*)+0x4c6>
c001a0bf:	80 fa dd             	cmp    dl,0xdd
c001a0c2:	0f 84 94 04 00 00    	je     c001a55c <Vm::x87Handler(regs*)+0x672>
c001a0c8:	80 fa da             	cmp    dl,0xda
c001a0cb:	0f 84 5f 05 00 00    	je     c001a630 <Vm::x87Handler(regs*)+0x746>
c001a0d1:	80 fa df             	cmp    dl,0xdf
c001a0d4:	0f 84 aa 05 00 00    	je     c001a684 <Vm::x87Handler(regs*)+0x79a>
c001a0da:	31 c0                	xor    eax,eax
c001a0dc:	80 fa db             	cmp    dl,0xdb
c001a0df:	0f 85 17 09 00 00    	jne    c001a9fc <Vm::x87Handler(regs*)+0xb12>
c001a0e5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a0e9:	80 fa 03             	cmp    dl,0x3
c001a0ec:	0f 85 c2 06 00 00    	jne    c001a7b4 <Vm::x87Handler(regs*)+0x8ca>
c001a0f2:	e8 a0 fd ff ff       	call   c0019e97 <Vm::fpuPop()>
c001a0f7:	55                   	push   ebp
c001a0f8:	55                   	push   ebp
c001a0f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a0fc:	52                   	push   edx
c001a0fd:	50                   	push   eax
c001a0fe:	e8 2e fa ff ff       	call   c0019b31 <Vm::fpuFloatToLong(unsigned long long)>
c001a103:	90                   	nop
c001a104:	83 c4 10             	add    esp,0x10
c001a107:	89 06                	mov    DWORD PTR [esi],eax
c001a109:	eb 69                	jmp    c001a174 <Vm::x87Handler(regs*)+0x28a>
c001a10b:	90                   	nop
c001a10c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a110:	84 d2                	test   dl,dl
c001a112:	0f 85 2c 06 00 00    	jne    c001a744 <Vm::x87Handler(regs*)+0x85a>
c001a118:	57                   	push   edi
c001a119:	57                   	push   edi
c001a11a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a11d:	ff 36                	push   DWORD PTR [esi]
c001a11f:	e8 04 fa ff ff       	call   c0019b28 <Vm::fpu64ToInternal(unsigned long long)>
c001a124:	5e                   	pop    esi
c001a125:	5f                   	pop    edi
c001a126:	52                   	push   edx
c001a127:	50                   	push   eax
c001a128:	e8 0c fd ff ff       	call   c0019e39 <Vm::fpuPush(unsigned long long)>
c001a12d:	8d 76 00             	lea    esi,[esi+0x0]
c001a130:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a134:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a137:	e9 2c fe ff ff       	jmp    c0019f68 <Vm::x87Handler(regs*)+0x7e>
c001a13c:	80 fa 03             	cmp    dl,0x3
c001a13f:	0f 85 2b 07 00 00    	jne    c001a870 <Vm::x87Handler(regs*)+0x986>
c001a145:	57                   	push   edi
c001a146:	57                   	push   edi
c001a147:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a14a:	ff 36                	push   DWORD PTR [esi]
c001a14c:	e8 d7 f9 ff ff       	call   c0019b28 <Vm::fpu64ToInternal(unsigned long long)>
c001a151:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a158:	89 c6                	mov    esi,eax
c001a15a:	89 d7                	mov    edi,edx
c001a15c:	e8 49 fc ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a161:	57                   	push   edi
c001a162:	56                   	push   esi
c001a163:	52                   	push   edx
c001a164:	50                   	push   eax
c001a165:	e8 60 fb ff ff       	call   c0019cca <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a16a:	83 c4 20             	add    esp,0x20
c001a16d:	e8 25 fd ff ff       	call   c0019e97 <Vm::fpuPop()>
c001a172:	66 90                	xchg   ax,ax
c001a174:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a178:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a17b:	e9 ec fd ff ff       	jmp    c0019f6c <Vm::x87Handler(regs*)+0x82>
c001a180:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a184:	8d 50 40             	lea    edx,[eax+0x40]
c001a187:	80 fa 07             	cmp    dl,0x7
c001a18a:	77 2c                	ja     c001a1b8 <Vm::x87Handler(regs*)+0x2ce>
c001a18c:	83 ec 0c             	sub    esp,0xc
c001a18f:	2d c0 00 00 00       	sub    eax,0xc0
c001a194:	50                   	push   eax
c001a195:	e8 10 fc ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a19a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a1a1:	89 c6                	mov    esi,eax
c001a1a3:	89 d7                	mov    edi,edx
c001a1a5:	e8 00 fc ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a1aa:	57                   	push   edi
c001a1ab:	56                   	push   esi
c001a1ac:	52                   	push   edx
c001a1ad:	50                   	push   eax
c001a1ae:	e8 6d fb ff ff       	call   c0019d20 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a1b3:	eb 33                	jmp    c001a1e8 <Vm::x87Handler(regs*)+0x2fe>
c001a1b5:	8d 76 00             	lea    esi,[esi+0x0]
c001a1b8:	8d 50 38             	lea    edx,[eax+0x38]
c001a1bb:	80 fa 07             	cmp    dl,0x7
c001a1be:	77 30                	ja     c001a1f0 <Vm::x87Handler(regs*)+0x306>
c001a1c0:	83 ec 0c             	sub    esp,0xc
c001a1c3:	2d c8 00 00 00       	sub    eax,0xc8
c001a1c8:	50                   	push   eax
c001a1c9:	e8 dc fb ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a1ce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a1d5:	89 c6                	mov    esi,eax
c001a1d7:	89 d7                	mov    edi,edx
c001a1d9:	e8 cc fb ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a1de:	57                   	push   edi
c001a1df:	56                   	push   esi
c001a1e0:	52                   	push   edx
c001a1e1:	50                   	push   eax
c001a1e2:	e8 72 fb ff ff       	call   c0019d59 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a1e7:	90                   	nop
c001a1e8:	83 c4 1c             	add    esp,0x1c
c001a1eb:	e9 b4 fd ff ff       	jmp    c0019fa4 <Vm::x87Handler(regs*)+0xba>
c001a1f0:	8d 50 30             	lea    edx,[eax+0x30]
c001a1f3:	80 fa 07             	cmp    dl,0x7
c001a1f6:	77 10                	ja     c001a208 <Vm::x87Handler(regs*)+0x31e>
c001a1f8:	83 ec 0c             	sub    esp,0xc
c001a1fb:	2d d0 00 00 00       	sub    eax,0xd0
c001a200:	e9 c3 03 00 00       	jmp    c001a5c8 <Vm::x87Handler(regs*)+0x6de>
c001a205:	8d 76 00             	lea    esi,[esi+0x0]
c001a208:	8d 50 28             	lea    edx,[eax+0x28]
c001a20b:	80 fa 07             	cmp    dl,0x7
c001a20e:	77 10                	ja     c001a220 <Vm::x87Handler(regs*)+0x336>
c001a210:	83 ec 0c             	sub    esp,0xc
c001a213:	2d d8 00 00 00       	sub    eax,0xd8
c001a218:	e9 e7 03 00 00       	jmp    c001a604 <Vm::x87Handler(regs*)+0x71a>
c001a21d:	8d 76 00             	lea    esi,[esi+0x0]
c001a220:	8d 50 20             	lea    edx,[eax+0x20]
c001a223:	80 fa 07             	cmp    dl,0x7
c001a226:	77 1c                	ja     c001a244 <Vm::x87Handler(regs*)+0x35a>
c001a228:	83 ec 0c             	sub    esp,0xc
c001a22b:	2d e0 00 00 00       	sub    eax,0xe0
c001a230:	50                   	push   eax
c001a231:	e8 74 fb ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a236:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a23d:	89 c6                	mov    esi,eax
c001a23f:	89 d7                	mov    edi,edx
c001a241:	eb 25                	jmp    c001a268 <Vm::x87Handler(regs*)+0x37e>
c001a243:	90                   	nop
c001a244:	8d 50 18             	lea    edx,[eax+0x18]
c001a247:	80 fa 07             	cmp    dl,0x7
c001a24a:	77 30                	ja     c001a27c <Vm::x87Handler(regs*)+0x392>
c001a24c:	83 ec 0c             	sub    esp,0xc
c001a24f:	6a 00                	push   0x0
c001a251:	e8 54 fb ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a256:	89 c6                	mov    esi,eax
c001a258:	89 d7                	mov    edi,edx
c001a25a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a25e:	2d e8 00 00 00       	sub    eax,0xe8
c001a263:	89 04 24             	mov    DWORD PTR [esp],eax
c001a266:	66 90                	xchg   ax,ax
c001a268:	e8 3d fb ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a26d:	57                   	push   edi
c001a26e:	56                   	push   esi
c001a26f:	52                   	push   edx
c001a270:	50                   	push   eax
c001a271:	e8 d4 fa ff ff       	call   c0019d4a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a276:	e9 6d ff ff ff       	jmp    c001a1e8 <Vm::x87Handler(regs*)+0x2fe>
c001a27b:	90                   	nop
c001a27c:	8d 50 10             	lea    edx,[eax+0x10]
c001a27f:	80 fa 07             	cmp    dl,0x7
c001a282:	77 1c                	ja     c001a2a0 <Vm::x87Handler(regs*)+0x3b6>
c001a284:	83 ec 0c             	sub    esp,0xc
c001a287:	2d f0 00 00 00       	sub    eax,0xf0
c001a28c:	50                   	push   eax
c001a28d:	e8 18 fb ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a292:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a299:	89 c6                	mov    esi,eax
c001a29b:	89 d7                	mov    edi,edx
c001a29d:	eb 25                	jmp    c001a2c4 <Vm::x87Handler(regs*)+0x3da>
c001a29f:	90                   	nop
c001a2a0:	3c f7                	cmp    al,0xf7
c001a2a2:	0f 86 00 04 00 00    	jbe    c001a6a8 <Vm::x87Handler(regs*)+0x7be>
c001a2a8:	83 ec 0c             	sub    esp,0xc
c001a2ab:	6a 00                	push   0x0
c001a2ad:	e8 f8 fa ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a2b2:	89 c6                	mov    esi,eax
c001a2b4:	89 d7                	mov    edi,edx
c001a2b6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a2ba:	2d f8 00 00 00       	sub    eax,0xf8
c001a2bf:	89 04 24             	mov    DWORD PTR [esp],eax
c001a2c2:	66 90                	xchg   ax,ax
c001a2c4:	e8 e1 fa ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a2c9:	57                   	push   edi
c001a2ca:	56                   	push   esi
c001a2cb:	52                   	push   edx
c001a2cc:	50                   	push   eax
c001a2cd:	e8 a6 fa ff ff       	call   c0019d78 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a2d2:	83 c4 1c             	add    esp,0x1c
c001a2d5:	52                   	push   edx
c001a2d6:	50                   	push   eax
c001a2d7:	6a 00                	push   0x0
c001a2d9:	e9 6a 02 00 00       	jmp    c001a548 <Vm::x87Handler(regs*)+0x65e>
c001a2de:	66 90                	xchg   ax,ax
c001a2e0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a2e4:	8d 50 40             	lea    edx,[eax+0x40]
c001a2e7:	80 fa 07             	cmp    dl,0x7
c001a2ea:	77 38                	ja     c001a324 <Vm::x87Handler(regs*)+0x43a>
c001a2ec:	83 ec 0c             	sub    esp,0xc
c001a2ef:	2d c0 00 00 00       	sub    eax,0xc0
c001a2f4:	50                   	push   eax
c001a2f5:	e8 b0 fa ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a2fa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a301:	89 c6                	mov    esi,eax
c001a303:	89 d7                	mov    edi,edx
c001a305:	e8 a0 fa ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a30a:	57                   	push   edi
c001a30b:	56                   	push   esi
c001a30c:	52                   	push   edx
c001a30d:	50                   	push   eax
c001a30e:	e8 0d fa ff ff       	call   c0019d20 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a313:	83 c4 1c             	add    esp,0x1c
c001a316:	52                   	push   edx
c001a317:	50                   	push   eax
c001a318:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a31c:	2d c0 00 00 00       	sub    eax,0xc0
c001a321:	eb 41                	jmp    c001a364 <Vm::x87Handler(regs*)+0x47a>
c001a323:	90                   	nop
c001a324:	8d 50 38             	lea    edx,[eax+0x38]
c001a327:	80 fa 07             	cmp    dl,0x7
c001a32a:	77 40                	ja     c001a36c <Vm::x87Handler(regs*)+0x482>
c001a32c:	83 ec 0c             	sub    esp,0xc
c001a32f:	2d c8 00 00 00       	sub    eax,0xc8
c001a334:	50                   	push   eax
c001a335:	e8 70 fa ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a33a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a341:	89 c6                	mov    esi,eax
c001a343:	89 d7                	mov    edi,edx
c001a345:	e8 60 fa ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a34a:	57                   	push   edi
c001a34b:	56                   	push   esi
c001a34c:	52                   	push   edx
c001a34d:	50                   	push   eax
c001a34e:	e8 06 fa ff ff       	call   c0019d59 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a353:	83 c4 1c             	add    esp,0x1c
c001a356:	52                   	push   edx
c001a357:	50                   	push   eax
c001a358:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a35c:	2d c8 00 00 00       	sub    eax,0xc8
c001a361:	8d 76 00             	lea    esi,[esi+0x0]
c001a364:	50                   	push   eax
c001a365:	e9 42 fc ff ff       	jmp    c0019fac <Vm::x87Handler(regs*)+0xc2>
c001a36a:	66 90                	xchg   ax,ax
c001a36c:	83 c0 18             	add    eax,0x18
c001a36f:	3c 07                	cmp    al,0x7
c001a371:	0f 87 6d 04 00 00    	ja     c001a7e4 <Vm::x87Handler(regs*)+0x8fa>
c001a377:	83 ec 0c             	sub    esp,0xc
c001a37a:	6a 00                	push   0x0
c001a37c:	e8 29 fa ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a381:	89 c6                	mov    esi,eax
c001a383:	89 d7                	mov    edi,edx
c001a385:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a389:	2d e8 00 00 00       	sub    eax,0xe8
c001a38e:	89 04 24             	mov    DWORD PTR [esp],eax
c001a391:	e8 14 fa ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a396:	57                   	push   edi
c001a397:	56                   	push   esi
c001a398:	52                   	push   edx
c001a399:	50                   	push   eax
c001a39a:	e8 ab f9 ff ff       	call   c0019d4a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a39f:	83 c4 1c             	add    esp,0x1c
c001a3a2:	52                   	push   edx
c001a3a3:	50                   	push   eax
c001a3a4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a3a8:	2d e8 00 00 00       	sub    eax,0xe8
c001a3ad:	eb b5                	jmp    c001a364 <Vm::x87Handler(regs*)+0x47a>
c001a3af:	90                   	nop
c001a3b0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a3b4:	8d 50 40             	lea    edx,[eax+0x40]
c001a3b7:	80 fa 07             	cmp    dl,0x7
c001a3ba:	77 3c                	ja     c001a3f8 <Vm::x87Handler(regs*)+0x50e>
c001a3bc:	83 ec 0c             	sub    esp,0xc
c001a3bf:	2d c0 00 00 00       	sub    eax,0xc0
c001a3c4:	50                   	push   eax
c001a3c5:	e8 e0 f9 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a3ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a3d1:	89 c6                	mov    esi,eax
c001a3d3:	89 d7                	mov    edi,edx
c001a3d5:	e8 d0 f9 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a3da:	57                   	push   edi
c001a3db:	56                   	push   esi
c001a3dc:	52                   	push   edx
c001a3dd:	50                   	push   eax
c001a3de:	e8 3d f9 ff ff       	call   c0019d20 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a3e3:	83 c4 1c             	add    esp,0x1c
c001a3e6:	52                   	push   edx
c001a3e7:	50                   	push   eax
c001a3e8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a3ec:	2d c0 00 00 00       	sub    eax,0xc0
c001a3f1:	e9 b2 01 00 00       	jmp    c001a5a8 <Vm::x87Handler(regs*)+0x6be>
c001a3f6:	66 90                	xchg   ax,ax
c001a3f8:	8d 50 20             	lea    edx,[eax+0x20]
c001a3fb:	80 fa 07             	cmp    dl,0x7
c001a3fe:	77 3c                	ja     c001a43c <Vm::x87Handler(regs*)+0x552>
c001a400:	83 ec 0c             	sub    esp,0xc
c001a403:	2d e0 00 00 00       	sub    eax,0xe0
c001a408:	50                   	push   eax
c001a409:	e8 9c f9 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a40e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a415:	89 c6                	mov    esi,eax
c001a417:	89 d7                	mov    edi,edx
c001a419:	e8 8c f9 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a41e:	57                   	push   edi
c001a41f:	56                   	push   esi
c001a420:	52                   	push   edx
c001a421:	50                   	push   eax
c001a422:	e8 23 f9 ff ff       	call   c0019d4a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a427:	83 c4 1c             	add    esp,0x1c
c001a42a:	52                   	push   edx
c001a42b:	50                   	push   eax
c001a42c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a430:	2d e0 00 00 00       	sub    eax,0xe0
c001a435:	e9 6e 01 00 00       	jmp    c001a5a8 <Vm::x87Handler(regs*)+0x6be>
c001a43a:	66 90                	xchg   ax,ax
c001a43c:	8d 50 18             	lea    edx,[eax+0x18]
c001a43f:	80 fa 07             	cmp    dl,0x7
c001a442:	77 3c                	ja     c001a480 <Vm::x87Handler(regs*)+0x596>
c001a444:	83 ec 0c             	sub    esp,0xc
c001a447:	6a 00                	push   0x0
c001a449:	e8 5c f9 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a44e:	89 c6                	mov    esi,eax
c001a450:	89 d7                	mov    edi,edx
c001a452:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a456:	2d e8 00 00 00       	sub    eax,0xe8
c001a45b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a45e:	e8 47 f9 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a463:	57                   	push   edi
c001a464:	56                   	push   esi
c001a465:	52                   	push   edx
c001a466:	50                   	push   eax
c001a467:	e8 de f8 ff ff       	call   c0019d4a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a46c:	83 c4 1c             	add    esp,0x1c
c001a46f:	52                   	push   edx
c001a470:	50                   	push   eax
c001a471:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a475:	2d e8 00 00 00       	sub    eax,0xe8
c001a47a:	e9 29 01 00 00       	jmp    c001a5a8 <Vm::x87Handler(regs*)+0x6be>
c001a47f:	90                   	nop
c001a480:	8d 50 38             	lea    edx,[eax+0x38]
c001a483:	80 fa 07             	cmp    dl,0x7
c001a486:	77 3c                	ja     c001a4c4 <Vm::x87Handler(regs*)+0x5da>
c001a488:	83 ec 0c             	sub    esp,0xc
c001a48b:	2d c8 00 00 00       	sub    eax,0xc8
c001a490:	50                   	push   eax
c001a491:	e8 14 f9 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a496:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a49d:	89 c6                	mov    esi,eax
c001a49f:	89 d7                	mov    edi,edx
c001a4a1:	e8 04 f9 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a4a6:	57                   	push   edi
c001a4a7:	56                   	push   esi
c001a4a8:	52                   	push   edx
c001a4a9:	50                   	push   eax
c001a4aa:	e8 aa f8 ff ff       	call   c0019d59 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a4af:	83 c4 1c             	add    esp,0x1c
c001a4b2:	52                   	push   edx
c001a4b3:	50                   	push   eax
c001a4b4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a4b8:	2d c8 00 00 00       	sub    eax,0xc8
c001a4bd:	e9 82 00 00 00       	jmp    c001a544 <Vm::x87Handler(regs*)+0x65a>
c001a4c2:	66 90                	xchg   ax,ax
c001a4c4:	3c f7                	cmp    al,0xf7
c001a4c6:	76 38                	jbe    c001a500 <Vm::x87Handler(regs*)+0x616>
c001a4c8:	83 ec 0c             	sub    esp,0xc
c001a4cb:	6a 00                	push   0x0
c001a4cd:	e8 d8 f8 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a4d2:	89 c6                	mov    esi,eax
c001a4d4:	89 d7                	mov    edi,edx
c001a4d6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a4da:	2d f8 00 00 00       	sub    eax,0xf8
c001a4df:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4e2:	e8 c3 f8 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a4e7:	57                   	push   edi
c001a4e8:	56                   	push   esi
c001a4e9:	52                   	push   edx
c001a4ea:	50                   	push   eax
c001a4eb:	e8 88 f8 ff ff       	call   c0019d78 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a4f0:	83 c4 1c             	add    esp,0x1c
c001a4f3:	52                   	push   edx
c001a4f4:	50                   	push   eax
c001a4f5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a4f9:	2d f8 00 00 00       	sub    eax,0xf8
c001a4fe:	eb 44                	jmp    c001a544 <Vm::x87Handler(regs*)+0x65a>
c001a500:	8d 50 10             	lea    edx,[eax+0x10]
c001a503:	80 fa 07             	cmp    dl,0x7
c001a506:	0f 87 6c 01 00 00    	ja     c001a678 <Vm::x87Handler(regs*)+0x78e>
c001a50c:	83 ec 0c             	sub    esp,0xc
c001a50f:	2d f0 00 00 00       	sub    eax,0xf0
c001a514:	50                   	push   eax
c001a515:	e8 90 f8 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a51a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a521:	89 c6                	mov    esi,eax
c001a523:	89 d7                	mov    edi,edx
c001a525:	e8 80 f8 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a52a:	57                   	push   edi
c001a52b:	56                   	push   esi
c001a52c:	52                   	push   edx
c001a52d:	50                   	push   eax
c001a52e:	e8 45 f8 ff ff       	call   c0019d78 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a533:	83 c4 1c             	add    esp,0x1c
c001a536:	52                   	push   edx
c001a537:	50                   	push   eax
c001a538:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a53c:	2d f0 00 00 00       	sub    eax,0xf0
c001a541:	8d 76 00             	lea    esi,[esi+0x0]
c001a544:	50                   	push   eax
c001a545:	8d 76 00             	lea    esi,[esi+0x0]
c001a548:	e8 a0 f8 ff ff       	call   c0019ded <Vm::fpuSetReg(int, unsigned long long)>
c001a54d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a551:	e8 41 f9 ff ff       	call   c0019e97 <Vm::fpuPop()>
c001a556:	e9 0d fa ff ff       	jmp    c0019f68 <Vm::x87Handler(regs*)+0x7e>
c001a55b:	90                   	nop
c001a55c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a560:	8d 50 30             	lea    edx,[eax+0x30]
c001a563:	80 fa 07             	cmp    dl,0x7
c001a566:	77 20                	ja     c001a588 <Vm::x87Handler(regs*)+0x69e>
c001a568:	83 ec 0c             	sub    esp,0xc
c001a56b:	6a 00                	push   0x0
c001a56d:	e8 38 f8 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a572:	83 c4 0c             	add    esp,0xc
c001a575:	52                   	push   edx
c001a576:	50                   	push   eax
c001a577:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a57b:	2d d0 00 00 00       	sub    eax,0xd0
c001a580:	e9 df fd ff ff       	jmp    c001a364 <Vm::x87Handler(regs*)+0x47a>
c001a585:	8d 76 00             	lea    esi,[esi+0x0]
c001a588:	8d 50 28             	lea    edx,[eax+0x28]
c001a58b:	80 fa 07             	cmp    dl,0x7
c001a58e:	77 28                	ja     c001a5b8 <Vm::x87Handler(regs*)+0x6ce>
c001a590:	83 ec 0c             	sub    esp,0xc
c001a593:	6a 00                	push   0x0
c001a595:	e8 10 f8 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a59a:	83 c4 0c             	add    esp,0xc
c001a59d:	52                   	push   edx
c001a59e:	50                   	push   eax
c001a59f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a5a3:	2d d8 00 00 00       	sub    eax,0xd8
c001a5a8:	50                   	push   eax
c001a5a9:	e8 3f f8 ff ff       	call   c0019ded <Vm::fpuSetReg(int, unsigned long long)>
c001a5ae:	e8 e4 f8 ff ff       	call   c0019e97 <Vm::fpuPop()>
c001a5b3:	e9 ac f9 ff ff       	jmp    c0019f64 <Vm::x87Handler(regs*)+0x7a>
c001a5b8:	8d 50 20             	lea    edx,[eax+0x20]
c001a5bb:	80 fa 07             	cmp    dl,0x7
c001a5be:	77 30                	ja     c001a5f0 <Vm::x87Handler(regs*)+0x706>
c001a5c0:	83 ec 0c             	sub    esp,0xc
c001a5c3:	2d e0 00 00 00       	sub    eax,0xe0
c001a5c8:	50                   	push   eax
c001a5c9:	e8 dc f7 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a5ce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a5d5:	89 c6                	mov    esi,eax
c001a5d7:	89 d7                	mov    edi,edx
c001a5d9:	e8 cc f7 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a5de:	57                   	push   edi
c001a5df:	56                   	push   esi
c001a5e0:	52                   	push   edx
c001a5e1:	50                   	push   eax
c001a5e2:	e8 e3 f6 ff ff       	call   c0019cca <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a5e7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a5eb:	e9 78 02 00 00       	jmp    c001a868 <Vm::x87Handler(regs*)+0x97e>
c001a5f0:	8d 50 18             	lea    edx,[eax+0x18]
c001a5f3:	80 fa 07             	cmp    dl,0x7
c001a5f6:	0f 87 10 fb ff ff    	ja     c001a10c <Vm::x87Handler(regs*)+0x222>
c001a5fc:	83 ec 0c             	sub    esp,0xc
c001a5ff:	2d e8 00 00 00       	sub    eax,0xe8
c001a604:	50                   	push   eax
c001a605:	e8 a0 f7 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a60a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a611:	89 c6                	mov    esi,eax
c001a613:	89 d7                	mov    edi,edx
c001a615:	e8 90 f7 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a61a:	57                   	push   edi
c001a61b:	56                   	push   esi
c001a61c:	52                   	push   edx
c001a61d:	50                   	push   eax
c001a61e:	e8 a7 f6 ff ff       	call   c0019cca <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a623:	83 c4 20             	add    esp,0x20
c001a626:	e8 6c f8 ff ff       	call   c0019e97 <Vm::fpuPop()>
c001a62b:	eb 6f                	jmp    c001a69c <Vm::x87Handler(regs*)+0x7b2>
c001a62d:	8d 76 00             	lea    esi,[esi+0x0]
c001a630:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001a634:	0f 85 22 01 00 00    	jne    c001a75c <Vm::x87Handler(regs*)+0x872>
c001a63a:	66 90                	xchg   ax,ax
c001a63c:	83 ec 0c             	sub    esp,0xc
c001a63f:	6a 01                	push   0x1
c001a641:	e8 64 f7 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a646:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a64d:	89 c6                	mov    esi,eax
c001a64f:	89 d7                	mov    edi,edx
c001a651:	e8 54 f7 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a656:	57                   	push   edi
c001a657:	56                   	push   esi
c001a658:	52                   	push   edx
c001a659:	50                   	push   eax
c001a65a:	e8 6b f6 ff ff       	call   c0019cca <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a65f:	83 c4 20             	add    esp,0x20
c001a662:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a666:	e8 2c f8 ff ff       	call   c0019e97 <Vm::fpuPop()>
c001a66b:	e8 27 f8 ff ff       	call   c0019e97 <Vm::fpuPop()>
c001a670:	e9 f7 f8 ff ff       	jmp    c0019f6c <Vm::x87Handler(regs*)+0x82>
c001a675:	8d 76 00             	lea    esi,[esi+0x0]
c001a678:	3c d9                	cmp    al,0xd9
c001a67a:	0f 85 e8 02 00 00    	jne    c001a968 <Vm::x87Handler(regs*)+0xa7e>
c001a680:	eb ba                	jmp    c001a63c <Vm::x87Handler(regs*)+0x752>
c001a682:	66 90                	xchg   ax,ax
c001a684:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001a688:	0f 85 2a 03 00 00    	jne    c001a9b8 <Vm::x87Handler(regs*)+0xace>
c001a68e:	0f b7 05 a0 90 02 c0 	movzx  eax,WORD PTR ds:0xc00290a0
c001a695:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001a699:	8d 76 00             	lea    esi,[esi+0x0]
c001a69c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a6a0:	e9 c7 f8 ff ff       	jmp    c0019f6c <Vm::x87Handler(regs*)+0x82>
c001a6a5:	8d 76 00             	lea    esi,[esi+0x0]
c001a6a8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a6ac:	84 d2                	test   dl,dl
c001a6ae:	75 10                	jne    c001a6c0 <Vm::x87Handler(regs*)+0x7d6>
c001a6b0:	83 ec 0c             	sub    esp,0xc
c001a6b3:	ff 36                	push   DWORD PTR [esi]
c001a6b5:	e8 29 f4 ff ff       	call   c0019ae3 <Vm::fpu32ToInternal(unsigned int)>
c001a6ba:	e9 39 01 00 00       	jmp    c001a7f8 <Vm::x87Handler(regs*)+0x90e>
c001a6bf:	90                   	nop
c001a6c0:	80 fa 01             	cmp    dl,0x1
c001a6c3:	75 0f                	jne    c001a6d4 <Vm::x87Handler(regs*)+0x7ea>
c001a6c5:	83 ec 0c             	sub    esp,0xc
c001a6c8:	ff 36                	push   DWORD PTR [esi]
c001a6ca:	e8 14 f4 ff ff       	call   c0019ae3 <Vm::fpu32ToInternal(unsigned int)>
c001a6cf:	e9 b4 02 00 00       	jmp    c001a988 <Vm::x87Handler(regs*)+0xa9e>
c001a6d4:	80 fa 04             	cmp    dl,0x4
c001a6d7:	75 0f                	jne    c001a6e8 <Vm::x87Handler(regs*)+0x7fe>
c001a6d9:	83 ec 0c             	sub    esp,0xc
c001a6dc:	ff 36                	push   DWORD PTR [esi]
c001a6de:	e8 00 f4 ff ff       	call   c0019ae3 <Vm::fpu32ToInternal(unsigned int)>
c001a6e3:	e9 9c 01 00 00       	jmp    c001a884 <Vm::x87Handler(regs*)+0x99a>
c001a6e8:	80 fa 05             	cmp    dl,0x5
c001a6eb:	75 1b                	jne    c001a708 <Vm::x87Handler(regs*)+0x81e>
c001a6ed:	83 ec 0c             	sub    esp,0xc
c001a6f0:	6a 00                	push   0x0
c001a6f2:	e8 b3 f6 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a6f7:	89 c7                	mov    edi,eax
c001a6f9:	89 d5                	mov    ebp,edx
c001a6fb:	58                   	pop    eax
c001a6fc:	ff 36                	push   DWORD PTR [esi]
c001a6fe:	e8 e0 f3 ff ff       	call   c0019ae3 <Vm::fpu32ToInternal(unsigned int)>
c001a703:	e9 bc 01 00 00       	jmp    c001a8c4 <Vm::x87Handler(regs*)+0x9da>
c001a708:	80 fa 06             	cmp    dl,0x6
c001a70b:	75 0f                	jne    c001a71c <Vm::x87Handler(regs*)+0x832>
c001a70d:	83 ec 0c             	sub    esp,0xc
c001a710:	ff 36                	push   DWORD PTR [esi]
c001a712:	e8 cc f3 ff ff       	call   c0019ae3 <Vm::fpu32ToInternal(unsigned int)>
c001a717:	e9 cc 01 00 00       	jmp    c001a8e8 <Vm::x87Handler(regs*)+0x9fe>
c001a71c:	31 c0                	xor    eax,eax
c001a71e:	80 fa 07             	cmp    dl,0x7
c001a721:	0f 85 d5 02 00 00    	jne    c001a9fc <Vm::x87Handler(regs*)+0xb12>
c001a727:	83 ec 0c             	sub    esp,0xc
c001a72a:	6a 00                	push   0x0
c001a72c:	e8 79 f6 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a731:	89 c7                	mov    edi,eax
c001a733:	89 d5                	mov    ebp,edx
c001a735:	58                   	pop    eax
c001a736:	ff 36                	push   DWORD PTR [esi]
c001a738:	e8 a6 f3 ff ff       	call   c0019ae3 <Vm::fpu32ToInternal(unsigned int)>
c001a73d:	e9 ee 01 00 00       	jmp    c001a930 <Vm::x87Handler(regs*)+0xa46>
c001a742:	66 90                	xchg   ax,ax
c001a744:	80 fa 03             	cmp    dl,0x3
c001a747:	0f 85 f7 01 00 00    	jne    c001a944 <Vm::x87Handler(regs*)+0xa5a>
c001a74d:	e8 45 f7 ff ff       	call   c0019e97 <Vm::fpuPop()>
c001a752:	51                   	push   ecx
c001a753:	51                   	push   ecx
c001a754:	e9 03 02 00 00       	jmp    c001a95c <Vm::x87Handler(regs*)+0xa72>
c001a759:	8d 76 00             	lea    esi,[esi+0x0]
c001a75c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a760:	80 fa 01             	cmp    dl,0x1
c001a763:	75 0b                	jne    c001a770 <Vm::x87Handler(regs*)+0x886>
c001a765:	57                   	push   edi
c001a766:	57                   	push   edi
c001a767:	8b 06                	mov    eax,DWORD PTR [esi]
c001a769:	e9 0e 02 00 00       	jmp    c001a97c <Vm::x87Handler(regs*)+0xa92>
c001a76e:	66 90                	xchg   ax,ax
c001a770:	80 fa 04             	cmp    dl,0x4
c001a773:	75 13                	jne    c001a788 <Vm::x87Handler(regs*)+0x89e>
c001a775:	31 d2                	xor    edx,edx
c001a777:	51                   	push   ecx
c001a778:	51                   	push   ecx
c001a779:	8b 06                	mov    eax,DWORD PTR [esi]
c001a77b:	52                   	push   edx
c001a77c:	50                   	push   eax
c001a77d:	e8 4a f4 ff ff       	call   c0019bcc <Vm::fpuLongToFloat(long long)>
c001a782:	e9 fd 00 00 00       	jmp    c001a884 <Vm::x87Handler(regs*)+0x99a>
c001a787:	90                   	nop
c001a788:	31 c0                	xor    eax,eax
c001a78a:	80 fa 07             	cmp    dl,0x7
c001a78d:	0f 85 69 02 00 00    	jne    c001a9fc <Vm::x87Handler(regs*)+0xb12>
c001a793:	83 ec 0c             	sub    esp,0xc
c001a796:	6a 00                	push   0x0
c001a798:	e8 0d f6 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a79d:	89 c7                	mov    edi,eax
c001a79f:	89 d5                	mov    ebp,edx
c001a7a1:	58                   	pop    eax
c001a7a2:	8b 06                	mov    eax,DWORD PTR [esi]
c001a7a4:	5a                   	pop    edx
c001a7a5:	31 d2                	xor    edx,edx
c001a7a7:	52                   	push   edx
c001a7a8:	50                   	push   eax
c001a7a9:	e8 1e f4 ff ff       	call   c0019bcc <Vm::fpuLongToFloat(long long)>
c001a7ae:	e9 7d 01 00 00       	jmp    c001a930 <Vm::x87Handler(regs*)+0xa46>
c001a7b3:	90                   	nop
c001a7b4:	84 d2                	test   dl,dl
c001a7b6:	75 10                	jne    c001a7c8 <Vm::x87Handler(regs*)+0x8de>
c001a7b8:	31 d2                	xor    edx,edx
c001a7ba:	55                   	push   ebp
c001a7bb:	55                   	push   ebp
c001a7bc:	8b 06                	mov    eax,DWORD PTR [esi]
c001a7be:	52                   	push   edx
c001a7bf:	50                   	push   eax
c001a7c0:	e9 03 02 00 00       	jmp    c001a9c8 <Vm::x87Handler(regs*)+0xade>
c001a7c5:	8d 76 00             	lea    esi,[esi+0x0]
c001a7c8:	31 c0                	xor    eax,eax
c001a7ca:	80 fa 02             	cmp    dl,0x2
c001a7cd:	0f 85 29 02 00 00    	jne    c001a9fc <Vm::x87Handler(regs*)+0xb12>
c001a7d3:	83 ec 0c             	sub    esp,0xc
c001a7d6:	6a 00                	push   0x0
c001a7d8:	e8 cd f5 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a7dd:	59                   	pop    ecx
c001a7de:	5f                   	pop    edi
c001a7df:	e9 18 f9 ff ff       	jmp    c001a0fc <Vm::x87Handler(regs*)+0x212>
c001a7e4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a7e8:	84 d2                	test   dl,dl
c001a7ea:	75 2c                	jne    c001a818 <Vm::x87Handler(regs*)+0x92e>
c001a7ec:	50                   	push   eax
c001a7ed:	50                   	push   eax
c001a7ee:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a7f1:	ff 36                	push   DWORD PTR [esi]
c001a7f3:	e8 30 f3 ff ff       	call   c0019b28 <Vm::fpu64ToInternal(unsigned long long)>
c001a7f8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a7ff:	89 c6                	mov    esi,eax
c001a801:	89 d7                	mov    edi,edx
c001a803:	e8 a2 f5 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a808:	57                   	push   edi
c001a809:	56                   	push   esi
c001a80a:	52                   	push   edx
c001a80b:	50                   	push   eax
c001a80c:	e8 0f f5 ff ff       	call   c0019d20 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a811:	e9 8e 01 00 00       	jmp    c001a9a4 <Vm::x87Handler(regs*)+0xaba>
c001a816:	66 90                	xchg   ax,ax
c001a818:	80 fa 01             	cmp    dl,0x1
c001a81b:	75 13                	jne    c001a830 <Vm::x87Handler(regs*)+0x946>
c001a81d:	50                   	push   eax
c001a81e:	50                   	push   eax
c001a81f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a822:	ff 36                	push   DWORD PTR [esi]
c001a824:	e8 ff f2 ff ff       	call   c0019b28 <Vm::fpu64ToInternal(unsigned long long)>
c001a829:	e9 5a 01 00 00       	jmp    c001a988 <Vm::x87Handler(regs*)+0xa9e>
c001a82e:	66 90                	xchg   ax,ax
c001a830:	80 fa 02             	cmp    dl,0x2
c001a833:	0f 85 03 f9 ff ff    	jne    c001a13c <Vm::x87Handler(regs*)+0x252>
c001a839:	55                   	push   ebp
c001a83a:	55                   	push   ebp
c001a83b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a83e:	ff 36                	push   DWORD PTR [esi]
c001a840:	e8 e3 f2 ff ff       	call   c0019b28 <Vm::fpu64ToInternal(unsigned long long)>
c001a845:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a84c:	89 c6                	mov    esi,eax
c001a84e:	89 d7                	mov    edi,edx
c001a850:	e8 55 f5 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a855:	57                   	push   edi
c001a856:	56                   	push   esi
c001a857:	52                   	push   edx
c001a858:	50                   	push   eax
c001a859:	e8 6c f4 ff ff       	call   c0019cca <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a85e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a862:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a865:	8d 76 00             	lea    esi,[esi+0x0]
c001a868:	83 c4 20             	add    esp,0x20
c001a86b:	e9 fc f6 ff ff       	jmp    c0019f6c <Vm::x87Handler(regs*)+0x82>
c001a870:	80 fa 04             	cmp    dl,0x4
c001a873:	75 2f                	jne    c001a8a4 <Vm::x87Handler(regs*)+0x9ba>
c001a875:	51                   	push   ecx
c001a876:	51                   	push   ecx
c001a877:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a87a:	ff 36                	push   DWORD PTR [esi]
c001a87c:	e8 a7 f2 ff ff       	call   c0019b28 <Vm::fpu64ToInternal(unsigned long long)>
c001a881:	8d 76 00             	lea    esi,[esi+0x0]
c001a884:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a88b:	89 c6                	mov    esi,eax
c001a88d:	89 d7                	mov    edi,edx
c001a88f:	e8 16 f5 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a894:	57                   	push   edi
c001a895:	56                   	push   esi
c001a896:	52                   	push   edx
c001a897:	50                   	push   eax
c001a898:	e8 ad f4 ff ff       	call   c0019d4a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a89d:	e9 02 01 00 00       	jmp    c001a9a4 <Vm::x87Handler(regs*)+0xaba>
c001a8a2:	66 90                	xchg   ax,ax
c001a8a4:	80 fa 05             	cmp    dl,0x5
c001a8a7:	75 2b                	jne    c001a8d4 <Vm::x87Handler(regs*)+0x9ea>
c001a8a9:	83 ec 0c             	sub    esp,0xc
c001a8ac:	6a 00                	push   0x0
c001a8ae:	e8 f7 f4 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a8b3:	89 c7                	mov    edi,eax
c001a8b5:	89 d5                	mov    ebp,edx
c001a8b7:	58                   	pop    eax
c001a8b8:	5a                   	pop    edx
c001a8b9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a8bc:	ff 36                	push   DWORD PTR [esi]
c001a8be:	e8 65 f2 ff ff       	call   c0019b28 <Vm::fpu64ToInternal(unsigned long long)>
c001a8c3:	90                   	nop
c001a8c4:	83 c4 10             	add    esp,0x10
c001a8c7:	55                   	push   ebp
c001a8c8:	57                   	push   edi
c001a8c9:	52                   	push   edx
c001a8ca:	50                   	push   eax
c001a8cb:	e8 7a f4 ff ff       	call   c0019d4a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a8d0:	eb 6a                	jmp    c001a93c <Vm::x87Handler(regs*)+0xa52>
c001a8d2:	66 90                	xchg   ax,ax
c001a8d4:	80 fa 06             	cmp    dl,0x6
c001a8d7:	75 2f                	jne    c001a908 <Vm::x87Handler(regs*)+0xa1e>
c001a8d9:	51                   	push   ecx
c001a8da:	51                   	push   ecx
c001a8db:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a8de:	ff 36                	push   DWORD PTR [esi]
c001a8e0:	e8 43 f2 ff ff       	call   c0019b28 <Vm::fpu64ToInternal(unsigned long long)>
c001a8e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a8e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a8ef:	89 c6                	mov    esi,eax
c001a8f1:	89 d7                	mov    edi,edx
c001a8f3:	e8 b2 f4 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a8f8:	57                   	push   edi
c001a8f9:	56                   	push   esi
c001a8fa:	52                   	push   edx
c001a8fb:	50                   	push   eax
c001a8fc:	e8 77 f4 ff ff       	call   c0019d78 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a901:	e9 9e 00 00 00       	jmp    c001a9a4 <Vm::x87Handler(regs*)+0xaba>
c001a906:	66 90                	xchg   ax,ax
c001a908:	31 c0                	xor    eax,eax
c001a90a:	80 fa 07             	cmp    dl,0x7
c001a90d:	0f 85 e9 00 00 00    	jne    c001a9fc <Vm::x87Handler(regs*)+0xb12>
c001a913:	83 ec 0c             	sub    esp,0xc
c001a916:	6a 00                	push   0x0
c001a918:	e8 8d f4 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a91d:	89 c7                	mov    edi,eax
c001a91f:	89 d5                	mov    ebp,edx
c001a921:	58                   	pop    eax
c001a922:	5a                   	pop    edx
c001a923:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a926:	ff 36                	push   DWORD PTR [esi]
c001a928:	e8 fb f1 ff ff       	call   c0019b28 <Vm::fpu64ToInternal(unsigned long long)>
c001a92d:	8d 76 00             	lea    esi,[esi+0x0]
c001a930:	83 c4 10             	add    esp,0x10
c001a933:	55                   	push   ebp
c001a934:	57                   	push   edi
c001a935:	52                   	push   edx
c001a936:	50                   	push   eax
c001a937:	e8 3c f4 ff ff       	call   c0019d78 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a93c:	83 c4 0c             	add    esp,0xc
c001a93f:	eb 67                	jmp    c001a9a8 <Vm::x87Handler(regs*)+0xabe>
c001a941:	8d 76 00             	lea    esi,[esi+0x0]
c001a944:	31 c0                	xor    eax,eax
c001a946:	80 fa 02             	cmp    dl,0x2
c001a949:	0f 85 ad 00 00 00    	jne    c001a9fc <Vm::x87Handler(regs*)+0xb12>
c001a94f:	83 ec 0c             	sub    esp,0xc
c001a952:	6a 00                	push   0x0
c001a954:	e8 51 f4 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a959:	59                   	pop    ecx
c001a95a:	5f                   	pop    edi
c001a95b:	90                   	nop
c001a95c:	52                   	push   edx
c001a95d:	50                   	push   eax
c001a95e:	e8 77 f1 ff ff       	call   c0019ada <Vm::fpuInternalTo64(unsigned long long)>
c001a963:	e9 84 00 00 00       	jmp    c001a9ec <Vm::x87Handler(regs*)+0xb02>
c001a968:	31 c0                	xor    eax,eax
c001a96a:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001a96f:	0f 85 87 00 00 00    	jne    c001a9fc <Vm::x87Handler(regs*)+0xb12>
c001a975:	50                   	push   eax
c001a976:	50                   	push   eax
c001a977:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001a97a:	66 90                	xchg   ax,ax
c001a97c:	31 d2                	xor    edx,edx
c001a97e:	52                   	push   edx
c001a97f:	50                   	push   eax
c001a980:	e8 47 f2 ff ff       	call   c0019bcc <Vm::fpuLongToFloat(long long)>
c001a985:	8d 76 00             	lea    esi,[esi+0x0]
c001a988:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a98f:	89 c6                	mov    esi,eax
c001a991:	89 d7                	mov    edi,edx
c001a993:	e8 12 f4 ff ff       	call   c0019daa <Vm::fpuGetReg(int)>
c001a998:	57                   	push   edi
c001a999:	56                   	push   esi
c001a99a:	52                   	push   edx
c001a99b:	50                   	push   eax
c001a99c:	e8 b8 f3 ff ff       	call   c0019d59 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a9a1:	8d 76 00             	lea    esi,[esi+0x0]
c001a9a4:	83 c4 1c             	add    esp,0x1c
c001a9a7:	90                   	nop
c001a9a8:	52                   	push   edx
c001a9a9:	50                   	push   eax
c001a9aa:	6a 00                	push   0x0
c001a9ac:	e8 3c f4 ff ff       	call   c0019ded <Vm::fpuSetReg(int, unsigned long long)>
c001a9b1:	e9 7a f7 ff ff       	jmp    c001a130 <Vm::x87Handler(regs*)+0x246>
c001a9b6:	66 90                	xchg   ax,ax
c001a9b8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a9bc:	80 fa 05             	cmp    dl,0x5
c001a9bf:	75 13                	jne    c001a9d4 <Vm::x87Handler(regs*)+0xaea>
c001a9c1:	55                   	push   ebp
c001a9c2:	55                   	push   ebp
c001a9c3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a9c6:	ff 36                	push   DWORD PTR [esi]
c001a9c8:	e8 c3 f1 ff ff       	call   c0019b90 <Vm::fpuULongToFloat(unsigned long long)>
c001a9cd:	e9 52 f7 ff ff       	jmp    c001a124 <Vm::x87Handler(regs*)+0x23a>
c001a9d2:	66 90                	xchg   ax,ax
c001a9d4:	31 c0                	xor    eax,eax
c001a9d6:	80 fa 07             	cmp    dl,0x7
c001a9d9:	75 21                	jne    c001a9fc <Vm::x87Handler(regs*)+0xb12>
c001a9db:	e8 b7 f4 ff ff       	call   c0019e97 <Vm::fpuPop()>
c001a9e0:	51                   	push   ecx
c001a9e1:	51                   	push   ecx
c001a9e2:	52                   	push   edx
c001a9e3:	50                   	push   eax
c001a9e4:	e8 48 f1 ff ff       	call   c0019b31 <Vm::fpuFloatToLong(unsigned long long)>
c001a9e9:	8d 76 00             	lea    esi,[esi+0x0]
c001a9ec:	83 c4 10             	add    esp,0x10
c001a9ef:	89 06                	mov    DWORD PTR [esi],eax
c001a9f1:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a9f4:	e9 7b f7 ff ff       	jmp    c001a174 <Vm::x87Handler(regs*)+0x28a>
c001a9f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a9fc:	83 c4 1c             	add    esp,0x1c
c001a9ff:	5b                   	pop    ebx
c001aa00:	5e                   	pop    esi
c001aa01:	5f                   	pop    edi
c001aa02:	5d                   	pop    ebp
c001aa03:	c3                   	ret    

c001aa04 <__static_initialization_and_destruction_0(int, int)>:
c001aa04:	83 ec 0c             	sub    esp,0xc
c001aa07:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001aa0c:	75 1a                	jne    c001aa28 <__static_initialization_and_destruction_0(int, int)+0x24>
c001aa0e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001aa16:	75 10                	jne    c001aa28 <__static_initialization_and_destruction_0(int, int)+0x24>
c001aa18:	83 ec 0c             	sub    esp,0xc
c001aa1b:	68 a0 90 02 c0       	push   0xc00290a0
c001aa20:	e8 93 83 00 00       	call   c0022db8 <Vm::_FPUState::_FPUState()>
c001aa25:	83 c4 10             	add    esp,0x10
c001aa28:	90                   	nop
c001aa29:	83 c4 0c             	add    esp,0xc
c001aa2c:	c3                   	ret    
c001aa2d:	8d 76 00             	lea    esi,[esi+0x0]

c001aa30 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001aa30:	83 ec 0c             	sub    esp,0xc
c001aa33:	83 ec 08             	sub    esp,0x8
c001aa36:	68 ff ff 00 00       	push   0xffff
c001aa3b:	6a 01                	push   0x1
c001aa3d:	e8 c2 ff ff ff       	call   c001aa04 <__static_initialization_and_destruction_0(int, int)>
c001aa42:	83 c4 10             	add    esp,0x10
c001aa45:	83 c4 0c             	add    esp,0xc
c001aa48:	c3                   	ret    
c001aa49:	66 90                	xchg   ax,ax
c001aa4b:	90                   	nop

c001aa4c <FAT::getName()>:
c001aa4c:	b8 38 5f 02 c0       	mov    eax,0xc0025f38
c001aa51:	c3                   	ret    
c001aa52:	66 90                	xchg   ax,ax

c001aa54 <FAT::tell(void*, unsigned long long*)>:
c001aa54:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001aa59:	75 09                	jne    c001aa64 <FAT::tell(void*, unsigned long long*)+0x10>
c001aa5b:	b8 04 00 00 00       	mov    eax,0x4
c001aa60:	c3                   	ret    
c001aa61:	8d 76 00             	lea    esi,[esi+0x0]
c001aa64:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001aa69:	75 09                	jne    c001aa74 <FAT::tell(void*, unsigned long long*)+0x20>
c001aa6b:	b8 04 00 00 00       	mov    eax,0x4
c001aa70:	c3                   	ret    
c001aa71:	8d 76 00             	lea    esi,[esi+0x0]
c001aa74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa78:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001aa7b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001aa7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001aa82:	89 01                	mov    DWORD PTR [ecx],eax
c001aa84:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001aa87:	b8 00 00 00 00       	mov    eax,0x0
c001aa8c:	c3                   	ret    
c001aa8d:	90                   	nop
c001aa8e:	66 90                	xchg   ax,ax

c001aa90 <FAT::stat(void*, unsigned long long*)>:
c001aa90:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001aa95:	75 09                	jne    c001aaa0 <FAT::stat(void*, unsigned long long*)+0x10>
c001aa97:	b8 04 00 00 00       	mov    eax,0x4
c001aa9c:	c3                   	ret    
c001aa9d:	8d 76 00             	lea    esi,[esi+0x0]
c001aaa0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001aaa5:	75 09                	jne    c001aab0 <FAT::stat(void*, unsigned long long*)+0x20>
c001aaa7:	b8 04 00 00 00       	mov    eax,0x4
c001aaac:	c3                   	ret    
c001aaad:	8d 76 00             	lea    esi,[esi+0x0]
c001aab0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aab4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001aab7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001aaba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001aabe:	89 01                	mov    DWORD PTR [ecx],eax
c001aac0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001aac3:	b8 00 00 00 00       	mov    eax,0x0
c001aac8:	c3                   	ret    
c001aac9:	90                   	nop
c001aaca:	66 90                	xchg   ax,ax

c001aacc <FAT::~FAT()>:
c001aacc:	83 ec 0c             	sub    esp,0xc
c001aacf:	ba 84 5f 02 c0       	mov    edx,0xc0025f84
c001aad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aad8:	89 10                	mov    DWORD PTR [eax],edx
c001aada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aade:	83 ec 0c             	sub    esp,0xc
c001aae1:	50                   	push   eax
c001aae2:	e8 4b 25 ff ff       	call   c000d032 <Filesystem::~Filesystem()>
c001aae7:	83 c4 10             	add    esp,0x10
c001aaea:	90                   	nop
c001aaeb:	83 c4 0c             	add    esp,0xc
c001aaee:	c3                   	ret    
c001aaef:	90                   	nop

c001aaf0 <FAT::~FAT()>:
c001aaf0:	83 ec 0c             	sub    esp,0xc
c001aaf3:	83 ec 0c             	sub    esp,0xc
c001aaf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aafa:	e8 cd ff ff ff       	call   c001aacc <FAT::~FAT()>
c001aaff:	83 c4 10             	add    esp,0x10
c001ab02:	83 ec 08             	sub    esp,0x8
c001ab05:	6a 08                	push   0x8
c001ab07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab0b:	e8 06 21 ff ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c001ab10:	83 c4 10             	add    esp,0x10
c001ab13:	83 c4 0c             	add    esp,0xc
c001ab16:	c3                   	ret    
c001ab17:	90                   	nop

c001ab18 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001ab18:	83 ec 1c             	sub    esp,0x1c
c001ab1b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001ab22:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001ab27:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ab2b:	8b 04 85 20 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ee0]
c001ab32:	83 f8 ff             	cmp    eax,0xffffffff
c001ab35:	75 35                	jne    c001ab6c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001ab37:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ab3b:	88 c2                	mov    dl,al
c001ab3d:	a1 00 91 02 c0       	mov    eax,ds:0xc0029100
c001ab42:	01 d0                	add    eax,edx
c001ab44:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ab48:	8b 15 00 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029100
c001ab4e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ab52:	89 14 85 20 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ee0],edx
c001ab59:	a1 00 91 02 c0       	mov    eax,ds:0xc0029100
c001ab5e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ab62:	89 14 85 a0 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6e60],edx
c001ab69:	eb 19                	jmp    c001ab84 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001ab6b:	90                   	nop
c001ab6c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ab70:	88 c2                	mov    dl,al
c001ab72:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ab76:	8b 04 85 20 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ee0]
c001ab7d:	01 d0                	add    eax,edx
c001ab7f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ab83:	90                   	nop
c001ab84:	83 ec 04             	sub    esp,0x4
c001ab87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ab8b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ab8f:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ab93:	50                   	push   eax
c001ab94:	e8 99 c0 fe ff       	call   c0006c32 <f_getlabel>
c001ab99:	83 c4 10             	add    esp,0x10
c001ab9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aba0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001aba5:	75 09                	jne    c001abb0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001aba7:	b8 00 00 00 00       	mov    eax,0x0
c001abac:	eb 0a                	jmp    c001abb8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001abae:	66 90                	xchg   ax,ax
c001abb0:	b8 01 00 00 00       	mov    eax,0x1
c001abb5:	8d 76 00             	lea    esi,[esi+0x0]
c001abb8:	83 c4 1c             	add    esp,0x1c
c001abbb:	c3                   	ret    

c001abbc <FAT::setlabel(LogicalDisk*, int, char*)>:
c001abbc:	57                   	push   edi
c001abbd:	83 ec 58             	sub    esp,0x58
c001abc0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001abc8:	8d 54 24 10          	lea    edx,[esp+0x10]
c001abcc:	b9 0f 00 00 00       	mov    ecx,0xf
c001abd1:	b8 00 00 00 00       	mov    eax,0x0
c001abd6:	fc                   	cld    
c001abd7:	89 d7                	mov    edi,edx
c001abd9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001abdb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001abdf:	8b 04 85 20 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ee0]
c001abe6:	83 f8 ff             	cmp    eax,0xffffffff
c001abe9:	75 35                	jne    c001ac20 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001abeb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001abef:	88 c2                	mov    dl,al
c001abf1:	a1 00 91 02 c0       	mov    eax,ds:0xc0029100
c001abf6:	01 d0                	add    eax,edx
c001abf8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001abfc:	8b 15 00 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029100
c001ac02:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ac06:	89 14 85 20 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ee0],edx
c001ac0d:	a1 00 91 02 c0       	mov    eax,ds:0xc0029100
c001ac12:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001ac16:	89 14 85 a0 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6e60],edx
c001ac1d:	eb 19                	jmp    c001ac38 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001ac1f:	90                   	nop
c001ac20:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ac24:	88 c2                	mov    dl,al
c001ac26:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ac2a:	8b 04 85 20 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ee0]
c001ac31:	01 d0                	add    eax,edx
c001ac33:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ac37:	90                   	nop
c001ac38:	83 ec 08             	sub    esp,0x8
c001ac3b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001ac3f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ac43:	50                   	push   eax
c001ac44:	e8 37 5c fe ff       	call   c0000880 <strcat>
c001ac49:	83 c4 10             	add    esp,0x10
c001ac4c:	83 ec 0c             	sub    esp,0xc
c001ac4f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ac53:	50                   	push   eax
c001ac54:	e8 c7 c1 fe ff       	call   c0006e20 <f_setlabel>
c001ac59:	83 c4 10             	add    esp,0x10
c001ac5c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ac60:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001ac65:	75 09                	jne    c001ac70 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001ac67:	b8 00 00 00 00       	mov    eax,0x0
c001ac6c:	eb 0a                	jmp    c001ac78 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001ac6e:	66 90                	xchg   ax,ax
c001ac70:	b8 01 00 00 00       	mov    eax,0x1
c001ac75:	8d 76 00             	lea    esi,[esi+0x0]
c001ac78:	83 c4 58             	add    esp,0x58
c001ac7b:	5f                   	pop    edi
c001ac7c:	c3                   	ret    
c001ac7d:	90                   	nop
c001ac7e:	66 90                	xchg   ax,ax

c001ac80 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001ac80:	83 ec 2c             	sub    esp,0x2c
c001ac83:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001ac8b:	83 ec 08             	sub    esp,0x8
c001ac8e:	68 5c 5f 02 c0       	push   0xc0025f5c
c001ac93:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ac97:	e8 30 5b fe ff       	call   c00007cc <strcmp>
c001ac9c:	83 c4 10             	add    esp,0x10
c001ac9f:	85 c0                	test   eax,eax
c001aca1:	0f 94 c0             	sete   al
c001aca4:	84 c0                	test   al,al
c001aca6:	74 10                	je     c001acb8 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001aca8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001acb0:	e9 b3 00 00 00       	jmp    c001ad68 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001acb5:	8d 76 00             	lea    esi,[esi+0x0]
c001acb8:	83 ec 08             	sub    esp,0x8
c001acbb:	68 4e 5f 02 c0       	push   0xc0025f4e
c001acc0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001acc4:	e8 03 5b fe ff       	call   c00007cc <strcmp>
c001acc9:	83 c4 10             	add    esp,0x10
c001accc:	85 c0                	test   eax,eax
c001acce:	0f 94 c0             	sete   al
c001acd1:	84 c0                	test   al,al
c001acd3:	74 0f                	je     c001ace4 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001acd5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001acdd:	e9 86 00 00 00       	jmp    c001ad68 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001ace2:	66 90                	xchg   ax,ax
c001ace4:	83 ec 08             	sub    esp,0x8
c001ace7:	68 54 5f 02 c0       	push   0xc0025f54
c001acec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001acf0:	e8 d7 5a fe ff       	call   c00007cc <strcmp>
c001acf5:	83 c4 10             	add    esp,0x10
c001acf8:	85 c0                	test   eax,eax
c001acfa:	0f 94 c0             	sete   al
c001acfd:	84 c0                	test   al,al
c001acff:	74 0b                	je     c001ad0c <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001ad01:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ad09:	eb 5d                	jmp    c001ad68 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001ad0b:	90                   	nop
c001ad0c:	83 ec 08             	sub    esp,0x8
c001ad0f:	68 2c 35 02 c0       	push   0xc002352c
c001ad14:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ad18:	e8 af 5a fe ff       	call   c00007cc <strcmp>
c001ad1d:	83 c4 10             	add    esp,0x10
c001ad20:	85 c0                	test   eax,eax
c001ad22:	0f 94 c0             	sete   al
c001ad25:	84 c0                	test   al,al
c001ad27:	74 0b                	je     c001ad34 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001ad29:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001ad31:	eb 35                	jmp    c001ad68 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001ad33:	90                   	nop
c001ad34:	83 ec 08             	sub    esp,0x8
c001ad37:	68 5a 5f 02 c0       	push   0xc0025f5a
c001ad3c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ad40:	e8 87 5a fe ff       	call   c00007cc <strcmp>
c001ad45:	83 c4 10             	add    esp,0x10
c001ad48:	85 c0                	test   eax,eax
c001ad4a:	0f 94 c0             	sete   al
c001ad4d:	84 c0                	test   al,al
c001ad4f:	74 0b                	je     c001ad5c <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001ad51:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001ad59:	eb 0d                	jmp    c001ad68 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001ad5b:	90                   	nop
c001ad5c:	b8 08 00 00 00       	mov    eax,0x8
c001ad61:	e9 ea 00 00 00       	jmp    c001ae50 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001ad66:	66 90                	xchg   ax,ax
c001ad68:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001ad6f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001ad74:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad78:	8b 04 85 20 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ee0]
c001ad7f:	83 f8 ff             	cmp    eax,0xffffffff
c001ad82:	75 34                	jne    c001adb8 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001ad84:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ad88:	88 c2                	mov    dl,al
c001ad8a:	a1 00 91 02 c0       	mov    eax,ds:0xc0029100
c001ad8f:	01 d0                	add    eax,edx
c001ad91:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ad95:	8b 15 00 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029100
c001ad9b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad9f:	89 14 85 20 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ee0],edx
c001ada6:	a1 00 91 02 c0       	mov    eax,ds:0xc0029100
c001adab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001adaf:	89 14 85 a0 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6e60],edx
c001adb6:	eb 18                	jmp    c001add0 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001adb8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001adbc:	88 c2                	mov    dl,al
c001adbe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001adc2:	8b 04 85 20 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ee0]
c001adc9:	01 d0                	add    eax,edx
c001adcb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001adcf:	90                   	nop
c001add0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001add4:	88 04 24             	mov    BYTE PTR [esp],al
c001add7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001addb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001addf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ade7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001adec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001adf4:	83 ec 0c             	sub    esp,0xc
c001adf7:	68 00 20 00 00       	push   0x2000
c001adfc:	e8 06 ec fe ff       	call   c0009a07 <malloc>
c001ae01:	83 c4 10             	add    esp,0x10
c001ae04:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ae08:	68 00 20 00 00       	push   0x2000
c001ae0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae11:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ae15:	50                   	push   eax
c001ae16:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001ae1a:	50                   	push   eax
c001ae1b:	e8 81 c6 fe ff       	call   c00074a1 <f_mkfs>
c001ae20:	83 c4 10             	add    esp,0x10
c001ae23:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ae27:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ae2c:	75 0a                	jne    c001ae38 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001ae2e:	b8 00 00 00 00       	mov    eax,0x0
c001ae33:	eb 1b                	jmp    c001ae50 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001ae35:	8d 76 00             	lea    esi,[esi+0x0]
c001ae38:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001ae3d:	75 09                	jne    c001ae48 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001ae3f:	b8 09 00 00 00       	mov    eax,0x9
c001ae44:	eb 0a                	jmp    c001ae50 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001ae46:	66 90                	xchg   ax,ax
c001ae48:	b8 01 00 00 00       	mov    eax,0x1
c001ae4d:	8d 76 00             	lea    esi,[esi+0x0]
c001ae50:	83 c4 2c             	add    esp,0x2c
c001ae53:	c3                   	ret    

c001ae54 <FAT::tryMount(LogicalDisk*, int)>:
c001ae54:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001ae5a:	a1 00 91 02 c0       	mov    eax,ds:0xc0029100
c001ae5f:	83 f8 14             	cmp    eax,0x14
c001ae62:	75 18                	jne    c001ae7c <FAT::tryMount(LogicalDisk*, int)+0x28>
c001ae64:	83 ec 0c             	sub    esp,0xc
c001ae67:	68 60 5f 02 c0       	push   0xc0025f60
c001ae6c:	e8 32 9a ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c001ae71:	83 c4 10             	add    esp,0x10
c001ae74:	b0 00                	mov    al,0x0
c001ae76:	e9 e9 01 00 00       	jmp    c001b064 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001ae7b:	90                   	nop
c001ae7c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001ae83:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ae89:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ae8f:	3d 00 02 00 00       	cmp    eax,0x200
c001ae94:	74 0a                	je     c001aea0 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001ae96:	b0 00                	mov    al,0x0
c001ae98:	e9 c7 01 00 00       	jmp    c001b064 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001ae9d:	8d 76 00             	lea    esi,[esi+0x0]
c001aea0:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001aea8:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001aeaf:	8b 04 85 20 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ee0]
c001aeb6:	83 f8 ff             	cmp    eax,0xffffffff
c001aeb9:	74 09                	je     c001aec4 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001aebb:	b0 01                	mov    al,0x1
c001aebd:	e9 a2 01 00 00       	jmp    c001b064 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001aec2:	66 90                	xchg   ax,ax
c001aec4:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001aece:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001aed6:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001aedd:	88 c2                	mov    dl,al
c001aedf:	a1 00 91 02 c0       	mov    eax,ds:0xc0029100
c001aee4:	01 d0                	add    eax,edx
c001aee6:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001aeed:	8b 15 00 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029100
c001aef3:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001aefa:	89 14 85 20 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ee0],edx
c001af01:	a1 00 91 02 c0       	mov    eax,ds:0xc0029100
c001af06:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001af0d:	89 14 85 a0 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6e60],edx
c001af14:	83 ec 0c             	sub    esp,0xc
c001af17:	68 54 02 00 00       	push   0x254
c001af1c:	e8 e6 ea fe ff       	call   c0009a07 <malloc>
c001af21:	83 c4 10             	add    esp,0x10
c001af24:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001af2b:	83 ec 04             	sub    esp,0x4
c001af2e:	6a 00                	push   0x0
c001af30:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001af37:	50                   	push   eax
c001af38:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001af3f:	e8 e5 9e fe ff       	call   c0004e29 <f_mount>
c001af44:	83 c4 10             	add    esp,0x10
c001af47:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001af4e:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001af56:	74 1c                	je     c001af74 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001af58:	83 ec 0c             	sub    esp,0xc
c001af5b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001af62:	e8 c0 ea fe ff       	call   c0009a27 <rfree>
c001af67:	83 c4 10             	add    esp,0x10
c001af6a:	b0 00                	mov    al,0x0
c001af6c:	e9 f3 00 00 00       	jmp    c001b064 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001af71:	8d 76 00             	lea    esi,[esi+0x0]
c001af74:	83 ec 04             	sub    esp,0x4
c001af77:	68 00 01 00 00       	push   0x100
c001af7c:	6a 00                	push   0x0
c001af7e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001af85:	50                   	push   eax
c001af86:	e8 f9 56 fe ff       	call   c0000684 <memset>
c001af8b:	83 c4 10             	add    esp,0x10
c001af8e:	83 ec 08             	sub    esp,0x8
c001af91:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001af98:	50                   	push   eax
c001af99:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001afa0:	50                   	push   eax
c001afa1:	e8 da 58 fe ff       	call   c0000880 <strcat>
c001afa6:	83 c4 10             	add    esp,0x10
c001afa9:	83 ec 08             	sub    esp,0x8
c001afac:	68 6e 5f 02 c0       	push   0xc0025f6e
c001afb1:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001afb8:	50                   	push   eax
c001afb9:	e8 c2 58 fe ff       	call   c0000880 <strcat>
c001afbe:	83 c4 10             	add    esp,0x10
c001afc1:	83 ec 04             	sub    esp,0x4
c001afc4:	6a 01                	push   0x1
c001afc6:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001afcd:	50                   	push   eax
c001afce:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001afd2:	50                   	push   eax
c001afd3:	e8 b3 9e fe ff       	call   c0004e8b <f_open>
c001afd8:	83 c4 10             	add    esp,0x10
c001afdb:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001afe2:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001afe9:	85 c0                	test   eax,eax
c001afeb:	74 0b                	je     c001aff8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001afed:	78 31                	js     c001b020 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001afef:	83 e8 04             	sub    eax,0x4
c001aff2:	83 f8 01             	cmp    eax,0x1
c001aff5:	77 29                	ja     c001b020 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001aff7:	90                   	nop
c001aff8:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001b000:	83 ec 0c             	sub    esp,0xc
c001b003:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b007:	50                   	push   eax
c001b008:	e8 d0 a9 fe ff       	call   c00059dd <f_close>
c001b00d:	83 c4 10             	add    esp,0x10
c001b010:	90                   	nop
c001b011:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001b019:	74 41                	je     c001b05c <FAT::tryMount(LogicalDisk*, int)+0x208>
c001b01b:	eb 33                	jmp    c001b050 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001b01d:	8d 76 00             	lea    esi,[esi+0x0]
c001b020:	83 ec 0c             	sub    esp,0xc
c001b023:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b02a:	e8 f8 e9 fe ff       	call   c0009a27 <rfree>
c001b02f:	83 c4 10             	add    esp,0x10
c001b032:	83 ec 04             	sub    esp,0x4
c001b035:	6a 00                	push   0x0
c001b037:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b03e:	50                   	push   eax
c001b03f:	6a 00                	push   0x0
c001b041:	e8 e3 9d fe ff       	call   c0004e29 <f_mount>
c001b046:	83 c4 10             	add    esp,0x10
c001b049:	b0 00                	mov    al,0x0
c001b04b:	eb 17                	jmp    c001b064 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b04d:	8d 76 00             	lea    esi,[esi+0x0]
c001b050:	a1 00 91 02 c0       	mov    eax,ds:0xc0029100
c001b055:	40                   	inc    eax
c001b056:	a3 00 91 02 c0       	mov    ds:0xc0029100,eax
c001b05b:	90                   	nop
c001b05c:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001b063:	90                   	nop
c001b064:	81 c4 6c 03 00 00    	add    esp,0x36c
c001b06a:	c3                   	ret    
c001b06b:	90                   	nop

c001b06c <FAT::allocateSwapfile(char const*, int)>:
c001b06c:	55                   	push   ebp
c001b06d:	57                   	push   edi
c001b06e:	56                   	push   esi
c001b06f:	53                   	push   ebx
c001b070:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001b076:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001b081:	83 ec 0c             	sub    esp,0xc
c001b084:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001b08b:	e8 77 e9 fe ff       	call   c0009a07 <malloc>
c001b090:	83 c4 10             	add    esp,0x10
c001b093:	89 c7                	mov    edi,eax
c001b095:	a1 30 90 02 c0       	mov    eax,ds:0xc0029030
c001b09a:	83 ec 04             	sub    esp,0x4
c001b09d:	50                   	push   eax
c001b09e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001b0a5:	57                   	push   edi
c001b0a6:	e8 b7 21 ff ff       	call   c000d262 <File::File(char const*, Process*)>
c001b0ab:	83 c4 10             	add    esp,0x10
c001b0ae:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001b0b5:	83 ec 04             	sub    esp,0x4
c001b0b8:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b0bc:	50                   	push   eax
c001b0bd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b0c1:	50                   	push   eax
c001b0c2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b0c9:	e8 e2 24 ff ff       	call   c000d5b0 <File::stat(unsigned long long*, bool*)>
c001b0ce:	83 c4 10             	add    esp,0x10
c001b0d1:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b0d8:	c1 e0 14             	shl    eax,0x14
c001b0db:	89 c7                	mov    edi,eax
c001b0dd:	89 c5                	mov    ebp,eax
c001b0df:	c1 fd 1f             	sar    ebp,0x1f
c001b0e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b0ea:	89 f9                	mov    ecx,edi
c001b0ec:	31 c1                	xor    ecx,eax
c001b0ee:	89 cb                	mov    ebx,ecx
c001b0f0:	89 e9                	mov    ecx,ebp
c001b0f2:	31 d1                	xor    ecx,edx
c001b0f4:	89 ce                	mov    esi,ecx
c001b0f6:	89 f0                	mov    eax,esi
c001b0f8:	09 d8                	or     eax,ebx
c001b0fa:	0f 84 98 00 00 00    	je     c001b198 <FAT::allocateSwapfile(char const*, int)+0x12c>
c001b100:	83 ec 0c             	sub    esp,0xc
c001b103:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b10a:	e8 6d 23 ff ff       	call   c000d47c <File::unlink()>
c001b10f:	83 c4 10             	add    esp,0x10
c001b112:	83 ec 08             	sub    esp,0x8
c001b115:	6a 12                	push   0x12
c001b117:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b11e:	e8 e1 21 ff ff       	call   c000d304 <File::open(FileOpenMode)>
c001b123:	83 c4 10             	add    esp,0x10
c001b126:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b12d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b133:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b13a:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b141:	c1 e0 14             	shl    eax,0x14
c001b144:	99                   	cdq    
c001b145:	6a 01                	push   0x1
c001b147:	52                   	push   edx
c001b148:	50                   	push   eax
c001b149:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001b150:	e8 38 bf fe ff       	call   c000708d <f_expand>
c001b155:	83 c4 10             	add    esp,0x10
c001b158:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b15f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b161:	83 c0 10             	add    eax,0x10
c001b164:	8b 00                	mov    eax,DWORD PTR [eax]
c001b166:	83 ec 0c             	sub    esp,0xc
c001b169:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b16d:	52                   	push   edx
c001b16e:	8d 54 24 30          	lea    edx,[esp+0x30]
c001b172:	52                   	push   edx
c001b173:	6a 00                	push   0x0
c001b175:	68 00 04 00 00       	push   0x400
c001b17a:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b181:	ff d0                	call   eax
c001b183:	83 c4 20             	add    esp,0x20
c001b186:	83 ec 0c             	sub    esp,0xc
c001b189:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b190:	e8 cd 21 ff ff       	call   c000d362 <File::close()>
c001b195:	83 c4 10             	add    esp,0x10
c001b198:	83 ec 08             	sub    esp,0x8
c001b19b:	6a 01                	push   0x1
c001b19d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b1a4:	e8 5b 21 ff ff       	call   c000d304 <File::open(FileOpenMode)>
c001b1a9:	83 c4 10             	add    esp,0x10
c001b1ac:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b1b3:	8b 00                	mov    eax,DWORD PTR [eax]
c001b1b5:	83 c0 0c             	add    eax,0xc
c001b1b8:	8b 00                	mov    eax,DWORD PTR [eax]
c001b1ba:	83 ec 0c             	sub    esp,0xc
c001b1bd:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b1c1:	52                   	push   edx
c001b1c2:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001b1c6:	52                   	push   edx
c001b1c7:	6a 00                	push   0x0
c001b1c9:	6a 04                	push   0x4
c001b1cb:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b1d2:	ff d0                	call   eax
c001b1d4:	83 c4 20             	add    esp,0x20
c001b1d7:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b1de:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b1e4:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b1eb:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001b1f2:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001b1f5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b1f8:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001b1ff:	83 ec 0c             	sub    esp,0xc
c001b202:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b209:	e8 54 21 ff ff       	call   c000d362 <File::close()>
c001b20e:	83 c4 10             	add    esp,0x10
c001b211:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001b218:	ba 00 00 00 00       	mov    edx,0x0
c001b21d:	81 c4 3c 04 00 00    	add    esp,0x43c
c001b223:	5b                   	pop    ebx
c001b224:	5e                   	pop    esi
c001b225:	5f                   	pop    edi
c001b226:	5d                   	pop    ebp
c001b227:	c3                   	ret    

c001b228 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001b228:	57                   	push   edi
c001b229:	56                   	push   esi
c001b22a:	53                   	push   ebx
c001b22b:	81 ec 50 02 00 00    	sub    esp,0x250
c001b231:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001b239:	74 0d                	je     c001b248 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001b23b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001b243:	75 0f                	jne    c001b254 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001b245:	8d 76 00             	lea    esi,[esi+0x0]
c001b248:	b8 04 00 00 00       	mov    eax,0x4
c001b24d:	e9 36 01 00 00       	jmp    c001b388 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b252:	66 90                	xchg   ax,ax
c001b254:	83 ec 08             	sub    esp,0x8
c001b257:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b25e:	50                   	push   eax
c001b25f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001b266:	e8 7c ad fe ff       	call   c0005fe7 <f_readdir>
c001b26b:	83 c4 10             	add    esp,0x10
c001b26e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001b275:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001b27c:	83 ec 0c             	sub    esp,0xc
c001b27f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001b286:	83 c0 1a             	add    eax,0x1a
c001b289:	50                   	push   eax
c001b28a:	e8 11 54 fe ff       	call   c00006a0 <strlen>
c001b28f:	83 c4 10             	add    esp,0x10
c001b292:	ba 00 00 00 00       	mov    edx,0x0
c001b297:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b29b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b29f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001b2a6:	0f b6 c0             	movzx  eax,al
c001b2a9:	83 e0 10             	and    eax,0x10
c001b2ac:	74 0a                	je     c001b2b8 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001b2ae:	b8 02 00 00 00       	mov    eax,0x2
c001b2b3:	eb 0b                	jmp    c001b2c0 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001b2b5:	8d 76 00             	lea    esi,[esi+0x0]
c001b2b8:	b8 01 00 00 00       	mov    eax,0x1
c001b2bd:	8d 76 00             	lea    esi,[esi+0x0]
c001b2c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b2c4:	83 ec 08             	sub    esp,0x8
c001b2c7:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b2ce:	83 c0 1a             	add    eax,0x1a
c001b2d1:	50                   	push   eax
c001b2d2:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b2d6:	83 c0 10             	add    eax,0x10
c001b2d9:	50                   	push   eax
c001b2da:	e8 61 54 fe ff       	call   c0000740 <strcpy>
c001b2df:	83 c4 10             	add    esp,0x10
c001b2e2:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001b2e9:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001b2f0:	8d 44 24 04          	lea    eax,[esp+0x4]
c001b2f4:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001b2fb:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001b302:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001b309:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001b310:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001b317:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001b31e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001b325:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001b32c:	89 c6                	mov    esi,eax
c001b32e:	89 d7                	mov    edi,edx
c001b330:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b332:	89 c8                	mov    eax,ecx
c001b334:	89 fa                	mov    edx,edi
c001b336:	89 f3                	mov    ebx,esi
c001b338:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001b33f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001b346:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001b34d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001b354:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b35a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001b361:	84 c0                	test   al,al
c001b363:	75 07                	jne    c001b36c <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001b365:	b8 07 00 00 00       	mov    eax,0x7
c001b36a:	eb 1c                	jmp    c001b388 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b36c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001b373:	85 c0                	test   eax,eax
c001b375:	75 09                	jne    c001b380 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001b377:	b8 00 00 00 00       	mov    eax,0x0
c001b37c:	eb 0a                	jmp    c001b388 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b37e:	66 90                	xchg   ax,ax
c001b380:	b8 01 00 00 00       	mov    eax,0x1
c001b385:	8d 76 00             	lea    esi,[esi+0x0]
c001b388:	81 c4 50 02 00 00    	add    esp,0x250
c001b38e:	5b                   	pop    ebx
c001b38f:	5e                   	pop    esi
c001b390:	5f                   	pop    edi
c001b391:	c3                   	ret    
c001b392:	66 90                	xchg   ax,ax

c001b394 <FAT::read(void*, unsigned long, void*, int*)>:
c001b394:	83 ec 1c             	sub    esp,0x1c
c001b397:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b39c:	74 0a                	je     c001b3a8 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001b39e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b3a3:	75 0b                	jne    c001b3b0 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001b3a5:	8d 76 00             	lea    esi,[esi+0x0]
c001b3a8:	b8 04 00 00 00       	mov    eax,0x4
c001b3ad:	eb 41                	jmp    c001b3f0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b3af:	90                   	nop
c001b3b0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b3b4:	50                   	push   eax
c001b3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b3bd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b3c1:	e8 01 9f fe ff       	call   c00052c7 <f_read>
c001b3c6:	83 c4 10             	add    esp,0x10
c001b3c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b3cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b3d1:	89 c2                	mov    edx,eax
c001b3d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b3d7:	89 10                	mov    DWORD PTR [eax],edx
c001b3d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b3dd:	85 c0                	test   eax,eax
c001b3df:	75 07                	jne    c001b3e8 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001b3e1:	b8 00 00 00 00       	mov    eax,0x0
c001b3e6:	eb 08                	jmp    c001b3f0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b3e8:	b8 01 00 00 00       	mov    eax,0x1
c001b3ed:	8d 76 00             	lea    esi,[esi+0x0]
c001b3f0:	83 c4 1c             	add    esp,0x1c
c001b3f3:	c3                   	ret    

c001b3f4 <FAT::write(void*, unsigned long, void*, int*)>:
c001b3f4:	83 ec 1c             	sub    esp,0x1c
c001b3f7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b3fc:	74 0a                	je     c001b408 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001b3fe:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b403:	75 0b                	jne    c001b410 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001b405:	8d 76 00             	lea    esi,[esi+0x0]
c001b408:	b8 04 00 00 00       	mov    eax,0x4
c001b40d:	eb 41                	jmp    c001b450 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b40f:	90                   	nop
c001b410:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b414:	50                   	push   eax
c001b415:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b41d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b421:	e8 21 a1 fe ff       	call   c0005547 <f_write>
c001b426:	83 c4 10             	add    esp,0x10
c001b429:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b42d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b431:	89 c2                	mov    edx,eax
c001b433:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b437:	89 10                	mov    DWORD PTR [eax],edx
c001b439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b43d:	85 c0                	test   eax,eax
c001b43f:	75 07                	jne    c001b448 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001b441:	b8 00 00 00 00       	mov    eax,0x0
c001b446:	eb 08                	jmp    c001b450 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b448:	b8 01 00 00 00       	mov    eax,0x1
c001b44d:	8d 76 00             	lea    esi,[esi+0x0]
c001b450:	83 c4 1c             	add    esp,0x1c
c001b453:	c3                   	ret    

c001b454 <FAT::close(void*)>:
c001b454:	83 ec 1c             	sub    esp,0x1c
c001b457:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b45c:	75 0a                	jne    c001b468 <FAT::close(void*)+0x14>
c001b45e:	b8 04 00 00 00       	mov    eax,0x4
c001b463:	eb 3f                	jmp    c001b4a4 <FAT::close(void*)+0x50>
c001b465:	8d 76 00             	lea    esi,[esi+0x0]
c001b468:	83 ec 0c             	sub    esp,0xc
c001b46b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b46f:	e8 69 a5 fe ff       	call   c00059dd <f_close>
c001b474:	83 c4 10             	add    esp,0x10
c001b477:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b47b:	83 ec 0c             	sub    esp,0xc
c001b47e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b482:	e8 90 e5 fe ff       	call   c0009a17 <free>
c001b487:	83 c4 10             	add    esp,0x10
c001b48a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b48e:	85 c0                	test   eax,eax
c001b490:	75 0a                	jne    c001b49c <FAT::close(void*)+0x48>
c001b492:	b8 00 00 00 00       	mov    eax,0x0
c001b497:	eb 0b                	jmp    c001b4a4 <FAT::close(void*)+0x50>
c001b499:	8d 76 00             	lea    esi,[esi+0x0]
c001b49c:	b8 01 00 00 00       	mov    eax,0x1
c001b4a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b4a4:	83 c4 1c             	add    esp,0x1c
c001b4a7:	c3                   	ret    

c001b4a8 <FAT::closeDir(void*)>:
c001b4a8:	83 ec 1c             	sub    esp,0x1c
c001b4ab:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b4b0:	75 0a                	jne    c001b4bc <FAT::closeDir(void*)+0x14>
c001b4b2:	b8 04 00 00 00       	mov    eax,0x4
c001b4b7:	eb 3f                	jmp    c001b4f8 <FAT::closeDir(void*)+0x50>
c001b4b9:	8d 76 00             	lea    esi,[esi+0x0]
c001b4bc:	83 ec 0c             	sub    esp,0xc
c001b4bf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b4c3:	e8 fd aa fe ff       	call   c0005fc5 <f_closedir>
c001b4c8:	83 c4 10             	add    esp,0x10
c001b4cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b4cf:	83 ec 0c             	sub    esp,0xc
c001b4d2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b4d6:	e8 3c e5 fe ff       	call   c0009a17 <free>
c001b4db:	83 c4 10             	add    esp,0x10
c001b4de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b4e2:	85 c0                	test   eax,eax
c001b4e4:	75 0a                	jne    c001b4f0 <FAT::closeDir(void*)+0x48>
c001b4e6:	b8 00 00 00 00       	mov    eax,0x0
c001b4eb:	eb 0b                	jmp    c001b4f8 <FAT::closeDir(void*)+0x50>
c001b4ed:	8d 76 00             	lea    esi,[esi+0x0]
c001b4f0:	b8 01 00 00 00       	mov    eax,0x1
c001b4f5:	8d 76 00             	lea    esi,[esi+0x0]
c001b4f8:	83 c4 1c             	add    esp,0x1c
c001b4fb:	c3                   	ret    

c001b4fc <FAT::seek(void*, unsigned long long)>:
c001b4fc:	83 ec 2c             	sub    esp,0x2c
c001b4ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b503:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b507:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b50b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b50f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001b514:	75 0a                	jne    c001b520 <FAT::seek(void*, unsigned long long)+0x24>
c001b516:	b8 04 00 00 00       	mov    eax,0x4
c001b51b:	eb 37                	jmp    c001b554 <FAT::seek(void*, unsigned long long)+0x58>
c001b51d:	8d 76 00             	lea    esi,[esi+0x0]
c001b520:	83 ec 04             	sub    esp,0x4
c001b523:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b527:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b52b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001b52f:	e8 d8 a4 fe ff       	call   c0005a0c <f_lseek>
c001b534:	83 c4 10             	add    esp,0x10
c001b537:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b53b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b53f:	85 c0                	test   eax,eax
c001b541:	75 09                	jne    c001b54c <FAT::seek(void*, unsigned long long)+0x50>
c001b543:	b8 00 00 00 00       	mov    eax,0x0
c001b548:	eb 0a                	jmp    c001b554 <FAT::seek(void*, unsigned long long)+0x58>
c001b54a:	66 90                	xchg   ax,ax
c001b54c:	b8 01 00 00 00       	mov    eax,0x1
c001b551:	8d 76 00             	lea    esi,[esi+0x0]
c001b554:	83 c4 2c             	add    esp,0x2c
c001b557:	c3                   	ret    

c001b558 <fatWrapperReadDisk>:
c001b558:	83 ec 1c             	sub    esp,0x1c
c001b55b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b55f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b563:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b567:	89 04 24             	mov    DWORD PTR [esp],eax
c001b56a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b56e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b572:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b577:	8b 04 85 00 81 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f00]
c001b57e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b582:	83 ec 0c             	sub    esp,0xc
c001b585:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b589:	52                   	push   edx
c001b58a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b58e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b592:	50                   	push   eax
c001b593:	e8 bc 4e ff ff       	call   c0010454 <LogicalDisk::read(unsigned long long, int, void*)>
c001b598:	83 c4 20             	add    esp,0x20
c001b59b:	83 c4 1c             	add    esp,0x1c
c001b59e:	c3                   	ret    
c001b59f:	90                   	nop

c001b5a0 <fatWrapperWriteDisk>:
c001b5a0:	83 ec 1c             	sub    esp,0x1c
c001b5a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5a7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b5ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b5af:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b5b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b5ba:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b5bf:	8b 04 85 00 81 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f00]
c001b5c6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b5ca:	83 ec 0c             	sub    esp,0xc
c001b5cd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b5d1:	52                   	push   edx
c001b5d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b5d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b5da:	50                   	push   eax
c001b5db:	e8 e0 4e ff ff       	call   c00104c0 <LogicalDisk::write(unsigned long long, int, void*)>
c001b5e0:	83 c4 20             	add    esp,0x20
c001b5e3:	83 c4 1c             	add    esp,0x1c
c001b5e6:	c3                   	ret    
c001b5e7:	90                   	nop

c001b5e8 <fatWrapperIoctl>:
c001b5e8:	53                   	push   ebx
c001b5e9:	83 ec 28             	sub    esp,0x28
c001b5ec:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b5f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b5f4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b5f8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b5fc:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001b601:	75 31                	jne    c001b634 <fatWrapperIoctl+0x4c>
c001b603:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b607:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b60b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b610:	8b 04 85 00 81 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f00]
c001b617:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b61d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b623:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b627:	66 89 02             	mov    WORD PTR [edx],ax
c001b62a:	b8 00 00 00 00       	mov    eax,0x0
c001b62f:	e9 bc 00 00 00       	jmp    c001b6f0 <fatWrapperIoctl+0x108>
c001b634:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001b639:	75 6d                	jne    c001b6a8 <fatWrapperIoctl+0xc0>
c001b63b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b63f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b643:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b648:	8b 04 85 00 81 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f00]
c001b64f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b655:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b65b:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b661:	89 c8                	mov    eax,ecx
c001b663:	89 da                	mov    edx,ebx
c001b665:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b669:	c1 e0 0a             	shl    eax,0xa
c001b66c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b671:	8b 0c 8d 00 81 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7f00]
c001b678:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b67e:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b684:	89 cb                	mov    ebx,ecx
c001b686:	c1 fb 1f             	sar    ebx,0x1f
c001b689:	53                   	push   ebx
c001b68a:	51                   	push   ecx
c001b68b:	52                   	push   edx
c001b68c:	50                   	push   eax
c001b68d:	e8 82 6d 00 00       	call   c0022414 <__udivdi3>
c001b692:	83 c4 10             	add    esp,0x10
c001b695:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b699:	89 01                	mov    DWORD PTR [ecx],eax
c001b69b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b69e:	b8 00 00 00 00       	mov    eax,0x0
c001b6a3:	eb 4b                	jmp    c001b6f0 <fatWrapperIoctl+0x108>
c001b6a5:	8d 76 00             	lea    esi,[esi+0x0]
c001b6a8:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b6ad:	75 09                	jne    c001b6b8 <fatWrapperIoctl+0xd0>
c001b6af:	b8 00 00 00 00       	mov    eax,0x0
c001b6b4:	eb 3a                	jmp    c001b6f0 <fatWrapperIoctl+0x108>
c001b6b6:	66 90                	xchg   ax,ax
c001b6b8:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001b6bd:	75 19                	jne    c001b6d8 <fatWrapperIoctl+0xf0>
c001b6bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b6c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b6c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b6cb:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b6d1:	b8 00 00 00 00       	mov    eax,0x0
c001b6d6:	eb 18                	jmp    c001b6f0 <fatWrapperIoctl+0x108>
c001b6d8:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001b6dd:	75 09                	jne    c001b6e8 <fatWrapperIoctl+0x100>
c001b6df:	b8 00 00 00 00       	mov    eax,0x0
c001b6e4:	eb 0a                	jmp    c001b6f0 <fatWrapperIoctl+0x108>
c001b6e6:	66 90                	xchg   ax,ax
c001b6e8:	b8 04 00 00 00       	mov    eax,0x4
c001b6ed:	8d 76 00             	lea    esi,[esi+0x0]
c001b6f0:	83 c4 28             	add    esp,0x28
c001b6f3:	5b                   	pop    ebx
c001b6f4:	c3                   	ret    
c001b6f5:	90                   	nop
c001b6f6:	66 90                	xchg   ax,ax

c001b6f8 <FAT::FAT()>:
c001b6f8:	83 ec 1c             	sub    esp,0x1c
c001b6fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6ff:	83 ec 0c             	sub    esp,0xc
c001b702:	50                   	push   eax
c001b703:	e8 06 19 ff ff       	call   c000d00e <Filesystem::Filesystem()>
c001b708:	83 c4 10             	add    esp,0x10
c001b70b:	ba 84 5f 02 c0       	mov    edx,0xc0025f84
c001b710:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b714:	89 10                	mov    DWORD PTR [eax],edx
c001b716:	c7 05 00 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029100,0x0
c001b720:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b728:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b72d:	7f 15                	jg     c001b744 <FAT::FAT()+0x4c>
c001b72f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b733:	c7 04 85 20 91 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6ee0],0xffffffff
c001b73e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b742:	eb e4                	jmp    c001b728 <FAT::FAT()+0x30>
c001b744:	90                   	nop
c001b745:	83 c4 1c             	add    esp,0x1c
c001b748:	c3                   	ret    
c001b749:	90                   	nop
c001b74a:	66 90                	xchg   ax,ax

c001b74c <FAT::fixFilepath(char*)>:
c001b74c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b750:	8a 00                	mov    al,BYTE PTR [eax]
c001b752:	3c 40                	cmp    al,0x40
c001b754:	7e 2e                	jle    c001b784 <FAT::fixFilepath(char*)+0x38>
c001b756:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b75a:	8a 00                	mov    al,BYTE PTR [eax]
c001b75c:	83 e8 41             	sub    eax,0x41
c001b75f:	88 c2                	mov    dl,al
c001b761:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b765:	88 10                	mov    BYTE PTR [eax],dl
c001b767:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b76b:	8a 00                	mov    al,BYTE PTR [eax]
c001b76d:	0f be c0             	movsx  eax,al
c001b770:	8b 04 85 20 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ee0]
c001b777:	83 c0 30             	add    eax,0x30
c001b77a:	88 c2                	mov    dl,al
c001b77c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b780:	88 10                	mov    BYTE PTR [eax],dl
c001b782:	66 90                	xchg   ax,ax
c001b784:	90                   	nop
c001b785:	c3                   	ret    
c001b786:	66 90                	xchg   ax,ax

c001b788 <FAT::open(char const*, void**, FileOpenMode)>:
c001b788:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b78e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b796:	74 0c                	je     c001b7a4 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001b798:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b7a0:	75 0e                	jne    c001b7b0 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001b7a2:	66 90                	xchg   ax,ax
c001b7a4:	b8 04 00 00 00       	mov    eax,0x4
c001b7a9:	e9 06 01 00 00       	jmp    c001b8b4 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b7ae:	66 90                	xchg   ax,ax
c001b7b0:	83 ec 08             	sub    esp,0x8
c001b7b3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b7ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b7be:	50                   	push   eax
c001b7bf:	e8 7c 4f fe ff       	call   c0000740 <strcpy>
c001b7c4:	83 c4 10             	add    esp,0x10
c001b7c7:	83 ec 08             	sub    esp,0x8
c001b7ca:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b7ce:	50                   	push   eax
c001b7cf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b7d6:	e8 71 ff ff ff       	call   c001b74c <FAT::fixFilepath(char*)>
c001b7db:	83 c4 10             	add    esp,0x10
c001b7de:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001b7e6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b7ed:	83 e0 01             	and    eax,0x1
c001b7f0:	74 0a                	je     c001b7fc <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001b7f2:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001b7fa:	66 90                	xchg   ax,ax
c001b7fc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b803:	83 e0 04             	and    eax,0x4
c001b806:	74 10                	je     c001b818 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001b808:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001b810:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b818:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b81f:	83 e0 02             	and    eax,0x2
c001b822:	74 08                	je     c001b82c <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001b824:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b82c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b833:	83 e0 08             	and    eax,0x8
c001b836:	74 08                	je     c001b840 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001b838:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001b840:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b847:	83 e0 10             	and    eax,0x10
c001b84a:	74 08                	je     c001b854 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001b84c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001b854:	83 ec 0c             	sub    esp,0xc
c001b857:	68 50 02 00 00       	push   0x250
c001b85c:	e8 a6 e1 fe ff       	call   c0009a07 <malloc>
c001b861:	83 c4 10             	add    esp,0x10
c001b864:	89 c2                	mov    edx,eax
c001b866:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b86d:	89 10                	mov    DWORD PTR [eax],edx
c001b86f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001b877:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b87e:	8b 00                	mov    eax,DWORD PTR [eax]
c001b880:	83 ec 04             	sub    esp,0x4
c001b883:	52                   	push   edx
c001b884:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b888:	52                   	push   edx
c001b889:	50                   	push   eax
c001b88a:	e8 fc 95 fe ff       	call   c0004e8b <f_open>
c001b88f:	83 c4 10             	add    esp,0x10
c001b892:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001b899:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001b8a1:	74 09                	je     c001b8ac <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001b8a3:	b8 01 00 00 00       	mov    eax,0x1
c001b8a8:	eb 0a                	jmp    c001b8b4 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b8aa:	66 90                	xchg   ax,ax
c001b8ac:	b8 00 00 00 00       	mov    eax,0x0
c001b8b1:	8d 76 00             	lea    esi,[esi+0x0]
c001b8b4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b8ba:	c3                   	ret    
c001b8bb:	90                   	nop

c001b8bc <FAT::openDir(char const*, void**)>:
c001b8bc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b8c2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b8ca:	74 0c                	je     c001b8d8 <FAT::openDir(char const*, void**)+0x1c>
c001b8cc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b8d4:	75 0e                	jne    c001b8e4 <FAT::openDir(char const*, void**)+0x28>
c001b8d6:	66 90                	xchg   ax,ax
c001b8d8:	b8 04 00 00 00       	mov    eax,0x4
c001b8dd:	e9 82 00 00 00       	jmp    c001b964 <FAT::openDir(char const*, void**)+0xa8>
c001b8e2:	66 90                	xchg   ax,ax
c001b8e4:	83 ec 08             	sub    esp,0x8
c001b8e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b8ee:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b8f2:	50                   	push   eax
c001b8f3:	e8 48 4e fe ff       	call   c0000740 <strcpy>
c001b8f8:	83 c4 10             	add    esp,0x10
c001b8fb:	83 ec 08             	sub    esp,0x8
c001b8fe:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b902:	50                   	push   eax
c001b903:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b90a:	e8 3d fe ff ff       	call   c001b74c <FAT::fixFilepath(char*)>
c001b90f:	83 c4 10             	add    esp,0x10
c001b912:	83 ec 0c             	sub    esp,0xc
c001b915:	6a 4c                	push   0x4c
c001b917:	e8 eb e0 fe ff       	call   c0009a07 <malloc>
c001b91c:	83 c4 10             	add    esp,0x10
c001b91f:	89 c2                	mov    edx,eax
c001b921:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b928:	89 10                	mov    DWORD PTR [eax],edx
c001b92a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b931:	8b 00                	mov    eax,DWORD PTR [eax]
c001b933:	83 ec 08             	sub    esp,0x8
c001b936:	8d 54 24 14          	lea    edx,[esp+0x14]
c001b93a:	52                   	push   edx
c001b93b:	50                   	push   eax
c001b93c:	e8 82 a5 fe ff       	call   c0005ec3 <f_opendir>
c001b941:	83 c4 10             	add    esp,0x10
c001b944:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b94b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001b953:	74 07                	je     c001b95c <FAT::openDir(char const*, void**)+0xa0>
c001b955:	b8 01 00 00 00       	mov    eax,0x1
c001b95a:	eb 08                	jmp    c001b964 <FAT::openDir(char const*, void**)+0xa8>
c001b95c:	b8 00 00 00 00       	mov    eax,0x0
c001b961:	8d 76 00             	lea    esi,[esi+0x0]
c001b964:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b96a:	c3                   	ret    
c001b96b:	90                   	nop

c001b96c <FAT::stat(char const*, unsigned long long*, bool*)>:
c001b96c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b972:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001b97a:	75 0c                	jne    c001b988 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001b97c:	b8 04 00 00 00       	mov    eax,0x4
c001b981:	e9 d2 00 00 00       	jmp    c001ba58 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b986:	66 90                	xchg   ax,ax
c001b988:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001b990:	75 0a                	jne    c001b99c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001b992:	b8 04 00 00 00       	mov    eax,0x4
c001b997:	e9 bc 00 00 00       	jmp    c001ba58 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b99c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001b9a4:	75 0a                	jne    c001b9b0 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001b9a6:	b8 04 00 00 00       	mov    eax,0x4
c001b9ab:	e9 a8 00 00 00       	jmp    c001ba58 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b9b0:	83 ec 08             	sub    esp,0x8
c001b9b3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b9ba:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b9c1:	50                   	push   eax
c001b9c2:	e8 79 4d fe ff       	call   c0000740 <strcpy>
c001b9c7:	83 c4 10             	add    esp,0x10
c001b9ca:	83 ec 08             	sub    esp,0x8
c001b9cd:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b9d4:	50                   	push   eax
c001b9d5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b9dc:	e8 6b fd ff ff       	call   c001b74c <FAT::fixFilepath(char*)>
c001b9e1:	83 c4 10             	add    esp,0x10
c001b9e4:	83 ec 08             	sub    esp,0x8
c001b9e7:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b9eb:	50                   	push   eax
c001b9ec:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b9f3:	50                   	push   eax
c001b9f4:	e8 89 a6 fe ff       	call   c0006082 <f_stat>
c001b9f9:	83 c4 10             	add    esp,0x10
c001b9fc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ba03:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ba0a:	85 c0                	test   eax,eax
c001ba0c:	74 0a                	je     c001ba18 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001ba0e:	83 f8 04             	cmp    eax,0x4
c001ba11:	74 35                	je     c001ba48 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001ba13:	eb 3b                	jmp    c001ba50 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001ba15:	8d 76 00             	lea    esi,[esi+0x0]
c001ba18:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ba1c:	0f b6 c0             	movzx  eax,al
c001ba1f:	83 e0 10             	and    eax,0x10
c001ba22:	0f 95 c2             	setne  dl
c001ba25:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001ba2c:	88 10                	mov    BYTE PTR [eax],dl
c001ba2e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ba31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ba35:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001ba3c:	89 01                	mov    DWORD PTR [ecx],eax
c001ba3e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ba41:	b8 00 00 00 00       	mov    eax,0x0
c001ba46:	eb 10                	jmp    c001ba58 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001ba48:	b8 02 00 00 00       	mov    eax,0x2
c001ba4d:	eb 09                	jmp    c001ba58 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001ba4f:	90                   	nop
c001ba50:	b8 01 00 00 00       	mov    eax,0x1
c001ba55:	8d 76 00             	lea    esi,[esi+0x0]
c001ba58:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ba5e:	c3                   	ret    
c001ba5f:	90                   	nop

c001ba60 <FAT::unlink(char const*)>:
c001ba60:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ba66:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ba6e:	75 08                	jne    c001ba78 <FAT::unlink(char const*)+0x18>
c001ba70:	b8 04 00 00 00       	mov    eax,0x4
c001ba75:	eb 61                	jmp    c001bad8 <FAT::unlink(char const*)+0x78>
c001ba77:	90                   	nop
c001ba78:	83 ec 08             	sub    esp,0x8
c001ba7b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ba82:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ba86:	50                   	push   eax
c001ba87:	e8 b4 4c fe ff       	call   c0000740 <strcpy>
c001ba8c:	83 c4 10             	add    esp,0x10
c001ba8f:	83 ec 08             	sub    esp,0x8
c001ba92:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ba96:	50                   	push   eax
c001ba97:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ba9e:	e8 a9 fc ff ff       	call   c001b74c <FAT::fixFilepath(char*)>
c001baa3:	83 c4 10             	add    esp,0x10
c001baa6:	83 ec 0c             	sub    esp,0xc
c001baa9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001baad:	50                   	push   eax
c001baae:	e8 21 a9 fe ff       	call   c00063d4 <f_unlink>
c001bab3:	83 c4 10             	add    esp,0x10
c001bab6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001babd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001bac4:	85 c0                	test   eax,eax
c001bac6:	75 08                	jne    c001bad0 <FAT::unlink(char const*)+0x70>
c001bac8:	b8 00 00 00 00       	mov    eax,0x0
c001bacd:	eb 09                	jmp    c001bad8 <FAT::unlink(char const*)+0x78>
c001bacf:	90                   	nop
c001bad0:	b8 01 00 00 00       	mov    eax,0x1
c001bad5:	8d 76 00             	lea    esi,[esi+0x0]
c001bad8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bade:	c3                   	ret    
c001badf:	90                   	nop

c001bae0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001bae0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001bae6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001baed:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001baf4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001baf8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bafc:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001bb04:	75 0a                	jne    c001bb10 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001bb06:	b8 04 00 00 00       	mov    eax,0x4
c001bb0b:	e9 30 01 00 00       	jmp    c001bc40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001bb10:	83 ec 08             	sub    esp,0x8
c001bb13:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001bb1a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bb1e:	50                   	push   eax
c001bb1f:	e8 1c 4c fe ff       	call   c0000740 <strcpy>
c001bb24:	83 c4 10             	add    esp,0x10
c001bb27:	83 ec 08             	sub    esp,0x8
c001bb2a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001bb2e:	50                   	push   eax
c001bb2f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001bb36:	e8 11 fc ff ff       	call   c001b74c <FAT::fixFilepath(char*)>
c001bb3b:	83 c4 10             	add    esp,0x10
c001bb3e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001bb46:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001bb4e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bb53:	83 e0 01             	and    eax,0x1
c001bb56:	74 08                	je     c001bb60 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001bb58:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001bb60:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bb65:	83 e0 02             	and    eax,0x2
c001bb68:	74 0a                	je     c001bb74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001bb6a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001bb72:	66 90                	xchg   ax,ax
c001bb74:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bb79:	83 e0 04             	and    eax,0x4
c001bb7c:	74 0a                	je     c001bb88 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001bb7e:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001bb86:	66 90                	xchg   ax,ax
c001bb88:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bb8d:	83 e0 08             	and    eax,0x8
c001bb90:	74 0a                	je     c001bb9c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001bb92:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001bb9a:	66 90                	xchg   ax,ax
c001bb9c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bba1:	83 e0 01             	and    eax,0x1
c001bba4:	74 0a                	je     c001bbb0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001bba6:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001bbae:	66 90                	xchg   ax,ax
c001bbb0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bbb5:	83 e0 02             	and    eax,0x2
c001bbb8:	74 0a                	je     c001bbc4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001bbba:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001bbc2:	66 90                	xchg   ax,ax
c001bbc4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bbc9:	83 e0 04             	and    eax,0x4
c001bbcc:	74 0a                	je     c001bbd8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001bbce:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001bbd6:	66 90                	xchg   ax,ax
c001bbd8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bbdd:	83 e0 08             	and    eax,0x8
c001bbe0:	74 0a                	je     c001bbec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001bbe2:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001bbea:	66 90                	xchg   ax,ax
c001bbec:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001bbf3:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001bbfa:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001bc02:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001bc0a:	83 ec 04             	sub    esp,0x4
c001bc0d:	52                   	push   edx
c001bc0e:	50                   	push   eax
c001bc0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bc13:	50                   	push   eax
c001bc14:	e8 5d ae fe ff       	call   c0006a76 <f_chmod>
c001bc19:	83 c4 10             	add    esp,0x10
c001bc1c:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001bc23:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001bc2a:	85 c0                	test   eax,eax
c001bc2c:	75 0a                	jne    c001bc38 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001bc2e:	b8 00 00 00 00       	mov    eax,0x0
c001bc33:	eb 0b                	jmp    c001bc40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001bc35:	8d 76 00             	lea    esi,[esi+0x0]
c001bc38:	b8 01 00 00 00       	mov    eax,0x1
c001bc3d:	8d 76 00             	lea    esi,[esi+0x0]
c001bc40:	81 c4 2c 01 00 00    	add    esp,0x12c
c001bc46:	c3                   	ret    
c001bc47:	90                   	nop

c001bc48 <FAT::rename(char const*, char const*)>:
c001bc48:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bc4e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001bc56:	74 0c                	je     c001bc64 <FAT::rename(char const*, char const*)+0x1c>
c001bc58:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001bc60:	75 0e                	jne    c001bc70 <FAT::rename(char const*, char const*)+0x28>
c001bc62:	66 90                	xchg   ax,ax
c001bc64:	b8 04 00 00 00       	mov    eax,0x4
c001bc69:	e9 9e 00 00 00       	jmp    c001bd0c <FAT::rename(char const*, char const*)+0xc4>
c001bc6e:	66 90                	xchg   ax,ax
c001bc70:	83 ec 08             	sub    esp,0x8
c001bc73:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bc7a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001bc81:	50                   	push   eax
c001bc82:	e8 b9 4a fe ff       	call   c0000740 <strcpy>
c001bc87:	83 c4 10             	add    esp,0x10
c001bc8a:	83 ec 08             	sub    esp,0x8
c001bc8d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001bc94:	50                   	push   eax
c001bc95:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bc9c:	e8 ab fa ff ff       	call   c001b74c <FAT::fixFilepath(char*)>
c001bca1:	83 c4 10             	add    esp,0x10
c001bca4:	83 ec 08             	sub    esp,0x8
c001bca7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001bcae:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bcb2:	50                   	push   eax
c001bcb3:	e8 88 4a fe ff       	call   c0000740 <strcpy>
c001bcb8:	83 c4 10             	add    esp,0x10
c001bcbb:	83 ec 08             	sub    esp,0x8
c001bcbe:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bcc2:	50                   	push   eax
c001bcc3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bcca:	e8 7d fa ff ff       	call   c001b74c <FAT::fixFilepath(char*)>
c001bccf:	83 c4 10             	add    esp,0x10
c001bcd2:	83 ec 08             	sub    esp,0x8
c001bcd5:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bcd9:	50                   	push   eax
c001bcda:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001bce1:	50                   	push   eax
c001bce2:	e8 9c aa fe ff       	call   c0006783 <f_rename>
c001bce7:	83 c4 10             	add    esp,0x10
c001bcea:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001bcf1:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001bcf8:	85 c0                	test   eax,eax
c001bcfa:	75 08                	jne    c001bd04 <FAT::rename(char const*, char const*)+0xbc>
c001bcfc:	b8 00 00 00 00       	mov    eax,0x0
c001bd01:	eb 09                	jmp    c001bd0c <FAT::rename(char const*, char const*)+0xc4>
c001bd03:	90                   	nop
c001bd04:	b8 01 00 00 00       	mov    eax,0x1
c001bd09:	8d 76 00             	lea    esi,[esi+0x0]
c001bd0c:	81 c4 1c 02 00 00    	add    esp,0x21c
c001bd12:	c3                   	ret    
c001bd13:	90                   	nop

c001bd14 <FAT::mkdir(char const*)>:
c001bd14:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bd1a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bd22:	75 08                	jne    c001bd2c <FAT::mkdir(char const*)+0x18>
c001bd24:	b8 04 00 00 00       	mov    eax,0x4
c001bd29:	eb 61                	jmp    c001bd8c <FAT::mkdir(char const*)+0x78>
c001bd2b:	90                   	nop
c001bd2c:	83 ec 08             	sub    esp,0x8
c001bd2f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bd36:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bd3a:	50                   	push   eax
c001bd3b:	e8 00 4a fe ff       	call   c0000740 <strcpy>
c001bd40:	83 c4 10             	add    esp,0x10
c001bd43:	83 ec 08             	sub    esp,0x8
c001bd46:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bd4a:	50                   	push   eax
c001bd4b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bd52:	e8 f5 f9 ff ff       	call   c001b74c <FAT::fixFilepath(char*)>
c001bd57:	83 c4 10             	add    esp,0x10
c001bd5a:	83 ec 0c             	sub    esp,0xc
c001bd5d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bd61:	50                   	push   eax
c001bd62:	e8 f0 a7 fe ff       	call   c0006557 <f_mkdir>
c001bd67:	83 c4 10             	add    esp,0x10
c001bd6a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bd71:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001bd78:	85 c0                	test   eax,eax
c001bd7a:	75 08                	jne    c001bd84 <FAT::mkdir(char const*)+0x70>
c001bd7c:	b8 00 00 00 00       	mov    eax,0x0
c001bd81:	eb 09                	jmp    c001bd8c <FAT::mkdir(char const*)+0x78>
c001bd83:	90                   	nop
c001bd84:	b8 01 00 00 00       	mov    eax,0x1
c001bd89:	8d 76 00             	lea    esi,[esi+0x0]
c001bd8c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bd92:	c3                   	ret    
c001bd93:	90                   	nop

c001bd94 <FAT::exists(char const*)>:
c001bd94:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001bd9a:	83 ec 08             	sub    esp,0x8
c001bd9d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bda4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bda8:	50                   	push   eax
c001bda9:	e8 92 49 fe ff       	call   c0000740 <strcpy>
c001bdae:	83 c4 10             	add    esp,0x10
c001bdb1:	83 ec 08             	sub    esp,0x8
c001bdb4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bdb8:	50                   	push   eax
c001bdb9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bdc0:	e8 87 f9 ff ff       	call   c001b74c <FAT::fixFilepath(char*)>
c001bdc5:	83 c4 10             	add    esp,0x10
c001bdc8:	83 ec 08             	sub    esp,0x8
c001bdcb:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001bdd2:	50                   	push   eax
c001bdd3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bdd7:	50                   	push   eax
c001bdd8:	e8 a5 a2 fe ff       	call   c0006082 <f_stat>
c001bddd:	83 c4 10             	add    esp,0x10
c001bde0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001bde7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001bdee:	85 c0                	test   eax,eax
c001bdf0:	75 06                	jne    c001bdf8 <FAT::exists(char const*)+0x64>
c001bdf2:	b0 01                	mov    al,0x1
c001bdf4:	eb 06                	jmp    c001bdfc <FAT::exists(char const*)+0x68>
c001bdf6:	66 90                	xchg   ax,ax
c001bdf8:	b0 00                	mov    al,0x0
c001bdfa:	66 90                	xchg   ax,ax
c001bdfc:	81 c4 2c 02 00 00    	add    esp,0x22c
c001be02:	c3                   	ret    
c001be03:	90                   	nop

c001be04 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001be04:	b8 08 00 00 00       	mov    eax,0x8
c001be09:	c3                   	ret    

c001be0a <ISO9660::seek(void*, unsigned long long)>:
c001be0a:	53                   	push   ebx
c001be0b:	b8 04 00 00 00       	mov    eax,0x4
c001be10:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001be14:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001be18:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001be1c:	85 d2                	test   edx,edx
c001be1e:	74 17                	je     c001be37 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001be20:	89 c8                	mov    eax,ecx
c001be22:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001be25:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001be28:	b8 01 00 00 00       	mov    eax,0x1
c001be2d:	73 08                	jae    c001be37 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001be2f:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001be32:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001be35:	31 c0                	xor    eax,eax
c001be37:	5b                   	pop    ebx
c001be38:	c3                   	ret    
c001be39:	90                   	nop

c001be3a <ISO9660::tell(void*, unsigned long long*)>:
c001be3a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001be3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be42:	85 d2                	test   edx,edx
c001be44:	74 12                	je     c001be58 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001be46:	85 c0                	test   eax,eax
c001be48:	74 0e                	je     c001be58 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001be4a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001be4d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001be50:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001be53:	89 10                	mov    DWORD PTR [eax],edx
c001be55:	31 c0                	xor    eax,eax
c001be57:	c3                   	ret    
c001be58:	b8 04 00 00 00       	mov    eax,0x4
c001be5d:	c3                   	ret    

c001be5e <ISO9660::getName()>:
c001be5e:	b8 e4 5f 02 c0       	mov    eax,0xc0025fe4
c001be63:	c3                   	ret    

c001be64 <ISO9660::stat(void*, unsigned long long*)>:
c001be64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001be68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be6c:	85 d2                	test   edx,edx
c001be6e:	74 12                	je     c001be82 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001be70:	85 c0                	test   eax,eax
c001be72:	74 0e                	je     c001be82 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001be74:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001be77:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001be7a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001be7d:	89 10                	mov    DWORD PTR [eax],edx
c001be7f:	31 c0                	xor    eax,eax
c001be81:	c3                   	ret    
c001be82:	b8 04 00 00 00       	mov    eax,0x4
c001be87:	c3                   	ret    

c001be88 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001be88:	b8 01 00 00 00       	mov    eax,0x1
c001be8d:	c3                   	ret    

c001be8e <ISO9660::unlink(char const*)>:
c001be8e:	b8 01 00 00 00       	mov    eax,0x1
c001be93:	c3                   	ret    

c001be94 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001be94:	b8 01 00 00 00       	mov    eax,0x1
c001be99:	c3                   	ret    

c001be9a <ISO9660::rename(char const*, char const*)>:
c001be9a:	b8 01 00 00 00       	mov    eax,0x1
c001be9f:	c3                   	ret    

c001bea0 <ISO9660::mkdir(char const*)>:
c001bea0:	b8 01 00 00 00       	mov    eax,0x1
c001bea5:	c3                   	ret    

c001bea6 <ISO9660::close(void*)>:
c001bea6:	83 ec 0c             	sub    esp,0xc
c001bea9:	b8 04 00 00 00       	mov    eax,0x4
c001beae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001beb2:	85 d2                	test   edx,edx
c001beb4:	74 0e                	je     c001bec4 <ISO9660::close(void*)+0x1e>
c001beb6:	83 ec 0c             	sub    esp,0xc
c001beb9:	52                   	push   edx
c001beba:	e8 58 db fe ff       	call   c0009a17 <free>
c001bebf:	83 c4 10             	add    esp,0x10
c001bec2:	31 c0                	xor    eax,eax
c001bec4:	83 c4 0c             	add    esp,0xc
c001bec7:	c3                   	ret    

c001bec8 <ISO9660::closeDir(void*)>:
c001bec8:	83 ec 0c             	sub    esp,0xc
c001becb:	b8 04 00 00 00       	mov    eax,0x4
c001bed0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bed4:	85 d2                	test   edx,edx
c001bed6:	74 0e                	je     c001bee6 <ISO9660::closeDir(void*)+0x1e>
c001bed8:	83 ec 0c             	sub    esp,0xc
c001bedb:	52                   	push   edx
c001bedc:	e8 36 db fe ff       	call   c0009a17 <free>
c001bee1:	83 c4 10             	add    esp,0x10
c001bee4:	31 c0                	xor    eax,eax
c001bee6:	83 c4 0c             	add    esp,0xc
c001bee9:	c3                   	ret    

c001beea <ISO9660::~ISO9660()>:
c001beea:	83 ec 0c             	sub    esp,0xc
c001beed:	ba 08 60 02 c0       	mov    edx,0xc0026008
c001bef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bef6:	89 10                	mov    DWORD PTR [eax],edx
c001bef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001befc:	83 ec 0c             	sub    esp,0xc
c001beff:	50                   	push   eax
c001bf00:	e8 2d 11 ff ff       	call   c000d032 <Filesystem::~Filesystem()>
c001bf05:	83 c4 10             	add    esp,0x10
c001bf08:	90                   	nop
c001bf09:	83 c4 0c             	add    esp,0xc
c001bf0c:	c3                   	ret    
c001bf0d:	90                   	nop

c001bf0e <ISO9660::~ISO9660()>:
c001bf0e:	83 ec 0c             	sub    esp,0xc
c001bf11:	83 ec 0c             	sub    esp,0xc
c001bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf18:	e8 cd ff ff ff       	call   c001beea <ISO9660::~ISO9660()>
c001bf1d:	83 c4 10             	add    esp,0x10
c001bf20:	83 ec 08             	sub    esp,0x8
c001bf23:	6a 08                	push   0x8
c001bf25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf29:	e8 e8 0c ff ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c001bf2e:	83 c4 10             	add    esp,0x10
c001bf31:	83 c4 0c             	add    esp,0xc
c001bf34:	c3                   	ret    

c001bf35 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001bf35:	55                   	push   ebp
c001bf36:	31 c9                	xor    ecx,ecx
c001bf38:	57                   	push   edi
c001bf39:	56                   	push   esi
c001bf3a:	53                   	push   ebx
c001bf3b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001bf3f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001bf43:	89 eb                	mov    ebx,ebp
c001bf45:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001bf49:	39 ce                	cmp    esi,ecx
c001bf4b:	7e 17                	jle    c001bf64 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001bf4d:	31 d2                	xor    edx,edx
c001bf4f:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001bf53:	7d 13                	jge    c001bf68 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001bf55:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001bf59:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001bf5c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001bf5f:	75 0d                	jne    c001bf6e <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001bf61:	42                   	inc    edx
c001bf62:	eb eb                	jmp    c001bf4f <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001bf64:	31 c0                	xor    eax,eax
c001bf66:	eb 0a                	jmp    c001bf72 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001bf68:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001bf6c:	eb 04                	jmp    c001bf72 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001bf6e:	41                   	inc    ecx
c001bf6f:	43                   	inc    ebx
c001bf70:	eb d7                	jmp    c001bf49 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001bf72:	5b                   	pop    ebx
c001bf73:	5e                   	pop    esi
c001bf74:	5f                   	pop    edi
c001bf75:	5d                   	pop    ebp
c001bf76:	c3                   	ret    

c001bf77 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001bf77:	57                   	push   edi
c001bf78:	56                   	push   esi
c001bf79:	53                   	push   ebx
c001bf7a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bf7e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf82:	39 0d 00 92 02 c0    	cmp    DWORD PTR ds:0xc0029200,ecx
c001bf88:	75 08                	jne    c001bf92 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c001bf8a:	38 05 74 75 02 c0    	cmp    BYTE PTR ds:0xc0027574,al
c001bf90:	74 2b                	je     c001bfbd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c001bf92:	83 ec 0c             	sub    esp,0xc
c001bf95:	a2 74 75 02 c0       	mov    ds:0xc0027574,al
c001bf9a:	68 20 92 02 c0       	push   0xc0029220
c001bf9f:	0f be c0             	movsx  eax,al
c001bfa2:	6a 01                	push   0x1
c001bfa4:	89 0d 00 92 02 c0    	mov    DWORD PTR ds:0xc0029200,ecx
c001bfaa:	31 db                	xor    ebx,ebx
c001bfac:	53                   	push   ebx
c001bfad:	51                   	push   ecx
c001bfae:	ff 34 85 fc 7f 02 c0 	push   DWORD PTR [eax*4-0x3ffd8004]
c001bfb5:	e8 9a 44 ff ff       	call   c0010454 <LogicalDisk::read(unsigned long long, int, void*)>
c001bfba:	83 c4 20             	add    esp,0x20
c001bfbd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bfc1:	be 20 92 02 c0       	mov    esi,0xc0029220
c001bfc6:	b9 00 08 00 00       	mov    ecx,0x800
c001bfcb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bfcd:	5b                   	pop    ebx
c001bfce:	5e                   	pop    esi
c001bfcf:	5f                   	pop    edi
c001bfd0:	c3                   	ret    
c001bfd1:	90                   	nop

c001bfd2 <ISO9660::tryMount(LogicalDisk*, int)>:
c001bfd2:	81 ec 10 08 00 00    	sub    esp,0x810
c001bfd8:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001bfdf:	83 c0 41             	add    eax,0x41
c001bfe2:	0f be c0             	movsx  eax,al
c001bfe5:	50                   	push   eax
c001bfe6:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bfea:	50                   	push   eax
c001bfeb:	6a 10                	push   0x10
c001bfed:	e8 85 ff ff ff       	call   c001bf77 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bff2:	83 c4 10             	add    esp,0x10
c001bff5:	31 c0                	xor    eax,eax
c001bff7:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001bffc:	75 1d                	jne    c001c01b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001bffe:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001c003:	75 16                	jne    c001c01b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001c005:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001c00a:	75 0f                	jne    c001c01b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001c00c:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001c011:	75 08                	jne    c001c01b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001c013:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001c018:	0f 94 c0             	sete   al
c001c01b:	81 c4 0c 08 00 00    	add    esp,0x80c
c001c021:	c3                   	ret    

c001c022 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001c022:	55                   	push   ebp
c001c023:	57                   	push   edi
c001c024:	56                   	push   esi
c001c025:	53                   	push   ebx
c001c026:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001c02c:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001c033:	85 ed                	test   ebp,ebp
c001c035:	0f 84 da 01 00 00    	je     c001c215 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c03b:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001c043:	0f 84 cc 01 00 00    	je     c001c215 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c049:	b8 01 00 00 00       	mov    eax,0x1
c001c04e:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001c052:	0f 85 c2 01 00 00    	jne    c001c21a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c058:	31 d2                	xor    edx,edx
c001c05a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001c061:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c064:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001c067:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c06a:	89 04 24             	mov    DWORD PTR [esp],eax
c001c06d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c071:	01 c8                	add    eax,ecx
c001c073:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c076:	11 da                	adc    edx,ebx
c001c078:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001c07c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c080:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c084:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c088:	19 d7                	sbb    edi,edx
c001c08a:	72 11                	jb     c001c09d <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001c08c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c08f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001c093:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c097:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c09b:	eb 0c                	jmp    c001c0a9 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001c09d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001c0a1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c0a5:	29 ce                	sub    esi,ecx
c001c0a7:	19 df                	sbb    edi,ebx
c001c0a9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c0ac:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001c0af:	0f a4 c2 0b          	shld   edx,eax,0xb
c001c0b3:	c1 e0 0b             	shl    eax,0xb
c001c0b6:	01 c8                	add    eax,ecx
c001c0b8:	11 da                	adc    edx,ebx
c001c0ba:	89 04 24             	mov    DWORD PTR [esp],eax
c001c0bd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c0c1:	51                   	push   ecx
c001c0c2:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c0c6:	50                   	push   eax
c001c0c7:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001c0cb:	53                   	push   ebx
c001c0cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c0d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0d4:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c0d8:	50                   	push   eax
c001c0d9:	e8 99 fe ff ff       	call   c001bf77 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c0de:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001c0e1:	b8 00 08 00 00       	mov    eax,0x800
c001c0e6:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001c0ec:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001c0f0:	29 d0                	sub    eax,edx
c001c0f2:	83 c4 10             	add    esp,0x10
c001c0f5:	89 f9                	mov    ecx,edi
c001c0f7:	39 c6                	cmp    esi,eax
c001c0f9:	83 d9 00             	sbb    ecx,0x0
c001c0fc:	7d 1b                	jge    c001c119 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001c0fe:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001c103:	75 12                	jne    c001c117 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001c105:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c10c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c112:	e9 fa 00 00 00       	jmp    c001c211 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001c117:	89 f0                	mov    eax,esi
c001c119:	01 d3                	add    ebx,edx
c001c11b:	31 d2                	xor    edx,edx
c001c11d:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c121:	39 c2                	cmp    edx,eax
c001c123:	7d 14                	jge    c001c139 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001c125:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001c12c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c130:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001c133:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001c136:	42                   	inc    edx
c001c137:	eb e8                	jmp    c001c121 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001c139:	89 c2                	mov    edx,eax
c001c13b:	85 c0                	test   eax,eax
c001c13d:	79 02                	jns    c001c141 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001c13f:	31 d2                	xor    edx,edx
c001c141:	01 c2                	add    edx,eax
c001c143:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001c146:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001c14d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001c151:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c155:	99                   	cdq    
c001c156:	01 c1                	add    ecx,eax
c001c158:	11 d3                	adc    ebx,edx
c001c15a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001c15e:	29 c6                	sub    esi,eax
c001c160:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001c164:	19 d7                	sbb    edi,edx
c001c166:	89 34 24             	mov    DWORD PTR [esp],esi
c001c169:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c16d:	b8 ff 07 00 00       	mov    eax,0x7ff
c001c172:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001c175:	b8 00 00 00 00       	mov    eax,0x0
c001c17a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001c17e:	7d 43                	jge    c001c1c3 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001c180:	52                   	push   edx
c001c181:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c185:	50                   	push   eax
c001c186:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c18a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c18e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c192:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c196:	50                   	push   eax
c001c197:	e8 db fd ff ff       	call   c001bf77 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c19c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001c1a4:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001c1a9:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001c1b1:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001c1b9:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001c1be:	83 c4 10             	add    esp,0x10
c001c1c1:	eb aa                	jmp    c001c16d <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001c1c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1c7:	0b 04 24             	or     eax,DWORD PTR [esp]
c001c1ca:	74 2a                	je     c001c1f6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001c1cc:	50                   	push   eax
c001c1cd:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c1d1:	50                   	push   eax
c001c1d2:	8d 74 24 28          	lea    esi,[esp+0x28]
c001c1d6:	56                   	push   esi
c001c1d7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c1db:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c1df:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001c1e3:	51                   	push   ecx
c001c1e4:	e8 8e fd ff ff       	call   c001bf77 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c1e9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c1ed:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c1f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c1f3:	83 c4 10             	add    esp,0x10
c001c1f6:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c1fd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c201:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c205:	89 18                	mov    DWORD PTR [eax],ebx
c001c207:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c20b:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c20e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c211:	31 c0                	xor    eax,eax
c001c213:	eb 05                	jmp    c001c21a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c215:	b8 04 00 00 00       	mov    eax,0x4
c001c21a:	81 c4 2c 08 00 00    	add    esp,0x82c
c001c220:	5b                   	pop    ebx
c001c221:	5e                   	pop    esi
c001c222:	5f                   	pop    edi
c001c223:	5d                   	pop    ebp
c001c224:	c3                   	ret    
c001c225:	90                   	nop

c001c226 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001c226:	55                   	push   ebp
c001c227:	57                   	push   edi
c001c228:	56                   	push   esi
c001c229:	53                   	push   ebx
c001c22a:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001c230:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001c237:	85 ed                	test   ebp,ebp
c001c239:	0f 84 51 02 00 00    	je     c001c490 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c23f:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001c247:	0f 84 43 02 00 00    	je     c001c490 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c24d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c250:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001c253:	75 0a                	jne    c001c25f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001c255:	b8 07 00 00 00       	mov    eax,0x7
c001c25a:	e9 36 02 00 00       	jmp    c001c495 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c25f:	50                   	push   eax
c001c260:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c264:	50                   	push   eax
c001c265:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c26c:	53                   	push   ebx
c001c26d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c270:	c1 e0 0b             	shl    eax,0xb
c001c273:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001c276:	c1 e8 0b             	shr    eax,0xb
c001c279:	50                   	push   eax
c001c27a:	e8 f8 fc ff ff       	call   c001bf77 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c27f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c282:	83 c4 10             	add    esp,0x10
c001c285:	89 c1                	mov    ecx,eax
c001c287:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001c28a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001c290:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001c293:	84 db                	test   bl,bl
c001c295:	0f 85 8b 00 00 00    	jne    c001c326 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001c29b:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001c2a1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c2a4:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001c2aa:	29 c6                	sub    esi,eax
c001c2ac:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001c2b0:	89 f3                	mov    ebx,esi
c001c2b2:	89 f1                	mov    ecx,esi
c001c2b4:	c1 fb 1f             	sar    ebx,0x1f
c001c2b7:	01 f0                	add    eax,esi
c001c2b9:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c2bc:	11 da                	adc    edx,ebx
c001c2be:	89 04 24             	mov    DWORD PTR [esp],eax
c001c2c1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c2c5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c2c8:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c2cb:	89 d8                	mov    eax,ebx
c001c2cd:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001c2d1:	ba 00 00 00 00       	mov    edx,0x0
c001c2d6:	19 f8                	sbb    eax,edi
c001c2d8:	b8 00 00 00 00       	mov    eax,0x0
c001c2dd:	73 08                	jae    c001c2e7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001c2df:	89 f0                	mov    eax,esi
c001c2e1:	89 fa                	mov    edx,edi
c001c2e3:	29 c8                	sub    eax,ecx
c001c2e5:	19 da                	sbb    edx,ebx
c001c2e7:	89 d7                	mov    edi,edx
c001c2e9:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c2ec:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c2ef:	09 c7                	or     edi,eax
c001c2f1:	0f 84 5e ff ff ff    	je     c001c255 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001c2f7:	57                   	push   edi
c001c2f8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c2fc:	50                   	push   eax
c001c2fd:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c304:	53                   	push   ebx
c001c305:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c308:	c1 e0 0b             	shl    eax,0xb
c001c30b:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001c30f:	c1 e8 0b             	shr    eax,0xb
c001c312:	50                   	push   eax
c001c313:	e8 5f fc ff ff       	call   c001bf77 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c318:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c31b:	83 c4 10             	add    esp,0x10
c001c31e:	25 ff 07 00 00       	and    eax,0x7ff
c001c323:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001c326:	31 ff                	xor    edi,edi
c001c328:	56                   	push   esi
c001c329:	6a 28                	push   0x28
c001c32b:	6a 00                	push   0x0
c001c32d:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c331:	50                   	push   eax
c001c332:	e8 4d 43 fe ff       	call   c0000684 <memset>
c001c337:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c33a:	25 ff 07 00 00       	and    eax,0x7ff
c001c33f:	89 c6                	mov    esi,eax
c001c341:	83 c6 21             	add    esi,0x21
c001c344:	83 d7 00             	adc    edi,0x0
c001c347:	83 c4 10             	add    esp,0x10
c001c34a:	31 c9                	xor    ecx,ecx
c001c34c:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001c353:	83 f9 28             	cmp    ecx,0x28
c001c356:	88 04 24             	mov    BYTE PTR [esp],al
c001c359:	0f 94 c2             	sete   dl
c001c35c:	88 d0                	mov    al,dl
c001c35e:	ba ff 07 00 00       	mov    edx,0x7ff
c001c363:	39 f2                	cmp    edx,esi
c001c365:	ba 00 00 00 00       	mov    edx,0x0
c001c36a:	19 fa                	sbb    edx,edi
c001c36c:	0f 92 c2             	setb   dl
c001c36f:	09 c2                	or     edx,eax
c001c371:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001c375:	0f 94 c0             	sete   al
c001c378:	08 d0                	or     al,dl
c001c37a:	75 16                	jne    c001c392 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c37c:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001c380:	74 10                	je     c001c392 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c382:	8a 04 24             	mov    al,BYTE PTR [esp]
c001c385:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001c389:	41                   	inc    ecx
c001c38a:	83 c6 01             	add    esi,0x1
c001c38d:	83 d7 00             	adc    edi,0x0
c001c390:	eb ba                	jmp    c001c34c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001c392:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001c399:	83 ec 0c             	sub    esp,0xc
c001c39c:	8d 74 24 24          	lea    esi,[esp+0x24]
c001c3a0:	56                   	push   esi
c001c3a1:	e8 fa 42 fe ff       	call   c00006a0 <strlen>
c001c3a6:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001c3ad:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c3b1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001c3b9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c3bc:	5a                   	pop    edx
c001c3bd:	25 ff 07 00 00       	and    eax,0x7ff
c001c3c2:	59                   	pop    ecx
c001c3c3:	01 f8                	add    eax,edi
c001c3c5:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001c3cb:	83 e0 02             	and    eax,0x2
c001c3ce:	3c 01                	cmp    al,0x1
c001c3d0:	19 c0                	sbb    eax,eax
c001c3d2:	83 c0 02             	add    eax,0x2
c001c3d5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c3d9:	56                   	push   esi
c001c3da:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c3de:	50                   	push   eax
c001c3df:	e8 5c 43 fe ff       	call   c0000740 <strcpy>
c001c3e4:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001c3e8:	83 c4 10             	add    esp,0x10
c001c3eb:	84 c0                	test   al,al
c001c3ed:	75 21                	jne    c001c410 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001c3ef:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001c3f7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c3ff:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c407:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001c40e:	eb 28                	jmp    c001c438 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c410:	fe c8                	dec    al
c001c412:	75 24                	jne    c001c438 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c414:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001c41c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c424:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c42c:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001c433:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001c438:	8d 74 24 40          	lea    esi,[esp+0x40]
c001c43c:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001c443:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001c44a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c44c:	0f b6 f3             	movzx  esi,bl
c001c44f:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001c456:	31 db                	xor    ebx,ebx
c001c458:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c45e:	89 df                	mov    edi,ebx
c001c460:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001c463:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c466:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001c469:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001c46c:	39 c6                	cmp    esi,eax
c001c46e:	19 d7                	sbb    edi,edx
c001c470:	72 10                	jb     c001c482 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001c472:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001c479:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001c480:	eb 0a                	jmp    c001c48c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001c482:	29 f0                	sub    eax,esi
c001c484:	19 da                	sbb    edx,ebx
c001c486:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c489:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c48c:	31 c0                	xor    eax,eax
c001c48e:	eb 05                	jmp    c001c495 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c490:	b8 04 00 00 00       	mov    eax,0x4
c001c495:	81 c4 5c 09 00 00    	add    esp,0x95c
c001c49b:	5b                   	pop    ebx
c001c49c:	5e                   	pop    esi
c001c49d:	5f                   	pop    edi
c001c49e:	5d                   	pop    ebp
c001c49f:	c3                   	ret    

c001c4a0 <readRoot(unsigned int*, unsigned int*, char)>:
c001c4a0:	57                   	push   edi
c001c4a1:	56                   	push   esi
c001c4a2:	81 ec 38 08 00 00    	sub    esp,0x838
c001c4a8:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001c4b0:	50                   	push   eax
c001c4b1:	8d 44 24 38          	lea    eax,[esp+0x38]
c001c4b5:	50                   	push   eax
c001c4b6:	6a 10                	push   0x10
c001c4b8:	e8 ba fa ff ff       	call   c001bf77 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c4bd:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001c4c4:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001c4c8:	b9 22 00 00 00       	mov    ecx,0x22
c001c4cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c4cf:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c4d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c4da:	89 10                	mov    DWORD PTR [eax],edx
c001c4dc:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001c4e3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c4e7:	89 10                	mov    DWORD PTR [eax],edx
c001c4e9:	81 c4 44 08 00 00    	add    esp,0x844
c001c4ef:	b0 01                	mov    al,0x1
c001c4f1:	5e                   	pop    esi
c001c4f2:	5f                   	pop    edi
c001c4f3:	c3                   	ret    

c001c4f4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001c4f4:	55                   	push   ebp
c001c4f5:	57                   	push   edi
c001c4f6:	56                   	push   esi
c001c4f7:	53                   	push   ebx
c001c4f8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c4fe:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001c505:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001c50c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c510:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001c514:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c518:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c51c:	75 03                	jne    c001c521 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c51e:	83 c3 02             	add    ebx,0x2
c001c521:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001c524:	75 03                	jne    c001c529 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001c526:	43                   	inc    ebx
c001c527:	eb f8                	jmp    c001c521 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c529:	51                   	push   ecx
c001c52a:	68 00 01 00 00       	push   0x100
c001c52f:	6a 00                	push   0x0
c001c531:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c535:	50                   	push   eax
c001c536:	e8 49 41 fe ff       	call   c0000684 <memset>
c001c53b:	83 c4 10             	add    esp,0x10
c001c53e:	31 d2                	xor    edx,edx
c001c540:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c543:	84 c0                	test   al,al
c001c545:	74 21                	je     c001c568 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001c547:	3c 2f                	cmp    al,0x2f
c001c549:	75 0b                	jne    c001c556 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001c54b:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001c54f:	bd 01 00 00 00       	mov    ebp,0x1
c001c554:	eb 14                	jmp    c001c56a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001c556:	8d 48 9f             	lea    ecx,[eax-0x61]
c001c559:	80 f9 19             	cmp    cl,0x19
c001c55c:	77 03                	ja     c001c561 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c55e:	83 e8 20             	sub    eax,0x20
c001c561:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001c565:	42                   	inc    edx
c001c566:	eb d8                	jmp    c001c540 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001c568:	31 ed                	xor    ebp,ebp
c001c56a:	83 ec 0c             	sub    esp,0xc
c001c56d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c574:	e8 8e d4 fe ff       	call   c0009a07 <malloc>
c001c579:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001c580:	89 c6                	mov    esi,eax
c001c582:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001c588:	c1 ef 0b             	shr    edi,0xb
c001c58b:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001c592:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001c596:	83 c4 10             	add    esp,0x10
c001c599:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001c59e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c5a2:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001c5a9:	74 28                	je     c001c5d3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001c5ab:	52                   	push   edx
c001c5ac:	57                   	push   edi
c001c5ad:	50                   	push   eax
c001c5ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c5b2:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001c5b9:	e8 b9 f9 ff ff       	call   c001bf77 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c5be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c5c2:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001c5c9:	05 00 08 00 00       	add    eax,0x800
c001c5ce:	83 c4 10             	add    esp,0x10
c001c5d1:	eb cb                	jmp    c001c59e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001c5d3:	83 ec 0c             	sub    esp,0xc
c001c5d6:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c5da:	57                   	push   edi
c001c5db:	e8 c0 40 fe ff       	call   c00006a0 <strlen>
c001c5e0:	50                   	push   eax
c001c5e1:	57                   	push   edi
c001c5e2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001c5e9:	56                   	push   esi
c001c5ea:	e8 46 f9 ff ff       	call   c001bf35 <__memmem(unsigned char*, int, unsigned char*, int)>
c001c5ef:	83 c4 20             	add    esp,0x20
c001c5f2:	85 c0                	test   eax,eax
c001c5f4:	75 13                	jne    c001c609 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001c5f6:	83 ec 0c             	sub    esp,0xc
c001c5f9:	56                   	push   esi
c001c5fa:	e8 18 d4 fe ff       	call   c0009a17 <free>
c001c5ff:	83 c4 10             	add    esp,0x10
c001c602:	31 c0                	xor    eax,eax
c001c604:	e9 b3 00 00 00       	jmp    c001c6bc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c609:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001c60d:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001c611:	c1 e7 08             	shl    edi,0x8
c001c614:	c1 e2 10             	shl    edx,0x10
c001c617:	09 d7                	or     edi,edx
c001c619:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001c61d:	09 d7                	or     edi,edx
c001c61f:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001c623:	c1 e2 18             	shl    edx,0x18
c001c626:	09 d7                	or     edi,edx
c001c628:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001c62c:	89 d1                	mov    ecx,edx
c001c62e:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001c632:	c1 e1 08             	shl    ecx,0x8
c001c635:	c1 e2 10             	shl    edx,0x10
c001c638:	09 ca                	or     edx,ecx
c001c63a:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001c63e:	09 ca                	or     edx,ecx
c001c640:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001c644:	c1 e1 18             	shl    ecx,0x18
c001c647:	09 ca                	or     edx,ecx
c001c649:	89 e9                	mov    ecx,ebp
c001c64b:	84 c9                	test   cl,cl
c001c64d:	74 3c                	je     c001c68b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001c64f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c653:	83 ec 0c             	sub    esp,0xc
c001c656:	56                   	push   esi
c001c657:	e8 bb d3 fe ff       	call   c0009a17 <free>
c001c65c:	83 c4 0c             	add    esp,0xc
c001c65f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c666:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c66b:	50                   	push   eax
c001c66c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c673:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c67a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c67e:	52                   	push   edx
c001c67f:	57                   	push   edi
c001c680:	53                   	push   ebx
c001c681:	e8 6e fe ff ff       	call   c001c4f4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c686:	83 c4 20             	add    esp,0x20
c001c689:	eb 31                	jmp    c001c6bc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c68b:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001c68e:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001c695:	d0 e8                	shr    al,1
c001c697:	89 3b                	mov    DWORD PTR [ebx],edi
c001c699:	83 e0 01             	and    eax,0x1
c001c69c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c6a3:	83 ec 0c             	sub    esp,0xc
c001c6a6:	89 13                	mov    DWORD PTR [ebx],edx
c001c6a8:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001c6af:	89 03                	mov    DWORD PTR [ebx],eax
c001c6b1:	56                   	push   esi
c001c6b2:	e8 60 d3 fe ff       	call   c0009a17 <free>
c001c6b7:	83 c4 10             	add    esp,0x10
c001c6ba:	b0 01                	mov    al,0x1
c001c6bc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c6c2:	5b                   	pop    ebx
c001c6c3:	5e                   	pop    esi
c001c6c4:	5f                   	pop    edi
c001c6c5:	5d                   	pop    ebp
c001c6c6:	c3                   	ret    

c001c6c7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001c6c7:	55                   	push   ebp
c001c6c8:	57                   	push   edi
c001c6c9:	56                   	push   esi
c001c6ca:	53                   	push   ebx
c001c6cb:	83 ec 20             	sub    esp,0x20
c001c6ce:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c6d2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c6d6:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c6da:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c6e2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c6ea:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001c6ef:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001c6f5:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001c6fb:	57                   	push   edi
c001c6fc:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c700:	50                   	push   eax
c001c701:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c705:	50                   	push   eax
c001c706:	e8 95 fd ff ff       	call   c001c4a0 <readRoot(unsigned int*, unsigned int*, char)>
c001c70b:	5a                   	pop    edx
c001c70c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c710:	e8 8b 3f fe ff       	call   c00006a0 <strlen>
c001c715:	83 c4 10             	add    esp,0x10
c001c718:	83 f8 03             	cmp    eax,0x3
c001c71b:	77 17                	ja     c001c734 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c721:	89 03                	mov    DWORD PTR [ebx],eax
c001c723:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c727:	89 06                	mov    DWORD PTR [esi],eax
c001c729:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001c730:	b0 01                	mov    al,0x1
c001c732:	eb 19                	jmp    c001c74d <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001c734:	50                   	push   eax
c001c735:	55                   	push   ebp
c001c736:	57                   	push   edi
c001c737:	56                   	push   esi
c001c738:	53                   	push   ebx
c001c739:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c73d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c741:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c745:	e8 aa fd ff ff       	call   c001c4f4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c74a:	83 c4 20             	add    esp,0x20
c001c74d:	83 c4 1c             	add    esp,0x1c
c001c750:	5b                   	pop    ebx
c001c751:	5e                   	pop    esi
c001c752:	5f                   	pop    edi
c001c753:	5d                   	pop    ebp
c001c754:	c3                   	ret    
c001c755:	90                   	nop

c001c756 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c756:	57                   	push   edi
c001c757:	56                   	push   esi
c001c758:	53                   	push   ebx
c001c759:	83 ec 10             	sub    esp,0x10
c001c75c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c760:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c764:	85 ff                	test   edi,edi
c001c766:	0f 84 8b 00 00 00    	je     c001c7f7 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c76c:	85 f6                	test   esi,esi
c001c76e:	0f 84 83 00 00 00    	je     c001c7f7 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c774:	b8 03 00 00 00       	mov    eax,0x3
c001c779:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001c77e:	75 7c                	jne    c001c7fc <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c780:	83 ec 0c             	sub    esp,0xc
c001c783:	6a 1c                	push   0x1c
c001c785:	e8 7d d2 fe ff       	call   c0009a07 <malloc>
c001c78a:	89 07                	mov    DWORD PTR [edi],eax
c001c78c:	89 c3                	mov    ebx,eax
c001c78e:	58                   	pop    eax
c001c78f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c793:	50                   	push   eax
c001c794:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c797:	50                   	push   eax
c001c798:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c79c:	50                   	push   eax
c001c79d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c7a1:	50                   	push   eax
c001c7a2:	56                   	push   esi
c001c7a3:	e8 1f ff ff ff       	call   c001c6c7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c7a8:	83 c4 20             	add    esp,0x20
c001c7ab:	84 c0                	test   al,al
c001c7ad:	74 07                	je     c001c7b6 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001c7af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c7b4:	74 0b                	je     c001c7c1 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001c7b6:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c7ba:	b8 01 00 00 00       	mov    eax,0x1
c001c7bf:	eb 3b                	jmp    c001c7fc <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c7c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7c5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c7c9:	89 03                	mov    DWORD PTR [ebx],eax
c001c7cb:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c7d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c7d6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c7dd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c7e4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c7e7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c7ee:	8a 06                	mov    al,BYTE PTR [esi]
c001c7f0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c7f3:	31 c0                	xor    eax,eax
c001c7f5:	eb 05                	jmp    c001c7fc <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c7f7:	b8 04 00 00 00       	mov    eax,0x4
c001c7fc:	83 c4 10             	add    esp,0x10
c001c7ff:	5b                   	pop    ebx
c001c800:	5e                   	pop    esi
c001c801:	5f                   	pop    edi
c001c802:	c3                   	ret    
c001c803:	90                   	nop

c001c804 <ISO9660::exists(char const*)>:
c001c804:	83 ec 28             	sub    esp,0x28
c001c807:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c80b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001c80f:	52                   	push   edx
c001c810:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001c813:	52                   	push   edx
c001c814:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c818:	52                   	push   edx
c001c819:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c81d:	52                   	push   edx
c001c81e:	50                   	push   eax
c001c81f:	e8 a3 fe ff ff       	call   c001c6c7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c824:	83 c4 3c             	add    esp,0x3c
c001c827:	c3                   	ret    

c001c828 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001c828:	56                   	push   esi
c001c829:	53                   	push   ebx
c001c82a:	83 ec 14             	sub    esp,0x14
c001c82d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c831:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c835:	85 db                	test   ebx,ebx
c001c837:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c83b:	0f 94 c2             	sete   dl
c001c83e:	85 f6                	test   esi,esi
c001c840:	0f 94 c0             	sete   al
c001c843:	08 c2                	or     dl,al
c001c845:	75 68                	jne    c001c8af <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c847:	85 c9                	test   ecx,ecx
c001c849:	74 64                	je     c001c8af <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c84b:	83 ec 0c             	sub    esp,0xc
c001c84e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c851:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c855:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c85b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c862:	50                   	push   eax
c001c863:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001c866:	50                   	push   eax
c001c867:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c86b:	50                   	push   eax
c001c86c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c870:	50                   	push   eax
c001c871:	51                   	push   ecx
c001c872:	e8 50 fe ff ff       	call   c001c6c7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c877:	83 c4 20             	add    esp,0x20
c001c87a:	ba 01 00 00 00       	mov    edx,0x1
c001c87f:	84 c0                	test   al,al
c001c881:	74 31                	je     c001c8b4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c883:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c887:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c88e:	89 03                	mov    DWORD PTR [ebx],eax
c001c890:	ba 00 00 00 00       	mov    edx,0x0
c001c895:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c899:	85 c0                	test   eax,eax
c001c89b:	0f 95 06             	setne  BYTE PTR [esi]
c001c89e:	74 14                	je     c001c8b4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c8a0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c8a6:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c8ad:	eb 05                	jmp    c001c8b4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c8af:	ba 04 00 00 00       	mov    edx,0x4
c001c8b4:	83 c4 14             	add    esp,0x14
c001c8b7:	89 d0                	mov    eax,edx
c001c8b9:	5b                   	pop    ebx
c001c8ba:	5e                   	pop    esi
c001c8bb:	c3                   	ret    

c001c8bc <ISO9660::openDir(char const*, void**)>:
c001c8bc:	57                   	push   edi
c001c8bd:	56                   	push   esi
c001c8be:	53                   	push   ebx
c001c8bf:	83 ec 10             	sub    esp,0x10
c001c8c2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c8c6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c8ca:	85 ff                	test   edi,edi
c001c8cc:	74 7b                	je     c001c949 <ISO9660::openDir(char const*, void**)+0x8d>
c001c8ce:	85 f6                	test   esi,esi
c001c8d0:	74 77                	je     c001c949 <ISO9660::openDir(char const*, void**)+0x8d>
c001c8d2:	83 ec 0c             	sub    esp,0xc
c001c8d5:	6a 1c                	push   0x1c
c001c8d7:	e8 2b d1 fe ff       	call   c0009a07 <malloc>
c001c8dc:	89 07                	mov    DWORD PTR [edi],eax
c001c8de:	89 c3                	mov    ebx,eax
c001c8e0:	58                   	pop    eax
c001c8e1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c8e5:	50                   	push   eax
c001c8e6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c8e9:	50                   	push   eax
c001c8ea:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c8ee:	50                   	push   eax
c001c8ef:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c8f3:	50                   	push   eax
c001c8f4:	56                   	push   esi
c001c8f5:	e8 cd fd ff ff       	call   c001c6c7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c8fa:	83 c4 20             	add    esp,0x20
c001c8fd:	84 c0                	test   al,al
c001c8ff:	74 07                	je     c001c908 <ISO9660::openDir(char const*, void**)+0x4c>
c001c901:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c906:	75 0b                	jne    c001c913 <ISO9660::openDir(char const*, void**)+0x57>
c001c908:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c90c:	b8 01 00 00 00       	mov    eax,0x1
c001c911:	eb 3b                	jmp    c001c94e <ISO9660::openDir(char const*, void**)+0x92>
c001c913:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c917:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c91b:	89 03                	mov    DWORD PTR [ebx],eax
c001c91d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c924:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c928:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c92f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c936:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c939:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c940:	8a 06                	mov    al,BYTE PTR [esi]
c001c942:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c945:	31 c0                	xor    eax,eax
c001c947:	eb 05                	jmp    c001c94e <ISO9660::openDir(char const*, void**)+0x92>
c001c949:	b8 04 00 00 00       	mov    eax,0x4
c001c94e:	83 c4 10             	add    esp,0x10
c001c951:	5b                   	pop    ebx
c001c952:	5e                   	pop    esi
c001c953:	5f                   	pop    edi
c001c954:	c3                   	ret    
c001c955:	90                   	nop

c001c956 <ISO9660::ISO9660()>:
c001c956:	83 ec 0c             	sub    esp,0xc
c001c959:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c95d:	83 ec 0c             	sub    esp,0xc
c001c960:	50                   	push   eax
c001c961:	e8 a8 06 ff ff       	call   c000d00e <Filesystem::Filesystem()>
c001c966:	83 c4 10             	add    esp,0x10
c001c969:	ba 08 60 02 c0       	mov    edx,0xc0026008
c001c96e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c972:	89 10                	mov    DWORD PTR [eax],edx
c001c974:	90                   	nop
c001c975:	83 c4 0c             	add    esp,0xc
c001c978:	c3                   	ret    
c001c979:	90                   	nop

c001c97a <SoundCard::beginPlayback()>:
c001c97a:	c7 44 24 04 68 60 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026068
c001c982:	e9 1c 7f ff ff       	jmp    c00148a3 <Krnl::panic(char const*)>
c001c987:	90                   	nop

c001c988 <SoundCard::stopPlayback()>:
c001c988:	c7 44 24 04 9c 60 02 c0 	mov    DWORD PTR [esp+0x4],0xc002609c
c001c990:	e9 0e 7f ff ff       	jmp    c00148a3 <Krnl::panic(char const*)>
c001c995:	90                   	nop

c001c996 <SoundCard::SoundCard(char const*)>:
c001c996:	83 ec 1c             	sub    esp,0x1c
c001c999:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c99d:	83 ec 08             	sub    esp,0x8
c001c9a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c9a4:	50                   	push   eax
c001c9a5:	e8 d8 19 ff ff       	call   c000e382 <Device::Device(char const*)>
c001c9aa:	83 c4 10             	add    esp,0x10
c001c9ad:	ba 34 61 02 c0       	mov    edx,0xc0026134
c001c9b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9b6:	89 10                	mov    DWORD PTR [eax],edx
c001c9b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9bc:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c9c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9c7:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001c9d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9d5:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001c9df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9e3:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001c9ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9f1:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001c9fb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ca03:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ca08:	7f 19                	jg     c001ca23 <SoundCard::SoundCard(char const*)+0x8d>
c001ca0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca0e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ca12:	83 c2 54             	add    edx,0x54
c001ca15:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001ca1d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ca21:	eb e0                	jmp    c001ca03 <SoundCard::SoundCard(char const*)+0x6d>
c001ca23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca27:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ca2e:	90                   	nop
c001ca2f:	83 c4 1c             	add    esp,0x1c
c001ca32:	c3                   	ret    
c001ca33:	90                   	nop

c001ca34 <SoundCard::~SoundCard()>:
c001ca34:	83 ec 0c             	sub    esp,0xc
c001ca37:	ba 34 61 02 c0       	mov    edx,0xc0026134
c001ca3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca40:	89 10                	mov    DWORD PTR [eax],edx
c001ca42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca46:	83 ec 0c             	sub    esp,0xc
c001ca49:	50                   	push   eax
c001ca4a:	e8 fd 15 ff ff       	call   c000e04c <Device::~Device()>
c001ca4f:	83 c4 10             	add    esp,0x10
c001ca52:	90                   	nop
c001ca53:	83 c4 0c             	add    esp,0xc
c001ca56:	c3                   	ret    
c001ca57:	90                   	nop

c001ca58 <SoundCard::~SoundCard()>:
c001ca58:	83 ec 0c             	sub    esp,0xc
c001ca5b:	83 ec 0c             	sub    esp,0xc
c001ca5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca62:	e8 cd ff ff ff       	call   c001ca34 <SoundCard::~SoundCard()>
c001ca67:	83 c4 10             	add    esp,0x10
c001ca6a:	83 ec 08             	sub    esp,0x8
c001ca6d:	68 e8 01 00 00       	push   0x1e8
c001ca72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca76:	e8 9b 01 ff ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c001ca7b:	83 c4 10             	add    esp,0x10
c001ca7e:	83 c4 0c             	add    esp,0xc
c001ca81:	c3                   	ret    

c001ca82 <SoundCard::configureRates(int, int, int)>:
c001ca82:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ca86:	31 c0                	xor    eax,eax
c001ca88:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001ca8f:	75 20                	jne    c001cab1 <SoundCard::configureRates(int, int, int)+0x2f>
c001ca91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca95:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001ca9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca9f:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001caa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caa9:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001caaf:	b0 01                	mov    al,0x1
c001cab1:	c3                   	ret    

c001cab2 <SoundCard::getSamples16(int, short*)>:
c001cab2:	55                   	push   ebp
c001cab3:	57                   	push   edi
c001cab4:	31 ff                	xor    edi,edi
c001cab6:	56                   	push   esi
c001cab7:	53                   	push   ebx
c001cab8:	31 db                	xor    ebx,ebx
c001caba:	83 ec 18             	sub    esp,0x18
c001cabd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cac1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001cac5:	68 cf 60 02 c0       	push   0xc00260cf
c001caca:	e8 28 02 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c001cacf:	83 c4 0c             	add    esp,0xc
c001cad2:	8d 04 36             	lea    eax,[esi+esi*1]
c001cad5:	50                   	push   eax
c001cad6:	6a 00                	push   0x0
c001cad8:	55                   	push   ebp
c001cad9:	e8 a6 3b fe ff       	call   c0000684 <memset>
c001cade:	83 c4 10             	add    esp,0x10
c001cae1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cae5:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001caec:	85 c0                	test   eax,eax
c001caee:	74 1b                	je     c001cb0b <SoundCard::getSamples16(int, short*)+0x59>
c001caf0:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001caf4:	75 15                	jne    c001cb0b <SoundCard::getSamples16(int, short*)+0x59>
c001caf6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cafa:	55                   	push   ebp
c001cafb:	56                   	push   esi
c001cafc:	50                   	push   eax
c001cafd:	e8 5a 03 00 00       	call   c001ce5c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001cb02:	83 c4 10             	add    esp,0x10
c001cb05:	39 c7                	cmp    edi,eax
c001cb07:	7d 02                	jge    c001cb0b <SoundCard::getSamples16(int, short*)+0x59>
c001cb09:	89 c7                	mov    edi,eax
c001cb0b:	43                   	inc    ebx
c001cb0c:	83 fb 20             	cmp    ebx,0x20
c001cb0f:	75 d0                	jne    c001cae1 <SoundCard::getSamples16(int, short*)+0x2f>
c001cb11:	83 c4 0c             	add    esp,0xc
c001cb14:	89 f8                	mov    eax,edi
c001cb16:	5b                   	pop    ebx
c001cb17:	5e                   	pop    esi
c001cb18:	5f                   	pop    edi
c001cb19:	5d                   	pop    ebp
c001cb1a:	c3                   	ret    
c001cb1b:	90                   	nop

c001cb1c <SoundCard::getSamples32(int, int*)>:
c001cb1c:	55                   	push   ebp
c001cb1d:	57                   	push   edi
c001cb1e:	31 ff                	xor    edi,edi
c001cb20:	56                   	push   esi
c001cb21:	31 f6                	xor    esi,esi
c001cb23:	53                   	push   ebx
c001cb24:	83 ec 10             	sub    esp,0x10
c001cb27:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cb2b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001cb2f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001cb33:	c1 e0 02             	shl    eax,0x2
c001cb36:	50                   	push   eax
c001cb37:	6a 00                	push   0x0
c001cb39:	55                   	push   ebp
c001cb3a:	e8 45 3b fe ff       	call   c0000684 <memset>
c001cb3f:	83 c4 10             	add    esp,0x10
c001cb42:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001cb49:	85 c0                	test   eax,eax
c001cb4b:	74 1b                	je     c001cb68 <SoundCard::getSamples32(int, int*)+0x4c>
c001cb4d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001cb51:	75 15                	jne    c001cb68 <SoundCard::getSamples32(int, int*)+0x4c>
c001cb53:	53                   	push   ebx
c001cb54:	55                   	push   ebp
c001cb55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb59:	50                   	push   eax
c001cb5a:	e8 f9 03 00 00       	call   c001cf58 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001cb5f:	83 c4 10             	add    esp,0x10
c001cb62:	39 c6                	cmp    esi,eax
c001cb64:	7d 02                	jge    c001cb68 <SoundCard::getSamples32(int, int*)+0x4c>
c001cb66:	89 c6                	mov    esi,eax
c001cb68:	47                   	inc    edi
c001cb69:	83 ff 20             	cmp    edi,0x20
c001cb6c:	75 d4                	jne    c001cb42 <SoundCard::getSamples32(int, int*)+0x26>
c001cb6e:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001cb74:	85 f6                	test   esi,esi
c001cb76:	75 0f                	jne    c001cb87 <SoundCard::getSamples32(int, int*)+0x6b>
c001cb78:	84 c0                	test   al,al
c001cb7a:	74 1b                	je     c001cb97 <SoundCard::getSamples32(int, int*)+0x7b>
c001cb7c:	83 ec 0c             	sub    esp,0xc
c001cb7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb81:	53                   	push   ebx
c001cb82:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001cb85:	eb 0d                	jmp    c001cb94 <SoundCard::getSamples32(int, int*)+0x78>
c001cb87:	84 c0                	test   al,al
c001cb89:	75 0c                	jne    c001cb97 <SoundCard::getSamples32(int, int*)+0x7b>
c001cb8b:	83 ec 0c             	sub    esp,0xc
c001cb8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb90:	53                   	push   ebx
c001cb91:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001cb94:	83 c4 10             	add    esp,0x10
c001cb97:	83 c4 0c             	add    esp,0xc
c001cb9a:	89 f0                	mov    eax,esi
c001cb9c:	5b                   	pop    ebx
c001cb9d:	5e                   	pop    esi
c001cb9e:	5f                   	pop    edi
c001cb9f:	5d                   	pop    ebp
c001cba0:	c3                   	ret    
c001cba1:	90                   	nop

c001cba2 <SoundCard::addChannel(SoundPort*)>:
c001cba2:	56                   	push   esi
c001cba3:	53                   	push   ebx
c001cba4:	53                   	push   ebx
c001cba5:	31 db                	xor    ebx,ebx
c001cba7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cbab:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001cbb3:	74 27                	je     c001cbdc <SoundCard::addChannel(SoundPort*)+0x3a>
c001cbb5:	43                   	inc    ebx
c001cbb6:	83 fb 20             	cmp    ebx,0x20
c001cbb9:	75 f0                	jne    c001cbab <SoundCard::addChannel(SoundPort*)+0x9>
c001cbbb:	83 ec 0c             	sub    esp,0xc
c001cbbe:	83 cb ff             	or     ebx,0xffffffff
c001cbc1:	68 f5 60 02 c0       	push   0xc00260f5
c001cbc6:	e8 2c 01 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c001cbcb:	c7 04 24 ee 60 02 c0 	mov    DWORD PTR [esp],0xc00260ee
c001cbd2:	e8 cc 7c ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c001cbd7:	83 c4 10             	add    esp,0x10
c001cbda:	eb 1b                	jmp    c001cbf7 <SoundCard::addChannel(SoundPort*)+0x55>
c001cbdc:	51                   	push   ecx
c001cbdd:	51                   	push   ecx
c001cbde:	53                   	push   ebx
c001cbdf:	68 0d 61 02 c0       	push   0xc002610d
c001cbe4:	e8 0e 01 ff ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c001cbe9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cbed:	83 c4 10             	add    esp,0x10
c001cbf0:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001cbf7:	89 d8                	mov    eax,ebx
c001cbf9:	5a                   	pop    edx
c001cbfa:	5b                   	pop    ebx
c001cbfb:	5e                   	pop    esi
c001cbfc:	c3                   	ret    
c001cbfd:	90                   	nop

c001cbfe <SoundCard::removeChannel(int)>:
c001cbfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc06:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001cc11:	c3                   	ret    
c001cc12:	66 90                	xchg   ax,ax

c001cc14 <SoundPort::SoundPort(int, int, int, int)>:
c001cc14:	83 ec 0c             	sub    esp,0xc
c001cc17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc1b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cc22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc26:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001cc2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc2e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cc32:	89 10                	mov    DWORD PTR [eax],edx
c001cc34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc38:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cc3c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cc3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc43:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc47:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cc4a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001cc4f:	75 13                	jne    c001cc64 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001cc51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc55:	8b 00                	mov    eax,DWORD PTR [eax]
c001cc57:	05 a0 0f 00 00       	add    eax,0xfa0
c001cc5c:	01 c0                	add    eax,eax
c001cc5e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cc62:	66 90                	xchg   ax,ax
c001cc64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc68:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cc6c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001cc6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc73:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001cc7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc7e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001cc81:	c1 e0 02             	shl    eax,0x2
c001cc84:	83 ec 0c             	sub    esp,0xc
c001cc87:	50                   	push   eax
c001cc88:	e8 7a cd fe ff       	call   c0009a07 <malloc>
c001cc8d:	83 c4 10             	add    esp,0x10
c001cc90:	89 c2                	mov    edx,eax
c001cc92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc96:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001cc99:	90                   	nop
c001cc9a:	83 c4 0c             	add    esp,0xc
c001cc9d:	c3                   	ret    
c001cc9e:	66 90                	xchg   ax,ax

c001cca0 <SoundPort::~SoundPort()>:
c001cca0:	83 ec 0c             	sub    esp,0xc
c001cca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cca7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ccaa:	85 c0                	test   eax,eax
c001ccac:	74 1e                	je     c001cccc <SoundPort::~SoundPort()+0x2c>
c001ccae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccb2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ccb5:	83 ec 0c             	sub    esp,0xc
c001ccb8:	50                   	push   eax
c001ccb9:	e8 59 cd fe ff       	call   c0009a17 <free>
c001ccbe:	83 c4 10             	add    esp,0x10
c001ccc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccc5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cccc:	90                   	nop
c001cccd:	83 c4 0c             	add    esp,0xc
c001ccd0:	c3                   	ret    
c001ccd1:	90                   	nop
c001ccd2:	66 90                	xchg   ax,ax

c001ccd4 <SoundPort::unpause()>:
c001ccd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ccd8:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001ccdc:	c3                   	ret    
c001ccdd:	90                   	nop
c001ccde:	66 90                	xchg   ax,ax

c001cce0 <SoundPort::pause()>:
c001cce0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cce4:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001cce8:	c3                   	ret    
c001cce9:	90                   	nop
c001ccea:	66 90                	xchg   ax,ax

c001ccec <SoundPort::getBufferUsed()>:
c001ccec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ccf0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ccf3:	c3                   	ret    

c001ccf4 <SoundPort::getBufferSize()>:
c001ccf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ccf8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ccfb:	c3                   	ret    

c001ccfc <SoundPort::buffer16(short*, int)>:
c001ccfc:	55                   	push   ebp
c001ccfd:	57                   	push   edi
c001ccfe:	56                   	push   esi
c001ccff:	53                   	push   ebx
c001cd00:	83 ec 1c             	sub    esp,0x1c
c001cd03:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cd07:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001cd0b:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001cd0e:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001cd11:	0f 84 85 00 00 00    	je     c001cd9c <SoundPort::buffer16(short*, int)+0xa0>
c001cd17:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001cd1b:	85 c9                	test   ecx,ecx
c001cd1d:	7e 7d                	jle    c001cd9c <SoundPort::buffer16(short*, int)+0xa0>
c001cd1f:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001cd23:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001cd26:	c1 e1 0f             	shl    ecx,0xf
c001cd29:	8d 70 01             	lea    esi,[eax+0x1]
c001cd2c:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001cd2f:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001cd32:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cd35:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cd38:	74 6e                	je     c001cda8 <SoundPort::buffer16(short*, int)+0xac>
c001cd3a:	31 f6                	xor    esi,esi
c001cd3c:	eb 22                	jmp    c001cd60 <SoundPort::buffer16(short*, int)+0x64>
c001cd3e:	66 90                	xchg   ax,ax
c001cd40:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001cd45:	8d 79 01             	lea    edi,[ecx+0x1]
c001cd48:	c1 e3 0f             	shl    ebx,0xf
c001cd4b:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001cd4e:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001cd51:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001cd54:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cd57:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cd5a:	74 1c                	je     c001cd78 <SoundPort::buffer16(short*, int)+0x7c>
c001cd5c:	89 c6                	mov    esi,eax
c001cd5e:	66 90                	xchg   ax,ax
c001cd60:	8d 46 01             	lea    eax,[esi+0x1]
c001cd63:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001cd67:	75 d7                	jne    c001cd40 <SoundPort::buffer16(short*, int)+0x44>
c001cd69:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cd6d:	83 c4 1c             	add    esp,0x1c
c001cd70:	5b                   	pop    ebx
c001cd71:	5e                   	pop    esi
c001cd72:	5f                   	pop    edi
c001cd73:	5d                   	pop    ebp
c001cd74:	c3                   	ret    
c001cd75:	8d 76 00             	lea    esi,[esi+0x0]
c001cd78:	8d 46 02             	lea    eax,[esi+0x2]
c001cd7b:	90                   	nop
c001cd7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cd80:	83 ec 0c             	sub    esp,0xc
c001cd83:	68 60 61 02 c0       	push   0xc0026160
c001cd88:	e8 6a ff fe ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c001cd8d:	83 c4 10             	add    esp,0x10
c001cd90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd94:	83 c4 1c             	add    esp,0x1c
c001cd97:	5b                   	pop    ebx
c001cd98:	5e                   	pop    esi
c001cd99:	5f                   	pop    edi
c001cd9a:	5d                   	pop    ebp
c001cd9b:	c3                   	ret    
c001cd9c:	83 c4 1c             	add    esp,0x1c
c001cd9f:	31 c0                	xor    eax,eax
c001cda1:	5b                   	pop    ebx
c001cda2:	5e                   	pop    esi
c001cda3:	5f                   	pop    edi
c001cda4:	5d                   	pop    ebp
c001cda5:	c3                   	ret    
c001cda6:	66 90                	xchg   ax,ax
c001cda8:	b8 01 00 00 00       	mov    eax,0x1
c001cdad:	eb cd                	jmp    c001cd7c <SoundPort::buffer16(short*, int)+0x80>
c001cdaf:	90                   	nop

c001cdb0 <SoundPort::buffer32(int*, int)>:
c001cdb0:	55                   	push   ebp
c001cdb1:	57                   	push   edi
c001cdb2:	56                   	push   esi
c001cdb3:	53                   	push   ebx
c001cdb4:	83 ec 1c             	sub    esp,0x1c
c001cdb7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cdbb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cdbf:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cdc2:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001cdc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cdca:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cdcd:	74 79                	je     c001ce48 <SoundPort::buffer32(int*, int)+0x98>
c001cdcf:	85 c0                	test   eax,eax
c001cdd1:	7e 75                	jle    c001ce48 <SoundPort::buffer32(int*, int)+0x98>
c001cdd3:	8d 71 01             	lea    esi,[ecx+0x1]
c001cdd6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001cdd9:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001cddc:	8b 37                	mov    esi,DWORD PTR [edi]
c001cdde:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001cde1:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cde4:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cde7:	74 6b                	je     c001ce54 <SoundPort::buffer32(int*, int)+0xa4>
c001cde9:	31 f6                	xor    esi,esi
c001cdeb:	eb 1f                	jmp    c001ce0c <SoundPort::buffer32(int*, int)+0x5c>
c001cded:	8d 76 00             	lea    esi,[esi+0x0]
c001cdf0:	8d 69 01             	lea    ebp,[ecx+0x1]
c001cdf3:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001cdf6:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001cdf9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001cdfc:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001ce00:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ce03:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ce06:	74 1c                	je     c001ce24 <SoundPort::buffer32(int*, int)+0x74>
c001ce08:	89 de                	mov    esi,ebx
c001ce0a:	66 90                	xchg   ax,ax
c001ce0c:	8d 5e 01             	lea    ebx,[esi+0x1]
c001ce0f:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001ce13:	75 db                	jne    c001cdf0 <SoundPort::buffer32(int*, int)+0x40>
c001ce15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ce19:	83 c4 1c             	add    esp,0x1c
c001ce1c:	5b                   	pop    ebx
c001ce1d:	5e                   	pop    esi
c001ce1e:	5f                   	pop    edi
c001ce1f:	5d                   	pop    ebp
c001ce20:	c3                   	ret    
c001ce21:	8d 76 00             	lea    esi,[esi+0x0]
c001ce24:	8d 46 02             	lea    eax,[esi+0x2]
c001ce27:	90                   	nop
c001ce28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce2c:	83 ec 0c             	sub    esp,0xc
c001ce2f:	68 7b 61 02 c0       	push   0xc002617b
c001ce34:	e8 be fe fe ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c001ce39:	83 c4 10             	add    esp,0x10
c001ce3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ce40:	83 c4 1c             	add    esp,0x1c
c001ce43:	5b                   	pop    ebx
c001ce44:	5e                   	pop    esi
c001ce45:	5f                   	pop    edi
c001ce46:	5d                   	pop    ebp
c001ce47:	c3                   	ret    
c001ce48:	83 c4 1c             	add    esp,0x1c
c001ce4b:	31 c0                	xor    eax,eax
c001ce4d:	5b                   	pop    ebx
c001ce4e:	5e                   	pop    esi
c001ce4f:	5f                   	pop    edi
c001ce50:	5d                   	pop    ebp
c001ce51:	c3                   	ret    
c001ce52:	66 90                	xchg   ax,ax
c001ce54:	b8 01 00 00 00       	mov    eax,0x1
c001ce59:	eb cd                	jmp    c001ce28 <SoundPort::buffer32(int*, int)+0x78>
c001ce5b:	90                   	nop

c001ce5c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001ce5c:	57                   	push   edi
c001ce5d:	56                   	push   esi
c001ce5e:	53                   	push   ebx
c001ce5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ce63:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ce67:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001ce6d:	39 03                	cmp    DWORD PTR [ebx],eax
c001ce6f:	74 13                	je     c001ce84 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001ce71:	83 ec 0c             	sub    esp,0xc
c001ce74:	68 d0 61 02 c0       	push   0xc00261d0
c001ce79:	e8 25 7a ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c001ce7e:	83 c4 10             	add    esp,0x10
c001ce81:	8d 76 00             	lea    esi,[esi+0x0]
c001ce84:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001ce8a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001ce8d:	74 11                	je     c001cea0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001ce8f:	83 ec 0c             	sub    esp,0xc
c001ce92:	68 96 61 02 c0       	push   0xc0026196
c001ce97:	e8 07 7a ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c001ce9c:	83 c4 10             	add    esp,0x10
c001ce9f:	90                   	nop
c001cea0:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001cea6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001cea9:	74 11                	je     c001cebc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001ceab:	83 ec 0c             	sub    esp,0xc
c001ceae:	68 96 61 02 c0       	push   0xc0026196
c001ceb3:	e8 eb 79 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c001ceb8:	83 c4 10             	add    esp,0x10
c001cebb:	90                   	nop
c001cebc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cebf:	89 c6                	mov    esi,eax
c001cec1:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001cec5:	7e 05                	jle    c001cecc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001cec7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001cecb:	90                   	nop
c001cecc:	85 f6                	test   esi,esi
c001cece:	7e 30                	jle    c001cf00 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001ced0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ced4:	8d 3c 36             	lea    edi,[esi+esi*1]
c001ced7:	31 c9                	xor    ecx,ecx
c001ced9:	01 d7                	add    edi,edx
c001cedb:	90                   	nop
c001cedc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001cedf:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001cee2:	85 c0                	test   eax,eax
c001cee4:	79 06                	jns    c001ceec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001cee6:	05 ff 7f 00 00       	add    eax,0x7fff
c001ceeb:	90                   	nop
c001ceec:	c1 f8 0f             	sar    eax,0xf
c001ceef:	83 c1 04             	add    ecx,0x4
c001cef2:	66 01 02             	add    WORD PTR [edx],ax
c001cef5:	83 c2 02             	add    edx,0x2
c001cef8:	39 d7                	cmp    edi,edx
c001cefa:	75 e0                	jne    c001cedc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001cefc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ceff:	90                   	nop
c001cf00:	56                   	push   esi
c001cf01:	89 c2                	mov    edx,eax
c001cf03:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001cf0a:	29 f2                	sub    edx,esi
c001cf0c:	52                   	push   edx
c001cf0d:	50                   	push   eax
c001cf0e:	68 f0 61 02 c0       	push   0xc00261f0
c001cf13:	e8 df fd fe ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c001cf18:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001cf1b:	50                   	push   eax
c001cf1c:	01 f8                	add    eax,edi
c001cf1e:	50                   	push   eax
c001cf1f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cf22:	29 f0                	sub    eax,esi
c001cf24:	c1 e0 02             	shl    eax,0x2
c001cf27:	50                   	push   eax
c001cf28:	68 20 62 02 c0       	push   0xc0026220
c001cf2d:	e8 c5 fd fe ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c001cf32:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001cf35:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cf38:	83 c4 1c             	add    esp,0x1c
c001cf3b:	01 d7                	add    edi,edx
c001cf3d:	29 f0                	sub    eax,esi
c001cf3f:	c1 e0 02             	shl    eax,0x2
c001cf42:	50                   	push   eax
c001cf43:	57                   	push   edi
c001cf44:	52                   	push   edx
c001cf45:	e8 72 36 fe ff       	call   c00005bc <memmove>
c001cf4a:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001cf4d:	83 c4 10             	add    esp,0x10
c001cf50:	89 f0                	mov    eax,esi
c001cf52:	5b                   	pop    ebx
c001cf53:	5e                   	pop    esi
c001cf54:	5f                   	pop    edi
c001cf55:	c3                   	ret    
c001cf56:	66 90                	xchg   ax,ax

c001cf58 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001cf58:	57                   	push   edi
c001cf59:	56                   	push   esi
c001cf5a:	53                   	push   ebx
c001cf5b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cf5f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001cf63:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001cf67:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001cf6d:	39 06                	cmp    DWORD PTR [esi],eax
c001cf6f:	74 13                	je     c001cf84 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001cf71:	83 ec 0c             	sub    esp,0xc
c001cf74:	68 44 62 02 c0       	push   0xc0026244
c001cf79:	e8 25 79 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c001cf7e:	83 c4 10             	add    esp,0x10
c001cf81:	8d 76 00             	lea    esi,[esi+0x0]
c001cf84:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001cf8a:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001cf8d:	74 11                	je     c001cfa0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001cf8f:	83 ec 0c             	sub    esp,0xc
c001cf92:	68 b2 61 02 c0       	push   0xc00261b2
c001cf97:	e8 07 79 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c001cf9c:	83 c4 10             	add    esp,0x10
c001cf9f:	90                   	nop
c001cfa0:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001cfa6:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001cfa9:	74 11                	je     c001cfbc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001cfab:	83 ec 0c             	sub    esp,0xc
c001cfae:	68 b2 61 02 c0       	push   0xc00261b2
c001cfb3:	e8 eb 78 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c001cfb8:	83 c4 10             	add    esp,0x10
c001cfbb:	90                   	nop
c001cfbc:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001cfbf:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001cfc3:	7e 07                	jle    c001cfcc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001cfc5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cfc9:	8d 76 00             	lea    esi,[esi+0x0]
c001cfcc:	85 ff                	test   edi,edi
c001cfce:	7e 1c                	jle    c001cfec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001cfd0:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001cfd7:	31 c0                	xor    eax,eax
c001cfd9:	8d 76 00             	lea    esi,[esi+0x0]
c001cfdc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001cfdf:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001cfe2:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001cfe5:	83 c0 04             	add    eax,0x4
c001cfe8:	39 c1                	cmp    ecx,eax
c001cfea:	75 f0                	jne    c001cfdc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001cfec:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001cfef:	50                   	push   eax
c001cff0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cff3:	29 f8                	sub    eax,edi
c001cff5:	c1 e0 02             	shl    eax,0x2
c001cff8:	50                   	push   eax
c001cff9:	8d 04 ba             	lea    eax,[edx+edi*4]
c001cffc:	50                   	push   eax
c001cffd:	52                   	push   edx
c001cffe:	e8 b9 35 fe ff       	call   c00005bc <memmove>
c001d003:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001d006:	83 c4 10             	add    esp,0x10
c001d009:	89 f8                	mov    eax,edi
c001d00b:	5b                   	pop    ebx
c001d00c:	5e                   	pop    esi
c001d00d:	5f                   	pop    edi
c001d00e:	c3                   	ret    
c001d00f:	90                   	nop

c001d010 <PCI::open(int, int, void*)>:
c001d010:	83 ec 18             	sub    esp,0x18
c001d013:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d017:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d01b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d021:	8b 10                	mov    edx,DWORD PTR [eax]
c001d023:	50                   	push   eax
c001d024:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001d027:	31 c0                	xor    eax,eax
c001d029:	83 c4 1c             	add    esp,0x1c
c001d02c:	c3                   	ret    
c001d02d:	90                   	nop

c001d02e <PCI::close(int, int, void*)>:
c001d02e:	31 c0                	xor    eax,eax
c001d030:	c3                   	ret    
c001d031:	90                   	nop

c001d032 <PCI::PCI()>:
c001d032:	83 ec 0c             	sub    esp,0xc
c001d035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d039:	83 ec 08             	sub    esp,0x8
c001d03c:	68 63 62 02 c0       	push   0xc0026263
c001d041:	50                   	push   eax
c001d042:	e8 9d 09 ff ff       	call   c000d9e4 <Bus::Bus(char const*)>
c001d047:	83 c4 10             	add    esp,0x10
c001d04a:	ba 38 64 02 c0       	mov    edx,0xc0026438
c001d04f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d053:	89 10                	mov    DWORD PTR [eax],edx
c001d055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d059:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001d063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d067:	a3 20 9a 02 c0       	mov    ds:0xc0029a20,eax
c001d06c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d070:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d076:	0f b6 d0             	movzx  edx,al
c001d079:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d07d:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001d084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d088:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d08e:	0f b6 d0             	movzx  edx,al
c001d091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d095:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001d09a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d09e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d0a4:	8d 50 01             	lea    edx,[eax+0x1]
c001d0a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d0ab:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d0b1:	0f b6 d0             	movzx  edx,al
c001d0b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0b8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d0bc:	83 c9 c0             	or     ecx,0xffffffc0
c001d0bf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d0c3:	90                   	nop
c001d0c4:	83 c4 0c             	add    esp,0xc
c001d0c7:	c3                   	ret    

c001d0c8 <PCI::readBAR8(unsigned int, int)>:
c001d0c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d0cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0d0:	f6 c2 01             	test   dl,0x1
c001d0d3:	74 07                	je     c001d0dc <PCI::readBAR8(unsigned int, int)+0x14>
c001d0d5:	83 e2 fc             	and    edx,0xfffffffc
c001d0d8:	01 c2                	add    edx,eax
c001d0da:	ec                   	in     al,dx
c001d0db:	c3                   	ret    
c001d0dc:	83 e2 f0             	and    edx,0xfffffff0
c001d0df:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001d0e2:	c3                   	ret    
c001d0e3:	90                   	nop

c001d0e4 <PCI::readBAR16(unsigned int, int)>:
c001d0e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d0e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0ec:	f6 c2 01             	test   dl,0x1
c001d0ef:	74 08                	je     c001d0f9 <PCI::readBAR16(unsigned int, int)+0x15>
c001d0f1:	83 e2 fc             	and    edx,0xfffffffc
c001d0f4:	01 c2                	add    edx,eax
c001d0f6:	66 ed                	in     ax,dx
c001d0f8:	c3                   	ret    
c001d0f9:	83 e2 f0             	and    edx,0xfffffff0
c001d0fc:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001d100:	c3                   	ret    
c001d101:	90                   	nop

c001d102 <PCI::readBAR32(unsigned int, int)>:
c001d102:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d106:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d10a:	f6 c2 01             	test   dl,0x1
c001d10d:	74 07                	je     c001d116 <PCI::readBAR32(unsigned int, int)+0x14>
c001d10f:	83 e2 fc             	and    edx,0xfffffffc
c001d112:	01 c2                	add    edx,eax
c001d114:	ed                   	in     eax,dx
c001d115:	c3                   	ret    
c001d116:	83 e2 f0             	and    edx,0xfffffff0
c001d119:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001d11c:	c3                   	ret    
c001d11d:	90                   	nop

c001d11e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001d11e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d122:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d126:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d12a:	f6 c2 01             	test   dl,0x1
c001d12d:	74 07                	je     c001d136 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001d12f:	83 e2 fc             	and    edx,0xfffffffc
c001d132:	01 ca                	add    edx,ecx
c001d134:	ee                   	out    dx,al
c001d135:	c3                   	ret    
c001d136:	83 e2 f0             	and    edx,0xfffffff0
c001d139:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001d13c:	c3                   	ret    
c001d13d:	90                   	nop

c001d13e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001d13e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d142:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d146:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d14a:	f6 c2 01             	test   dl,0x1
c001d14d:	74 08                	je     c001d157 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001d14f:	83 e2 fc             	and    edx,0xfffffffc
c001d152:	01 ca                	add    edx,ecx
c001d154:	66 ef                	out    dx,ax
c001d156:	c3                   	ret    
c001d157:	83 e2 f0             	and    edx,0xfffffff0
c001d15a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001d15e:	c3                   	ret    
c001d15f:	90                   	nop

c001d160 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001d160:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d164:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d168:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d16c:	f6 c2 01             	test   dl,0x1
c001d16f:	74 07                	je     c001d178 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001d171:	83 e2 fc             	and    edx,0xfffffffc
c001d174:	01 ca                	add    edx,ecx
c001d176:	ef                   	out    dx,eax
c001d177:	c3                   	ret    
c001d178:	83 e2 f0             	and    edx,0xfffffff0
c001d17b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001d17e:	c3                   	ret    
c001d17f:	90                   	nop

c001d180 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d180:	55                   	push   ebp
c001d181:	57                   	push   edi
c001d182:	56                   	push   esi
c001d183:	53                   	push   ebx
c001d184:	83 ec 0c             	sub    esp,0xc
c001d187:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d18b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001d18f:	89 f0                	mov    eax,esi
c001d191:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d195:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d199:	3c 07                	cmp    al,0x7
c001d19b:	76 10                	jbe    c001d1ad <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001d19d:	83 ec 0c             	sub    esp,0xc
c001d1a0:	68 6b 62 02 c0       	push   0xc002626b
c001d1a5:	e8 f9 76 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c001d1aa:	83 c4 10             	add    esp,0x10
c001d1ad:	80 fb 0f             	cmp    bl,0xf
c001d1b0:	76 10                	jbe    c001d1c2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001d1b2:	83 ec 0c             	sub    esp,0xc
c001d1b5:	68 9b 62 02 c0       	push   0xc002629b
c001d1ba:	e8 e4 76 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c001d1bf:	83 c4 10             	add    esp,0x10
c001d1c2:	8d 04 36             	lea    eax,[esi+esi*1]
c001d1c5:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d1ca:	83 c8 f0             	or     eax,0xfffffff0
c001d1cd:	ee                   	out    dx,al
c001d1ce:	ba fa 0c 00 00       	mov    edx,0xcfa
c001d1d3:	89 e8                	mov    eax,ebp
c001d1d5:	ee                   	out    dx,al
c001d1d6:	83 c4 0c             	add    esp,0xc
c001d1d9:	89 d8                	mov    eax,ebx
c001d1db:	66 81 e7 fc 00       	and    di,0xfc
c001d1e0:	5b                   	pop    ebx
c001d1e1:	c1 e0 08             	shl    eax,0x8
c001d1e4:	5e                   	pop    esi
c001d1e5:	09 f8                	or     eax,edi
c001d1e7:	5f                   	pop    edi
c001d1e8:	66 0d 00 c0          	or     ax,0xc000
c001d1ec:	5d                   	pop    ebp
c001d1ed:	c3                   	ret    

c001d1ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d1ee:	57                   	push   edi
c001d1ef:	56                   	push   esi
c001d1f0:	53                   	push   ebx
c001d1f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d1f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d1f9:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001d1ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d203:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d207:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d20b:	83 ff 01             	cmp    edi,0x1
c001d20e:	75 3e                	jne    c001d24e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001d210:	89 de                	mov    esi,ebx
c001d212:	0f b6 c0             	movzx  eax,al
c001d215:	81 e6 fc 00 00 00    	and    esi,0xfc
c001d21b:	c1 e0 10             	shl    eax,0x10
c001d21e:	0f b6 c9             	movzx  ecx,cl
c001d221:	09 f0                	or     eax,esi
c001d223:	c1 e1 08             	shl    ecx,0x8
c001d226:	0f b6 d2             	movzx  edx,dl
c001d229:	09 c8                	or     eax,ecx
c001d22b:	c1 e2 0b             	shl    edx,0xb
c001d22e:	09 d0                	or     eax,edx
c001d230:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d235:	0d 00 00 00 80       	or     eax,0x80000000
c001d23a:	ef                   	out    dx,eax
c001d23b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d240:	ed                   	in     eax,dx
c001d241:	83 e3 02             	and    ebx,0x2
c001d244:	0f b6 cb             	movzx  ecx,bl
c001d247:	c1 e1 03             	shl    ecx,0x3
c001d24a:	d3 e8                	shr    eax,cl
c001d24c:	eb 43                	jmp    c001d291 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d24e:	83 ff 02             	cmp    edi,0x2
c001d251:	75 2c                	jne    c001d27f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001d253:	83 ec 0c             	sub    esp,0xc
c001d256:	0f b6 c9             	movzx  ecx,cl
c001d259:	0f b6 d2             	movzx  edx,dl
c001d25c:	0f b6 fb             	movzx  edi,bl
c001d25f:	0f b6 c0             	movzx  eax,al
c001d262:	57                   	push   edi
c001d263:	51                   	push   ecx
c001d264:	52                   	push   edx
c001d265:	50                   	push   eax
c001d266:	56                   	push   esi
c001d267:	e8 14 ff ff ff       	call   c001d180 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d26c:	89 c2                	mov    edx,eax
c001d26e:	ed                   	in     eax,dx
c001d26f:	83 e3 02             	and    ebx,0x2
c001d272:	83 c4 20             	add    esp,0x20
c001d275:	0f b6 cb             	movzx  ecx,bl
c001d278:	c1 e1 03             	shl    ecx,0x3
c001d27b:	d3 e8                	shr    eax,cl
c001d27d:	eb 12                	jmp    c001d291 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d27f:	83 ec 0c             	sub    esp,0xc
c001d282:	68 cb 62 02 c0       	push   0xc00262cb
c001d287:	e8 17 76 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c001d28c:	83 c4 10             	add    esp,0x10
c001d28f:	31 c0                	xor    eax,eax
c001d291:	5b                   	pop    ebx
c001d292:	5e                   	pop    esi
c001d293:	5f                   	pop    edi
c001d294:	c3                   	ret    
c001d295:	90                   	nop

c001d296 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001d296:	83 ec 18             	sub    esp,0x18
c001d299:	6a 00                	push   0x0
c001d29b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d2a0:	50                   	push   eax
c001d2a1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d2a6:	50                   	push   eax
c001d2a7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d2ac:	50                   	push   eax
c001d2ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2b1:	e8 38 ff ff ff       	call   c001d1ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d2b6:	83 c4 2c             	add    esp,0x2c
c001d2b9:	c3                   	ret    

c001d2ba <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001d2ba:	83 ec 18             	sub    esp,0x18
c001d2bd:	6a 0e                	push   0xe
c001d2bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d2c4:	50                   	push   eax
c001d2c5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d2ca:	50                   	push   eax
c001d2cb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d2d0:	50                   	push   eax
c001d2d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2d5:	e8 14 ff ff ff       	call   c001d1ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d2da:	83 c4 2c             	add    esp,0x2c
c001d2dd:	0f b6 c0             	movzx  eax,al
c001d2e0:	c3                   	ret    
c001d2e1:	90                   	nop

c001d2e2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001d2e2:	55                   	push   ebp
c001d2e3:	57                   	push   edi
c001d2e4:	56                   	push   esi
c001d2e5:	53                   	push   ebx
c001d2e6:	83 ec 18             	sub    esp,0x18
c001d2e9:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001d2ee:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001d2f3:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001d2f8:	6a 0a                	push   0xa
c001d2fa:	56                   	push   esi
c001d2fb:	55                   	push   ebp
c001d2fc:	57                   	push   edi
c001d2fd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d301:	e8 e8 fe ff ff       	call   c001d1ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d306:	83 c4 14             	add    esp,0x14
c001d309:	89 c3                	mov    ebx,eax
c001d30b:	6a 0a                	push   0xa
c001d30d:	0f b6 db             	movzx  ebx,bl
c001d310:	56                   	push   esi
c001d311:	55                   	push   ebp
c001d312:	57                   	push   edi
c001d313:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d317:	e8 d2 fe ff ff       	call   c001d1ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d31c:	83 c4 2c             	add    esp,0x2c
c001d31f:	25 00 ff 00 00       	and    eax,0xff00
c001d324:	09 d8                	or     eax,ebx
c001d326:	5b                   	pop    ebx
c001d327:	5e                   	pop    esi
c001d328:	5f                   	pop    edi
c001d329:	5d                   	pop    ebp
c001d32a:	c3                   	ret    
c001d32b:	90                   	nop

c001d32c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001d32c:	83 ec 18             	sub    esp,0x18
c001d32f:	6a 08                	push   0x8
c001d331:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d336:	50                   	push   eax
c001d337:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d33c:	50                   	push   eax
c001d33d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d342:	50                   	push   eax
c001d343:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d347:	e8 a2 fe ff ff       	call   c001d1ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d34c:	83 c4 2c             	add    esp,0x2c
c001d34f:	0f b6 c4             	movzx  eax,ah
c001d352:	c3                   	ret    
c001d353:	90                   	nop

c001d354 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001d354:	83 ec 18             	sub    esp,0x18
c001d357:	6a 08                	push   0x8
c001d359:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d35e:	50                   	push   eax
c001d35f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d364:	50                   	push   eax
c001d365:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d36a:	50                   	push   eax
c001d36b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d36f:	e8 7a fe ff ff       	call   c001d1ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d374:	83 c4 2c             	add    esp,0x2c
c001d377:	c3                   	ret    

c001d378 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001d378:	83 ec 18             	sub    esp,0x18
c001d37b:	6a 3c                	push   0x3c
c001d37d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d382:	50                   	push   eax
c001d383:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d388:	50                   	push   eax
c001d389:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d38e:	50                   	push   eax
c001d38f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d393:	e8 56 fe ff ff       	call   c001d1ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d398:	83 c4 2c             	add    esp,0x2c
c001d39b:	c3                   	ret    

c001d39c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001d39c:	83 ec 18             	sub    esp,0x18
c001d39f:	6a 18                	push   0x18
c001d3a1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d3a6:	50                   	push   eax
c001d3a7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d3ac:	50                   	push   eax
c001d3ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d3b2:	50                   	push   eax
c001d3b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d3b7:	e8 32 fe ff ff       	call   c001d1ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d3bc:	83 c4 2c             	add    esp,0x2c
c001d3bf:	0f b6 c4             	movzx  eax,ah
c001d3c2:	c3                   	ret    
c001d3c3:	90                   	nop

c001d3c4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d3c4:	55                   	push   ebp
c001d3c5:	57                   	push   edi
c001d3c6:	56                   	push   esi
c001d3c7:	53                   	push   ebx
c001d3c8:	83 ec 28             	sub    esp,0x28
c001d3cb:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d3cf:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001d3d4:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001d3d9:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001d3de:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001d3e5:	8d 43 12             	lea    eax,[ebx+0x12]
c001d3e8:	83 c3 10             	add    ebx,0x10
c001d3eb:	0f b6 c0             	movzx  eax,al
c001d3ee:	0f b6 db             	movzx  ebx,bl
c001d3f1:	50                   	push   eax
c001d3f2:	51                   	push   ecx
c001d3f3:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001d3f7:	57                   	push   edi
c001d3f8:	55                   	push   ebp
c001d3f9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d3fd:	e8 ec fd ff ff       	call   c001d1ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d402:	83 c4 14             	add    esp,0x14
c001d405:	89 c6                	mov    esi,eax
c001d407:	53                   	push   ebx
c001d408:	c1 e6 10             	shl    esi,0x10
c001d40b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d40f:	51                   	push   ecx
c001d410:	57                   	push   edi
c001d411:	55                   	push   ebp
c001d412:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d416:	e8 d3 fd ff ff       	call   c001d1ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d41b:	83 c4 3c             	add    esp,0x3c
c001d41e:	0f b7 c0             	movzx  eax,ax
c001d421:	5b                   	pop    ebx
c001d422:	09 f0                	or     eax,esi
c001d424:	5e                   	pop    esi
c001d425:	5f                   	pop    edi
c001d426:	5d                   	pop    ebp
c001d427:	c3                   	ret    

c001d428 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001d428:	55                   	push   ebp
c001d429:	57                   	push   edi
c001d42a:	56                   	push   esi
c001d42b:	53                   	push   ebx
c001d42c:	83 ec 0c             	sub    esp,0xc
c001d42f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d433:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d437:	89 f5                	mov    ebp,esi
c001d439:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001d43f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d443:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d447:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d44b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d44f:	83 f9 01             	cmp    ecx,0x1
c001d452:	75 5d                	jne    c001d4b1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001d454:	0f b6 c8             	movzx  ecx,al
c001d457:	0f b6 d2             	movzx  edx,dl
c001d45a:	c1 e1 10             	shl    ecx,0x10
c001d45d:	c1 e2 0b             	shl    edx,0xb
c001d460:	89 f0                	mov    eax,esi
c001d462:	25 fc 00 00 00       	and    eax,0xfc
c001d467:	09 c1                	or     ecx,eax
c001d469:	89 e8                	mov    eax,ebp
c001d46b:	0f b6 c0             	movzx  eax,al
c001d46e:	c1 e0 08             	shl    eax,0x8
c001d471:	09 c1                	or     ecx,eax
c001d473:	09 d1                	or     ecx,edx
c001d475:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d47a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001d480:	89 c8                	mov    eax,ecx
c001d482:	ef                   	out    dx,eax
c001d483:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d488:	ed                   	in     eax,dx
c001d489:	0f b7 db             	movzx  ebx,bx
c001d48c:	83 e6 02             	and    esi,0x2
c001d48f:	74 0a                	je     c001d49b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001d491:	0f b7 d0             	movzx  edx,ax
c001d494:	c1 e3 10             	shl    ebx,0x10
c001d497:	09 d3                	or     ebx,edx
c001d499:	eb 05                	jmp    c001d4a0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001d49b:	66 31 c0             	xor    ax,ax
c001d49e:	09 c3                	or     ebx,eax
c001d4a0:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d4a5:	89 c8                	mov    eax,ecx
c001d4a7:	ef                   	out    dx,eax
c001d4a8:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d4ad:	89 d8                	mov    eax,ebx
c001d4af:	eb 41                	jmp    c001d4f2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d4b1:	83 f9 02             	cmp    ecx,0x2
c001d4b4:	75 45                	jne    c001d4fb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001d4b6:	83 ec 0c             	sub    esp,0xc
c001d4b9:	0f b6 d2             	movzx  edx,dl
c001d4bc:	89 f1                	mov    ecx,esi
c001d4be:	0f b6 c0             	movzx  eax,al
c001d4c1:	0f b6 f1             	movzx  esi,cl
c001d4c4:	89 e9                	mov    ecx,ebp
c001d4c6:	56                   	push   esi
c001d4c7:	0f b6 c9             	movzx  ecx,cl
c001d4ca:	51                   	push   ecx
c001d4cb:	52                   	push   edx
c001d4cc:	50                   	push   eax
c001d4cd:	57                   	push   edi
c001d4ce:	e8 ad fc ff ff       	call   c001d180 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d4d3:	89 c2                	mov    edx,eax
c001d4d5:	ed                   	in     eax,dx
c001d4d6:	83 c4 20             	add    esp,0x20
c001d4d9:	0f b7 db             	movzx  ebx,bx
c001d4dc:	f6 c2 02             	test   dl,0x2
c001d4df:	74 0c                	je     c001d4ed <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001d4e1:	0f b7 c8             	movzx  ecx,ax
c001d4e4:	89 d8                	mov    eax,ebx
c001d4e6:	c1 e0 10             	shl    eax,0x10
c001d4e9:	09 c8                	or     eax,ecx
c001d4eb:	eb 05                	jmp    c001d4f2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d4ed:	66 31 c0             	xor    ax,ax
c001d4f0:	09 d8                	or     eax,ebx
c001d4f2:	ef                   	out    dx,eax
c001d4f3:	83 c4 0c             	add    esp,0xc
c001d4f6:	5b                   	pop    ebx
c001d4f7:	5e                   	pop    esi
c001d4f8:	5f                   	pop    edi
c001d4f9:	5d                   	pop    ebp
c001d4fa:	c3                   	ret    
c001d4fb:	c7 44 24 20 cb 62 02 c0 	mov    DWORD PTR [esp+0x20],0xc00262cb
c001d503:	83 c4 0c             	add    esp,0xc
c001d506:	5b                   	pop    ebx
c001d507:	5e                   	pop    esi
c001d508:	5f                   	pop    edi
c001d509:	5d                   	pop    ebp
c001d50a:	e9 94 73 ff ff       	jmp    c00148a3 <Krnl::panic(char const*)>
c001d50f:	90                   	nop

c001d510 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001d510:	55                   	push   ebp
c001d511:	57                   	push   edi
c001d512:	56                   	push   esi
c001d513:	53                   	push   ebx
c001d514:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001d51a:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001d521:	75 0f                	jne    c001d532 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001d523:	80 3d 2c 9a 02 c0 00 	cmp    BYTE PTR ds:0xc0029a2c,0x0
c001d52a:	0f 85 fa 00 00 00    	jne    c001d62a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001d530:	eb 2f                	jmp    c001d561 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001d532:	83 ec 0c             	sub    esp,0xc
c001d535:	68 d1 62 02 c0       	push   0xc00262d1
c001d53a:	e8 22 c5 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001d53f:	83 c4 10             	add    esp,0x10
c001d542:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001d549:	75 d8                	jne    c001d523 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001d54b:	e4 60                	in     al,0x60
c001d54d:	3c 1c                	cmp    al,0x1c
c001d54f:	74 04                	je     c001d555 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d551:	3c 5a                	cmp    al,0x5a
c001d553:	75 f6                	jne    c001d54b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001d555:	e4 60                	in     al,0x60
c001d557:	3c 5a                	cmp    al,0x5a
c001d559:	74 fa                	je     c001d555 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d55b:	3c 1c                	cmp    al,0x1c
c001d55d:	74 f6                	je     c001d555 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d55f:	eb c2                	jmp    c001d523 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001d561:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001d568:	0f 85 86 00 00 00    	jne    c001d5f4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001d56e:	83 ec 0c             	sub    esp,0xc
c001d571:	68 14 01 00 00       	push   0x114
c001d576:	e8 8c c4 fe ff       	call   c0009a07 <malloc>
c001d57b:	83 c4 0c             	add    esp,0xc
c001d57e:	89 c3                	mov    ebx,eax
c001d580:	ff 35 30 90 02 c0    	push   DWORD PTR ds:0xc0029030
c001d586:	68 eb 62 02 c0       	push   0xc00262eb
c001d58b:	50                   	push   eax
c001d58c:	e8 d1 fc fe ff       	call   c000d262 <File::File(char const*, Process*)>
c001d591:	5a                   	pop    edx
c001d592:	59                   	pop    ecx
c001d593:	6a 01                	push   0x1
c001d595:	53                   	push   ebx
c001d596:	e8 69 fd fe ff       	call   c000d304 <File::open(FileOpenMode)>
c001d59b:	83 c4 0c             	add    esp,0xc
c001d59e:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001d5a2:	50                   	push   eax
c001d5a3:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d5a7:	50                   	push   eax
c001d5a8:	53                   	push   ebx
c001d5a9:	e8 02 00 ff ff       	call   c000d5b0 <File::stat(unsigned long long*, bool*)>
c001d5ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5b2:	40                   	inc    eax
c001d5b3:	89 04 24             	mov    DWORD PTR [esp],eax
c001d5b6:	e8 4c c4 fe ff       	call   c0009a07 <malloc>
c001d5bb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d5bf:	a3 28 9a 02 c0       	mov    ds:0xc0029a28,eax
c001d5c4:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001d5c8:	5e                   	pop    esi
c001d5c9:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d5cb:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001d5cf:	51                   	push   ecx
c001d5d0:	50                   	push   eax
c001d5d1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d5d5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d5d9:	53                   	push   ebx
c001d5da:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d5dd:	83 c4 14             	add    esp,0x14
c001d5e0:	53                   	push   ebx
c001d5e1:	e8 7c fd fe ff       	call   c000d362 <File::close()>
c001d5e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5ea:	83 c4 10             	add    esp,0x10
c001d5ed:	a3 24 9a 02 c0       	mov    ds:0xc0029a24,eax
c001d5f2:	eb 36                	jmp    c001d62a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001d5f4:	83 ec 0c             	sub    esp,0xc
c001d5f7:	68 04 63 02 c0       	push   0xc0026304
c001d5fc:	e8 60 c4 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001d601:	83 c4 10             	add    esp,0x10
c001d604:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001d60b:	0f 85 5d ff ff ff    	jne    c001d56e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001d611:	e4 60                	in     al,0x60
c001d613:	3c 1c                	cmp    al,0x1c
c001d615:	74 04                	je     c001d61b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d617:	3c 5a                	cmp    al,0x5a
c001d619:	75 f6                	jne    c001d611 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001d61b:	e4 60                	in     al,0x60
c001d61d:	3c 5a                	cmp    al,0x5a
c001d61f:	74 fa                	je     c001d61b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d621:	3c 1c                	cmp    al,0x1c
c001d623:	74 f6                	je     c001d61b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d625:	e9 44 ff ff ff       	jmp    c001d56e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001d62a:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001d631:	75 0b                	jne    c001d63e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001d633:	31 f6                	xor    esi,esi
c001d635:	31 db                	xor    ebx,ebx
c001d637:	31 ed                	xor    ebp,ebp
c001d639:	e9 a3 01 00 00       	jmp    c001d7e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d63e:	83 ec 0c             	sub    esp,0xc
c001d641:	68 16 63 02 c0       	push   0xc0026316
c001d646:	e8 16 c4 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001d64b:	8b 15 60 7b 02 c0    	mov    edx,DWORD PTR ds:0xc0027b60
c001d651:	83 c4 10             	add    esp,0x10
c001d654:	f6 c2 80             	test   dl,0x80
c001d657:	74 0c                	je     c001d665 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001d659:	0f ba e2 0b          	bt     edx,0xb
c001d65d:	72 1a                	jb     c001d679 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001d65f:	eb d2                	jmp    c001d633 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d661:	3c 5a                	cmp    al,0x5a
c001d663:	74 0c                	je     c001d671 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d665:	e4 60                	in     al,0x60
c001d667:	3c 1c                	cmp    al,0x1c
c001d669:	75 f6                	jne    c001d661 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001d66b:	eb 04                	jmp    c001d671 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d66d:	3c 1c                	cmp    al,0x1c
c001d66f:	75 e8                	jne    c001d659 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001d671:	e4 60                	in     al,0x60
c001d673:	3c 5a                	cmp    al,0x5a
c001d675:	74 fa                	je     c001d671 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d677:	eb f4                	jmp    c001d66d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001d679:	83 ec 0c             	sub    esp,0xc
c001d67c:	68 1b 63 02 c0       	push   0xc002631b
c001d681:	e8 db c3 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001d686:	83 c4 10             	add    esp,0x10
c001d689:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001d690:	75 a1                	jne    c001d633 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d692:	e4 60                	in     al,0x60
c001d694:	3c 5a                	cmp    al,0x5a
c001d696:	74 04                	je     c001d69c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d698:	3c 1c                	cmp    al,0x1c
c001d69a:	75 f6                	jne    c001d692 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001d69c:	e4 60                	in     al,0x60
c001d69e:	3c 5a                	cmp    al,0x5a
c001d6a0:	74 fa                	je     c001d69c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d6a2:	3c 1c                	cmp    al,0x1c
c001d6a4:	74 f6                	je     c001d69c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d6a6:	eb 8b                	jmp    c001d633 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d6a8:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001d6af:	0f 85 3d 01 00 00    	jne    c001d7f2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001d6b5:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c001d6ba:	8d 7e 01             	lea    edi,[esi+0x1]
c001d6bd:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001d6c0:	d4 40                	aam    0x40
c001d6c2:	d5 39                	aad    0x39
c001d6c4:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001d6cb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d6cf:	0f 85 53 01 00 00    	jne    c001d828 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001d6d5:	8b 15 28 9a 02 c0    	mov    edx,DWORD PTR ds:0xc0029a28
c001d6db:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d6de:	d4 40                	aam    0x40
c001d6e0:	d5 39                	aad    0x39
c001d6e2:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d6e6:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001d6ea:	d4 40                	aam    0x40
c001d6ec:	d5 39                	aad    0x39
c001d6ee:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d6f2:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001d6f6:	d4 40                	aam    0x40
c001d6f8:	d5 39                	aad    0x39
c001d6fa:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d6fe:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001d702:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001d706:	3c 56                	cmp    al,0x56
c001d708:	74 49                	je     c001d753 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001d70a:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001d70e:	d4 40                	aam    0x40
c001d710:	d5 39                	aad    0x39
c001d712:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d715:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001d719:	0f b6 c9             	movzx  ecx,cl
c001d71c:	c1 e1 04             	shl    ecx,0x4
c001d71f:	d4 40                	aam    0x40
c001d721:	d5 39                	aad    0x39
c001d723:	83 e8 30             	sub    eax,0x30
c001d726:	0f b6 c0             	movzx  eax,al
c001d729:	09 c1                	or     ecx,eax
c001d72b:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001d72f:	c1 e1 04             	shl    ecx,0x4
c001d732:	d4 40                	aam    0x40
c001d734:	d5 39                	aad    0x39
c001d736:	83 e8 30             	sub    eax,0x30
c001d739:	0f b6 c0             	movzx  eax,al
c001d73c:	09 c1                	or     ecx,eax
c001d73e:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001d742:	c1 e1 04             	shl    ecx,0x4
c001d745:	d4 40                	aam    0x40
c001d747:	d5 39                	aad    0x39
c001d749:	83 e8 30             	sub    eax,0x30
c001d74c:	0f b6 c0             	movzx  eax,al
c001d74f:	09 c8                	or     eax,ecx
c001d751:	89 c5                	mov    ebp,eax
c001d753:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001d757:	80 f9 44             	cmp    cl,0x44
c001d75a:	74 47                	je     c001d7a3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001d75c:	88 c8                	mov    al,cl
c001d75e:	d4 40                	aam    0x40
c001d760:	d5 39                	aad    0x39
c001d762:	83 e8 30             	sub    eax,0x30
c001d765:	0f b6 f8             	movzx  edi,al
c001d768:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001d76c:	c1 e7 04             	shl    edi,0x4
c001d76f:	d4 40                	aam    0x40
c001d771:	d5 39                	aad    0x39
c001d773:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d776:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001d77a:	0f b6 db             	movzx  ebx,bl
c001d77d:	09 fb                	or     ebx,edi
c001d77f:	c1 e3 04             	shl    ebx,0x4
c001d782:	d4 40                	aam    0x40
c001d784:	d5 39                	aad    0x39
c001d786:	83 e8 30             	sub    eax,0x30
c001d789:	0f b6 f8             	movzx  edi,al
c001d78c:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001d790:	09 fb                	or     ebx,edi
c001d792:	89 df                	mov    edi,ebx
c001d794:	c1 e7 04             	shl    edi,0x4
c001d797:	d4 40                	aam    0x40
c001d799:	d5 39                	aad    0x39
c001d79b:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d79e:	0f b6 db             	movzx  ebx,bl
c001d7a1:	09 fb                	or     ebx,edi
c001d7a3:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c001d7a8:	83 c6 10             	add    esi,0x10
c001d7ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d7af:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001d7b3:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001d7b6:	3c 0a                	cmp    al,0xa
c001d7b8:	0f 85 a0 00 00 00    	jne    c001d85e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001d7be:	3c 0a                	cmp    al,0xa
c001d7c0:	0f 94 c0             	sete   al
c001d7c3:	0f b6 c0             	movzx  eax,al
c001d7c6:	01 c6                	add    esi,eax
c001d7c8:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001d7cd:	0f 84 a2 00 00 00    	je     c001d875 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001d7d3:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001d7db:	0f 84 94 00 00 00    	je     c001d875 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001d7e1:	39 35 24 9a 02 c0    	cmp    DWORD PTR ds:0xc0029a24,esi
c001d7e7:	0f 8f bb fe ff ff    	jg     c001d6a8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001d7ed:	e9 e8 00 00 00       	jmp    c001d8da <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001d7f2:	83 ec 0c             	sub    esp,0xc
c001d7f5:	68 22 63 02 c0       	push   0xc0026322
c001d7fa:	e8 62 c2 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001d7ff:	83 c4 10             	add    esp,0x10
c001d802:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001d809:	0f 85 a6 fe ff ff    	jne    c001d6b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001d80f:	e4 60                	in     al,0x60
c001d811:	3c 5a                	cmp    al,0x5a
c001d813:	74 04                	je     c001d819 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001d815:	3c 1c                	cmp    al,0x1c
c001d817:	75 f6                	jne    c001d80f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001d819:	e4 60                	in     al,0x60
c001d81b:	3c 5a                	cmp    al,0x5a
c001d81d:	74 fa                	je     c001d819 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001d81f:	3c 1c                	cmp    al,0x1c
c001d821:	74 f6                	je     c001d819 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001d823:	e9 8d fe ff ff       	jmp    c001d6b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001d828:	83 ec 0c             	sub    esp,0xc
c001d82b:	68 2a 63 02 c0       	push   0xc002632a
c001d830:	e8 2c c2 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001d835:	83 c4 10             	add    esp,0x10
c001d838:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001d83f:	0f 85 90 fe ff ff    	jne    c001d6d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001d845:	e4 60                	in     al,0x60
c001d847:	3c 5a                	cmp    al,0x5a
c001d849:	74 04                	je     c001d84f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001d84b:	3c 1c                	cmp    al,0x1c
c001d84d:	75 f6                	jne    c001d845 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001d84f:	e4 60                	in     al,0x60
c001d851:	3c 5a                	cmp    al,0x5a
c001d853:	74 fa                	je     c001d84f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001d855:	3c 1c                	cmp    al,0x1c
c001d857:	74 f6                	je     c001d84f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001d859:	e9 77 fe ff ff       	jmp    c001d6d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001d85e:	47                   	inc    edi
c001d85f:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001d863:	0f 84 55 ff ff ff    	je     c001d7be <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001d869:	46                   	inc    esi
c001d86a:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001d86d:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001d870:	e9 3e ff ff ff       	jmp    c001d7b3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001d875:	80 f9 44             	cmp    cl,0x44
c001d878:	74 0e                	je     c001d888 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001d87a:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001d882:	0f 85 59 ff ff ff    	jne    c001d7e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d888:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001d88c:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001d890:	c1 e0 04             	shl    eax,0x4
c001d893:	83 ea 30             	sub    edx,0x30
c001d896:	09 d0                	or     eax,edx
c001d898:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001d89f:	0f 85 3c ff ff ff    	jne    c001d7e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d8a5:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001d8a9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d8ad:	c1 e2 04             	shl    edx,0x4
c001d8b0:	83 e8 30             	sub    eax,0x30
c001d8b3:	09 d0                	or     eax,edx
c001d8b5:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001d8bc:	0f 85 1f ff ff ff    	jne    c001d7e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d8c2:	50                   	push   eax
c001d8c3:	50                   	push   eax
c001d8c4:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d8c8:	50                   	push   eax
c001d8c9:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001d8d0:	e8 6b 2e fe ff       	call   c0000740 <strcpy>
c001d8d5:	83 c4 10             	add    esp,0x10
c001d8d8:	eb 15                	jmp    c001d8ef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001d8da:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d8e1:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001d8ec:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001d8ef:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d8f6:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d8fc:	5b                   	pop    ebx
c001d8fd:	5e                   	pop    esi
c001d8fe:	5f                   	pop    edi
c001d8ff:	5d                   	pop    ebp
c001d900:	c3                   	ret    
c001d901:	90                   	nop

c001d902 <PCI::checkBus(unsigned char)>:
c001d902:	56                   	push   esi
c001d903:	53                   	push   ebx
c001d904:	31 db                	xor    ebx,ebx
c001d906:	51                   	push   ecx
c001d907:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d90c:	52                   	push   edx
c001d90d:	53                   	push   ebx
c001d90e:	43                   	inc    ebx
c001d90f:	56                   	push   esi
c001d910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d914:	e8 bf 07 00 00       	call   c001e0d8 <PCI::checkDevice(unsigned char, unsigned char)>
c001d919:	83 c4 10             	add    esp,0x10
c001d91c:	83 fb 20             	cmp    ebx,0x20
c001d91f:	75 eb                	jne    c001d90c <PCI::checkBus(unsigned char)+0xa>
c001d921:	58                   	pop    eax
c001d922:	5b                   	pop    ebx
c001d923:	5e                   	pop    esi
c001d924:	c3                   	ret    
c001d925:	90                   	nop

c001d926 <PCI::foundDevice(PCIDeviceInfo)>:
c001d926:	55                   	push   ebp
c001d927:	57                   	push   edi
c001d928:	56                   	push   esi
c001d929:	53                   	push   ebx
c001d92a:	83 ec 1c             	sub    esp,0x1c
c001d92d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d931:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001d937:	0f 84 20 04 00 00    	je     c001dd5d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d93d:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001d944:	75 37                	jne    c001d97d <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001d946:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d94a:	66 81 f9 06 04       	cmp    cx,0x406
c001d94f:	75 5b                	jne    c001d9ac <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001d951:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001d956:	50                   	push   eax
c001d957:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001d95c:	50                   	push   eax
c001d95d:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001d962:	50                   	push   eax
c001d963:	53                   	push   ebx
c001d964:	e8 33 fa ff ff       	call   c001d39c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001d969:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001d96d:	0f b6 c0             	movzx  eax,al
c001d970:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d974:	83 c4 2c             	add    esp,0x2c
c001d977:	5b                   	pop    ebx
c001d978:	5e                   	pop    esi
c001d979:	5f                   	pop    edi
c001d97a:	5d                   	pop    ebp
c001d97b:	eb 85                	jmp    c001d902 <PCI::checkBus(unsigned char)>
c001d97d:	83 ec 0c             	sub    esp,0xc
c001d980:	68 33 63 02 c0       	push   0xc0026333
c001d985:	e8 d7 c0 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001d98a:	83 c4 10             	add    esp,0x10
c001d98d:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001d994:	75 b0                	jne    c001d946 <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001d996:	e4 60                	in     al,0x60
c001d998:	3c 5a                	cmp    al,0x5a
c001d99a:	74 04                	je     c001d9a0 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001d99c:	3c 1c                	cmp    al,0x1c
c001d99e:	75 f6                	jne    c001d996 <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001d9a0:	e4 60                	in     al,0x60
c001d9a2:	3c 5a                	cmp    al,0x5a
c001d9a4:	74 fa                	je     c001d9a0 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001d9a6:	3c 1c                	cmp    al,0x1c
c001d9a8:	74 f6                	je     c001d9a0 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001d9aa:	eb 9a                	jmp    c001d946 <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001d9ac:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001d9b2:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001d9b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d9ba:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d9be:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001d9c2:	88 d0                	mov    al,dl
c001d9c4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d9c9:	74 3b                	je     c001da06 <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001d9cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d9cf:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001d9d2:	85 d2                	test   edx,edx
c001d9d4:	74 24                	je     c001d9fa <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001d9d6:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001d9dc:	31 ef                	xor    edi,ebp
c001d9de:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001d9e4:	75 14                	jne    c001d9fa <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001d9e6:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001d9ec:	75 0c                	jne    c001d9fa <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001d9ee:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001d9f4:	0f 84 63 03 00 00    	je     c001dd5d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d9fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d9fe:	8b 12                	mov    edx,DWORD PTR [edx]
c001da00:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001da04:	eb be                	jmp    c001d9c4 <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001da06:	66 81 f9 01 06       	cmp    cx,0x601
c001da0b:	0f 85 81 01 00 00    	jne    c001db92 <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001da11:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001da18:	75 25                	jne    c001da3f <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001da1a:	83 ec 0c             	sub    esp,0xc
c001da1d:	68 64 01 00 00       	push   0x164
c001da22:	e8 e0 bf fe ff       	call   c0009a07 <malloc>
c001da27:	89 04 24             	mov    DWORD PTR [esp],eax
c001da2a:	89 c5                	mov    ebp,eax
c001da2c:	e8 b7 12 00 00       	call   c001ece8 <SATABus::SATABus()>
c001da31:	83 c4 10             	add    esp,0x10
c001da34:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001da3b:	74 4a                	je     c001da87 <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001da3d:	eb 2f                	jmp    c001da6e <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001da3f:	83 ec 0c             	sub    esp,0xc
c001da42:	68 43 63 02 c0       	push   0xc0026343
c001da47:	e8 15 c0 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001da4c:	83 c4 10             	add    esp,0x10
c001da4f:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001da56:	75 c2                	jne    c001da1a <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001da58:	e4 60                	in     al,0x60
c001da5a:	3c 1c                	cmp    al,0x1c
c001da5c:	74 04                	je     c001da62 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001da5e:	3c 5a                	cmp    al,0x5a
c001da60:	75 f6                	jne    c001da58 <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001da62:	e4 60                	in     al,0x60
c001da64:	3c 5a                	cmp    al,0x5a
c001da66:	74 fa                	je     c001da62 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001da68:	3c 1c                	cmp    al,0x1c
c001da6a:	74 f6                	je     c001da62 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001da6c:	eb ac                	jmp    c001da1a <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001da6e:	83 ec 0c             	sub    esp,0xc
c001da71:	68 49 63 02 c0       	push   0xc0026349
c001da76:	e8 e6 bf fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001da7b:	83 c4 10             	add    esp,0x10
c001da7e:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001da85:	74 1b                	je     c001daa2 <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001da87:	50                   	push   eax
c001da88:	50                   	push   eax
c001da89:	55                   	push   ebp
c001da8a:	53                   	push   ebx
c001da8b:	e8 ee 06 ff ff       	call   c000e17e <Device::addChild(Device*)>
c001da90:	83 c4 10             	add    esp,0x10
c001da93:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001da9a:	74 33                	je     c001dacf <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001da9c:	eb 18                	jmp    c001dab6 <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001da9e:	3c 1c                	cmp    al,0x1c
c001daa0:	74 0c                	je     c001daae <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001daa2:	e4 60                	in     al,0x60
c001daa4:	3c 5a                	cmp    al,0x5a
c001daa6:	75 f6                	jne    c001da9e <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001daa8:	eb 04                	jmp    c001daae <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001daaa:	3c 1c                	cmp    al,0x1c
c001daac:	75 d9                	jne    c001da87 <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001daae:	e4 60                	in     al,0x60
c001dab0:	3c 5a                	cmp    al,0x5a
c001dab2:	74 fa                	je     c001daae <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dab4:	eb f4                	jmp    c001daaa <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001dab6:	83 ec 0c             	sub    esp,0xc
c001dab9:	68 51 63 02 c0       	push   0xc0026351
c001dabe:	e8 9e bf fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001dac3:	83 c4 10             	add    esp,0x10
c001dac6:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001dacd:	74 29                	je     c001daf8 <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001dacf:	83 ec 2c             	sub    esp,0x2c
c001dad2:	b9 09 00 00 00       	mov    ecx,0x9
c001dad7:	8d 74 24 60          	lea    esi,[esp+0x60]
c001dadb:	fc                   	cld    
c001dadc:	89 e7                	mov    edi,esp
c001dade:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dae0:	55                   	push   ebp
c001dae1:	e8 aa 05 ff ff       	call   c000e090 <Device::preOpenPCI(PCIDeviceInfo)>
c001dae6:	83 c4 30             	add    esp,0x30
c001dae9:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001daf0:	74 33                	je     c001db25 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001daf2:	eb 18                	jmp    c001db0c <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001daf4:	3c 1c                	cmp    al,0x1c
c001daf6:	74 0c                	je     c001db04 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001daf8:	e4 60                	in     al,0x60
c001dafa:	3c 5a                	cmp    al,0x5a
c001dafc:	75 f6                	jne    c001daf4 <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001dafe:	eb 04                	jmp    c001db04 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001db00:	3c 1c                	cmp    al,0x1c
c001db02:	75 cb                	jne    c001dacf <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001db04:	e4 60                	in     al,0x60
c001db06:	3c 5a                	cmp    al,0x5a
c001db08:	74 fa                	je     c001db04 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001db0a:	eb f4                	jmp    c001db00 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001db0c:	83 ec 0c             	sub    esp,0xc
c001db0f:	68 59 63 02 c0       	push   0xc0026359
c001db14:	e8 48 bf fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001db19:	83 c4 10             	add    esp,0x10
c001db1c:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001db23:	74 23                	je     c001db48 <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001db25:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001db28:	6a 00                	push   0x0
c001db2a:	6a 00                	push   0x0
c001db2c:	6a 00                	push   0x0
c001db2e:	55                   	push   ebp
c001db2f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001db32:	83 c4 10             	add    esp,0x10
c001db35:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001db3c:	0f 84 1b 02 00 00    	je     c001dd5d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001db42:	eb 18                	jmp    c001db5c <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001db44:	3c 1c                	cmp    al,0x1c
c001db46:	74 0c                	je     c001db54 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001db48:	e4 60                	in     al,0x60
c001db4a:	3c 5a                	cmp    al,0x5a
c001db4c:	75 f6                	jne    c001db44 <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001db4e:	eb 04                	jmp    c001db54 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001db50:	3c 1c                	cmp    al,0x1c
c001db52:	75 d1                	jne    c001db25 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001db54:	e4 60                	in     al,0x60
c001db56:	3c 5a                	cmp    al,0x5a
c001db58:	74 fa                	je     c001db54 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001db5a:	eb f4                	jmp    c001db50 <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001db5c:	83 ec 0c             	sub    esp,0xc
c001db5f:	68 61 63 02 c0       	push   0xc0026361
c001db64:	e8 f8 be fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001db69:	83 c4 10             	add    esp,0x10
c001db6c:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001db73:	0f 85 e4 01 00 00    	jne    c001dd5d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001db79:	e4 60                	in     al,0x60
c001db7b:	3c 5a                	cmp    al,0x5a
c001db7d:	74 04                	je     c001db83 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001db7f:	3c 1c                	cmp    al,0x1c
c001db81:	75 f6                	jne    c001db79 <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001db83:	e4 60                	in     al,0x60
c001db85:	3c 5a                	cmp    al,0x5a
c001db87:	74 fa                	je     c001db83 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001db89:	3c 1c                	cmp    al,0x1c
c001db8b:	74 f6                	je     c001db83 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001db8d:	e9 cb 01 00 00       	jmp    c001dd5d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001db92:	66 81 f9 01 01       	cmp    cx,0x101
c001db97:	0f 85 7a 01 00 00    	jne    c001dd17 <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001db9d:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001dba4:	75 25                	jne    c001dbcb <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001dba6:	83 ec 0c             	sub    esp,0xc
c001dba9:	68 70 02 00 00       	push   0x270
c001dbae:	e8 54 be fe ff       	call   c0009a07 <malloc>
c001dbb3:	89 04 24             	mov    DWORD PTR [esp],eax
c001dbb6:	89 c5                	mov    ebp,eax
c001dbb8:	e8 df 05 00 00       	call   c001e19c <IDE::IDE()>
c001dbbd:	83 c4 10             	add    esp,0x10
c001dbc0:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001dbc7:	74 4a                	je     c001dc13 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001dbc9:	eb 2f                	jmp    c001dbfa <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001dbcb:	83 ec 0c             	sub    esp,0xc
c001dbce:	68 69 63 02 c0       	push   0xc0026369
c001dbd3:	e8 89 be fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001dbd8:	83 c4 10             	add    esp,0x10
c001dbdb:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001dbe2:	75 c2                	jne    c001dba6 <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001dbe4:	e4 60                	in     al,0x60
c001dbe6:	3c 5a                	cmp    al,0x5a
c001dbe8:	74 04                	je     c001dbee <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001dbea:	3c 1c                	cmp    al,0x1c
c001dbec:	75 f6                	jne    c001dbe4 <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001dbee:	e4 60                	in     al,0x60
c001dbf0:	3c 5a                	cmp    al,0x5a
c001dbf2:	74 fa                	je     c001dbee <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001dbf4:	3c 1c                	cmp    al,0x1c
c001dbf6:	74 f6                	je     c001dbee <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001dbf8:	eb ac                	jmp    c001dba6 <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001dbfa:	83 ec 0c             	sub    esp,0xc
c001dbfd:	68 70 63 02 c0       	push   0xc0026370
c001dc02:	e8 5a be fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001dc07:	83 c4 10             	add    esp,0x10
c001dc0a:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001dc11:	74 1b                	je     c001dc2e <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001dc13:	57                   	push   edi
c001dc14:	57                   	push   edi
c001dc15:	55                   	push   ebp
c001dc16:	53                   	push   ebx
c001dc17:	e8 62 05 ff ff       	call   c000e17e <Device::addChild(Device*)>
c001dc1c:	83 c4 10             	add    esp,0x10
c001dc1f:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001dc26:	74 33                	je     c001dc5b <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001dc28:	eb 18                	jmp    c001dc42 <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001dc2a:	3c 1c                	cmp    al,0x1c
c001dc2c:	74 0c                	je     c001dc3a <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001dc2e:	e4 60                	in     al,0x60
c001dc30:	3c 5a                	cmp    al,0x5a
c001dc32:	75 f6                	jne    c001dc2a <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001dc34:	eb 04                	jmp    c001dc3a <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001dc36:	3c 1c                	cmp    al,0x1c
c001dc38:	75 d9                	jne    c001dc13 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001dc3a:	e4 60                	in     al,0x60
c001dc3c:	3c 5a                	cmp    al,0x5a
c001dc3e:	74 fa                	je     c001dc3a <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001dc40:	eb f4                	jmp    c001dc36 <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001dc42:	83 ec 0c             	sub    esp,0xc
c001dc45:	68 77 63 02 c0       	push   0xc0026377
c001dc4a:	e8 12 be fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001dc4f:	83 c4 10             	add    esp,0x10
c001dc52:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001dc59:	74 29                	je     c001dc84 <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001dc5b:	83 ec 2c             	sub    esp,0x2c
c001dc5e:	b9 09 00 00 00       	mov    ecx,0x9
c001dc63:	8d 74 24 60          	lea    esi,[esp+0x60]
c001dc67:	fc                   	cld    
c001dc68:	89 e7                	mov    edi,esp
c001dc6a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dc6c:	55                   	push   ebp
c001dc6d:	e8 1e 04 ff ff       	call   c000e090 <Device::preOpenPCI(PCIDeviceInfo)>
c001dc72:	83 c4 30             	add    esp,0x30
c001dc75:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001dc7c:	74 33                	je     c001dcb1 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001dc7e:	eb 18                	jmp    c001dc98 <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001dc80:	3c 1c                	cmp    al,0x1c
c001dc82:	74 0c                	je     c001dc90 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001dc84:	e4 60                	in     al,0x60
c001dc86:	3c 5a                	cmp    al,0x5a
c001dc88:	75 f6                	jne    c001dc80 <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001dc8a:	eb 04                	jmp    c001dc90 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001dc8c:	3c 1c                	cmp    al,0x1c
c001dc8e:	75 cb                	jne    c001dc5b <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001dc90:	e4 60                	in     al,0x60
c001dc92:	3c 5a                	cmp    al,0x5a
c001dc94:	74 fa                	je     c001dc90 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001dc96:	eb f4                	jmp    c001dc8c <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001dc98:	83 ec 0c             	sub    esp,0xc
c001dc9b:	68 7e 63 02 c0       	push   0xc002637e
c001dca0:	e8 bc bd fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001dca5:	83 c4 10             	add    esp,0x10
c001dca8:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001dcaf:	74 23                	je     c001dcd4 <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001dcb1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001dcb4:	6a 00                	push   0x0
c001dcb6:	6a 00                	push   0x0
c001dcb8:	6a 00                	push   0x0
c001dcba:	55                   	push   ebp
c001dcbb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dcbe:	83 c4 10             	add    esp,0x10
c001dcc1:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001dcc8:	0f 84 8f 00 00 00    	je     c001dd5d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dcce:	eb 18                	jmp    c001dce8 <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001dcd0:	3c 1c                	cmp    al,0x1c
c001dcd2:	74 0c                	je     c001dce0 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001dcd4:	e4 60                	in     al,0x60
c001dcd6:	3c 5a                	cmp    al,0x5a
c001dcd8:	75 f6                	jne    c001dcd0 <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001dcda:	eb 04                	jmp    c001dce0 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001dcdc:	3c 1c                	cmp    al,0x1c
c001dcde:	75 d1                	jne    c001dcb1 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001dce0:	e4 60                	in     al,0x60
c001dce2:	3c 5a                	cmp    al,0x5a
c001dce4:	74 fa                	je     c001dce0 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001dce6:	eb f4                	jmp    c001dcdc <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001dce8:	83 ec 0c             	sub    esp,0xc
c001dceb:	68 85 63 02 c0       	push   0xc0026385
c001dcf0:	e8 6c bd fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001dcf5:	83 c4 10             	add    esp,0x10
c001dcf8:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001dcff:	75 5c                	jne    c001dd5d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dd01:	e4 60                	in     al,0x60
c001dd03:	3c 5a                	cmp    al,0x5a
c001dd05:	74 04                	je     c001dd0b <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001dd07:	3c 1c                	cmp    al,0x1c
c001dd09:	75 f6                	jne    c001dd01 <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001dd0b:	e4 60                	in     al,0x60
c001dd0d:	3c 5a                	cmp    al,0x5a
c001dd0f:	74 fa                	je     c001dd0b <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001dd11:	3c 1c                	cmp    al,0x1c
c001dd13:	74 f6                	je     c001dd0b <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001dd15:	eb 46                	jmp    c001dd5d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dd17:	83 ec 0c             	sub    esp,0xc
c001dd1a:	68 58 01 00 00       	push   0x158
c001dd1f:	e8 e3 bc fe ff       	call   c0009a07 <malloc>
c001dd24:	89 c5                	mov    ebp,eax
c001dd26:	58                   	pop    eax
c001dd27:	5a                   	pop    edx
c001dd28:	68 8c 63 02 c0       	push   0xc002638c
c001dd2d:	55                   	push   ebp
c001dd2e:	e8 55 07 ff ff       	call   c000e488 <DriverlessDevice::DriverlessDevice(char const*)>
c001dd33:	59                   	pop    ecx
c001dd34:	5e                   	pop    esi
c001dd35:	55                   	push   ebp
c001dd36:	53                   	push   ebx
c001dd37:	e8 42 04 ff ff       	call   c000e17e <Device::addChild(Device*)>
c001dd3c:	83 c4 10             	add    esp,0x10
c001dd3f:	b9 09 00 00 00       	mov    ecx,0x9
c001dd44:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001dd48:	fc                   	cld    
c001dd49:	89 fe                	mov    esi,edi
c001dd4b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dd4d:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001dd51:	83 c4 1c             	add    esp,0x1c
c001dd54:	5b                   	pop    ebx
c001dd55:	5e                   	pop    esi
c001dd56:	5f                   	pop    edi
c001dd57:	5d                   	pop    ebp
c001dd58:	e9 33 03 ff ff       	jmp    c000e090 <Device::preOpenPCI(PCIDeviceInfo)>
c001dd5d:	83 c4 1c             	add    esp,0x1c
c001dd60:	5b                   	pop    ebx
c001dd61:	5e                   	pop    esi
c001dd62:	5f                   	pop    edi
c001dd63:	5d                   	pop    ebp
c001dd64:	c3                   	ret    
c001dd65:	90                   	nop

c001dd66 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001dd66:	55                   	push   ebp
c001dd67:	57                   	push   edi
c001dd68:	56                   	push   esi
c001dd69:	53                   	push   ebx
c001dd6a:	81 ec b4 00 00 00    	sub    esp,0xb4
c001dd70:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001dd77:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001dd7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dd82:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001dd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dd8d:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001dd94:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001dd98:	68 a6 63 02 c0       	push   0xc00263a6
c001dd9d:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001dda1:	53                   	push   ebx
c001dda2:	e8 99 29 fe ff       	call   c0000740 <strcpy>
c001dda7:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001ddac:	b2 64                	mov    dl,0x64
c001ddae:	89 c8                	mov    eax,ecx
c001ddb0:	f6 f2                	div    dl
c001ddb2:	b2 0a                	mov    dl,0xa
c001ddb4:	83 c0 30             	add    eax,0x30
c001ddb7:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001ddbb:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001ddbf:	83 c4 10             	add    esp,0x10
c001ddc2:	89 c8                	mov    eax,ecx
c001ddc4:	f6 f2                	div    dl
c001ddc6:	89 c1                	mov    ecx,eax
c001ddc8:	0f b6 c0             	movzx  eax,al
c001ddcb:	88 e9                	mov    cl,ch
c001ddcd:	f6 f2                	div    dl
c001ddcf:	88 e0                	mov    al,ah
c001ddd1:	83 c0 30             	add    eax,0x30
c001ddd4:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001ddd8:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001dddc:	8d 41 30             	lea    eax,[ecx+0x30]
c001dddf:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001dde3:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001dde7:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001ddec:	f6 f2                	div    dl
c001ddee:	89 c1                	mov    ecx,eax
c001ddf0:	0f b6 c0             	movzx  eax,al
c001ddf3:	88 e9                	mov    cl,ch
c001ddf5:	f6 f2                	div    dl
c001ddf7:	88 e0                	mov    al,ah
c001ddf9:	83 c0 30             	add    eax,0x30
c001ddfc:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001de00:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001de04:	8d 41 30             	lea    eax,[ecx+0x30]
c001de07:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001de0b:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001de0f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001de14:	f6 f2                	div    dl
c001de16:	89 c1                	mov    ecx,eax
c001de18:	0f b6 c0             	movzx  eax,al
c001de1b:	88 e9                	mov    cl,ch
c001de1d:	f6 f2                	div    dl
c001de1f:	88 e0                	mov    al,ah
c001de21:	83 c0 30             	add    eax,0x30
c001de24:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001de2b:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001de2f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001de33:	8d 41 30             	lea    eax,[ecx+0x30]
c001de36:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001de3a:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001de3e:	74 29                	je     c001de69 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001de40:	83 ec 0c             	sub    esp,0xc
c001de43:	53                   	push   ebx
c001de44:	e8 18 bc fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001de49:	83 c4 10             	add    esp,0x10
c001de4c:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001de53:	75 14                	jne    c001de69 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001de55:	e4 60                	in     al,0x60
c001de57:	3c 1c                	cmp    al,0x1c
c001de59:	74 04                	je     c001de5f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001de5b:	3c 5a                	cmp    al,0x5a
c001de5d:	75 f6                	jne    c001de55 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001de5f:	e4 60                	in     al,0x60
c001de61:	3c 5a                	cmp    al,0x5a
c001de63:	74 fa                	je     c001de5f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001de65:	3c 1c                	cmp    al,0x1c
c001de67:	74 f6                	je     c001de5f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001de69:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001de6e:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001de73:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001de78:	83 ec 0c             	sub    esp,0xc
c001de7b:	6a 0c                	push   0xc
c001de7d:	56                   	push   esi
c001de7e:	53                   	push   ebx
c001de7f:	57                   	push   edi
c001de80:	55                   	push   ebp
c001de81:	e8 68 f3 ff ff       	call   c001d1ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de86:	83 c4 20             	add    esp,0x20
c001de89:	56                   	push   esi
c001de8a:	53                   	push   ebx
c001de8b:	57                   	push   edi
c001de8c:	55                   	push   ebp
c001de8d:	e8 50 f4 ff ff       	call   c001d2e2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001de92:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001de97:	56                   	push   esi
c001de98:	53                   	push   ebx
c001de99:	57                   	push   edi
c001de9a:	55                   	push   ebp
c001de9b:	e8 d8 f4 ff ff       	call   c001d378 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001dea0:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001dea4:	83 c4 14             	add    esp,0x14
c001dea7:	6a 3c                	push   0x3c
c001dea9:	56                   	push   esi
c001deaa:	53                   	push   ebx
c001deab:	57                   	push   edi
c001deac:	55                   	push   ebp
c001dead:	e8 3c f3 ff ff       	call   c001d1ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001deb2:	0f b6 c4             	movzx  eax,ah
c001deb5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001deb9:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001debd:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001dec4:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c001dec9:	83 c4 20             	add    esp,0x20
c001decc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001ded2:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001ded9:	0f 84 38 01 00 00    	je     c001e017 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001dedf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001dee7:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c001deec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001def0:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001def6:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001defc:	0f 8e 15 01 00 00    	jle    c001e017 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001df02:	50                   	push   eax
c001df03:	50                   	push   eax
c001df04:	68 c1 63 02 c0       	push   0xc00263c1
c001df09:	8d 44 24 68          	lea    eax,[esp+0x68]
c001df0d:	50                   	push   eax
c001df0e:	e8 2d 28 fe ff       	call   c0000740 <strcpy>
c001df13:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001df17:	b9 0a 00 00 00       	mov    ecx,0xa
c001df1c:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001df20:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001df24:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001df28:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001df2c:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001df30:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001df34:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001df38:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001df3c:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001df40:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001df44:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001df48:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001df4c:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001df50:	83 c4 10             	add    esp,0x10
c001df53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001df57:	99                   	cdq    
c001df58:	f7 f9                	idiv   ecx
c001df5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001df5e:	99                   	cdq    
c001df5f:	f7 f9                	idiv   ecx
c001df61:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001df65:	83 c2 30             	add    edx,0x30
c001df68:	83 c0 30             	add    eax,0x30
c001df6b:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001df6f:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001df73:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001df7a:	74 2d                	je     c001dfa9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001df7c:	83 ec 0c             	sub    esp,0xc
c001df7f:	8d 44 24 68          	lea    eax,[esp+0x68]
c001df83:	50                   	push   eax
c001df84:	e8 d8 ba fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001df89:	83 c4 10             	add    esp,0x10
c001df8c:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001df93:	75 14                	jne    c001dfa9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001df95:	e4 60                	in     al,0x60
c001df97:	3c 5a                	cmp    al,0x5a
c001df99:	74 04                	je     c001df9f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001df9b:	3c 1c                	cmp    al,0x1c
c001df9d:	75 f6                	jne    c001df95 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001df9f:	e4 60                	in     al,0x60
c001dfa1:	3c 5a                	cmp    al,0x5a
c001dfa3:	74 fa                	je     c001df9f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001dfa5:	3c 1c                	cmp    al,0x1c
c001dfa7:	74 f6                	je     c001df9f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001dfa9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001dfad:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c001dfb2:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001dfb8:	8d 04 d0             	lea    eax,[eax+edx*8]
c001dfbb:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001dfc2:	39 d3                	cmp    ebx,edx
c001dfc4:	75 48                	jne    c001e00e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001dfc6:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001dfcd:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001dfd1:	75 3b                	jne    c001e00e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001dfd3:	83 ec 0c             	sub    esp,0xc
c001dfd6:	68 f0 63 02 c0       	push   0xc00263f0
c001dfdb:	e8 17 ed fe ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c001dfe0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dfe4:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c001dfe9:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001dfef:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001dff7:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001dffb:	50                   	push   eax
c001dffc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e000:	53                   	push   ebx
c001e001:	68 15 64 02 c0       	push   0xc0026415
c001e006:	e8 ec ec fe ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c001e00b:	83 c4 20             	add    esp,0x20
c001e00e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e012:	e9 d0 fe ff ff       	jmp    c001dee7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001e017:	31 d2                	xor    edx,edx
c001e019:	83 ec 0c             	sub    esp,0xc
c001e01c:	56                   	push   esi
c001e01d:	53                   	push   ebx
c001e01e:	57                   	push   edi
c001e01f:	52                   	push   edx
c001e020:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e024:	55                   	push   ebp
c001e025:	e8 9a f3 ff ff       	call   c001d3c4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e02a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e02e:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001e035:	42                   	inc    edx
c001e036:	83 c4 20             	add    esp,0x20
c001e039:	83 fa 06             	cmp    edx,0x6
c001e03c:	75 db                	jne    c001e019 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001e03e:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001e043:	83 ec 0c             	sub    esp,0xc
c001e046:	86 e0                	xchg   al,ah
c001e048:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001e050:	6a 02                	push   0x2
c001e052:	56                   	push   esi
c001e053:	53                   	push   ebx
c001e054:	57                   	push   edi
c001e055:	55                   	push   ebp
c001e056:	e8 93 f1 ff ff       	call   c001d1ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e05b:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001e063:	83 c4 20             	add    esp,0x20
c001e066:	56                   	push   esi
c001e067:	53                   	push   ebx
c001e068:	57                   	push   edi
c001e069:	55                   	push   ebp
c001e06a:	e8 bd f2 ff ff       	call   c001d32c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e06f:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001e076:	56                   	push   esi
c001e077:	53                   	push   ebx
c001e078:	57                   	push   edi
c001e079:	55                   	push   ebp
c001e07a:	e8 17 f2 ff ff       	call   c001d296 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e07f:	b9 09 00 00 00       	mov    ecx,0x9
c001e084:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001e08c:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001e090:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001e097:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e09b:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001e0a2:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e0a6:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001e0ad:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e0b1:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001e0b8:	83 ec 0c             	sub    esp,0xc
c001e0bb:	fc                   	cld    
c001e0bc:	89 e7                	mov    edi,esp
c001e0be:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001e0c5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e0c7:	55                   	push   ebp
c001e0c8:	e8 59 f8 ff ff       	call   c001d926 <PCI::foundDevice(PCIDeviceInfo)>
c001e0cd:	81 c4 dc 00 00 00    	add    esp,0xdc
c001e0d3:	5b                   	pop    ebx
c001e0d4:	5e                   	pop    esi
c001e0d5:	5f                   	pop    edi
c001e0d6:	5d                   	pop    ebp
c001e0d7:	c3                   	ret    

c001e0d8 <PCI::checkDevice(unsigned char, unsigned char)>:
c001e0d8:	55                   	push   ebp
c001e0d9:	57                   	push   edi
c001e0da:	56                   	push   esi
c001e0db:	53                   	push   ebx
c001e0dc:	83 ec 0c             	sub    esp,0xc
c001e0df:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e0e3:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e0e8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e0ed:	6a 00                	push   0x0
c001e0ef:	56                   	push   esi
c001e0f0:	57                   	push   edi
c001e0f1:	55                   	push   ebp
c001e0f2:	e8 9f f1 ff ff       	call   c001d296 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e0f7:	6a 00                	push   0x0
c001e0f9:	56                   	push   esi
c001e0fa:	57                   	push   edi
c001e0fb:	55                   	push   ebp
c001e0fc:	e8 65 fc ff ff       	call   c001dd66 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e101:	83 c4 20             	add    esp,0x20
c001e104:	6a 00                	push   0x0
c001e106:	56                   	push   esi
c001e107:	57                   	push   edi
c001e108:	55                   	push   ebp
c001e109:	e8 ac f1 ff ff       	call   c001d2ba <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e10e:	83 c4 10             	add    esp,0x10
c001e111:	84 c0                	test   al,al
c001e113:	79 27                	jns    c001e13c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e115:	bb 01 00 00 00       	mov    ebx,0x1
c001e11a:	53                   	push   ebx
c001e11b:	56                   	push   esi
c001e11c:	57                   	push   edi
c001e11d:	55                   	push   ebp
c001e11e:	e8 73 f1 ff ff       	call   c001d296 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e123:	83 c4 10             	add    esp,0x10
c001e126:	66 40                	inc    ax
c001e128:	74 0c                	je     c001e136 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001e12a:	53                   	push   ebx
c001e12b:	56                   	push   esi
c001e12c:	57                   	push   edi
c001e12d:	55                   	push   ebp
c001e12e:	e8 33 fc ff ff       	call   c001dd66 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e133:	83 c4 10             	add    esp,0x10
c001e136:	43                   	inc    ebx
c001e137:	83 fb 08             	cmp    ebx,0x8
c001e13a:	75 de                	jne    c001e11a <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e13c:	83 c4 0c             	add    esp,0xc
c001e13f:	5b                   	pop    ebx
c001e140:	5e                   	pop    esi
c001e141:	5f                   	pop    edi
c001e142:	5d                   	pop    ebp
c001e143:	c3                   	ret    

c001e144 <PCI::detect()>:
c001e144:	56                   	push   esi
c001e145:	53                   	push   ebx
c001e146:	53                   	push   ebx
c001e147:	31 db                	xor    ebx,ebx
c001e149:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e14d:	6a 00                	push   0x0
c001e14f:	6a 00                	push   0x0
c001e151:	6a 00                	push   0x0
c001e153:	56                   	push   esi
c001e154:	e8 61 f1 ff ff       	call   c001d2ba <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e159:	83 c4 10             	add    esp,0x10
c001e15c:	a8 80                	test   al,0x80
c001e15e:	75 21                	jne    c001e181 <PCI::detect()+0x3d>
c001e160:	51                   	push   ecx
c001e161:	51                   	push   ecx
c001e162:	6a 00                	push   0x0
c001e164:	56                   	push   esi
c001e165:	e8 98 f7 ff ff       	call   c001d902 <PCI::checkBus(unsigned char)>
c001e16a:	83 c4 10             	add    esp,0x10
c001e16d:	eb 24                	jmp    c001e193 <PCI::detect()+0x4f>
c001e16f:	52                   	push   edx
c001e170:	52                   	push   edx
c001e171:	53                   	push   ebx
c001e172:	43                   	inc    ebx
c001e173:	56                   	push   esi
c001e174:	e8 89 f7 ff ff       	call   c001d902 <PCI::checkBus(unsigned char)>
c001e179:	83 c4 10             	add    esp,0x10
c001e17c:	83 fb 08             	cmp    ebx,0x8
c001e17f:	74 12                	je     c001e193 <PCI::detect()+0x4f>
c001e181:	53                   	push   ebx
c001e182:	6a 00                	push   0x0
c001e184:	6a 00                	push   0x0
c001e186:	56                   	push   esi
c001e187:	e8 0a f1 ff ff       	call   c001d296 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e18c:	83 c4 10             	add    esp,0x10
c001e18f:	66 40                	inc    ax
c001e191:	74 dc                	je     c001e16f <PCI::detect()+0x2b>
c001e193:	58                   	pop    eax
c001e194:	5b                   	pop    ebx
c001e195:	5e                   	pop    esi
c001e196:	c3                   	ret    
c001e197:	90                   	nop

c001e198 <IDE::close(int, int, void*)>:
c001e198:	83 c8 ff             	or     eax,0xffffffff
c001e19b:	c3                   	ret    

c001e19c <IDE::IDE()>:
c001e19c:	83 ec 0c             	sub    esp,0xc
c001e19f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1a3:	83 ec 08             	sub    esp,0x8
c001e1a6:	68 5c 64 02 c0       	push   0xc002645c
c001e1ab:	50                   	push   eax
c001e1ac:	e8 7b 03 ff ff       	call   c000e52c <HardDiskController::HardDiskController(char const*)>
c001e1b1:	83 c4 10             	add    esp,0x10
c001e1b4:	ba ec 64 02 c0       	mov    edx,0xc00264ec
c001e1b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1bd:	89 10                	mov    DWORD PTR [eax],edx
c001e1bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1c3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e1ca:	90                   	nop
c001e1cb:	83 c4 0c             	add    esp,0xc
c001e1ce:	c3                   	ret    
c001e1cf:	90                   	nop

c001e1d0 <IDE::prepareInterrupt(unsigned char)>:
c001e1d0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e1d5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e1d9:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e1e1:	c3                   	ret    

c001e1e2 <selectDrive(unsigned char, unsigned char)>:
c001e1e2:	c3                   	ret    
c001e1e3:	90                   	nop

c001e1e4 <IDE::getBase(unsigned char)>:
c001e1e4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e1e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1ed:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e1f5:	c3                   	ret    

c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e1f6:	55                   	push   ebp
c001e1f7:	57                   	push   edi
c001e1f8:	56                   	push   esi
c001e1f9:	53                   	push   ebx
c001e1fa:	83 ec 1c             	sub    esp,0x1c
c001e1fd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e201:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e205:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e208:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e20c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e210:	80 f9 03             	cmp    cl,0x3
c001e213:	77 51                	ja     c001e266 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001e215:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e219:	0f b6 f2             	movzx  esi,dl
c001e21c:	0f b6 db             	movzx  ebx,bl
c001e21f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e222:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001e226:	83 ca 80             	or     edx,0xffffff80
c001e229:	0f b6 d2             	movzx  edx,dl
c001e22c:	52                   	push   edx
c001e22d:	6a 0c                	push   0xc
c001e22f:	56                   	push   esi
c001e230:	57                   	push   edi
c001e231:	e8 c0 ff ff ff       	call   c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e236:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001e23b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e23f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e243:	ee                   	out    dx,al
c001e244:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001e249:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001e24d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001e251:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e255:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e25d:	83 c4 2c             	add    esp,0x2c
c001e260:	5b                   	pop    ebx
c001e261:	5e                   	pop    esi
c001e262:	5f                   	pop    edi
c001e263:	5d                   	pop    ebp
c001e264:	eb 90                	jmp    c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e266:	80 fb 07             	cmp    bl,0x7
c001e269:	77 12                	ja     c001e27d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001e26b:	0f b6 d2             	movzx  edx,dl
c001e26e:	0f b6 db             	movzx  ebx,bl
c001e271:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001e279:	89 da                	mov    edx,ebx
c001e27b:	eb 2f                	jmp    c001e2ac <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e27d:	80 fb 0d             	cmp    bl,0xd
c001e280:	77 13                	ja     c001e295 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001e282:	0f b6 d2             	movzx  edx,dl
c001e285:	0f b6 db             	movzx  ebx,bl
c001e288:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001e28f:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001e293:	eb 17                	jmp    c001e2ac <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e295:	80 fb 15             	cmp    bl,0x15
c001e298:	77 13                	ja     c001e2ad <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e29a:	0f b6 d2             	movzx  edx,dl
c001e29d:	0f b6 db             	movzx  ebx,bl
c001e2a0:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001e2a8:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001e2ac:	ee                   	out    dx,al
c001e2ad:	83 c4 1c             	add    esp,0x1c
c001e2b0:	5b                   	pop    ebx
c001e2b1:	5e                   	pop    esi
c001e2b2:	5f                   	pop    edi
c001e2b3:	5d                   	pop    ebp
c001e2b4:	c3                   	ret    
c001e2b5:	90                   	nop

c001e2b6 <IDE::read(unsigned char, unsigned char)>:
c001e2b6:	55                   	push   ebp
c001e2b7:	57                   	push   edi
c001e2b8:	56                   	push   esi
c001e2b9:	53                   	push   ebx
c001e2ba:	83 ec 1c             	sub    esp,0x1c
c001e2bd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e2c1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e2c5:	8d 43 f8             	lea    eax,[ebx-0x8]
c001e2c8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e2cc:	3c 03                	cmp    al,0x3
c001e2ce:	77 43                	ja     c001e313 <IDE::read(unsigned char, unsigned char)+0x5d>
c001e2d0:	0f b6 f2             	movzx  esi,dl
c001e2d3:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e2d6:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001e2da:	83 c8 80             	or     eax,0xffffff80
c001e2dd:	0f b6 c0             	movzx  eax,al
c001e2e0:	50                   	push   eax
c001e2e1:	6a 0c                	push   0xc
c001e2e3:	56                   	push   esi
c001e2e4:	57                   	push   edi
c001e2e5:	e8 0c ff ff ff       	call   c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e2ea:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001e2ef:	0f b6 c3             	movzx  eax,bl
c001e2f2:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001e2f6:	ec                   	in     al,dx
c001e2f7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e2fb:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001e300:	52                   	push   edx
c001e301:	6a 0c                	push   0xc
c001e303:	56                   	push   esi
c001e304:	57                   	push   edi
c001e305:	e8 ec fe ff ff       	call   c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e30a:	83 c4 20             	add    esp,0x20
c001e30d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e311:	eb 49                	jmp    c001e35c <IDE::read(unsigned char, unsigned char)+0xa6>
c001e313:	80 fb 07             	cmp    bl,0x7
c001e316:	77 12                	ja     c001e32a <IDE::read(unsigned char, unsigned char)+0x74>
c001e318:	0f b6 d2             	movzx  edx,dl
c001e31b:	0f b6 c3             	movzx  eax,bl
c001e31e:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001e326:	89 c2                	mov    edx,eax
c001e328:	eb 31                	jmp    c001e35b <IDE::read(unsigned char, unsigned char)+0xa5>
c001e32a:	80 fb 0d             	cmp    bl,0xd
c001e32d:	77 13                	ja     c001e342 <IDE::read(unsigned char, unsigned char)+0x8c>
c001e32f:	0f b6 d2             	movzx  edx,dl
c001e332:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001e339:	0f b6 d3             	movzx  edx,bl
c001e33c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e340:	eb 19                	jmp    c001e35b <IDE::read(unsigned char, unsigned char)+0xa5>
c001e342:	31 c0                	xor    eax,eax
c001e344:	80 fb 15             	cmp    bl,0x15
c001e347:	77 13                	ja     c001e35c <IDE::read(unsigned char, unsigned char)+0xa6>
c001e349:	0f b6 d2             	movzx  edx,dl
c001e34c:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001e354:	0f b6 d3             	movzx  edx,bl
c001e357:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e35b:	ec                   	in     al,dx
c001e35c:	83 c4 1c             	add    esp,0x1c
c001e35f:	5b                   	pop    ebx
c001e360:	5e                   	pop    esi
c001e361:	5f                   	pop    edi
c001e362:	5d                   	pop    ebp
c001e363:	c3                   	ret    

c001e364 <IDE::waitInterrupt(unsigned char)>:
c001e364:	55                   	push   ebp
c001e365:	57                   	push   edi
c001e366:	56                   	push   esi
c001e367:	53                   	push   ebx
c001e368:	31 db                	xor    ebx,ebx
c001e36a:	83 ec 0c             	sub    esp,0xc
c001e36d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e371:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001e376:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001e37e:	89 e8                	mov    eax,ebp
c001e380:	84 c0                	test   al,al
c001e382:	75 30                	jne    c001e3b4 <IDE::waitInterrupt(unsigned char)+0x50>
c001e384:	50                   	push   eax
c001e385:	6a 0c                	push   0xc
c001e387:	56                   	push   esi
c001e388:	57                   	push   edi
c001e389:	e8 28 ff ff ff       	call   c001e2b6 <IDE::read(unsigned char, unsigned char)>
c001e38e:	83 c4 10             	add    esp,0x10
c001e391:	a8 01                	test   al,0x1
c001e393:	75 27                	jne    c001e3bc <IDE::waitInterrupt(unsigned char)+0x58>
c001e395:	f6 c3 04             	test   bl,0x4
c001e398:	75 12                	jne    c001e3ac <IDE::waitInterrupt(unsigned char)+0x48>
c001e39a:	83 fb 32             	cmp    ebx,0x32
c001e39d:	7e 0d                	jle    c001e3ac <IDE::waitInterrupt(unsigned char)+0x48>
c001e39f:	83 ec 0c             	sub    esp,0xc
c001e3a2:	6a 64                	push   0x64
c001e3a4:	e8 c3 a3 ff ff       	call   c001876c <milliTenthSleep(unsigned int)>
c001e3a9:	83 c4 10             	add    esp,0x10
c001e3ac:	83 fb 3c             	cmp    ebx,0x3c
c001e3af:	74 0b                	je     c001e3bc <IDE::waitInterrupt(unsigned char)+0x58>
c001e3b1:	43                   	inc    ebx
c001e3b2:	eb c2                	jmp    c001e376 <IDE::waitInterrupt(unsigned char)+0x12>
c001e3b4:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001e3bc:	83 c4 0c             	add    esp,0xc
c001e3bf:	89 e8                	mov    eax,ebp
c001e3c1:	5b                   	pop    ebx
c001e3c2:	5e                   	pop    esi
c001e3c3:	5f                   	pop    edi
c001e3c4:	5d                   	pop    ebp
c001e3c5:	c3                   	ret    

c001e3c6 <ideChannel0IRQHandler(regs*, void*)>:
c001e3c6:	83 ec 10             	sub    esp,0x10
c001e3c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e3cd:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001e3d4:	6a 07                	push   0x7
c001e3d6:	6a 00                	push   0x0
c001e3d8:	50                   	push   eax
c001e3d9:	e8 d8 fe ff ff       	call   c001e2b6 <IDE::read(unsigned char, unsigned char)>
c001e3de:	83 c4 1c             	add    esp,0x1c
c001e3e1:	c3                   	ret    

c001e3e2 <ideChannel1IRQHandler(regs*, void*)>:
c001e3e2:	83 ec 10             	sub    esp,0x10
c001e3e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e3e9:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001e3f0:	6a 07                	push   0x7
c001e3f2:	6a 01                	push   0x1
c001e3f4:	50                   	push   eax
c001e3f5:	e8 bc fe ff ff       	call   c001e2b6 <IDE::read(unsigned char, unsigned char)>
c001e3fa:	83 c4 1c             	add    esp,0x1c
c001e3fd:	c3                   	ret    

c001e3fe <IDE::enableIRQs(unsigned char, bool)>:
c001e3fe:	57                   	push   edi
c001e3ff:	56                   	push   esi
c001e400:	be 04 00 00 00       	mov    esi,0x4
c001e405:	53                   	push   ebx
c001e406:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001e40b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e40f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e414:	0f 94 c0             	sete   al
c001e417:	d1 e0                	shl    eax,1
c001e419:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001e420:	0f b6 c0             	movzx  eax,al
c001e423:	50                   	push   eax
c001e424:	6a 0c                	push   0xc
c001e426:	57                   	push   edi
c001e427:	53                   	push   ebx
c001e428:	e8 c9 fd ff ff       	call   c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e42d:	83 c4 10             	add    esp,0x10
c001e430:	50                   	push   eax
c001e431:	6a 0c                	push   0xc
c001e433:	57                   	push   edi
c001e434:	53                   	push   ebx
c001e435:	e8 7c fe ff ff       	call   c001e2b6 <IDE::read(unsigned char, unsigned char)>
c001e43a:	83 c4 10             	add    esp,0x10
c001e43d:	4e                   	dec    esi
c001e43e:	75 f0                	jne    c001e430 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001e440:	5b                   	pop    ebx
c001e441:	5e                   	pop    esi
c001e442:	5f                   	pop    edi
c001e443:	c3                   	ret    

c001e444 <IDE::open(int, int, void*)>:
c001e444:	55                   	push   ebp
c001e445:	57                   	push   edi
c001e446:	56                   	push   esi
c001e447:	53                   	push   ebx
c001e448:	83 ec 1c             	sub    esp,0x1c
c001e44b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e44f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001e458:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001e461:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001e468:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001e46f:	0f 85 b0 02 00 00    	jne    c001e725 <IDE::open(int, int, void*)+0x2e1>
c001e475:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001e47b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001e47f:	83 e0 7f             	and    eax,0x7f
c001e482:	3c 05                	cmp    al,0x5
c001e484:	74 04                	je     c001e48a <IDE::open(int, int, void*)+0x46>
c001e486:	3c 0f                	cmp    al,0xf
c001e488:	75 32                	jne    c001e4bc <IDE::open(int, int, void*)+0x78>
c001e48a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001e490:	83 e0 fc             	and    eax,0xfffffffc
c001e493:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e49a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001e4a0:	83 e0 fc             	and    eax,0xfffffffc
c001e4a3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e4aa:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001e4b0:	83 e0 fc             	and    eax,0xfffffffc
c001e4b3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e4ba:	eb 14                	jmp    c001e4d0 <IDE::open(int, int, void*)+0x8c>
c001e4bc:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001e4c6:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001e4d0:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e4d7:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001e4de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e4e2:	89 c6                	mov    esi,eax
c001e4e4:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e4e9:	c1 e6 10             	shl    esi,0x10
c001e4ec:	89 e8                	mov    eax,ebp
c001e4ee:	89 fa                	mov    edx,edi
c001e4f0:	c1 e0 0b             	shl    eax,0xb
c001e4f3:	09 f0                	or     eax,esi
c001e4f5:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001e4fc:	c1 e6 08             	shl    esi,0x8
c001e4ff:	09 c6                	or     esi,eax
c001e501:	89 f0                	mov    eax,esi
c001e503:	0d 08 00 00 80       	or     eax,0x80000008
c001e508:	ef                   	out    dx,eax
c001e509:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001e50e:	89 ca                	mov    edx,ecx
c001e510:	ed                   	in     eax,dx
c001e511:	c1 e8 10             	shr    eax,0x10
c001e514:	3d ff ff 00 00       	cmp    eax,0xffff
c001e519:	0f 84 f5 00 00 00    	je     c001e614 <IDE::open(int, int, void*)+0x1d0>
c001e51f:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001e525:	89 fa                	mov    edx,edi
c001e527:	89 f0                	mov    eax,esi
c001e529:	ef                   	out    dx,eax
c001e52a:	b0 fe                	mov    al,0xfe
c001e52c:	89 ca                	mov    edx,ecx
c001e52e:	ee                   	out    dx,al
c001e52f:	89 f0                	mov    eax,esi
c001e531:	89 fa                	mov    edx,edi
c001e533:	ef                   	out    dx,eax
c001e534:	89 ca                	mov    edx,ecx
c001e536:	ed                   	in     eax,dx
c001e537:	3c fe                	cmp    al,0xfe
c001e539:	0f 85 a9 00 00 00    	jne    c001e5e8 <IDE::open(int, int, void*)+0x1a4>
c001e53f:	8b 15 48 7b 02 c0    	mov    edx,DWORD PTR ds:0xc0027b48
c001e545:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001e54c:	74 33                	je     c001e581 <IDE::open(int, int, void*)+0x13d>
c001e54e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001e554:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001e558:	40                   	inc    eax
c001e559:	83 ec 0c             	sub    esp,0xc
c001e55c:	0f b6 c0             	movzx  eax,al
c001e55f:	50                   	push   eax
c001e560:	55                   	push   ebp
c001e561:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e565:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001e56b:	51                   	push   ecx
c001e56c:	e8 3f 3b ff ff       	call   c00120b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001e571:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001e576:	83 c4 1c             	add    esp,0x1c
c001e579:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e57f:	eb 0a                	jmp    c001e58b <IDE::open(int, int, void*)+0x147>
c001e581:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001e58b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e592:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e599:	c1 e1 10             	shl    ecx,0x10
c001e59c:	c1 e0 08             	shl    eax,0x8
c001e59f:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e5a4:	09 c1                	or     ecx,eax
c001e5a6:	89 fa                	mov    edx,edi
c001e5a8:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e5af:	c1 e0 0b             	shl    eax,0xb
c001e5b2:	09 c1                	or     ecx,eax
c001e5b4:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e5ba:	89 c8                	mov    eax,ecx
c001e5bc:	ef                   	out    dx,eax
c001e5bd:	be fc 0c 00 00       	mov    esi,0xcfc
c001e5c2:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001e5c8:	89 f2                	mov    edx,esi
c001e5ca:	ee                   	out    dx,al
c001e5cb:	89 c8                	mov    eax,ecx
c001e5cd:	89 fa                	mov    edx,edi
c001e5cf:	ef                   	out    dx,eax
c001e5d0:	89 f2                	mov    edx,esi
c001e5d2:	ed                   	in     eax,dx
c001e5d3:	0f b6 c0             	movzx  eax,al
c001e5d6:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001e5dc:	74 46                	je     c001e624 <IDE::open(int, int, void*)+0x1e0>
c001e5de:	83 ec 0c             	sub    esp,0xc
c001e5e1:	68 74 64 02 c0       	push   0xc0026474
c001e5e6:	eb 34                	jmp    c001e61c <IDE::open(int, int, void*)+0x1d8>
c001e5e8:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001e5f1:	75 17                	jne    c001e60a <IDE::open(int, int, void*)+0x1c6>
c001e5f3:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001e5f8:	74 07                	je     c001e601 <IDE::open(int, int, void*)+0x1bd>
c001e5fa:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001e5ff:	75 09                	jne    c001e60a <IDE::open(int, int, void*)+0x1c6>
c001e601:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e608:	eb 1a                	jmp    c001e624 <IDE::open(int, int, void*)+0x1e0>
c001e60a:	83 ec 0c             	sub    esp,0xc
c001e60d:	68 7c 64 02 c0       	push   0xc002647c
c001e612:	eb 08                	jmp    c001e61c <IDE::open(int, int, void*)+0x1d8>
c001e614:	83 ec 0c             	sub    esp,0xc
c001e617:	68 ad 64 02 c0       	push   0xc00264ad
c001e61c:	e8 82 62 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c001e621:	83 c4 10             	add    esp,0x10
c001e624:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001e62b:	79 1a                	jns    c001e647 <IDE::open(int, int, void*)+0x203>
c001e62d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001e633:	83 e0 fc             	and    eax,0xfffffffc
c001e636:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001e63d:	83 c0 08             	add    eax,0x8
c001e640:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001e647:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001e64d:	89 c2                	mov    edx,eax
c001e64f:	83 e2 0f             	and    edx,0xf
c001e652:	66 83 fa 08          	cmp    dx,0x8
c001e656:	75 0a                	jne    c001e662 <IDE::open(int, int, void*)+0x21e>
c001e658:	83 e8 02             	sub    eax,0x2
c001e65b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e662:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001e668:	89 c2                	mov    edx,eax
c001e66a:	83 e2 0f             	and    edx,0xf
c001e66d:	66 83 fa 08          	cmp    dx,0x8
c001e671:	75 0a                	jne    c001e67d <IDE::open(int, int, void*)+0x239>
c001e673:	83 e8 02             	sub    eax,0x2
c001e676:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e67d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001e684:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001e68b:	89 d0                	mov    eax,edx
c001e68d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e690:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e694:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001e698:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e69b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e6a0:	0f b6 c9             	movzx  ecx,cl
c001e6a3:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001e6aa:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e6ad:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e6b1:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001e6b5:	8d 50 02             	lea    edx,[eax+0x2]
c001e6b8:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001e6bd:	0f b6 d2             	movzx  edx,dl
c001e6c0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001e6c6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e6c9:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e6cd:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001e6d1:	8d 48 03             	lea    ecx,[eax+0x3]
c001e6d4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e6d9:	0f b6 c9             	movzx  ecx,cl
c001e6dc:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001e6e2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e6e5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e6e9:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001e6ed:	8d 50 04             	lea    edx,[eax+0x4]
c001e6f0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001e6f6:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001e6fb:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001e702:	66 85 f6             	test   si,si
c001e705:	74 5b                	je     c001e762 <IDE::open(int, int, void*)+0x31e>
c001e707:	0f b6 d2             	movzx  edx,dl
c001e70a:	83 c0 05             	add    eax,0x5
c001e70d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e710:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e714:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001e718:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001e71e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e723:	eb 3d                	jmp    c001e762 <IDE::open(int, int, void*)+0x31e>
c001e725:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001e72b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e732:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e739:	66 05 06 02          	add    ax,0x206
c001e73d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e744:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001e74b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e752:	66 05 06 02          	add    ax,0x206
c001e756:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e75d:	e9 e5 fe ff ff       	jmp    c001e647 <IDE::open(int, int, void*)+0x203>
c001e762:	50                   	push   eax
c001e763:	50                   	push   eax
c001e764:	6a 00                	push   0x0
c001e766:	53                   	push   ebx
c001e767:	e8 64 fa ff ff       	call   c001e1d0 <IDE::prepareInterrupt(unsigned char)>
c001e76c:	5a                   	pop    edx
c001e76d:	59                   	pop    ecx
c001e76e:	6a 01                	push   0x1
c001e770:	53                   	push   ebx
c001e771:	e8 5a fa ff ff       	call   c001e1d0 <IDE::prepareInterrupt(unsigned char)>
c001e776:	83 c4 0c             	add    esp,0xc
c001e779:	6a 00                	push   0x0
c001e77b:	6a 00                	push   0x0
c001e77d:	53                   	push   ebx
c001e77e:	e8 7b fc ff ff       	call   c001e3fe <IDE::enableIRQs(unsigned char, bool)>
c001e783:	83 c4 0c             	add    esp,0xc
c001e786:	6a 00                	push   0x0
c001e788:	6a 01                	push   0x1
c001e78a:	53                   	push   ebx
c001e78b:	e8 6e fc ff ff       	call   c001e3fe <IDE::enableIRQs(unsigned char, bool)>
c001e790:	83 c4 10             	add    esp,0x10
c001e793:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001e79a:	74 34                	je     c001e7d0 <IDE::open(int, int, void*)+0x38c>
c001e79c:	83 ec 0c             	sub    esp,0xc
c001e79f:	53                   	push   ebx
c001e7a0:	6a 01                	push   0x1
c001e7a2:	68 c6 e3 01 c0       	push   0xc001e3c6
c001e7a7:	6a 0e                	push   0xe
c001e7a9:	53                   	push   ebx
c001e7aa:	e8 47 f9 fe ff       	call   c000e0f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e7af:	83 c4 14             	add    esp,0x14
c001e7b2:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e7b8:	53                   	push   ebx
c001e7b9:	6a 01                	push   0x1
c001e7bb:	68 e2 e3 01 c0       	push   0xc001e3e2
c001e7c0:	6a 0f                	push   0xf
c001e7c2:	53                   	push   ebx
c001e7c3:	e8 2e f9 fe ff       	call   c000e0f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e7c8:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001e7ce:	eb 38                	jmp    c001e808 <IDE::open(int, int, void*)+0x3c4>
c001e7d0:	83 ec 0c             	sub    esp,0xc
c001e7d3:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001e7dd:	53                   	push   ebx
c001e7de:	6a 00                	push   0x0
c001e7e0:	68 c6 e3 01 c0       	push   0xc001e3c6
c001e7e5:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001e7eb:	53                   	push   ebx
c001e7ec:	e8 05 f9 fe ff       	call   c000e0f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e7f1:	83 c4 14             	add    esp,0x14
c001e7f4:	53                   	push   ebx
c001e7f5:	6a 00                	push   0x0
c001e7f7:	68 e2 e3 01 c0       	push   0xc001e3e2
c001e7fc:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001e802:	53                   	push   ebx
c001e803:	e8 ee f8 fe ff       	call   c000e0f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e808:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e80a:	83 c4 20             	add    esp,0x20
c001e80d:	83 ec 0c             	sub    esp,0xc
c001e810:	53                   	push   ebx
c001e811:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001e814:	83 c4 0c             	add    esp,0xc
c001e817:	6a 07                	push   0x7
c001e819:	6a 00                	push   0x0
c001e81b:	53                   	push   ebx
c001e81c:	e8 95 fa ff ff       	call   c001e2b6 <IDE::read(unsigned char, unsigned char)>
c001e821:	83 c4 0c             	add    esp,0xc
c001e824:	6a 07                	push   0x7
c001e826:	6a 01                	push   0x1
c001e828:	53                   	push   ebx
c001e829:	e8 88 fa ff ff       	call   c001e2b6 <IDE::read(unsigned char, unsigned char)>
c001e82e:	83 c4 0c             	add    esp,0xc
c001e831:	6a 01                	push   0x1
c001e833:	6a 00                	push   0x0
c001e835:	53                   	push   ebx
c001e836:	e8 c3 fb ff ff       	call   c001e3fe <IDE::enableIRQs(unsigned char, bool)>
c001e83b:	83 c4 0c             	add    esp,0xc
c001e83e:	6a 01                	push   0x1
c001e840:	6a 01                	push   0x1
c001e842:	53                   	push   ebx
c001e843:	e8 b6 fb ff ff       	call   c001e3fe <IDE::enableIRQs(unsigned char, bool)>
c001e848:	83 c4 2c             	add    esp,0x2c
c001e84b:	31 c0                	xor    eax,eax
c001e84d:	5b                   	pop    ebx
c001e84e:	5e                   	pop    esi
c001e84f:	5f                   	pop    edi
c001e850:	5d                   	pop    ebp
c001e851:	c3                   	ret    

c001e852 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001e852:	55                   	push   ebp
c001e853:	57                   	push   edi
c001e854:	56                   	push   esi
c001e855:	53                   	push   ebx
c001e856:	83 ec 1c             	sub    esp,0x1c
c001e859:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e85d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e861:	8d 50 f8             	lea    edx,[eax-0x8]
c001e864:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e868:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001e86c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e870:	80 fa 03             	cmp    dl,0x3
c001e873:	77 5d                	ja     c001e8d2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001e875:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e879:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e87d:	0f b6 db             	movzx  ebx,bl
c001e880:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001e883:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001e887:	83 ca 80             	or     edx,0xffffff80
c001e88a:	0f b6 d2             	movzx  edx,dl
c001e88d:	52                   	push   edx
c001e88e:	6a 0c                	push   0xc
c001e890:	53                   	push   ebx
c001e891:	56                   	push   esi
c001e892:	e8 5f f9 ff ff       	call   c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e897:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001e89c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e8a0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e8a4:	0f b6 c0             	movzx  eax,al
c001e8a7:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001e8ab:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001e8ad:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e8b2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001e8b6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001e8ba:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e8be:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e8c6:	83 c4 2c             	add    esp,0x2c
c001e8c9:	5b                   	pop    ebx
c001e8ca:	5e                   	pop    esi
c001e8cb:	5f                   	pop    edi
c001e8cc:	5d                   	pop    ebp
c001e8cd:	e9 24 f9 ff ff       	jmp    c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e8d2:	3c 07                	cmp    al,0x7
c001e8d4:	77 10                	ja     c001e8e6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001e8d6:	0f b6 db             	movzx  ebx,bl
c001e8d9:	0f b6 d0             	movzx  edx,al
c001e8dc:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001e8e4:	eb 2d                	jmp    c001e913 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001e8e6:	3c 0d                	cmp    al,0xd
c001e8e8:	77 13                	ja     c001e8fd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001e8ea:	0f b6 db             	movzx  ebx,bl
c001e8ed:	0f b6 c0             	movzx  eax,al
c001e8f0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001e8f7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001e8fb:	eb 16                	jmp    c001e913 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001e8fd:	3c 15                	cmp    al,0x15
c001e8ff:	77 14                	ja     c001e915 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001e901:	0f b6 db             	movzx  ebx,bl
c001e904:	0f b6 c0             	movzx  eax,al
c001e907:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001e90f:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001e913:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001e915:	83 c4 1c             	add    esp,0x1c
c001e918:	5b                   	pop    ebx
c001e919:	5e                   	pop    esi
c001e91a:	5f                   	pop    edi
c001e91b:	5d                   	pop    ebp
c001e91c:	c3                   	ret    
c001e91d:	90                   	nop

c001e91e <IDE::detect()>:
c001e91e:	55                   	push   ebp
c001e91f:	57                   	push   edi
c001e920:	56                   	push   esi
c001e921:	53                   	push   ebx
c001e922:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001e928:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001e92f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001e936:	0f 85 97 02 00 00    	jne    c001ebd3 <IDE::detect()+0x2b5>
c001e93c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001e943:	31 f6                	xor    esi,esi
c001e945:	31 ed                	xor    ebp,ebp
c001e947:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001e94f:	89 e8                	mov    eax,ebp
c001e951:	c1 e0 06             	shl    eax,0x6
c001e954:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001e95c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001e960:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e964:	c1 e0 04             	shl    eax,0x4
c001e967:	83 c8 a0             	or     eax,0xffffffa0
c001e96a:	0f b6 c0             	movzx  eax,al
c001e96d:	50                   	push   eax
c001e96e:	6a 06                	push   0x6
c001e970:	56                   	push   esi
c001e971:	53                   	push   ebx
c001e972:	e8 7f f8 ff ff       	call   c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e977:	83 c4 0c             	add    esp,0xc
c001e97a:	6a 0c                	push   0xc
c001e97c:	56                   	push   esi
c001e97d:	53                   	push   ebx
c001e97e:	e8 33 f9 ff ff       	call   c001e2b6 <IDE::read(unsigned char, unsigned char)>
c001e983:	83 c4 0c             	add    esp,0xc
c001e986:	6a 0c                	push   0xc
c001e988:	56                   	push   esi
c001e989:	53                   	push   ebx
c001e98a:	e8 27 f9 ff ff       	call   c001e2b6 <IDE::read(unsigned char, unsigned char)>
c001e98f:	83 c4 0c             	add    esp,0xc
c001e992:	6a 0c                	push   0xc
c001e994:	56                   	push   esi
c001e995:	53                   	push   ebx
c001e996:	e8 1b f9 ff ff       	call   c001e2b6 <IDE::read(unsigned char, unsigned char)>
c001e99b:	83 c4 0c             	add    esp,0xc
c001e99e:	6a 0c                	push   0xc
c001e9a0:	56                   	push   esi
c001e9a1:	53                   	push   ebx
c001e9a2:	e8 0f f9 ff ff       	call   c001e2b6 <IDE::read(unsigned char, unsigned char)>
c001e9a7:	68 ec 00 00 00       	push   0xec
c001e9ac:	6a 07                	push   0x7
c001e9ae:	56                   	push   esi
c001e9af:	53                   	push   ebx
c001e9b0:	e8 41 f8 ff ff       	call   c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e9b5:	83 c4 1c             	add    esp,0x1c
c001e9b8:	6a 0c                	push   0xc
c001e9ba:	56                   	push   esi
c001e9bb:	53                   	push   ebx
c001e9bc:	e8 f5 f8 ff ff       	call   c001e2b6 <IDE::read(unsigned char, unsigned char)>
c001e9c1:	83 c4 0c             	add    esp,0xc
c001e9c4:	6a 0c                	push   0xc
c001e9c6:	56                   	push   esi
c001e9c7:	53                   	push   ebx
c001e9c8:	e8 e9 f8 ff ff       	call   c001e2b6 <IDE::read(unsigned char, unsigned char)>
c001e9cd:	83 c4 0c             	add    esp,0xc
c001e9d0:	6a 0c                	push   0xc
c001e9d2:	56                   	push   esi
c001e9d3:	53                   	push   ebx
c001e9d4:	e8 dd f8 ff ff       	call   c001e2b6 <IDE::read(unsigned char, unsigned char)>
c001e9d9:	83 c4 0c             	add    esp,0xc
c001e9dc:	6a 0c                	push   0xc
c001e9de:	56                   	push   esi
c001e9df:	53                   	push   ebx
c001e9e0:	e8 d1 f8 ff ff       	call   c001e2b6 <IDE::read(unsigned char, unsigned char)>
c001e9e5:	83 c4 0c             	add    esp,0xc
c001e9e8:	6a 0c                	push   0xc
c001e9ea:	56                   	push   esi
c001e9eb:	53                   	push   ebx
c001e9ec:	e8 c5 f8 ff ff       	call   c001e2b6 <IDE::read(unsigned char, unsigned char)>
c001e9f1:	83 c4 10             	add    esp,0x10
c001e9f4:	84 c0                	test   al,al
c001e9f6:	0f 84 5f 01 00 00    	je     c001eb5b <IDE::detect()+0x23d>
c001e9fc:	31 ff                	xor    edi,edi
c001e9fe:	50                   	push   eax
c001e9ff:	6a 0c                	push   0xc
c001ea01:	56                   	push   esi
c001ea02:	53                   	push   ebx
c001ea03:	e8 ae f8 ff ff       	call   c001e2b6 <IDE::read(unsigned char, unsigned char)>
c001ea08:	83 c4 10             	add    esp,0x10
c001ea0b:	a8 01                	test   al,0x1
c001ea0d:	0f 85 69 01 00 00    	jne    c001eb7c <IDE::detect()+0x25e>
c001ea13:	84 c0                	test   al,al
c001ea15:	78 04                	js     c001ea1b <IDE::detect()+0xfd>
c001ea17:	a8 08                	test   al,0x8
c001ea19:	75 23                	jne    c001ea3e <IDE::detect()+0x120>
c001ea1b:	47                   	inc    edi
c001ea1c:	81 ff 17 01 00 00    	cmp    edi,0x117
c001ea22:	7e da                	jle    c001e9fe <IDE::detect()+0xe0>
c001ea24:	83 ec 0c             	sub    esp,0xc
c001ea27:	6a 32                	push   0x32
c001ea29:	e8 3e 9d ff ff       	call   c001876c <milliTenthSleep(unsigned int)>
c001ea2e:	83 c4 10             	add    esp,0x10
c001ea31:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001ea37:	75 c5                	jne    c001e9fe <IDE::detect()+0xe0>
c001ea39:	e9 3e 01 00 00       	jmp    c001eb7c <IDE::detect()+0x25e>
c001ea3e:	31 c9                	xor    ecx,ecx
c001ea40:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001ea44:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001ea48:	83 ec 0c             	sub    esp,0xc
c001ea4b:	68 80 00 00 00       	push   0x80
c001ea50:	57                   	push   edi
c001ea51:	6a 00                	push   0x0
c001ea53:	56                   	push   esi
c001ea54:	53                   	push   ebx
c001ea55:	e8 f8 fd ff ff       	call   c001e852 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001ea5a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001ea5f:	89 e8                	mov    eax,ebp
c001ea61:	89 d1                	mov    ecx,edx
c001ea63:	c1 e0 06             	shl    eax,0x6
c001ea66:	01 d8                	add    eax,ebx
c001ea68:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001ea6f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001ea76:	89 f2                	mov    edx,esi
c001ea78:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001ea7e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001ea82:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001ea88:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ea8c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001ea93:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001ea9b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001eaa2:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001eaaa:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001eab0:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001eab7:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001eabd:	8d 54 24 58          	lea    edx,[esp+0x58]
c001eac1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001eac5:	83 c4 20             	add    esp,0x20
c001eac8:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001eacb:	83 c0 02             	add    eax,0x2
c001eace:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001ead4:	83 c7 02             	add    edi,0x2
c001ead7:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001eada:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001eae0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001eae4:	75 e2                	jne    c001eac8 <IDE::detect()+0x1aa>
c001eae6:	89 e8                	mov    eax,ebp
c001eae8:	c1 e0 06             	shl    eax,0x6
c001eaeb:	01 d8                	add    eax,ebx
c001eaed:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001eaf3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001eafa:	66 c1 ea 09          	shr    dx,0x9
c001eafe:	83 e2 01             	and    edx,0x1
c001eb01:	84 c9                	test   cl,cl
c001eb03:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001eb09:	75 22                	jne    c001eb2d <IDE::detect()+0x20f>
c001eb0b:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001eb12:	74 46                	je     c001eb5a <IDE::detect()+0x23c>
c001eb14:	83 ec 0c             	sub    esp,0xc
c001eb17:	68 7c 01 00 00       	push   0x17c
c001eb1c:	e8 e6 ae fe ff       	call   c0009a07 <malloc>
c001eb21:	89 c7                	mov    edi,eax
c001eb23:	89 04 24             	mov    DWORD PTR [esp],eax
c001eb26:	e8 97 07 00 00       	call   c001f2c2 <ATA::ATA()>
c001eb2b:	eb 17                	jmp    c001eb44 <IDE::detect()+0x226>
c001eb2d:	83 ec 0c             	sub    esp,0xc
c001eb30:	68 80 01 00 00       	push   0x180
c001eb35:	e8 cd ae fe ff       	call   c0009a07 <malloc>
c001eb3a:	89 c7                	mov    edi,eax
c001eb3c:	89 04 24             	mov    DWORD PTR [esp],eax
c001eb3f:	e8 06 0e 00 00       	call   c001f94a <ATAPI::ATAPI()>
c001eb44:	5a                   	pop    edx
c001eb45:	59                   	pop    ecx
c001eb46:	57                   	push   edi
c001eb47:	53                   	push   ebx
c001eb48:	e8 31 f6 fe ff       	call   c000e17e <Device::addChild(Device*)>
c001eb4d:	8b 07                	mov    eax,DWORD PTR [edi]
c001eb4f:	53                   	push   ebx
c001eb50:	55                   	push   ebp
c001eb51:	6a 00                	push   0x0
c001eb53:	57                   	push   edi
c001eb54:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001eb57:	83 c4 20             	add    esp,0x20
c001eb5a:	45                   	inc    ebp
c001eb5b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001eb60:	74 0d                	je     c001eb6f <IDE::detect()+0x251>
c001eb62:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001eb6a:	e9 e0 fd ff ff       	jmp    c001e94f <IDE::detect()+0x31>
c001eb6f:	4e                   	dec    esi
c001eb70:	74 61                	je     c001ebd3 <IDE::detect()+0x2b5>
c001eb72:	be 01 00 00 00       	mov    esi,0x1
c001eb77:	e9 cb fd ff ff       	jmp    c001e947 <IDE::detect()+0x29>
c001eb7c:	50                   	push   eax
c001eb7d:	6a 04                	push   0x4
c001eb7f:	56                   	push   esi
c001eb80:	53                   	push   ebx
c001eb81:	e8 30 f7 ff ff       	call   c001e2b6 <IDE::read(unsigned char, unsigned char)>
c001eb86:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001eb8a:	83 c4 0c             	add    esp,0xc
c001eb8d:	6a 05                	push   0x5
c001eb8f:	56                   	push   esi
c001eb90:	53                   	push   ebx
c001eb91:	e8 20 f7 ff ff       	call   c001e2b6 <IDE::read(unsigned char, unsigned char)>
c001eb96:	83 c4 10             	add    esp,0x10
c001eb99:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001eb9d:	80 fa 14             	cmp    dl,0x14
c001eba0:	75 04                	jne    c001eba6 <IDE::detect()+0x288>
c001eba2:	3c eb                	cmp    al,0xeb
c001eba4:	eb 07                	jmp    c001ebad <IDE::detect()+0x28f>
c001eba6:	3c 96                	cmp    al,0x96
c001eba8:	75 b1                	jne    c001eb5b <IDE::detect()+0x23d>
c001ebaa:	80 fa 69             	cmp    dl,0x69
c001ebad:	75 ac                	jne    c001eb5b <IDE::detect()+0x23d>
c001ebaf:	68 a1 00 00 00       	push   0xa1
c001ebb4:	6a 07                	push   0x7
c001ebb6:	56                   	push   esi
c001ebb7:	53                   	push   ebx
c001ebb8:	e8 39 f6 ff ff       	call   c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ebbd:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001ebc4:	e8 a3 9b ff ff       	call   c001876c <milliTenthSleep(unsigned int)>
c001ebc9:	83 c4 10             	add    esp,0x10
c001ebcc:	b1 01                	mov    cl,0x1
c001ebce:	e9 6d fe ff ff       	jmp    c001ea40 <IDE::detect()+0x122>
c001ebd3:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ebd9:	5b                   	pop    ebx
c001ebda:	5e                   	pop    esi
c001ebdb:	5f                   	pop    edi
c001ebdc:	5d                   	pop    ebp
c001ebdd:	c3                   	ret    

c001ebde <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001ebde:	55                   	push   ebp
c001ebdf:	57                   	push   edi
c001ebe0:	56                   	push   esi
c001ebe1:	53                   	push   ebx
c001ebe2:	83 ec 1c             	sub    esp,0x1c
c001ebe5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ebe9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ebed:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ebf1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001ebf5:	88 c3                	mov    bl,al
c001ebf7:	84 c0                	test   al,al
c001ebf9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ebfd:	0f 84 81 00 00 00    	je     c001ec84 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ec03:	83 ec 0c             	sub    esp,0xc
c001ec06:	68 d7 64 02 c0       	push   0xc00264d7
c001ec0b:	e8 e7 e0 fe ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c001ec10:	83 c4 10             	add    esp,0x10
c001ec13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec17:	3c 01                	cmp    al,0x1
c001ec19:	74 63                	je     c001ec7e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001ec1b:	3c 02                	cmp    al,0x2
c001ec1d:	75 53                	jne    c001ec72 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001ec1f:	d1 e6                	shl    esi,1
c001ec21:	09 ee                	or     esi,ebp
c001ec23:	50                   	push   eax
c001ec24:	89 f0                	mov    eax,esi
c001ec26:	6a 01                	push   0x1
c001ec28:	0f b6 f0             	movzx  esi,al
c001ec2b:	c1 e6 06             	shl    esi,0x6
c001ec2e:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001ec36:	50                   	push   eax
c001ec37:	57                   	push   edi
c001ec38:	e8 79 f6 ff ff       	call   c001e2b6 <IDE::read(unsigned char, unsigned char)>
c001ec3d:	83 c4 10             	add    esp,0x10
c001ec40:	a8 01                	test   al,0x1
c001ec42:	74 02                	je     c001ec46 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001ec44:	b3 07                	mov    bl,0x7
c001ec46:	a8 02                	test   al,0x2
c001ec48:	74 02                	je     c001ec4c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001ec4a:	b3 03                	mov    bl,0x3
c001ec4c:	a8 04                	test   al,0x4
c001ec4e:	74 02                	je     c001ec52 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001ec50:	b3 14                	mov    bl,0x14
c001ec52:	a8 08                	test   al,0x8
c001ec54:	74 02                	je     c001ec58 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001ec56:	b3 03                	mov    bl,0x3
c001ec58:	a8 10                	test   al,0x10
c001ec5a:	74 02                	je     c001ec5e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001ec5c:	b3 15                	mov    bl,0x15
c001ec5e:	a8 20                	test   al,0x20
c001ec60:	74 02                	je     c001ec64 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001ec62:	b3 03                	mov    bl,0x3
c001ec64:	a8 40                	test   al,0x40
c001ec66:	74 02                	je     c001ec6a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001ec68:	b3 16                	mov    bl,0x16
c001ec6a:	84 c0                	test   al,al
c001ec6c:	79 16                	jns    c001ec84 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ec6e:	b3 0d                	mov    bl,0xd
c001ec70:	eb 12                	jmp    c001ec84 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ec72:	3c 03                	cmp    al,0x3
c001ec74:	74 0c                	je     c001ec82 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001ec76:	3c 04                	cmp    al,0x4
c001ec78:	75 0a                	jne    c001ec84 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ec7a:	b3 08                	mov    bl,0x8
c001ec7c:	eb 06                	jmp    c001ec84 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ec7e:	b3 13                	mov    bl,0x13
c001ec80:	eb 02                	jmp    c001ec84 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ec82:	b3 17                	mov    bl,0x17
c001ec84:	83 c4 1c             	add    esp,0x1c
c001ec87:	88 d8                	mov    al,bl
c001ec89:	5b                   	pop    ebx
c001ec8a:	5e                   	pop    esi
c001ec8b:	5f                   	pop    edi
c001ec8c:	5d                   	pop    ebp
c001ec8d:	c3                   	ret    

c001ec8e <IDE::polling(unsigned char, unsigned int)>:
c001ec8e:	57                   	push   edi
c001ec8f:	56                   	push   esi
c001ec90:	53                   	push   ebx
c001ec91:	bb 04 00 00 00       	mov    ebx,0x4
c001ec96:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001ec9a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ec9f:	52                   	push   edx
c001eca0:	6a 0c                	push   0xc
c001eca2:	56                   	push   esi
c001eca3:	57                   	push   edi
c001eca4:	e8 0d f6 ff ff       	call   c001e2b6 <IDE::read(unsigned char, unsigned char)>
c001eca9:	83 c4 10             	add    esp,0x10
c001ecac:	4b                   	dec    ebx
c001ecad:	75 f0                	jne    c001ec9f <IDE::polling(unsigned char, unsigned int)+0x11>
c001ecaf:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ecb4:	50                   	push   eax
c001ecb5:	6a 0c                	push   0xc
c001ecb7:	56                   	push   esi
c001ecb8:	57                   	push   edi
c001ecb9:	e8 f8 f5 ff ff       	call   c001e2b6 <IDE::read(unsigned char, unsigned char)>
c001ecbe:	83 c4 10             	add    esp,0x10
c001ecc1:	a8 01                	test   al,0x1
c001ecc3:	75 17                	jne    c001ecdc <IDE::polling(unsigned char, unsigned int)+0x4e>
c001ecc5:	a8 20                	test   al,0x20
c001ecc7:	75 0f                	jne    c001ecd8 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001ecc9:	4b                   	dec    ebx
c001ecca:	74 10                	je     c001ecdc <IDE::polling(unsigned char, unsigned int)+0x4e>
c001eccc:	84 c0                	test   al,al
c001ecce:	78 e4                	js     c001ecb4 <IDE::polling(unsigned char, unsigned int)+0x26>
c001ecd0:	a8 08                	test   al,0x8
c001ecd2:	74 e0                	je     c001ecb4 <IDE::polling(unsigned char, unsigned int)+0x26>
c001ecd4:	31 c0                	xor    eax,eax
c001ecd6:	eb 06                	jmp    c001ecde <IDE::polling(unsigned char, unsigned int)+0x50>
c001ecd8:	b0 01                	mov    al,0x1
c001ecda:	eb 02                	jmp    c001ecde <IDE::polling(unsigned char, unsigned int)+0x50>
c001ecdc:	b0 02                	mov    al,0x2
c001ecde:	5b                   	pop    ebx
c001ecdf:	5e                   	pop    esi
c001ece0:	5f                   	pop    edi
c001ece1:	c3                   	ret    

c001ece2 <SATABus::close(int, int, void*)>:
c001ece2:	31 c0                	xor    eax,eax
c001ece4:	c3                   	ret    
c001ece5:	90                   	nop

c001ece6 <SATABus::detect()>:
c001ece6:	c3                   	ret    
c001ece7:	90                   	nop

c001ece8 <SATABus::SATABus()>:
c001ece8:	83 ec 0c             	sub    esp,0xc
c001eceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecef:	83 ec 08             	sub    esp,0x8
c001ecf2:	68 10 65 02 c0       	push   0xc0026510
c001ecf7:	50                   	push   eax
c001ecf8:	e8 2f f8 fe ff       	call   c000e52c <HardDiskController::HardDiskController(char const*)>
c001ecfd:	83 c4 10             	add    esp,0x10
c001ed00:	ba 40 66 02 c0       	mov    edx,0xc0026640
c001ed05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed09:	89 10                	mov    DWORD PTR [eax],edx
c001ed0b:	83 ec 0c             	sub    esp,0xc
c001ed0e:	6a 50                	push   0x50
c001ed10:	e8 94 b4 fe ff       	call   c000a1a9 <Phys::allocateContiguousPages(int)>
c001ed15:	83 c4 10             	add    esp,0x10
c001ed18:	89 c2                	mov    edx,eax
c001ed1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed1e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ed24:	83 ec 0c             	sub    esp,0xc
c001ed27:	6a 50                	push   0x50
c001ed29:	e8 a3 cc fe ff       	call   c000b9d1 <Virt::allocateKernelVirtualPages(int)>
c001ed2e:	83 c4 10             	add    esp,0x10
c001ed31:	89 c2                	mov    edx,eax
c001ed33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed37:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ed3d:	a1 70 7c 02 c0       	mov    eax,ds:0xc0027c70
c001ed42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ed46:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001ed4c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ed50:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ed56:	83 ec 0c             	sub    esp,0xc
c001ed59:	6a 03                	push   0x3
c001ed5b:	6a 50                	push   0x50
c001ed5d:	51                   	push   ecx
c001ed5e:	52                   	push   edx
c001ed5f:	50                   	push   eax
c001ed60:	e8 09 d6 fe ff       	call   c000c36e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ed65:	83 c4 20             	add    esp,0x20
c001ed68:	90                   	nop
c001ed69:	83 c4 0c             	add    esp,0xc
c001ed6c:	c3                   	ret    
c001ed6d:	90                   	nop

c001ed6e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001ed6e:	55                   	push   ebp
c001ed6f:	57                   	push   edi
c001ed70:	56                   	push   esi
c001ed71:	53                   	push   ebx
c001ed72:	83 ec 3c             	sub    esp,0x3c
c001ed75:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001ed79:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001ed80:	74 2d                	je     c001edaf <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x41>
c001ed82:	83 ec 0c             	sub    esp,0xc
c001ed85:	68 34 65 02 c0       	push   0xc0026534
c001ed8a:	e8 d2 ac fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001ed8f:	83 c4 10             	add    esp,0x10
c001ed92:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001ed99:	75 14                	jne    c001edaf <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x41>
c001ed9b:	e4 60                	in     al,0x60
c001ed9d:	3c 1c                	cmp    al,0x1c
c001ed9f:	74 04                	je     c001eda5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x37>
c001eda1:	3c 5a                	cmp    al,0x5a
c001eda3:	75 f6                	jne    c001ed9b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2d>
c001eda5:	e4 60                	in     al,0x60
c001eda7:	3c 5a                	cmp    al,0x5a
c001eda9:	74 fa                	je     c001eda5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x37>
c001edab:	3c 1c                	cmp    al,0x1c
c001edad:	74 f6                	je     c001eda5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x37>
c001edaf:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c001edb2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c001edb5:	09 c6                	or     esi,eax
c001edb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001edbb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001edc1:	8b 38                	mov    edi,DWORD PTR [eax]
c001edc3:	c1 ef 08             	shr    edi,0x8
c001edc6:	83 e7 0f             	and    edi,0xf
c001edc9:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001edd0:	75 04                	jne    c001edd6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x68>
c001edd2:	31 db                	xor    ebx,ebx
c001edd4:	eb 6f                	jmp    c001ee45 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xd7>
c001edd6:	83 ec 0c             	sub    esp,0xc
c001edd9:	68 4b 65 02 c0       	push   0xc002654b
c001edde:	e8 7e ac fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001ede3:	83 c4 10             	add    esp,0x10
c001ede6:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001eded:	75 e3                	jne    c001edd2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x64>
c001edef:	e4 60                	in     al,0x60
c001edf1:	3c 1c                	cmp    al,0x1c
c001edf3:	74 04                	je     c001edf9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x8b>
c001edf5:	3c 5a                	cmp    al,0x5a
c001edf7:	75 f6                	jne    c001edef <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x81>
c001edf9:	e4 60                	in     al,0x60
c001edfb:	3c 5a                	cmp    al,0x5a
c001edfd:	74 fa                	je     c001edf9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x8b>
c001edff:	3c 1c                	cmp    al,0x1c
c001ee01:	74 f6                	je     c001edf9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x8b>
c001ee03:	eb cd                	jmp    c001edd2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x64>
c001ee05:	50                   	push   eax
c001ee06:	50                   	push   eax
c001ee07:	68 62 65 02 c0       	push   0xc0026562
c001ee0c:	8d 6c 24 1a          	lea    ebp,[esp+0x1a]
c001ee10:	55                   	push   ebp
c001ee11:	e8 2a 19 fe ff       	call   c0000740 <strcpy>
c001ee16:	83 c4 10             	add    esp,0x10
c001ee19:	89 d8                	mov    eax,ebx
c001ee1b:	b9 0a 00 00 00       	mov    ecx,0xa
c001ee20:	99                   	cdq    
c001ee21:	f7 f9                	idiv   ecx
c001ee23:	83 c0 30             	add    eax,0x30
c001ee26:	83 c2 30             	add    edx,0x30
c001ee29:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001ee2d:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001ee31:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001ee38:	75 11                	jne    c001ee4b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xdd>
c001ee3a:	f7 c6 01 00 00 00    	test   esi,0x1
c001ee40:	74 34                	je     c001ee76 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x108>
c001ee42:	d1 ee                	shr    esi,1
c001ee44:	43                   	inc    ebx
c001ee45:	39 fb                	cmp    ebx,edi
c001ee47:	75 bc                	jne    c001ee05 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x97>
c001ee49:	eb 63                	jmp    c001eeae <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x140>
c001ee4b:	83 ec 0c             	sub    esp,0xc
c001ee4e:	55                   	push   ebp
c001ee4f:	e8 0d ac fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001ee54:	83 c4 10             	add    esp,0x10
c001ee57:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001ee5e:	75 da                	jne    c001ee3a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xcc>
c001ee60:	e4 60                	in     al,0x60
c001ee62:	3c 1c                	cmp    al,0x1c
c001ee64:	74 04                	je     c001ee6a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xfc>
c001ee66:	3c 5a                	cmp    al,0x5a
c001ee68:	75 f6                	jne    c001ee60 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xf2>
c001ee6a:	e4 60                	in     al,0x60
c001ee6c:	3c 5a                	cmp    al,0x5a
c001ee6e:	74 fa                	je     c001ee6a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xfc>
c001ee70:	3c 1c                	cmp    al,0x1c
c001ee72:	74 f6                	je     c001ee6a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xfc>
c001ee74:	eb c4                	jmp    c001ee3a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xcc>
c001ee76:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001ee7d:	74 78                	je     c001eef7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x189>
c001ee7f:	83 ec 0c             	sub    esp,0xc
c001ee82:	68 7c 65 02 c0       	push   0xc002657c
c001ee87:	e8 d5 ab fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001ee8c:	83 c4 10             	add    esp,0x10
c001ee8f:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001ee96:	75 5f                	jne    c001eef7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x189>
c001ee98:	e4 60                	in     al,0x60
c001ee9a:	3c 5a                	cmp    al,0x5a
c001ee9c:	74 04                	je     c001eea2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x134>
c001ee9e:	3c 1c                	cmp    al,0x1c
c001eea0:	75 f6                	jne    c001ee98 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x12a>
c001eea2:	e4 60                	in     al,0x60
c001eea4:	3c 5a                	cmp    al,0x5a
c001eea6:	74 fa                	je     c001eea2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x134>
c001eea8:	3c 1c                	cmp    al,0x1c
c001eeaa:	74 f6                	je     c001eea2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x134>
c001eeac:	eb 49                	jmp    c001eef7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x189>
c001eeae:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001eeb5:	74 2d                	je     c001eee4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x176>
c001eeb7:	83 ec 0c             	sub    esp,0xc
c001eeba:	68 93 65 02 c0       	push   0xc0026593
c001eebf:	e8 9d ab fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001eec4:	83 c4 10             	add    esp,0x10
c001eec7:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001eece:	75 14                	jne    c001eee4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x176>
c001eed0:	e4 60                	in     al,0x60
c001eed2:	3c 5a                	cmp    al,0x5a
c001eed4:	74 04                	je     c001eeda <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x16c>
c001eed6:	3c 1c                	cmp    al,0x1c
c001eed8:	75 f6                	jne    c001eed0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x162>
c001eeda:	e4 60                	in     al,0x60
c001eedc:	3c 5a                	cmp    al,0x5a
c001eede:	74 fa                	je     c001eeda <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x16c>
c001eee0:	3c 1c                	cmp    al,0x1c
c001eee2:	74 f6                	je     c001eeda <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x16c>
c001eee4:	83 ec 0c             	sub    esp,0xc
c001eee7:	83 cb ff             	or     ebx,0xffffffff
c001eeea:	68 aa 65 02 c0       	push   0xc00265aa
c001eeef:	e8 af 59 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c001eef4:	83 c4 10             	add    esp,0x10
c001eef7:	83 c4 3c             	add    esp,0x3c
c001eefa:	89 d8                	mov    eax,ebx
c001eefc:	5b                   	pop    ebx
c001eefd:	5e                   	pop    esi
c001eefe:	5f                   	pop    edi
c001eeff:	5d                   	pop    ebp
c001ef00:	c3                   	ret    
c001ef01:	90                   	nop

c001ef02 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001ef02:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ef06:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001ef09:	89 c2                	mov    edx,eax
c001ef0b:	c1 ea 08             	shr    edx,0x8
c001ef0e:	83 e2 0f             	and    edx,0xf
c001ef11:	fe ca                	dec    dl
c001ef13:	75 31                	jne    c001ef46 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ef15:	83 e0 0f             	and    eax,0xf
c001ef18:	3c 03                	cmp    al,0x3
c001ef1a:	75 2a                	jne    c001ef46 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ef1c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001ef1f:	b8 02 00 00 00       	mov    eax,0x2
c001ef24:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001ef2a:	74 1c                	je     c001ef48 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ef2c:	b8 04 00 00 00       	mov    eax,0x4
c001ef31:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001ef37:	74 0f                	je     c001ef48 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ef39:	31 c0                	xor    eax,eax
c001ef3b:	83 fa 03             	cmp    edx,0x3
c001ef3e:	0f 94 c0             	sete   al
c001ef41:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001ef45:	c3                   	ret    
c001ef46:	31 c0                	xor    eax,eax
c001ef48:	c3                   	ret    
c001ef49:	90                   	nop

c001ef4a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001ef4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ef4e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ef51:	0f ba e2 0f          	bt     edx,0xf
c001ef55:	72 f7                	jb     c001ef4e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001ef57:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ef5a:	83 ca 10             	or     edx,0x10
c001ef5d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ef60:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ef63:	83 ca 01             	or     edx,0x1
c001ef66:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ef69:	c3                   	ret    

c001ef6a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001ef6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ef6e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ef71:	83 e2 fe             	and    edx,0xfffffffe
c001ef74:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ef77:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ef7a:	83 e2 ef             	and    edx,0xffffffef
c001ef7d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ef80:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ef83:	0f ba e2 0e          	bt     edx,0xe
c001ef87:	72 f7                	jb     c001ef80 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ef89:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ef8c:	0f ba e2 0f          	bt     edx,0xf
c001ef90:	72 ee                	jb     c001ef80 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ef92:	c3                   	ret    
c001ef93:	90                   	nop

c001ef94 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001ef94:	55                   	push   ebp
c001ef95:	57                   	push   edi
c001ef96:	56                   	push   esi
c001ef97:	53                   	push   ebx
c001ef98:	83 ec 1c             	sub    esp,0x1c
c001ef9b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ef9f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001efa3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001efa7:	53                   	push   ebx
c001efa8:	89 fd                	mov    ebp,edi
c001efaa:	56                   	push   esi
c001efab:	c1 e5 0a             	shl    ebp,0xa
c001efae:	e8 b7 ff ff ff       	call   c001ef6a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001efb3:	83 ec 0c             	sub    esp,0xc
c001efb6:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001efbc:	01 e8                	add    eax,ebp
c001efbe:	89 03                	mov    DWORD PTR [ebx],eax
c001efc0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001efc2:	68 00 04 00 00       	push   0x400
c001efc7:	6a 00                	push   0x0
c001efc9:	50                   	push   eax
c001efca:	e8 b5 16 fe ff       	call   c0000684 <memset>
c001efcf:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001efd5:	89 fa                	mov    edx,edi
c001efd7:	01 e8                	add    eax,ebp
c001efd9:	c1 e7 0d             	shl    edi,0xd
c001efdc:	89 03                	mov    DWORD PTR [ebx],eax
c001efde:	c1 e2 08             	shl    edx,0x8
c001efe1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001efe8:	81 c2 00 80 00 00    	add    edx,0x8000
c001efee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001eff2:	89 d0                	mov    eax,edx
c001eff4:	83 c4 1c             	add    esp,0x1c
c001eff7:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001effd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f000:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f003:	68 00 01 00 00       	push   0x100
c001f008:	6a 00                	push   0x0
c001f00a:	50                   	push   eax
c001f00b:	e8 74 16 fe ff       	call   c0000684 <memset>
c001f010:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f014:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001f01a:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001f020:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f024:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001f027:	83 c4 10             	add    esp,0x10
c001f02a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f031:	31 ff                	xor    edi,edi
c001f033:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001f039:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001f03f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f043:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f049:	83 c5 20             	add    ebp,0x20
c001f04c:	01 f8                	add    eax,edi
c001f04e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f051:	52                   	push   edx
c001f052:	68 00 01 00 00       	push   0x100
c001f057:	6a 00                	push   0x0
c001f059:	50                   	push   eax
c001f05a:	e8 25 16 fe ff       	call   c0000684 <memset>
c001f05f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f063:	83 c4 10             	add    esp,0x10
c001f066:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001f06c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001f073:	01 f8                	add    eax,edi
c001f075:	81 c7 00 01 00 00    	add    edi,0x100
c001f07b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f07e:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001f084:	75 b3                	jne    c001f039 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001f086:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001f08a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001f08e:	83 c4 1c             	add    esp,0x1c
c001f091:	5b                   	pop    ebx
c001f092:	5e                   	pop    esi
c001f093:	5f                   	pop    edi
c001f094:	5d                   	pop    ebp
c001f095:	e9 b0 fe ff ff       	jmp    c001ef4a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001f09a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f09a:	55                   	push   ebp
c001f09b:	57                   	push   edi
c001f09c:	56                   	push   esi
c001f09d:	53                   	push   ebx
c001f09e:	83 ec 0c             	sub    esp,0xc
c001f0a1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f0a5:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001f0ac:	74 2d                	je     c001f0db <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f0ae:	83 ec 0c             	sub    esp,0xc
c001f0b1:	68 cf 65 02 c0       	push   0xc00265cf
c001f0b6:	e8 a6 a9 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001f0bb:	83 c4 10             	add    esp,0x10
c001f0be:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001f0c5:	75 14                	jne    c001f0db <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f0c7:	e4 60                	in     al,0x60
c001f0c9:	3c 1c                	cmp    al,0x1c
c001f0cb:	74 04                	je     c001f0d1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f0cd:	3c 5a                	cmp    al,0x5a
c001f0cf:	75 f6                	jne    c001f0c7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001f0d1:	e4 60                	in     al,0x60
c001f0d3:	3c 5a                	cmp    al,0x5a
c001f0d5:	74 fa                	je     c001f0d1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f0d7:	3c 1c                	cmp    al,0x1c
c001f0d9:	74 f6                	je     c001f0d1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f0db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f0df:	31 db                	xor    ebx,ebx
c001f0e1:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001f0e4:	f7 c5 01 00 00 00    	test   ebp,0x1
c001f0ea:	0f 84 78 01 00 00    	je     c001f268 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f0f0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f0f4:	89 d8                	mov    eax,ebx
c001f0f6:	c1 e0 07             	shl    eax,0x7
c001f0f9:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001f100:	50                   	push   eax
c001f101:	50                   	push   eax
c001f102:	57                   	push   edi
c001f103:	56                   	push   esi
c001f104:	e8 f9 fd ff ff       	call   c001ef02 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f109:	83 c4 10             	add    esp,0x10
c001f10c:	83 f8 01             	cmp    eax,0x1
c001f10f:	0f 85 19 01 00 00    	jne    c001f22e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001f115:	50                   	push   eax
c001f116:	53                   	push   ebx
c001f117:	57                   	push   edi
c001f118:	56                   	push   esi
c001f119:	e8 76 fe ff ff       	call   c001ef94 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f11e:	83 c4 10             	add    esp,0x10
c001f121:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001f128:	74 2d                	je     c001f157 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f12a:	83 ec 0c             	sub    esp,0xc
c001f12d:	68 e4 65 02 c0       	push   0xc00265e4
c001f132:	e8 2a a9 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001f137:	83 c4 10             	add    esp,0x10
c001f13a:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001f141:	75 14                	jne    c001f157 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f143:	e4 60                	in     al,0x60
c001f145:	3c 1c                	cmp    al,0x1c
c001f147:	74 04                	je     c001f14d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f149:	3c 5a                	cmp    al,0x5a
c001f14b:	75 f6                	jne    c001f143 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001f14d:	e4 60                	in     al,0x60
c001f14f:	3c 5a                	cmp    al,0x5a
c001f151:	74 fa                	je     c001f14d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f153:	3c 1c                	cmp    al,0x1c
c001f155:	74 f6                	je     c001f14d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f157:	83 ec 0c             	sub    esp,0xc
c001f15a:	68 7c 01 00 00       	push   0x17c
c001f15f:	e8 a3 a8 fe ff       	call   c0009a07 <malloc>
c001f164:	89 04 24             	mov    DWORD PTR [esp],eax
c001f167:	89 c7                	mov    edi,eax
c001f169:	e8 8e 0f 00 00       	call   c00200fc <SATA::SATA()>
c001f16e:	83 c4 10             	add    esp,0x10
c001f171:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001f178:	74 2d                	je     c001f1a7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f17a:	83 ec 0c             	sub    esp,0xc
c001f17d:	68 f9 65 02 c0       	push   0xc00265f9
c001f182:	e8 da a8 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001f187:	83 c4 10             	add    esp,0x10
c001f18a:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001f191:	75 14                	jne    c001f1a7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f193:	e4 60                	in     al,0x60
c001f195:	3c 5a                	cmp    al,0x5a
c001f197:	74 04                	je     c001f19d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f199:	3c 1c                	cmp    al,0x1c
c001f19b:	75 f6                	jne    c001f193 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001f19d:	e4 60                	in     al,0x60
c001f19f:	3c 5a                	cmp    al,0x5a
c001f1a1:	74 fa                	je     c001f19d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f1a3:	3c 1c                	cmp    al,0x1c
c001f1a5:	74 f6                	je     c001f19d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f1a7:	50                   	push   eax
c001f1a8:	50                   	push   eax
c001f1a9:	57                   	push   edi
c001f1aa:	56                   	push   esi
c001f1ab:	e8 ce ef fe ff       	call   c000e17e <Device::addChild(Device*)>
c001f1b0:	83 c4 10             	add    esp,0x10
c001f1b3:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001f1ba:	74 2d                	je     c001f1e9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f1bc:	83 ec 0c             	sub    esp,0xc
c001f1bf:	68 0e 66 02 c0       	push   0xc002660e
c001f1c4:	e8 98 a8 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001f1c9:	83 c4 10             	add    esp,0x10
c001f1cc:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001f1d3:	75 14                	jne    c001f1e9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f1d5:	e4 60                	in     al,0x60
c001f1d7:	3c 1c                	cmp    al,0x1c
c001f1d9:	74 04                	je     c001f1df <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f1db:	3c 5a                	cmp    al,0x5a
c001f1dd:	75 f6                	jne    c001f1d5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001f1df:	e4 60                	in     al,0x60
c001f1e1:	3c 5a                	cmp    al,0x5a
c001f1e3:	74 fa                	je     c001f1df <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f1e5:	3c 1c                	cmp    al,0x1c
c001f1e7:	74 f6                	je     c001f1df <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f1e9:	8b 07                	mov    eax,DWORD PTR [edi]
c001f1eb:	56                   	push   esi
c001f1ec:	6a 00                	push   0x0
c001f1ee:	53                   	push   ebx
c001f1ef:	57                   	push   edi
c001f1f0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f1f3:	83 c4 10             	add    esp,0x10
c001f1f6:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001f1fd:	74 69                	je     c001f268 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f1ff:	83 ec 0c             	sub    esp,0xc
c001f202:	68 23 66 02 c0       	push   0xc0026623
c001f207:	e8 55 a8 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001f20c:	83 c4 10             	add    esp,0x10
c001f20f:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001f216:	75 50                	jne    c001f268 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f218:	e4 60                	in     al,0x60
c001f21a:	3c 1c                	cmp    al,0x1c
c001f21c:	74 04                	je     c001f222 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f21e:	3c 5a                	cmp    al,0x5a
c001f220:	75 f6                	jne    c001f218 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001f222:	e4 60                	in     al,0x60
c001f224:	3c 5a                	cmp    al,0x5a
c001f226:	74 fa                	je     c001f222 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f228:	3c 1c                	cmp    al,0x1c
c001f22a:	74 f6                	je     c001f222 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f22c:	eb 3a                	jmp    c001f268 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f22e:	83 f8 04             	cmp    eax,0x4
c001f231:	75 35                	jne    c001f268 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f233:	50                   	push   eax
c001f234:	53                   	push   ebx
c001f235:	57                   	push   edi
c001f236:	56                   	push   esi
c001f237:	e8 58 fd ff ff       	call   c001ef94 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f23c:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f243:	e8 bf a7 fe ff       	call   c0009a07 <malloc>
c001f248:	89 04 24             	mov    DWORD PTR [esp],eax
c001f24b:	89 c7                	mov    edi,eax
c001f24d:	e8 20 17 00 00       	call   c0020972 <SATAPI::SATAPI()>
c001f252:	5a                   	pop    edx
c001f253:	59                   	pop    ecx
c001f254:	57                   	push   edi
c001f255:	56                   	push   esi
c001f256:	e8 23 ef fe ff       	call   c000e17e <Device::addChild(Device*)>
c001f25b:	8b 07                	mov    eax,DWORD PTR [edi]
c001f25d:	56                   	push   esi
c001f25e:	6a 00                	push   0x0
c001f260:	53                   	push   ebx
c001f261:	57                   	push   edi
c001f262:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f265:	83 c4 20             	add    esp,0x20
c001f268:	d1 ed                	shr    ebp,1
c001f26a:	43                   	inc    ebx
c001f26b:	83 fb 20             	cmp    ebx,0x20
c001f26e:	0f 85 70 fe ff ff    	jne    c001f0e4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001f274:	83 c4 0c             	add    esp,0xc
c001f277:	5b                   	pop    ebx
c001f278:	5e                   	pop    esi
c001f279:	5f                   	pop    edi
c001f27a:	5d                   	pop    ebp
c001f27b:	c3                   	ret    

c001f27c <SATABus::open(int, int, void*)>:
c001f27c:	83 ec 14             	sub    esp,0x14
c001f27f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f283:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001f289:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001f28f:	52                   	push   edx
c001f290:	50                   	push   eax
c001f291:	e8 04 fe ff ff       	call   c001f09a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001f296:	31 c0                	xor    eax,eax
c001f298:	83 c4 1c             	add    esp,0x1c
c001f29b:	c3                   	ret    

c001f29c <ATA::close(int, int, void*)>:
c001f29c:	83 ec 0c             	sub    esp,0xc
c001f29f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2a3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f2a9:	85 c0                	test   eax,eax
c001f2ab:	74 0c                	je     c001f2b9 <ATA::close(int, int, void*)+0x1d>
c001f2ad:	83 ec 0c             	sub    esp,0xc
c001f2b0:	8b 10                	mov    edx,DWORD PTR [eax]
c001f2b2:	50                   	push   eax
c001f2b3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f2b6:	83 c4 10             	add    esp,0x10
c001f2b9:	31 c0                	xor    eax,eax
c001f2bb:	83 c4 0c             	add    esp,0xc
c001f2be:	c3                   	ret    
c001f2bf:	90                   	nop

c001f2c0 <ATA::powerSaving(PowerSavingLevel)>:
c001f2c0:	c3                   	ret    
c001f2c1:	90                   	nop

c001f2c2 <ATA::ATA()>:
c001f2c2:	83 ec 0c             	sub    esp,0xc
c001f2c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2c9:	83 ec 04             	sub    esp,0x4
c001f2cc:	68 00 02 00 00       	push   0x200
c001f2d1:	68 83 67 02 c0       	push   0xc0026783
c001f2d6:	50                   	push   eax
c001f2d7:	e8 da f2 fe ff       	call   c000e5b6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f2dc:	83 c4 10             	add    esp,0x10
c001f2df:	ba b8 66 02 c0       	mov    edx,0xc00266b8
c001f2e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2e8:	89 10                	mov    DWORD PTR [eax],edx
c001f2ea:	90                   	nop
c001f2eb:	83 c4 0c             	add    esp,0xc
c001f2ee:	c3                   	ret    
c001f2ef:	90                   	nop

c001f2f0 <ATA::flush(bool)>:
c001f2f0:	53                   	push   ebx
c001f2f1:	83 ec 08             	sub    esp,0x8
c001f2f4:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001f2f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f2fd:	19 c0                	sbb    eax,eax
c001f2ff:	83 e0 fd             	and    eax,0xfffffffd
c001f302:	05 ea 00 00 00       	add    eax,0xea
c001f307:	50                   	push   eax
c001f308:	6a 07                	push   0x7
c001f30a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f311:	50                   	push   eax
c001f312:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f318:	e8 d9 ee ff ff       	call   c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f31d:	83 c4 0c             	add    esp,0xc
c001f320:	6a 00                	push   0x0
c001f322:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f329:	50                   	push   eax
c001f32a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f330:	e8 59 f9 ff ff       	call   c001ec8e <IDE::polling(unsigned char, unsigned int)>
c001f335:	83 c4 18             	add    esp,0x18
c001f338:	5b                   	pop    ebx
c001f339:	c3                   	ret    

c001f33a <ATA::readyForCommand()>:
c001f33a:	56                   	push   esi
c001f33b:	53                   	push   ebx
c001f33c:	53                   	push   ebx
c001f33d:	31 db                	xor    ebx,ebx
c001f33f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f343:	51                   	push   ecx
c001f344:	6a 0c                	push   0xc
c001f346:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f34d:	50                   	push   eax
c001f34e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f354:	e8 5d ef ff ff       	call   c001e2b6 <IDE::read(unsigned char, unsigned char)>
c001f359:	83 c4 10             	add    esp,0x10
c001f35c:	a8 88                	test   al,0x88
c001f35e:	74 1f                	je     c001f37f <ATA::readyForCommand()+0x45>
c001f360:	43                   	inc    ebx
c001f361:	83 fb 63             	cmp    ebx,0x63
c001f364:	7e dd                	jle    c001f343 <ATA::readyForCommand()+0x9>
c001f366:	83 ec 0c             	sub    esp,0xc
c001f369:	6a 0a                	push   0xa
c001f36b:	e8 fc 93 ff ff       	call   c001876c <milliTenthSleep(unsigned int)>
c001f370:	83 c4 10             	add    esp,0x10
c001f373:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001f379:	75 c8                	jne    c001f343 <ATA::readyForCommand()+0x9>
c001f37b:	31 c0                	xor    eax,eax
c001f37d:	eb 02                	jmp    c001f381 <ATA::readyForCommand()+0x47>
c001f37f:	b0 01                	mov    al,0x1
c001f381:	5a                   	pop    edx
c001f382:	5b                   	pop    ebx
c001f383:	5e                   	pop    esi
c001f384:	c3                   	ret    
c001f385:	90                   	nop

c001f386 <ATA::access(unsigned long long, int, void*, bool)>:
c001f386:	55                   	push   ebp
c001f387:	57                   	push   edi
c001f388:	56                   	push   esi
c001f389:	53                   	push   ebx
c001f38a:	83 ec 38             	sub    esp,0x38
c001f38d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001f391:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001f395:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f399:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f39d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f3a1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f3a5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001f3a9:	68 64 66 02 c0       	push   0xc0026664
c001f3ae:	e8 44 d9 fe ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c001f3b3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f3b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f3bd:	83 c4 10             	add    esp,0x10
c001f3c0:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f3c6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f3ca:	c1 e0 06             	shl    eax,0x6
c001f3cd:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001f3d5:	74 5d                	je     c001f434 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001f3d7:	89 fa                	mov    edx,edi
c001f3d9:	89 f0                	mov    eax,esi
c001f3db:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001f3df:	c1 ea 1c             	shr    edx,0x1c
c001f3e2:	89 d1                	mov    ecx,edx
c001f3e4:	09 c1                	or     ecx,eax
c001f3e6:	74 25                	je     c001f40d <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001f3e8:	31 ed                	xor    ebp,ebp
c001f3ea:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001f3f1:	89 fa                	mov    edx,edi
c001f3f3:	89 f0                	mov    eax,esi
c001f3f5:	0f ad d0             	shrd   eax,edx,cl
c001f3f8:	d3 ea                	shr    edx,cl
c001f3fa:	f6 c1 20             	test   cl,0x20
c001f3fd:	74 02                	je     c001f401 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001f3ff:	89 d0                	mov    eax,edx
c001f401:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001f405:	45                   	inc    ebp
c001f406:	83 fd 06             	cmp    ebp,0x6
c001f409:	75 df                	jne    c001f3ea <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001f40b:	eb 76                	jmp    c001f483 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001f40d:	89 f0                	mov    eax,esi
c001f40f:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001f414:	89 fa                	mov    edx,edi
c001f416:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f41d:	0f ac d0 10          	shrd   eax,edx,0x10
c001f421:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f426:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f42a:	c1 ee 18             	shr    esi,0x18
c001f42d:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f432:	eb 56                	jmp    c001f48a <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f434:	6a 00                	push   0x0
c001f436:	6a 3f                	push   0x3f
c001f438:	57                   	push   edi
c001f439:	56                   	push   esi
c001f43a:	e8 d5 30 00 00       	call   c0022514 <__umoddi3>
c001f43f:	83 c4 10             	add    esp,0x10
c001f442:	40                   	inc    eax
c001f443:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001f447:	6a 00                	push   0x0
c001f449:	68 f0 03 00 00       	push   0x3f0
c001f44e:	57                   	push   edi
c001f44f:	56                   	push   esi
c001f450:	e8 bf 2f 00 00       	call   c0022414 <__udivdi3>
c001f455:	83 c4 10             	add    esp,0x10
c001f458:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001f45d:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f464:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f469:	6a 00                	push   0x0
c001f46b:	6a 3f                	push   0x3f
c001f46d:	57                   	push   edi
c001f46e:	56                   	push   esi
c001f46f:	e8 a0 2f 00 00       	call   c0022414 <__udivdi3>
c001f474:	83 c4 10             	add    esp,0x10
c001f477:	89 c6                	mov    esi,eax
c001f479:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f47e:	83 e6 0f             	and    esi,0xf
c001f481:	eb 07                	jmp    c001f48a <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f483:	31 f6                	xor    esi,esi
c001f485:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001f48a:	bf 01 00 00 00       	mov    edi,0x1
c001f48f:	50                   	push   eax
c001f490:	6a 00                	push   0x0
c001f492:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f499:	50                   	push   eax
c001f49a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f49e:	e8 5b ef ff ff       	call   c001e3fe <IDE::enableIRQs(unsigned char, bool)>
c001f4a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f4a6:	e8 8f fe ff ff       	call   c001f33a <ATA::readyForCommand()>
c001f4ab:	83 c4 10             	add    esp,0x10
c001f4ae:	84 c0                	test   al,al
c001f4b0:	0f 84 bc 02 00 00    	je     c001f772 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f4b6:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f4bc:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f4c2:	c1 e0 04             	shl    eax,0x4
c001f4c5:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001f4cc:	09 c6                	or     esi,eax
c001f4ce:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4d3:	75 05                	jne    c001f4da <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001f4d5:	83 ce a0             	or     esi,0xffffffa0
c001f4d8:	eb 03                	jmp    c001f4dd <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001f4da:	83 ce e0             	or     esi,0xffffffe0
c001f4dd:	89 f0                	mov    eax,esi
c001f4df:	0f b6 f0             	movzx  esi,al
c001f4e2:	56                   	push   esi
c001f4e3:	6a 06                	push   0x6
c001f4e5:	51                   	push   ecx
c001f4e6:	52                   	push   edx
c001f4e7:	e8 0a ed ff ff       	call   c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f4ec:	83 c4 10             	add    esp,0x10
c001f4ef:	6a 00                	push   0x0
c001f4f1:	6a 01                	push   0x1
c001f4f3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f4fa:	50                   	push   eax
c001f4fb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f501:	e8 f0 ec ff ff       	call   c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f506:	83 c4 10             	add    esp,0x10
c001f509:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f50e:	75 6e                	jne    c001f57e <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001f510:	6a 00                	push   0x0
c001f512:	6a 08                	push   0x8
c001f514:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f51b:	50                   	push   eax
c001f51c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f522:	e8 cf ec ff ff       	call   c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f527:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001f52c:	50                   	push   eax
c001f52d:	6a 09                	push   0x9
c001f52f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f536:	50                   	push   eax
c001f537:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f53d:	e8 b4 ec ff ff       	call   c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f542:	83 c4 20             	add    esp,0x20
c001f545:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001f54a:	50                   	push   eax
c001f54b:	6a 0a                	push   0xa
c001f54d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f554:	50                   	push   eax
c001f555:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f55b:	e8 96 ec ff ff       	call   c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f560:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001f565:	50                   	push   eax
c001f566:	6a 0b                	push   0xb
c001f568:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f56f:	50                   	push   eax
c001f570:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f576:	e8 7b ec ff ff       	call   c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f57b:	83 c4 20             	add    esp,0x20
c001f57e:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001f583:	50                   	push   eax
c001f584:	6a 02                	push   0x2
c001f586:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f58d:	50                   	push   eax
c001f58e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f594:	e8 5d ec ff ff       	call   c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f599:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001f59e:	50                   	push   eax
c001f59f:	6a 03                	push   0x3
c001f5a1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5a8:	50                   	push   eax
c001f5a9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5af:	e8 42 ec ff ff       	call   c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f5b4:	83 c4 20             	add    esp,0x20
c001f5b7:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001f5bc:	50                   	push   eax
c001f5bd:	6a 04                	push   0x4
c001f5bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5c6:	50                   	push   eax
c001f5c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5cd:	e8 24 ec ff ff       	call   c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f5d2:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f5d7:	50                   	push   eax
c001f5d8:	6a 05                	push   0x5
c001f5da:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5e1:	50                   	push   eax
c001f5e2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5e8:	e8 09 ec ff ff       	call   c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f5ed:	83 c4 20             	add    esp,0x20
c001f5f0:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f5f5:	0f 94 c0             	sete   al
c001f5f8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f5fd:	74 09                	je     c001f608 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001f5ff:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001f606:	eb 07                	jmp    c001f60f <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001f608:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001f60f:	0f b6 c0             	movzx  eax,al
c001f612:	50                   	push   eax
c001f613:	6a 07                	push   0x7
c001f615:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f61c:	50                   	push   eax
c001f61d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f623:	e8 ce eb ff ff       	call   c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f628:	c7 04 24 71 66 02 c0 	mov    DWORD PTR [esp],0xc0026671
c001f62f:	e8 c3 d6 fe ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c001f634:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001f638:	83 c4 10             	add    esp,0x10
c001f63b:	85 f6                	test   esi,esi
c001f63d:	0f 84 f7 00 00 00    	je     c001f73a <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001f643:	83 ec 0c             	sub    esp,0xc
c001f646:	68 74 66 02 c0       	push   0xc0026674
c001f64b:	e8 a7 d6 fe ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c001f650:	83 c4 0c             	add    esp,0xc
c001f653:	6a 01                	push   0x1
c001f655:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f65c:	50                   	push   eax
c001f65d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f663:	e8 26 f6 ff ff       	call   c001ec8e <IDE::polling(unsigned char, unsigned int)>
c001f668:	c7 04 24 77 66 02 c0 	mov    DWORD PTR [esp],0xc0026677
c001f66f:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f673:	e8 7f d6 fe ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c001f678:	83 c4 10             	add    esp,0x10
c001f67b:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001f67f:	84 c0                	test   al,al
c001f681:	74 2b                	je     c001f6ae <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001f683:	0f b6 f8             	movzx  edi,al
c001f686:	57                   	push   edi
c001f687:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001f68e:	50                   	push   eax
c001f68f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f696:	50                   	push   eax
c001f697:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f69d:	e8 3c f5 ff ff       	call   c001ebde <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f6a2:	c7 04 24 7a 66 02 c0 	mov    DWORD PTR [esp],0xc002667a
c001f6a9:	e9 bc 00 00 00       	jmp    c001f76a <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001f6ae:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f6b3:	74 50                	je     c001f705 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001f6b5:	83 ec 0c             	sub    esp,0xc
c001f6b8:	31 ed                	xor    ebp,ebp
c001f6ba:	68 85 66 02 c0       	push   0xc0026685
c001f6bf:	e8 33 d6 fe ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c001f6c4:	83 c4 10             	add    esp,0x10
c001f6c7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f6cb:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001f6cf:	50                   	push   eax
c001f6d0:	50                   	push   eax
c001f6d1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f6d8:	50                   	push   eax
c001f6d9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f6df:	e8 00 eb ff ff       	call   c001e1e4 <IDE::getBase(unsigned char)>
c001f6e4:	89 c2                	mov    edx,eax
c001f6e6:	89 f8                	mov    eax,edi
c001f6e8:	66 ef                	out    dx,ax
c001f6ea:	45                   	inc    ebp
c001f6eb:	83 c4 10             	add    esp,0x10
c001f6ee:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001f6f4:	75 d1                	jne    c001f6c7 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001f6f6:	83 ec 0c             	sub    esp,0xc
c001f6f9:	68 88 66 02 c0       	push   0xc0026688
c001f6fe:	e8 f4 d5 fe ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c001f703:	eb 24                	jmp    c001f729 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001f705:	51                   	push   ecx
c001f706:	51                   	push   ecx
c001f707:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f70e:	50                   	push   eax
c001f70f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f715:	e8 ca ea ff ff       	call   c001e1e4 <IDE::getBase(unsigned char)>
c001f71a:	b9 00 01 00 00       	mov    ecx,0x100
c001f71f:	89 c2                	mov    edx,eax
c001f721:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001f725:	fc                   	cld    
c001f726:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001f729:	83 c4 10             	add    esp,0x10
c001f72c:	4e                   	dec    esi
c001f72d:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001f735:	e9 01 ff ff ff       	jmp    c001f63b <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001f73a:	31 ff                	xor    edi,edi
c001f73c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f741:	74 2f                	je     c001f772 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f743:	83 ec 0c             	sub    esp,0xc
c001f746:	68 8b 66 02 c0       	push   0xc002668b
c001f74b:	e8 a7 d5 fe ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c001f750:	58                   	pop    eax
c001f751:	31 c0                	xor    eax,eax
c001f753:	5a                   	pop    edx
c001f754:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001f759:	0f 94 c0             	sete   al
c001f75c:	50                   	push   eax
c001f75d:	53                   	push   ebx
c001f75e:	e8 8d fb ff ff       	call   c001f2f0 <ATA::flush(bool)>
c001f763:	c7 04 24 8e 66 02 c0 	mov    DWORD PTR [esp],0xc002668e
c001f76a:	e8 88 d5 fe ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c001f76f:	83 c4 10             	add    esp,0x10
c001f772:	83 c4 2c             	add    esp,0x2c
c001f775:	89 f8                	mov    eax,edi
c001f777:	5b                   	pop    ebx
c001f778:	5e                   	pop    esi
c001f779:	5f                   	pop    edi
c001f77a:	5d                   	pop    ebp
c001f77b:	c3                   	ret    

c001f77c <ATA::read(unsigned long long, int, void*)>:
c001f77c:	57                   	push   edi
c001f77d:	b8 04 00 00 00       	mov    eax,0x4
c001f782:	56                   	push   esi
c001f783:	53                   	push   ebx
c001f784:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f788:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f78c:	8d 7a ff             	lea    edi,[edx-0x1]
c001f78f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f793:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f797:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f79d:	77 25                	ja     c001f7c4 <ATA::read(unsigned long long, int, void*)+0x48>
c001f79f:	b8 06 00 00 00       	mov    eax,0x6
c001f7a4:	85 f6                	test   esi,esi
c001f7a6:	74 1c                	je     c001f7c4 <ATA::read(unsigned long long, int, void*)+0x48>
c001f7a8:	50                   	push   eax
c001f7a9:	50                   	push   eax
c001f7aa:	6a 00                	push   0x0
c001f7ac:	56                   	push   esi
c001f7ad:	52                   	push   edx
c001f7ae:	53                   	push   ebx
c001f7af:	51                   	push   ecx
c001f7b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f7b4:	e8 cd fb ff ff       	call   c001f386 <ATA::access(unsigned long long, int, void*, bool)>
c001f7b9:	83 c4 20             	add    esp,0x20
c001f7bc:	85 c0                	test   eax,eax
c001f7be:	0f 95 c0             	setne  al
c001f7c1:	0f b6 c0             	movzx  eax,al
c001f7c4:	5b                   	pop    ebx
c001f7c5:	5e                   	pop    esi
c001f7c6:	5f                   	pop    edi
c001f7c7:	c3                   	ret    

c001f7c8 <ATA::write(unsigned long long, int, void*)>:
c001f7c8:	55                   	push   ebp
c001f7c9:	57                   	push   edi
c001f7ca:	56                   	push   esi
c001f7cb:	53                   	push   ebx
c001f7cc:	83 ec 18             	sub    esp,0x18
c001f7cf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001f7d3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f7d7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001f7db:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001f7df:	68 91 66 02 c0       	push   0xc0026691
c001f7e4:	e8 0e d5 fe ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c001f7e9:	8d 53 ff             	lea    edx,[ebx-0x1]
c001f7ec:	83 c4 10             	add    esp,0x10
c001f7ef:	b8 04 00 00 00       	mov    eax,0x4
c001f7f4:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001f7fa:	77 25                	ja     c001f821 <ATA::write(unsigned long long, int, void*)+0x59>
c001f7fc:	b8 06 00 00 00       	mov    eax,0x6
c001f801:	85 f6                	test   esi,esi
c001f803:	74 1c                	je     c001f821 <ATA::write(unsigned long long, int, void*)+0x59>
c001f805:	50                   	push   eax
c001f806:	50                   	push   eax
c001f807:	6a 01                	push   0x1
c001f809:	56                   	push   esi
c001f80a:	53                   	push   ebx
c001f80b:	55                   	push   ebp
c001f80c:	57                   	push   edi
c001f80d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f811:	e8 70 fb ff ff       	call   c001f386 <ATA::access(unsigned long long, int, void*, bool)>
c001f816:	83 c4 20             	add    esp,0x20
c001f819:	85 c0                	test   eax,eax
c001f81b:	0f 95 c0             	setne  al
c001f81e:	0f b6 c0             	movzx  eax,al
c001f821:	83 c4 0c             	add    esp,0xc
c001f824:	5b                   	pop    ebx
c001f825:	5e                   	pop    esi
c001f826:	5f                   	pop    edi
c001f827:	5d                   	pop    ebp
c001f828:	c3                   	ret    
c001f829:	90                   	nop

c001f82a <ATA::detectCHS()>:
c001f82a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f82e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001f834:	c1 e0 06             	shl    eax,0x6
c001f837:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001f83d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001f847:	c7 44 24 04 9d 66 02 c0 	mov    DWORD PTR [esp+0x4],0xc002669d
c001f84f:	e9 4f 50 ff ff       	jmp    c00148a3 <Krnl::panic(char const*)>

c001f854 <ATA::open(int, int, void*)>:
c001f854:	53                   	push   ebx
c001f855:	83 ec 08             	sub    esp,0x8
c001f858:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f85c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f860:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f864:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f86a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f870:	c1 e0 06             	shl    eax,0x6
c001f873:	01 d0                	add    eax,edx
c001f875:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001f87c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001f882:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001f889:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f893:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001f899:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f8a0:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001f8a7:	75 0c                	jne    c001f8b5 <ATA::open(int, int, void*)+0x61>
c001f8a9:	83 ec 0c             	sub    esp,0xc
c001f8ac:	53                   	push   ebx
c001f8ad:	e8 78 ff ff ff       	call   c001f82a <ATA::detectCHS()>
c001f8b2:	83 c4 10             	add    esp,0x10
c001f8b5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f8bb:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f8c1:	c1 e0 06             	shl    eax,0x6
c001f8c4:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001f8cb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f8d5:	d1 e8                	shr    eax,1
c001f8d7:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f8dd:	6a 04                	push   0x4
c001f8df:	6a 0c                	push   0xc
c001f8e1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f8e8:	50                   	push   eax
c001f8e9:	52                   	push   edx
c001f8ea:	e8 07 e9 ff ff       	call   c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f8ef:	90                   	nop
c001f8f0:	90                   	nop
c001f8f1:	6a 00                	push   0x0
c001f8f3:	6a 0c                	push   0xc
c001f8f5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f8fc:	50                   	push   eax
c001f8fd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f903:	e8 ee e8 ff ff       	call   c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f908:	83 c4 14             	add    esp,0x14
c001f90b:	53                   	push   ebx
c001f90c:	e8 0d ed fe ff       	call   c000e61e <PhysicalDisk::startCache()>
c001f911:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f914:	e8 41 0d ff ff       	call   c001065a <createPartitionsForDisk(PhysicalDisk*)>
c001f919:	31 c0                	xor    eax,eax
c001f91b:	83 c4 18             	add    esp,0x18
c001f91e:	5b                   	pop    ebx
c001f91f:	c3                   	ret    

c001f920 <ATAPI::write(unsigned long long, int, void*)>:
c001f920:	b8 03 00 00 00       	mov    eax,0x3
c001f925:	c3                   	ret    

c001f926 <ATAPI::close(int, int, void*)>:
c001f926:	83 ec 0c             	sub    esp,0xc
c001f929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f92d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f933:	85 c0                	test   eax,eax
c001f935:	74 0c                	je     c001f943 <ATAPI::close(int, int, void*)+0x1d>
c001f937:	83 ec 0c             	sub    esp,0xc
c001f93a:	8b 10                	mov    edx,DWORD PTR [eax]
c001f93c:	50                   	push   eax
c001f93d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f940:	83 c4 10             	add    esp,0x10
c001f943:	31 c0                	xor    eax,eax
c001f945:	83 c4 0c             	add    esp,0xc
c001f948:	c3                   	ret    
c001f949:	90                   	nop

c001f94a <ATAPI::ATAPI()>:
c001f94a:	83 ec 0c             	sub    esp,0xc
c001f94d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f951:	83 ec 04             	sub    esp,0x4
c001f954:	68 00 08 00 00       	push   0x800
c001f959:	68 5d 69 02 c0       	push   0xc002695d
c001f95e:	50                   	push   eax
c001f95f:	e8 52 ec fe ff       	call   c000e5b6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f964:	83 c4 10             	add    esp,0x10
c001f967:	ba f0 66 02 c0       	mov    edx,0xc00266f0
c001f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f970:	89 10                	mov    DWORD PTR [eax],edx
c001f972:	90                   	nop
c001f973:	83 c4 0c             	add    esp,0xc
c001f976:	c3                   	ret    
c001f977:	90                   	nop

c001f978 <ATAPI::readyForCommand()>:
c001f978:	56                   	push   esi
c001f979:	53                   	push   ebx
c001f97a:	53                   	push   ebx
c001f97b:	31 db                	xor    ebx,ebx
c001f97d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f981:	51                   	push   ecx
c001f982:	6a 0c                	push   0xc
c001f984:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f98b:	50                   	push   eax
c001f98c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f992:	e8 1f e9 ff ff       	call   c001e2b6 <IDE::read(unsigned char, unsigned char)>
c001f997:	83 c4 10             	add    esp,0x10
c001f99a:	a8 88                	test   al,0x88
c001f99c:	74 25                	je     c001f9c3 <ATAPI::readyForCommand()+0x4b>
c001f99e:	43                   	inc    ebx
c001f99f:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001f9a5:	7e da                	jle    c001f981 <ATAPI::readyForCommand()+0x9>
c001f9a7:	83 ec 0c             	sub    esp,0xc
c001f9aa:	68 5e 01 00 00       	push   0x15e
c001f9af:	e8 b8 8d ff ff       	call   c001876c <milliTenthSleep(unsigned int)>
c001f9b4:	83 c4 10             	add    esp,0x10
c001f9b7:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001f9bd:	75 c2                	jne    c001f981 <ATAPI::readyForCommand()+0x9>
c001f9bf:	31 c0                	xor    eax,eax
c001f9c1:	eb 02                	jmp    c001f9c5 <ATAPI::readyForCommand()+0x4d>
c001f9c3:	b0 01                	mov    al,0x1
c001f9c5:	5a                   	pop    edx
c001f9c6:	5b                   	pop    ebx
c001f9c7:	5e                   	pop    esi
c001f9c8:	c3                   	ret    
c001f9c9:	90                   	nop

c001f9ca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001f9ca:	55                   	push   ebp
c001f9cb:	57                   	push   edi
c001f9cc:	56                   	push   esi
c001f9cd:	53                   	push   ebx
c001f9ce:	83 ec 20             	sub    esp,0x20
c001f9d1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001f9d5:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001f9d9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001f9dd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001f9e1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f9e5:	6a 01                	push   0x1
c001f9e7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f9ee:	50                   	push   eax
c001f9ef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f9f5:	e8 04 ea ff ff       	call   c001e3fe <IDE::enableIRQs(unsigned char, bool)>
c001f9fa:	5e                   	pop    esi
c001f9fb:	58                   	pop    eax
c001f9fc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fa03:	50                   	push   eax
c001fa04:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fa0a:	e8 c1 e7 ff ff       	call   c001e1d0 <IDE::prepareInterrupt(unsigned char)>
c001fa0f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001fa12:	e8 61 ff ff ff       	call   c001f978 <ATAPI::readyForCommand()>
c001fa17:	83 c4 10             	add    esp,0x10
c001fa1a:	84 c0                	test   al,al
c001fa1c:	75 0a                	jne    c001fa28 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001fa1e:	bb 01 00 00 00       	mov    ebx,0x1
c001fa23:	e9 57 02 00 00       	jmp    c001fc7f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fa28:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001fa2e:	c1 e0 04             	shl    eax,0x4
c001fa31:	0f b6 c0             	movzx  eax,al
c001fa34:	50                   	push   eax
c001fa35:	6a 06                	push   0x6
c001fa37:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fa3e:	50                   	push   eax
c001fa3f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fa45:	e8 ac e7 ff ff       	call   c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa4a:	6a 00                	push   0x0
c001fa4c:	6a 01                	push   0x1
c001fa4e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fa55:	50                   	push   eax
c001fa56:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fa5c:	e8 95 e7 ff ff       	call   c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa61:	83 c4 20             	add    esp,0x20
c001fa64:	0f b6 c3             	movzx  eax,bl
c001fa67:	0f b6 df             	movzx  ebx,bh
c001fa6a:	50                   	push   eax
c001fa6b:	6a 04                	push   0x4
c001fa6d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fa74:	50                   	push   eax
c001fa75:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fa7b:	e8 76 e7 ff ff       	call   c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa80:	53                   	push   ebx
c001fa81:	6a 05                	push   0x5
c001fa83:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fa8a:	50                   	push   eax
c001fa8b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fa91:	e8 60 e7 ff ff       	call   c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa96:	83 c4 20             	add    esp,0x20
c001fa99:	68 a0 00 00 00       	push   0xa0
c001fa9e:	6a 07                	push   0x7
c001faa0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001faa7:	50                   	push   eax
c001faa8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001faae:	e8 43 e7 ff ff       	call   c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fab3:	83 c4 0c             	add    esp,0xc
c001fab6:	6a 01                	push   0x1
c001fab8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fabf:	50                   	push   eax
c001fac0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fac6:	e8 c3 f1 ff ff       	call   c001ec8e <IDE::polling(unsigned char, unsigned int)>
c001facb:	83 c4 10             	add    esp,0x10
c001face:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001fad4:	84 c0                	test   al,al
c001fad6:	74 23                	je     c001fafb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001fad8:	0f b6 d8             	movzx  ebx,al
c001fadb:	0f b6 d2             	movzx  edx,dl
c001fade:	53                   	push   ebx
c001fadf:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001fae6:	50                   	push   eax
c001fae7:	52                   	push   edx
c001fae8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001faee:	e8 eb f0 ff ff       	call   c001ebde <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001faf3:	83 c4 10             	add    esp,0x10
c001faf6:	e9 84 01 00 00       	jmp    c001fc7f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fafb:	0f b6 d2             	movzx  edx,dl
c001fafe:	53                   	push   ebx
c001faff:	53                   	push   ebx
c001fb00:	52                   	push   edx
c001fb01:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fb07:	e8 d8 e6 ff ff       	call   c001e1e4 <IDE::getBase(unsigned char)>
c001fb0c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001fb10:	b9 06 00 00 00       	mov    ecx,0x6
c001fb15:	89 c2                	mov    edx,eax
c001fb17:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001fb1a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001fb1e:	83 c4 10             	add    esp,0x10
c001fb21:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fb27:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fb2e:	85 db                	test   ebx,ebx
c001fb30:	0f 84 ec 00 00 00    	je     c001fc22 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001fb36:	51                   	push   ecx
c001fb37:	51                   	push   ecx
c001fb38:	52                   	push   edx
c001fb39:	50                   	push   eax
c001fb3a:	e8 25 e8 ff ff       	call   c001e364 <IDE::waitInterrupt(unsigned char)>
c001fb3f:	83 c4 10             	add    esp,0x10
c001fb42:	84 c0                	test   al,al
c001fb44:	0f 84 d4 fe ff ff    	je     c001fa1e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fb4a:	56                   	push   esi
c001fb4b:	56                   	push   esi
c001fb4c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fb53:	50                   	push   eax
c001fb54:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fb5a:	e8 71 e6 ff ff       	call   c001e1d0 <IDE::prepareInterrupt(unsigned char)>
c001fb5f:	83 c4 0c             	add    esp,0xc
c001fb62:	6a 04                	push   0x4
c001fb64:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fb6b:	50                   	push   eax
c001fb6c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fb72:	e8 3f e7 ff ff       	call   c001e2b6 <IDE::read(unsigned char, unsigned char)>
c001fb77:	83 c4 0c             	add    esp,0xc
c001fb7a:	89 c6                	mov    esi,eax
c001fb7c:	6a 05                	push   0x5
c001fb7e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fb85:	50                   	push   eax
c001fb86:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fb8c:	e8 25 e7 ff ff       	call   c001e2b6 <IDE::read(unsigned char, unsigned char)>
c001fb91:	89 f1                	mov    ecx,esi
c001fb93:	0f b6 c0             	movzx  eax,al
c001fb96:	0f b6 f1             	movzx  esi,cl
c001fb99:	c1 e0 08             	shl    eax,0x8
c001fb9c:	09 c6                	or     esi,eax
c001fb9e:	d1 fe                	sar    esi,1
c001fba0:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001fba4:	83 c4 10             	add    esp,0x10
c001fba7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001fbac:	74 41                	je     c001fbef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001fbae:	31 c9                	xor    ecx,ecx
c001fbb0:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fbb6:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fbbd:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001fbc1:	75 0a                	jne    c001fbcd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001fbc3:	01 c9                	add    ecx,ecx
c001fbc5:	01 cd                	add    ebp,ecx
c001fbc7:	4b                   	dec    ebx
c001fbc8:	e9 54 ff ff ff       	jmp    c001fb21 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001fbcd:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001fbd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001fbd6:	51                   	push   ecx
c001fbd7:	51                   	push   ecx
c001fbd8:	52                   	push   edx
c001fbd9:	50                   	push   eax
c001fbda:	e8 05 e6 ff ff       	call   c001e1e4 <IDE::getBase(unsigned char)>
c001fbdf:	89 c2                	mov    edx,eax
c001fbe1:	89 f0                	mov    eax,esi
c001fbe3:	66 ef                	out    dx,ax
c001fbe5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001fbe9:	83 c4 10             	add    esp,0x10
c001fbec:	41                   	inc    ecx
c001fbed:	eb c1                	jmp    c001fbb0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001fbef:	31 f6                	xor    esi,esi
c001fbf1:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fbf7:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fbfe:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001fc02:	75 06                	jne    c001fc0a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001fc04:	01 f6                	add    esi,esi
c001fc06:	01 f5                	add    ebp,esi
c001fc08:	eb bd                	jmp    c001fbc7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001fc0a:	51                   	push   ecx
c001fc0b:	51                   	push   ecx
c001fc0c:	52                   	push   edx
c001fc0d:	50                   	push   eax
c001fc0e:	e8 d1 e5 ff ff       	call   c001e1e4 <IDE::getBase(unsigned char)>
c001fc13:	89 c2                	mov    edx,eax
c001fc15:	66 ed                	in     ax,dx
c001fc17:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001fc1c:	83 c4 10             	add    esp,0x10
c001fc1f:	46                   	inc    esi
c001fc20:	eb cf                	jmp    c001fbf1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001fc22:	51                   	push   ecx
c001fc23:	51                   	push   ecx
c001fc24:	52                   	push   edx
c001fc25:	50                   	push   eax
c001fc26:	e8 39 e7 ff ff       	call   c001e364 <IDE::waitInterrupt(unsigned char)>
c001fc2b:	83 c4 10             	add    esp,0x10
c001fc2e:	84 c0                	test   al,al
c001fc30:	0f 84 e8 fd ff ff    	je     c001fa1e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fc36:	bb a0 86 01 00       	mov    ebx,0x186a0
c001fc3b:	52                   	push   edx
c001fc3c:	52                   	push   edx
c001fc3d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc44:	50                   	push   eax
c001fc45:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc4b:	e8 80 e5 ff ff       	call   c001e1d0 <IDE::prepareInterrupt(unsigned char)>
c001fc50:	83 c4 10             	add    esp,0x10
c001fc53:	50                   	push   eax
c001fc54:	50                   	push   eax
c001fc55:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc5c:	50                   	push   eax
c001fc5d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc63:	e8 7c e5 ff ff       	call   c001e1e4 <IDE::getBase(unsigned char)>
c001fc68:	8d 50 07             	lea    edx,[eax+0x7]
c001fc6b:	ec                   	in     al,dx
c001fc6c:	83 c4 10             	add    esp,0x10
c001fc6f:	a8 88                	test   al,0x88
c001fc71:	74 0a                	je     c001fc7d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001fc73:	4b                   	dec    ebx
c001fc74:	75 dd                	jne    c001fc53 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001fc76:	bb 02 00 00 00       	mov    ebx,0x2
c001fc7b:	eb 02                	jmp    c001fc7f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fc7d:	31 db                	xor    ebx,ebx
c001fc7f:	83 c4 1c             	add    esp,0x1c
c001fc82:	89 d8                	mov    eax,ebx
c001fc84:	5b                   	pop    ebx
c001fc85:	5e                   	pop    esi
c001fc86:	5f                   	pop    edi
c001fc87:	5d                   	pop    ebp
c001fc88:	c3                   	ret    
c001fc89:	90                   	nop

c001fc8a <ATAPI::diskRemoved()>:
c001fc8a:	83 ec 18             	sub    esp,0x18
c001fc8d:	68 69 69 02 c0       	push   0xc0026969
c001fc92:	e8 60 d0 fe ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c001fc97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fc9b:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001fca2:	83 c4 1c             	add    esp,0x1c
c001fca5:	c3                   	ret    

c001fca6 <ATAPI::eject()>:
c001fca6:	57                   	push   edi
c001fca7:	b9 03 00 00 00       	mov    ecx,0x3
c001fcac:	53                   	push   ebx
c001fcad:	83 ec 14             	sub    esp,0x14
c001fcb0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001fcb4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fcb8:	fc                   	cld    
c001fcb9:	31 c0                	xor    eax,eax
c001fcbb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fcbd:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001fcc2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001fcc7:	50                   	push   eax
c001fcc8:	50                   	push   eax
c001fcc9:	6a 00                	push   0x0
c001fccb:	6a 00                	push   0x0
c001fccd:	6a 00                	push   0x0
c001fccf:	6a 02                	push   0x2
c001fcd1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fcd5:	50                   	push   eax
c001fcd6:	53                   	push   ebx
c001fcd7:	e8 ee fc ff ff       	call   c001f9ca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fcdc:	83 c4 14             	add    esp,0x14
c001fcdf:	53                   	push   ebx
c001fce0:	e8 a5 ff ff ff       	call   c001fc8a <ATAPI::diskRemoved()>
c001fce5:	83 c4 24             	add    esp,0x24
c001fce8:	31 c0                	xor    eax,eax
c001fcea:	5b                   	pop    ebx
c001fceb:	5f                   	pop    edi
c001fcec:	c3                   	ret    
c001fced:	90                   	nop

c001fcee <ATAPI::diskInserted()>:
c001fcee:	53                   	push   ebx
c001fcef:	83 ec 14             	sub    esp,0x14
c001fcf2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001fcf6:	68 80 69 02 c0       	push   0xc0026980
c001fcfb:	e8 f7 cf fe ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c001fd00:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001fd07:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fd0a:	e8 0f e9 fe ff       	call   c000e61e <PhysicalDisk::startCache()>
c001fd0f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001fd13:	83 c4 18             	add    esp,0x18
c001fd16:	5b                   	pop    ebx
c001fd17:	e9 3e 09 ff ff       	jmp    c001065a <createPartitionsForDisk(PhysicalDisk*)>

c001fd1c <ATAPI::detectMedia()>:
c001fd1c:	56                   	push   esi
c001fd1d:	53                   	push   ebx
c001fd1e:	83 ec 28             	sub    esp,0x28
c001fd21:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fd25:	6a 0c                	push   0xc
c001fd27:	6a 00                	push   0x0
c001fd29:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001fd2d:	56                   	push   esi
c001fd2e:	e8 51 09 fe ff       	call   c0000684 <memset>
c001fd33:	58                   	pop    eax
c001fd34:	5a                   	pop    edx
c001fd35:	6a 00                	push   0x0
c001fd37:	6a 00                	push   0x0
c001fd39:	6a 00                	push   0x0
c001fd3b:	6a 00                	push   0x0
c001fd3d:	56                   	push   esi
c001fd3e:	53                   	push   ebx
c001fd3f:	e8 86 fc ff ff       	call   c001f9ca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fd44:	83 c4 1c             	add    esp,0x1c
c001fd47:	6a 0c                	push   0xc
c001fd49:	6a 00                	push   0x0
c001fd4b:	56                   	push   esi
c001fd4c:	e8 33 09 fe ff       	call   c0000684 <memset>
c001fd51:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001fd56:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001fd5b:	59                   	pop    ecx
c001fd5c:	58                   	pop    eax
c001fd5d:	6a 01                	push   0x1
c001fd5f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001fd63:	50                   	push   eax
c001fd64:	6a 00                	push   0x0
c001fd66:	6a 12                	push   0x12
c001fd68:	56                   	push   esi
c001fd69:	53                   	push   ebx
c001fd6a:	e8 5b fc ff ff       	call   c001f9ca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fd6f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001fd73:	83 c4 20             	add    esp,0x20
c001fd76:	83 e0 7f             	and    eax,0x7f
c001fd79:	3c 70                	cmp    al,0x70
c001fd7b:	74 15                	je     c001fd92 <ATAPI::detectMedia()+0x76>
c001fd7d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001fd84:	75 0c                	jne    c001fd92 <ATAPI::detectMedia()+0x76>
c001fd86:	83 ec 0c             	sub    esp,0xc
c001fd89:	53                   	push   ebx
c001fd8a:	e8 5f ff ff ff       	call   c001fcee <ATAPI::diskInserted()>
c001fd8f:	83 c4 10             	add    esp,0x10
c001fd92:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001fd96:	83 e0 0f             	and    eax,0xf
c001fd99:	3c 02                	cmp    al,0x2
c001fd9b:	75 1b                	jne    c001fdb8 <ATAPI::detectMedia()+0x9c>
c001fd9d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001fda2:	75 2d                	jne    c001fdd1 <ATAPI::detectMedia()+0xb5>
c001fda4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001fdab:	74 24                	je     c001fdd1 <ATAPI::detectMedia()+0xb5>
c001fdad:	83 ec 0c             	sub    esp,0xc
c001fdb0:	53                   	push   ebx
c001fdb1:	e8 d4 fe ff ff       	call   c001fc8a <ATAPI::diskRemoved()>
c001fdb6:	eb 16                	jmp    c001fdce <ATAPI::detectMedia()+0xb2>
c001fdb8:	84 c0                	test   al,al
c001fdba:	75 15                	jne    c001fdd1 <ATAPI::detectMedia()+0xb5>
c001fdbc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001fdc3:	75 0c                	jne    c001fdd1 <ATAPI::detectMedia()+0xb5>
c001fdc5:	83 ec 0c             	sub    esp,0xc
c001fdc8:	53                   	push   ebx
c001fdc9:	e8 20 ff ff ff       	call   c001fcee <ATAPI::diskInserted()>
c001fdce:	83 c4 10             	add    esp,0x10
c001fdd1:	83 c4 24             	add    esp,0x24
c001fdd4:	5b                   	pop    ebx
c001fdd5:	5e                   	pop    esi
c001fdd6:	c3                   	ret    
c001fdd7:	90                   	nop

c001fdd8 <ATAPI::open(int, int, void*)>:
c001fdd8:	53                   	push   ebx
c001fdd9:	83 ec 08             	sub    esp,0x8
c001fddc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fde0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fde4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fde8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001fdee:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001fdf4:	c1 e0 06             	shl    eax,0x6
c001fdf7:	01 d0                	add    eax,edx
c001fdf9:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001fe00:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001fe06:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001fe0d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001fe17:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001fe1d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001fe24:	6a 04                	push   0x4
c001fe26:	6a 0c                	push   0xc
c001fe28:	51                   	push   ecx
c001fe29:	52                   	push   edx
c001fe2a:	e8 c7 e3 ff ff       	call   c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe2f:	90                   	nop
c001fe30:	90                   	nop
c001fe31:	6a 00                	push   0x0
c001fe33:	6a 0c                	push   0xc
c001fe35:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe3c:	50                   	push   eax
c001fe3d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe43:	e8 ae e3 ff ff       	call   c001e1f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe48:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001fe4f:	83 c4 14             	add    esp,0x14
c001fe52:	53                   	push   ebx
c001fe53:	e8 c4 fe ff ff       	call   c001fd1c <ATAPI::detectMedia()>
c001fe58:	31 c0                	xor    eax,eax
c001fe5a:	83 c4 18             	add    esp,0x18
c001fe5d:	5b                   	pop    ebx
c001fe5e:	c3                   	ret    
c001fe5f:	90                   	nop

c001fe60 <ATAPI::read(unsigned long long, int, void*)>:
c001fe60:	55                   	push   ebp
c001fe61:	57                   	push   edi
c001fe62:	56                   	push   esi
c001fe63:	53                   	push   ebx
c001fe64:	83 ec 1c             	sub    esp,0x1c
c001fe67:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001fe6b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fe6f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001fe73:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001fe7a:	74 41                	je     c001febd <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001fe7c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fe80:	b9 03 00 00 00       	mov    ecx,0x3
c001fe85:	fc                   	cld    
c001fe86:	31 c0                	xor    eax,eax
c001fe88:	86 fb                	xchg   bl,bh
c001fe8a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fe8c:	c1 c3 10             	rol    ebx,0x10
c001fe8f:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001fe94:	89 e8                	mov    eax,ebp
c001fe96:	86 fb                	xchg   bl,bh
c001fe98:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001fe9c:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001fea0:	50                   	push   eax
c001fea1:	50                   	push   eax
c001fea2:	55                   	push   ebp
c001fea3:	c1 e5 0b             	shl    ebp,0xb
c001fea6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001feaa:	6a 00                	push   0x0
c001feac:	55                   	push   ebp
c001fead:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001feb1:	50                   	push   eax
c001feb2:	56                   	push   esi
c001feb3:	e8 12 fb ff ff       	call   c001f9ca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001feb8:	83 c4 20             	add    esp,0x20
c001febb:	eb 1a                	jmp    c001fed7 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001febd:	83 ec 0c             	sub    esp,0xc
c001fec0:	56                   	push   esi
c001fec1:	e8 56 fe ff ff       	call   c001fd1c <ATAPI::detectMedia()>
c001fec6:	83 c4 10             	add    esp,0x10
c001fec9:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001fed0:	75 aa                	jne    c001fe7c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001fed2:	b8 02 00 00 00       	mov    eax,0x2
c001fed7:	83 c4 1c             	add    esp,0x1c
c001feda:	5b                   	pop    ebx
c001fedb:	5e                   	pop    esi
c001fedc:	5f                   	pop    edi
c001fedd:	5d                   	pop    ebp
c001fede:	c3                   	ret    
c001fedf:	90                   	nop

c001fee0 <SATA::close(int, int, void*)>:
c001fee0:	83 ec 0c             	sub    esp,0xc
c001fee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fee7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001feed:	85 c0                	test   eax,eax
c001feef:	74 0c                	je     c001fefd <SATA::close(int, int, void*)+0x1d>
c001fef1:	83 ec 0c             	sub    esp,0xc
c001fef4:	8b 10                	mov    edx,DWORD PTR [eax]
c001fef6:	50                   	push   eax
c001fef7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fefa:	83 c4 10             	add    esp,0x10
c001fefd:	31 c0                	xor    eax,eax
c001feff:	83 c4 0c             	add    esp,0xc
c001ff02:	c3                   	ret    
c001ff03:	90                   	nop

c001ff04 <SATA::powerSaving(PowerSavingLevel)>:
c001ff04:	c3                   	ret    
c001ff05:	90                   	nop

c001ff06 <SATA::open(int, int, void*)>:
c001ff06:	56                   	push   esi
c001ff07:	53                   	push   ebx
c001ff08:	51                   	push   ecx
c001ff09:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ff0d:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001ff14:	74 2d                	je     c001ff43 <SATA::open(int, int, void*)+0x3d>
c001ff16:	83 ec 0c             	sub    esp,0xc
c001ff19:	68 20 67 02 c0       	push   0xc0026720
c001ff1e:	e8 3e 9b fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001ff23:	83 c4 10             	add    esp,0x10
c001ff26:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001ff2d:	75 14                	jne    c001ff43 <SATA::open(int, int, void*)+0x3d>
c001ff2f:	e4 60                	in     al,0x60
c001ff31:	3c 5a                	cmp    al,0x5a
c001ff33:	74 04                	je     c001ff39 <SATA::open(int, int, void*)+0x33>
c001ff35:	3c 1c                	cmp    al,0x1c
c001ff37:	75 f6                	jne    c001ff2f <SATA::open(int, int, void*)+0x29>
c001ff39:	e4 60                	in     al,0x60
c001ff3b:	3c 5a                	cmp    al,0x5a
c001ff3d:	74 fa                	je     c001ff39 <SATA::open(int, int, void*)+0x33>
c001ff3f:	3c 1c                	cmp    al,0x1c
c001ff41:	74 f6                	je     c001ff39 <SATA::open(int, int, void*)+0x33>
c001ff43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ff47:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ff51:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ff57:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ff61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ff65:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ff6f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ff75:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ff7c:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001ff83:	74 2d                	je     c001ffb2 <SATA::open(int, int, void*)+0xac>
c001ff85:	83 ec 0c             	sub    esp,0xc
c001ff88:	68 2d 67 02 c0       	push   0xc002672d
c001ff8d:	e8 cf 9a fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001ff92:	83 c4 10             	add    esp,0x10
c001ff95:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001ff9c:	75 14                	jne    c001ffb2 <SATA::open(int, int, void*)+0xac>
c001ff9e:	e4 60                	in     al,0x60
c001ffa0:	3c 1c                	cmp    al,0x1c
c001ffa2:	74 04                	je     c001ffa8 <SATA::open(int, int, void*)+0xa2>
c001ffa4:	3c 5a                	cmp    al,0x5a
c001ffa6:	75 f6                	jne    c001ff9e <SATA::open(int, int, void*)+0x98>
c001ffa8:	e4 60                	in     al,0x60
c001ffaa:	3c 5a                	cmp    al,0x5a
c001ffac:	74 fa                	je     c001ffa8 <SATA::open(int, int, void*)+0xa2>
c001ffae:	3c 1c                	cmp    al,0x1c
c001ffb0:	74 f6                	je     c001ffa8 <SATA::open(int, int, void*)+0xa2>
c001ffb2:	e8 07 a1 fe ff       	call   c000a0be <Phys::allocatePage()>
c001ffb7:	89 c6                	mov    esi,eax
c001ffb9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ffbf:	81 c6 00 10 00 00    	add    esi,0x1000
c001ffc5:	e8 f4 a0 fe ff       	call   c000a0be <Phys::allocatePage()>
c001ffca:	39 c6                	cmp    esi,eax
c001ffcc:	74 10                	je     c001ffde <SATA::open(int, int, void*)+0xd8>
c001ffce:	83 ec 0c             	sub    esp,0xc
c001ffd1:	68 3a 67 02 c0       	push   0xc002673a
c001ffd6:	e8 c8 48 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c001ffdb:	83 c4 10             	add    esp,0x10
c001ffde:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c001ffe5:	74 2d                	je     c0020014 <SATA::open(int, int, void*)+0x10e>
c001ffe7:	83 ec 0c             	sub    esp,0xc
c001ffea:	68 4e 67 02 c0       	push   0xc002674e
c001ffef:	e8 6d 9a fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c001fff4:	83 c4 10             	add    esp,0x10
c001fff7:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c001fffe:	75 14                	jne    c0020014 <SATA::open(int, int, void*)+0x10e>
c0020000:	e4 60                	in     al,0x60
c0020002:	3c 1c                	cmp    al,0x1c
c0020004:	74 04                	je     c002000a <SATA::open(int, int, void*)+0x104>
c0020006:	3c 5a                	cmp    al,0x5a
c0020008:	75 f6                	jne    c0020000 <SATA::open(int, int, void*)+0xfa>
c002000a:	e4 60                	in     al,0x60
c002000c:	3c 5a                	cmp    al,0x5a
c002000e:	74 fa                	je     c002000a <SATA::open(int, int, void*)+0x104>
c0020010:	3c 1c                	cmp    al,0x1c
c0020012:	74 f6                	je     c002000a <SATA::open(int, int, void*)+0x104>
c0020014:	83 ec 0c             	sub    esp,0xc
c0020017:	6a 02                	push   0x2
c0020019:	e8 b3 b9 fe ff       	call   c000b9d1 <Virt::allocateKernelVirtualPages(int)>
c002001e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020024:	6a 03                	push   0x3
c0020026:	50                   	push   eax
c0020027:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002002d:	ff 35 70 7c 02 c0    	push   DWORD PTR ds:0xc0027c70
c0020033:	e8 40 c0 fe ff       	call   c000c078 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020038:	83 c4 20             	add    esp,0x20
c002003b:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c0020042:	74 2d                	je     c0020071 <SATA::open(int, int, void*)+0x16b>
c0020044:	83 ec 0c             	sub    esp,0xc
c0020047:	68 5b 67 02 c0       	push   0xc002675b
c002004c:	e8 10 9a fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0020051:	83 c4 10             	add    esp,0x10
c0020054:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c002005b:	75 14                	jne    c0020071 <SATA::open(int, int, void*)+0x16b>
c002005d:	e4 60                	in     al,0x60
c002005f:	3c 1c                	cmp    al,0x1c
c0020061:	74 04                	je     c0020067 <SATA::open(int, int, void*)+0x161>
c0020063:	3c 5a                	cmp    al,0x5a
c0020065:	75 f6                	jne    c002005d <SATA::open(int, int, void*)+0x157>
c0020067:	e4 60                	in     al,0x60
c0020069:	3c 5a                	cmp    al,0x5a
c002006b:	74 fa                	je     c0020067 <SATA::open(int, int, void*)+0x161>
c002006d:	3c 1c                	cmp    al,0x1c
c002006f:	74 f6                	je     c0020067 <SATA::open(int, int, void*)+0x161>
c0020071:	83 ec 0c             	sub    esp,0xc
c0020074:	53                   	push   ebx
c0020075:	e8 a4 e5 fe ff       	call   c000e61e <PhysicalDisk::startCache()>
c002007a:	83 c4 10             	add    esp,0x10
c002007d:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c0020084:	74 2d                	je     c00200b3 <SATA::open(int, int, void*)+0x1ad>
c0020086:	83 ec 0c             	sub    esp,0xc
c0020089:	68 68 67 02 c0       	push   0xc0026768
c002008e:	e8 ce 99 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0020093:	83 c4 10             	add    esp,0x10
c0020096:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c002009d:	75 14                	jne    c00200b3 <SATA::open(int, int, void*)+0x1ad>
c002009f:	e4 60                	in     al,0x60
c00200a1:	3c 1c                	cmp    al,0x1c
c00200a3:	74 04                	je     c00200a9 <SATA::open(int, int, void*)+0x1a3>
c00200a5:	3c 5a                	cmp    al,0x5a
c00200a7:	75 f6                	jne    c002009f <SATA::open(int, int, void*)+0x199>
c00200a9:	e4 60                	in     al,0x60
c00200ab:	3c 5a                	cmp    al,0x5a
c00200ad:	74 fa                	je     c00200a9 <SATA::open(int, int, void*)+0x1a3>
c00200af:	3c 1c                	cmp    al,0x1c
c00200b1:	74 f6                	je     c00200a9 <SATA::open(int, int, void*)+0x1a3>
c00200b3:	83 ec 0c             	sub    esp,0xc
c00200b6:	53                   	push   ebx
c00200b7:	e8 9e 05 ff ff       	call   c001065a <createPartitionsForDisk(PhysicalDisk*)>
c00200bc:	83 c4 10             	add    esp,0x10
c00200bf:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c00200c6:	74 2d                	je     c00200f5 <SATA::open(int, int, void*)+0x1ef>
c00200c8:	83 ec 0c             	sub    esp,0xc
c00200cb:	68 75 67 02 c0       	push   0xc0026775
c00200d0:	e8 8c 99 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c00200d5:	83 c4 10             	add    esp,0x10
c00200d8:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c00200df:	75 14                	jne    c00200f5 <SATA::open(int, int, void*)+0x1ef>
c00200e1:	e4 60                	in     al,0x60
c00200e3:	3c 1c                	cmp    al,0x1c
c00200e5:	74 04                	je     c00200eb <SATA::open(int, int, void*)+0x1e5>
c00200e7:	3c 5a                	cmp    al,0x5a
c00200e9:	75 f6                	jne    c00200e1 <SATA::open(int, int, void*)+0x1db>
c00200eb:	e4 60                	in     al,0x60
c00200ed:	3c 5a                	cmp    al,0x5a
c00200ef:	74 fa                	je     c00200eb <SATA::open(int, int, void*)+0x1e5>
c00200f1:	3c 1c                	cmp    al,0x1c
c00200f3:	74 f6                	je     c00200eb <SATA::open(int, int, void*)+0x1e5>
c00200f5:	5a                   	pop    edx
c00200f6:	31 c0                	xor    eax,eax
c00200f8:	5b                   	pop    ebx
c00200f9:	5e                   	pop    esi
c00200fa:	c3                   	ret    
c00200fb:	90                   	nop

c00200fc <SATA::SATA()>:
c00200fc:	83 ec 0c             	sub    esp,0xc
c00200ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020103:	83 ec 04             	sub    esp,0x4
c0020106:	68 00 02 00 00       	push   0x200
c002010b:	68 82 67 02 c0       	push   0xc0026782
c0020110:	50                   	push   eax
c0020111:	e8 a0 e4 fe ff       	call   c000e5b6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020116:	83 c4 10             	add    esp,0x10
c0020119:	ba 2c 69 02 c0       	mov    edx,0xc002692c
c002011e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020122:	89 10                	mov    DWORD PTR [eax],edx
c0020124:	90                   	nop
c0020125:	83 c4 0c             	add    esp,0xc
c0020128:	c3                   	ret    
c0020129:	90                   	nop

c002012a <SATA::access(unsigned long long, int, void*, bool)>:
c002012a:	55                   	push   ebp
c002012b:	57                   	push   edi
c002012c:	56                   	push   esi
c002012d:	53                   	push   ebx
c002012e:	83 ec 2c             	sub    esp,0x2c
c0020131:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020135:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020139:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002013d:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c0020144:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020148:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002014c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020150:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020154:	75 19                	jne    c002016f <SATA::access(unsigned long long, int, void*, bool)+0x45>
c0020156:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002015b:	7e 41                	jle    c002019e <SATA::access(unsigned long long, int, void*, bool)+0x74>
c002015d:	83 ec 0c             	sub    esp,0xc
c0020160:	68 a1 67 02 c0       	push   0xc00267a1
c0020165:	e8 39 47 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c002016a:	83 c4 10             	add    esp,0x10
c002016d:	eb 2f                	jmp    c002019e <SATA::access(unsigned long long, int, void*, bool)+0x74>
c002016f:	83 ec 0c             	sub    esp,0xc
c0020172:	68 92 67 02 c0       	push   0xc0026792
c0020177:	e8 e5 98 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c002017c:	83 c4 10             	add    esp,0x10
c002017f:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c0020186:	75 ce                	jne    c0020156 <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c0020188:	e4 60                	in     al,0x60
c002018a:	3c 1c                	cmp    al,0x1c
c002018c:	74 04                	je     c0020192 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c002018e:	3c 5a                	cmp    al,0x5a
c0020190:	75 f6                	jne    c0020188 <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c0020192:	e4 60                	in     al,0x60
c0020194:	3c 5a                	cmp    al,0x5a
c0020196:	74 fa                	je     c0020192 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020198:	3c 1c                	cmp    al,0x1c
c002019a:	74 f6                	je     c0020192 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c002019c:	eb b8                	jmp    c0020156 <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c002019e:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c00201a5:	75 29                	jne    c00201d0 <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c00201a7:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00201ad:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c00201b3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00201b9:	8d 75 02             	lea    esi,[ebp+0x2]
c00201bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00201c0:	c1 e6 07             	shl    esi,0x7
c00201c3:	01 c6                	add    esi,eax
c00201c5:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c00201cc:	74 4a                	je     c0020218 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c00201ce:	eb 2f                	jmp    c00201ff <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c00201d0:	83 ec 0c             	sub    esp,0xc
c00201d3:	68 da 67 02 c0       	push   0xc00267da
c00201d8:	e8 84 98 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c00201dd:	83 c4 10             	add    esp,0x10
c00201e0:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c00201e7:	75 be                	jne    c00201a7 <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c00201e9:	e4 60                	in     al,0x60
c00201eb:	3c 1c                	cmp    al,0x1c
c00201ed:	74 04                	je     c00201f3 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c00201ef:	3c 5a                	cmp    al,0x5a
c00201f1:	75 f6                	jne    c00201e9 <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c00201f3:	e4 60                	in     al,0x60
c00201f5:	3c 5a                	cmp    al,0x5a
c00201f7:	74 fa                	je     c00201f3 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c00201f9:	3c 1c                	cmp    al,0x1c
c00201fb:	74 f6                	je     c00201f3 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c00201fd:	eb a8                	jmp    c00201a7 <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c00201ff:	83 ec 0c             	sub    esp,0xc
c0020202:	68 e9 67 02 c0       	push   0xc00267e9
c0020207:	e8 55 98 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c002020c:	83 c4 10             	add    esp,0x10
c002020f:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c0020216:	74 3d                	je     c0020255 <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c0020218:	89 e8                	mov    eax,ebp
c002021a:	c1 e0 07             	shl    eax,0x7
c002021d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020221:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002022b:	52                   	push   edx
c002022c:	52                   	push   edx
c002022d:	56                   	push   esi
c002022e:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020234:	e8 35 eb ff ff       	call   c001ed6e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020239:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002023d:	83 c4 10             	add    esp,0x10
c0020240:	b8 01 00 00 00       	mov    eax,0x1
c0020245:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002024a:	75 1d                	jne    c0020269 <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c002024c:	e9 c8 04 00 00       	jmp    c0020719 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020251:	3c 5a                	cmp    al,0x5a
c0020253:	74 0c                	je     c0020261 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020255:	e4 60                	in     al,0x60
c0020257:	3c 1c                	cmp    al,0x1c
c0020259:	75 f6                	jne    c0020251 <SATA::access(unsigned long long, int, void*, bool)+0x127>
c002025b:	eb 04                	jmp    c0020261 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c002025d:	3c 1c                	cmp    al,0x1c
c002025f:	75 b7                	jne    c0020218 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020261:	e4 60                	in     al,0x60
c0020263:	3c 5a                	cmp    al,0x5a
c0020265:	74 fa                	je     c0020261 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020267:	eb f4                	jmp    c002025d <SATA::access(unsigned long long, int, void*, bool)+0x133>
c0020269:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c0020270:	74 3a                	je     c00202ac <SATA::access(unsigned long long, int, void*, bool)+0x182>
c0020272:	83 ec 0c             	sub    esp,0xc
c0020275:	68 f8 67 02 c0       	push   0xc00267f8
c002027a:	e8 e2 97 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c002027f:	83 c4 10             	add    esp,0x10
c0020282:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c0020289:	74 0d                	je     c0020298 <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c002028b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020290:	74 34                	je     c00202c6 <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c0020292:	eb 1f                	jmp    c00202b3 <SATA::access(unsigned long long, int, void*, bool)+0x189>
c0020294:	3c 1c                	cmp    al,0x1c
c0020296:	74 0c                	je     c00202a4 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020298:	e4 60                	in     al,0x60
c002029a:	3c 5a                	cmp    al,0x5a
c002029c:	75 f6                	jne    c0020294 <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c002029e:	eb 04                	jmp    c00202a4 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c00202a0:	3c 1c                	cmp    al,0x1c
c00202a2:	75 e7                	jne    c002028b <SATA::access(unsigned long long, int, void*, bool)+0x161>
c00202a4:	e4 60                	in     al,0x60
c00202a6:	3c 5a                	cmp    al,0x5a
c00202a8:	74 fa                	je     c00202a4 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c00202aa:	eb f4                	jmp    c00202a0 <SATA::access(unsigned long long, int, void*, bool)+0x176>
c00202ac:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00202b1:	74 1c                	je     c00202cf <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c00202b3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00202b7:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00202bd:	c1 e1 09             	shl    ecx,0x9
c00202c0:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00202c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00202c6:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c00202cd:	75 55                	jne    c0020324 <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c00202cf:	8d 45 02             	lea    eax,[ebp+0x2]
c00202d2:	c1 e0 07             	shl    eax,0x7
c00202d5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00202d9:	8b 38                	mov    edi,DWORD PTR [eax]
c00202db:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00202e1:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c00202e7:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c00202ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202f1:	c1 e0 05             	shl    eax,0x5
c00202f4:	01 c7                	add    edi,eax
c00202f6:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00202fa:	83 e0 01             	and    eax,0x1
c00202fd:	c1 e0 06             	shl    eax,0x6
c0020300:	88 c2                	mov    dl,al
c0020302:	8a 07                	mov    al,BYTE PTR [edi]
c0020304:	83 e0 bf             	and    eax,0xffffffbf
c0020307:	09 d0                	or     eax,edx
c0020309:	88 07                	mov    BYTE PTR [edi],al
c002030b:	8b 07                	mov    eax,DWORD PTR [edi]
c002030d:	25 e0 ff 00 00       	and    eax,0xffe0
c0020312:	0d 05 00 01 00       	or     eax,0x10005
c0020317:	89 07                	mov    DWORD PTR [edi],eax
c0020319:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c0020320:	74 4d                	je     c002036f <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020322:	eb 32                	jmp    c0020356 <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c0020324:	83 ec 0c             	sub    esp,0xc
c0020327:	68 07 68 02 c0       	push   0xc0026807
c002032c:	e8 30 97 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0020331:	83 c4 10             	add    esp,0x10
c0020334:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c002033b:	75 92                	jne    c00202cf <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c002033d:	e4 60                	in     al,0x60
c002033f:	3c 1c                	cmp    al,0x1c
c0020341:	74 04                	je     c0020347 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020343:	3c 5a                	cmp    al,0x5a
c0020345:	75 f6                	jne    c002033d <SATA::access(unsigned long long, int, void*, bool)+0x213>
c0020347:	e4 60                	in     al,0x60
c0020349:	3c 5a                	cmp    al,0x5a
c002034b:	74 fa                	je     c0020347 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c002034d:	3c 1c                	cmp    al,0x1c
c002034f:	74 f6                	je     c0020347 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020351:	e9 79 ff ff ff       	jmp    c00202cf <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020356:	83 ec 0c             	sub    esp,0xc
c0020359:	68 16 68 02 c0       	push   0xc0026816
c002035e:	e8 fe 96 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0020363:	83 c4 10             	add    esp,0x10
c0020366:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c002036d:	74 3b                	je     c00203aa <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002036f:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020375:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c002037b:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c0020381:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c0020384:	50                   	push   eax
c0020385:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c0020389:	83 c0 08             	add    eax,0x8
c002038c:	c1 e0 04             	shl    eax,0x4
c002038f:	50                   	push   eax
c0020390:	6a 00                	push   0x0
c0020392:	56                   	push   esi
c0020393:	e8 ec 02 fe ff       	call   c0000684 <memset>
c0020398:	83 c4 10             	add    esp,0x10
c002039b:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c00203a2:	74 33                	je     c00203d7 <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c00203a4:	eb 18                	jmp    c00203be <SATA::access(unsigned long long, int, void*, bool)+0x294>
c00203a6:	3c 1c                	cmp    al,0x1c
c00203a8:	74 0c                	je     c00203b6 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c00203aa:	e4 60                	in     al,0x60
c00203ac:	3c 5a                	cmp    al,0x5a
c00203ae:	75 f6                	jne    c00203a6 <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c00203b0:	eb 04                	jmp    c00203b6 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c00203b2:	3c 1c                	cmp    al,0x1c
c00203b4:	75 b9                	jne    c002036f <SATA::access(unsigned long long, int, void*, bool)+0x245>
c00203b6:	e4 60                	in     al,0x60
c00203b8:	3c 5a                	cmp    al,0x5a
c00203ba:	74 fa                	je     c00203b6 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c00203bc:	eb f4                	jmp    c00203b2 <SATA::access(unsigned long long, int, void*, bool)+0x288>
c00203be:	83 ec 0c             	sub    esp,0xc
c00203c1:	68 25 68 02 c0       	push   0xc0026825
c00203c6:	e8 96 96 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c00203cb:	83 c4 10             	add    esp,0x10
c00203ce:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c00203d5:	74 48                	je     c002041f <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c00203d7:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00203dd:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c00203e3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00203e7:	c1 e0 09             	shl    eax,0x9
c00203ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00203ee:	48                   	dec    eax
c00203ef:	25 ff ff 3f 00       	and    eax,0x3fffff
c00203f4:	89 c2                	mov    edx,eax
c00203f6:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c00203fc:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020401:	09 d0                	or     eax,edx
c0020403:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020409:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0020410:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c0020417:	74 33                	je     c002044c <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020419:	eb 18                	jmp    c0020433 <SATA::access(unsigned long long, int, void*, bool)+0x309>
c002041b:	3c 1c                	cmp    al,0x1c
c002041d:	74 0c                	je     c002042b <SATA::access(unsigned long long, int, void*, bool)+0x301>
c002041f:	e4 60                	in     al,0x60
c0020421:	3c 5a                	cmp    al,0x5a
c0020423:	75 f6                	jne    c002041b <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c0020425:	eb 04                	jmp    c002042b <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020427:	3c 1c                	cmp    al,0x1c
c0020429:	75 ac                	jne    c00203d7 <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c002042b:	e4 60                	in     al,0x60
c002042d:	3c 5a                	cmp    al,0x5a
c002042f:	74 fa                	je     c002042b <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020431:	eb f4                	jmp    c0020427 <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c0020433:	83 ec 0c             	sub    esp,0xc
c0020436:	68 34 68 02 c0       	push   0xc0026834
c002043b:	e8 21 96 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0020440:	83 c4 10             	add    esp,0x10
c0020443:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c002044a:	74 63                	je     c00204af <SATA::access(unsigned long long, int, void*, bool)+0x385>
c002044c:	66 8b 06             	mov    ax,WORD PTR [esi]
c002044f:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0020453:	66 25 00 7f          	and    ax,0x7f00
c0020457:	66 0d 27 80          	or     ax,0x8027
c002045b:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0020460:	66 89 06             	mov    WORD PTR [esi],ax
c0020463:	19 c0                	sbb    eax,eax
c0020465:	83 e0 f0             	and    eax,0xfffffff0
c0020468:	83 c0 35             	add    eax,0x35
c002046b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002046e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020472:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c0020476:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002047a:	c1 e8 10             	shr    eax,0x10
c002047d:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020480:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020484:	c1 e8 18             	shr    eax,0x18
c0020487:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c002048e:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020491:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0020495:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0020498:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002049c:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002049f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00204a3:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00204a7:	74 33                	je     c00204dc <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c00204a9:	eb 18                	jmp    c00204c3 <SATA::access(unsigned long long, int, void*, bool)+0x399>
c00204ab:	3c 1c                	cmp    al,0x1c
c00204ad:	74 0c                	je     c00204bb <SATA::access(unsigned long long, int, void*, bool)+0x391>
c00204af:	e4 60                	in     al,0x60
c00204b1:	3c 5a                	cmp    al,0x5a
c00204b3:	75 f6                	jne    c00204ab <SATA::access(unsigned long long, int, void*, bool)+0x381>
c00204b5:	eb 04                	jmp    c00204bb <SATA::access(unsigned long long, int, void*, bool)+0x391>
c00204b7:	3c 1c                	cmp    al,0x1c
c00204b9:	75 91                	jne    c002044c <SATA::access(unsigned long long, int, void*, bool)+0x322>
c00204bb:	e4 60                	in     al,0x60
c00204bd:	3c 5a                	cmp    al,0x5a
c00204bf:	74 fa                	je     c00204bb <SATA::access(unsigned long long, int, void*, bool)+0x391>
c00204c1:	eb f4                	jmp    c00204b7 <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c00204c3:	83 ec 0c             	sub    esp,0xc
c00204c6:	68 43 68 02 c0       	push   0xc0026843
c00204cb:	e8 91 95 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c00204d0:	83 c4 10             	add    esp,0x10
c00204d3:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c00204da:	74 11                	je     c00204ed <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c00204dc:	89 e8                	mov    eax,ebp
c00204de:	31 f6                	xor    esi,esi
c00204e0:	c1 e0 07             	shl    eax,0x7
c00204e3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00204e7:	eb 21                	jmp    c002050a <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c00204e9:	3c 1c                	cmp    al,0x1c
c00204eb:	74 0c                	je     c00204f9 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c00204ed:	e4 60                	in     al,0x60
c00204ef:	3c 5a                	cmp    al,0x5a
c00204f1:	75 f6                	jne    c00204e9 <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c00204f3:	eb 04                	jmp    c00204f9 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c00204f5:	3c 1c                	cmp    al,0x1c
c00204f7:	75 e3                	jne    c00204dc <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c00204f9:	e4 60                	in     al,0x60
c00204fb:	3c 5a                	cmp    al,0x5a
c00204fd:	74 fa                	je     c00204f9 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c00204ff:	eb f4                	jmp    c00204f5 <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c0020501:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020507:	74 0c                	je     c0020515 <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c0020509:	46                   	inc    esi
c002050a:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c0020510:	80 e2 88             	and    dl,0x88
c0020513:	75 ec                	jne    c0020501 <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c0020515:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c002051c:	74 3d                	je     c002055b <SATA::access(unsigned long long, int, void*, bool)+0x431>
c002051e:	83 ec 0c             	sub    esp,0xc
c0020521:	68 52 68 02 c0       	push   0xc0026852
c0020526:	e8 36 95 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c002052b:	8b 15 60 7b 02 c0    	mov    edx,DWORD PTR ds:0xc0027b60
c0020531:	83 c4 10             	add    esp,0x10
c0020534:	f6 c2 80             	test   dl,0x80
c0020537:	74 0e                	je     c0020547 <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c0020539:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c002053f:	75 2f                	jne    c0020570 <SATA::access(unsigned long long, int, void*, bool)+0x446>
c0020541:	eb 20                	jmp    c0020563 <SATA::access(unsigned long long, int, void*, bool)+0x439>
c0020543:	3c 1c                	cmp    al,0x1c
c0020545:	74 0c                	je     c0020553 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020547:	e4 60                	in     al,0x60
c0020549:	3c 5a                	cmp    al,0x5a
c002054b:	75 f6                	jne    c0020543 <SATA::access(unsigned long long, int, void*, bool)+0x419>
c002054d:	eb 04                	jmp    c0020553 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c002054f:	3c 1c                	cmp    al,0x1c
c0020551:	75 e6                	jne    c0020539 <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c0020553:	e4 60                	in     al,0x60
c0020555:	3c 5a                	cmp    al,0x5a
c0020557:	74 fa                	je     c0020553 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020559:	eb f4                	jmp    c002054f <SATA::access(unsigned long long, int, void*, bool)+0x425>
c002055b:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020561:	75 13                	jne    c0020576 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020563:	83 ec 0c             	sub    esp,0xc
c0020566:	68 62 68 02 c0       	push   0xc0026862
c002056b:	e9 d2 00 00 00       	jmp    c0020642 <SATA::access(unsigned long long, int, void*, bool)+0x518>
c0020570:	0f ba e2 0b          	bt     edx,0xb
c0020574:	72 25                	jb     c002059b <SATA::access(unsigned long long, int, void*, bool)+0x471>
c0020576:	be 01 00 00 00       	mov    esi,0x1
c002057b:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002057f:	89 e8                	mov    eax,ebp
c0020581:	d3 e6                	shl    esi,cl
c0020583:	c1 e0 07             	shl    eax,0x7
c0020586:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002058a:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c0020591:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c0020597:	74 4a                	je     c00205e3 <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020599:	eb 2f                	jmp    c00205ca <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c002059b:	83 ec 0c             	sub    esp,0xc
c002059e:	68 70 68 02 c0       	push   0xc0026870
c00205a3:	e8 b9 94 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c00205a8:	83 c4 10             	add    esp,0x10
c00205ab:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c00205b2:	75 c2                	jne    c0020576 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c00205b4:	e4 60                	in     al,0x60
c00205b6:	3c 5a                	cmp    al,0x5a
c00205b8:	74 04                	je     c00205be <SATA::access(unsigned long long, int, void*, bool)+0x494>
c00205ba:	3c 1c                	cmp    al,0x1c
c00205bc:	75 f6                	jne    c00205b4 <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c00205be:	e4 60                	in     al,0x60
c00205c0:	3c 5a                	cmp    al,0x5a
c00205c2:	74 fa                	je     c00205be <SATA::access(unsigned long long, int, void*, bool)+0x494>
c00205c4:	3c 1c                	cmp    al,0x1c
c00205c6:	74 f6                	je     c00205be <SATA::access(unsigned long long, int, void*, bool)+0x494>
c00205c8:	eb ac                	jmp    c0020576 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c00205ca:	83 ec 0c             	sub    esp,0xc
c00205cd:	68 80 68 02 c0       	push   0xc0026880
c00205d2:	e8 8a 94 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c00205d7:	83 c4 10             	add    esp,0x10
c00205da:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c00205e1:	74 0f                	je     c00205f2 <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c00205e3:	89 e8                	mov    eax,ebp
c00205e5:	c1 e0 07             	shl    eax,0x7
c00205e8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00205ec:	eb 24                	jmp    c0020612 <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c00205ee:	3c 1c                	cmp    al,0x1c
c00205f0:	74 0c                	je     c00205fe <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c00205f2:	e4 60                	in     al,0x60
c00205f4:	3c 5a                	cmp    al,0x5a
c00205f6:	75 f6                	jne    c00205ee <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c00205f8:	eb 04                	jmp    c00205fe <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c00205fa:	3c 1c                	cmp    al,0x1c
c00205fc:	75 e5                	jne    c00205e3 <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c00205fe:	e4 60                	in     al,0x60
c0020600:	3c 5a                	cmp    al,0x5a
c0020602:	74 fa                	je     c00205fe <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020604:	eb f4                	jmp    c00205fa <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c0020606:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c002060c:	0f ba e2 1e          	bt     edx,0x1e
c0020610:	72 28                	jb     c002063a <SATA::access(unsigned long long, int, void*, bool)+0x510>
c0020612:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c0020618:	85 d6                	test   esi,edx
c002061a:	75 ea                	jne    c0020606 <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c002061c:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c0020623:	75 2f                	jne    c0020654 <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c0020625:	89 e8                	mov    eax,ebp
c0020627:	c1 e0 07             	shl    eax,0x7
c002062a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002062e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020634:	0f ba e0 1e          	bt     eax,0x1e
c0020638:	73 49                	jae    c0020683 <SATA::access(unsigned long long, int, void*, bool)+0x559>
c002063a:	83 ec 0c             	sub    esp,0xc
c002063d:	68 90 68 02 c0       	push   0xc0026890
c0020642:	e8 5c 42 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0020647:	83 c4 10             	add    esp,0x10
c002064a:	b8 01 00 00 00       	mov    eax,0x1
c002064f:	e9 c5 00 00 00       	jmp    c0020719 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020654:	83 ec 0c             	sub    esp,0xc
c0020657:	68 a1 68 02 c0       	push   0xc00268a1
c002065c:	e8 00 94 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0020661:	83 c4 10             	add    esp,0x10
c0020664:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c002066b:	75 b8                	jne    c0020625 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c002066d:	e4 60                	in     al,0x60
c002066f:	3c 5a                	cmp    al,0x5a
c0020671:	74 04                	je     c0020677 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020673:	3c 1c                	cmp    al,0x1c
c0020675:	75 f6                	jne    c002066d <SATA::access(unsigned long long, int, void*, bool)+0x543>
c0020677:	e4 60                	in     al,0x60
c0020679:	3c 5a                	cmp    al,0x5a
c002067b:	74 fa                	je     c0020677 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c002067d:	3c 1c                	cmp    al,0x1c
c002067f:	74 f6                	je     c0020677 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020681:	eb a2                	jmp    c0020625 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0020683:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c002068a:	74 3a                	je     c00206c6 <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c002068c:	83 ec 0c             	sub    esp,0xc
c002068f:	68 b1 68 02 c0       	push   0xc00268b1
c0020694:	e8 c8 93 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c0020699:	83 c4 10             	add    esp,0x10
c002069c:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c00206a3:	74 0d                	je     c00206b2 <SATA::access(unsigned long long, int, void*, bool)+0x588>
c00206a5:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00206aa:	75 31                	jne    c00206dd <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c00206ac:	eb 1f                	jmp    c00206cd <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c00206ae:	3c 1c                	cmp    al,0x1c
c00206b0:	74 0c                	je     c00206be <SATA::access(unsigned long long, int, void*, bool)+0x594>
c00206b2:	e4 60                	in     al,0x60
c00206b4:	3c 5a                	cmp    al,0x5a
c00206b6:	75 f6                	jne    c00206ae <SATA::access(unsigned long long, int, void*, bool)+0x584>
c00206b8:	eb 04                	jmp    c00206be <SATA::access(unsigned long long, int, void*, bool)+0x594>
c00206ba:	3c 1c                	cmp    al,0x1c
c00206bc:	75 e7                	jne    c00206a5 <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c00206be:	e4 60                	in     al,0x60
c00206c0:	3c 5a                	cmp    al,0x5a
c00206c2:	74 fa                	je     c00206be <SATA::access(unsigned long long, int, void*, bool)+0x594>
c00206c4:	eb f4                	jmp    c00206ba <SATA::access(unsigned long long, int, void*, bool)+0x590>
c00206c6:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00206cb:	75 19                	jne    c00206e6 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c00206cd:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c00206d3:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00206d7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00206db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00206dd:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c00206e4:	75 04                	jne    c00206ea <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c00206e6:	31 c0                	xor    eax,eax
c00206e8:	eb 2f                	jmp    c0020719 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c00206ea:	83 ec 0c             	sub    esp,0xc
c00206ed:	68 c1 68 02 c0       	push   0xc00268c1
c00206f2:	e8 6a 93 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c00206f7:	83 c4 10             	add    esp,0x10
c00206fa:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c0020701:	75 e3                	jne    c00206e6 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020703:	e4 60                	in     al,0x60
c0020705:	3c 1c                	cmp    al,0x1c
c0020707:	74 04                	je     c002070d <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020709:	3c 5a                	cmp    al,0x5a
c002070b:	75 f6                	jne    c0020703 <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c002070d:	e4 60                	in     al,0x60
c002070f:	3c 5a                	cmp    al,0x5a
c0020711:	74 fa                	je     c002070d <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020713:	3c 1c                	cmp    al,0x1c
c0020715:	74 f6                	je     c002070d <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020717:	eb cd                	jmp    c00206e6 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020719:	83 c4 2c             	add    esp,0x2c
c002071c:	5b                   	pop    ebx
c002071d:	5e                   	pop    esi
c002071e:	5f                   	pop    edi
c002071f:	5d                   	pop    ebp
c0020720:	c3                   	ret    
c0020721:	90                   	nop

c0020722 <SATA::read(unsigned long long, int, void*)>:
c0020722:	55                   	push   ebp
c0020723:	57                   	push   edi
c0020724:	56                   	push   esi
c0020725:	53                   	push   ebx
c0020726:	83 ec 0c             	sub    esp,0xc
c0020729:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002072d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020731:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020735:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020739:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c0020740:	74 2d                	je     c002076f <SATA::read(unsigned long long, int, void*)+0x4d>
c0020742:	83 ec 0c             	sub    esp,0xc
c0020745:	68 d1 68 02 c0       	push   0xc00268d1
c002074a:	e8 12 93 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c002074f:	83 c4 10             	add    esp,0x10
c0020752:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c0020759:	75 14                	jne    c002076f <SATA::read(unsigned long long, int, void*)+0x4d>
c002075b:	e4 60                	in     al,0x60
c002075d:	3c 1c                	cmp    al,0x1c
c002075f:	74 04                	je     c0020765 <SATA::read(unsigned long long, int, void*)+0x43>
c0020761:	3c 5a                	cmp    al,0x5a
c0020763:	75 f6                	jne    c002075b <SATA::read(unsigned long long, int, void*)+0x39>
c0020765:	e4 60                	in     al,0x60
c0020767:	3c 5a                	cmp    al,0x5a
c0020769:	74 fa                	je     c0020765 <SATA::read(unsigned long long, int, void*)+0x43>
c002076b:	3c 1c                	cmp    al,0x1c
c002076d:	74 f6                	je     c0020765 <SATA::read(unsigned long long, int, void*)+0x43>
c002076f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0020772:	b8 04 00 00 00       	mov    eax,0x4
c0020777:	81 fa fe 00 00 00    	cmp    edx,0xfe
c002077d:	0f 87 96 00 00 00    	ja     c0020819 <SATA::read(unsigned long long, int, void*)+0xf7>
c0020783:	b8 06 00 00 00       	mov    eax,0x6
c0020788:	85 ed                	test   ebp,ebp
c002078a:	0f 84 89 00 00 00    	je     c0020819 <SATA::read(unsigned long long, int, void*)+0xf7>
c0020790:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c0020797:	74 2d                	je     c00207c6 <SATA::read(unsigned long long, int, void*)+0xa4>
c0020799:	83 ec 0c             	sub    esp,0xc
c002079c:	68 de 68 02 c0       	push   0xc00268de
c00207a1:	e8 bb 92 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c00207a6:	83 c4 10             	add    esp,0x10
c00207a9:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c00207b0:	75 14                	jne    c00207c6 <SATA::read(unsigned long long, int, void*)+0xa4>
c00207b2:	e4 60                	in     al,0x60
c00207b4:	3c 5a                	cmp    al,0x5a
c00207b6:	74 04                	je     c00207bc <SATA::read(unsigned long long, int, void*)+0x9a>
c00207b8:	3c 1c                	cmp    al,0x1c
c00207ba:	75 f6                	jne    c00207b2 <SATA::read(unsigned long long, int, void*)+0x90>
c00207bc:	e4 60                	in     al,0x60
c00207be:	3c 5a                	cmp    al,0x5a
c00207c0:	74 fa                	je     c00207bc <SATA::read(unsigned long long, int, void*)+0x9a>
c00207c2:	3c 1c                	cmp    al,0x1c
c00207c4:	74 f6                	je     c00207bc <SATA::read(unsigned long long, int, void*)+0x9a>
c00207c6:	50                   	push   eax
c00207c7:	50                   	push   eax
c00207c8:	6a 00                	push   0x0
c00207ca:	55                   	push   ebp
c00207cb:	53                   	push   ebx
c00207cc:	57                   	push   edi
c00207cd:	56                   	push   esi
c00207ce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00207d2:	e8 53 f9 ff ff       	call   c002012a <SATA::access(unsigned long long, int, void*, bool)>
c00207d7:	83 c4 20             	add    esp,0x20
c00207da:	89 c3                	mov    ebx,eax
c00207dc:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c00207e3:	74 2d                	je     c0020812 <SATA::read(unsigned long long, int, void*)+0xf0>
c00207e5:	83 ec 0c             	sub    esp,0xc
c00207e8:	68 eb 68 02 c0       	push   0xc00268eb
c00207ed:	e8 6f 92 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c00207f2:	83 c4 10             	add    esp,0x10
c00207f5:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c00207fc:	75 14                	jne    c0020812 <SATA::read(unsigned long long, int, void*)+0xf0>
c00207fe:	e4 60                	in     al,0x60
c0020800:	3c 5a                	cmp    al,0x5a
c0020802:	74 04                	je     c0020808 <SATA::read(unsigned long long, int, void*)+0xe6>
c0020804:	3c 1c                	cmp    al,0x1c
c0020806:	75 f6                	jne    c00207fe <SATA::read(unsigned long long, int, void*)+0xdc>
c0020808:	e4 60                	in     al,0x60
c002080a:	3c 5a                	cmp    al,0x5a
c002080c:	74 fa                	je     c0020808 <SATA::read(unsigned long long, int, void*)+0xe6>
c002080e:	3c 1c                	cmp    al,0x1c
c0020810:	74 f6                	je     c0020808 <SATA::read(unsigned long long, int, void*)+0xe6>
c0020812:	31 c0                	xor    eax,eax
c0020814:	85 db                	test   ebx,ebx
c0020816:	0f 95 c0             	setne  al
c0020819:	83 c4 0c             	add    esp,0xc
c002081c:	5b                   	pop    ebx
c002081d:	5e                   	pop    esi
c002081e:	5f                   	pop    edi
c002081f:	5d                   	pop    ebp
c0020820:	c3                   	ret    
c0020821:	90                   	nop

c0020822 <SATA::write(unsigned long long, int, void*)>:
c0020822:	55                   	push   ebp
c0020823:	57                   	push   edi
c0020824:	56                   	push   esi
c0020825:	53                   	push   ebx
c0020826:	83 ec 1c             	sub    esp,0x1c
c0020829:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002082d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020831:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020835:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020839:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c0020840:	74 2d                	je     c002086f <SATA::write(unsigned long long, int, void*)+0x4d>
c0020842:	83 ec 0c             	sub    esp,0xc
c0020845:	68 f8 68 02 c0       	push   0xc00268f8
c002084a:	e8 12 92 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c002084f:	83 c4 10             	add    esp,0x10
c0020852:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c0020859:	75 14                	jne    c002086f <SATA::write(unsigned long long, int, void*)+0x4d>
c002085b:	e4 60                	in     al,0x60
c002085d:	3c 1c                	cmp    al,0x1c
c002085f:	74 04                	je     c0020865 <SATA::write(unsigned long long, int, void*)+0x43>
c0020861:	3c 5a                	cmp    al,0x5a
c0020863:	75 f6                	jne    c002085b <SATA::write(unsigned long long, int, void*)+0x39>
c0020865:	e4 60                	in     al,0x60
c0020867:	3c 5a                	cmp    al,0x5a
c0020869:	74 fa                	je     c0020865 <SATA::write(unsigned long long, int, void*)+0x43>
c002086b:	3c 1c                	cmp    al,0x1c
c002086d:	74 f6                	je     c0020865 <SATA::write(unsigned long long, int, void*)+0x43>
c002086f:	8d 55 ff             	lea    edx,[ebp-0x1]
c0020872:	b8 04 00 00 00       	mov    eax,0x4
c0020877:	81 fa fe 00 00 00    	cmp    edx,0xfe
c002087d:	0f 87 bd 00 00 00    	ja     c0020940 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020883:	b8 06 00 00 00       	mov    eax,0x6
c0020888:	85 db                	test   ebx,ebx
c002088a:	0f 84 b0 00 00 00    	je     c0020940 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020890:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c0020897:	74 2d                	je     c00208c6 <SATA::write(unsigned long long, int, void*)+0xa4>
c0020899:	83 ec 0c             	sub    esp,0xc
c002089c:	68 06 69 02 c0       	push   0xc0026906
c00208a1:	e8 bb 91 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c00208a6:	83 c4 10             	add    esp,0x10
c00208a9:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c00208b0:	75 14                	jne    c00208c6 <SATA::write(unsigned long long, int, void*)+0xa4>
c00208b2:	e4 60                	in     al,0x60
c00208b4:	3c 1c                	cmp    al,0x1c
c00208b6:	74 04                	je     c00208bc <SATA::write(unsigned long long, int, void*)+0x9a>
c00208b8:	3c 5a                	cmp    al,0x5a
c00208ba:	75 f6                	jne    c00208b2 <SATA::write(unsigned long long, int, void*)+0x90>
c00208bc:	e4 60                	in     al,0x60
c00208be:	3c 5a                	cmp    al,0x5a
c00208c0:	74 fa                	je     c00208bc <SATA::write(unsigned long long, int, void*)+0x9a>
c00208c2:	3c 1c                	cmp    al,0x1c
c00208c4:	74 f6                	je     c00208bc <SATA::write(unsigned long long, int, void*)+0x9a>
c00208c6:	c1 e5 09             	shl    ebp,0x9
c00208c9:	01 dd                	add    ebp,ebx
c00208cb:	89 f0                	mov    eax,esi
c00208cd:	89 fa                	mov    edx,edi
c00208cf:	83 c0 01             	add    eax,0x1
c00208d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00208d6:	83 d2 00             	adc    edx,0x0
c00208d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00208dd:	50                   	push   eax
c00208de:	50                   	push   eax
c00208df:	6a 01                	push   0x1
c00208e1:	53                   	push   ebx
c00208e2:	81 c3 00 02 00 00    	add    ebx,0x200
c00208e8:	6a 01                	push   0x1
c00208ea:	57                   	push   edi
c00208eb:	56                   	push   esi
c00208ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00208f0:	e8 35 f8 ff ff       	call   c002012a <SATA::access(unsigned long long, int, void*, bool)>
c00208f5:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00208f9:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00208fd:	83 c4 20             	add    esp,0x20
c0020900:	39 dd                	cmp    ebp,ebx
c0020902:	75 c7                	jne    c00208cb <SATA::write(unsigned long long, int, void*)+0xa9>
c0020904:	f6 05 61 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b61,0x8
c002090b:	75 04                	jne    c0020911 <SATA::write(unsigned long long, int, void*)+0xef>
c002090d:	31 c0                	xor    eax,eax
c002090f:	eb 2f                	jmp    c0020940 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020911:	83 ec 0c             	sub    esp,0xc
c0020914:	68 14 69 02 c0       	push   0xc0026914
c0020919:	e8 43 91 fe ff       	call   c0009a61 <Krnl::setBootMessage(char const*)>
c002091e:	83 c4 10             	add    esp,0x10
c0020921:	f6 05 60 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b60,0x80
c0020928:	75 e3                	jne    c002090d <SATA::write(unsigned long long, int, void*)+0xeb>
c002092a:	e4 60                	in     al,0x60
c002092c:	3c 5a                	cmp    al,0x5a
c002092e:	74 04                	je     c0020934 <SATA::write(unsigned long long, int, void*)+0x112>
c0020930:	3c 1c                	cmp    al,0x1c
c0020932:	75 f6                	jne    c002092a <SATA::write(unsigned long long, int, void*)+0x108>
c0020934:	e4 60                	in     al,0x60
c0020936:	3c 5a                	cmp    al,0x5a
c0020938:	74 fa                	je     c0020934 <SATA::write(unsigned long long, int, void*)+0x112>
c002093a:	3c 1c                	cmp    al,0x1c
c002093c:	74 f6                	je     c0020934 <SATA::write(unsigned long long, int, void*)+0x112>
c002093e:	eb cd                	jmp    c002090d <SATA::write(unsigned long long, int, void*)+0xeb>
c0020940:	83 c4 1c             	add    esp,0x1c
c0020943:	5b                   	pop    ebx
c0020944:	5e                   	pop    esi
c0020945:	5f                   	pop    edi
c0020946:	5d                   	pop    ebp
c0020947:	c3                   	ret    

c0020948 <SATAPI::write(unsigned long long, int, void*)>:
c0020948:	b8 03 00 00 00       	mov    eax,0x3
c002094d:	c3                   	ret    

c002094e <SATAPI::close(int, int, void*)>:
c002094e:	83 ec 0c             	sub    esp,0xc
c0020951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020955:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002095b:	85 c0                	test   eax,eax
c002095d:	74 0c                	je     c002096b <SATAPI::close(int, int, void*)+0x1d>
c002095f:	83 ec 0c             	sub    esp,0xc
c0020962:	8b 10                	mov    edx,DWORD PTR [eax]
c0020964:	50                   	push   eax
c0020965:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020968:	83 c4 10             	add    esp,0x10
c002096b:	31 c0                	xor    eax,eax
c002096d:	83 c4 0c             	add    esp,0xc
c0020970:	c3                   	ret    
c0020971:	90                   	nop

c0020972 <SATAPI::SATAPI()>:
c0020972:	83 ec 0c             	sub    esp,0xc
c0020975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020979:	83 ec 04             	sub    esp,0x4
c002097c:	68 00 08 00 00       	push   0x800
c0020981:	68 5c 69 02 c0       	push   0xc002695c
c0020986:	50                   	push   eax
c0020987:	e8 2a dc fe ff       	call   c000e5b6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002098c:	83 c4 10             	add    esp,0x10
c002098f:	ba 2c 6a 02 c0       	mov    edx,0xc0026a2c
c0020994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020998:	89 10                	mov    DWORD PTR [eax],edx
c002099a:	90                   	nop
c002099b:	83 c4 0c             	add    esp,0xc
c002099e:	c3                   	ret    
c002099f:	90                   	nop

c00209a0 <SATAPI::diskRemoved()>:
c00209a0:	53                   	push   ebx
c00209a1:	83 ec 14             	sub    esp,0x14
c00209a4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00209a8:	68 68 69 02 c0       	push   0xc0026968
c00209ad:	e8 45 c3 fe ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c00209b2:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00209b9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00209bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00209c3:	83 c4 18             	add    esp,0x18
c00209c6:	5b                   	pop    ebx
c00209c7:	e9 0e fa fe ff       	jmp    c00103da <LogicalDisk::unmount()>

c00209cc <SATAPI::diskInserted()>:
c00209cc:	83 ec 18             	sub    esp,0x18
c00209cf:	68 7f 69 02 c0       	push   0xc002697f
c00209d4:	e8 1e c3 fe ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c00209d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00209dd:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c00209e4:	83 c4 1c             	add    esp,0x1c
c00209e7:	c3                   	ret    

c00209e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00209e8:	55                   	push   ebp
c00209e9:	57                   	push   edi
c00209ea:	56                   	push   esi
c00209eb:	53                   	push   ebx
c00209ec:	83 ec 34             	sub    esp,0x34
c00209ef:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00209f3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00209f7:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00209fb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00209ff:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0020a03:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0020a09:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020a0f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020a13:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0020a19:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020a1d:	c1 e0 07             	shl    eax,0x7
c0020a20:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020a24:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020a28:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020a32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020a36:	8d 58 02             	lea    ebx,[eax+0x2]
c0020a39:	c1 e3 07             	shl    ebx,0x7
c0020a3c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0020a40:	53                   	push   ebx
c0020a41:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020a47:	e8 22 e3 ff ff       	call   c001ed6e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020a4c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020a50:	83 c4 10             	add    esp,0x10
c0020a53:	b8 01 00 00 00       	mov    eax,0x1
c0020a58:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020a5d:	0f 84 04 02 00 00    	je     c0020c67 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27f>
c0020a63:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020a69:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020a6b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020a71:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020a77:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020a7b:	c1 e1 05             	shl    ecx,0x5
c0020a7e:	01 c8                	add    eax,ecx
c0020a80:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020a82:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020a88:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020a8e:	89 08                	mov    DWORD PTR [eax],ecx
c0020a90:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020a96:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020a9c:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0020aa2:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020aa5:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020aa8:	50                   	push   eax
c0020aa9:	68 90 00 00 00       	push   0x90
c0020aae:	6a 00                	push   0x0
c0020ab0:	53                   	push   ebx
c0020ab1:	e8 ce fb fd ff       	call   c0000684 <memset>
c0020ab6:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0020aba:	b9 0c 00 00 00       	mov    ecx,0xc
c0020abf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020ac1:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020ac7:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020acb:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0020ad1:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0020ad5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020ad9:	48                   	dec    eax
c0020ada:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020adf:	89 c1                	mov    ecx,eax
c0020ae1:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020ae7:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020aec:	09 c8                	or     eax,ecx
c0020aee:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0020af4:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020af7:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0020afe:	66 25 00 7f          	and    ax,0x7f00
c0020b02:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020b06:	66 0d 27 80          	or     ax,0x8027
c0020b0a:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0020b0e:	66 89 03             	mov    WORD PTR [ebx],ax
c0020b11:	89 d0                	mov    eax,edx
c0020b13:	c1 ea 18             	shr    edx,0x18
c0020b16:	c1 e8 10             	shr    eax,0x10
c0020b19:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0020b1c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020b1f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0020b23:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0020b26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020b2a:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020b2d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020b31:	83 c4 10             	add    esp,0x10
c0020b34:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0020b38:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020b3c:	31 c0                	xor    eax,eax
c0020b3e:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0020b44:	80 e1 88             	and    cl,0x88
c0020b47:	74 0a                	je     c0020b53 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0020b49:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020b4e:	74 0a                	je     c0020b5a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0020b50:	40                   	inc    eax
c0020b51:	eb eb                	jmp    c0020b3e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0020b53:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020b58:	75 0f                	jne    c0020b69 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0020b5a:	83 ec 0c             	sub    esp,0xc
c0020b5d:	68 62 68 02 c0       	push   0xc0026862
c0020b62:	e8 3c 3d ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0020b67:	eb 48                	jmp    c0020bb1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c9>
c0020b69:	be 01 00 00 00       	mov    esi,0x1
c0020b6e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020b72:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020b76:	d3 e6                	shl    esi,cl
c0020b78:	c1 e7 07             	shl    edi,0x7
c0020b7b:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0020b81:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c0020b86:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0020b8a:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0020b90:	85 c6                	test   esi,eax
c0020b92:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0020b98:	0f 84 96 00 00 00    	je     c0020c34 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24c>
c0020b9e:	0f ba e0 1e          	bt     eax,0x1e
c0020ba2:	73 1a                	jae    c0020bbe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d6>
c0020ba4:	83 ec 0c             	sub    esp,0xc
c0020ba7:	68 97 69 02 c0       	push   0xc0026997
c0020bac:	e8 46 c1 fe ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c0020bb1:	83 c4 10             	add    esp,0x10
c0020bb4:	b8 01 00 00 00       	mov    eax,0x1
c0020bb9:	e9 a9 00 00 00       	jmp    c0020c67 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27f>
c0020bbe:	83 fb 0d             	cmp    ebx,0xd
c0020bc1:	77 12                	ja     c0020bd5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ed>
c0020bc3:	83 ec 0c             	sub    esp,0xc
c0020bc6:	68 c8 00 00 00       	push   0xc8
c0020bcb:	e8 9c 7b ff ff       	call   c001876c <milliTenthSleep(unsigned int)>
c0020bd0:	83 c4 10             	add    esp,0x10
c0020bd3:	eb 2a                	jmp    c0020bff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x217>
c0020bd5:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c0020bdb:	83 f8 0d             	cmp    eax,0xd
c0020bde:	77 0a                	ja     c0020bea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x202>
c0020be0:	83 ec 0c             	sub    esp,0xc
c0020be3:	68 58 02 00 00       	push   0x258
c0020be8:	eb 28                	jmp    c0020c12 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x22a>
c0020bea:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c0020bf0:	83 f8 0d             	cmp    eax,0xd
c0020bf3:	77 0a                	ja     c0020bff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x217>
c0020bf5:	83 ec 0c             	sub    esp,0xc
c0020bf8:	68 dc 05 00 00       	push   0x5dc
c0020bfd:	eb 13                	jmp    c0020c12 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x22a>
c0020bff:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c0020c05:	83 f8 0d             	cmp    eax,0xd
c0020c08:	77 10                	ja     c0020c1a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x232>
c0020c0a:	83 ec 0c             	sub    esp,0xc
c0020c0d:	68 c4 09 00 00       	push   0x9c4
c0020c12:	e8 55 7b ff ff       	call   c001876c <milliTenthSleep(unsigned int)>
c0020c17:	83 c4 10             	add    esp,0x10
c0020c1a:	43                   	inc    ebx
c0020c1b:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c0020c21:	0f 85 63 ff ff ff    	jne    c0020b8a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a2>
c0020c27:	83 ec 0c             	sub    esp,0xc
c0020c2a:	68 aa 69 02 c0       	push   0xc00269aa
c0020c2f:	e9 78 ff ff ff       	jmp    c0020bac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c4>
c0020c34:	0f ba e0 1e          	bt     eax,0x1e
c0020c38:	73 0d                	jae    c0020c47 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c0020c3a:	83 ec 0c             	sub    esp,0xc
c0020c3d:	68 be 69 02 c0       	push   0xc00269be
c0020c42:	e9 65 ff ff ff       	jmp    c0020bac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c4>
c0020c47:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0020c4c:	74 17                	je     c0020c65 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27d>
c0020c4e:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0020c53:	74 10                	je     c0020c65 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27d>
c0020c55:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0020c5b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0020c5f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0020c63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020c65:	31 c0                	xor    eax,eax
c0020c67:	83 c4 2c             	add    esp,0x2c
c0020c6a:	5b                   	pop    ebx
c0020c6b:	5e                   	pop    esi
c0020c6c:	5f                   	pop    edi
c0020c6d:	5d                   	pop    ebp
c0020c6e:	c3                   	ret    
c0020c6f:	90                   	nop

c0020c70 <SATAPI::eject()>:
c0020c70:	57                   	push   edi
c0020c71:	b9 03 00 00 00       	mov    ecx,0x3
c0020c76:	53                   	push   ebx
c0020c77:	83 ec 14             	sub    esp,0x14
c0020c7a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020c7e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020c82:	fc                   	cld    
c0020c83:	31 c0                	xor    eax,eax
c0020c85:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020c87:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020c8c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020c91:	50                   	push   eax
c0020c92:	6a 00                	push   0x0
c0020c94:	6a 00                	push   0x0
c0020c96:	6a 00                	push   0x0
c0020c98:	6a 00                	push   0x0
c0020c9a:	6a 02                	push   0x2
c0020c9c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020ca0:	50                   	push   eax
c0020ca1:	53                   	push   ebx
c0020ca2:	e8 41 fd ff ff       	call   c00209e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020ca7:	83 c4 20             	add    esp,0x20
c0020caa:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020cb1:	74 0c                	je     c0020cbf <SATAPI::eject()+0x4f>
c0020cb3:	83 ec 0c             	sub    esp,0xc
c0020cb6:	53                   	push   ebx
c0020cb7:	e8 e4 fc ff ff       	call   c00209a0 <SATAPI::diskRemoved()>
c0020cbc:	83 c4 10             	add    esp,0x10
c0020cbf:	83 c4 14             	add    esp,0x14
c0020cc2:	31 c0                	xor    eax,eax
c0020cc4:	5b                   	pop    ebx
c0020cc5:	5f                   	pop    edi
c0020cc6:	c3                   	ret    
c0020cc7:	90                   	nop

c0020cc8 <SATAPI::detectMedia()>:
c0020cc8:	56                   	push   esi
c0020cc9:	53                   	push   ebx
c0020cca:	83 ec 28             	sub    esp,0x28
c0020ccd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020cd1:	6a 0c                	push   0xc
c0020cd3:	6a 00                	push   0x0
c0020cd5:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0020cd9:	56                   	push   esi
c0020cda:	e8 a5 f9 fd ff       	call   c0000684 <memset>
c0020cdf:	83 c4 0c             	add    esp,0xc
c0020ce2:	6a 00                	push   0x0
c0020ce4:	6a 00                	push   0x0
c0020ce6:	6a 00                	push   0x0
c0020ce8:	6a 00                	push   0x0
c0020cea:	6a 00                	push   0x0
c0020cec:	56                   	push   esi
c0020ced:	53                   	push   ebx
c0020cee:	e8 f5 fc ff ff       	call   c00209e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020cf3:	83 c4 20             	add    esp,0x20
c0020cf6:	48                   	dec    eax
c0020cf7:	75 17                	jne    c0020d10 <SATAPI::detectMedia()+0x48>
c0020cf9:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020d00:	74 0e                	je     c0020d10 <SATAPI::detectMedia()+0x48>
c0020d02:	83 ec 0c             	sub    esp,0xc
c0020d05:	53                   	push   ebx
c0020d06:	e8 95 fc ff ff       	call   c00209a0 <SATAPI::diskRemoved()>
c0020d0b:	e9 91 00 00 00       	jmp    c0020da1 <SATAPI::detectMedia()+0xd9>
c0020d10:	50                   	push   eax
c0020d11:	6a 0c                	push   0xc
c0020d13:	6a 00                	push   0x0
c0020d15:	56                   	push   esi
c0020d16:	e8 69 f9 fd ff       	call   c0000684 <memset>
c0020d1b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020d20:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020d25:	83 c4 0c             	add    esp,0xc
c0020d28:	6a 01                	push   0x1
c0020d2a:	8d 44 24 16          	lea    eax,[esp+0x16]
c0020d2e:	50                   	push   eax
c0020d2f:	6a 00                	push   0x0
c0020d31:	6a 00                	push   0x0
c0020d33:	6a 12                	push   0x12
c0020d35:	56                   	push   esi
c0020d36:	53                   	push   ebx
c0020d37:	e8 ac fc ff ff       	call   c00209e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020d3c:	83 c4 20             	add    esp,0x20
c0020d3f:	48                   	dec    eax
c0020d40:	75 09                	jne    c0020d4b <SATAPI::detectMedia()+0x83>
c0020d42:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020d49:	75 b7                	jne    c0020d02 <SATAPI::detectMedia()+0x3a>
c0020d4b:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0020d4f:	83 e0 7f             	and    eax,0x7f
c0020d52:	3c 70                	cmp    al,0x70
c0020d54:	74 15                	je     c0020d6b <SATAPI::detectMedia()+0xa3>
c0020d56:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020d5d:	75 0c                	jne    c0020d6b <SATAPI::detectMedia()+0xa3>
c0020d5f:	83 ec 0c             	sub    esp,0xc
c0020d62:	53                   	push   ebx
c0020d63:	e8 64 fc ff ff       	call   c00209cc <SATAPI::diskInserted()>
c0020d68:	83 c4 10             	add    esp,0x10
c0020d6b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020d6f:	83 e0 0f             	and    eax,0xf
c0020d72:	3c 02                	cmp    al,0x2
c0020d74:	75 15                	jne    c0020d8b <SATAPI::detectMedia()+0xc3>
c0020d76:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0020d7b:	75 27                	jne    c0020da4 <SATAPI::detectMedia()+0xdc>
c0020d7d:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020d84:	74 1e                	je     c0020da4 <SATAPI::detectMedia()+0xdc>
c0020d86:	e9 77 ff ff ff       	jmp    c0020d02 <SATAPI::detectMedia()+0x3a>
c0020d8b:	84 c0                	test   al,al
c0020d8d:	75 15                	jne    c0020da4 <SATAPI::detectMedia()+0xdc>
c0020d8f:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020d96:	75 0c                	jne    c0020da4 <SATAPI::detectMedia()+0xdc>
c0020d98:	83 ec 0c             	sub    esp,0xc
c0020d9b:	53                   	push   ebx
c0020d9c:	e8 2b fc ff ff       	call   c00209cc <SATAPI::diskInserted()>
c0020da1:	83 c4 10             	add    esp,0x10
c0020da4:	83 c4 24             	add    esp,0x24
c0020da7:	5b                   	pop    ebx
c0020da8:	5e                   	pop    esi
c0020da9:	c3                   	ret    

c0020daa <SATAPI::open(int, int, void*)>:
c0020daa:	56                   	push   esi
c0020dab:	53                   	push   ebx
c0020dac:	51                   	push   ecx
c0020dad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020db1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020db5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020dbf:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020dc5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020dcf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020dd3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020ddd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020de3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020dea:	e8 cf 92 fe ff       	call   c000a0be <Phys::allocatePage()>
c0020def:	89 c6                	mov    esi,eax
c0020df1:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0020df7:	81 c6 00 10 00 00    	add    esi,0x1000
c0020dfd:	e8 bc 92 fe ff       	call   c000a0be <Phys::allocatePage()>
c0020e02:	39 c6                	cmp    esi,eax
c0020e04:	74 10                	je     c0020e16 <SATAPI::open(int, int, void*)+0x6c>
c0020e06:	83 ec 0c             	sub    esp,0xc
c0020e09:	68 d3 69 02 c0       	push   0xc00269d3
c0020e0e:	e8 90 3a ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0020e13:	83 c4 10             	add    esp,0x10
c0020e16:	83 ec 0c             	sub    esp,0xc
c0020e19:	6a 02                	push   0x2
c0020e1b:	e8 b1 ab fe ff       	call   c000b9d1 <Virt::allocateKernelVirtualPages(int)>
c0020e20:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0020e26:	6a 03                	push   0x3
c0020e28:	50                   	push   eax
c0020e29:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0020e2f:	ff 35 70 7c 02 c0    	push   DWORD PTR ds:0xc0027c70
c0020e35:	e8 3e b2 fe ff       	call   c000c078 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020e3a:	83 c4 14             	add    esp,0x14
c0020e3d:	68 74 01 00 00       	push   0x174
c0020e42:	e8 c0 8b fe ff       	call   c0009a07 <malloc>
c0020e47:	83 c4 0c             	add    esp,0xc
c0020e4a:	89 c6                	mov    esi,eax
c0020e4c:	6a 00                	push   0x0
c0020e4e:	68 ff ff ff 7f       	push   0x7fffffff
c0020e53:	6a 00                	push   0x0
c0020e55:	6a 00                	push   0x0
c0020e57:	53                   	push   ebx
c0020e58:	68 e9 69 02 c0       	push   0xc00269e9
c0020e5d:	50                   	push   eax
c0020e5e:	e8 c3 f3 fe ff       	call   c0010226 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020e63:	83 c4 14             	add    esp,0x14
c0020e66:	56                   	push   esi
c0020e67:	e8 70 f4 fe ff       	call   c00102dc <LogicalDisk::assignDriveLetter()>
c0020e6c:	58                   	pop    eax
c0020e6d:	5a                   	pop    edx
c0020e6e:	56                   	push   esi
c0020e6f:	53                   	push   ebx
c0020e70:	e8 09 d3 fe ff       	call   c000e17e <Device::addChild(Device*)>
c0020e75:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0020e7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020e7e:	e8 9b d7 fe ff       	call   c000e61e <PhysicalDisk::startCache()>
c0020e83:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0020e8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020e8d:	e8 36 fe ff ff       	call   c0020cc8 <SATAPI::detectMedia()>
c0020e92:	83 c4 14             	add    esp,0x14
c0020e95:	31 c0                	xor    eax,eax
c0020e97:	5b                   	pop    ebx
c0020e98:	5e                   	pop    esi
c0020e99:	c3                   	ret    

c0020e9a <SATAPI::read(unsigned long long, int, void*)>:
c0020e9a:	55                   	push   ebp
c0020e9b:	57                   	push   edi
c0020e9c:	56                   	push   esi
c0020e9d:	53                   	push   ebx
c0020e9e:	83 ec 1c             	sub    esp,0x1c
c0020ea1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020ea5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020ea9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0020ead:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0020eb4:	74 19                	je     c0020ecf <SATAPI::read(unsigned long long, int, void*)+0x35>
c0020eb6:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0020ebb:	7e 2e                	jle    c0020eeb <SATAPI::read(unsigned long long, int, void*)+0x51>
c0020ebd:	83 ec 0c             	sub    esp,0xc
c0020ec0:	68 f7 69 02 c0       	push   0xc00269f7
c0020ec5:	e8 d9 39 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0020eca:	83 c4 10             	add    esp,0x10
c0020ecd:	eb 1c                	jmp    c0020eeb <SATAPI::read(unsigned long long, int, void*)+0x51>
c0020ecf:	83 ec 0c             	sub    esp,0xc
c0020ed2:	55                   	push   ebp
c0020ed3:	e8 f0 fd ff ff       	call   c0020cc8 <SATAPI::detectMedia()>
c0020ed8:	83 c4 10             	add    esp,0x10
c0020edb:	b8 02 00 00 00       	mov    eax,0x2
c0020ee0:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0020ee7:	75 cd                	jne    c0020eb6 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0020ee9:	eb 49                	jmp    c0020f34 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0020eeb:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020eef:	b9 03 00 00 00       	mov    ecx,0x3
c0020ef4:	fc                   	cld    
c0020ef5:	31 c0                	xor    eax,eax
c0020ef7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020ef9:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0020efe:	89 d8                	mov    eax,ebx
c0020f00:	86 e0                	xchg   al,ah
c0020f02:	c1 c0 10             	rol    eax,0x10
c0020f05:	86 e0                	xchg   al,ah
c0020f07:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0020f0b:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0020f0f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0020f13:	50                   	push   eax
c0020f14:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020f18:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020f1c:	56                   	push   esi
c0020f1d:	53                   	push   ebx
c0020f1e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0020f22:	c1 e0 0b             	shl    eax,0xb
c0020f25:	50                   	push   eax
c0020f26:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020f2a:	50                   	push   eax
c0020f2b:	55                   	push   ebp
c0020f2c:	e8 b7 fa ff ff       	call   c00209e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020f31:	83 c4 20             	add    esp,0x20
c0020f34:	83 c4 1c             	add    esp,0x1c
c0020f37:	5b                   	pop    ebx
c0020f38:	5e                   	pop    esi
c0020f39:	5f                   	pop    edi
c0020f3a:	5d                   	pop    ebp
c0020f3b:	c3                   	ret    

c0020f3c <AVX::open(int, int, void*)>:
c0020f3c:	83 ec 0c             	sub    esp,0xc
c0020f3f:	e8 34 11 00 00       	call   c0022078 <avxInit>
c0020f44:	b8 00 00 00 00       	mov    eax,0x0
c0020f49:	83 c4 0c             	add    esp,0xc
c0020f4c:	c3                   	ret    
c0020f4d:	90                   	nop
c0020f4e:	66 90                	xchg   ax,ax

c0020f50 <AVX::close(int, int, void*)>:
c0020f50:	83 ec 0c             	sub    esp,0xc
c0020f53:	e8 21 11 00 00       	call   c0022079 <avxClose>
c0020f58:	b8 00 00 00 00       	mov    eax,0x0
c0020f5d:	83 c4 0c             	add    esp,0xc
c0020f60:	c3                   	ret    
c0020f61:	90                   	nop
c0020f62:	66 90                	xchg   ax,ax

c0020f64 <AVX::available()>:
c0020f64:	83 ec 0c             	sub    esp,0xc
c0020f67:	e8 04 11 00 00       	call   c0022070 <avxDetect>
c0020f6c:	85 c0                	test   eax,eax
c0020f6e:	0f 95 c0             	setne  al
c0020f71:	83 c4 0c             	add    esp,0xc
c0020f74:	c3                   	ret    
c0020f75:	90                   	nop
c0020f76:	66 90                	xchg   ax,ax

c0020f78 <AVX::save(void*)>:
c0020f78:	83 ec 0c             	sub    esp,0xc
c0020f7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f7f:	83 ec 0c             	sub    esp,0xc
c0020f82:	50                   	push   eax
c0020f83:	e8 ee 10 00 00       	call   c0022076 <avxSave>
c0020f88:	83 c4 10             	add    esp,0x10
c0020f8b:	90                   	nop
c0020f8c:	83 c4 0c             	add    esp,0xc
c0020f8f:	c3                   	ret    

c0020f90 <AVX::load(void*)>:
c0020f90:	83 ec 0c             	sub    esp,0xc
c0020f93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f97:	83 ec 0c             	sub    esp,0xc
c0020f9a:	50                   	push   eax
c0020f9b:	e8 d7 10 00 00       	call   c0022077 <avxLoad>
c0020fa0:	83 c4 10             	add    esp,0x10
c0020fa3:	90                   	nop
c0020fa4:	83 c4 0c             	add    esp,0xc
c0020fa7:	c3                   	ret    

c0020fa8 <AVX::AVX()>:
c0020fa8:	83 ec 0c             	sub    esp,0xc
c0020fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020faf:	83 ec 08             	sub    esp,0x8
c0020fb2:	68 5c 6a 02 c0       	push   0xc0026a5c
c0020fb7:	50                   	push   eax
c0020fb8:	e8 d7 d6 fe ff       	call   c000e694 <FPU::FPU(char const*)>
c0020fbd:	83 c4 10             	add    esp,0x10
c0020fc0:	ba 6c 6a 02 c0       	mov    edx,0xc0026a6c
c0020fc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fc9:	89 10                	mov    DWORD PTR [eax],edx
c0020fcb:	90                   	nop
c0020fcc:	83 c4 0c             	add    esp,0xc
c0020fcf:	c3                   	ret    

c0020fd0 <MMX::available()>:
c0020fd0:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c0020fd5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0020fdb:	83 e0 20             	and    eax,0x20
c0020fde:	84 c0                	test   al,al
c0020fe0:	0f 95 c0             	setne  al
c0020fe3:	c3                   	ret    

c0020fe4 <MMX::open(int, int, void*)>:
c0020fe4:	83 ec 0c             	sub    esp,0xc
c0020fe7:	e8 16 11 00 00       	call   c0022102 <x87Init>
c0020fec:	b8 00 00 00 00       	mov    eax,0x0
c0020ff1:	83 c4 0c             	add    esp,0xc
c0020ff4:	c3                   	ret    
c0020ff5:	90                   	nop
c0020ff6:	66 90                	xchg   ax,ax

c0020ff8 <MMX::close(int, int, void*)>:
c0020ff8:	83 ec 0c             	sub    esp,0xc
c0020ffb:	e8 1c 11 00 00       	call   c002211c <x87Close>
c0021000:	b8 00 00 00 00       	mov    eax,0x0
c0021005:	83 c4 0c             	add    esp,0xc
c0021008:	c3                   	ret    
c0021009:	90                   	nop
c002100a:	66 90                	xchg   ax,ax

c002100c <MMX::save(void*)>:
c002100c:	83 ec 0c             	sub    esp,0xc
c002100f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021013:	83 ec 0c             	sub    esp,0xc
c0021016:	50                   	push   eax
c0021017:	e8 d5 10 00 00       	call   c00220f1 <x87Save>
c002101c:	83 c4 10             	add    esp,0x10
c002101f:	90                   	nop
c0021020:	83 c4 0c             	add    esp,0xc
c0021023:	c3                   	ret    

c0021024 <MMX::load(void*)>:
c0021024:	83 ec 0c             	sub    esp,0xc
c0021027:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002102b:	83 ec 0c             	sub    esp,0xc
c002102e:	50                   	push   eax
c002102f:	e8 c6 10 00 00       	call   c00220fa <x87Load>
c0021034:	83 c4 10             	add    esp,0x10
c0021037:	90                   	nop
c0021038:	83 c4 0c             	add    esp,0xc
c002103b:	c3                   	ret    

c002103c <MMX::MMX()>:
c002103c:	83 ec 0c             	sub    esp,0xc
c002103f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021043:	83 ec 08             	sub    esp,0x8
c0021046:	68 9c 6a 02 c0       	push   0xc0026a9c
c002104b:	50                   	push   eax
c002104c:	e8 43 d6 fe ff       	call   c000e694 <FPU::FPU(char const*)>
c0021051:	83 c4 10             	add    esp,0x10
c0021054:	ba ac 6a 02 c0       	mov    edx,0xc0026aac
c0021059:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002105d:	89 10                	mov    DWORD PTR [eax],edx
c002105f:	90                   	nop
c0021060:	83 c4 0c             	add    esp,0xc
c0021063:	c3                   	ret    

c0021064 <SSE::open(int, int, void*)>:
c0021064:	83 ec 0c             	sub    esp,0xc
c0021067:	e8 48 10 00 00       	call   c00220b4 <sseInit>
c002106c:	b8 00 00 00 00       	mov    eax,0x0
c0021071:	83 c4 0c             	add    esp,0xc
c0021074:	c3                   	ret    
c0021075:	90                   	nop
c0021076:	66 90                	xchg   ax,ax

c0021078 <SSE::close(int, int, void*)>:
c0021078:	83 ec 0c             	sub    esp,0xc
c002107b:	e8 44 10 00 00       	call   c00220c4 <sseClose>
c0021080:	b8 00 00 00 00       	mov    eax,0x0
c0021085:	83 c4 0c             	add    esp,0xc
c0021088:	c3                   	ret    
c0021089:	90                   	nop
c002108a:	66 90                	xchg   ax,ax

c002108c <SSE::available()>:
c002108c:	83 ec 1c             	sub    esp,0x1c
c002108f:	e8 fc 0f 00 00       	call   c0022090 <absolutelyNoChanceInHell>
c0021094:	85 c0                	test   eax,eax
c0021096:	0f 95 c0             	setne  al
c0021099:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002109d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00210a1:	83 c4 1c             	add    esp,0x1c
c00210a4:	c3                   	ret    
c00210a5:	90                   	nop
c00210a6:	66 90                	xchg   ax,ax

c00210a8 <SSE::save(void*)>:
c00210a8:	83 ec 0c             	sub    esp,0xc
c00210ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00210af:	83 ec 0c             	sub    esp,0xc
c00210b2:	50                   	push   eax
c00210b3:	e8 f0 0f 00 00       	call   c00220a8 <sseSave>
c00210b8:	83 c4 10             	add    esp,0x10
c00210bb:	90                   	nop
c00210bc:	83 c4 0c             	add    esp,0xc
c00210bf:	c3                   	ret    

c00210c0 <SSE::load(void*)>:
c00210c0:	83 ec 0c             	sub    esp,0xc
c00210c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00210c7:	83 ec 0c             	sub    esp,0xc
c00210ca:	50                   	push   eax
c00210cb:	e8 de 0f 00 00       	call   c00220ae <sseLoad>
c00210d0:	83 c4 10             	add    esp,0x10
c00210d3:	90                   	nop
c00210d4:	83 c4 0c             	add    esp,0xc
c00210d7:	c3                   	ret    

c00210d8 <SSE::SSE()>:
c00210d8:	83 ec 0c             	sub    esp,0xc
c00210db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210df:	83 ec 08             	sub    esp,0x8
c00210e2:	68 dc 6a 02 c0       	push   0xc0026adc
c00210e7:	50                   	push   eax
c00210e8:	e8 a7 d5 fe ff       	call   c000e694 <FPU::FPU(char const*)>
c00210ed:	83 c4 10             	add    esp,0x10
c00210f0:	ba ec 6a 02 c0       	mov    edx,0xc0026aec
c00210f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210f9:	89 10                	mov    DWORD PTR [eax],edx
c00210fb:	90                   	nop
c00210fc:	83 c4 0c             	add    esp,0xc
c00210ff:	c3                   	ret    

c0021100 <x87::open(int, int, void*)>:
c0021100:	83 ec 0c             	sub    esp,0xc
c0021103:	e8 fa 0f 00 00       	call   c0022102 <x87Init>
c0021108:	b8 00 00 00 00       	mov    eax,0x0
c002110d:	83 c4 0c             	add    esp,0xc
c0021110:	c3                   	ret    
c0021111:	90                   	nop
c0021112:	66 90                	xchg   ax,ax

c0021114 <x87::close(int, int, void*)>:
c0021114:	83 ec 0c             	sub    esp,0xc
c0021117:	e8 00 10 00 00       	call   c002211c <x87Close>
c002111c:	b8 00 00 00 00       	mov    eax,0x0
c0021121:	83 c4 0c             	add    esp,0xc
c0021124:	c3                   	ret    
c0021125:	90                   	nop
c0021126:	66 90                	xchg   ax,ax

c0021128 <x87::available()>:
c0021128:	83 ec 0c             	sub    esp,0xc
c002112b:	e8 a6 0f 00 00       	call   c00220d6 <x87Detect>
c0021130:	85 c0                	test   eax,eax
c0021132:	0f 95 c0             	setne  al
c0021135:	83 c4 0c             	add    esp,0xc
c0021138:	c3                   	ret    
c0021139:	90                   	nop
c002113a:	66 90                	xchg   ax,ax

c002113c <x87::save(void*)>:
c002113c:	83 ec 0c             	sub    esp,0xc
c002113f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021143:	83 ec 0c             	sub    esp,0xc
c0021146:	50                   	push   eax
c0021147:	e8 a5 0f 00 00       	call   c00220f1 <x87Save>
c002114c:	83 c4 10             	add    esp,0x10
c002114f:	90                   	nop
c0021150:	83 c4 0c             	add    esp,0xc
c0021153:	c3                   	ret    

c0021154 <x87::load(void*)>:
c0021154:	83 ec 0c             	sub    esp,0xc
c0021157:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002115b:	83 ec 0c             	sub    esp,0xc
c002115e:	50                   	push   eax
c002115f:	e8 96 0f 00 00       	call   c00220fa <x87Load>
c0021164:	83 c4 10             	add    esp,0x10
c0021167:	90                   	nop
c0021168:	83 c4 0c             	add    esp,0xc
c002116b:	c3                   	ret    

c002116c <x87::x87()>:
c002116c:	83 ec 0c             	sub    esp,0xc
c002116f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021173:	83 ec 08             	sub    esp,0x8
c0021176:	68 1c 6b 02 c0       	push   0xc0026b1c
c002117b:	50                   	push   eax
c002117c:	e8 13 d5 fe ff       	call   c000e694 <FPU::FPU(char const*)>
c0021181:	83 c4 10             	add    esp,0x10
c0021184:	ba 2c 6b 02 c0       	mov    edx,0xc0026b2c
c0021189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002118d:	89 10                	mov    DWORD PTR [eax],edx
c002118f:	90                   	nop
c0021190:	83 c4 0c             	add    esp,0xc
c0021193:	c3                   	ret    

c0021194 <APIC::disable()>:
c0021194:	90                   	nop
c0021195:	c3                   	ret    

c0021196 <APIC::close(int, int, void*)>:
c0021196:	55                   	push   ebp
c0021197:	89 e5                	mov    ebp,esp
c0021199:	83 ec 08             	sub    esp,0x8
c002119c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002119f:	8b 00                	mov    eax,DWORD PTR [eax]
c00211a1:	83 c0 3c             	add    eax,0x3c
c00211a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00211a6:	83 ec 0c             	sub    esp,0xc
c00211a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00211ac:	ff d0                	call   eax
c00211ae:	83 c4 10             	add    esp,0x10
c00211b1:	b8 00 00 00 00       	mov    eax,0x0
c00211b6:	c9                   	leave  
c00211b7:	c3                   	ret    

c00211b8 <IOAPIC::close(int, int, void*)>:
c00211b8:	b8 00 00 00 00       	mov    eax,0x0
c00211bd:	c3                   	ret    

c00211be <APIC::io_wait()>:
c00211be:	eb 00                	jmp    c00211c0 <APIC::io_wait()+0x2>
c00211c0:	eb 00                	jmp    c00211c2 <APIC::io_wait()+0x4>
c00211c2:	90                   	nop
c00211c3:	c3                   	ret    

c00211c4 <APIC::getBase()>:
c00211c4:	55                   	push   ebp
c00211c5:	89 e5                	mov    ebp,esp
c00211c7:	83 ec 18             	sub    esp,0x18
c00211ca:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c00211cf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00211d5:	83 e0 08             	and    eax,0x8
c00211d8:	84 c0                	test   al,al
c00211da:	75 07                	jne    c00211e3 <APIC::getBase()+0x1f>
c00211dc:	b8 00 00 00 00       	mov    eax,0x0
c00211e1:	eb 21                	jmp    c0021204 <APIC::getBase()+0x40>
c00211e3:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c00211e8:	83 ec 08             	sub    esp,0x8
c00211eb:	6a 1b                	push   0x1b
c00211ed:	50                   	push   eax
c00211ee:	e8 31 7d fe ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c00211f3:	83 c4 10             	add    esp,0x10
c00211f6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00211f9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00211fc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00211ff:	25 00 f0 ff ff       	and    eax,0xfffff000
c0021204:	c9                   	leave  
c0021205:	c3                   	ret    

c0021206 <APIC::eoi(unsigned char)>:
c0021206:	55                   	push   ebp
c0021207:	89 e5                	mov    ebp,esp
c0021209:	83 ec 28             	sub    esp,0x28
c002120c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002120f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0021212:	83 ec 0c             	sub    esp,0xc
c0021215:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021218:	e8 a7 ff ff ff       	call   c00211c4 <APIC::getBase()>
c002121d:	83 c4 10             	add    esp,0x10
c0021220:	05 b0 00 00 00       	add    eax,0xb0
c0021225:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0021228:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002122b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021231:	90                   	nop
c0021232:	c9                   	leave  
c0021233:	c3                   	ret    

c0021234 <APIC::open(int, int, void*)>:
c0021234:	55                   	push   ebp
c0021235:	89 e5                	mov    ebp,esp
c0021237:	57                   	push   edi
c0021238:	56                   	push   esi
c0021239:	53                   	push   ebx
c002123a:	83 ec 2c             	sub    esp,0x2c
c002123d:	83 ec 0c             	sub    esp,0xc
c0021240:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021243:	e8 7c ff ff ff       	call   c00211c4 <APIC::getBase()>
c0021248:	83 c4 10             	add    esp,0x10
c002124b:	89 c2                	mov    edx,eax
c002124d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021250:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021256:	0f b6 f8             	movzx  edi,al
c0021259:	89 d0                	mov    eax,edx
c002125b:	ba 00 00 00 00       	mov    edx,0x0
c0021260:	89 c1                	mov    ecx,eax
c0021262:	80 e5 ff             	and    ch,0xff
c0021265:	89 cb                	mov    ebx,ecx
c0021267:	0f b6 f2             	movzx  esi,dl
c002126a:	89 d8                	mov    eax,ebx
c002126c:	89 f2                	mov    edx,esi
c002126e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021271:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021274:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021278:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002127c:	83 e0 00             	and    eax,0x0
c002127f:	09 d0                	or     eax,edx
c0021281:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021285:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021288:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002128e:	8d 50 01             	lea    edx,[eax+0x1]
c0021291:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021294:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002129a:	0f b6 d0             	movzx  edx,al
c002129d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00212a0:	83 c2 08             	add    edx,0x8
c00212a3:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00212a7:	0f b6 c9             	movzx  ecx,cl
c00212aa:	81 c9 00 00 01 00    	or     ecx,0x10000
c00212b0:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00212b4:	83 ec 0c             	sub    esp,0xc
c00212b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00212ba:	e8 05 ff ff ff       	call   c00211c4 <APIC::getBase()>
c00212bf:	83 c4 10             	add    esp,0x10
c00212c2:	05 f0 00 00 00       	add    eax,0xf0
c00212c7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00212ca:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00212cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00212cf:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00212d2:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00212d9:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00212e0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00212e3:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00212e6:	89 10                	mov    DWORD PTR [eax],edx
c00212e8:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00212ef:	a1 b0 83 02 c0       	mov    eax,ds:0xc00283b0
c00212f4:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00212f7:	7d 7c                	jge    c0021375 <APIC::open(int, int, void*)+0x141>
c00212f9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00212fc:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c0021303:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0021306:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021309:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c0021310:	c1 e8 08             	shr    eax,0x8
c0021313:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0021317:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002131a:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c0021321:	c1 e8 18             	shr    eax,0x18
c0021324:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0021327:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002132b:	75 40                	jne    c002136d <APIC::open(int, int, void*)+0x139>
c002132d:	83 ec 0c             	sub    esp,0xc
c0021330:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021333:	e8 8c fe ff ff       	call   c00211c4 <APIC::getBase()>
c0021338:	83 c4 10             	add    esp,0x10
c002133b:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002133f:	75 07                	jne    c0021348 <APIC::open(int, int, void*)+0x114>
c0021341:	ba 60 03 00 00       	mov    edx,0x360
c0021346:	eb 05                	jmp    c002134d <APIC::open(int, int, void*)+0x119>
c0021348:	ba 50 03 00 00       	mov    edx,0x350
c002134d:	01 d0                	add    eax,edx
c002134f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021352:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021355:	8b 00                	mov    eax,DWORD PTR [eax]
c0021357:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002135a:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0021361:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0021365:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021368:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002136b:	89 10                	mov    DWORD PTR [eax],edx
c002136d:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0021370:	e9 7a ff ff ff       	jmp    c00212ef <APIC::open(int, int, void*)+0xbb>
c0021375:	b8 00 00 00 00       	mov    eax,0x0
c002137a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002137d:	5b                   	pop    ebx
c002137e:	5e                   	pop    esi
c002137f:	5f                   	pop    edi
c0021380:	5d                   	pop    ebp
c0021381:	c3                   	ret    

c0021382 <IOAPIC::IOAPIC()>:
c0021382:	83 ec 0c             	sub    esp,0xc
c0021385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021389:	83 ec 08             	sub    esp,0x8
c002138c:	68 5c 6b 02 c0       	push   0xc0026b5c
c0021391:	50                   	push   eax
c0021392:	e8 eb cf fe ff       	call   c000e382 <Device::Device(char const*)>
c0021397:	83 c4 10             	add    esp,0x10
c002139a:	ba 84 6c 02 c0       	mov    edx,0xc0026c84
c002139f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213a3:	89 10                	mov    DWORD PTR [eax],edx
c00213a5:	90                   	nop
c00213a6:	83 c4 0c             	add    esp,0xc
c00213a9:	c3                   	ret    

c00213aa <APIC::APIC()>:
c00213aa:	53                   	push   ebx
c00213ab:	83 ec 18             	sub    esp,0x18
c00213ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00213b2:	83 ec 08             	sub    esp,0x8
c00213b5:	68 64 6b 02 c0       	push   0xc0026b64
c00213ba:	50                   	push   eax
c00213bb:	e8 3a d7 fe ff       	call   c000eafa <InterruptController::InterruptController(char const*)>
c00213c0:	83 c4 10             	add    esp,0x10
c00213c3:	ba 3c 6c 02 c0       	mov    edx,0xc0026c3c
c00213c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00213cc:	89 10                	mov    DWORD PTR [eax],edx
c00213ce:	a0 80 9a 02 c0       	mov    al,ds:0xc0029a80
c00213d3:	83 f0 01             	xor    eax,0x1
c00213d6:	84 c0                	test   al,al
c00213d8:	0f 84 a1 00 00 00    	je     c002147f <APIC::APIC()+0xd5>
c00213de:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00213e3:	a0 60 84 02 c0       	mov    al,ds:0xc0028460
c00213e8:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00213ec:	0f 83 86 00 00 00    	jae    c0021478 <APIC::APIC()+0xce>
c00213f2:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00213fa:	83 ec 0c             	sub    esp,0xc
c00213fd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021401:	e8 01 86 fe ff       	call   c0009a07 <malloc>
c0021406:	83 c4 10             	add    esp,0x10
c0021409:	89 c3                	mov    ebx,eax
c002140b:	83 ec 0c             	sub    esp,0xc
c002140e:	53                   	push   ebx
c002140f:	e8 6e ff ff ff       	call   c0021382 <IOAPIC::IOAPIC()>
c0021414:	83 c4 10             	add    esp,0x10
c0021417:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002141b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0021420:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021424:	89 14 85 60 9a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd65a0],edx
c002142b:	a1 40 9a 02 c0       	mov    eax,ds:0xc0029a40
c0021430:	40                   	inc    eax
c0021431:	a3 40 9a 02 c0       	mov    ds:0xc0029a40,eax
c0021436:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c002143b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021441:	83 ec 08             	sub    esp,0x8
c0021444:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021448:	50                   	push   eax
c0021449:	e8 30 cd fe ff       	call   c000e17e <Device::addChild(Device*)>
c002144e:	83 c4 10             	add    esp,0x10
c0021451:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021455:	8b 00                	mov    eax,DWORD PTR [eax]
c0021457:	83 c0 08             	add    eax,0x8
c002145a:	8b 00                	mov    eax,DWORD PTR [eax]
c002145c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0021461:	6a 00                	push   0x0
c0021463:	6a 00                	push   0x0
c0021465:	52                   	push   edx
c0021466:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002146a:	ff d0                	call   eax
c002146c:	83 c4 10             	add    esp,0x10
c002146f:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0021473:	e9 6b ff ff ff       	jmp    c00213e3 <APIC::APIC()+0x39>
c0021478:	c6 05 80 9a 02 c0 01 	mov    BYTE PTR ds:0xc0029a80,0x1
c002147f:	90                   	nop
c0021480:	83 c4 18             	add    esp,0x18
c0021483:	5b                   	pop    ebx
c0021484:	c3                   	ret    
c0021485:	90                   	nop

c0021486 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0021486:	55                   	push   ebp
c0021487:	89 e5                	mov    ebp,esp
c0021489:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002148c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021492:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021495:	72 1d                	jb     c00214b4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021497:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002149a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00214a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214a3:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00214a9:	01 d0                	add    eax,edx
c00214ab:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00214ae:	73 04                	jae    c00214b4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00214b0:	b0 01                	mov    al,0x1
c00214b2:	eb 02                	jmp    c00214b6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00214b4:	b0 00                	mov    al,0x0
c00214b6:	5d                   	pop    ebp
c00214b7:	c3                   	ret    

c00214b8 <IOAPIC::read(int)>:
c00214b8:	55                   	push   ebp
c00214b9:	89 e5                	mov    ebp,esp
c00214bb:	83 ec 10             	sub    esp,0x10
c00214be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214c1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00214c7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00214ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00214cd:	0f b6 d0             	movzx  edx,al
c00214d0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00214d3:	89 10                	mov    DWORD PTR [eax],edx
c00214d5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00214d8:	83 c0 10             	add    eax,0x10
c00214db:	8b 00                	mov    eax,DWORD PTR [eax]
c00214dd:	c9                   	leave  
c00214de:	c3                   	ret    
c00214df:	90                   	nop

c00214e0 <IOAPIC::open(int, int, void*)>:
c00214e0:	55                   	push   ebp
c00214e1:	89 e5                	mov    ebp,esp
c00214e3:	57                   	push   edi
c00214e4:	56                   	push   esi
c00214e5:	53                   	push   ebx
c00214e6:	83 ec 0c             	sub    esp,0xc
c00214e9:	83 ec 0c             	sub    esp,0xc
c00214ec:	68 8f 6b 02 c0       	push   0xc0026b8f
c00214f1:	e8 01 b8 fe ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c00214f6:	83 c4 10             	add    esp,0x10
c00214f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00214ff:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021505:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021508:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002150e:	8b 14 85 a0 84 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7b60]
c0021515:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021518:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002151e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021521:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021527:	8b 14 85 20 85 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7ae0]
c002152e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021531:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0021537:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002153a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0021540:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021543:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021549:	0f b6 f8             	movzx  edi,al
c002154c:	89 d0                	mov    eax,edx
c002154e:	ba 00 00 00 00       	mov    edx,0x0
c0021553:	89 c1                	mov    ecx,eax
c0021555:	80 e5 ff             	and    ch,0xff
c0021558:	89 cb                	mov    ebx,ecx
c002155a:	0f b6 f2             	movzx  esi,dl
c002155d:	89 d8                	mov    eax,ebx
c002155f:	89 f2                	mov    edx,esi
c0021561:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021564:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021567:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002156b:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002156f:	83 e0 00             	and    eax,0x0
c0021572:	09 d0                	or     eax,edx
c0021574:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021578:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002157b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021581:	8d 50 01             	lea    edx,[eax+0x1]
c0021584:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021587:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002158d:	0f b6 d0             	movzx  edx,al
c0021590:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021593:	83 c2 08             	add    edx,0x8
c0021596:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002159a:	0f b6 c9             	movzx  ecx,cl
c002159d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00215a3:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00215a7:	83 ec 08             	sub    esp,0x8
c00215aa:	6a 01                	push   0x1
c00215ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00215af:	e8 04 ff ff ff       	call   c00214b8 <IOAPIC::read(int)>
c00215b4:	83 c4 10             	add    esp,0x10
c00215b7:	c1 f8 10             	sar    eax,0x10
c00215ba:	0f b6 c0             	movzx  eax,al
c00215bd:	8d 50 01             	lea    edx,[eax+0x1]
c00215c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00215c3:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00215c9:	b8 00 00 00 00       	mov    eax,0x0
c00215ce:	8d 65 f4             	lea    esp,[ebp-0xc]
c00215d1:	5b                   	pop    ebx
c00215d2:	5e                   	pop    esi
c00215d3:	5f                   	pop    edi
c00215d4:	5d                   	pop    ebp
c00215d5:	c3                   	ret    

c00215d6 <IOAPIC::write(int, int)>:
c00215d6:	55                   	push   ebp
c00215d7:	89 e5                	mov    ebp,esp
c00215d9:	83 ec 10             	sub    esp,0x10
c00215dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00215df:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00215e5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00215e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00215eb:	0f b6 d0             	movzx  edx,al
c00215ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00215f1:	89 10                	mov    DWORD PTR [eax],edx
c00215f3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00215f6:	8d 50 10             	lea    edx,[eax+0x10]
c00215f9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00215fc:	89 02                	mov    DWORD PTR [edx],eax
c00215fe:	90                   	nop
c00215ff:	c9                   	leave  
c0021600:	c3                   	ret    
c0021601:	90                   	nop

c0021602 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0021602:	55                   	push   ebp
c0021603:	89 e5                	mov    ebp,esp
c0021605:	53                   	push   ebx
c0021606:	83 ec 2c             	sub    esp,0x2c
c0021609:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002160c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002160f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0021612:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0021615:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0021618:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002161b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002161e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0021621:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021624:	88 d8                	mov    al,bl
c0021626:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0021629:	88 c8                	mov    al,cl
c002162b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002162e:	88 d0                	mov    al,dl
c0021630:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0021633:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0021637:	83 c0 08             	add    eax,0x8
c002163a:	01 c0                	add    eax,eax
c002163c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002163f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0021643:	83 c0 08             	add    eax,0x8
c0021646:	01 c0                	add    eax,eax
c0021648:	40                   	inc    eax
c0021649:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002164c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002164f:	50                   	push   eax
c0021650:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021653:	e8 60 fe ff ff       	call   c00214b8 <IOAPIC::read(int)>
c0021658:	83 c4 08             	add    esp,0x8
c002165b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002165e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0021665:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0021668:	c1 e0 18             	shl    eax,0x18
c002166b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002166e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0021671:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0021674:	52                   	push   edx
c0021675:	50                   	push   eax
c0021676:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021679:	e8 58 ff ff ff       	call   c00215d6 <IOAPIC::write(int, int)>
c002167e:	83 c4 0c             	add    esp,0xc
c0021681:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021684:	50                   	push   eax
c0021685:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021688:	e8 2b fe ff ff       	call   c00214b8 <IOAPIC::read(int)>
c002168d:	83 c4 08             	add    esp,0x8
c0021690:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0021693:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002169a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00216a1:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00216a8:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00216ac:	74 09                	je     c00216b7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00216ae:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00216b5:	eb 07                	jmp    c00216be <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00216b7:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00216be:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00216c2:	74 09                	je     c00216cd <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00216c4:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00216cb:	eb 07                	jmp    c00216d4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00216cd:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00216d4:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00216db:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00216df:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00216e2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00216e5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00216e8:	52                   	push   edx
c00216e9:	50                   	push   eax
c00216ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00216ed:	e8 e4 fe ff ff       	call   c00215d6 <IOAPIC::write(int, int)>
c00216f2:	83 c4 0c             	add    esp,0xc
c00216f5:	90                   	nop
c00216f6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00216f9:	c9                   	leave  
c00216fa:	c3                   	ret    
c00216fb:	90                   	nop

c00216fc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00216fc:	55                   	push   ebp
c00216fd:	89 e5                	mov    ebp,esp
c00216ff:	57                   	push   edi
c0021700:	56                   	push   esi
c0021701:	53                   	push   ebx
c0021702:	83 ec 2c             	sub    esp,0x2c
c0021705:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0021708:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002170b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002170f:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0021713:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0021717:	74 5a                	je     c0021773 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021719:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c002171d:	7f 44                	jg     c0021763 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002171f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021722:	05 40 72 02 c0       	add    eax,0xc0027240
c0021727:	8a 00                	mov    al,BYTE PTR [eax]
c0021729:	0f b6 c0             	movzx  eax,al
c002172c:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002172f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021732:	66 8b 84 00 40 84 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd7bc0]
c002173a:	0f b7 c0             	movzx  eax,ax
c002173d:	83 e0 02             	and    eax,0x2
c0021740:	85 c0                	test   eax,eax
c0021742:	74 04                	je     c0021748 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0021744:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0021748:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002174b:	66 8b 84 00 40 84 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd7bc0]
c0021753:	0f b7 c0             	movzx  eax,ax
c0021756:	83 e0 08             	and    eax,0x8
c0021759:	85 c0                	test   eax,eax
c002175b:	74 16                	je     c0021773 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002175d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0021761:	eb 10                	jmp    c0021773 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021763:	83 ec 0c             	sub    esp,0xc
c0021766:	68 a0 6b 02 c0       	push   0xc0026ba0
c002176b:	e8 33 31 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0021770:	83 c4 10             	add    esp,0x10
c0021773:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0021777:	a1 40 9a 02 c0       	mov    eax,ds:0xc0029a40
c002177c:	83 ec 08             	sub    esp,0x8
c002177f:	50                   	push   eax
c0021780:	68 d8 6b 02 c0       	push   0xc0026bd8
c0021785:	e8 6d b5 fe ff       	call   c000ccf7 <Dbg::kprintf(char const*, ...)>
c002178a:	83 c4 10             	add    esp,0x10
c002178d:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0021794:	a1 40 9a 02 c0       	mov    eax,ds:0xc0029a40
c0021799:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c002179c:	7d 67                	jge    c0021805 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002179e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00217a1:	8b 04 85 60 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65a0]
c00217a8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00217ab:	83 ec 08             	sub    esp,0x8
c00217ae:	52                   	push   edx
c00217af:	50                   	push   eax
c00217b0:	e8 d1 fc ff ff       	call   c0021486 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00217b5:	83 c4 10             	add    esp,0x10
c00217b8:	84 c0                	test   al,al
c00217ba:	74 44                	je     c0021800 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00217bc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00217bf:	8b 1c 85 60 9a 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd65a0]
c00217c6:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00217ca:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00217cd:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00217d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00217d4:	83 c0 20             	add    eax,0x20
c00217d7:	0f b6 f0             	movzx  esi,al
c00217da:	b8 00 00 00 00       	mov    eax,0x0
c00217df:	99                   	cdq    
c00217e0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00217e3:	0f b6 c9             	movzx  ecx,cl
c00217e6:	83 ec 04             	sub    esp,0x4
c00217e9:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00217ec:	57                   	push   edi
c00217ed:	56                   	push   esi
c00217ee:	52                   	push   edx
c00217ef:	50                   	push   eax
c00217f0:	51                   	push   ecx
c00217f1:	53                   	push   ebx
c00217f2:	e8 0b fe ff ff       	call   c0021602 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00217f7:	83 c4 20             	add    esp,0x20
c00217fa:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00217fe:	eb 05                	jmp    c0021805 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0021800:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0021803:	eb 8f                	jmp    c0021794 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0021805:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0021808:	83 f0 01             	xor    eax,0x1
c002180b:	84 c0                	test   al,al
c002180d:	74 10                	je     c002181f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002180f:	83 ec 0c             	sub    esp,0xc
c0021812:	68 ef 6b 02 c0       	push   0xc0026bef
c0021817:	e8 87 30 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c002181c:	83 c4 10             	add    esp,0x10
c002181f:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0021823:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002182a:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002182e:	7f 65                	jg     c0021895 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0021830:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021833:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021836:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002183d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021840:	01 ca                	add    edx,ecx
c0021842:	83 c2 54             	add    edx,0x54
c0021845:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0021849:	85 c0                	test   eax,eax
c002184b:	75 43                	jne    c0021890 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c002184d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021850:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021853:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002185a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002185d:	01 ca                	add    edx,ecx
c002185f:	8d 4a 54             	lea    ecx,[edx+0x54]
c0021862:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021865:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0021869:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002186c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002186f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021876:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021879:	01 ca                	add    edx,ecx
c002187b:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0021881:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021884:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0021888:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002188b:	83 e8 20             	sub    eax,0x20
c002188e:	eb 1a                	jmp    c00218aa <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0021890:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0021893:	eb 95                	jmp    c002182a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0021895:	83 ec 0c             	sub    esp,0xc
c0021898:	68 fc 6b 02 c0       	push   0xc0026bfc
c002189d:	e8 01 30 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c00218a2:	83 c4 10             	add    esp,0x10
c00218a5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00218aa:	8d 65 f4             	lea    esp,[ebp-0xc]
c00218ad:	5b                   	pop    ebx
c00218ae:	5e                   	pop    esi
c00218af:	5f                   	pop    edi
c00218b0:	5d                   	pop    ebp
c00218b1:	c3                   	ret    

c00218b2 <PIC::disable()>:
c00218b2:	55                   	push   ebp
c00218b3:	89 e5                	mov    ebp,esp
c00218b5:	83 ec 10             	sub    esp,0x10
c00218b8:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00218be:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00218c2:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00218c5:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00218c9:	ee                   	out    dx,al
c00218ca:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00218d0:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00218d4:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00218d7:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00218db:	ee                   	out    dx,al
c00218dc:	90                   	nop
c00218dd:	c9                   	leave  
c00218de:	c3                   	ret    
c00218df:	90                   	nop

c00218e0 <PIC::close(int, int, void*)>:
c00218e0:	55                   	push   ebp
c00218e1:	89 e5                	mov    ebp,esp
c00218e3:	83 ec 08             	sub    esp,0x8
c00218e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00218e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00218eb:	83 c0 3c             	add    eax,0x3c
c00218ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00218f0:	83 ec 0c             	sub    esp,0xc
c00218f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00218f6:	ff d0                	call   eax
c00218f8:	83 c4 10             	add    esp,0x10
c00218fb:	b8 00 00 00 00       	mov    eax,0x0
c0021900:	c9                   	leave  
c0021901:	c3                   	ret    

c0021902 <PIC::PIC()>:
c0021902:	83 ec 0c             	sub    esp,0xc
c0021905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021909:	83 ec 08             	sub    esp,0x8
c002190c:	68 a8 6c 02 c0       	push   0xc0026ca8
c0021911:	50                   	push   eax
c0021912:	e8 e3 d1 fe ff       	call   c000eafa <InterruptController::InterruptController(char const*)>
c0021917:	83 c4 10             	add    esp,0x10
c002191a:	ba d4 6c 02 c0       	mov    edx,0xc0026cd4
c002191f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021923:	89 10                	mov    DWORD PTR [eax],edx
c0021925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021929:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002192f:	0f b6 d0             	movzx  edx,al
c0021932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021936:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c002193d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021941:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021947:	0f b6 d0             	movzx  edx,al
c002194a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002194e:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0021953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021957:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002195d:	8d 50 01             	lea    edx,[eax+0x1]
c0021960:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021964:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002196a:	0f b6 d0             	movzx  edx,al
c002196d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021971:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021975:	83 e1 3f             	and    ecx,0x3f
c0021978:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002197c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021980:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021986:	0f b6 d0             	movzx  edx,al
c0021989:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002198d:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0021994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021998:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002199e:	0f b6 d0             	movzx  edx,al
c00219a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219a5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00219aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219ae:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00219b4:	8d 50 01             	lea    edx,[eax+0x1]
c00219b7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00219bb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00219c1:	0f b6 d0             	movzx  edx,al
c00219c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219c8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00219cc:	83 e1 3f             	and    ecx,0x3f
c00219cf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00219d3:	90                   	nop
c00219d4:	83 c4 0c             	add    esp,0xc
c00219d7:	c3                   	ret    

c00219d8 <PIC::ioWait()>:
c00219d8:	eb 00                	jmp    c00219da <PIC::ioWait()+0x2>
c00219da:	eb 00                	jmp    c00219dc <PIC::ioWait()+0x4>
c00219dc:	90                   	nop
c00219dd:	c3                   	ret    

c00219de <PIC::getIRQReg(int)>:
c00219de:	55                   	push   ebp
c00219df:	89 e5                	mov    ebp,esp
c00219e1:	83 ec 10             	sub    esp,0x10
c00219e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00219e7:	0f b6 c0             	movzx  eax,al
c00219ea:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00219f0:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c00219f3:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00219f6:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00219fa:	ee                   	out    dx,al
c00219fb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00219fe:	0f b6 c0             	movzx  eax,al
c0021a01:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0021a07:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0021a0a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021a0d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021a11:	ee                   	out    dx,al
c0021a12:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0021a18:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0021a1c:	89 c2                	mov    edx,eax
c0021a1e:	ec                   	in     al,dx
c0021a1f:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0021a22:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021a25:	0f b6 c0             	movzx  eax,al
c0021a28:	c1 e0 08             	shl    eax,0x8
c0021a2b:	89 c1                	mov    ecx,eax
c0021a2d:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0021a33:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0021a37:	89 c2                	mov    edx,eax
c0021a39:	ec                   	in     al,dx
c0021a3a:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0021a3d:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021a40:	0f b6 c0             	movzx  eax,al
c0021a43:	09 c8                	or     eax,ecx
c0021a45:	c9                   	leave  
c0021a46:	c3                   	ret    
c0021a47:	90                   	nop

c0021a48 <PIC::eoi(unsigned char)>:
c0021a48:	55                   	push   ebp
c0021a49:	89 e5                	mov    ebp,esp
c0021a4b:	83 ec 14             	sub    esp,0x14
c0021a4e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a51:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0021a54:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0021a58:	75 1e                	jne    c0021a78 <PIC::eoi(unsigned char)+0x30>
c0021a5a:	6a 0b                	push   0xb
c0021a5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021a5f:	e8 7a ff ff ff       	call   c00219de <PIC::getIRQReg(int)>
c0021a64:	83 c4 08             	add    esp,0x8
c0021a67:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0021a6b:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0021a6f:	25 80 00 00 00       	and    eax,0x80
c0021a74:	85 c0                	test   eax,eax
c0021a76:	74 5f                	je     c0021ad7 <PIC::eoi(unsigned char)+0x8f>
c0021a78:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0021a7c:	75 2d                	jne    c0021aab <PIC::eoi(unsigned char)+0x63>
c0021a7e:	6a 0b                	push   0xb
c0021a80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021a83:	e8 56 ff ff ff       	call   c00219de <PIC::getIRQReg(int)>
c0021a88:	83 c4 08             	add    esp,0x8
c0021a8b:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0021a8f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021a92:	66 85 c0             	test   ax,ax
c0021a95:	78 14                	js     c0021aab <PIC::eoi(unsigned char)+0x63>
c0021a97:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0021a9d:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0021aa1:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021aa4:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0021aa8:	ee                   	out    dx,al
c0021aa9:	eb 2d                	jmp    c0021ad8 <PIC::eoi(unsigned char)+0x90>
c0021aab:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0021aaf:	76 12                	jbe    c0021ac3 <PIC::eoi(unsigned char)+0x7b>
c0021ab1:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0021ab7:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0021abb:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021abe:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021ac2:	ee                   	out    dx,al
c0021ac3:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0021ac9:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0021acd:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021ad0:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021ad4:	ee                   	out    dx,al
c0021ad5:	eb 01                	jmp    c0021ad8 <PIC::eoi(unsigned char)+0x90>
c0021ad7:	90                   	nop
c0021ad8:	c9                   	leave  
c0021ad9:	c3                   	ret    

c0021ada <PIC::remap()>:
c0021ada:	55                   	push   ebp
c0021adb:	89 e5                	mov    ebp,esp
c0021add:	83 ec 48             	sub    esp,0x48
c0021ae0:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0021ae7:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0021aee:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0021af4:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0021af7:	89 c2                	mov    edx,eax
c0021af9:	ec                   	in     al,dx
c0021afa:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0021afd:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0021b00:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0021b03:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0021b09:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0021b0c:	89 c2                	mov    edx,eax
c0021b0e:	ec                   	in     al,dx
c0021b0f:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0021b12:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0021b15:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0021b18:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0021b1e:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0021b22:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0021b25:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0021b28:	ee                   	out    dx,al
c0021b29:	83 ec 0c             	sub    esp,0xc
c0021b2c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021b2f:	e8 a4 fe ff ff       	call   c00219d8 <PIC::ioWait()>
c0021b34:	83 c4 10             	add    esp,0x10
c0021b37:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0021b3d:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0021b41:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0021b44:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021b47:	ee                   	out    dx,al
c0021b48:	83 ec 0c             	sub    esp,0xc
c0021b4b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021b4e:	e8 85 fe ff ff       	call   c00219d8 <PIC::ioWait()>
c0021b53:	83 c4 10             	add    esp,0x10
c0021b56:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021b59:	0f b6 c0             	movzx  eax,al
c0021b5c:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0021b62:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0021b65:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0021b68:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0021b6b:	ee                   	out    dx,al
c0021b6c:	83 ec 0c             	sub    esp,0xc
c0021b6f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021b72:	e8 61 fe ff ff       	call   c00219d8 <PIC::ioWait()>
c0021b77:	83 c4 10             	add    esp,0x10
c0021b7a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021b7d:	0f b6 c0             	movzx  eax,al
c0021b80:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0021b86:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0021b89:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0021b8c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0021b8f:	ee                   	out    dx,al
c0021b90:	83 ec 0c             	sub    esp,0xc
c0021b93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021b96:	e8 3d fe ff ff       	call   c00219d8 <PIC::ioWait()>
c0021b9b:	83 c4 10             	add    esp,0x10
c0021b9e:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0021ba4:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0021ba8:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0021bab:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0021bae:	ee                   	out    dx,al
c0021baf:	83 ec 0c             	sub    esp,0xc
c0021bb2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021bb5:	e8 1e fe ff ff       	call   c00219d8 <PIC::ioWait()>
c0021bba:	83 c4 10             	add    esp,0x10
c0021bbd:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0021bc3:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0021bc7:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0021bca:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021bcd:	ee                   	out    dx,al
c0021bce:	83 ec 0c             	sub    esp,0xc
c0021bd1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021bd4:	e8 ff fd ff ff       	call   c00219d8 <PIC::ioWait()>
c0021bd9:	83 c4 10             	add    esp,0x10
c0021bdc:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0021be2:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0021be6:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0021be9:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0021bec:	ee                   	out    dx,al
c0021bed:	83 ec 0c             	sub    esp,0xc
c0021bf0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021bf3:	e8 e0 fd ff ff       	call   c00219d8 <PIC::ioWait()>
c0021bf8:	83 c4 10             	add    esp,0x10
c0021bfb:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0021c01:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0021c05:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0021c08:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0021c0b:	ee                   	out    dx,al
c0021c0c:	83 ec 0c             	sub    esp,0xc
c0021c0f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021c12:	e8 c1 fd ff ff       	call   c00219d8 <PIC::ioWait()>
c0021c17:	83 c4 10             	add    esp,0x10
c0021c1a:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0021c1e:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0021c24:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0021c27:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0021c2a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0021c2d:	ee                   	out    dx,al
c0021c2e:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0021c32:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0021c38:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0021c3b:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0021c3e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0021c41:	ee                   	out    dx,al
c0021c42:	90                   	nop
c0021c43:	c9                   	leave  
c0021c44:	c3                   	ret    
c0021c45:	90                   	nop

c0021c46 <PIC::open(int, int, void*)>:
c0021c46:	55                   	push   ebp
c0021c47:	89 e5                	mov    ebp,esp
c0021c49:	83 ec 18             	sub    esp,0x18
c0021c4c:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0021c52:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0021c56:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021c59:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021c5d:	ee                   	out    dx,al
c0021c5e:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0021c64:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0021c68:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021c6b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021c6f:	ee                   	out    dx,al
c0021c70:	83 ec 0c             	sub    esp,0xc
c0021c73:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021c76:	e8 5f fe ff ff       	call   c0021ada <PIC::remap()>
c0021c7b:	83 c4 10             	add    esp,0x10
c0021c7e:	b8 00 00 00 00       	mov    eax,0x0
c0021c83:	c9                   	leave  
c0021c84:	c3                   	ret    
c0021c85:	66 90                	xchg   ax,ax
c0021c87:	90                   	nop

c0021c88 <APICTimer::close(int, int, void*)>:
c0021c88:	b8 00 00 00 00       	mov    eax,0x0
c0021c8d:	c3                   	ret    
c0021c8e:	66 90                	xchg   ax,ax

c0021c90 <apicTimerHandler(regs*, void*)>:
c0021c90:	83 ec 0c             	sub    esp,0xc
c0021c93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021c97:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021c99:	b8 10 27 00 00       	mov    eax,0x2710
c0021c9e:	ba 00 00 00 00       	mov    edx,0x0
c0021ca3:	f7 f1                	div    ecx
c0021ca5:	83 ec 0c             	sub    esp,0xc
c0021ca8:	50                   	push   eax
c0021ca9:	e8 57 ed fe ff       	call   c0010a05 <timerHandler(unsigned int)>
c0021cae:	83 c4 10             	add    esp,0x10
c0021cb1:	90                   	nop
c0021cb2:	83 c4 0c             	add    esp,0xc
c0021cb5:	c3                   	ret    
c0021cb6:	66 90                	xchg   ax,ax

c0021cb8 <APICTimer::write(int)>:
c0021cb8:	83 ec 1c             	sub    esp,0x1c
c0021cbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021cbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021cc3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021cc9:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c0021cce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021cd4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0021cda:	83 ec 0c             	sub    esp,0xc
c0021cdd:	50                   	push   eax
c0021cde:	e8 e1 f4 ff ff       	call   c00211c4 <APIC::getBase()>
c0021ce3:	83 c4 10             	add    esp,0x10
c0021ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021cea:	a1 6c 81 02 c0       	mov    eax,ds:0xc002816c
c0021cef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021cf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021cf7:	05 e0 03 00 00       	add    eax,0x3e0
c0021cfc:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0021d02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d06:	05 80 03 00 00       	add    eax,0x380
c0021d0b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0021d11:	fb                   	sti    
c0021d12:	66 90                	xchg   ax,ax
c0021d14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021d18:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c0021d1e:	a1 6c 81 02 c0       	mov    eax,ds:0xc002816c
c0021d23:	39 c2                	cmp    edx,eax
c0021d25:	76 05                	jbe    c0021d2c <APICTimer::write(int)+0x74>
c0021d27:	eb eb                	jmp    c0021d14 <APICTimer::write(int)+0x5c>
c0021d29:	8d 76 00             	lea    esi,[esi+0x0]
c0021d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d30:	05 20 03 00 00       	add    eax,0x320
c0021d35:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0021d3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d3f:	05 90 03 00 00       	add    eax,0x390
c0021d44:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d46:	f7 d0                	not    eax
c0021d48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021d4c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021d50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d54:	ba 00 00 00 00       	mov    edx,0x0
c0021d59:	f7 f1                	div    ecx
c0021d5b:	89 04 24             	mov    DWORD PTR [esp],eax
c0021d5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d62:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021d68:	0d 00 00 02 00       	or     eax,0x20000
c0021d6d:	89 c2                	mov    edx,eax
c0021d6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d73:	05 20 03 00 00       	add    eax,0x320
c0021d78:	89 10                	mov    DWORD PTR [eax],edx
c0021d7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d7e:	05 e0 03 00 00       	add    eax,0x3e0
c0021d83:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0021d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d8d:	05 80 03 00 00       	add    eax,0x380
c0021d92:	89 c2                	mov    edx,eax
c0021d94:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021d97:	89 02                	mov    DWORD PTR [edx],eax
c0021d99:	90                   	nop
c0021d9a:	83 c4 1c             	add    esp,0x1c
c0021d9d:	c3                   	ret    
c0021d9e:	66 90                	xchg   ax,ax

c0021da0 <APICTimer::open(int, int, void*)>:
c0021da0:	57                   	push   edi
c0021da1:	56                   	push   esi
c0021da2:	53                   	push   ebx
c0021da3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021da7:	8b 00                	mov    eax,DWORD PTR [eax]
c0021da9:	83 c0 24             	add    eax,0x24
c0021dac:	8b 00                	mov    eax,DWORD PTR [eax]
c0021dae:	83 ec 08             	sub    esp,0x8
c0021db1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021db5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021db9:	ff d0                	call   eax
c0021dbb:	83 c4 10             	add    esp,0x10
c0021dbe:	a1 48 7b 02 c0       	mov    eax,ds:0xc0027b48
c0021dc3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021dc9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0021dcf:	83 ec 0c             	sub    esp,0xc
c0021dd2:	50                   	push   eax
c0021dd3:	e8 ec f3 ff ff       	call   c00211c4 <APIC::getBase()>
c0021dd8:	83 c4 10             	add    esp,0x10
c0021ddb:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0021de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021de5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021deb:	0f b6 f8             	movzx  edi,al
c0021dee:	89 d0                	mov    eax,edx
c0021df0:	ba 00 00 00 00       	mov    edx,0x0
c0021df5:	89 c1                	mov    ecx,eax
c0021df7:	80 e5 ff             	and    ch,0xff
c0021dfa:	89 cb                	mov    ebx,ecx
c0021dfc:	0f b6 f2             	movzx  esi,dl
c0021dff:	89 d8                	mov    eax,ebx
c0021e01:	89 f2                	mov    edx,esi
c0021e03:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021e07:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021e0a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021e0e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021e12:	83 e0 00             	and    eax,0x0
c0021e15:	09 d0                	or     eax,edx
c0021e17:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021e1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e1f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021e25:	8d 50 01             	lea    edx,[eax+0x1]
c0021e28:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021e2c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021e32:	0f b6 d0             	movzx  edx,al
c0021e35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e39:	83 c2 08             	add    edx,0x8
c0021e3c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021e40:	0f b6 c9             	movzx  ecx,cl
c0021e43:	81 c9 00 00 01 00    	or     ecx,0x10000
c0021e49:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021e4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e51:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021e55:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021e5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e5f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021e63:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0021e69:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021e6d:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0021e73:	83 ec 0c             	sub    esp,0xc
c0021e76:	51                   	push   ecx
c0021e77:	6a 01                	push   0x1
c0021e79:	68 90 1c 02 c0       	push   0xc0021c90
c0021e7e:	52                   	push   edx
c0021e7f:	50                   	push   eax
c0021e80:	e8 71 c2 fe ff       	call   c000e0f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021e85:	83 c4 20             	add    esp,0x20
c0021e88:	89 c2                	mov    edx,eax
c0021e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e8e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021e94:	b8 00 00 00 00       	mov    eax,0x0
c0021e99:	5b                   	pop    ebx
c0021e9a:	5e                   	pop    esi
c0021e9b:	5f                   	pop    edi
c0021e9c:	c3                   	ret    
c0021e9d:	90                   	nop
c0021e9e:	66 90                	xchg   ax,ax

c0021ea0 <APICTimer::APICTimer()>:
c0021ea0:	83 ec 0c             	sub    esp,0xc
c0021ea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ea7:	83 ec 08             	sub    esp,0x8
c0021eaa:	68 14 6d 02 c0       	push   0xc0026d14
c0021eaf:	50                   	push   eax
c0021eb0:	e8 bf ea fe ff       	call   c0010974 <Timer::Timer(char const*)>
c0021eb5:	83 c4 10             	add    esp,0x10
c0021eb8:	ba 28 6d 02 c0       	mov    edx,0xc0026d28
c0021ebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ec1:	89 10                	mov    DWORD PTR [eax],edx
c0021ec3:	90                   	nop
c0021ec4:	83 c4 0c             	add    esp,0xc
c0021ec7:	c3                   	ret    

c0021ec8 <PIT::write(int)>:
c0021ec8:	83 ec 10             	sub    esp,0x10
c0021ecb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021ecf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021ed3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021ed9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021edd:	a3 84 9a 02 c0       	mov    ds:0xc0029a84,eax
c0021ee2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0021ee7:	99                   	cdq    
c0021ee8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0021eec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021ef0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0021ef7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0021efc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0021f00:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0021f05:	ee                   	out    dx,al
c0021f06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f0a:	0f b6 c0             	movzx  eax,al
c0021f0d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0021f14:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0021f18:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0021f1c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0021f21:	ee                   	out    dx,al
c0021f22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f26:	c1 f8 08             	sar    eax,0x8
c0021f29:	0f b6 c0             	movzx  eax,al
c0021f2c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0021f33:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0021f37:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0021f3b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0021f40:	ee                   	out    dx,al
c0021f41:	90                   	nop
c0021f42:	83 c4 10             	add    esp,0x10
c0021f45:	c3                   	ret    
c0021f46:	66 90                	xchg   ax,ax

c0021f48 <pitHandler(regs*, void*)>:
c0021f48:	83 ec 0c             	sub    esp,0xc
c0021f4b:	8b 0d 84 9a 02 c0    	mov    ecx,DWORD PTR ds:0xc0029a84
c0021f51:	b8 a0 86 01 00       	mov    eax,0x186a0
c0021f56:	99                   	cdq    
c0021f57:	f7 f9                	idiv   ecx
c0021f59:	83 ec 0c             	sub    esp,0xc
c0021f5c:	50                   	push   eax
c0021f5d:	e8 a3 ea fe ff       	call   c0010a05 <timerHandler(unsigned int)>
c0021f62:	83 c4 10             	add    esp,0x10
c0021f65:	90                   	nop
c0021f66:	83 c4 0c             	add    esp,0xc
c0021f69:	c3                   	ret    
c0021f6a:	66 90                	xchg   ax,ax

c0021f6c <PIT::open(int, int, void*)>:
c0021f6c:	83 ec 0c             	sub    esp,0xc
c0021f6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f73:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f75:	83 c0 24             	add    eax,0x24
c0021f78:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f7a:	83 ec 08             	sub    esp,0x8
c0021f7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f85:	ff d0                	call   eax
c0021f87:	83 c4 10             	add    esp,0x10
c0021f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f8e:	83 ec 0c             	sub    esp,0xc
c0021f91:	6a 00                	push   0x0
c0021f93:	6a 01                	push   0x1
c0021f95:	68 48 1f 02 c0       	push   0xc0021f48
c0021f9a:	6a 00                	push   0x0
c0021f9c:	50                   	push   eax
c0021f9d:	e8 54 c1 fe ff       	call   c000e0f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021fa2:	83 c4 20             	add    esp,0x20
c0021fa5:	89 c2                	mov    edx,eax
c0021fa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fab:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021fb1:	b8 00 00 00 00       	mov    eax,0x0
c0021fb6:	83 c4 0c             	add    esp,0xc
c0021fb9:	c3                   	ret    
c0021fba:	66 90                	xchg   ax,ax

c0021fbc <PIT::close(int, int, void*)>:
c0021fbc:	83 ec 0c             	sub    esp,0xc
c0021fbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fc3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0021fcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fd1:	6a 01                	push   0x1
c0021fd3:	68 48 1f 02 c0       	push   0xc0021f48
c0021fd8:	6a 00                	push   0x0
c0021fda:	50                   	push   eax
c0021fdb:	e8 60 c1 fe ff       	call   c000e140 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0021fe0:	83 c4 10             	add    esp,0x10
c0021fe3:	b8 00 00 00 00       	mov    eax,0x0
c0021fe8:	83 c4 0c             	add    esp,0xc
c0021feb:	c3                   	ret    

c0021fec <PIT::PIT()>:
c0021fec:	83 ec 0c             	sub    esp,0xc
c0021fef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ff3:	83 ec 08             	sub    esp,0x8
c0021ff6:	68 50 6d 02 c0       	push   0xc0026d50
c0021ffb:	50                   	push   eax
c0021ffc:	e8 73 e9 fe ff       	call   c0010974 <Timer::Timer(char const*)>
c0022001:	83 c4 10             	add    esp,0x10
c0022004:	ba 78 6d 02 c0       	mov    edx,0xc0026d78
c0022009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002200d:	89 10                	mov    DWORD PTR [eax],edx
c002200f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022013:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022019:	0f b6 d0             	movzx  edx,al
c002201c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022020:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0022027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002202b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022031:	0f b6 d0             	movzx  edx,al
c0022034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022038:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002203d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022041:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022047:	8d 50 01             	lea    edx,[eax+0x1]
c002204a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002204e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022054:	0f b6 d0             	movzx  edx,al
c0022057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002205b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002205f:	83 e1 3f             	and    ecx,0x3f
c0022062:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022066:	90                   	nop
c0022067:	83 c4 0c             	add    esp,0xc
c002206a:	c3                   	ret    
c002206b:	66 90                	xchg   ax,ax
c002206d:	66 90                	xchg   ax,ax
c002206f:	90                   	nop

c0022070 <avxDetect>:
c0022070:	b8 00 00 00 00       	mov    eax,0x0
c0022075:	c3                   	ret    

c0022076 <avxSave>:
c0022076:	c3                   	ret    

c0022077 <avxLoad>:
c0022077:	c3                   	ret    

c0022078 <avxInit>:
c0022078:	c3                   	ret    

c0022079 <avxClose>:
c0022079:	c3                   	ret    

c002207a <wouldSheSayYes>:
c002207a:	c3                   	ret    
c002207b:	49                   	dec    ecx
c002207c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0022080:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0022084:	75 20                	jne    c00220a6 <sseDetect.noSSE+0x1>
c0022086:	4e                   	dec    esi
c0022087:	79 61                	jns    c00220ea <x87Detect+0x14>
c0022089:	68 2e 2e 2e 00       	push   0x2e2e2e
c002208e:	66 90                	xchg   ax,ax

c0022090 <absolutelyNoChanceInHell>:
c0022090:	b8 01 00 00 00       	mov    eax,0x1
c0022095:	0f a2                	cpuid  
c0022097:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002209d:	74 06                	je     c00220a5 <sseDetect.noSSE>
c002209f:	b8 01 00 00 00       	mov    eax,0x1
c00220a4:	c3                   	ret    

c00220a5 <sseDetect.noSSE>:
c00220a5:	31 c0                	xor    eax,eax
c00220a7:	c3                   	ret    

c00220a8 <sseSave>:
c00220a8:	0f ae 44 24 04       	fxsave [esp+0x4]
c00220ad:	c3                   	ret    

c00220ae <sseLoad>:
c00220ae:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c00220b3:	c3                   	ret    

c00220b4 <sseInit>:
c00220b4:	e8 49 00 00 00       	call   c0022102 <x87Init>
c00220b9:	0f 20 e0             	mov    eax,cr4
c00220bc:	66 0d 00 06          	or     ax,0x600
c00220c0:	0f 22 e0             	mov    cr4,eax
c00220c3:	c3                   	ret    

c00220c4 <sseClose>:
c00220c4:	c3                   	ret    
c00220c5:	66 90                	xchg   ax,ax
c00220c7:	66 90                	xchg   ax,ax
c00220c9:	66 90                	xchg   ax,ax
c00220cb:	66 90                	xchg   ax,ax
c00220cd:	66 90                	xchg   ax,ax
c00220cf:	90                   	nop

c00220d0 <value_37F>:
c00220d0:	7f 03                	jg     c00220d5 <value_37A+0x1>

c00220d2 <value_37E>:
c00220d2:	7e 03                	jle    c00220d7 <x87Detect+0x1>

c00220d4 <value_37A>:
c00220d4:	7a 03                	jp     c00220d9 <x87Detect+0x3>

c00220d6 <x87Detect>:
c00220d6:	b8 01 00 00 00       	mov    eax,0x1
c00220db:	0f a2                	cpuid  
c00220dd:	f7 c2 01 00 00 00    	test   edx,0x1
c00220e3:	74 06                	je     c00220eb <x87Detect.nox87>
c00220e5:	b8 01 00 00 00       	mov    eax,0x1
c00220ea:	c3                   	ret    

c00220eb <x87Detect.nox87>:
c00220eb:	b8 00 00 00 00       	mov    eax,0x0
c00220f0:	c3                   	ret    

c00220f1 <x87Save>:
c00220f1:	55                   	push   ebp
c00220f2:	89 e5                	mov    ebp,esp
c00220f4:	9b dd 75 08          	fsave  [ebp+0x8]
c00220f8:	c9                   	leave  
c00220f9:	c3                   	ret    

c00220fa <x87Load>:
c00220fa:	55                   	push   ebp
c00220fb:	89 e5                	mov    ebp,esp
c00220fd:	dd 65 08             	frstor [ebp+0x8]
c0022100:	c9                   	leave  
c0022101:	c3                   	ret    

c0022102 <x87Init>:
c0022102:	9b db e3             	finit  
c0022105:	0f 20 c0             	mov    eax,cr0
c0022108:	66 25 fb ff          	and    ax,0xfffb
c002210c:	66 0d 22 00          	or     ax,0x22
c0022110:	0f 22 c0             	mov    cr0,eax
c0022113:	0f 06                	clts   
c0022115:	d9 2d d4 20 02 c0    	fldcw  WORD PTR ds:0xc00220d4
c002211b:	c3                   	ret    

c002211c <x87Close>:
c002211c:	c3                   	ret    
c002211d:	66 90                	xchg   ax,ax
c002211f:	90                   	nop

c0022120 <__do_global_ctors_aux>:
c0022120:	a1 bc 32 02 c0       	mov    eax,ds:0xc00232bc
c0022125:	83 f8 ff             	cmp    eax,0xffffffff
c0022128:	74 1a                	je     c0022144 <__do_global_ctors_aux+0x24>
c002212a:	55                   	push   ebp
c002212b:	89 e5                	mov    ebp,esp
c002212d:	53                   	push   ebx
c002212e:	52                   	push   edx
c002212f:	bb bc 32 02 c0       	mov    ebx,0xc00232bc
c0022134:	ff d0                	call   eax
c0022136:	83 eb 04             	sub    ebx,0x4
c0022139:	8b 03                	mov    eax,DWORD PTR [ebx]
c002213b:	83 f8 ff             	cmp    eax,0xffffffff
c002213e:	75 f4                	jne    c0022134 <__do_global_ctors_aux+0x14>
c0022140:	58                   	pop    eax
c0022141:	5b                   	pop    ebx
c0022142:	5d                   	pop    ebp
c0022143:	c3                   	ret    
c0022144:	c3                   	ret    
c0022145:	66 90                	xchg   ax,ax
c0022147:	90                   	nop

c0022148 <__divdi3>:
c0022148:	55                   	push   ebp
c0022149:	57                   	push   edi
c002214a:	56                   	push   esi
c002214b:	53                   	push   ebx
c002214c:	83 ec 1c             	sub    esp,0x1c
c002214f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0022153:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022157:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002215a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002215e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022162:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022166:	85 db                	test   ebx,ebx
c0022168:	0f 88 8e 00 00 00    	js     c00221fc <__divdi3+0xb4>
c002216e:	89 dd                	mov    ebp,ebx
c0022170:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022178:	89 d3                	mov    ebx,edx
c002217a:	85 d2                	test   edx,edx
c002217c:	79 0d                	jns    c002218b <__divdi3+0x43>
c002217e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0022182:	f7 d8                	neg    eax
c0022184:	83 d2 00             	adc    edx,0x0
c0022187:	f7 da                	neg    edx
c0022189:	89 d3                	mov    ebx,edx
c002218b:	89 c7                	mov    edi,eax
c002218d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022190:	85 db                	test   ebx,ebx
c0022192:	75 48                	jne    c00221dc <__divdi3+0x94>
c0022194:	39 ef                	cmp    edi,ebp
c0022196:	76 24                	jbe    c00221bc <__divdi3+0x74>
c0022198:	89 ea                	mov    edx,ebp
c002219a:	f7 f7                	div    edi
c002219c:	89 c1                	mov    ecx,eax
c002219e:	31 f6                	xor    esi,esi
c00221a0:	89 c8                	mov    eax,ecx
c00221a2:	89 f2                	mov    edx,esi
c00221a4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00221a8:	85 c9                	test   ecx,ecx
c00221aa:	74 07                	je     c00221b3 <__divdi3+0x6b>
c00221ac:	f7 d8                	neg    eax
c00221ae:	83 d2 00             	adc    edx,0x0
c00221b1:	f7 da                	neg    edx
c00221b3:	83 c4 1c             	add    esp,0x1c
c00221b6:	5b                   	pop    ebx
c00221b7:	5e                   	pop    esi
c00221b8:	5f                   	pop    edi
c00221b9:	5d                   	pop    ebp
c00221ba:	c3                   	ret    
c00221bb:	90                   	nop
c00221bc:	85 ff                	test   edi,edi
c00221be:	75 0b                	jne    c00221cb <__divdi3+0x83>
c00221c0:	b8 01 00 00 00       	mov    eax,0x1
c00221c5:	31 d2                	xor    edx,edx
c00221c7:	f7 f3                	div    ebx
c00221c9:	89 c7                	mov    edi,eax
c00221cb:	31 d2                	xor    edx,edx
c00221cd:	89 e8                	mov    eax,ebp
c00221cf:	f7 f7                	div    edi
c00221d1:	89 c6                	mov    esi,eax
c00221d3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00221d6:	f7 f7                	div    edi
c00221d8:	89 c1                	mov    ecx,eax
c00221da:	eb c4                	jmp    c00221a0 <__divdi3+0x58>
c00221dc:	39 eb                	cmp    ebx,ebp
c00221de:	77 3c                	ja     c002221c <__divdi3+0xd4>
c00221e0:	0f bd f3             	bsr    esi,ebx
c00221e3:	83 f6 1f             	xor    esi,0x1f
c00221e6:	75 40                	jne    c0022228 <__divdi3+0xe0>
c00221e8:	39 eb                	cmp    ebx,ebp
c00221ea:	72 09                	jb     c00221f5 <__divdi3+0xad>
c00221ec:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00221ef:	0f 87 97 00 00 00    	ja     c002228c <__divdi3+0x144>
c00221f5:	b9 01 00 00 00       	mov    ecx,0x1
c00221fa:	eb a4                	jmp    c00221a0 <__divdi3+0x58>
c00221fc:	f7 d9                	neg    ecx
c00221fe:	83 d3 00             	adc    ebx,0x0
c0022201:	f7 db                	neg    ebx
c0022203:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022206:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002220a:	89 dd                	mov    ebp,ebx
c002220c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0022214:	e9 5f ff ff ff       	jmp    c0022178 <__divdi3+0x30>
c0022219:	8d 76 00             	lea    esi,[esi+0x0]
c002221c:	31 f6                	xor    esi,esi
c002221e:	31 c9                	xor    ecx,ecx
c0022220:	e9 7b ff ff ff       	jmp    c00221a0 <__divdi3+0x58>
c0022225:	8d 76 00             	lea    esi,[esi+0x0]
c0022228:	b8 20 00 00 00       	mov    eax,0x20
c002222d:	29 f0                	sub    eax,esi
c002222f:	89 f1                	mov    ecx,esi
c0022231:	d3 e3                	shl    ebx,cl
c0022233:	89 fa                	mov    edx,edi
c0022235:	88 c1                	mov    cl,al
c0022237:	d3 ea                	shr    edx,cl
c0022239:	09 da                	or     edx,ebx
c002223b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002223f:	89 f1                	mov    ecx,esi
c0022241:	d3 e7                	shl    edi,cl
c0022243:	89 eb                	mov    ebx,ebp
c0022245:	88 c1                	mov    cl,al
c0022247:	d3 eb                	shr    ebx,cl
c0022249:	89 f1                	mov    ecx,esi
c002224b:	d3 e5                	shl    ebp,cl
c002224d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0022250:	88 c1                	mov    cl,al
c0022252:	d3 ea                	shr    edx,cl
c0022254:	09 d5                	or     ebp,edx
c0022256:	89 e8                	mov    eax,ebp
c0022258:	89 da                	mov    edx,ebx
c002225a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002225e:	89 d3                	mov    ebx,edx
c0022260:	89 c5                	mov    ebp,eax
c0022262:	f7 e7                	mul    edi
c0022264:	39 d3                	cmp    ebx,edx
c0022266:	72 18                	jb     c0022280 <__divdi3+0x138>
c0022268:	74 0a                	je     c0022274 <__divdi3+0x12c>
c002226a:	89 e9                	mov    ecx,ebp
c002226c:	31 f6                	xor    esi,esi
c002226e:	e9 2d ff ff ff       	jmp    c00221a0 <__divdi3+0x58>
c0022273:	90                   	nop
c0022274:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022277:	89 f1                	mov    ecx,esi
c0022279:	d3 e7                	shl    edi,cl
c002227b:	39 c7                	cmp    edi,eax
c002227d:	73 eb                	jae    c002226a <__divdi3+0x122>
c002227f:	90                   	nop
c0022280:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0022283:	31 f6                	xor    esi,esi
c0022285:	e9 16 ff ff ff       	jmp    c00221a0 <__divdi3+0x58>
c002228a:	66 90                	xchg   ax,ax
c002228c:	31 c9                	xor    ecx,ecx
c002228e:	e9 0d ff ff ff       	jmp    c00221a0 <__divdi3+0x58>
c0022293:	90                   	nop

c0022294 <__moddi3>:
c0022294:	55                   	push   ebp
c0022295:	57                   	push   edi
c0022296:	56                   	push   esi
c0022297:	53                   	push   ebx
c0022298:	83 ec 2c             	sub    esp,0x2c
c002229b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002229f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00222a3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00222a7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00222ab:	85 db                	test   ebx,ebx
c00222ad:	0f 88 85 00 00 00    	js     c0022338 <__moddi3+0xa4>
c00222b3:	89 de                	mov    esi,ebx
c00222b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00222bd:	89 d7                	mov    edi,edx
c00222bf:	85 d2                	test   edx,edx
c00222c1:	79 09                	jns    c00222cc <__moddi3+0x38>
c00222c3:	f7 d8                	neg    eax
c00222c5:	83 d2 00             	adc    edx,0x0
c00222c8:	f7 da                	neg    edx
c00222ca:	89 d7                	mov    edi,edx
c00222cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00222d0:	89 cd                	mov    ebp,ecx
c00222d2:	85 ff                	test   edi,edi
c00222d4:	75 52                	jne    c0022328 <__moddi3+0x94>
c00222d6:	89 c3                	mov    ebx,eax
c00222d8:	39 f0                	cmp    eax,esi
c00222da:	76 24                	jbe    c0022300 <__moddi3+0x6c>
c00222dc:	89 c8                	mov    eax,ecx
c00222de:	89 f2                	mov    edx,esi
c00222e0:	f7 f3                	div    ebx
c00222e2:	89 d6                	mov    esi,edx
c00222e4:	89 f0                	mov    eax,esi
c00222e6:	31 d2                	xor    edx,edx
c00222e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00222ec:	85 c9                	test   ecx,ecx
c00222ee:	74 07                	je     c00222f7 <__moddi3+0x63>
c00222f0:	f7 d8                	neg    eax
c00222f2:	83 d2 00             	adc    edx,0x0
c00222f5:	f7 da                	neg    edx
c00222f7:	83 c4 2c             	add    esp,0x2c
c00222fa:	5b                   	pop    ebx
c00222fb:	5e                   	pop    esi
c00222fc:	5f                   	pop    edi
c00222fd:	5d                   	pop    ebp
c00222fe:	c3                   	ret    
c00222ff:	90                   	nop
c0022300:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022304:	85 db                	test   ebx,ebx
c0022306:	75 0d                	jne    c0022315 <__moddi3+0x81>
c0022308:	b8 01 00 00 00       	mov    eax,0x1
c002230d:	31 d2                	xor    edx,edx
c002230f:	f7 f7                	div    edi
c0022311:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022315:	89 f0                	mov    eax,esi
c0022317:	31 d2                	xor    edx,edx
c0022319:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002231d:	f7 f7                	div    edi
c002231f:	89 e8                	mov    eax,ebp
c0022321:	f7 f7                	div    edi
c0022323:	89 d6                	mov    esi,edx
c0022325:	eb bd                	jmp    c00222e4 <__moddi3+0x50>
c0022327:	90                   	nop
c0022328:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002232c:	39 f7                	cmp    edi,esi
c002232e:	76 20                	jbe    c0022350 <__moddi3+0xbc>
c0022330:	89 c8                	mov    eax,ecx
c0022332:	89 f2                	mov    edx,esi
c0022334:	eb b2                	jmp    c00222e8 <__moddi3+0x54>
c0022336:	66 90                	xchg   ax,ax
c0022338:	f7 d9                	neg    ecx
c002233a:	83 d3 00             	adc    ebx,0x0
c002233d:	f7 db                	neg    ebx
c002233f:	89 de                	mov    esi,ebx
c0022341:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0022349:	e9 6f ff ff ff       	jmp    c00222bd <__moddi3+0x29>
c002234e:	66 90                	xchg   ax,ax
c0022350:	0f bd c7             	bsr    eax,edi
c0022353:	83 f0 1f             	xor    eax,0x1f
c0022356:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002235a:	75 24                	jne    c0022380 <__moddi3+0xec>
c002235c:	39 f7                	cmp    edi,esi
c002235e:	72 06                	jb     c0022366 <__moddi3+0xd2>
c0022360:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0022364:	77 0c                	ja     c0022372 <__moddi3+0xde>
c0022366:	89 e9                	mov    ecx,ebp
c0022368:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002236c:	19 fe                	sbb    esi,edi
c002236e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022372:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022376:	89 f2                	mov    edx,esi
c0022378:	e9 6b ff ff ff       	jmp    c00222e8 <__moddi3+0x54>
c002237d:	8d 76 00             	lea    esi,[esi+0x0]
c0022380:	b8 20 00 00 00       	mov    eax,0x20
c0022385:	89 c2                	mov    edx,eax
c0022387:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002238b:	29 da                	sub    edx,ebx
c002238d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022391:	88 d9                	mov    cl,bl
c0022393:	d3 e7                	shl    edi,cl
c0022395:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022399:	88 d1                	mov    cl,dl
c002239b:	d3 e8                	shr    eax,cl
c002239d:	09 c7                	or     edi,eax
c002239f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00223a3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00223a7:	89 d8                	mov    eax,ebx
c00223a9:	88 d9                	mov    cl,bl
c00223ab:	d3 e7                	shl    edi,cl
c00223ad:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00223b1:	89 f3                	mov    ebx,esi
c00223b3:	88 d1                	mov    cl,dl
c00223b5:	d3 eb                	shr    ebx,cl
c00223b7:	89 c7                	mov    edi,eax
c00223b9:	88 c1                	mov    cl,al
c00223bb:	d3 e6                	shl    esi,cl
c00223bd:	89 e8                	mov    eax,ebp
c00223bf:	88 d1                	mov    cl,dl
c00223c1:	d3 e8                	shr    eax,cl
c00223c3:	09 f0                	or     eax,esi
c00223c5:	89 f9                	mov    ecx,edi
c00223c7:	d3 e5                	shl    ebp,cl
c00223c9:	89 da                	mov    edx,ebx
c00223cb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00223cf:	89 d3                	mov    ebx,edx
c00223d1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00223d5:	89 c6                	mov    esi,eax
c00223d7:	89 d1                	mov    ecx,edx
c00223d9:	39 d3                	cmp    ebx,edx
c00223db:	72 27                	jb     c0022404 <__moddi3+0x170>
c00223dd:	74 21                	je     c0022400 <__moddi3+0x16c>
c00223df:	29 f5                	sub    ebp,esi
c00223e1:	19 cb                	sbb    ebx,ecx
c00223e3:	89 de                	mov    esi,ebx
c00223e5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00223e9:	d3 e6                	shl    esi,cl
c00223eb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00223ef:	89 f9                	mov    ecx,edi
c00223f1:	d3 ed                	shr    ebp,cl
c00223f3:	09 ee                	or     esi,ebp
c00223f5:	89 f0                	mov    eax,esi
c00223f7:	d3 eb                	shr    ebx,cl
c00223f9:	89 da                	mov    edx,ebx
c00223fb:	e9 e8 fe ff ff       	jmp    c00222e8 <__moddi3+0x54>
c0022400:	39 c5                	cmp    ebp,eax
c0022402:	73 db                	jae    c00223df <__moddi3+0x14b>
c0022404:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022408:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002240c:	89 d1                	mov    ecx,edx
c002240e:	89 c6                	mov    esi,eax
c0022410:	eb cd                	jmp    c00223df <__moddi3+0x14b>
c0022412:	66 90                	xchg   ax,ax

c0022414 <__udivdi3>:
c0022414:	55                   	push   ebp
c0022415:	57                   	push   edi
c0022416:	56                   	push   esi
c0022417:	53                   	push   ebx
c0022418:	83 ec 1c             	sub    esp,0x1c
c002241b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002241f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022423:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022427:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002242b:	85 d2                	test   edx,edx
c002242d:	75 41                	jne    c0022470 <__udivdi3+0x5c>
c002242f:	39 f7                	cmp    edi,esi
c0022431:	76 15                	jbe    c0022448 <__udivdi3+0x34>
c0022433:	89 e8                	mov    eax,ebp
c0022435:	89 f2                	mov    edx,esi
c0022437:	f7 f7                	div    edi
c0022439:	31 db                	xor    ebx,ebx
c002243b:	89 da                	mov    edx,ebx
c002243d:	83 c4 1c             	add    esp,0x1c
c0022440:	5b                   	pop    ebx
c0022441:	5e                   	pop    esi
c0022442:	5f                   	pop    edi
c0022443:	5d                   	pop    ebp
c0022444:	c3                   	ret    
c0022445:	8d 76 00             	lea    esi,[esi+0x0]
c0022448:	89 f9                	mov    ecx,edi
c002244a:	85 ff                	test   edi,edi
c002244c:	75 0b                	jne    c0022459 <__udivdi3+0x45>
c002244e:	b8 01 00 00 00       	mov    eax,0x1
c0022453:	31 d2                	xor    edx,edx
c0022455:	f7 f7                	div    edi
c0022457:	89 c1                	mov    ecx,eax
c0022459:	31 d2                	xor    edx,edx
c002245b:	89 f0                	mov    eax,esi
c002245d:	f7 f1                	div    ecx
c002245f:	89 c3                	mov    ebx,eax
c0022461:	89 e8                	mov    eax,ebp
c0022463:	f7 f1                	div    ecx
c0022465:	89 da                	mov    edx,ebx
c0022467:	83 c4 1c             	add    esp,0x1c
c002246a:	5b                   	pop    ebx
c002246b:	5e                   	pop    esi
c002246c:	5f                   	pop    edi
c002246d:	5d                   	pop    ebp
c002246e:	c3                   	ret    
c002246f:	90                   	nop
c0022470:	39 f2                	cmp    edx,esi
c0022472:	77 1c                	ja     c0022490 <__udivdi3+0x7c>
c0022474:	0f bd da             	bsr    ebx,edx
c0022477:	83 f3 1f             	xor    ebx,0x1f
c002247a:	75 24                	jne    c00224a0 <__udivdi3+0x8c>
c002247c:	39 f2                	cmp    edx,esi
c002247e:	72 08                	jb     c0022488 <__udivdi3+0x74>
c0022480:	39 ef                	cmp    edi,ebp
c0022482:	0f 87 84 00 00 00    	ja     c002250c <__udivdi3+0xf8>
c0022488:	b8 01 00 00 00       	mov    eax,0x1
c002248d:	eb ac                	jmp    c002243b <__udivdi3+0x27>
c002248f:	90                   	nop
c0022490:	31 db                	xor    ebx,ebx
c0022492:	31 c0                	xor    eax,eax
c0022494:	89 da                	mov    edx,ebx
c0022496:	83 c4 1c             	add    esp,0x1c
c0022499:	5b                   	pop    ebx
c002249a:	5e                   	pop    esi
c002249b:	5f                   	pop    edi
c002249c:	5d                   	pop    ebp
c002249d:	c3                   	ret    
c002249e:	66 90                	xchg   ax,ax
c00224a0:	b8 20 00 00 00       	mov    eax,0x20
c00224a5:	29 d8                	sub    eax,ebx
c00224a7:	88 d9                	mov    cl,bl
c00224a9:	d3 e2                	shl    edx,cl
c00224ab:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00224af:	89 fa                	mov    edx,edi
c00224b1:	88 c1                	mov    cl,al
c00224b3:	d3 ea                	shr    edx,cl
c00224b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00224b9:	09 d1                	or     ecx,edx
c00224bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00224bf:	88 d9                	mov    cl,bl
c00224c1:	d3 e7                	shl    edi,cl
c00224c3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00224c7:	89 f7                	mov    edi,esi
c00224c9:	88 c1                	mov    cl,al
c00224cb:	d3 ef                	shr    edi,cl
c00224cd:	88 d9                	mov    cl,bl
c00224cf:	d3 e6                	shl    esi,cl
c00224d1:	89 ea                	mov    edx,ebp
c00224d3:	88 c1                	mov    cl,al
c00224d5:	d3 ea                	shr    edx,cl
c00224d7:	09 d6                	or     esi,edx
c00224d9:	89 f0                	mov    eax,esi
c00224db:	89 fa                	mov    edx,edi
c00224dd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00224e1:	89 d7                	mov    edi,edx
c00224e3:	89 c6                	mov    esi,eax
c00224e5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00224e9:	39 d7                	cmp    edi,edx
c00224eb:	72 13                	jb     c0022500 <__udivdi3+0xec>
c00224ed:	74 09                	je     c00224f8 <__udivdi3+0xe4>
c00224ef:	89 f0                	mov    eax,esi
c00224f1:	31 db                	xor    ebx,ebx
c00224f3:	e9 43 ff ff ff       	jmp    c002243b <__udivdi3+0x27>
c00224f8:	88 d9                	mov    cl,bl
c00224fa:	d3 e5                	shl    ebp,cl
c00224fc:	39 c5                	cmp    ebp,eax
c00224fe:	73 ef                	jae    c00224ef <__udivdi3+0xdb>
c0022500:	8d 46 ff             	lea    eax,[esi-0x1]
c0022503:	31 db                	xor    ebx,ebx
c0022505:	e9 31 ff ff ff       	jmp    c002243b <__udivdi3+0x27>
c002250a:	66 90                	xchg   ax,ax
c002250c:	31 c0                	xor    eax,eax
c002250e:	e9 28 ff ff ff       	jmp    c002243b <__udivdi3+0x27>
c0022513:	90                   	nop

c0022514 <__umoddi3>:
c0022514:	55                   	push   ebp
c0022515:	57                   	push   edi
c0022516:	56                   	push   esi
c0022517:	53                   	push   ebx
c0022518:	83 ec 1c             	sub    esp,0x1c
c002251b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002251f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022523:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022527:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002252b:	89 da                	mov    edx,ebx
c002252d:	85 c0                	test   eax,eax
c002252f:	75 37                	jne    c0022568 <__umoddi3+0x54>
c0022531:	39 df                	cmp    edi,ebx
c0022533:	76 13                	jbe    c0022548 <__umoddi3+0x34>
c0022535:	89 f0                	mov    eax,esi
c0022537:	f7 f7                	div    edi
c0022539:	89 d0                	mov    eax,edx
c002253b:	31 d2                	xor    edx,edx
c002253d:	83 c4 1c             	add    esp,0x1c
c0022540:	5b                   	pop    ebx
c0022541:	5e                   	pop    esi
c0022542:	5f                   	pop    edi
c0022543:	5d                   	pop    ebp
c0022544:	c3                   	ret    
c0022545:	8d 76 00             	lea    esi,[esi+0x0]
c0022548:	89 fd                	mov    ebp,edi
c002254a:	85 ff                	test   edi,edi
c002254c:	75 0b                	jne    c0022559 <__umoddi3+0x45>
c002254e:	b8 01 00 00 00       	mov    eax,0x1
c0022553:	31 d2                	xor    edx,edx
c0022555:	f7 f7                	div    edi
c0022557:	89 c5                	mov    ebp,eax
c0022559:	89 d8                	mov    eax,ebx
c002255b:	31 d2                	xor    edx,edx
c002255d:	f7 f5                	div    ebp
c002255f:	89 f0                	mov    eax,esi
c0022561:	f7 f5                	div    ebp
c0022563:	89 d0                	mov    eax,edx
c0022565:	eb d4                	jmp    c002253b <__umoddi3+0x27>
c0022567:	90                   	nop
c0022568:	89 f1                	mov    ecx,esi
c002256a:	39 d8                	cmp    eax,ebx
c002256c:	76 0a                	jbe    c0022578 <__umoddi3+0x64>
c002256e:	89 f0                	mov    eax,esi
c0022570:	83 c4 1c             	add    esp,0x1c
c0022573:	5b                   	pop    ebx
c0022574:	5e                   	pop    esi
c0022575:	5f                   	pop    edi
c0022576:	5d                   	pop    ebp
c0022577:	c3                   	ret    
c0022578:	0f bd e8             	bsr    ebp,eax
c002257b:	83 f5 1f             	xor    ebp,0x1f
c002257e:	75 1c                	jne    c002259c <__umoddi3+0x88>
c0022580:	39 d8                	cmp    eax,ebx
c0022582:	72 04                	jb     c0022588 <__umoddi3+0x74>
c0022584:	39 f7                	cmp    edi,esi
c0022586:	77 08                	ja     c0022590 <__umoddi3+0x7c>
c0022588:	89 da                	mov    edx,ebx
c002258a:	29 fe                	sub    esi,edi
c002258c:	19 c2                	sbb    edx,eax
c002258e:	89 f1                	mov    ecx,esi
c0022590:	89 c8                	mov    eax,ecx
c0022592:	83 c4 1c             	add    esp,0x1c
c0022595:	5b                   	pop    ebx
c0022596:	5e                   	pop    esi
c0022597:	5f                   	pop    edi
c0022598:	5d                   	pop    ebp
c0022599:	c3                   	ret    
c002259a:	66 90                	xchg   ax,ax
c002259c:	ba 20 00 00 00       	mov    edx,0x20
c00225a1:	29 ea                	sub    edx,ebp
c00225a3:	89 e9                	mov    ecx,ebp
c00225a5:	d3 e0                	shl    eax,cl
c00225a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225ab:	89 f8                	mov    eax,edi
c00225ad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00225b1:	88 d1                	mov    cl,dl
c00225b3:	d3 e8                	shr    eax,cl
c00225b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00225b9:	09 c1                	or     ecx,eax
c00225bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00225bf:	89 e9                	mov    ecx,ebp
c00225c1:	d3 e7                	shl    edi,cl
c00225c3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00225c7:	89 d8                	mov    eax,ebx
c00225c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00225cd:	88 d1                	mov    cl,dl
c00225cf:	d3 e8                	shr    eax,cl
c00225d1:	89 c7                	mov    edi,eax
c00225d3:	89 e9                	mov    ecx,ebp
c00225d5:	d3 e3                	shl    ebx,cl
c00225d7:	89 f0                	mov    eax,esi
c00225d9:	88 d1                	mov    cl,dl
c00225db:	d3 e8                	shr    eax,cl
c00225dd:	09 d8                	or     eax,ebx
c00225df:	89 e9                	mov    ecx,ebp
c00225e1:	d3 e6                	shl    esi,cl
c00225e3:	89 f3                	mov    ebx,esi
c00225e5:	89 fa                	mov    edx,edi
c00225e7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00225eb:	89 d1                	mov    ecx,edx
c00225ed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00225f1:	89 c6                	mov    esi,eax
c00225f3:	89 d7                	mov    edi,edx
c00225f5:	39 d1                	cmp    ecx,edx
c00225f7:	72 27                	jb     c0022620 <__umoddi3+0x10c>
c00225f9:	74 21                	je     c002261c <__umoddi3+0x108>
c00225fb:	89 ca                	mov    edx,ecx
c00225fd:	29 f3                	sub    ebx,esi
c00225ff:	19 fa                	sbb    edx,edi
c0022601:	89 d0                	mov    eax,edx
c0022603:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0022607:	d3 e0                	shl    eax,cl
c0022609:	89 e9                	mov    ecx,ebp
c002260b:	d3 eb                	shr    ebx,cl
c002260d:	09 d8                	or     eax,ebx
c002260f:	d3 ea                	shr    edx,cl
c0022611:	83 c4 1c             	add    esp,0x1c
c0022614:	5b                   	pop    ebx
c0022615:	5e                   	pop    esi
c0022616:	5f                   	pop    edi
c0022617:	5d                   	pop    ebp
c0022618:	c3                   	ret    
c0022619:	8d 76 00             	lea    esi,[esi+0x0]
c002261c:	39 c3                	cmp    ebx,eax
c002261e:	73 db                	jae    c00225fb <__umoddi3+0xe7>
c0022620:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022624:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0022628:	89 d7                	mov    edi,edx
c002262a:	89 c6                	mov    esi,eax
c002262c:	eb cd                	jmp    c00225fb <__umoddi3+0xe7>

Disassembly of section .init:

c002262e <_init>:
c002262e:	55                   	push   ebp
c002262f:	89 e5                	mov    ebp,esp
c0022631:	e8 e2 da fd ff       	call   c0000118 <frame_dummy>
c0022636:	e8 e5 fa ff ff       	call   c0022120 <__do_global_ctors_aux>
c002263b:	5d                   	pop    ebp
c002263c:	c3                   	ret    

Disassembly of section .fini:

c002263d <_fini>:
c002263d:	55                   	push   ebp
c002263e:	89 e5                	mov    ebp,esp
c0022640:	e8 63 da fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0022645:	5d                   	pop    ebp
c0022646:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0022648 <Computer::~Computer()>:
c0022648:	83 ec 0c             	sub    esp,0xc
c002264b:	ba 74 3c 02 c0       	mov    edx,0xc0023c74
c0022650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022654:	89 10                	mov    DWORD PTR [eax],edx
c0022656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002265a:	83 ec 0c             	sub    esp,0xc
c002265d:	50                   	push   eax
c002265e:	e8 e9 b9 fe ff       	call   c000e04c <Device::~Device()>
c0022663:	83 c4 10             	add    esp,0x10
c0022666:	90                   	nop
c0022667:	83 c4 0c             	add    esp,0xc
c002266a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002266c <Computer::~Computer()>:
c002266c:	83 ec 0c             	sub    esp,0xc
c002266f:	83 ec 0c             	sub    esp,0xc
c0022672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022676:	e8 cd ff ff ff       	call   c0022648 <Computer::~Computer()>
c002267b:	83 c4 10             	add    esp,0x10
c002267e:	83 ec 08             	sub    esp,0x8
c0022681:	68 ec 01 00 00       	push   0x1ec
c0022686:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002268a:	e8 87 a5 fe ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c002268f:	83 c4 10             	add    esp,0x10
c0022692:	83 c4 0c             	add    esp,0xc
c0022695:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0022696 <idleCommon()>:
c0022696:	83 ec 0c             	sub    esp,0xc
c0022699:	fa                   	cli    
c002269a:	ff 05 08 90 02 c0    	inc    DWORD PTR ds:0xc0029008
c00226a0:	e8 cf 5d ff ff       	call   c0018474 <schedule()>
c00226a5:	a1 08 90 02 c0       	mov    eax,ds:0xc0029008
c00226aa:	48                   	dec    eax
c00226ab:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c00226b0:	75 01                	jne    c00226b3 <idleCommon()+0x1d>
c00226b2:	fb                   	sti    
c00226b3:	83 c4 0c             	add    esp,0xc
c00226b6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00226b8 <LinkedList<UnixFile>::~LinkedList()>:
c00226b8:	90                   	nop
c00226b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00226ba <LinkedList<UnixFile>::LinkedList()>:
c00226ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226be:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00226c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226c8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00226cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226d3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00226da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226de:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00226e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00226ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226f3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00226fa:	90                   	nop
c00226fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00226fc <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00226fc:	83 ec 0c             	sub    esp,0xc
c00226ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022704:	75 10                	jne    c0022716 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0022706:	83 ec 0c             	sub    esp,0xc
c0022709:	68 48 40 02 c0       	push   0xc0024048
c002270e:	e8 90 21 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0022713:	83 c4 10             	add    esp,0x10
c0022716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002271a:	8b 00                	mov    eax,DWORD PTR [eax]
c002271c:	85 c0                	test   eax,eax
c002271e:	74 34                	je     c0022754 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022724:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022727:	85 c0                	test   eax,eax
c0022729:	74 29                	je     c0022754 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002272b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002272f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022732:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022736:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022739:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002273d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022741:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022748:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002274b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022752:	eb 65                	jmp    c00227b9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022758:	8b 00                	mov    eax,DWORD PTR [eax]
c002275a:	85 c0                	test   eax,eax
c002275c:	75 4b                	jne    c00227a9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002275e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022762:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022765:	85 c0                	test   eax,eax
c0022767:	75 40                	jne    c00227a9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0022769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002276d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022771:	89 10                	mov    DWORD PTR [eax],edx
c0022773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022777:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002277b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002277e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022782:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022785:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002278c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022790:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022793:	85 c0                	test   eax,eax
c0022795:	74 22                	je     c00227b9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022797:	83 ec 0c             	sub    esp,0xc
c002279a:	68 6a 40 02 c0       	push   0xc002406a
c002279f:	e8 ff 20 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c00227a4:	83 c4 10             	add    esp,0x10
c00227a7:	eb 10                	jmp    c00227b9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00227a9:	83 ec 0c             	sub    esp,0xc
c00227ac:	68 74 40 02 c0       	push   0xc0024074
c00227b1:	e8 ed 20 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c00227b6:	83 c4 10             	add    esp,0x10
c00227b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227bd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00227c0:	8d 50 01             	lea    edx,[eax+0x1]
c00227c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227c7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00227ca:	90                   	nop
c00227cb:	83 c4 0c             	add    esp,0xc
c00227ce:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00227d0 <LinkedList<UnixFile>::getFirstElement()>:
c00227d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00227d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00227d6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00227d8 <LinkedList<UnixFile>::removeFirst()>:
c00227d8:	83 ec 0c             	sub    esp,0xc
c00227db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227df:	8b 00                	mov    eax,DWORD PTR [eax]
c00227e1:	85 c0                	test   eax,eax
c00227e3:	75 12                	jne    c00227f7 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00227e5:	83 ec 0c             	sub    esp,0xc
c00227e8:	68 80 40 02 c0       	push   0xc0024080
c00227ed:	e8 b1 20 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c00227f2:	83 c4 10             	add    esp,0x10
c00227f5:	eb 7e                	jmp    c0022875 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00227f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00227fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022801:	85 c0                	test   eax,eax
c0022803:	74 10                	je     c0022815 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0022805:	83 ec 0c             	sub    esp,0xc
c0022808:	68 cb 40 02 c0       	push   0xc00240cb
c002280d:	e8 91 20 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0022812:	83 c4 10             	add    esp,0x10
c0022815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022819:	8b 00                	mov    eax,DWORD PTR [eax]
c002281b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002281e:	85 c0                	test   eax,eax
c0022820:	75 33                	jne    c0022855 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0022822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022826:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002282c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022830:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002283b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002283e:	83 f8 01             	cmp    eax,0x1
c0022841:	74 21                	je     c0022864 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022843:	83 ec 0c             	sub    esp,0xc
c0022846:	68 a4 40 02 c0       	push   0xc00240a4
c002284b:	e8 53 20 ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0022850:	83 c4 10             	add    esp,0x10
c0022853:	eb 0f                	jmp    c0022864 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022859:	8b 00                	mov    eax,DWORD PTR [eax]
c002285b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002285e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022862:	89 10                	mov    DWORD PTR [eax],edx
c0022864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022868:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002286b:	8d 50 ff             	lea    edx,[eax-0x1]
c002286e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022872:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022875:	83 c4 0c             	add    esp,0xc
c0022878:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002287a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002287a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002287e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022881:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0022882 <DriverlessDevice::~DriverlessDevice()>:
c0022882:	ba 7c 48 02 c0       	mov    edx,0xc002487c
c0022887:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002288b:	89 10                	mov    DWORD PTR [eax],edx
c002288d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022891:	50                   	push   eax
c0022892:	e8 b5 b7 fe ff       	call   c000e04c <Device::~Device()>
c0022897:	83 c4 04             	add    esp,0x4
c002289a:	90                   	nop
c002289b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002289c <DriverlessDevice::~DriverlessDevice()>:
c002289c:	83 ec 0c             	sub    esp,0xc
c002289f:	83 ec 0c             	sub    esp,0xc
c00228a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228a6:	e8 d7 ff ff ff       	call   c0022882 <DriverlessDevice::~DriverlessDevice()>
c00228ab:	83 c4 10             	add    esp,0x10
c00228ae:	83 ec 08             	sub    esp,0x8
c00228b1:	68 58 01 00 00       	push   0x158
c00228b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228ba:	e8 57 a3 fe ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c00228bf:	83 c4 10             	add    esp,0x10
c00228c2:	83 c4 0c             	add    esp,0xc
c00228c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00228c6 <LinkedList<Device>::addElement(Device*)>:
c00228c6:	83 ec 0c             	sub    esp,0xc
c00228c9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00228ce:	75 10                	jne    c00228e0 <LinkedList<Device>::addElement(Device*)+0x1a>
c00228d0:	83 ec 0c             	sub    esp,0xc
c00228d3:	68 48 40 02 c0       	push   0xc0024048
c00228d8:	e8 c6 1f ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c00228dd:	83 c4 10             	add    esp,0x10
c00228e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00228e6:	85 c0                	test   eax,eax
c00228e8:	74 3a                	je     c0022924 <LinkedList<Device>::addElement(Device*)+0x5e>
c00228ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00228f1:	85 c0                	test   eax,eax
c00228f3:	74 2f                	je     c0022924 <LinkedList<Device>::addElement(Device*)+0x5e>
c00228f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00228fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022900:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0022906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002290a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002290e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022911:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022915:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022918:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022922:	eb 68                	jmp    c002298c <LinkedList<Device>::addElement(Device*)+0xc6>
c0022924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022928:	8b 00                	mov    eax,DWORD PTR [eax]
c002292a:	85 c0                	test   eax,eax
c002292c:	75 4e                	jne    c002297c <LinkedList<Device>::addElement(Device*)+0xb6>
c002292e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022932:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022935:	85 c0                	test   eax,eax
c0022937:	75 43                	jne    c002297c <LinkedList<Device>::addElement(Device*)+0xb6>
c0022939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002293d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022941:	89 10                	mov    DWORD PTR [eax],edx
c0022943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022947:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002294b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002294e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022952:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022955:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002295f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022963:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022966:	85 c0                	test   eax,eax
c0022968:	74 22                	je     c002298c <LinkedList<Device>::addElement(Device*)+0xc6>
c002296a:	83 ec 0c             	sub    esp,0xc
c002296d:	68 6a 40 02 c0       	push   0xc002406a
c0022972:	e8 2c 1f ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0022977:	83 c4 10             	add    esp,0x10
c002297a:	eb 10                	jmp    c002298c <LinkedList<Device>::addElement(Device*)+0xc6>
c002297c:	83 ec 0c             	sub    esp,0xc
c002297f:	68 74 40 02 c0       	push   0xc0024074
c0022984:	e8 1a 1f ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0022989:	83 c4 10             	add    esp,0x10
c002298c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022990:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022993:	8d 50 01             	lea    edx,[eax+0x1]
c0022996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002299a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002299d:	90                   	nop
c002299e:	83 c4 0c             	add    esp,0xc
c00229a1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00229a2 <LinkedList<Device>::LinkedList()>:
c00229a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00229ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229b0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00229b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229bb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00229c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229c6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00229cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229d0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00229d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229db:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00229e2:	90                   	nop
c00229e3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00229e4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00229e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00229ea:	85 c0                	test   eax,eax
c00229ec:	75 0e                	jne    c00229fc <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00229ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00229f5:	85 c0                	test   eax,eax
c00229f7:	75 03                	jne    c00229fc <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00229f9:	b0 01                	mov    al,0x1
c00229fb:	c3                   	ret    
c00229fc:	b0 00                	mov    al,0x0
c00229fe:	90                   	nop
c00229ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0022a00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0022a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a04:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a06:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0022a08 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0022a08:	83 ec 0c             	sub    esp,0xc
c0022a0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a11:	85 c0                	test   eax,eax
c0022a13:	75 17                	jne    c0022a2c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0022a15:	83 ec 0c             	sub    esp,0xc
c0022a18:	68 80 40 02 c0       	push   0xc0024080
c0022a1d:	e8 81 1e ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0022a22:	83 c4 10             	add    esp,0x10
c0022a25:	e9 92 00 00 00       	jmp    c0022abc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c0022a2a:	66 90                	xchg   ax,ax
c0022a2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022a33:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022a36:	85 c0                	test   eax,eax
c0022a38:	0f 95 c0             	setne  al
c0022a3b:	84 c0                	test   al,al
c0022a3d:	74 11                	je     c0022a50 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c0022a3f:	83 ec 0c             	sub    esp,0xc
c0022a42:	68 cb 40 02 c0       	push   0xc00240cb
c0022a47:	e8 57 1e ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0022a4c:	83 c4 10             	add    esp,0x10
c0022a4f:	90                   	nop
c0022a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a54:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a56:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022a59:	85 c0                	test   eax,eax
c0022a5b:	0f 94 c0             	sete   al
c0022a5e:	84 c0                	test   al,al
c0022a60:	74 36                	je     c0022a98 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c0022a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a66:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022a6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a70:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022a77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a7b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022a7e:	83 f8 01             	cmp    eax,0x1
c0022a81:	74 25                	je     c0022aa8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0022a83:	83 ec 0c             	sub    esp,0xc
c0022a86:	68 a4 40 02 c0       	push   0xc00240a4
c0022a8b:	e8 13 1e ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0022a90:	83 c4 10             	add    esp,0x10
c0022a93:	eb 13                	jmp    c0022aa8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0022a95:	8d 76 00             	lea    esi,[esi+0x0]
c0022a98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a9e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0022aa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aa5:	89 10                	mov    DWORD PTR [eax],edx
c0022aa7:	90                   	nop
c0022aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022aaf:	8d 50 ff             	lea    edx,[eax-0x1]
c0022ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ab6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022ab9:	8d 76 00             	lea    esi,[esi+0x0]
c0022abc:	83 c4 0c             	add    esp,0xc
c0022abf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0022ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0022ac0:	83 ec 0c             	sub    esp,0xc
c0022ac3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022ac8:	75 12                	jne    c0022adc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0022aca:	83 ec 0c             	sub    esp,0xc
c0022acd:	68 48 40 02 c0       	push   0xc0024048
c0022ad2:	e8 cc 1d ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0022ad7:	83 c4 10             	add    esp,0x10
c0022ada:	66 90                	xchg   ax,ax
c0022adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ae0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ae2:	85 c0                	test   eax,eax
c0022ae4:	74 36                	je     c0022b1c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022ae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022aed:	85 c0                	test   eax,eax
c0022aef:	74 2b                	je     c0022b1c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022af1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022af5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022af8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022afc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0022aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b07:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b11:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022b18:	eb 6a                	jmp    c0022b84 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022b1a:	66 90                	xchg   ax,ax
c0022b1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b20:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b22:	85 c0                	test   eax,eax
c0022b24:	75 4e                	jne    c0022b74 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b2d:	85 c0                	test   eax,eax
c0022b2f:	75 43                	jne    c0022b74 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022b31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b35:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b39:	89 10                	mov    DWORD PTR [eax],edx
c0022b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b3f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b43:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b4d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b58:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b5b:	85 c0                	test   eax,eax
c0022b5d:	74 25                	je     c0022b84 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022b5f:	83 ec 0c             	sub    esp,0xc
c0022b62:	68 6a 40 02 c0       	push   0xc002406a
c0022b67:	e8 37 1d ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0022b6c:	83 c4 10             	add    esp,0x10
c0022b6f:	eb 13                	jmp    c0022b84 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022b71:	8d 76 00             	lea    esi,[esi+0x0]
c0022b74:	83 ec 0c             	sub    esp,0xc
c0022b77:	68 74 40 02 c0       	push   0xc0024074
c0022b7c:	e8 22 1d ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0022b81:	83 c4 10             	add    esp,0x10
c0022b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b88:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b8b:	8d 50 01             	lea    edx,[eax+0x1]
c0022b8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b92:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022b95:	90                   	nop
c0022b96:	83 c4 0c             	add    esp,0xc
c0022b99:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0022b9c <ACPI::~ACPI()>:
c0022b9c:	83 ec 0c             	sub    esp,0xc
c0022b9f:	ba 84 52 02 c0       	mov    edx,0xc0025284
c0022ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ba8:	89 10                	mov    DWORD PTR [eax],edx
c0022baa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bae:	83 ec 0c             	sub    esp,0xc
c0022bb1:	50                   	push   eax
c0022bb2:	e8 95 b4 fe ff       	call   c000e04c <Device::~Device()>
c0022bb7:	83 c4 10             	add    esp,0x10
c0022bba:	90                   	nop
c0022bbb:	83 c4 0c             	add    esp,0xc
c0022bbe:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0022bc0 <ACPI::~ACPI()>:
c0022bc0:	83 ec 0c             	sub    esp,0xc
c0022bc3:	83 ec 0c             	sub    esp,0xc
c0022bc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022bca:	e8 cd ff ff ff       	call   c0022b9c <ACPI::~ACPI()>
c0022bcf:	83 c4 10             	add    esp,0x10
c0022bd2:	83 ec 08             	sub    esp,0x8
c0022bd5:	68 64 12 00 00       	push   0x1264
c0022bda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022bde:	e8 33 a0 fe ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c0022be3:	83 c4 10             	add    esp,0x10
c0022be6:	83 c4 0c             	add    esp,0xc
c0022be9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0022bec <LinkedList<Device>::~LinkedList()>:
c0022bec:	90                   	nop
c0022bed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0022bf0 <LinkedList<Device>::isEmpty()>:
c0022bf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022bf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0022bf6:	85 c0                	test   eax,eax
c0022bf8:	75 0e                	jne    c0022c08 <LinkedList<Device>::isEmpty()+0x18>
c0022bfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022bfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022c01:	85 c0                	test   eax,eax
c0022c03:	75 03                	jne    c0022c08 <LinkedList<Device>::isEmpty()+0x18>
c0022c05:	b0 01                	mov    al,0x1
c0022c07:	c3                   	ret    
c0022c08:	b0 00                	mov    al,0x0
c0022c0a:	90                   	nop
c0022c0b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0022c0c <LinkedList<Device>::getFirstElement()>:
c0022c0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c12:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0022c14 <LinkedList<Device>::removeFirst()>:
c0022c14:	83 ec 0c             	sub    esp,0xc
c0022c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c1d:	85 c0                	test   eax,eax
c0022c1f:	75 17                	jne    c0022c38 <LinkedList<Device>::removeFirst()+0x24>
c0022c21:	83 ec 0c             	sub    esp,0xc
c0022c24:	68 80 40 02 c0       	push   0xc0024080
c0022c29:	e8 75 1c ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0022c2e:	83 c4 10             	add    esp,0x10
c0022c31:	e9 92 00 00 00       	jmp    c0022cc8 <LinkedList<Device>::removeFirst()+0xb4>
c0022c36:	66 90                	xchg   ax,ax
c0022c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022c3f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022c45:	85 c0                	test   eax,eax
c0022c47:	74 13                	je     c0022c5c <LinkedList<Device>::removeFirst()+0x48>
c0022c49:	83 ec 0c             	sub    esp,0xc
c0022c4c:	68 cb 40 02 c0       	push   0xc00240cb
c0022c51:	e8 4d 1c ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0022c56:	83 c4 10             	add    esp,0x10
c0022c59:	8d 76 00             	lea    esi,[esi+0x0]
c0022c5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c60:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c62:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022c68:	85 c0                	test   eax,eax
c0022c6a:	75 34                	jne    c0022ca0 <LinkedList<Device>::removeFirst()+0x8c>
c0022c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c70:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c7a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022c81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c85:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c88:	83 f8 01             	cmp    eax,0x1
c0022c8b:	74 27                	je     c0022cb4 <LinkedList<Device>::removeFirst()+0xa0>
c0022c8d:	83 ec 0c             	sub    esp,0xc
c0022c90:	68 a4 40 02 c0       	push   0xc00240a4
c0022c95:	e8 09 1c ff ff       	call   c00148a3 <Krnl::panic(char const*)>
c0022c9a:	83 c4 10             	add    esp,0x10
c0022c9d:	eb 15                	jmp    c0022cb4 <LinkedList<Device>::removeFirst()+0xa0>
c0022c9f:	90                   	nop
c0022ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ca4:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ca6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0022cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cb0:	89 10                	mov    DWORD PTR [eax],edx
c0022cb2:	66 90                	xchg   ax,ax
c0022cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cb8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022cbb:	8d 50 ff             	lea    edx,[eax-0x1]
c0022cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cc2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0022cc8:	83 c4 0c             	add    esp,0xc
c0022ccb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0022ccc <CPU::~CPU()>:
c0022ccc:	83 ec 0c             	sub    esp,0xc
c0022ccf:	ba 60 56 02 c0       	mov    edx,0xc0025660
c0022cd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cd8:	89 10                	mov    DWORD PTR [eax],edx
c0022cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cde:	83 ec 0c             	sub    esp,0xc
c0022ce1:	50                   	push   eax
c0022ce2:	e8 65 b3 fe ff       	call   c000e04c <Device::~Device()>
c0022ce7:	83 c4 10             	add    esp,0x10
c0022cea:	90                   	nop
c0022ceb:	83 c4 0c             	add    esp,0xc
c0022cee:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0022cf0 <CPU::~CPU()>:
c0022cf0:	83 ec 0c             	sub    esp,0xc
c0022cf3:	83 ec 0c             	sub    esp,0xc
c0022cf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022cfa:	e8 cd ff ff ff       	call   c0022ccc <CPU::~CPU()>
c0022cff:	83 c4 10             	add    esp,0x10
c0022d02:	83 ec 08             	sub    esp,0x8
c0022d05:	68 98 11 00 00       	push   0x1198
c0022d0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d0e:	e8 03 9f fe ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c0022d13:	83 c4 10             	add    esp,0x10
c0022d16:	83 c4 0c             	add    esp,0xc
c0022d19:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0022d1c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0022d1c:	90                   	nop
c0022d1d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0022d20 <ThreadControlBlock::ThreadControlBlock()>:
c0022d20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d24:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022d2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d2f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0022d36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d3a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0022d41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d45:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0022d4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d50:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0022d57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d5b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0022d5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d63:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0022d67:	90                   	nop
c0022d68:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0022d6c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0022d6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d70:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022d76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d7a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022d81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d85:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022d8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d90:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022d96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d9a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022da1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022da5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022dac:	90                   	nop
c0022dad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0022db0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0022db0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022db4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022db7:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0022db8 <Vm::_FPUState::_FPUState()>:
c0022db8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022dbc:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0022dc3:	90                   	nop
c0022dc4:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0022dc6 <PCI::~PCI()>:
c0022dc6:	83 ec 0c             	sub    esp,0xc
c0022dc9:	ba 38 64 02 c0       	mov    edx,0xc0026438
c0022dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dd2:	89 10                	mov    DWORD PTR [eax],edx
c0022dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dd8:	83 ec 0c             	sub    esp,0xc
c0022ddb:	50                   	push   eax
c0022ddc:	e8 3b ac fe ff       	call   c000da1c <Bus::~Bus()>
c0022de1:	83 c4 10             	add    esp,0x10
c0022de4:	90                   	nop
c0022de5:	83 c4 0c             	add    esp,0xc
c0022de8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0022dea <PCI::~PCI()>:
c0022dea:	83 ec 0c             	sub    esp,0xc
c0022ded:	83 ec 0c             	sub    esp,0xc
c0022df0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022df4:	e8 cd ff ff ff       	call   c0022dc6 <PCI::~PCI()>
c0022df9:	83 c4 10             	add    esp,0x10
c0022dfc:	83 ec 08             	sub    esp,0x8
c0022dff:	68 5c 01 00 00       	push   0x15c
c0022e04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e08:	e8 09 9e fe ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c0022e0d:	83 c4 10             	add    esp,0x10
c0022e10:	83 c4 0c             	add    esp,0xc
c0022e13:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0022e14 <IDE::~IDE()>:
c0022e14:	83 ec 0c             	sub    esp,0xc
c0022e17:	ba ec 64 02 c0       	mov    edx,0xc00264ec
c0022e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e20:	89 10                	mov    DWORD PTR [eax],edx
c0022e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e26:	83 ec 0c             	sub    esp,0xc
c0022e29:	50                   	push   eax
c0022e2a:	e8 35 b7 fe ff       	call   c000e564 <HardDiskController::~HardDiskController()>
c0022e2f:	83 c4 10             	add    esp,0x10
c0022e32:	90                   	nop
c0022e33:	83 c4 0c             	add    esp,0xc
c0022e36:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0022e38 <IDE::~IDE()>:
c0022e38:	83 ec 0c             	sub    esp,0xc
c0022e3b:	83 ec 0c             	sub    esp,0xc
c0022e3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e42:	e8 cd ff ff ff       	call   c0022e14 <IDE::~IDE()>
c0022e47:	83 c4 10             	add    esp,0x10
c0022e4a:	83 ec 08             	sub    esp,0x8
c0022e4d:	68 70 02 00 00       	push   0x270
c0022e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e56:	e8 bb 9d fe ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c0022e5b:	83 c4 10             	add    esp,0x10
c0022e5e:	83 c4 0c             	add    esp,0xc
c0022e61:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0022e62 <SATABus::~SATABus()>:
c0022e62:	83 ec 0c             	sub    esp,0xc
c0022e65:	ba 40 66 02 c0       	mov    edx,0xc0026640
c0022e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e6e:	89 10                	mov    DWORD PTR [eax],edx
c0022e70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e74:	83 ec 0c             	sub    esp,0xc
c0022e77:	50                   	push   eax
c0022e78:	e8 e7 b6 fe ff       	call   c000e564 <HardDiskController::~HardDiskController()>
c0022e7d:	83 c4 10             	add    esp,0x10
c0022e80:	90                   	nop
c0022e81:	83 c4 0c             	add    esp,0xc
c0022e84:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0022e86 <SATABus::~SATABus()>:
c0022e86:	83 ec 0c             	sub    esp,0xc
c0022e89:	83 ec 0c             	sub    esp,0xc
c0022e8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e90:	e8 cd ff ff ff       	call   c0022e62 <SATABus::~SATABus()>
c0022e95:	83 c4 10             	add    esp,0x10
c0022e98:	83 ec 08             	sub    esp,0x8
c0022e9b:	68 64 01 00 00       	push   0x164
c0022ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ea4:	e8 6d 9d fe ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c0022ea9:	83 c4 10             	add    esp,0x10
c0022eac:	83 c4 0c             	add    esp,0xc
c0022eaf:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0022eb0 <ATA::~ATA()>:
c0022eb0:	83 ec 0c             	sub    esp,0xc
c0022eb3:	ba b8 66 02 c0       	mov    edx,0xc00266b8
c0022eb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ebc:	89 10                	mov    DWORD PTR [eax],edx
c0022ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ec2:	83 ec 0c             	sub    esp,0xc
c0022ec5:	50                   	push   eax
c0022ec6:	e8 7b b7 fe ff       	call   c000e646 <PhysicalDisk::~PhysicalDisk()>
c0022ecb:	83 c4 10             	add    esp,0x10
c0022ece:	90                   	nop
c0022ecf:	83 c4 0c             	add    esp,0xc
c0022ed2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0022ed4 <ATA::~ATA()>:
c0022ed4:	83 ec 0c             	sub    esp,0xc
c0022ed7:	83 ec 0c             	sub    esp,0xc
c0022eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ede:	e8 cd ff ff ff       	call   c0022eb0 <ATA::~ATA()>
c0022ee3:	83 c4 10             	add    esp,0x10
c0022ee6:	83 ec 08             	sub    esp,0x8
c0022ee9:	68 7c 01 00 00       	push   0x17c
c0022eee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ef2:	e8 1f 9d fe ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c0022ef7:	83 c4 10             	add    esp,0x10
c0022efa:	83 c4 0c             	add    esp,0xc
c0022efd:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0022efe <ATAPI::~ATAPI()>:
c0022efe:	83 ec 0c             	sub    esp,0xc
c0022f01:	ba f0 66 02 c0       	mov    edx,0xc00266f0
c0022f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f0a:	89 10                	mov    DWORD PTR [eax],edx
c0022f0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f10:	83 ec 0c             	sub    esp,0xc
c0022f13:	50                   	push   eax
c0022f14:	e8 2d b7 fe ff       	call   c000e646 <PhysicalDisk::~PhysicalDisk()>
c0022f19:	83 c4 10             	add    esp,0x10
c0022f1c:	90                   	nop
c0022f1d:	83 c4 0c             	add    esp,0xc
c0022f20:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0022f22 <ATAPI::~ATAPI()>:
c0022f22:	83 ec 0c             	sub    esp,0xc
c0022f25:	83 ec 0c             	sub    esp,0xc
c0022f28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f2c:	e8 cd ff ff ff       	call   c0022efe <ATAPI::~ATAPI()>
c0022f31:	83 c4 10             	add    esp,0x10
c0022f34:	83 ec 08             	sub    esp,0x8
c0022f37:	68 80 01 00 00       	push   0x180
c0022f3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f40:	e8 d1 9c fe ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c0022f45:	83 c4 10             	add    esp,0x10
c0022f48:	83 c4 0c             	add    esp,0xc
c0022f4b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0022f4c <SATA::~SATA()>:
c0022f4c:	83 ec 0c             	sub    esp,0xc
c0022f4f:	ba 2c 69 02 c0       	mov    edx,0xc002692c
c0022f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f58:	89 10                	mov    DWORD PTR [eax],edx
c0022f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f5e:	83 ec 0c             	sub    esp,0xc
c0022f61:	50                   	push   eax
c0022f62:	e8 df b6 fe ff       	call   c000e646 <PhysicalDisk::~PhysicalDisk()>
c0022f67:	83 c4 10             	add    esp,0x10
c0022f6a:	90                   	nop
c0022f6b:	83 c4 0c             	add    esp,0xc
c0022f6e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0022f70 <SATA::~SATA()>:
c0022f70:	83 ec 0c             	sub    esp,0xc
c0022f73:	83 ec 0c             	sub    esp,0xc
c0022f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f7a:	e8 cd ff ff ff       	call   c0022f4c <SATA::~SATA()>
c0022f7f:	83 c4 10             	add    esp,0x10
c0022f82:	83 ec 08             	sub    esp,0x8
c0022f85:	68 7c 01 00 00       	push   0x17c
c0022f8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f8e:	e8 83 9c fe ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c0022f93:	83 c4 10             	add    esp,0x10
c0022f96:	83 c4 0c             	add    esp,0xc
c0022f99:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0022f9a <SATAPI::~SATAPI()>:
c0022f9a:	83 ec 0c             	sub    esp,0xc
c0022f9d:	ba 2c 6a 02 c0       	mov    edx,0xc0026a2c
c0022fa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fa6:	89 10                	mov    DWORD PTR [eax],edx
c0022fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fac:	83 ec 0c             	sub    esp,0xc
c0022faf:	50                   	push   eax
c0022fb0:	e8 91 b6 fe ff       	call   c000e646 <PhysicalDisk::~PhysicalDisk()>
c0022fb5:	83 c4 10             	add    esp,0x10
c0022fb8:	90                   	nop
c0022fb9:	83 c4 0c             	add    esp,0xc
c0022fbc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0022fbe <SATAPI::~SATAPI()>:
c0022fbe:	83 ec 0c             	sub    esp,0xc
c0022fc1:	83 ec 0c             	sub    esp,0xc
c0022fc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022fc8:	e8 cd ff ff ff       	call   c0022f9a <SATAPI::~SATAPI()>
c0022fcd:	83 c4 10             	add    esp,0x10
c0022fd0:	83 ec 08             	sub    esp,0x8
c0022fd3:	68 84 01 00 00       	push   0x184
c0022fd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022fdc:	e8 35 9c fe ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c0022fe1:	83 c4 10             	add    esp,0x10
c0022fe4:	83 c4 0c             	add    esp,0xc
c0022fe7:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0022fe8 <AVX::~AVX()>:
c0022fe8:	83 ec 0c             	sub    esp,0xc
c0022feb:	ba 6c 6a 02 c0       	mov    edx,0xc0026a6c
c0022ff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ff4:	89 10                	mov    DWORD PTR [eax],edx
c0022ff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ffa:	83 ec 0c             	sub    esp,0xc
c0022ffd:	50                   	push   eax
c0022ffe:	e8 c9 b6 fe ff       	call   c000e6cc <FPU::~FPU()>
c0023003:	83 c4 10             	add    esp,0x10
c0023006:	90                   	nop
c0023007:	83 c4 0c             	add    esp,0xc
c002300a:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c002300c <AVX::~AVX()>:
c002300c:	83 ec 0c             	sub    esp,0xc
c002300f:	83 ec 0c             	sub    esp,0xc
c0023012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023016:	e8 cd ff ff ff       	call   c0022fe8 <AVX::~AVX()>
c002301b:	83 c4 10             	add    esp,0x10
c002301e:	83 ec 08             	sub    esp,0x8
c0023021:	68 58 01 00 00       	push   0x158
c0023026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002302a:	e8 e7 9b fe ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c002302f:	83 c4 10             	add    esp,0x10
c0023032:	83 c4 0c             	add    esp,0xc
c0023035:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0023038 <MMX::~MMX()>:
c0023038:	83 ec 0c             	sub    esp,0xc
c002303b:	ba ac 6a 02 c0       	mov    edx,0xc0026aac
c0023040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023044:	89 10                	mov    DWORD PTR [eax],edx
c0023046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002304a:	83 ec 0c             	sub    esp,0xc
c002304d:	50                   	push   eax
c002304e:	e8 79 b6 fe ff       	call   c000e6cc <FPU::~FPU()>
c0023053:	83 c4 10             	add    esp,0x10
c0023056:	90                   	nop
c0023057:	83 c4 0c             	add    esp,0xc
c002305a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c002305c <MMX::~MMX()>:
c002305c:	83 ec 0c             	sub    esp,0xc
c002305f:	83 ec 0c             	sub    esp,0xc
c0023062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023066:	e8 cd ff ff ff       	call   c0023038 <MMX::~MMX()>
c002306b:	83 c4 10             	add    esp,0x10
c002306e:	83 ec 08             	sub    esp,0x8
c0023071:	68 58 01 00 00       	push   0x158
c0023076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002307a:	e8 97 9b fe ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c002307f:	83 c4 10             	add    esp,0x10
c0023082:	83 c4 0c             	add    esp,0xc
c0023085:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0023088 <SSE::~SSE()>:
c0023088:	83 ec 0c             	sub    esp,0xc
c002308b:	ba ec 6a 02 c0       	mov    edx,0xc0026aec
c0023090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023094:	89 10                	mov    DWORD PTR [eax],edx
c0023096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002309a:	83 ec 0c             	sub    esp,0xc
c002309d:	50                   	push   eax
c002309e:	e8 29 b6 fe ff       	call   c000e6cc <FPU::~FPU()>
c00230a3:	83 c4 10             	add    esp,0x10
c00230a6:	90                   	nop
c00230a7:	83 c4 0c             	add    esp,0xc
c00230aa:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00230ac <SSE::~SSE()>:
c00230ac:	83 ec 0c             	sub    esp,0xc
c00230af:	83 ec 0c             	sub    esp,0xc
c00230b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00230b6:	e8 cd ff ff ff       	call   c0023088 <SSE::~SSE()>
c00230bb:	83 c4 10             	add    esp,0x10
c00230be:	83 ec 08             	sub    esp,0x8
c00230c1:	68 58 01 00 00       	push   0x158
c00230c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00230ca:	e8 47 9b fe ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c00230cf:	83 c4 10             	add    esp,0x10
c00230d2:	83 c4 0c             	add    esp,0xc
c00230d5:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00230d8 <x87::~x87()>:
c00230d8:	83 ec 0c             	sub    esp,0xc
c00230db:	ba 2c 6b 02 c0       	mov    edx,0xc0026b2c
c00230e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230e4:	89 10                	mov    DWORD PTR [eax],edx
c00230e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230ea:	83 ec 0c             	sub    esp,0xc
c00230ed:	50                   	push   eax
c00230ee:	e8 d9 b5 fe ff       	call   c000e6cc <FPU::~FPU()>
c00230f3:	83 c4 10             	add    esp,0x10
c00230f6:	90                   	nop
c00230f7:	83 c4 0c             	add    esp,0xc
c00230fa:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00230fc <x87::~x87()>:
c00230fc:	83 ec 0c             	sub    esp,0xc
c00230ff:	83 ec 0c             	sub    esp,0xc
c0023102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023106:	e8 cd ff ff ff       	call   c00230d8 <x87::~x87()>
c002310b:	83 c4 10             	add    esp,0x10
c002310e:	83 ec 08             	sub    esp,0x8
c0023111:	68 58 01 00 00       	push   0x158
c0023116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002311a:	e8 f7 9a fe ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c002311f:	83 c4 10             	add    esp,0x10
c0023122:	83 c4 0c             	add    esp,0xc
c0023125:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0023126 <IOAPIC::~IOAPIC()>:
c0023126:	83 ec 0c             	sub    esp,0xc
c0023129:	ba 84 6c 02 c0       	mov    edx,0xc0026c84
c002312e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023132:	89 10                	mov    DWORD PTR [eax],edx
c0023134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023138:	83 ec 0c             	sub    esp,0xc
c002313b:	50                   	push   eax
c002313c:	e8 0b af fe ff       	call   c000e04c <Device::~Device()>
c0023141:	83 c4 10             	add    esp,0x10
c0023144:	90                   	nop
c0023145:	83 c4 0c             	add    esp,0xc
c0023148:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002314a <IOAPIC::~IOAPIC()>:
c002314a:	83 ec 0c             	sub    esp,0xc
c002314d:	83 ec 0c             	sub    esp,0xc
c0023150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023154:	e8 cd ff ff ff       	call   c0023126 <IOAPIC::~IOAPIC()>
c0023159:	83 c4 10             	add    esp,0x10
c002315c:	83 ec 08             	sub    esp,0x8
c002315f:	68 68 01 00 00       	push   0x168
c0023164:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023168:	e8 a9 9a fe ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c002316d:	83 c4 10             	add    esp,0x10
c0023170:	83 c4 0c             	add    esp,0xc
c0023173:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0023174 <APIC::~APIC()>:
c0023174:	83 ec 0c             	sub    esp,0xc
c0023177:	ba 3c 6c 02 c0       	mov    edx,0xc0026c3c
c002317c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023180:	89 10                	mov    DWORD PTR [eax],edx
c0023182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023186:	83 ec 0c             	sub    esp,0xc
c0023189:	50                   	push   eax
c002318a:	e8 11 ba fe ff       	call   c000eba0 <InterruptController::~InterruptController()>
c002318f:	83 c4 10             	add    esp,0x10
c0023192:	90                   	nop
c0023193:	83 c4 0c             	add    esp,0xc
c0023196:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0023198 <APIC::~APIC()>:
c0023198:	83 ec 0c             	sub    esp,0xc
c002319b:	83 ec 0c             	sub    esp,0xc
c002319e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231a2:	e8 cd ff ff ff       	call   c0023174 <APIC::~APIC()>
c00231a7:	83 c4 10             	add    esp,0x10
c00231aa:	83 ec 08             	sub    esp,0x8
c00231ad:	68 58 21 00 00       	push   0x2158
c00231b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231b6:	e8 5b 9a fe ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c00231bb:	83 c4 10             	add    esp,0x10
c00231be:	83 c4 0c             	add    esp,0xc
c00231c1:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00231c2 <PIC::~PIC()>:
c00231c2:	83 ec 0c             	sub    esp,0xc
c00231c5:	ba d4 6c 02 c0       	mov    edx,0xc0026cd4
c00231ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231ce:	89 10                	mov    DWORD PTR [eax],edx
c00231d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231d4:	83 ec 0c             	sub    esp,0xc
c00231d7:	50                   	push   eax
c00231d8:	e8 c3 b9 fe ff       	call   c000eba0 <InterruptController::~InterruptController()>
c00231dd:	83 c4 10             	add    esp,0x10
c00231e0:	90                   	nop
c00231e1:	83 c4 0c             	add    esp,0xc
c00231e4:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00231e6 <PIC::~PIC()>:
c00231e6:	83 ec 0c             	sub    esp,0xc
c00231e9:	83 ec 0c             	sub    esp,0xc
c00231ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231f0:	e8 cd ff ff ff       	call   c00231c2 <PIC::~PIC()>
c00231f5:	83 c4 10             	add    esp,0x10
c00231f8:	83 ec 08             	sub    esp,0x8
c00231fb:	68 58 21 00 00       	push   0x2158
c0023200:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023204:	e8 0d 9a fe ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c0023209:	83 c4 10             	add    esp,0x10
c002320c:	83 c4 0c             	add    esp,0xc
c002320f:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0023210 <APICTimer::~APICTimer()>:
c0023210:	83 ec 0c             	sub    esp,0xc
c0023213:	ba 28 6d 02 c0       	mov    edx,0xc0026d28
c0023218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002321c:	89 10                	mov    DWORD PTR [eax],edx
c002321e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023222:	83 ec 0c             	sub    esp,0xc
c0023225:	50                   	push   eax
c0023226:	e8 81 d7 fe ff       	call   c00109ac <Timer::~Timer()>
c002322b:	83 c4 10             	add    esp,0x10
c002322e:	90                   	nop
c002322f:	83 c4 0c             	add    esp,0xc
c0023232:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0023234 <APICTimer::~APICTimer()>:
c0023234:	83 ec 0c             	sub    esp,0xc
c0023237:	83 ec 0c             	sub    esp,0xc
c002323a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002323e:	e8 cd ff ff ff       	call   c0023210 <APICTimer::~APICTimer()>
c0023243:	83 c4 10             	add    esp,0x10
c0023246:	83 ec 08             	sub    esp,0x8
c0023249:	68 60 01 00 00       	push   0x160
c002324e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023252:	e8 bf 99 fe ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c0023257:	83 c4 10             	add    esp,0x10
c002325a:	83 c4 0c             	add    esp,0xc
c002325d:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0023260 <PIT::~PIT()>:
c0023260:	83 ec 0c             	sub    esp,0xc
c0023263:	ba 78 6d 02 c0       	mov    edx,0xc0026d78
c0023268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002326c:	89 10                	mov    DWORD PTR [eax],edx
c002326e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023272:	83 ec 0c             	sub    esp,0xc
c0023275:	50                   	push   eax
c0023276:	e8 31 d7 fe ff       	call   c00109ac <Timer::~Timer()>
c002327b:	83 c4 10             	add    esp,0x10
c002327e:	90                   	nop
c002327f:	83 c4 0c             	add    esp,0xc
c0023282:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0023284 <PIT::~PIT()>:
c0023284:	83 ec 0c             	sub    esp,0xc
c0023287:	83 ec 0c             	sub    esp,0xc
c002328a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002328e:	e8 cd ff ff ff       	call   c0023260 <PIT::~PIT()>
c0023293:	83 c4 10             	add    esp,0x10
c0023296:	83 ec 08             	sub    esp,0x8
c0023299:	68 5c 01 00 00       	push   0x15c
c002329e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232a2:	e8 6f 99 fe ff       	call   c000cc16 <operator delete(void*, unsigned long)>
c00232a7:	83 c4 10             	add    esp,0x10
c00232aa:	83 c4 0c             	add    esp,0xc
c00232ad:	c3                   	ret    
