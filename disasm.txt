
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 01 9e 00 00       	call   c0009e21 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 15 30 02 00       	call   c002303a <_init>
c0000025:	c3                   	ret    
c0000026:	bb be 3c 02 c0       	mov    ebx,0xc0023cbe
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb cc 3c 02 c0    	cmp    ebx,0xc0023ccc
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 18 84 02 c0       	mov    eax,0xc0028418
c0000049:	3d 18 84 02 c0       	cmp    eax,0xc0028418
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 18 84 02 c0       	push   0xc0028418
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 18 84 02 c0       	mov    eax,0xc0028418
c0000075:	2d 18 84 02 c0       	sub    eax,0xc0028418
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 18 84 02 c0       	push   0xc0028418
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d a0 85 02 c0 00 	cmp    BYTE PTR ds:0xc00285a0,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb d4 3c 02 c0       	mov    ebx,0xc0023cd4
c00000bb:	81 eb d0 3c 02 c0    	sub    ebx,0xc0023cd0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be d0 3c 02 c0       	mov    esi,0xc0023cd0
c00000ca:	a1 a4 85 02 c0       	mov    eax,ds:0xc00285a4
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 a4 85 02 c0       	mov    ds:0xc00285a4,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 a4 85 02 c0       	mov    eax,ds:0xc00285a4
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 18 84 02 c0       	push   0xc0028418
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 a0 85 02 c0 01 	mov    BYTE PTR ds:0xc00285a0,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 a8 85 02 c0       	push   0xc00285a8
c000012c:	68 18 84 02 c0       	push   0xc0028418
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	0f 20 c0             	mov    eax,cr0
c00002c7:	0c 08                	or     al,0x8
c00002c9:	0f 22 c0             	mov    cr0,eax
c00002cc:	85 d2                	test   edx,edx
c00002ce:	75 11                	jne    c00002e1 <commonThreadSwitch.firstTime>
c00002d0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002d3:	e8 08 83 01 00       	call   c00185e0 <changeTSS>
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	5a                   	pop    edx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	9d                   	popf   
c00002e0:	c3                   	ret    

c00002e1 <commonThreadSwitch.firstTime>:
c00002e1:	fa                   	cli    
c00002e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002e5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002ea:	60                   	pusha  
c00002eb:	e8 c4 ca 00 00       	call   c000cdb4 <mapVASFirstTime>
c00002f0:	61                   	popa   
c00002f1:	89 c4                	mov    esp,eax
c00002f3:	56                   	push   esi
c00002f4:	52                   	push   edx
c00002f5:	e8 e6 82 01 00       	call   c00185e0 <changeTSS>
c00002fa:	5a                   	pop    edx
c00002fb:	5e                   	pop    esi
c00002fc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000303:	5d                   	pop    ebp
c0000304:	5f                   	pop    edi
c0000305:	5e                   	pop    esi
c0000306:	59                   	pop    ecx
c0000307:	59                   	pop    ecx
c0000308:	5b                   	pop    ebx
c0000309:	58                   	pop    eax
c000030a:	81 c4 04 00 00 00    	add    esp,0x4
c0000310:	6a 02                	push   0x2
c0000312:	9d                   	popf   
c0000313:	52                   	push   edx
c0000314:	e8 af 87 01 00       	call   c0018ac8 <taskStartupFunction>
c0000319:	5a                   	pop    edx
c000031a:	50                   	push   eax
c000031b:	ff d2                	call   edx
c000031d:	e8 f2 8d 01 00       	call   c0019114 <taskReturned>
c0000322:	e9 fb ff ff ff       	jmp    c0000322 <commonThreadSwitch.firstTime+0x41>

c0000327 <asmQuickAcquireLock>:
c0000327:	55                   	push   ebp
c0000328:	89 e5                	mov    ebp,esp
c000032a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032d <asmQuickAcquireLock.retry>:
c000032d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000332:	72 02                	jb     c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000334:	fa                   	cli    
c0000335:	c3                   	ret    

c0000336 <asmQuickAcquireLock.spin_with_pause>:
c0000336:	f3 90                	pause  
c0000338:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000033e:	75 f6                	jne    c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000340:	e9 e8 ff ff ff       	jmp    c000032d <asmQuickAcquireLock.retry>

c0000345 <asmQuickReleaseLock>:
c0000345:	55                   	push   ebp
c0000346:	89 e5                	mov    ebp,esp
c0000348:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000034f:	5d                   	pop    ebp
c0000350:	c3                   	ret    

c0000351 <asmAcquireLock>:
c0000351:	55                   	push   ebp
c0000352:	89 e5                	mov    ebp,esp
c0000354:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000357 <asmAcquireLock.retry>:
c0000357:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000035c:	72 05                	jb     c0000363 <asmAcquireLock.spin_with_pause>
c000035e:	9c                   	pushf  
c000035f:	58                   	pop    eax
c0000360:	fa                   	cli    
c0000361:	5d                   	pop    ebp
c0000362:	c3                   	ret    

c0000363 <asmAcquireLock.spin_with_pause>:
c0000363:	f3 90                	pause  
c0000365:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000036b:	75 f6                	jne    c0000363 <asmAcquireLock.spin_with_pause>
c000036d:	e9 e5 ff ff ff       	jmp    c0000357 <asmAcquireLock.retry>

c0000372 <asmReleaseLock>:
c0000372:	55                   	push   ebp
c0000373:	89 e5                	mov    ebp,esp
c0000375:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000378:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000037b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000381:	52                   	push   edx
c0000382:	9d                   	popf   
c0000383:	5d                   	pop    ebp
c0000384:	c3                   	ret    

c0000385 <loadGDT>:
c0000385:	0f 01 15 f0 89 02 c0 	lgdtd  ds:0xc00289f0
c000038c:	66 b8 10 00          	mov    ax,0x10
c0000390:	66 8e d8             	mov    ds,ax
c0000393:	66 8e c0             	mov    es,ax
c0000396:	66 8e e0             	mov    fs,ax
c0000399:	66 8e e8             	mov    gs,ax
c000039c:	66 8e d0             	mov    ss,ax
c000039f:	e9 00 00 00 00       	jmp    c00003a4 <flush2>

c00003a4 <flush2>:
c00003a4:	c3                   	ret    

c00003a5 <isr0>:
c00003a5:	fa                   	cli    
c00003a6:	68 00 00 00 00       	push   0x0
c00003ab:	68 00 00 00 00       	push   0x0
c00003b0:	e9 44 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003b5 <isr1>:
c00003b5:	fa                   	cli    
c00003b6:	6a 00                	push   0x0
c00003b8:	6a 01                	push   0x1
c00003ba:	e9 3a 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003bf <isr2>:
c00003bf:	fa                   	cli    
c00003c0:	6a 00                	push   0x0
c00003c2:	6a 02                	push   0x2
c00003c4:	e9 30 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003c9 <isr3>:
c00003c9:	fa                   	cli    
c00003ca:	6a 00                	push   0x0
c00003cc:	6a 03                	push   0x3
c00003ce:	e9 26 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003d3 <isr4>:
c00003d3:	fa                   	cli    
c00003d4:	6a 00                	push   0x0
c00003d6:	6a 04                	push   0x4
c00003d8:	e9 1c 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003dd <isr5>:
c00003dd:	fa                   	cli    
c00003de:	6a 00                	push   0x0
c00003e0:	6a 05                	push   0x5
c00003e2:	e9 12 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003e7 <isr6>:
c00003e7:	fa                   	cli    
c00003e8:	6a 00                	push   0x0
c00003ea:	6a 06                	push   0x6
c00003ec:	e9 08 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003f1 <isr7>:
c00003f1:	fa                   	cli    
c00003f2:	6a 00                	push   0x0
c00003f4:	6a 07                	push   0x7
c00003f6:	e9 fe 00 00 00       	jmp    c00004f9 <int_common_stub>

c00003fb <isr8>:
c00003fb:	fa                   	cli    
c00003fc:	6a 08                	push   0x8
c00003fe:	e9 f6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000403 <isr9>:
c0000403:	fa                   	cli    
c0000404:	6a 00                	push   0x0
c0000406:	6a 09                	push   0x9
c0000408:	e9 ec 00 00 00       	jmp    c00004f9 <int_common_stub>

c000040d <isr10>:
c000040d:	fa                   	cli    
c000040e:	6a 0a                	push   0xa
c0000410:	e9 e4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000415 <isr11>:
c0000415:	fa                   	cli    
c0000416:	6a 0b                	push   0xb
c0000418:	e9 dc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000041d <isr12>:
c000041d:	fa                   	cli    
c000041e:	6a 0c                	push   0xc
c0000420:	e9 d4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000425 <isr13>:
c0000425:	fa                   	cli    
c0000426:	6a 0d                	push   0xd
c0000428:	e9 cc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000042d <isr14>:
c000042d:	fa                   	cli    
c000042e:	6a 0e                	push   0xe
c0000430:	e9 c4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000435 <isr15>:
c0000435:	fa                   	cli    
c0000436:	6a 00                	push   0x0
c0000438:	6a 0f                	push   0xf
c000043a:	e9 ba 00 00 00       	jmp    c00004f9 <int_common_stub>

c000043f <isr16>:
c000043f:	fa                   	cli    
c0000440:	6a 00                	push   0x0
c0000442:	6a 10                	push   0x10
c0000444:	e9 b0 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000449 <isr17>:
c0000449:	fa                   	cli    
c000044a:	6a 00                	push   0x0
c000044c:	6a 11                	push   0x11
c000044e:	e9 a6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000453 <isr18>:
c0000453:	fa                   	cli    
c0000454:	6a 00                	push   0x0
c0000456:	6a 12                	push   0x12
c0000458:	e9 9c 00 00 00       	jmp    c00004f9 <int_common_stub>

c000045d <irq3>:
c000045d:	fa                   	cli    
c000045e:	6a 00                	push   0x0
c0000460:	6a 23                	push   0x23
c0000462:	e9 92 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000467 <irq4>:
c0000467:	fa                   	cli    
c0000468:	6a 00                	push   0x0
c000046a:	6a 24                	push   0x24
c000046c:	e9 88 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000471 <irq5>:
c0000471:	fa                   	cli    
c0000472:	6a 00                	push   0x0
c0000474:	6a 25                	push   0x25
c0000476:	e9 7e 00 00 00       	jmp    c00004f9 <int_common_stub>

c000047b <irq6>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 26                	push   0x26
c0000480:	e9 74 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000485 <irq7>:
c0000485:	fa                   	cli    
c0000486:	6a 00                	push   0x0
c0000488:	6a 27                	push   0x27
c000048a:	e9 6a 00 00 00       	jmp    c00004f9 <int_common_stub>

c000048f <irq8>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 28                	push   0x28
c0000494:	e9 60 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000499 <irq9>:
c0000499:	fa                   	cli    
c000049a:	6a 00                	push   0x0
c000049c:	6a 29                	push   0x29
c000049e:	e9 56 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004a3 <irq10>:
c00004a3:	fa                   	cli    
c00004a4:	6a 00                	push   0x0
c00004a6:	6a 2a                	push   0x2a
c00004a8:	e9 4c 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004ad <irq11>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 2b                	push   0x2b
c00004b2:	e9 42 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004b7 <irq12>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 2c                	push   0x2c
c00004bc:	e9 38 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004c1 <irq13>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 2d                	push   0x2d
c00004c6:	e9 2e 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004cb <irq14>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 2e                	push   0x2e
c00004d0:	e9 24 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004d5 <irq15>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 2f                	push   0x2f
c00004da:	e9 1a 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004df <irq1>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 21                	push   0x21
c00004e4:	eb 13                	jmp    c00004f9 <int_common_stub>

c00004e6 <irq2>:
c00004e6:	fa                   	cli    
c00004e7:	6a 00                	push   0x0
c00004e9:	6a 22                	push   0x22
c00004eb:	eb 0c                	jmp    c00004f9 <int_common_stub>

c00004ed <isr96>:
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 60                	push   0x60
c00004f1:	fb                   	sti    
c00004f2:	eb 05                	jmp    c00004f9 <int_common_stub>

c00004f4 <irq0>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 20                	push   0x20

c00004f9 <int_common_stub>:
c00004f9:	60                   	pusha  
c00004fa:	1e                   	push   ds
c00004fb:	06                   	push   es
c00004fc:	0f a0                	push   fs
c00004fe:	0f a8                	push   gs
c0000500:	66 b8 10 00          	mov    ax,0x10
c0000504:	66 8e d8             	mov    ds,ax
c0000507:	66 8e c0             	mov    es,ax
c000050a:	66 8e e0             	mov    fs,ax
c000050d:	66 8e e8             	mov    gs,ax
c0000510:	54                   	push   esp
c0000511:	fc                   	cld    
c0000512:	e8 96 e9 00 00       	call   c000eead <int_handler>
c0000517:	81 c4 04 00 00 00    	add    esp,0x4
c000051d:	0f a9                	pop    gs
c000051f:	0f a1                	pop    fs
c0000521:	07                   	pop    es
c0000522:	1f                   	pop    ds
c0000523:	61                   	popa   
c0000524:	81 c4 08 00 00 00    	add    esp,0x8
c000052a:	cf                   	iret   

c000052b <irq16>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 30                	push   0x30
c0000530:	e9 c4 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000535 <irq17>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 31                	push   0x31
c000053a:	e9 ba ff ff ff       	jmp    c00004f9 <int_common_stub>

c000053f <irq18>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 32                	push   0x32
c0000544:	e9 b0 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000549 <irq19>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 33                	push   0x33
c000054e:	e9 a6 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000553 <irq20>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 34                	push   0x34
c0000558:	e9 9c ff ff ff       	jmp    c00004f9 <int_common_stub>

c000055d <irq21>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 35                	push   0x35
c0000562:	e9 92 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000567 <irq22>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 36                	push   0x36
c000056c:	e9 88 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000571 <irq23>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 37                	push   0x37
c0000576:	e9 7e ff ff ff       	jmp    c00004f9 <int_common_stub>

c000057b <memcpy>:
c000057b:	e9 7a 83 00 00       	jmp    c00088fa <__not_memcpy>

c0000580 <memcmp>:
c0000580:	56                   	push   esi
c0000581:	53                   	push   ebx
c0000582:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000058a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000058e:	85 f6                	test   esi,esi
c0000590:	74 1d                	je     c00005af <memcmp+0x2f>
c0000592:	8a 08                	mov    cl,BYTE PTR [eax]
c0000594:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000597:	38 cb                	cmp    bl,cl
c0000599:	75 19                	jne    c00005b4 <memcmp+0x34>
c000059b:	01 c6                	add    esi,eax
c000059d:	eb 0a                	jmp    c00005a9 <memcmp+0x29>
c000059f:	90                   	nop
c00005a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a5:	38 d9                	cmp    cl,bl
c00005a7:	75 0b                	jne    c00005b4 <memcmp+0x34>
c00005a9:	40                   	inc    eax
c00005aa:	42                   	inc    edx
c00005ab:	39 f0                	cmp    eax,esi
c00005ad:	75 f1                	jne    c00005a0 <memcmp+0x20>
c00005af:	31 c0                	xor    eax,eax
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    
c00005b4:	0f b6 c1             	movzx  eax,cl
c00005b7:	29 d8                	sub    eax,ebx
c00005b9:	5b                   	pop    ebx
c00005ba:	5e                   	pop    esi
c00005bb:	c3                   	ret    

c00005bc <memmove>:
c00005bc:	55                   	push   ebp
c00005bd:	57                   	push   edi
c00005be:	56                   	push   esi
c00005bf:	53                   	push   ebx
c00005c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005cc:	39 dd                	cmp    ebp,ebx
c00005ce:	0f 83 80 00 00 00    	jae    c0000654 <memmove+0x98>
c00005d4:	85 d2                	test   edx,edx
c00005d6:	74 74                	je     c000064c <memmove+0x90>
c00005d8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005db:	8d 75 04             	lea    esi,[ebp+0x4]
c00005de:	39 cd                	cmp    ebp,ecx
c00005e0:	0f 93 c1             	setae  cl
c00005e3:	39 f3                	cmp    ebx,esi
c00005e5:	0f 93 c0             	setae  al
c00005e8:	89 c6                	mov    esi,eax
c00005ea:	09 ce                	or     esi,ecx
c00005ec:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ef:	89 f0                	mov    eax,esi
c00005f1:	83 f9 0c             	cmp    ecx,0xc
c00005f4:	0f 97 c1             	seta   cl
c00005f7:	84 c8                	test   al,cl
c00005f9:	74 75                	je     c0000670 <memmove+0xb4>
c00005fb:	89 e9                	mov    ecx,ebp
c00005fd:	09 d9                	or     ecx,ebx
c00005ff:	83 e1 03             	and    ecx,0x3
c0000602:	75 6c                	jne    c0000670 <memmove+0xb4>
c0000604:	89 d7                	mov    edi,edx
c0000606:	89 d9                	mov    ecx,ebx
c0000608:	83 e7 fc             	and    edi,0xfffffffc
c000060b:	89 ee                	mov    esi,ebp
c000060d:	01 df                	add    edi,ebx
c000060f:	90                   	nop
c0000610:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000612:	83 c6 04             	add    esi,0x4
c0000615:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000618:	83 c1 04             	add    ecx,0x4
c000061b:	39 f9                	cmp    ecx,edi
c000061d:	75 f1                	jne    c0000610 <memmove+0x54>
c000061f:	89 d1                	mov    ecx,edx
c0000621:	89 d7                	mov    edi,edx
c0000623:	83 e1 fc             	and    ecx,0xfffffffc
c0000626:	29 cf                	sub    edi,ecx
c0000628:	01 cb                	add    ebx,ecx
c000062a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000062e:	39 ca                	cmp    edx,ecx
c0000630:	74 1a                	je     c000064c <memmove+0x90>
c0000632:	8a 03                	mov    al,BYTE PTR [ebx]
c0000634:	83 ff 01             	cmp    edi,0x1
c0000637:	88 06                	mov    BYTE PTR [esi],al
c0000639:	74 11                	je     c000064c <memmove+0x90>
c000063b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000063e:	83 ff 02             	cmp    edi,0x2
c0000641:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000644:	74 06                	je     c000064c <memmove+0x90>
c0000646:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000649:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000064c:	5b                   	pop    ebx
c000064d:	89 e8                	mov    eax,ebp
c000064f:	5e                   	pop    esi
c0000650:	5f                   	pop    edi
c0000651:	5d                   	pop    ebp
c0000652:	c3                   	ret    
c0000653:	90                   	nop
c0000654:	76 f6                	jbe    c000064c <memmove+0x90>
c0000656:	85 d2                	test   edx,edx
c0000658:	74 f2                	je     c000064c <memmove+0x90>
c000065a:	4b                   	dec    ebx
c000065b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000065e:	66 90                	xchg   ax,ax
c0000660:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000663:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000666:	4a                   	dec    edx
c0000667:	75 f7                	jne    c0000660 <memmove+0xa4>
c0000669:	5b                   	pop    ebx
c000066a:	89 e8                	mov    eax,ebp
c000066c:	5e                   	pop    esi
c000066d:	5f                   	pop    edi
c000066e:	5d                   	pop    ebp
c000066f:	c3                   	ret    
c0000670:	01 ea                	add    edx,ebp
c0000672:	89 e9                	mov    ecx,ebp
c0000674:	8a 03                	mov    al,BYTE PTR [ebx]
c0000676:	41                   	inc    ecx
c0000677:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000067a:	43                   	inc    ebx
c000067b:	39 d1                	cmp    ecx,edx
c000067d:	75 f5                	jne    c0000674 <memmove+0xb8>
c000067f:	eb cb                	jmp    c000064c <memmove+0x90>
c0000681:	8d 76 00             	lea    esi,[esi+0x0]

c0000684 <memset>:
c0000684:	57                   	push   edi
c0000685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000689:	85 c9                	test   ecx,ecx
c000068b:	74 0b                	je     c0000698 <memset+0x14>
c000068d:	fc                   	cld    
c000068e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000692:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000696:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000069c:	5f                   	pop    edi
c000069d:	c3                   	ret    
c000069e:	66 90                	xchg   ax,ax

c00006a0 <strlen>:
c00006a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006a4:	31 c0                	xor    eax,eax
c00006a6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a9:	74 09                	je     c00006b4 <strlen+0x14>
c00006ab:	90                   	nop
c00006ac:	40                   	inc    eax
c00006ad:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b1:	75 f9                	jne    c00006ac <strlen+0xc>
c00006b3:	c3                   	ret    
c00006b4:	c3                   	ret    
c00006b5:	8d 76 00             	lea    esi,[esi+0x0]

c00006b8 <strpbrk>:
c00006b8:	57                   	push   edi
c00006b9:	56                   	push   esi
c00006ba:	53                   	push   ebx
c00006bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006c5:	84 db                	test   bl,bl
c00006c7:	74 21                	je     c00006ea <strpbrk+0x32>
c00006c9:	8a 07                	mov    al,BYTE PTR [edi]
c00006cb:	84 c0                	test   al,al
c00006cd:	74 14                	je     c00006e3 <strpbrk+0x2b>
c00006cf:	38 d8                	cmp    al,bl
c00006d1:	74 19                	je     c00006ec <strpbrk+0x34>
c00006d3:	89 fa                	mov    edx,edi
c00006d5:	eb 05                	jmp    c00006dc <strpbrk+0x24>
c00006d7:	90                   	nop
c00006d8:	38 d9                	cmp    cl,bl
c00006da:	74 10                	je     c00006ec <strpbrk+0x34>
c00006dc:	42                   	inc    edx
c00006dd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006df:	84 c9                	test   cl,cl
c00006e1:	75 f5                	jne    c00006d8 <strpbrk+0x20>
c00006e3:	46                   	inc    esi
c00006e4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006e6:	84 db                	test   bl,bl
c00006e8:	75 e1                	jne    c00006cb <strpbrk+0x13>
c00006ea:	31 f6                	xor    esi,esi
c00006ec:	89 f0                	mov    eax,esi
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	5f                   	pop    edi
c00006f1:	c3                   	ret    
c00006f2:	66 90                	xchg   ax,ax

c00006f4 <strtok>:
c00006f4:	56                   	push   esi
c00006f5:	53                   	push   ebx
c00006f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006fe:	85 db                	test   ebx,ebx
c0000700:	75 07                	jne    c0000709 <strtok+0x15>
c0000702:	eb 2c                	jmp    c0000730 <strtok+0x3c>
c0000704:	43                   	inc    ebx
c0000705:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000709:	56                   	push   esi
c000070a:	53                   	push   ebx
c000070b:	e8 a8 ff ff ff       	call   c00006b8 <strpbrk>
c0000710:	5a                   	pop    edx
c0000711:	a3 c0 85 02 c0       	mov    ds:0xc00285c0,eax
c0000716:	59                   	pop    ecx
c0000717:	39 d8                	cmp    eax,ebx
c0000719:	74 e9                	je     c0000704 <strtok+0x10>
c000071b:	85 c0                	test   eax,eax
c000071d:	74 1b                	je     c000073a <strtok+0x46>
c000071f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000722:	8d 50 01             	lea    edx,[eax+0x1]
c0000725:	89 d8                	mov    eax,ebx
c0000727:	89 15 c0 85 02 c0    	mov    DWORD PTR ds:0xc00285c0,edx
c000072d:	5b                   	pop    ebx
c000072e:	5e                   	pop    esi
c000072f:	c3                   	ret    
c0000730:	8b 1d c0 85 02 c0    	mov    ebx,DWORD PTR ds:0xc00285c0
c0000736:	85 db                	test   ebx,ebx
c0000738:	75 cf                	jne    c0000709 <strtok+0x15>
c000073a:	31 c0                	xor    eax,eax
c000073c:	5b                   	pop    ebx
c000073d:	5e                   	pop    esi
c000073e:	c3                   	ret    
c000073f:	90                   	nop

c0000740 <strcpy>:
c0000740:	53                   	push   ebx
c0000741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000749:	89 c3                	mov    ebx,eax
c000074b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000074d:	84 d2                	test   dl,dl
c000074f:	74 0d                	je     c000075e <strcpy+0x1e>
c0000751:	8d 76 00             	lea    esi,[esi+0x0]
c0000754:	88 13                	mov    BYTE PTR [ebx],dl
c0000756:	41                   	inc    ecx
c0000757:	43                   	inc    ebx
c0000758:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075a:	84 d2                	test   dl,dl
c000075c:	75 f6                	jne    c0000754 <strcpy+0x14>
c000075e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000761:	5b                   	pop    ebx
c0000762:	c3                   	ret    
c0000763:	90                   	nop

c0000764 <strncpy>:
c0000764:	55                   	push   ebp
c0000765:	57                   	push   edi
c0000766:	56                   	push   esi
c0000767:	53                   	push   ebx
c0000768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000076c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000770:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000774:	85 c0                	test   eax,eax
c0000776:	74 39                	je     c00007b1 <strncpy+0x4d>
c0000778:	8a 1e                	mov    bl,BYTE PTR [esi]
c000077a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000077d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000780:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000783:	84 db                	test   bl,bl
c0000785:	74 31                	je     c00007b8 <strncpy+0x54>
c0000787:	85 c9                	test   ecx,ecx
c0000789:	74 26                	je     c00007b1 <strncpy+0x4d>
c000078b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000078e:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000791:	8d 55 02             	lea    edx,[ebp+0x2]
c0000794:	8d 46 02             	lea    eax,[esi+0x2]
c0000797:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000079a:	84 db                	test   bl,bl
c000079c:	75 0f                	jne    c00007ad <strncpy+0x49>
c000079e:	eb 18                	jmp    c00007b8 <strncpy+0x54>
c00007a0:	40                   	inc    eax
c00007a1:	42                   	inc    edx
c00007a2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007a5:	49                   	dec    ecx
c00007a6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a9:	84 db                	test   bl,bl
c00007ab:	74 0b                	je     c00007b8 <strncpy+0x54>
c00007ad:	85 c9                	test   ecx,ecx
c00007af:	75 ef                	jne    c00007a0 <strncpy+0x3c>
c00007b1:	5b                   	pop    ebx
c00007b2:	89 e8                	mov    eax,ebp
c00007b4:	5e                   	pop    esi
c00007b5:	5f                   	pop    edi
c00007b6:	5d                   	pop    ebp
c00007b7:	c3                   	ret    
c00007b8:	85 c9                	test   ecx,ecx
c00007ba:	74 f5                	je     c00007b1 <strncpy+0x4d>
c00007bc:	fc                   	cld    
c00007bd:	31 c0                	xor    eax,eax
c00007bf:	89 d7                	mov    edi,edx
c00007c1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007c3:	89 e8                	mov    eax,ebp
c00007c5:	5b                   	pop    ebx
c00007c6:	5e                   	pop    esi
c00007c7:	5f                   	pop    edi
c00007c8:	5d                   	pop    ebp
c00007c9:	c3                   	ret    
c00007ca:	66 90                	xchg   ax,ax

c00007cc <strcmp>:
c00007cc:	56                   	push   esi
c00007cd:	53                   	push   ebx
c00007ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007db:	38 d1                	cmp    cl,dl
c00007dd:	75 1d                	jne    c00007fc <strcmp+0x30>
c00007df:	84 c9                	test   cl,cl
c00007e1:	74 21                	je     c0000804 <strcmp+0x38>
c00007e3:	b8 01 00 00 00       	mov    eax,0x1
c00007e8:	eb 07                	jmp    c00007f1 <strcmp+0x25>
c00007ea:	66 90                	xchg   ax,ax
c00007ec:	40                   	inc    eax
c00007ed:	84 d2                	test   dl,dl
c00007ef:	74 13                	je     c0000804 <strcmp+0x38>
c00007f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007f4:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f8:	38 ca                	cmp    dl,cl
c00007fa:	74 f0                	je     c00007ec <strcmp+0x20>
c00007fc:	0f b6 c2             	movzx  eax,dl
c00007ff:	5b                   	pop    ebx
c0000800:	29 c8                	sub    eax,ecx
c0000802:	5e                   	pop    esi
c0000803:	c3                   	ret    
c0000804:	31 c0                	xor    eax,eax
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	c3                   	ret    
c0000809:	8d 76 00             	lea    esi,[esi+0x0]

c000080c <strchr>:
c000080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000810:	8a 10                	mov    dl,BYTE PTR [eax]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 15                	je     c000082b <strchr+0x1f>
c0000816:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000081a:	38 ca                	cmp    dl,cl
c000081c:	75 06                	jne    c0000824 <strchr+0x18>
c000081e:	eb 0e                	jmp    c000082e <strchr+0x22>
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 09                	je     c000082d <strchr+0x21>
c0000824:	40                   	inc    eax
c0000825:	8a 10                	mov    dl,BYTE PTR [eax]
c0000827:	84 d2                	test   dl,dl
c0000829:	75 f5                	jne    c0000820 <strchr+0x14>
c000082b:	31 c0                	xor    eax,eax
c000082d:	c3                   	ret    
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncmp>:
c0000830:	57                   	push   edi
c0000831:	56                   	push   esi
c0000832:	53                   	push   ebx
c0000833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000837:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083f:	85 ff                	test   edi,edi
c0000841:	74 28                	je     c000086b <strncmp+0x3b>
c0000843:	8a 16                	mov    dl,BYTE PTR [esi]
c0000845:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000848:	38 d1                	cmp    cl,dl
c000084a:	75 28                	jne    c0000874 <strncmp+0x44>
c000084c:	8d 46 01             	lea    eax,[esi+0x1]
c000084f:	84 c9                	test   cl,cl
c0000851:	74 18                	je     c000086b <strncmp+0x3b>
c0000853:	01 fe                	add    esi,edi
c0000855:	eb 0f                	jmp    c0000866 <strncmp+0x36>
c0000857:	90                   	nop
c0000858:	8a 10                	mov    dl,BYTE PTR [eax]
c000085a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000085d:	38 ca                	cmp    dl,cl
c000085f:	75 13                	jne    c0000874 <strncmp+0x44>
c0000861:	40                   	inc    eax
c0000862:	84 d2                	test   dl,dl
c0000864:	74 05                	je     c000086b <strncmp+0x3b>
c0000866:	43                   	inc    ebx
c0000867:	39 c6                	cmp    esi,eax
c0000869:	75 ed                	jne    c0000858 <strncmp+0x28>
c000086b:	5b                   	pop    ebx
c000086c:	31 c0                	xor    eax,eax
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    
c0000871:	8d 76 00             	lea    esi,[esi+0x0]
c0000874:	5b                   	pop    ebx
c0000875:	0f b6 c2             	movzx  eax,dl
c0000878:	5e                   	pop    esi
c0000879:	29 c8                	sub    eax,ecx
c000087b:	5f                   	pop    edi
c000087c:	c3                   	ret    
c000087d:	8d 76 00             	lea    esi,[esi+0x0]

c0000880 <strcat>:
c0000880:	56                   	push   esi
c0000881:	53                   	push   ebx
c0000882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000886:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000088a:	89 c3                	mov    ebx,eax
c000088c:	eb 04                	jmp    c0000892 <strcat+0x12>
c000088e:	66 90                	xchg   ax,ax
c0000890:	89 d3                	mov    ebx,edx
c0000892:	8d 53 01             	lea    edx,[ebx+0x1]
c0000895:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000899:	75 f5                	jne    c0000890 <strcat+0x10>
c000089b:	31 d2                	xor    edx,edx
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008a3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008a6:	42                   	inc    edx
c00008a7:	84 c9                	test   cl,cl
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	5e                   	pop    esi
c00008ad:	c3                   	ret    
c00008ae:	66 90                	xchg   ax,ax

c00008b0 <strncat>:
c00008b0:	56                   	push   esi
c00008b1:	53                   	push   ebx
c00008b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008be:	85 f6                	test   esi,esi
c00008c0:	74 1e                	je     c00008e0 <strncat+0x30>
c00008c2:	89 c2                	mov    edx,eax
c00008c4:	42                   	inc    edx
c00008c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c9:	75 f9                	jne    c00008c4 <strncat+0x14>
c00008cb:	01 ce                	add    esi,ecx
c00008cd:	eb 06                	jmp    c00008d5 <strncat+0x25>
c00008cf:	90                   	nop
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 10                	je     c00008e4 <strncat+0x34>
c00008d4:	42                   	inc    edx
c00008d5:	41                   	inc    ecx
c00008d6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008dc:	84 db                	test   bl,bl
c00008de:	75 f0                	jne    c00008d0 <strncat+0x20>
c00008e0:	5b                   	pop    ebx
c00008e1:	5e                   	pop    esi
c00008e2:	c3                   	ret    
c00008e3:	90                   	nop
c00008e4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008e7:	5b                   	pop    ebx
c00008e8:	5e                   	pop    esi
c00008e9:	c3                   	ret    
c00008ea:	66 90                	xchg   ax,ax

c00008ec <strstr>:
c00008ec:	57                   	push   edi
c00008ed:	56                   	push   esi
c00008ee:	53                   	push   ebx
c00008ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008f7:	57                   	push   edi
c00008f8:	e8 a3 fd ff ff       	call   c00006a0 <strlen>
c00008fd:	59                   	pop    ecx
c00008fe:	85 c0                	test   eax,eax
c0000900:	74 2a                	je     c000092c <strstr+0x40>
c0000902:	89 c6                	mov    esi,eax
c0000904:	eb 12                	jmp    c0000918 <strstr+0x2c>
c0000906:	66 90                	xchg   ax,ax
c0000908:	56                   	push   esi
c0000909:	57                   	push   edi
c000090a:	53                   	push   ebx
c000090b:	e8 70 fc ff ff       	call   c0000580 <memcmp>
c0000910:	83 c4 0c             	add    esp,0xc
c0000913:	85 c0                	test   eax,eax
c0000915:	74 15                	je     c000092c <strstr+0x40>
c0000917:	43                   	inc    ebx
c0000918:	53                   	push   ebx
c0000919:	e8 82 fd ff ff       	call   c00006a0 <strlen>
c000091e:	5a                   	pop    edx
c000091f:	39 f0                	cmp    eax,esi
c0000921:	73 e5                	jae    c0000908 <strstr+0x1c>
c0000923:	5b                   	pop    ebx
c0000924:	31 c0                	xor    eax,eax
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d 76 00             	lea    esi,[esi+0x0]
c000092c:	89 d8                	mov    eax,ebx
c000092e:	5b                   	pop    ebx
c000092f:	5e                   	pop    esi
c0000930:	5f                   	pop    edi
c0000931:	c3                   	ret    
c0000932:	66 90                	xchg   ax,ax

c0000934 <toupper>:
c0000934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000938:	0f b6 d0             	movzx  edx,al
c000093b:	f6 82 e0 3c 02 c0 02 	test   BYTE PTR [edx-0x3ffdc320],0x2
c0000942:	74 03                	je     c0000947 <toupper+0x13>
c0000944:	83 e8 20             	sub    eax,0x20
c0000947:	c3                   	ret    

c0000948 <tolower>:
c0000948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000094c:	0f b6 d0             	movzx  edx,al
c000094f:	f6 82 e0 3c 02 c0 01 	test   BYTE PTR [edx-0x3ffdc320],0x1
c0000956:	74 03                	je     c000095b <tolower+0x13>
c0000958:	83 c0 20             	add    eax,0x20
c000095b:	c3                   	ret    

c000095c <simple_strtoul>:
c000095c:	55                   	push   ebp
c000095d:	57                   	push   edi
c000095e:	56                   	push   esi
c000095f:	53                   	push   ebx
c0000960:	83 ec 08             	sub    esp,0x8
c0000963:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000967:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000096b:	90                   	nop
c000096c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000096f:	f6 82 e0 3c 02 c0 08 	test   BYTE PTR [edx-0x3ffdc320],0x8
c0000976:	75 05                	jne    c000097d <simple_strtoul+0x21>
c0000978:	80 fa 09             	cmp    dl,0x9
c000097b:	75 03                	jne    c0000980 <simple_strtoul+0x24>
c000097d:	41                   	inc    ecx
c000097e:	eb ec                	jmp    c000096c <simple_strtoul+0x10>
c0000980:	80 fa 2d             	cmp    dl,0x2d
c0000983:	0f 84 1b 01 00 00    	je     c0000aa4 <simple_strtoul+0x148>
c0000989:	80 fa 2b             	cmp    dl,0x2b
c000098c:	0f 84 c2 00 00 00    	je     c0000a54 <simple_strtoul+0xf8>
c0000992:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000099a:	85 f6                	test   esi,esi
c000099c:	0f 85 c3 00 00 00    	jne    c0000a65 <simple_strtoul+0x109>
c00009a2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a4:	80 fa 30             	cmp    dl,0x30
c00009a7:	0f 84 47 01 00 00    	je     c0000af4 <simple_strtoul+0x198>
c00009ad:	be 0a 00 00 00       	mov    esi,0xa
c00009b2:	84 d2                	test   dl,dl
c00009b4:	0f 84 6f 01 00 00    	je     c0000b29 <simple_strtoul+0x1cd>
c00009ba:	31 ed                	xor    ebp,ebp
c00009bc:	31 ff                	xor    edi,edi
c00009be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009c5:	eb 2b                	jmp    c00009f2 <simple_strtoul+0x96>
c00009c7:	90                   	nop
c00009c8:	83 eb 30             	sub    ebx,0x30
c00009cb:	39 f3                	cmp    ebx,esi
c00009cd:	73 4d                	jae    c0000a1c <simple_strtoul+0xc0>
c00009cf:	31 d2                	xor    edx,edx
c00009d1:	89 d8                	mov    eax,ebx
c00009d3:	f7 d0                	not    eax
c00009d5:	f7 f6                	div    esi
c00009d7:	39 f8                	cmp    eax,edi
c00009d9:	0f 82 b1 00 00 00    	jb     c0000a90 <simple_strtoul+0x134>
c00009df:	0f af fe             	imul   edi,esi
c00009e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e9:	01 df                	add    edi,ebx
c00009eb:	41                   	inc    ecx
c00009ec:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009ee:	84 d2                	test   dl,dl
c00009f0:	74 2a                	je     c0000a1c <simple_strtoul+0xc0>
c00009f2:	0f b6 da             	movzx  ebx,dl
c00009f5:	f6 83 e0 3c 02 c0 04 	test   BYTE PTR [ebx-0x3ffdc320],0x4
c00009fc:	75 ca                	jne    c00009c8 <simple_strtoul+0x6c>
c00009fe:	0f be d2             	movsx  edx,dl
c0000a01:	52                   	push   edx
c0000a02:	e8 2d ff ff ff       	call   c0000934 <toupper>
c0000a07:	5b                   	pop    ebx
c0000a08:	0f b6 d0             	movzx  edx,al
c0000a0b:	f6 82 e0 3c 02 c0 01 	test   BYTE PTR [edx-0x3ffdc320],0x1
c0000a12:	74 08                	je     c0000a1c <simple_strtoul+0xc0>
c0000a14:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a17:	39 f3                	cmp    ebx,esi
c0000a19:	72 b4                	jb     c00009cf <simple_strtoul+0x73>
c0000a1b:	90                   	nop
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	85 c0                	test   eax,eax
c0000a22:	74 14                	je     c0000a38 <simple_strtoul+0xdc>
c0000a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a27:	09 f8                	or     eax,edi
c0000a29:	75 71                	jne    c0000a9c <simple_strtoul+0x140>
c0000a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a33:	31 ff                	xor    edi,edi
c0000a35:	89 30                	mov    DWORD PTR [eax],esi
c0000a37:	90                   	nop
c0000a38:	4d                   	dec    ebp
c0000a39:	75 05                	jne    c0000a40 <simple_strtoul+0xe4>
c0000a3b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a40:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a45:	75 02                	jne    c0000a49 <simple_strtoul+0xed>
c0000a47:	f7 df                	neg    edi
c0000a49:	83 c4 08             	add    esp,0x8
c0000a4c:	89 f8                	mov    eax,edi
c0000a4e:	5b                   	pop    ebx
c0000a4f:	5e                   	pop    esi
c0000a50:	5f                   	pop    edi
c0000a51:	5d                   	pop    ebp
c0000a52:	c3                   	ret    
c0000a53:	90                   	nop
c0000a54:	41                   	inc    ecx
c0000a55:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a5d:	85 f6                	test   esi,esi
c0000a5f:	0f 84 3d ff ff ff    	je     c00009a2 <simple_strtoul+0x46>
c0000a65:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a68:	83 f8 22             	cmp    eax,0x22
c0000a6b:	77 6a                	ja     c0000ad7 <simple_strtoul+0x17b>
c0000a6d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a6f:	83 fe 08             	cmp    esi,0x8
c0000a72:	0f 84 a2 00 00 00    	je     c0000b1a <simple_strtoul+0x1be>
c0000a78:	83 fe 10             	cmp    esi,0x10
c0000a7b:	0f 85 31 ff ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000a81:	80 fa 30             	cmp    dl,0x30
c0000a84:	74 2c                	je     c0000ab2 <simple_strtoul+0x156>
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	e9 22 ff ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000a90:	bd 01 00 00 00       	mov    ebp,0x1
c0000a95:	31 ff                	xor    edi,edi
c0000a97:	e9 4f ff ff ff       	jmp    c00009eb <simple_strtoul+0x8f>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	89 08                	mov    DWORD PTR [eax],ecx
c0000aa2:	eb 94                	jmp    c0000a38 <simple_strtoul+0xdc>
c0000aa4:	41                   	inc    ecx
c0000aa5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aad:	e9 e8 fe ff ff       	jmp    c000099a <simple_strtoul+0x3e>
c0000ab2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab9:	50                   	push   eax
c0000aba:	e8 89 fe ff ff       	call   c0000948 <tolower>
c0000abf:	5e                   	pop    esi
c0000ac0:	83 f8 78             	cmp    eax,0x78
c0000ac3:	0f 84 84 00 00 00    	je     c0000b4d <simple_strtoul+0x1f1>
c0000ac9:	41                   	inc    ecx
c0000aca:	be 10 00 00 00       	mov    esi,0x10
c0000acf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ad2:	e9 db fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000ad7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000adb:	85 ff                	test   edi,edi
c0000add:	74 5c                	je     c0000b3b <simple_strtoul+0x1df>
c0000adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ae3:	85 c9                	test   ecx,ecx
c0000ae5:	75 4e                	jne    c0000b35 <simple_strtoul+0x1d9>
c0000ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aed:	31 ff                	xor    edi,edi
c0000aef:	e9 4c ff ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000af4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af8:	88 04 24             	mov    BYTE PTR [esp],al
c0000afb:	50                   	push   eax
c0000afc:	e8 47 fe ff ff       	call   c0000948 <tolower>
c0000b01:	5d                   	pop    ebp
c0000b02:	83 f8 78             	cmp    eax,0x78
c0000b05:	74 3b                	je     c0000b42 <simple_strtoul+0x1e6>
c0000b07:	41                   	inc    ecx
c0000b08:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b0b:	80 fa 30             	cmp    dl,0x30
c0000b0e:	74 13                	je     c0000b23 <simple_strtoul+0x1c7>
c0000b10:	be 08 00 00 00       	mov    esi,0x8
c0000b15:	e9 98 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000b1a:	80 fa 30             	cmp    dl,0x30
c0000b1d:	0f 85 8f fe ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000b23:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b26:	41                   	inc    ecx
c0000b27:	eb e7                	jmp    c0000b10 <simple_strtoul+0x1b4>
c0000b29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b2d:	85 d2                	test   edx,edx
c0000b2f:	74 0a                	je     c0000b3b <simple_strtoul+0x1df>
c0000b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b39:	89 30                	mov    DWORD PTR [eax],esi
c0000b3b:	31 ff                	xor    edi,edi
c0000b3d:	e9 fe fe ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000b42:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b45:	83 c1 02             	add    ecx,0x2
c0000b48:	e9 34 ff ff ff       	jmp    c0000a81 <simple_strtoul+0x125>
c0000b4d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b50:	be 10 00 00 00       	mov    esi,0x10
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 55 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>

c0000b5d <largebin_index>:
c0000b5d:	89 c2                	mov    edx,eax
c0000b5f:	c1 ea 08             	shr    edx,0x8
c0000b62:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b68:	77 10                	ja     c0000b7a <largebin_index+0x1d>
c0000b6a:	0f bd d2             	bsr    edx,edx
c0000b6d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b70:	d3 e8                	shr    eax,cl
c0000b72:	83 e0 03             	and    eax,0x3
c0000b75:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b79:	c3                   	ret    
c0000b7a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b7f:	c3                   	ret    

c0000b80 <malloc_init_state>:
c0000b80:	53                   	push   ebx
c0000b81:	8d 50 34             	lea    edx,[eax+0x34]
c0000b84:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b8a:	89 d1                	mov    ecx,edx
c0000b8c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b8f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b92:	83 c2 08             	add    edx,0x8
c0000b95:	39 da                	cmp    edx,ebx
c0000b97:	75 f3                	jne    c0000b8c <malloc_init_state+0xc>
c0000b99:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b9b:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ba5:	83 e2 03             	and    edx,0x3
c0000ba8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bb2:	83 ca 48             	or     edx,0x48
c0000bb5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bbf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bd0:	89 10                	mov    DWORD PTR [eax],edx
c0000bd2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bd5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bdf:	5b                   	pop    ebx
c0000be0:	c3                   	ret    

c0000be1 <malloc_consolidate>:
c0000be1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000be3:	85 d2                	test   edx,edx
c0000be5:	0f 84 d8 00 00 00    	je     c0000cc3 <malloc_consolidate+0xe2>
c0000beb:	55                   	push   ebp
c0000bec:	83 e2 fd             	and    edx,0xfffffffd
c0000bef:	57                   	push   edi
c0000bf0:	89 c5                	mov    ebp,eax
c0000bf2:	56                   	push   esi
c0000bf3:	8d 78 34             	lea    edi,[eax+0x34]
c0000bf6:	53                   	push   ebx
c0000bf7:	83 ec 10             	sub    esp,0x10
c0000bfa:	89 10                	mov    DWORD PTR [eax],edx
c0000bfc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c00:	c1 ea 03             	shr    edx,0x3
c0000c03:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c0b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c0e:	85 d2                	test   edx,edx
c0000c10:	0f 84 98 00 00 00    	je     c0000cae <malloc_consolidate+0xcd>
c0000c16:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c1d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c20:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c27:	89 f9                	mov    ecx,edi
c0000c29:	83 e1 fe             	and    ecx,0xfffffffe
c0000c2c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c2f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c32:	83 e3 fc             	and    ebx,0xfffffffc
c0000c35:	83 e7 01             	and    edi,0x1
c0000c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c3b:	75 14                	jne    c0000c51 <malloc_consolidate+0x70>
c0000c3d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c3f:	29 fa                	sub    edx,edi
c0000c41:	01 f9                	add    ecx,edi
c0000c43:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c46:	89 fb                	mov    ebx,edi
c0000c48:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c4b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c4e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c51:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c54:	74 40                	je     c0000c96 <malloc_consolidate+0xb5>
c0000c56:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c59:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c5c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c60:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c63:	83 e7 01             	and    edi,0x1
c0000c66:	75 0e                	jne    c0000c76 <malloc_consolidate+0x95>
c0000c68:	01 d9                	add    ecx,ebx
c0000c6a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c6d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c70:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c73:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c76:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c79:	89 ce                	mov    esi,ecx
c0000c7b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c7e:	83 ce 01             	or     esi,0x1
c0000c81:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c84:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c87:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c8a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c8e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c91:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c94:	eb 0c                	jmp    c0000ca2 <malloc_consolidate+0xc1>
c0000c96:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c99:	83 c9 01             	or     ecx,0x1
c0000c9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ca6:	85 d2                	test   edx,edx
c0000ca8:	0f 85 6f ff ff ff    	jne    c0000c1d <malloc_consolidate+0x3c>
c0000cae:	83 c5 04             	add    ebp,0x4
c0000cb1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cb5:	0f 85 50 ff ff ff    	jne    c0000c0b <malloc_consolidate+0x2a>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	5d                   	pop    ebp
c0000cc2:	c3                   	ret    
c0000cc3:	e9 b8 fe ff ff       	jmp    c0000b80 <malloc_init_state>

c0000cc8 <dlfree>:
c0000cc8:	57                   	push   edi
c0000cc9:	56                   	push   esi
c0000cca:	53                   	push   ebx
c0000ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ccf:	85 db                	test   ebx,ebx
c0000cd1:	0f 84 e2 00 00 00    	je     c0000db9 <dlfree+0xf1>
c0000cd7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cda:	8b 0d e0 85 02 c0    	mov    ecx,DWORD PTR ds:0xc00285e0
c0000ce0:	89 f0                	mov    eax,esi
c0000ce2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	39 c1                	cmp    ecx,eax
c0000cea:	72 24                	jb     c0000d10 <dlfree+0x48>
c0000cec:	83 c9 03             	or     ecx,0x3
c0000cef:	c1 e8 03             	shr    eax,0x3
c0000cf2:	89 0d e0 85 02 c0    	mov    DWORD PTR ds:0xc00285e0,ecx
c0000cf8:	83 e8 02             	sub    eax,0x2
c0000cfb:	8b 0c 85 e4 85 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7a1c]
c0000d02:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d04:	89 14 85 e4 85 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7a1c],edx
c0000d0b:	e9 a9 00 00 00       	jmp    c0000db9 <dlfree+0xf1>
c0000d10:	83 e6 02             	and    esi,0x2
c0000d13:	0f 85 a0 00 00 00    	jne    c0000db9 <dlfree+0xf1>
c0000d19:	83 c9 01             	or     ecx,0x1
c0000d1c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d1f:	89 0d e0 85 02 c0    	mov    DWORD PTR ds:0xc00285e0,ecx
c0000d25:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d28:	83 e1 fc             	and    ecx,0xfffffffc
c0000d2b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d2f:	75 13                	jne    c0000d44 <dlfree+0x7c>
c0000d31:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d34:	29 da                	sub    edx,ebx
c0000d36:	01 d8                	add    eax,ebx
c0000d38:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d44:	39 35 0c 86 02 c0    	cmp    DWORD PTR ds:0xc002860c,esi
c0000d4a:	74 40                	je     c0000d8c <dlfree+0xc4>
c0000d4c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d50:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d53:	80 e3 01             	and    bl,0x1
c0000d56:	75 0e                	jne    c0000d66 <dlfree+0x9e>
c0000d58:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d5b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d5e:	01 c8                	add    eax,ecx
c0000d60:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d63:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d66:	8b 0d 1c 86 02 c0    	mov    ecx,DWORD PTR ds:0xc002861c
c0000d6c:	c7 42 0c 14 86 02 c0 	mov    DWORD PTR [edx+0xc],0xc0028614
c0000d73:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d76:	89 15 1c 86 02 c0    	mov    DWORD PTR ds:0xc002861c,edx
c0000d7c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d8a:	eb 10                	jmp    c0000d9c <dlfree+0xd4>
c0000d8c:	01 c8                	add    eax,ecx
c0000d8e:	89 c1                	mov    ecx,eax
c0000d90:	83 c9 01             	or     ecx,0x1
c0000d93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d96:	89 15 0c 86 02 c0    	mov    DWORD PTR ds:0xc002860c,edx
c0000d9c:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000da1:	76 16                	jbe    c0000db9 <dlfree+0xf1>
c0000da3:	f6 05 e0 85 02 c0 02 	test   BYTE PTR ds:0xc00285e0,0x2
c0000daa:	74 0d                	je     c0000db9 <dlfree+0xf1>
c0000dac:	5b                   	pop    ebx
c0000dad:	b8 e0 85 02 c0       	mov    eax,0xc00285e0
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	e9 28 fe ff ff       	jmp    c0000be1 <malloc_consolidate>
c0000db9:	5b                   	pop    ebx
c0000dba:	5e                   	pop    esi
c0000dbb:	5f                   	pop    edi
c0000dbc:	c3                   	ret    

c0000dbd <sYSMALLOc>:
c0000dbd:	55                   	push   ebp
c0000dbe:	57                   	push   edi
c0000dbf:	56                   	push   esi
c0000dc0:	53                   	push   ebx
c0000dc1:	89 d3                	mov    ebx,edx
c0000dc3:	83 ec 2c             	sub    esp,0x2c
c0000dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dca:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dd0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dd3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dda:	74 1f                	je     c0000dfb <sYSMALLOc+0x3e>
c0000ddc:	89 d8                	mov    eax,ebx
c0000dde:	e8 fe fd ff ff       	call   c0000be1 <malloc_consolidate>
c0000de3:	83 ec 0c             	sub    esp,0xc
c0000de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dea:	83 e8 07             	sub    eax,0x7
c0000ded:	50                   	push   eax
c0000dee:	e8 30 02 00 00       	call   c0001023 <dlmalloc>
c0000df3:	83 c4 10             	add    esp,0x10
c0000df6:	e9 20 02 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000dfb:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dfe:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e04:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e07:	83 e0 fc             	and    eax,0xfffffffc
c0000e0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e12:	83 c0 10             	add    eax,0x10
c0000e15:	01 c1                	add    ecx,eax
c0000e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e1b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e22:	74 04                	je     c0000e28 <sYSMALLOc+0x6b>
c0000e24:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e28:	f7 da                	neg    edx
c0000e2a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e32:	21 d1                	and    ecx,edx
c0000e34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e38:	7f 07                	jg     c0000e41 <sYSMALLOc+0x84>
c0000e3a:	31 c0                	xor    eax,eax
c0000e3c:	e9 da 01 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000e41:	83 ec 0c             	sub    esp,0xc
c0000e44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e48:	e8 d7 8d 00 00       	call   c0009c24 <sbrk>
c0000e4d:	83 c4 10             	add    esp,0x10
c0000e50:	89 c6                	mov    esi,eax
c0000e52:	83 f8 ff             	cmp    eax,0xffffffff
c0000e55:	74 e3                	je     c0000e3a <sYSMALLOc+0x7d>
c0000e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e5b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e5f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e62:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e68:	39 f1                	cmp    ecx,esi
c0000e6a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e70:	75 13                	jne    c0000e85 <sYSMALLOc+0xc8>
c0000e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e76:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 c8 01             	or     eax,0x1
c0000e7d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e80:	e9 3e 01 00 00       	jmp    c0000fc3 <sYSMALLOc+0x206>
c0000e85:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e8b:	88 d0                	mov    al,dl
c0000e8d:	83 e0 01             	and    eax,0x1
c0000e90:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e99:	0f 95 c0             	setne  al
c0000e9c:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000ea0:	39 f1                	cmp    ecx,esi
c0000ea2:	76 12                	jbe    c0000eb6 <sYSMALLOc+0xf9>
c0000ea4:	84 c0                	test   al,al
c0000ea6:	74 0e                	je     c0000eb6 <sYSMALLOc+0xf9>
c0000ea8:	83 e2 fe             	and    edx,0xfffffffe
c0000eab:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000eb1:	e9 83 00 00 00       	jmp    c0000f39 <sYSMALLOc+0x17c>
c0000eb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ebb:	74 7c                	je     c0000f39 <sYSMALLOc+0x17c>
c0000ebd:	84 c0                	test   al,al
c0000ebf:	74 0c                	je     c0000ecd <sYSMALLOc+0x110>
c0000ec1:	89 f0                	mov    eax,esi
c0000ec3:	29 c8                	sub    eax,ecx
c0000ec5:	01 e8                	add    eax,ebp
c0000ec7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ecd:	89 f2                	mov    edx,esi
c0000ecf:	83 e2 07             	and    edx,0x7
c0000ed2:	74 0c                	je     c0000ee0 <sYSMALLOc+0x123>
c0000ed4:	b8 08 00 00 00       	mov    eax,0x8
c0000ed9:	29 d0                	sub    eax,edx
c0000edb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ede:	eb 04                	jmp    c0000ee4 <sYSMALLOc+0x127>
c0000ee0:	89 f5                	mov    ebp,esi
c0000ee2:	31 c0                	xor    eax,eax
c0000ee4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000eec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ef0:	01 c1                	add    ecx,eax
c0000ef2:	83 ec 0c             	sub    esp,0xc
c0000ef5:	01 f1                	add    ecx,esi
c0000ef7:	01 ca                	add    edx,ecx
c0000ef9:	29 c8                	sub    eax,ecx
c0000efb:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000eff:	01 c2                	add    edx,eax
c0000f01:	52                   	push   edx
c0000f02:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f06:	e8 19 8d 00 00       	call   c0009c24 <sbrk>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f15:	75 0f                	jne    c0000f26 <sYSMALLOc+0x169>
c0000f17:	83 ec 0c             	sub    esp,0xc
c0000f1a:	6a 00                	push   0x0
c0000f1c:	e8 03 8d 00 00       	call   c0009c24 <sbrk>
c0000f21:	83 c4 10             	add    esp,0x10
c0000f24:	eb 30                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f26:	39 c6                	cmp    esi,eax
c0000f28:	76 33                	jbe    c0000f5d <sYSMALLOc+0x1a0>
c0000f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f35:	01 f0                	add    eax,esi
c0000f37:	eb 1d                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f39:	83 ec 0c             	sub    esp,0xc
c0000f3c:	89 f5                	mov    ebp,esi
c0000f3e:	6a 00                	push   0x0
c0000f40:	e8 df 8c 00 00       	call   c0009c24 <sbrk>
c0000f45:	89 c2                	mov    edx,eax
c0000f47:	29 f2                	sub    edx,esi
c0000f49:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f4d:	83 c4 10             	add    esp,0x10
c0000f50:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f56:	31 d2                	xor    edx,edx
c0000f58:	83 f8 ff             	cmp    eax,0xffffffff
c0000f5b:	74 66                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f5d:	29 e8                	sub    eax,ebp
c0000f5f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f62:	01 d0                	add    eax,edx
c0000f64:	83 c8 01             	or     eax,0x1
c0000f67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f6a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f75:	74 4c                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f7b:	83 e8 0c             	sub    eax,0xc
c0000f7e:	83 e0 f8             	and    eax,0xfffffff8
c0000f81:	89 c2                	mov    edx,eax
c0000f83:	83 ca 01             	or     edx,0x1
c0000f86:	83 f8 0f             	cmp    eax,0xf
c0000f89:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f8c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f94:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f9c:	76 25                	jbe    c0000fc3 <sYSMALLOc+0x206>
c0000f9e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fa4:	83 ec 0c             	sub    esp,0xc
c0000fa7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fb1:	83 c7 08             	add    edi,0x8
c0000fb4:	57                   	push   edi
c0000fb5:	e8 0e fd ff ff       	call   c0000cc8 <dlfree>
c0000fba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fcf:	73 06                	jae    c0000fd7 <sYSMALLOc+0x21a>
c0000fd1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdd:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe3:	73 06                	jae    c0000feb <sYSMALLOc+0x22e>
c0000fe5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000feb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff1:	83 e2 fc             	and    edx,0xfffffffc
c0000ff4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff8:	0f 82 3c fe ff ff    	jb     c0000e3a <sYSMALLOc+0x7d>
c0000ffe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001002:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001005:	29 fa                	sub    edx,edi
c0001007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000100a:	83 ca 01             	or     edx,0x1
c000100d:	89 fb                	mov    ebx,edi
c000100f:	83 c0 08             	add    eax,0x8
c0001012:	83 cb 01             	or     ebx,0x1
c0001015:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001018:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101b:	83 c4 2c             	add    esp,0x2c
c000101e:	5b                   	pop    ebx
c000101f:	5e                   	pop    esi
c0001020:	5f                   	pop    edi
c0001021:	5d                   	pop    ebp
c0001022:	c3                   	ret    

c0001023 <dlmalloc>:
c0001023:	55                   	push   ebp
c0001024:	57                   	push   edi
c0001025:	56                   	push   esi
c0001026:	53                   	push   ebx
c0001027:	83 ec 1c             	sub    esp,0x1c
c000102a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000102e:	83 f8 df             	cmp    eax,0xffffffdf
c0001031:	0f 87 70 03 00 00    	ja     c00013a7 <dlmalloc+0x384>
c0001037:	83 c0 0b             	add    eax,0xb
c000103a:	be 10 00 00 00       	mov    esi,0x10
c000103f:	83 f8 0f             	cmp    eax,0xf
c0001042:	76 05                	jbe    c0001049 <dlmalloc+0x26>
c0001044:	83 e0 f8             	and    eax,0xfffffff8
c0001047:	89 c6                	mov    esi,eax
c0001049:	8b 3d e0 85 02 c0    	mov    edi,DWORD PTR ds:0xc00285e0
c000104f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001055:	75 17                	jne    c000106e <dlmalloc+0x4b>
c0001057:	85 ff                	test   edi,edi
c0001059:	0f 85 05 03 00 00    	jne    c0001364 <dlmalloc+0x341>
c000105f:	b8 e0 85 02 c0       	mov    eax,0xc00285e0
c0001064:	e8 78 fb ff ff       	call   c0000be1 <malloc_consolidate>
c0001069:	e9 f6 02 00 00       	jmp    c0001364 <dlmalloc+0x341>
c000106e:	39 f7                	cmp    edi,esi
c0001070:	72 1f                	jb     c0001091 <dlmalloc+0x6e>
c0001072:	89 f2                	mov    edx,esi
c0001074:	c1 ea 03             	shr    edx,0x3
c0001077:	83 ea 02             	sub    edx,0x2
c000107a:	8b 04 95 e4 85 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7a1c]
c0001081:	85 c0                	test   eax,eax
c0001083:	74 0c                	je     c0001091 <dlmalloc+0x6e>
c0001085:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001088:	89 0c 95 e4 85 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7a1c],ecx
c000108f:	eb 30                	jmp    c00010c1 <dlmalloc+0x9e>
c0001091:	89 f0                	mov    eax,esi
c0001093:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001099:	77 2e                	ja     c00010c9 <dlmalloc+0xa6>
c000109b:	c1 e8 03             	shr    eax,0x3
c000109e:	8d 14 c5 14 86 02 c0 	lea    edx,[eax*8-0x3ffd79ec]
c00010a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010ac:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010af:	39 c3                	cmp    ebx,eax
c00010b1:	74 2e                	je     c00010e1 <dlmalloc+0xbe>
c00010b3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010b6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010bb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010be:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010c1:	83 c0 08             	add    eax,0x8
c00010c4:	e9 e0 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c00010c9:	e8 8f fa ff ff       	call   c0000b5d <largebin_index>
c00010ce:	83 e7 02             	and    edi,0x2
c00010d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010d5:	74 0a                	je     c00010e1 <dlmalloc+0xbe>
c00010d7:	b8 e0 85 02 c0       	mov    eax,0xc00285e0
c00010dc:	e8 00 fb ff ff       	call   c0000be1 <malloc_consolidate>
c00010e1:	8d 46 10             	lea    eax,[esi+0x10]
c00010e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e8:	8b 1d 20 86 02 c0    	mov    ebx,DWORD PTR ds:0xc0028620
c00010ee:	81 fb 14 86 02 c0    	cmp    ebx,0xc0028614
c00010f4:	0f 84 13 01 00 00    	je     c000120d <dlmalloc+0x1ea>
c00010fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001100:	83 e7 fc             	and    edi,0xfffffffc
c0001103:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001109:	77 4c                	ja     c0001157 <dlmalloc+0x134>
c000110b:	3d 14 86 02 c0       	cmp    eax,0xc0028614
c0001110:	75 45                	jne    c0001157 <dlmalloc+0x134>
c0001112:	39 1d 10 86 02 c0    	cmp    DWORD PTR ds:0xc0028610,ebx
c0001118:	75 3d                	jne    c0001157 <dlmalloc+0x134>
c000111a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000111e:	73 37                	jae    c0001157 <dlmalloc+0x134>
c0001120:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001123:	89 fa                	mov    edx,edi
c0001125:	a3 1c 86 02 c0       	mov    ds:0xc002861c,eax
c000112a:	a3 20 86 02 c0       	mov    ds:0xc0028620,eax
c000112f:	a3 10 86 02 c0       	mov    ds:0xc0028610,eax
c0001134:	29 f2                	sub    edx,esi
c0001136:	c7 40 08 14 86 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028614
c000113d:	c7 40 0c 14 86 02 c0 	mov    DWORD PTR [eax+0xc],0xc0028614
c0001144:	83 ce 01             	or     esi,0x1
c0001147:	89 d1                	mov    ecx,edx
c0001149:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000114c:	83 c9 01             	or     ecx,0x1
c000114f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001152:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001155:	eb 15                	jmp    c000116c <dlmalloc+0x149>
c0001157:	a3 20 86 02 c0       	mov    ds:0xc0028620,eax
c000115c:	39 fe                	cmp    esi,edi
c000115e:	c7 40 08 14 86 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028614
c0001165:	75 0d                	jne    c0001174 <dlmalloc+0x151>
c0001167:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000116c:	8d 43 08             	lea    eax,[ebx+0x8]
c000116f:	e9 35 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001174:	89 f8                	mov    eax,edi
c0001176:	81 ff ff 00 00 00    	cmp    edi,0xff
c000117c:	77 19                	ja     c0001197 <dlmalloc+0x174>
c000117e:	c1 e8 03             	shr    eax,0x3
c0001181:	8d 14 00             	lea    edx,[eax+eax*1]
c0001184:	83 c2 0d             	add    edx,0xd
c0001187:	8d 2c 95 d8 85 02 c0 	lea    ebp,[edx*4-0x3ffd7a28]
c000118e:	8b 14 95 e0 85 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7a20]
c0001195:	eb 46                	jmp    c00011dd <dlmalloc+0x1ba>
c0001197:	e8 c1 f9 ff ff       	call   c0000b5d <largebin_index>
c000119c:	8d 14 00             	lea    edx,[eax+eax*1]
c000119f:	83 c2 0d             	add    edx,0xd
c00011a2:	8d 0c 95 e0 85 02 c0 	lea    ecx,[edx*4-0x3ffd7a20]
c00011a9:	8b 14 95 e0 85 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7a20]
c00011b0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011b7:	89 d5                	mov    ebp,edx
c00011b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011bd:	74 1e                	je     c00011dd <dlmalloc+0x1ba>
c00011bf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011c2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011c5:	77 12                	ja     c00011d9 <dlmalloc+0x1b6>
c00011c7:	83 cf 01             	or     edi,0x1
c00011ca:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011cd:	76 05                	jbe    c00011d4 <dlmalloc+0x1b1>
c00011cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011d2:	eb f6                	jmp    c00011ca <dlmalloc+0x1a7>
c00011d4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011d7:	eb 04                	jmp    c00011dd <dlmalloc+0x1ba>
c00011d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011dd:	89 c7                	mov    edi,eax
c00011df:	88 c1                	mov    cl,al
c00011e1:	c1 ff 05             	sar    edi,0x5
c00011e4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e8:	bf 01 00 00 00       	mov    edi,0x1
c00011ed:	d3 e7                	shl    edi,cl
c00011ef:	89 f8                	mov    eax,edi
c00011f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011f5:	09 04 bd 14 89 02 c0 	or     DWORD PTR [edi*4-0x3ffd76ec],eax
c00011fc:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011ff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001202:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001205:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001208:	e9 db fe ff ff       	jmp    c00010e8 <dlmalloc+0xc5>
c000120d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001213:	76 78                	jbe    c000128d <dlmalloc+0x26a>
c0001215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001219:	8d 04 c5 14 86 02 c0 	lea    eax,[eax*8-0x3ffd79ec]
c0001220:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001223:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001226:	39 ca                	cmp    edx,ecx
c0001228:	74 63                	je     c000128d <dlmalloc+0x26a>
c000122a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000122d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001230:	83 e3 fc             	and    ebx,0xfffffffc
c0001233:	39 de                	cmp    esi,ebx
c0001235:	77 52                	ja     c0001289 <dlmalloc+0x266>
c0001237:	89 df                	mov    edi,ebx
c0001239:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000123c:	29 f7                	sub    edi,esi
c000123e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001241:	01 d3                	add    ebx,edx
c0001243:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001246:	83 ff 0f             	cmp    edi,0xf
c0001249:	8d 42 08             	lea    eax,[edx+0x8]
c000124c:	77 09                	ja     c0001257 <dlmalloc+0x234>
c000124e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001252:	e9 52 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001257:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000125a:	83 ce 01             	or     esi,0x1
c000125d:	89 0d 1c 86 02 c0    	mov    DWORD PTR ds:0xc002861c,ecx
c0001263:	89 0d 20 86 02 c0    	mov    DWORD PTR ds:0xc0028620,ecx
c0001269:	c7 41 08 14 86 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0028614
c0001270:	c7 41 0c 14 86 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0028614
c0001277:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000127a:	89 fa                	mov    edx,edi
c000127c:	83 ca 01             	or     edx,0x1
c000127f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001282:	89 3b                	mov    DWORD PTR [ebx],edi
c0001284:	e9 20 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001289:	89 c2                	mov    edx,eax
c000128b:	eb 99                	jmp    c0001226 <dlmalloc+0x203>
c000128d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001291:	b8 01 00 00 00       	mov    eax,0x1
c0001296:	41                   	inc    ecx
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	8d 14 cd 0c 86 02 c0 	lea    edx,[ecx*8-0x3ffd79f4]
c00012a0:	c1 eb 05             	shr    ebx,0x5
c00012a3:	d3 e0                	shl    eax,cl
c00012a5:	8b 3c 9d 14 89 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd76ec]
c00012ac:	39 f8                	cmp    eax,edi
c00012ae:	77 04                	ja     c00012b4 <dlmalloc+0x291>
c00012b0:	85 c0                	test   eax,eax
c00012b2:	75 26                	jne    c00012da <dlmalloc+0x2b7>
c00012b4:	43                   	inc    ebx
c00012b5:	83 fb 02             	cmp    ebx,0x2
c00012b8:	0f 87 a6 00 00 00    	ja     c0001364 <dlmalloc+0x341>
c00012be:	8b 3c 9d 14 89 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd76ec]
c00012c5:	85 ff                	test   edi,edi
c00012c7:	74 eb                	je     c00012b4 <dlmalloc+0x291>
c00012c9:	89 d8                	mov    eax,ebx
c00012cb:	c1 e0 06             	shl    eax,0x6
c00012ce:	8d 14 85 0c 86 02 c0 	lea    edx,[eax*4-0x3ffd79f4]
c00012d5:	b8 01 00 00 00       	mov    eax,0x1
c00012da:	85 f8                	test   eax,edi
c00012dc:	75 07                	jne    c00012e5 <dlmalloc+0x2c2>
c00012de:	83 c2 08             	add    edx,0x8
c00012e1:	01 c0                	add    eax,eax
c00012e3:	eb f5                	jmp    c00012da <dlmalloc+0x2b7>
c00012e5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e8:	39 ca                	cmp    edx,ecx
c00012ea:	75 14                	jne    c0001300 <dlmalloc+0x2dd>
c00012ec:	89 c1                	mov    ecx,eax
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	f7 d1                	not    ecx
c00012f3:	01 c0                	add    eax,eax
c00012f5:	21 cf                	and    edi,ecx
c00012f7:	89 3c 9d 14 89 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd76ec],edi
c00012fe:	eb ac                	jmp    c00012ac <dlmalloc+0x289>
c0001300:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001303:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001306:	83 e0 fc             	and    eax,0xfffffffc
c0001309:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000130c:	89 c3                	mov    ebx,eax
c000130e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001311:	29 f3                	sub    ebx,esi
c0001313:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001316:	83 fb 0f             	cmp    ebx,0xf
c0001319:	8d 41 08             	lea    eax,[ecx+0x8]
c000131c:	77 09                	ja     c0001327 <dlmalloc+0x304>
c000131e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001322:	e9 82 00 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001327:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000132a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001330:	89 3d 1c 86 02 c0    	mov    DWORD PTR ds:0xc002861c,edi
c0001336:	89 3d 20 86 02 c0    	mov    DWORD PTR ds:0xc0028620,edi
c000133c:	c7 47 08 14 86 02 c0 	mov    DWORD PTR [edi+0x8],0xc0028614
c0001343:	c7 47 0c 14 86 02 c0 	mov    DWORD PTR [edi+0xc],0xc0028614
c000134a:	77 06                	ja     c0001352 <dlmalloc+0x32f>
c000134c:	89 3d 10 86 02 c0    	mov    DWORD PTR ds:0xc0028610,edi
c0001352:	83 ce 01             	or     esi,0x1
c0001355:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001358:	89 d9                	mov    ecx,ebx
c000135a:	83 c9 01             	or     ecx,0x1
c000135d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001360:	89 1a                	mov    DWORD PTR [edx],ebx
c0001362:	eb 45                	jmp    c00013a9 <dlmalloc+0x386>
c0001364:	a1 0c 86 02 c0       	mov    eax,ds:0xc002860c
c0001369:	8d 4e 10             	lea    ecx,[esi+0x10]
c000136c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136f:	83 e2 fc             	and    edx,0xfffffffc
c0001372:	39 d1                	cmp    ecx,edx
c0001374:	77 1e                	ja     c0001394 <dlmalloc+0x371>
c0001376:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001379:	89 f3                	mov    ebx,esi
c000137b:	89 0d 0c 86 02 c0    	mov    DWORD PTR ds:0xc002860c,ecx
c0001381:	83 cb 01             	or     ebx,0x1
c0001384:	29 f2                	sub    edx,esi
c0001386:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001389:	83 ca 01             	or     edx,0x1
c000138c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000138f:	e9 2d fd ff ff       	jmp    c00010c1 <dlmalloc+0x9e>
c0001394:	83 c4 1c             	add    esp,0x1c
c0001397:	89 f0                	mov    eax,esi
c0001399:	5b                   	pop    ebx
c000139a:	ba e0 85 02 c0       	mov    edx,0xc00285e0
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 16 fa ff ff       	jmp    c0000dbd <sYSMALLOc>
c00013a7:	31 c0                	xor    eax,eax
c00013a9:	83 c4 1c             	add    esp,0x1c
c00013ac:	5b                   	pop    ebx
c00013ad:	5e                   	pop    esi
c00013ae:	5f                   	pop    edi
c00013af:	5d                   	pop    ebp
c00013b0:	c3                   	ret    

c00013b1 <iALLOc>:
c00013b1:	55                   	push   ebp
c00013b2:	89 c5                	mov    ebp,eax
c00013b4:	57                   	push   edi
c00013b5:	56                   	push   esi
c00013b6:	53                   	push   ebx
c00013b7:	83 ec 2c             	sub    esp,0x2c
c00013ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013c6:	83 3d e0 85 02 c0 00 	cmp    DWORD PTR ds:0xc00285e0,0x0
c00013cd:	75 12                	jne    c00013e1 <iALLOc+0x30>
c00013cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013d3:	b8 e0 85 02 c0       	mov    eax,0xc00285e0
c00013d8:	e8 04 f8 ff ff       	call   c0000be1 <malloc_consolidate>
c00013dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e6:	74 12                	je     c00013fa <iALLOc+0x49>
c00013e8:	85 ed                	test   ebp,ebp
c00013ea:	0f 84 64 01 00 00    	je     c0001554 <iALLOc+0x1a3>
c00013f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f8:	eb 33                	jmp    c000142d <iALLOc+0x7c>
c00013fa:	85 ed                	test   ebp,ebp
c00013fc:	75 14                	jne    c0001412 <iALLOc+0x61>
c00013fe:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001406:	83 c4 2c             	add    esp,0x2c
c0001409:	5b                   	pop    ebx
c000140a:	5e                   	pop    esi
c000140b:	5f                   	pop    edi
c000140c:	5d                   	pop    ebp
c000140d:	e9 11 fc ff ff       	jmp    c0001023 <dlmalloc>
c0001412:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001419:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001421:	83 f8 0f             	cmp    eax,0xf
c0001424:	76 07                	jbe    c000142d <iALLOc+0x7c>
c0001426:	83 e0 f8             	and    eax,0xfffffff8
c0001429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000142d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001432:	75 09                	jne    c000143d <iALLOc+0x8c>
c0001434:	89 d0                	mov    eax,edx
c0001436:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001439:	31 f6                	xor    esi,esi
c000143b:	eb 3b                	jmp    c0001478 <iALLOc+0xc7>
c000143d:	8b 02                	mov    eax,DWORD PTR [edx]
c000143f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001447:	83 c0 0b             	add    eax,0xb
c000144a:	83 f8 0f             	cmp    eax,0xf
c000144d:	76 07                	jbe    c0001456 <iALLOc+0xa5>
c000144f:	83 e0 f8             	and    eax,0xfffffff8
c0001452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000145a:	0f af f5             	imul   esi,ebp
c000145d:	eb 25                	jmp    c0001484 <iALLOc+0xd3>
c000145f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001461:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001464:	bb 10 00 00 00       	mov    ebx,0x10
c0001469:	83 f9 0f             	cmp    ecx,0xf
c000146c:	76 05                	jbe    c0001473 <iALLOc+0xc2>
c000146e:	83 e1 f8             	and    ecx,0xfffffff8
c0001471:	89 cb                	mov    ebx,ecx
c0001473:	01 de                	add    esi,ebx
c0001475:	83 c0 04             	add    eax,0x4
c0001478:	39 c7                	cmp    edi,eax
c000147a:	75 e3                	jne    c000145f <iALLOc+0xae>
c000147c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001484:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001488:	8b 1d 34 89 02 c0    	mov    ebx,DWORD PTR ds:0xc0028934
c000148e:	83 ec 0c             	sub    esp,0xc
c0001491:	c7 05 34 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028934,0x0
c000149b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000149f:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014a3:	50                   	push   eax
c00014a4:	e8 7a fb ff ff       	call   c0001023 <dlmalloc>
c00014a9:	83 c4 10             	add    esp,0x10
c00014ac:	89 1d 34 89 02 c0    	mov    DWORD PTR ds:0xc0028934,ebx
c00014b2:	85 c0                	test   eax,eax
c00014b4:	0f 84 92 00 00 00    	je     c000154c <iALLOc+0x19b>
c00014ba:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014bd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014c0:	83 e3 fc             	and    ebx,0xfffffffc
c00014c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014c7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014cc:	74 1e                	je     c00014ec <iALLOc+0x13b>
c00014ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014d2:	89 d9                	mov    ecx,ebx
c00014d4:	52                   	push   edx
c00014d5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d9:	83 e9 04             	sub    ecx,0x4
c00014dc:	51                   	push   ecx
c00014dd:	6a 00                	push   0x0
c00014df:	50                   	push   eax
c00014e0:	e8 9f f1 ff ff       	call   c0000684 <memset>
c00014e5:	83 c4 10             	add    esp,0x10
c00014e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014f1:	75 14                	jne    c0001507 <iALLOc+0x156>
c00014f3:	8d 04 37             	lea    eax,[edi+esi*1]
c00014f6:	29 f3                	sub    ebx,esi
c00014f8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014fb:	83 cb 01             	or     ebx,0x1
c00014fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001502:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001505:	89 f3                	mov    ebx,esi
c0001507:	31 c0                	xor    eax,eax
c0001509:	4d                   	dec    ebp
c000150a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000150d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001511:	39 c5                	cmp    ebp,eax
c0001513:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001516:	74 2c                	je     c0001544 <iALLOc+0x193>
c0001518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000151c:	85 c9                	test   ecx,ecx
c000151e:	75 15                	jne    c0001535 <iALLOc+0x184>
c0001520:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001523:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001526:	b9 10 00 00 00       	mov    ecx,0x10
c000152b:	83 fe 0f             	cmp    esi,0xf
c000152e:	76 05                	jbe    c0001535 <iALLOc+0x184>
c0001530:	83 e6 f8             	and    esi,0xfffffff8
c0001533:	89 f1                	mov    ecx,esi
c0001535:	89 ce                	mov    esi,ecx
c0001537:	29 cb                	sub    ebx,ecx
c0001539:	83 ce 01             	or     esi,0x1
c000153c:	40                   	inc    eax
c000153d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001540:	01 cf                	add    edi,ecx
c0001542:	eb c6                	jmp    c000150a <iALLOc+0x159>
c0001544:	83 cb 01             	or     ebx,0x1
c0001547:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000154a:	eb 08                	jmp    c0001554 <iALLOc+0x1a3>
c000154c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001558:	83 c4 2c             	add    esp,0x2c
c000155b:	5b                   	pop    ebx
c000155c:	5e                   	pop    esi
c000155d:	5f                   	pop    edi
c000155e:	5d                   	pop    ebp
c000155f:	c3                   	ret    

c0001560 <dlrealloc>:
c0001560:	55                   	push   ebp
c0001561:	57                   	push   edi
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	83 ec 1c             	sub    esp,0x1c
c0001567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000156b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000156f:	85 db                	test   ebx,ebx
c0001571:	75 10                	jne    c0001583 <dlrealloc+0x23>
c0001573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001577:	83 c4 1c             	add    esp,0x1c
c000157a:	5b                   	pop    ebx
c000157b:	5e                   	pop    esi
c000157c:	5f                   	pop    edi
c000157d:	5d                   	pop    ebp
c000157e:	e9 a0 fa ff ff       	jmp    c0001023 <dlmalloc>
c0001583:	83 f8 df             	cmp    eax,0xffffffdf
c0001586:	76 07                	jbe    c000158f <dlrealloc+0x2f>
c0001588:	31 db                	xor    ebx,ebx
c000158a:	e9 6a 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c000158f:	83 c0 0b             	add    eax,0xb
c0001592:	bd 10 00 00 00       	mov    ebp,0x10
c0001597:	83 f8 0f             	cmp    eax,0xf
c000159a:	76 05                	jbe    c00015a1 <dlrealloc+0x41>
c000159c:	83 e0 f8             	and    eax,0xfffffff8
c000159f:	89 c5                	mov    ebp,eax
c00015a1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015a4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015a7:	89 c6                	mov    esi,eax
c00015a9:	83 e6 fc             	and    esi,0xfffffffc
c00015ac:	a8 02                	test   al,0x2
c00015ae:	75 d8                	jne    c0001588 <dlrealloc+0x28>
c00015b0:	39 f5                	cmp    ebp,esi
c00015b2:	0f 86 04 01 00 00    	jbe    c00016bc <dlrealloc+0x15c>
c00015b8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015be:	39 15 0c 86 02 c0    	cmp    DWORD PTR ds:0xc002860c,edx
c00015c4:	75 33                	jne    c00015f9 <dlrealloc+0x99>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015cf:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015d6:	77 49                	ja     c0001621 <dlrealloc+0xc1>
c00015d8:	01 ef                	add    edi,ebp
c00015da:	83 e0 01             	and    eax,0x1
c00015dd:	09 e8                	or     eax,ebp
c00015df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015e2:	89 3d 0c 86 02 c0    	mov    DWORD PTR ds:0xc002860c,edi
c00015e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ec:	29 e8                	sub    eax,ebp
c00015ee:	83 c8 01             	or     eax,0x1
c00015f1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015f4:	e9 00 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c00015f9:	89 c8                	mov    eax,ecx
c00015fb:	83 e0 fe             	and    eax,0xfffffffe
c00015fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001603:	75 1c                	jne    c0001621 <dlrealloc+0xc1>
c0001605:	83 e1 fc             	and    ecx,0xfffffffc
c0001608:	01 f1                	add    ecx,esi
c000160a:	39 cd                	cmp    ebp,ecx
c000160c:	77 13                	ja     c0001621 <dlrealloc+0xc1>
c000160e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001611:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001614:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001617:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000161a:	89 ce                	mov    esi,ecx
c000161c:	e9 9b 00 00 00       	jmp    c00016bc <dlrealloc+0x15c>
c0001621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001625:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001628:	83 ec 0c             	sub    esp,0xc
c000162b:	50                   	push   eax
c000162c:	e8 f2 f9 ff ff       	call   c0001023 <dlmalloc>
c0001631:	83 c4 10             	add    esp,0x10
c0001634:	85 c0                	test   eax,eax
c0001636:	0f 84 4c ff ff ff    	je     c0001588 <dlrealloc+0x28>
c000163c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000163f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001643:	39 ca                	cmp    edx,ecx
c0001645:	75 0a                	jne    c0001651 <dlrealloc+0xf1>
c0001647:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000164a:	83 e0 fc             	and    eax,0xfffffffc
c000164d:	01 c6                	add    esi,eax
c000164f:	eb 6b                	jmp    c00016bc <dlrealloc+0x15c>
c0001651:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001654:	83 f9 27             	cmp    ecx,0x27
c0001657:	76 08                	jbe    c0001661 <dlrealloc+0x101>
c0001659:	89 de                	mov    esi,ebx
c000165b:	89 c7                	mov    edi,eax
c000165d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000165f:	eb 43                	jmp    c00016a4 <dlrealloc+0x144>
c0001661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001663:	83 f9 13             	cmp    ecx,0x13
c0001666:	89 10                	mov    DWORD PTR [eax],edx
c0001668:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000166b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000166e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001674:	76 2e                	jbe    c00016a4 <dlrealloc+0x144>
c0001676:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001679:	83 f9 1b             	cmp    ecx,0x1b
c000167c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000167f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001685:	76 1d                	jbe    c00016a4 <dlrealloc+0x144>
c0001687:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000168a:	83 f9 23             	cmp    ecx,0x23
c000168d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001690:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001693:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001696:	76 0c                	jbe    c00016a4 <dlrealloc+0x144>
c0001698:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000169b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000169e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016a1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a8:	83 ec 0c             	sub    esp,0xc
c00016ab:	53                   	push   ebx
c00016ac:	e8 17 f6 ff ff       	call   c0000cc8 <dlfree>
c00016b1:	83 c4 10             	add    esp,0x10
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	89 c3                	mov    ebx,eax
c00016ba:	eb 3d                	jmp    c00016f9 <dlrealloc+0x199>
c00016bc:	89 f2                	mov    edx,esi
c00016be:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016c1:	29 ea                	sub    edx,ebp
c00016c3:	83 e1 01             	and    ecx,0x1
c00016c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c9:	83 fa 0f             	cmp    edx,0xf
c00016cc:	77 0b                	ja     c00016d9 <dlrealloc+0x179>
c00016ce:	09 ce                	or     esi,ecx
c00016d0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016d7:	eb 20                	jmp    c00016f9 <dlrealloc+0x199>
c00016d9:	01 ef                	add    edi,ebp
c00016db:	83 ec 0c             	sub    esp,0xc
c00016de:	09 cd                	or     ebp,ecx
c00016e0:	83 ca 01             	or     edx,0x1
c00016e3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016e6:	83 c7 08             	add    edi,0x8
c00016e9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ec:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016f0:	57                   	push   edi
c00016f1:	e8 d2 f5 ff ff       	call   c0000cc8 <dlfree>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	83 c4 1c             	add    esp,0x1c
c00016fc:	89 d8                	mov    eax,ebx
c00016fe:	5b                   	pop    ebx
c00016ff:	5e                   	pop    esi
c0001700:	5f                   	pop    edi
c0001701:	5d                   	pop    ebp
c0001702:	c3                   	ret    

c0001703 <dlmemalign>:
c0001703:	55                   	push   ebp
c0001704:	57                   	push   edi
c0001705:	56                   	push   esi
c0001706:	53                   	push   ebx
c0001707:	83 ec 0c             	sub    esp,0xc
c000170a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000170e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001712:	83 fa 08             	cmp    edx,0x8
c0001715:	77 10                	ja     c0001727 <dlmemalign+0x24>
c0001717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000171b:	83 c4 0c             	add    esp,0xc
c000171e:	5b                   	pop    ebx
c000171f:	5e                   	pop    esi
c0001720:	5f                   	pop    edi
c0001721:	5d                   	pop    ebp
c0001722:	e9 fc f8 ff ff       	jmp    c0001023 <dlmalloc>
c0001727:	bf 10 00 00 00       	mov    edi,0x10
c000172c:	83 fa 0f             	cmp    edx,0xf
c000172f:	76 13                	jbe    c0001744 <dlmemalign+0x41>
c0001731:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001734:	85 d1                	test   ecx,edx
c0001736:	75 04                	jne    c000173c <dlmemalign+0x39>
c0001738:	89 d7                	mov    edi,edx
c000173a:	eb 08                	jmp    c0001744 <dlmemalign+0x41>
c000173c:	39 d7                	cmp    edi,edx
c000173e:	73 04                	jae    c0001744 <dlmemalign+0x41>
c0001740:	01 ff                	add    edi,edi
c0001742:	eb f8                	jmp    c000173c <dlmemalign+0x39>
c0001744:	83 f8 df             	cmp    eax,0xffffffdf
c0001747:	76 07                	jbe    c0001750 <dlmemalign+0x4d>
c0001749:	31 c0                	xor    eax,eax
c000174b:	e9 ce 00 00 00       	jmp    c000181e <dlmemalign+0x11b>
c0001750:	83 c0 0b             	add    eax,0xb
c0001753:	bd 10 00 00 00       	mov    ebp,0x10
c0001758:	83 f8 0f             	cmp    eax,0xf
c000175b:	76 05                	jbe    c0001762 <dlmemalign+0x5f>
c000175d:	83 e0 f8             	and    eax,0xfffffff8
c0001760:	89 c5                	mov    ebp,eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001769:	50                   	push   eax
c000176a:	e8 b4 f8 ff ff       	call   c0001023 <dlmalloc>
c000176f:	83 c4 10             	add    esp,0x10
c0001772:	89 c1                	mov    ecx,eax
c0001774:	85 c0                	test   eax,eax
c0001776:	74 d1                	je     c0001749 <dlmemalign+0x46>
c0001778:	31 d2                	xor    edx,edx
c000177a:	8d 70 f8             	lea    esi,[eax-0x8]
c000177d:	f7 f7                	div    edi
c000177f:	85 d2                	test   edx,edx
c0001781:	74 62                	je     c00017e5 <dlmemalign+0xe2>
c0001783:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001787:	89 f8                	mov    eax,edi
c0001789:	f7 d8                	neg    eax
c000178b:	21 c3                	and    ebx,eax
c000178d:	83 eb 08             	sub    ebx,0x8
c0001790:	89 d8                	mov    eax,ebx
c0001792:	29 f0                	sub    eax,esi
c0001794:	83 f8 0f             	cmp    eax,0xf
c0001797:	77 02                	ja     c000179b <dlmemalign+0x98>
c0001799:	01 fb                	add    ebx,edi
c000179b:	89 d8                	mov    eax,ebx
c000179d:	29 f0                	sub    eax,esi
c000179f:	89 c6                	mov    esi,eax
c00017a1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a4:	89 c2                	mov    edx,eax
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	29 f2                	sub    edx,esi
c00017ab:	a8 02                	test   al,0x2
c00017ad:	74 10                	je     c00017bf <dlmemalign+0xbc>
c00017af:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017b2:	83 ca 02             	or     edx,0x2
c00017b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ba:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017bd:	eb 5f                	jmp    c000181e <dlmemalign+0x11b>
c00017bf:	83 ec 0c             	sub    esp,0xc
c00017c2:	89 d0                	mov    eax,edx
c00017c4:	83 c8 01             	or     eax,0x1
c00017c7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ca:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017cf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 f0                	or     eax,esi
c00017d7:	89 de                	mov    esi,ebx
c00017d9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017dc:	51                   	push   ecx
c00017dd:	e8 e6 f4 ff ff       	call   c0000cc8 <dlfree>
c00017e2:	83 c4 10             	add    esp,0x10
c00017e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e8:	a8 02                	test   al,0x2
c00017ea:	75 2f                	jne    c000181b <dlmemalign+0x118>
c00017ec:	83 e0 fc             	and    eax,0xfffffffc
c00017ef:	8d 55 10             	lea    edx,[ebp+0x10]
c00017f2:	39 c2                	cmp    edx,eax
c00017f4:	73 25                	jae    c000181b <dlmemalign+0x118>
c00017f6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f9:	83 ec 0c             	sub    esp,0xc
c00017fc:	29 e8                	sub    eax,ebp
c00017fe:	83 c2 08             	add    edx,0x8
c0001801:	83 c8 01             	or     eax,0x1
c0001804:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001807:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000180a:	83 e0 01             	and    eax,0x1
c000180d:	09 c5                	or     ebp,eax
c000180f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001812:	52                   	push   edx
c0001813:	e8 b0 f4 ff ff       	call   c0000cc8 <dlfree>
c0001818:	83 c4 10             	add    esp,0x10
c000181b:	8d 46 08             	lea    eax,[esi+0x8]
c000181e:	83 c4 0c             	add    esp,0xc
c0001821:	5b                   	pop    ebx
c0001822:	5e                   	pop    esi
c0001823:	5f                   	pop    edi
c0001824:	5d                   	pop    ebp
c0001825:	c3                   	ret    

c0001826 <dlcalloc>:
c0001826:	53                   	push   ebx
c0001827:	83 ec 14             	sub    esp,0x14
c000182a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000182e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001833:	50                   	push   eax
c0001834:	e8 ea f7 ff ff       	call   c0001023 <dlmalloc>
c0001839:	83 c4 10             	add    esp,0x10
c000183c:	89 c3                	mov    ebx,eax
c000183e:	85 c0                	test   eax,eax
c0001840:	74 77                	je     c00018b9 <dlcalloc+0x93>
c0001842:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001845:	89 d0                	mov    eax,edx
c0001847:	83 e0 fc             	and    eax,0xfffffffc
c000184a:	80 e2 02             	and    dl,0x2
c000184d:	75 5a                	jne    c00018a9 <dlcalloc+0x83>
c000184f:	83 e8 04             	sub    eax,0x4
c0001852:	83 f8 27             	cmp    eax,0x27
c0001855:	76 03                	jbe    c000185a <dlcalloc+0x34>
c0001857:	51                   	push   ecx
c0001858:	eb 53                	jmp    c00018ad <dlcalloc+0x87>
c000185a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001860:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001867:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000186e:	83 f8 13             	cmp    eax,0x13
c0001871:	76 46                	jbe    c00018b9 <dlcalloc+0x93>
c0001873:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000187a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001881:	83 f8 1b             	cmp    eax,0x1b
c0001884:	76 33                	jbe    c00018b9 <dlcalloc+0x93>
c0001886:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000188d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001894:	83 f8 23             	cmp    eax,0x23
c0001897:	76 20                	jbe    c00018b9 <dlcalloc+0x93>
c0001899:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018a7:	eb 10                	jmp    c00018b9 <dlcalloc+0x93>
c00018a9:	83 e8 08             	sub    eax,0x8
c00018ac:	52                   	push   edx
c00018ad:	50                   	push   eax
c00018ae:	6a 00                	push   0x0
c00018b0:	53                   	push   ebx
c00018b1:	e8 ce ed ff ff       	call   c0000684 <memset>
c00018b6:	83 c4 10             	add    esp,0x10
c00018b9:	89 d8                	mov    eax,ebx
c00018bb:	83 c4 08             	add    esp,0x8
c00018be:	5b                   	pop    ebx
c00018bf:	c3                   	ret    

c00018c0 <dlcfree>:
c00018c0:	e9 03 f4 ff ff       	jmp    c0000cc8 <dlfree>

c00018c5 <dlindependent_calloc>:
c00018c5:	83 ec 28             	sub    esp,0x28
c00018c8:	b9 03 00 00 00       	mov    ecx,0x3
c00018cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	e8 cb fa ff ff       	call   c00013b1 <iALLOc>
c00018e6:	83 c4 2c             	add    esp,0x2c
c00018e9:	c3                   	ret    

c00018ea <dlindependent_comalloc>:
c00018ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f2:	31 c9                	xor    ecx,ecx
c00018f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018fc:	e9 b0 fa ff ff       	jmp    c00013b1 <iALLOc>

c0001901 <dlvalloc>:
c0001901:	83 ec 0c             	sub    esp,0xc
c0001904:	83 3d e0 85 02 c0 00 	cmp    DWORD PTR ds:0xc00285e0,0x0
c000190b:	75 0a                	jne    c0001917 <dlvalloc+0x16>
c000190d:	b8 e0 85 02 c0       	mov    eax,0xc00285e0
c0001912:	e8 ca f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001917:	50                   	push   eax
c0001918:	50                   	push   eax
c0001919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000191d:	ff 35 3c 89 02 c0    	push   DWORD PTR ds:0xc002893c
c0001923:	e8 db fd ff ff       	call   c0001703 <dlmemalign>
c0001928:	83 c4 1c             	add    esp,0x1c
c000192b:	c3                   	ret    

c000192c <dlpvalloc>:
c000192c:	83 ec 0c             	sub    esp,0xc
c000192f:	83 3d e0 85 02 c0 00 	cmp    DWORD PTR ds:0xc00285e0,0x0
c0001936:	75 0a                	jne    c0001942 <dlpvalloc+0x16>
c0001938:	b8 e0 85 02 c0       	mov    eax,0xc00285e0
c000193d:	e8 9f f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001942:	a1 3c 89 02 c0       	mov    eax,ds:0xc002893c
c0001947:	89 c1                	mov    ecx,eax
c0001949:	52                   	push   edx
c000194a:	f7 d9                	neg    ecx
c000194c:	52                   	push   edx
c000194d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001951:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001955:	21 ca                	and    edx,ecx
c0001957:	52                   	push   edx
c0001958:	50                   	push   eax
c0001959:	e8 a5 fd ff ff       	call   c0001703 <dlmemalign>
c000195e:	83 c4 1c             	add    esp,0x1c
c0001961:	c3                   	ret    

c0001962 <dlmalloc_trim>:
c0001962:	b8 e0 85 02 c0       	mov    eax,0xc00285e0
c0001967:	e8 75 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c000196c:	31 c0                	xor    eax,eax
c000196e:	c3                   	ret    

c000196f <dlmalloc_usable_size>:
c000196f:	53                   	push   ebx
c0001970:	31 c0                	xor    eax,eax
c0001972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001976:	85 c9                	test   ecx,ecx
c0001978:	74 24                	je     c000199e <dlmalloc_usable_size+0x2f>
c000197a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000197d:	f6 c2 02             	test   dl,0x2
c0001980:	74 08                	je     c000198a <dlmalloc_usable_size+0x1b>
c0001982:	83 e2 fc             	and    edx,0xfffffffc
c0001985:	8d 42 f8             	lea    eax,[edx-0x8]
c0001988:	eb 14                	jmp    c000199e <dlmalloc_usable_size+0x2f>
c000198a:	89 d3                	mov    ebx,edx
c000198c:	31 c0                	xor    eax,eax
c000198e:	83 e3 fe             	and    ebx,0xfffffffe
c0001991:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001996:	74 06                	je     c000199e <dlmalloc_usable_size+0x2f>
c0001998:	83 e2 fc             	and    edx,0xfffffffc
c000199b:	8d 42 fc             	lea    eax,[edx-0x4]
c000199e:	5b                   	pop    ebx
c000199f:	c3                   	ret    

c00019a0 <dlmallinfo>:
c00019a0:	55                   	push   ebp
c00019a1:	57                   	push   edi
c00019a2:	56                   	push   esi
c00019a3:	53                   	push   ebx
c00019a4:	83 ec 08             	sub    esp,0x8
c00019a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019ab:	83 3d 0c 86 02 c0 00 	cmp    DWORD PTR ds:0xc002860c,0x0
c00019b2:	75 0a                	jne    c00019be <dlmallinfo+0x1e>
c00019b4:	b8 e0 85 02 c0       	mov    eax,0xc00285e0
c00019b9:	e8 23 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c00019be:	a1 0c 86 02 c0       	mov    eax,ds:0xc002860c
c00019c3:	31 ed                	xor    ebp,ebp
c00019c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c8:	31 c9                	xor    ecx,ecx
c00019ca:	83 e0 fc             	and    eax,0xfffffffc
c00019cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d1:	31 c0                	xor    eax,eax
c00019d3:	8b 14 85 e4 85 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7a1c]
c00019da:	85 d2                	test   edx,edx
c00019dc:	74 0e                	je     c00019ec <dlmallinfo+0x4c>
c00019de:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019e1:	45                   	inc    ebp
c00019e2:	83 e6 fc             	and    esi,0xfffffffc
c00019e5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e8:	01 f1                	add    ecx,esi
c00019ea:	eb ee                	jmp    c00019da <dlmallinfo+0x3a>
c00019ec:	40                   	inc    eax
c00019ed:	83 f8 0a             	cmp    eax,0xa
c00019f0:	75 e1                	jne    c00019d3 <dlmallinfo+0x33>
c00019f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a00:	b8 14 86 02 c0       	mov    eax,0xc0028614
c0001a05:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a08:	39 f0                	cmp    eax,esi
c0001a0a:	74 10                	je     c0001a1c <dlmallinfo+0x7c>
c0001a0c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a0f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a12:	83 e7 fc             	and    edi,0xfffffffc
c0001a15:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a18:	01 fa                	add    edx,edi
c0001a1a:	eb ec                	jmp    c0001a08 <dlmallinfo+0x68>
c0001a1c:	83 c0 08             	add    eax,0x8
c0001a1f:	3d 0c 89 02 c0       	cmp    eax,0xc002890c
c0001a24:	75 df                	jne    c0001a05 <dlmallinfo+0x65>
c0001a26:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a29:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a2c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a2f:	a1 48 89 02 c0       	mov    eax,ds:0xc0028948
c0001a34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a37:	89 03                	mov    DWORD PTR [ebx],eax
c0001a39:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a3c:	8b 35 30 89 02 c0    	mov    esi,DWORD PTR ds:0xc0028930
c0001a42:	29 d0                	sub    eax,edx
c0001a44:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a4a:	8b 35 44 89 02 c0    	mov    esi,DWORD PTR ds:0xc0028944
c0001a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a54:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a57:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a5a:	8b 35 54 89 02 c0    	mov    esi,DWORD PTR ds:0xc0028954
c0001a60:	89 d8                	mov    eax,ebx
c0001a62:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a65:	83 c4 08             	add    esp,0x8
c0001a68:	5b                   	pop    ebx
c0001a69:	5e                   	pop    esi
c0001a6a:	5f                   	pop    edi
c0001a6b:	5d                   	pop    ebp
c0001a6c:	c2 04 00             	ret    0x4

c0001a6f <dlmalloc_stats>:
c0001a6f:	83 ec 30             	sub    esp,0x30
c0001a72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a76:	50                   	push   eax
c0001a77:	e8 24 ff ff ff       	call   c00019a0 <dlmallinfo>
c0001a7c:	83 c4 30             	add    esp,0x30
c0001a7f:	c3                   	ret    

c0001a80 <dlmallopt>:
c0001a80:	56                   	push   esi
c0001a81:	b8 e0 85 02 c0       	mov    eax,0xc00285e0
c0001a86:	53                   	push   ebx
c0001a87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a8f:	e8 4d f1 ff ff       	call   c0000be1 <malloc_consolidate>
c0001a94:	8d 46 04             	lea    eax,[esi+0x4]
c0001a97:	83 f8 05             	cmp    eax,0x5
c0001a9a:	77 67                	ja     c0001b03 <dlmallopt+0x83>
c0001a9c:	ff 24 85 e4 3d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdc21c]
c0001aa3:	83 fb 50             	cmp    ebx,0x50
c0001aa6:	77 5b                	ja     c0001b03 <dlmallopt+0x83>
c0001aa8:	ba 08 00 00 00       	mov    edx,0x8
c0001aad:	85 db                	test   ebx,ebx
c0001aaf:	74 12                	je     c0001ac3 <dlmallopt+0x43>
c0001ab1:	83 c3 0b             	add    ebx,0xb
c0001ab4:	ba 10 00 00 00       	mov    edx,0x10
c0001ab9:	83 fb 0f             	cmp    ebx,0xf
c0001abc:	76 05                	jbe    c0001ac3 <dlmallopt+0x43>
c0001abe:	89 da                	mov    edx,ebx
c0001ac0:	83 e2 f8             	and    edx,0xfffffff8
c0001ac3:	a1 e0 85 02 c0       	mov    eax,ds:0xc00285e0
c0001ac8:	83 e0 03             	and    eax,0x3
c0001acb:	09 d0                	or     eax,edx
c0001acd:	a3 e0 85 02 c0       	mov    ds:0xc00285e0,eax
c0001ad2:	eb 31                	jmp    c0001b05 <dlmallopt+0x85>
c0001ad4:	89 1d 24 89 02 c0    	mov    DWORD PTR ds:0xc0028924,ebx
c0001ada:	eb 06                	jmp    c0001ae2 <dlmallopt+0x62>
c0001adc:	89 1d 28 89 02 c0    	mov    DWORD PTR ds:0xc0028928,ebx
c0001ae2:	be 01 00 00 00       	mov    esi,0x1
c0001ae7:	eb 1c                	jmp    c0001b05 <dlmallopt+0x85>
c0001ae9:	89 1d 2c 89 02 c0    	mov    DWORD PTR ds:0xc002892c,ebx
c0001aef:	eb f1                	jmp    c0001ae2 <dlmallopt+0x62>
c0001af1:	31 f6                	xor    esi,esi
c0001af3:	85 db                	test   ebx,ebx
c0001af5:	75 0e                	jne    c0001b05 <dlmallopt+0x85>
c0001af7:	c7 05 34 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028934,0x0
c0001b01:	eb df                	jmp    c0001ae2 <dlmallopt+0x62>
c0001b03:	31 f6                	xor    esi,esi
c0001b05:	89 f0                	mov    eax,esi
c0001b07:	5b                   	pop    ebx
c0001b08:	5e                   	pop    esi
c0001b09:	c3                   	ret    

c0001b0a <disk_status>:
c0001b0a:	31 c0                	xor    eax,eax
c0001b0c:	c3                   	ret    

c0001b0d <disk_initialize>:
c0001b0d:	31 c0                	xor    eax,eax
c0001b0f:	c3                   	ret    

c0001b10 <disk_read>:
c0001b10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b15:	0f b6 04 85 a0 a0 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5f60]
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	e9 aa a3 01 00       	jmp    c001bed0 <fatWrapperReadDisk>

c0001b26 <disk_write>:
c0001b26:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b2b:	0f b6 04 85 a0 a0 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5f60]
c0001b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b37:	e9 dc a3 01 00       	jmp    c001bf18 <fatWrapperWriteDisk>

c0001b3c <disk_ioctl>:
c0001b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b45:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b4a:	0f b6 04 85 a0 a0 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5f60]
c0001b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b56:	e9 05 a4 01 00       	jmp    c001bf60 <fatWrapperIoctl>

c0001b5b <ld_word>:
c0001b5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b62:	c1 e2 08             	shl    edx,0x8
c0001b65:	09 d0                	or     eax,edx
c0001b67:	c3                   	ret    

c0001b68 <ld_dword>:
c0001b68:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b6c:	89 d1                	mov    ecx,edx
c0001b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b72:	c1 e1 08             	shl    ecx,0x8
c0001b75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b78:	09 ca                	or     edx,ecx
c0001b7a:	c1 e2 08             	shl    edx,0x8
c0001b7d:	09 d0                	or     eax,edx
c0001b7f:	c3                   	ret    

c0001b80 <ld_qword>:
c0001b80:	57                   	push   edi
c0001b81:	56                   	push   esi
c0001b82:	53                   	push   ebx
c0001b83:	31 db                	xor    ebx,ebx
c0001b85:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b88:	89 df                	mov    edi,ebx
c0001b8a:	89 ce                	mov    esi,ecx
c0001b8c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b94:	c1 e6 08             	shl    esi,0x8
c0001b97:	09 f2                	or     edx,esi
c0001b99:	89 d6                	mov    esi,edx
c0001b9b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba3:	c1 e6 08             	shl    esi,0x8
c0001ba6:	09 f2                	or     edx,esi
c0001ba8:	89 d6                	mov    esi,edx
c0001baa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bae:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bb5:	c1 e6 08             	shl    esi,0x8
c0001bb8:	89 fb                	mov    ebx,edi
c0001bba:	09 f2                	or     edx,esi
c0001bbc:	89 d1                	mov    ecx,edx
c0001bbe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bc2:	c1 e1 08             	shl    ecx,0x8
c0001bc5:	89 da                	mov    edx,ebx
c0001bc7:	09 c8                	or     eax,ecx
c0001bc9:	5b                   	pop    ebx
c0001bca:	5e                   	pop    esi
c0001bcb:	5f                   	pop    edi
c0001bcc:	c3                   	ret    

c0001bcd <st_word>:
c0001bcd:	66 89 10             	mov    WORD PTR [eax],dx
c0001bd0:	c3                   	ret    

c0001bd1 <st_dword>:
c0001bd1:	89 10                	mov    DWORD PTR [eax],edx
c0001bd3:	c3                   	ret    

c0001bd4 <st_qword>:
c0001bd4:	89 10                	mov    DWORD PTR [eax],edx
c0001bd6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd9:	c3                   	ret    

c0001bda <mem_cpy>:
c0001bda:	85 c9                	test   ecx,ecx
c0001bdc:	74 10                	je     c0001bee <mem_cpy+0x14>
c0001bde:	57                   	push   edi
c0001bdf:	01 c1                	add    ecx,eax
c0001be1:	56                   	push   esi
c0001be2:	89 c7                	mov    edi,eax
c0001be4:	89 d6                	mov    esi,edx
c0001be6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001be7:	39 f9                	cmp    ecx,edi
c0001be9:	75 fb                	jne    c0001be6 <mem_cpy+0xc>
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	c3                   	ret    
c0001bee:	c3                   	ret    

c0001bef <mem_set>:
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	40                   	inc    eax
c0001bf2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bf5:	39 c8                	cmp    eax,ecx
c0001bf7:	75 f8                	jne    c0001bf1 <mem_set+0x2>
c0001bf9:	c3                   	ret    

c0001bfa <mem_cmp>:
c0001bfa:	57                   	push   edi
c0001bfb:	56                   	push   esi
c0001bfc:	89 c6                	mov    esi,eax
c0001bfe:	53                   	push   ebx
c0001bff:	46                   	inc    esi
c0001c00:	42                   	inc    edx
c0001c01:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c05:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c09:	29 fb                	sub    ebx,edi
c0001c0b:	89 cf                	mov    edi,ecx
c0001c0d:	29 f7                	sub    edi,esi
c0001c0f:	01 c7                	add    edi,eax
c0001c11:	74 04                	je     c0001c17 <mem_cmp+0x1d>
c0001c13:	85 db                	test   ebx,ebx
c0001c15:	74 e8                	je     c0001bff <mem_cmp+0x5>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	5b                   	pop    ebx
c0001c1a:	5e                   	pop    esi
c0001c1b:	5f                   	pop    edi
c0001c1c:	c3                   	ret    

c0001c1d <chk_chr>:
c0001c1d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c23:	74 07                	je     c0001c2c <chk_chr+0xf>
c0001c25:	39 d1                	cmp    ecx,edx
c0001c27:	74 03                	je     c0001c2c <chk_chr+0xf>
c0001c29:	40                   	inc    eax
c0001c2a:	eb f1                	jmp    c0001c1d <chk_chr>
c0001c2c:	89 c8                	mov    eax,ecx
c0001c2e:	c3                   	ret    

c0001c2f <dbc_1st>:
c0001c2f:	31 c0                	xor    eax,eax
c0001c31:	c3                   	ret    

c0001c32 <dbc_2nd>:
c0001c32:	31 c0                	xor    eax,eax
c0001c34:	c3                   	ret    

c0001c35 <tchar2uni>:
c0001c35:	57                   	push   edi
c0001c36:	89 c7                	mov    edi,eax
c0001c38:	56                   	push   esi
c0001c39:	53                   	push   ebx
c0001c3a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c3c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c3e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c41:	84 c9                	test   cl,cl
c0001c43:	78 0a                	js     c0001c4f <tchar2uni+0x1a>
c0001c45:	0f b6 d1             	movzx  edx,cl
c0001c48:	89 f3                	mov    ebx,esi
c0001c4a:	e9 9f 00 00 00       	jmp    c0001cee <tchar2uni+0xb9>
c0001c4f:	88 ca                	mov    dl,cl
c0001c51:	83 e2 e0             	and    edx,0xffffffe0
c0001c54:	80 fa c0             	cmp    dl,0xc0
c0001c57:	75 0c                	jne    c0001c65 <tchar2uni+0x30>
c0001c59:	89 ca                	mov    edx,ecx
c0001c5b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c60:	83 e2 1f             	and    edx,0x1f
c0001c63:	eb 2e                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c65:	88 ca                	mov    dl,cl
c0001c67:	83 e2 f0             	and    edx,0xfffffff0
c0001c6a:	80 fa e0             	cmp    dl,0xe0
c0001c6d:	75 0c                	jne    c0001c7b <tchar2uni+0x46>
c0001c6f:	89 ca                	mov    edx,ecx
c0001c71:	b9 02 00 00 00       	mov    ecx,0x2
c0001c76:	83 e2 0f             	and    edx,0xf
c0001c79:	eb 18                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c7b:	88 ca                	mov    dl,cl
c0001c7d:	83 e2 f8             	and    edx,0xfffffff8
c0001c80:	88 d0                	mov    al,dl
c0001c82:	83 ca ff             	or     edx,0xffffffff
c0001c85:	3c f0                	cmp    al,0xf0
c0001c87:	75 6c                	jne    c0001cf5 <tchar2uni+0xc0>
c0001c89:	89 ca                	mov    edx,ecx
c0001c8b:	b9 03 00 00 00       	mov    ecx,0x3
c0001c90:	83 e2 07             	and    edx,0x7
c0001c93:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c97:	46                   	inc    esi
c0001c98:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c9b:	88 c8                	mov    al,cl
c0001c9d:	83 e0 c0             	and    eax,0xffffffc0
c0001ca0:	3c 80                	cmp    al,0x80
c0001ca2:	75 4e                	jne    c0001cf2 <tchar2uni+0xbd>
c0001ca4:	c1 e2 06             	shl    edx,0x6
c0001ca7:	83 e1 3f             	and    ecx,0x3f
c0001caa:	09 ca                	or     edx,ecx
c0001cac:	39 de                	cmp    esi,ebx
c0001cae:	75 e7                	jne    c0001c97 <tchar2uni+0x62>
c0001cb0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cb3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb9:	77 37                	ja     c0001cf2 <tchar2uni+0xbd>
c0001cbb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cc1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cc7:	76 29                	jbe    c0001cf2 <tchar2uni+0xbd>
c0001cc9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ccf:	76 1d                	jbe    c0001cee <tchar2uni+0xb9>
c0001cd1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001cd7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cdd:	c1 e1 06             	shl    ecx,0x6
c0001ce0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ce6:	09 ca                	or     edx,ecx
c0001ce8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cee:	89 1f                	mov    DWORD PTR [edi],ebx
c0001cf0:	eb 03                	jmp    c0001cf5 <tchar2uni+0xc0>
c0001cf2:	83 ca ff             	or     edx,0xffffffff
c0001cf5:	5b                   	pop    ebx
c0001cf6:	89 d0                	mov    eax,edx
c0001cf8:	5e                   	pop    esi
c0001cf9:	5f                   	pop    edi
c0001cfa:	c3                   	ret    

c0001cfb <put_utf>:
c0001cfb:	53                   	push   ebx
c0001cfc:	83 f8 7f             	cmp    eax,0x7f
c0001cff:	89 c3                	mov    ebx,eax
c0001d01:	b0 00                	mov    al,0x0
c0001d03:	77 11                	ja     c0001d16 <put_utf+0x1b>
c0001d05:	85 c9                	test   ecx,ecx
c0001d07:	0f 84 e5 00 00 00    	je     c0001df2 <put_utf+0xf7>
c0001d0d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d0f:	b0 01                	mov    al,0x1
c0001d11:	e9 dc 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d1c:	77 23                	ja     c0001d41 <put_utf+0x46>
c0001d1e:	83 f9 01             	cmp    ecx,0x1
c0001d21:	0f 86 cb 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d27:	89 d8                	mov    eax,ebx
c0001d29:	83 e3 3f             	and    ebx,0x3f
c0001d2c:	c1 e8 06             	shr    eax,0x6
c0001d2f:	83 cb 80             	or     ebx,0xffffff80
c0001d32:	83 c8 c0             	or     eax,0xffffffc0
c0001d35:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d38:	88 02                	mov    BYTE PTR [edx],al
c0001d3a:	b0 02                	mov    al,0x2
c0001d3c:	e9 b1 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d41:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d47:	77 40                	ja     c0001d89 <put_utf+0x8e>
c0001d49:	83 f9 02             	cmp    ecx,0x2
c0001d4c:	0f 86 a0 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d52:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d58:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d5e:	0f 86 8e 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d64:	89 d8                	mov    eax,ebx
c0001d66:	c1 e8 0c             	shr    eax,0xc
c0001d69:	83 c8 e0             	or     eax,0xffffffe0
c0001d6c:	88 02                	mov    BYTE PTR [edx],al
c0001d6e:	89 d8                	mov    eax,ebx
c0001d70:	83 e3 3f             	and    ebx,0x3f
c0001d73:	c1 e8 06             	shr    eax,0x6
c0001d76:	83 cb 80             	or     ebx,0xffffff80
c0001d79:	83 e0 3f             	and    eax,0x3f
c0001d7c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d7f:	83 c8 80             	or     eax,0xffffff80
c0001d82:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d85:	b0 03                	mov    al,0x3
c0001d87:	eb 69                	jmp    c0001df2 <put_utf+0xf7>
c0001d89:	83 f9 03             	cmp    ecx,0x3
c0001d8c:	76 64                	jbe    c0001df2 <put_utf+0xf7>
c0001d8e:	89 d9                	mov    ecx,ebx
c0001d90:	0f b7 c3             	movzx  eax,bx
c0001d93:	66 31 c9             	xor    cx,cx
c0001d96:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d9c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001da2:	c1 e9 06             	shr    ecx,0x6
c0001da5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dab:	77 43                	ja     c0001df0 <put_utf+0xf5>
c0001dad:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001db3:	77 3b                	ja     c0001df0 <put_utf+0xf5>
c0001db5:	09 cb                	or     ebx,ecx
c0001db7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dbd:	89 d8                	mov    eax,ebx
c0001dbf:	c1 e8 12             	shr    eax,0x12
c0001dc2:	83 c8 f0             	or     eax,0xfffffff0
c0001dc5:	88 02                	mov    BYTE PTR [edx],al
c0001dc7:	89 d8                	mov    eax,ebx
c0001dc9:	c1 e8 0c             	shr    eax,0xc
c0001dcc:	83 e0 3f             	and    eax,0x3f
c0001dcf:	83 c8 80             	or     eax,0xffffff80
c0001dd2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dd5:	89 d8                	mov    eax,ebx
c0001dd7:	83 e3 3f             	and    ebx,0x3f
c0001dda:	c1 e8 06             	shr    eax,0x6
c0001ddd:	83 cb 80             	or     ebx,0xffffff80
c0001de0:	83 e0 3f             	and    eax,0x3f
c0001de3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001de6:	83 c8 80             	or     eax,0xffffff80
c0001de9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dec:	b0 04                	mov    al,0x4
c0001dee:	eb 02                	jmp    c0001df2 <put_utf+0xf7>
c0001df0:	31 c0                	xor    eax,eax
c0001df2:	5b                   	pop    ebx
c0001df3:	c3                   	ret    

c0001df4 <clst2sect>:
c0001df4:	89 c1                	mov    ecx,eax
c0001df6:	83 ea 02             	sub    edx,0x2
c0001df9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001dfc:	83 e8 02             	sub    eax,0x2
c0001dff:	39 d0                	cmp    eax,edx
c0001e01:	76 0d                	jbe    c0001e10 <clst2sect+0x1c>
c0001e03:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e07:	f7 e2                	mul    edx
c0001e09:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e0c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e0f:	c3                   	ret    
c0001e10:	31 c0                	xor    eax,eax
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	c3                   	ret    

c0001e15 <clmt_clust>:
c0001e15:	57                   	push   edi
c0001e16:	89 cf                	mov    edi,ecx
c0001e18:	56                   	push   esi
c0001e19:	89 d6                	mov    esi,edx
c0001e1b:	53                   	push   ebx
c0001e1c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e20:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e23:	89 f2                	mov    edx,esi
c0001e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e27:	c1 ef 09             	shr    edi,0x9
c0001e2a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e2e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e31:	89 f9                	mov    ecx,edi
c0001e33:	31 ff                	xor    edi,edi
c0001e35:	57                   	push   edi
c0001e36:	56                   	push   esi
c0001e37:	51                   	push   ecx
c0001e38:	52                   	push   edx
c0001e39:	e8 e2 0f 02 00       	call   c0022e20 <__udivdi3>
c0001e3e:	83 c4 10             	add    esp,0x10
c0001e41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e43:	85 d2                	test   edx,edx
c0001e45:	74 10                	je     c0001e57 <clmt_clust+0x42>
c0001e47:	39 d0                	cmp    eax,edx
c0001e49:	72 07                	jb     c0001e52 <clmt_clust+0x3d>
c0001e4b:	29 d0                	sub    eax,edx
c0001e4d:	83 c3 08             	add    ebx,0x8
c0001e50:	eb ef                	jmp    c0001e41 <clmt_clust+0x2c>
c0001e52:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e55:	89 c2                	mov    edx,eax
c0001e57:	5b                   	pop    ebx
c0001e58:	89 d0                	mov    eax,edx
c0001e5a:	5e                   	pop    esi
c0001e5b:	5f                   	pop    edi
c0001e5c:	c3                   	ret    

c0001e5d <pick_lfn>:
c0001e5d:	55                   	push   ebp
c0001e5e:	57                   	push   edi
c0001e5f:	56                   	push   esi
c0001e60:	89 d6                	mov    esi,edx
c0001e62:	53                   	push   ebx
c0001e63:	89 c3                	mov    ebx,eax
c0001e65:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e68:	e8 ee fc ff ff       	call   c0001b5b <ld_word>
c0001e6d:	66 85 c0             	test   ax,ax
c0001e70:	74 04                	je     c0001e76 <pick_lfn+0x19>
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	eb 5c                	jmp    c0001ed2 <pick_lfn+0x75>
c0001e76:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e79:	bd 01 00 00 00       	mov    ebp,0x1
c0001e7e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e81:	31 ff                	xor    edi,edi
c0001e83:	49                   	dec    ecx
c0001e84:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e87:	0f b6 87 00 3f 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdc100]
c0001e8e:	01 f0                	add    eax,esi
c0001e90:	e8 c6 fc ff ff       	call   c0001b5b <ld_word>
c0001e95:	66 85 ed             	test   bp,bp
c0001e98:	74 11                	je     c0001eab <pick_lfn+0x4e>
c0001e9a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ea0:	77 d0                	ja     c0001e72 <pick_lfn+0x15>
c0001ea2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ea6:	89 c5                	mov    ebp,eax
c0001ea8:	41                   	inc    ecx
c0001ea9:	eb 04                	jmp    c0001eaf <pick_lfn+0x52>
c0001eab:	66 40                	inc    ax
c0001ead:	75 c3                	jne    c0001e72 <pick_lfn+0x15>
c0001eaf:	47                   	inc    edi
c0001eb0:	83 ff 0d             	cmp    edi,0xd
c0001eb3:	75 d2                	jne    c0001e87 <pick_lfn+0x2a>
c0001eb5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb8:	74 13                	je     c0001ecd <pick_lfn+0x70>
c0001eba:	66 85 ed             	test   bp,bp
c0001ebd:	74 0e                	je     c0001ecd <pick_lfn+0x70>
c0001ebf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ec5:	77 ab                	ja     c0001e72 <pick_lfn+0x15>
c0001ec7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ecd:	b8 01 00 00 00       	mov    eax,0x1
c0001ed2:	5b                   	pop    ebx
c0001ed3:	5e                   	pop    esi
c0001ed4:	5f                   	pop    edi
c0001ed5:	5d                   	pop    ebp
c0001ed6:	c3                   	ret    

c0001ed7 <put_lfn>:
c0001ed7:	55                   	push   ebp
c0001ed8:	31 ed                	xor    ebp,ebp
c0001eda:	57                   	push   edi
c0001edb:	89 d7                	mov    edi,edx
c0001edd:	56                   	push   esi
c0001ede:	31 f6                	xor    esi,esi
c0001ee0:	53                   	push   ebx
c0001ee1:	83 ec 08             	sub    esp,0x8
c0001ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ee7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eef:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ef5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001efb:	31 d2                	xor    edx,edx
c0001efd:	e8 cb fc ff ff       	call   c0001bcd <st_word>
c0001f02:	0f b6 d9             	movzx  ebx,cl
c0001f05:	4b                   	dec    ebx
c0001f06:	6b db 0d             	imul   ebx,ebx,0xd
c0001f09:	66 83 fe ff          	cmp    si,0xffff
c0001f0d:	74 08                	je     c0001f17 <put_lfn+0x40>
c0001f0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f12:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f16:	43                   	inc    ebx
c0001f17:	0f b6 85 00 3f 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdc100]
c0001f1e:	0f b7 d6             	movzx  edx,si
c0001f21:	01 f8                	add    eax,edi
c0001f23:	e8 a5 fc ff ff       	call   c0001bcd <st_word>
c0001f28:	66 85 f6             	test   si,si
c0001f2b:	75 03                	jne    c0001f30 <put_lfn+0x59>
c0001f2d:	83 ce ff             	or     esi,0xffffffff
c0001f30:	45                   	inc    ebp
c0001f31:	83 fd 0d             	cmp    ebp,0xd
c0001f34:	75 d3                	jne    c0001f09 <put_lfn+0x32>
c0001f36:	66 46                	inc    si
c0001f38:	74 0a                	je     c0001f44 <put_lfn+0x6d>
c0001f3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f3d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f42:	75 09                	jne    c0001f4d <put_lfn+0x76>
c0001f44:	88 c8                	mov    al,cl
c0001f46:	83 c8 40             	or     eax,0x40
c0001f49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f4d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f51:	88 07                	mov    BYTE PTR [edi],al
c0001f53:	83 c4 08             	add    esp,0x8
c0001f56:	5b                   	pop    ebx
c0001f57:	5e                   	pop    esi
c0001f58:	5f                   	pop    edi
c0001f59:	5d                   	pop    ebp
c0001f5a:	c3                   	ret    

c0001f5b <gen_numname>:
c0001f5b:	57                   	push   edi
c0001f5c:	89 cf                	mov    edi,ecx
c0001f5e:	56                   	push   esi
c0001f5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f64:	53                   	push   ebx
c0001f65:	89 c6                	mov    esi,eax
c0001f67:	83 ec 10             	sub    esp,0x10
c0001f6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f6e:	e8 67 fc ff ff       	call   c0001bda <mem_cpy>
c0001f73:	83 fb 05             	cmp    ebx,0x5
c0001f76:	76 2d                	jbe    c0001fa5 <gen_numname+0x4a>
c0001f78:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 25                	je     c0001fa5 <gen_numname+0x4a>
c0001f80:	83 c7 02             	add    edi,0x2
c0001f83:	ba 10 00 00 00       	mov    edx,0x10
c0001f88:	01 db                	add    ebx,ebx
c0001f8a:	89 c1                	mov    ecx,eax
c0001f8c:	66 d1 e8             	shr    ax,1
c0001f8f:	83 e1 01             	and    ecx,0x1
c0001f92:	01 cb                	add    ebx,ecx
c0001f94:	0f ba e3 10          	bt     ebx,0x10
c0001f98:	73 06                	jae    c0001fa0 <gen_numname+0x45>
c0001f9a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fa0:	4a                   	dec    edx
c0001fa1:	75 e5                	jne    c0001f88 <gen_numname+0x2d>
c0001fa3:	eb d3                	jmp    c0001f78 <gen_numname+0x1d>
c0001fa5:	b8 07 00 00 00       	mov    eax,0x7
c0001faa:	88 d9                	mov    cl,bl
c0001fac:	83 e1 0f             	and    ecx,0xf
c0001faf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fb2:	80 fa 39             	cmp    dl,0x39
c0001fb5:	76 03                	jbe    c0001fba <gen_numname+0x5f>
c0001fb7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fba:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fbd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fc1:	89 da                	mov    edx,ebx
c0001fc3:	c1 ea 04             	shr    edx,0x4
c0001fc6:	83 fb 0f             	cmp    ebx,0xf
c0001fc9:	76 06                	jbe    c0001fd1 <gen_numname+0x76>
c0001fcb:	89 c8                	mov    eax,ecx
c0001fcd:	89 d3                	mov    ebx,edx
c0001fcf:	eb d9                	jmp    c0001faa <gen_numname+0x4f>
c0001fd1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fd6:	31 d2                	xor    edx,edx
c0001fd8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fdb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fde:	39 ca                	cmp    edx,ecx
c0001fe0:	73 18                	jae    c0001ffa <gen_numname+0x9f>
c0001fe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe5:	3c 20                	cmp    al,0x20
c0001fe7:	74 11                	je     c0001ffa <gen_numname+0x9f>
c0001fe9:	e8 41 fc ff ff       	call   c0001c2f <dbc_1st>
c0001fee:	85 c0                	test   eax,eax
c0001ff0:	74 05                	je     c0001ff7 <gen_numname+0x9c>
c0001ff2:	39 d3                	cmp    ebx,edx
c0001ff4:	74 04                	je     c0001ffa <gen_numname+0x9f>
c0001ff6:	42                   	inc    edx
c0001ff7:	42                   	inc    edx
c0001ff8:	eb e1                	jmp    c0001fdb <gen_numname+0x80>
c0001ffa:	b0 20                	mov    al,0x20
c0001ffc:	83 f9 07             	cmp    ecx,0x7
c0001fff:	77 05                	ja     c0002006 <gen_numname+0xab>
c0002001:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002005:	41                   	inc    ecx
c0002006:	42                   	inc    edx
c0002007:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000200b:	83 fa 07             	cmp    edx,0x7
c000200e:	76 ea                	jbe    c0001ffa <gen_numname+0x9f>
c0002010:	83 c4 10             	add    esp,0x10
c0002013:	5b                   	pop    ebx
c0002014:	5e                   	pop    esi
c0002015:	5f                   	pop    edi
c0002016:	c3                   	ret    

c0002017 <sum_sfn>:
c0002017:	31 c9                	xor    ecx,ecx
c0002019:	31 d2                	xor    edx,edx
c000201b:	d0 ca                	ror    dl,1
c000201d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002020:	41                   	inc    ecx
c0002021:	83 f9 0b             	cmp    ecx,0xb
c0002024:	75 f5                	jne    c000201b <sum_sfn+0x4>
c0002026:	88 d0                	mov    al,dl
c0002028:	c3                   	ret    

c0002029 <xdir_sum>:
c0002029:	56                   	push   esi
c000202a:	31 c9                	xor    ecx,ecx
c000202c:	53                   	push   ebx
c000202d:	31 d2                	xor    edx,edx
c000202f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002033:	43                   	inc    ebx
c0002034:	c1 e3 05             	shl    ebx,0x5
c0002037:	83 fa 02             	cmp    edx,0x2
c000203a:	74 0b                	je     c0002047 <xdir_sum+0x1e>
c000203c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002040:	66 d1 c9             	ror    cx,1
c0002043:	01 f1                	add    ecx,esi
c0002045:	eb 05                	jmp    c000204c <xdir_sum+0x23>
c0002047:	ba 03 00 00 00       	mov    edx,0x3
c000204c:	42                   	inc    edx
c000204d:	39 d3                	cmp    ebx,edx
c000204f:	77 e6                	ja     c0002037 <xdir_sum+0xe>
c0002051:	89 c8                	mov    eax,ecx
c0002053:	5b                   	pop    ebx
c0002054:	5e                   	pop    esi
c0002055:	c3                   	ret    

c0002056 <xsum32>:
c0002056:	d1 ca                	ror    edx,1
c0002058:	0f b6 c0             	movzx  eax,al
c000205b:	01 d0                	add    eax,edx
c000205d:	c3                   	ret    

c000205e <get_xfileinfo>:
c000205e:	55                   	push   ebp
c000205f:	31 c9                	xor    ecx,ecx
c0002061:	57                   	push   edi
c0002062:	bd 40 00 00 00       	mov    ebp,0x40
c0002067:	56                   	push   esi
c0002068:	31 ff                	xor    edi,edi
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 0c             	sub    esp,0xc
c0002070:	89 d3                	mov    ebx,edx
c0002072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002079:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000207d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002080:	76 6d                	jbe    c00020ef <get_xfileinfo+0x91>
c0002082:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002088:	76 0b                	jbe    c0002095 <get_xfileinfo+0x37>
c000208a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000208e:	bf 01 00 00 00       	mov    edi,0x1
c0002093:	eb 63                	jmp    c00020f8 <get_xfileinfo+0x9a>
c0002095:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000209b:	75 03                	jne    c00020a0 <get_xfileinfo+0x42>
c000209d:	83 c5 02             	add    ebp,0x2
c00020a0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020a3:	83 c5 02             	add    ebp,0x2
c00020a6:	e8 b0 fa ff ff       	call   c0001b5b <ld_word>
c00020ab:	ff 04 24             	inc    DWORD PTR [esp]
c00020ae:	66 85 c9             	test   cx,cx
c00020b1:	75 0d                	jne    c00020c0 <get_xfileinfo+0x62>
c00020b3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020be:	76 2b                	jbe    c00020eb <get_xfileinfo+0x8d>
c00020c0:	c1 e1 10             	shl    ecx,0x10
c00020c3:	ba ff 00 00 00       	mov    edx,0xff
c00020c8:	0f b7 c0             	movzx  eax,ax
c00020cb:	29 fa                	sub    edx,edi
c00020cd:	09 c8                	or     eax,ecx
c00020cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020d3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020db:	e8 1b fc ff ff       	call   c0001cfb <put_utf>
c00020e0:	84 c0                	test   al,al
c00020e2:	74 a6                	je     c000208a <get_xfileinfo+0x2c>
c00020e4:	0f b6 c0             	movzx  eax,al
c00020e7:	01 c7                	add    edi,eax
c00020e9:	31 c0                	xor    eax,eax
c00020eb:	89 c1                	mov    ecx,eax
c00020ed:	eb 8a                	jmp    c0002079 <get_xfileinfo+0x1b>
c00020ef:	85 ff                	test   edi,edi
c00020f1:	74 97                	je     c000208a <get_xfileinfo+0x2c>
c00020f3:	66 85 c9             	test   cx,cx
c00020f6:	75 92                	jne    c000208a <get_xfileinfo+0x2c>
c00020f8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020fd:	31 c0                	xor    eax,eax
c00020ff:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002103:	31 d2                	xor    edx,edx
c0002105:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002108:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000210b:	80 e1 10             	and    cl,0x10
c000210e:	75 08                	jne    c0002118 <get_xfileinfo+0xba>
c0002110:	8d 46 38             	lea    eax,[esi+0x38]
c0002113:	e8 68 fa ff ff       	call   c0001b80 <ld_qword>
c0002118:	89 03                	mov    DWORD PTR [ebx],eax
c000211a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000211d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002120:	e8 36 fa ff ff       	call   c0001b5b <ld_word>
c0002125:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002129:	8d 46 0e             	lea    eax,[esi+0xe]
c000212c:	e8 2a fa ff ff       	call   c0001b5b <ld_word>
c0002131:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002135:	83 c4 0c             	add    esp,0xc
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	5d                   	pop    ebp
c000213c:	c3                   	ret    

c000213d <get_ldnumber>:
c000213d:	8b 10                	mov    edx,DWORD PTR [eax]
c000213f:	85 d2                	test   edx,edx
c0002141:	74 14                	je     c0002157 <get_ldnumber+0x1a>
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d3                	mov    ebx,edx
c0002147:	43                   	inc    ebx
c0002148:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214b:	80 f9 1f             	cmp    cl,0x1f
c000214e:	76 0d                	jbe    c000215d <get_ldnumber+0x20>
c0002150:	80 f9 3a             	cmp    cl,0x3a
c0002153:	75 f2                	jne    c0002147 <get_ldnumber+0xa>
c0002155:	eb 0a                	jmp    c0002161 <get_ldnumber+0x24>
c0002157:	83 c9 ff             	or     ecx,0xffffffff
c000215a:	89 c8                	mov    eax,ecx
c000215c:	c3                   	ret    
c000215d:	31 c9                	xor    ecx,ecx
c000215f:	eb 24                	jmp    c0002185 <get_ldnumber+0x48>
c0002161:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002164:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002167:	80 f9 09             	cmp    cl,0x9
c000216a:	77 16                	ja     c0002182 <get_ldnumber+0x45>
c000216c:	83 c2 02             	add    edx,0x2
c000216f:	83 c9 ff             	or     ecx,0xffffffff
c0002172:	39 d3                	cmp    ebx,edx
c0002174:	75 0f                	jne    c0002185 <get_ldnumber+0x48>
c0002176:	89 f2                	mov    edx,esi
c0002178:	89 18                	mov    DWORD PTR [eax],ebx
c000217a:	0f be ca             	movsx  ecx,dl
c000217d:	83 e9 30             	sub    ecx,0x30
c0002180:	eb 03                	jmp    c0002185 <get_ldnumber+0x48>
c0002182:	83 c9 ff             	or     ecx,0xffffffff
c0002185:	89 c8                	mov    eax,ecx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <crc32>:
c000218a:	56                   	push   esi
c000218b:	89 d6                	mov    esi,edx
c000218d:	53                   	push   ebx
c000218e:	b2 01                	mov    dl,0x1
c0002190:	bb 08 00 00 00       	mov    ebx,0x8
c0002195:	89 f1                	mov    ecx,esi
c0002197:	84 d1                	test   cl,dl
c0002199:	0f 95 c1             	setne  cl
c000219c:	0f b6 c9             	movzx  ecx,cl
c000219f:	31 c1                	xor    ecx,eax
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	d1 e8                	shr    eax,1
c00021a5:	80 e1 01             	and    cl,0x1
c00021a8:	74 05                	je     c00021af <crc32+0x25>
c00021aa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021af:	d1 e2                	shl    edx,1
c00021b1:	4b                   	dec    ebx
c00021b2:	75 e1                	jne    c0002195 <crc32+0xb>
c00021b4:	5b                   	pop    ebx
c00021b5:	5e                   	pop    esi
c00021b6:	c3                   	ret    

c00021b7 <test_gpt_header>:
c00021b7:	55                   	push   ebp
c00021b8:	b9 10 00 00 00       	mov    ecx,0x10
c00021bd:	57                   	push   edi
c00021be:	ba 00 3e 02 c0       	mov    edx,0xc0023e00
c00021c3:	56                   	push   esi
c00021c4:	31 ff                	xor    edi,edi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	e8 2c fa ff ff       	call   c0001bfa <mem_cmp>
c00021ce:	85 c0                	test   eax,eax
c00021d0:	75 55                	jne    c0002227 <test_gpt_header+0x70>
c00021d2:	89 c7                	mov    edi,eax
c00021d4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d9:	83 ce ff             	or     esi,0xffffffff
c00021dc:	31 d2                	xor    edx,edx
c00021de:	83 fd 03             	cmp    ebp,0x3
c00021e1:	76 05                	jbe    c00021e8 <test_gpt_header+0x31>
c00021e3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e8:	89 f0                	mov    eax,esi
c00021ea:	45                   	inc    ebp
c00021eb:	e8 9a ff ff ff       	call   c000218a <crc32>
c00021f0:	83 fd 4c             	cmp    ebp,0x4c
c00021f3:	89 c6                	mov    esi,eax
c00021f5:	75 e5                	jne    c00021dc <test_gpt_header+0x25>
c00021f7:	8d 43 10             	lea    eax,[ebx+0x10]
c00021fa:	f7 d6                	not    esi
c00021fc:	e8 67 f9 ff ff       	call   c0001b68 <ld_dword>
c0002201:	39 c6                	cmp    esi,eax
c0002203:	75 22                	jne    c0002227 <test_gpt_header+0x70>
c0002205:	8d 43 54             	lea    eax,[ebx+0x54]
c0002208:	e8 5b f9 ff ff       	call   c0001b68 <ld_dword>
c000220d:	83 c0 80             	add    eax,0xffffff80
c0002210:	75 15                	jne    c0002227 <test_gpt_header+0x70>
c0002212:	8d 43 50             	lea    eax,[ebx+0x50]
c0002215:	e8 4e f9 ff ff       	call   c0001b68 <ld_dword>
c000221a:	3d 80 00 00 00       	cmp    eax,0x80
c000221f:	0f 96 c0             	setbe  al
c0002222:	0f b6 c0             	movzx  eax,al
c0002225:	89 c7                	mov    edi,eax
c0002227:	5b                   	pop    ebx
c0002228:	89 f8                	mov    eax,edi
c000222a:	5e                   	pop    esi
c000222b:	5f                   	pop    edi
c000222c:	5d                   	pop    ebp
c000222d:	c3                   	ret    

c000222e <make_rand>:
c000222e:	56                   	push   esi
c000222f:	85 c0                	test   eax,eax
c0002231:	53                   	push   ebx
c0002232:	75 05                	jne    c0002239 <make_rand+0xb>
c0002234:	b8 01 00 00 00       	mov    eax,0x1
c0002239:	01 d1                	add    ecx,edx
c000223b:	bb 08 00 00 00       	mov    ebx,0x8
c0002240:	89 c6                	mov    esi,eax
c0002242:	d1 e8                	shr    eax,1
c0002244:	83 e6 01             	and    esi,0x1
c0002247:	85 f6                	test   esi,esi
c0002249:	74 05                	je     c0002250 <make_rand+0x22>
c000224b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002250:	4b                   	dec    ebx
c0002251:	75 ed                	jne    c0002240 <make_rand+0x12>
c0002253:	42                   	inc    edx
c0002254:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002257:	39 ca                	cmp    edx,ecx
c0002259:	75 e0                	jne    c000223b <make_rand+0xd>
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	c3                   	ret    

c000225e <validate>:
c000225e:	56                   	push   esi
c000225f:	53                   	push   ebx
c0002260:	89 d6                	mov    esi,edx
c0002262:	51                   	push   ecx
c0002263:	85 c0                	test   eax,eax
c0002265:	75 09                	jne    c0002270 <validate+0x12>
c0002267:	b8 09 00 00 00       	mov    eax,0x9
c000226c:	31 c9                	xor    ecx,ecx
c000226e:	eb 2f                	jmp    c000229f <validate+0x41>
c0002270:	89 c3                	mov    ebx,eax
c0002272:	8b 00                	mov    eax,DWORD PTR [eax]
c0002274:	85 c0                	test   eax,eax
c0002276:	74 ef                	je     c0002267 <validate+0x9>
c0002278:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000227b:	74 ea                	je     c0002267 <validate+0x9>
c000227d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002281:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002285:	75 e0                	jne    c0002267 <validate+0x9>
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000228e:	50                   	push   eax
c000228f:	e8 76 f8 ff ff       	call   c0001b0a <disk_status>
c0002294:	83 c4 10             	add    esp,0x10
c0002297:	a8 01                	test   al,0x1
c0002299:	75 cc                	jne    c0002267 <validate+0x9>
c000229b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000229d:	31 c0                	xor    eax,eax
c000229f:	89 0e                	mov    DWORD PTR [esi],ecx
c00022a1:	5a                   	pop    edx
c00022a2:	5b                   	pop    ebx
c00022a3:	5e                   	pop    esi
c00022a4:	c3                   	ret    

c00022a5 <sync_window>:
c00022a5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a9:	0f 84 85 00 00 00    	je     c0002334 <sync_window+0x8f>
c00022af:	55                   	push   ebp
c00022b0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022b3:	57                   	push   edi
c00022b4:	56                   	push   esi
c00022b5:	53                   	push   ebx
c00022b6:	89 c3                	mov    ebx,eax
c00022b8:	83 ec 28             	sub    esp,0x28
c00022bb:	6a 01                	push   0x1
c00022bd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022c0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022c3:	55                   	push   ebp
c00022c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c8:	50                   	push   eax
c00022c9:	e8 58 f8 ff ff       	call   c0001b26 <disk_write>
c00022ce:	83 c4 20             	add    esp,0x20
c00022d1:	ba 01 00 00 00       	mov    edx,0x1
c00022d6:	85 c0                	test   eax,eax
c00022d8:	75 50                	jne    c000232a <sync_window+0x85>
c00022da:	31 ff                	xor    edi,edi
c00022dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022e7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022ea:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022ed:	89 c6                	mov    esi,eax
c00022ef:	89 d7                	mov    edi,edx
c00022f1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022f4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022fb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022ff:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002303:	73 23                	jae    c0002328 <sync_window+0x83>
c0002305:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002309:	75 1d                	jne    c0002328 <sync_window+0x83>
c000230b:	83 ec 0c             	sub    esp,0xc
c000230e:	6a 01                	push   0x1
c0002310:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002314:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002318:	52                   	push   edx
c0002319:	50                   	push   eax
c000231a:	55                   	push   ebp
c000231b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000231f:	50                   	push   eax
c0002320:	e8 01 f8 ff ff       	call   c0001b26 <disk_write>
c0002325:	83 c4 20             	add    esp,0x20
c0002328:	31 d2                	xor    edx,edx
c000232a:	83 c4 1c             	add    esp,0x1c
c000232d:	89 d0                	mov    eax,edx
c000232f:	5b                   	pop    ebx
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    
c0002334:	31 d2                	xor    edx,edx
c0002336:	89 d0                	mov    eax,edx
c0002338:	c3                   	ret    

c0002339 <move_window>:
c0002339:	56                   	push   esi
c000233a:	53                   	push   ebx
c000233b:	89 c3                	mov    ebx,eax
c000233d:	83 ec 14             	sub    esp,0x14
c0002340:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002343:	75 07                	jne    c000234c <move_window+0x13>
c0002345:	31 f6                	xor    esi,esi
c0002347:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000234a:	74 59                	je     c00023a5 <move_window+0x6c>
c000234c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002350:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002354:	89 d8                	mov    eax,ebx
c0002356:	e8 4a ff ff ff       	call   c00022a5 <sync_window>
c000235b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000235f:	89 c6                	mov    esi,eax
c0002361:	85 c0                	test   eax,eax
c0002363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002367:	75 3c                	jne    c00023a5 <move_window+0x6c>
c0002369:	83 ec 0c             	sub    esp,0xc
c000236c:	8d 43 54             	lea    eax,[ebx+0x54]
c000236f:	6a 01                	push   0x1
c0002371:	51                   	push   ecx
c0002372:	52                   	push   edx
c0002373:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002377:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000237b:	50                   	push   eax
c000237c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002380:	50                   	push   eax
c0002381:	e8 8a f7 ff ff       	call   c0001b10 <disk_read>
c0002386:	83 c4 20             	add    esp,0x20
c0002389:	85 c0                	test   eax,eax
c000238b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000238f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002393:	74 0a                	je     c000239f <move_window+0x66>
c0002395:	83 ca ff             	or     edx,0xffffffff
c0002398:	be 01 00 00 00       	mov    esi,0x1
c000239d:	89 d1                	mov    ecx,edx
c000239f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023a2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023a5:	89 f0                	mov    eax,esi
c00023a7:	83 c4 14             	add    esp,0x14
c00023aa:	5b                   	pop    ebx
c00023ab:	5e                   	pop    esi
c00023ac:	c3                   	ret    

c00023ad <check_fs>:
c00023ad:	53                   	push   ebx
c00023ae:	89 c3                	mov    ebx,eax
c00023b0:	83 ec 08             	sub    esp,0x8
c00023b3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023b7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023be:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023c5:	e8 6f ff ff ff       	call   c0002339 <move_window>
c00023ca:	ba 04 00 00 00       	mov    edx,0x4
c00023cf:	85 c0                	test   eax,eax
c00023d1:	0f 85 89 00 00 00    	jne    c0002460 <check_fs+0xb3>
c00023d7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023dd:	e8 79 f7 ff ff       	call   c0001b5b <ld_word>
c00023e2:	ba 03 00 00 00       	mov    edx,0x3
c00023e7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023eb:	75 73                	jne    c0002460 <check_fs+0xb3>
c00023ed:	ba 20 3f 02 c0       	mov    edx,0xc0023f20
c00023f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00023f5:	b9 0b 00 00 00       	mov    ecx,0xb
c00023fa:	e8 fb f7 ff ff       	call   c0001bfa <mem_cmp>
c00023ff:	ba 01 00 00 00       	mov    edx,0x1
c0002404:	85 c0                	test   eax,eax
c0002406:	74 58                	je     c0002460 <check_fs+0xb3>
c0002408:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000240b:	8d 50 18             	lea    edx,[eax+0x18]
c000240e:	80 fa 01             	cmp    dl,0x1
c0002411:	76 09                	jbe    c000241c <check_fs+0x6f>
c0002413:	ba 02 00 00 00       	mov    edx,0x2
c0002418:	3c eb                	cmp    al,0xeb
c000241a:	75 44                	jne    c0002460 <check_fs+0xb3>
c000241c:	ba 04 6e 02 c0       	mov    edx,0xc0026e04
c0002421:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002427:	b9 03 00 00 00       	mov    ecx,0x3
c000242c:	e8 c9 f7 ff ff       	call   c0001bfa <mem_cmp>
c0002431:	31 d2                	xor    edx,edx
c0002433:	85 c0                	test   eax,eax
c0002435:	74 29                	je     c0002460 <check_fs+0xb3>
c0002437:	ba 2c 3f 02 c0       	mov    edx,0xc0023f2c
c000243c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002442:	b9 05 00 00 00       	mov    ecx,0x5
c0002447:	e8 ae f7 ff ff       	call   c0001bfa <mem_cmp>
c000244c:	31 d2                	xor    edx,edx
c000244e:	85 c0                	test   eax,eax
c0002450:	74 0e                	je     c0002460 <check_fs+0xb3>
c0002452:	31 d2                	xor    edx,edx
c0002454:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000245b:	0f 95 c2             	setne  dl
c000245e:	01 d2                	add    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	83 c4 08             	add    esp,0x8
c0002465:	5b                   	pop    ebx
c0002466:	c3                   	ret    

c0002467 <find_volume>:
c0002467:	55                   	push   ebp
c0002468:	31 c9                	xor    ecx,ecx
c000246a:	57                   	push   edi
c000246b:	56                   	push   esi
c000246c:	89 d6                	mov    esi,edx
c000246e:	53                   	push   ebx
c000246f:	31 d2                	xor    edx,edx
c0002471:	83 ec 3c             	sub    esp,0x3c
c0002474:	89 c3                	mov    ebx,eax
c0002476:	e8 32 ff ff ff       	call   c00023ad <check_fs>
c000247b:	83 f8 02             	cmp    eax,0x2
c000247e:	74 0e                	je     c000248e <find_volume+0x27>
c0002480:	0f 87 5d 01 00 00    	ja     c00025e3 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 84 55 01 00 00    	je     c00025e3 <find_volume+0x17c>
c000248e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002495:	0f 85 dd 00 00 00    	jne    c0002578 <find_volume+0x111>
c000249b:	31 c9                	xor    ecx,ecx
c000249d:	ba 01 00 00 00       	mov    edx,0x1
c00024a2:	89 d8                	mov    eax,ebx
c00024a4:	e8 90 fe ff ff       	call   c0002339 <move_window>
c00024a9:	85 c0                	test   eax,eax
c00024ab:	74 0a                	je     c00024b7 <find_volume+0x50>
c00024ad:	b8 04 00 00 00       	mov    eax,0x4
c00024b2:	e9 2c 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024b7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ba:	89 e8                	mov    eax,ebp
c00024bc:	e8 f6 fc ff ff       	call   c00021b7 <test_gpt_header>
c00024c1:	85 c0                	test   eax,eax
c00024c3:	75 0a                	jne    c00024cf <find_volume+0x68>
c00024c5:	b8 03 00 00 00       	mov    eax,0x3
c00024ca:	e9 14 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024cf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024d5:	e8 8e f6 ff ff       	call   c0001b68 <ld_dword>
c00024da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024de:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024e4:	e8 97 f6 ff ff       	call   c0001b80 <ld_qword>
c00024e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002501:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002505:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002509:	74 ba                	je     c00024c5 <find_volume+0x5e>
c000250b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000250f:	31 c9                	xor    ecx,ecx
c0002511:	c1 e7 07             	shl    edi,0x7
c0002514:	89 d8                	mov    eax,ebx
c0002516:	89 fa                	mov    edx,edi
c0002518:	c1 ea 09             	shr    edx,0x9
c000251b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000251f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002523:	e8 11 fe ff ff       	call   c0002339 <move_window>
c0002528:	85 c0                	test   eax,eax
c000252a:	75 81                	jne    c00024ad <find_volume+0x46>
c000252c:	81 e7 80 01 00 00    	and    edi,0x180
c0002532:	b9 10 00 00 00       	mov    ecx,0x10
c0002537:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000253b:	ba 10 3f 02 c0       	mov    edx,0xc0023f10
c0002540:	e8 b5 f6 ff ff       	call   c0001bfa <mem_cmp>
c0002545:	85 c0                	test   eax,eax
c0002547:	75 29                	jne    c0002572 <find_volume+0x10b>
c0002549:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000254d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002551:	e8 2a f6 ff ff       	call   c0001b80 <ld_qword>
c0002556:	89 d1                	mov    ecx,edx
c0002558:	89 c2                	mov    edx,eax
c000255a:	89 d8                	mov    eax,ebx
c000255c:	e8 4c fe ff ff       	call   c00023ad <check_fs>
c0002561:	85 f6                	test   esi,esi
c0002563:	75 07                	jne    c000256c <find_volume+0x105>
c0002565:	83 f8 01             	cmp    eax,0x1
c0002568:	77 08                	ja     c0002572 <find_volume+0x10b>
c000256a:	eb 77                	jmp    c00025e3 <find_volume+0x17c>
c000256c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002570:	74 71                	je     c00025e3 <find_volume+0x17c>
c0002572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002576:	eb 89                	jmp    c0002501 <find_volume+0x9a>
c0002578:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000257c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002582:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000258c:	89 cd                	mov    ebp,ecx
c000258e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002592:	89 f8                	mov    eax,edi
c0002594:	83 c7 10             	add    edi,0x10
c0002597:	e8 cc f5 ff ff       	call   c0001b68 <ld_dword>
c000259c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025a0:	89 01                	mov    DWORD PTR [ecx],eax
c00025a2:	83 c1 04             	add    ecx,0x4
c00025a5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a9:	75 e3                	jne    c000258e <find_volume+0x127>
c00025ab:	31 ff                	xor    edi,edi
c00025ad:	85 f6                	test   esi,esi
c00025af:	74 03                	je     c00025b4 <find_volume+0x14d>
c00025b1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025b4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b8:	85 d2                	test   edx,edx
c00025ba:	74 14                	je     c00025d0 <find_volume+0x169>
c00025bc:	31 c9                	xor    ecx,ecx
c00025be:	89 d8                	mov    eax,ebx
c00025c0:	e8 e8 fd ff ff       	call   c00023ad <check_fs>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 19                	jbe    c00025e3 <find_volume+0x17c>
c00025ca:	85 f6                	test   esi,esi
c00025cc:	74 0f                	je     c00025dd <find_volume+0x176>
c00025ce:	eb 13                	jmp    c00025e3 <find_volume+0x17c>
c00025d0:	85 f6                	test   esi,esi
c00025d2:	0f 85 ed fe ff ff    	jne    c00024c5 <find_volume+0x5e>
c00025d8:	b8 03 00 00 00       	mov    eax,0x3
c00025dd:	47                   	inc    edi
c00025de:	83 ff 03             	cmp    edi,0x3
c00025e1:	76 d1                	jbe    c00025b4 <find_volume+0x14d>
c00025e3:	83 c4 3c             	add    esp,0x3c
c00025e6:	5b                   	pop    ebx
c00025e7:	5e                   	pop    esi
c00025e8:	5f                   	pop    edi
c00025e9:	5d                   	pop    ebp
c00025ea:	c3                   	ret    

c00025eb <mount_volume>:
c00025eb:	55                   	push   ebp
c00025ec:	57                   	push   edi
c00025ed:	89 cf                	mov    edi,ecx
c00025ef:	56                   	push   esi
c00025f0:	53                   	push   ebx
c00025f1:	bb 0b 00 00 00       	mov    ebx,0xb
c00025f6:	83 ec 3c             	sub    esp,0x3c
c00025f9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002603:	e8 35 fb ff ff       	call   c000213d <get_ldnumber>
c0002608:	85 c0                	test   eax,eax
c000260a:	0f 88 3a 05 00 00    	js     c0002b4a <mount_volume+0x55f>
c0002610:	8b 2c 85 80 89 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd7680]
c0002617:	89 c6                	mov    esi,eax
c0002619:	bb 0c 00 00 00       	mov    ebx,0xc
c000261e:	85 ed                	test   ebp,ebp
c0002620:	0f 84 24 05 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000262a:	83 e7 fe             	and    edi,0xfffffffe
c000262d:	89 2a                	mov    DWORD PTR [edx],ebp
c000262f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002633:	74 32                	je     c0002667 <mount_volume+0x7c>
c0002635:	83 ec 0c             	sub    esp,0xc
c0002638:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000263c:	50                   	push   eax
c000263d:	e8 c8 f4 ff ff       	call   c0001b0a <disk_status>
c0002642:	83 c4 10             	add    esp,0x10
c0002645:	a8 01                	test   al,0x1
c0002647:	75 1e                	jne    c0002667 <mount_volume+0x7c>
c0002649:	31 db                	xor    ebx,ebx
c000264b:	89 f9                	mov    ecx,edi
c000264d:	84 c9                	test   cl,cl
c000264f:	0f 84 f5 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002655:	a8 04                	test   al,0x4
c0002657:	0f 84 ed 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c000265d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002662:	e9 e3 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c0002667:	83 ec 0c             	sub    esp,0xc
c000266a:	89 f0                	mov    eax,esi
c000266c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002670:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002673:	0f b6 f0             	movzx  esi,al
c0002676:	bb 03 00 00 00       	mov    ebx,0x3
c000267b:	56                   	push   esi
c000267c:	e8 8c f4 ff ff       	call   c0001b0d <disk_initialize>
c0002681:	83 c4 10             	add    esp,0x10
c0002684:	a8 01                	test   al,0x1
c0002686:	0f 85 be 04 00 00    	jne    c0002b4a <mount_volume+0x55f>
c000268c:	89 f9                	mov    ecx,edi
c000268e:	84 c9                	test   cl,cl
c0002690:	74 04                	je     c0002696 <mount_volume+0xab>
c0002692:	a8 04                	test   al,0x4
c0002694:	75 c7                	jne    c000265d <mount_volume+0x72>
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 e8                	mov    eax,ebp
c000269a:	e8 c8 fd ff ff       	call   c0002467 <find_volume>
c000269f:	83 f8 04             	cmp    eax,0x4
c00026a2:	75 0a                	jne    c00026ae <mount_volume+0xc3>
c00026a4:	bb 01 00 00 00       	mov    ebx,0x1
c00026a9:	e9 9c 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026ae:	83 f8 01             	cmp    eax,0x1
c00026b1:	76 0a                	jbe    c00026bd <mount_volume+0xd2>
c00026b3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b8:	e9 8d 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026bd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026c0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026cb:	75 17                	jne    c00026e4 <mount_volume+0xf9>
c00026cd:	b8 0b 00 00 00       	mov    eax,0xb
c00026d2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026d7:	75 da                	jne    c00026b3 <mount_volume+0xc8>
c00026d9:	40                   	inc    eax
c00026da:	83 f8 40             	cmp    eax,0x40
c00026dd:	75 f3                	jne    c00026d2 <mount_volume+0xe7>
c00026df:	e9 5a 02 00 00       	jmp    c000293e <mount_volume+0x353>
c00026e4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026e7:	e8 6f f4 ff ff       	call   c0001b5b <ld_word>
c00026ec:	66 3d 00 02          	cmp    ax,0x200
c00026f0:	75 c1                	jne    c00026b3 <mount_volume+0xc8>
c00026f2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026f5:	e8 61 f4 ff ff       	call   c0001b5b <ld_word>
c00026fa:	0f b7 c0             	movzx  eax,ax
c00026fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002701:	85 c0                	test   eax,eax
c0002703:	75 0c                	jne    c0002711 <mount_volume+0x126>
c0002705:	8d 45 78             	lea    eax,[ebp+0x78]
c0002708:	e8 5b f4 ff ff       	call   c0001b68 <ld_dword>
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002715:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002718:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000271b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000271f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002722:	48                   	dec    eax
c0002723:	3c 01                	cmp    al,0x1
c0002725:	77 8c                	ja     c00026b3 <mount_volume+0xc8>
c0002727:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000272b:	89 c3                	mov    ebx,eax
c000272d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002731:	66 85 c0             	test   ax,ax
c0002734:	0f 84 79 ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c000273a:	8d 40 ff             	lea    eax,[eax-0x1]
c000273d:	85 d8                	test   eax,ebx
c000273f:	0f 85 6e ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002745:	8d 45 65             	lea    eax,[ebp+0x65]
c0002748:	e8 0e f4 ff ff       	call   c0001b5b <ld_word>
c000274d:	89 c7                	mov    edi,eax
c000274f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002753:	a8 0f                	test   al,0xf
c0002755:	0f 85 58 ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c000275b:	8d 45 67             	lea    eax,[ebp+0x67]
c000275e:	e8 f8 f3 ff ff       	call   c0001b5b <ld_word>
c0002763:	0f b7 f0             	movzx  esi,ax
c0002766:	85 f6                	test   esi,esi
c0002768:	75 0a                	jne    c0002774 <mount_volume+0x189>
c000276a:	8d 45 74             	lea    eax,[ebp+0x74]
c000276d:	e8 f6 f3 ff ff       	call   c0001b68 <ld_dword>
c0002772:	89 c6                	mov    esi,eax
c0002774:	8d 45 62             	lea    eax,[ebp+0x62]
c0002777:	e8 df f3 ff ff       	call   c0001b5b <ld_word>
c000277c:	66 85 c0             	test   ax,ax
c000277f:	0f 84 2e ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002785:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000278a:	0f b7 c8             	movzx  ecx,ax
c000278d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002796:	89 fa                	mov    edx,edi
c0002798:	66 c1 ea 04          	shr    dx,0x4
c000279c:	0f b7 d2             	movzx  edx,dx
c000279f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027a3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027aa:	39 c6                	cmp    esi,eax
c00027ac:	0f 82 01 ff ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027b2:	29 c6                	sub    esi,eax
c00027b4:	31 d2                	xor    edx,edx
c00027b6:	89 f0                	mov    eax,esi
c00027b8:	f7 f3                	div    ebx
c00027ba:	39 de                	cmp    esi,ebx
c00027bc:	0f 82 f1 fe ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027c2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027c7:	0f 87 e6 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00027cd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027d2:	0f 86 63 03 00 00    	jbe    c0002b3b <mount_volume+0x550>
c00027d8:	bb 03 00 00 00       	mov    ebx,0x3
c00027dd:	8d 70 02             	lea    esi,[eax+0x2]
c00027e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027eb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027ee:	31 d2                	xor    edx,edx
c00027f0:	89 c8                	mov    eax,ecx
c00027f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002801:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002805:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002808:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000280b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000280f:	31 d2                	xor    edx,edx
c0002811:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002815:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002819:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000281f:	83 fb 03             	cmp    ebx,0x3
c0002822:	75 2b                	jne    c000284f <mount_volume+0x264>
c0002824:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002827:	e8 2f f3 ff ff       	call   c0001b5b <ld_word>
c000282c:	66 09 c7             	or     di,ax
c000282f:	0f 85 7e fe ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002835:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000283b:	c1 e6 02             	shl    esi,0x2
c000283e:	e8 25 f3 ff ff       	call   c0001b68 <ld_dword>
c0002843:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000284a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000284d:	eb 30                	jmp    c000287f <mount_volume+0x294>
c000284f:	66 85 ff             	test   di,di
c0002852:	0f 84 5b fe ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002858:	31 d2                	xor    edx,edx
c000285a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000285e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002862:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002866:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002869:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000286c:	83 fb 02             	cmp    ebx,0x2
c000286f:	75 04                	jne    c0002875 <mount_volume+0x28a>
c0002871:	01 f6                	add    esi,esi
c0002873:	eb 0a                	jmp    c000287f <mount_volume+0x294>
c0002875:	8d 04 76             	lea    eax,[esi+esi*2]
c0002878:	83 e6 01             	and    esi,0x1
c000287b:	d1 e8                	shr    eax,1
c000287d:	01 c6                	add    esi,eax
c000287f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002885:	c1 ee 09             	shr    esi,0x9
c0002888:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000288c:	0f 87 21 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c0002892:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002899:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028a0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028a4:	83 fb 03             	cmp    ebx,0x3
c00028a7:	75 7a                	jne    c0002923 <mount_volume+0x338>
c00028a9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028af:	e8 a7 f2 ff ff       	call   c0001b5b <ld_word>
c00028b4:	66 48                	dec    ax
c00028b6:	75 6b                	jne    c0002923 <mount_volume+0x338>
c00028b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028c0:	83 c2 01             	add    edx,0x1
c00028c3:	89 e8                	mov    eax,ebp
c00028c5:	83 d1 00             	adc    ecx,0x0
c00028c8:	e8 6c fa ff ff       	call   c0002339 <move_window>
c00028cd:	85 c0                	test   eax,eax
c00028cf:	75 52                	jne    c0002923 <mount_volume+0x338>
c00028d1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028d5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028db:	e8 7b f2 ff ff       	call   c0001b5b <ld_word>
c00028e0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028e4:	75 3d                	jne    c0002923 <mount_volume+0x338>
c00028e6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e9:	e8 7a f2 ff ff       	call   c0001b68 <ld_dword>
c00028ee:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028f3:	75 2e                	jne    c0002923 <mount_volume+0x338>
c00028f5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028fb:	e8 68 f2 ff ff       	call   c0001b68 <ld_dword>
c0002900:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002905:	75 1c                	jne    c0002923 <mount_volume+0x338>
c0002907:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000290d:	e8 56 f2 ff ff       	call   c0001b68 <ld_dword>
c0002912:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002915:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000291b:	e8 48 f2 ff ff       	call   c0001b68 <ld_dword>
c0002920:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002923:	66 a1 60 89 02 c0    	mov    ax,ds:0xc0028960
c0002929:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000292c:	40                   	inc    eax
c000292d:	31 db                	xor    ebx,ebx
c000292f:	66 a3 60 89 02 c0    	mov    ds:0xc0028960,ax
c0002935:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002939:	e9 0c 02 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c000293e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002944:	e8 12 f2 ff ff       	call   c0001b5b <ld_word>
c0002949:	66 3d 00 01          	cmp    ax,0x100
c000294d:	0f 85 60 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002953:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000295a:	0f 85 53 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002960:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002966:	e8 15 f2 ff ff       	call   c0001b80 <ld_qword>
c000296b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000296f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002973:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002979:	e8 ea f1 ff ff       	call   c0001b68 <ld_dword>
c000297e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002981:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002987:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000298a:	fe c8                	dec    al
c000298c:	0f 85 21 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002992:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002999:	bb 01 00 00 00       	mov    ebx,0x1
c000299e:	d3 e3                	shl    ebx,cl
c00029a0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029a4:	66 85 db             	test   bx,bx
c00029a7:	0f 84 06 fd ff ff    	je     c00026b3 <mount_volume+0xc8>
c00029ad:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029b3:	e8 b0 f1 ff ff       	call   c0001b68 <ld_dword>
c00029b8:	89 c6                	mov    esi,eax
c00029ba:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029bf:	0f 87 ee fc ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00029c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c9:	8d 40 02             	lea    eax,[eax+0x2]
c00029cc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029cf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029d6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029df:	e8 84 f1 ff ff       	call   c0001b68 <ld_dword>
c00029e4:	31 d2                	xor    edx,edx
c00029e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029f6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029fc:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a02:	e8 61 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a07:	31 d2                	xor    edx,edx
c0002a09:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a15:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a18:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a1b:	0f b7 c3             	movzx  eax,bx
c0002a1e:	31 d2                	xor    edx,edx
c0002a20:	0f af f0             	imul   esi,eax
c0002a23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a27:	89 f0                	mov    eax,esi
c0002a29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a2d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a31:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a35:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a39:	39 c1                	cmp    ecx,eax
c0002a3b:	89 df                	mov    edi,ebx
c0002a3d:	19 d7                	sbb    edi,edx
c0002a3f:	0f 82 6e fc ff ff    	jb     c00026b3 <mount_volume+0xc8>
c0002a45:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a4b:	31 db                	xor    ebx,ebx
c0002a4d:	e8 16 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a52:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a59:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a64:	85 db                	test   ebx,ebx
c0002a66:	75 39                	jne    c0002aa1 <mount_volume+0x4b6>
c0002a68:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a6c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a70:	0f 86 3d fc ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002a76:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a79:	31 ff                	xor    edi,edi
c0002a7b:	89 e8                	mov    eax,ebp
c0002a7d:	e8 72 f3 ff ff       	call   c0001df4 <clst2sect>
c0002a82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a86:	01 c6                	add    esi,eax
c0002a88:	89 e8                	mov    eax,ebp
c0002a8a:	11 d7                	adc    edi,edx
c0002a8c:	89 f2                	mov    edx,esi
c0002a8e:	89 f9                	mov    ecx,edi
c0002a90:	e8 a4 f8 ff ff       	call   c0002339 <move_window>
c0002a95:	85 c0                	test   eax,eax
c0002a97:	0f 85 07 fc ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002a9d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002aa1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002aa6:	74 0b                	je     c0002ab3 <mount_volume+0x4c8>
c0002aa8:	83 c3 20             	add    ebx,0x20
c0002aab:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ab1:	eb b1                	jmp    c0002a64 <mount_volume+0x479>
c0002ab3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ab6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aba:	e8 a9 f0 ff ff       	call   c0001b68 <ld_dword>
c0002abf:	89 c3                	mov    ebx,eax
c0002ac1:	83 f8 01             	cmp    eax,0x1
c0002ac4:	0f 86 e9 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002aca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002acd:	0f 86 e0 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002ad3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ad6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ada:	0f af c2             	imul   eax,edx
c0002add:	31 d2                	xor    edx,edx
c0002adf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ae2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002ae5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002aeb:	31 c9                	xor    ecx,ecx
c0002aed:	89 da                	mov    edx,ebx
c0002aef:	89 e8                	mov    eax,ebp
c0002af1:	c1 ea 07             	shr    edx,0x7
c0002af4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002af7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002afa:	e8 3a f8 ff ff       	call   c0002339 <move_window>
c0002aff:	85 c0                	test   eax,eax
c0002b01:	0f 85 9d fb ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002b07:	89 d8                	mov    eax,ebx
c0002b09:	83 e0 7f             	and    eax,0x7f
c0002b0c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b0f:	e8 54 f0 ff ff       	call   c0001b68 <ld_dword>
c0002b14:	83 f8 ff             	cmp    eax,0xffffffff
c0002b17:	74 0a                	je     c0002b23 <mount_volume+0x538>
c0002b19:	43                   	inc    ebx
c0002b1a:	39 d8                	cmp    eax,ebx
c0002b1c:	74 cd                	je     c0002aeb <mount_volume+0x500>
c0002b1e:	e9 90 fb ff ff       	jmp    c00026b3 <mount_volume+0xc8>
c0002b23:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b2a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b31:	bb 04 00 00 00       	mov    ebx,0x4
c0002b36:	e9 e8 fd ff ff       	jmp    c0002923 <mount_volume+0x338>
c0002b3b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b40:	19 db                	sbb    ebx,ebx
c0002b42:	83 c3 02             	add    ebx,0x2
c0002b45:	e9 93 fc ff ff       	jmp    c00027dd <mount_volume+0x1f2>
c0002b4a:	83 c4 3c             	add    esp,0x3c
c0002b4d:	89 d8                	mov    eax,ebx
c0002b4f:	5b                   	pop    ebx
c0002b50:	5e                   	pop    esi
c0002b51:	5f                   	pop    edi
c0002b52:	5d                   	pop    ebp
c0002b53:	c3                   	ret    

c0002b54 <find_bitmap>:
c0002b54:	55                   	push   ebp
c0002b55:	57                   	push   edi
c0002b56:	89 c7                	mov    edi,eax
c0002b58:	56                   	push   esi
c0002b59:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b5c:	53                   	push   ebx
c0002b5d:	83 ec 1c             	sub    esp,0x1c
c0002b60:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b67:	83 e8 02             	sub    eax,0x2
c0002b6a:	39 f0                	cmp    eax,esi
c0002b6c:	77 02                	ja     c0002b70 <find_bitmap+0x1c>
c0002b6e:	31 f6                	xor    esi,esi
c0002b70:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b74:	89 f3                	mov    ebx,esi
c0002b76:	31 ed                	xor    ebp,ebp
c0002b78:	31 c9                	xor    ecx,ecx
c0002b7a:	89 da                	mov    edx,ebx
c0002b7c:	89 f8                	mov    eax,edi
c0002b7e:	c1 ea 0c             	shr    edx,0xc
c0002b81:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b84:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b87:	e8 ad f7 ff ff       	call   c0002339 <move_window>
c0002b8c:	85 c0                	test   eax,eax
c0002b8e:	75 68                	jne    c0002bf8 <find_bitmap+0xa4>
c0002b90:	89 da                	mov    edx,ebx
c0002b92:	89 d9                	mov    ecx,ebx
c0002b94:	c1 ea 03             	shr    edx,0x3
c0002b97:	83 e1 07             	and    ecx,0x7
c0002b9a:	b8 01 00 00 00       	mov    eax,0x1
c0002b9f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ba5:	d3 e0                	shl    eax,cl
c0002ba7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002baa:	83 e9 02             	sub    ecx,0x2
c0002bad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bb1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bb5:	43                   	inc    ebx
c0002bb6:	21 c1                	and    ecx,eax
c0002bb8:	d1 e0                	shl    eax,1
c0002bba:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bbe:	77 09                	ja     c0002bc9 <find_bitmap+0x75>
c0002bc0:	31 db                	xor    ebx,ebx
c0002bc2:	ba 00 02 00 00       	mov    edx,0x200
c0002bc7:	31 c0                	xor    eax,eax
c0002bc9:	84 c9                	test   cl,cl
c0002bcb:	75 10                	jne    c0002bdd <find_bitmap+0x89>
c0002bcd:	45                   	inc    ebp
c0002bce:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bd2:	75 0f                	jne    c0002be3 <find_bitmap+0x8f>
c0002bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd8:	83 c0 02             	add    eax,0x2
c0002bdb:	eb 22                	jmp    c0002bff <find_bitmap+0xab>
c0002bdd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002be1:	31 ed                	xor    ebp,ebp
c0002be3:	39 de                	cmp    esi,ebx
c0002be5:	74 16                	je     c0002bfd <find_bitmap+0xa9>
c0002be7:	84 c0                	test   al,al
c0002be9:	75 c6                	jne    c0002bb1 <find_bitmap+0x5d>
c0002beb:	42                   	inc    edx
c0002bec:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bf2:	77 84                	ja     c0002b78 <find_bitmap+0x24>
c0002bf4:	b0 01                	mov    al,0x1
c0002bf6:	eb b9                	jmp    c0002bb1 <find_bitmap+0x5d>
c0002bf8:	83 c8 ff             	or     eax,0xffffffff
c0002bfb:	eb 02                	jmp    c0002bff <find_bitmap+0xab>
c0002bfd:	31 c0                	xor    eax,eax
c0002bff:	83 c4 1c             	add    esp,0x1c
c0002c02:	5b                   	pop    ebx
c0002c03:	5e                   	pop    esi
c0002c04:	5f                   	pop    edi
c0002c05:	5d                   	pop    ebp
c0002c06:	c3                   	ret    

c0002c07 <change_bitmap>:
c0002c07:	55                   	push   ebp
c0002c08:	89 cd                	mov    ebp,ecx
c0002c0a:	57                   	push   edi
c0002c0b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c0e:	56                   	push   esi
c0002c0f:	89 c7                	mov    edi,eax
c0002c11:	53                   	push   ebx
c0002c12:	89 c8                	mov    eax,ecx
c0002c14:	83 ec 1c             	sub    esp,0x1c
c0002c17:	31 d2                	xor    edx,edx
c0002c19:	89 ce                	mov    esi,ecx
c0002c1b:	c1 e8 0c             	shr    eax,0xc
c0002c1e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c23:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c26:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c29:	c1 ee 03             	shr    esi,0x3
c0002c2c:	83 e1 07             	and    ecx,0x7
c0002c2f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c35:	d3 e3                	shl    ebx,cl
c0002c37:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c3b:	89 c1                	mov    ecx,eax
c0002c3d:	89 d3                	mov    ebx,edx
c0002c3f:	83 c1 01             	add    ecx,0x1
c0002c42:	83 d3 00             	adc    ebx,0x0
c0002c45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c4d:	89 d1                	mov    ecx,edx
c0002c4f:	89 c2                	mov    edx,eax
c0002c51:	89 f8                	mov    eax,edi
c0002c53:	e8 e1 f6 ff ff       	call   c0002339 <move_window>
c0002c58:	89 c1                	mov    ecx,eax
c0002c5a:	85 c0                	test   eax,eax
c0002c5c:	75 48                	jne    c0002ca6 <change_bitmap+0x9f>
c0002c5e:	31 d2                	xor    edx,edx
c0002c60:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c64:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c68:	0f 95 c2             	setne  dl
c0002c6b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c6f:	74 3c                	je     c0002cad <change_bitmap+0xa6>
c0002c71:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c75:	4d                   	dec    ebp
c0002c76:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c7e:	74 32                	je     c0002cb2 <change_bitmap+0xab>
c0002c80:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c84:	75 d8                	jne    c0002c5e <change_bitmap+0x57>
c0002c86:	8d 46 01             	lea    eax,[esi+0x1]
c0002c89:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c8e:	89 c3                	mov    ebx,eax
c0002c90:	31 f6                	xor    esi,esi
c0002c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c9a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ca0:	74 99                	je     c0002c3b <change_bitmap+0x34>
c0002ca2:	89 de                	mov    esi,ebx
c0002ca4:	eb b8                	jmp    c0002c5e <change_bitmap+0x57>
c0002ca6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cab:	eb 05                	jmp    c0002cb2 <change_bitmap+0xab>
c0002cad:	b9 02 00 00 00       	mov    ecx,0x2
c0002cb2:	83 c4 1c             	add    esp,0x1c
c0002cb5:	89 c8                	mov    eax,ecx
c0002cb7:	5b                   	pop    ebx
c0002cb8:	5e                   	pop    esi
c0002cb9:	5f                   	pop    edi
c0002cba:	5d                   	pop    ebp
c0002cbb:	c3                   	ret    

c0002cbc <put_fat>:
c0002cbc:	83 fa 01             	cmp    edx,0x1
c0002cbf:	0f 86 7b 01 00 00    	jbe    c0002e40 <put_fat+0x184>
c0002cc5:	55                   	push   ebp
c0002cc6:	57                   	push   edi
c0002cc7:	89 cf                	mov    edi,ecx
c0002cc9:	56                   	push   esi
c0002cca:	b9 02 00 00 00       	mov    ecx,0x2
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c6                	mov    esi,eax
c0002cd2:	83 ec 1c             	sub    esp,0x1c
c0002cd5:	89 d3                	mov    ebx,edx
c0002cd7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cda:	0f 86 68 01 00 00    	jbe    c0002e48 <put_fat+0x18c>
c0002ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0002ce2:	3c 02                	cmp    al,0x2
c0002ce4:	0f 84 c7 00 00 00    	je     c0002db1 <put_fat+0xf5>
c0002cea:	77 09                	ja     c0002cf5 <put_fat+0x39>
c0002cec:	fe c8                	dec    al
c0002cee:	74 17                	je     c0002d07 <put_fat+0x4b>
c0002cf0:	e9 53 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002cf5:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfa:	3c 04                	cmp    al,0x4
c0002cfc:	0f 86 e1 00 00 00    	jbe    c0002de3 <put_fat+0x127>
c0002d02:	e9 41 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002d07:	89 d5                	mov    ebp,edx
c0002d09:	31 c9                	xor    ecx,ecx
c0002d0b:	d1 ed                	shr    ebp,1
c0002d0d:	89 f0                	mov    eax,esi
c0002d0f:	01 d5                	add    ebp,edx
c0002d11:	89 ea                	mov    edx,ebp
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d19:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d1c:	e8 18 f6 ff ff       	call   c0002339 <move_window>
c0002d21:	89 c1                	mov    ecx,eax
c0002d23:	85 c0                	test   eax,eax
c0002d25:	0f 85 1d 01 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d2b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d32:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d35:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d3f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d43:	89 f8                	mov    eax,edi
c0002d45:	83 e3 01             	and    ebx,0x1
c0002d48:	74 0d                	je     c0002d57 <put_fat+0x9b>
c0002d4a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d4d:	89 fa                	mov    edx,edi
c0002d4f:	83 e0 0f             	and    eax,0xf
c0002d52:	c1 e2 04             	shl    edx,0x4
c0002d55:	09 d0                	or     eax,edx
c0002d57:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d5e:	31 c9                	xor    ecx,ecx
c0002d60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d64:	c1 ea 09             	shr    edx,0x9
c0002d67:	89 f0                	mov    eax,esi
c0002d69:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d6c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d6f:	e8 c5 f5 ff ff       	call   c0002339 <move_window>
c0002d74:	89 c1                	mov    ecx,eax
c0002d76:	85 c0                	test   eax,eax
c0002d78:	0f 85 ca 00 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d7e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d82:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d88:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d8c:	85 db                	test   ebx,ebx
c0002d8e:	74 07                	je     c0002d97 <put_fat+0xdb>
c0002d90:	c1 ef 04             	shr    edi,0x4
c0002d93:	89 fa                	mov    edx,edi
c0002d95:	eb 0e                	jmp    c0002da5 <put_fat+0xe9>
c0002d97:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d9a:	c1 ef 08             	shr    edi,0x8
c0002d9d:	83 e2 f0             	and    edx,0xfffffff0
c0002da0:	83 e7 0f             	and    edi,0xf
c0002da3:	09 fa                	or     edx,edi
c0002da5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dac:	e9 97 00 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002db1:	31 c9                	xor    ecx,ecx
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	89 f0                	mov    eax,esi
c0002db8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dbb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dbe:	e8 76 f5 ff ff       	call   c0002339 <move_window>
c0002dc3:	89 c1                	mov    ecx,eax
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 7f                	jne    c0002e48 <put_fat+0x18c>
c0002dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dcd:	01 db                	add    ebx,ebx
c0002dcf:	0f b7 d7             	movzx  edx,di
c0002dd2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ddc:	e8 ec ed ff ff       	call   c0001bcd <st_word>
c0002de1:	eb 53                	jmp    c0002e36 <put_fat+0x17a>
c0002de3:	31 c9                	xor    ecx,ecx
c0002de5:	c1 ea 07             	shr    edx,0x7
c0002de8:	89 f0                	mov    eax,esi
c0002dea:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ded:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002df0:	e8 44 f5 ff ff       	call   c0002339 <move_window>
c0002df5:	89 c1                	mov    ecx,eax
c0002df7:	85 c0                	test   eax,eax
c0002df9:	75 4d                	jne    c0002e48 <put_fat+0x18c>
c0002dfb:	c1 e3 02             	shl    ebx,0x2
c0002dfe:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e04:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e07:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e0b:	74 1c                	je     c0002e29 <put_fat+0x16d>
c0002e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e11:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e17:	89 d8                	mov    eax,ebx
c0002e19:	e8 4a ed ff ff       	call   c0001b68 <ld_dword>
c0002e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e22:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e27:	09 c7                	or     edi,eax
c0002e29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e2d:	89 fa                	mov    edx,edi
c0002e2f:	89 d8                	mov    eax,ebx
c0002e31:	e8 9b ed ff ff       	call   c0001bd1 <st_dword>
c0002e36:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e3e:	eb 08                	jmp    c0002e48 <put_fat+0x18c>
c0002e40:	b9 02 00 00 00       	mov    ecx,0x2
c0002e45:	89 c8                	mov    eax,ecx
c0002e47:	c3                   	ret    
c0002e48:	83 c4 1c             	add    esp,0x1c
c0002e4b:	89 c8                	mov    eax,ecx
c0002e4d:	5b                   	pop    ebx
c0002e4e:	5e                   	pop    esi
c0002e4f:	5f                   	pop    edi
c0002e50:	5d                   	pop    ebp
c0002e51:	c3                   	ret    

c0002e52 <fill_last_frag>:
c0002e52:	57                   	push   edi
c0002e53:	89 cf                	mov    edi,ecx
c0002e55:	56                   	push   esi
c0002e56:	89 d6                	mov    esi,edx
c0002e58:	53                   	push   ebx
c0002e59:	89 c3                	mov    ebx,eax
c0002e5b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	74 21                	je     c0002e83 <fill_last_frag+0x31>
c0002e62:	89 f9                	mov    ecx,edi
c0002e64:	83 f8 01             	cmp    eax,0x1
c0002e67:	76 05                	jbe    c0002e6e <fill_last_frag+0x1c>
c0002e69:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e6c:	29 c1                	sub    ecx,eax
c0002e6e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e71:	29 c2                	sub    edx,eax
c0002e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e75:	e8 42 fe ff ff       	call   c0002cbc <put_fat>
c0002e7a:	85 c0                	test   eax,eax
c0002e7c:	75 05                	jne    c0002e83 <fill_last_frag+0x31>
c0002e7e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e81:	eb d8                	jmp    c0002e5b <fill_last_frag+0x9>
c0002e83:	5b                   	pop    ebx
c0002e84:	5e                   	pop    esi
c0002e85:	5f                   	pop    edi
c0002e86:	c3                   	ret    

c0002e87 <fill_first_frag>:
c0002e87:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e8b:	75 2d                	jne    c0002eba <fill_first_frag+0x33>
c0002e8d:	57                   	push   edi
c0002e8e:	56                   	push   esi
c0002e8f:	53                   	push   ebx
c0002e90:	89 c3                	mov    ebx,eax
c0002e92:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e95:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e98:	01 d7                	add    edi,edx
c0002e9a:	39 fa                	cmp    edx,edi
c0002e9c:	74 14                	je     c0002eb2 <fill_first_frag+0x2b>
c0002e9e:	8d 72 01             	lea    esi,[edx+0x1]
c0002ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ea3:	89 f1                	mov    ecx,esi
c0002ea5:	e8 12 fe ff ff       	call   c0002cbc <put_fat>
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	85 c0                	test   eax,eax
c0002eae:	74 ea                	je     c0002e9a <fill_first_frag+0x13>
c0002eb0:	eb 0b                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eb2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eb6:	31 c0                	xor    eax,eax
c0002eb8:	eb 03                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eba:	31 c0                	xor    eax,eax
c0002ebc:	c3                   	ret    
c0002ebd:	5b                   	pop    ebx
c0002ebe:	5e                   	pop    esi
c0002ebf:	5f                   	pop    edi
c0002ec0:	c3                   	ret    

c0002ec1 <get_fat>:
c0002ec1:	83 fa 01             	cmp    edx,0x1
c0002ec4:	0f 86 db 01 00 00    	jbe    c00030a5 <get_fat+0x1e4>
c0002eca:	55                   	push   ebp
c0002ecb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002edb:	0f 86 cc 01 00 00    	jbe    c00030ad <get_fat+0x1ec>
c0002ee1:	89 c3                	mov    ebx,eax
c0002ee3:	89 d6                	mov    esi,edx
c0002ee5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ee7:	3c 02                	cmp    al,0x2
c0002ee9:	0f 84 99 00 00 00    	je     c0002f88 <get_fat+0xc7>
c0002eef:	77 09                	ja     c0002efa <get_fat+0x39>
c0002ef1:	fe c8                	dec    al
c0002ef3:	74 1a                	je     c0002f0f <get_fat+0x4e>
c0002ef5:	e9 b3 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002efa:	3c 03                	cmp    al,0x3
c0002efc:	0f 84 b5 00 00 00    	je     c0002fb7 <get_fat+0xf6>
c0002f02:	3c 04                	cmp    al,0x4
c0002f04:	0f 84 e3 00 00 00    	je     c0002fed <get_fat+0x12c>
c0002f0a:	e9 9e 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f0f:	89 d3                	mov    ebx,edx
c0002f11:	31 c9                	xor    ecx,ecx
c0002f13:	d1 eb                	shr    ebx,1
c0002f15:	89 f8                	mov    eax,edi
c0002f17:	01 d3                	add    ebx,edx
c0002f19:	89 da                	mov    edx,ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f21:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f24:	e8 10 f4 ff ff       	call   c0002339 <move_window>
c0002f29:	85 c0                	test   eax,eax
c0002f2b:	74 08                	je     c0002f35 <get_fat+0x74>
c0002f2d:	83 c9 ff             	or     ecx,0xffffffff
c0002f30:	e9 78 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f35:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f38:	31 c9                	xor    ecx,ecx
c0002f3a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f40:	89 ea                	mov    edx,ebp
c0002f42:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f46:	c1 ea 09             	shr    edx,0x9
c0002f49:	89 f8                	mov    eax,edi
c0002f4b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f4e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f51:	e8 e3 f3 ff ff       	call   c0002339 <move_window>
c0002f56:	85 c0                	test   eax,eax
c0002f58:	75 d3                	jne    c0002f2d <get_fat+0x6c>
c0002f5a:	0f b6 c3             	movzx  eax,bl
c0002f5d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f63:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f68:	c1 e3 08             	shl    ebx,0x8
c0002f6b:	09 c3                	or     ebx,eax
c0002f6d:	89 d9                	mov    ecx,ebx
c0002f6f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f75:	83 e6 01             	and    esi,0x1
c0002f78:	0f 84 2f 01 00 00    	je     c00030ad <get_fat+0x1ec>
c0002f7e:	89 d9                	mov    ecx,ebx
c0002f80:	c1 e9 04             	shr    ecx,0x4
c0002f83:	e9 25 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f88:	31 c9                	xor    ecx,ecx
c0002f8a:	c1 ea 08             	shr    edx,0x8
c0002f8d:	89 f8                	mov    eax,edi
c0002f8f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f92:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f95:	e8 9f f3 ff ff       	call   c0002339 <move_window>
c0002f9a:	85 c0                	test   eax,eax
c0002f9c:	75 8f                	jne    c0002f2d <get_fat+0x6c>
c0002f9e:	01 f6                	add    esi,esi
c0002fa0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fa6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002faa:	e8 ac eb ff ff       	call   c0001b5b <ld_word>
c0002faf:	0f b7 c8             	movzx  ecx,ax
c0002fb2:	e9 f6 00 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002fb7:	31 c9                	xor    ecx,ecx
c0002fb9:	c1 ea 07             	shr    edx,0x7
c0002fbc:	89 f8                	mov    eax,edi
c0002fbe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fc1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fc4:	e8 70 f3 ff ff       	call   c0002339 <move_window>
c0002fc9:	85 c0                	test   eax,eax
c0002fcb:	0f 85 5c ff ff ff    	jne    c0002f2d <get_fat+0x6c>
c0002fd1:	c1 e6 02             	shl    esi,0x2
c0002fd4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fda:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fde:	e8 85 eb ff ff       	call   c0001b68 <ld_dword>
c0002fe3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe8:	e9 b4 00 00 00       	jmp    c00030a1 <get_fat+0x1e0>
c0002fed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ff0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff3:	89 d1                	mov    ecx,edx
c0002ff5:	09 c1                	or     ecx,eax
c0002ff7:	74 06                	je     c0002fff <get_fat+0x13e>
c0002ff9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ffd:	75 0f                	jne    c000300e <get_fat+0x14d>
c0002fff:	b9 01 00 00 00       	mov    ecx,0x1
c0003004:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003008:	0f 85 9f 00 00 00    	jne    c00030ad <get_fat+0x1ec>
c000300e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003012:	89 f5                	mov    ebp,esi
c0003014:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003019:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000301c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000301f:	80 f9 02             	cmp    cl,0x2
c0003022:	75 35                	jne    c0003059 <get_fat+0x198>
c0003024:	83 c0 ff             	add    eax,0xffffffff
c0003027:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000302c:	83 d2 ff             	adc    edx,0xffffffff
c000302f:	31 db                	xor    ebx,ebx
c0003031:	0f ac d0 09          	shrd   eax,edx,0x9
c0003035:	53                   	push   ebx
c0003036:	c1 ea 09             	shr    edx,0x9
c0003039:	51                   	push   ecx
c000303a:	52                   	push   edx
c000303b:	50                   	push   eax
c000303c:	e8 df fd 01 00       	call   c0022e20 <__udivdi3>
c0003041:	83 c4 10             	add    esp,0x10
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	39 c5                	cmp    ebp,eax
c000304b:	77 60                	ja     c00030ad <get_fat+0x1ec>
c000304d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003052:	74 59                	je     c00030ad <get_fat+0x1ec>
c0003054:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003057:	eb 54                	jmp    c00030ad <get_fat+0x1ec>
c0003059:	80 f9 03             	cmp    cl,0x3
c000305c:	75 05                	jne    c0003063 <get_fat+0x1a2>
c000305e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003061:	77 f1                	ja     c0003054 <get_fat+0x193>
c0003063:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003068:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000306c:	75 3f                	jne    c00030ad <get_fat+0x1ec>
c000306e:	31 c9                	xor    ecx,ecx
c0003070:	89 f2                	mov    edx,esi
c0003072:	89 f8                	mov    eax,edi
c0003074:	c1 ea 07             	shr    edx,0x7
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 b7 f2 ff ff       	call   c0002339 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	0f 85 a3 fe ff ff    	jne    c0002f2d <get_fat+0x6c>
c000308a:	c1 e6 02             	shl    esi,0x2
c000308d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003093:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003097:	e8 cc ea ff ff       	call   c0001b68 <ld_dword>
c000309c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030a1:	89 c1                	mov    ecx,eax
c00030a3:	eb 08                	jmp    c00030ad <get_fat+0x1ec>
c00030a5:	b9 01 00 00 00       	mov    ecx,0x1
c00030aa:	89 c8                	mov    eax,ecx
c00030ac:	c3                   	ret    
c00030ad:	83 c4 1c             	add    esp,0x1c
c00030b0:	89 c8                	mov    eax,ecx
c00030b2:	5b                   	pop    ebx
c00030b3:	5e                   	pop    esi
c00030b4:	5f                   	pop    edi
c00030b5:	5d                   	pop    ebp
c00030b6:	c3                   	ret    

c00030b7 <dir_sdi>:
c00030b7:	55                   	push   ebp
c00030b8:	57                   	push   edi
c00030b9:	56                   	push   esi
c00030ba:	53                   	push   ebx
c00030bb:	89 c3                	mov    ebx,eax
c00030bd:	83 ec 1c             	sub    esp,0x1c
c00030c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030c2:	31 c0                	xor    eax,eax
c00030c4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030c7:	0f 94 c0             	sete   al
c00030ca:	48                   	dec    eax
c00030cb:	25 00 00 20 f0       	and    eax,0xf0200000
c00030d0:	05 00 00 00 10       	add    eax,0x10000000
c00030d5:	39 d0                	cmp    eax,edx
c00030d7:	77 0a                	ja     c00030e3 <dir_sdi+0x2c>
c00030d9:	b8 02 00 00 00       	mov    eax,0x2
c00030de:	e9 c4 00 00 00       	jmp    c00031a7 <dir_sdi+0xf0>
c00030e3:	89 d6                	mov    esi,edx
c00030e5:	f6 c2 1f             	test   dl,0x1f
c00030e8:	75 ef                	jne    c00030d9 <dir_sdi+0x22>
c00030ea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030ed:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030f0:	85 c9                	test   ecx,ecx
c00030f2:	75 2d                	jne    c0003121 <dir_sdi+0x6a>
c00030f4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030f7:	77 1b                	ja     c0003114 <dir_sdi+0x5d>
c00030f9:	89 f2                	mov    edx,esi
c00030fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030ff:	c1 ea 05             	shr    edx,0x5
c0003102:	39 c2                	cmp    edx,eax
c0003104:	73 d3                	jae    c00030d9 <dir_sdi+0x22>
c0003106:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003109:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000310c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000310f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003112:	eb 4b                	jmp    c000315f <dir_sdi+0xa8>
c0003114:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003117:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000311b:	85 c0                	test   eax,eax
c000311d:	74 da                	je     c00030f9 <dir_sdi+0x42>
c000311f:	89 c1                	mov    ecx,eax
c0003121:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003125:	c1 e5 09             	shl    ebp,0x9
c0003128:	89 ca                	mov    edx,ecx
c000312a:	39 ee                	cmp    esi,ebp
c000312c:	72 1c                	jb     c000314a <dir_sdi+0x93>
c000312e:	89 d8                	mov    eax,ebx
c0003130:	e8 8c fd ff ff       	call   c0002ec1 <get_fat>
c0003135:	89 c1                	mov    ecx,eax
c0003137:	83 f8 ff             	cmp    eax,0xffffffff
c000313a:	74 66                	je     c00031a2 <dir_sdi+0xeb>
c000313c:	83 f8 01             	cmp    eax,0x1
c000313f:	76 98                	jbe    c00030d9 <dir_sdi+0x22>
c0003141:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003144:	76 93                	jbe    c00030d9 <dir_sdi+0x22>
c0003146:	29 ee                	sub    esi,ebp
c0003148:	eb de                	jmp    c0003128 <dir_sdi+0x71>
c000314a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000314e:	89 f8                	mov    eax,edi
c0003150:	e8 9f ec ff ff       	call   c0001df4 <clst2sect>
c0003155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003159:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000315c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000315f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003162:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003165:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003168:	89 d1                	mov    ecx,edx
c000316a:	09 c1                	or     ecx,eax
c000316c:	0f 84 67 ff ff ff    	je     c00030d9 <dir_sdi+0x22>
c0003172:	89 f1                	mov    ecx,esi
c0003174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000317c:	c1 e9 09             	shr    ecx,0x9
c000317f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003183:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003187:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000318b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000318e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003194:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003197:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000319e:	31 c0                	xor    eax,eax
c00031a0:	eb 05                	jmp    c00031a7 <dir_sdi+0xf0>
c00031a2:	b8 01 00 00 00       	mov    eax,0x1
c00031a7:	83 c4 1c             	add    esp,0x1c
c00031aa:	5b                   	pop    ebx
c00031ab:	5e                   	pop    esi
c00031ac:	5f                   	pop    edi
c00031ad:	5d                   	pop    ebp
c00031ae:	c3                   	ret    

c00031af <create_chain>:
c00031af:	55                   	push   ebp
c00031b0:	89 c5                	mov    ebp,eax
c00031b2:	57                   	push   edi
c00031b3:	56                   	push   esi
c00031b4:	53                   	push   ebx
c00031b5:	83 ec 1c             	sub    esp,0x1c
c00031b8:	85 d2                	test   edx,edx
c00031ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	75 0e                	jne    c00031d0 <create_chain+0x21>
c00031c2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031c5:	85 ff                	test   edi,edi
c00031c7:	74 39                	je     c0003202 <create_chain+0x53>
c00031c9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031cc:	77 39                	ja     c0003207 <create_chain+0x58>
c00031ce:	eb 32                	jmp    c0003202 <create_chain+0x53>
c00031d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d4:	e8 e8 fc ff ff       	call   c0002ec1 <get_fat>
c00031d9:	89 c3                	mov    ebx,eax
c00031db:	83 f8 01             	cmp    eax,0x1
c00031de:	77 0a                	ja     c00031ea <create_chain+0x3b>
c00031e0:	bb 01 00 00 00       	mov    ebx,0x1
c00031e5:	e9 ba 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c00031ea:	83 f8 ff             	cmp    eax,0xffffffff
c00031ed:	0f 84 62 01 00 00    	je     c0003355 <create_chain+0x1a6>
c00031f3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031f6:	0f 87 a8 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c00031fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003200:	eb 05                	jmp    c0003207 <create_chain+0x58>
c0003202:	bf 01 00 00 00       	mov    edi,0x1
c0003207:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000320b:	75 07                	jne    c0003214 <create_chain+0x65>
c000320d:	31 db                	xor    ebx,ebx
c000320f:	e9 90 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c0003214:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003217:	75 74                	jne    c000328d <create_chain+0xde>
c0003219:	b9 01 00 00 00       	mov    ecx,0x1
c000321e:	89 fa                	mov    edx,edi
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 2d f9 ff ff       	call   c0002b54 <find_bitmap>
c0003227:	89 c3                	mov    ebx,eax
c0003229:	8d 40 ff             	lea    eax,[eax-0x1]
c000322c:	83 f8 fd             	cmp    eax,0xfffffffd
c000322f:	0f 87 6f 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c0003235:	83 ec 0c             	sub    esp,0xc
c0003238:	b9 01 00 00 00       	mov    ecx,0x1
c000323d:	6a 01                	push   0x1
c000323f:	89 da                	mov    edx,ebx
c0003241:	89 f0                	mov    eax,esi
c0003243:	e8 bf f9 ff ff       	call   c0002c07 <change_bitmap>
c0003248:	83 c4 10             	add    esp,0x10
c000324b:	83 f8 02             	cmp    eax,0x2
c000324e:	74 90                	je     c00031e0 <create_chain+0x31>
c0003250:	83 f8 01             	cmp    eax,0x1
c0003253:	0f 84 fc 00 00 00    	je     c0003355 <create_chain+0x1a6>
c0003259:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000325e:	75 09                	jne    c0003269 <create_chain+0xba>
c0003260:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003264:	e9 0c 01 00 00       	jmp    c0003375 <create_chain+0x1c6>
c0003269:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000326d:	0f 85 e7 00 00 00    	jne    c000335a <create_chain+0x1ab>
c0003273:	8d 57 01             	lea    edx,[edi+0x1]
c0003276:	39 da                	cmp    edx,ebx
c0003278:	0f 84 f7 00 00 00    	je     c0003375 <create_chain+0x1c6>
c000327e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003281:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003285:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003288:	e9 cd 00 00 00       	jmp    c000335a <create_chain+0x1ab>
c000328d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003291:	75 41                	jne    c00032d4 <create_chain+0x125>
c0003293:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003296:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003299:	77 05                	ja     c00032a0 <create_chain+0xf1>
c000329b:	bb 02 00 00 00       	mov    ebx,0x2
c00032a0:	89 da                	mov    edx,ebx
c00032a2:	89 e8                	mov    eax,ebp
c00032a4:	e8 18 fc ff ff       	call   c0002ec1 <get_fat>
c00032a9:	83 f8 01             	cmp    eax,0x1
c00032ac:	0f 84 2e ff ff ff    	je     c00031e0 <create_chain+0x31>
c00032b2:	83 f8 ff             	cmp    eax,0xffffffff
c00032b5:	0f 84 9a 00 00 00    	je     c0003355 <create_chain+0x1a6>
c00032bb:	85 c0                	test   eax,eax
c00032bd:	74 11                	je     c00032d0 <create_chain+0x121>
c00032bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	76 0d                	jbe    c00032d4 <create_chain+0x125>
c00032c7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032ca:	76 08                	jbe    c00032d4 <create_chain+0x125>
c00032cc:	89 c7                	mov    edi,eax
c00032ce:	eb 04                	jmp    c00032d4 <create_chain+0x125>
c00032d0:	85 db                	test   ebx,ebx
c00032d2:	75 38                	jne    c000330c <create_chain+0x15d>
c00032d4:	89 fb                	mov    ebx,edi
c00032d6:	43                   	inc    ebx
c00032d7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032da:	77 0e                	ja     c00032ea <create_chain+0x13b>
c00032dc:	83 ff 01             	cmp    edi,0x1
c00032df:	0f 86 28 ff ff ff    	jbe    c000320d <create_chain+0x5e>
c00032e5:	bb 02 00 00 00       	mov    ebx,0x2
c00032ea:	89 da                	mov    edx,ebx
c00032ec:	89 e8                	mov    eax,ebp
c00032ee:	e8 ce fb ff ff       	call   c0002ec1 <get_fat>
c00032f3:	85 c0                	test   eax,eax
c00032f5:	74 15                	je     c000330c <create_chain+0x15d>
c00032f7:	83 f8 01             	cmp    eax,0x1
c00032fa:	0f 84 e0 fe ff ff    	je     c00031e0 <create_chain+0x31>
c0003300:	40                   	inc    eax
c0003301:	74 52                	je     c0003355 <create_chain+0x1a6>
c0003303:	39 fb                	cmp    ebx,edi
c0003305:	75 cf                	jne    c00032d6 <create_chain+0x127>
c0003307:	e9 01 ff ff ff       	jmp    c000320d <create_chain+0x5e>
c000330c:	83 c9 ff             	or     ecx,0xffffffff
c000330f:	89 da                	mov    edx,ebx
c0003311:	89 f0                	mov    eax,esi
c0003313:	e8 a4 f9 ff ff       	call   c0002cbc <put_fat>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 32                	jne    c000334e <create_chain+0x19f>
c000331c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003321:	74 11                	je     c0003334 <create_chain+0x185>
c0003323:	89 d9                	mov    ecx,ebx
c0003325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 8c f9 ff ff       	call   c0002cbc <put_fat>
c0003330:	85 c0                	test   eax,eax
c0003332:	75 1a                	jne    c000334e <create_chain+0x19f>
c0003334:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003337:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000333a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000333d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003340:	39 d0                	cmp    eax,edx
c0003342:	77 04                	ja     c0003348 <create_chain+0x199>
c0003344:	48                   	dec    eax
c0003345:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003348:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000334c:	eb 56                	jmp    c00033a4 <create_chain+0x1f5>
c000334e:	48                   	dec    eax
c000334f:	0f 85 8b fe ff ff    	jne    c00031e0 <create_chain+0x31>
c0003355:	83 cb ff             	or     ebx,0xffffffff
c0003358:	eb 4a                	jmp    c00033a4 <create_chain+0x1f5>
c000335a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003361:	41                   	inc    ecx
c0003362:	39 d9                	cmp    ecx,ebx
c0003364:	75 19                	jne    c000337f <create_chain+0x1d0>
c0003366:	b9 02 00 00 00       	mov    ecx,0x2
c000336b:	85 d2                	test   edx,edx
c000336d:	74 03                	je     c0003372 <create_chain+0x1c3>
c000336f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003372:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003375:	85 c0                	test   eax,eax
c0003377:	0f 85 63 fe ff ff    	jne    c00031e0 <create_chain+0x31>
c000337d:	eb b5                	jmp    c0003334 <create_chain+0x185>
c000337f:	85 d2                	test   edx,edx
c0003381:	75 07                	jne    c000338a <create_chain+0x1db>
c0003383:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000338a:	89 d9                	mov    ecx,ebx
c000338c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003390:	89 e8                	mov    eax,ebp
c0003392:	e8 bb fa ff ff       	call   c0002e52 <fill_last_frag>
c0003397:	85 c0                	test   eax,eax
c0003399:	75 b3                	jne    c000334e <create_chain+0x19f>
c000339b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033a2:	eb 90                	jmp    c0003334 <create_chain+0x185>
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	89 d8                	mov    eax,ebx
c00033a9:	5b                   	pop    ebx
c00033aa:	5e                   	pop    esi
c00033ab:	5f                   	pop    edi
c00033ac:	5d                   	pop    ebp
c00033ad:	c3                   	ret    

c00033ae <remove_chain>:
c00033ae:	55                   	push   ebp
c00033af:	57                   	push   edi
c00033b0:	56                   	push   esi
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	83 fa 01             	cmp    edx,0x1
c00033b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033bc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033be:	77 0a                	ja     c00033ca <remove_chain+0x1c>
c00033c0:	b8 02 00 00 00       	mov    eax,0x2
c00033c5:	e9 24 01 00 00       	jmp    c00034ee <remove_chain+0x140>
c00033ca:	89 d6                	mov    esi,edx
c00033cc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033cf:	76 ef                	jbe    c00033c0 <remove_chain+0x12>
c00033d1:	89 c7                	mov    edi,eax
c00033d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d8:	75 06                	jne    c00033e0 <remove_chain+0x32>
c00033da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033de:	eb 54                	jmp    c0003434 <remove_chain+0x86>
c00033e0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033e3:	75 06                	jne    c00033eb <remove_chain+0x3d>
c00033e5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e9:	74 ef                	je     c00033da <remove_chain+0x2c>
c00033eb:	83 c9 ff             	or     ecx,0xffffffff
c00033ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f2:	89 d8                	mov    eax,ebx
c00033f4:	e8 c3 f8 ff ff       	call   c0002cbc <put_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 dd                	je     c00033da <remove_chain+0x2c>
c00033fd:	e9 ec 00 00 00       	jmp    c00034ee <remove_chain+0x140>
c0003402:	83 f8 01             	cmp    eax,0x1
c0003405:	74 b9                	je     c00033c0 <remove_chain+0x12>
c0003407:	83 f8 ff             	cmp    eax,0xffffffff
c000340a:	74 6d                	je     c0003479 <remove_chain+0xcb>
c000340c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000340f:	75 6f                	jne    c0003480 <remove_chain+0xd2>
c0003411:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003414:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003417:	8d 51 fe             	lea    edx,[ecx-0x2]
c000341a:	39 d0                	cmp    eax,edx
c000341c:	73 08                	jae    c0003426 <remove_chain+0x78>
c000341e:	40                   	inc    eax
c000341f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003423:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003426:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003429:	39 e9                	cmp    ecx,ebp
c000342b:	75 64                	jne    c0003491 <remove_chain+0xe3>
c000342d:	89 ee                	mov    esi,ebp
c000342f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003432:	76 0f                	jbe    c0003443 <remove_chain+0x95>
c0003434:	89 f2                	mov    edx,esi
c0003436:	89 f8                	mov    eax,edi
c0003438:	e8 84 fa ff ff       	call   c0002ec1 <get_fat>
c000343d:	89 c5                	mov    ebp,eax
c000343f:	85 c0                	test   eax,eax
c0003441:	75 bf                	jne    c0003402 <remove_chain+0x54>
c0003443:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003446:	0f 85 a0 00 00 00    	jne    c00034ec <remove_chain+0x13e>
c000344c:	eb 6c                	jmp    c00034ba <remove_chain+0x10c>
c000344e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003451:	84 c0                	test   al,al
c0003453:	75 7d                	jne    c00034d2 <remove_chain+0x124>
c0003455:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003458:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000345c:	0f 84 86 00 00 00    	je     c00034e8 <remove_chain+0x13a>
c0003462:	89 da                	mov    edx,ebx
c0003464:	89 f8                	mov    eax,edi
c0003466:	e8 56 fa ff ff       	call   c0002ec1 <get_fat>
c000346b:	83 f8 01             	cmp    eax,0x1
c000346e:	0f 86 4c ff ff ff    	jbe    c00033c0 <remove_chain+0x12>
c0003474:	83 f8 ff             	cmp    eax,0xffffffff
c0003477:	75 4e                	jne    c00034c7 <remove_chain+0x119>
c0003479:	b8 01 00 00 00       	mov    eax,0x1
c000347e:	eb 6e                	jmp    c00034ee <remove_chain+0x140>
c0003480:	31 c9                	xor    ecx,ecx
c0003482:	89 f2                	mov    edx,esi
c0003484:	89 d8                	mov    eax,ebx
c0003486:	e8 31 f8 ff ff       	call   c0002cbc <put_fat>
c000348b:	85 c0                	test   eax,eax
c000348d:	74 82                	je     c0003411 <remove_chain+0x63>
c000348f:	eb 5d                	jmp    c00034ee <remove_chain+0x140>
c0003491:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003494:	75 1b                	jne    c00034b1 <remove_chain+0x103>
c0003496:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000349a:	89 d8                	mov    eax,ebx
c000349c:	83 ec 0c             	sub    esp,0xc
c000349f:	6a 00                	push   0x0
c00034a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034a5:	e8 5d f7 ff ff       	call   c0002c07 <change_bitmap>
c00034aa:	83 c4 10             	add    esp,0x10
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 3d                	jne    c00034ee <remove_chain+0x140>
c00034b1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034b5:	e9 73 ff ff ff       	jmp    c000342d <remove_chain+0x7f>
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 8d                	jne    c000344e <remove_chain+0xa0>
c00034c1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034c5:	eb 25                	jmp    c00034ec <remove_chain+0x13e>
c00034c7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034ca:	89 c3                	mov    ebx,eax
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	74 88                	je     c0003458 <remove_chain+0xaa>
c00034d0:	eb 1a                	jmp    c00034ec <remove_chain+0x13e>
c00034d2:	3c 03                	cmp    al,0x3
c00034d4:	75 16                	jne    c00034ec <remove_chain+0x13e>
c00034d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034dd:	77 0d                	ja     c00034ec <remove_chain+0x13e>
c00034df:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034e2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034e6:	72 04                	jb     c00034ec <remove_chain+0x13e>
c00034e8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034ec:	31 c0                	xor    eax,eax
c00034ee:	83 c4 1c             	add    esp,0x1c
c00034f1:	5b                   	pop    ebx
c00034f2:	5e                   	pop    esi
c00034f3:	5f                   	pop    edi
c00034f4:	5d                   	pop    ebp
c00034f5:	c3                   	ret    

c00034f6 <dir_clear>:
c00034f6:	55                   	push   ebp
c00034f7:	57                   	push   edi
c00034f8:	56                   	push   esi
c00034f9:	89 c6                	mov    esi,eax
c00034fb:	53                   	push   ebx
c00034fc:	83 ec 1c             	sub    esp,0x1c
c00034ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003503:	e8 9d ed ff ff       	call   c00022a5 <sync_window>
c0003508:	85 c0                	test   eax,eax
c000350a:	0f 85 de 00 00 00    	jne    c00035ee <dir_clear+0xf8>
c0003510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003514:	89 f0                	mov    eax,esi
c0003516:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003519:	e8 d6 e8 ff ff       	call   c0001df4 <clst2sect>
c000351e:	b9 00 02 00 00       	mov    ecx,0x200
c0003523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000352e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003531:	89 e8                	mov    eax,ebp
c0003533:	31 d2                	xor    edx,edx
c0003535:	e8 b5 e6 ff ff       	call   c0001bef <mem_set>
c000353a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000353e:	c1 e3 09             	shl    ebx,0x9
c0003541:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003547:	76 1f                	jbe    c0003568 <dir_clear+0x72>
c0003549:	bb 00 80 00 00       	mov    ebx,0x8000
c000354e:	eb 18                	jmp    c0003568 <dir_clear+0x72>
c0003550:	83 ec 0c             	sub    esp,0xc
c0003553:	53                   	push   ebx
c0003554:	e8 6b 50 00 00       	call   c00085c4 <ff_memalloc>
c0003559:	83 c4 10             	add    esp,0x10
c000355c:	89 c7                	mov    edi,eax
c000355e:	85 c0                	test   eax,eax
c0003560:	0f 85 8f 00 00 00    	jne    c00035f5 <dir_clear+0xff>
c0003566:	d1 eb                	shr    ebx,1
c0003568:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000356e:	77 e0                	ja     c0003550 <dir_clear+0x5a>
c0003570:	31 db                	xor    ebx,ebx
c0003572:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003576:	39 d8                	cmp    eax,ebx
c0003578:	76 66                	jbe    c00035e0 <dir_clear+0xea>
c000357a:	83 ec 0c             	sub    esp,0xc
c000357d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003581:	6a 01                	push   0x1
c0003583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000358b:	55                   	push   ebp
c000358c:	50                   	push   eax
c000358d:	e8 94 e5 ff ff       	call   c0001b26 <disk_write>
c0003592:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003597:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000359c:	83 c4 20             	add    esp,0x20
c000359f:	85 c0                	test   eax,eax
c00035a1:	75 3d                	jne    c00035e0 <dir_clear+0xea>
c00035a3:	43                   	inc    ebx
c00035a4:	eb cc                	jmp    c0003572 <dir_clear+0x7c>
c00035a6:	83 ec 0c             	sub    esp,0xc
c00035a9:	31 d2                	xor    edx,edx
c00035ab:	55                   	push   ebp
c00035ac:	89 d8                	mov    eax,ebx
c00035ae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035b2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035b6:	52                   	push   edx
c00035b7:	50                   	push   eax
c00035b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035bc:	57                   	push   edi
c00035bd:	50                   	push   eax
c00035be:	e8 63 e5 ff ff       	call   c0001b26 <disk_write>
c00035c3:	83 c4 20             	add    esp,0x20
c00035c6:	85 c0                	test   eax,eax
c00035c8:	75 0a                	jne    c00035d4 <dir_clear+0xde>
c00035ca:	01 eb                	add    ebx,ebp
c00035cc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035d0:	39 d8                	cmp    eax,ebx
c00035d2:	77 d2                	ja     c00035a6 <dir_clear+0xb0>
c00035d4:	83 ec 0c             	sub    esp,0xc
c00035d7:	57                   	push   edi
c00035d8:	e8 ff 4f 00 00       	call   c00085dc <ff_memfree>
c00035dd:	83 c4 10             	add    esp,0x10
c00035e0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e4:	39 d8                	cmp    eax,ebx
c00035e6:	0f 95 c0             	setne  al
c00035e9:	0f b6 c0             	movzx  eax,al
c00035ec:	eb 19                	jmp    c0003607 <dir_clear+0x111>
c00035ee:	b8 01 00 00 00       	mov    eax,0x1
c00035f3:	eb 12                	jmp    c0003607 <dir_clear+0x111>
c00035f5:	89 d9                	mov    ecx,ebx
c00035f7:	31 d2                	xor    edx,edx
c00035f9:	c1 eb 09             	shr    ebx,0x9
c00035fc:	e8 ee e5 ff ff       	call   c0001bef <mem_set>
c0003601:	89 dd                	mov    ebp,ebx
c0003603:	31 db                	xor    ebx,ebx
c0003605:	eb c5                	jmp    c00035cc <dir_clear+0xd6>
c0003607:	83 c4 1c             	add    esp,0x1c
c000360a:	5b                   	pop    ebx
c000360b:	5e                   	pop    esi
c000360c:	5f                   	pop    edi
c000360d:	5d                   	pop    ebp
c000360e:	c3                   	ret    

c000360f <dir_next>:
c000360f:	55                   	push   ebp
c0003610:	57                   	push   edi
c0003611:	56                   	push   esi
c0003612:	53                   	push   ebx
c0003613:	89 c3                	mov    ebx,eax
c0003615:	83 ec 1c             	sub    esp,0x1c
c0003618:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003621:	8d 78 20             	lea    edi,[eax+0x20]
c0003624:	31 c0                	xor    eax,eax
c0003626:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000362a:	0f 94 c0             	sete   al
c000362d:	48                   	dec    eax
c000362e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003633:	05 00 00 00 10       	add    eax,0x10000000
c0003638:	39 f8                	cmp    eax,edi
c000363a:	77 0e                	ja     c000364a <dir_next+0x3b>
c000363c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003643:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000364a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000364d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003650:	b8 04 00 00 00       	mov    eax,0x4
c0003655:	89 ce                	mov    esi,ecx
c0003657:	09 d6                	or     esi,edx
c0003659:	0f 84 da 00 00 00    	je     c0003739 <dir_next+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	25 ff 01 00 00       	and    eax,0x1ff
c0003666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000366a:	0f 85 b9 00 00 00    	jne    c0003729 <dir_next+0x11a>
c0003670:	83 c2 01             	add    edx,0x1
c0003673:	83 d1 00             	adc    ecx,0x0
c0003676:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003679:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000367c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000367f:	85 d2                	test   edx,edx
c0003681:	75 29                	jne    c00036ac <dir_next+0x9d>
c0003683:	89 fa                	mov    edx,edi
c0003685:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003689:	c1 ea 05             	shr    edx,0x5
c000368c:	39 c2                	cmp    edx,eax
c000368e:	0f 82 95 00 00 00    	jb     c0003729 <dir_next+0x11a>
c0003694:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000369b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036a2:	b8 04 00 00 00       	mov    eax,0x4
c00036a7:	e9 8d 00 00 00       	jmp    c0003739 <dir_next+0x12a>
c00036ac:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036b0:	89 f9                	mov    ecx,edi
c00036b2:	48                   	dec    eax
c00036b3:	c1 e9 09             	shr    ecx,0x9
c00036b6:	85 c8                	test   eax,ecx
c00036b8:	75 6f                	jne    c0003729 <dir_next+0x11a>
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	e8 00 f8 ff ff       	call   c0002ec1 <get_fat>
c00036c1:	89 c6                	mov    esi,eax
c00036c3:	83 f8 01             	cmp    eax,0x1
c00036c6:	77 07                	ja     c00036cf <dir_next+0xc0>
c00036c8:	b8 02 00 00 00       	mov    eax,0x2
c00036cd:	eb 6a                	jmp    c0003739 <dir_next+0x12a>
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	75 07                	jne    c00036db <dir_next+0xcc>
c00036d4:	b8 01 00 00 00       	mov    eax,0x1
c00036d9:	eb 5e                	jmp    c0003739 <dir_next+0x12a>
c00036db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036de:	77 37                	ja     c0003717 <dir_next+0x108>
c00036e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036e5:	74 ad                	je     c0003694 <dir_next+0x85>
c00036e7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	e8 be fa ff ff       	call   c00031af <create_chain>
c00036f1:	89 c6                	mov    esi,eax
c00036f3:	b8 07 00 00 00       	mov    eax,0x7
c00036f8:	85 f6                	test   esi,esi
c00036fa:	74 3d                	je     c0003739 <dir_next+0x12a>
c00036fc:	83 fe 01             	cmp    esi,0x1
c00036ff:	74 c7                	je     c00036c8 <dir_next+0xb9>
c0003701:	83 fe ff             	cmp    esi,0xffffffff
c0003704:	74 ce                	je     c00036d4 <dir_next+0xc5>
c0003706:	89 f2                	mov    edx,esi
c0003708:	89 e8                	mov    eax,ebp
c000370a:	e8 e7 fd ff ff       	call   c00034f6 <dir_clear>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 c1                	jne    c00036d4 <dir_next+0xc5>
c0003713:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003717:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000371a:	89 f2                	mov    edx,esi
c000371c:	89 e8                	mov    eax,ebp
c000371e:	e8 d1 e6 ff ff       	call   c0001df4 <clst2sect>
c0003723:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003726:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000372d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003730:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003734:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003737:	31 c0                	xor    eax,eax
c0003739:	83 c4 1c             	add    esp,0x1c
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <load_xdir>:
c0003741:	55                   	push   ebp
c0003742:	57                   	push   edi
c0003743:	56                   	push   esi
c0003744:	89 c6                	mov    esi,eax
c0003746:	53                   	push   ebx
c0003747:	83 ec 1c             	sub    esp,0x1c
c000374a:	8b 00                	mov    eax,DWORD PTR [eax]
c000374c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000374f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003752:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003755:	e8 df eb ff ff       	call   c0002339 <move_window>
c000375a:	89 c3                	mov    ebx,eax
c000375c:	85 c0                	test   eax,eax
c000375e:	0f 85 0c 01 00 00    	jne    c0003870 <load_xdir+0x12f>
c0003764:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003767:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000376a:	0f 85 fb 00 00 00    	jne    c000386b <load_xdir+0x12a>
c0003770:	89 f8                	mov    eax,edi
c0003772:	b9 20 00 00 00       	mov    ecx,0x20
c0003777:	e8 5e e4 ff ff       	call   c0001bda <mem_cpy>
c000377c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003780:	40                   	inc    eax
c0003781:	c1 e0 05             	shl    eax,0x5
c0003784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003788:	83 e8 60             	sub    eax,0x60
c000378b:	3d 00 02 00 00       	cmp    eax,0x200
c0003790:	0f 87 d5 00 00 00    	ja     c000386b <load_xdir+0x12a>
c0003796:	31 d2                	xor    edx,edx
c0003798:	89 f0                	mov    eax,esi
c000379a:	e8 70 fe ff ff       	call   c000360f <dir_next>
c000379f:	89 c3                	mov    ebx,eax
c00037a1:	83 f8 04             	cmp    eax,0x4
c00037a4:	0f 84 c1 00 00 00    	je     c000386b <load_xdir+0x12a>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	0f 85 be 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037b2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037b5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ba:	e8 7a eb ff ff       	call   c0002339 <move_window>
c00037bf:	89 c3                	mov    ebx,eax
c00037c1:	85 c0                	test   eax,eax
c00037c3:	0f 85 a7 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037c9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037cc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037cf:	0f 85 96 00 00 00    	jne    c000386b <load_xdir+0x12a>
c00037d5:	8d 47 20             	lea    eax,[edi+0x20]
c00037d8:	b9 20 00 00 00       	mov    ecx,0x20
c00037dd:	e8 f8 e3 ff ff       	call   c0001bda <mem_cpy>
c00037e2:	31 d2                	xor    edx,edx
c00037e4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037ed:	83 c0 2c             	add    eax,0x2c
c00037f0:	f7 f1                	div    ecx
c00037f2:	c1 e0 05             	shl    eax,0x5
c00037f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f9:	77 70                	ja     c000386b <load_xdir+0x12a>
c00037fb:	bd 40 00 00 00       	mov    ebp,0x40
c0003800:	31 d2                	xor    edx,edx
c0003802:	89 f0                	mov    eax,esi
c0003804:	e8 06 fe ff ff       	call   c000360f <dir_next>
c0003809:	89 c3                	mov    ebx,eax
c000380b:	83 f8 04             	cmp    eax,0x4
c000380e:	74 5b                	je     c000386b <load_xdir+0x12a>
c0003810:	85 c0                	test   eax,eax
c0003812:	75 5c                	jne    c0003870 <load_xdir+0x12f>
c0003814:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003817:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000381a:	8b 06                	mov    eax,DWORD PTR [esi]
c000381c:	e8 18 eb ff ff       	call   c0002339 <move_window>
c0003821:	89 c3                	mov    ebx,eax
c0003823:	85 c0                	test   eax,eax
c0003825:	75 49                	jne    c0003870 <load_xdir+0x12f>
c0003827:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000382a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000382d:	75 3c                	jne    c000386b <load_xdir+0x12a>
c000382f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003835:	77 0d                	ja     c0003844 <load_xdir+0x103>
c0003837:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000383a:	b9 20 00 00 00       	mov    ecx,0x20
c000383f:	e8 96 e3 ff ff       	call   c0001bda <mem_cpy>
c0003844:	83 c5 20             	add    ebp,0x20
c0003847:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000384b:	77 b3                	ja     c0003800 <load_xdir+0xbf>
c000384d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003853:	77 1b                	ja     c0003870 <load_xdir+0x12f>
c0003855:	89 f8                	mov    eax,edi
c0003857:	e8 cd e7 ff ff       	call   c0002029 <xdir_sum>
c000385c:	89 c1                	mov    ecx,eax
c000385e:	8d 47 02             	lea    eax,[edi+0x2]
c0003861:	e8 f5 e2 ff ff       	call   c0001b5b <ld_word>
c0003866:	66 39 c1             	cmp    cx,ax
c0003869:	74 05                	je     c0003870 <load_xdir+0x12f>
c000386b:	bb 02 00 00 00       	mov    ebx,0x2
c0003870:	83 c4 1c             	add    esp,0x1c
c0003873:	89 d8                	mov    eax,ebx
c0003875:	5b                   	pop    ebx
c0003876:	5e                   	pop    esi
c0003877:	5f                   	pop    edi
c0003878:	5d                   	pop    ebp
c0003879:	c3                   	ret    

c000387a <load_obj_xdir>:
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	83 ec 08             	sub    esp,0x8
c0003880:	8b 02                	mov    eax,DWORD PTR [edx]
c0003882:	89 03                	mov    DWORD PTR [ebx],eax
c0003884:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003887:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000388a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003890:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003893:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000389a:	30 c0                	xor    al,al
c000389c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038a6:	89 d8                	mov    eax,ebx
c00038a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038ab:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038ae:	e8 04 f8 ff ff       	call   c00030b7 <dir_sdi>
c00038b3:	85 c0                	test   eax,eax
c00038b5:	75 0b                	jne    c00038c2 <load_obj_xdir+0x48>
c00038b7:	89 d8                	mov    eax,ebx
c00038b9:	83 c4 08             	add    esp,0x8
c00038bc:	5b                   	pop    ebx
c00038bd:	e9 7f fe ff ff       	jmp    c0003741 <load_xdir>
c00038c2:	83 c4 08             	add    esp,0x8
c00038c5:	5b                   	pop    ebx
c00038c6:	c3                   	ret    

c00038c7 <dir_read>:
c00038c7:	55                   	push   ebp
c00038c8:	bd 04 00 00 00       	mov    ebp,0x4
c00038cd:	57                   	push   edi
c00038ce:	56                   	push   esi
c00038cf:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d4:	53                   	push   ebx
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 ec 1c             	sub    esp,0x1c
c00038da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038de:	8b 38                	mov    edi,DWORD PTR [eax]
c00038e0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038eb:	89 c8                	mov    eax,ecx
c00038ed:	09 d0                	or     eax,edx
c00038ef:	0f 84 25 01 00 00    	je     c0003a1a <dir_read+0x153>
c00038f5:	89 f8                	mov    eax,edi
c00038f7:	e8 3d ea ff ff       	call   c0002339 <move_window>
c00038fc:	89 c5                	mov    ebp,eax
c00038fe:	85 c0                	test   eax,eax
c0003900:	0f 85 23 01 00 00    	jne    c0003a29 <dir_read+0x162>
c0003906:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003909:	8a 0a                	mov    cl,BYTE PTR [edx]
c000390b:	84 c9                	test   cl,cl
c000390d:	0f 84 11 01 00 00    	je     c0003a24 <dir_read+0x15d>
c0003913:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003916:	75 48                	jne    c0003960 <dir_read+0x99>
c0003918:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000391d:	74 10                	je     c000392f <dir_read+0x68>
c000391f:	80 f9 83             	cmp    cl,0x83
c0003922:	0f 85 dd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003928:	31 ed                	xor    ebp,ebp
c000392a:	e9 08 01 00 00       	jmp    c0003a37 <dir_read+0x170>
c000392f:	80 f9 85             	cmp    cl,0x85
c0003932:	0f 85 cd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000393b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000393e:	89 d8                	mov    eax,ebx
c0003940:	e8 fc fd ff ff       	call   c0003741 <load_xdir>
c0003945:	89 c5                	mov    ebp,eax
c0003947:	85 c0                	test   eax,eax
c0003949:	0f 85 da 00 00 00    	jne    c0003a29 <dir_read+0x162>
c000394f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003952:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003955:	83 e0 3f             	and    eax,0x3f
c0003958:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000395b:	e9 d7 00 00 00       	jmp    c0003a37 <dir_read+0x170>
c0003960:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003963:	83 e0 3f             	and    eax,0x3f
c0003966:	80 f9 2e             	cmp    cl,0x2e
c0003969:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000396d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003970:	0f 84 8a 00 00 00    	je     c0003a00 <dir_read+0x139>
c0003976:	80 f9 e5             	cmp    cl,0xe5
c0003979:	0f 84 81 00 00 00    	je     c0003a00 <dir_read+0x139>
c000397f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003983:	83 e0 1f             	and    eax,0x1f
c0003986:	83 f8 08             	cmp    eax,0x8
c0003989:	0f 94 c0             	sete   al
c000398c:	0f b6 c0             	movzx  eax,al
c000398f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003993:	75 6b                	jne    c0003a00 <dir_read+0x139>
c0003995:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000399a:	75 44                	jne    c00039e0 <dir_read+0x119>
c000399c:	f6 c1 40             	test   cl,0x40
c000399f:	74 12                	je     c00039b3 <dir_read+0xec>
c00039a1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039a4:	83 e1 bf             	and    ecx,0xffffffbf
c00039a7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039ae:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039b1:	eb 06                	jmp    c00039b9 <dir_read+0xf2>
c00039b3:	89 f0                	mov    eax,esi
c00039b5:	38 c8                	cmp    al,cl
c00039b7:	75 47                	jne    c0003a00 <dir_read+0x139>
c00039b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039bd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039c5:	75 3e                	jne    c0003a05 <dir_read+0x13e>
c00039c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039cb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039ce:	e8 8a e4 ff ff       	call   c0001e5d <pick_lfn>
c00039d3:	85 c0                	test   eax,eax
c00039d5:	74 2e                	je     c0003a05 <dir_read+0x13e>
c00039d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039db:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039de:	eb 25                	jmp    c0003a05 <dir_read+0x13e>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	84 c0                	test   al,al
c00039e4:	75 11                	jne    c00039f7 <dir_read+0x130>
c00039e6:	89 d0                	mov    eax,edx
c00039e8:	e8 2a e6 ff ff       	call   c0002017 <sum_sfn>
c00039ed:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039f1:	0f 84 31 ff ff ff    	je     c0003928 <dir_read+0x61>
c00039f7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039fe:	eb 37                	jmp    c0003a37 <dir_read+0x170>
c0003a00:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	e8 01 fc ff ff       	call   c000360f <dir_next>
c0003a0e:	89 c5                	mov    ebp,eax
c0003a10:	85 c0                	test   eax,eax
c0003a12:	0f 84 cd fe ff ff    	je     c00038e5 <dir_read+0x1e>
c0003a18:	eb 0f                	jmp    c0003a29 <dir_read+0x162>
c0003a1a:	85 ed                	test   ebp,ebp
c0003a1c:	0f 84 06 ff ff ff    	je     c0003928 <dir_read+0x61>
c0003a22:	eb 05                	jmp    c0003a29 <dir_read+0x162>
c0003a24:	bd 04 00 00 00       	mov    ebp,0x4
c0003a29:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a30:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a37:	83 c4 1c             	add    esp,0x1c
c0003a3a:	89 e8                	mov    eax,ebp
c0003a3c:	5b                   	pop    ebx
c0003a3d:	5e                   	pop    esi
c0003a3e:	5f                   	pop    edi
c0003a3f:	5d                   	pop    ebp
c0003a40:	c3                   	ret    

c0003a41 <dir_alloc>:
c0003a41:	55                   	push   ebp
c0003a42:	89 d5                	mov    ebp,edx
c0003a44:	57                   	push   edi
c0003a45:	31 d2                	xor    edx,edx
c0003a47:	56                   	push   esi
c0003a48:	53                   	push   ebx
c0003a49:	89 c3                	mov    ebx,eax
c0003a4b:	83 ec 0c             	sub    esp,0xc
c0003a4e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a50:	e8 62 f6 ff ff       	call   c00030b7 <dir_sdi>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 4e                	jne    c0003aa7 <dir_alloc+0x66>
c0003a59:	31 f6                	xor    esi,esi
c0003a5b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a61:	89 f8                	mov    eax,edi
c0003a63:	e8 d1 e8 ff ff       	call   c0002339 <move_window>
c0003a68:	85 c0                	test   eax,eax
c0003a6a:	75 3b                	jne    c0003aa7 <dir_alloc+0x66>
c0003a6c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a72:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a74:	75 07                	jne    c0003a7d <dir_alloc+0x3c>
c0003a76:	f7 d2                	not    edx
c0003a78:	c0 ea 07             	shr    dl,0x7
c0003a7b:	eb 0d                	jmp    c0003a8a <dir_alloc+0x49>
c0003a7d:	84 d2                	test   dl,dl
c0003a7f:	0f 94 c1             	sete   cl
c0003a82:	80 fa e5             	cmp    dl,0xe5
c0003a85:	0f 94 c2             	sete   dl
c0003a88:	09 ca                	or     edx,ecx
c0003a8a:	84 d2                	test   dl,dl
c0003a8c:	74 07                	je     c0003a95 <dir_alloc+0x54>
c0003a8e:	46                   	inc    esi
c0003a8f:	39 ee                	cmp    esi,ebp
c0003a91:	75 04                	jne    c0003a97 <dir_alloc+0x56>
c0003a93:	eb 1c                	jmp    c0003ab1 <dir_alloc+0x70>
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	ba 01 00 00 00       	mov    edx,0x1
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 6c fb ff ff       	call   c000360f <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 b4                	je     c0003a5b <dir_alloc+0x1a>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_alloc+0x70>
c0003aac:	b8 07 00 00 00       	mov    eax,0x7
c0003ab1:	83 c4 0c             	add    esp,0xc
c0003ab4:	5b                   	pop    ebx
c0003ab5:	5e                   	pop    esi
c0003ab6:	5f                   	pop    edi
c0003ab7:	5d                   	pop    ebp
c0003ab8:	c3                   	ret    

c0003ab9 <store_xdir>:
c0003ab9:	55                   	push   ebp
c0003aba:	57                   	push   edi
c0003abb:	89 c7                	mov    edi,eax
c0003abd:	56                   	push   esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 0c             	sub    esp,0xc
c0003ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ac4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ac7:	89 e8                	mov    eax,ebp
c0003ac9:	e8 5b e5 ff ff       	call   c0002029 <xdir_sum>
c0003ace:	0f b7 d0             	movzx  edx,ax
c0003ad1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ad4:	e8 f4 e0 ff ff       	call   c0001bcd <st_word>
c0003ad9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003add:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ae0:	89 f8                	mov    eax,edi
c0003ae2:	e8 d0 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003ae7:	89 c6                	mov    esi,eax
c0003ae9:	85 f6                	test   esi,esi
c0003aeb:	75 3d                	jne    c0003b2a <store_xdir+0x71>
c0003aed:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003af0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003af3:	8b 07                	mov    eax,DWORD PTR [edi]
c0003af5:	e8 3f e8 ff ff       	call   c0002339 <move_window>
c0003afa:	89 c6                	mov    esi,eax
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 2a                	jne    c0003b2a <store_xdir+0x71>
c0003b00:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b03:	b9 20 00 00 00       	mov    ecx,0x20
c0003b08:	89 ea                	mov    edx,ebp
c0003b0a:	e8 cb e0 ff ff       	call   c0001bda <mem_cpy>
c0003b0f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b11:	85 db                	test   ebx,ebx
c0003b13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b17:	74 11                	je     c0003b2a <store_xdir+0x71>
c0003b19:	31 d2                	xor    edx,edx
c0003b1b:	89 f8                	mov    eax,edi
c0003b1d:	83 c5 20             	add    ebp,0x20
c0003b20:	e8 ea fa ff ff       	call   c000360f <dir_next>
c0003b25:	4b                   	dec    ebx
c0003b26:	89 c6                	mov    esi,eax
c0003b28:	eb bf                	jmp    c0003ae9 <store_xdir+0x30>
c0003b2a:	89 f0                	mov    eax,esi
c0003b2c:	83 fe 02             	cmp    esi,0x2
c0003b2f:	76 05                	jbe    c0003b36 <store_xdir+0x7d>
c0003b31:	b8 02 00 00 00       	mov    eax,0x2
c0003b36:	83 c4 0c             	add    esp,0xc
c0003b39:	5b                   	pop    ebx
c0003b3a:	5e                   	pop    esi
c0003b3b:	5f                   	pop    edi
c0003b3c:	5d                   	pop    ebp
c0003b3d:	c3                   	ret    

c0003b3e <dir_remove>:
c0003b3e:	57                   	push   edi
c0003b3f:	56                   	push   esi
c0003b40:	53                   	push   ebx
c0003b41:	89 c3                	mov    ebx,eax
c0003b43:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b46:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b48:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b4b:	83 fa ff             	cmp    edx,0xffffffff
c0003b4e:	74 09                	je     c0003b59 <dir_remove+0x1b>
c0003b50:	e8 62 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003b55:	85 c0                	test   eax,eax
c0003b57:	75 41                	jne    c0003b9a <dir_remove+0x5c>
c0003b59:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b5c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b5f:	89 f0                	mov    eax,esi
c0003b61:	e8 d3 e7 ff ff       	call   c0002339 <move_window>
c0003b66:	85 c0                	test   eax,eax
c0003b68:	75 26                	jne    c0003b90 <dir_remove+0x52>
c0003b6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b6d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b70:	75 05                	jne    c0003b77 <dir_remove+0x39>
c0003b72:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b75:	eb 03                	jmp    c0003b7a <dir_remove+0x3c>
c0003b77:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b7a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b7e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b81:	73 17                	jae    c0003b9a <dir_remove+0x5c>
c0003b83:	31 d2                	xor    edx,edx
c0003b85:	89 d8                	mov    eax,ebx
c0003b87:	e8 83 fa ff ff       	call   c000360f <dir_next>
c0003b8c:	85 c0                	test   eax,eax
c0003b8e:	74 c9                	je     c0003b59 <dir_remove+0x1b>
c0003b90:	83 f8 04             	cmp    eax,0x4
c0003b93:	75 05                	jne    c0003b9a <dir_remove+0x5c>
c0003b95:	b8 02 00 00 00       	mov    eax,0x2
c0003b9a:	5b                   	pop    ebx
c0003b9b:	5e                   	pop    esi
c0003b9c:	5f                   	pop    edi
c0003b9d:	c3                   	ret    

c0003b9e <create_name>:
c0003b9e:	55                   	push   ebp
c0003b9f:	89 d5                	mov    ebp,edx
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	31 f6                	xor    esi,esi
c0003ba7:	53                   	push   ebx
c0003ba8:	83 ec 3c             	sub    esp,0x3c
c0003bab:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bb1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bbe:	e8 72 e0 ff ff       	call   c0001c35 <tchar2uni>
c0003bc3:	89 c3                	mov    ebx,eax
c0003bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc8:	75 0a                	jne    c0003bd4 <create_name+0x36>
c0003bca:	b8 06 00 00 00       	mov    eax,0x6
c0003bcf:	e9 9e 02 00 00       	jmp    c0003e72 <create_name+0x2d4>
c0003bd4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd9:	76 0c                	jbe    c0003be7 <create_name+0x49>
c0003bdb:	c1 e8 10             	shr    eax,0x10
c0003bde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003be2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003be6:	46                   	inc    esi
c0003be7:	66 83 fb 1f          	cmp    bx,0x1f
c0003beb:	76 4f                	jbe    c0003c3c <create_name+0x9e>
c0003bed:	66 83 fb 5c          	cmp    bx,0x5c
c0003bf1:	74 35                	je     c0003c28 <create_name+0x8a>
c0003bf3:	66 83 fb 2f          	cmp    bx,0x2f
c0003bf7:	74 2f                	je     c0003c28 <create_name+0x8a>
c0003bf9:	66 83 fb 7f          	cmp    bx,0x7f
c0003bfd:	77 11                	ja     c0003c10 <create_name+0x72>
c0003bff:	0f b7 d3             	movzx  edx,bx
c0003c02:	b8 32 3f 02 c0       	mov    eax,0xc0023f32
c0003c07:	e8 11 e0 ff ff       	call   c0001c1d <chk_chr>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	75 ba                	jne    c0003bca <create_name+0x2c>
c0003c10:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c16:	77 b2                	ja     c0003bca <create_name+0x2c>
c0003c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c1c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c20:	46                   	inc    esi
c0003c21:	eb 97                	jmp    c0003bba <create_name+0x1c>
c0003c23:	40                   	inc    eax
c0003c24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c2e:	80 fa 2f             	cmp    dl,0x2f
c0003c31:	74 f0                	je     c0003c23 <create_name+0x85>
c0003c33:	80 fa 5c             	cmp    dl,0x5c
c0003c36:	74 eb                	je     c0003c23 <create_name+0x85>
c0003c38:	31 db                	xor    ebx,ebx
c0003c3a:	eb 02                	jmp    c0003c3e <create_name+0xa0>
c0003c3c:	b3 04                	mov    bl,0x4
c0003c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c42:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c45:	85 f6                	test   esi,esi
c0003c47:	74 18                	je     c0003c61 <create_name+0xc3>
c0003c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c4d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c52:	66 83 f8 20          	cmp    ax,0x20
c0003c56:	74 06                	je     c0003c5e <create_name+0xc0>
c0003c58:	66 83 f8 2e          	cmp    ax,0x2e
c0003c5c:	75 03                	jne    c0003c61 <create_name+0xc3>
c0003c5e:	4e                   	dec    esi
c0003c5f:	eb e4                	jmp    c0003c45 <create_name+0xa7>
c0003c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c65:	31 ed                	xor    ebp,ebp
c0003c67:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c6d:	85 f6                	test   esi,esi
c0003c6f:	0f 84 55 ff ff ff    	je     c0003bca <create_name+0x2c>
c0003c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c79:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c7c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c80:	66 83 f8 20          	cmp    ax,0x20
c0003c84:	75 04                	jne    c0003c8a <create_name+0xec>
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	eb eb                	jmp    c0003c75 <create_name+0xd7>
c0003c8a:	85 ed                	test   ebp,ebp
c0003c8c:	75 06                	jne    c0003c94 <create_name+0xf6>
c0003c8e:	66 83 f8 2e          	cmp    ax,0x2e
c0003c92:	75 08                	jne    c0003c9c <create_name+0xfe>
c0003c94:	83 cb 03             	or     ebx,0x3
c0003c97:	eb 03                	jmp    c0003c9c <create_name+0xfe>
c0003c99:	4e                   	dec    esi
c0003c9a:	74 0c                	je     c0003ca8 <create_name+0x10a>
c0003c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ca0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ca6:	75 f1                	jne    c0003c99 <create_name+0xfb>
c0003ca8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cad:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cb0:	ba 20 00 00 00       	mov    edx,0x20
c0003cb5:	e8 35 df ff ff       	call   c0001bef <mem_set>
c0003cba:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cc2:	31 c9                	xor    ecx,ecx
c0003cc4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cd4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd8:	66 85 ed             	test   bp,bp
c0003cdb:	0f 84 30 01 00 00    	je     c0003e11 <create_name+0x273>
c0003ce1:	66 83 fd 20          	cmp    bp,0x20
c0003ce5:	74 10                	je     c0003cf7 <create_name+0x159>
c0003ce7:	66 83 fd 2e          	cmp    bp,0x2e
c0003ceb:	75 13                	jne    c0003d00 <create_name+0x162>
c0003ced:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003cf1:	0f 84 6b 01 00 00    	je     c0003e62 <create_name+0x2c4>
c0003cf7:	83 cb 03             	or     ebx,0x3
c0003cfa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cfe:	eb c9                	jmp    c0003cc9 <create_name+0x12b>
c0003d00:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d04:	73 0b                	jae    c0003d11 <create_name+0x173>
c0003d06:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d0a:	75 47                	jne    c0003d53 <create_name+0x1b5>
c0003d0c:	e9 51 01 00 00       	jmp    c0003e62 <create_name+0x2c4>
c0003d11:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d16:	75 10                	jne    c0003d28 <create_name+0x18a>
c0003d18:	83 cb 03             	or     ebx,0x3
c0003d1b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d23:	e9 e9 00 00 00       	jmp    c0003e11 <create_name+0x273>
c0003d28:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2c:	74 0d                	je     c0003d3b <create_name+0x19d>
c0003d2e:	83 cb 03             	or     ebx,0x3
c0003d31:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d35:	0f 87 d6 00 00 00    	ja     c0003e11 <create_name+0x273>
c0003d3b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d44:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d4c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d51:	eb a7                	jmp    c0003cfa <create_name+0x15c>
c0003d53:	66 83 fd 7f          	cmp    bp,0x7f
c0003d57:	76 68                	jbe    c0003dc1 <create_name+0x223>
c0003d59:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d5d:	88 da                	mov    dl,bl
c0003d5f:	83 ca 02             	or     edx,0x2
c0003d62:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d66:	50                   	push   eax
c0003d67:	50                   	push   eax
c0003d68:	68 b5 01 00 00       	push   0x1b5
c0003d6d:	55                   	push   ebp
c0003d6e:	e8 81 48 00 00       	call   c00085f4 <ff_uni2oem>
c0003d73:	83 c4 10             	add    esp,0x10
c0003d76:	89 c5                	mov    ebp,eax
c0003d78:	a8 80                	test   al,0x80
c0003d7a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d82:	74 0c                	je     c0003d90 <create_name+0x1f2>
c0003d84:	83 e5 7f             	and    ebp,0x7f
c0003d87:	0f b6 ad 80 3e 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdc180]
c0003d8e:	eb 2a                	jmp    c0003dba <create_name+0x21c>
c0003d90:	66 3d ff 00          	cmp    ax,0xff
c0003d94:	76 24                	jbe    c0003dba <create_name+0x21c>
c0003d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d9a:	48                   	dec    eax
c0003d9b:	39 c8                	cmp    eax,ecx
c0003d9d:	77 0c                	ja     c0003dab <create_name+0x20d>
c0003d9f:	83 cb 03             	or     ebx,0x3
c0003da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003da6:	e9 4f ff ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003dab:	89 e8                	mov    eax,ebp
c0003dad:	88 d3                	mov    bl,dl
c0003daf:	66 c1 e8 08          	shr    ax,0x8
c0003db3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003db7:	41                   	inc    ecx
c0003db8:	eb 4b                	jmp    c0003e05 <create_name+0x267>
c0003dba:	88 d3                	mov    bl,dl
c0003dbc:	66 85 ed             	test   bp,bp
c0003dbf:	74 19                	je     c0003dda <create_name+0x23c>
c0003dc1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dc5:	0f b7 d5             	movzx  edx,bp
c0003dc8:	b8 3b 3f 02 c0       	mov    eax,0xc0023f3b
c0003dcd:	e8 4b de ff ff       	call   c0001c1d <chk_chr>
c0003dd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 0a                	je     c0003de4 <create_name+0x246>
c0003dda:	83 cb 03             	or     ebx,0x3
c0003ddd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003de2:	eb 21                	jmp    c0003e05 <create_name+0x267>
c0003de4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003de7:	66 83 f8 19          	cmp    ax,0x19
c0003deb:	77 07                	ja     c0003df4 <create_name+0x256>
c0003ded:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003df2:	eb 11                	jmp    c0003e05 <create_name+0x267>
c0003df4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 08                	ja     c0003e05 <create_name+0x267>
c0003dfd:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e02:	83 ed 20             	sub    ebp,0x20
c0003e05:	89 e8                	mov    eax,ebp
c0003e07:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e0b:	41                   	inc    ecx
c0003e0c:	e9 e9 fe ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003e11:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e15:	75 04                	jne    c0003e1b <create_name+0x27d>
c0003e17:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e1b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e20:	75 05                	jne    c0003e27 <create_name+0x289>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2b:	83 e0 0c             	and    eax,0xc
c0003e2e:	3c 0c                	cmp    al,0xc
c0003e30:	74 0b                	je     c0003e3d <create_name+0x29f>
c0003e32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e36:	83 e0 03             	and    eax,0x3
c0003e39:	3c 03                	cmp    al,0x3
c0003e3b:	75 05                	jne    c0003e42 <create_name+0x2a4>
c0003e3d:	83 cb 02             	or     ebx,0x2
c0003e40:	eb 19                	jmp    c0003e5b <create_name+0x2bd>
c0003e42:	f6 c3 02             	test   bl,0x2
c0003e45:	75 14                	jne    c0003e5b <create_name+0x2bd>
c0003e47:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e4c:	74 03                	je     c0003e51 <create_name+0x2b3>
c0003e4e:	83 cb 10             	or     ebx,0x10
c0003e51:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e56:	74 03                	je     c0003e5b <create_name+0x2bd>
c0003e58:	83 cb 08             	or     ebx,0x8
c0003e5b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e5e:	31 c0                	xor    eax,eax
c0003e60:	eb 10                	jmp    c0003e72 <create_name+0x2d4>
c0003e62:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e67:	0f 85 ce fe ff ff    	jne    c0003d3b <create_name+0x19d>
c0003e6d:	e9 a6 fe ff ff       	jmp    c0003d18 <create_name+0x17a>
c0003e72:	83 c4 3c             	add    esp,0x3c
c0003e75:	5b                   	pop    ebx
c0003e76:	5e                   	pop    esi
c0003e77:	5f                   	pop    edi
c0003e78:	5d                   	pop    ebp
c0003e79:	c3                   	ret    

c0003e7a <xname_sum>:
c0003e7a:	56                   	push   esi
c0003e7b:	53                   	push   ebx
c0003e7c:	89 c6                	mov    esi,eax
c0003e7e:	51                   	push   ecx
c0003e7f:	31 db                	xor    ebx,ebx
c0003e81:	83 c6 02             	add    esi,0x2
c0003e84:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e88:	66 85 c0             	test   ax,ax
c0003e8b:	74 1f                	je     c0003eac <xname_sum+0x32>
c0003e8d:	83 ec 0c             	sub    esp,0xc
c0003e90:	66 d1 cb             	ror    bx,1
c0003e93:	50                   	push   eax
c0003e94:	e8 67 48 00 00       	call   c0008700 <ff_wtoupper>
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	0f b6 d0             	movzx  edx,al
c0003e9f:	66 c1 e8 08          	shr    ax,0x8
c0003ea3:	01 d3                	add    ebx,edx
c0003ea5:	66 d1 cb             	ror    bx,1
c0003ea8:	01 c3                	add    ebx,eax
c0003eaa:	eb d5                	jmp    c0003e81 <xname_sum+0x7>
c0003eac:	89 d8                	mov    eax,ebx
c0003eae:	5a                   	pop    edx
c0003eaf:	5b                   	pop    ebx
c0003eb0:	5e                   	pop    esi
c0003eb1:	c3                   	ret    

c0003eb2 <create_xdir>:
c0003eb2:	55                   	push   ebp
c0003eb3:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb8:	57                   	push   edi
c0003eb9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ebe:	56                   	push   esi
c0003ebf:	31 ff                	xor    edi,edi
c0003ec1:	53                   	push   ebx
c0003ec2:	be 40 00 00 00       	mov    esi,0x40
c0003ec7:	89 c3                	mov    ebx,eax
c0003ec9:	83 ec 1c             	sub    esp,0x1c
c0003ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ed0:	31 d2                	xor    edx,edx
c0003ed2:	e8 18 dd ff ff       	call   c0001bef <mem_set>
c0003ed7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eda:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ede:	31 c9                	xor    ecx,ecx
c0003ee0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ee3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ee7:	83 c6 02             	add    esi,0x2
c0003eea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003eee:	66 85 ed             	test   bp,bp
c0003ef1:	74 12                	je     c0003f05 <create_xdir+0x53>
c0003ef3:	0f b6 c1             	movzx  eax,cl
c0003ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003efa:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003efe:	66 83 fd 01          	cmp    bp,0x1
c0003f02:	80 d9 ff             	sbb    cl,0xff
c0003f05:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f08:	0f b7 d5             	movzx  edx,bp
c0003f0b:	83 c6 02             	add    esi,0x2
c0003f0e:	e8 ba dc ff ff       	call   c0001bcd <st_word>
c0003f13:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f19:	75 d3                	jne    c0003eee <create_xdir+0x3c>
c0003f1b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f26:	0f b6 c1             	movzx  eax,cl
c0003f29:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f2e:	74 07                	je     c0003f37 <create_xdir+0x85>
c0003f30:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f35:	eb a9                	jmp    c0003ee0 <create_xdir+0x2e>
c0003f37:	8d 47 02             	lea    eax,[edi+0x2]
c0003f3a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f3d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f40:	89 d0                	mov    eax,edx
c0003f42:	e8 33 ff ff ff       	call   c0003e7a <xname_sum>
c0003f47:	83 c4 1c             	add    esp,0x1c
c0003f4a:	0f b7 d0             	movzx  edx,ax
c0003f4d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f50:	5b                   	pop    ebx
c0003f51:	5e                   	pop    esi
c0003f52:	5f                   	pop    edi
c0003f53:	5d                   	pop    ebp
c0003f54:	e9 74 dc ff ff       	jmp    c0001bcd <st_word>

c0003f59 <cmp_lfn>:
c0003f59:	55                   	push   ebp
c0003f5a:	57                   	push   edi
c0003f5b:	89 d7                	mov    edi,edx
c0003f5d:	56                   	push   esi
c0003f5e:	53                   	push   ebx
c0003f5f:	83 ec 1c             	sub    esp,0x1c
c0003f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f66:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f69:	e8 ed db ff ff       	call   c0001b5b <ld_word>
c0003f6e:	66 85 c0             	test   ax,ax
c0003f71:	74 07                	je     c0003f7a <cmp_lfn+0x21>
c0003f73:	31 c0                	xor    eax,eax
c0003f75:	e9 9a 00 00 00       	jmp    c0004014 <cmp_lfn+0xbb>
c0003f7a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f7c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f81:	83 e3 3f             	and    ebx,0x3f
c0003f84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f8c:	4b                   	dec    ebx
c0003f8d:	6b db 0d             	imul   ebx,ebx,0xd
c0003f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f94:	0f b6 80 00 3f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc100]
c0003f9b:	01 f8                	add    eax,edi
c0003f9d:	e8 b9 db ff ff       	call   c0001b5b <ld_word>
c0003fa2:	66 85 ed             	test   bp,bp
c0003fa5:	89 c6                	mov    esi,eax
c0003fa7:	74 3c                	je     c0003fe5 <cmp_lfn+0x8c>
c0003fa9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003faf:	77 c2                	ja     c0003f73 <cmp_lfn+0x1a>
c0003fb1:	83 ec 0c             	sub    esp,0xc
c0003fb4:	0f b7 c0             	movzx  eax,ax
c0003fb7:	50                   	push   eax
c0003fb8:	e8 43 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fbd:	89 c5                	mov    ebp,eax
c0003fbf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fca:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	e8 2a 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fd6:	83 c4 10             	add    esp,0x10
c0003fd9:	39 c5                	cmp    ebp,eax
c0003fdb:	75 96                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fdd:	89 f5                	mov    ebp,esi
c0003fdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fe3:	eb 04                	jmp    c0003fe9 <cmp_lfn+0x90>
c0003fe5:	66 46                	inc    si
c0003fe7:	75 8a                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fe9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fed:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ff2:	75 9c                	jne    c0003f90 <cmp_lfn+0x37>
c0003ff4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ff7:	74 16                	je     c000400f <cmp_lfn+0xb6>
c0003ff9:	66 85 ed             	test   bp,bp
c0003ffc:	74 11                	je     c000400f <cmp_lfn+0xb6>
c0003ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004002:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004007:	0f 94 c0             	sete   al
c000400a:	0f b6 c0             	movzx  eax,al
c000400d:	eb 05                	jmp    c0004014 <cmp_lfn+0xbb>
c000400f:	b8 01 00 00 00       	mov    eax,0x1
c0004014:	83 c4 1c             	add    esp,0x1c
c0004017:	5b                   	pop    ebx
c0004018:	5e                   	pop    esi
c0004019:	5f                   	pop    edi
c000401a:	5d                   	pop    ebp
c000401b:	c3                   	ret    

c000401c <dir_find>:
c000401c:	55                   	push   ebp
c000401d:	31 d2                	xor    edx,edx
c000401f:	57                   	push   edi
c0004020:	56                   	push   esi
c0004021:	53                   	push   ebx
c0004022:	89 c3                	mov    ebx,eax
c0004024:	83 ec 1c             	sub    esp,0x1c
c0004027:	8b 30                	mov    esi,DWORD PTR [eax]
c0004029:	e8 89 f0 ff ff       	call   c00030b7 <dir_sdi>
c000402e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004031:	85 c0                	test   eax,eax
c0004033:	0f 85 9e 01 00 00    	jne    c00041d7 <dir_find+0x1bb>
c0004039:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000403c:	0f 85 8d 00 00 00    	jne    c00040cf <dir_find+0xb3>
c0004042:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004045:	e8 30 fe ff ff       	call   c0003e7a <xname_sum>
c000404a:	89 c7                	mov    edi,eax
c000404c:	31 d2                	xor    edx,edx
c000404e:	89 d8                	mov    eax,ebx
c0004050:	e8 72 f8 ff ff       	call   c00038c7 <dir_read>
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 5e 01 00 00    	jne    c00041bb <dir_find+0x19f>
c000405d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004060:	8d 41 24             	lea    eax,[ecx+0x24]
c0004063:	e8 f3 da ff ff       	call   c0001b5b <ld_word>
c0004068:	66 39 f8             	cmp    ax,di
c000406b:	75 df                	jne    c000404c <dir_find+0x30>
c000406d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004070:	31 ed                	xor    ebp,ebp
c0004072:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004076:	ba 40 00 00 00       	mov    edx,0x40
c000407b:	89 e9                	mov    ecx,ebp
c000407d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004081:	0f 84 42 01 00 00    	je     c00041c9 <dir_find+0x1ad>
c0004087:	f6 c2 1f             	test   dl,0x1f
c000408a:	75 03                	jne    c000408f <dir_find+0x73>
c000408c:	83 c2 02             	add    edx,0x2
c000408f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004093:	89 d0                	mov    eax,edx
c0004095:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004098:	e8 be da ff ff       	call   c0001b5b <ld_word>
c000409d:	83 ec 0c             	sub    esp,0xc
c00040a0:	0f b7 c0             	movzx  eax,ax
c00040a3:	50                   	push   eax
c00040a4:	e8 57 46 00 00       	call   c0008700 <ff_wtoupper>
c00040a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040ad:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	e8 44 46 00 00       	call   c0008700 <ff_wtoupper>
c00040bc:	83 c4 10             	add    esp,0x10
c00040bf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040c3:	75 87                	jne    c000404c <dir_find+0x30>
c00040c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c9:	45                   	inc    ebp
c00040ca:	83 c2 02             	add    edx,0x2
c00040cd:	eb ac                	jmp    c000407b <dir_find+0x5f>
c00040cf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040d6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040e6:	89 f0                	mov    eax,esi
c00040e8:	e8 4c e2 ff ff       	call   c0002339 <move_window>
c00040ed:	85 c0                	test   eax,eax
c00040ef:	0f 85 c6 00 00 00    	jne    c00041bb <dir_find+0x19f>
c00040f5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040fb:	84 c9                	test   cl,cl
c00040fd:	0f 84 bd 00 00 00    	je     c00041c0 <dir_find+0x1a4>
c0004103:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004106:	88 d0                	mov    al,dl
c0004108:	83 e0 3f             	and    eax,0x3f
c000410b:	80 f9 e5             	cmp    cl,0xe5
c000410e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004111:	0f 84 87 00 00 00    	je     c000419e <dir_find+0x182>
c0004117:	80 e2 08             	and    dl,0x8
c000411a:	74 06                	je     c0004122 <dir_find+0x106>
c000411c:	3c 0f                	cmp    al,0xf
c000411e:	75 7e                	jne    c000419e <dir_find+0x182>
c0004120:	eb 04                	jmp    c0004126 <dir_find+0x10a>
c0004122:	3c 0f                	cmp    al,0xf
c0004124:	75 4c                	jne    c0004172 <dir_find+0x156>
c0004126:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000412a:	75 7e                	jne    c00041aa <dir_find+0x18e>
c000412c:	f6 c1 40             	test   cl,0x40
c000412f:	74 12                	je     c0004143 <dir_find+0x127>
c0004131:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004134:	83 e1 bf             	and    ecx,0xffffffbf
c0004137:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000413b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000413e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004141:	eb 06                	jmp    c0004149 <dir_find+0x12d>
c0004143:	89 f8                	mov    eax,edi
c0004145:	38 c8                	cmp    al,cl
c0004147:	75 5c                	jne    c00041a5 <dir_find+0x189>
c0004149:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000414d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004152:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004155:	75 53                	jne    c00041aa <dir_find+0x18e>
c0004157:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000415b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000415e:	89 ea                	mov    edx,ebp
c0004160:	e8 f4 fd ff ff       	call   c0003f59 <cmp_lfn>
c0004165:	85 c0                	test   eax,eax
c0004167:	74 41                	je     c00041aa <dir_find+0x18e>
c0004169:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000416d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004170:	eb 38                	jmp    c00041aa <dir_find+0x18e>
c0004172:	89 f8                	mov    eax,edi
c0004174:	84 c0                	test   al,al
c0004176:	75 0d                	jne    c0004185 <dir_find+0x169>
c0004178:	89 e8                	mov    eax,ebp
c000417a:	e8 98 de ff ff       	call   c0002017 <sum_sfn>
c000417f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004183:	74 52                	je     c00041d7 <dir_find+0x1bb>
c0004185:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004189:	75 13                	jne    c000419e <dir_find+0x182>
c000418b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000418e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004193:	89 e8                	mov    eax,ebp
c0004195:	e8 60 da ff ff       	call   c0001bfa <mem_cmp>
c000419a:	85 c0                	test   eax,eax
c000419c:	74 39                	je     c00041d7 <dir_find+0x1bb>
c000419e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041aa:	31 d2                	xor    edx,edx
c00041ac:	89 d8                	mov    eax,ebx
c00041ae:	e8 5c f4 ff ff       	call   c000360f <dir_next>
c00041b3:	85 c0                	test   eax,eax
c00041b5:	0f 84 25 ff ff ff    	je     c00040e0 <dir_find+0xc4>
c00041bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041be:	eb 17                	jmp    c00041d7 <dir_find+0x1bb>
c00041c0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041c7:	eb 0e                	jmp    c00041d7 <dir_find+0x1bb>
c00041c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041cc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041d1:	0f 85 75 fe ff ff    	jne    c000404c <dir_find+0x30>
c00041d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041da:	83 c4 1c             	add    esp,0x1c
c00041dd:	5b                   	pop    ebx
c00041de:	5e                   	pop    esi
c00041df:	5f                   	pop    edi
c00041e0:	5d                   	pop    ebp
c00041e1:	c3                   	ret    

c00041e2 <dir_register>:
c00041e2:	55                   	push   ebp
c00041e3:	57                   	push   edi
c00041e4:	56                   	push   esi
c00041e5:	be 06 00 00 00       	mov    esi,0x6
c00041ea:	53                   	push   ebx
c00041eb:	83 ec 6c             	sub    esp,0x6c
c00041ee:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041f2:	0f 85 62 02 00 00    	jne    c000445a <dir_register+0x278>
c00041f8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041fa:	31 ff                	xor    edi,edi
c00041fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ff:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004204:	74 03                	je     c0004209 <dir_register+0x27>
c0004206:	47                   	inc    edi
c0004207:	eb f6                	jmp    c00041ff <dir_register+0x1d>
c0004209:	89 c3                	mov    ebx,eax
c000420b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000420f:	0f 85 e1 00 00 00    	jne    c00042f6 <dir_register+0x114>
c0004215:	83 c7 0e             	add    edi,0xe
c0004218:	b9 0f 00 00 00       	mov    ecx,0xf
c000421d:	89 f8                	mov    eax,edi
c000421f:	31 d2                	xor    edx,edx
c0004221:	f7 f1                	div    ecx
c0004223:	8d 50 02             	lea    edx,[eax+0x2]
c0004226:	89 c7                	mov    edi,eax
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 12 f8 ff ff       	call   c0003a41 <dir_alloc>
c000422f:	89 c6                	mov    esi,eax
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 21 02 00 00    	jne    c000445a <dir_register+0x278>
c0004239:	81 c7 01 00 00 08    	add    edi,0x8000001
c000423f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004242:	c1 e7 05             	shl    edi,0x5
c0004245:	29 f8                	sub    eax,edi
c0004247:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000424d:	a8 04                	test   al,0x4
c000424f:	0f 84 91 00 00 00    	je     c00042e6 <dir_register+0x104>
c0004255:	83 e0 fb             	and    eax,0xfffffffb
c0004258:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 25 ec ff ff       	call   c0002e87 <fill_first_frag>
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 ee 01 00 00    	jne    c0004458 <dir_register+0x276>
c000426a:	83 c9 ff             	or     ecx,0xffffffff
c000426d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004270:	89 d8                	mov    eax,ebx
c0004272:	e8 db eb ff ff       	call   c0002e52 <fill_last_frag>
c0004277:	85 c0                	test   eax,eax
c0004279:	0f 85 d9 01 00 00    	jne    c0004458 <dir_register+0x276>
c000427f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004283:	74 61                	je     c00042e6 <dir_register+0x104>
c0004285:	89 da                	mov    edx,ebx
c0004287:	8d 44 24 14          	lea    eax,[esp+0x14]
c000428b:	e8 ea f5 ff ff       	call   c000387a <load_obj_xdir>
c0004290:	85 c0                	test   eax,eax
c0004292:	0f 85 c0 01 00 00    	jne    c0004458 <dir_register+0x276>
c0004298:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000429c:	31 c9                	xor    ecx,ecx
c000429e:	c1 e2 09             	shl    edx,0x9
c00042a1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042a4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042a7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042aa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b0:	83 c0 38             	add    eax,0x38
c00042b3:	e8 1c d9 ff ff       	call   c0001bd4 <st_qword>
c00042b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042be:	83 c0 28             	add    eax,0x28
c00042c1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042c4:	e8 0b d9 ff ff       	call   c0001bd4 <st_qword>
c00042c9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042cf:	83 c8 01             	or     eax,0x1
c00042d2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d9:	e8 db f7 ff ff       	call   c0003ab9 <store_xdir>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 85 72 01 00 00    	jne    c0004458 <dir_register+0x276>
c00042e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042ec:	e8 c1 fb ff ff       	call   c0003eb2 <create_xdir>
c00042f1:	e9 64 01 00 00       	jmp    c000445a <dir_register+0x278>
c00042f6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f9:	b9 0c 00 00 00       	mov    ecx,0xc
c00042fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004302:	89 c2                	mov    edx,eax
c0004304:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004308:	e8 cd d8 ff ff       	call   c0001bda <mem_cpy>
c000430d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004312:	74 58                	je     c000436c <dir_register+0x18a>
c0004314:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004318:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004320:	83 ec 0c             	sub    esp,0xc
c0004323:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000432a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000432e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004332:	e8 24 dc ff ff       	call   c0001f5b <gen_numname>
c0004337:	89 d8                	mov    eax,ebx
c0004339:	e8 de fc ff ff       	call   c000401c <dir_find>
c000433e:	83 c4 10             	add    esp,0x10
c0004341:	89 c6                	mov    esi,eax
c0004343:	85 c0                	test   eax,eax
c0004345:	75 15                	jne    c000435c <dir_register+0x17a>
c0004347:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000434b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004350:	75 ce                	jne    c0004320 <dir_register+0x13e>
c0004352:	be 07 00 00 00       	mov    esi,0x7
c0004357:	e9 fe 00 00 00       	jmp    c000445a <dir_register+0x278>
c000435c:	83 f8 04             	cmp    eax,0x4
c000435f:	0f 85 f5 00 00 00    	jne    c000445a <dir_register+0x278>
c0004365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004369:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000436c:	b9 01 00 00 00       	mov    ecx,0x1
c0004371:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004376:	74 0f                	je     c0004387 <dir_register+0x1a5>
c0004378:	b9 0d 00 00 00       	mov    ecx,0xd
c000437d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004380:	31 d2                	xor    edx,edx
c0004382:	f7 f1                	div    ecx
c0004384:	8d 48 01             	lea    ecx,[eax+0x1]
c0004387:	89 ca                	mov    edx,ecx
c0004389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000438d:	89 d8                	mov    eax,ebx
c000438f:	e8 ad f6 ff ff       	call   c0003a41 <dir_alloc>
c0004394:	89 c6                	mov    esi,eax
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 bc 00 00 00    	jne    c000445a <dir_register+0x278>
c000439e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043a2:	49                   	dec    ecx
c00043a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043a7:	74 6a                	je     c0004413 <dir_register+0x231>
c00043a9:	89 c8                	mov    eax,ecx
c00043ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ae:	c1 e0 05             	shl    eax,0x5
c00043b1:	29 c2                	sub    edx,eax
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 fd ec ff ff       	call   c00030b7 <dir_sdi>
c00043ba:	89 c6                	mov    esi,eax
c00043bc:	85 c0                	test   eax,eax
c00043be:	0f 85 96 00 00 00    	jne    c000445a <dir_register+0x278>
c00043c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c8:	e8 4a dc ff ff       	call   c0002017 <sum_sfn>
c00043cd:	0f b6 f8             	movzx  edi,al
c00043d0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043d3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043d6:	89 e8                	mov    eax,ebp
c00043d8:	e8 5c df ff ff       	call   c0002339 <move_window>
c00043dd:	89 c6                	mov    esi,eax
c00043df:	85 c0                	test   eax,eax
c00043e1:	75 77                	jne    c000445a <dir_register+0x278>
c00043e3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043eb:	83 ec 0c             	sub    esp,0xc
c00043ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043f1:	57                   	push   edi
c00043f2:	e8 e0 da ff ff       	call   c0001ed7 <put_lfn>
c00043f7:	31 d2                	xor    edx,edx
c00043f9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043fd:	89 d8                	mov    eax,ebx
c00043ff:	e8 0b f2 ff ff       	call   c000360f <dir_next>
c0004404:	83 c4 10             	add    esp,0x10
c0004407:	89 c6                	mov    esi,eax
c0004409:	85 c0                	test   eax,eax
c000440b:	75 4d                	jne    c000445a <dir_register+0x278>
c000440d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004411:	75 bd                	jne    c00043d0 <dir_register+0x1ee>
c0004413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004416:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004419:	89 e8                	mov    eax,ebp
c000441b:	e8 19 df ff ff       	call   c0002339 <move_window>
c0004420:	89 c6                	mov    esi,eax
c0004422:	85 c0                	test   eax,eax
c0004424:	75 34                	jne    c000445a <dir_register+0x278>
c0004426:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004429:	b9 20 00 00 00       	mov    ecx,0x20
c000442e:	31 d2                	xor    edx,edx
c0004430:	e8 ba d7 ff ff       	call   c0001bef <mem_set>
c0004435:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000443c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004441:	e8 94 d7 ff ff       	call   c0001bda <mem_cpy>
c0004446:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004449:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000444c:	83 e0 18             	and    eax,0x18
c000444f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004452:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004456:	eb 02                	jmp    c000445a <dir_register+0x278>
c0004458:	89 c6                	mov    esi,eax
c000445a:	83 c4 6c             	add    esp,0x6c
c000445d:	89 f0                	mov    eax,esi
c000445f:	5b                   	pop    ebx
c0004460:	5e                   	pop    esi
c0004461:	5f                   	pop    edi
c0004462:	5d                   	pop    ebp
c0004463:	c3                   	ret    

c0004464 <sync_fs>:
c0004464:	56                   	push   esi
c0004465:	53                   	push   ebx
c0004466:	53                   	push   ebx
c0004467:	89 c3                	mov    ebx,eax
c0004469:	e8 37 de ff ff       	call   c00022a5 <sync_window>
c000446e:	85 c0                	test   eax,eax
c0004470:	0f 85 b1 00 00 00    	jne    c0004527 <sync_fs+0xc3>
c0004476:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004479:	0f 85 8e 00 00 00    	jne    c000450d <sync_fs+0xa9>
c000447f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004483:	0f 85 84 00 00 00    	jne    c000450d <sync_fs+0xa9>
c0004489:	b9 00 02 00 00       	mov    ecx,0x200
c000448e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004491:	31 d2                	xor    edx,edx
c0004493:	89 f0                	mov    eax,esi
c0004495:	e8 55 d7 ff ff       	call   c0001bef <mem_set>
c000449a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044a0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044a5:	e8 23 d7 ff ff       	call   c0001bcd <st_word>
c00044aa:	ba 52 52 61 41       	mov    edx,0x41615252
c00044af:	89 f0                	mov    eax,esi
c00044b1:	e8 1b d7 ff ff       	call   c0001bd1 <st_dword>
c00044b6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044bc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044c1:	e8 0b d7 ff ff       	call   c0001bd1 <st_dword>
c00044c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044cf:	e8 fd d6 ff ff       	call   c0001bd1 <st_dword>
c00044d4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044d7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044dd:	e8 ef d6 ff ff       	call   c0001bd1 <st_dword>
c00044e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e8:	83 c0 01             	add    eax,0x1
c00044eb:	83 d2 00             	adc    edx,0x0
c00044ee:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044f7:	6a 01                	push   0x1
c00044f9:	52                   	push   edx
c00044fa:	50                   	push   eax
c00044fb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044ff:	56                   	push   esi
c0004500:	50                   	push   eax
c0004501:	e8 20 d6 ff ff       	call   c0001b26 <disk_write>
c0004506:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000450a:	83 c4 20             	add    esp,0x20
c000450d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004511:	51                   	push   ecx
c0004512:	6a 00                	push   0x0
c0004514:	6a 00                	push   0x0
c0004516:	50                   	push   eax
c0004517:	e8 20 d6 ff ff       	call   c0001b3c <disk_ioctl>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	85 c0                	test   eax,eax
c0004521:	0f 95 c0             	setne  al
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	5a                   	pop    edx
c0004528:	5b                   	pop    ebx
c0004529:	5e                   	pop    esi
c000452a:	c3                   	ret    

c000452b <create_partition>:
c000452b:	55                   	push   ebp
c000452c:	0f b6 c0             	movzx  eax,al
c000452f:	57                   	push   edi
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	83 ec 60             	sub    esp,0x60
c0004535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004539:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000453d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004541:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004545:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004549:	50                   	push   eax
c000454a:	6a 01                	push   0x1
c000454c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004550:	e8 e7 d5 ff ff       	call   c0001b3c <disk_ioctl>
c0004555:	83 c4 10             	add    esp,0x10
c0004558:	85 c0                	test   eax,eax
c000455a:	74 0a                	je     c0004566 <create_partition+0x3b>
c000455c:	b8 01 00 00 00       	mov    eax,0x1
c0004561:	e9 67 05 00 00       	jmp    c0004acd <create_partition+0x5a2>
c0004566:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000456a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000456e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004572:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004576:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000457b:	0f 86 ed 03 00 00    	jbe    c000496e <create_partition+0x443>
c0004581:	83 c0 df             	add    eax,0xffffffdf
c0004584:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000458c:	83 d2 ff             	adc    edx,0xffffffff
c000458f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004593:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000459b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000459f:	83 c0 bd             	add    eax,0xffffffbd
c00045a2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a9:	83 d2 ff             	adc    edx,0xffffffff
c00045ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045b4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045bc:	be 22 00 00 00       	mov    esi,0x22
c00045c1:	31 ff                	xor    edi,edi
c00045c3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045cb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045d3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045db:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045df:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e5:	75 0e                	jne    c00045f5 <create_partition+0xca>
c00045e7:	b9 00 02 00 00       	mov    ecx,0x200
c00045ec:	31 d2                	xor    edx,edx
c00045ee:	89 d8                	mov    eax,ebx
c00045f0:	e8 fa d5 ff ff       	call   c0001bef <mem_set>
c00045f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004601:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004604:	0f 84 23 01 00 00    	je     c000472d <create_partition+0x202>
c000460a:	89 f0                	mov    eax,esi
c000460c:	89 fa                	mov    edx,edi
c000460e:	05 ff 07 00 00       	add    eax,0x7ff
c0004613:	83 d2 00             	adc    edx,0x0
c0004616:	89 c1                	mov    ecx,eax
c0004618:	89 d7                	mov    edi,edx
c000461a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004620:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004624:	89 ce                	mov    esi,ecx
c0004626:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000462a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000462e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004632:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004635:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004639:	89 04 24             	mov    DWORD PTR [esp],eax
c000463c:	b8 64 00 00 00       	mov    eax,0x64
c0004641:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004644:	b8 00 00 00 00       	mov    eax,0x0
c0004649:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000464d:	72 41                	jb     c0004690 <create_partition+0x165>
c000464f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004657:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000465b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004660:	01 c1                	add    ecx,eax
c0004662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004666:	f7 24 24             	mul    DWORD PTR [esp]
c0004669:	6a 00                	push   0x0
c000466b:	01 ca                	add    edx,ecx
c000466d:	6a 64                	push   0x64
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	e8 aa e7 01 00       	call   c0022e20 <__udivdi3>
c0004676:	83 c4 10             	add    esp,0x10
c0004679:	05 ff 07 00 00       	add    eax,0x7ff
c000467e:	83 d2 00             	adc    edx,0x0
c0004681:	89 c1                	mov    ecx,eax
c0004683:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004687:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000468d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004690:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004697:	01 f0                	add    eax,esi
c0004699:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000469d:	11 fa                	adc    edx,edi
c000469f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046a3:	19 d1                	sbb    ecx,edx
c00046a5:	73 2e                	jae    c00046d5 <create_partition+0x1aa>
c00046a7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046ab:	89 f8                	mov    eax,edi
c00046ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046b4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c0:	73 6b                	jae    c000472d <create_partition+0x202>
c00046c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046ca:	29 f0                	sub    eax,esi
c00046cc:	19 fa                	sbb    edx,edi
c00046ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046dc:	74 4f                	je     c000472d <create_partition+0x202>
c00046de:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046e1:	b9 10 00 00 00       	mov    ecx,0x10
c00046e6:	ba 10 3f 02 c0       	mov    edx,0xc0023f10
c00046eb:	e8 ea d4 ff ff       	call   c0001bda <mem_cpy>
c00046f0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046fd:	e8 2c db ff ff       	call   c000222e <make_rand>
c0004702:	89 f2                	mov    edx,esi
c0004704:	89 f9                	mov    ecx,edi
c0004706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000470a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000470e:	e8 c1 d4 ff ff       	call   c0001bd4 <st_qword>
c0004713:	03 34 24             	add    esi,DWORD PTR [esp]
c0004716:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000471a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000471e:	89 f2                	mov    edx,esi
c0004720:	89 f9                	mov    ecx,edi
c0004722:	83 c2 ff             	add    edx,0xffffffff
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	e8 a7 d4 ff ff       	call   c0001bd4 <st_qword>
c000472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004731:	83 e8 80             	sub    eax,0xffffff80
c0004734:	89 c5                	mov    ebp,eax
c0004736:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000473a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004740:	75 6b                	jne    c00047ad <create_partition+0x282>
c0004742:	45                   	inc    ebp
c0004743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004747:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000474c:	e8 39 da ff ff       	call   c000218a <crc32>
c0004751:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004757:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000475b:	75 e5                	jne    c0004742 <create_partition+0x217>
c000475d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004761:	31 d2                	xor    edx,edx
c0004763:	83 ec 0c             	sub    esp,0xc
c0004766:	c1 ed 09             	shr    ebp,0x9
c0004769:	6a 01                	push   0x1
c000476b:	8d 45 02             	lea    eax,[ebp+0x2]
c000476e:	52                   	push   edx
c000476f:	50                   	push   eax
c0004770:	53                   	push   ebx
c0004771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004775:	e8 ac d3 ff ff       	call   c0001b26 <disk_write>
c000477a:	83 c4 20             	add    esp,0x20
c000477d:	85 c0                	test   eax,eax
c000477f:	0f 85 d7 fd ff ff    	jne    c000455c <create_partition+0x31>
c0004785:	83 ec 0c             	sub    esp,0xc
c0004788:	31 d2                	xor    edx,edx
c000478a:	6a 01                	push   0x1
c000478c:	89 e8                	mov    eax,ebp
c000478e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004792:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004796:	52                   	push   edx
c0004797:	50                   	push   eax
c0004798:	53                   	push   ebx
c0004799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479d:	e8 84 d3 ff ff       	call   c0001b26 <disk_write>
c00047a2:	83 c4 20             	add    esp,0x20
c00047a5:	85 c0                	test   eax,eax
c00047a7:	0f 85 af fd ff ff    	jne    c000455c <create_partition+0x31>
c00047ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047b5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ba:	74 0d                	je     c00047c9 <create_partition+0x29e>
c00047bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047c4:	e9 12 fe ff ff       	jmp    c00045db <create_partition+0xb0>
c00047c9:	31 d2                	xor    edx,edx
c00047cb:	b9 00 02 00 00       	mov    ecx,0x200
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047d5:	e8 15 d4 ff ff       	call   c0001bef <mem_set>
c00047da:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047dd:	b9 10 00 00 00       	mov    ecx,0x10
c00047e2:	ba 00 3e 02 c0       	mov    edx,0xc0023e00
c00047e7:	89 d8                	mov    eax,ebx
c00047e9:	e8 ec d3 ff ff       	call   c0001bda <mem_cpy>
c00047ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047f2:	8d 43 58             	lea    eax,[ebx+0x58]
c00047f5:	f7 d2                	not    edx
c00047f7:	e8 d5 d3 ff ff       	call   c0001bd1 <st_dword>
c00047fc:	8d 43 18             	lea    eax,[ebx+0x18]
c00047ff:	31 c9                	xor    ecx,ecx
c0004801:	89 04 24             	mov    DWORD PTR [esp],eax
c0004804:	ba 01 00 00 00       	mov    edx,0x1
c0004809:	e8 c6 d3 ff ff       	call   c0001bd4 <st_qword>
c000480e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004812:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004816:	83 c2 ff             	add    edx,0xffffffff
c0004819:	89 e8                	mov    eax,ebp
c000481b:	83 d1 ff             	adc    ecx,0xffffffff
c000481e:	e8 b1 d3 ff ff       	call   c0001bd4 <st_qword>
c0004823:	31 c9                	xor    ecx,ecx
c0004825:	8d 43 28             	lea    eax,[ebx+0x28]
c0004828:	ba 22 00 00 00       	mov    edx,0x22
c000482d:	e8 a2 d3 ff ff       	call   c0001bd4 <st_qword>
c0004832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004836:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000483a:	83 c2 de             	add    edx,0xffffffde
c000483d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004840:	83 d1 ff             	adc    ecx,0xffffffff
c0004843:	31 f6                	xor    esi,esi
c0004845:	e8 8a d3 ff ff       	call   c0001bd4 <st_qword>
c000484a:	8d 43 54             	lea    eax,[ebx+0x54]
c000484d:	ba 80 00 00 00       	mov    edx,0x80
c0004852:	e8 7a d3 ff ff       	call   c0001bd1 <st_dword>
c0004857:	8d 43 50             	lea    eax,[ebx+0x50]
c000485a:	ba 80 00 00 00       	mov    edx,0x80
c000485f:	e8 6d d3 ff ff       	call   c0001bd1 <st_dword>
c0004864:	ba 02 00 00 00       	mov    edx,0x2
c0004869:	89 f8                	mov    eax,edi
c000486b:	e8 61 d3 ff ff       	call   c0001bd1 <st_dword>
c0004870:	8d 53 38             	lea    edx,[ebx+0x38]
c0004873:	b9 10 00 00 00       	mov    ecx,0x10
c0004878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000487c:	e8 ad d9 ff ff       	call   c000222e <make_rand>
c0004881:	83 c8 ff             	or     eax,0xffffffff
c0004884:	46                   	inc    esi
c0004885:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000488a:	e8 fb d8 ff ff       	call   c000218a <crc32>
c000488f:	83 fe 5c             	cmp    esi,0x5c
c0004892:	75 f0                	jne    c0004884 <create_partition+0x359>
c0004894:	f7 d0                	not    eax
c0004896:	8d 73 10             	lea    esi,[ebx+0x10]
c0004899:	89 c2                	mov    edx,eax
c000489b:	89 f0                	mov    eax,esi
c000489d:	e8 2f d3 ff ff       	call   c0001bd1 <st_dword>
c00048a2:	83 ec 0c             	sub    esp,0xc
c00048a5:	6a 01                	push   0x1
c00048a7:	6a 00                	push   0x0
c00048a9:	6a 01                	push   0x1
c00048ab:	53                   	push   ebx
c00048ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048b0:	e8 71 d2 ff ff       	call   c0001b26 <disk_write>
c00048b5:	83 c4 20             	add    esp,0x20
c00048b8:	85 c0                	test   eax,eax
c00048ba:	0f 85 9c fc ff ff    	jne    c000455c <create_partition+0x31>
c00048c0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c8:	83 c2 ff             	add    edx,0xffffffff
c00048cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048ce:	83 d1 ff             	adc    ecx,0xffffffff
c00048d1:	e8 fe d2 ff ff       	call   c0001bd4 <st_qword>
c00048d6:	ba 01 00 00 00       	mov    edx,0x1
c00048db:	31 c9                	xor    ecx,ecx
c00048dd:	89 e8                	mov    eax,ebp
c00048df:	e8 f0 d2 ff ff       	call   c0001bd4 <st_qword>
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048ee:	31 ff                	xor    edi,edi
c00048f0:	e8 df d2 ff ff       	call   c0001bd4 <st_qword>
c00048f5:	89 f0                	mov    eax,esi
c00048f7:	31 d2                	xor    edx,edx
c00048f9:	e8 d3 d2 ff ff       	call   c0001bd1 <st_dword>
c00048fe:	83 c8 ff             	or     eax,0xffffffff
c0004901:	47                   	inc    edi
c0004902:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004907:	e8 7e d8 ff ff       	call   c000218a <crc32>
c000490c:	83 ff 5c             	cmp    edi,0x5c
c000490f:	75 f0                	jne    c0004901 <create_partition+0x3d6>
c0004911:	f7 d0                	not    eax
c0004913:	89 c2                	mov    edx,eax
c0004915:	89 f0                	mov    eax,esi
c0004917:	e8 b5 d2 ff ff       	call   c0001bd1 <st_dword>
c000491c:	83 ec 0c             	sub    esp,0xc
c000491f:	6a 01                	push   0x1
c0004921:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004925:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004929:	83 c0 ff             	add    eax,0xffffffff
c000492c:	83 d2 ff             	adc    edx,0xffffffff
c000492f:	52                   	push   edx
c0004930:	50                   	push   eax
c0004931:	53                   	push   ebx
c0004932:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004936:	e8 eb d1 ff ff       	call   c0001b26 <disk_write>
c000493b:	83 c4 20             	add    esp,0x20
c000493e:	85 c0                	test   eax,eax
c0004940:	0f 85 16 fc ff ff    	jne    c000455c <create_partition+0x31>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	b9 00 02 00 00       	mov    ecx,0x200
c000494f:	e8 9b d2 ff ff       	call   c0001bef <mem_set>
c0004954:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	ba 10 3e 02 c0       	mov    edx,0xc0023e10
c0004964:	e8 71 d2 ff ff       	call   c0001bda <mem_cpy>
c0004969:	e9 21 01 00 00       	jmp    c0004a8f <create_partition+0x564>
c000496e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004972:	b9 05 00 00 00       	mov    ecx,0x5
c0004977:	89 04 24             	mov    DWORD PTR [esp],eax
c000497a:	bf 08 00 00 00       	mov    edi,0x8
c000497f:	89 f8                	mov    eax,edi
c0004981:	31 d2                	xor    edx,edx
c0004983:	0f b6 f0             	movzx  esi,al
c0004986:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004989:	f7 f6                	div    esi
c000498b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004990:	76 0a                	jbe    c000499c <create_partition+0x471>
c0004992:	d1 e7                	shl    edi,1
c0004994:	49                   	dec    ecx
c0004995:	75 e8                	jne    c000497f <create_partition+0x454>
c0004997:	bf ff ff ff ff       	mov    edi,0xffffffff
c000499c:	b9 00 02 00 00       	mov    ecx,0x200
c00049a1:	31 d2                	xor    edx,edx
c00049a3:	89 d8                	mov    eax,ebx
c00049a5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049ab:	e8 3f d2 ff ff       	call   c0001bef <mem_set>
c00049b0:	b9 64 00 00 00       	mov    ecx,0x64
c00049b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b8:	31 d2                	xor    edx,edx
c00049ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049c2:	f7 f1                	div    ecx
c00049c4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049cd:	89 f8                	mov    eax,edi
c00049cf:	0f b6 c0             	movzx  eax,al
c00049d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049d6:	e9 80 00 00 00       	jmp    c0004a5b <create_partition+0x530>
c00049db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049de:	29 cf                	sub    edi,ecx
c00049e0:	89 ca                	mov    edx,ecx
c00049e2:	89 f0                	mov    eax,esi
c00049e4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e9:	e8 e3 d1 ff ff       	call   c0001bd1 <st_dword>
c00049ee:	8d 46 04             	lea    eax,[esi+0x4]
c00049f1:	89 fa                	mov    edx,edi
c00049f3:	83 c6 10             	add    esi,0x10
c00049f6:	e8 d6 d1 ff ff       	call   c0001bd1 <st_dword>
c00049fb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049ff:	31 d2                	xor    edx,edx
c0004a01:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a04:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a08:	89 c8                	mov    eax,ecx
c0004a0a:	01 f9                	add    ecx,edi
c0004a0c:	f7 f5                	div    ebp
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	31 d2                	xor    edx,edx
c0004a12:	45                   	inc    ebp
c0004a13:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a17:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a1a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a1d:	89 c2                	mov    edx,eax
c0004a1f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a22:	c1 ea 02             	shr    edx,0x2
c0004a25:	83 e2 c0             	and    edx,0xffffffc0
c0004a28:	09 ea                	or     edx,ebp
c0004a2a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a2f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a32:	31 d2                	xor    edx,edx
c0004a34:	f7 f5                	div    ebp
c0004a36:	89 d7                	mov    edi,edx
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	47                   	inc    edi
c0004a3b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a3f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a42:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a45:	89 c5                	mov    ebp,eax
c0004a47:	c1 ed 02             	shr    ebp,0x2
c0004a4a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a4d:	09 ef                	or     edi,ebp
c0004a4f:	89 fa                	mov    edx,edi
c0004a51:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a54:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a59:	74 34                	je     c0004a8f <create_partition+0x564>
c0004a5b:	85 c9                	test   ecx,ecx
c0004a5d:	74 30                	je     c0004a8f <create_partition+0x564>
c0004a5f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a62:	76 2b                	jbe    c0004a8f <create_partition+0x564>
c0004a64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a6c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a6f:	83 ff 64             	cmp    edi,0x64
c0004a72:	76 4b                	jbe    c0004abf <create_partition+0x594>
c0004a74:	89 f8                	mov    eax,edi
c0004a76:	01 c8                	add    eax,ecx
c0004a78:	0f 82 5d ff ff ff    	jb     c00049db <create_partition+0x4b0>
c0004a7e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a81:	0f 87 54 ff ff ff    	ja     c00049db <create_partition+0x4b0>
c0004a87:	85 ff                	test   edi,edi
c0004a89:	0f 85 51 ff ff ff    	jne    c00049e0 <create_partition+0x4b5>
c0004a8f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a9a:	e8 2e d1 ff ff       	call   c0001bcd <st_word>
c0004a9f:	83 ec 0c             	sub    esp,0xc
c0004aa2:	6a 01                	push   0x1
c0004aa4:	6a 00                	push   0x0
c0004aa6:	6a 00                	push   0x0
c0004aa8:	53                   	push   ebx
c0004aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aad:	e8 74 d0 ff ff       	call   c0001b26 <disk_write>
c0004ab2:	83 c4 20             	add    esp,0x20
c0004ab5:	85 c0                	test   eax,eax
c0004ab7:	0f 95 c0             	setne  al
c0004aba:	0f b6 c0             	movzx  eax,al
c0004abd:	eb 0e                	jmp    c0004acd <create_partition+0x5a2>
c0004abf:	74 07                	je     c0004ac8 <create_partition+0x59d>
c0004ac1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ac6:	eb ac                	jmp    c0004a74 <create_partition+0x549>
c0004ac8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004acb:	eb a7                	jmp    c0004a74 <create_partition+0x549>
c0004acd:	83 c4 5c             	add    esp,0x5c
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	5d                   	pop    ebp
c0004ad4:	c3                   	ret    

c0004ad5 <get_fileinfo>:
c0004ad5:	55                   	push   ebp
c0004ad6:	57                   	push   edi
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 1c             	sub    esp,0x1c
c0004adc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ade:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ae2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ae6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004aec:	0f 84 dc 01 00 00    	je     c0004cce <get_fileinfo+0x1f9>
c0004af2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004af5:	75 0f                	jne    c0004b06 <get_fileinfo+0x31>
c0004af7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004afa:	83 c4 1c             	add    esp,0x1c
c0004afd:	5b                   	pop    ebx
c0004afe:	5e                   	pop    esi
c0004aff:	5f                   	pop    edi
c0004b00:	5d                   	pop    ebp
c0004b01:	e9 58 d5 ff ff       	jmp    c000205e <get_xfileinfo>
c0004b06:	89 d3                	mov    ebx,edx
c0004b08:	89 c6                	mov    esi,eax
c0004b0a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b0e:	74 6a                	je     c0004b7a <get_fileinfo+0xa5>
c0004b10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b18:	31 ed                	xor    ebp,ebp
c0004b1a:	31 ff                	xor    edi,edi
c0004b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b27:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b2b:	66 85 d2             	test   dx,dx
c0004b2e:	74 3e                	je     c0004b6e <get_fileinfo+0x99>
c0004b30:	66 85 ed             	test   bp,bp
c0004b33:	75 0c                	jne    c0004b41 <get_fileinfo+0x6c>
c0004b35:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b3b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b3f:	76 22                	jbe    c0004b63 <get_fileinfo+0x8e>
c0004b41:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b46:	89 e8                	mov    eax,ebp
c0004b48:	29 f9                	sub    ecx,edi
c0004b4a:	c1 e0 10             	shl    eax,0x10
c0004b4d:	09 d0                	or     eax,edx
c0004b4f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b53:	e8 a3 d1 ff ff       	call   c0001cfb <put_utf>
c0004b58:	84 c0                	test   al,al
c0004b5a:	74 10                	je     c0004b6c <get_fileinfo+0x97>
c0004b5c:	0f b6 c0             	movzx  eax,al
c0004b5f:	31 d2                	xor    edx,edx
c0004b61:	01 c7                	add    edi,eax
c0004b63:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b68:	89 d5                	mov    ebp,edx
c0004b6a:	eb b0                	jmp    c0004b1c <get_fileinfo+0x47>
c0004b6c:	31 ff                	xor    edi,edi
c0004b6e:	66 85 ed             	test   bp,bp
c0004b71:	74 02                	je     c0004b75 <get_fileinfo+0xa0>
c0004b73:	31 ff                	xor    edi,edi
c0004b75:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b7a:	31 ff                	xor    edi,edi
c0004b7c:	31 c9                	xor    ecx,ecx
c0004b7e:	83 f9 0a             	cmp    ecx,0xa
c0004b81:	0f 87 ad 00 00 00    	ja     c0004c34 <get_fileinfo+0x15f>
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b8d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b91:	66 83 fa 20          	cmp    dx,0x20
c0004b95:	0f 84 92 00 00 00    	je     c0004c2d <get_fileinfo+0x158>
c0004b9b:	66 83 fa 05          	cmp    dx,0x5
c0004b9f:	75 05                	jne    c0004ba6 <get_fileinfo+0xd1>
c0004ba1:	ba e5 00 00 00       	mov    edx,0xe5
c0004ba6:	83 ff 0b             	cmp    edi,0xb
c0004ba9:	77 0b                	ja     c0004bb6 <get_fileinfo+0xe1>
c0004bab:	83 fd 09             	cmp    ebp,0x9
c0004bae:	75 06                	jne    c0004bb6 <get_fileinfo+0xe1>
c0004bb0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bb5:	47                   	inc    edi
c0004bb6:	0f b7 c2             	movzx  eax,dx
c0004bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbd:	e8 6d d0 ff ff       	call   c0001c2f <dbc_1st>
c0004bc2:	85 c0                	test   eax,eax
c0004bc4:	74 2f                	je     c0004bf5 <get_fileinfo+0x120>
c0004bc6:	83 fd 08             	cmp    ebp,0x8
c0004bc9:	74 2a                	je     c0004bf5 <get_fileinfo+0x120>
c0004bcb:	83 fd 0b             	cmp    ebp,0xb
c0004bce:	74 25                	je     c0004bf5 <get_fileinfo+0x120>
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bd7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bdb:	e8 52 d0 ff ff       	call   c0001c32 <dbc_2nd>
c0004be0:	85 c0                	test   eax,eax
c0004be2:	74 11                	je     c0004bf5 <get_fileinfo+0x120>
c0004be4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bed:	c1 e2 08             	shl    edx,0x8
c0004bf0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004bf3:	09 c2                	or     edx,eax
c0004bf5:	0f b7 d2             	movzx  edx,dx
c0004bf8:	50                   	push   eax
c0004bf9:	50                   	push   eax
c0004bfa:	68 b5 01 00 00       	push   0x1b5
c0004bff:	52                   	push   edx
c0004c00:	e8 87 3a 00 00       	call   c000868c <ff_oem2uni>
c0004c05:	83 c4 10             	add    esp,0x10
c0004c08:	66 85 c0             	test   ax,ax
c0004c0b:	75 04                	jne    c0004c11 <get_fileinfo+0x13c>
c0004c0d:	31 ff                	xor    edi,edi
c0004c0f:	eb 23                	jmp    c0004c34 <get_fileinfo+0x15f>
c0004c11:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c16:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c1a:	29 f9                	sub    ecx,edi
c0004c1c:	0f b7 c0             	movzx  eax,ax
c0004c1f:	e8 d7 d0 ff ff       	call   c0001cfb <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 e5                	je     c0004c0d <get_fileinfo+0x138>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	01 c7                	add    edi,eax
c0004c2d:	89 e9                	mov    ecx,ebp
c0004c2f:	e9 4a ff ff ff       	jmp    c0004b7e <get_fileinfo+0xa9>
c0004c34:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c39:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c3d:	75 54                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c3f:	85 ff                	test   edi,edi
c0004c41:	75 0b                	jne    c0004c4e <get_fileinfo+0x179>
c0004c43:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c47:	ba 01 00 00 00       	mov    edx,0x1
c0004c4c:	eb 33                	jmp    c0004c81 <get_fileinfo+0x1ac>
c0004c4e:	b1 08                	mov    cl,0x8
c0004c50:	31 d2                	xor    edx,edx
c0004c52:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c58:	84 c0                	test   al,al
c0004c5a:	74 25                	je     c0004c81 <get_fileinfo+0x1ac>
c0004c5c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c60:	74 16                	je     c0004c78 <get_fileinfo+0x1a3>
c0004c62:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c65:	66 83 ff 19          	cmp    di,0x19
c0004c69:	77 0f                	ja     c0004c7a <get_fileinfo+0x1a5>
c0004c6b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c6e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c71:	74 07                	je     c0004c7a <get_fileinfo+0x1a5>
c0004c73:	83 c0 20             	add    eax,0x20
c0004c76:	eb 02                	jmp    c0004c7a <get_fileinfo+0x1a5>
c0004c78:	b1 10                	mov    cl,0x10
c0004c7a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c7e:	42                   	inc    edx
c0004c7f:	eb d1                	jmp    c0004c52 <get_fileinfo+0x17d>
c0004c81:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c89:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c8d:	75 04                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c8f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c96:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c99:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	83 c0 1c             	add    eax,0x1c
c0004ca2:	e8 c1 ce ff ff       	call   c0001b68 <ld_dword>
c0004ca7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cae:	89 03                	mov    DWORD PTR [ebx],eax
c0004cb0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb3:	83 c0 16             	add    eax,0x16
c0004cb6:	e8 a0 ce ff ff       	call   c0001b5b <ld_word>
c0004cbb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cbf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc2:	83 c0 18             	add    eax,0x18
c0004cc5:	e8 91 ce ff ff       	call   c0001b5b <ld_word>
c0004cca:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cce:	83 c4 1c             	add    esp,0x1c
c0004cd1:	5b                   	pop    ebx
c0004cd2:	5e                   	pop    esi
c0004cd3:	5f                   	pop    edi
c0004cd4:	5d                   	pop    ebp
c0004cd5:	c3                   	ret    

c0004cd6 <ld_clust.isra.0>:
c0004cd6:	56                   	push   esi
c0004cd7:	89 c6                	mov    esi,eax
c0004cd9:	53                   	push   ebx
c0004cda:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cdd:	89 d3                	mov    ebx,edx
c0004cdf:	e8 77 ce ff ff       	call   c0001b5b <ld_word>
c0004ce4:	0f b7 c8             	movzx  ecx,ax
c0004ce7:	89 f0                	mov    eax,esi
c0004ce9:	3c 03                	cmp    al,0x3
c0004ceb:	75 0d                	jne    c0004cfa <ld_clust.isra.0+0x24>
c0004ced:	8d 43 14             	lea    eax,[ebx+0x14]
c0004cf0:	e8 66 ce ff ff       	call   c0001b5b <ld_word>
c0004cf5:	c1 e0 10             	shl    eax,0x10
c0004cf8:	09 c1                	or     ecx,eax
c0004cfa:	89 c8                	mov    eax,ecx
c0004cfc:	5b                   	pop    ebx
c0004cfd:	5e                   	pop    esi
c0004cfe:	c3                   	ret    

c0004cff <st_clust.isra.1>:
c0004cff:	56                   	push   esi
c0004d00:	89 c6                	mov    esi,eax
c0004d02:	53                   	push   ebx
c0004d03:	89 d3                	mov    ebx,edx
c0004d05:	0f b7 d1             	movzx  edx,cx
c0004d08:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d0b:	e8 bd ce ff ff       	call   c0001bcd <st_word>
c0004d10:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d13:	75 0f                	jne    c0004d24 <st_clust.isra.1+0x25>
c0004d15:	c1 e9 10             	shr    ecx,0x10
c0004d18:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d1b:	89 ca                	mov    edx,ecx
c0004d1d:	5b                   	pop    ebx
c0004d1e:	5e                   	pop    esi
c0004d1f:	e9 a9 ce ff ff       	jmp    c0001bcd <st_word>
c0004d24:	5b                   	pop    ebx
c0004d25:	5e                   	pop    esi
c0004d26:	c3                   	ret    

c0004d27 <init_alloc_info.isra.2>:
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	89 d3                	mov    ebx,edx
c0004d2d:	51                   	push   ecx
c0004d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d30:	83 c0 34             	add    eax,0x34
c0004d33:	e8 30 ce ff ff       	call   c0001b68 <ld_dword>
c0004d38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d3d:	83 c0 38             	add    eax,0x38
c0004d40:	e8 3b ce ff ff       	call   c0001b80 <ld_qword>
c0004d45:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d48:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d57:	83 e0 02             	and    eax,0x2
c0004d5a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d5d:	5b                   	pop    ebx
c0004d5e:	5b                   	pop    ebx
c0004d5f:	5e                   	pop    esi
c0004d60:	c3                   	ret    

c0004d61 <follow_path>:
c0004d61:	56                   	push   esi
c0004d62:	53                   	push   ebx
c0004d63:	89 c3                	mov    ebx,eax
c0004d65:	83 ec 14             	sub    esp,0x14
c0004d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d6c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d72:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d74:	80 fa 5c             	cmp    dl,0x5c
c0004d77:	75 07                	jne    c0004d80 <follow_path+0x1f>
c0004d79:	40                   	inc    eax
c0004d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7e:	eb ee                	jmp    c0004d6e <follow_path+0xd>
c0004d80:	80 fa 2f             	cmp    dl,0x2f
c0004d83:	74 f4                	je     c0004d79 <follow_path+0x18>
c0004d85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d8c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d93:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d96:	77 52                	ja     c0004dea <follow_path+0x89>
c0004d98:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d9c:	31 d2                	xor    edx,edx
c0004d9e:	89 d8                	mov    eax,ebx
c0004da0:	e8 12 e3 ff ff       	call   c00030b7 <dir_sdi>
c0004da5:	eb 7c                	jmp    c0004e23 <follow_path+0xc2>
c0004da7:	89 d8                	mov    eax,ebx
c0004da9:	e8 6e f2 ff ff       	call   c000401c <dir_find>
c0004dae:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004db1:	85 c0                	test   eax,eax
c0004db3:	75 46                	jne    c0004dfb <follow_path+0x9a>
c0004db5:	80 e2 04             	and    dl,0x4
c0004db8:	75 69                	jne    c0004e23 <follow_path+0xc2>
c0004dba:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dbe:	74 5e                	je     c0004e1e <follow_path+0xbd>
c0004dc0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dc2:	3c 04                	cmp    al,0x4
c0004dc4:	75 41                	jne    c0004e07 <follow_path+0xa6>
c0004dc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dcd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dd3:	30 c0                	xor    al,al
c0004dd5:	09 d0                	or     eax,edx
c0004dd7:	89 da                	mov    edx,ebx
c0004dd9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ddc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ddf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004de2:	8d 46 10             	lea    eax,[esi+0x10]
c0004de5:	e8 3d ff ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004dea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dee:	89 d8                	mov    eax,ebx
c0004df0:	e8 a9 ed ff ff       	call   c0003b9e <create_name>
c0004df5:	85 c0                	test   eax,eax
c0004df7:	74 ae                	je     c0004da7 <follow_path+0x46>
c0004df9:	eb 28                	jmp    c0004e23 <follow_path+0xc2>
c0004dfb:	83 f8 04             	cmp    eax,0x4
c0004dfe:	75 23                	jne    c0004e23 <follow_path+0xc2>
c0004e00:	80 e2 04             	and    dl,0x4
c0004e03:	74 19                	je     c0004e1e <follow_path+0xbd>
c0004e05:	eb 1c                	jmp    c0004e23 <follow_path+0xc2>
c0004e07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e0a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e10:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e14:	e8 bd fe ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0004e19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e1c:	eb cc                	jmp    c0004dea <follow_path+0x89>
c0004e1e:	b8 05 00 00 00       	mov    eax,0x5
c0004e23:	83 c4 14             	add    esp,0x14
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <f_mount>:
c0004e29:	53                   	push   ebx
c0004e2a:	83 ec 18             	sub    esp,0x18
c0004e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e3d:	e8 fb d2 ff ff       	call   c000213d <get_ldnumber>
c0004e42:	89 c2                	mov    edx,eax
c0004e44:	b8 0b 00 00 00       	mov    eax,0xb
c0004e49:	85 d2                	test   edx,edx
c0004e4b:	78 39                	js     c0004e86 <f_mount+0x5d>
c0004e4d:	8b 04 95 80 89 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7680]
c0004e54:	85 c0                	test   eax,eax
c0004e56:	74 03                	je     c0004e5b <f_mount+0x32>
c0004e58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e5f:	85 c0                	test   eax,eax
c0004e61:	74 03                	je     c0004e66 <f_mount+0x3d>
c0004e63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6a:	89 04 95 80 89 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7680],eax
c0004e71:	31 c0                	xor    eax,eax
c0004e73:	84 db                	test   bl,bl
c0004e75:	74 0f                	je     c0004e86 <f_mount+0x5d>
c0004e77:	31 c9                	xor    ecx,ecx
c0004e79:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e81:	e8 65 d7 ff ff       	call   c00025eb <mount_volume>
c0004e86:	83 c4 18             	add    esp,0x18
c0004e89:	5b                   	pop    ebx
c0004e8a:	c3                   	ret    

c0004e8b <f_open>:
c0004e8b:	55                   	push   ebp
c0004e8c:	bd 09 00 00 00       	mov    ebp,0x9
c0004e91:	57                   	push   edi
c0004e92:	56                   	push   esi
c0004e93:	53                   	push   ebx
c0004e94:	83 ec 7c             	sub    esp,0x7c
c0004e97:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e9e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ea5:	85 db                	test   ebx,ebx
c0004ea7:	0f 84 10 04 00 00    	je     c00052bd <f_open+0x432>
c0004ead:	89 fe                	mov    esi,edi
c0004eaf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eb3:	83 e6 3f             	and    esi,0x3f
c0004eb6:	89 f0                	mov    eax,esi
c0004eb8:	0f b6 c8             	movzx  ecx,al
c0004ebb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ec2:	e8 24 d7 ff ff       	call   c00025eb <mount_volume>
c0004ec7:	89 c5                	mov    ebp,eax
c0004ec9:	85 c0                	test   eax,eax
c0004ecb:	0f 85 e6 03 00 00    	jne    c00052b7 <f_open+0x42c>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ede:	83 ec 0c             	sub    esp,0xc
c0004ee1:	68 60 04 00 00       	push   0x460
c0004ee6:	e8 d9 36 00 00       	call   c00085c4 <ff_memalloc>
c0004eeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eef:	83 c4 10             	add    esp,0x10
c0004ef2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ef7:	0f 84 c0 03 00 00    	je     c00052bd <f_open+0x432>
c0004efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f05:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f0b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f0e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f11:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f18:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f1c:	e8 40 fe ff ff       	call   c0004d61 <follow_path>
c0004f21:	89 c5                	mov    ebp,eax
c0004f23:	85 c0                	test   eax,eax
c0004f25:	75 0c                	jne    c0004f33 <f_open+0xa8>
c0004f27:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f2c:	79 05                	jns    c0004f33 <f_open+0xa8>
c0004f2e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f33:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f39:	0f 84 84 01 00 00    	je     c00050c3 <f_open+0x238>
c0004f3f:	85 ed                	test   ebp,ebp
c0004f41:	74 20                	je     c0004f63 <f_open+0xd8>
c0004f43:	83 fd 04             	cmp    ebp,0x4
c0004f46:	0f 85 58 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f50:	83 ce 08             	or     esi,0x8
c0004f53:	e8 8a f2 ff ff       	call   c00041e2 <dir_register>
c0004f58:	89 c5                	mov    ebp,eax
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 2f                	je     c0004f8d <f_open+0x102>
c0004f5e:	e9 41 03 00 00       	jmp    c00052a4 <f_open+0x419>
c0004f63:	bd 07 00 00 00       	mov    ebp,0x7
c0004f68:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f6d:	0f 85 31 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f73:	bd 08 00 00 00       	mov    ebp,0x8
c0004f78:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f7e:	0f 85 20 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f84:	83 e7 08             	and    edi,0x8
c0004f87:	0f 84 65 01 00 00    	je     c00050f2 <f_open+0x267>
c0004f8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f91:	8a 02                	mov    al,BYTE PTR [edx]
c0004f93:	3c 04                	cmp    al,0x4
c0004f95:	0f 85 97 00 00 00    	jne    c0005032 <f_open+0x1a7>
c0004f9b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f9e:	89 13                	mov    DWORD PTR [ebx],edx
c0004fa0:	89 da                	mov    edx,ebx
c0004fa2:	e8 80 fd ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004fa7:	31 d2                	xor    edx,edx
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fb2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fb5:	83 c0 02             	add    eax,0x2
c0004fb8:	e8 32 cc ff ff       	call   c0001bef <mem_set>
c0004fbd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fc2:	31 d2                	xor    edx,edx
c0004fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fcb:	83 c0 26             	add    eax,0x26
c0004fce:	e8 1c cc ff ff       	call   c0001bef <mem_set>
c0004fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fda:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fde:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fe3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fe6:	83 c0 08             	add    eax,0x8
c0004fe9:	e8 e3 cb ff ff       	call   c0001bd1 <st_dword>
c0004fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ffd:	e8 b7 ea ff ff       	call   c0003ab9 <store_xdir>
c0005002:	89 c5                	mov    ebp,eax
c0005004:	85 c0                	test   eax,eax
c0005006:	0f 85 98 02 00 00    	jne    c00052a4 <f_open+0x419>
c000500c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500f:	85 d2                	test   edx,edx
c0005011:	0f 84 db 00 00 00    	je     c00050f2 <f_open+0x267>
c0005017:	31 c9                	xor    ecx,ecx
c0005019:	89 d8                	mov    eax,ebx
c000501b:	e8 8e e3 ff ff       	call   c00033ae <remove_chain>
c0005020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005024:	89 c5                	mov    ebp,eax
c0005026:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005029:	48                   	dec    eax
c000502a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000502d:	e9 b8 00 00 00       	jmp    c00050ea <f_open+0x25f>
c0005032:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005036:	89 ea                	mov    edx,ebp
c0005038:	e8 99 fc ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000503d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005042:	89 c7                	mov    edi,eax
c0005044:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005047:	e8 85 cb ff ff       	call   c0001bd1 <st_dword>
c000504c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005050:	31 c9                	xor    ecx,ecx
c0005052:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000505e:	e8 9c fc ff ff       	call   c0004cff <st_clust.isra.1>
c0005063:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005067:	31 d2                	xor    edx,edx
c0005069:	83 c0 1c             	add    eax,0x1c
c000506c:	e8 60 cb ff ff       	call   c0001bd1 <st_dword>
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	85 ff                	test   edi,edi
c0005077:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000507b:	74 75                	je     c00050f2 <f_open+0x267>
c000507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005081:	31 c9                	xor    ecx,ecx
c0005083:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005086:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000508d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005091:	89 fa                	mov    edx,edi
c0005093:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005097:	e8 12 e3 ff ff       	call   c00033ae <remove_chain>
c000509c:	89 c5                	mov    ebp,eax
c000509e:	85 c0                	test   eax,eax
c00050a0:	0f 85 fe 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	4f                   	dec    edi
c00050b3:	e8 81 d2 ff ff       	call   c0002339 <move_window>
c00050b8:	89 c5                	mov    ebp,eax
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050c1:	eb 27                	jmp    c00050ea <f_open+0x25f>
c00050c3:	85 ed                	test   ebp,ebp
c00050c5:	0f 85 d9 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050cb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050cf:	bd 04 00 00 00       	mov    ebp,0x4
c00050d4:	a8 10                	test   al,0x10
c00050d6:	0f 85 c8 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050dc:	83 e7 02             	and    edi,0x2
c00050df:	74 11                	je     c00050f2 <f_open+0x267>
c00050e1:	bd 07 00 00 00       	mov    ebp,0x7
c00050e6:	a8 01                	test   al,0x1
c00050e8:	eb 02                	jmp    c00050ec <f_open+0x261>
c00050ea:	85 ed                	test   ebp,ebp
c00050ec:	0f 85 b2 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050f2:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f8:	74 03                	je     c00050fd <f_open+0x272>
c00050fa:	83 ce 40             	or     esi,0x40
c00050fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005101:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005104:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005107:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000510a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000510d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005111:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005114:	8a 02                	mov    al,BYTE PTR [edx]
c0005116:	3c 04                	cmp    al,0x4
c0005118:	75 2a                	jne    c0005144 <f_open+0x2b9>
c000511a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000511e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005123:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000512a:	30 c0                	xor    al,al
c000512c:	09 c8                	or     eax,ecx
c000512e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005131:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005138:	8d 42 10             	lea    eax,[edx+0x10]
c000513b:	89 da                	mov    edx,ebx
c000513d:	e8 e5 fb ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005142:	eb 1c                	jmp    c0005160 <f_open+0x2d5>
c0005144:	89 fa                	mov    edx,edi
c0005146:	e8 8b fb ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000514b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000514e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005151:	e8 12 ca ff ff       	call   c0001b68 <ld_dword>
c0005156:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000515d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005164:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000516b:	89 03                	mov    DWORD PTR [ebx],eax
c000516d:	31 d2                	xor    edx,edx
c000516f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005173:	b9 00 02 00 00       	mov    ecx,0x200
c0005178:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000517c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005180:	89 f0                	mov    eax,esi
c0005182:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005189:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000518c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005193:	8d 43 50             	lea    eax,[ebx+0x50]
c0005196:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000519d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a8:	e8 42 ca ff ff       	call   c0001bef <mem_set>
c00051ad:	83 e6 20             	and    esi,0x20
c00051b0:	75 07                	jne    c00051b9 <f_open+0x32e>
c00051b2:	31 ed                	xor    ebp,ebp
c00051b4:	e9 eb 00 00 00       	jmp    c00052a4 <f_open+0x419>
c00051b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051cf:	74 e1                	je     c00051b2 <f_open+0x327>
c00051d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051dc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051e6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051ea:	31 ff                	xor    edi,edi
c00051ec:	c1 e5 09             	shl    ebp,0x9
c00051ef:	89 ee                	mov    esi,ebp
c00051f1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051f5:	89 f8                	mov    eax,edi
c00051f7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051fb:	73 22                	jae    c000521f <f_open+0x394>
c00051fd:	89 d8                	mov    eax,ebx
c00051ff:	e8 bd dc ff ff       	call   c0002ec1 <get_fat>
c0005204:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005208:	89 c2                	mov    edx,eax
c000520a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000520e:	83 f8 01             	cmp    eax,0x1
c0005211:	76 10                	jbe    c0005223 <f_open+0x398>
c0005213:	83 f8 ff             	cmp    eax,0xffffffff
c0005216:	75 d9                	jne    c00051f1 <f_open+0x366>
c0005218:	bd 01 00 00 00       	mov    ebp,0x1
c000521d:	eb 09                	jmp    c0005228 <f_open+0x39d>
c000521f:	31 ed                	xor    ebp,ebp
c0005221:	eb 05                	jmp    c0005228 <f_open+0x39d>
c0005223:	bd 02 00 00 00       	mov    ebp,0x2
c0005228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000522b:	85 ed                	test   ebp,ebp
c000522d:	75 75                	jne    c00052a4 <f_open+0x419>
c000522f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005233:	25 ff 01 00 00       	and    eax,0x1ff
c0005238:	0f 84 74 ff ff ff    	je     c00051b2 <f_open+0x327>
c000523e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005242:	bd 02 00 00 00       	mov    ebp,0x2
c0005247:	89 c8                	mov    eax,ecx
c0005249:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000524d:	e8 a2 cb ff ff       	call   c0001df4 <clst2sect>
c0005252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005256:	89 d7                	mov    edi,edx
c0005258:	09 c7                	or     edi,eax
c000525a:	74 48                	je     c00052a4 <f_open+0x419>
c000525c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005260:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005264:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000526c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005270:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005278:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000527b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000527f:	83 ec 0c             	sub    esp,0xc
c0005282:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005285:	6a 01                	push   0x1
c0005287:	52                   	push   edx
c0005288:	50                   	push   eax
c0005289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000528d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005291:	50                   	push   eax
c0005292:	e8 79 c8 ff ff       	call   c0001b10 <disk_read>
c0005297:	83 c4 20             	add    esp,0x20
c000529a:	85 c0                	test   eax,eax
c000529c:	0f 95 c0             	setne  al
c000529f:	0f b6 c0             	movzx  eax,al
c00052a2:	89 c5                	mov    ebp,eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052ab:	e8 2c 33 00 00       	call   c00085dc <ff_memfree>
c00052b0:	83 c4 10             	add    esp,0x10
c00052b3:	85 ed                	test   ebp,ebp
c00052b5:	74 06                	je     c00052bd <f_open+0x432>
c00052b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052bd:	83 c4 7c             	add    esp,0x7c
c00052c0:	89 e8                	mov    eax,ebp
c00052c2:	5b                   	pop    ebx
c00052c3:	5e                   	pop    esi
c00052c4:	5f                   	pop    edi
c00052c5:	5d                   	pop    ebp
c00052c6:	c3                   	ret    

c00052c7 <f_read>:
c00052c7:	55                   	push   ebp
c00052c8:	57                   	push   edi
c00052c9:	56                   	push   esi
c00052ca:	53                   	push   ebx
c00052cb:	83 ec 2c             	sub    esp,0x2c
c00052ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e0:	89 d8                	mov    eax,ebx
c00052e2:	e8 77 cf ff ff       	call   c000225e <validate>
c00052e7:	89 c5                	mov    ebp,eax
c00052e9:	85 c0                	test   eax,eax
c00052eb:	0f 85 4c 02 00 00    	jne    c000553d <f_read+0x276>
c00052f1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052f5:	85 ed                	test   ebp,ebp
c00052f7:	0f 85 40 02 00 00    	jne    c000553d <f_read+0x276>
c00052fd:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005301:	0f 84 31 02 00 00    	je     c0005538 <f_read+0x271>
c0005307:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005310:	bf 00 00 00 00       	mov    edi,0x0
c0005315:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005318:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000531c:	89 d1                	mov    ecx,edx
c000531e:	19 f9                	sbb    ecx,edi
c0005320:	0f 83 cf 00 00 00    	jae    c00053f5 <f_read+0x12e>
c0005326:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000532a:	e9 c6 00 00 00       	jmp    c00053f5 <f_read+0x12e>
c000532f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005332:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005335:	89 d0                	mov    eax,edx
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	0f 85 c9 01 00 00    	jne    c000550b <f_read+0x244>
c0005342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005346:	89 d6                	mov    esi,edx
c0005348:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000534c:	89 cf                	mov    edi,ecx
c000534e:	48                   	dec    eax
c000534f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005353:	21 f0                	and    eax,esi
c0005355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005359:	0f 84 a6 00 00 00    	je     c0005405 <f_read+0x13e>
c000535f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005363:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005366:	89 c8                	mov    eax,ecx
c0005368:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000536b:	e8 84 ca ff ff       	call   c0001df4 <clst2sect>
c0005370:	89 d7                	mov    edi,edx
c0005372:	09 c7                	or     edi,eax
c0005374:	0f 84 b4 00 00 00    	je     c000542e <f_read+0x167>
c000537a:	31 ff                	xor    edi,edi
c000537c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005380:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005383:	01 c6                	add    esi,eax
c0005385:	11 d7                	adc    edi,edx
c0005387:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000538f:	0f 86 fd 00 00 00    	jbe    c0005492 <f_read+0x1cb>
c0005395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000539d:	c1 e8 09             	shr    eax,0x9
c00053a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053a3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053a7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053aa:	39 c2                	cmp    edx,eax
c00053ac:	76 07                	jbe    c00053b5 <f_read+0xee>
c00053ae:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053bc:	57                   	push   edi
c00053bd:	56                   	push   esi
c00053be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 44 c7 ff ff       	call   c0001b10 <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	75 6e                	jne    c0005441 <f_read+0x17a>
c00053d3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053d7:	78 7e                	js     c0005457 <f_read+0x190>
c00053d9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053dc:	c1 e6 09             	shl    esi,0x9
c00053df:	31 ff                	xor    edi,edi
c00053e1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053ed:	01 30                	add    DWORD PTR [eax],esi
c00053ef:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053f2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053f5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053fa:	0f 85 2f ff ff ff    	jne    c000532f <f_read+0x68>
c0005400:	e9 38 01 00 00       	jmp    c000553d <f_read+0x276>
c0005405:	89 c8                	mov    eax,ecx
c0005407:	09 d0                	or     eax,edx
c0005409:	75 05                	jne    c0005410 <f_read+0x149>
c000540b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000540e:	eb 19                	jmp    c0005429 <f_read+0x162>
c0005410:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005414:	74 09                	je     c000541f <f_read+0x158>
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f8 c9 ff ff       	call   c0001e15 <clmt_clust>
c000541d:	eb 0a                	jmp    c0005429 <f_read+0x162>
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 d8                	mov    eax,ebx
c0005424:	e8 98 da ff ff       	call   c0002ec1 <get_fat>
c0005429:	83 f8 01             	cmp    eax,0x1
c000542c:	77 0e                	ja     c000543c <f_read+0x175>
c000542e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005432:	bd 02 00 00 00       	mov    ebp,0x2
c0005437:	e9 01 01 00 00       	jmp    c000553d <f_read+0x276>
c000543c:	83 f8 ff             	cmp    eax,0xffffffff
c000543f:	75 0e                	jne    c000544f <f_read+0x188>
c0005441:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005445:	bd 01 00 00 00       	mov    ebp,0x1
c000544a:	e9 ee 00 00 00       	jmp    c000553d <f_read+0x276>
c000544f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005452:	e9 08 ff ff ff       	jmp    c000535f <f_read+0x98>
c0005457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000545a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000545d:	29 f0                	sub    eax,esi
c000545f:	19 fa                	sbb    edx,edi
c0005461:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005464:	89 d7                	mov    edi,edx
c0005466:	ba 00 00 00 00       	mov    edx,0x0
c000546b:	89 f9                	mov    ecx,edi
c000546d:	19 d1                	sbb    ecx,edx
c000546f:	0f 83 64 ff ff ff    	jae    c00053d9 <f_read+0x112>
c0005475:	89 c7                	mov    edi,eax
c0005477:	8d 53 50             	lea    edx,[ebx+0x50]
c000547a:	c1 e7 09             	shl    edi,0x9
c000547d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005481:	b9 00 02 00 00       	mov    ecx,0x200
c0005486:	01 f8                	add    eax,edi
c0005488:	e8 4d c7 ff ff       	call   c0001bda <mem_cpy>
c000548d:	e9 47 ff ff ff       	jmp    c00053d9 <f_read+0x112>
c0005492:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005495:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005498:	89 04 24             	mov    DWORD PTR [esp],eax
c000549b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000549f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054a3:	75 05                	jne    c00054aa <f_read+0x1e3>
c00054a5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a8:	74 5b                	je     c0005505 <f_read+0x23e>
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b5:	79 2a                	jns    c00054e1 <f_read+0x21a>
c00054b7:	83 ec 0c             	sub    esp,0xc
c00054ba:	6a 01                	push   0x1
c00054bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 54 c6 ff ff       	call   c0001b26 <disk_write>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	0f 85 64 ff ff ff    	jne    c0005441 <f_read+0x17a>
c00054dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054e1:	83 ec 0c             	sub    esp,0xc
c00054e4:	6a 01                	push   0x1
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054f4:	50                   	push   eax
c00054f5:	e8 16 c6 ff ff       	call   c0001b10 <disk_read>
c00054fa:	83 c4 20             	add    esp,0x20
c00054fd:	85 c0                	test   eax,eax
c00054ff:	0f 85 3c ff ff ff    	jne    c0005441 <f_read+0x17a>
c0005505:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005508:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000550b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000550e:	ba 00 02 00 00       	mov    edx,0x200
c0005513:	25 ff 01 00 00       	and    eax,0x1ff
c0005518:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000551c:	29 c2                	sub    edx,eax
c000551e:	39 d6                	cmp    esi,edx
c0005520:	76 02                	jbe    c0005524 <f_read+0x25d>
c0005522:	89 d6                	mov    esi,edx
c0005524:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005528:	89 f1                	mov    ecx,esi
c000552a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000552e:	e8 a7 c6 ff ff       	call   c0001bda <mem_cpy>
c0005533:	e9 a7 fe ff ff       	jmp    c00053df <f_read+0x118>
c0005538:	bd 07 00 00 00       	mov    ebp,0x7
c000553d:	83 c4 2c             	add    esp,0x2c
c0005540:	89 e8                	mov    eax,ebp
c0005542:	5b                   	pop    ebx
c0005543:	5e                   	pop    esi
c0005544:	5f                   	pop    edi
c0005545:	5d                   	pop    ebp
c0005546:	c3                   	ret    

c0005547 <f_write>:
c0005547:	55                   	push   ebp
c0005548:	57                   	push   edi
c0005549:	56                   	push   esi
c000554a:	53                   	push   ebx
c000554b:	83 ec 2c             	sub    esp,0x2c
c000554e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005552:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000555c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005560:	89 d8                	mov    eax,ebx
c0005562:	e8 f7 cc ff ff       	call   c000225e <validate>
c0005567:	89 c5                	mov    ebp,eax
c0005569:	85 c0                	test   eax,eax
c000556b:	0f 85 86 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c0005571:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005575:	85 ed                	test   ebp,ebp
c0005577:	0f 85 7a 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c000557d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005581:	0f 84 6b 02 00 00    	je     c00057f2 <f_write+0x2ab>
c0005587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000558b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000558e:	0f 84 43 01 00 00    	je     c00056d7 <f_write+0x190>
c0005594:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005597:	89 c1                	mov    ecx,eax
c0005599:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000559d:	0f 83 34 01 00 00    	jae    c00056d7 <f_write+0x190>
c00055a3:	f7 d0                	not    eax
c00055a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a9:	e9 29 01 00 00       	jmp    c00056d7 <f_write+0x190>
c00055ae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055b1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055b4:	89 d0                	mov    eax,edx
c00055b6:	25 ff 01 00 00       	and    eax,0x1ff
c00055bb:	0f 85 00 02 00 00    	jne    c00057c1 <f_write+0x27a>
c00055c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c5:	89 d6                	mov    esi,edx
c00055c7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055cb:	89 cf                	mov    edi,ecx
c00055cd:	48                   	dec    eax
c00055ce:	0f ac fe 09          	shrd   esi,edi,0x9
c00055d2:	21 f0                	and    eax,esi
c00055d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d8:	0f 84 06 01 00 00    	je     c00056e4 <f_write+0x19d>
c00055de:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055e2:	0f 88 6e 01 00 00    	js     c0005756 <f_write+0x20f>
c00055e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ef:	89 c8                	mov    eax,ecx
c00055f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055f5:	e8 fa c7 ff ff       	call   c0001df4 <clst2sect>
c00055fa:	89 d1                	mov    ecx,edx
c00055fc:	09 c1                	or     ecx,eax
c00055fe:	0f 84 1c 01 00 00    	je     c0005720 <f_write+0x1d9>
c0005604:	31 ff                	xor    edi,edi
c0005606:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000560a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000560e:	01 c6                	add    esi,eax
c0005610:	11 d7                	adc    edi,edx
c0005612:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000561a:	0f 86 63 01 00 00    	jbe    c0005783 <f_write+0x23c>
c0005620:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005628:	c1 e8 09             	shr    eax,0x9
c000562b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000562f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005633:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005637:	39 c2                	cmp    edx,eax
c0005639:	76 08                	jbe    c0005643 <f_write+0xfc>
c000563b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000563f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000564a:	57                   	push   edi
c000564b:	56                   	push   esi
c000564c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005650:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005654:	50                   	push   eax
c0005655:	e8 cc c4 ff ff       	call   c0001b26 <disk_write>
c000565a:	83 c4 20             	add    esp,0x20
c000565d:	85 c0                	test   eax,eax
c000565f:	0f 85 ce 00 00 00    	jne    c0005733 <f_write+0x1ec>
c0005665:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005668:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000566b:	29 f0                	sub    eax,esi
c000566d:	19 fa                	sbb    edx,edi
c000566f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005673:	89 d7                	mov    edi,edx
c0005675:	ba 00 00 00 00       	mov    edx,0x0
c000567a:	89 f9                	mov    ecx,edi
c000567c:	19 d1                	sbb    ecx,edx
c000567e:	73 1c                	jae    c000569c <f_write+0x155>
c0005680:	89 c7                	mov    edi,eax
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	c1 e7 09             	shl    edi,0x9
c000568a:	8d 43 50             	lea    eax,[ebx+0x50]
c000568d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005691:	89 fa                	mov    edx,edi
c0005693:	e8 42 c5 ff ff       	call   c0001bda <mem_cpy>
c0005698:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000569c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056a0:	c1 e6 09             	shl    esi,0x9
c00056a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a7:	31 ff                	xor    edi,edi
c00056a9:	01 30                	add    DWORD PTR [eax],esi
c00056ab:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056af:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056b6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056bc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056bf:	89 c1                	mov    ecx,eax
c00056c1:	39 f2                	cmp    edx,esi
c00056c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056c6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c9:	19 f9                	sbb    ecx,edi
c00056cb:	73 04                	jae    c00056d1 <f_write+0x18a>
c00056cd:	89 f2                	mov    edx,esi
c00056cf:	89 f8                	mov    eax,edi
c00056d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056dc:	0f 85 cc fe ff ff    	jne    c00055ae <f_write+0x67>
c00056e2:	eb 2e                	jmp    c0005712 <f_write+0x1cb>
c00056e4:	89 c8                	mov    eax,ecx
c00056e6:	09 d0                	or     eax,edx
c00056e8:	75 0b                	jne    c00056f5 <f_write+0x1ae>
c00056ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ed:	31 d2                	xor    edx,edx
c00056ef:	85 c0                	test   eax,eax
c00056f1:	75 28                	jne    c000571b <f_write+0x1d4>
c00056f3:	eb 12                	jmp    c0005707 <f_write+0x1c0>
c00056f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f9:	74 09                	je     c0005704 <f_write+0x1bd>
c00056fb:	89 d8                	mov    eax,ebx
c00056fd:	e8 13 c7 ff ff       	call   c0001e15 <clmt_clust>
c0005702:	eb 0a                	jmp    c000570e <f_write+0x1c7>
c0005704:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005707:	89 d8                	mov    eax,ebx
c0005709:	e8 a1 da ff ff       	call   c00031af <create_chain>
c000570e:	85 c0                	test   eax,eax
c0005710:	75 09                	jne    c000571b <f_write+0x1d4>
c0005712:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005716:	e9 dc 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000571b:	83 f8 01             	cmp    eax,0x1
c000571e:	75 0e                	jne    c000572e <f_write+0x1e7>
c0005720:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005724:	bd 02 00 00 00       	mov    ebp,0x2
c0005729:	e9 c9 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000572e:	83 f8 ff             	cmp    eax,0xffffffff
c0005731:	75 0e                	jne    c0005741 <f_write+0x1fa>
c0005733:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005737:	bd 01 00 00 00       	mov    ebp,0x1
c000573c:	e9 b6 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c0005741:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005744:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005748:	0f 85 90 fe ff ff    	jne    c00055de <f_write+0x97>
c000574e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005751:	e9 88 fe ff ff       	jmp    c00055de <f_write+0x97>
c0005756:	83 ec 0c             	sub    esp,0xc
c0005759:	8d 43 50             	lea    eax,[ebx+0x50]
c000575c:	6a 01                	push   0x1
c000575e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005761:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005764:	50                   	push   eax
c0005765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005769:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000576d:	50                   	push   eax
c000576e:	e8 b3 c3 ff ff       	call   c0001b26 <disk_write>
c0005773:	83 c4 20             	add    esp,0x20
c0005776:	85 c0                	test   eax,eax
c0005778:	75 b9                	jne    c0005733 <f_write+0x1ec>
c000577a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000577e:	e9 65 fe ff ff       	jmp    c00055e8 <f_write+0xa1>
c0005783:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005786:	75 05                	jne    c000578d <f_write+0x246>
c0005788:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000578b:	74 2e                	je     c00057bb <f_write+0x274>
c000578d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005790:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005793:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005796:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005799:	73 20                	jae    c00057bb <f_write+0x274>
c000579b:	83 ec 0c             	sub    esp,0xc
c000579e:	8d 43 50             	lea    eax,[ebx+0x50]
c00057a1:	6a 01                	push   0x1
c00057a3:	57                   	push   edi
c00057a4:	56                   	push   esi
c00057a5:	50                   	push   eax
c00057a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057aa:	50                   	push   eax
c00057ab:	e8 60 c3 ff ff       	call   c0001b10 <disk_read>
c00057b0:	83 c4 20             	add    esp,0x20
c00057b3:	85 c0                	test   eax,eax
c00057b5:	0f 85 78 ff ff ff    	jne    c0005733 <f_write+0x1ec>
c00057bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057c4:	ba 00 02 00 00       	mov    edx,0x200
c00057c9:	25 ff 01 00 00       	and    eax,0x1ff
c00057ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057d2:	29 c2                	sub    edx,eax
c00057d4:	39 d6                	cmp    esi,edx
c00057d6:	76 02                	jbe    c00057da <f_write+0x293>
c00057d8:	89 d6                	mov    esi,edx
c00057da:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057de:	89 f1                	mov    ecx,esi
c00057e0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057e4:	e8 f1 c3 ff ff       	call   c0001bda <mem_cpy>
c00057e9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057ed:	e9 b1 fe ff ff       	jmp    c00056a3 <f_write+0x15c>
c00057f2:	bd 07 00 00 00       	mov    ebp,0x7
c00057f7:	83 c4 2c             	add    esp,0x2c
c00057fa:	89 e8                	mov    eax,ebp
c00057fc:	5b                   	pop    ebx
c00057fd:	5e                   	pop    esi
c00057fe:	5f                   	pop    edi
c00057ff:	5d                   	pop    ebp
c0005800:	c3                   	ret    

c0005801 <f_sync>:
c0005801:	56                   	push   esi
c0005802:	53                   	push   ebx
c0005803:	83 ec 64             	sub    esp,0x64
c0005806:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000580a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000580e:	89 d8                	mov    eax,ebx
c0005810:	e8 49 ca ff ff       	call   c000225e <validate>
c0005815:	85 c0                	test   eax,eax
c0005817:	0f 85 ba 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000581d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005820:	f6 c2 40             	test   dl,0x40
c0005823:	0f 84 ae 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c0005829:	84 d2                	test   dl,dl
c000582b:	79 33                	jns    c0005860 <f_sync+0x5f>
c000582d:	83 ec 0c             	sub    esp,0xc
c0005830:	8d 43 50             	lea    eax,[ebx+0x50]
c0005833:	6a 01                	push   0x1
c0005835:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005838:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000583b:	50                   	push   eax
c000583c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005840:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005844:	50                   	push   eax
c0005845:	e8 dc c2 ff ff       	call   c0001b26 <disk_write>
c000584a:	83 c4 20             	add    esp,0x20
c000584d:	89 c2                	mov    edx,eax
c000584f:	b8 01 00 00 00       	mov    eax,0x1
c0005854:	85 d2                	test   edx,edx
c0005856:	0f 85 7b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000585c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005864:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005867:	0f 85 11 01 00 00    	jne    c000597e <f_sync+0x17d>
c000586d:	89 d8                	mov    eax,ebx
c000586f:	e8 13 d6 ff ff       	call   c0002e87 <fill_first_frag>
c0005874:	85 c0                	test   eax,eax
c0005876:	0f 85 5b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000587c:	83 c9 ff             	or     ecx,0xffffffff
c000587f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005882:	89 d8                	mov    eax,ebx
c0005884:	e8 c9 d5 ff ff       	call   c0002e52 <fill_last_frag>
c0005889:	85 c0                	test   eax,eax
c000588b:	0f 85 46 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c0005891:	83 ec 0c             	sub    esp,0xc
c0005894:	68 60 04 00 00       	push   0x460
c0005899:	e8 26 2d 00 00       	call   c00085c4 <ff_memalloc>
c000589e:	83 c4 10             	add    esp,0x10
c00058a1:	89 c6                	mov    esi,eax
c00058a3:	b8 11 00 00 00       	mov    eax,0x11
c00058a8:	85 f6                	test   esi,esi
c00058aa:	0f 84 27 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c00058b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058c0:	89 da                	mov    edx,ebx
c00058c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058c6:	e8 af df ff ff       	call   c000387a <load_obj_xdir>
c00058cb:	85 c0                	test   eax,eax
c00058cd:	0f 85 95 00 00 00    	jne    c0005968 <f_sync+0x167>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058da:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058de:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058e1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058e4:	83 ca 01             	or     edx,0x1
c00058e7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058f0:	83 c0 34             	add    eax,0x34
c00058f3:	e8 d9 c2 ff ff       	call   c0001bd1 <st_dword>
c00058f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005902:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005905:	83 c0 38             	add    eax,0x38
c0005908:	e8 c7 c2 ff ff       	call   c0001bd4 <st_qword>
c000590d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005917:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000591a:	83 c0 28             	add    eax,0x28
c000591d:	e8 b2 c2 ff ff       	call   c0001bd4 <st_qword>
c0005922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005926:	ba 00 00 21 50       	mov    edx,0x50210000
c000592b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592e:	83 c0 0c             	add    eax,0xc
c0005931:	e8 9b c2 ff ff       	call   c0001bd1 <st_dword>
c0005936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000593a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000593d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005941:	31 d2                	xor    edx,edx
c0005943:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005946:	83 c0 10             	add    eax,0x10
c0005949:	e8 83 c2 ff ff       	call   c0001bd1 <st_dword>
c000594e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005952:	e8 62 e1 ff ff       	call   c0003ab9 <store_xdir>
c0005957:	85 c0                	test   eax,eax
c0005959:	75 0d                	jne    c0005968 <f_sync+0x167>
c000595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000595f:	e8 00 eb ff ff       	call   c0004464 <sync_fs>
c0005964:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000596c:	83 ec 0c             	sub    esp,0xc
c000596f:	56                   	push   esi
c0005970:	e8 67 2c 00 00       	call   c00085dc <ff_memfree>
c0005975:	83 c4 10             	add    esp,0x10
c0005978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000597c:	eb 59                	jmp    c00059d7 <f_sync+0x1d6>
c000597e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005981:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005984:	e8 b0 c9 ff ff       	call   c0002339 <move_window>
c0005989:	85 c0                	test   eax,eax
c000598b:	75 4a                	jne    c00059d7 <f_sync+0x1d6>
c000598d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005990:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005994:	89 f2                	mov    edx,esi
c0005996:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005999:	8b 03                	mov    eax,DWORD PTR [ebx]
c000599b:	e8 5f f3 ff ff       	call   c0004cff <st_clust.isra.1>
c00059a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059a3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059a6:	e8 26 c2 ff ff       	call   c0001bd1 <st_dword>
c00059ab:	8d 46 16             	lea    eax,[esi+0x16]
c00059ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00059b3:	e8 19 c2 ff ff       	call   c0001bd1 <st_dword>
c00059b8:	8d 46 12             	lea    eax,[esi+0x12]
c00059bb:	31 d2                	xor    edx,edx
c00059bd:	e8 0b c2 ff ff       	call   c0001bcd <st_word>
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ce:	e8 91 ea ff ff       	call   c0004464 <sync_fs>
c00059d3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059d7:	83 c4 64             	add    esp,0x64
c00059da:	5b                   	pop    ebx
c00059db:	5e                   	pop    esi
c00059dc:	c3                   	ret    

c00059dd <f_close>:
c00059dd:	53                   	push   ebx
c00059de:	83 ec 24             	sub    esp,0x24
c00059e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059e5:	53                   	push   ebx
c00059e6:	e8 16 fe ff ff       	call   c0005801 <f_sync>
c00059eb:	83 c4 10             	add    esp,0x10
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 15                	jne    c0005a07 <f_close+0x2a>
c00059f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 61 c8 ff ff       	call   c000225e <validate>
c00059fd:	85 c0                	test   eax,eax
c00059ff:	75 06                	jne    c0005a07 <f_close+0x2a>
c0005a01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a07:	83 c4 18             	add    esp,0x18
c0005a0a:	5b                   	pop    ebx
c0005a0b:	c3                   	ret    

c0005a0c <f_lseek>:
c0005a0c:	55                   	push   ebp
c0005a0d:	57                   	push   edi
c0005a0e:	56                   	push   esi
c0005a0f:	53                   	push   ebx
c0005a10:	83 ec 3c             	sub    esp,0x3c
c0005a13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a1b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a26:	89 d8                	mov    eax,ebx
c0005a28:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a2c:	e8 2d c8 ff ff       	call   c000225e <validate>
c0005a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a35:	85 c0                	test   eax,eax
c0005a37:	0f 85 7a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a3d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 6a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a51:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a54:	74 0c                	je     c0005a62 <f_lseek+0x56>
c0005a56:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a59:	85 c0                	test   eax,eax
c0005a5b:	75 1f                	jne    c0005a7c <f_lseek+0x70>
c0005a5d:	e9 b5 01 00 00       	jmp    c0005c17 <f_lseek+0x20b>
c0005a62:	83 c9 ff             	or     ecx,0xffffffff
c0005a65:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a68:	89 d8                	mov    eax,ebx
c0005a6a:	e8 e3 d3 ff ff       	call   c0002e52 <fill_last_frag>
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	74 e3                	je     c0005a56 <f_lseek+0x4a>
c0005a73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a77:	e9 3b 04 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005a7c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a81:	0f 85 ac 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a87:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a8b:	0f 85 a2 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a91:	8d 78 04             	lea    edi,[eax+0x4]
c0005a94:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a99:	be 02 00 00 00       	mov    esi,0x2
c0005a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005aa2:	85 ed                	test   ebp,ebp
c0005aa4:	74 73                	je     c0005b19 <f_lseek+0x10d>
c0005aa6:	89 e9                	mov    ecx,ebp
c0005aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aaf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ab2:	89 ca                	mov    edx,ecx
c0005ab4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab8:	89 d8                	mov    eax,ebx
c0005aba:	e8 02 d4 ff ff       	call   c0002ec1 <get_fat>
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	83 f8 01             	cmp    eax,0x1
c0005ac6:	77 11                	ja     c0005ad9 <f_lseek+0xcd>
c0005ac8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005acc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ad4:	e9 de 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005ad9:	83 f8 ff             	cmp    eax,0xffffffff
c0005adc:	75 11                	jne    c0005aef <f_lseek+0xe3>
c0005ade:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ae2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005aea:	e9 c8 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005aef:	8d 51 01             	lea    edx,[ecx+0x1]
c0005af2:	89 c1                	mov    ecx,eax
c0005af4:	39 c2                	cmp    edx,eax
c0005af6:	74 b7                	je     c0005aaf <f_lseek+0xa3>
c0005af8:	83 c6 02             	add    esi,0x2
c0005afb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005aff:	72 0b                	jb     c0005b0c <f_lseek+0x100>
c0005b01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b04:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b07:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b09:	83 c7 08             	add    edi,0x8
c0005b0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b10:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b13:	76 04                	jbe    c0005b19 <f_lseek+0x10d>
c0005b15:	89 c5                	mov    ebp,eax
c0005b17:	eb 8d                	jmp    c0005aa6 <f_lseek+0x9a>
c0005b19:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b1c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b20:	89 30                	mov    DWORD PTR [eax],esi
c0005b22:	0f 87 87 03 00 00    	ja     c0005eaf <f_lseek+0x4a3>
c0005b28:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b2e:	e9 84 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005b33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b36:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b45:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b4c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b50:	73 0f                	jae    c0005b61 <f_lseek+0x155>
c0005b52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b6c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b73:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b77:	0f 84 3a 03 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005b7d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b85:	83 c6 ff             	add    esi,0xffffffff
c0005b88:	89 d8                	mov    eax,ebx
c0005b8a:	83 d7 ff             	adc    edi,0xffffffff
c0005b8d:	89 f2                	mov    edx,esi
c0005b8f:	89 f9                	mov    ecx,edi
c0005b91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b95:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b98:	e8 78 c2 ff ff       	call   c0001e15 <clmt_clust>
c0005b9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ba1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba4:	89 c2                	mov    edx,eax
c0005ba6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005baa:	89 c8                	mov    eax,ecx
c0005bac:	e8 43 c2 ff ff       	call   c0001df4 <clst2sect>
c0005bb1:	89 d7                	mov    edi,edx
c0005bb3:	09 c7                	or     edi,eax
c0005bb5:	0f 84 0d ff ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005bbb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bbf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bc5:	0f 84 ec 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bcb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bd6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bda:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bde:	4d                   	dec    ebp
c0005bdf:	31 ff                	xor    edi,edi
c0005be1:	21 ee                	and    esi,ebp
c0005be3:	01 c6                	add    esi,eax
c0005be5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be8:	11 d7                	adc    edi,edx
c0005bea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bed:	39 fa                	cmp    edx,edi
c0005bef:	75 08                	jne    c0005bf9 <f_lseek+0x1ed>
c0005bf1:	39 f0                	cmp    eax,esi
c0005bf3:	0f 84 be 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bf9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bfc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c00:	0f 89 80 02 00 00    	jns    c0005e86 <f_lseek+0x47a>
c0005c06:	83 ec 0c             	sub    esp,0xc
c0005c09:	6a 01                	push   0x1
c0005c0b:	52                   	push   edx
c0005c0c:	50                   	push   eax
c0005c0d:	55                   	push   ebp
c0005c0e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c12:	e9 5a 02 00 00       	jmp    c0005e71 <f_lseek+0x465>
c0005c17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c1b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c1e:	74 16                	je     c0005c36 <f_lseek+0x22a>
c0005c20:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c25:	76 0f                	jbe    c0005c36 <f_lseek+0x22a>
c0005c27:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c3c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c3f:	89 c7                	mov    edi,eax
c0005c41:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c45:	73 0d                	jae    c0005c54 <f_lseek+0x248>
c0005c47:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c4b:	75 07                	jne    c0005c54 <f_lseek+0x248>
c0005c4d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c54:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c57:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c5a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c65:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c6c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c6f:	75 09                	jne    c0005c7a <f_lseek+0x26e>
c0005c71:	31 f6                	xor    esi,esi
c0005c73:	31 ff                	xor    edi,edi
c0005c75:	e9 af 01 00 00       	jmp    c0005e29 <f_lseek+0x41d>
c0005c7a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c7e:	89 d7                	mov    edi,edx
c0005c80:	c1 e1 09             	shl    ecx,0x9
c0005c83:	09 c7                	or     edi,eax
c0005c85:	89 cd                	mov    ebp,ecx
c0005c87:	74 6d                	je     c0005cf6 <f_lseek+0x2ea>
c0005c89:	83 c0 ff             	add    eax,0xffffffff
c0005c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c90:	83 d2 ff             	adc    edx,0xffffffff
c0005c93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c9a:	83 c0 ff             	add    eax,0xffffffff
c0005c9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca1:	83 d2 ff             	adc    edx,0xffffffff
c0005ca4:	31 ff                	xor    edi,edi
c0005ca6:	57                   	push   edi
c0005ca7:	51                   	push   ecx
c0005ca8:	52                   	push   edx
c0005ca9:	50                   	push   eax
c0005caa:	e8 71 d1 01 00       	call   c0022e20 <__udivdi3>
c0005caf:	83 c4 10             	add    esp,0x10
c0005cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cba:	57                   	push   edi
c0005cbb:	55                   	push   ebp
c0005cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc4:	e8 57 d1 01 00       	call   c0022e20 <__udivdi3>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005cd4:	19 d1                	sbb    ecx,edx
c0005cd6:	72 1e                	jb     c0005cf6 <f_lseek+0x2ea>
c0005cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cdc:	89 e9                	mov    ecx,ebp
c0005cde:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ce1:	f7 d9                	neg    ecx
c0005ce3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ce6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cea:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ced:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005cf0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cf4:	eb 28                	jmp    c0005d1e <f_lseek+0x312>
c0005cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf9:	85 c0                	test   eax,eax
c0005cfb:	75 1e                	jne    c0005d1b <f_lseek+0x30f>
c0005cfd:	31 d2                	xor    edx,edx
c0005cff:	89 d8                	mov    eax,ebx
c0005d01:	e8 a9 d4 ff ff       	call   c00031af <create_chain>
c0005d06:	83 f8 01             	cmp    eax,0x1
c0005d09:	0f 84 b9 fd ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005d0f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d12:	0f 84 c6 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005d18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d1b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d1e:	85 c0                	test   eax,eax
c0005d20:	0f 84 4b ff ff ff    	je     c0005c71 <f_lseek+0x265>
c0005d26:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d32:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d3c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d3f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d43:	0f 83 9d 00 00 00    	jae    c0005de6 <f_lseek+0x3da>
c0005d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d51:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d54:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d58:	01 f2                	add    edx,esi
c0005d5a:	11 f9                	adc    ecx,edi
c0005d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d64:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d67:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d6a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d6d:	f6 c1 02             	test   cl,0x2
c0005d70:	74 35                	je     c0005da7 <f_lseek+0x39b>
c0005d72:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d76:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d79:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d7c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d80:	73 16                	jae    c0005d98 <f_lseek+0x38c>
c0005d82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d86:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d8a:	88 ca                	mov    dl,cl
c0005d8c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d8f:	83 ca 40             	or     edx,0x40
c0005d92:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d95:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d98:	89 c2                	mov    edx,eax
c0005d9a:	89 d8                	mov    eax,ebx
c0005d9c:	e8 0e d4 ff ff       	call   c00031af <create_chain>
c0005da1:	85 c0                	test   eax,eax
c0005da3:	75 0b                	jne    c0005db0 <f_lseek+0x3a4>
c0005da5:	eb 30                	jmp    c0005dd7 <f_lseek+0x3cb>
c0005da7:	89 c2                	mov    edx,eax
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 11 d1 ff ff       	call   c0002ec1 <get_fat>
c0005db0:	83 f8 ff             	cmp    eax,0xffffffff
c0005db3:	0f 84 25 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005db9:	83 f8 01             	cmp    eax,0x1
c0005dbc:	0f 86 06 fd ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dc2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dc6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc9:	0f 86 f9 fc ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dcf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dd2:	e9 5b ff ff ff       	jmp    c0005d32 <f_lseek+0x326>
c0005dd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dde:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005de6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ded:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005df0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005df3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005df6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005dfc:	0f 84 6f fe ff ff    	je     c0005c71 <f_lseek+0x265>
c0005e02:	89 c2                	mov    edx,eax
c0005e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e08:	e8 e7 bf ff ff       	call   c0001df4 <clst2sect>
c0005e0d:	89 d7                	mov    edi,edx
c0005e0f:	09 c7                	or     edi,eax
c0005e11:	0f 84 b1 fc ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005e17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e1b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e1e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e22:	c1 ef 09             	shr    edi,0x9
c0005e25:	01 c6                	add    esi,eax
c0005e27:	11 d7                	adc    edi,edx
c0005e29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e2c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e32:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e35:	19 d1                	sbb    ecx,edx
c0005e37:	73 0a                	jae    c0005e43 <f_lseek+0x437>
c0005e39:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e3c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e3f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e43:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e48:	74 6d                	je     c0005eb7 <f_lseek+0x4ab>
c0005e4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e4d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e50:	39 fa                	cmp    edx,edi
c0005e52:	75 04                	jne    c0005e58 <f_lseek+0x44c>
c0005e54:	39 f0                	cmp    eax,esi
c0005e56:	74 5f                	je     c0005eb7 <f_lseek+0x4ab>
c0005e58:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e5b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e5f:	79 25                	jns    c0005e86 <f_lseek+0x47a>
c0005e61:	83 ec 0c             	sub    esp,0xc
c0005e64:	6a 01                	push   0x1
c0005e66:	52                   	push   edx
c0005e67:	50                   	push   eax
c0005e68:	55                   	push   ebp
c0005e69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e6d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e71:	50                   	push   eax
c0005e72:	e8 af bc ff ff       	call   c0001b26 <disk_write>
c0005e77:	83 c4 20             	add    esp,0x20
c0005e7a:	85 c0                	test   eax,eax
c0005e7c:	0f 85 5c fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005e82:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e86:	83 ec 0c             	sub    esp,0xc
c0005e89:	6a 01                	push   0x1
c0005e8b:	57                   	push   edi
c0005e8c:	56                   	push   esi
c0005e8d:	55                   	push   ebp
c0005e8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e92:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e96:	50                   	push   eax
c0005e97:	e8 74 bc ff ff       	call   c0001b10 <disk_read>
c0005e9c:	83 c4 20             	add    esp,0x20
c0005e9f:	85 c0                	test   eax,eax
c0005ea1:	0f 85 37 fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005ea7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eaa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ead:	eb 08                	jmp    c0005eb7 <f_lseek+0x4ab>
c0005eaf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ebb:	83 c4 3c             	add    esp,0x3c
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	5d                   	pop    ebp
c0005ec2:	c3                   	ret    

c0005ec3 <f_opendir>:
c0005ec3:	56                   	push   esi
c0005ec4:	b8 09 00 00 00       	mov    eax,0x9
c0005ec9:	53                   	push   ebx
c0005eca:	83 ec 24             	sub    esp,0x24
c0005ecd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed1:	85 db                	test   ebx,ebx
c0005ed3:	0f 84 e6 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005ed9:	31 c9                	xor    ecx,ecx
c0005edb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005edf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ee3:	e8 03 c7 ff ff       	call   c00025eb <mount_volume>
c0005ee8:	85 c0                	test   eax,eax
c0005eea:	0f 85 c9 00 00 00    	jne    c0005fb9 <f_opendir+0xf6>
c0005ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ef4:	83 ec 0c             	sub    esp,0xc
c0005ef7:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef9:	68 60 04 00 00       	push   0x460
c0005efe:	e8 c1 26 00 00       	call   c00085c4 <ff_memalloc>
c0005f03:	83 c4 10             	add    esp,0x10
c0005f06:	89 c6                	mov    esi,eax
c0005f08:	b8 11 00 00 00       	mov    eax,0x11
c0005f0d:	85 f6                	test   esi,esi
c0005f0f:	0f 84 aa 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f29:	89 d8                	mov    eax,ebx
c0005f2b:	e8 31 ee ff ff       	call   c0004d61 <follow_path>
c0005f30:	85 c0                	test   eax,eax
c0005f32:	75 61                	jne    c0005f95 <f_opendir+0xd2>
c0005f34:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f38:	78 46                	js     c0005f80 <f_opendir+0xbd>
c0005f3a:	b8 05 00 00 00       	mov    eax,0x5
c0005f3f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f43:	74 50                	je     c0005f95 <f_opendir+0xd2>
c0005f45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f49:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f4b:	3c 04                	cmp    al,0x4
c0005f4d:	75 26                	jne    c0005f75 <f_opendir+0xb2>
c0005f4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f52:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f58:	30 d2                	xor    dl,dl
c0005f5a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f5e:	09 c2                	or     edx,eax
c0005f60:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f63:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f66:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f69:	89 da                	mov    edx,ebx
c0005f6b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f6e:	e8 b4 ed ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005f73:	eb 0b                	jmp    c0005f80 <f_opendir+0xbd>
c0005f75:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f78:	e8 59 ed ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0005f7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f84:	31 d2                	xor    edx,edx
c0005f86:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f8a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f8e:	89 d8                	mov    eax,ebx
c0005f90:	e8 22 d1 ff ff       	call   c00030b7 <dir_sdi>
c0005f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f99:	83 ec 0c             	sub    esp,0xc
c0005f9c:	56                   	push   esi
c0005f9d:	e8 3a 26 00 00       	call   c00085dc <ff_memfree>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa9:	83 f8 04             	cmp    eax,0x4
c0005fac:	74 06                	je     c0005fb4 <f_opendir+0xf1>
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	74 0d                	je     c0005fbf <f_opendir+0xfc>
c0005fb2:	eb 05                	jmp    c0005fb9 <f_opendir+0xf6>
c0005fb4:	b8 05 00 00 00       	mov    eax,0x5
c0005fb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fbf:	83 c4 24             	add    esp,0x24
c0005fc2:	5b                   	pop    ebx
c0005fc3:	5e                   	pop    esi
c0005fc4:	c3                   	ret    

c0005fc5 <f_closedir>:
c0005fc5:	53                   	push   ebx
c0005fc6:	83 ec 18             	sub    esp,0x18
c0005fc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fcd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fd1:	89 d8                	mov    eax,ebx
c0005fd3:	e8 86 c2 ff ff       	call   c000225e <validate>
c0005fd8:	85 c0                	test   eax,eax
c0005fda:	75 06                	jne    c0005fe2 <f_closedir+0x1d>
c0005fdc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fe2:	83 c4 18             	add    esp,0x18
c0005fe5:	5b                   	pop    ebx
c0005fe6:	c3                   	ret    

c0005fe7 <f_readdir>:
c0005fe7:	57                   	push   edi
c0005fe8:	56                   	push   esi
c0005fe9:	53                   	push   ebx
c0005fea:	83 ec 20             	sub    esp,0x20
c0005fed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ff1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ff5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff9:	89 d8                	mov    eax,ebx
c0005ffb:	e8 5e c2 ff ff       	call   c000225e <validate>
c0006000:	85 c0                	test   eax,eax
c0006002:	75 77                	jne    c000607b <f_readdir+0x94>
c0006004:	85 ff                	test   edi,edi
c0006006:	75 0b                	jne    c0006013 <f_readdir+0x2c>
c0006008:	31 d2                	xor    edx,edx
c000600a:	89 d8                	mov    eax,ebx
c000600c:	e8 a6 d0 ff ff       	call   c00030b7 <dir_sdi>
c0006011:	eb 68                	jmp    c000607b <f_readdir+0x94>
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	68 60 04 00 00       	push   0x460
c000601b:	e8 a4 25 00 00       	call   c00085c4 <ff_memalloc>
c0006020:	83 c4 10             	add    esp,0x10
c0006023:	89 c6                	mov    esi,eax
c0006025:	b8 11 00 00 00       	mov    eax,0x11
c000602a:	85 f6                	test   esi,esi
c000602c:	74 4d                	je     c000607b <f_readdir+0x94>
c000602e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006032:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006038:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000603b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000603e:	31 d2                	xor    edx,edx
c0006040:	89 d8                	mov    eax,ebx
c0006042:	e8 80 d8 ff ff       	call   c00038c7 <dir_read>
c0006047:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000604c:	75 19                	jne    c0006067 <f_readdir+0x80>
c000604e:	89 fa                	mov    edx,edi
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 7e ea ff ff       	call   c0004ad5 <get_fileinfo>
c0006057:	31 d2                	xor    edx,edx
c0006059:	89 d8                	mov    eax,ebx
c000605b:	e8 af d5 ff ff       	call   c000360f <dir_next>
c0006060:	83 f8 04             	cmp    eax,0x4
c0006063:	75 02                	jne    c0006067 <f_readdir+0x80>
c0006065:	31 c0                	xor    eax,eax
c0006067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000606b:	83 ec 0c             	sub    esp,0xc
c000606e:	56                   	push   esi
c000606f:	e8 68 25 00 00       	call   c00085dc <ff_memfree>
c0006074:	83 c4 10             	add    esp,0x10
c0006077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000607b:	83 c4 20             	add    esp,0x20
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	c3                   	ret    

c0006082 <f_stat>:
c0006082:	57                   	push   edi
c0006083:	31 c9                	xor    ecx,ecx
c0006085:	56                   	push   esi
c0006086:	53                   	push   ebx
c0006087:	83 ec 50             	sub    esp,0x50
c000608a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000608e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006092:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006096:	e8 50 c5 ff ff       	call   c00025eb <mount_volume>
c000609b:	89 c3                	mov    ebx,eax
c000609d:	85 c0                	test   eax,eax
c000609f:	75 67                	jne    c0006108 <f_stat+0x86>
c00060a1:	83 ec 0c             	sub    esp,0xc
c00060a4:	bb 11 00 00 00       	mov    ebx,0x11
c00060a9:	68 60 04 00 00       	push   0x460
c00060ae:	e8 11 25 00 00       	call   c00085c4 <ff_memalloc>
c00060b3:	83 c4 10             	add    esp,0x10
c00060b6:	89 c6                	mov    esi,eax
c00060b8:	85 c0                	test   eax,eax
c00060ba:	74 4c                	je     c0006108 <f_stat+0x86>
c00060bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060c0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060c6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060cc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060d0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060d4:	e8 88 ec ff ff       	call   c0004d61 <follow_path>
c00060d9:	89 c3                	mov    ebx,eax
c00060db:	85 c0                	test   eax,eax
c00060dd:	75 1d                	jne    c00060fc <f_stat+0x7a>
c00060df:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060e4:	78 11                	js     c00060f7 <f_stat+0x75>
c00060e6:	85 ff                	test   edi,edi
c00060e8:	74 12                	je     c00060fc <f_stat+0x7a>
c00060ea:	89 fa                	mov    edx,edi
c00060ec:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060f0:	e8 e0 e9 ff ff       	call   c0004ad5 <get_fileinfo>
c00060f5:	eb 05                	jmp    c00060fc <f_stat+0x7a>
c00060f7:	bb 06 00 00 00       	mov    ebx,0x6
c00060fc:	83 ec 0c             	sub    esp,0xc
c00060ff:	56                   	push   esi
c0006100:	e8 d7 24 00 00       	call   c00085dc <ff_memfree>
c0006105:	83 c4 10             	add    esp,0x10
c0006108:	83 c4 50             	add    esp,0x50
c000610b:	89 d8                	mov    eax,ebx
c000610d:	5b                   	pop    ebx
c000610e:	5e                   	pop    esi
c000610f:	5f                   	pop    edi
c0006110:	c3                   	ret    

c0006111 <f_getfree>:
c0006111:	55                   	push   ebp
c0006112:	31 c9                	xor    ecx,ecx
c0006114:	57                   	push   edi
c0006115:	56                   	push   esi
c0006116:	53                   	push   ebx
c0006117:	83 ec 5c             	sub    esp,0x5c
c000611a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000611e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006122:	e8 c4 c4 ff ff       	call   c00025eb <mount_volume>
c0006127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000612b:	85 c0                	test   eax,eax
c000612d:	0f 85 9d 01 00 00    	jne    c00062d0 <f_getfree+0x1bf>
c0006133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006137:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000613b:	89 02                	mov    DWORD PTR [edx],eax
c000613d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006143:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006146:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000614a:	39 f2                	cmp    edx,esi
c000614c:	77 0b                	ja     c0006159 <f_getfree+0x48>
c000614e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006152:	89 10                	mov    DWORD PTR [eax],edx
c0006154:	e9 77 01 00 00       	jmp    c00062d0 <f_getfree+0x1bf>
c0006159:	8a 10                	mov    dl,BYTE PTR [eax]
c000615b:	80 fa 01             	cmp    dl,0x1
c000615e:	75 3a                	jne    c000619a <f_getfree+0x89>
c0006160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006164:	be 02 00 00 00       	mov    esi,0x2
c0006169:	31 db                	xor    ebx,ebx
c000616b:	89 f2                	mov    edx,esi
c000616d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006171:	e8 4b cd ff ff       	call   c0002ec1 <get_fat>
c0006176:	83 f8 ff             	cmp    eax,0xffffffff
c0006179:	0f 84 28 01 00 00    	je     c00062a7 <f_getfree+0x196>
c000617f:	83 f8 01             	cmp    eax,0x1
c0006182:	0f 84 29 01 00 00    	je     c00062b1 <f_getfree+0x1a0>
c0006188:	83 d3 00             	adc    ebx,0x0
c000618b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000618f:	46                   	inc    esi
c0006190:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006193:	77 d6                	ja     c000616b <f_getfree+0x5a>
c0006195:	e9 25 01 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000619a:	80 fa 04             	cmp    dl,0x4
c000619d:	0f 85 88 00 00 00    	jne    c000622b <f_getfree+0x11a>
c00061a3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061a6:	31 ed                	xor    ebp,ebp
c00061a8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061b3:	31 db                	xor    ebx,ebx
c00061b5:	85 ed                	test   ebp,ebp
c00061b7:	75 3f                	jne    c00061f8 <f_getfree+0xe7>
c00061b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061c1:	83 c0 01             	add    eax,0x1
c00061c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c8:	83 d2 00             	adc    edx,0x0
c00061cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061db:	e8 59 c1 ff ff       	call   c0002339 <move_window>
c00061e0:	85 c0                	test   eax,eax
c00061e2:	0f 85 d3 00 00 00    	jne    c00062bb <f_getfree+0x1aa>
c00061e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061fc:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061ff:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006203:	89 cf                	mov    edi,ecx
c0006205:	85 f6                	test   esi,esi
c0006207:	74 12                	je     c000621b <f_getfree+0x10a>
c0006209:	88 c1                	mov    cl,al
c000620b:	83 e1 01             	and    ecx,0x1
c000620e:	80 f9 01             	cmp    cl,0x1
c0006211:	83 d3 00             	adc    ebx,0x0
c0006214:	d0 e8                	shr    al,1
c0006216:	4e                   	dec    esi
c0006217:	39 fe                	cmp    esi,edi
c0006219:	75 ea                	jne    c0006205 <f_getfree+0xf4>
c000621b:	45                   	inc    ebp
c000621c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006222:	85 f6                	test   esi,esi
c0006224:	75 8f                	jne    c00061b5 <f_getfree+0xa4>
c0006226:	e9 94 00 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000622b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000622e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006231:	31 f6                	xor    esi,esi
c0006233:	31 db                	xor    ebx,ebx
c0006235:	85 f6                	test   esi,esi
c0006237:	75 1b                	jne    c0006254 <f_getfree+0x143>
c0006239:	89 d7                	mov    edi,edx
c000623b:	89 cd                	mov    ebp,ecx
c000623d:	83 c7 01             	add    edi,0x1
c0006240:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006244:	83 d5 00             	adc    ebp,0x0
c0006247:	e8 ed c0 ff ff       	call   c0002339 <move_window>
c000624c:	85 c0                	test   eax,eax
c000624e:	75 6b                	jne    c00062bb <f_getfree+0x1aa>
c0006250:	89 fa                	mov    edx,edi
c0006252:	89 e9                	mov    ecx,ebp
c0006254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006258:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000625c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006260:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006263:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006267:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000626b:	75 11                	jne    c000627e <f_getfree+0x16d>
c000626d:	e8 e9 b8 ff ff       	call   c0001b5b <ld_word>
c0006272:	66 83 f8 01          	cmp    ax,0x1
c0006276:	83 d3 00             	adc    ebx,0x0
c0006279:	83 c6 02             	add    esi,0x2
c000627c:	eb 13                	jmp    c0006291 <f_getfree+0x180>
c000627e:	e8 e5 b8 ff ff       	call   c0001b68 <ld_dword>
c0006283:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006288:	83 f8 01             	cmp    eax,0x1
c000628b:	83 d3 00             	adc    ebx,0x0
c000628e:	83 c6 04             	add    esi,0x4
c0006291:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000629b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000629f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062a3:	75 90                	jne    c0006235 <f_getfree+0x124>
c00062a5:	eb 18                	jmp    c00062bf <f_getfree+0x1ae>
c00062a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062af:	eb 0e                	jmp    c00062bf <f_getfree+0x1ae>
c00062b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b9:	eb 04                	jmp    c00062bf <f_getfree+0x1ae>
c00062bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062c3:	89 18                	mov    DWORD PTR [eax],ebx
c00062c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062cc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062d4:	83 c4 5c             	add    esp,0x5c
c00062d7:	5b                   	pop    ebx
c00062d8:	5e                   	pop    esi
c00062d9:	5f                   	pop    edi
c00062da:	5d                   	pop    ebp
c00062db:	c3                   	ret    

c00062dc <f_truncate>:
c00062dc:	56                   	push   esi
c00062dd:	53                   	push   ebx
c00062de:	83 ec 14             	sub    esp,0x14
c00062e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e9:	89 d8                	mov    eax,ebx
c00062eb:	e8 6e bf ff ff       	call   c000225e <validate>
c00062f0:	89 c6                	mov    esi,eax
c00062f2:	85 c0                	test   eax,eax
c00062f4:	0f 85 d2 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c00062fa:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062fe:	85 f6                	test   esi,esi
c0006300:	0f 85 c6 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c0006306:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000630a:	0f 84 b7 00 00 00    	je     c00063c7 <f_truncate+0xeb>
c0006310:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006313:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006316:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006319:	89 d1                	mov    ecx,edx
c000631b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000631e:	0f 83 a8 00 00 00    	jae    c00063cc <f_truncate+0xf0>
c0006324:	09 c2                	or     edx,eax
c0006326:	75 15                	jne    c000633d <f_truncate+0x61>
c0006328:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000632b:	31 c9                	xor    ecx,ecx
c000632d:	89 d8                	mov    eax,ebx
c000632f:	e8 7a d0 ff ff       	call   c00033ae <remove_chain>
c0006334:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000633b:	eb 35                	jmp    c0006372 <f_truncate+0x96>
c000633d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006340:	89 d8                	mov    eax,ebx
c0006342:	e8 7a cb ff ff       	call   c0002ec1 <get_fat>
c0006347:	89 c2                	mov    edx,eax
c0006349:	b8 01 00 00 00       	mov    eax,0x1
c000634e:	83 fa ff             	cmp    edx,0xffffffff
c0006351:	74 1f                	je     c0006372 <f_truncate+0x96>
c0006353:	b8 02 00 00 00       	mov    eax,0x2
c0006358:	83 fa 01             	cmp    edx,0x1
c000635b:	74 15                	je     c0006372 <f_truncate+0x96>
c000635d:	31 c0                	xor    eax,eax
c000635f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006363:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006366:	76 0a                	jbe    c0006372 <f_truncate+0x96>
c0006368:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000636b:	89 d8                	mov    eax,ebx
c000636d:	e8 3c d0 ff ff       	call   c00033ae <remove_chain>
c0006372:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006375:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006378:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000637b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000637e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006381:	83 ca 40             	or     edx,0x40
c0006384:	85 c0                	test   eax,eax
c0006386:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006389:	75 35                	jne    c00063c0 <f_truncate+0xe4>
c000638b:	84 d2                	test   dl,dl
c000638d:	79 3d                	jns    c00063cc <f_truncate+0xf0>
c000638f:	83 ec 0c             	sub    esp,0xc
c0006392:	8d 43 50             	lea    eax,[ebx+0x50]
c0006395:	6a 01                	push   0x1
c0006397:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000639a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000639d:	50                   	push   eax
c000639e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063a6:	50                   	push   eax
c00063a7:	e8 7a b7 ff ff       	call   c0001b26 <disk_write>
c00063ac:	83 c4 20             	add    esp,0x20
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 08                	jne    c00063bb <f_truncate+0xdf>
c00063b3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063b7:	31 f6                	xor    esi,esi
c00063b9:	eb 11                	jmp    c00063cc <f_truncate+0xf0>
c00063bb:	b8 01 00 00 00       	mov    eax,0x1
c00063c0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063c3:	89 c6                	mov    esi,eax
c00063c5:	eb 05                	jmp    c00063cc <f_truncate+0xf0>
c00063c7:	be 07 00 00 00       	mov    esi,0x7
c00063cc:	89 f0                	mov    eax,esi
c00063ce:	83 c4 14             	add    esp,0x14
c00063d1:	5b                   	pop    ebx
c00063d2:	5e                   	pop    esi
c00063d3:	c3                   	ret    

c00063d4 <f_unlink>:
c00063d4:	56                   	push   esi
c00063d5:	b9 02 00 00 00       	mov    ecx,0x2
c00063da:	53                   	push   ebx
c00063db:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063e5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063ec:	e8 fa c1 ff ff       	call   c00025eb <mount_volume>
c00063f1:	85 c0                	test   eax,eax
c00063f3:	0f 85 55 01 00 00    	jne    c000654e <f_unlink+0x17a>
c00063f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fd:	83 ec 0c             	sub    esp,0xc
c0006400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006404:	68 60 04 00 00       	push   0x460
c0006409:	e8 b6 21 00 00       	call   c00085c4 <ff_memalloc>
c000640e:	83 c4 10             	add    esp,0x10
c0006411:	89 c3                	mov    ebx,eax
c0006413:	b8 11 00 00 00       	mov    eax,0x11
c0006418:	85 db                	test   ebx,ebx
c000641a:	0f 84 2e 01 00 00    	je     c000654e <f_unlink+0x17a>
c0006420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006424:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000642a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000642d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006430:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006437:	8d 44 24 48          	lea    eax,[esp+0x48]
c000643b:	e8 21 e9 ff ff       	call   c0004d61 <follow_path>
c0006440:	85 c0                	test   eax,eax
c0006442:	0f 85 f2 00 00 00    	jne    c000653a <f_unlink+0x166>
c0006448:	b8 06 00 00 00       	mov    eax,0x6
c000644d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006455:	0f 88 df 00 00 00    	js     c000653a <f_unlink+0x166>
c000645b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006460:	74 0a                	je     c000646c <f_unlink+0x98>
c0006462:	b8 07 00 00 00       	mov    eax,0x7
c0006467:	e9 ce 00 00 00       	jmp    c000653a <f_unlink+0x166>
c000646c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006470:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006474:	8a 02                	mov    al,BYTE PTR [edx]
c0006476:	3c 04                	cmp    al,0x4
c0006478:	75 12                	jne    c000648c <f_unlink+0xb8>
c000647a:	8d 42 10             	lea    eax,[edx+0x10]
c000647d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006481:	e8 a1 e8 ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0006486:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000648a:	eb 0e                	jmp    c000649a <f_unlink+0xc6>
c000648c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006493:	e8 3e e8 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0006498:	89 c6                	mov    esi,eax
c000649a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000649f:	75 12                	jne    c00064b3 <f_unlink+0xdf>
c00064a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064a5:	e8 94 d6 ff ff       	call   c0003b3e <dir_remove>
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 6c                	je     c000651a <f_unlink+0x146>
c00064ae:	e9 87 00 00 00       	jmp    c000653a <f_unlink+0x166>
c00064b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064b7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064be:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c8:	75 21                	jne    c00064eb <f_unlink+0x117>
c00064ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064d2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064e0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064e4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064eb:	31 d2                	xor    edx,edx
c00064ed:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064f4:	e8 be cb ff ff       	call   c00030b7 <dir_sdi>
c00064f9:	85 c0                	test   eax,eax
c00064fb:	75 3d                	jne    c000653a <f_unlink+0x166>
c00064fd:	31 d2                	xor    edx,edx
c00064ff:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006506:	e8 bc d3 ff ff       	call   c00038c7 <dir_read>
c000650b:	85 c0                	test   eax,eax
c000650d:	0f 84 4f ff ff ff    	je     c0006462 <f_unlink+0x8e>
c0006513:	83 f8 04             	cmp    eax,0x4
c0006516:	75 22                	jne    c000653a <f_unlink+0x166>
c0006518:	eb 87                	jmp    c00064a1 <f_unlink+0xcd>
c000651a:	85 f6                	test   esi,esi
c000651c:	75 0b                	jne    c0006529 <f_unlink+0x155>
c000651e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006522:	e8 3d df ff ff       	call   c0004464 <sync_fs>
c0006527:	eb 11                	jmp    c000653a <f_unlink+0x166>
c0006529:	31 c9                	xor    ecx,ecx
c000652b:	89 f2                	mov    edx,esi
c000652d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006531:	e8 78 ce ff ff       	call   c00033ae <remove_chain>
c0006536:	85 c0                	test   eax,eax
c0006538:	74 e4                	je     c000651e <f_unlink+0x14a>
c000653a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000653e:	83 ec 0c             	sub    esp,0xc
c0006541:	53                   	push   ebx
c0006542:	e8 95 20 00 00       	call   c00085dc <ff_memfree>
c0006547:	83 c4 10             	add    esp,0x10
c000654a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000654e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006554:	5b                   	pop    ebx
c0006555:	5e                   	pop    esi
c0006556:	c3                   	ret    

c0006557 <f_mkdir>:
c0006557:	57                   	push   edi
c0006558:	b9 02 00 00 00       	mov    ecx,0x2
c000655d:	56                   	push   esi
c000655e:	53                   	push   ebx
c000655f:	83 c4 80             	add    esp,0xffffff80
c0006562:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006566:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000656d:	e8 79 c0 ff ff       	call   c00025eb <mount_volume>
c0006572:	89 c3                	mov    ebx,eax
c0006574:	85 c0                	test   eax,eax
c0006576:	0f 85 fe 01 00 00    	jne    c000677a <f_mkdir+0x223>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	bb 11 00 00 00       	mov    ebx,0x11
c0006585:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006589:	83 ec 0c             	sub    esp,0xc
c000658c:	68 60 04 00 00       	push   0x460
c0006591:	e8 2e 20 00 00       	call   c00085c4 <ff_memalloc>
c0006596:	83 c4 10             	add    esp,0x10
c0006599:	89 c7                	mov    edi,eax
c000659b:	85 c0                	test   eax,eax
c000659d:	0f 84 d7 01 00 00    	je     c000677a <f_mkdir+0x223>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065ad:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065b3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065be:	e8 9e e7 ff ff       	call   c0004d61 <follow_path>
c00065c3:	89 c3                	mov    ebx,eax
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 3e                	je     c0006607 <f_mkdir+0xb0>
c00065c9:	83 f8 04             	cmp    eax,0x4
c00065cc:	75 3e                	jne    c000660c <f_mkdir+0xb5>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065dc:	e8 ce cb ff ff       	call   c00031af <create_chain>
c00065e1:	89 c6                	mov    esi,eax
c00065e3:	85 c0                	test   eax,eax
c00065e5:	74 0c                	je     c00065f3 <f_mkdir+0x9c>
c00065e7:	bb 02 00 00 00       	mov    ebx,0x2
c00065ec:	83 f8 01             	cmp    eax,0x1
c00065ef:	74 07                	je     c00065f8 <f_mkdir+0xa1>
c00065f1:	eb 2a                	jmp    c000661d <f_mkdir+0xc6>
c00065f3:	bb 07 00 00 00       	mov    ebx,0x7
c00065f8:	31 c9                	xor    ecx,ecx
c00065fa:	89 f2                	mov    edx,esi
c00065fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006600:	e8 a9 cd ff ff       	call   c00033ae <remove_chain>
c0006605:	eb 05                	jmp    c000660c <f_mkdir+0xb5>
c0006607:	bb 08 00 00 00       	mov    ebx,0x8
c000660c:	83 ec 0c             	sub    esp,0xc
c000660f:	57                   	push   edi
c0006610:	e8 c7 1f 00 00       	call   c00085dc <ff_memfree>
c0006615:	83 c4 10             	add    esp,0x10
c0006618:	e9 5d 01 00 00       	jmp    c000677a <f_mkdir+0x223>
c000661d:	bb 01 00 00 00       	mov    ebx,0x1
c0006622:	83 f8 ff             	cmp    eax,0xffffffff
c0006625:	74 d1                	je     c00065f8 <f_mkdir+0xa1>
c0006627:	89 f2                	mov    edx,esi
c0006629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662d:	e8 c4 ce ff ff       	call   c00034f6 <dir_clear>
c0006632:	89 c3                	mov    ebx,eax
c0006634:	85 c0                	test   eax,eax
c0006636:	75 c0                	jne    c00065f8 <f_mkdir+0xa1>
c0006638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000663f:	74 69                	je     c00066aa <f_mkdir+0x153>
c0006641:	b9 0b 00 00 00       	mov    ecx,0xb
c0006646:	83 c0 54             	add    eax,0x54
c0006649:	ba 20 00 00 00       	mov    edx,0x20
c000664e:	e8 9c b5 ff ff       	call   c0001bef <mem_set>
c0006653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006657:	ba 00 00 21 50       	mov    edx,0x50210000
c000665c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006660:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006664:	83 c0 6a             	add    eax,0x6a
c0006667:	e8 65 b5 ff ff       	call   c0001bd1 <st_dword>
c000666c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006670:	89 f1                	mov    ecx,esi
c0006672:	8d 50 54             	lea    edx,[eax+0x54]
c0006675:	e8 85 e6 ff ff       	call   c0004cff <st_clust.isra.1>
c000667a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667e:	b9 20 00 00 00       	mov    ecx,0x20
c0006683:	8d 50 54             	lea    edx,[eax+0x54]
c0006686:	83 c0 74             	add    eax,0x74
c0006689:	e8 4c b5 ff ff       	call   c0001bda <mem_cpy>
c000668e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006692:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006696:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000669a:	8d 50 74             	lea    edx,[eax+0x74]
c000669d:	e8 5d e6 ff ff       	call   c0004cff <st_clust.isra.1>
c00066a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066ae:	e8 2f db ff ff       	call   c00041e2 <dir_register>
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	85 c0                	test   eax,eax
c00066b7:	0f 85 3b ff ff ff    	jne    c00065f8 <f_mkdir+0xa1>
c00066bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c4:	75 74                	jne    c000673a <f_mkdir+0x1e3>
c00066c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066ce:	83 c0 0c             	add    eax,0xc
c00066d1:	e8 fb b4 ff ff       	call   c0001bd1 <st_dword>
c00066d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066da:	89 f2                	mov    edx,esi
c00066dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066df:	83 c0 34             	add    eax,0x34
c00066e2:	e8 ea b4 ff ff       	call   c0001bd1 <st_dword>
c00066e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066eb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066f2:	c1 e2 09             	shl    edx,0x9
c00066f5:	83 c0 38             	add    eax,0x38
c00066f8:	e8 d4 b4 ff ff       	call   c0001bd1 <st_dword>
c00066fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006701:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006705:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006708:	c1 e2 09             	shl    edx,0x9
c000670b:	83 c0 28             	add    eax,0x28
c000670e:	e8 be b4 ff ff       	call   c0001bd1 <st_dword>
c0006713:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000671e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006721:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006725:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006729:	e8 8b d3 ff ff       	call   c0003ab9 <store_xdir>
c000672e:	89 c3                	mov    ebx,eax
c0006730:	85 c0                	test   eax,eax
c0006732:	0f 85 d4 fe ff ff    	jne    c000660c <f_mkdir+0xb5>
c0006738:	eb 30                	jmp    c000676a <f_mkdir+0x213>
c000673a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	83 c0 16             	add    eax,0x16
c0006746:	e8 86 b4 ff ff       	call   c0001bd1 <st_dword>
c000674b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674f:	89 f1                	mov    ecx,esi
c0006751:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006755:	e8 a5 e5 ff ff       	call   c0004cff <st_clust.isra.1>
c000675a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000675e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000676a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676e:	e8 f1 dc ff ff       	call   c0004464 <sync_fs>
c0006773:	89 c3                	mov    ebx,eax
c0006775:	e9 92 fe ff ff       	jmp    c000660c <f_mkdir+0xb5>
c000677a:	83 ec 80             	sub    esp,0xffffff80
c000677d:	89 d8                	mov    eax,ebx
c000677f:	5b                   	pop    ebx
c0006780:	5e                   	pop    esi
c0006781:	5f                   	pop    edi
c0006782:	c3                   	ret    

c0006783 <f_rename>:
c0006783:	55                   	push   ebp
c0006784:	57                   	push   edi
c0006785:	56                   	push   esi
c0006786:	53                   	push   ebx
c0006787:	81 ec fc 00 00 00    	sub    esp,0xfc
c000678d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006794:	e8 a4 b9 ff ff       	call   c000213d <get_ldnumber>
c0006799:	b9 02 00 00 00       	mov    ecx,0x2
c000679e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067a2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a9:	e8 3d be ff ff       	call   c00025eb <mount_volume>
c00067ae:	85 c0                	test   eax,eax
c00067b0:	0f 85 b5 02 00 00    	jne    c0006a6b <f_rename+0x2e8>
c00067b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ba:	83 ec 0c             	sub    esp,0xc
c00067bd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067c1:	68 60 04 00 00       	push   0x460
c00067c6:	e8 f9 1d 00 00       	call   c00085c4 <ff_memalloc>
c00067cb:	83 c4 10             	add    esp,0x10
c00067ce:	89 c3                	mov    ebx,eax
c00067d0:	b8 11 00 00 00       	mov    eax,0x11
c00067d5:	85 db                	test   ebx,ebx
c00067d7:	0f 84 8e 02 00 00    	je     c0006a6b <f_rename+0x2e8>
c00067dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067e7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067ed:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067f4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f8:	e8 64 e5 ff ff       	call   c0004d61 <follow_path>
c00067fd:	85 c0                	test   eax,eax
c00067ff:	0f 85 52 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006805:	b8 06 00 00 00       	mov    eax,0x6
c000680a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006812:	0f 85 3f 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000681c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000681f:	0f 85 05 01 00 00    	jne    c000692a <f_rename+0x1a7>
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	b9 40 00 00 00       	mov    ecx,0x40
c000682d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006831:	e8 a4 b3 ff ff       	call   c0001bda <mem_cpy>
c0006836:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 8f b3 ff ff       	call   c0001bda <mem_cpy>
c000684b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006852:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006859:	e8 03 e5 ff ff       	call   c0004d61 <follow_path>
c000685e:	85 c0                	test   eax,eax
c0006860:	75 29                	jne    c000688b <f_rename+0x108>
c0006862:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006866:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686d:	74 0a                	je     c0006879 <f_rename+0xf6>
c000686f:	b8 08 00 00 00       	mov    eax,0x8
c0006874:	e9 de 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c0006879:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006880:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006887:	75 e6                	jne    c000686f <f_rename+0xec>
c0006889:	eb 09                	jmp    c0006894 <f_rename+0x111>
c000688b:	83 f8 04             	cmp    eax,0x4
c000688e:	0f 85 c3 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006894:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000689b:	e8 42 d9 ff ff       	call   c00041e2 <dir_register>
c00068a0:	85 c0                	test   eax,eax
c00068a2:	0f 85 af 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00068a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ac:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068af:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068b2:	89 c5                	mov    ebp,eax
c00068b4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068bb:	8d 46 24             	lea    eax,[esi+0x24]
c00068be:	e8 98 b2 ff ff       	call   c0001b5b <ld_word>
c00068c3:	b9 40 00 00 00       	mov    ecx,0x40
c00068c8:	89 c7                	mov    edi,eax
c00068ca:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068ce:	89 f0                	mov    eax,esi
c00068d0:	e8 05 b3 ff ff       	call   c0001bda <mem_cpy>
c00068d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d9:	89 e9                	mov    ecx,ebp
c00068db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068de:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068ec:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ef:	0f b7 d7             	movzx  edx,di
c00068f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068f5:	83 c0 24             	add    eax,0x24
c00068f8:	e8 d0 b2 ff ff       	call   c0001bcd <st_word>
c00068fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006901:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006904:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006907:	a8 10                	test   al,0x10
c0006909:	75 06                	jne    c0006911 <f_rename+0x18e>
c000690b:	83 c8 20             	or     eax,0x20
c000690e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006911:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006918:	e8 9c d1 ff ff       	call   c0003ab9 <store_xdir>
c000691d:	85 c0                	test   eax,eax
c000691f:	0f 84 1c 01 00 00    	je     c0006a41 <f_rename+0x2be>
c0006925:	e9 2d 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c000692a:	b9 20 00 00 00       	mov    ecx,0x20
c000692f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006936:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693a:	e8 9b b2 ff ff       	call   c0001bda <mem_cpy>
c000693f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006944:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006948:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694f:	e8 86 b2 ff ff       	call   c0001bda <mem_cpy>
c0006954:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000695b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006962:	e8 fa e3 ff ff       	call   c0004d61 <follow_path>
c0006967:	85 c0                	test   eax,eax
c0006969:	75 27                	jne    c0006992 <f_rename+0x20f>
c000696b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006976:	0f 85 f3 fe ff ff    	jne    c000686f <f_rename+0xec>
c000697c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006983:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698a:	0f 85 df fe ff ff    	jne    c000686f <f_rename+0xec>
c0006990:	eb 09                	jmp    c000699b <f_rename+0x218>
c0006992:	83 f8 04             	cmp    eax,0x4
c0006995:	0f 85 bc 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c000699b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a2:	e8 3b d8 ff ff       	call   c00041e2 <dir_register>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 a8 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00069af:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069b6:	b9 13 00 00 00       	mov    ecx,0x13
c00069bb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069be:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069c2:	e8 13 b2 ff ff       	call   c0001bda <mem_cpy>
c00069c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069cb:	a8 10                	test   al,0x10
c00069cd:	75 03                	jne    c00069d2 <f_rename+0x24f>
c00069cf:	83 c8 20             	or     eax,0x20
c00069d2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069dd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069e1:	74 5e                	je     c0006a41 <f_rename+0x2be>
c00069e3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069ea:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069ee:	74 51                	je     c0006a41 <f_rename+0x2be>
c00069f0:	89 f2                	mov    edx,esi
c00069f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069f6:	8a 07                	mov    al,BYTE PTR [edi]
c00069f8:	e8 d9 e2 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c00069fd:	89 c2                	mov    edx,eax
c00069ff:	89 f8                	mov    eax,edi
c0006a01:	e8 ee b3 ff ff       	call   c0001df4 <clst2sect>
c0006a06:	89 c6                	mov    esi,eax
c0006a08:	89 d1                	mov    ecx,edx
c0006a0a:	b8 02 00 00 00       	mov    eax,0x2
c0006a0f:	09 f2                	or     edx,esi
c0006a11:	74 44                	je     c0006a57 <f_rename+0x2d4>
c0006a13:	89 f2                	mov    edx,esi
c0006a15:	89 f8                	mov    eax,edi
c0006a17:	e8 1d b9 ff ff       	call   c0002339 <move_window>
c0006a1c:	85 c0                	test   eax,eax
c0006a1e:	75 37                	jne    c0006a57 <f_rename+0x2d4>
c0006a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a24:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a28:	75 17                	jne    c0006a41 <f_rename+0x2be>
c0006a2a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a2d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a34:	e8 c6 e2 ff ff       	call   c0004cff <st_clust.isra.1>
c0006a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a45:	e8 f4 d0 ff ff       	call   c0003b3e <dir_remove>
c0006a4a:	85 c0                	test   eax,eax
c0006a4c:	75 09                	jne    c0006a57 <f_rename+0x2d4>
c0006a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a52:	e8 0d da ff ff       	call   c0004464 <sync_fs>
c0006a57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5b:	83 ec 0c             	sub    esp,0xc
c0006a5e:	53                   	push   ebx
c0006a5f:	e8 78 1b 00 00       	call   c00085dc <ff_memfree>
c0006a64:	83 c4 10             	add    esp,0x10
c0006a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a71:	5b                   	pop    ebx
c0006a72:	5e                   	pop    esi
c0006a73:	5f                   	pop    edi
c0006a74:	5d                   	pop    ebp
c0006a75:	c3                   	ret    

c0006a76 <f_chmod>:
c0006a76:	57                   	push   edi
c0006a77:	b9 02 00 00 00       	mov    ecx,0x2
c0006a7c:	56                   	push   esi
c0006a7d:	53                   	push   ebx
c0006a7e:	83 ec 60             	sub    esp,0x60
c0006a81:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a85:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a89:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a8d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a91:	e8 55 bb ff ff       	call   c00025eb <mount_volume>
c0006a96:	85 c0                	test   eax,eax
c0006a98:	0f 85 af 00 00 00    	jne    c0006b4d <f_chmod+0xd7>
c0006a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa2:	83 ec 0c             	sub    esp,0xc
c0006aa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa9:	68 60 04 00 00       	push   0x460
c0006aae:	e8 11 1b 00 00       	call   c00085c4 <ff_memalloc>
c0006ab3:	83 c4 10             	add    esp,0x10
c0006ab6:	89 c6                	mov    esi,eax
c0006ab8:	b8 11 00 00 00       	mov    eax,0x11
c0006abd:	85 f6                	test   esi,esi
c0006abf:	0f 84 88 00 00 00    	je     c0006b4d <f_chmod+0xd7>
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006acf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ad2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ad5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006add:	e8 7f e2 ff ff       	call   c0004d61 <follow_path>
c0006ae2:	85 c0                	test   eax,eax
c0006ae4:	75 53                	jne    c0006b39 <f_chmod+0xc3>
c0006ae6:	b8 06 00 00 00       	mov    eax,0x6
c0006aeb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006af0:	75 47                	jne    c0006b39 <f_chmod+0xc3>
c0006af2:	89 f9                	mov    ecx,edi
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	83 e1 27             	and    ecx,0x27
c0006afb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006afe:	75 1d                	jne    c0006b1d <f_chmod+0xa7>
c0006b00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b03:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b06:	21 cb                	and    ebx,ecx
c0006b08:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b0b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b12:	e8 a2 cf ff ff       	call   c0003ab9 <store_xdir>
c0006b17:	85 c0                	test   eax,eax
c0006b19:	75 1e                	jne    c0006b39 <f_chmod+0xc3>
c0006b1b:	eb 13                	jmp    c0006b30 <f_chmod+0xba>
c0006b1d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b21:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b24:	21 cb                	and    ebx,ecx
c0006b26:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b29:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b2c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b34:	e8 2b d9 ff ff       	call   c0004464 <sync_fs>
c0006b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b3d:	83 ec 0c             	sub    esp,0xc
c0006b40:	56                   	push   esi
c0006b41:	e8 96 1a 00 00       	call   c00085dc <ff_memfree>
c0006b46:	83 c4 10             	add    esp,0x10
c0006b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b4d:	83 c4 60             	add    esp,0x60
c0006b50:	5b                   	pop    ebx
c0006b51:	5e                   	pop    esi
c0006b52:	5f                   	pop    edi
c0006b53:	c3                   	ret    

c0006b54 <f_utime>:
c0006b54:	56                   	push   esi
c0006b55:	b9 02 00 00 00       	mov    ecx,0x2
c0006b5a:	53                   	push   ebx
c0006b5b:	83 ec 64             	sub    esp,0x64
c0006b5e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b66:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b6a:	e8 7c ba ff ff       	call   c00025eb <mount_volume>
c0006b6f:	85 c0                	test   eax,eax
c0006b71:	0f 85 b5 00 00 00    	jne    c0006c2c <f_utime+0xd8>
c0006b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7b:	83 ec 0c             	sub    esp,0xc
c0006b7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b82:	68 60 04 00 00       	push   0x460
c0006b87:	e8 38 1a 00 00       	call   c00085c4 <ff_memalloc>
c0006b8c:	83 c4 10             	add    esp,0x10
c0006b8f:	89 c3                	mov    ebx,eax
c0006b91:	b8 11 00 00 00       	mov    eax,0x11
c0006b96:	85 db                	test   ebx,ebx
c0006b98:	0f 84 8e 00 00 00    	je     c0006c2c <f_utime+0xd8>
c0006b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bab:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bae:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bb6:	e8 a6 e1 ff ff       	call   c0004d61 <follow_path>
c0006bbb:	85 c0                	test   eax,eax
c0006bbd:	75 59                	jne    c0006c18 <f_utime+0xc4>
c0006bbf:	b8 06 00 00 00       	mov    eax,0x6
c0006bc4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc9:	75 4d                	jne    c0006c18 <f_utime+0xc4>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bd3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bd7:	c1 e2 10             	shl    edx,0x10
c0006bda:	09 ca                	or     edx,ecx
c0006bdc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bdf:	75 1a                	jne    c0006bfb <f_utime+0xa7>
c0006be1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006be4:	83 c0 0c             	add    eax,0xc
c0006be7:	e8 e5 af ff ff       	call   c0001bd1 <st_dword>
c0006bec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf0:	e8 c4 ce ff ff       	call   c0003ab9 <store_xdir>
c0006bf5:	85 c0                	test   eax,eax
c0006bf7:	75 1f                	jne    c0006c18 <f_utime+0xc4>
c0006bf9:	eb 14                	jmp    c0006c0f <f_utime+0xbb>
c0006bfb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bff:	83 c0 16             	add    eax,0x16
c0006c02:	e8 ca af ff ff       	call   c0001bd1 <st_dword>
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	e8 4c d8 ff ff       	call   c0004464 <sync_fs>
c0006c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c1c:	83 ec 0c             	sub    esp,0xc
c0006c1f:	53                   	push   ebx
c0006c20:	e8 b7 19 00 00       	call   c00085dc <ff_memfree>
c0006c25:	83 c4 10             	add    esp,0x10
c0006c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c2c:	83 c4 64             	add    esp,0x64
c0006c2f:	5b                   	pop    ebx
c0006c30:	5e                   	pop    esi
c0006c31:	c3                   	ret    

c0006c32 <f_getlabel>:
c0006c32:	55                   	push   ebp
c0006c33:	31 c9                	xor    ecx,ecx
c0006c35:	57                   	push   edi
c0006c36:	56                   	push   esi
c0006c37:	53                   	push   ebx
c0006c38:	83 ec 6c             	sub    esp,0x6c
c0006c3b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c46:	e8 a0 b9 ff ff       	call   c00025eb <mount_volume>
c0006c4b:	89 c6                	mov    esi,eax
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	0f 85 c1 01 00 00    	jne    c0006e16 <f_getlabel+0x1e4>
c0006c55:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c5d:	0f 84 5f 01 00 00    	je     c0006dc2 <f_getlabel+0x190>
c0006c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c67:	31 d2                	xor    edx,edx
c0006c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c6d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c79:	e8 39 c4 ff ff       	call   c00030b7 <dir_sdi>
c0006c7e:	85 c0                	test   eax,eax
c0006c80:	0f 85 2d 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c86:	ba 01 00 00 00       	mov    edx,0x1
c0006c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c8f:	e8 33 cc ff ff       	call   c00038c7 <dir_read>
c0006c94:	85 c0                	test   eax,eax
c0006c96:	0f 85 17 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ca3:	74 09                	je     c0006cae <f_getlabel+0x7c>
c0006ca5:	31 db                	xor    ebx,ebx
c0006ca7:	31 c9                	xor    ecx,ecx
c0006ca9:	e9 c8 00 00 00       	jmp    c0006d76 <f_getlabel+0x144>
c0006cae:	31 ed                	xor    ebp,ebp
c0006cb0:	31 db                	xor    ebx,ebx
c0006cb2:	31 ff                	xor    edi,edi
c0006cb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cbc:	39 fa                	cmp    edx,edi
c0006cbe:	76 4b                	jbe    c0006d0b <f_getlabel+0xd9>
c0006cc0:	47                   	inc    edi
c0006cc1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cc4:	01 d0                	add    eax,edx
c0006cc6:	e8 90 ae ff ff       	call   c0001b5b <ld_word>
c0006ccb:	66 85 ed             	test   bp,bp
c0006cce:	75 0d                	jne    c0006cdd <f_getlabel+0xab>
c0006cd0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cd6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cdb:	76 28                	jbe    c0006d05 <f_getlabel+0xd3>
c0006cdd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ce4:	89 e9                	mov    ecx,ebp
c0006ce6:	01 da                	add    edx,ebx
c0006ce8:	c1 e1 10             	shl    ecx,0x10
c0006ceb:	0f b7 c0             	movzx  eax,ax
c0006cee:	09 c8                	or     eax,ecx
c0006cf0:	b9 04 00 00 00       	mov    ecx,0x4
c0006cf5:	e8 01 b0 ff ff       	call   c0001cfb <put_utf>
c0006cfa:	84 c0                	test   al,al
c0006cfc:	74 0b                	je     c0006d09 <f_getlabel+0xd7>
c0006cfe:	0f b6 c0             	movzx  eax,al
c0006d01:	01 c3                	add    ebx,eax
c0006d03:	31 c0                	xor    eax,eax
c0006d05:	89 c5                	mov    ebp,eax
c0006d07:	eb ab                	jmp    c0006cb4 <f_getlabel+0x82>
c0006d09:	31 db                	xor    ebx,ebx
c0006d0b:	66 85 ed             	test   bp,bp
c0006d0e:	74 02                	je     c0006d12 <f_getlabel+0xe0>
c0006d10:	31 db                	xor    ebx,ebx
c0006d12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d19:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d1d:	e9 a0 00 00 00       	jmp    c0006dc2 <f_getlabel+0x190>
c0006d22:	83 ff 0b             	cmp    edi,0xb
c0006d25:	74 11                	je     c0006d38 <f_getlabel+0x106>
c0006d27:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d30:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d33:	c1 e0 08             	shl    eax,0x8
c0006d36:	09 c2                	or     edx,eax
c0006d38:	0f b7 d2             	movzx  edx,dx
c0006d3b:	50                   	push   eax
c0006d3c:	50                   	push   eax
c0006d3d:	68 b5 01 00 00       	push   0x1b5
c0006d42:	52                   	push   edx
c0006d43:	e8 44 19 00 00       	call   c000868c <ff_oem2uni>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	66 85 c0             	test   ax,ax
c0006d4e:	74 46                	je     c0006d96 <f_getlabel+0x164>
c0006d50:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d57:	0f b7 c0             	movzx  eax,ax
c0006d5a:	01 da                	add    edx,ebx
c0006d5c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d61:	e8 95 af ff ff       	call   c0001cfb <put_utf>
c0006d66:	84 c0                	test   al,al
c0006d68:	74 2c                	je     c0006d96 <f_getlabel+0x164>
c0006d6a:	0f b6 c0             	movzx  eax,al
c0006d6d:	01 c3                	add    ebx,eax
c0006d6f:	83 ff 0b             	cmp    edi,0xb
c0006d72:	74 24                	je     c0006d98 <f_getlabel+0x166>
c0006d74:	89 f9                	mov    ecx,edi
c0006d76:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d7a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d7d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d82:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d8b:	e8 9f ae ff ff       	call   c0001c2f <dbc_1st>
c0006d90:	85 c0                	test   eax,eax
c0006d92:	74 a4                	je     c0006d38 <f_getlabel+0x106>
c0006d94:	eb 8c                	jmp    c0006d22 <f_getlabel+0xf0>
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d9f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006da2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da9:	74 17                	je     c0006dc2 <f_getlabel+0x190>
c0006dab:	4b                   	dec    ebx
c0006dac:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006daf:	74 ee                	je     c0006d9f <f_getlabel+0x16d>
c0006db1:	eb 0f                	jmp    c0006dc2 <f_getlabel+0x190>
c0006db3:	83 f8 04             	cmp    eax,0x4
c0006db6:	75 5c                	jne    c0006e14 <f_getlabel+0x1e2>
c0006db8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dbf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dc2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dca:	74 4a                	je     c0006e16 <f_getlabel+0x1e4>
c0006dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dd3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dd6:	e8 5e b5 ff ff       	call   c0002339 <move_window>
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	85 c0                	test   eax,eax
c0006ddf:	75 35                	jne    c0006e16 <f_getlabel+0x1e4>
c0006de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006de5:	b8 43 00 00 00       	mov    eax,0x43
c0006dea:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dec:	80 f9 03             	cmp    cl,0x3
c0006def:	74 0f                	je     c0006e00 <f_getlabel+0x1ce>
c0006df1:	31 c0                	xor    eax,eax
c0006df3:	80 f9 04             	cmp    cl,0x4
c0006df6:	0f 94 c0             	sete   al
c0006df9:	48                   	dec    eax
c0006dfa:	83 e0 c3             	and    eax,0xffffffc3
c0006dfd:	83 c0 64             	add    eax,0x64
c0006e00:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e04:	e8 5f ad ff ff       	call   c0001b68 <ld_dword>
c0006e09:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e10:	89 07                	mov    DWORD PTR [edi],eax
c0006e12:	eb 02                	jmp    c0006e16 <f_getlabel+0x1e4>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	83 c4 6c             	add    esp,0x6c
c0006e19:	89 f0                	mov    eax,esi
c0006e1b:	5b                   	pop    ebx
c0006e1c:	5e                   	pop    esi
c0006e1d:	5f                   	pop    edi
c0006e1e:	5d                   	pop    ebp
c0006e1f:	c3                   	ret    

c0006e20 <f_setlabel>:
c0006e20:	56                   	push   esi
c0006e21:	b9 02 00 00 00       	mov    ecx,0x2
c0006e26:	53                   	push   ebx
c0006e27:	83 ec 74             	sub    esp,0x74
c0006e2a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e35:	e8 b1 b7 ff ff       	call   c00025eb <mount_volume>
c0006e3a:	89 c6                	mov    esi,eax
c0006e3c:	85 c0                	test   eax,eax
c0006e3e:	0f 85 41 02 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e4b:	0f 85 8e 00 00 00    	jne    c0006edf <f_setlabel+0xbf>
c0006e51:	b9 16 00 00 00       	mov    ecx,0x16
c0006e56:	31 d2                	xor    edx,edx
c0006e58:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e5c:	31 db                	xor    ebx,ebx
c0006e5e:	e8 8c ad ff ff       	call   c0001bef <mem_set>
c0006e63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e6a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e6d:	0f 86 0a 01 00 00    	jbe    c0006f7d <f_setlabel+0x15d>
c0006e73:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e7a:	e8 b6 ad ff ff       	call   c0001c35 <tchar2uni>
c0006e7f:	89 c6                	mov    esi,eax
c0006e81:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e86:	76 2a                	jbe    c0006eb2 <f_setlabel+0x92>
c0006e88:	83 f8 ff             	cmp    eax,0xffffffff
c0006e8b:	74 05                	je     c0006e92 <f_setlabel+0x72>
c0006e8d:	83 fb 09             	cmp    ebx,0x9
c0006e90:	76 0a                	jbe    c0006e9c <f_setlabel+0x7c>
c0006e92:	be 06 00 00 00       	mov    esi,0x6
c0006e97:	e9 e9 01 00 00       	jmp    c0007085 <f_setlabel+0x265>
c0006e9c:	89 c2                	mov    edx,eax
c0006e9e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ea2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ea5:	c1 ea 10             	shr    edx,0x10
c0006ea8:	01 c8                	add    eax,ecx
c0006eaa:	43                   	inc    ebx
c0006eab:	e8 1d ad ff ff       	call   c0001bcd <st_word>
c0006eb0:	eb 04                	jmp    c0006eb6 <f_setlabel+0x96>
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 dc                	je     c0006e92 <f_setlabel+0x72>
c0006eb6:	89 f2                	mov    edx,esi
c0006eb8:	b8 57 3e 02 c0       	mov    eax,0xc0023e57
c0006ebd:	e8 5b ad ff ff       	call   c0001c1d <chk_chr>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	75 cc                	jne    c0006e92 <f_setlabel+0x72>
c0006ec6:	83 fb 0a             	cmp    ebx,0xa
c0006ec9:	77 c7                	ja     c0006e92 <f_setlabel+0x72>
c0006ecb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ece:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ed2:	0f b7 d6             	movzx  edx,si
c0006ed5:	01 c8                	add    eax,ecx
c0006ed7:	43                   	inc    ebx
c0006ed8:	e8 f0 ac ff ff       	call   c0001bcd <st_word>
c0006edd:	eb 84                	jmp    c0006e63 <f_setlabel+0x43>
c0006edf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee4:	ba 20 00 00 00       	mov    edx,0x20
c0006ee9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006eed:	31 db                	xor    ebx,ebx
c0006eef:	e8 fb ac ff ff       	call   c0001bef <mem_set>
c0006ef4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006efb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006efe:	76 60                	jbe    c0006f60 <f_setlabel+0x140>
c0006f00:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f07:	e8 29 ad ff ff       	call   c0001c35 <tchar2uni>
c0006f0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f11:	0f 87 7b ff ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0006f17:	83 ec 0c             	sub    esp,0xc
c0006f1a:	50                   	push   eax
c0006f1b:	e8 e0 17 00 00       	call   c0008700 <ff_wtoupper>
c0006f20:	5a                   	pop    edx
c0006f21:	59                   	pop    ecx
c0006f22:	68 b5 01 00 00       	push   0x1b5
c0006f27:	50                   	push   eax
c0006f28:	e8 c7 16 00 00       	call   c00085f4 <ff_uni2oem>
c0006f2d:	83 c4 10             	add    esp,0x10
c0006f30:	89 c6                	mov    esi,eax
c0006f32:	66 85 c0             	test   ax,ax
c0006f35:	0f 84 57 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f3b:	0f b7 d0             	movzx  edx,ax
c0006f3e:	b8 50 3e 02 c0       	mov    eax,0xc0023e50
c0006f43:	e8 d5 ac ff ff       	call   c0001c1d <chk_chr>
c0006f48:	85 c0                	test   eax,eax
c0006f4a:	0f 85 42 ff ff ff    	jne    c0006e92 <f_setlabel+0x72>
c0006f50:	66 81 fe ff 00       	cmp    si,0xff
c0006f55:	0f 87 14 01 00 00    	ja     c000706f <f_setlabel+0x24f>
c0006f5b:	e9 fa 00 00 00       	jmp    c000705a <f_setlabel+0x23a>
c0006f60:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f65:	0f 84 27 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f6b:	85 db                	test   ebx,ebx
c0006f6d:	74 0e                	je     c0006f7d <f_setlabel+0x15d>
c0006f6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f72:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f77:	75 04                	jne    c0006f7d <f_setlabel+0x15d>
c0006f79:	89 c3                	mov    ebx,eax
c0006f7b:	eb ee                	jmp    c0006f6b <f_setlabel+0x14b>
c0006f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f81:	31 d2                	xor    edx,edx
c0006f83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f93:	e8 1f c1 ff ff       	call   c00030b7 <dir_sdi>
c0006f98:	89 c6                	mov    esi,eax
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	0f 85 e3 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006fa2:	ba 01 00 00 00       	mov    edx,0x1
c0006fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fab:	e8 17 c9 ff ff       	call   c00038c7 <dir_read>
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	75 21                	jne    c0006fd5 <f_setlabel+0x1b5>
c0006fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fbc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fbf:	74 5d                	je     c000701e <f_setlabel+0x1fe>
c0006fc1:	85 db                	test   ebx,ebx
c0006fc3:	74 0b                	je     c0006fd0 <f_setlabel+0x1b0>
c0006fc5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fca:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fce:	eb 70                	jmp    c0007040 <f_setlabel+0x220>
c0006fd0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fd3:	eb 70                	jmp    c0007045 <f_setlabel+0x225>
c0006fd5:	83 f8 04             	cmp    eax,0x4
c0006fd8:	75 7c                	jne    c0007056 <f_setlabel+0x236>
c0006fda:	85 db                	test   ebx,ebx
c0006fdc:	0f 84 a3 00 00 00    	je     c0007085 <f_setlabel+0x265>
c0006fe2:	ba 01 00 00 00       	mov    edx,0x1
c0006fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006feb:	e8 51 ca ff ff       	call   c0003a41 <dir_alloc>
c0006ff0:	89 c6                	mov    esi,eax
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 85 8b 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006ffa:	31 d2                	xor    edx,edx
c0006ffc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007000:	b9 20 00 00 00       	mov    ecx,0x20
c0007005:	e8 e5 ab ff ff       	call   c0001bef <mem_set>
c000700a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000700e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007011:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007015:	75 18                	jne    c000702f <f_setlabel+0x20f>
c0007017:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000701a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000701e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007021:	b9 16 00 00 00       	mov    ecx,0x16
c0007026:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702a:	83 c0 02             	add    eax,0x2
c000702d:	eb 9b                	jmp    c0006fca <f_setlabel+0x1aa>
c000702f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007033:	b9 0b 00 00 00       	mov    ecx,0xb
c0007038:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000703c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007040:	e8 95 ab ff ff       	call   c0001bda <mem_cpy>
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000704d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007051:	e8 0e d4 ff ff       	call   c0004464 <sync_fs>
c0007056:	89 c6                	mov    esi,eax
c0007058:	eb 2b                	jmp    c0007085 <f_setlabel+0x265>
c000705a:	83 fb 0a             	cmp    ebx,0xa
c000705d:	0f 87 2f fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007063:	89 f0                	mov    eax,esi
c0007065:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007069:	43                   	inc    ebx
c000706a:	e9 85 fe ff ff       	jmp    c0006ef4 <f_setlabel+0xd4>
c000706f:	83 fb 09             	cmp    ebx,0x9
c0007072:	0f 87 1a fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007078:	89 f0                	mov    eax,esi
c000707a:	66 c1 e8 08          	shr    ax,0x8
c000707e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007082:	43                   	inc    ebx
c0007083:	eb de                	jmp    c0007063 <f_setlabel+0x243>
c0007085:	89 f0                	mov    eax,esi
c0007087:	83 c4 74             	add    esp,0x74
c000708a:	5b                   	pop    ebx
c000708b:	5e                   	pop    esi
c000708c:	c3                   	ret    

c000708d <f_expand>:
c000708d:	55                   	push   ebp
c000708e:	57                   	push   edi
c000708f:	56                   	push   esi
c0007090:	53                   	push   ebx
c0007091:	83 ec 3c             	sub    esp,0x3c
c0007094:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007098:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000709c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ac:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070b4:	89 d8                	mov    eax,ebx
c00070b6:	e8 a3 b1 ff ff       	call   c000225e <validate>
c00070bb:	89 c5                	mov    ebp,eax
c00070bd:	85 c0                	test   eax,eax
c00070bf:	0f 85 f4 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c9:	85 ed                	test   ebp,ebp
c00070cb:	0f 85 e8 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d9:	75 0a                	jne    c00070e5 <f_expand+0x58>
c00070db:	bd 07 00 00 00       	mov    ebp,0x7
c00070e0:	e9 d4 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00070e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070eb:	75 ee                	jne    c00070db <f_expand+0x4e>
c00070ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070f1:	74 e8                	je     c00070db <f_expand+0x4e>
c00070f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070f7:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f9:	80 f9 04             	cmp    cl,0x4
c00070fc:	74 07                	je     c0007105 <f_expand+0x78>
c00070fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007103:	77 d6                	ja     c00070db <f_expand+0x4e>
c0007105:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007109:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000710d:	c1 e0 09             	shl    eax,0x9
c0007110:	8d 50 ff             	lea    edx,[eax-0x1]
c0007113:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007117:	0f 95 c2             	setne  dl
c000711a:	0f b6 d2             	movzx  edx,dl
c000711d:	89 d7                	mov    edi,edx
c000711f:	31 d2                	xor    edx,edx
c0007121:	52                   	push   edx
c0007122:	50                   	push   eax
c0007123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000712b:	e8 f0 bc 01 00       	call   c0022e20 <__udivdi3>
c0007130:	83 c4 10             	add    esp,0x10
c0007133:	01 f8                	add    eax,edi
c0007135:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007139:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000713c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007140:	83 ff 01             	cmp    edi,0x1
c0007143:	76 05                	jbe    c000714a <f_expand+0xbd>
c0007145:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007148:	77 05                	ja     c000714f <f_expand+0xc2>
c000714a:	bf 02 00 00 00       	mov    edi,0x2
c000714f:	80 f9 04             	cmp    cl,0x4
c0007152:	75 19                	jne    c000716d <f_expand+0xe0>
c0007154:	89 f0                	mov    eax,esi
c0007156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000715a:	89 fa                	mov    edx,edi
c000715c:	e8 f3 b9 ff ff       	call   c0002b54 <find_bitmap>
c0007161:	89 c6                	mov    esi,eax
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 70 ff ff ff    	je     c00070db <f_expand+0x4e>
c000716b:	eb 7f                	jmp    c00071ec <f_expand+0x15f>
c000716d:	89 fe                	mov    esi,edi
c000716f:	89 f9                	mov    ecx,edi
c0007171:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007179:	89 ca                	mov    edx,ecx
c000717b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000717f:	89 d8                	mov    eax,ebx
c0007181:	e8 3b bd ff ff       	call   c0002ec1 <get_fat>
c0007186:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000718a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718e:	41                   	inc    ecx
c000718f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007193:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007196:	77 05                	ja     c000719d <f_expand+0x110>
c0007198:	b9 02 00 00 00       	mov    ecx,0x2
c000719d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071a2:	74 3e                	je     c00071e2 <f_expand+0x155>
c00071a4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a9:	75 0a                	jne    c00071b5 <f_expand+0x128>
c00071ab:	bd 01 00 00 00       	mov    ebp,0x1
c00071b0:	e9 04 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071b5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ba:	75 13                	jne    c00071cf <f_expand+0x142>
c00071bc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071c4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c8:	75 0f                	jne    c00071d9 <f_expand+0x14c>
c00071ca:	e9 ce 00 00 00       	jmp    c000729d <f_expand+0x210>
c00071cf:	89 ce                	mov    esi,ecx
c00071d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d9:	39 f9                	cmp    ecx,edi
c00071db:	75 9c                	jne    c0007179 <f_expand+0xec>
c00071dd:	e9 f9 fe ff ff       	jmp    c00070db <f_expand+0x4e>
c00071e2:	bd 02 00 00 00       	mov    ebp,0x2
c00071e7:	e9 cd 00 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071ec:	83 f8 ff             	cmp    eax,0xffffffff
c00071ef:	74 ba                	je     c00071ab <f_expand+0x11e>
c00071f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00071f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007201:	74 51                	je     c0007254 <f_expand+0x1c7>
c0007203:	83 ec 0c             	sub    esp,0xc
c0007206:	89 f2                	mov    edx,esi
c0007208:	6a 01                	push   0x1
c000720a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000720e:	e8 f4 b9 ff ff       	call   c0002c07 <change_bitmap>
c0007213:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007217:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000721b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	85 c0                	test   eax,eax
c0007224:	74 2e                	je     c0007254 <f_expand+0x1c7>
c0007226:	eb 71                	jmp    c0007299 <f_expand+0x20c>
c0007228:	83 c9 ff             	or     ecx,0xffffffff
c000722b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007230:	74 03                	je     c0007235 <f_expand+0x1a8>
c0007232:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007235:	89 fa                	mov    edx,edi
c0007237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000723b:	e8 7c ba ff ff       	call   c0002cbc <put_fat>
c0007240:	85 c0                	test   eax,eax
c0007242:	75 55                	jne    c0007299 <f_expand+0x20c>
c0007244:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007248:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000724c:	47                   	inc    edi
c000724d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007252:	75 d4                	jne    c0007228 <f_expand+0x19b>
c0007254:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000725c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007261:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007264:	74 53                	je     c00072b9 <f_expand+0x22c>
c0007266:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007269:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000726d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007271:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007275:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007279:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000727c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000727f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007282:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007285:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007288:	39 ca                	cmp    edx,ecx
c000728a:	77 2d                	ja     c00072b9 <f_expand+0x22c>
c000728c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007290:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007297:	eb 20                	jmp    c00072b9 <f_expand+0x22c>
c0007299:	89 c5                	mov    ebp,eax
c000729b:	eb 1c                	jmp    c00072b9 <f_expand+0x22c>
c000729d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072a2:	74 0c                	je     c00072b0 <f_expand+0x223>
c00072a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a8:	89 f7                	mov    edi,esi
c00072aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072ae:	eb 9d                	jmp    c000724d <f_expand+0x1c0>
c00072b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072b7:	eb 9b                	jmp    c0007254 <f_expand+0x1c7>
c00072b9:	83 c4 3c             	add    esp,0x3c
c00072bc:	89 e8                	mov    eax,ebp
c00072be:	5b                   	pop    ebx
c00072bf:	5e                   	pop    esi
c00072c0:	5f                   	pop    edi
c00072c1:	5d                   	pop    ebp
c00072c2:	c3                   	ret    

c00072c3 <f_forward>:
c00072c3:	55                   	push   ebp
c00072c4:	57                   	push   edi
c00072c5:	56                   	push   esi
c00072c6:	53                   	push   ebx
c00072c7:	83 ec 2c             	sub    esp,0x2c
c00072ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072dc:	89 d8                	mov    eax,ebx
c00072de:	e8 7b af ff ff       	call   c000225e <validate>
c00072e3:	89 c5                	mov    ebp,eax
c00072e5:	85 c0                	test   eax,eax
c00072e7:	0f 85 aa 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072ed:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072f1:	85 ed                	test   ebp,ebp
c00072f3:	0f 85 9e 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072f9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072fd:	0f 84 8f 01 00 00    	je     c0007492 <f_forward+0x1cf>
c0007303:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007306:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007309:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000730c:	bf 00 00 00 00       	mov    edi,0x0
c0007311:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007314:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007318:	89 d1                	mov    ecx,edx
c000731a:	19 f9                	sbb    ecx,edi
c000731c:	0f 83 cf 00 00 00    	jae    c00073f1 <f_forward+0x12e>
c0007322:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007326:	e9 c6 00 00 00       	jmp    c00073f1 <f_forward+0x12e>
c000732b:	50                   	push   eax
c000732c:	50                   	push   eax
c000732d:	6a 00                	push   0x0
c000732f:	6a 00                	push   0x0
c0007331:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007335:	83 c4 10             	add    esp,0x10
c0007338:	85 c0                	test   eax,eax
c000733a:	0f 84 57 01 00 00    	je     c0007497 <f_forward+0x1d4>
c0007340:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007347:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000734a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000734e:	89 d7                	mov    edi,edx
c0007350:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007353:	89 c6                	mov    esi,eax
c0007355:	0f ac fe 09          	shrd   esi,edi,0x9
c0007359:	21 ce                	and    esi,ecx
c000735b:	89 c1                	mov    ecx,eax
c000735d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007363:	0f 84 98 00 00 00    	je     c0007401 <f_forward+0x13e>
c0007369:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000736d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007370:	89 c8                	mov    eax,ecx
c0007372:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007376:	e8 79 aa ff ff       	call   c0001df4 <clst2sect>
c000737b:	89 d7                	mov    edi,edx
c000737d:	09 c7                	or     edi,eax
c000737f:	0f 84 9e 00 00 00    	je     c0007423 <f_forward+0x160>
c0007385:	31 ff                	xor    edi,edi
c0007387:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000738a:	01 c6                	add    esi,eax
c000738c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007390:	11 d7                	adc    edi,edx
c0007392:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007395:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739c:	39 fa                	cmp    edx,edi
c000739e:	0f 85 a2 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073a4:	39 f0                	cmp    eax,esi
c00073a6:	0f 85 9a 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073af:	ba 00 02 00 00       	mov    edx,0x200
c00073b4:	25 ff 01 00 00       	and    eax,0x1ff
c00073b9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073bd:	29 c2                	sub    edx,eax
c00073bf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073c2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073c5:	39 d1                	cmp    ecx,edx
c00073c7:	76 02                	jbe    c00073cb <f_forward+0x108>
c00073c9:	89 d1                	mov    ecx,edx
c00073cb:	8d 73 50             	lea    esi,[ebx+0x50]
c00073ce:	52                   	push   edx
c00073cf:	01 c6                	add    esi,eax
c00073d1:	52                   	push   edx
c00073d2:	51                   	push   ecx
c00073d3:	56                   	push   esi
c00073d4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d8:	83 c4 10             	add    esp,0x10
c00073db:	85 c0                	test   eax,eax
c00073dd:	74 44                	je     c0007423 <f_forward+0x160>
c00073df:	31 ff                	xor    edi,edi
c00073e1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073e4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073e7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073eb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ef:	01 07                	add    DWORD PTR [edi],eax
c00073f1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073f6:	0f 85 2f ff ff ff    	jne    c000732b <f_forward+0x68>
c00073fc:	e9 96 00 00 00       	jmp    c0007497 <f_forward+0x1d4>
c0007401:	85 f6                	test   esi,esi
c0007403:	0f 85 60 ff ff ff    	jne    c0007369 <f_forward+0xa6>
c0007409:	89 d7                	mov    edi,edx
c000740b:	09 c7                	or     edi,eax
c000740d:	75 05                	jne    c0007414 <f_forward+0x151>
c000740f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007412:	eb 0a                	jmp    c000741e <f_forward+0x15b>
c0007414:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007417:	89 d8                	mov    eax,ebx
c0007419:	e8 a3 ba ff ff       	call   c0002ec1 <get_fat>
c000741e:	83 f8 01             	cmp    eax,0x1
c0007421:	77 0b                	ja     c000742e <f_forward+0x16b>
c0007423:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007427:	bd 02 00 00 00       	mov    ebp,0x2
c000742c:	eb 69                	jmp    c0007497 <f_forward+0x1d4>
c000742e:	83 f8 ff             	cmp    eax,0xffffffff
c0007431:	75 0b                	jne    c000743e <f_forward+0x17b>
c0007433:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007437:	bd 01 00 00 00       	mov    ebp,0x1
c000743c:	eb 59                	jmp    c0007497 <f_forward+0x1d4>
c000743e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007441:	e9 23 ff ff ff       	jmp    c0007369 <f_forward+0xa6>
c0007446:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000744a:	79 20                	jns    c000746c <f_forward+0x1a9>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	6a 01                	push   0x1
c0007451:	52                   	push   edx
c0007452:	50                   	push   eax
c0007453:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007457:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000745b:	50                   	push   eax
c000745c:	e8 c5 a6 ff ff       	call   c0001b26 <disk_write>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	85 c0                	test   eax,eax
c0007466:	75 cb                	jne    c0007433 <f_forward+0x170>
c0007468:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000746c:	83 ec 0c             	sub    esp,0xc
c000746f:	6a 01                	push   0x1
c0007471:	57                   	push   edi
c0007472:	56                   	push   esi
c0007473:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000747f:	50                   	push   eax
c0007480:	e8 8b a6 ff ff       	call   c0001b10 <disk_read>
c0007485:	83 c4 20             	add    esp,0x20
c0007488:	85 c0                	test   eax,eax
c000748a:	0f 84 1c ff ff ff    	je     c00073ac <f_forward+0xe9>
c0007490:	eb a1                	jmp    c0007433 <f_forward+0x170>
c0007492:	bd 07 00 00 00       	mov    ebp,0x7
c0007497:	83 c4 2c             	add    esp,0x2c
c000749a:	89 e8                	mov    eax,ebp
c000749c:	5b                   	pop    ebx
c000749d:	5e                   	pop    esi
c000749e:	5f                   	pop    edi
c000749f:	5d                   	pop    ebp
c00074a0:	c3                   	ret    

c00074a1 <f_mkfs>:
c00074a1:	55                   	push   ebp
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074aa:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074b0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074b7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074be:	e8 7a ac ff ff       	call   c000213d <get_ldnumber>
c00074c3:	85 c0                	test   eax,eax
c00074c5:	0f 88 ec 10 00 00    	js     c00085b7 <f_mkfs+0x1116>
c00074cb:	8b 14 85 80 89 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7680]
c00074d2:	85 d2                	test   edx,edx
c00074d4:	74 03                	je     c00074d9 <f_mkfs+0x38>
c00074d6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d9:	85 f6                	test   esi,esi
c00074db:	75 05                	jne    c00074e2 <f_mkfs+0x41>
c00074dd:	be 40 3e 02 c0       	mov    esi,0xc0023e40
c00074e2:	83 ec 0c             	sub    esp,0xc
c00074e5:	0f b6 c0             	movzx  eax,al
c00074e8:	bb 03 00 00 00       	mov    ebx,0x3
c00074ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074f5:	e8 13 a6 ff ff       	call   c0001b0d <disk_initialize>
c00074fa:	83 c4 10             	add    esp,0x10
c00074fd:	a8 01                	test   al,0x1
c00074ff:	0f 85 b2 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007505:	bb 0a 00 00 00       	mov    ebx,0xa
c000750a:	a8 04                	test   al,0x4
c000750c:	0f 85 a5 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007512:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007515:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007519:	85 c0                	test   eax,eax
c000751b:	75 20                	jne    c000753d <f_mkfs+0x9c>
c000751d:	51                   	push   ecx
c000751e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007522:	50                   	push   eax
c0007523:	6a 03                	push   0x3
c0007525:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007529:	e8 0e a6 ff ff       	call   c0001b3c <disk_ioctl>
c000752e:	83 c4 10             	add    esp,0x10
c0007531:	85 c0                	test   eax,eax
c0007533:	74 08                	je     c000753d <f_mkfs+0x9c>
c0007535:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000753d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007541:	8d 42 ff             	lea    eax,[edx-0x1]
c0007544:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007549:	77 04                	ja     c000754f <f_mkfs+0xae>
c000754b:	85 c2                	test   edx,eax
c000754d:	74 08                	je     c0007557 <f_mkfs+0xb6>
c000754f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007557:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000755a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000755e:	48                   	dec    eax
c000755f:	3c 01                	cmp    al,0x1
c0007561:	76 05                	jbe    c0007568 <f_mkfs+0xc7>
c0007563:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000756b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000756f:	48                   	dec    eax
c0007570:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007575:	77 07                	ja     c000757e <f_mkfs+0xdd>
c0007577:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000757c:	74 08                	je     c0007586 <f_mkfs+0xe5>
c000757e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007586:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007589:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000758f:	77 07                	ja     c0007598 <f_mkfs+0xf7>
c0007591:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007594:	85 d8                	test   eax,ebx
c0007596:	74 02                	je     c000759a <f_mkfs+0xf9>
c0007598:	31 db                	xor    ebx,ebx
c000759a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075a5:	77 0a                	ja     c00075b1 <f_mkfs+0x110>
c00075a7:	bb 11 00 00 00       	mov    ebx,0x11
c00075ac:	e9 06 10 00 00       	jmp    c00085b7 <f_mkfs+0x1116>
c00075b1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ba:	85 ed                	test   ebp,ebp
c00075bc:	75 1e                	jne    c00075dc <f_mkfs+0x13b>
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075cd:	50                   	push   eax
c00075ce:	e8 f1 0f 00 00       	call   c00085c4 <ff_memalloc>
c00075d3:	83 c4 10             	add    esp,0x10
c00075d6:	89 c5                	mov    ebp,eax
c00075d8:	85 c0                	test   eax,eax
c00075da:	74 cb                	je     c00075a7 <f_mkfs+0x106>
c00075dc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075e4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075ec:	52                   	push   edx
c00075ed:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075f1:	50                   	push   eax
c00075f2:	6a 01                	push   0x1
c00075f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f8:	e8 3f a5 ff ff       	call   c0001b3c <disk_ioctl>
c00075fd:	83 c4 10             	add    esp,0x10
c0007600:	85 c0                	test   eax,eax
c0007602:	0f 85 4a 0f 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007608:	89 f1                	mov    ecx,esi
c000760a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007612:	83 e1 0f             	and    ecx,0xf
c0007615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000761d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007621:	83 e6 08             	and    esi,0x8
c0007624:	75 56                	jne    c000767c <f_mkfs+0x1db>
c0007626:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000762a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000762e:	83 ff 00             	cmp    edi,0x0
c0007631:	76 20                	jbe    c0007653 <f_mkfs+0x1b2>
c0007633:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007638:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007640:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007646:	83 d7 ff             	adc    edi,0xffffffff
c0007649:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000764d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007651:	eb 21                	jmp    c0007674 <f_mkfs+0x1d3>
c0007653:	ba 3f 00 00 00       	mov    edx,0x3f
c0007658:	39 f2                	cmp    edx,esi
c000765a:	19 f8                	sbb    eax,edi
c000765c:	73 1e                	jae    c000767c <f_mkfs+0x1db>
c000765e:	83 c6 c1             	add    esi,0xffffffc1
c0007661:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007669:	83 d7 ff             	adc    edi,0xffffffff
c000766c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007670:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007674:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000767c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007680:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007684:	89 04 24             	mov    DWORD PTR [esp],eax
c0007687:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000768b:	31 c0                	xor    eax,eax
c000768d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007692:	89 c7                	mov    edi,eax
c0007694:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007697:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000769b:	0f 83 c5 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c00076a1:	89 df                	mov    edi,ebx
c00076a3:	c1 ef 09             	shr    edi,0x9
c00076a6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076aa:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076b1:	c1 ef 09             	shr    edi,0x9
c00076b4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076bd:	74 29                	je     c00076e8 <f_mkfs+0x247>
c00076bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076c5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076ca:	0f 97 c2             	seta   dl
c00076cd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076d0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076d4:	0f 92 c0             	setb   al
c00076d7:	08 c2                	or     dl,al
c00076d9:	75 5b                	jne    c0007736 <f_mkfs+0x295>
c00076db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076df:	83 e0 07             	and    eax,0x7
c00076e2:	3c 04                	cmp    al,0x4
c00076e4:	74 50                	je     c0007736 <f_mkfs+0x295>
c00076e6:	eb 1b                	jmp    c0007703 <f_mkfs+0x262>
c00076e8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076ed:	0f 87 73 0a 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00076f3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f9:	76 08                	jbe    c0007703 <f_mkfs+0x262>
c00076fb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007703:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007707:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000770b:	83 e0 01             	and    eax,0x1
c000770e:	80 e1 02             	and    cl,0x2
c0007711:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007715:	74 0d                	je     c0007724 <f_mkfs+0x283>
c0007717:	84 c0                	test   al,al
c0007719:	0f 84 53 09 00 00    	je     c0008072 <f_mkfs+0xbd1>
c000771f:	e9 12 08 00 00       	jmp    c0007f36 <f_mkfs+0xa95>
c0007724:	bb 13 00 00 00       	mov    ebx,0x13
c0007729:	84 c0                	test   al,al
c000772b:	0f 85 05 08 00 00    	jne    c0007f36 <f_mkfs+0xa95>
c0007731:	e9 39 0e 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0007736:	31 c0                	xor    eax,eax
c0007738:	ba ff 0f 00 00       	mov    edx,0xfff
c000773d:	89 c7                	mov    edi,eax
c000773f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007742:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007746:	0f 83 1a 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c000774c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007752:	77 39                	ja     c000778d <f_mkfs+0x2ec>
c0007754:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007759:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007761:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007764:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007768:	73 08                	jae    c0007772 <f_mkfs+0x2d1>
c000776a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007772:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007777:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000777a:	b8 00 00 00 00       	mov    eax,0x0
c000777f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007783:	73 08                	jae    c000778d <f_mkfs+0x2ec>
c0007785:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007795:	83 c0 20             	add    eax,0x20
c0007798:	83 d2 00             	adc    edx,0x0
c000779b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000779f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a7:	31 d2                	xor    edx,edx
c00077a9:	31 ff                	xor    edi,edi
c00077ab:	52                   	push   edx
c00077ac:	89 fb                	mov    ebx,edi
c00077ae:	50                   	push   eax
c00077af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b7:	e8 64 b6 01 00       	call   c0022e20 <__udivdi3>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	c1 e0 02             	shl    eax,0x2
c00077c2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077c6:	05 07 02 00 00       	add    eax,0x207
c00077cb:	89 f1                	mov    ecx,esi
c00077cd:	c1 e8 09             	shr    eax,0x9
c00077d0:	83 c1 ff             	add    ecx,0xffffffff
c00077d3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077d7:	83 d3 ff             	adc    ebx,0xffffffff
c00077da:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077de:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077e2:	31 d2                	xor    edx,edx
c00077e4:	01 c8                	add    eax,ecx
c00077e6:	11 da                	adc    edx,ebx
c00077e8:	89 c1                	mov    ecx,eax
c00077ea:	f7 de                	neg    esi
c00077ec:	89 d0                	mov    eax,edx
c00077ee:	83 d7 00             	adc    edi,0x0
c00077f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077f5:	f7 df                	neg    edi
c00077f7:	21 f1                	and    ecx,esi
c00077f9:	21 f8                	and    eax,edi
c00077fb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007807:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000780b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000780f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007812:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007816:	0f ac d0 01          	shrd   eax,edx,0x1
c000781a:	89 df                	mov    edi,ebx
c000781c:	d1 ea                	shr    edx,1
c000781e:	39 c1                	cmp    ecx,eax
c0007820:	19 d7                	sbb    edi,edx
c0007822:	0f 83 3e 09 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c0007828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000782c:	31 d2                	xor    edx,edx
c000782e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007836:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000783a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007841:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007845:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007849:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000784d:	83 f8 0f             	cmp    eax,0xf
c0007850:	0f 86 10 09 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c0007856:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000785e:	0f 87 02 09 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c0007864:	31 d2                	xor    edx,edx
c0007866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000786a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007872:	83 c0 07             	add    eax,0x7
c0007875:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000787d:	c1 e8 03             	shr    eax,0x3
c0007880:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007887:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000788b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000788f:	c1 e0 09             	shl    eax,0x9
c0007892:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007896:	48                   	dec    eax
c0007897:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000789b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000789f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078a3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078a7:	31 d2                	xor    edx,edx
c00078a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078ad:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078bd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078c1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078cd:	31 ff                	xor    edi,edi
c00078cf:	31 f6                	xor    esi,esi
c00078d1:	31 db                	xor    ebx,ebx
c00078d3:	85 ff                	test   edi,edi
c00078d5:	74 05                	je     c00078dc <f_mkfs+0x43b>
c00078d7:	4f                   	dec    edi
c00078d8:	74 44                	je     c000791e <f_mkfs+0x47d>
c00078da:	eb 4f                	jmp    c000792b <f_mkfs+0x48a>
c00078dc:	83 ec 0c             	sub    esp,0xc
c00078df:	0f b7 c3             	movzx  eax,bx
c00078e2:	50                   	push   eax
c00078e3:	e8 18 0e 00 00       	call   c0008700 <ff_wtoupper>
c00078e8:	83 c4 10             	add    esp,0x10
c00078eb:	89 c1                	mov    ecx,eax
c00078ed:	8d 53 01             	lea    edx,[ebx+0x1]
c00078f0:	66 39 c3             	cmp    bx,ax
c00078f3:	75 3e                	jne    c0007933 <f_mkfs+0x492>
c00078f5:	be 01 00 00 00       	mov    esi,0x1
c00078fa:	89 df                	mov    edi,ebx
c00078fc:	66 01 f7             	add    di,si
c00078ff:	75 07                	jne    c0007908 <f_mkfs+0x467>
c0007901:	83 fe 7f             	cmp    esi,0x7f
c0007904:	77 31                	ja     c0007937 <f_mkfs+0x496>
c0007906:	eb 16                	jmp    c000791e <f_mkfs+0x47d>
c0007908:	83 ec 0c             	sub    esp,0xc
c000790b:	0f b7 ff             	movzx  edi,di
c000790e:	57                   	push   edi
c000790f:	e8 ec 0d 00 00       	call   c0008700 <ff_wtoupper>
c0007914:	83 c4 10             	add    esp,0x10
c0007917:	39 c7                	cmp    edi,eax
c0007919:	75 e6                	jne    c0007901 <f_mkfs+0x460>
c000791b:	46                   	inc    esi
c000791c:	eb dc                	jmp    c00078fa <f_mkfs+0x459>
c000791e:	31 c0                	xor    eax,eax
c0007920:	89 d9                	mov    ecx,ebx
c0007922:	4e                   	dec    esi
c0007923:	0f 95 c0             	setne  al
c0007926:	43                   	inc    ebx
c0007927:	89 c7                	mov    edi,eax
c0007929:	eb 14                	jmp    c000793f <f_mkfs+0x49e>
c000792b:	89 f1                	mov    ecx,esi
c000792d:	01 f3                	add    ebx,esi
c000792f:	31 ff                	xor    edi,edi
c0007931:	eb 0c                	jmp    c000793f <f_mkfs+0x49e>
c0007933:	89 d3                	mov    ebx,edx
c0007935:	eb 08                	jmp    c000793f <f_mkfs+0x49e>
c0007937:	bf 02 00 00 00       	mov    edi,0x2
c000793c:	83 c9 ff             	or     ecx,0xffffffff
c000793f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007943:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007946:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000794a:	0f b6 c1             	movzx  eax,cl
c000794d:	e8 04 a7 ff ff       	call   c0002056 <xsum32>
c0007952:	66 c1 e9 08          	shr    cx,0x8
c0007956:	89 c2                	mov    edx,eax
c0007958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000795b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000795f:	0f b7 c1             	movzx  eax,cx
c0007962:	e8 ef a6 ff ff       	call   c0002056 <xsum32>
c0007967:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000796c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007970:	66 85 db             	test   bx,bx
c0007973:	74 1f                	je     c0007994 <f_mkfs+0x4f3>
c0007975:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007978:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000797f:	83 c0 02             	add    eax,0x2
c0007982:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007988:	39 c2                	cmp    edx,eax
c000798a:	74 08                	je     c0007994 <f_mkfs+0x4f3>
c000798c:	89 04 24             	mov    DWORD PTR [esp],eax
c000798f:	e9 3f ff ff ff       	jmp    c00078d3 <f_mkfs+0x432>
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	83 ec 0c             	sub    esp,0xc
c000799a:	05 01 02 00 00       	add    eax,0x201
c000799f:	c1 e8 09             	shr    eax,0x9
c00079a2:	50                   	push   eax
c00079a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079af:	55                   	push   ebp
c00079b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b4:	e8 6d a1 ff ff       	call   c0001b26 <disk_write>
c00079b9:	83 c4 20             	add    esp,0x20
c00079bc:	85 c0                	test   eax,eax
c00079be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079c1:	0f 85 8b 0b 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00079c7:	89 d0                	mov    eax,edx
c00079c9:	31 d2                	xor    edx,edx
c00079cb:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079cf:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079d3:	66 85 db             	test   bx,bx
c00079d6:	74 04                	je     c00079dc <f_mkfs+0x53b>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	eb b0                	jmp    c000798c <f_mkfs+0x4eb>
c00079dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079e0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079e4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079ee:	31 d2                	xor    edx,edx
c00079f0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079fb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079ff:	c1 eb 09             	shr    ebx,0x9
c0007a02:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a0d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a19:	8d 70 01             	lea    esi,[eax+0x1]
c0007a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a24:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a2b:	31 d2                	xor    edx,edx
c0007a2d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a35:	89 c1                	mov    ecx,eax
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 b1 a1 ff ff       	call   c0001bef <mem_set>
c0007a3e:	31 c0                	xor    eax,eax
c0007a40:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a43:	76 10                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a45:	83 fe 07             	cmp    esi,0x7
c0007a48:	76 0b                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a4a:	40                   	inc    eax
c0007a4b:	83 ee 08             	sub    esi,0x8
c0007a4e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a53:	eb eb                	jmp    c0007a40 <f_mkfs+0x59f>
c0007a55:	b2 01                	mov    dl,0x1
c0007a57:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a5b:	85 f6                	test   esi,esi
c0007a5d:	74 0c                	je     c0007a6b <f_mkfs+0x5ca>
c0007a5f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a62:	76 07                	jbe    c0007a6b <f_mkfs+0x5ca>
c0007a64:	08 11                	or     BYTE PTR [ecx],dl
c0007a66:	4e                   	dec    esi
c0007a67:	d1 e2                	shl    edx,1
c0007a69:	eb f0                	jmp    c0007a5b <f_mkfs+0x5ba>
c0007a6b:	89 df                	mov    edi,ebx
c0007a6d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a71:	76 04                	jbe    c0007a77 <f_mkfs+0x5d6>
c0007a73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a77:	83 ec 0c             	sub    esp,0xc
c0007a7a:	57                   	push   edi
c0007a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a83:	55                   	push   ebp
c0007a84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a88:	e8 99 a0 ff ff       	call   c0001b26 <disk_write>
c0007a8d:	83 c4 20             	add    esp,0x20
c0007a90:	85 c0                	test   eax,eax
c0007a92:	0f 85 ba 0a 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a9e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007aa2:	29 fb                	sub    ebx,edi
c0007aa4:	0f 85 7a ff ff ff    	jne    c0007a24 <f_mkfs+0x583>
c0007aaa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ab6:	31 f6                	xor    esi,esi
c0007ab8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007abc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007abf:	31 d2                	xor    edx,edx
c0007ac1:	89 e8                	mov    eax,ebp
c0007ac3:	e8 27 a1 ff ff       	call   c0001bef <mem_set>
c0007ac8:	31 c9                	xor    ecx,ecx
c0007aca:	85 db                	test   ebx,ebx
c0007acc:	75 40                	jne    c0007b0e <f_mkfs+0x66d>
c0007ace:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ad3:	89 e8                	mov    eax,ebp
c0007ad5:	bb 02 00 00 00       	mov    ebx,0x2
c0007ada:	e8 f2 a0 ff ff       	call   c0001bd1 <st_dword>
c0007adf:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ae2:	83 ca ff             	or     edx,0xffffffff
c0007ae5:	e8 e7 a0 ff ff       	call   c0001bd1 <st_dword>
c0007aea:	b9 08 00 00 00       	mov    ecx,0x8
c0007aef:	eb 1d                	jmp    c0007b0e <f_mkfs+0x66d>
c0007af1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007af4:	76 3b                	jbe    c0007b31 <f_mkfs+0x690>
c0007af6:	43                   	inc    ebx
c0007af7:	83 fe 01             	cmp    esi,0x1
c0007afa:	89 da                	mov    edx,ebx
c0007afc:	77 03                	ja     c0007b01 <f_mkfs+0x660>
c0007afe:	83 ca ff             	or     edx,0xffffffff
c0007b01:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b05:	4e                   	dec    esi
c0007b06:	e8 c6 a0 ff ff       	call   c0001bd1 <st_dword>
c0007b0b:	83 c1 04             	add    ecx,0x4
c0007b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b12:	85 f6                	test   esi,esi
c0007b14:	75 db                	jne    c0007af1 <f_mkfs+0x650>
c0007b16:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b1b:	77 14                	ja     c0007b31 <f_mkfs+0x690>
c0007b1d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b21:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b28:	85 f6                	test   esi,esi
c0007b2a:	74 05                	je     c0007b31 <f_mkfs+0x690>
c0007b2c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b2f:	77 dd                	ja     c0007b0e <f_mkfs+0x66d>
c0007b31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b39:	39 cf                	cmp    edi,ecx
c0007b3b:	76 02                	jbe    c0007b3f <f_mkfs+0x69e>
c0007b3d:	89 cf                	mov    edi,ecx
c0007b3f:	83 ec 0c             	sub    esp,0xc
c0007b42:	57                   	push   edi
c0007b43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b4b:	55                   	push   ebp
c0007b4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b50:	e8 d1 9f ff ff       	call   c0001b26 <disk_write>
c0007b55:	83 c4 20             	add    esp,0x20
c0007b58:	85 c0                	test   eax,eax
c0007b5a:	0f 85 f2 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b66:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b6a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b6e:	0f 85 48 ff ff ff    	jne    c0007abc <f_mkfs+0x61b>
c0007b74:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b77:	31 d2                	xor    edx,edx
c0007b79:	89 e8                	mov    eax,ebp
c0007b7b:	31 ff                	xor    edi,edi
c0007b7d:	e8 6d a0 ff ff       	call   c0001bef <mem_set>
c0007b82:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b85:	ba 02 00 00 00       	mov    edx,0x2
c0007b8a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b8e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b92:	e8 3a a0 ff ff       	call   c0001bd1 <st_dword>
c0007b97:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b9a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b9e:	e8 2e a0 ff ff       	call   c0001bd1 <st_dword>
c0007ba3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ba6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007baa:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bae:	e8 1e a0 ff ff       	call   c0001bd1 <st_dword>
c0007bb3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bbe:	83 c2 02             	add    edx,0x2
c0007bc1:	e8 0b a0 ff ff       	call   c0001bd1 <st_dword>
c0007bc6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bd1:	e8 fb 9f ff ff       	call   c0001bd1 <st_dword>
c0007bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bda:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bec:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007bf0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007bf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bf7:	39 cb                	cmp    ebx,ecx
c0007bf9:	76 02                	jbe    c0007bfd <f_mkfs+0x75c>
c0007bfb:	89 cb                	mov    ebx,ecx
c0007bfd:	83 ec 0c             	sub    esp,0xc
c0007c00:	53                   	push   ebx
c0007c01:	57                   	push   edi
c0007c02:	56                   	push   esi
c0007c03:	55                   	push   ebp
c0007c04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c08:	e8 19 9f ff ff       	call   c0001b26 <disk_write>
c0007c0d:	83 c4 20             	add    esp,0x20
c0007c10:	85 c0                	test   eax,eax
c0007c12:	0f 85 3a 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007c18:	31 d2                	xor    edx,edx
c0007c1a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c1f:	89 e8                	mov    eax,ebp
c0007c21:	e8 c9 9f ff ff       	call   c0001bef <mem_set>
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	01 de                	add    esi,ebx
c0007c2a:	11 d7                	adc    edi,edx
c0007c2c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c2f:	75 bf                	jne    c0007bf0 <f_mkfs+0x74f>
c0007c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c39:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c41:	b9 00 02 00 00       	mov    ecx,0x200
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	89 e8                	mov    eax,ebp
c0007c4a:	e8 a0 9f ff ff       	call   c0001bef <mem_set>
c0007c4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c54:	ba 20 3f 02 c0       	mov    edx,0xc0023f20
c0007c59:	89 e8                	mov    eax,ebp
c0007c5b:	e8 7a 9f ff ff       	call   c0001bda <mem_cpy>
c0007c60:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c6b:	e8 64 9f ff ff       	call   c0001bd4 <st_qword>
c0007c70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c74:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c7b:	e8 54 9f ff ff       	call   c0001bd4 <st_qword>
c0007c80:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c83:	ba 20 00 00 00       	mov    edx,0x20
c0007c88:	e8 44 9f ff ff       	call   c0001bd1 <st_dword>
c0007c8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c95:	e8 37 9f ff ff       	call   c0001bd1 <st_dword>
c0007c9a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ca2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007ca6:	e8 26 9f ff ff       	call   c0001bd1 <st_dword>
c0007cab:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cb2:	e8 1a 9f ff ff       	call   c0001bd1 <st_dword>
c0007cb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cbb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cbe:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cc1:	e8 0b 9f ff ff       	call   c0001bd1 <st_dword>
c0007cc6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cce:	e8 fe 9e ff ff       	call   c0001bd1 <st_dword>
c0007cd3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cd6:	ba 00 01 00 00       	mov    edx,0x100
c0007cdb:	e8 ed 9e ff ff       	call   c0001bcd <st_word>
c0007ce0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007ce4:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce9:	48                   	dec    eax
c0007cea:	74 05                	je     c0007cf1 <f_mkfs+0x850>
c0007cec:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cef:	eb f8                	jmp    c0007ce9 <f_mkfs+0x848>
c0007cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cfd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d01:	74 05                	je     c0007d08 <f_mkfs+0x867>
c0007d03:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d06:	eb f5                	jmp    c0007cfd <f_mkfs+0x85c>
c0007d08:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d0b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d10:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d16:	31 db                	xor    ebx,ebx
c0007d18:	e8 b0 9e ff ff       	call   c0001bcd <st_word>
c0007d1d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d23:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d2b:	e8 9d 9e ff ff       	call   c0001bcd <st_word>
c0007d30:	31 c9                	xor    ecx,ecx
c0007d32:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d35:	83 f8 01             	cmp    eax,0x1
c0007d38:	76 13                	jbe    c0007d4d <f_mkfs+0x8ac>
c0007d3a:	83 f9 70             	cmp    ecx,0x70
c0007d3d:	74 0e                	je     c0007d4d <f_mkfs+0x8ac>
c0007d3f:	89 da                	mov    edx,ebx
c0007d41:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d46:	e8 0b a3 ff ff       	call   c0002056 <xsum32>
c0007d4b:	89 c3                	mov    ebx,eax
c0007d4d:	41                   	inc    ecx
c0007d4e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d54:	75 dc                	jne    c0007d32 <f_mkfs+0x891>
c0007d56:	89 f0                	mov    eax,esi
c0007d58:	89 fa                	mov    edx,edi
c0007d5a:	83 c0 01             	add    eax,0x1
c0007d5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d61:	83 d2 00             	adc    edx,0x0
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d6b:	6a 01                	push   0x1
c0007d6d:	57                   	push   edi
c0007d6e:	56                   	push   esi
c0007d6f:	55                   	push   ebp
c0007d70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d74:	e8 ad 9d ff ff       	call   c0001b26 <disk_write>
c0007d79:	83 c4 20             	add    esp,0x20
c0007d7c:	85 c0                	test   eax,eax
c0007d7e:	0f 85 ce 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	b9 00 02 00 00       	mov    ecx,0x200
c0007d8b:	89 e8                	mov    eax,ebp
c0007d8d:	e8 5d 9e ff ff       	call   c0001bef <mem_set>
c0007d92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d9a:	e8 2e 9e ff ff       	call   c0001bcd <st_word>
c0007d9f:	89 f0                	mov    eax,esi
c0007da1:	89 fa                	mov    edx,edi
c0007da3:	83 c0 09             	add    eax,0x9
c0007da6:	83 d2 00             	adc    edx,0x0
c0007da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007db0:	31 c9                	xor    ecx,ecx
c0007db2:	41                   	inc    ecx
c0007db3:	89 da                	mov    edx,ebx
c0007db5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dba:	e8 97 a2 ff ff       	call   c0002056 <xsum32>
c0007dbf:	89 c3                	mov    ebx,eax
c0007dc1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dc7:	75 e9                	jne    c0007db2 <f_mkfs+0x911>
c0007dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dd1:	83 c0 01             	add    eax,0x1
c0007dd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd8:	83 d2 00             	adc    edx,0x0
c0007ddb:	83 ec 0c             	sub    esp,0xc
c0007dde:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007de2:	6a 01                	push   0x1
c0007de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dec:	55                   	push   ebp
c0007ded:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df1:	e8 30 9d ff ff       	call   c0001b26 <disk_write>
c0007df6:	83 c4 20             	add    esp,0x20
c0007df9:	85 c0                	test   eax,eax
c0007dfb:	0f 85 51 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e05:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e09:	75 09                	jne    c0007e14 <f_mkfs+0x973>
c0007e0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e0e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e12:	74 12                	je     c0007e26 <f_mkfs+0x985>
c0007e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e24:	eb 8a                	jmp    c0007db0 <f_mkfs+0x90f>
c0007e26:	31 d2                	xor    edx,edx
c0007e28:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2d:	89 e8                	mov    eax,ebp
c0007e2f:	e8 bb 9d ff ff       	call   c0001bef <mem_set>
c0007e34:	83 c6 0b             	add    esi,0xb
c0007e37:	83 d7 00             	adc    edi,0x0
c0007e3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e3e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e42:	31 c9                	xor    ecx,ecx
c0007e44:	41                   	inc    ecx
c0007e45:	89 da                	mov    edx,ebx
c0007e47:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e4c:	e8 05 a2 ff ff       	call   c0002056 <xsum32>
c0007e51:	89 c3                	mov    ebx,eax
c0007e53:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e59:	75 e9                	jne    c0007e44 <f_mkfs+0x9a3>
c0007e5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e5e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e62:	83 c6 01             	add    esi,0x1
c0007e65:	83 d7 00             	adc    edi,0x0
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	6a 01                	push   0x1
c0007e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e75:	55                   	push   ebp
c0007e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e7a:	e8 a7 9c ff ff       	call   c0001b26 <disk_write>
c0007e7f:	83 c4 20             	add    esp,0x20
c0007e82:	85 c0                	test   eax,eax
c0007e84:	0f 85 c8 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e8a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e8e:	75 06                	jne    c0007e96 <f_mkfs+0x9f5>
c0007e90:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e94:	74 09                	je     c0007e9f <f_mkfs+0x9fe>
c0007e96:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e99:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e9d:	eb a3                	jmp    c0007e42 <f_mkfs+0x9a1>
c0007e9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ea3:	89 da                	mov    edx,ebx
c0007ea5:	01 e8                	add    eax,ebp
c0007ea7:	e8 25 9d ff ff       	call   c0001bd1 <st_dword>
c0007eac:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007eb1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb9:	75 e4                	jne    c0007e9f <f_mkfs+0x9fe>
c0007ebb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ebe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ec2:	83 c6 02             	add    esi,0x2
c0007ec5:	83 d7 00             	adc    edi,0x0
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	6a 01                	push   0x1
c0007ecd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed5:	55                   	push   ebp
c0007ed6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eda:	e8 47 9c ff ff       	call   c0001b26 <disk_write>
c0007edf:	83 c4 20             	add    esp,0x20
c0007ee2:	85 c0                	test   eax,eax
c0007ee4:	0f 85 68 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007eea:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eef:	74 0d                	je     c0007efe <f_mkfs+0xa5d>
c0007ef1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef9:	e9 43 fd ff ff       	jmp    c0007c41 <f_mkfs+0x7a0>
c0007efe:	b1 07                	mov    cl,0x7
c0007f00:	e9 e3 05 00 00       	jmp    c00084e8 <f_mkfs+0x1047>
c0007f05:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f0a:	0f 85 4f 02 00 00    	jne    c000815f <f_mkfs+0xcbe>
c0007f10:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f15:	0f 86 22 02 00 00    	jbe    c000813d <f_mkfs+0xc9c>
c0007f1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f20:	0f 85 81 06 00 00    	jne    c00085a7 <f_mkfs+0x1106>
c0007f26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f2d:	83 f8 40             	cmp    eax,0x40
c0007f30:	0f 87 51 06 00 00    	ja     c0008587 <f_mkfs+0x10e6>
c0007f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f3a:	85 ff                	test   edi,edi
c0007f3c:	75 1c                	jne    c0007f5a <f_mkfs+0xab9>
c0007f3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f41:	ba 20 3e 02 c0       	mov    edx,0xc0023e20
c0007f46:	c1 e9 0c             	shr    ecx,0xc
c0007f49:	bf 01 00 00 00       	mov    edi,0x1
c0007f4e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f51:	66 85 c0             	test   ax,ax
c0007f54:	0f 85 95 01 00 00    	jne    c00080ef <f_mkfs+0xc4e>
c0007f5a:	31 d2                	xor    edx,edx
c0007f5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f5f:	f7 f7                	div    edi
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	0f 86 95 01 00 00    	jbe    c0008101 <f_mkfs+0xc60>
c0007f6c:	83 c0 02             	add    eax,0x2
c0007f6f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f74:	01 c0                	add    eax,eax
c0007f76:	05 ff 01 00 00       	add    eax,0x1ff
c0007f7b:	be 01 00 00 00       	mov    esi,0x1
c0007f80:	c1 e8 09             	shr    eax,0x9
c0007f83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f8b:	c1 e0 05             	shl    eax,0x5
c0007f8e:	c1 e8 09             	shr    eax,0x9
c0007f91:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f95:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f9a:	31 d2                	xor    edx,edx
c0007f9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fa0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fa4:	89 f0                	mov    eax,esi
c0007fa6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007faa:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fba:	31 d2                	xor    edx,edx
c0007fbc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fc1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fc5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc9:	31 db                	xor    ebx,ebx
c0007fcb:	01 c8                	add    eax,ecx
c0007fcd:	11 da                	adc    edx,ebx
c0007fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fd3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fd7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fdb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fdf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fe3:	f7 da                	neg    edx
c0007fe5:	21 d1                	and    ecx,edx
c0007fe7:	29 d9                	sub    ecx,ebx
c0007fe9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fee:	0f 85 20 01 00 00    	jne    c0008114 <f_mkfs+0xc73>
c0007ff4:	31 db                	xor    ebx,ebx
c0007ff6:	01 ce                	add    esi,ecx
c0007ff8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ffc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008000:	31 d2                	xor    edx,edx
c0008002:	89 f8                	mov    eax,edi
c0008004:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008008:	c1 e0 04             	shl    eax,0x4
c000800b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000800f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008013:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008017:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000801b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000801e:	19 d3                	sbb    ebx,edx
c0008020:	0f 82 40 01 00 00    	jb     c0008166 <f_mkfs+0xcc5>
c0008026:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008029:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000802d:	89 c8                	mov    eax,ecx
c000802f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008034:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008038:	29 f0                	sub    eax,esi
c000803a:	29 d0                	sub    eax,edx
c000803c:	31 d2                	xor    edx,edx
c000803e:	f7 f7                	div    edi
c0008040:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008045:	89 c3                	mov    ebx,eax
c0008047:	0f 85 b8 fe ff ff    	jne    c0007f05 <f_mkfs+0xa64>
c000804d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008052:	0f 87 1d 01 00 00    	ja     c0008175 <f_mkfs+0xcd4>
c0008058:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000805d:	0f 85 03 01 00 00    	jne    c0008166 <f_mkfs+0xcc5>
c0008063:	83 ff 01             	cmp    edi,0x1
c0008066:	0f 86 fa 00 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c000806c:	d1 ef                	shr    edi,1
c000806e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008072:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008076:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008079:	85 db                	test   ebx,ebx
c000807b:	75 2d                	jne    c00080aa <f_mkfs+0xc09>
c000807d:	89 cb                	mov    ebx,ecx
c000807f:	ba 30 3e 02 c0       	mov    edx,0xc0023e30
c0008084:	c1 eb 11             	shr    ebx,0x11
c0008087:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000808f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0008092:	66 85 c0             	test   ax,ax
c0008095:	74 11                	je     c00080a8 <f_mkfs+0xc07>
c0008097:	83 c2 02             	add    edx,0x2
c000809a:	39 d8                	cmp    eax,ebx
c000809c:	77 0a                	ja     c00080a8 <f_mkfs+0xc07>
c000809e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080a2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080a6:	eb e7                	jmp    c000808f <f_mkfs+0xbee>
c00080a8:	31 db                	xor    ebx,ebx
c00080aa:	31 d2                	xor    edx,edx
c00080ac:	89 c8                	mov    eax,ecx
c00080ae:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080b2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080be:	c1 ea 09             	shr    edx,0x9
c00080c1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080c6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080ca:	0f 87 96 00 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00080d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080e0:	be 20 00 00 00       	mov    esi,0x20
c00080e5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080ea:	e9 a6 fe ff ff       	jmp    c0007f95 <f_mkfs+0xaf4>
c00080ef:	83 c2 02             	add    edx,0x2
c00080f2:	39 c8                	cmp    eax,ecx
c00080f4:	0f 87 60 fe ff ff    	ja     c0007f5a <f_mkfs+0xab9>
c00080fa:	01 ff                	add    edi,edi
c00080fc:	e9 4d fe ff ff       	jmp    c0007f4e <f_mkfs+0xaad>
c0008101:	8d 04 40             	lea    eax,[eax+eax*2]
c0008104:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008109:	40                   	inc    eax
c000810a:	d1 e8                	shr    eax,1
c000810c:	83 c0 03             	add    eax,0x3
c000810f:	e9 62 fe ff ff       	jmp    c0007f76 <f_mkfs+0xad5>
c0008114:	31 d2                	xor    edx,edx
c0008116:	89 c8                	mov    eax,ecx
c0008118:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000811c:	85 d2                	test   edx,edx
c000811e:	74 0c                	je     c000812c <f_mkfs+0xc8b>
c0008120:	49                   	dec    ecx
c0008121:	46                   	inc    esi
c0008122:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008127:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000812c:	89 c8                	mov    eax,ecx
c000812e:	31 d2                	xor    edx,edx
c0008130:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008134:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008138:	e9 c3 fe ff ff       	jmp    c0008000 <f_mkfs+0xb5f>
c000813d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008142:	77 31                	ja     c0008175 <f_mkfs+0xcd4>
c0008144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008149:	75 1b                	jne    c0008166 <f_mkfs+0xcc5>
c000814b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000814e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008152:	3d 80 00 00 00       	cmp    eax,0x80
c0008157:	0f 86 d9 fd ff ff    	jbe    c0007f36 <f_mkfs+0xa95>
c000815d:	eb 07                	jmp    c0008166 <f_mkfs+0xcc5>
c000815f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008164:	76 0a                	jbe    c0008170 <f_mkfs+0xccf>
c0008166:	bb 0e 00 00 00       	mov    ebx,0xe
c000816b:	e9 ff 03 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0008170:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008175:	31 d2                	xor    edx,edx
c0008177:	b9 00 02 00 00       	mov    ecx,0x200
c000817c:	89 e8                	mov    eax,ebp
c000817e:	e8 6c 9a ff ff       	call   c0001bef <mem_set>
c0008183:	b9 0b 00 00 00       	mov    ecx,0xb
c0008188:	ba 42 3f 02 c0       	mov    edx,0xc0023f42
c000818d:	89 e8                	mov    eax,ebp
c000818f:	e8 46 9a ff ff       	call   c0001bda <mem_cpy>
c0008194:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008197:	ba 00 02 00 00       	mov    edx,0x200
c000819c:	e8 2c 9a ff ff       	call   c0001bcd <st_word>
c00081a1:	89 f8                	mov    eax,edi
c00081a3:	0f b7 d6             	movzx  edx,si
c00081a6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081ac:	e8 1c 9a ff ff       	call   c0001bcd <st_word>
c00081b1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ba:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081bd:	75 08                	jne    c00081c7 <f_mkfs+0xd26>
c00081bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081c7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081ce:	e8 fa 99 ff ff       	call   c0001bcd <st_word>
c00081d3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081dc:	39 d0                	cmp    eax,edx
c00081de:	b8 00 00 00 00       	mov    eax,0x0
c00081e3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081e7:	72 0a                	jb     c00081f3 <f_mkfs+0xd52>
c00081e9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081ec:	e8 dc 99 ff ff       	call   c0001bcd <st_word>
c00081f1:	eb 08                	jmp    c00081fb <f_mkfs+0xd5a>
c00081f3:	8d 45 20             	lea    eax,[ebp+0x20]
c00081f6:	e8 d6 99 ff ff       	call   c0001bd1 <st_dword>
c00081fb:	8d 45 18             	lea    eax,[ebp+0x18]
c00081fe:	ba 3f 00 00 00       	mov    edx,0x3f
c0008203:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008207:	e8 c1 99 ff ff       	call   c0001bcd <st_word>
c000820c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000820f:	ba ff 00 00 00       	mov    edx,0xff
c0008214:	e8 b4 99 ff ff       	call   c0001bcd <st_word>
c0008219:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000821c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008220:	e8 ac 99 ff ff       	call   c0001bd1 <st_dword>
c0008225:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000822a:	75 57                	jne    c0008283 <f_mkfs+0xde2>
c000822c:	8d 45 43             	lea    eax,[ebp+0x43]
c000822f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008234:	e8 98 99 ff ff       	call   c0001bd1 <st_dword>
c0008239:	8d 45 24             	lea    eax,[ebp+0x24]
c000823c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008240:	e8 8c 99 ff ff       	call   c0001bd1 <st_dword>
c0008245:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008248:	ba 02 00 00 00       	mov    edx,0x2
c000824d:	e8 7f 99 ff ff       	call   c0001bd1 <st_dword>
c0008252:	8d 45 30             	lea    eax,[ebp+0x30]
c0008255:	ba 01 00 00 00       	mov    edx,0x1
c000825a:	e8 6e 99 ff ff       	call   c0001bcd <st_word>
c000825f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008262:	ba 06 00 00 00       	mov    edx,0x6
c0008267:	e8 61 99 ff ff       	call   c0001bcd <st_word>
c000826c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008270:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008274:	8d 45 47             	lea    eax,[ebp+0x47]
c0008277:	b9 13 00 00 00       	mov    ecx,0x13
c000827c:	ba 4e 3f 02 c0       	mov    edx,0xc0023f4e
c0008281:	eb 2f                	jmp    c00082b2 <f_mkfs+0xe11>
c0008283:	8d 45 27             	lea    eax,[ebp+0x27]
c0008286:	ba 00 00 21 50       	mov    edx,0x50210000
c000828b:	e8 41 99 ff ff       	call   c0001bd1 <st_dword>
c0008290:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008295:	8d 45 16             	lea    eax,[ebp+0x16]
c0008298:	e8 30 99 ff ff       	call   c0001bcd <st_word>
c000829d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082a1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082a5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a8:	b9 13 00 00 00       	mov    ecx,0x13
c00082ad:	ba 62 3f 02 c0       	mov    edx,0xc0023f62
c00082b2:	e8 23 99 ff ff       	call   c0001bda <mem_cpy>
c00082b7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082bd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082c2:	89 f0                	mov    eax,esi
c00082c4:	e8 04 99 ff ff       	call   c0001bcd <st_word>
c00082c9:	83 ec 0c             	sub    esp,0xc
c00082cc:	6a 01                	push   0x1
c00082ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d6:	55                   	push   ebp
c00082d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082db:	e8 46 98 ff ff       	call   c0001b26 <disk_write>
c00082e0:	83 c4 20             	add    esp,0x20
c00082e3:	85 c0                	test   eax,eax
c00082e5:	0f 85 67 02 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00082eb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f0:	0f 85 b7 00 00 00    	jne    c00083ad <f_mkfs+0xf0c>
c00082f6:	83 ec 0c             	sub    esp,0xc
c00082f9:	6a 01                	push   0x1
c00082fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008303:	83 c0 06             	add    eax,0x6
c0008306:	83 d2 00             	adc    edx,0x0
c0008309:	52                   	push   edx
c000830a:	50                   	push   eax
c000830b:	55                   	push   ebp
c000830c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008310:	e8 11 98 ff ff       	call   c0001b26 <disk_write>
c0008315:	83 c4 20             	add    esp,0x20
c0008318:	b9 00 02 00 00       	mov    ecx,0x200
c000831d:	31 d2                	xor    edx,edx
c000831f:	89 e8                	mov    eax,ebp
c0008321:	e8 c9 98 ff ff       	call   c0001bef <mem_set>
c0008326:	ba 52 52 61 41       	mov    edx,0x41615252
c000832b:	89 e8                	mov    eax,ebp
c000832d:	e8 9f 98 ff ff       	call   c0001bd1 <st_dword>
c0008332:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008338:	ba 72 72 41 61       	mov    edx,0x61417272
c000833d:	e8 8f 98 ff ff       	call   c0001bd1 <st_dword>
c0008342:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008345:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000834b:	e8 81 98 ff ff       	call   c0001bd1 <st_dword>
c0008350:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008356:	ba 02 00 00 00       	mov    edx,0x2
c000835b:	e8 71 98 ff ff       	call   c0001bd1 <st_dword>
c0008360:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008365:	89 f0                	mov    eax,esi
c0008367:	e8 61 98 ff ff       	call   c0001bcd <st_word>
c000836c:	83 ec 0c             	sub    esp,0xc
c000836f:	6a 01                	push   0x1
c0008371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008375:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008379:	83 c0 07             	add    eax,0x7
c000837c:	83 d2 00             	adc    edx,0x0
c000837f:	52                   	push   edx
c0008380:	50                   	push   eax
c0008381:	55                   	push   ebp
c0008382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008386:	e8 9b 97 ff ff       	call   c0001b26 <disk_write>
c000838b:	83 c4 14             	add    esp,0x14
c000838e:	6a 01                	push   0x1
c0008390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008398:	83 c0 01             	add    eax,0x1
c000839b:	83 d2 00             	adc    edx,0x0
c000839e:	52                   	push   edx
c000839f:	50                   	push   eax
c00083a0:	55                   	push   ebp
c00083a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a5:	e8 7c 97 ff ff       	call   c0001b26 <disk_write>
c00083aa:	83 c4 20             	add    esp,0x20
c00083ad:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083b4:	31 d2                	xor    edx,edx
c00083b6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083bc:	31 db                	xor    ebx,ebx
c00083be:	89 e8                	mov    eax,ebp
c00083c0:	e8 2a 98 ff ff       	call   c0001bef <mem_set>
c00083c5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083d1:	0f 94 c3             	sete   bl
c00083d4:	4b                   	dec    ebx
c00083d5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083db:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083e1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e6:	75 21                	jne    c0008409 <f_mkfs+0xf68>
c00083e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083ed:	89 e8                	mov    eax,ebp
c00083ef:	e8 dd 97 ff ff       	call   c0001bd1 <st_dword>
c00083f4:	8d 45 04             	lea    eax,[ebp+0x4]
c00083f7:	83 ca ff             	or     edx,0xffffffff
c00083fa:	e8 d2 97 ff ff       	call   c0001bd1 <st_dword>
c00083ff:	8d 45 08             	lea    eax,[ebp+0x8]
c0008402:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008407:	eb 04                	jmp    c000840d <f_mkfs+0xf6c>
c0008409:	89 da                	mov    edx,ebx
c000840b:	89 e8                	mov    eax,ebp
c000840d:	e8 bf 97 ff ff       	call   c0001bd1 <st_dword>
c0008412:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000841a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000841e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008422:	39 ce                	cmp    esi,ecx
c0008424:	76 02                	jbe    c0008428 <f_mkfs+0xf87>
c0008426:	89 ce                	mov    esi,ecx
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	56                   	push   esi
c000842c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008430:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008434:	55                   	push   ebp
c0008435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008439:	e8 e8 96 ff ff       	call   c0001b26 <disk_write>
c000843e:	83 c4 20             	add    esp,0x20
c0008441:	85 c0                	test   eax,eax
c0008443:	0f 85 09 01 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0008449:	31 d2                	xor    edx,edx
c000844b:	b9 00 02 00 00       	mov    ecx,0x200
c0008450:	89 e8                	mov    eax,ebp
c0008452:	e8 98 97 ff ff       	call   c0001bef <mem_set>
c0008457:	31 d2                	xor    edx,edx
c0008459:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000845d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008461:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008465:	75 b3                	jne    c000841a <f_mkfs+0xf79>
c0008467:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000846a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008471:	40                   	inc    eax
c0008472:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008476:	0f 87 65 ff ff ff    	ja     c00083e1 <f_mkfs+0xf40>
c000847c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008481:	74 04                	je     c0008487 <f_mkfs+0xfe6>
c0008483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008487:	89 fb                	mov    ebx,edi
c0008489:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000848d:	76 04                	jbe    c0008493 <f_mkfs+0xff2>
c000848f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	53                   	push   ebx
c0008497:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849f:	55                   	push   ebp
c00084a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084a4:	e8 7d 96 ff ff       	call   c0001b26 <disk_write>
c00084a9:	83 c4 20             	add    esp,0x20
c00084ac:	85 c0                	test   eax,eax
c00084ae:	0f 85 9e 00 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00084b4:	31 d2                	xor    edx,edx
c00084b6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ba:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084be:	29 df                	sub    edi,ebx
c00084c0:	75 c5                	jne    c0008487 <f_mkfs+0xfe6>
c00084c2:	b1 0c                	mov    cl,0xc
c00084c4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c9:	74 1d                	je     c00084e8 <f_mkfs+0x1047>
c00084cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00084d0:	b1 06                	mov    cl,0x6
c00084d2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084d6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084da:	72 0c                	jb     c00084e8 <f_mkfs+0x1047>
c00084dc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084e1:	0f 94 c1             	sete   cl
c00084e4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084ed:	75 4c                	jne    c000853b <f_mkfs+0x109a>
c00084ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084f7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008505:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008510:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000851b:	0f b6 c9             	movzx  ecx,cl
c000851e:	83 ec 0c             	sub    esp,0xc
c0008521:	55                   	push   ebp
c0008522:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000852d:	e8 f9 bf ff ff       	call   c000452b <create_partition>
c0008532:	83 c4 10             	add    esp,0x10
c0008535:	89 c3                	mov    ebx,eax
c0008537:	85 c0                	test   eax,eax
c0008539:	75 34                	jne    c000856f <f_mkfs+0x10ce>
c000853b:	31 db                	xor    ebx,ebx
c000853d:	50                   	push   eax
c000853e:	6a 00                	push   0x0
c0008540:	6a 00                	push   0x0
c0008542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008546:	e8 f1 95 ff ff       	call   c0001b3c <disk_ioctl>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	74 1d                	je     c000856f <f_mkfs+0x10ce>
c0008552:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000855a:	75 0c                	jne    c0008568 <f_mkfs+0x10c7>
c000855c:	83 ec 0c             	sub    esp,0xc
c000855f:	55                   	push   ebp
c0008560:	e8 77 00 00 00       	call   c00085dc <ff_memfree>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	bb 01 00 00 00       	mov    ebx,0x1
c000856d:	eb 48                	jmp    c00085b7 <f_mkfs+0x1116>
c000856f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008577:	75 3e                	jne    c00085b7 <f_mkfs+0x1116>
c0008579:	83 ec 0c             	sub    esp,0xc
c000857c:	55                   	push   ebp
c000857d:	e8 5a 00 00 00       	call   c00085dc <ff_memfree>
c0008582:	83 c4 10             	add    esp,0x10
c0008585:	eb 30                	jmp    c00085b7 <f_mkfs+0x1116>
c0008587:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000858c:	0f 85 eb fa ff ff    	jne    c000807d <f_mkfs+0xbdc>
c0008592:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008596:	81 ff 80 00 00 00    	cmp    edi,0x80
c000859c:	0f 86 b8 f9 ff ff    	jbe    c0007f5a <f_mkfs+0xab9>
c00085a2:	e9 bf fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085a7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085ac:	0f 85 c0 fa ff ff    	jne    c0008072 <f_mkfs+0xbd1>
c00085b2:	e9 af fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085b7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085bd:	89 d8                	mov    eax,ebx
c00085bf:	5b                   	pop    ebx
c00085c0:	5e                   	pop    esi
c00085c1:	5f                   	pop    edi
c00085c2:	5d                   	pop    ebp
c00085c3:	c3                   	ret    

c00085c4 <ff_memalloc>:
c00085c4:	83 ec 0c             	sub    esp,0xc
c00085c7:	83 ec 0c             	sub    esp,0xc
c00085ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ce:	e8 88 17 00 00       	call   c0009d5b <malloc>
c00085d3:	83 c4 10             	add    esp,0x10
c00085d6:	83 c4 0c             	add    esp,0xc
c00085d9:	c3                   	ret    
c00085da:	66 90                	xchg   ax,ax

c00085dc <ff_memfree>:
c00085dc:	83 ec 0c             	sub    esp,0xc
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085e6:	e8 80 17 00 00       	call   c0009d6b <free>
c00085eb:	83 c4 10             	add    esp,0x10
c00085ee:	90                   	nop
c00085ef:	83 c4 0c             	add    esp,0xc
c00085f2:	c3                   	ret    
c00085f3:	90                   	nop

c00085f4 <ff_uni2oem>:
c00085f4:	83 ec 14             	sub    esp,0x14
c00085f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008606:	c7 44 24 0c 80 42 02 c0 	mov    DWORD PTR [esp+0xc],0xc0024280
c000860e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008613:	77 0b                	ja     c0008620 <ff_uni2oem+0x2c>
c0008615:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008619:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000861e:	eb 60                	jmp    c0008680 <ff_uni2oem+0x8c>
c0008620:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008628:	77 56                	ja     c0008680 <ff_uni2oem+0x8c>
c000862a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008630:	75 4e                	jne    c0008680 <ff_uni2oem+0x8c>
c0008632:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008639:	eb 0d                	jmp    c0008648 <ff_uni2oem+0x54>
c000863b:	90                   	nop
c000863c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008641:	40                   	inc    eax
c0008642:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008647:	90                   	nop
c0008648:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000864e:	77 1c                	ja     c000866c <ff_uni2oem+0x78>
c0008650:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008655:	01 c0                	add    eax,eax
c0008657:	89 c2                	mov    edx,eax
c0008659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000865d:	01 d0                	add    eax,edx
c000865f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008662:	0f b7 c0             	movzx  eax,ax
c0008665:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008669:	75 d1                	jne    c000863c <ff_uni2oem+0x48>
c000866b:	90                   	nop
c000866c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008671:	83 e8 80             	sub    eax,0xffffff80
c0008674:	25 ff 00 00 00       	and    eax,0xff
c0008679:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000867e:	66 90                	xchg   ax,ax
c0008680:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008685:	83 c4 14             	add    esp,0x14
c0008688:	c3                   	ret    
c0008689:	8d 76 00             	lea    esi,[esi+0x0]

c000868c <ff_oem2uni>:
c000868c:	83 ec 18             	sub    esp,0x18
c000868f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008697:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000869c:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086a0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086a7:	c7 44 24 10 80 42 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024280
c00086af:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086b5:	77 0d                	ja     c00086c4 <ff_oem2uni+0x38>
c00086b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086c0:	eb 32                	jmp    c00086f4 <ff_oem2uni+0x68>
c00086c2:	66 90                	xchg   ax,ax
c00086c4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086ca:	75 28                	jne    c00086f4 <ff_oem2uni+0x68>
c00086cc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086d3:	77 1f                	ja     c00086f4 <ff_oem2uni+0x68>
c00086d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086da:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086df:	01 c0                	add    eax,eax
c00086e1:	89 c2                	mov    edx,eax
c00086e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086e7:	01 d0                	add    eax,edx
c00086e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086ec:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086f1:	8d 76 00             	lea    esi,[esi+0x0]
c00086f4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f9:	83 c4 18             	add    esp,0x18
c00086fc:	c3                   	ret    
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]

c0008700 <ff_wtoupper>:
c0008700:	83 ec 10             	sub    esp,0x10
c0008703:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000870b:	0f 87 4f 01 00 00    	ja     c0008860 <ff_wtoupper+0x160>
c0008711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008715:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000871a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008721:	77 09                	ja     c000872c <ff_wtoupper+0x2c>
c0008723:	b8 80 40 02 c0       	mov    eax,0xc0024080
c0008728:	eb 0a                	jmp    c0008734 <ff_wtoupper+0x34>
c000872a:	66 90                	xchg   ax,ax
c000872c:	b8 c0 3f 02 c0       	mov    eax,0xc0023fc0
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000873c:	8d 50 02             	lea    edx,[eax+0x2]
c000873f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008743:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008746:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000874b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008751:	0f 84 fd 00 00 00    	je     c0008854 <ff_wtoupper+0x154>
c0008757:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000875c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008761:	0f 82 ed 00 00 00    	jb     c0008854 <ff_wtoupper+0x154>
c0008767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000876b:	8d 50 02             	lea    edx,[eax+0x2]
c000876e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008772:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008775:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000877a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000877f:	66 c1 e8 08          	shr    ax,0x8
c0008783:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008788:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000878f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008794:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008799:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000879e:	01 ca                	add    edx,ecx
c00087a0:	39 d0                	cmp    eax,edx
c00087a2:	0f 8d 8c 00 00 00    	jge    c0008834 <ff_wtoupper+0x134>
c00087a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087ad:	83 f8 08             	cmp    eax,0x8
c00087b0:	0f 87 9a 00 00 00    	ja     c0008850 <ff_wtoupper+0x150>
c00087b6:	8b 04 85 80 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc080]
c00087bd:	ff e0                	jmp    eax
c00087bf:	90                   	nop
c00087c0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087c5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087ca:	29 c2                	sub    edx,eax
c00087cc:	89 d0                	mov    eax,edx
c00087ce:	01 c0                	add    eax,eax
c00087d0:	89 c2                	mov    edx,eax
c00087d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d6:	01 d0                	add    eax,edx
c00087d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087db:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087e0:	eb 4e                	jmp    c0008830 <ff_wtoupper+0x130>
c00087e2:	66 90                	xchg   ax,ax
c00087e4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087ed:	83 e0 01             	and    eax,0x1
c00087f0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087f5:	eb 39                	jmp    c0008830 <ff_wtoupper+0x130>
c00087f7:	90                   	nop
c00087f8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087fe:	eb 30                	jmp    c0008830 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008806:	eb 28                	jmp    c0008830 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000880e:	eb 20                	jmp    c0008830 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008816:	eb 18                	jmp    c0008830 <ff_wtoupper+0x130>
c0008818:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000881e:	eb 10                	jmp    c0008830 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008826:	eb 08                	jmp    c0008830 <ff_wtoupper+0x130>
c0008828:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000882f:	90                   	nop
c0008830:	eb 1e                	jmp    c0008850 <ff_wtoupper+0x150>
c0008832:	66 90                	xchg   ax,ax
c0008834:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000883a:	0f 85 f8 fe ff ff    	jne    c0008738 <ff_wtoupper+0x38>
c0008840:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008845:	01 c0                	add    eax,eax
c0008847:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000884b:	e9 e8 fe ff ff       	jmp    c0008738 <ff_wtoupper+0x38>
c0008850:	90                   	nop
c0008851:	8d 76 00             	lea    esi,[esi+0x0]
c0008854:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008859:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000885d:	8d 76 00             	lea    esi,[esi+0x0]
c0008860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	c3                   	ret    

c0008868 <CPU::current()>:
c0008868:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c000886d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008873:	c3                   	ret    

c0008874 <operator new(unsigned long)>:
c0008874:	e9 e2 14 00 00       	jmp    c0009d5b <malloc>

c0008879 <operator delete(void*)>:
c0008879:	e9 fd 14 00 00       	jmp    c0009d7b <rfree>

c000887e <disableIRQs()>:
c000887e:	fa                   	cli    
c000887f:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c0008885:	c3                   	ret    

c0008886 <enableIRQs()>:
c0008886:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c000888b:	48                   	dec    eax
c000888c:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c0008891:	75 01                	jne    c0008894 <enableIRQs()+0xe>
c0008893:	fb                   	sti    
c0008894:	c3                   	ret    

c0008895 <lockScheduler()>:
c0008895:	fa                   	cli    
c0008896:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c000889c:	c3                   	ret    

c000889d <unlockScheduler()>:
c000889d:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c00088a2:	48                   	dec    eax
c00088a3:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c00088a8:	75 01                	jne    c00088ab <unlockScheduler()+0xe>
c00088aa:	fb                   	sti    
c00088ab:	c3                   	ret    

c00088ac <lockStuff()>:
c00088ac:	fa                   	cli    
c00088ad:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c00088b3:	ff 05 04 9f 02 c0    	inc    DWORD PTR ds:0xc0029f04
c00088b9:	c3                   	ret    

c00088ba <unlockStuff()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	a1 04 9f 02 c0       	mov    eax,ds:0xc0029f04
c00088c2:	48                   	dec    eax
c00088c3:	a3 04 9f 02 c0       	mov    ds:0xc0029f04,eax
c00088c8:	75 18                	jne    c00088e2 <unlockStuff()+0x28>
c00088ca:	83 3d 00 9f 02 c0 00 	cmp    DWORD PTR ds:0xc0029f00,0x0
c00088d1:	74 0f                	je     c00088e2 <unlockStuff()+0x28>
c00088d3:	c7 05 00 9f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029f00,0x0
c00088dd:	e8 52 04 01 00       	call   c0018d34 <schedule()>
c00088e2:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c00088e7:	48                   	dec    eax
c00088e8:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c00088ed:	75 01                	jne    c00088f0 <unlockStuff()+0x36>
c00088ef:	fb                   	sti    
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	c3                   	ret    

c00088f4 <Virt::getAKernelVAS()>:
c00088f4:	a1 10 8b 02 c0       	mov    eax,ds:0xc0028b10
c00088f9:	c3                   	ret    

c00088fa <__not_memcpy>:
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008900:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008904:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008908:	89 c7                	mov    edi,eax
c000890a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	c3                   	ret    
c000890f:	90                   	nop

c0008910 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	68 80 43 02 c0       	push   0xc0024380
c000891b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891f:	e8 a8 7e ff ff       	call   c00007cc <strcmp>
c0008924:	83 c4 10             	add    esp,0x10
c0008927:	85 c0                	test   eax,eax
c0008929:	0f 94 c0             	sete   al
c000892c:	84 c0                	test   al,al
c000892e:	74 0c                	je     c000893c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008930:	b8 e8 89 02 c0       	mov    eax,0xc00289e8
c0008935:	e9 ea 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000893a:	66 90                	xchg   ax,ax
c000893c:	83 ec 08             	sub    esp,0x8
c000893f:	68 89 43 02 c0       	push   0xc0024389
c0008944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008948:	e8 7f 7e ff ff       	call   c00007cc <strcmp>
c000894d:	83 c4 10             	add    esp,0x10
c0008950:	85 c0                	test   eax,eax
c0008952:	0f 94 c0             	sete   al
c0008955:	84 c0                	test   al,al
c0008957:	74 0b                	je     c0008964 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008959:	b8 20 2e 02 c0       	mov    eax,0xc0022e20
c000895e:	e9 c1 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008963:	90                   	nop
c0008964:	83 ec 08             	sub    esp,0x8
c0008967:	68 93 43 02 c0       	push   0xc0024393
c000896c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008970:	e8 57 7e ff ff       	call   c00007cc <strcmp>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	0f 94 c0             	sete   al
c000897d:	84 c0                	test   al,al
c000897f:	74 0b                	je     c000898c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008981:	b8 54 2b 02 c0       	mov    eax,0xc0022b54
c0008986:	e9 99 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000898b:	90                   	nop
c000898c:	83 ec 08             	sub    esp,0x8
c000898f:	68 9c 43 02 c0       	push   0xc002439c
c0008994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008998:	e8 2f 7e ff ff       	call   c00007cc <strcmp>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	85 c0                	test   eax,eax
c00089a2:	0f 94 c0             	sete   al
c00089a5:	84 c0                	test   al,al
c00089a7:	74 07                	je     c00089b0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a9:	b8 20 2f 02 c0       	mov    eax,0xc0022f20
c00089ae:	eb 74                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089b0:	83 ec 08             	sub    esp,0x8
c00089b3:	68 a6 43 02 c0       	push   0xc00243a6
c00089b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bc:	e8 0b 7e ff ff       	call   c00007cc <strcmp>
c00089c1:	83 c4 10             	add    esp,0x10
c00089c4:	85 c0                	test   eax,eax
c00089c6:	0f 94 c0             	sete   al
c00089c9:	84 c0                	test   al,al
c00089cb:	74 07                	je     c00089d4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089cd:	b8 a0 2c 02 c0       	mov    eax,0xc0022ca0
c00089d2:	eb 50                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089d4:	83 ec 08             	sub    esp,0x8
c00089d7:	68 af 43 02 c0       	push   0xc00243af
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 e7 7d ff ff       	call   c00007cc <strcmp>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	85 c0                	test   eax,eax
c00089ea:	0f 94 c0             	sete   al
c00089ed:	84 c0                	test   al,al
c00089ef:	74 07                	je     c00089f8 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089f1:	b8 ec 89 02 c0       	mov    eax,0xc00289ec
c00089f6:	eb 2c                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f8:	83 ec 08             	sub    esp,0x8
c00089fb:	68 bc 43 02 c0       	push   0xc00243bc
c0008a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a04:	e8 c3 7d ff ff       	call   c00007cc <strcmp>
c0008a09:	83 c4 10             	add    esp,0x10
c0008a0c:	85 c0                	test   eax,eax
c0008a0e:	0f 94 c0             	sete   al
c0008a11:	84 c0                	test   al,al
c0008a13:	74 07                	je     c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a15:	b8 ed 89 02 c0       	mov    eax,0xc00289ed
c0008a1a:	eb 08                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a1c:	b8 00 00 00 00       	mov    eax,0x0
c0008a21:	8d 76 00             	lea    esi,[esi+0x0]
c0008a24:	83 c4 0c             	add    esp,0xc
c0008a27:	c3                   	ret    

c0008a28 <Computer::close(int, int, void*)>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a37:	83 ec 0c             	sub    esp,0xc
c0008a3a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a40:	e8 ff 5c 00 00       	call   c000e744 <Device::closeAll()>
c0008a45:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a50:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a54:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a5c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a64:	5b                   	pop    ebx
c0008a65:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a68:	5e                   	pop    esi
c0008a69:	5f                   	pop    edi
c0008a6a:	ff e0                	jmp    eax

c0008a6c <Krnl::firstTask()>:
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 14             	sub    esp,0x14
c0008a70:	68 c9 43 02 c0       	push   0xc00243c9
c0008a75:	e8 3b 13 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0008a7a:	fb                   	sti    
c0008a7b:	c7 04 24 e0 43 02 c0 	mov    DWORD PTR [esp],0xc00243e0
c0008a82:	e8 2e 13 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0008a87:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a8e:	e8 c8 12 00 00       	call   c0009d5b <malloc>
c0008a93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a9a:	89 c3                	mov    ebx,eax
c0008a9c:	ff 35 30 9f 02 c0    	push   DWORD PTR ds:0xc0029f30
c0008aa2:	68 f9 43 02 c0       	push   0xc00243f9
c0008aa7:	6a 01                	push   0x1
c0008aa9:	50                   	push   eax
c0008aaa:	e8 61 fe 00 00       	call   c0018910 <Process::Process(bool, char const*, Process*, char**)>
c0008aaf:	83 c4 20             	add    esp,0x20
c0008ab2:	68 ff 00 00 00       	push   0xff
c0008ab7:	6a 00                	push   0x0
c0008ab9:	68 53 97 00 c0       	push   0xc0009753
c0008abe:	53                   	push   ebx
c0008abf:	e8 54 00 01 00       	call   c0018b18 <Process::createThread(void (*)(void*), void*, int)>
c0008ac4:	6a 7a                	push   0x7a
c0008ac6:	6a 00                	push   0x0
c0008ac8:	68 5c 95 01 c0       	push   0xc001955c
c0008acd:	ff 35 30 9f 02 c0    	push   DWORD PTR ds:0xc0029f30
c0008ad3:	e8 40 00 01 00       	call   c0018b18 <Process::createThread(void (*)(void*), void*, int)>
c0008ad8:	83 c4 14             	add    esp,0x14
c0008adb:	a3 e8 9e 02 c0       	mov    ds:0xc0029ee8,eax
c0008ae0:	68 ec 46 02 c0       	push   0xc00246ec
c0008ae5:	c6 05 ed 89 02 c0 01 	mov    BYTE PTR ds:0xc00289ed,0x1
c0008aec:	e8 c4 12 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0008af1:	e8 41 0e 01 00       	call   c0019937 <Vm::initialise8086()>
c0008af6:	e8 e3 48 00 00       	call   c000d3de <Fs::initVFS()>
c0008afb:	c7 04 24 06 44 02 c0 	mov    DWORD PTR [esp],0xc0024406
c0008b02:	e8 ae 12 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0008b07:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0008b0c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b12:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b14:	6a 00                	push   0x0
c0008b16:	6a 00                	push   0x0
c0008b18:	6a 00                	push   0x0
c0008b1a:	50                   	push   eax
c0008b1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b1e:	83 c4 14             	add    esp,0x14
c0008b21:	68 ec 46 02 c0       	push   0xc00246ec
c0008b26:	e8 8a 12 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0008b2b:	e8 4e e6 00 00       	call   c001717e <Sys::loadSyscalls()>
c0008b30:	e8 eb c4 00 00       	call   c0015020 <Krnl::loadSystemEnv()>
c0008b35:	e8 3d c9 00 00       	call   c0015477 <Krnl::setupPowerManager()>
c0008b3a:	83 c4 0c             	add    esp,0xc
c0008b3d:	6a 3a                	push   0x3a
c0008b3f:	68 20 44 02 c0       	push   0xc0024420
c0008b44:	68 29 44 02 c0       	push   0xc0024429
c0008b49:	e8 f3 d3 00 00       	call   c0015f41 <Reg::readIntWithDefault(char*, char*, int)>
c0008b4e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b51:	e8 a6 54 00 00       	call   c000dffc <User::loadClockSettings(int)>
c0008b56:	c7 04 24 10 47 02 c0 	mov    DWORD PTR [esp],0xc0024710
c0008b5d:	e8 53 12 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0008b62:	58                   	pop    eax
c0008b63:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0008b68:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b6e:	e8 91 5b 00 00       	call   c000e704 <Device::loadDriversForAll()>
c0008b73:	c7 04 24 31 44 02 c0 	mov    DWORD PTR [esp],0xc0024431
c0008b7a:	e8 36 12 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0008b7f:	e8 04 c0 00 00       	call   c0014b88 <Krnl::startCPUs()>
c0008b84:	c7 04 24 4b 44 02 c0 	mov    DWORD PTR [esp],0xc002444b
c0008b8b:	e8 25 12 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0008b90:	5a                   	pop    edx
c0008b91:	8b 1d e8 89 02 c0    	mov    ebx,DWORD PTR ds:0xc00289e8
c0008b97:	59                   	pop    ecx
c0008b98:	6a 01                	push   0x1
c0008b9a:	68 5c 44 02 c0       	push   0xc002445c
c0008b9f:	e8 aa f7 00 00       	call   c001834e <Thr::loadDLL(char const*, bool)>
c0008ba4:	5a                   	pop    edx
c0008ba5:	59                   	pop    ecx
c0008ba6:	53                   	push   ebx
c0008ba7:	50                   	push   eax
c0008ba8:	e8 d2 f9 00 00       	call   c001857f <Thr::executeDLL(unsigned long, void*)>
c0008bad:	83 c4 10             	add    esp,0x10
c0008bb0:	83 ec 0c             	sub    esp,0xc
c0008bb3:	6a 02                	push   0x2
c0008bb5:	e8 72 03 01 00       	call   c0018f2c <blockTask(TaskState)>
c0008bba:	83 c4 10             	add    esp,0x10
c0008bbd:	eb f1                	jmp    c0008bb0 <Krnl::firstTask()+0x144>
c0008bbf:	90                   	nop

c0008bc0 <Computer::Computer()>:
c0008bc0:	83 ec 0c             	sub    esp,0xc
c0008bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc7:	83 ec 08             	sub    esp,0x8
c0008bca:	68 78 44 02 c0       	push   0xc0024478
c0008bcf:	50                   	push   eax
c0008bd0:	e8 e9 5b 00 00       	call   c000e7be <Device::Device(char const*)>
c0008bd5:	83 c4 10             	add    esp,0x10
c0008bd8:	ba c0 47 02 c0       	mov    edx,0xc00247c0
c0008bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be1:	89 10                	mov    DWORD PTR [eax],edx
c0008be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008bf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf5:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c03:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c09:	83 ca 04             	or     edx,0x4
c0008c0c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c16:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c1c:	0f b6 d0             	movzx  edx,al
c0008c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c23:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c2e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c34:	0f b6 d0             	movzx  edx,al
c0008c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c44:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c4a:	8d 50 01             	lea    edx,[eax+0x1]
c0008c4d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c51:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c57:	0f b6 d0             	movzx  edx,al
c0008c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c5e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c62:	83 e1 3f             	and    ecx,0x3f
c0008c65:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c73:	0f b6 d0             	movzx  edx,al
c0008c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7a:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c85:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c8b:	0f b6 d0             	movzx  edx,al
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ca1:	8d 50 01             	lea    edx,[eax+0x1]
c0008ca4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cae:	0f b6 d0             	movzx  edx,al
c0008cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb9:	83 e1 3f             	and    ecx,0x3f
c0008cbc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cca:	0f b6 d0             	movzx  edx,al
c0008ccd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd1:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cdc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ce2:	0f b6 d0             	movzx  edx,al
c0008ce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce9:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf8:	8d 50 01             	lea    edx,[eax+0x1]
c0008cfb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cff:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008d05:	0f b6 d0             	movzx  edx,al
c0008d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d10:	83 e1 3f             	and    ecx,0x3f
c0008d13:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d17:	90                   	nop
c0008d18:	83 c4 0c             	add    esp,0xc
c0008d1b:	c3                   	ret    

c0008d1c <Computer::setBootMessage(char const*)>:
c0008d1c:	c3                   	ret    
c0008d1d:	90                   	nop

c0008d1e <Computer::detectFeatures()>:
c0008d1e:	55                   	push   ebp
c0008d1f:	57                   	push   edi
c0008d20:	56                   	push   esi
c0008d21:	53                   	push   ebx
c0008d22:	83 ec 1c             	sub    esp,0x1c
c0008d25:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d29:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d33:	e8 e1 74 ff ff       	call   c0000219 <detectCPUID>
c0008d38:	85 c0                	test   eax,eax
c0008d3a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d40:	0f 95 c2             	setne  dl
c0008d43:	83 e0 fd             	and    eax,0xfffffffd
c0008d46:	d1 e2                	shl    edx,1
c0008d48:	09 d0                	or     eax,edx
c0008d4a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d50:	a8 02                	test   al,0x2
c0008d52:	75 46                	jne    c0008d9a <Computer::detectFeatures()+0x7c>
c0008d54:	f6 05 01 8a 02 c0 04 	test   BYTE PTR ds:0xc0028a01,0x4
c0008d5b:	74 07                	je     c0008d64 <Computer::detectFeatures()+0x46>
c0008d5d:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d64:	e8 7d 9d 01 00       	call   c0022ae6 <x87Detect>
c0008d69:	83 e0 01             	and    eax,0x1
c0008d6c:	c1 e0 04             	shl    eax,0x4
c0008d6f:	88 c2                	mov    dl,al
c0008d71:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d77:	83 e0 ef             	and    eax,0xffffffef
c0008d7a:	09 d0                	or     eax,edx
c0008d7c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d82:	a8 10                	test   al,0x10
c0008d84:	0f 85 2a 01 00 00    	jne    c0008eb4 <Computer::detectFeatures()+0x196>
c0008d8a:	84 c0                	test   al,al
c0008d8c:	0f 88 45 01 00 00    	js     c0008ed7 <Computer::detectFeatures()+0x1b9>
c0008d92:	83 c4 1c             	add    esp,0x1c
c0008d95:	5b                   	pop    ebx
c0008d96:	5e                   	pop    esi
c0008d97:	5f                   	pop    edi
c0008d98:	5d                   	pop    ebp
c0008d99:	c3                   	ret    
c0008d9a:	83 ec 0c             	sub    esp,0xc
c0008d9d:	6a 20                	push   0x20
c0008d9f:	e8 aa a9 00 00       	call   c001374e <CPU::cpuidCheckEDX(unsigned int)>
c0008da4:	83 e0 01             	and    eax,0x1
c0008da7:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008dae:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008db4:	83 e0 f7             	and    eax,0xfffffff7
c0008db7:	09 d0                	or     eax,edx
c0008db9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008dbf:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dc6:	e8 83 a9 00 00       	call   c001374e <CPU::cpuidCheckEDX(unsigned int)>
c0008dcb:	83 e0 01             	and    eax,0x1
c0008dce:	88 c2                	mov    dl,al
c0008dd0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dd6:	83 e0 fe             	and    eax,0xfffffffe
c0008dd9:	09 d0                	or     eax,edx
c0008ddb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008de1:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de8:	e8 61 a9 00 00       	call   c001374e <CPU::cpuidCheckEDX(unsigned int)>
c0008ded:	c1 e0 07             	shl    eax,0x7
c0008df0:	88 c2                	mov    dl,al
c0008df2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df8:	83 e0 7f             	and    eax,0x7f
c0008dfb:	09 d0                	or     eax,edx
c0008dfd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008e03:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e0a:	e8 3f a9 00 00       	call   c001374e <CPU::cpuidCheckEDX(unsigned int)>
c0008e0f:	83 c4 10             	add    esp,0x10
c0008e12:	83 e0 01             	and    eax,0x1
c0008e15:	c1 e0 05             	shl    eax,0x5
c0008e18:	88 c2                	mov    dl,al
c0008e1a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e20:	83 e0 df             	and    eax,0xffffffdf
c0008e23:	09 d0                	or     eax,edx
c0008e25:	f7 05 00 8a 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0028a00,0x401
c0008e2f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e35:	0f 84 c2 00 00 00    	je     c0008efd <Computer::detectFeatures()+0x1df>
c0008e3b:	83 e0 fe             	and    eax,0xfffffffe
c0008e3e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e44:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e4a:	88 c2                	mov    dl,al
c0008e4c:	83 e2 09             	and    edx,0x9
c0008e4f:	fe ca                	dec    dl
c0008e51:	75 09                	jne    c0008e5c <Computer::detectFeatures()+0x13e>
c0008e53:	83 e0 fe             	and    eax,0xfffffffe
c0008e56:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e5c:	83 ec 0c             	sub    esp,0xc
c0008e5f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e63:	50                   	push   eax
c0008e64:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e68:	55                   	push   ebp
c0008e69:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e6d:	57                   	push   edi
c0008e6e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e72:	56                   	push   esi
c0008e73:	68 00 00 00 80       	push   0x80000000
c0008e78:	e8 4d a8 00 00       	call   c00136ca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e7d:	83 c4 20             	add    esp,0x20
c0008e80:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e87:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e8b:	0f 86 c3 fe ff ff    	jbe    c0008d54 <Computer::detectFeatures()+0x36>
c0008e91:	83 ec 0c             	sub    esp,0xc
c0008e94:	50                   	push   eax
c0008e95:	55                   	push   ebp
c0008e96:	57                   	push   edi
c0008e97:	56                   	push   esi
c0008e98:	68 01 00 00 80       	push   0x80000001
c0008e9d:	e8 28 a8 00 00       	call   c00136ca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008ea2:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008eac:	83 c4 20             	add    esp,0x20
c0008eaf:	e9 a0 fe ff ff       	jmp    c0008d54 <Computer::detectFeatures()+0x36>
c0008eb4:	e8 e7 9b 01 00       	call   c0022aa0 <absolutelyNoChanceInHell>
c0008eb9:	88 c2                	mov    dl,al
c0008ebb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ec1:	c1 e2 07             	shl    edx,0x7
c0008ec4:	83 e0 7f             	and    eax,0x7f
c0008ec7:	09 d0                	or     eax,edx
c0008ec9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ecf:	84 c0                	test   al,al
c0008ed1:	0f 89 bb fe ff ff    	jns    c0008d92 <Computer::detectFeatures()+0x74>
c0008ed7:	e8 34 9b 01 00       	call   c0022a10 <avxDetect>
c0008edc:	83 e0 01             	and    eax,0x1
c0008edf:	c1 e0 05             	shl    eax,0x5
c0008ee2:	88 c2                	mov    dl,al
c0008ee4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008eea:	83 e0 df             	and    eax,0xffffffdf
c0008eed:	09 d0                	or     eax,edx
c0008eef:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008ef5:	83 c4 1c             	add    esp,0x1c
c0008ef8:	5b                   	pop    ebx
c0008ef9:	5e                   	pop    esi
c0008efa:	5f                   	pop    edi
c0008efb:	5d                   	pop    ebp
c0008efc:	c3                   	ret    
c0008efd:	83 ec 0c             	sub    esp,0xc
c0008f00:	68 00 02 00 00       	push   0x200
c0008f05:	e8 44 a8 00 00       	call   c001374e <CPU::cpuidCheckEDX(unsigned int)>
c0008f0a:	83 c4 10             	add    esp,0x10
c0008f0d:	83 e0 01             	and    eax,0x1
c0008f10:	88 c2                	mov    dl,al
c0008f12:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f18:	83 e0 fe             	and    eax,0xfffffffe
c0008f1b:	09 d0                	or     eax,edx
c0008f1d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f23:	e9 1c ff ff ff       	jmp    c0008e44 <Computer::detectFeatures()+0x126>

c0008f28 <Computer::displayFeatures()>:
c0008f28:	53                   	push   ebx
c0008f29:	83 ec 14             	sub    esp,0x14
c0008f2c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f30:	68 88 44 02 c0       	push   0xc0024488
c0008f35:	e8 0d 41 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0008f3a:	83 c4 10             	add    esp,0x10
c0008f3d:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c0008f44:	0f 85 73 02 00 00    	jne    c00091bd <Computer::displayFeatures()+0x295>
c0008f4a:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0008f4f:	83 ec 08             	sub    esp,0x8
c0008f52:	50                   	push   eax
c0008f53:	68 9b 44 02 c0       	push   0xc002449b
c0008f58:	e8 ea 40 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0008f5d:	83 c4 10             	add    esp,0x10
c0008f60:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c0008f67:	0f 85 8c 02 00 00    	jne    c00091f9 <Computer::displayFeatures()+0x2d1>
c0008f6d:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0008f72:	83 ec 08             	sub    esp,0x8
c0008f75:	50                   	push   eax
c0008f76:	68 ac 44 02 c0       	push   0xc00244ac
c0008f7b:	e8 c7 40 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0008f80:	83 c4 10             	add    esp,0x10
c0008f83:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c0008f8a:	0f 85 5f 02 00 00    	jne    c00091ef <Computer::displayFeatures()+0x2c7>
c0008f90:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0008f95:	83 ec 08             	sub    esp,0x8
c0008f98:	50                   	push   eax
c0008f99:	68 bd 44 02 c0       	push   0xc00244bd
c0008f9e:	e8 a4 40 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0008fa3:	83 c4 10             	add    esp,0x10
c0008fa6:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c0008fad:	0f 85 32 02 00 00    	jne    c00091e5 <Computer::displayFeatures()+0x2bd>
c0008fb3:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0008fb8:	83 ec 08             	sub    esp,0x8
c0008fbb:	50                   	push   eax
c0008fbc:	68 ce 44 02 c0       	push   0xc00244ce
c0008fc1:	e8 81 40 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0008fc6:	83 c4 10             	add    esp,0x10
c0008fc9:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c0008fd0:	0f 85 05 02 00 00    	jne    c00091db <Computer::displayFeatures()+0x2b3>
c0008fd6:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0008fdb:	83 ec 08             	sub    esp,0x8
c0008fde:	50                   	push   eax
c0008fdf:	68 df 44 02 c0       	push   0xc00244df
c0008fe4:	e8 5e 40 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0008fe9:	83 c4 10             	add    esp,0x10
c0008fec:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c0008ff3:	0f 85 d8 01 00 00    	jne    c00091d1 <Computer::displayFeatures()+0x2a9>
c0008ff9:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0008ffe:	83 ec 08             	sub    esp,0x8
c0009001:	50                   	push   eax
c0009002:	68 f0 44 02 c0       	push   0xc00244f0
c0009007:	e8 3b 40 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000900c:	83 c4 10             	add    esp,0x10
c000900f:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c0009016:	0f 85 ab 01 00 00    	jne    c00091c7 <Computer::displayFeatures()+0x29f>
c000901c:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0009021:	83 ec 08             	sub    esp,0x8
c0009024:	50                   	push   eax
c0009025:	68 01 45 02 c0       	push   0xc0024501
c000902a:	e8 18 40 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000902f:	83 c4 10             	add    esp,0x10
c0009032:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c0009039:	0f 88 1b 02 00 00    	js     c000925a <Computer::displayFeatures()+0x332>
c000903f:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0009044:	83 ec 08             	sub    esp,0x8
c0009047:	50                   	push   eax
c0009048:	68 12 45 02 c0       	push   0xc0024512
c000904d:	e8 f5 3f 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009052:	83 c4 10             	add    esp,0x10
c0009055:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000905c:	0f 85 a1 01 00 00    	jne    c0009203 <Computer::displayFeatures()+0x2db>
c0009062:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0009067:	83 ec 08             	sub    esp,0x8
c000906a:	50                   	push   eax
c000906b:	68 23 45 02 c0       	push   0xc0024523
c0009070:	e8 d2 3f 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009075:	83 c4 10             	add    esp,0x10
c0009078:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000907f:	0f 85 cb 01 00 00    	jne    c0009250 <Computer::displayFeatures()+0x328>
c0009085:	b8 85 44 02 c0       	mov    eax,0xc0024485
c000908a:	83 ec 08             	sub    esp,0x8
c000908d:	50                   	push   eax
c000908e:	68 34 45 02 c0       	push   0xc0024534
c0009093:	e8 af 3f 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009098:	83 c4 10             	add    esp,0x10
c000909b:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c00090a2:	0f 85 9e 01 00 00    	jne    c0009246 <Computer::displayFeatures()+0x31e>
c00090a8:	b8 85 44 02 c0       	mov    eax,0xc0024485
c00090ad:	83 ec 08             	sub    esp,0x8
c00090b0:	50                   	push   eax
c00090b1:	68 45 45 02 c0       	push   0xc0024545
c00090b6:	e8 8c 3f 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00090bb:	83 c4 10             	add    esp,0x10
c00090be:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c00090c5:	0f 85 71 01 00 00    	jne    c000923c <Computer::displayFeatures()+0x314>
c00090cb:	b8 85 44 02 c0       	mov    eax,0xc0024485
c00090d0:	83 ec 08             	sub    esp,0x8
c00090d3:	50                   	push   eax
c00090d4:	68 56 45 02 c0       	push   0xc0024556
c00090d9:	e8 69 3f 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00090de:	83 c4 10             	add    esp,0x10
c00090e1:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c00090e8:	0f 85 44 01 00 00    	jne    c0009232 <Computer::displayFeatures()+0x30a>
c00090ee:	b8 85 44 02 c0       	mov    eax,0xc0024485
c00090f3:	83 ec 08             	sub    esp,0x8
c00090f6:	50                   	push   eax
c00090f7:	68 67 45 02 c0       	push   0xc0024567
c00090fc:	e8 46 3f 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009101:	83 c4 10             	add    esp,0x10
c0009104:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000910b:	0f 85 17 01 00 00    	jne    c0009228 <Computer::displayFeatures()+0x300>
c0009111:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0009116:	83 ec 08             	sub    esp,0x8
c0009119:	50                   	push   eax
c000911a:	68 78 45 02 c0       	push   0xc0024578
c000911f:	e8 23 3f 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009124:	83 c4 10             	add    esp,0x10
c0009127:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000912e:	0f 85 ea 00 00 00    	jne    c000921e <Computer::displayFeatures()+0x2f6>
c0009134:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0009139:	83 ec 08             	sub    esp,0x8
c000913c:	50                   	push   eax
c000913d:	68 89 45 02 c0       	push   0xc0024589
c0009142:	e8 00 3f 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009147:	83 c4 10             	add    esp,0x10
c000914a:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c0009151:	0f 88 0d 01 00 00    	js     c0009264 <Computer::displayFeatures()+0x33c>
c0009157:	b8 85 44 02 c0       	mov    eax,0xc0024485
c000915c:	83 ec 08             	sub    esp,0x8
c000915f:	50                   	push   eax
c0009160:	68 9a 45 02 c0       	push   0xc002459a
c0009165:	e8 dd 3e 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000916a:	83 c4 10             	add    esp,0x10
c000916d:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c0009174:	0f 85 9a 00 00 00    	jne    c0009214 <Computer::displayFeatures()+0x2ec>
c000917a:	b8 85 44 02 c0       	mov    eax,0xc0024485
c000917f:	83 ec 08             	sub    esp,0x8
c0009182:	50                   	push   eax
c0009183:	68 ab 45 02 c0       	push   0xc00245ab
c0009188:	e8 ba 3e 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000918d:	83 c4 10             	add    esp,0x10
c0009190:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c0009197:	75 74                	jne    c000920d <Computer::displayFeatures()+0x2e5>
c0009199:	b8 85 44 02 c0       	mov    eax,0xc0024485
c000919e:	83 ec 08             	sub    esp,0x8
c00091a1:	50                   	push   eax
c00091a2:	68 bc 45 02 c0       	push   0xc00245bc
c00091a7:	e8 9b 3e 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00091ac:	c7 44 24 20 bb 65 02 c0 	mov    DWORD PTR [esp+0x20],0xc00265bb
c00091b4:	83 c4 18             	add    esp,0x18
c00091b7:	5b                   	pop    ebx
c00091b8:	e9 8a 3e 00 00       	jmp    c000d047 <Dbg::kprintf(char const*, ...)>
c00091bd:	b8 81 44 02 c0       	mov    eax,0xc0024481
c00091c2:	e9 88 fd ff ff       	jmp    c0008f4f <Computer::displayFeatures()+0x27>
c00091c7:	b8 81 44 02 c0       	mov    eax,0xc0024481
c00091cc:	e9 50 fe ff ff       	jmp    c0009021 <Computer::displayFeatures()+0xf9>
c00091d1:	b8 81 44 02 c0       	mov    eax,0xc0024481
c00091d6:	e9 23 fe ff ff       	jmp    c0008ffe <Computer::displayFeatures()+0xd6>
c00091db:	b8 81 44 02 c0       	mov    eax,0xc0024481
c00091e0:	e9 f6 fd ff ff       	jmp    c0008fdb <Computer::displayFeatures()+0xb3>
c00091e5:	b8 81 44 02 c0       	mov    eax,0xc0024481
c00091ea:	e9 c9 fd ff ff       	jmp    c0008fb8 <Computer::displayFeatures()+0x90>
c00091ef:	b8 81 44 02 c0       	mov    eax,0xc0024481
c00091f4:	e9 9c fd ff ff       	jmp    c0008f95 <Computer::displayFeatures()+0x6d>
c00091f9:	b8 81 44 02 c0       	mov    eax,0xc0024481
c00091fe:	e9 6f fd ff ff       	jmp    c0008f72 <Computer::displayFeatures()+0x4a>
c0009203:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0009208:	e9 5a fe ff ff       	jmp    c0009067 <Computer::displayFeatures()+0x13f>
c000920d:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0009212:	eb 8a                	jmp    c000919e <Computer::displayFeatures()+0x276>
c0009214:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0009219:	e9 61 ff ff ff       	jmp    c000917f <Computer::displayFeatures()+0x257>
c000921e:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0009223:	e9 11 ff ff ff       	jmp    c0009139 <Computer::displayFeatures()+0x211>
c0009228:	b8 81 44 02 c0       	mov    eax,0xc0024481
c000922d:	e9 e4 fe ff ff       	jmp    c0009116 <Computer::displayFeatures()+0x1ee>
c0009232:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0009237:	e9 b7 fe ff ff       	jmp    c00090f3 <Computer::displayFeatures()+0x1cb>
c000923c:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0009241:	e9 8a fe ff ff       	jmp    c00090d0 <Computer::displayFeatures()+0x1a8>
c0009246:	b8 81 44 02 c0       	mov    eax,0xc0024481
c000924b:	e9 5d fe ff ff       	jmp    c00090ad <Computer::displayFeatures()+0x185>
c0009250:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0009255:	e9 30 fe ff ff       	jmp    c000908a <Computer::displayFeatures()+0x162>
c000925a:	b8 81 44 02 c0       	mov    eax,0xc0024481
c000925f:	e9 e0 fd ff ff       	jmp    c0009044 <Computer::displayFeatures()+0x11c>
c0009264:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0009269:	e9 ee fe ff ff       	jmp    c000915c <Computer::displayFeatures()+0x234>

c000926e <Computer::rdmsr(unsigned int)>:
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009275:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000927c:	74 0a                	je     c0009288 <Computer::rdmsr(unsigned int)+0x1a>
c000927e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009282:	0f 32                	rdmsr  
c0009284:	83 c4 0c             	add    esp,0xc
c0009287:	c3                   	ret    
c0009288:	83 ec 0c             	sub    esp,0xc
c000928b:	68 cd 45 02 c0       	push   0xc00245cd
c0009290:	e8 94 be 00 00       	call   c0015129 <Krnl::panic(char const*)>
c0009295:	83 c4 10             	add    esp,0x10
c0009298:	eb e4                	jmp    c000927e <Computer::rdmsr(unsigned int)+0x10>

c000929a <Computer::wrmsr(unsigned int, unsigned long long)>:
c000929a:	57                   	push   edi
c000929b:	56                   	push   esi
c000929c:	52                   	push   edx
c000929d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092a1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00092a5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00092a9:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00092b0:	74 0e                	je     c00092c0 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c00092b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00092b6:	89 f0                	mov    eax,esi
c00092b8:	89 fa                	mov    edx,edi
c00092ba:	0f 30                	wrmsr  
c00092bc:	58                   	pop    eax
c00092bd:	5e                   	pop    esi
c00092be:	5f                   	pop    edi
c00092bf:	c3                   	ret    
c00092c0:	83 ec 0c             	sub    esp,0xc
c00092c3:	68 d3 45 02 c0       	push   0xc00245d3
c00092c8:	e8 5c be 00 00       	call   c0015129 <Krnl::panic(char const*)>
c00092cd:	83 c4 10             	add    esp,0x10
c00092d0:	eb e0                	jmp    c00092b2 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00092d2 <Computer::shutdown()>:
c00092d2:	83 ec 0c             	sub    esp,0xc
c00092d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092d9:	8b 10                	mov    edx,DWORD PTR [eax]
c00092db:	6a 00                	push   0x0
c00092dd:	6a 00                	push   0x0
c00092df:	6a 00                	push   0x0
c00092e1:	50                   	push   eax
c00092e2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092e5:	83 c4 1c             	add    esp,0x1c
c00092e8:	c3                   	ret    
c00092e9:	90                   	nop

c00092ea <Computer::restart()>:
c00092ea:	83 ec 0c             	sub    esp,0xc
c00092ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00092f3:	6a 00                	push   0x0
c00092f5:	6a 00                	push   0x0
c00092f7:	6a 01                	push   0x1
c00092f9:	50                   	push   eax
c00092fa:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092fd:	83 c4 1c             	add    esp,0x1c
c0009300:	c3                   	ret    
c0009301:	90                   	nop

c0009302 <Computer::sleep()>:
c0009302:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009306:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000930c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009310:	e9 07 9a 00 00       	jmp    c0012d1c <ACPI::sleep()>
c0009315:	90                   	nop

c0009316 <Computer::nmiEnabled()>:
c0009316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000931a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0009320:	c3                   	ret    
c0009321:	90                   	nop

c0009322 <Computer::readCMOS(unsigned char)>:
c0009322:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009326:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000932d:	19 c0                	sbb    eax,eax
c000932f:	83 e0 80             	and    eax,0xffffff80
c0009332:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009336:	e6 70                	out    0x70,al
c0009338:	e4 71                	in     al,0x71
c000933a:	c3                   	ret    
c000933b:	90                   	nop

c000933c <Computer::enableNMI(bool)>:
c000933c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009340:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009344:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000934a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0009352:	eb ce                	jmp    c0009322 <Computer::readCMOS(unsigned char)>

c0009354 <Computer::open(int, int, void*)>:
c0009354:	56                   	push   esi
c0009355:	53                   	push   ebx
c0009356:	83 ec 10             	sub    esp,0x10
c0009359:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000935d:	68 30 47 02 c0       	push   0xc0024730
c0009362:	e8 4e 0a 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0009367:	58                   	pop    eax
c0009368:	f6 05 00 8a 02 c0 04 	test   BYTE PTR ds:0xc0028a00,0x4
c000936f:	5a                   	pop    edx
c0009370:	0f 94 05 c0 7d 02 c0 	sete   BYTE PTR ds:0xc0027dc0
c0009377:	68 58 01 00 00       	push   0x158
c000937c:	68 d9 45 02 c0       	push   0xc00245d9
c0009381:	e8 c1 3c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009386:	59                   	pop    ecx
c0009387:	5e                   	pop    esi
c0009388:	68 14 01 00 00       	push   0x114
c000938d:	68 ef 45 02 c0       	push   0xc00245ef
c0009392:	e8 b0 3c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009397:	58                   	pop    eax
c0009398:	5a                   	pop    edx
c0009399:	6a 14                	push   0x14
c000939b:	68 03 46 02 c0       	push   0xc0024603
c00093a0:	e8 a2 3c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00093a5:	59                   	pop    ecx
c00093a6:	5e                   	pop    esi
c00093a7:	68 1f 07 00 00       	push   0x71f
c00093ac:	68 16 46 02 c0       	push   0xc0024616
c00093b1:	e8 91 3c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00093b6:	58                   	pop    eax
c00093b7:	5a                   	pop    edx
c00093b8:	6a 5f                	push   0x5f
c00093ba:	68 2d 46 02 c0       	push   0xc002462d
c00093bf:	e8 83 3c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00093c4:	c7 04 24 43 46 02 c0 	mov    DWORD PTR [esp],0xc0024643
c00093cb:	e8 77 3c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00093d0:	c7 04 24 55 46 02 c0 	mov    DWORD PTR [esp],0xc0024655
c00093d7:	e8 d9 09 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00093dc:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00093e3:	e8 73 09 00 00       	call   c0009d5b <malloc>
c00093e8:	89 c6                	mov    esi,eax
c00093ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00093ed:	e8 e2 91 00 00       	call   c00125d4 <ACPI::ACPI()>
c00093f2:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c00093f8:	c7 04 24 6f 46 02 c0 	mov    DWORD PTR [esp],0xc002466f
c00093ff:	e8 b1 09 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0009404:	59                   	pop    ecx
c0009405:	5e                   	pop    esi
c0009406:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000940c:	53                   	push   ebx
c000940d:	e8 a8 51 00 00       	call   c000e5ba <Device::addChild(Device*)>
c0009412:	c7 04 24 54 47 02 c0 	mov    DWORD PTR [esp],0xc0024754
c0009419:	e8 97 09 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000941e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009421:	e8 f8 f8 ff ff       	call   c0008d1e <Computer::detectFeatures()>
c0009426:	c7 04 24 74 47 02 c0 	mov    DWORD PTR [esp],0xc0024774
c000942d:	e8 83 09 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0009432:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009435:	e8 ee fa ff ff       	call   c0008f28 <Computer::displayFeatures()>
c000943a:	c7 04 24 89 46 02 c0 	mov    DWORD PTR [esp],0xc0024689
c0009441:	e8 6f 09 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0009446:	58                   	pop    eax
c0009447:	5a                   	pop    edx
c0009448:	6a 01                	push   0x1
c000944a:	53                   	push   ebx
c000944b:	e8 ec fe ff ff       	call   c000933c <Computer::enableNMI(bool)>
c0009450:	c7 04 24 31 44 02 c0 	mov    DWORD PTR [esp],0xc0024431
c0009457:	e8 59 09 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000945c:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c0009463:	e8 f3 08 00 00       	call   c0009d5b <malloc>
c0009468:	89 04 24             	mov    DWORD PTR [esp],eax
c000946b:	89 c6                	mov    esi,eax
c000946d:	e8 94 a3 00 00       	call   c0013806 <CPU::CPU()>
c0009472:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0009478:	59                   	pop    ecx
c0009479:	58                   	pop    eax
c000947a:	56                   	push   esi
c000947b:	53                   	push   ebx
c000947c:	e8 39 51 00 00       	call   c000e5ba <Device::addChild(Device*)>
c0009481:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0009487:	8b 10                	mov    edx,DWORD PTR [eax]
c0009489:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000948d:	6a 00                	push   0x0
c000948f:	6a 00                	push   0x0
c0009491:	50                   	push   eax
c0009492:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0009495:	83 c4 14             	add    esp,0x14
c0009498:	68 94 47 02 c0       	push   0xc0024794
c000949d:	e8 13 09 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00094a2:	e8 af 56 00 00       	call   c000eb56 <setupFPU()>
c00094a7:	83 c4 10             	add    esp,0x10
c00094aa:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00094b0:	85 c0                	test   eax,eax
c00094b2:	74 1f                	je     c00094d3 <Computer::open(int, int, void*)+0x17f>
c00094b4:	83 ec 08             	sub    esp,0x8
c00094b7:	50                   	push   eax
c00094b8:	53                   	push   ebx
c00094b9:	e8 fc 50 00 00       	call   c000e5ba <Device::addChild(Device*)>
c00094be:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c00094c4:	8b 10                	mov    edx,DWORD PTR [eax]
c00094c6:	6a 00                	push   0x0
c00094c8:	6a 00                	push   0x0
c00094ca:	6a 00                	push   0x0
c00094cc:	50                   	push   eax
c00094cd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00094d0:	83 c4 20             	add    esp,0x20
c00094d3:	83 ec 0c             	sub    esp,0xc
c00094d6:	68 9a 46 02 c0       	push   0xc002469a
c00094db:	e8 d5 08 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00094e0:	c7 04 24 6c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a6c
c00094e7:	e8 40 f7 00 00       	call   c0018c2c <setupMultitasking(void (*)())>
c00094ec:	83 c4 14             	add    esp,0x14
c00094ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00094f4:	5b                   	pop    ebx
c00094f5:	5e                   	pop    esi
c00094f6:	c3                   	ret    
c00094f7:	90                   	nop

c00094f8 <Computer::disableNMI()>:
c00094f8:	6a 00                	push   0x0
c00094fa:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00094fe:	e8 39 fe ff ff       	call   c000933c <Computer::enableNMI(bool)>
c0009503:	58                   	pop    eax
c0009504:	5a                   	pop    edx
c0009505:	c3                   	ret    

c0009506 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0009506:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000950a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0009511:	19 c0                	sbb    eax,eax
c0009513:	83 e0 80             	and    eax,0xffffff80
c0009516:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000951a:	e6 70                	out    0x70,al
c000951c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009520:	e6 71                	out    0x71,al
c0009522:	c3                   	ret    
c0009523:	90                   	nop

c0009524 <Computer::handleNMI()>:
c0009524:	56                   	push   esi
c0009525:	53                   	push   ebx
c0009526:	83 ec 10             	sub    esp,0x10
c0009529:	e4 92                	in     al,0x92
c000952b:	89 c6                	mov    esi,eax
c000952d:	e4 61                	in     al,0x61
c000952f:	68 b5 46 02 c0       	push   0xc00246b5
c0009534:	88 c3                	mov    bl,al
c0009536:	e8 0c 3b 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000953b:	83 c4 10             	add    esp,0x10
c000953e:	83 e6 10             	and    esi,0x10
c0009541:	75 0d                	jne    c0009550 <Computer::handleNMI()+0x2c>
c0009543:	f6 c3 40             	test   bl,0x40
c0009546:	75 1d                	jne    c0009565 <Computer::handleNMI()+0x41>
c0009548:	84 db                	test   bl,bl
c000954a:	78 2d                	js     c0009579 <Computer::handleNMI()+0x55>
c000954c:	58                   	pop    eax
c000954d:	5b                   	pop    ebx
c000954e:	5e                   	pop    esi
c000954f:	c3                   	ret    
c0009550:	83 ec 0c             	sub    esp,0xc
c0009553:	68 c6 46 02 c0       	push   0xc00246c6
c0009558:	e8 cc bb 00 00       	call   c0015129 <Krnl::panic(char const*)>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	f6 c3 40             	test   bl,0x40
c0009563:	74 e3                	je     c0009548 <Computer::handleNMI()+0x24>
c0009565:	83 ec 0c             	sub    esp,0xc
c0009568:	68 d3 46 02 c0       	push   0xc00246d3
c000956d:	e8 b7 bb 00 00       	call   c0015129 <Krnl::panic(char const*)>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	84 db                	test   bl,bl
c0009577:	79 d3                	jns    c000954c <Computer::handleNMI()+0x28>
c0009579:	c7 44 24 10 dd 46 02 c0 	mov    DWORD PTR [esp+0x10],0xc00246dd
c0009581:	5a                   	pop    edx
c0009582:	5b                   	pop    ebx
c0009583:	5e                   	pop    esi
c0009584:	e9 a0 bb 00 00       	jmp    c0015129 <Krnl::panic(char const*)>
c0009589:	90                   	nop

c000958a <Computer::setDiskActivityLight(int, bool)>:
c000958a:	56                   	push   esi
c000958b:	53                   	push   ebx
c000958c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009590:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009595:	77 1b                	ja     c00095b2 <Computer::setDiskActivityLight(int, bool)+0x28>
c0009597:	e4 92                	in     al,0x92
c0009599:	bb 40 00 00 00       	mov    ebx,0x40
c000959e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00095a2:	89 da                	mov    edx,ebx
c00095a4:	d3 e2                	shl    edx,cl
c00095a6:	89 f1                	mov    ecx,esi
c00095a8:	f7 d2                	not    edx
c00095aa:	d3 e3                	shl    ebx,cl
c00095ac:	21 d0                	and    eax,edx
c00095ae:	09 d8                	or     eax,ebx
c00095b0:	e6 92                	out    0x92,al
c00095b2:	5b                   	pop    ebx
c00095b3:	5e                   	pop    esi
c00095b4:	c3                   	ret    
c00095b5:	90                   	nop

c00095b6 <GDTEntry::setBase(unsigned int)>:
c00095b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00095be:	89 c1                	mov    ecx,eax
c00095c0:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00095c4:	c1 e9 10             	shr    ecx,0x10
c00095c7:	c1 e8 18             	shr    eax,0x18
c00095ca:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00095cd:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00095d0:	c3                   	ret    
c00095d1:	90                   	nop

c00095d2 <GDTEntry::setLimit(unsigned int)>:
c00095d2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00095d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095da:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00095dd:	66 89 01             	mov    WORD PTR [ecx],ax
c00095e0:	83 e2 f0             	and    edx,0xfffffff0
c00095e3:	c1 e8 10             	shr    eax,0x10
c00095e6:	83 e0 0f             	and    eax,0xf
c00095e9:	09 d0                	or     eax,edx
c00095eb:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00095ee:	c3                   	ret    
c00095ef:	90                   	nop

c00095f0 <GDT::GDT()>:
c00095f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095f4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00095fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009604:	90                   	nop
c0009605:	c3                   	ret    

c0009606 <GDT::addEntry(GDTEntry)>:
c0009606:	53                   	push   ebx
c0009607:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000960b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000960f:	8b 02                	mov    eax,DWORD PTR [edx]
c0009611:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009615:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009619:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000961d:	8d 48 01             	lea    ecx,[eax+0x1]
c0009620:	c1 e0 03             	shl    eax,0x3
c0009623:	89 0a                	mov    DWORD PTR [edx],ecx
c0009625:	5b                   	pop    ebx
c0009626:	c3                   	ret    
c0009627:	90                   	nop

c0009628 <GDT::getNumberOfEntries()>:
c0009628:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000962c:	8b 00                	mov    eax,DWORD PTR [eax]
c000962e:	c3                   	ret    
c000962f:	90                   	nop

c0009630 <GDT::flush()>:
c0009630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009634:	8b 10                	mov    edx,DWORD PTR [eax]
c0009636:	83 c0 04             	add    eax,0x4
c0009639:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0009640:	a3 f2 89 02 c0       	mov    ds:0xc00289f2,eax
c0009645:	66 89 15 f0 89 02 c0 	mov    WORD PTR ds:0xc00289f0,dx
c000964c:	e9 34 6d ff ff       	jmp    c0000385 <loadGDT>
c0009651:	90                   	nop

c0009652 <GDT::setup()>:
c0009652:	55                   	push   ebp
c0009653:	57                   	push   edi
c0009654:	56                   	push   esi
c0009655:	53                   	push   ebx
c0009656:	83 ec 3c             	sub    esp,0x3c
c0009659:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000965d:	6a 00                	push   0x0
c000965f:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0009663:	53                   	push   ebx
c0009664:	e8 4d ff ff ff       	call   c00095b6 <GDTEntry::setBase(unsigned int)>
c0009669:	6a 00                	push   0x0
c000966b:	53                   	push   ebx
c000966c:	e8 61 ff ff ff       	call   c00095d2 <GDTEntry::setLimit(unsigned int)>
c0009671:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c0009679:	6a 00                	push   0x0
c000967b:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000967f:	53                   	push   ebx
c0009680:	e8 31 ff ff ff       	call   c00095b6 <GDTEntry::setBase(unsigned int)>
c0009685:	68 ff ff ff 00       	push   0xffffff
c000968a:	53                   	push   ebx
c000968b:	e8 42 ff ff ff       	call   c00095d2 <GDTEntry::setLimit(unsigned int)>
c0009690:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009694:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009699:	0d 00 9a c0 00       	or     eax,0xc09a00
c000969e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00096a2:	83 c4 20             	add    esp,0x20
c00096a5:	6a 00                	push   0x0
c00096a7:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00096ab:	53                   	push   ebx
c00096ac:	e8 05 ff ff ff       	call   c00095b6 <GDTEntry::setBase(unsigned int)>
c00096b1:	68 ff ff ff 00       	push   0xffffff
c00096b6:	53                   	push   ebx
c00096b7:	e8 16 ff ff ff       	call   c00095d2 <GDTEntry::setLimit(unsigned int)>
c00096bc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00096c0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00096c4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096c8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00096cc:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00096d0:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00096d5:	0d 00 92 c0 00       	or     eax,0xc09200
c00096da:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00096de:	89 d8                	mov    eax,ebx
c00096e0:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00096e4:	80 cc 60             	or     ah,0x60
c00096e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00096eb:	83 c4 0c             	add    esp,0xc
c00096ee:	89 f8                	mov    eax,edi
c00096f0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00096f4:	80 cc 60             	or     ah,0x60
c00096f7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00096fb:	89 c7                	mov    edi,eax
c00096fd:	55                   	push   ebp
c00096fe:	e8 03 ff ff ff       	call   c0009606 <GDT::addEntry(GDTEntry)>
c0009703:	83 c4 0c             	add    esp,0xc
c0009706:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000970a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000970e:	55                   	push   ebp
c000970f:	e8 f2 fe ff ff       	call   c0009606 <GDT::addEntry(GDTEntry)>
c0009714:	83 c4 0c             	add    esp,0xc
c0009717:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000971b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000971f:	55                   	push   ebp
c0009720:	e8 e1 fe ff ff       	call   c0009606 <GDT::addEntry(GDTEntry)>
c0009725:	83 c4 0c             	add    esp,0xc
c0009728:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000972c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009730:	53                   	push   ebx
c0009731:	51                   	push   ecx
c0009732:	55                   	push   ebp
c0009733:	e8 ce fe ff ff       	call   c0009606 <GDT::addEntry(GDTEntry)>
c0009738:	83 c4 0c             	add    esp,0xc
c000973b:	57                   	push   edi
c000973c:	56                   	push   esi
c000973d:	55                   	push   ebp
c000973e:	e8 c3 fe ff ff       	call   c0009606 <GDT::addEntry(GDTEntry)>
c0009743:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009746:	e8 e5 fe ff ff       	call   c0009630 <GDT::flush()>
c000974b:	83 c4 4c             	add    esp,0x4c
c000974e:	5b                   	pop    ebx
c000974f:	5e                   	pop    esi
c0009750:	5f                   	pop    edi
c0009751:	5d                   	pop    ebp
c0009752:	c3                   	ret    

c0009753 <idleFunction(void*)>:
c0009753:	53                   	push   ebx
c0009754:	83 ec 08             	sub    esp,0x8
c0009757:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c000975c:	48                   	dec    eax
c000975d:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c0009762:	75 01                	jne    c0009765 <idleFunction(void*)+0x12>
c0009764:	fb                   	sti    
c0009765:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c000976a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0009770:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c0009777:	74 3c                	je     c00097b5 <idleFunction(void*)+0x62>
c0009779:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0009780:	74 33                	je     c00097b5 <idleFunction(void*)+0x62>
c0009782:	31 db                	xor    ebx,ebx
c0009784:	52                   	push   edx
c0009785:	52                   	push   edx
c0009786:	68 e1 00 00 00       	push   0xe1
c000978b:	50                   	push   eax
c000978c:	e8 dd fa ff ff       	call   c000926e <Computer::rdmsr(unsigned int)>
c0009791:	53                   	push   ebx
c0009792:	83 e0 02             	and    eax,0x2
c0009795:	50                   	push   eax
c0009796:	68 e1 00 00 00       	push   0xe1
c000979b:	ff 35 e8 89 02 c0    	push   DWORD PTR ds:0xc00289e8
c00097a1:	e8 f4 fa ff ff       	call   c000929a <Computer::wrmsr(unsigned int, unsigned long long)>
c00097a6:	83 c4 20             	add    esp,0x20
c00097a9:	e8 06 6a ff ff       	call   c00001b4 <doTPAUSE>
c00097ae:	e8 ef 98 01 00       	call   c00230a2 <idleCommon()>
c00097b3:	eb f4                	jmp    c00097a9 <idleFunction(void*)+0x56>
c00097b5:	fb                   	sti    
c00097b6:	f4                   	hlt    
c00097b7:	e8 e6 98 01 00       	call   c00230a2 <idleCommon()>
c00097bc:	eb f7                	jmp    c00097b5 <idleFunction(void*)+0x62>
c00097be:	66 90                	xchg   ax,ax

c00097c0 <IDTEntry::IDTEntry(bool)>:
c00097c0:	83 ec 04             	sub    esp,0x4
c00097c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00097c7:	88 04 24             	mov    BYTE PTR [esp],al
c00097ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097ce:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00097d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097d8:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00097dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097e0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00097e3:	83 e2 f0             	and    edx,0xfffffff0
c00097e6:	83 ca 0e             	or     edx,0xe
c00097e9:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00097ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097f0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00097f3:	83 e2 ef             	and    edx,0xffffffef
c00097f6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00097f9:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00097fd:	74 05                	je     c0009804 <IDTEntry::IDTEntry(bool)+0x44>
c00097ff:	b2 03                	mov    dl,0x3
c0009801:	eb 05                	jmp    c0009808 <IDTEntry::IDTEntry(bool)+0x48>
c0009803:	90                   	nop
c0009804:	b2 00                	mov    dl,0x0
c0009806:	66 90                	xchg   ax,ax
c0009808:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000980c:	83 e2 03             	and    edx,0x3
c000980f:	88 d1                	mov    cl,dl
c0009811:	c1 e1 05             	shl    ecx,0x5
c0009814:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009817:	83 e2 9f             	and    edx,0xffffff9f
c000981a:	09 ca                	or     edx,ecx
c000981c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000981f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009823:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009826:	83 ca 80             	or     edx,0xffffff80
c0009829:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000982c:	90                   	nop
c000982d:	83 c4 04             	add    esp,0x4
c0009830:	c3                   	ret    
c0009831:	90                   	nop

c0009832 <IDTEntry::setOffset(unsigned int)>:
c0009832:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000983a:	66 89 02             	mov    WORD PTR [edx],ax
c000983d:	c1 e8 10             	shr    eax,0x10
c0009840:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0009844:	c3                   	ret    
c0009845:	90                   	nop
c0009846:	66 90                	xchg   ax,ax

c0009848 <IDT::IDT()>:
c0009848:	90                   	nop
c0009849:	c3                   	ret    

c000984a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000984a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000984e:	83 c0 30             	add    eax,0x30
c0009851:	c3                   	ret    

c0009852 <IDT::addEntry(IDTEntry, int)>:
c0009852:	53                   	push   ebx
c0009853:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009857:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000985b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000985f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009863:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0009866:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000986a:	5b                   	pop    ebx
c000986b:	c3                   	ret    

c000986c <IDT::addEntry(int, void (*)(), bool)>:
c000986c:	53                   	push   ebx
c000986d:	83 ec 10             	sub    esp,0x10
c0009870:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0009875:	50                   	push   eax
c0009876:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000987a:	53                   	push   ebx
c000987b:	e8 40 ff ff ff       	call   c00097c0 <IDTEntry::IDTEntry(bool)>
c0009880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009884:	53                   	push   ebx
c0009885:	e8 a8 ff ff ff       	call   c0009832 <IDTEntry::setOffset(unsigned int)>
c000988a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000988e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009892:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009896:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000989a:	e8 b3 ff ff ff       	call   c0009852 <IDT::addEntry(IDTEntry, int)>
c000989f:	83 c4 30             	add    esp,0x30
c00098a2:	5b                   	pop    ebx
c00098a3:	c3                   	ret    

c00098a4 <IDT::flush()>:
c00098a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098a8:	66 c7 05 f8 89 02 c0 ff 07 	mov    WORD PTR ds:0xc00289f8,0x7ff
c00098b1:	a3 fa 89 02 c0       	mov    ds:0xc00289fa,eax
c00098b6:	0f 01 1d f8 89 02 c0 	lidtd  ds:0xc00289f8
c00098bd:	c3                   	ret    

c00098be <IDT::setup()>:
c00098be:	57                   	push   edi
c00098bf:	56                   	push   esi
c00098c0:	53                   	push   ebx
c00098c1:	83 ec 10             	sub    esp,0x10
c00098c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00098c8:	6a 00                	push   0x0
c00098ca:	68 a5 03 00 c0       	push   0xc00003a5
c00098cf:	6a 00                	push   0x0
c00098d1:	53                   	push   ebx
c00098d2:	e8 95 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c00098d7:	6a 00                	push   0x0
c00098d9:	68 b5 03 00 c0       	push   0xc00003b5
c00098de:	6a 01                	push   0x1
c00098e0:	53                   	push   ebx
c00098e1:	e8 86 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c00098e6:	83 c4 20             	add    esp,0x20
c00098e9:	6a 00                	push   0x0
c00098eb:	68 bf 03 00 c0       	push   0xc00003bf
c00098f0:	6a 02                	push   0x2
c00098f2:	53                   	push   ebx
c00098f3:	e8 74 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c00098f8:	6a 00                	push   0x0
c00098fa:	68 c9 03 00 c0       	push   0xc00003c9
c00098ff:	6a 03                	push   0x3
c0009901:	53                   	push   ebx
c0009902:	e8 65 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009907:	83 c4 20             	add    esp,0x20
c000990a:	6a 00                	push   0x0
c000990c:	68 d3 03 00 c0       	push   0xc00003d3
c0009911:	6a 04                	push   0x4
c0009913:	53                   	push   ebx
c0009914:	e8 53 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009919:	6a 00                	push   0x0
c000991b:	68 dd 03 00 c0       	push   0xc00003dd
c0009920:	6a 05                	push   0x5
c0009922:	53                   	push   ebx
c0009923:	e8 44 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009928:	83 c4 20             	add    esp,0x20
c000992b:	6a 00                	push   0x0
c000992d:	68 e7 03 00 c0       	push   0xc00003e7
c0009932:	6a 06                	push   0x6
c0009934:	53                   	push   ebx
c0009935:	e8 32 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c000993a:	6a 00                	push   0x0
c000993c:	68 f1 03 00 c0       	push   0xc00003f1
c0009941:	6a 07                	push   0x7
c0009943:	53                   	push   ebx
c0009944:	e8 23 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009949:	83 c4 20             	add    esp,0x20
c000994c:	6a 00                	push   0x0
c000994e:	68 fb 03 00 c0       	push   0xc00003fb
c0009953:	6a 08                	push   0x8
c0009955:	53                   	push   ebx
c0009956:	e8 11 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c000995b:	6a 00                	push   0x0
c000995d:	68 03 04 00 c0       	push   0xc0000403
c0009962:	6a 09                	push   0x9
c0009964:	53                   	push   ebx
c0009965:	e8 02 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c000996a:	83 c4 20             	add    esp,0x20
c000996d:	6a 00                	push   0x0
c000996f:	68 0d 04 00 c0       	push   0xc000040d
c0009974:	6a 0a                	push   0xa
c0009976:	53                   	push   ebx
c0009977:	e8 f0 fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c000997c:	6a 00                	push   0x0
c000997e:	68 15 04 00 c0       	push   0xc0000415
c0009983:	6a 0b                	push   0xb
c0009985:	53                   	push   ebx
c0009986:	e8 e1 fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c000998b:	83 c4 20             	add    esp,0x20
c000998e:	6a 00                	push   0x0
c0009990:	68 1d 04 00 c0       	push   0xc000041d
c0009995:	6a 0c                	push   0xc
c0009997:	53                   	push   ebx
c0009998:	e8 cf fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c000999d:	6a 00                	push   0x0
c000999f:	68 25 04 00 c0       	push   0xc0000425
c00099a4:	6a 0d                	push   0xd
c00099a6:	53                   	push   ebx
c00099a7:	e8 c0 fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c00099ac:	83 c4 20             	add    esp,0x20
c00099af:	6a 00                	push   0x0
c00099b1:	68 2d 04 00 c0       	push   0xc000042d
c00099b6:	6a 0e                	push   0xe
c00099b8:	53                   	push   ebx
c00099b9:	e8 ae fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c00099be:	6a 00                	push   0x0
c00099c0:	68 35 04 00 c0       	push   0xc0000435
c00099c5:	6a 0f                	push   0xf
c00099c7:	53                   	push   ebx
c00099c8:	e8 9f fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c00099cd:	83 c4 20             	add    esp,0x20
c00099d0:	6a 00                	push   0x0
c00099d2:	68 3f 04 00 c0       	push   0xc000043f
c00099d7:	6a 10                	push   0x10
c00099d9:	53                   	push   ebx
c00099da:	e8 8d fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c00099df:	6a 00                	push   0x0
c00099e1:	68 49 04 00 c0       	push   0xc0000449
c00099e6:	6a 11                	push   0x11
c00099e8:	53                   	push   ebx
c00099e9:	e8 7e fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c00099ee:	83 c4 20             	add    esp,0x20
c00099f1:	6a 00                	push   0x0
c00099f3:	68 53 04 00 c0       	push   0xc0000453
c00099f8:	6a 12                	push   0x12
c00099fa:	53                   	push   ebx
c00099fb:	e8 6c fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a00:	6a 01                	push   0x1
c0009a02:	68 ed 04 00 c0       	push   0xc00004ed
c0009a07:	6a 60                	push   0x60
c0009a09:	53                   	push   ebx
c0009a0a:	e8 5d fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a0f:	83 c4 20             	add    esp,0x20
c0009a12:	6a 00                	push   0x0
c0009a14:	68 f4 04 00 c0       	push   0xc00004f4
c0009a19:	6a 20                	push   0x20
c0009a1b:	53                   	push   ebx
c0009a1c:	e8 4b fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a21:	6a 00                	push   0x0
c0009a23:	68 df 04 00 c0       	push   0xc00004df
c0009a28:	6a 21                	push   0x21
c0009a2a:	53                   	push   ebx
c0009a2b:	e8 3c fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a30:	83 c4 20             	add    esp,0x20
c0009a33:	6a 00                	push   0x0
c0009a35:	68 e6 04 00 c0       	push   0xc00004e6
c0009a3a:	6a 22                	push   0x22
c0009a3c:	53                   	push   ebx
c0009a3d:	e8 2a fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a42:	6a 00                	push   0x0
c0009a44:	68 5d 04 00 c0       	push   0xc000045d
c0009a49:	6a 23                	push   0x23
c0009a4b:	53                   	push   ebx
c0009a4c:	e8 1b fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a51:	83 c4 20             	add    esp,0x20
c0009a54:	6a 00                	push   0x0
c0009a56:	68 67 04 00 c0       	push   0xc0000467
c0009a5b:	6a 24                	push   0x24
c0009a5d:	53                   	push   ebx
c0009a5e:	e8 09 fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a63:	6a 00                	push   0x0
c0009a65:	68 71 04 00 c0       	push   0xc0000471
c0009a6a:	6a 25                	push   0x25
c0009a6c:	53                   	push   ebx
c0009a6d:	e8 fa fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a72:	83 c4 20             	add    esp,0x20
c0009a75:	6a 00                	push   0x0
c0009a77:	68 7b 04 00 c0       	push   0xc000047b
c0009a7c:	6a 26                	push   0x26
c0009a7e:	53                   	push   ebx
c0009a7f:	e8 e8 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a84:	6a 00                	push   0x0
c0009a86:	68 85 04 00 c0       	push   0xc0000485
c0009a8b:	6a 27                	push   0x27
c0009a8d:	53                   	push   ebx
c0009a8e:	e8 d9 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a93:	83 c4 20             	add    esp,0x20
c0009a96:	6a 00                	push   0x0
c0009a98:	68 8f 04 00 c0       	push   0xc000048f
c0009a9d:	6a 28                	push   0x28
c0009a9f:	53                   	push   ebx
c0009aa0:	e8 c7 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009aa5:	6a 00                	push   0x0
c0009aa7:	68 99 04 00 c0       	push   0xc0000499
c0009aac:	6a 29                	push   0x29
c0009aae:	53                   	push   ebx
c0009aaf:	e8 b8 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009ab4:	83 c4 20             	add    esp,0x20
c0009ab7:	6a 00                	push   0x0
c0009ab9:	68 a3 04 00 c0       	push   0xc00004a3
c0009abe:	6a 2a                	push   0x2a
c0009ac0:	53                   	push   ebx
c0009ac1:	e8 a6 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009ac6:	6a 00                	push   0x0
c0009ac8:	68 ad 04 00 c0       	push   0xc00004ad
c0009acd:	6a 2b                	push   0x2b
c0009acf:	53                   	push   ebx
c0009ad0:	e8 97 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009ad5:	83 c4 20             	add    esp,0x20
c0009ad8:	6a 00                	push   0x0
c0009ada:	68 b7 04 00 c0       	push   0xc00004b7
c0009adf:	6a 2c                	push   0x2c
c0009ae1:	53                   	push   ebx
c0009ae2:	e8 85 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009ae7:	6a 00                	push   0x0
c0009ae9:	68 c1 04 00 c0       	push   0xc00004c1
c0009aee:	6a 2d                	push   0x2d
c0009af0:	53                   	push   ebx
c0009af1:	e8 76 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009af6:	83 c4 20             	add    esp,0x20
c0009af9:	6a 00                	push   0x0
c0009afb:	68 cb 04 00 c0       	push   0xc00004cb
c0009b00:	6a 2e                	push   0x2e
c0009b02:	53                   	push   ebx
c0009b03:	e8 64 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b08:	6a 00                	push   0x0
c0009b0a:	68 d5 04 00 c0       	push   0xc00004d5
c0009b0f:	6a 2f                	push   0x2f
c0009b11:	53                   	push   ebx
c0009b12:	e8 55 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b17:	83 c4 20             	add    esp,0x20
c0009b1a:	6a 00                	push   0x0
c0009b1c:	68 2b 05 00 c0       	push   0xc000052b
c0009b21:	6a 30                	push   0x30
c0009b23:	53                   	push   ebx
c0009b24:	e8 43 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b29:	6a 00                	push   0x0
c0009b2b:	68 35 05 00 c0       	push   0xc0000535
c0009b30:	6a 31                	push   0x31
c0009b32:	53                   	push   ebx
c0009b33:	e8 34 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b38:	83 c4 20             	add    esp,0x20
c0009b3b:	6a 00                	push   0x0
c0009b3d:	68 3f 05 00 c0       	push   0xc000053f
c0009b42:	6a 32                	push   0x32
c0009b44:	53                   	push   ebx
c0009b45:	e8 22 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b4a:	6a 00                	push   0x0
c0009b4c:	68 49 05 00 c0       	push   0xc0000549
c0009b51:	6a 33                	push   0x33
c0009b53:	53                   	push   ebx
c0009b54:	e8 13 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b59:	83 c4 20             	add    esp,0x20
c0009b5c:	6a 00                	push   0x0
c0009b5e:	68 53 05 00 c0       	push   0xc0000553
c0009b63:	6a 34                	push   0x34
c0009b65:	53                   	push   ebx
c0009b66:	e8 01 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b6b:	6a 00                	push   0x0
c0009b6d:	68 5d 05 00 c0       	push   0xc000055d
c0009b72:	6a 35                	push   0x35
c0009b74:	53                   	push   ebx
c0009b75:	e8 f2 fc ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b7a:	83 c4 20             	add    esp,0x20
c0009b7d:	6a 00                	push   0x0
c0009b7f:	68 67 05 00 c0       	push   0xc0000567
c0009b84:	6a 36                	push   0x36
c0009b86:	53                   	push   ebx
c0009b87:	e8 e0 fc ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b8c:	6a 00                	push   0x0
c0009b8e:	68 71 05 00 c0       	push   0xc0000571
c0009b93:	6a 37                	push   0x37
c0009b95:	53                   	push   ebx
c0009b96:	e8 d1 fc ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b9b:	83 c4 1c             	add    esp,0x1c
c0009b9e:	6a 03                	push   0x3
c0009ba0:	6a 02                	push   0x2
c0009ba2:	ff 35 10 8b 02 c0    	push   DWORD PTR ds:0xc0028b10
c0009ba8:	e8 1d 29 00 00       	call   c000c4ca <VAS::allocatePages(int, int)>
c0009bad:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009bb4:	89 c6                	mov    esi,eax
c0009bb6:	e8 a0 01 00 00       	call   c0009d5b <malloc>
c0009bbb:	81 c6 00 20 00 00    	add    esi,0x2000
c0009bc1:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bc4:	89 c7                	mov    edi,eax
c0009bc6:	e8 99 1a 00 00       	call   c000b664 <TSS::TSS()>
c0009bcb:	83 c4 0c             	add    esp,0xc
c0009bce:	68 fb 03 00 c0       	push   0xc00003fb
c0009bd3:	56                   	push   esi
c0009bd4:	57                   	push   edi
c0009bd5:	e8 ce 1a 00 00       	call   c000b6a8 <TSS::setup(unsigned long, unsigned long)>
c0009bda:	89 c6                	mov    esi,eax
c0009bdc:	58                   	pop    eax
c0009bdd:	5a                   	pop    edx
c0009bde:	6a 00                	push   0x0
c0009be0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009be4:	50                   	push   eax
c0009be5:	e8 d6 fb ff ff       	call   c00097c0 <IDTEntry::IDTEntry(bool)>
c0009bea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009bee:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0009bf3:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009bfa:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009c00:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c04:	80 ce 05             	or     dh,0x5
c0009c07:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009c0a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c0e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c12:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0009c15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009c18:	e8 87 fc ff ff       	call   c00098a4 <IDT::flush()>
c0009c1d:	83 c4 20             	add    esp,0x20
c0009c20:	5b                   	pop    ebx
c0009c21:	5e                   	pop    esi
c0009c22:	5f                   	pop    edi
c0009c23:	c3                   	ret    

c0009c24 <sbrk>:
c0009c24:	55                   	push   ebp
c0009c25:	57                   	push   edi
c0009c26:	56                   	push   esi
c0009c27:	53                   	push   ebx
c0009c28:	83 ec 24             	sub    esp,0x24
c0009c2b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009c2f:	53                   	push   ebx
c0009c30:	68 e4 47 02 c0       	push   0xc00247e4
c0009c35:	e8 0d 34 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009c3a:	83 c4 10             	add    esp,0x10
c0009c3d:	85 db                	test   ebx,ebx
c0009c3f:	74 5f                	je     c0009ca0 <sbrk+0x7c>
c0009c41:	78 64                	js     c0009ca7 <sbrk+0x83>
c0009c43:	a1 4c 7c 02 c0       	mov    eax,ds:0xc0027c4c
c0009c48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c4c:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c0009c52:	89 dd                	mov    ebp,ebx
c0009c54:	78 69                	js     c0009cbf <sbrk+0x9b>
c0009c56:	c1 fd 0c             	sar    ebp,0xc
c0009c59:	bb 00 00 00 00       	mov    ebx,0x0
c0009c5e:	8b 35 10 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028b10
c0009c64:	8b 3d 4c 7c 02 c0    	mov    edi,DWORD PTR ds:0xc0027c4c
c0009c6a:	e8 a3 07 00 00       	call   c000a412 <Phys::allocatePage()>
c0009c6f:	68 01 04 00 00       	push   0x401
c0009c74:	57                   	push   edi
c0009c75:	50                   	push   eax
c0009c76:	56                   	push   esi
c0009c77:	e8 4c 27 00 00       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c7c:	81 05 4c 7c 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0027c4c,0x1000
c0009c86:	43                   	inc    ebx
c0009c87:	83 c4 10             	add    esp,0x10
c0009c8a:	39 dd                	cmp    ebp,ebx
c0009c8c:	75 d0                	jne    c0009c5e <sbrk+0x3a>
c0009c8e:	0f 20 d8             	mov    eax,cr3
c0009c91:	0f 22 d8             	mov    cr3,eax
c0009c94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c98:	83 c4 1c             	add    esp,0x1c
c0009c9b:	5b                   	pop    ebx
c0009c9c:	5e                   	pop    esi
c0009c9d:	5f                   	pop    edi
c0009c9e:	5d                   	pop    ebp
c0009c9f:	c3                   	ret    
c0009ca0:	a1 4c 7c 02 c0       	mov    eax,ds:0xc0027c4c
c0009ca5:	eb f1                	jmp    c0009c98 <sbrk+0x74>
c0009ca7:	83 ec 08             	sub    esp,0x8
c0009caa:	53                   	push   ebx
c0009cab:	68 10 48 02 c0       	push   0xc0024810
c0009cb0:	e8 92 33 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009cb5:	83 c4 10             	add    esp,0x10
c0009cb8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009cbd:	eb d9                	jmp    c0009c98 <sbrk+0x74>
c0009cbf:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c0009cc5:	eb 8f                	jmp    c0009c56 <sbrk+0x32>

c0009cc7 <mmap>:
c0009cc7:	83 ec 18             	sub    esp,0x18
c0009cca:	68 02 48 02 c0       	push   0xc0024802
c0009ccf:	e8 55 b4 00 00       	call   c0015129 <Krnl::panic(char const*)>
c0009cd4:	b8 00 00 00 00       	mov    eax,0x0
c0009cd9:	83 c4 1c             	add    esp,0x1c
c0009cdc:	c3                   	ret    

c0009cdd <munmap>:
c0009cdd:	83 ec 18             	sub    esp,0x18
c0009ce0:	68 07 48 02 c0       	push   0xc0024807
c0009ce5:	e8 3f b4 00 00       	call   c0015129 <Krnl::panic(char const*)>
c0009cea:	b8 00 00 00 00       	mov    eax,0x0
c0009cef:	83 c4 1c             	add    esp,0x1c
c0009cf2:	c3                   	ret    

c0009cf3 <liballoc_lock()>:
c0009cf3:	fa                   	cli    
c0009cf4:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c0009cfa:	b8 00 00 00 00       	mov    eax,0x0
c0009cff:	c3                   	ret    

c0009d00 <liballoc_unlock()>:
c0009d00:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c0009d05:	48                   	dec    eax
c0009d06:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c0009d0b:	75 01                	jne    c0009d0e <liballoc_unlock()+0xe>
c0009d0d:	fb                   	sti    
c0009d0e:	b8 00 00 00 00       	mov    eax,0x0
c0009d13:	c3                   	ret    

c0009d14 <liballoc_alloc(int)>:
c0009d14:	83 ec 10             	sub    esp,0x10
c0009d17:	6a 01                	push   0x1
c0009d19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d1d:	ff 35 10 8b 02 c0    	push   DWORD PTR ds:0xc0028b10
c0009d23:	e8 a2 27 00 00       	call   c000c4ca <VAS::allocatePages(int, int)>
c0009d28:	83 c4 1c             	add    esp,0x1c
c0009d2b:	c3                   	ret    

c0009d2c <liballoc_free(void*, int)>:
c0009d2c:	83 ec 14             	sub    esp,0x14
c0009d2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d33:	ff 35 10 8b 02 c0    	push   DWORD PTR ds:0xc0028b10
c0009d39:	e8 36 24 00 00       	call   c000c174 <VAS::freeAllocatedPages(unsigned long)>
c0009d3e:	b8 00 00 00 00       	mov    eax,0x0
c0009d43:	83 c4 1c             	add    esp,0x1c
c0009d46:	c3                   	ret    

c0009d47 <realloc>:
c0009d47:	83 ec 14             	sub    esp,0x14
c0009d4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d52:	e8 09 78 ff ff       	call   c0001560 <dlrealloc>
c0009d57:	83 c4 1c             	add    esp,0x1c
c0009d5a:	c3                   	ret    

c0009d5b <malloc>:
c0009d5b:	83 ec 18             	sub    esp,0x18
c0009d5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d62:	e8 bc 72 ff ff       	call   c0001023 <dlmalloc>
c0009d67:	83 c4 1c             	add    esp,0x1c
c0009d6a:	c3                   	ret    

c0009d6b <free>:
c0009d6b:	83 ec 18             	sub    esp,0x18
c0009d6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d72:	e8 51 6f ff ff       	call   c0000cc8 <dlfree>
c0009d77:	83 c4 1c             	add    esp,0x1c
c0009d7a:	c3                   	ret    

c0009d7b <rfree>:
c0009d7b:	83 ec 18             	sub    esp,0x18
c0009d7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d82:	e8 41 6f ff ff       	call   c0000cc8 <dlfree>
c0009d87:	83 c4 1c             	add    esp,0x1c
c0009d8a:	c3                   	ret    

c0009d8b <calloc>:
c0009d8b:	56                   	push   esi
c0009d8c:	53                   	push   ebx
c0009d8d:	83 ec 10             	sub    esp,0x10
c0009d90:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009d94:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009d99:	53                   	push   ebx
c0009d9a:	e8 bc ff ff ff       	call   c0009d5b <malloc>
c0009d9f:	89 c6                	mov    esi,eax
c0009da1:	83 c4 0c             	add    esp,0xc
c0009da4:	53                   	push   ebx
c0009da5:	6a 00                	push   0x0
c0009da7:	50                   	push   eax
c0009da8:	e8 d7 68 ff ff       	call   c0000684 <memset>
c0009dad:	89 f0                	mov    eax,esi
c0009daf:	83 c4 14             	add    esp,0x14
c0009db2:	5b                   	pop    ebx
c0009db3:	5e                   	pop    esi
c0009db4:	c3                   	ret    

c0009db5 <Krnl::setBootMessage(char const*)>:
c0009db5:	57                   	push   edi
c0009db6:	56                   	push   esi
c0009db7:	53                   	push   ebx
c0009db8:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009dbe:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009dc5:	68 9e 00 00 00       	push   0x9e
c0009dca:	6a 00                	push   0x0
c0009dcc:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009dd0:	56                   	push   esi
c0009dd1:	e8 ae 68 ff ff       	call   c0000684 <memset>
c0009dd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009dd9:	e8 c2 68 ff ff       	call   c00006a0 <strlen>
c0009dde:	ba 50 00 00 00       	mov    edx,0x50
c0009de3:	83 c4 10             	add    esp,0x10
c0009de6:	29 c2                	sub    edx,eax
c0009de8:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009dec:	d1 ea                	shr    edx,1
c0009dee:	84 c0                	test   al,al
c0009df0:	74 19                	je     c0009e0b <Krnl::setBootMessage(char const*)+0x56>
c0009df2:	01 d2                	add    edx,edx
c0009df4:	43                   	inc    ebx
c0009df5:	01 f2                	add    edx,esi
c0009df7:	80 cc 0f             	or     ah,0xf
c0009dfa:	83 c2 02             	add    edx,0x2
c0009dfd:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009e01:	43                   	inc    ebx
c0009e02:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009e07:	84 c0                	test   al,al
c0009e09:	75 ec                	jne    c0009df7 <Krnl::setBootMessage(char const*)+0x42>
c0009e0b:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009e10:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009e15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009e17:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009e1d:	5b                   	pop    ebx
c0009e1e:	5e                   	pop    esi
c0009e1f:	5f                   	pop    edi
c0009e20:	c3                   	ret    

c0009e21 <kernel_main>:
c0009e21:	57                   	push   edi
c0009e22:	56                   	push   esi
c0009e23:	53                   	push   ebx
c0009e24:	83 ec 20             	sub    esp,0x20
c0009e27:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009e2c:	a3 00 8a 02 c0       	mov    ds:0xc0028a00,eax
c0009e31:	f6 c4 08             	test   ah,0x8
c0009e34:	0f 85 7a 03 00 00    	jne    c000a1b4 <kernel_main+0x393>
c0009e3a:	31 f6                	xor    esi,esi
c0009e3c:	bf f9 03 00 00       	mov    edi,0x3f9
c0009e41:	89 f0                	mov    eax,esi
c0009e43:	89 fa                	mov    edx,edi
c0009e45:	ee                   	out    dx,al
c0009e46:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009e4b:	b0 80                	mov    al,0x80
c0009e4d:	89 da                	mov    edx,ebx
c0009e4f:	ee                   	out    dx,al
c0009e50:	b1 03                	mov    cl,0x3
c0009e52:	ba f8 03 00 00       	mov    edx,0x3f8
c0009e57:	88 c8                	mov    al,cl
c0009e59:	ee                   	out    dx,al
c0009e5a:	89 f0                	mov    eax,esi
c0009e5c:	89 fa                	mov    edx,edi
c0009e5e:	ee                   	out    dx,al
c0009e5f:	88 c8                	mov    al,cl
c0009e61:	89 da                	mov    edx,ebx
c0009e63:	ee                   	out    dx,al
c0009e64:	b0 c7                	mov    al,0xc7
c0009e66:	ba fa 03 00 00       	mov    edx,0x3fa
c0009e6b:	ee                   	out    dx,al
c0009e6c:	b0 0b                	mov    al,0xb
c0009e6e:	ba fc 03 00 00       	mov    edx,0x3fc
c0009e73:	ee                   	out    dx,al
c0009e74:	83 ec 0c             	sub    esp,0xc
c0009e77:	68 40 48 02 c0       	push   0xc0024840
c0009e7c:	e8 c6 31 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009e81:	83 c4 10             	add    esp,0x10
c0009e84:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c0009e8b:	0f 85 eb 02 00 00    	jne    c000a17c <kernel_main+0x35b>
c0009e91:	e8 d2 0c 00 00       	call   c000ab68 <installVgaTextImplementation()>
c0009e96:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c0009e9d:	0f 85 94 02 00 00    	jne    c000a137 <kernel_main+0x316>
c0009ea3:	0f b6 05 60 7c 02 c0 	movzx  eax,BYTE PTR ds:0xc0027c60
c0009eaa:	84 c0                	test   al,al
c0009eac:	74 7b                	je     c0009f29 <kernel_main+0x108>
c0009eae:	31 db                	xor    ebx,ebx
c0009eb0:	bf 0a 00 00 00       	mov    edi,0xa
c0009eb5:	be 05 00 00 00       	mov    esi,0x5
c0009eba:	31 c9                	xor    ecx,ecx
c0009ebc:	eb 2a                	jmp    c0009ee8 <kernel_main+0xc7>
c0009ebe:	3c 0d                	cmp    al,0xd
c0009ec0:	74 1a                	je     c0009edc <kernel_main+0xbb>
c0009ec2:	3c 0a                	cmp    al,0xa
c0009ec4:	74 40                	je     c0009f06 <kernel_main+0xe5>
c0009ec6:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009ec9:	80 cc 0e             	or     ah,0xe
c0009ecc:	c1 e2 04             	shl    edx,0x4
c0009ecf:	01 ca                	add    edx,ecx
c0009ed1:	41                   	inc    ecx
c0009ed2:	01 fa                	add    edx,edi
c0009ed4:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009edc:	43                   	inc    ebx
c0009edd:	0f b6 83 60 7c 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd83a0]
c0009ee4:	84 c0                	test   al,al
c0009ee6:	74 32                	je     c0009f1a <kernel_main+0xf9>
c0009ee8:	80 b9 96 7c 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd836a],0xdb
c0009eef:	75 cd                	jne    c0009ebe <kernel_main+0x9d>
c0009ef1:	0f b6 91 95 7c 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd836b]
c0009ef8:	83 e2 fe             	and    edx,0xfffffffe
c0009efb:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009f01:	75 bb                	jne    c0009ebe <kernel_main+0x9d>
c0009f03:	47                   	inc    edi
c0009f04:	eb b8                	jmp    c0009ebe <kernel_main+0x9d>
c0009f06:	43                   	inc    ebx
c0009f07:	46                   	inc    esi
c0009f08:	31 c9                	xor    ecx,ecx
c0009f0a:	0f b6 83 60 7c 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd83a0]
c0009f11:	bf 0a 00 00 00       	mov    edi,0xa
c0009f16:	84 c0                	test   al,al
c0009f18:	75 ce                	jne    c0009ee8 <kernel_main+0xc7>
c0009f1a:	8b 15 00 8a 02 c0    	mov    edx,DWORD PTR ds:0xc0028a00
c0009f20:	80 e6 08             	and    dh,0x8
c0009f23:	0f 85 bf 00 00 00    	jne    c0009fe8 <kernel_main+0x1c7>
c0009f29:	83 ec 0c             	sub    esp,0xc
c0009f2c:	68 dc 48 02 c0       	push   0xc00248dc
c0009f31:	e8 7f fe ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0009f36:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009f3b:	05 ff 0f 00 00       	add    eax,0xfff
c0009f40:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f45:	89 04 24             	mov    DWORD PTR [esp],eax
c0009f48:	e8 44 06 00 00       	call   c000a591 <Phys::physicalMemorySetup(unsigned int)>
c0009f4d:	83 c4 10             	add    esp,0x10
c0009f50:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c0009f57:	0f 85 a2 01 00 00    	jne    c000a0ff <kernel_main+0x2de>
c0009f5d:	e8 7e 1f 00 00       	call   c000bee0 <Virt::virtualMemorySetup()>
c0009f62:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c0009f69:	0f 85 58 01 00 00    	jne    c000a0c7 <kernel_main+0x2a6>
c0009f6f:	83 ec 0c             	sub    esp,0xc
c0009f72:	8d 74 24 18          	lea    esi,[esp+0x18]
c0009f76:	56                   	push   esi
c0009f77:	e8 20 20 00 00       	call   c000bf9c <VAS::VAS()>
c0009f7c:	83 c4 10             	add    esp,0x10
c0009f7f:	89 35 10 8b 02 c0    	mov    DWORD PTR ds:0xc0028b10,esi
c0009f85:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c0009f8c:	0f 85 fd 00 00 00    	jne    c000a08f <kernel_main+0x26e>
c0009f92:	e8 89 60 ff ff       	call   c0000020 <callGlobalConstructors>
c0009f97:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c0009f9e:	0f 85 b3 00 00 00    	jne    c000a057 <kernel_main+0x236>
c0009fa4:	83 ec 0c             	sub    esp,0xc
c0009fa7:	68 ec 01 00 00       	push   0x1ec
c0009fac:	e8 aa fd ff ff       	call   c0009d5b <malloc>
c0009fb1:	89 c3                	mov    ebx,eax
c0009fb3:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fb6:	e8 05 ec ff ff       	call   c0008bc0 <Computer::Computer()>
c0009fbb:	83 c4 10             	add    esp,0x10
c0009fbe:	89 1d e8 89 02 c0    	mov    DWORD PTR ds:0xc00289e8,ebx
c0009fc4:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c0009fcb:	75 53                	jne    c000a020 <kernel_main+0x1ff>
c0009fcd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009fcf:	6a 00                	push   0x0
c0009fd1:	6a 00                	push   0x0
c0009fd3:	6a 00                	push   0x0
c0009fd5:	53                   	push   ebx
c0009fd6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009fd9:	89 34 24             	mov    DWORD PTR [esp],esi
c0009fdc:	e8 6b 22 00 00       	call   c000c24c <VAS::~VAS()>
c0009fe1:	83 c4 30             	add    esp,0x30
c0009fe4:	5b                   	pop    ebx
c0009fe5:	5e                   	pop    esi
c0009fe6:	5f                   	pop    edi
c0009fe7:	c3                   	ret    
c0009fe8:	83 ec 0c             	sub    esp,0xc
c0009feb:	68 8b 48 02 c0       	push   0xc002488b
c0009ff0:	e8 c0 fd ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0009ff5:	83 c4 10             	add    esp,0x10
c0009ff8:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c0009fff:	0f 85 24 ff ff ff    	jne    c0009f29 <kernel_main+0x108>
c000a005:	eb 04                	jmp    c000a00b <kernel_main+0x1ea>
c000a007:	3c 1c                	cmp    al,0x1c
c000a009:	74 06                	je     c000a011 <kernel_main+0x1f0>
c000a00b:	e4 60                	in     al,0x60
c000a00d:	3c 5a                	cmp    al,0x5a
c000a00f:	75 f6                	jne    c000a007 <kernel_main+0x1e6>
c000a011:	e4 60                	in     al,0x60
c000a013:	3c 5a                	cmp    al,0x5a
c000a015:	74 fa                	je     c000a011 <kernel_main+0x1f0>
c000a017:	3c 1c                	cmp    al,0x1c
c000a019:	74 f6                	je     c000a011 <kernel_main+0x1f0>
c000a01b:	e9 09 ff ff ff       	jmp    c0009f29 <kernel_main+0x108>
c000a020:	83 ec 0c             	sub    esp,0xc
c000a023:	68 ca 48 02 c0       	push   0xc00248ca
c000a028:	e8 88 fd ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000a02d:	83 c4 10             	add    esp,0x10
c000a030:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c000a037:	74 0c                	je     c000a045 <kernel_main+0x224>
c000a039:	8b 1d e8 89 02 c0    	mov    ebx,DWORD PTR ds:0xc00289e8
c000a03f:	eb 8c                	jmp    c0009fcd <kernel_main+0x1ac>
c000a041:	3c 1c                	cmp    al,0x1c
c000a043:	74 06                	je     c000a04b <kernel_main+0x22a>
c000a045:	e4 60                	in     al,0x60
c000a047:	3c 5a                	cmp    al,0x5a
c000a049:	75 f6                	jne    c000a041 <kernel_main+0x220>
c000a04b:	e4 60                	in     al,0x60
c000a04d:	3c 5a                	cmp    al,0x5a
c000a04f:	74 fa                	je     c000a04b <kernel_main+0x22a>
c000a051:	3c 1c                	cmp    al,0x1c
c000a053:	74 f6                	je     c000a04b <kernel_main+0x22a>
c000a055:	eb e2                	jmp    c000a039 <kernel_main+0x218>
c000a057:	83 ec 0c             	sub    esp,0xc
c000a05a:	68 b7 48 02 c0       	push   0xc00248b7
c000a05f:	e8 51 fd ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000a064:	83 c4 10             	add    esp,0x10
c000a067:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c000a06e:	0f 85 30 ff ff ff    	jne    c0009fa4 <kernel_main+0x183>
c000a074:	eb 04                	jmp    c000a07a <kernel_main+0x259>
c000a076:	3c 1c                	cmp    al,0x1c
c000a078:	74 06                	je     c000a080 <kernel_main+0x25f>
c000a07a:	e4 60                	in     al,0x60
c000a07c:	3c 5a                	cmp    al,0x5a
c000a07e:	75 f6                	jne    c000a076 <kernel_main+0x255>
c000a080:	e4 60                	in     al,0x60
c000a082:	3c 5a                	cmp    al,0x5a
c000a084:	74 fa                	je     c000a080 <kernel_main+0x25f>
c000a086:	3c 1c                	cmp    al,0x1c
c000a088:	74 f6                	je     c000a080 <kernel_main+0x25f>
c000a08a:	e9 15 ff ff ff       	jmp    c0009fa4 <kernel_main+0x183>
c000a08f:	83 ec 0c             	sub    esp,0xc
c000a092:	68 ad 48 02 c0       	push   0xc00248ad
c000a097:	e8 19 fd ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000a09c:	83 c4 10             	add    esp,0x10
c000a09f:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c000a0a6:	0f 85 e6 fe ff ff    	jne    c0009f92 <kernel_main+0x171>
c000a0ac:	eb 04                	jmp    c000a0b2 <kernel_main+0x291>
c000a0ae:	3c 1c                	cmp    al,0x1c
c000a0b0:	74 06                	je     c000a0b8 <kernel_main+0x297>
c000a0b2:	e4 60                	in     al,0x60
c000a0b4:	3c 5a                	cmp    al,0x5a
c000a0b6:	75 f6                	jne    c000a0ae <kernel_main+0x28d>
c000a0b8:	e4 60                	in     al,0x60
c000a0ba:	3c 5a                	cmp    al,0x5a
c000a0bc:	74 fa                	je     c000a0b8 <kernel_main+0x297>
c000a0be:	3c 1c                	cmp    al,0x1c
c000a0c0:	74 f6                	je     c000a0b8 <kernel_main+0x297>
c000a0c2:	e9 cb fe ff ff       	jmp    c0009f92 <kernel_main+0x171>
c000a0c7:	83 ec 0c             	sub    esp,0xc
c000a0ca:	68 a2 48 02 c0       	push   0xc00248a2
c000a0cf:	e8 e1 fc ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000a0d4:	83 c4 10             	add    esp,0x10
c000a0d7:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c000a0de:	0f 85 8b fe ff ff    	jne    c0009f6f <kernel_main+0x14e>
c000a0e4:	eb 04                	jmp    c000a0ea <kernel_main+0x2c9>
c000a0e6:	3c 1c                	cmp    al,0x1c
c000a0e8:	74 06                	je     c000a0f0 <kernel_main+0x2cf>
c000a0ea:	e4 60                	in     al,0x60
c000a0ec:	3c 5a                	cmp    al,0x5a
c000a0ee:	75 f6                	jne    c000a0e6 <kernel_main+0x2c5>
c000a0f0:	e4 60                	in     al,0x60
c000a0f2:	3c 5a                	cmp    al,0x5a
c000a0f4:	74 fa                	je     c000a0f0 <kernel_main+0x2cf>
c000a0f6:	3c 1c                	cmp    al,0x1c
c000a0f8:	74 f6                	je     c000a0f0 <kernel_main+0x2cf>
c000a0fa:	e9 70 fe ff ff       	jmp    c0009f6f <kernel_main+0x14e>
c000a0ff:	83 ec 0c             	sub    esp,0xc
c000a102:	68 97 48 02 c0       	push   0xc0024897
c000a107:	e8 a9 fc ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000a10c:	83 c4 10             	add    esp,0x10
c000a10f:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c000a116:	0f 85 41 fe ff ff    	jne    c0009f5d <kernel_main+0x13c>
c000a11c:	eb 04                	jmp    c000a122 <kernel_main+0x301>
c000a11e:	3c 1c                	cmp    al,0x1c
c000a120:	74 06                	je     c000a128 <kernel_main+0x307>
c000a122:	e4 60                	in     al,0x60
c000a124:	3c 5a                	cmp    al,0x5a
c000a126:	75 f6                	jne    c000a11e <kernel_main+0x2fd>
c000a128:	e4 60                	in     al,0x60
c000a12a:	3c 5a                	cmp    al,0x5a
c000a12c:	74 fa                	je     c000a128 <kernel_main+0x307>
c000a12e:	3c 1c                	cmp    al,0x1c
c000a130:	74 f6                	je     c000a128 <kernel_main+0x307>
c000a132:	e9 26 fe ff ff       	jmp    c0009f5d <kernel_main+0x13c>
c000a137:	83 ec 0c             	sub    esp,0xc
c000a13a:	68 79 48 02 c0       	push   0xc0024879
c000a13f:	e8 71 fc ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000a144:	8b 15 00 8a 02 c0    	mov    edx,DWORD PTR ds:0xc0028a00
c000a14a:	83 c4 10             	add    esp,0x10
c000a14d:	f6 c2 80             	test   dl,0x80
c000a150:	74 18                	je     c000a16a <kernel_main+0x349>
c000a152:	0f b6 05 60 7c 02 c0 	movzx  eax,BYTE PTR ds:0xc0027c60
c000a159:	84 c0                	test   al,al
c000a15b:	0f 85 4d fd ff ff    	jne    c0009eae <kernel_main+0x8d>
c000a161:	e9 ba fd ff ff       	jmp    c0009f20 <kernel_main+0xff>
c000a166:	3c 1c                	cmp    al,0x1c
c000a168:	74 06                	je     c000a170 <kernel_main+0x34f>
c000a16a:	e4 60                	in     al,0x60
c000a16c:	3c 5a                	cmp    al,0x5a
c000a16e:	75 f6                	jne    c000a166 <kernel_main+0x345>
c000a170:	e4 60                	in     al,0x60
c000a172:	3c 5a                	cmp    al,0x5a
c000a174:	74 fa                	je     c000a170 <kernel_main+0x34f>
c000a176:	3c 1c                	cmp    al,0x1c
c000a178:	74 f6                	je     c000a170 <kernel_main+0x34f>
c000a17a:	eb d6                	jmp    c000a152 <kernel_main+0x331>
c000a17c:	83 ec 0c             	sub    esp,0xc
c000a17f:	68 6a 48 02 c0       	push   0xc002486a
c000a184:	e8 2c fc ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000a189:	83 c4 10             	add    esp,0x10
c000a18c:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c000a193:	0f 85 f8 fc ff ff    	jne    c0009e91 <kernel_main+0x70>
c000a199:	eb 04                	jmp    c000a19f <kernel_main+0x37e>
c000a19b:	3c 1c                	cmp    al,0x1c
c000a19d:	74 06                	je     c000a1a5 <kernel_main+0x384>
c000a19f:	e4 60                	in     al,0x60
c000a1a1:	3c 5a                	cmp    al,0x5a
c000a1a3:	75 f6                	jne    c000a19b <kernel_main+0x37a>
c000a1a5:	e4 60                	in     al,0x60
c000a1a7:	3c 5a                	cmp    al,0x5a
c000a1a9:	74 fa                	je     c000a1a5 <kernel_main+0x384>
c000a1ab:	3c 1c                	cmp    al,0x1c
c000a1ad:	74 f6                	je     c000a1a5 <kernel_main+0x384>
c000a1af:	e9 dd fc ff ff       	jmp    c0009e91 <kernel_main+0x70>
c000a1b4:	83 ec 0c             	sub    esp,0xc
c000a1b7:	68 57 48 02 c0       	push   0xc0024857
c000a1bc:	e8 f4 fb ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000a1c1:	83 c4 10             	add    esp,0x10
c000a1c4:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c000a1cb:	0f 85 69 fc ff ff    	jne    c0009e3a <kernel_main+0x19>
c000a1d1:	eb 04                	jmp    c000a1d7 <kernel_main+0x3b6>
c000a1d3:	3c 1c                	cmp    al,0x1c
c000a1d5:	74 06                	je     c000a1dd <kernel_main+0x3bc>
c000a1d7:	e4 60                	in     al,0x60
c000a1d9:	3c 5a                	cmp    al,0x5a
c000a1db:	75 f6                	jne    c000a1d3 <kernel_main+0x3b2>
c000a1dd:	e4 60                	in     al,0x60
c000a1df:	3c 5a                	cmp    al,0x5a
c000a1e1:	74 fa                	je     c000a1dd <kernel_main+0x3bc>
c000a1e3:	3c 1c                	cmp    al,0x1c
c000a1e5:	74 f6                	je     c000a1dd <kernel_main+0x3bc>
c000a1e7:	e9 4e fc ff ff       	jmp    c0009e3a <kernel_main+0x19>

c000a1ec <Phys::allocateDMA(unsigned long)>:
c000a1ec:	55                   	push   ebp
c000a1ed:	31 ed                	xor    ebp,ebp
c000a1ef:	57                   	push   edi
c000a1f0:	56                   	push   esi
c000a1f1:	53                   	push   ebx
c000a1f2:	31 db                	xor    ebx,ebx
c000a1f4:	83 ec 28             	sub    esp,0x28
c000a1f7:	68 fb 48 02 c0       	push   0xc00248fb
c000a1fc:	e8 46 2e 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a201:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a205:	83 c4 10             	add    esp,0x10
c000a208:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000a20e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000a216:	c1 ef 0c             	shr    edi,0xc
c000a219:	31 c0                	xor    eax,eax
c000a21b:	eb 19                	jmp    c000a236 <Phys::allocateDMA(unsigned long)+0x4a>
c000a21d:	85 c0                	test   eax,eax
c000a21f:	75 06                	jne    c000a227 <Phys::allocateDMA(unsigned long)+0x3b>
c000a221:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a225:	89 dd                	mov    ebp,ebx
c000a227:	8d 70 01             	lea    esi,[eax+0x1]
c000a22a:	39 f7                	cmp    edi,esi
c000a22c:	74 3f                	je     c000a26d <Phys::allocateDMA(unsigned long)+0x81>
c000a22e:	89 f0                	mov    eax,esi
c000a230:	43                   	inc    ebx
c000a231:	83 fb 0f             	cmp    ebx,0xf
c000a234:	7f 11                	jg     c000a247 <Phys::allocateDMA(unsigned long)+0x5b>
c000a236:	80 bb 1c 8a 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd75e4],0x0
c000a23d:	74 de                	je     c000a21d <Phys::allocateDMA(unsigned long)+0x31>
c000a23f:	31 c0                	xor    eax,eax
c000a241:	43                   	inc    ebx
c000a242:	83 fb 0f             	cmp    ebx,0xf
c000a245:	7e ef                	jle    c000a236 <Phys::allocateDMA(unsigned long)+0x4a>
c000a247:	83 ec 0c             	sub    esp,0xc
c000a24a:	68 2b 49 02 c0       	push   0xc002492b
c000a24f:	e8 f3 2d 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a254:	c7 04 24 e8 49 02 c0 	mov    DWORD PTR [esp],0xc00249e8
c000a25b:	e8 c9 ae 00 00       	call   c0015129 <Krnl::panic(char const*)>
c000a260:	83 c4 10             	add    esp,0x10
c000a263:	31 c0                	xor    eax,eax
c000a265:	83 c4 1c             	add    esp,0x1c
c000a268:	5b                   	pop    ebx
c000a269:	5e                   	pop    esi
c000a26a:	5f                   	pop    edi
c000a26b:	5d                   	pop    ebp
c000a26c:	c3                   	ret    
c000a26d:	89 e9                	mov    ecx,ebp
c000a26f:	c1 f9 04             	sar    ecx,0x4
c000a272:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a276:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000a27a:	89 ca                	mov    edx,ecx
c000a27c:	4a                   	dec    edx
c000a27d:	79 03                	jns    c000a282 <Phys::allocateDMA(unsigned long)+0x96>
c000a27f:	8d 51 0e             	lea    edx,[ecx+0xe]
c000a282:	c1 fa 04             	sar    edx,0x4
c000a285:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000a289:	74 08                	je     c000a293 <Phys::allocateDMA(unsigned long)+0xa7>
c000a28b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a28f:	31 c0                	xor    eax,eax
c000a291:	eb ae                	jmp    c000a241 <Phys::allocateDMA(unsigned long)+0x55>
c000a293:	85 f6                	test   esi,esi
c000a295:	74 15                	je     c000a2ac <Phys::allocateDMA(unsigned long)+0xc0>
c000a297:	8d 95 1c 8a 02 c0    	lea    edx,[ebp-0x3ffd75e4]
c000a29d:	8d 84 05 1d 8a 02 c0 	lea    eax,[ebp+eax*1-0x3ffd75e3]
c000a2a4:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000a2a7:	42                   	inc    edx
c000a2a8:	39 d0                	cmp    eax,edx
c000a2aa:	75 f8                	jne    c000a2a4 <Phys::allocateDMA(unsigned long)+0xb8>
c000a2ac:	83 ec 0c             	sub    esp,0xc
c000a2af:	01 3d 14 8a 02 c0    	add    DWORD PTR ds:0xc0028a14,edi
c000a2b5:	68 14 49 02 c0       	push   0xc0024914
c000a2ba:	e8 88 2d 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a2bf:	83 c4 10             	add    esp,0x10
c000a2c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2c6:	85 c0                	test   eax,eax
c000a2c8:	74 23                	je     c000a2ed <Phys::allocateDMA(unsigned long)+0x101>
c000a2ca:	83 ec 0c             	sub    esp,0xc
c000a2cd:	68 9e 78 02 c0       	push   0xc002789e
c000a2d2:	e8 70 2d 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a2d7:	c7 04 24 e8 49 02 c0 	mov    DWORD PTR [esp],0xc00249e8
c000a2de:	e8 46 ae 00 00       	call   c0015129 <Krnl::panic(char const*)>
c000a2e3:	83 c4 10             	add    esp,0x10
c000a2e6:	89 f0                	mov    eax,esi
c000a2e8:	e9 43 ff ff ff       	jmp    c000a230 <Phys::allocateDMA(unsigned long)+0x44>
c000a2ed:	c1 e5 0c             	shl    ebp,0xc
c000a2f0:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000a2f6:	e9 6a ff ff ff       	jmp    c000a265 <Phys::allocateDMA(unsigned long)+0x79>

c000a2fb <Phys::freeDMA(unsigned long, unsigned long)>:
c000a2fb:	83 ec 18             	sub    esp,0x18
c000a2fe:	68 2f 49 02 c0       	push   0xc002492f
c000a303:	e8 3f 2d 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a308:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a30c:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000a312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a316:	c1 ea 0c             	shr    edx,0xc
c000a319:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000a31e:	29 15 14 8a 02 c0    	sub    DWORD PTR ds:0xc0028a14,edx
c000a324:	c1 e8 0c             	shr    eax,0xc
c000a327:	83 c4 10             	add    esp,0x10
c000a32a:	85 d2                	test   edx,edx
c000a32c:	74 0f                	je     c000a33d <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c000a32e:	05 1c 8a 02 c0       	add    eax,0xc0028a1c
c000a333:	01 c2                	add    edx,eax
c000a335:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000a338:	40                   	inc    eax
c000a339:	39 d0                	cmp    eax,edx
c000a33b:	75 f8                	jne    c000a335 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000a33d:	83 c4 0c             	add    esp,0xc
c000a340:	c3                   	ret    

c000a341 <Phys::setPageState(unsigned long, bool)>:
c000a341:	56                   	push   esi
c000a342:	ba 01 00 00 00       	mov    edx,0x1
c000a347:	53                   	push   ebx
c000a348:	8b 35 a4 7d 02 c0    	mov    esi,DWORD PTR ds:0xc0027da4
c000a34e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a352:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a356:	89 c8                	mov    eax,ecx
c000a358:	83 e1 07             	and    ecx,0x7
c000a35b:	c1 e8 03             	shr    eax,0x3
c000a35e:	d3 e3                	shl    ebx,cl
c000a360:	01 c6                	add    esi,eax
c000a362:	d3 e2                	shl    edx,cl
c000a364:	f7 d2                	not    edx
c000a366:	20 16                	and    BYTE PTR [esi],dl
c000a368:	03 05 a4 7d 02 c0    	add    eax,DWORD PTR ds:0xc0027da4
c000a36e:	08 18                	or     BYTE PTR [eax],bl
c000a370:	5b                   	pop    ebx
c000a371:	5e                   	pop    esi
c000a372:	c3                   	ret    

c000a373 <Phys::getPageState(unsigned long)>:
c000a373:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a377:	8b 15 a4 7d 02 c0    	mov    edx,DWORD PTR ds:0xc0027da4
c000a37d:	89 c8                	mov    eax,ecx
c000a37f:	83 e1 07             	and    ecx,0x7
c000a382:	c1 e8 03             	shr    eax,0x3
c000a385:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000a389:	d3 f8                	sar    eax,cl
c000a38b:	83 e0 01             	and    eax,0x1
c000a38e:	c3                   	ret    

c000a38f <Phys::freePage(unsigned long)>:
c000a38f:	53                   	push   ebx
c000a390:	83 ec 10             	sub    esp,0x10
c000a393:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a397:	53                   	push   ebx
c000a398:	68 45 49 02 c0       	push   0xc0024945
c000a39d:	e8 a5 2c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a3a2:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c000a3a8:	83 c4 10             	add    esp,0x10
c000a3ab:	3d ff ff 00 00       	cmp    eax,0xffff
c000a3b0:	76 3d                	jbe    c000a3ef <Phys::freePage(unsigned long)+0x60>
c000a3b2:	83 ec 0c             	sub    esp,0xc
c000a3b5:	c1 eb 0c             	shr    ebx,0xc
c000a3b8:	53                   	push   ebx
c000a3b9:	e8 b5 ff ff ff       	call   c000a373 <Phys::getPageState(unsigned long)>
c000a3be:	83 c4 10             	add    esp,0x10
c000a3c1:	84 c0                	test   al,al
c000a3c3:	74 19                	je     c000a3de <Phys::freePage(unsigned long)+0x4f>
c000a3c5:	83 ec 08             	sub    esp,0x8
c000a3c8:	ff 0d 14 8a 02 c0    	dec    DWORD PTR ds:0xc0028a14
c000a3ce:	6a 00                	push   0x0
c000a3d0:	53                   	push   ebx
c000a3d1:	e8 6b ff ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a3d6:	83 c4 10             	add    esp,0x10
c000a3d9:	83 c4 08             	add    esp,0x8
c000a3dc:	5b                   	pop    ebx
c000a3dd:	c3                   	ret    
c000a3de:	c7 44 24 10 6f 49 02 c0 	mov    DWORD PTR [esp+0x10],0xc002496f
c000a3e6:	83 c4 08             	add    esp,0x8
c000a3e9:	5b                   	pop    ebx
c000a3ea:	e9 3a ad 00 00       	jmp    c0015129 <Krnl::panic(char const*)>
c000a3ef:	83 ec 08             	sub    esp,0x8
c000a3f2:	53                   	push   ebx
c000a3f3:	68 58 49 02 c0       	push   0xc0024958
c000a3f8:	e8 4a 2c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a3fd:	58                   	pop    eax
c000a3fe:	5a                   	pop    edx
c000a3ff:	68 00 10 00 00       	push   0x1000
c000a404:	53                   	push   ebx
c000a405:	e8 f1 fe ff ff       	call   c000a2fb <Phys::freeDMA(unsigned long, unsigned long)>
c000a40a:	83 c4 10             	add    esp,0x10
c000a40d:	83 c4 08             	add    esp,0x8
c000a410:	5b                   	pop    ebx
c000a411:	c3                   	ret    

c000a412 <Phys::allocatePage()>:
c000a412:	56                   	push   esi
c000a413:	53                   	push   ebx
c000a414:	83 ec 14             	sub    esp,0x14
c000a417:	8b 35 08 8a 02 c0    	mov    esi,DWORD PTR ds:0xc0028a08
c000a41d:	89 f3                	mov    ebx,esi
c000a41f:	eb 0a                	jmp    c000a42b <Phys::allocatePage()+0x19>
c000a421:	89 1d 08 8a 02 c0    	mov    DWORD PTR ds:0xc0028a08,ebx
c000a427:	39 de                	cmp    esi,ebx
c000a429:	74 24                	je     c000a44f <Phys::allocatePage()+0x3d>
c000a42b:	53                   	push   ebx
c000a42c:	e8 42 ff ff ff       	call   c000a373 <Phys::getPageState(unsigned long)>
c000a431:	5a                   	pop    edx
c000a432:	84 c0                	test   al,al
c000a434:	74 69                	je     c000a49f <Phys::allocatePage()+0x8d>
c000a436:	43                   	inc    ebx
c000a437:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a43d:	75 e2                	jne    c000a421 <Phys::allocatePage()+0xf>
c000a43f:	31 db                	xor    ebx,ebx
c000a441:	c7 05 08 8a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028a08,0x0
c000a44b:	39 de                	cmp    esi,ebx
c000a44d:	75 dc                	jne    c000a42b <Phys::allocatePage()+0x19>
c000a44f:	83 ec 0c             	sub    esp,0xc
c000a452:	80 35 2c 8a 02 c0 01 	xor    BYTE PTR ds:0xc0028a2c,0x1
c000a459:	68 10 4a 02 c0       	push   0xc0024a10
c000a45e:	e8 e4 2b 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a463:	58                   	pop    eax
c000a464:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a469:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a46c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a472:	e8 5f 28 00 00       	call   c000ccd6 <VAS::scanForEviction()>
c000a477:	83 c4 10             	add    esp,0x10
c000a47a:	85 c0                	test   eax,eax
c000a47c:	75 62                	jne    c000a4e0 <Phys::allocatePage()+0xce>
c000a47e:	83 ec 0c             	sub    esp,0xc
c000a481:	68 34 4a 02 c0       	push   0xc0024a34
c000a486:	e8 9e ac 00 00       	call   c0015129 <Krnl::panic(char const*)>
c000a48b:	83 c4 10             	add    esp,0x10
c000a48e:	8b 1d 08 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a08
c000a494:	53                   	push   ebx
c000a495:	e8 d9 fe ff ff       	call   c000a373 <Phys::getPageState(unsigned long)>
c000a49a:	5a                   	pop    edx
c000a49b:	84 c0                	test   al,al
c000a49d:	75 97                	jne    c000a436 <Phys::allocatePage()+0x24>
c000a49f:	6a 01                	push   0x1
c000a4a1:	53                   	push   ebx
c000a4a2:	e8 9a fe ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a4a7:	5a                   	pop    edx
c000a4a8:	a1 14 8a 02 c0       	mov    eax,ds:0xc0028a14
c000a4ad:	59                   	pop    ecx
c000a4ae:	40                   	inc    eax
c000a4af:	8b 15 08 8a 02 c0    	mov    edx,DWORD PTR ds:0xc0028a08
c000a4b5:	a3 14 8a 02 c0       	mov    ds:0xc0028a14,eax
c000a4ba:	c1 e2 0c             	shl    edx,0xc
c000a4bd:	52                   	push   edx
c000a4be:	ff 35 18 8a 02 c0    	push   DWORD PTR ds:0xc0028a18
c000a4c4:	50                   	push   eax
c000a4c5:	68 85 49 02 c0       	push   0xc0024985
c000a4ca:	e8 78 2b 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a4cf:	a1 08 8a 02 c0       	mov    eax,ds:0xc0028a08
c000a4d4:	83 c4 10             	add    esp,0x10
c000a4d7:	c1 e0 0c             	shl    eax,0xc
c000a4da:	83 c4 14             	add    esp,0x14
c000a4dd:	5b                   	pop    ebx
c000a4de:	5e                   	pop    esi
c000a4df:	c3                   	ret    
c000a4e0:	83 ec 08             	sub    esp,0x8
c000a4e3:	89 c2                	mov    edx,eax
c000a4e5:	6a 01                	push   0x1
c000a4e7:	c1 ea 0c             	shr    edx,0xc
c000a4ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a4ee:	52                   	push   edx
c000a4ef:	e8 4d fe ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a4f4:	83 c4 10             	add    esp,0x10
c000a4f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a4fb:	eb dd                	jmp    c000a4da <Phys::allocatePage()+0xc8>

c000a4fd <Phys::allocateContiguousPages(int)>:
c000a4fd:	57                   	push   edi
c000a4fe:	56                   	push   esi
c000a4ff:	53                   	push   ebx
c000a500:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a504:	fa                   	cli    
c000a505:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c000a50b:	31 db                	xor    ebx,ebx
c000a50d:	85 db                	test   ebx,ebx
c000a50f:	75 11                	jne    c000a522 <Phys::allocateContiguousPages(int)+0x25>
c000a511:	e8 fc fe ff ff       	call   c000a412 <Phys::allocatePage()>
c000a516:	83 fe 01             	cmp    esi,0x1
c000a519:	89 c7                	mov    edi,eax
c000a51b:	74 21                	je     c000a53e <Phys::allocateContiguousPages(int)+0x41>
c000a51d:	bb 01 00 00 00       	mov    ebx,0x1
c000a522:	e8 eb fe ff ff       	call   c000a412 <Phys::allocatePage()>
c000a527:	89 da                	mov    edx,ebx
c000a529:	c1 e2 0c             	shl    edx,0xc
c000a52c:	01 fa                	add    edx,edi
c000a52e:	39 c2                	cmp    edx,eax
c000a530:	74 20                	je     c000a552 <Phys::allocateContiguousPages(int)+0x55>
c000a532:	bb 01 00 00 00       	mov    ebx,0x1
c000a537:	89 c7                	mov    edi,eax
c000a539:	83 fe 01             	cmp    esi,0x1
c000a53c:	75 e4                	jne    c000a522 <Phys::allocateContiguousPages(int)+0x25>
c000a53e:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c000a543:	48                   	dec    eax
c000a544:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c000a549:	75 01                	jne    c000a54c <Phys::allocateContiguousPages(int)+0x4f>
c000a54b:	fb                   	sti    
c000a54c:	89 f8                	mov    eax,edi
c000a54e:	5b                   	pop    ebx
c000a54f:	5e                   	pop    esi
c000a550:	5f                   	pop    edi
c000a551:	c3                   	ret    
c000a552:	43                   	inc    ebx
c000a553:	39 f3                	cmp    ebx,esi
c000a555:	75 b6                	jne    c000a50d <Phys::allocateContiguousPages(int)+0x10>
c000a557:	eb e5                	jmp    c000a53e <Phys::allocateContiguousPages(int)+0x41>

c000a559 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a559:	56                   	push   esi
c000a55a:	53                   	push   ebx
c000a55b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a55f:	39 1d 0c 8a 02 c0    	cmp    DWORD PTR ds:0xc0028a0c,ebx
c000a565:	73 06                	jae    c000a56d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a567:	89 1d 0c 8a 02 c0    	mov    DWORD PTR ds:0xc0028a0c,ebx
c000a56d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a571:	c1 eb 0c             	shr    ebx,0xc
c000a574:	c1 e8 0c             	shr    eax,0xc
c000a577:	39 d8                	cmp    eax,ebx
c000a579:	73 13                	jae    c000a58e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a57b:	6a 00                	push   0x0
c000a57d:	8d 70 01             	lea    esi,[eax+0x1]
c000a580:	50                   	push   eax
c000a581:	e8 bb fd ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a586:	5a                   	pop    edx
c000a587:	89 f0                	mov    eax,esi
c000a589:	59                   	pop    ecx
c000a58a:	39 f3                	cmp    ebx,esi
c000a58c:	75 ed                	jne    c000a57b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a58e:	5b                   	pop    ebx
c000a58f:	5e                   	pop    esi
c000a590:	c3                   	ret    

c000a591 <Phys::physicalMemorySetup(unsigned int)>:
c000a591:	55                   	push   ebp
c000a592:	57                   	push   edi
c000a593:	56                   	push   esi
c000a594:	53                   	push   ebx
c000a595:	31 db                	xor    ebx,ebx
c000a597:	83 ec 40             	sub    esp,0x40
c000a59a:	6a 10                	push   0x10
c000a59c:	6a 00                	push   0x0
c000a59e:	68 1c 8a 02 c0       	push   0xc0028a1c
c000a5a3:	e8 dc 60 ff ff       	call   c0000684 <memset>
c000a5a8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a5ac:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a5b1:	05 00 10 00 00       	add    eax,0x1000
c000a5b6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5ba:	5a                   	pop    edx
c000a5bb:	59                   	pop    ecx
c000a5bc:	50                   	push   eax
c000a5bd:	68 a3 49 02 c0       	push   0xc00249a3
c000a5c2:	e8 80 2a 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a5c7:	83 c4 10             	add    esp,0x10
c000a5ca:	83 ec 08             	sub    esp,0x8
c000a5cd:	6a 01                	push   0x1
c000a5cf:	53                   	push   ebx
c000a5d0:	43                   	inc    ebx
c000a5d1:	e8 6b fd ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a5d6:	83 c4 10             	add    esp,0x10
c000a5d9:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a5df:	75 e9                	jne    c000a5ca <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a5e1:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a5e8:	66 85 c0             	test   ax,ax
c000a5eb:	0f 84 8e 01 00 00    	je     c000a77f <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a5f1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a5f5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a5fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a601:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a606:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a60a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a612:	eb 15                	jmp    c000a629 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a614:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a618:	83 c3 18             	add    ebx,0x18
c000a61b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a61f:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a623:	0f 84 66 01 00 00    	je     c000a78f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a629:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a62c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a62f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a632:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a636:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a63a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a63c:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a63f:	01 f0                	add    eax,esi
c000a641:	55                   	push   ebp
c000a642:	11 fa                	adc    edx,edi
c000a644:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a648:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a64c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a650:	56                   	push   esi
c000a651:	68 64 4a 02 c0       	push   0xc0024a64
c000a656:	e8 ec 29 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a65b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a65f:	83 c4 10             	add    esp,0x10
c000a662:	09 f8                	or     eax,edi
c000a664:	0f 85 25 01 00 00    	jne    c000a78f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a66a:	4d                   	dec    ebp
c000a66b:	75 a7                	jne    c000a614 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a66d:	ba 00 00 08 00       	mov    edx,0x80000
c000a672:	89 c1                	mov    ecx,eax
c000a674:	39 f2                	cmp    edx,esi
c000a676:	19 f9                	sbb    ecx,edi
c000a678:	0f 82 a7 00 00 00    	jb     c000a725 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a67e:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a682:	89 c1                	mov    ecx,eax
c000a684:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a688:	0f 83 97 00 00 00    	jae    c000a725 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a68e:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a693:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a697:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a69b:	39 fa                	cmp    edx,edi
c000a69d:	19 e8                	sbb    eax,ebp
c000a69f:	0f 82 a5 01 00 00    	jb     c000a84a <Phys::physicalMemorySetup(unsigned int)+0x2b9>
c000a6a5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a6a9:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a6ad:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a6b3:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a6b8:	83 d5 ff             	adc    ebp,0xffffffff
c000a6bb:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a6bf:	31 c0                	xor    eax,eax
c000a6c1:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a6c5:	39 fa                	cmp    edx,edi
c000a6c7:	89 c1                	mov    ecx,eax
c000a6c9:	19 e9                	sbb    ecx,ebp
c000a6cb:	0f 83 43 ff ff ff    	jae    c000a614 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a6d1:	be 00 00 08 00       	mov    esi,0x80000
c000a6d6:	57                   	push   edi
c000a6d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a6db:	57                   	push   edi
c000a6dc:	56                   	push   esi
c000a6dd:	68 88 4a 02 c0       	push   0xc0024a88
c000a6e2:	e8 60 29 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a6e7:	5d                   	pop    ebp
c000a6e8:	58                   	pop    eax
c000a6e9:	57                   	push   edi
c000a6ea:	56                   	push   esi
c000a6eb:	e8 69 fe ff ff       	call   c000a559 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a6f0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a6f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a6f8:	83 c4 0c             	add    esp,0xc
c000a6fb:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a6ff:	03 05 18 8a 02 c0    	add    eax,DWORD PTR ds:0xc0028a18
c000a705:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a70c:	a3 18 8a 02 c0       	mov    ds:0xc0028a18,eax
c000a711:	52                   	push   edx
c000a712:	50                   	push   eax
c000a713:	68 c9 49 02 c0       	push   0xc00249c9
c000a718:	e8 2a 29 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a71d:	83 c4 10             	add    esp,0x10
c000a720:	e9 ef fe ff ff       	jmp    c000a614 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a725:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a729:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a72d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a731:	39 ea                	cmp    edx,ebp
c000a733:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a737:	0f 82 d7 fe ff ff    	jb     c000a614 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a73d:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a742:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a746:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a74a:	0f 83 c4 fe ff ff    	jae    c000a614 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a750:	39 ee                	cmp    esi,ebp
c000a752:	89 f8                	mov    eax,edi
c000a754:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a758:	0f 83 78 ff ff ff    	jae    c000a6d6 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a75e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a762:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a766:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a76a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a76e:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a772:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a776:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a77a:	e9 57 ff ff ff       	jmp    c000a6d6 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a77f:	83 ec 0c             	sub    esp,0xc
c000a782:	68 bb 49 02 c0       	push   0xc00249bb
c000a787:	e8 9d a9 00 00       	call   c0015129 <Krnl::panic(char const*)>
c000a78c:	83 c4 10             	add    esp,0x10
c000a78f:	83 ec 08             	sub    esp,0x8
c000a792:	6a 00                	push   0x0
c000a794:	6a 05                	push   0x5
c000a796:	e8 a6 fb ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a79b:	58                   	pop    eax
c000a79c:	5a                   	pop    edx
c000a79d:	6a 00                	push   0x0
c000a79f:	6a 06                	push   0x6
c000a7a1:	e8 9b fb ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a7a6:	59                   	pop    ecx
c000a7a7:	5b                   	pop    ebx
c000a7a8:	bb 60 00 00 00       	mov    ebx,0x60
c000a7ad:	6a 00                	push   0x0
c000a7af:	6a 07                	push   0x7
c000a7b1:	e8 8b fb ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a7b6:	83 05 18 8a 02 c0 03 	add    DWORD PTR ds:0xc0028a18,0x3
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	83 ec 08             	sub    esp,0x8
c000a7c3:	6a 00                	push   0x0
c000a7c5:	53                   	push   ebx
c000a7c6:	43                   	inc    ebx
c000a7c7:	e8 75 fb ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a7cc:	83 c4 10             	add    esp,0x10
c000a7cf:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a7d5:	75 e9                	jne    c000a7c0 <Phys::physicalMemorySetup(unsigned int)+0x22f>
c000a7d7:	a1 18 8a 02 c0       	mov    eax,ds:0xc0028a18
c000a7dc:	bb 40 01 00 00       	mov    ebx,0x140
c000a7e1:	83 c0 20             	add    eax,0x20
c000a7e4:	a3 18 8a 02 c0       	mov    ds:0xc0028a18,eax
c000a7e9:	eb 22                	jmp    c000a80d <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000a7eb:	83 ec 08             	sub    esp,0x8
c000a7ee:	6a 00                	push   0x0
c000a7f0:	53                   	push   ebx
c000a7f1:	43                   	inc    ebx
c000a7f2:	e8 4a fb ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a7f7:	a1 18 8a 02 c0       	mov    eax,ds:0xc0028a18
c000a7fc:	83 c4 10             	add    esp,0x10
c000a7ff:	40                   	inc    eax
c000a800:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a806:	a3 18 8a 02 c0       	mov    ds:0xc0028a18,eax
c000a80b:	74 07                	je     c000a814 <Phys::physicalMemorySetup(unsigned int)+0x283>
c000a80d:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a812:	7e d7                	jle    c000a7eb <Phys::physicalMemorySetup(unsigned int)+0x25a>
c000a814:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a819:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a81e:	7f 22                	jg     c000a842 <Phys::physicalMemorySetup(unsigned int)+0x2b1>
c000a820:	83 ec 08             	sub    esp,0x8
c000a823:	6a 00                	push   0x0
c000a825:	53                   	push   ebx
c000a826:	43                   	inc    ebx
c000a827:	e8 15 fb ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a82c:	a1 18 8a 02 c0       	mov    eax,ds:0xc0028a18
c000a831:	83 c4 10             	add    esp,0x10
c000a834:	40                   	inc    eax
c000a835:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a83b:	a3 18 8a 02 c0       	mov    ds:0xc0028a18,eax
c000a840:	75 d7                	jne    c000a819 <Phys::physicalMemorySetup(unsigned int)+0x288>
c000a842:	83 c4 3c             	add    esp,0x3c
c000a845:	5b                   	pop    ebx
c000a846:	5e                   	pop    esi
c000a847:	5f                   	pop    edi
c000a848:	5d                   	pop    ebp
c000a849:	c3                   	ret    
c000a84a:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a852:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a85a:	e9 46 fe ff ff       	jmp    c000a6a5 <Phys::physicalMemorySetup(unsigned int)+0x114>
c000a85f:	90                   	nop

c000a860 <Pipe::isAtty()>:
c000a860:	31 c0                	xor    eax,eax
c000a862:	c3                   	ret    
c000a863:	90                   	nop

c000a864 <Pipe::~Pipe()>:
c000a864:	83 ec 0c             	sub    esp,0xc
c000a867:	ba f4 4a 02 c0       	mov    edx,0xc0024af4
c000a86c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a870:	89 10                	mov    DWORD PTR [eax],edx
c000a872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a876:	83 ec 0c             	sub    esp,0xc
c000a879:	50                   	push   eax
c000a87a:	e8 41 12 00 00       	call   c000bac0 <UnixFile::~UnixFile()>
c000a87f:	83 c4 10             	add    esp,0x10
c000a882:	90                   	nop
c000a883:	83 c4 0c             	add    esp,0xc
c000a886:	c3                   	ret    
c000a887:	90                   	nop

c000a888 <Pipe::~Pipe()>:
c000a888:	83 ec 0c             	sub    esp,0xc
c000a88b:	83 ec 0c             	sub    esp,0xc
c000a88e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a892:	e8 cd ff ff ff       	call   c000a864 <Pipe::~Pipe()>
c000a897:	83 c4 10             	add    esp,0x10
c000a89a:	83 ec 08             	sub    esp,0x8
c000a89d:	6a 20                	push   0x20
c000a89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8a3:	e8 be 26 00 00       	call   c000cf66 <operator delete(void*, unsigned long)>
c000a8a8:	83 c4 10             	add    esp,0x10
c000a8ab:	83 c4 0c             	add    esp,0xc
c000a8ae:	c3                   	ret    
c000a8af:	90                   	nop

c000a8b0 <Pipe::read(unsigned long long, void*, int*)>:
c000a8b0:	55                   	push   ebp
c000a8b1:	57                   	push   edi
c000a8b2:	56                   	push   esi
c000a8b3:	53                   	push   ebx
c000a8b4:	83 ec 1c             	sub    esp,0x1c
c000a8b7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a8bb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a8bf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a8c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a8c6:	89 c8                	mov    eax,ecx
c000a8c8:	99                   	cdq    
c000a8c9:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a8cd:	74 24                	je     c000a8f3 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a8cf:	39 f9                	cmp    ecx,edi
c000a8d1:	89 d1                	mov    ecx,edx
c000a8d3:	19 f1                	sbb    ecx,esi
c000a8d5:	73 1c                	jae    c000a8f3 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a8d7:	fa                   	cli    
c000a8d8:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c000a8de:	e8 51 e4 00 00       	call   c0018d34 <schedule()>
c000a8e3:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c000a8e8:	48                   	dec    eax
c000a8e9:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c000a8ee:	75 d3                	jne    c000a8c3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a8f0:	fb                   	sti    
c000a8f1:	eb d0                	jmp    c000a8c3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a8f3:	39 f8                	cmp    eax,edi
c000a8f5:	89 d1                	mov    ecx,edx
c000a8f7:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a8fa:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a8fe:	19 f1                	sbb    ecx,esi
c000a900:	73 07                	jae    c000a909 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a902:	89 04 24             	mov    DWORD PTR [esp],eax
c000a905:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a909:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a90c:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a90f:	29 f7                	sub    edi,esi
c000a911:	89 f8                	mov    eax,edi
c000a913:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a917:	99                   	cdq    
c000a918:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a91b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a91f:	19 d0                	sbb    eax,edx
c000a921:	73 07                	jae    c000a92a <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a923:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a926:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a92a:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a92d:	89 ea                	mov    edx,ebp
c000a92f:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a933:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a938:	74 0d                	je     c000a947 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a93a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a93d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a941:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a945:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a947:	85 d2                	test   edx,edx
c000a949:	74 11                	je     c000a95c <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a94b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a94f:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a952:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a956:	89 d1                	mov    ecx,edx
c000a958:	89 c7                	mov    edi,eax
c000a95a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a95c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a95f:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a962:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a965:	99                   	cdq    
c000a966:	89 f7                	mov    edi,esi
c000a968:	03 04 24             	add    eax,DWORD PTR [esp]
c000a96b:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a96f:	c1 ff 1f             	sar    edi,0x1f
c000a972:	57                   	push   edi
c000a973:	56                   	push   esi
c000a974:	52                   	push   edx
c000a975:	50                   	push   eax
c000a976:	e8 a5 85 01 00       	call   c0022f20 <__umoddi3>
c000a97b:	83 c4 10             	add    esp,0x10
c000a97e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a981:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a986:	75 10                	jne    c000a998 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a988:	83 ec 0c             	sub    esp,0xc
c000a98b:	68 b1 4a 02 c0       	push   0xc0024ab1
c000a990:	e8 94 a7 00 00       	call   c0015129 <Krnl::panic(char const*)>
c000a995:	83 c4 10             	add    esp,0x10
c000a998:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a99c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a99f:	89 10                	mov    DWORD PTR [eax],edx
c000a9a1:	83 c4 1c             	add    esp,0x1c
c000a9a4:	31 c0                	xor    eax,eax
c000a9a6:	5b                   	pop    ebx
c000a9a7:	5e                   	pop    esi
c000a9a8:	5f                   	pop    edi
c000a9a9:	5d                   	pop    ebp
c000a9aa:	c3                   	ret    
c000a9ab:	90                   	nop

c000a9ac <Pipe::write(unsigned long long, void*, int*)>:
c000a9ac:	55                   	push   ebp
c000a9ad:	57                   	push   edi
c000a9ae:	56                   	push   esi
c000a9af:	53                   	push   ebx
c000a9b0:	83 ec 1c             	sub    esp,0x1c
c000a9b3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a9b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a9bb:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a9be:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a9c2:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9c9:	89 d8                	mov    eax,ebx
c000a9cb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a9ce:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a9d2:	89 d6                	mov    esi,edx
c000a9d4:	89 d7                	mov    edi,edx
c000a9d6:	c1 ff 1f             	sar    edi,0x1f
c000a9d9:	03 34 24             	add    esi,DWORD PTR [esp]
c000a9dc:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a9e0:	c1 f8 1f             	sar    eax,0x1f
c000a9e3:	39 f3                	cmp    ebx,esi
c000a9e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a9ed:	19 f8                	sbb    eax,edi
c000a9ef:	b8 01 00 00 00       	mov    eax,0x1
c000a9f4:	72 6e                	jb     c000aa64 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a9f6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a9f9:	01 d0                	add    eax,edx
c000a9fb:	99                   	cdq    
c000a9fc:	f7 fb                	idiv   ebx
c000a9fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa02:	29 d3                	sub    ebx,edx
c000aa04:	89 d7                	mov    edi,edx
c000aa06:	89 de                	mov    esi,ebx
c000aa08:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000aa0b:	c1 fb 1f             	sar    ebx,0x1f
c000aa0e:	39 f2                	cmp    edx,esi
c000aa10:	19 d8                	sbb    eax,ebx
c000aa12:	b8 00 00 00 00       	mov    eax,0x0
c000aa17:	72 04                	jb     c000aa1d <Pipe::write(unsigned long long, void*, int*)+0x71>
c000aa19:	89 d0                	mov    eax,edx
c000aa1b:	29 f0                	sub    eax,esi
c000aa1d:	89 d3                	mov    ebx,edx
c000aa1f:	29 c3                	sub    ebx,eax
c000aa21:	74 0b                	je     c000aa2e <Pipe::write(unsigned long long, void*, int*)+0x82>
c000aa23:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000aa26:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000aa2a:	89 d9                	mov    ecx,ebx
c000aa2c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aa2e:	85 c0                	test   eax,eax
c000aa30:	74 0d                	je     c000aa3f <Pipe::write(unsigned long long, void*, int*)+0x93>
c000aa32:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000aa36:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000aa39:	89 de                	mov    esi,ebx
c000aa3b:	89 c1                	mov    ecx,eax
c000aa3d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aa3f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000aa42:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000aa47:	75 10                	jne    c000aa59 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000aa49:	83 ec 0c             	sub    esp,0xc
c000aa4c:	68 cd 4a 02 c0       	push   0xc0024acd
c000aa51:	e8 d3 a6 00 00       	call   c0015129 <Krnl::panic(char const*)>
c000aa56:	83 c4 10             	add    esp,0x10
c000aa59:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000aa5d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000aa60:	89 08                	mov    DWORD PTR [eax],ecx
c000aa62:	31 c0                	xor    eax,eax
c000aa64:	83 c4 1c             	add    esp,0x1c
c000aa67:	5b                   	pop    ebx
c000aa68:	5e                   	pop    esi
c000aa69:	5f                   	pop    edi
c000aa6a:	5d                   	pop    ebp
c000aa6b:	c3                   	ret    

c000aa6c <Pipe::Pipe(int)>:
c000aa6c:	83 ec 0c             	sub    esp,0xc
c000aa6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa73:	83 ec 08             	sub    esp,0x8
c000aa76:	6a 00                	push   0x0
c000aa78:	50                   	push   eax
c000aa79:	e8 60 0e 00 00       	call   c000b8de <UnixFile::UnixFile(int)>
c000aa7e:	83 c4 10             	add    esp,0x10
c000aa81:	ba f4 4a 02 c0       	mov    edx,0xc0024af4
c000aa86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa8a:	89 10                	mov    DWORD PTR [eax],edx
c000aa8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000aa94:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000aa97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa9b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000aaa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaa6:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000aaad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aab1:	83 ec 0c             	sub    esp,0xc
c000aab4:	50                   	push   eax
c000aab5:	e8 a1 f2 ff ff       	call   c0009d5b <malloc>
c000aaba:	83 c4 10             	add    esp,0x10
c000aabd:	89 c2                	mov    edx,eax
c000aabf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aac3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000aac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaca:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000aace:	90                   	nop
c000aacf:	83 c4 0c             	add    esp,0xc
c000aad2:	c3                   	ret    
c000aad3:	90                   	nop

c000aad4 <VgaText::isAtty()>:
c000aad4:	b0 01                	mov    al,0x1
c000aad6:	c3                   	ret    
c000aad7:	90                   	nop

c000aad8 <VgaText::~VgaText()>:
c000aad8:	83 ec 0c             	sub    esp,0xc
c000aadb:	ba 7c 4b 02 c0       	mov    edx,0xc0024b7c
c000aae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae4:	89 10                	mov    DWORD PTR [eax],edx
c000aae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaea:	83 ec 0c             	sub    esp,0xc
c000aaed:	50                   	push   eax
c000aaee:	e8 cd 0f 00 00       	call   c000bac0 <UnixFile::~UnixFile()>
c000aaf3:	83 c4 10             	add    esp,0x10
c000aaf6:	90                   	nop
c000aaf7:	83 c4 0c             	add    esp,0xc
c000aafa:	c3                   	ret    
c000aafb:	90                   	nop

c000aafc <VgaText::~VgaText()>:
c000aafc:	83 ec 0c             	sub    esp,0xc
c000aaff:	83 ec 0c             	sub    esp,0xc
c000ab02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab06:	e8 cd ff ff ff       	call   c000aad8 <VgaText::~VgaText()>
c000ab0b:	83 c4 10             	add    esp,0x10
c000ab0e:	83 ec 08             	sub    esp,0x8
c000ab11:	68 b4 01 00 00       	push   0x1b4
c000ab16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab1a:	e8 47 24 00 00       	call   c000cf66 <operator delete(void*, unsigned long)>
c000ab1f:	83 c4 10             	add    esp,0x10
c000ab22:	83 c4 0c             	add    esp,0xc
c000ab25:	c3                   	ret    

c000ab26 <VgaText::read(unsigned long long, void*, int*)>:
c000ab26:	83 ec 10             	sub    esp,0x10
c000ab29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab2d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab35:	e8 c3 59 00 00       	call   c00104fd <readKeyboard(VgaText*, char*, unsigned long)>
c000ab3a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ab3e:	89 02                	mov    DWORD PTR [edx],eax
c000ab40:	31 c0                	xor    eax,eax
c000ab42:	83 c4 1c             	add    esp,0x1c
c000ab45:	c3                   	ret    

c000ab46 <setTerminalScrollLock(bool)>:
c000ab46:	c3                   	ret    

c000ab47 <addToTerminalCycle(VgaText*)>:
c000ab47:	8b 15 60 8a 02 c0    	mov    edx,DWORD PTR ds:0xc0028a60
c000ab4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ab51:	85 d2                	test   edx,edx
c000ab53:	75 09                	jne    c000ab5e <addToTerminalCycle(VgaText*)+0x17>
c000ab55:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000ab58:	a3 60 8a 02 c0       	mov    ds:0xc0028a60,eax
c000ab5d:	c3                   	ret    
c000ab5e:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000ab61:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000ab64:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000ab67:	c3                   	ret    

c000ab68 <installVgaTextImplementation()>:
c000ab68:	83 ec 10             	sub    esp,0x10
c000ab6b:	6a 20                	push   0x20
c000ab6d:	6a 00                	push   0x0
c000ab6f:	68 40 8a 02 c0       	push   0xc0028a40
c000ab74:	e8 0b 5b ff ff       	call   c0000684 <memset>
c000ab79:	83 c4 1c             	add    esp,0x1c
c000ab7c:	c3                   	ret    

c000ab7d <scrollTerminalScrollLock(int)>:
c000ab7d:	c3                   	ret    

c000ab7e <VgaText::updateTitle()>:
c000ab7e:	53                   	push   ebx
c000ab7f:	31 c0                	xor    eax,eax
c000ab81:	83 ec 58             	sub    esp,0x58
c000ab84:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000ab88:	89 e1                	mov    ecx,esp
c000ab8a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000ab8e:	40                   	inc    eax
c000ab8f:	83 f8 50             	cmp    eax,0x50
c000ab92:	75 f6                	jne    c000ab8a <VgaText::updateTitle()+0xc>
c000ab94:	31 c0                	xor    eax,eax
c000ab96:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000ab9d:	84 db                	test   bl,bl
c000ab9f:	74 06                	je     c000aba7 <VgaText::updateTitle()+0x29>
c000aba1:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000aba4:	40                   	inc    eax
c000aba5:	eb ef                	jmp    c000ab96 <VgaText::updateTitle()+0x18>
c000aba7:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000abaa:	85 c0                	test   eax,eax
c000abac:	74 09                	je     c000abb7 <VgaText::updateTitle()+0x39>
c000abae:	53                   	push   ebx
c000abaf:	53                   	push   ebx
c000abb0:	51                   	push   ecx
c000abb1:	52                   	push   edx
c000abb2:	ff d0                	call   eax
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	83 c4 58             	add    esp,0x58
c000abba:	5b                   	pop    ebx
c000abbb:	c3                   	ret    

c000abbc <VgaText::load()>:
c000abbc:	53                   	push   ebx
c000abbd:	31 c0                	xor    eax,eax
c000abbf:	83 ec 58             	sub    esp,0x58
c000abc2:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000abc6:	89 e2                	mov    edx,esp
c000abc8:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000abcc:	40                   	inc    eax
c000abcd:	83 f8 50             	cmp    eax,0x50
c000abd0:	75 f6                	jne    c000abc8 <VgaText::load()+0xc>
c000abd2:	31 c0                	xor    eax,eax
c000abd4:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000abdb:	84 c9                	test   cl,cl
c000abdd:	74 06                	je     c000abe5 <VgaText::load()+0x29>
c000abdf:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000abe2:	40                   	inc    eax
c000abe3:	eb ef                	jmp    c000abd4 <VgaText::load()+0x18>
c000abe5:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000abe8:	85 c0                	test   eax,eax
c000abea:	74 09                	je     c000abf5 <VgaText::load()+0x39>
c000abec:	51                   	push   ecx
c000abed:	51                   	push   ecx
c000abee:	52                   	push   edx
c000abef:	53                   	push   ebx
c000abf0:	ff d0                	call   eax
c000abf2:	83 c4 10             	add    esp,0x10
c000abf5:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000abf8:	85 c0                	test   eax,eax
c000abfa:	74 09                	je     c000ac05 <VgaText::load()+0x49>
c000abfc:	83 ec 0c             	sub    esp,0xc
c000abff:	53                   	push   ebx
c000ac00:	ff d0                	call   eax
c000ac02:	83 c4 10             	add    esp,0x10
c000ac05:	83 c4 58             	add    esp,0x58
c000ac08:	5b                   	pop    ebx
c000ac09:	c3                   	ret    

c000ac0a <VgaText::updateCursor()>:
c000ac0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac0e:	39 05 64 8a 02 c0    	cmp    DWORD PTR ds:0xc0028a64,eax
c000ac14:	75 09                	jne    c000ac1f <VgaText::updateCursor()+0x15>
c000ac16:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000ac19:	85 c0                	test   eax,eax
c000ac1b:	74 02                	je     c000ac1f <VgaText::updateCursor()+0x15>
c000ac1d:	ff e0                	jmp    eax
c000ac1f:	c3                   	ret    

c000ac20 <VgaText::doANSI_SGR(int)>:
c000ac20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac28:	85 d2                	test   edx,edx
c000ac2a:	75 0b                	jne    c000ac37 <VgaText::doANSI_SGR(int)+0x17>
c000ac2c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000ac2f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ac32:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ac35:	eb 59                	jmp    c000ac90 <VgaText::doANSI_SGR(int)+0x70>
c000ac37:	83 fa 07             	cmp    edx,0x7
c000ac3a:	75 0b                	jne    c000ac47 <VgaText::doANSI_SGR(int)+0x27>
c000ac3c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000ac3f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000ac42:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000ac45:	eb 49                	jmp    c000ac90 <VgaText::doANSI_SGR(int)+0x70>
c000ac47:	83 fa 1b             	cmp    edx,0x1b
c000ac4a:	74 e0                	je     c000ac2c <VgaText::doANSI_SGR(int)+0xc>
c000ac4c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000ac4f:	83 f9 07             	cmp    ecx,0x7
c000ac52:	77 09                	ja     c000ac5d <VgaText::doANSI_SGR(int)+0x3d>
c000ac54:	8b 14 8d e0 7d 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8220]
c000ac5b:	eb 20                	jmp    c000ac7d <VgaText::doANSI_SGR(int)+0x5d>
c000ac5d:	8d 4a d8             	lea    ecx,[edx-0x28]
c000ac60:	83 f9 07             	cmp    ecx,0x7
c000ac63:	77 09                	ja     c000ac6e <VgaText::doANSI_SGR(int)+0x4e>
c000ac65:	8b 14 8d e0 7d 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8220]
c000ac6c:	eb 22                	jmp    c000ac90 <VgaText::doANSI_SGR(int)+0x70>
c000ac6e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000ac71:	83 f9 07             	cmp    ecx,0x7
c000ac74:	77 0b                	ja     c000ac81 <VgaText::doANSI_SGR(int)+0x61>
c000ac76:	8b 14 95 98 7c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8368]
c000ac7d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ac80:	c3                   	ret    
c000ac81:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000ac84:	83 f9 07             	cmp    ecx,0x7
c000ac87:	77 0a                	ja     c000ac93 <VgaText::doANSI_SGR(int)+0x73>
c000ac89:	8b 14 95 70 7c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8390]
c000ac90:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000ac93:	c3                   	ret    

c000ac94 <VgaText::setDefaultBgColour(VgaColour)>:
c000ac94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac9c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000ac9f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000aca2:	c3                   	ret    
c000aca3:	90                   	nop

c000aca4 <VgaText::setDefaultFgColour(VgaColour)>:
c000aca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aca8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000acac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000acaf:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000acb2:	c3                   	ret    
c000acb3:	90                   	nop

c000acb4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000acb4:	53                   	push   ebx
c000acb5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000acb9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000acbd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000acc1:	51                   	push   ecx
c000acc2:	e8 cd ff ff ff       	call   c000ac94 <VgaText::setDefaultBgColour(VgaColour)>
c000acc7:	58                   	pop    eax
c000acc8:	5a                   	pop    edx
c000acc9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000accd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000acd1:	5b                   	pop    ebx
c000acd2:	eb d0                	jmp    c000aca4 <VgaText::setDefaultFgColour(VgaColour)>

c000acd4 <VgaText::setTitleTextColour(VgaColour)>:
c000acd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000acdc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000acdf:	e9 9a fe ff ff       	jmp    c000ab7e <VgaText::updateTitle()>

c000ace4 <VgaText::setTitleColour(VgaColour)>:
c000ace4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ace8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000acec:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000acef:	e9 8a fe ff ff       	jmp    c000ab7e <VgaText::updateTitle()>

c000acf4 <VgaText::setTitle(char*)>:
c000acf4:	53                   	push   ebx
c000acf5:	83 ec 10             	sub    esp,0x10
c000acf8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000acfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad00:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000ad06:	50                   	push   eax
c000ad07:	e8 34 5a ff ff       	call   c0000740 <strcpy>
c000ad0c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000ad10:	83 c4 18             	add    esp,0x18
c000ad13:	5b                   	pop    ebx
c000ad14:	e9 65 fe ff ff       	jmp    c000ab7e <VgaText::updateTitle()>
c000ad19:	90                   	nop

c000ad1a <VgaText::combineColours(unsigned char, unsigned char)>:
c000ad1a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000ad1e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000ad23:	83 e0 0f             	and    eax,0xf
c000ad26:	c1 e2 04             	shl    edx,0x4
c000ad29:	09 d0                	or     eax,edx
c000ad2b:	c3                   	ret    

c000ad2c <VgaText::scrollScreen()>:
c000ad2c:	55                   	push   ebp
c000ad2d:	b9 01 00 00 00       	mov    ecx,0x1
c000ad32:	57                   	push   edi
c000ad33:	56                   	push   esi
c000ad34:	53                   	push   ebx
c000ad35:	83 ec 0c             	sub    esp,0xc
c000ad38:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ad3c:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000ad42:	31 ff                	xor    edi,edi
c000ad44:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000ad47:	83 f9 17             	cmp    ecx,0x17
c000ad4a:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000ad4d:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000ad54:	75 27                	jne    c000ad7d <VgaText::scrollScreen()+0x51>
c000ad56:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000ad59:	01 f5                	add    ebp,esi
c000ad5b:	f7 c7 01 00 00 00    	test   edi,0x1
c000ad61:	74 16                	je     c000ad79 <VgaText::scrollScreen()+0x4d>
c000ad63:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000ad67:	50                   	push   eax
c000ad68:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000ad6c:	50                   	push   eax
c000ad6d:	e8 a8 ff ff ff       	call   c000ad1a <VgaText::combineColours(unsigned char, unsigned char)>
c000ad72:	5a                   	pop    edx
c000ad73:	5a                   	pop    edx
c000ad74:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000ad77:	eb 04                	jmp    c000ad7d <VgaText::scrollScreen()+0x51>
c000ad79:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000ad7d:	47                   	inc    edi
c000ad7e:	46                   	inc    esi
c000ad7f:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ad85:	75 bd                	jne    c000ad44 <VgaText::scrollScreen()+0x18>
c000ad87:	41                   	inc    ecx
c000ad88:	83 f9 18             	cmp    ecx,0x18
c000ad8b:	75 af                	jne    c000ad3c <VgaText::scrollScreen()+0x10>
c000ad8d:	39 1d 64 8a 02 c0    	cmp    DWORD PTR ds:0xc0028a64,ebx
c000ad93:	75 1b                	jne    c000adb0 <VgaText::scrollScreen()+0x84>
c000ad95:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ad99:	74 05                	je     c000ada0 <VgaText::scrollScreen()+0x74>
c000ad9b:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000ad9e:	eb 10                	jmp    c000adb0 <VgaText::scrollScreen()+0x84>
c000ada0:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000ada3:	85 c0                	test   eax,eax
c000ada5:	74 09                	je     c000adb0 <VgaText::scrollScreen()+0x84>
c000ada7:	83 ec 0c             	sub    esp,0xc
c000adaa:	53                   	push   ebx
c000adab:	ff d0                	call   eax
c000adad:	83 c4 10             	add    esp,0x10
c000adb0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000adb4:	83 c4 0c             	add    esp,0xc
c000adb7:	5b                   	pop    ebx
c000adb8:	5e                   	pop    esi
c000adb9:	5f                   	pop    edi
c000adba:	5d                   	pop    ebp
c000adbb:	e9 4a fe ff ff       	jmp    c000ac0a <VgaText::updateCursor()>

c000adc0 <VgaText::combineCharAndColour(char, unsigned char)>:
c000adc0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000adc5:	c1 e0 08             	shl    eax,0x8
c000adc8:	89 c2                	mov    edx,eax
c000adca:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000adcf:	09 d0                	or     eax,edx
c000add1:	c3                   	ret    

c000add2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000add2:	56                   	push   esi
c000add3:	53                   	push   ebx
c000add4:	51                   	push   ecx
c000add5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000add9:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000adde:	50                   	push   eax
c000addf:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ade4:	50                   	push   eax
c000ade5:	e8 30 ff ff ff       	call   c000ad1a <VgaText::combineColours(unsigned char, unsigned char)>
c000adea:	5b                   	pop    ebx
c000adeb:	0f b6 c0             	movzx  eax,al
c000adee:	5e                   	pop    esi
c000adef:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000adf4:	50                   	push   eax
c000adf5:	53                   	push   ebx
c000adf6:	e8 c5 ff ff ff       	call   c000adc0 <VgaText::combineCharAndColour(char, unsigned char)>
c000adfb:	5a                   	pop    edx
c000adfc:	5e                   	pop    esi
c000adfd:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000ae00:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ae06:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ae0a:	0f b7 d2             	movzx  edx,dx
c000ae0d:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000ae11:	39 0d 64 8a 02 c0    	cmp    DWORD PTR ds:0xc0028a64,ecx
c000ae17:	75 10                	jne    c000ae29 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000ae19:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000ae1c:	85 c0                	test   eax,eax
c000ae1e:	74 09                	je     c000ae29 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000ae20:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ae24:	5a                   	pop    edx
c000ae25:	5b                   	pop    ebx
c000ae26:	5e                   	pop    esi
c000ae27:	ff e0                	jmp    eax
c000ae29:	58                   	pop    eax
c000ae2a:	5b                   	pop    ebx
c000ae2b:	5e                   	pop    esi
c000ae2c:	c3                   	ret    
c000ae2d:	90                   	nop

c000ae2e <VgaText::getCursorX()>:
c000ae2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae32:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000ae35:	c3                   	ret    

c000ae36 <VgaText::getCursorY()>:
c000ae36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae3a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000ae3d:	c3                   	ret    

c000ae3e <VgaText::setCursor(int, int)>:
c000ae3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ae46:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000ae49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae4d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ae50:	e9 b5 fd ff ff       	jmp    c000ac0a <VgaText::updateCursor()>

c000ae55 <setActiveTerminal(VgaText*)>:
c000ae55:	53                   	push   ebx
c000ae56:	83 ec 08             	sub    esp,0x8
c000ae59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae5d:	85 db                	test   ebx,ebx
c000ae5f:	75 11                	jne    c000ae72 <setActiveTerminal(VgaText*)+0x1d>
c000ae61:	c7 44 24 10 08 4b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024b08
c000ae69:	83 c4 08             	add    esp,0x8
c000ae6c:	5b                   	pop    ebx
c000ae6d:	e9 b7 a2 00 00       	jmp    c0015129 <Krnl::panic(char const*)>
c000ae72:	a1 64 8a 02 c0       	mov    eax,ds:0xc0028a64
c000ae77:	85 c0                	test   eax,eax
c000ae79:	74 0c                	je     c000ae87 <setActiveTerminal(VgaText*)+0x32>
c000ae7b:	83 ec 0c             	sub    esp,0xc
c000ae7e:	50                   	push   eax
c000ae7f:	e8 86 fd ff ff       	call   c000ac0a <VgaText::updateCursor()>
c000ae84:	83 c4 10             	add    esp,0x10
c000ae87:	89 1d 64 8a 02 c0    	mov    DWORD PTR ds:0xc0028a64,ebx
c000ae8d:	51                   	push   ecx
c000ae8e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ae91:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ae94:	53                   	push   ebx
c000ae95:	e8 a4 ff ff ff       	call   c000ae3e <VgaText::setCursor(int, int)>
c000ae9a:	83 c4 10             	add    esp,0x10
c000ae9d:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000aea1:	75 07                	jne    c000aeaa <setActiveTerminal(VgaText*)+0x55>
c000aea3:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000aeaa:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aeae:	83 c4 08             	add    esp,0x8
c000aeb1:	5b                   	pop    ebx
c000aeb2:	e9 05 fd ff ff       	jmp    c000abbc <VgaText::load()>

c000aeb7 <doTerminalCycle()>:
c000aeb7:	83 ec 18             	sub    esp,0x18
c000aeba:	a1 60 8a 02 c0       	mov    eax,ds:0xc0028a60
c000aebf:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000aec2:	50                   	push   eax
c000aec3:	a3 60 8a 02 c0       	mov    ds:0xc0028a60,eax
c000aec8:	e8 88 ff ff ff       	call   c000ae55 <setActiveTerminal(VgaText*)>
c000aecd:	83 c4 1c             	add    esp,0x1c
c000aed0:	c3                   	ret    
c000aed1:	90                   	nop

c000aed2 <VgaText::setCursorX(int)>:
c000aed2:	83 ec 10             	sub    esp,0x10
c000aed5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aed9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000aedc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aee0:	50                   	push   eax
c000aee1:	e8 58 ff ff ff       	call   c000ae3e <VgaText::setCursor(int, int)>
c000aee6:	83 c4 1c             	add    esp,0x1c
c000aee9:	c3                   	ret    

c000aeea <VgaText::setCursorY(int)>:
c000aeea:	83 ec 10             	sub    esp,0x10
c000aeed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aef1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aef5:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000aef8:	50                   	push   eax
c000aef9:	e8 40 ff ff ff       	call   c000ae3e <VgaText::setCursor(int, int)>
c000aefe:	83 c4 1c             	add    esp,0x1c
c000af01:	c3                   	ret    

c000af02 <VgaText::incrementCursor(bool)>:
c000af02:	56                   	push   esi
c000af03:	53                   	push   ebx
c000af04:	51                   	push   ecx
c000af05:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af09:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000af0d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000af10:	40                   	inc    eax
c000af11:	83 f8 50             	cmp    eax,0x50
c000af14:	74 05                	je     c000af1b <VgaText::incrementCursor(bool)+0x19>
c000af16:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000af19:	eb 24                	jmp    c000af3f <VgaText::incrementCursor(bool)+0x3d>
c000af1b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000af1e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000af25:	8d 50 01             	lea    edx,[eax+0x1]
c000af28:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000af2b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000af2e:	75 0f                	jne    c000af3f <VgaText::incrementCursor(bool)+0x3d>
c000af30:	83 ec 0c             	sub    esp,0xc
c000af33:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000af36:	53                   	push   ebx
c000af37:	e8 f0 fd ff ff       	call   c000ad2c <VgaText::scrollScreen()>
c000af3c:	83 c4 10             	add    esp,0x10
c000af3f:	89 f0                	mov    eax,esi
c000af41:	84 c0                	test   al,al
c000af43:	74 0c                	je     c000af51 <VgaText::incrementCursor(bool)+0x4f>
c000af45:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000af49:	5a                   	pop    edx
c000af4a:	5b                   	pop    ebx
c000af4b:	5e                   	pop    esi
c000af4c:	e9 b9 fc ff ff       	jmp    c000ac0a <VgaText::updateCursor()>
c000af51:	58                   	pop    eax
c000af52:	5b                   	pop    ebx
c000af53:	5e                   	pop    esi
c000af54:	c3                   	ret    
c000af55:	90                   	nop

c000af56 <VgaText::decrementCursor(bool)>:
c000af56:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000af5a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000af5e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000af61:	85 c0                	test   eax,eax
c000af63:	74 04                	je     c000af69 <VgaText::decrementCursor(bool)+0x13>
c000af65:	48                   	dec    eax
c000af66:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000af69:	84 c9                	test   cl,cl
c000af6b:	74 09                	je     c000af76 <VgaText::decrementCursor(bool)+0x20>
c000af6d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000af71:	e9 94 fc ff ff       	jmp    c000ac0a <VgaText::updateCursor()>
c000af76:	c3                   	ret    
c000af77:	90                   	nop

c000af78 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000af78:	53                   	push   ebx
c000af79:	83 ec 08             	sub    esp,0x8
c000af7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af80:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af84:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af88:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af8c:	3c 07                	cmp    al,0x7
c000af8e:	75 2a                	jne    c000afba <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000af90:	a1 18 8b 02 c0       	mov    eax,ds:0xc0028b18
c000af95:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000af9d:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000afa5:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000afad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afb1:	83 c4 08             	add    esp,0x8
c000afb4:	5b                   	pop    ebx
c000afb5:	e9 d4 2f 00 00       	jmp    c000df8e <Buzzer::beep(int, int, bool)>
c000afba:	3c 0d                	cmp    al,0xd
c000afbc:	75 09                	jne    c000afc7 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000afbe:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000afc5:	eb 2c                	jmp    c000aff3 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000afc7:	3c 0a                	cmp    al,0xa
c000afc9:	75 31                	jne    c000affc <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000afcb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000afce:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000afd5:	8d 50 01             	lea    edx,[eax+0x1]
c000afd8:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000afdb:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000afde:	75 0f                	jne    c000afef <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000afe0:	83 ec 0c             	sub    esp,0xc
c000afe3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000afe6:	53                   	push   ebx
c000afe7:	e8 40 fd ff ff       	call   c000ad2c <VgaText::scrollScreen()>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aff3:	83 c4 08             	add    esp,0x8
c000aff6:	5b                   	pop    ebx
c000aff7:	e9 0e fc ff ff       	jmp    c000ac0a <VgaText::updateCursor()>
c000affc:	3c 08                	cmp    al,0x8
c000affe:	75 25                	jne    c000b025 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000b000:	50                   	push   eax
c000b001:	50                   	push   eax
c000b002:	6a 01                	push   0x1
c000b004:	53                   	push   ebx
c000b005:	e8 4c ff ff ff       	call   c000af56 <VgaText::decrementCursor(bool)>
c000b00a:	5a                   	pop    edx
c000b00b:	59                   	pop    ecx
c000b00c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b00f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b012:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b015:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b018:	6a 20                	push   0x20
c000b01a:	53                   	push   ebx
c000b01b:	e8 b2 fd ff ff       	call   c000add2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b020:	83 c4 28             	add    esp,0x28
c000b023:	5b                   	pop    ebx
c000b024:	c3                   	ret    
c000b025:	83 ec 08             	sub    esp,0x8
c000b028:	0f be c0             	movsx  eax,al
c000b02b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b02e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b031:	51                   	push   ecx
c000b032:	52                   	push   edx
c000b033:	50                   	push   eax
c000b034:	53                   	push   ebx
c000b035:	e8 98 fd ff ff       	call   c000add2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b03a:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000b03e:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000b046:	83 c4 28             	add    esp,0x28
c000b049:	5b                   	pop    ebx
c000b04a:	e9 b3 fe ff ff       	jmp    c000af02 <VgaText::incrementCursor(bool)>
c000b04f:	90                   	nop

c000b050 <VgaText::doUpdate()>:
c000b050:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b054:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000b057:	85 c0                	test   eax,eax
c000b059:	74 02                	je     c000b05d <VgaText::doUpdate()+0xd>
c000b05b:	ff e0                	jmp    eax
c000b05d:	c3                   	ret    

c000b05e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000b05e:	55                   	push   ebp
c000b05f:	31 ed                	xor    ebp,ebp
c000b061:	57                   	push   edi
c000b062:	56                   	push   esi
c000b063:	53                   	push   ebx
c000b064:	83 ec 1c             	sub    esp,0x1c
c000b067:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b06b:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000b070:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b077:	50                   	push   eax
c000b078:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000b07d:	50                   	push   eax
c000b07e:	e8 97 fc ff ff       	call   c000ad1a <VgaText::combineColours(unsigned char, unsigned char)>
c000b083:	59                   	pop    ecx
c000b084:	0f b6 c0             	movzx  eax,al
c000b087:	5e                   	pop    esi
c000b088:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b08d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b091:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b094:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b098:	0f b7 f6             	movzx  esi,si
c000b09b:	01 f6                	add    esi,esi
c000b09d:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b0a0:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b0a3:	84 c0                	test   al,al
c000b0a5:	0f 84 fd 00 00 00    	je     c000b1a8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000b0ab:	3c 0d                	cmp    al,0xd
c000b0ad:	75 0c                	jne    c000b0bb <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000b0af:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b0b6:	e9 e7 00 00 00       	jmp    c000b1a2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b0bb:	3c 0a                	cmp    al,0xa
c000b0bd:	75 47                	jne    c000b106 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000b0bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b0c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b0c9:	8d 48 01             	lea    ecx,[eax+0x1]
c000b0cc:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000b0cf:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000b0d2:	75 0f                	jne    c000b0e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000b0d4:	83 ec 0c             	sub    esp,0xc
c000b0d7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000b0da:	53                   	push   ebx
c000b0db:	e8 4c fc ff ff       	call   c000ad2c <VgaText::scrollScreen()>
c000b0e0:	83 c4 10             	add    esp,0x10
c000b0e3:	83 ec 0c             	sub    esp,0xc
c000b0e6:	31 ed                	xor    ebp,ebp
c000b0e8:	53                   	push   ebx
c000b0e9:	e8 1c fb ff ff       	call   c000ac0a <VgaText::updateCursor()>
c000b0ee:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b0f3:	83 c4 10             	add    esp,0x10
c000b0f6:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b0f9:	0f b7 f6             	movzx  esi,si
c000b0fc:	01 f6                	add    esi,esi
c000b0fe:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b101:	e9 9c 00 00 00       	jmp    c000b1a2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b106:	3c 08                	cmp    al,0x8
c000b108:	75 35                	jne    c000b13f <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000b10a:	56                   	push   esi
c000b10b:	56                   	push   esi
c000b10c:	6a 01                	push   0x1
c000b10e:	53                   	push   ebx
c000b10f:	e8 42 fe ff ff       	call   c000af56 <VgaText::decrementCursor(bool)>
c000b114:	58                   	pop    eax
c000b115:	5a                   	pop    edx
c000b116:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b119:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b11c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b11f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b122:	6a 20                	push   0x20
c000b124:	53                   	push   ebx
c000b125:	e8 a8 fc ff ff       	call   c000add2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b12a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b12f:	83 c4 20             	add    esp,0x20
c000b132:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b135:	0f b7 f6             	movzx  esi,si
c000b138:	01 f6                	add    esi,esi
c000b13a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b13d:	eb 63                	jmp    c000b1a2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b13f:	51                   	push   ecx
c000b140:	51                   	push   ecx
c000b141:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b145:	50                   	push   eax
c000b146:	e8 75 fc ff ff       	call   c000adc0 <VgaText::combineCharAndColour(char, unsigned char)>
c000b14b:	83 c4 10             	add    esp,0x10
c000b14e:	66 89 06             	mov    WORD PTR [esi],ax
c000b151:	39 1d 64 8a 02 c0    	cmp    DWORD PTR ds:0xc0028a64,ebx
c000b157:	75 21                	jne    c000b17a <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b159:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000b15c:	85 c0                	test   eax,eax
c000b15e:	74 1a                	je     c000b17a <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b160:	52                   	push   edx
c000b161:	52                   	push   edx
c000b162:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b165:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b168:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b16c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b170:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000b173:	51                   	push   ecx
c000b174:	53                   	push   ebx
c000b175:	ff d0                	call   eax
c000b177:	83 c4 20             	add    esp,0x20
c000b17a:	83 c6 02             	add    esi,0x2
c000b17d:	50                   	push   eax
c000b17e:	50                   	push   eax
c000b17f:	6a 00                	push   0x0
c000b181:	53                   	push   ebx
c000b182:	e8 7b fd ff ff       	call   c000af02 <VgaText::incrementCursor(bool)>
c000b187:	83 c4 10             	add    esp,0x10
c000b18a:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000b18e:	75 0d                	jne    c000b19d <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000b190:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b195:	0f b7 f6             	movzx  esi,si
c000b198:	01 f6                	add    esi,esi
c000b19a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b19d:	bd 01 00 00 00       	mov    ebp,0x1
c000b1a2:	47                   	inc    edi
c000b1a3:	e9 f8 fe ff ff       	jmp    c000b0a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000b1a8:	83 ec 0c             	sub    esp,0xc
c000b1ab:	53                   	push   ebx
c000b1ac:	e8 59 fa ff ff       	call   c000ac0a <VgaText::updateCursor()>
c000b1b1:	83 c4 10             	add    esp,0x10
c000b1b4:	89 e8                	mov    eax,ebp
c000b1b6:	84 c0                	test   al,al
c000b1b8:	74 0c                	je     c000b1c6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000b1ba:	83 ec 0c             	sub    esp,0xc
c000b1bd:	53                   	push   ebx
c000b1be:	e8 8d fe ff ff       	call   c000b050 <VgaText::doUpdate()>
c000b1c3:	83 c4 10             	add    esp,0x10
c000b1c6:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b1cd:	83 c4 1c             	add    esp,0x1c
c000b1d0:	5b                   	pop    ebx
c000b1d1:	5e                   	pop    esi
c000b1d2:	5f                   	pop    edi
c000b1d3:	5d                   	pop    ebp
c000b1d4:	c3                   	ret    
c000b1d5:	90                   	nop

c000b1d6 <VgaText::clearScreen()>:
c000b1d6:	57                   	push   edi
c000b1d7:	56                   	push   esi
c000b1d8:	31 f6                	xor    esi,esi
c000b1da:	53                   	push   ebx
c000b1db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b1df:	52                   	push   edx
c000b1e0:	6a 00                	push   0x0
c000b1e2:	6a 00                	push   0x0
c000b1e4:	53                   	push   ebx
c000b1e5:	e8 54 fc ff ff       	call   c000ae3e <VgaText::setCursor(int, int)>
c000b1ea:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b1f1:	83 c4 10             	add    esp,0x10
c000b1f4:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000b1f7:	7e 20                	jle    c000b219 <VgaText::clearScreen()+0x43>
c000b1f9:	31 ff                	xor    edi,edi
c000b1fb:	50                   	push   eax
c000b1fc:	50                   	push   eax
c000b1fd:	56                   	push   esi
c000b1fe:	57                   	push   edi
c000b1ff:	47                   	inc    edi
c000b200:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b203:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b206:	6a 20                	push   0x20
c000b208:	53                   	push   ebx
c000b209:	e8 c4 fb ff ff       	call   c000add2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b20e:	83 c4 20             	add    esp,0x20
c000b211:	83 ff 50             	cmp    edi,0x50
c000b214:	75 e5                	jne    c000b1fb <VgaText::clearScreen()+0x25>
c000b216:	46                   	inc    esi
c000b217:	eb db                	jmp    c000b1f4 <VgaText::clearScreen()+0x1e>
c000b219:	83 ec 0c             	sub    esp,0xc
c000b21c:	53                   	push   ebx
c000b21d:	e8 2e fe ff ff       	call   c000b050 <VgaText::doUpdate()>
c000b222:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b229:	83 c4 10             	add    esp,0x10
c000b22c:	5b                   	pop    ebx
c000b22d:	5e                   	pop    esi
c000b22e:	5f                   	pop    edi
c000b22f:	c3                   	ret    

c000b230 <VgaText::putchar(char)>:
c000b230:	56                   	push   esi
c000b231:	53                   	push   ebx
c000b232:	83 ec 14             	sub    esp,0x14
c000b235:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b239:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b23d:	3c 5b                	cmp    al,0x5b
c000b23f:	75 18                	jne    c000b259 <VgaText::putchar(char)+0x29>
c000b241:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000b245:	74 1f                	je     c000b266 <VgaText::putchar(char)+0x36>
c000b247:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000b24d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000b254:	e9 bd 00 00 00       	jmp    c000b316 <VgaText::putchar(char)+0xe6>
c000b259:	3c 1b                	cmp    al,0x1b
c000b25b:	75 09                	jne    c000b266 <VgaText::putchar(char)+0x36>
c000b25d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000b261:	e9 b0 00 00 00       	jmp    c000b316 <VgaText::putchar(char)+0xe6>
c000b266:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000b269:	84 c9                	test   cl,cl
c000b26b:	0f 84 92 00 00 00    	je     c000b303 <VgaText::putchar(char)+0xd3>
c000b271:	8d 50 c0             	lea    edx,[eax-0x40]
c000b274:	80 fa 3e             	cmp    dl,0x3e
c000b277:	77 76                	ja     c000b2ef <VgaText::putchar(char)+0xbf>
c000b279:	3c 6d                	cmp    al,0x6d
c000b27b:	75 47                	jne    c000b2c4 <VgaText::putchar(char)+0x94>
c000b27d:	31 f6                	xor    esi,esi
c000b27f:	31 d2                	xor    edx,edx
c000b281:	31 c0                	xor    eax,eax
c000b283:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000b286:	7e 2d                	jle    c000b2b5 <VgaText::putchar(char)+0x85>
c000b288:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000b28d:	80 fa 3b             	cmp    dl,0x3b
c000b290:	75 17                	jne    c000b2a9 <VgaText::putchar(char)+0x79>
c000b292:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000b296:	50                   	push   eax
c000b297:	53                   	push   ebx
c000b298:	e8 83 f9 ff ff       	call   c000ac20 <VgaText::doANSI_SGR(int)>
c000b29d:	59                   	pop    ecx
c000b29e:	31 d2                	xor    edx,edx
c000b2a0:	58                   	pop    eax
c000b2a1:	31 c0                	xor    eax,eax
c000b2a3:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000b2a7:	eb 09                	jmp    c000b2b2 <VgaText::putchar(char)+0x82>
c000b2a9:	6b c0 0a             	imul   eax,eax,0xa
c000b2ac:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000b2b0:	88 ca                	mov    dl,cl
c000b2b2:	46                   	inc    esi
c000b2b3:	eb ce                	jmp    c000b283 <VgaText::putchar(char)+0x53>
c000b2b5:	84 d2                	test   dl,dl
c000b2b7:	74 2e                	je     c000b2e7 <VgaText::putchar(char)+0xb7>
c000b2b9:	50                   	push   eax
c000b2ba:	53                   	push   ebx
c000b2bb:	e8 60 f9 ff ff       	call   c000ac20 <VgaText::doANSI_SGR(int)>
c000b2c0:	58                   	pop    eax
c000b2c1:	5a                   	pop    edx
c000b2c2:	eb 23                	jmp    c000b2e7 <VgaText::putchar(char)+0xb7>
c000b2c4:	3c 4a                	cmp    al,0x4a
c000b2c6:	75 1f                	jne    c000b2e7 <VgaText::putchar(char)+0xb7>
c000b2c8:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000b2cc:	75 19                	jne    c000b2e7 <VgaText::putchar(char)+0xb7>
c000b2ce:	83 ec 0c             	sub    esp,0xc
c000b2d1:	53                   	push   ebx
c000b2d2:	e8 ff fe ff ff       	call   c000b1d6 <VgaText::clearScreen()>
c000b2d7:	83 c4 0c             	add    esp,0xc
c000b2da:	6a 00                	push   0x0
c000b2dc:	6a 00                	push   0x0
c000b2de:	53                   	push   ebx
c000b2df:	e8 5a fb ff ff       	call   c000ae3e <VgaText::setCursor(int, int)>
c000b2e4:	83 c4 10             	add    esp,0x10
c000b2e7:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000b2ed:	eb 27                	jmp    c000b316 <VgaText::putchar(char)+0xe6>
c000b2ef:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000b2f2:	83 fa 0e             	cmp    edx,0xe
c000b2f5:	7f 1f                	jg     c000b316 <VgaText::putchar(char)+0xe6>
c000b2f7:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b2fa:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000b2fd:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000b301:	eb 13                	jmp    c000b316 <VgaText::putchar(char)+0xe6>
c000b303:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b306:	0f be c0             	movsx  eax,al
c000b309:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b30c:	50                   	push   eax
c000b30d:	53                   	push   ebx
c000b30e:	e8 65 fc ff ff       	call   c000af78 <VgaText::putchar(char, VgaColour, VgaColour)>
c000b313:	83 c4 10             	add    esp,0x10
c000b316:	83 c4 14             	add    esp,0x14
c000b319:	5b                   	pop    ebx
c000b31a:	5e                   	pop    esi
c000b31b:	c3                   	ret    

c000b31c <VgaText::putx(unsigned int)>:
c000b31c:	57                   	push   edi
c000b31d:	b9 11 00 00 00       	mov    ecx,0x11
c000b322:	56                   	push   esi
c000b323:	be 16 4b 02 c0       	mov    esi,0xc0024b16
c000b328:	53                   	push   ebx
c000b329:	83 ec 20             	sub    esp,0x20
c000b32c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b330:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000b334:	fc                   	cld    
c000b335:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b337:	be 08 00 00 00       	mov    esi,0x8
c000b33c:	50                   	push   eax
c000b33d:	50                   	push   eax
c000b33e:	89 d8                	mov    eax,ebx
c000b340:	c1 e3 04             	shl    ebx,0x4
c000b343:	c1 e8 1c             	shr    eax,0x1c
c000b346:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000b34b:	50                   	push   eax
c000b34c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b350:	e8 db fe ff ff       	call   c000b230 <VgaText::putchar(char)>
c000b355:	83 c4 10             	add    esp,0x10
c000b358:	4e                   	dec    esi
c000b359:	75 e1                	jne    c000b33c <VgaText::putx(unsigned int)+0x20>
c000b35b:	83 c4 20             	add    esp,0x20
c000b35e:	5b                   	pop    ebx
c000b35f:	5e                   	pop    esi
c000b360:	5f                   	pop    edi
c000b361:	c3                   	ret    

c000b362 <VgaText::puts(char const*)>:
c000b362:	53                   	push   ebx
c000b363:	83 ec 08             	sub    esp,0x8
c000b366:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b36a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000b36d:	84 c0                	test   al,al
c000b36f:	74 12                	je     c000b383 <VgaText::puts(char const*)+0x21>
c000b371:	43                   	inc    ebx
c000b372:	51                   	push   ecx
c000b373:	51                   	push   ecx
c000b374:	50                   	push   eax
c000b375:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b379:	e8 b2 fe ff ff       	call   c000b230 <VgaText::putchar(char)>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	eb e7                	jmp    c000b36a <VgaText::puts(char const*)+0x8>
c000b383:	83 c4 08             	add    esp,0x8
c000b386:	5b                   	pop    ebx
c000b387:	c3                   	ret    

c000b388 <VgaText::VgaText(char const*)>:
c000b388:	57                   	push   edi
c000b389:	56                   	push   esi
c000b38a:	53                   	push   ebx
c000b38b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b38f:	83 ec 08             	sub    esp,0x8
c000b392:	6a 00                	push   0x0
c000b394:	50                   	push   eax
c000b395:	e8 44 05 00 00       	call   c000b8de <UnixFile::UnixFile(int)>
c000b39a:	83 c4 10             	add    esp,0x10
c000b39d:	ba 7c 4b 02 c0       	mov    edx,0xc0024b7c
c000b3a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3a6:	89 10                	mov    DWORD PTR [eax],edx
c000b3a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ac:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b3b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3b7:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000b3be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3c2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000b3c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ca:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000b3ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3d2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000b3d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3dd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000b3e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000b3ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3f3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000b3fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3fe:	8d 50 60             	lea    edx,[eax+0x60]
c000b401:	bb 40 8a 02 c0       	mov    ebx,0xc0028a40
c000b406:	b8 08 00 00 00       	mov    eax,0x8
c000b40b:	fc                   	cld    
c000b40c:	89 d7                	mov    edi,edx
c000b40e:	89 de                	mov    esi,ebx
c000b410:	89 c1                	mov    ecx,eax
c000b412:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b418:	05 82 00 00 00       	add    eax,0x82
c000b41d:	83 ec 08             	sub    esp,0x8
c000b420:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b424:	50                   	push   eax
c000b425:	e8 16 53 ff ff       	call   c0000740 <strcpy>
c000b42a:	83 c4 10             	add    esp,0x10
c000b42d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b431:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b438:	83 ec 0c             	sub    esp,0xc
c000b43b:	6a 01                	push   0x1
c000b43d:	e8 df 08 00 00       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c000b442:	83 c4 10             	add    esp,0x10
c000b445:	89 c2                	mov    edx,eax
c000b447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b44b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b44e:	8b 1d 10 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b10
c000b454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b458:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b45b:	89 c6                	mov    esi,eax
c000b45d:	e8 b0 ef ff ff       	call   c000a412 <Phys::allocatePage()>
c000b462:	68 05 0c 00 00       	push   0xc05
c000b467:	56                   	push   esi
c000b468:	50                   	push   eax
c000b469:	53                   	push   ebx
c000b46a:	e8 59 0f 00 00       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b46f:	83 c4 10             	add    esp,0x10
c000b472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b476:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b479:	83 ec 04             	sub    esp,0x4
c000b47c:	68 00 0f 00 00       	push   0xf00
c000b481:	6a 00                	push   0x0
c000b483:	50                   	push   eax
c000b484:	e8 fb 51 ff ff       	call   c0000684 <memset>
c000b489:	83 c4 10             	add    esp,0x10
c000b48c:	83 ec 04             	sub    esp,0x4
c000b48f:	6a 00                	push   0x0
c000b491:	6a 07                	push   0x7
c000b493:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b497:	e8 18 f8 ff ff       	call   c000acb4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b49c:	83 c4 10             	add    esp,0x10
c000b49f:	83 ec 04             	sub    esp,0x4
c000b4a2:	6a 00                	push   0x0
c000b4a4:	6a 00                	push   0x0
c000b4a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4aa:	e8 8f f9 ff ff       	call   c000ae3e <VgaText::setCursor(int, int)>
c000b4af:	83 c4 10             	add    esp,0x10
c000b4b2:	83 ec 0c             	sub    esp,0xc
c000b4b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4b9:	e8 18 fd ff ff       	call   c000b1d6 <VgaText::clearScreen()>
c000b4be:	83 c4 10             	add    esp,0x10
c000b4c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c5:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b4c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4cd:	05 02 01 00 00       	add    eax,0x102
c000b4d2:	83 ec 04             	sub    esp,0x4
c000b4d5:	6a 30                	push   0x30
c000b4d7:	6a 00                	push   0x0
c000b4d9:	50                   	push   eax
c000b4da:	e8 a5 51 ff ff       	call   c0000684 <memset>
c000b4df:	83 c4 10             	add    esp,0x10
c000b4e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4e6:	05 32 01 00 00       	add    eax,0x132
c000b4eb:	83 ec 04             	sub    esp,0x4
c000b4ee:	68 80 00 00 00       	push   0x80
c000b4f3:	6a 00                	push   0x0
c000b4f5:	50                   	push   eax
c000b4f6:	e8 89 51 ff ff       	call   c0000684 <memset>
c000b4fb:	83 c4 10             	add    esp,0x10
c000b4fe:	90                   	nop
c000b4ff:	5b                   	pop    ebx
c000b500:	5e                   	pop    esi
c000b501:	5f                   	pop    edi
c000b502:	c3                   	ret    
c000b503:	90                   	nop

c000b504 <VgaText::receiveKey(unsigned char)>:
c000b504:	55                   	push   ebp
c000b505:	57                   	push   edi
c000b506:	56                   	push   esi
c000b507:	53                   	push   ebx
c000b508:	83 ec 1c             	sub    esp,0x1c
c000b50b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b50f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b513:	84 db                	test   bl,bl
c000b515:	0f 84 c6 00 00 00    	je     c000b5e1 <VgaText::receiveKey(unsigned char)+0xdd>
c000b51b:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b521:	80 fb 08             	cmp    bl,0x8
c000b524:	75 2c                	jne    c000b552 <VgaText::receiveKey(unsigned char)+0x4e>
c000b526:	83 ec 0c             	sub    esp,0xc
c000b529:	57                   	push   edi
c000b52a:	e8 71 51 ff ff       	call   c00006a0 <strlen>
c000b52f:	83 c4 10             	add    esp,0x10
c000b532:	85 c0                	test   eax,eax
c000b534:	74 41                	je     c000b577 <VgaText::receiveKey(unsigned char)+0x73>
c000b536:	50                   	push   eax
c000b537:	50                   	push   eax
c000b538:	6a 08                	push   0x8
c000b53a:	56                   	push   esi
c000b53b:	e8 f0 fc ff ff       	call   c000b230 <VgaText::putchar(char)>
c000b540:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b543:	e8 58 51 ff ff       	call   c00006a0 <strlen>
c000b548:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b550:	eb 22                	jmp    c000b574 <VgaText::receiveKey(unsigned char)+0x70>
c000b552:	0f be c3             	movsx  eax,bl
c000b555:	52                   	push   edx
c000b556:	52                   	push   edx
c000b557:	50                   	push   eax
c000b558:	56                   	push   esi
c000b559:	e8 d2 fc ff ff       	call   c000b230 <VgaText::putchar(char)>
c000b55e:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b562:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b567:	59                   	pop    ecx
c000b568:	5d                   	pop    ebp
c000b569:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b56d:	50                   	push   eax
c000b56e:	57                   	push   edi
c000b56f:	e8 0c 53 ff ff       	call   c0000880 <strcat>
c000b574:	83 c4 10             	add    esp,0x10
c000b577:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b57e:	75 05                	jne    c000b585 <VgaText::receiveKey(unsigned char)+0x81>
c000b580:	80 fb 0a             	cmp    bl,0xa
c000b583:	75 50                	jne    c000b5d5 <VgaText::receiveKey(unsigned char)+0xd1>
c000b585:	83 ec 0c             	sub    esp,0xc
c000b588:	8d 9e 32 01 00 00    	lea    ebx,[esi+0x132]
c000b58e:	53                   	push   ebx
c000b58f:	e8 0c 51 ff ff       	call   c00006a0 <strlen>
c000b594:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b597:	89 c5                	mov    ebp,eax
c000b599:	e8 02 51 ff ff       	call   c00006a0 <strlen>
c000b59e:	83 c4 10             	add    esp,0x10
c000b5a1:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b5a5:	3d 80 00 00 00       	cmp    eax,0x80
c000b5aa:	76 10                	jbe    c000b5bc <VgaText::receiveKey(unsigned char)+0xb8>
c000b5ac:	83 ec 0c             	sub    esp,0xc
c000b5af:	68 27 4b 02 c0       	push   0xc0024b27
c000b5b4:	e8 70 9b 00 00       	call   c0015129 <Krnl::panic(char const*)>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	50                   	push   eax
c000b5bd:	50                   	push   eax
c000b5be:	57                   	push   edi
c000b5bf:	53                   	push   ebx
c000b5c0:	e8 bb 52 ff ff       	call   c0000880 <strcat>
c000b5c5:	83 c4 0c             	add    esp,0xc
c000b5c8:	6a 30                	push   0x30
c000b5ca:	6a 00                	push   0x0
c000b5cc:	57                   	push   edi
c000b5cd:	e8 b2 50 ff ff       	call   c0000684 <memset>
c000b5d2:	83 c4 10             	add    esp,0x10
c000b5d5:	83 ec 0c             	sub    esp,0xc
c000b5d8:	56                   	push   esi
c000b5d9:	e8 72 fa ff ff       	call   c000b050 <VgaText::doUpdate()>
c000b5de:	83 c4 10             	add    esp,0x10
c000b5e1:	83 c4 1c             	add    esp,0x1c
c000b5e4:	5b                   	pop    ebx
c000b5e5:	5e                   	pop    esi
c000b5e6:	5f                   	pop    edi
c000b5e7:	5d                   	pop    ebp
c000b5e8:	c3                   	ret    
c000b5e9:	90                   	nop

c000b5ea <VgaText::write(unsigned long long, void*, int*)>:
c000b5ea:	55                   	push   ebp
c000b5eb:	57                   	push   edi
c000b5ec:	56                   	push   esi
c000b5ed:	53                   	push   ebx
c000b5ee:	83 ec 0c             	sub    esp,0xc
c000b5f1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b5f5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b5f9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b5fd:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b604:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b607:	39 eb                	cmp    ebx,ebp
c000b609:	74 13                	je     c000b61e <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b60b:	43                   	inc    ebx
c000b60c:	50                   	push   eax
c000b60d:	50                   	push   eax
c000b60e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b612:	50                   	push   eax
c000b613:	56                   	push   esi
c000b614:	e8 17 fc ff ff       	call   c000b230 <VgaText::putchar(char)>
c000b619:	83 c4 10             	add    esp,0x10
c000b61c:	eb e9                	jmp    c000b607 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b61e:	83 ec 0c             	sub    esp,0xc
c000b621:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b628:	56                   	push   esi
c000b629:	e8 22 fa ff ff       	call   c000b050 <VgaText::doUpdate()>
c000b62e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b632:	89 38                	mov    DWORD PTR [eax],edi
c000b634:	83 c4 1c             	add    esp,0x1c
c000b637:	31 c0                	xor    eax,eax
c000b639:	5b                   	pop    ebx
c000b63a:	5e                   	pop    esi
c000b63b:	5f                   	pop    edi
c000b63c:	5d                   	pop    ebp
c000b63d:	c3                   	ret    

c000b63e <newTerminal(char*)>:
c000b63e:	83 ec 28             	sub    esp,0x28
c000b641:	68 b4 01 00 00       	push   0x1b4
c000b646:	e8 10 e7 ff ff       	call   c0009d5b <malloc>
c000b64b:	5a                   	pop    edx
c000b64c:	59                   	pop    ecx
c000b64d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b651:	50                   	push   eax
c000b652:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b656:	e8 2d fd ff ff       	call   c000b388 <VgaText::VgaText(char const*)>
c000b65b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b65f:	83 c4 2c             	add    esp,0x2c
c000b662:	c3                   	ret    
c000b663:	90                   	nop

c000b664 <TSS::TSS()>:
c000b664:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b668:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b66f:	90                   	nop
c000b670:	c3                   	ret    
c000b671:	90                   	nop
c000b672:	66 90                	xchg   ax,ax

c000b674 <TSS::setESP(unsigned long)>:
c000b674:	55                   	push   ebp
c000b675:	89 e5                	mov    ebp,esp
c000b677:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b67a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b67d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b680:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b683:	90                   	nop
c000b684:	5d                   	pop    ebp
c000b685:	c3                   	ret    
c000b686:	66 90                	xchg   ax,ax

c000b688 <TSS::flush()>:
c000b688:	55                   	push   ebp
c000b689:	89 e5                	mov    ebp,esp
c000b68b:	83 ec 10             	sub    esp,0x10
c000b68e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b691:	8b 00                	mov    eax,DWORD PTR [eax]
c000b693:	83 c8 03             	or     eax,0x3
c000b696:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b69a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b69e:	66 89 d0             	mov    ax,dx
c000b6a1:	0f 00 d8             	ltr    ax
c000b6a4:	90                   	nop
c000b6a5:	c9                   	leave  
c000b6a6:	c3                   	ret    
c000b6a7:	90                   	nop

c000b6a8 <TSS::setup(unsigned long, unsigned long)>:
c000b6a8:	55                   	push   ebp
c000b6a9:	89 e5                	mov    ebp,esp
c000b6ab:	83 ec 18             	sub    esp,0x18
c000b6ae:	83 ec 0c             	sub    esp,0xc
c000b6b1:	6a 68                	push   0x68
c000b6b3:	e8 a3 e6 ff ff       	call   c0009d5b <malloc>
c000b6b8:	83 c4 10             	add    esp,0x10
c000b6bb:	89 c2                	mov    edx,eax
c000b6bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6c0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b6c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6c9:	83 ec 04             	sub    esp,0x4
c000b6cc:	6a 68                	push   0x68
c000b6ce:	6a 00                	push   0x0
c000b6d0:	50                   	push   eax
c000b6d1:	e8 ae 4f ff ff       	call   c0000684 <memset>
c000b6d6:	83 c4 10             	add    esp,0x10
c000b6d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6df:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b6e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6eb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b6f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6f7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b6fa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b6fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b700:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b703:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b709:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b70c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b70f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b715:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b718:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b71b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b721:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b724:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b727:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b72d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b730:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b733:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b739:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b73c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b73f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b745:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b748:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b74b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b74e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b754:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b757:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b75a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b75d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b760:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b763:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b76a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b76d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b770:	0f 20 da             	mov    edx,cr3
c000b773:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b776:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b779:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b77c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b77f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b782:	83 ec 08             	sub    esp,0x8
c000b785:	50                   	push   eax
c000b786:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b789:	50                   	push   eax
c000b78a:	e8 27 de ff ff       	call   c00095b6 <GDTEntry::setBase(unsigned int)>
c000b78f:	83 c4 10             	add    esp,0x10
c000b792:	83 ec 08             	sub    esp,0x8
c000b795:	6a 68                	push   0x68
c000b797:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b79a:	50                   	push   eax
c000b79b:	e8 32 de ff ff       	call   c00095d2 <GDTEntry::setLimit(unsigned int)>
c000b7a0:	83 c4 10             	add    esp,0x10
c000b7a3:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b7a7:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b7aa:	83 e0 0f             	and    eax,0xf
c000b7ad:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b7b0:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b7b3:	83 c8 40             	or     eax,0x40
c000b7b6:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b7b9:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c000b7be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b7c4:	05 78 01 00 00       	add    eax,0x178
c000b7c9:	83 ec 04             	sub    esp,0x4
c000b7cc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b7cf:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b7d2:	50                   	push   eax
c000b7d3:	e8 2e de ff ff       	call   c0009606 <GDT::addEntry(GDTEntry)>
c000b7d8:	83 c4 10             	add    esp,0x10
c000b7db:	89 c2                	mov    edx,eax
c000b7dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7e0:	89 10                	mov    DWORD PTR [eax],edx
c000b7e2:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c000b7e7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b7ed:	05 78 01 00 00       	add    eax,0x178
c000b7f2:	83 ec 0c             	sub    esp,0xc
c000b7f5:	50                   	push   eax
c000b7f6:	e8 35 de ff ff       	call   c0009630 <GDT::flush()>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b801:	8b 00                	mov    eax,DWORD PTR [eax]
c000b803:	c9                   	leave  
c000b804:	c3                   	ret    
c000b805:	90                   	nop

c000b806 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b806:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b80a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b80e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b811:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b816:	75 08                	jne    c000b820 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b818:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b81e:	eb 38                	jmp    c000b858 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b820:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b825:	75 17                	jne    c000b83e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b827:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b82c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b82f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b835:	8b 10                	mov    edx,DWORD PTR [eax]
c000b837:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b83b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b83e:	89 c1                	mov    ecx,eax
c000b840:	83 e1 fd             	and    ecx,0xfffffffd
c000b843:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b849:	74 cd                	je     c000b818 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b84b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b850:	83 e0 ef             	and    eax,0xffffffef
c000b853:	83 f8 08             	cmp    eax,0x8
c000b856:	76 c0                	jbe    c000b818 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b858:	31 c0                	xor    eax,eax
c000b85a:	c3                   	ret    
c000b85b:	90                   	nop

c000b85c <ReservedFilename::isAtty()>:
c000b85c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b860:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b863:	31 c0                	xor    eax,eax
c000b865:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b86b:	74 09                	je     c000b876 <ReservedFilename::isAtty()+0x1a>
c000b86d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b873:	0f 94 c0             	sete   al
c000b876:	c3                   	ret    
c000b877:	90                   	nop

c000b878 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b878:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b87c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b880:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b883:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b887:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b88c:	75 08                	jne    c000b896 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b88e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b894:	eb 3d                	jmp    c000b8d3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b896:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b89b:	75 17                	jne    c000b8b4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b89d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b8a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b8a5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b8ab:	8b 10                	mov    edx,DWORD PTR [eax]
c000b8ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b8b1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b8b4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b8b9:	75 04                	jne    c000b8bf <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b8bb:	89 0a                	mov    DWORD PTR [edx],ecx
c000b8bd:	eb 14                	jmp    c000b8d3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b8bf:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b8c4:	74 c8                	je     c000b88e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b8c6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b8cb:	83 e0 ef             	and    eax,0xffffffef
c000b8ce:	83 f8 08             	cmp    eax,0x8
c000b8d1:	76 bb                	jbe    c000b88e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b8d3:	31 c0                	xor    eax,eax
c000b8d5:	c3                   	ret    

c000b8d6 <UnixFile::getFileDescriptor()>:
c000b8d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b8dd:	c3                   	ret    

c000b8de <UnixFile::UnixFile(int)>:
c000b8de:	53                   	push   ebx
c000b8df:	83 ec 28             	sub    esp,0x28
c000b8e2:	ba 44 4c 02 c0       	mov    edx,0xc0024c44
c000b8e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8eb:	89 10                	mov    DWORD PTR [eax],edx
c000b8ed:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b8f5:	0f 8f 8c 01 00 00    	jg     c000ba87 <UnixFile::UnixFile(int)+0x1a9>
c000b8fb:	a1 20 7e 02 c0       	mov    eax,ds:0xc0027e20
c000b900:	8d 50 01             	lea    edx,[eax+0x1]
c000b903:	89 15 20 7e 02 c0    	mov    DWORD PTR ds:0xc0027e20,edx
c000b909:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b90d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b910:	83 ec 08             	sub    esp,0x8
c000b913:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b917:	68 f8 8a 02 c0       	push   0xc0028af8
c000b91c:	e8 e7 77 01 00       	call   c0023108 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b921:	83 c4 10             	add    esp,0x10
c000b924:	a0 f4 8a 02 c0       	mov    al,ds:0xc0028af4
c000b929:	83 f0 01             	xor    eax,0x1
c000b92c:	84 c0                	test   al,al
c000b92e:	0f 84 54 01 00 00    	je     c000ba88 <UnixFile::UnixFile(int)+0x1aa>
c000b934:	c6 05 f4 8a 02 c0 01 	mov    BYTE PTR ds:0xc0028af4,0x1
c000b93b:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b943:	83 ec 0c             	sub    esp,0xc
c000b946:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b94a:	e8 0c e4 ff ff       	call   c0009d5b <malloc>
c000b94f:	83 c4 10             	add    esp,0x10
c000b952:	89 c3                	mov    ebx,eax
c000b954:	83 ec 08             	sub    esp,0x8
c000b957:	68 03 ff ff 0f       	push   0xfffff03
c000b95c:	53                   	push   ebx
c000b95d:	e8 2c 01 00 00       	call   c000ba8e <ReservedFilename::ReservedFilename(int)>
c000b962:	83 c4 10             	add    esp,0x10
c000b965:	89 1d ec 8a 02 c0    	mov    DWORD PTR ds:0xc0028aec,ebx
c000b96b:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b973:	83 ec 0c             	sub    esp,0xc
c000b976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b97a:	e8 dc e3 ff ff       	call   c0009d5b <malloc>
c000b97f:	83 c4 10             	add    esp,0x10
c000b982:	89 c3                	mov    ebx,eax
c000b984:	83 ec 08             	sub    esp,0x8
c000b987:	68 01 ff ff 0f       	push   0xfffff01
c000b98c:	53                   	push   ebx
c000b98d:	e8 fc 00 00 00       	call   c000ba8e <ReservedFilename::ReservedFilename(int)>
c000b992:	83 c4 10             	add    esp,0x10
c000b995:	89 1d f0 8a 02 c0    	mov    DWORD PTR ds:0xc0028af0,ebx
c000b99b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b9a3:	83 ec 0c             	sub    esp,0xc
c000b9a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b9aa:	e8 ac e3 ff ff       	call   c0009d5b <malloc>
c000b9af:	83 c4 10             	add    esp,0x10
c000b9b2:	89 c3                	mov    ebx,eax
c000b9b4:	83 ec 08             	sub    esp,0x8
c000b9b7:	68 00 ff ff 0f       	push   0xfffff00
c000b9bc:	53                   	push   ebx
c000b9bd:	e8 cc 00 00 00       	call   c000ba8e <ReservedFilename::ReservedFilename(int)>
c000b9c2:	83 c4 10             	add    esp,0x10
c000b9c5:	89 1d e4 8a 02 c0    	mov    DWORD PTR ds:0xc0028ae4,ebx
c000b9cb:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b9d3:	83 ec 0c             	sub    esp,0xc
c000b9d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9da:	e8 7c e3 ff ff       	call   c0009d5b <malloc>
c000b9df:	83 c4 10             	add    esp,0x10
c000b9e2:	89 c3                	mov    ebx,eax
c000b9e4:	83 ec 08             	sub    esp,0x8
c000b9e7:	68 02 ff ff 0f       	push   0xfffff02
c000b9ec:	53                   	push   ebx
c000b9ed:	e8 9c 00 00 00       	call   c000ba8e <ReservedFilename::ReservedFilename(int)>
c000b9f2:	83 c4 10             	add    esp,0x10
c000b9f5:	89 1d e8 8a 02 c0    	mov    DWORD PTR ds:0xc0028ae8,ebx
c000b9fb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ba03:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000ba08:	7f 7e                	jg     c000ba88 <UnixFile::UnixFile(int)+0x1aa>
c000ba0a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000ba12:	83 ec 0c             	sub    esp,0xc
c000ba15:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ba19:	e8 3d e3 ff ff       	call   c0009d5b <malloc>
c000ba1e:	83 c4 10             	add    esp,0x10
c000ba21:	89 c3                	mov    ebx,eax
c000ba23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba27:	05 10 ff ff 0f       	add    eax,0xfffff10
c000ba2c:	83 ec 08             	sub    esp,0x8
c000ba2f:	50                   	push   eax
c000ba30:	53                   	push   ebx
c000ba31:	e8 58 00 00 00       	call   c000ba8e <ReservedFilename::ReservedFilename(int)>
c000ba36:	83 c4 10             	add    esp,0x10
c000ba39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba3d:	89 1c 85 c0 8a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7540],ebx
c000ba44:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000ba4c:	83 ec 0c             	sub    esp,0xc
c000ba4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba53:	e8 03 e3 ff ff       	call   c0009d5b <malloc>
c000ba58:	83 c4 10             	add    esp,0x10
c000ba5b:	89 c3                	mov    ebx,eax
c000ba5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba61:	05 20 ff ff 0f       	add    eax,0xfffff20
c000ba66:	83 ec 08             	sub    esp,0x8
c000ba69:	50                   	push   eax
c000ba6a:	53                   	push   ebx
c000ba6b:	e8 1e 00 00 00       	call   c000ba8e <ReservedFilename::ReservedFilename(int)>
c000ba70:	83 c4 10             	add    esp,0x10
c000ba73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba77:	89 1c 85 80 8a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7580],ebx
c000ba7e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ba82:	e9 7c ff ff ff       	jmp    c000ba03 <UnixFile::UnixFile(int)+0x125>
c000ba87:	90                   	nop
c000ba88:	83 c4 28             	add    esp,0x28
c000ba8b:	5b                   	pop    ebx
c000ba8c:	c3                   	ret    
c000ba8d:	90                   	nop

c000ba8e <ReservedFilename::ReservedFilename(int)>:
c000ba8e:	83 ec 0c             	sub    esp,0xc
c000ba91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba95:	83 ec 08             	sub    esp,0x8
c000ba98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba9c:	50                   	push   eax
c000ba9d:	e8 3c fe ff ff       	call   c000b8de <UnixFile::UnixFile(int)>
c000baa2:	83 c4 10             	add    esp,0x10
c000baa5:	ba 60 4c 02 c0       	mov    edx,0xc0024c60
c000baaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000baae:	89 10                	mov    DWORD PTR [eax],edx
c000bab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bab4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bab8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000babb:	90                   	nop
c000babc:	83 c4 0c             	add    esp,0xc
c000babf:	c3                   	ret    

c000bac0 <UnixFile::~UnixFile()>:
c000bac0:	83 ec 1c             	sub    esp,0x1c
c000bac3:	ba 44 4c 02 c0       	mov    edx,0xc0024c44
c000bac8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bacc:	89 10                	mov    DWORD PTR [eax],edx
c000bace:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bad2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bad5:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000bada:	7f 73                	jg     c000bb4f <UnixFile::~UnixFile()+0x8f>
c000badc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bae4:	83 ec 0c             	sub    esp,0xc
c000bae7:	68 f8 8a 02 c0       	push   0xc0028af8
c000baec:	e8 eb 76 01 00       	call   c00231dc <LinkedList<UnixFile>::getFirstElement()>
c000baf1:	83 c4 10             	add    esp,0x10
c000baf4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000baf8:	83 ec 0c             	sub    esp,0xc
c000bafb:	68 f8 8a 02 c0       	push   0xc0028af8
c000bb00:	e8 df 76 01 00       	call   c00231e4 <LinkedList<UnixFile>::removeFirst()>
c000bb05:	83 c4 10             	add    esp,0x10
c000bb08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb0c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000bb10:	74 40                	je     c000bb52 <UnixFile::~UnixFile()+0x92>
c000bb12:	83 ec 08             	sub    esp,0x8
c000bb15:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bb19:	68 f8 8a 02 c0       	push   0xc0028af8
c000bb1e:	e8 e5 75 01 00       	call   c0023108 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000bb23:	83 c4 10             	add    esp,0x10
c000bb26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bb2a:	8d 50 01             	lea    edx,[eax+0x1]
c000bb2d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb31:	3d 88 13 00 00       	cmp    eax,0x1388
c000bb36:	0f 94 c0             	sete   al
c000bb39:	84 c0                	test   al,al
c000bb3b:	74 a7                	je     c000bae4 <UnixFile::~UnixFile()+0x24>
c000bb3d:	83 ec 0c             	sub    esp,0xc
c000bb40:	68 1c 4c 02 c0       	push   0xc0024c1c
c000bb45:	e8 df 95 00 00       	call   c0015129 <Krnl::panic(char const*)>
c000bb4a:	83 c4 10             	add    esp,0x10
c000bb4d:	eb 95                	jmp    c000bae4 <UnixFile::~UnixFile()+0x24>
c000bb4f:	90                   	nop
c000bb50:	eb 01                	jmp    c000bb53 <UnixFile::~UnixFile()+0x93>
c000bb52:	90                   	nop
c000bb53:	90                   	nop
c000bb54:	83 c4 1c             	add    esp,0x1c
c000bb57:	c3                   	ret    

c000bb58 <UnixFile::~UnixFile()>:
c000bb58:	83 ec 0c             	sub    esp,0xc
c000bb5b:	83 ec 0c             	sub    esp,0xc
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	e8 59 ff ff ff       	call   c000bac0 <UnixFile::~UnixFile()>
c000bb67:	83 c4 10             	add    esp,0x10
c000bb6a:	83 ec 08             	sub    esp,0x8
c000bb6d:	6a 0c                	push   0xc
c000bb6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb73:	e8 ee 13 00 00       	call   c000cf66 <operator delete(void*, unsigned long)>
c000bb78:	83 c4 10             	add    esp,0x10
c000bb7b:	83 c4 0c             	add    esp,0xc
c000bb7e:	c3                   	ret    
c000bb7f:	90                   	nop

c000bb80 <ReservedFilename::~ReservedFilename()>:
c000bb80:	83 ec 0c             	sub    esp,0xc
c000bb83:	ba 60 4c 02 c0       	mov    edx,0xc0024c60
c000bb88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb8c:	89 10                	mov    DWORD PTR [eax],edx
c000bb8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb92:	83 ec 0c             	sub    esp,0xc
c000bb95:	50                   	push   eax
c000bb96:	e8 25 ff ff ff       	call   c000bac0 <UnixFile::~UnixFile()>
c000bb9b:	83 c4 10             	add    esp,0x10
c000bb9e:	90                   	nop
c000bb9f:	83 c4 0c             	add    esp,0xc
c000bba2:	c3                   	ret    
c000bba3:	90                   	nop

c000bba4 <ReservedFilename::~ReservedFilename()>:
c000bba4:	83 ec 0c             	sub    esp,0xc
c000bba7:	83 ec 0c             	sub    esp,0xc
c000bbaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbae:	e8 cd ff ff ff       	call   c000bb80 <ReservedFilename::~ReservedFilename()>
c000bbb3:	83 c4 10             	add    esp,0x10
c000bbb6:	83 ec 08             	sub    esp,0x8
c000bbb9:	6a 0c                	push   0xc
c000bbbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbbf:	e8 a2 13 00 00       	call   c000cf66 <operator delete(void*, unsigned long)>
c000bbc4:	83 c4 10             	add    esp,0x10
c000bbc7:	83 c4 0c             	add    esp,0xc
c000bbca:	c3                   	ret    

c000bbcb <getFromFileDescriptor(int)>:
c000bbcb:	53                   	push   ebx
c000bbcc:	83 ec 08             	sub    esp,0x8
c000bbcf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bbd3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000bbd9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000bbdf:	7f 2c                	jg     c000bc0d <getFromFileDescriptor(int)+0x42>
c000bbe1:	83 ec 0c             	sub    esp,0xc
c000bbe4:	68 f8 8a 02 c0       	push   0xc0028af8
c000bbe9:	e8 ee 75 01 00       	call   c00231dc <LinkedList<UnixFile>::getFirstElement()>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	85 c0                	test   eax,eax
c000bbf3:	75 04                	jne    c000bbf9 <getFromFileDescriptor(int)+0x2e>
c000bbf5:	31 c0                	xor    eax,eax
c000bbf7:	eb 6e                	jmp    c000bc67 <getFromFileDescriptor(int)+0x9c>
c000bbf9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000bbfc:	74 69                	je     c000bc67 <getFromFileDescriptor(int)+0x9c>
c000bbfe:	52                   	push   edx
c000bbff:	52                   	push   edx
c000bc00:	50                   	push   eax
c000bc01:	68 f8 8a 02 c0       	push   0xc0028af8
c000bc06:	e8 7b 76 01 00       	call   c0023286 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000bc0b:	eb e1                	jmp    c000bbee <getFromFileDescriptor(int)+0x23>
c000bc0d:	a1 ec 8a 02 c0       	mov    eax,ds:0xc0028aec
c000bc12:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000bc18:	74 4d                	je     c000bc67 <getFromFileDescriptor(int)+0x9c>
c000bc1a:	a1 f0 8a 02 c0       	mov    eax,ds:0xc0028af0
c000bc1f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000bc25:	74 40                	je     c000bc67 <getFromFileDescriptor(int)+0x9c>
c000bc27:	a1 e8 8a 02 c0       	mov    eax,ds:0xc0028ae8
c000bc2c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000bc32:	74 33                	je     c000bc67 <getFromFileDescriptor(int)+0x9c>
c000bc34:	a1 e4 8a 02 c0       	mov    eax,ds:0xc0028ae4
c000bc39:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000bc3f:	74 26                	je     c000bc67 <getFromFileDescriptor(int)+0x9c>
c000bc41:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000bc47:	83 f8 08             	cmp    eax,0x8
c000bc4a:	77 09                	ja     c000bc55 <getFromFileDescriptor(int)+0x8a>
c000bc4c:	8b 04 85 c0 8a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7540]
c000bc53:	eb 12                	jmp    c000bc67 <getFromFileDescriptor(int)+0x9c>
c000bc55:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000bc5b:	83 fb 08             	cmp    ebx,0x8
c000bc5e:	77 95                	ja     c000bbf5 <getFromFileDescriptor(int)+0x2a>
c000bc60:	8b 04 9d 80 8a 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7580]
c000bc67:	83 c4 08             	add    esp,0x8
c000bc6a:	5b                   	pop    ebx
c000bc6b:	c3                   	ret    

c000bc6c <__static_initialization_and_destruction_0(int, int)>:
c000bc6c:	83 ec 0c             	sub    esp,0xc
c000bc6f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bc74:	75 34                	jne    c000bcaa <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bc76:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000bc7e:	75 2a                	jne    c000bcaa <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bc80:	83 ec 0c             	sub    esp,0xc
c000bc83:	68 f8 8a 02 c0       	push   0xc0028af8
c000bc88:	e8 39 74 01 00       	call   c00230c6 <LinkedList<UnixFile>::LinkedList()>
c000bc8d:	83 c4 10             	add    esp,0x10
c000bc90:	83 ec 04             	sub    esp,0x4
c000bc93:	68 48 7c 02 c0       	push   0xc0027c48
c000bc98:	68 f8 8a 02 c0       	push   0xc0028af8
c000bc9d:	68 c4 30 02 c0       	push   0xc00230c4
c000bca2:	e8 39 12 00 00       	call   c000cee0 <__cxa_atexit>
c000bca7:	83 c4 10             	add    esp,0x10
c000bcaa:	90                   	nop
c000bcab:	83 c4 0c             	add    esp,0xc
c000bcae:	c3                   	ret    

c000bcaf <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000bcaf:	83 ec 0c             	sub    esp,0xc
c000bcb2:	83 ec 08             	sub    esp,0x8
c000bcb5:	68 ff ff 00 00       	push   0xffff
c000bcba:	6a 01                	push   0x1
c000bcbc:	e8 ab ff ff ff       	call   c000bc6c <__static_initialization_and_destruction_0(int, int)>
c000bcc1:	83 c4 10             	add    esp,0x10
c000bcc4:	83 c4 0c             	add    esp,0xc
c000bcc7:	c3                   	ret    

c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000bcc8:	53                   	push   ebx
c000bcc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bccd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bcd1:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000bcd7:	89 c8                	mov    eax,ecx
c000bcd9:	d1 e8                	shr    eax,1
c000bcdb:	03 05 28 7e 02 c0    	add    eax,DWORD PTR ds:0xc0027e28
c000bce1:	83 e1 01             	and    ecx,0x1
c000bce4:	8a 10                	mov    dl,BYTE PTR [eax]
c000bce6:	75 09                	jne    c000bcf1 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000bce8:	83 e2 f0             	and    edx,0xfffffff0
c000bceb:	09 da                	or     edx,ebx
c000bced:	88 10                	mov    BYTE PTR [eax],dl
c000bcef:	5b                   	pop    ebx
c000bcf0:	c3                   	ret    
c000bcf1:	c1 e3 04             	shl    ebx,0x4
c000bcf4:	83 e2 0f             	and    edx,0xf
c000bcf7:	09 da                	or     edx,ebx
c000bcf9:	88 10                	mov    BYTE PTR [eax],dl
c000bcfb:	5b                   	pop    ebx
c000bcfc:	c3                   	ret    

c000bcfd <Virt::getPageState(unsigned long)>:
c000bcfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd01:	8b 0d 28 7e 02 c0    	mov    ecx,DWORD PTR ds:0xc0027e28
c000bd07:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000bd0d:	89 d0                	mov    eax,edx
c000bd0f:	d1 e8                	shr    eax,1
c000bd11:	83 e2 01             	and    edx,0x1
c000bd14:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000bd17:	75 04                	jne    c000bd1d <Virt::getPageState(unsigned long)+0x20>
c000bd19:	83 e0 0f             	and    eax,0xf
c000bd1c:	c3                   	ret    
c000bd1d:	c0 e8 04             	shr    al,0x4
c000bd20:	c3                   	ret    

c000bd21 <Virt::allocateKernelVirtualPages(int)>:
c000bd21:	55                   	push   ebp
c000bd22:	31 ed                	xor    ebp,ebp
c000bd24:	57                   	push   edi
c000bd25:	56                   	push   esi
c000bd26:	53                   	push   ebx
c000bd27:	31 db                	xor    ebx,ebx
c000bd29:	83 ec 1c             	sub    esp,0x1c
c000bd2c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bd30:	8b 3d 24 7e 02 c0    	mov    edi,DWORD PTR ds:0xc0027e24
c000bd36:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000bd3b:	57                   	push   edi
c000bd3c:	e8 bc ff ff ff       	call   c000bcfd <Virt::getPageState(unsigned long)>
c000bd41:	5a                   	pop    edx
c000bd42:	84 c0                	test   al,al
c000bd44:	75 3a                	jne    c000bd80 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000bd46:	85 db                	test   ebx,ebx
c000bd48:	75 02                	jne    c000bd4c <Virt::allocateKernelVirtualPages(int)+0x2b>
c000bd4a:	89 fd                	mov    ebp,edi
c000bd4c:	43                   	inc    ebx
c000bd4d:	39 f3                	cmp    ebx,esi
c000bd4f:	74 5a                	je     c000bdab <Virt::allocateKernelVirtualPages(int)+0x8a>
c000bd51:	47                   	inc    edi
c000bd52:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bd58:	76 31                	jbe    c000bd8b <Virt::allocateKernelVirtualPages(int)+0x6a>
c000bd5a:	c7 05 24 7e 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0027e24,0xc8000
c000bd64:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000bd69:	75 28                	jne    c000bd93 <Virt::allocateKernelVirtualPages(int)+0x72>
c000bd6b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000bd70:	bf 00 80 0c 00       	mov    edi,0xc8000
c000bd75:	57                   	push   edi
c000bd76:	e8 82 ff ff ff       	call   c000bcfd <Virt::getPageState(unsigned long)>
c000bd7b:	5a                   	pop    edx
c000bd7c:	84 c0                	test   al,al
c000bd7e:	74 c6                	je     c000bd46 <Virt::allocateKernelVirtualPages(int)+0x25>
c000bd80:	31 db                	xor    ebx,ebx
c000bd82:	47                   	inc    edi
c000bd83:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bd89:	77 cf                	ja     c000bd5a <Virt::allocateKernelVirtualPages(int)+0x39>
c000bd8b:	89 3d 24 7e 02 c0    	mov    DWORD PTR ds:0xc0027e24,edi
c000bd91:	eb a8                	jmp    c000bd3b <Virt::allocateKernelVirtualPages(int)+0x1a>
c000bd93:	83 ec 0c             	sub    esp,0xc
c000bd96:	68 74 4c 02 c0       	push   0xc0024c74
c000bd9b:	e8 89 93 00 00       	call   c0015129 <Krnl::panic(char const*)>
c000bda0:	8b 3d 24 7e 02 c0    	mov    edi,DWORD PTR ds:0xc0027e24
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	eb 90                	jmp    c000bd3b <Virt::allocateKernelVirtualPages(int)+0x1a>
c000bdab:	89 2d 24 7e 02 c0    	mov    DWORD PTR ds:0xc0027e24,ebp
c000bdb1:	4b                   	dec    ebx
c000bdb2:	74 5f                	je     c000be13 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000bdb4:	85 f6                	test   esi,esi
c000bdb6:	74 3d                	je     c000bdf5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000bdb8:	89 e8                	mov    eax,ebp
c000bdba:	31 db                	xor    ebx,ebx
c000bdbc:	8d 7e ff             	lea    edi,[esi-0x1]
c000bdbf:	eb 14                	jmp    c000bdd5 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000bdc1:	6a 01                	push   0x1
c000bdc3:	43                   	inc    ebx
c000bdc4:	50                   	push   eax
c000bdc5:	e8 fe fe ff ff       	call   c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bdca:	58                   	pop    eax
c000bdcb:	39 f3                	cmp    ebx,esi
c000bdcd:	5a                   	pop    edx
c000bdce:	74 25                	je     c000bdf5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000bdd0:	a1 24 7e 02 c0       	mov    eax,ds:0xc0027e24
c000bdd5:	8d 50 01             	lea    edx,[eax+0x1]
c000bdd8:	85 db                	test   ebx,ebx
c000bdda:	89 15 24 7e 02 c0    	mov    DWORD PTR ds:0xc0027e24,edx
c000bde0:	74 20                	je     c000be02 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000bde2:	39 df                	cmp    edi,ebx
c000bde4:	75 db                	jne    c000bdc1 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000bde6:	6a 03                	push   0x3
c000bde8:	43                   	inc    ebx
c000bde9:	50                   	push   eax
c000bdea:	e8 d9 fe ff ff       	call   c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bdef:	59                   	pop    ecx
c000bdf0:	39 f3                	cmp    ebx,esi
c000bdf2:	58                   	pop    eax
c000bdf3:	75 db                	jne    c000bdd0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000bdf5:	83 c4 1c             	add    esp,0x1c
c000bdf8:	89 e8                	mov    eax,ebp
c000bdfa:	5b                   	pop    ebx
c000bdfb:	c1 e0 0c             	shl    eax,0xc
c000bdfe:	5e                   	pop    esi
c000bdff:	5f                   	pop    edi
c000be00:	5d                   	pop    ebp
c000be01:	c3                   	ret    
c000be02:	6a 02                	push   0x2
c000be04:	bb 01 00 00 00       	mov    ebx,0x1
c000be09:	50                   	push   eax
c000be0a:	e8 b9 fe ff ff       	call   c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be0f:	58                   	pop    eax
c000be10:	5a                   	pop    edx
c000be11:	eb bd                	jmp    c000bdd0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000be13:	6a 04                	push   0x4
c000be15:	8d 45 01             	lea    eax,[ebp+0x1]
c000be18:	55                   	push   ebp
c000be19:	a3 24 7e 02 c0       	mov    ds:0xc0027e24,eax
c000be1e:	e8 a5 fe ff ff       	call   c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be23:	59                   	pop    ecx
c000be24:	89 e8                	mov    eax,ebp
c000be26:	5b                   	pop    ebx
c000be27:	c1 e0 0c             	shl    eax,0xc
c000be2a:	83 c4 1c             	add    esp,0x1c
c000be2d:	5b                   	pop    ebx
c000be2e:	5e                   	pop    esi
c000be2f:	5f                   	pop    edi
c000be30:	5d                   	pop    ebp
c000be31:	c3                   	ret    

c000be32 <Virt::freeSwapfilePage(unsigned long)>:
c000be32:	53                   	push   ebx
c000be33:	8b 15 0c 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028b0c
c000be39:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000be3d:	b8 01 00 00 00       	mov    eax,0x1
c000be42:	89 cb                	mov    ebx,ecx
c000be44:	d3 e0                	shl    eax,cl
c000be46:	c1 eb 05             	shr    ebx,0x5
c000be49:	f7 d0                	not    eax
c000be4b:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000be4e:	5b                   	pop    ebx
c000be4f:	c3                   	ret    

c000be50 <Virt::swapIDToSector(unsigned long)>:
c000be50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be54:	0f af 05 2c 7e 02 c0 	imul   eax,DWORD PTR ds:0xc0027e2c
c000be5b:	03 05 34 7e 02 c0    	add    eax,DWORD PTR ds:0xc0027e34
c000be61:	c3                   	ret    

c000be62 <Virt::allocateSwapfilePage()>:
c000be62:	55                   	push   ebp
c000be63:	31 d2                	xor    edx,edx
c000be65:	57                   	push   edi
c000be66:	56                   	push   esi
c000be67:	53                   	push   ebx
c000be68:	83 ec 0c             	sub    esp,0xc
c000be6b:	8b 0d 2c 7e 02 c0    	mov    ecx,DWORD PTR ds:0xc0027e2c
c000be71:	a1 30 7e 02 c0       	mov    eax,ds:0xc0027e30
c000be76:	f7 f1                	div    ecx
c000be78:	39 0d 30 7e 02 c0    	cmp    DWORD PTR ds:0xc0027e30,ecx
c000be7e:	72 2d                	jb     c000bead <Virt::allocateSwapfilePage()+0x4b>
c000be80:	8b 35 0c 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028b0c
c000be86:	8b 16                	mov    edx,DWORD PTR [esi]
c000be88:	f6 c2 01             	test   dl,0x1
c000be8b:	74 3c                	je     c000bec9 <Virt::allocateSwapfilePage()+0x67>
c000be8d:	31 c9                	xor    ecx,ecx
c000be8f:	bf 01 00 00 00       	mov    edi,0x1
c000be94:	eb 12                	jmp    c000bea8 <Virt::allocateSwapfilePage()+0x46>
c000be96:	89 fd                	mov    ebp,edi
c000be98:	89 ca                	mov    edx,ecx
c000be9a:	d3 e5                	shl    ebp,cl
c000be9c:	c1 ea 05             	shr    edx,0x5
c000be9f:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000bea2:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bea4:	85 ea                	test   edx,ebp
c000bea6:	74 2a                	je     c000bed2 <Virt::allocateSwapfilePage()+0x70>
c000bea8:	41                   	inc    ecx
c000bea9:	39 c8                	cmp    eax,ecx
c000beab:	77 e9                	ja     c000be96 <Virt::allocateSwapfilePage()+0x34>
c000bead:	83 ec 0c             	sub    esp,0xc
c000beb0:	68 2c 4e 02 c0       	push   0xc0024e2c
c000beb5:	e8 6f 92 00 00       	call   c0015129 <Krnl::panic(char const*)>
c000beba:	83 c4 10             	add    esp,0x10
c000bebd:	31 c9                	xor    ecx,ecx
c000bebf:	83 c4 0c             	add    esp,0xc
c000bec2:	89 c8                	mov    eax,ecx
c000bec4:	5b                   	pop    ebx
c000bec5:	5e                   	pop    esi
c000bec6:	5f                   	pop    edi
c000bec7:	5d                   	pop    ebp
c000bec8:	c3                   	ret    
c000bec9:	89 f3                	mov    ebx,esi
c000becb:	bd 01 00 00 00       	mov    ebp,0x1
c000bed0:	31 c9                	xor    ecx,ecx
c000bed2:	09 ea                	or     edx,ebp
c000bed4:	89 c8                	mov    eax,ecx
c000bed6:	89 13                	mov    DWORD PTR [ebx],edx
c000bed8:	83 c4 0c             	add    esp,0xc
c000bedb:	5b                   	pop    ebx
c000bedc:	5e                   	pop    esi
c000bedd:	5f                   	pop    edi
c000bede:	5d                   	pop    ebp
c000bedf:	c3                   	ret    

c000bee0 <Virt::virtualMemorySetup()>:
c000bee0:	53                   	push   ebx
c000bee1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bee6:	6a 0f                	push   0xf
c000bee8:	53                   	push   ebx
c000bee9:	43                   	inc    ebx
c000beea:	e8 d9 fd ff ff       	call   c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000beef:	58                   	pop    eax
c000bef0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bef6:	5a                   	pop    edx
c000bef7:	75 ed                	jne    c000bee6 <Virt::virtualMemorySetup()+0x6>
c000bef9:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000befe:	6a 00                	push   0x0
c000bf00:	53                   	push   ebx
c000bf01:	43                   	inc    ebx
c000bf02:	e8 c1 fd ff ff       	call   c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bf07:	59                   	pop    ecx
c000bf08:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bf0e:	58                   	pop    eax
c000bf0f:	75 ed                	jne    c000befe <Virt::virtualMemorySetup()+0x1e>
c000bf11:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000bf16:	6a 0f                	push   0xf
c000bf18:	53                   	push   ebx
c000bf19:	43                   	inc    ebx
c000bf1a:	e8 a9 fd ff ff       	call   c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bf1f:	58                   	pop    eax
c000bf20:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000bf26:	5a                   	pop    edx
c000bf27:	75 ed                	jne    c000bf16 <Virt::virtualMemorySetup()+0x36>
c000bf29:	5b                   	pop    ebx
c000bf2a:	c3                   	ret    

c000bf2b <Virt::setupPageSwapping(int)>:
c000bf2b:	53                   	push   ebx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bf33:	a1 a8 8f 02 c0       	mov    eax,ds:0xc0028fa8
c000bf38:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000bf3e:	8b 10                	mov    edx,DWORD PTR [eax]
c000bf40:	53                   	push   ebx
c000bf41:	c1 e3 0b             	shl    ebx,0xb
c000bf44:	68 43 4e 02 c0       	push   0xc0024e43
c000bf49:	50                   	push   eax
c000bf4a:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000bf4d:	89 1d 30 7e 02 c0    	mov    DWORD PTR ds:0xc0027e30,ebx
c000bf53:	c6 05 38 7e 02 c0 43 	mov    BYTE PTR ds:0xc0027e38,0x43
c000bf5a:	c1 eb 08             	shr    ebx,0x8
c000bf5d:	a3 34 7e 02 c0       	mov    ds:0xc0027e34,eax
c000bf62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bf65:	c7 05 2c 7e 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0027e2c,0x8
c000bf6f:	e8 e7 dd ff ff       	call   c0009d5b <malloc>
c000bf74:	83 c4 0c             	add    esp,0xc
c000bf77:	89 c1                	mov    ecx,eax
c000bf79:	a3 0c 8b 02 c0       	mov    ds:0xc0028b0c,eax
c000bf7e:	31 d2                	xor    edx,edx
c000bf80:	a1 30 7e 02 c0       	mov    eax,ds:0xc0027e30
c000bf85:	f7 35 2c 7e 02 c0    	div    DWORD PTR ds:0xc0027e2c
c000bf8b:	c1 e8 05             	shr    eax,0x5
c000bf8e:	50                   	push   eax
c000bf8f:	6a 00                	push   0x0
c000bf91:	51                   	push   ecx
c000bf92:	e8 ed 46 ff ff       	call   c0000684 <memset>
c000bf97:	83 c4 18             	add    esp,0x18
c000bf9a:	5b                   	pop    ebx
c000bf9b:	c3                   	ret    

c000bf9c <VAS::VAS()>:
c000bf9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfa0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bfa7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfab:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bfb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfb6:	a3 10 8b 02 c0       	mov    ds:0xc0028b10,eax
c000bfbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfbf:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000bfc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfc7:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000bfca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfce:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000bfd5:	90                   	nop
c000bfd6:	c3                   	ret    
c000bfd7:	90                   	nop

c000bfd8 <VAS::VAS(VAS*)>:
c000bfd8:	83 ec 0c             	sub    esp,0xc
c000bfdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfdf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bfe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfea:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bff1:	83 ec 0c             	sub    esp,0xc
c000bff4:	68 94 4c 02 c0       	push   0xc0024c94
c000bff9:	e8 2b 91 00 00       	call   c0015129 <Krnl::panic(char const*)>
c000bffe:	83 c4 10             	add    esp,0x10
c000c001:	90                   	nop
c000c002:	83 c4 0c             	add    esp,0xc
c000c005:	c3                   	ret    

c000c006 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000c006:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c00a:	89 c2                	mov    edx,eax
c000c00c:	c1 e8 0a             	shr    eax,0xa
c000c00f:	c1 ea 16             	shr    edx,0x16
c000c012:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000c017:	19 c9                	sbb    ecx,ecx
c000c019:	c1 e2 0c             	shl    edx,0xc
c000c01c:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000c022:	25 fc 0f 00 00       	and    eax,0xffc
c000c027:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000c02e:	01 d0                	add    eax,edx
c000c030:	c3                   	ret    
c000c031:	90                   	nop

c000c032 <VAS::getPageTableEntry(unsigned long)>:
c000c032:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c036:	89 ca                	mov    edx,ecx
c000c038:	c1 e9 0a             	shr    ecx,0xa
c000c03b:	c1 ea 16             	shr    edx,0x16
c000c03e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000c044:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000c04a:	c1 e0 0c             	shl    eax,0xc
c000c04d:	8d 04 08             	lea    eax,[eax+ecx*1]
c000c050:	c3                   	ret    

c000c051 <Virt::freeKernelVirtualPages(unsigned long)>:
c000c051:	57                   	push   edi
c000c052:	56                   	push   esi
c000c053:	be 01 00 00 00       	mov    esi,0x1
c000c058:	53                   	push   ebx
c000c059:	83 ec 10             	sub    esp,0x10
c000c05c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c060:	c1 eb 0c             	shr    ebx,0xc
c000c063:	eb 3f                	jmp    c000c0a4 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000c065:	83 ec 08             	sub    esp,0x8
c000c068:	57                   	push   edi
c000c069:	ff 35 10 8b 02 c0    	push   DWORD PTR ds:0xc0028b10
c000c06f:	e8 be ff ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c000c074:	83 c4 10             	add    esp,0x10
c000c077:	8b 00                	mov    eax,DWORD PTR [eax]
c000c079:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c07d:	f6 c4 04             	test   ah,0x4
c000c080:	75 5f                	jne    c000c0e1 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000c082:	80 fa 04             	cmp    dl,0x4
c000c085:	74 78                	je     c000c0ff <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000c087:	80 fa 02             	cmp    dl,0x2
c000c08a:	0f 84 88 00 00 00    	je     c000c118 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000c090:	80 fa 03             	cmp    dl,0x3
c000c093:	0f 84 ad 00 00 00    	je     c000c146 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000c099:	fe ca                	dec    dl
c000c09b:	0f 84 92 00 00 00    	je     c000c133 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c0a1:	43                   	inc    ebx
c000c0a2:	31 f6                	xor    esi,esi
c000c0a4:	53                   	push   ebx
c000c0a5:	89 df                	mov    edi,ebx
c000c0a7:	e8 51 fc ff ff       	call   c000bcfd <Virt::getPageState(unsigned long)>
c000c0ac:	c1 e7 0c             	shl    edi,0xc
c000c0af:	59                   	pop    ecx
c000c0b0:	84 c0                	test   al,al
c000c0b2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000c0b6:	75 ad                	jne    c000c065 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000c0b8:	83 ec 0c             	sub    esp,0xc
c000c0bb:	68 5a 4e 02 c0       	push   0xc0024e5a
c000c0c0:	e8 64 90 00 00       	call   c0015129 <Krnl::panic(char const*)>
c000c0c5:	58                   	pop    eax
c000c0c6:	5a                   	pop    edx
c000c0c7:	57                   	push   edi
c000c0c8:	ff 35 10 8b 02 c0    	push   DWORD PTR ds:0xc0028b10
c000c0ce:	e8 5f ff ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0d8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c0dc:	f6 c4 04             	test   ah,0x4
c000c0df:	74 c0                	je     c000c0a1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c0e1:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000c0e5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c0ea:	83 ec 0c             	sub    esp,0xc
c000c0ed:	50                   	push   eax
c000c0ee:	e8 9c e2 ff ff       	call   c000a38f <Phys::freePage(unsigned long)>
c000c0f3:	83 c4 10             	add    esp,0x10
c000c0f6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c0fa:	80 fa 04             	cmp    dl,0x4
c000c0fd:	75 88                	jne    c000c087 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000c0ff:	89 f0                	mov    eax,esi
c000c101:	84 c0                	test   al,al
c000c103:	75 47                	jne    c000c14c <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000c105:	c7 44 24 20 b8 4c 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024cb8
c000c10d:	83 c4 10             	add    esp,0x10
c000c110:	5b                   	pop    ebx
c000c111:	5e                   	pop    esi
c000c112:	5f                   	pop    edi
c000c113:	e9 11 90 00 00       	jmp    c0015129 <Krnl::panic(char const*)>
c000c118:	89 f0                	mov    eax,esi
c000c11a:	84 c0                	test   al,al
c000c11c:	75 15                	jne    c000c133 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c11e:	83 ec 0c             	sub    esp,0xc
c000c121:	68 76 4e 02 c0       	push   0xc0024e76
c000c126:	e8 fe 8f 00 00       	call   c0015129 <Krnl::panic(char const*)>
c000c12b:	83 c4 10             	add    esp,0x10
c000c12e:	e9 6e ff ff ff       	jmp    c000c0a1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c133:	83 ec 08             	sub    esp,0x8
c000c136:	6a 00                	push   0x0
c000c138:	53                   	push   ebx
c000c139:	e8 8a fb ff ff       	call   c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c13e:	83 c4 10             	add    esp,0x10
c000c141:	e9 5b ff ff ff       	jmp    c000c0a1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c146:	89 f0                	mov    eax,esi
c000c148:	84 c0                	test   al,al
c000c14a:	75 15                	jne    c000c161 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000c14c:	83 ec 08             	sub    esp,0x8
c000c14f:	6a 00                	push   0x0
c000c151:	53                   	push   ebx
c000c152:	e8 71 fb ff ff       	call   c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c157:	83 c4 10             	add    esp,0x10
c000c15a:	83 c4 10             	add    esp,0x10
c000c15d:	5b                   	pop    ebx
c000c15e:	5e                   	pop    esi
c000c15f:	5f                   	pop    edi
c000c160:	c3                   	ret    
c000c161:	c7 44 24 20 92 4e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024e92
c000c169:	83 c4 10             	add    esp,0x10
c000c16c:	5b                   	pop    ebx
c000c16d:	5e                   	pop    esi
c000c16e:	5f                   	pop    edi
c000c16f:	e9 b5 8f 00 00       	jmp    c0015129 <Krnl::panic(char const*)>

c000c174 <VAS::freeAllocatedPages(unsigned long)>:
c000c174:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c178:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c17c:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000c180:	74 09                	je     c000c18b <VAS::freeAllocatedPages(unsigned long)+0x17>
c000c182:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c186:	e9 c6 fe ff ff       	jmp    c000c051 <Virt::freeKernelVirtualPages(unsigned long)>
c000c18b:	c7 44 24 04 dc 4c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024cdc
c000c193:	e9 af 0e 00 00       	jmp    c000d047 <Dbg::kprintf(char const*, ...)>

c000c198 <VAS::virtualToPhysical(unsigned long)>:
c000c198:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c19c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c1a0:	e8 8d fe ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c000c1a5:	5a                   	pop    edx
c000c1a6:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1a8:	59                   	pop    ecx
c000c1a9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c1ae:	c3                   	ret    
c000c1af:	90                   	nop

c000c1b0 <VAS::reflagRange(unsigned long, int, int, int)>:
c000c1b0:	55                   	push   ebp
c000c1b1:	57                   	push   edi
c000c1b2:	56                   	push   esi
c000c1b3:	53                   	push   ebx
c000c1b4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c1b8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000c1bc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c1c0:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c1c4:	85 db                	test   ebx,ebx
c000c1c6:	7e 22                	jle    c000c1ea <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000c1c8:	c1 e3 0c             	shl    ebx,0xc
c000c1cb:	01 f3                	add    ebx,esi
c000c1cd:	56                   	push   esi
c000c1ce:	81 c6 00 10 00 00    	add    esi,0x1000
c000c1d4:	55                   	push   ebp
c000c1d5:	e8 58 fe ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c000c1da:	5a                   	pop    edx
c000c1db:	59                   	pop    ecx
c000c1dc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c1de:	21 f9                	and    ecx,edi
c000c1e0:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000c1e4:	39 f3                	cmp    ebx,esi
c000c1e6:	89 08                	mov    DWORD PTR [eax],ecx
c000c1e8:	75 e3                	jne    c000c1cd <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000c1ea:	5b                   	pop    ebx
c000c1eb:	5e                   	pop    esi
c000c1ec:	5f                   	pop    edi
c000c1ed:	5d                   	pop    ebp
c000c1ee:	c3                   	ret    
c000c1ef:	90                   	nop

c000c1f0 <VAS::setToWriteCombining(unsigned long, int)>:
c000c1f0:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c000c1f5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c1fb:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000c202:	75 01                	jne    c000c205 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000c204:	c3                   	ret    
c000c205:	68 80 00 00 00       	push   0x80
c000c20a:	6a ff                	push   0xffffffff
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	e8 93 ff ff ff       	call   c000c1b0 <VAS::reflagRange(unsigned long, int, int, int)>
c000c21d:	83 c4 14             	add    esp,0x14
c000c220:	c3                   	ret    
c000c221:	90                   	nop

c000c222 <VAS::mapOtherVASIn(bool, VAS*)>:
c000c222:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000c227:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c22b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c22e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c232:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000c235:	19 c0                	sbb    eax,eax
c000c237:	83 ca 03             	or     edx,0x3
c000c23a:	83 e0 fc             	and    eax,0xfffffffc
c000c23d:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000c244:	0f 20 d8             	mov    eax,cr3
c000c247:	0f 22 d8             	mov    cr3,eax
c000c24a:	c3                   	ret    
c000c24b:	90                   	nop

c000c24c <VAS::~VAS()>:
c000c24c:	83 ec 2c             	sub    esp,0x2c
c000c24f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c257:	fa                   	cli    
c000c258:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c000c25d:	40                   	inc    eax
c000c25e:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c000c263:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c268:	8b 00                	mov    eax,DWORD PTR [eax]
c000c26a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c26d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c273:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c277:	6a 01                	push   0x1
c000c279:	50                   	push   eax
c000c27a:	e8 a3 ff ff ff       	call   c000c222 <VAS::mapOtherVASIn(bool, VAS*)>
c000c27f:	83 c4 0c             	add    esp,0xc
c000c282:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c28a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000c292:	0f 8f d4 00 00 00    	jg     c000c36c <VAS::~VAS()+0x120>
c000c298:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c29c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c29f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c2a3:	c1 e2 02             	shl    edx,0x2
c000c2a6:	01 d0                	add    eax,edx
c000c2a8:	8b 00                	mov    eax,DWORD PTR [eax]
c000c2aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c2ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2b2:	83 e0 01             	and    eax,0x1
c000c2b5:	0f 84 a8 00 00 00    	je     c000c363 <VAS::~VAS()+0x117>
c000c2bb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c2c3:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000c2cb:	7f 72                	jg     c000c33f <VAS::~VAS()+0xf3>
c000c2cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c2d1:	c1 e0 0a             	shl    eax,0xa
c000c2d4:	89 c2                	mov    edx,eax
c000c2d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c2da:	01 d0                	add    eax,edx
c000c2dc:	c1 e0 0c             	shl    eax,0xc
c000c2df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c2e3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c2e8:	8b 00                	mov    eax,DWORD PTR [eax]
c000c2ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c2ed:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c2f3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2f7:	6a 01                	push   0x1
c000c2f9:	50                   	push   eax
c000c2fa:	e8 07 fd ff ff       	call   c000c006 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000c2ff:	83 c4 0c             	add    esp,0xc
c000c302:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c306:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c30a:	8b 00                	mov    eax,DWORD PTR [eax]
c000c30c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c314:	25 01 04 00 00       	and    eax,0x401
c000c319:	3d 01 04 00 00       	cmp    eax,0x401
c000c31e:	75 19                	jne    c000c339 <VAS::~VAS()+0xed>
c000c320:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c324:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c329:	83 ec 0c             	sub    esp,0xc
c000c32c:	50                   	push   eax
c000c32d:	e8 5d e0 ff ff       	call   c000a38f <Phys::freePage(unsigned long)>
c000c332:	83 c4 10             	add    esp,0x10
c000c335:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c339:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c33d:	eb 84                	jmp    c000c2c3 <VAS::~VAS()+0x77>
c000c33f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c343:	25 00 04 00 00       	and    eax,0x400
c000c348:	74 19                	je     c000c363 <VAS::~VAS()+0x117>
c000c34a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c34e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c353:	83 ec 0c             	sub    esp,0xc
c000c356:	50                   	push   eax
c000c357:	e8 33 e0 ff ff       	call   c000a38f <Phys::freePage(unsigned long)>
c000c35c:	83 c4 10             	add    esp,0x10
c000c35f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c363:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c367:	e9 1e ff ff ff       	jmp    c000c28a <VAS::~VAS()+0x3e>
c000c36c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c370:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c373:	83 ec 0c             	sub    esp,0xc
c000c376:	50                   	push   eax
c000c377:	e8 d5 fc ff ff       	call   c000c051 <Virt::freeKernelVirtualPages(unsigned long)>
c000c37c:	83 c4 10             	add    esp,0x10
c000c37f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c383:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c386:	83 ec 0c             	sub    esp,0xc
c000c389:	50                   	push   eax
c000c38a:	e8 00 e0 ff ff       	call   c000a38f <Phys::freePage(unsigned long)>
c000c38f:	83 c4 10             	add    esp,0x10
c000c392:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c396:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c39a:	c1 e0 02             	shl    eax,0x2
c000c39d:	83 ec 08             	sub    esp,0x8
c000c3a0:	50                   	push   eax
c000c3a1:	68 00 4d 02 c0       	push   0xc0024d00
c000c3a6:	e8 9c 0c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000c3ab:	83 c4 10             	add    esp,0x10
c000c3ae:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c000c3b3:	48                   	dec    eax
c000c3b4:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c000c3b9:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c000c3be:	85 c0                	test   eax,eax
c000c3c0:	75 01                	jne    c000c3c3 <VAS::~VAS()+0x177>
c000c3c2:	fb                   	sti    
c000c3c3:	90                   	nop
c000c3c4:	83 c4 2c             	add    esp,0x2c
c000c3c7:	c3                   	ret    

c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000c3c8:	55                   	push   ebp
c000c3c9:	57                   	push   edi
c000c3ca:	56                   	push   esi
c000c3cb:	53                   	push   ebx
c000c3cc:	83 ec 1c             	sub    esp,0x1c
c000c3cf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c3d3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c3d7:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000c3dd:	77 08                	ja     c000c3e7 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000c3df:	0f 20 d8             	mov    eax,cr3
c000c3e2:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000c3e5:	75 47                	jne    c000c42e <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000c3e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c3eb:	09 d8                	or     eax,ebx
c000c3ed:	a9 ff 0f 00 00       	test   eax,0xfff
c000c3f2:	75 57                	jne    c000c44b <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000c3f4:	89 de                	mov    esi,ebx
c000c3f6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c3f9:	c1 ee 16             	shr    esi,0x16
c000c3fc:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000c403:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000c407:	74 54                	je     c000c45d <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000c409:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c40d:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000c413:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c417:	c1 e6 0c             	shl    esi,0xc
c000c41a:	c1 eb 0a             	shr    ebx,0xa
c000c41d:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000c423:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000c426:	83 c4 1c             	add    esp,0x1c
c000c429:	5b                   	pop    ebx
c000c42a:	5e                   	pop    esi
c000c42b:	5f                   	pop    edi
c000c42c:	5d                   	pop    ebp
c000c42d:	c3                   	ret    
c000c42e:	83 ec 0c             	sub    esp,0xc
c000c431:	68 20 4d 02 c0       	push   0xc0024d20
c000c436:	e8 0c 0c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000c43b:	83 c4 10             	add    esp,0x10
c000c43e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c442:	09 d8                	or     eax,ebx
c000c444:	a9 ff 0f 00 00       	test   eax,0xfff
c000c449:	74 a9                	je     c000c3f4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c44b:	83 ec 0c             	sub    esp,0xc
c000c44e:	68 88 4d 02 c0       	push   0xc0024d88
c000c453:	e8 d1 8c 00 00       	call   c0015129 <Krnl::panic(char const*)>
c000c458:	83 c4 10             	add    esp,0x10
c000c45b:	eb 97                	jmp    c000c3f4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c45d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c461:	e8 ac df ff ff       	call   c000a412 <Phys::allocatePage()>
c000c466:	83 ec 0c             	sub    esp,0xc
c000c469:	89 c5                	mov    ebp,eax
c000c46b:	8b 0d 10 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028b10
c000c471:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c475:	6a 01                	push   0x1
c000c477:	e8 a5 f8 ff ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c000c47c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c483:	6a 01                	push   0x1
c000c485:	50                   	push   eax
c000c486:	55                   	push   ebp
c000c487:	81 cd 07 04 00 00    	or     ebp,0x407
c000c48d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c491:	51                   	push   ecx
c000c492:	e8 27 02 00 00       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c497:	83 c4 1c             	add    esp,0x1c
c000c49a:	68 00 10 00 00       	push   0x1000
c000c49f:	6a 00                	push   0x0
c000c4a1:	50                   	push   eax
c000c4a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4a6:	e8 d9 41 ff ff       	call   c0000684 <memset>
c000c4ab:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c4af:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c4b2:	e8 9a fb ff ff       	call   c000c051 <Virt::freeKernelVirtualPages(unsigned long)>
c000c4b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c4bb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c4be:	83 c4 10             	add    esp,0x10
c000c4c1:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c4c4:	e9 40 ff ff ff       	jmp    c000c409 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000c4c9:	90                   	nop

c000c4ca <VAS::allocatePages(int, int)>:
c000c4ca:	55                   	push   ebp
c000c4cb:	57                   	push   edi
c000c4cc:	56                   	push   esi
c000c4cd:	53                   	push   ebx
c000c4ce:	83 ec 1c             	sub    esp,0x1c
c000c4d1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c4d5:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c000c4da:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c4e0:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c4e6:	83 e0 01             	and    eax,0x1
c000c4e9:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c4ed:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c4f1:	0f 85 cc 00 00 00    	jne    c000c5c3 <VAS::allocatePages(int, int)+0xf9>
c000c4f7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c4fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c4fe:	85 c0                	test   eax,eax
c000c500:	0f 84 a1 00 00 00    	je     c000c5a7 <VAS::allocatePages(int, int)+0xdd>
c000c506:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c50a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c50e:	c1 e6 0c             	shl    esi,0xc
c000c511:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c515:	85 c0                	test   eax,eax
c000c517:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c51a:	7e 33                	jle    c000c54f <VAS::allocatePages(int, int)+0x85>
c000c51c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c520:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c524:	81 cd 00 04 00 00    	or     ebp,0x400
c000c52a:	e8 e3 de ff ff       	call   c000a412 <Phys::allocatePage()>
c000c52f:	55                   	push   ebp
c000c530:	53                   	push   ebx
c000c531:	50                   	push   eax
c000c532:	57                   	push   edi
c000c533:	e8 90 fe ff ff       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c538:	83 c4 10             	add    esp,0x10
c000c53b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c540:	74 03                	je     c000c545 <VAS::allocatePages(int, int)+0x7b>
c000c542:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c545:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c54b:	39 de                	cmp    esi,ebx
c000c54d:	75 db                	jne    c000c52a <VAS::allocatePages(int, int)+0x60>
c000c54f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c554:	75 12                	jne    c000c568 <VAS::allocatePages(int, int)+0x9e>
c000c556:	0f 20 d8             	mov    eax,cr3
c000c559:	0f 22 d8             	mov    cr3,eax
c000c55c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c560:	83 c4 1c             	add    esp,0x1c
c000c563:	5b                   	pop    ebx
c000c564:	5e                   	pop    esi
c000c565:	5f                   	pop    edi
c000c566:	5d                   	pop    ebp
c000c567:	c3                   	ret    
c000c568:	c1 ee 0a             	shr    esi,0xa
c000c56b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c56f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c575:	c1 eb 0a             	shr    ebx,0xa
c000c578:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c57e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c584:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c58a:	39 c3                	cmp    ebx,eax
c000c58c:	77 ce                	ja     c000c55c <VAS::allocatePages(int, int)+0x92>
c000c58e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c591:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c597:	39 d8                	cmp    eax,ebx
c000c599:	73 f3                	jae    c000c58e <VAS::allocatePages(int, int)+0xc4>
c000c59b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c59f:	83 c4 1c             	add    esp,0x1c
c000c5a2:	5b                   	pop    ebx
c000c5a3:	5e                   	pop    esi
c000c5a4:	5f                   	pop    edi
c000c5a5:	5d                   	pop    ebp
c000c5a6:	c3                   	ret    
c000c5a7:	83 ec 0c             	sub    esp,0xc
c000c5aa:	68 ac 4d 02 c0       	push   0xc0024dac
c000c5af:	e8 75 8b 00 00       	call   c0015129 <Krnl::panic(char const*)>
c000c5b4:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c5b7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c5bb:	83 c4 10             	add    esp,0x10
c000c5be:	e9 43 ff ff ff       	jmp    c000c506 <VAS::allocatePages(int, int)+0x3c>
c000c5c3:	83 ec 0c             	sub    esp,0xc
c000c5c6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c5ca:	e8 52 f7 ff ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c000c5cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c5d3:	83 c4 10             	add    esp,0x10
c000c5d6:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c5db:	0f 87 9b 00 00 00    	ja     c000c67c <VAS::allocatePages(int, int)+0x1b2>
c000c5e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c5e5:	85 d2                	test   edx,edx
c000c5e7:	7e 3c                	jle    c000c625 <VAS::allocatePages(int, int)+0x15b>
c000c5e9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c5ed:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c5f1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c5f5:	c1 e5 0c             	shl    ebp,0xc
c000c5f8:	81 ce 00 04 00 00    	or     esi,0x400
c000c5fe:	01 dd                	add    ebp,ebx
c000c600:	e8 0d de ff ff       	call   c000a412 <Phys::allocatePage()>
c000c605:	56                   	push   esi
c000c606:	53                   	push   ebx
c000c607:	50                   	push   eax
c000c608:	57                   	push   edi
c000c609:	e8 ba fd ff ff       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c60e:	83 c4 10             	add    esp,0x10
c000c611:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c616:	74 03                	je     c000c61b <VAS::allocatePages(int, int)+0x151>
c000c618:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c61b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c621:	39 dd                	cmp    ebp,ebx
c000c623:	75 db                	jne    c000c600 <VAS::allocatePages(int, int)+0x136>
c000c625:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c62a:	0f 84 26 ff ff ff    	je     c000c556 <VAS::allocatePages(int, int)+0x8c>
c000c630:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c634:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c638:	89 d3                	mov    ebx,edx
c000c63a:	c1 e0 0c             	shl    eax,0xc
c000c63d:	c1 eb 0a             	shr    ebx,0xa
c000c640:	01 d0                	add    eax,edx
c000c642:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c648:	c1 e8 0a             	shr    eax,0xa
c000c64b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c651:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c656:	2d 00 00 40 00       	sub    eax,0x400000
c000c65b:	39 c3                	cmp    ebx,eax
c000c65d:	0f 87 f9 fe ff ff    	ja     c000c55c <VAS::allocatePages(int, int)+0x92>
c000c663:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c666:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c66c:	39 d8                	cmp    eax,ebx
c000c66e:	73 f3                	jae    c000c663 <VAS::allocatePages(int, int)+0x199>
c000c670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c674:	83 c4 1c             	add    esp,0x1c
c000c677:	5b                   	pop    ebx
c000c678:	5e                   	pop    esi
c000c679:	5f                   	pop    edi
c000c67a:	5d                   	pop    ebp
c000c67b:	c3                   	ret    
c000c67c:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c000c681:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c687:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c68e:	0f 84 4d ff ff ff    	je     c000c5e1 <VAS::allocatePages(int, int)+0x117>
c000c694:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c69c:	e9 40 ff ff ff       	jmp    c000c5e1 <VAS::allocatePages(int, int)+0x117>
c000c6a1:	90                   	nop

c000c6a2 <VAS::setCPUSpecific(unsigned long)>:
c000c6a2:	83 ec 0c             	sub    esp,0xc
c000c6a5:	6a 05                	push   0x5
c000c6a7:	68 00 00 40 c2       	push   0xc2400000
c000c6ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6b4:	e8 0f fd ff ff       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c6b9:	83 c4 1c             	add    esp,0x1c
c000c6bc:	c3                   	ret    
c000c6bd:	90                   	nop

c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c6be:	55                   	push   ebp
c000c6bf:	57                   	push   edi
c000c6c0:	56                   	push   esi
c000c6c1:	53                   	push   ebx
c000c6c2:	83 ec 1c             	sub    esp,0x1c
c000c6c5:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c000c6ca:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c6ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6d4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c6d8:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c6de:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c6e2:	83 e0 01             	and    eax,0x1
c000c6e5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c6e9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c6ed:	85 c0                	test   eax,eax
c000c6ef:	7e 39                	jle    c000c72a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c6f1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c6f5:	89 f3                	mov    ebx,esi
c000c6f7:	c1 e0 0c             	shl    eax,0xc
c000c6fa:	01 f0                	add    eax,esi
c000c6fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c700:	55                   	push   ebp
c000c701:	53                   	push   ebx
c000c702:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c706:	29 f0                	sub    eax,esi
c000c708:	01 d8                	add    eax,ebx
c000c70a:	50                   	push   eax
c000c70b:	57                   	push   edi
c000c70c:	e8 b7 fc ff ff       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c711:	83 c4 10             	add    esp,0x10
c000c714:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c719:	74 03                	je     c000c71e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c71b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c71e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c724:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c728:	75 d6                	jne    c000c700 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c72a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c72f:	75 10                	jne    c000c741 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c731:	0f 20 d8             	mov    eax,cr3
c000c734:	0f 22 d8             	mov    cr3,eax
c000c737:	83 c4 1c             	add    esp,0x1c
c000c73a:	89 f0                	mov    eax,esi
c000c73c:	5b                   	pop    ebx
c000c73d:	5e                   	pop    esi
c000c73e:	5f                   	pop    edi
c000c73f:	5d                   	pop    ebp
c000c740:	c3                   	ret    
c000c741:	89 f3                	mov    ebx,esi
c000c743:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c747:	c1 eb 0a             	shr    ebx,0xa
c000c74a:	c1 e0 0c             	shl    eax,0xc
c000c74d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c753:	01 f0                	add    eax,esi
c000c755:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c75b:	c1 e8 0a             	shr    eax,0xa
c000c75e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c763:	2d 00 00 40 00       	sub    eax,0x400000
c000c768:	39 c3                	cmp    ebx,eax
c000c76a:	77 cb                	ja     c000c737 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c76c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c76f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c775:	39 d8                	cmp    eax,ebx
c000c777:	73 f3                	jae    c000c76c <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c779:	83 c4 1c             	add    esp,0x1c
c000c77c:	89 f0                	mov    eax,esi
c000c77e:	5b                   	pop    ebx
c000c77f:	5e                   	pop    esi
c000c780:	5f                   	pop    edi
c000c781:	5d                   	pop    ebp
c000c782:	c3                   	ret    
c000c783:	90                   	nop

c000c784 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c784:	55                   	push   ebp
c000c785:	57                   	push   edi
c000c786:	56                   	push   esi
c000c787:	53                   	push   ebx
c000c788:	83 ec 1c             	sub    esp,0x1c
c000c78b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c78f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c793:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c797:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c79b:	a9 ff 0f 00 00       	test   eax,0xfff
c000c7a0:	75 4a                	jne    c000c7ec <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c7a2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c7a6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c7a9:	c1 eb 16             	shr    ebx,0x16
c000c7ac:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c7b3:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c7b7:	74 4d                	je     c000c806 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c7b9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c7bd:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c7c1:	c1 e8 0a             	shr    eax,0xa
c000c7c4:	80 fa 01             	cmp    dl,0x1
c000c7c7:	19 d2                	sbb    edx,edx
c000c7c9:	c1 e3 0c             	shl    ebx,0xc
c000c7cc:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c7d0:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c7d6:	25 fc 0f 00 00       	and    eax,0xffc
c000c7db:	01 d8                	add    eax,ebx
c000c7dd:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c7e4:	83 c4 1c             	add    esp,0x1c
c000c7e7:	5b                   	pop    ebx
c000c7e8:	5e                   	pop    esi
c000c7e9:	5f                   	pop    edi
c000c7ea:	5d                   	pop    ebp
c000c7eb:	c3                   	ret    
c000c7ec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c7f0:	83 ec 0c             	sub    esp,0xc
c000c7f3:	68 d8 4d 02 c0       	push   0xc0024dd8
c000c7f8:	e8 2c 89 00 00       	call   c0015129 <Krnl::panic(char const*)>
c000c7fd:	83 c4 10             	add    esp,0x10
c000c800:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c804:	eb 9c                	jmp    c000c7a2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c806:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c80a:	e8 03 dc ff ff       	call   c000a412 <Phys::allocatePage()>
c000c80f:	83 ec 0c             	sub    esp,0xc
c000c812:	89 c5                	mov    ebp,eax
c000c814:	8b 0d 10 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028b10
c000c81a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c81e:	6a 01                	push   0x1
c000c820:	e8 fc f4 ff ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c000c825:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c82c:	6a 01                	push   0x1
c000c82e:	50                   	push   eax
c000c82f:	55                   	push   ebp
c000c830:	81 cd 07 04 00 00    	or     ebp,0x407
c000c836:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c83a:	51                   	push   ecx
c000c83b:	e8 7e fe ff ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c840:	83 c4 1c             	add    esp,0x1c
c000c843:	68 00 10 00 00       	push   0x1000
c000c848:	6a 00                	push   0x0
c000c84a:	50                   	push   eax
c000c84b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c84f:	e8 30 3e ff ff       	call   c0000684 <memset>
c000c854:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c858:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c85b:	e8 f1 f7 ff ff       	call   c000c051 <Virt::freeKernelVirtualPages(unsigned long)>
c000c860:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c863:	83 c4 10             	add    esp,0x10
c000c866:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c869:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c86d:	e9 47 ff ff ff       	jmp    c000c7b9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c872 <VAS::VAS(bool)>:
c000c872:	53                   	push   ebx
c000c873:	83 ec 28             	sub    esp,0x28
c000c876:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c87a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c87e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c882:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c889:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c88d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c894:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c898:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c89c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c89f:	e8 6e db ff ff       	call   c000a412 <Phys::allocatePage()>
c000c8a4:	89 c2                	mov    edx,eax
c000c8a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8aa:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c8ad:	8b 1d 10 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b10
c000c8b3:	83 ec 0c             	sub    esp,0xc
c000c8b6:	6a 01                	push   0x1
c000c8b8:	e8 64 f4 ff ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c000c8bd:	83 c4 10             	add    esp,0x10
c000c8c0:	89 c2                	mov    edx,eax
c000c8c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c8c9:	83 ec 0c             	sub    esp,0xc
c000c8cc:	6a 03                	push   0x3
c000c8ce:	6a 01                	push   0x1
c000c8d0:	52                   	push   edx
c000c8d1:	50                   	push   eax
c000c8d2:	53                   	push   ebx
c000c8d3:	e8 e6 fd ff ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c8d8:	83 c4 20             	add    esp,0x20
c000c8db:	89 c2                	mov    edx,eax
c000c8dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8e1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c8e4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c8ec:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c8f4:	7f 1c                	jg     c000c912 <VAS::VAS(bool)+0xa0>
c000c8f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8fa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c8fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c901:	c1 e2 02             	shl    edx,0x2
c000c904:	01 d0                	add    eax,edx
c000c906:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c90c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c910:	eb da                	jmp    c000c8ec <VAS::VAS(bool)+0x7a>
c000c912:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c91a:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c922:	7f 7a                	jg     c000c99e <VAS::VAS(bool)+0x12c>
c000c924:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c928:	2d 00 02 00 00       	sub    eax,0x200
c000c92d:	c1 e0 0c             	shl    eax,0xc
c000c930:	83 c8 03             	or     eax,0x3
c000c933:	89 c2                	mov    edx,eax
c000c935:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c000c93a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c940:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c946:	83 e0 10             	and    eax,0x10
c000c949:	84 c0                	test   al,al
c000c94b:	74 07                	je     c000c954 <VAS::VAS(bool)+0xe2>
c000c94d:	b8 00 01 00 00       	mov    eax,0x100
c000c952:	eb 05                	jmp    c000c959 <VAS::VAS(bool)+0xe7>
c000c954:	b8 00 00 00 00       	mov    eax,0x0
c000c959:	09 d0                	or     eax,edx
c000c95b:	89 c1                	mov    ecx,eax
c000c95d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c961:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c964:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c968:	c1 e2 02             	shl    edx,0x2
c000c96b:	01 d0                	add    eax,edx
c000c96d:	89 ca                	mov    edx,ecx
c000c96f:	89 10                	mov    DWORD PTR [eax],edx
c000c971:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c975:	2d 40 03 00 00       	sub    eax,0x340
c000c97a:	83 f8 7f             	cmp    eax,0x7f
c000c97d:	77 16                	ja     c000c995 <VAS::VAS(bool)+0x123>
c000c97f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c983:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c986:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c98a:	c1 e2 02             	shl    edx,0x2
c000c98d:	01 d0                	add    eax,edx
c000c98f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c995:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c999:	e9 7c ff ff ff       	jmp    c000c91a <VAS::VAS(bool)+0xa8>
c000c99e:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c000c9a3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c9a9:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c9af:	83 e0 10             	and    eax,0x10
c000c9b2:	84 c0                	test   al,al
c000c9b4:	74 07                	je     c000c9bd <VAS::VAS(bool)+0x14b>
c000c9b6:	b8 03 41 00 00       	mov    eax,0x4103
c000c9bb:	eb 05                	jmp    c000c9c2 <VAS::VAS(bool)+0x150>
c000c9bd:	b8 03 40 00 00       	mov    eax,0x4003
c000c9c2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c9c6:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c9c9:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c9cf:	89 02                	mov    DWORD PTR [edx],eax
c000c9d1:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c000c9d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c9dc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c9e2:	83 ec 08             	sub    esp,0x8
c000c9e5:	50                   	push   eax
c000c9e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9ea:	e8 b3 fc ff ff       	call   c000c6a2 <VAS::setCPUSpecific(unsigned long)>
c000c9ef:	83 c4 10             	add    esp,0x10
c000c9f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9f6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c9f9:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c000c9fe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca04:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ca0a:	83 e0 10             	and    eax,0x10
c000ca0d:	84 c0                	test   al,al
c000ca0f:	74 07                	je     c000ca18 <VAS::VAS(bool)+0x1a6>
c000ca11:	b8 00 01 00 00       	mov    eax,0x100
c000ca16:	eb 05                	jmp    c000ca1d <VAS::VAS(bool)+0x1ab>
c000ca18:	b8 00 00 00 00       	mov    eax,0x0
c000ca1d:	09 c2                	or     edx,eax
c000ca1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca26:	05 fc 0f 00 00       	add    eax,0xffc
c000ca2b:	83 ca 03             	or     edx,0x3
c000ca2e:	89 10                	mov    DWORD PTR [eax],edx
c000ca30:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c000ca35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca3b:	83 ec 0c             	sub    esp,0xc
c000ca3e:	50                   	push   eax
c000ca3f:	e8 76 1e 00 00       	call   c000e8ba <Device::getName()>
c000ca44:	83 c4 10             	add    esp,0x10
c000ca47:	83 ec 08             	sub    esp,0x8
c000ca4a:	68 ac 4e 02 c0       	push   0xc0024eac
c000ca4f:	50                   	push   eax
c000ca50:	e8 77 3d ff ff       	call   c00007cc <strcmp>
c000ca55:	83 c4 10             	add    esp,0x10
c000ca58:	85 c0                	test   eax,eax
c000ca5a:	0f 94 c0             	sete   al
c000ca5d:	84 c0                	test   al,al
c000ca5f:	0f 84 87 00 00 00    	je     c000caec <VAS::VAS(bool)+0x27a>
c000ca65:	fa                   	cli    
c000ca66:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c000ca6b:	40                   	inc    eax
c000ca6c:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c000ca71:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c000ca76:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca7c:	05 7c 09 00 00       	add    eax,0x97c
c000ca81:	83 ec 0c             	sub    esp,0xc
c000ca84:	50                   	push   eax
c000ca85:	e8 c0 cd ff ff       	call   c000984a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ca8a:	83 c4 10             	add    esp,0x10
c000ca8d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ca92:	89 c3                	mov    ebx,eax
c000ca94:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c000ca99:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca9f:	05 7c 09 00 00       	add    eax,0x97c
c000caa4:	83 ec 0c             	sub    esp,0xc
c000caa7:	50                   	push   eax
c000caa8:	e8 9d cd ff ff       	call   c000984a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000caad:	83 c4 10             	add    esp,0x10
c000cab0:	83 ec 08             	sub    esp,0x8
c000cab3:	50                   	push   eax
c000cab4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cab8:	e8 75 f5 ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c000cabd:	83 c4 10             	add    esp,0x10
c000cac0:	8b 00                	mov    eax,DWORD PTR [eax]
c000cac2:	25 00 f0 ff ff       	and    eax,0xfffff000
c000cac7:	6a 11                	push   0x11
c000cac9:	53                   	push   ebx
c000caca:	50                   	push   eax
c000cacb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cacf:	e8 f4 f8 ff ff       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000cad4:	83 c4 10             	add    esp,0x10
c000cad7:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c000cadc:	48                   	dec    eax
c000cadd:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c000cae2:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c000cae7:	85 c0                	test   eax,eax
c000cae9:	75 01                	jne    c000caec <VAS::VAS(bool)+0x27a>
c000caeb:	fb                   	sti    
c000caec:	90                   	nop
c000caed:	83 c4 28             	add    esp,0x28
c000caf0:	5b                   	pop    ebx
c000caf1:	c3                   	ret    

c000caf2 <VAS::evict(unsigned long)>:
c000caf2:	55                   	push   ebp
c000caf3:	57                   	push   edi
c000caf4:	56                   	push   esi
c000caf5:	53                   	push   ebx
c000caf6:	83 ec 1c             	sub    esp,0x1c
c000caf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cafd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cb01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb05:	e8 58 f3 ff ff       	call   c000be62 <Virt::allocateSwapfilePage()>
c000cb0a:	89 c7                	mov    edi,eax
c000cb0c:	a1 2c 7e 02 c0       	mov    eax,ds:0xc0027e2c
c000cb11:	85 c0                	test   eax,eax
c000cb13:	7e 3d                	jle    c000cb52 <VAS::evict(unsigned long)+0x60>
c000cb15:	89 ee                	mov    esi,ebp
c000cb17:	31 db                	xor    ebx,ebx
c000cb19:	83 ec 0c             	sub    esp,0xc
c000cb1c:	57                   	push   edi
c000cb1d:	e8 2e f3 ff ff       	call   c000be50 <Virt::swapIDToSector(unsigned long)>
c000cb22:	89 34 24             	mov    DWORD PTR [esp],esi
c000cb25:	01 d8                	add    eax,ebx
c000cb27:	6a 01                	push   0x1
c000cb29:	31 d2                	xor    edx,edx
c000cb2b:	43                   	inc    ebx
c000cb2c:	52                   	push   edx
c000cb2d:	81 c6 00 02 00 00    	add    esi,0x200
c000cb33:	50                   	push   eax
c000cb34:	0f be 05 38 7e 02 c0 	movsx  eax,BYTE PTR ds:0xc0027e38
c000cb3b:	ff 34 85 9c 8e 02 c0 	push   DWORD PTR [eax*4-0x3ffd7164]
c000cb42:	e8 ef 3e 00 00       	call   c0010a36 <LogicalDisk::write(unsigned long long, int, void*)>
c000cb47:	83 c4 20             	add    esp,0x20
c000cb4a:	39 1d 2c 7e 02 c0    	cmp    DWORD PTR ds:0xc0027e2c,ebx
c000cb50:	7f c7                	jg     c000cb19 <VAS::evict(unsigned long)+0x27>
c000cb52:	83 ec 08             	sub    esp,0x8
c000cb55:	c1 e7 0b             	shl    edi,0xb
c000cb58:	55                   	push   ebp
c000cb59:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb5d:	e8 d0 f4 ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c000cb62:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb64:	89 d3                	mov    ebx,edx
c000cb66:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000cb6c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000cb72:	09 d7                	or     edi,edx
c000cb74:	89 38                	mov    DWORD PTR [eax],edi
c000cb76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cb79:	ff 05 08 8b 02 c0    	inc    DWORD PTR ds:0xc0028b08
c000cb7f:	e8 0b d8 ff ff       	call   c000a38f <Phys::freePage(unsigned long)>
c000cb84:	0f 20 d8             	mov    eax,cr3
c000cb87:	0f 22 d8             	mov    cr3,eax
c000cb8a:	ff 35 08 8b 02 c0    	push   DWORD PTR ds:0xc0028b08
c000cb90:	55                   	push   ebp
c000cb91:	53                   	push   ebx
c000cb92:	68 fc 4d 02 c0       	push   0xc0024dfc
c000cb97:	e8 ab 04 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cb9c:	a1 04 8b 02 c0       	mov    eax,ds:0xc0028b04
c000cba1:	c7 44 24 50 ba 4e 02 c0 	mov    DWORD PTR [esp+0x50],0xc0024eba
c000cba9:	8d 50 01             	lea    edx,[eax+0x1]
c000cbac:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000cbb0:	89 15 04 8b 02 c0    	mov    DWORD PTR ds:0xc0028b04,edx
c000cbb6:	83 c4 3c             	add    esp,0x3c
c000cbb9:	5b                   	pop    ebx
c000cbba:	5e                   	pop    esi
c000cbbb:	5f                   	pop    edi
c000cbbc:	5d                   	pop    ebp
c000cbbd:	e9 85 04 00 00       	jmp    c000d047 <Dbg::kprintf(char const*, ...)>

c000cbc2 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000cbc2:	55                   	push   ebp
c000cbc3:	57                   	push   edi
c000cbc4:	56                   	push   esi
c000cbc5:	53                   	push   ebx
c000cbc6:	83 ec 14             	sub    esp,0x14
c000cbc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcd:	68 cb 4e 02 c0       	push   0xc0024ecb
c000cbd2:	e8 70 04 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cbd7:	83 c4 10             	add    esp,0x10
c000cbda:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000cbde:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000cbe4:	74 20                	je     c000cc06 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cbe6:	83 ec 08             	sub    esp,0x8
c000cbe9:	55                   	push   ebp
c000cbea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbee:	e8 3f f4 ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c000cbf3:	83 c4 10             	add    esp,0x10
c000cbf6:	89 c3                	mov    ebx,eax
c000cbf8:	85 c0                	test   eax,eax
c000cbfa:	74 0a                	je     c000cc06 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cbfc:	8b 38                	mov    edi,DWORD PTR [eax]
c000cbfe:	f7 c7 01 00 00 00    	test   edi,0x1
c000cc04:	74 0a                	je     c000cc10 <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000cc06:	31 c0                	xor    eax,eax
c000cc08:	83 c4 0c             	add    esp,0xc
c000cc0b:	5b                   	pop    ebx
c000cc0c:	5e                   	pop    esi
c000cc0d:	5f                   	pop    edi
c000cc0e:	5d                   	pop    ebp
c000cc0f:	c3                   	ret    
c000cc10:	e8 fd d7 ff ff       	call   c000a412 <Phys::allocatePage()>
c000cc15:	c1 ef 0b             	shr    edi,0xb
c000cc18:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cc1a:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000cc20:	09 c2                	or     edx,eax
c000cc22:	81 ca 01 08 00 00    	or     edx,0x801
c000cc28:	89 13                	mov    DWORD PTR [ebx],edx
c000cc2a:	8b 0d 2c 7e 02 c0    	mov    ecx,DWORD PTR ds:0xc0027e2c
c000cc30:	85 c9                	test   ecx,ecx
c000cc32:	7e 3d                	jle    c000cc71 <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000cc34:	89 ee                	mov    esi,ebp
c000cc36:	31 db                	xor    ebx,ebx
c000cc38:	83 ec 0c             	sub    esp,0xc
c000cc3b:	57                   	push   edi
c000cc3c:	e8 0f f2 ff ff       	call   c000be50 <Virt::swapIDToSector(unsigned long)>
c000cc41:	89 34 24             	mov    DWORD PTR [esp],esi
c000cc44:	01 d8                	add    eax,ebx
c000cc46:	6a 01                	push   0x1
c000cc48:	31 d2                	xor    edx,edx
c000cc4a:	43                   	inc    ebx
c000cc4b:	52                   	push   edx
c000cc4c:	81 c6 00 02 00 00    	add    esi,0x200
c000cc52:	50                   	push   eax
c000cc53:	0f be 05 38 7e 02 c0 	movsx  eax,BYTE PTR ds:0xc0027e38
c000cc5a:	ff 34 85 9c 8e 02 c0 	push   DWORD PTR [eax*4-0x3ffd7164]
c000cc61:	e8 64 3d 00 00       	call   c00109ca <LogicalDisk::read(unsigned long long, int, void*)>
c000cc66:	83 c4 20             	add    esp,0x20
c000cc69:	39 1d 2c 7e 02 c0    	cmp    DWORD PTR ds:0xc0027e2c,ebx
c000cc6f:	7f c7                	jg     c000cc38 <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000cc71:	a1 08 8b 02 c0       	mov    eax,ds:0xc0028b08
c000cc76:	48                   	dec    eax
c000cc77:	52                   	push   edx
c000cc78:	a3 08 8b 02 c0       	mov    ds:0xc0028b08,eax
c000cc7d:	50                   	push   eax
c000cc7e:	55                   	push   ebp
c000cc7f:	68 de 4e 02 c0       	push   0xc0024ede
c000cc84:	e8 be 03 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cc89:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cc8c:	e8 a1 f1 ff ff       	call   c000be32 <Virt::freeSwapfilePage(unsigned long)>
c000cc91:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c000cc96:	83 c4 10             	add    esp,0x10
c000cc99:	48                   	dec    eax
c000cc9a:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c000cc9f:	85 c0                	test   eax,eax
c000cca1:	74 1d                	je     c000ccc0 <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000cca3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000cca7:	25 ff 0f 00 00       	and    eax,0xfff
c000ccac:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000ccb1:	77 10                	ja     c000ccc3 <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000ccb3:	0f 20 d8             	mov    eax,cr3
c000ccb6:	0f 22 d8             	mov    cr3,eax
c000ccb9:	b0 01                	mov    al,0x1
c000ccbb:	e9 48 ff ff ff       	jmp    c000cc08 <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000ccc0:	fb                   	sti    
c000ccc1:	eb e0                	jmp    c000cca3 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000ccc3:	83 ec 0c             	sub    esp,0xc
c000ccc6:	68 f3 4e 02 c0       	push   0xc0024ef3
c000cccb:	e8 77 03 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000ccd0:	83 c4 10             	add    esp,0x10
c000ccd3:	eb de                	jmp    c000ccb3 <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000ccd5:	90                   	nop

c000ccd6 <VAS::scanForEviction()>:
c000ccd6:	57                   	push   edi
c000ccd7:	31 ff                	xor    edi,edi
c000ccd9:	56                   	push   esi
c000ccda:	53                   	push   ebx
c000ccdb:	83 ec 10             	sub    esp,0x10
c000ccde:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cce2:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000cce5:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000cceb:	75 0e                	jne    c000ccfb <VAS::scanForEviction()+0x25>
c000cced:	89 da                	mov    edx,ebx
c000ccef:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ccf2:	c1 ea 16             	shr    edx,0x16
c000ccf5:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000ccf9:	74 4e                	je     c000cd49 <VAS::scanForEviction()+0x73>
c000ccfb:	53                   	push   ebx
c000ccfc:	56                   	push   esi
c000ccfd:	e8 30 f3 ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c000cd02:	5a                   	pop    edx
c000cd03:	8b 10                	mov    edx,DWORD PTR [eax]
c000cd05:	59                   	pop    ecx
c000cd06:	89 d1                	mov    ecx,edx
c000cd08:	81 e1 01 08 00 00    	and    ecx,0x801
c000cd0e:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000cd14:	74 3e                	je     c000cd54 <VAS::scanForEviction()+0x7e>
c000cd16:	81 c3 00 10 00 00    	add    ebx,0x1000
c000cd1c:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000cd22:	76 2b                	jbe    c000cd4f <VAS::scanForEviction()+0x79>
c000cd24:	47                   	inc    edi
c000cd25:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000cd2c:	83 ff 03             	cmp    edi,0x3
c000cd2f:	74 32                	je     c000cd63 <VAS::scanForEviction()+0x8d>
c000cd31:	31 db                	xor    ebx,ebx
c000cd33:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000cd39:	75 c0                	jne    c000ccfb <VAS::scanForEviction()+0x25>
c000cd3b:	89 da                	mov    edx,ebx
c000cd3d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cd40:	c1 ea 16             	shr    edx,0x16
c000cd43:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000cd47:	75 b2                	jne    c000ccfb <VAS::scanForEviction()+0x25>
c000cd49:	81 c3 00 00 40 00    	add    ebx,0x400000
c000cd4f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000cd52:	eb 91                	jmp    c000cce5 <VAS::scanForEviction()+0xf>
c000cd54:	f6 c2 20             	test   dl,0x20
c000cd57:	74 13                	je     c000cd6c <VAS::scanForEviction()+0x96>
c000cd59:	83 e2 df             	and    edx,0xffffffdf
c000cd5c:	89 10                	mov    DWORD PTR [eax],edx
c000cd5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000cd61:	eb b3                	jmp    c000cd16 <VAS::scanForEviction()+0x40>
c000cd63:	83 c4 10             	add    esp,0x10
c000cd66:	31 c0                	xor    eax,eax
c000cd68:	5b                   	pop    ebx
c000cd69:	5e                   	pop    esi
c000cd6a:	5f                   	pop    edi
c000cd6b:	c3                   	ret    
c000cd6c:	83 ec 08             	sub    esp,0x8
c000cd6f:	89 d0                	mov    eax,edx
c000cd71:	25 00 f0 ff ff       	and    eax,0xfffff000
c000cd76:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd7a:	53                   	push   ebx
c000cd7b:	68 03 4f 02 c0       	push   0xc0024f03
c000cd80:	e8 c2 02 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cd85:	58                   	pop    eax
c000cd86:	5a                   	pop    edx
c000cd87:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000cd8a:	56                   	push   esi
c000cd8b:	e8 62 fd ff ff       	call   c000caf2 <VAS::evict(unsigned long)>
c000cd90:	59                   	pop    ecx
c000cd91:	5b                   	pop    ebx
c000cd92:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000cd95:	68 17 4f 02 c0       	push   0xc0024f17
c000cd9a:	e8 a8 02 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cd9f:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000cda6:	83 c4 10             	add    esp,0x10
c000cda9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cdad:	83 c4 10             	add    esp,0x10
c000cdb0:	5b                   	pop    ebx
c000cdb1:	5e                   	pop    esi
c000cdb2:	5f                   	pop    edi
c000cdb3:	c3                   	ret    

c000cdb4 <mapVASFirstTime>:
c000cdb4:	55                   	push   ebp
c000cdb5:	57                   	push   edi
c000cdb6:	56                   	push   esi
c000cdb7:	53                   	push   ebx
c000cdb8:	83 ec 0c             	sub    esp,0xc
c000cdbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000cdc0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000cdc3:	4a                   	dec    edx
c000cdc4:	0f 84 fe 00 00 00    	je     c000cec8 <mapVASFirstTime+0x114>
c000cdca:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000cdcd:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000cdd0:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000cdd5:	c1 e5 15             	shl    ebp,0x15
c000cdd8:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000cddd:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000cde3:	29 eb                	sub    ebx,ebp
c000cde5:	29 ef                	sub    edi,ebp
c000cde7:	83 ec 08             	sub    esp,0x8
c000cdea:	53                   	push   ebx
c000cdeb:	68 43 4f 02 c0       	push   0xc0024f43
c000cdf0:	e8 52 02 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cdf5:	e8 18 d6 ff ff       	call   c000a412 <Phys::allocatePage()>
c000cdfa:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000ce01:	6a 01                	push   0x1
c000ce03:	53                   	push   ebx
c000ce04:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ce0a:	50                   	push   eax
c000ce0b:	56                   	push   esi
c000ce0c:	e8 ad f8 ff ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ce11:	83 c4 20             	add    esp,0x20
c000ce14:	39 fb                	cmp    ebx,edi
c000ce16:	75 cf                	jne    c000cde7 <mapVASFirstTime+0x33>
c000ce18:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000ce1d:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000ce22:	29 eb                	sub    ebx,ebp
c000ce24:	29 ef                	sub    edi,ebp
c000ce26:	83 ec 08             	sub    esp,0x8
c000ce29:	53                   	push   ebx
c000ce2a:	68 5f 4f 02 c0       	push   0xc0024f5f
c000ce2f:	e8 13 02 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000ce34:	58                   	pop    eax
c000ce35:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000ce39:	5a                   	pop    edx
c000ce3a:	19 c0                	sbb    eax,eax
c000ce3c:	83 e0 04             	and    eax,0x4
c000ce3f:	05 03 04 00 00       	add    eax,0x403
c000ce44:	50                   	push   eax
c000ce45:	68 73 4f 02 c0       	push   0xc0024f73
c000ce4a:	e8 f8 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000ce4f:	e8 be d5 ff ff       	call   c000a412 <Phys::allocatePage()>
c000ce54:	59                   	pop    ecx
c000ce55:	89 c5                	mov    ebp,eax
c000ce57:	58                   	pop    eax
c000ce58:	55                   	push   ebp
c000ce59:	68 81 4f 02 c0       	push   0xc0024f81
c000ce5e:	e8 e4 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000ce63:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000ce67:	19 d2                	sbb    edx,edx
c000ce69:	83 e2 04             	and    edx,0x4
c000ce6c:	81 c2 03 04 00 00    	add    edx,0x403
c000ce72:	89 14 24             	mov    DWORD PTR [esp],edx
c000ce75:	6a 01                	push   0x1
c000ce77:	53                   	push   ebx
c000ce78:	55                   	push   ebp
c000ce79:	56                   	push   esi
c000ce7a:	e8 3f f8 ff ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ce7f:	83 c4 18             	add    esp,0x18
c000ce82:	53                   	push   ebx
c000ce83:	56                   	push   esi
c000ce84:	e8 a9 f1 ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c000ce89:	5a                   	pop    edx
c000ce8a:	59                   	pop    ecx
c000ce8b:	ff 30                	push   DWORD PTR [eax]
c000ce8d:	68 9d 4f 02 c0       	push   0xc0024f9d
c000ce92:	e8 b0 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000ce97:	0f 20 d8             	mov    eax,cr3
c000ce9a:	83 c4 0c             	add    esp,0xc
c000ce9d:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cea3:	56                   	push   esi
c000cea4:	50                   	push   eax
c000cea5:	68 a8 4f 02 c0       	push   0xc0024fa8
c000ceaa:	e8 98 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000ceaf:	83 c4 10             	add    esp,0x10
c000ceb2:	39 df                	cmp    edi,ebx
c000ceb4:	0f 85 6c ff ff ff    	jne    c000ce26 <mapVASFirstTime+0x72>
c000ceba:	0f 20 d8             	mov    eax,cr3
c000cebd:	0f 22 d8             	mov    cr3,eax
c000cec0:	83 c4 0c             	add    esp,0xc
c000cec3:	5b                   	pop    ebx
c000cec4:	5e                   	pop    esi
c000cec5:	5f                   	pop    edi
c000cec6:	5d                   	pop    ebp
c000cec7:	c3                   	ret    
c000cec8:	83 ec 0c             	sub    esp,0xc
c000cecb:	68 2a 4f 02 c0       	push   0xc0024f2a
c000ced0:	e8 72 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000ced5:	83 c4 10             	add    esp,0x10
c000ced8:	83 c4 0c             	add    esp,0xc
c000cedb:	5b                   	pop    ebx
c000cedc:	5e                   	pop    esi
c000cedd:	5f                   	pop    edi
c000cede:	5d                   	pop    ebp
c000cedf:	c3                   	ret    

c000cee0 <__cxa_atexit>:
c000cee0:	31 c0                	xor    eax,eax
c000cee2:	c3                   	ret    

c000cee3 <__cxa_finalize>:
c000cee3:	c3                   	ret    

c000cee4 <__stack_chk_fail>:
c000cee4:	55                   	push   ebp
c000cee5:	89 e5                	mov    ebp,esp
c000cee7:	83 ec 14             	sub    esp,0x14
c000ceea:	68 c0 4f 02 c0       	push   0xc0024fc0
c000ceef:	e8 53 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cef4:	58                   	pop    eax
c000cef5:	5a                   	pop    edx
c000cef6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cef9:	68 10 50 02 c0       	push   0xc0025010
c000cefe:	e8 44 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cf03:	59                   	pop    ecx
c000cf04:	58                   	pop    eax
c000cf05:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf08:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cf0b:	68 10 50 02 c0       	push   0xc0025010
c000cf10:	e8 32 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cf15:	5a                   	pop    edx
c000cf16:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf19:	59                   	pop    ecx
c000cf1a:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf1c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cf1f:	68 10 50 02 c0       	push   0xc0025010
c000cf24:	e8 1e 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cf29:	5a                   	pop    edx
c000cf2a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf2d:	59                   	pop    ecx
c000cf2e:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf30:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf32:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cf35:	68 10 50 02 c0       	push   0xc0025010
c000cf3a:	e8 08 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cf3f:	c7 04 24 18 50 02 c0 	mov    DWORD PTR [esp],0xc0025018
c000cf46:	e8 de 81 00 00       	call   c0015129 <Krnl::panic(char const*)>
c000cf4b:	83 c4 10             	add    esp,0x10
c000cf4e:	c9                   	leave  
c000cf4f:	c3                   	ret    

c000cf50 <__cxa_pure_virtual>:
c000cf50:	83 ec 18             	sub    esp,0x18
c000cf53:	68 30 50 02 c0       	push   0xc0025030
c000cf58:	e8 cc 81 00 00       	call   c0015129 <Krnl::panic(char const*)>
c000cf5d:	83 c4 1c             	add    esp,0x1c
c000cf60:	c3                   	ret    

c000cf61 <operator new[](unsigned long)>:
c000cf61:	e9 f5 cd ff ff       	jmp    c0009d5b <malloc>

c000cf66 <operator delete(void*, unsigned long)>:
c000cf66:	e9 10 ce ff ff       	jmp    c0009d7b <rfree>

c000cf6b <operator delete[](void*)>:
c000cf6b:	e9 0b ce ff ff       	jmp    c0009d7b <rfree>

c000cf70 <operator delete[](void*, unsigned long)>:
c000cf70:	e9 06 ce ff ff       	jmp    c0009d7b <rfree>

c000cf75 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000cf75:	55                   	push   ebp
c000cf76:	b9 11 00 00 00       	mov    ecx,0x11
c000cf7b:	57                   	push   edi
c000cf7c:	56                   	push   esi
c000cf7d:	be 16 4b 02 c0       	mov    esi,0xc0024b16
c000cf82:	53                   	push   ebx
c000cf83:	83 ec 20             	sub    esp,0x20
c000cf86:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cf8a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cf8e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000cf92:	fc                   	cld    
c000cf93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cf95:	89 ee                	mov    esi,ebp
c000cf97:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cf9b:	eb 02                	jmp    c000cf9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000cf9d:	89 c6                	mov    esi,eax
c000cf9f:	31 d2                	xor    edx,edx
c000cfa1:	41                   	inc    ecx
c000cfa2:	89 f0                	mov    eax,esi
c000cfa4:	f7 f3                	div    ebx
c000cfa6:	39 de                	cmp    esi,ebx
c000cfa8:	73 f3                	jae    c000cf9d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000cfaa:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cfad:	eb 02                	jmp    c000cfb1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000cfaf:	89 c5                	mov    ebp,eax
c000cfb1:	31 d2                	xor    edx,edx
c000cfb3:	49                   	dec    ecx
c000cfb4:	89 e8                	mov    eax,ebp
c000cfb6:	f7 f3                	div    ebx
c000cfb8:	39 dd                	cmp    ebp,ebx
c000cfba:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000cfbe:	88 11                	mov    BYTE PTR [ecx],dl
c000cfc0:	73 ed                	jae    c000cfaf <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000cfc2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cfc6:	83 c4 20             	add    esp,0x20
c000cfc9:	5b                   	pop    ebx
c000cfca:	5e                   	pop    esi
c000cfcb:	5f                   	pop    edi
c000cfcc:	5d                   	pop    ebp
c000cfcd:	c3                   	ret    

c000cfce <Dbg::logc(char)>:
c000cfce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cfd2:	f6 05 00 8a 02 c0 10 	test   BYTE PTR ds:0xc0028a00,0x10
c000cfd9:	75 12                	jne    c000cfed <Dbg::logc(char)+0x1f>
c000cfdb:	ba fd 03 00 00       	mov    edx,0x3fd
c000cfe0:	ec                   	in     al,dx
c000cfe1:	a8 20                	test   al,0x20
c000cfe3:	74 fb                	je     c000cfe0 <Dbg::logc(char)+0x12>
c000cfe5:	ba f8 03 00 00       	mov    edx,0x3f8
c000cfea:	88 c8                	mov    al,cl
c000cfec:	ee                   	out    dx,al
c000cfed:	c3                   	ret    

c000cfee <Dbg::logs(char*)>:
c000cfee:	53                   	push   ebx
c000cfef:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000cff3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cff6:	84 c0                	test   al,al
c000cff8:	74 0f                	je     c000d009 <Dbg::logs(char*)+0x1b>
c000cffa:	50                   	push   eax
c000cffb:	43                   	inc    ebx
c000cffc:	e8 cd ff ff ff       	call   c000cfce <Dbg::logc(char)>
c000d001:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d004:	5a                   	pop    edx
c000d005:	84 c0                	test   al,al
c000d007:	75 f1                	jne    c000cffa <Dbg::logs(char*)+0xc>
c000d009:	5b                   	pop    ebx
c000d00a:	c3                   	ret    

c000d00b <Dbg::logWriteInt(unsigned int)>:
c000d00b:	83 ec 10             	sub    esp,0x10
c000d00e:	6a 0a                	push   0xa
c000d010:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d014:	50                   	push   eax
c000d015:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d019:	e8 57 ff ff ff       	call   c000cf75 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000d01e:	50                   	push   eax
c000d01f:	e8 ca ff ff ff       	call   c000cfee <Dbg::logs(char*)>
c000d024:	83 c4 20             	add    esp,0x20
c000d027:	c3                   	ret    

c000d028 <Dbg::logWriteIntBase(unsigned int, int)>:
c000d028:	83 ec 10             	sub    esp,0x10
c000d02b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d02f:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d033:	50                   	push   eax
c000d034:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d038:	e8 38 ff ff ff       	call   c000cf75 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000d03d:	50                   	push   eax
c000d03e:	e8 ab ff ff ff       	call   c000cfee <Dbg::logs(char*)>
c000d043:	83 c4 20             	add    esp,0x20
c000d046:	c3                   	ret    

c000d047 <Dbg::kprintf(char const*, ...)>:
c000d047:	55                   	push   ebp
c000d048:	57                   	push   edi
c000d049:	56                   	push   esi
c000d04a:	53                   	push   ebx
c000d04b:	83 ec 0c             	sub    esp,0xc
c000d04e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d052:	f6 05 00 8a 02 c0 10 	test   BYTE PTR ds:0xc0028a00,0x10
c000d059:	74 08                	je     c000d063 <Dbg::kprintf(char const*, ...)+0x1c>
c000d05b:	83 c4 0c             	add    esp,0xc
c000d05e:	5b                   	pop    ebx
c000d05f:	5e                   	pop    esi
c000d060:	5f                   	pop    edi
c000d061:	5d                   	pop    ebp
c000d062:	c3                   	ret    
c000d063:	8d 44 24 24          	lea    eax,[esp+0x24]
c000d067:	31 db                	xor    ebx,ebx
c000d069:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d06d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000d070:	84 c0                	test   al,al
c000d072:	74 e7                	je     c000d05b <Dbg::kprintf(char const*, ...)+0x14>
c000d074:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d077:	3c 25                	cmp    al,0x25
c000d079:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d07c:	75 44                	jne    c000d0c2 <Dbg::kprintf(char const*, ...)+0x7b>
c000d07e:	83 c3 02             	add    ebx,0x2
c000d081:	8a 07                	mov    al,BYTE PTR [edi]
c000d083:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000d086:	83 e8 25             	sub    eax,0x25
c000d089:	3c 53                	cmp    al,0x53
c000d08b:	0f 87 c9 00 00 00    	ja     c000d15a <Dbg::kprintf(char const*, ...)+0x113>
c000d091:	0f b6 c0             	movzx  eax,al
c000d094:	ff 24 85 44 50 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdafbc]
c000d09b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d09f:	89 c8                	mov    eax,ecx
c000d0a1:	83 c1 04             	add    ecx,0x4
c000d0a4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d0a8:	ff 30                	push   DWORD PTR [eax]
c000d0aa:	e8 5c ff ff ff       	call   c000d00b <Dbg::logWriteInt(unsigned int)>
c000d0af:	5f                   	pop    edi
c000d0b0:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000d0b4:	84 c0                	test   al,al
c000d0b6:	74 a3                	je     c000d05b <Dbg::kprintf(char const*, ...)+0x14>
c000d0b8:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d0bb:	3c 25                	cmp    al,0x25
c000d0bd:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d0c0:	74 bc                	je     c000d07e <Dbg::kprintf(char const*, ...)+0x37>
c000d0c2:	50                   	push   eax
c000d0c3:	89 eb                	mov    ebx,ebp
c000d0c5:	e8 04 ff ff ff       	call   c000cfce <Dbg::logc(char)>
c000d0ca:	89 fd                	mov    ebp,edi
c000d0cc:	58                   	pop    eax
c000d0cd:	eb e1                	jmp    c000d0b0 <Dbg::kprintf(char const*, ...)+0x69>
c000d0cf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d0d3:	89 c8                	mov    eax,ecx
c000d0d5:	83 c1 04             	add    ecx,0x4
c000d0d8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d0dc:	ff 30                	push   DWORD PTR [eax]
c000d0de:	e8 0b ff ff ff       	call   c000cfee <Dbg::logs(char*)>
c000d0e3:	58                   	pop    eax
c000d0e4:	eb ca                	jmp    c000d0b0 <Dbg::kprintf(char const*, ...)+0x69>
c000d0e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d0ea:	89 d0                	mov    eax,edx
c000d0ec:	83 c2 04             	add    edx,0x4
c000d0ef:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d0f3:	ff 30                	push   DWORD PTR [eax]
c000d0f5:	e8 11 ff ff ff       	call   c000d00b <Dbg::logWriteInt(unsigned int)>
c000d0fa:	58                   	pop    eax
c000d0fb:	eb b3                	jmp    c000d0b0 <Dbg::kprintf(char const*, ...)+0x69>
c000d0fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d101:	89 d0                	mov    eax,edx
c000d103:	83 c2 04             	add    edx,0x4
c000d106:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000d109:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d10d:	50                   	push   eax
c000d10e:	e8 bb fe ff ff       	call   c000cfce <Dbg::logc(char)>
c000d113:	58                   	pop    eax
c000d114:	eb 9a                	jmp    c000d0b0 <Dbg::kprintf(char const*, ...)+0x69>
c000d116:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d11a:	89 c8                	mov    eax,ecx
c000d11c:	83 c1 04             	add    ecx,0x4
c000d11f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d123:	6a 10                	push   0x10
c000d125:	ff 30                	push   DWORD PTR [eax]
c000d127:	e8 fc fe ff ff       	call   c000d028 <Dbg::logWriteIntBase(unsigned int, int)>
c000d12c:	59                   	pop    ecx
c000d12d:	5f                   	pop    edi
c000d12e:	eb 80                	jmp    c000d0b0 <Dbg::kprintf(char const*, ...)+0x69>
c000d130:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d134:	89 d0                	mov    eax,edx
c000d136:	83 c2 08             	add    edx,0x8
c000d139:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d13d:	6a 10                	push   0x10
c000d13f:	ff 30                	push   DWORD PTR [eax]
c000d141:	e8 e2 fe ff ff       	call   c000d028 <Dbg::logWriteIntBase(unsigned int, int)>
c000d146:	58                   	pop    eax
c000d147:	5a                   	pop    edx
c000d148:	e9 63 ff ff ff       	jmp    c000d0b0 <Dbg::kprintf(char const*, ...)+0x69>
c000d14d:	6a 25                	push   0x25
c000d14f:	e8 7a fe ff ff       	call   c000cfce <Dbg::logc(char)>
c000d154:	58                   	pop    eax
c000d155:	e9 56 ff ff ff       	jmp    c000d0b0 <Dbg::kprintf(char const*, ...)+0x69>
c000d15a:	6a 25                	push   0x25
c000d15c:	e8 6d fe ff ff       	call   c000cfce <Dbg::logc(char)>
c000d161:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000d164:	50                   	push   eax
c000d165:	e8 64 fe ff ff       	call   c000cfce <Dbg::logc(char)>
c000d16a:	5a                   	pop    edx
c000d16b:	59                   	pop    ecx
c000d16c:	e9 3f ff ff ff       	jmp    c000d0b0 <Dbg::kprintf(char const*, ...)+0x69>
c000d171:	90                   	nop

c000d172 <File::read(unsigned long long, void*, int*)>:
c000d172:	53                   	push   ebx
c000d173:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d177:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d17b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d182:	3c 19                	cmp    al,0x19
c000d184:	77 35                	ja     c000d1bb <File::read(unsigned long long, void*, int*)+0x49>
c000d186:	8b 04 85 a0 8f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7060]
c000d18d:	85 c0                	test   eax,eax
c000d18f:	74 2a                	je     c000d1bb <File::read(unsigned long long, void*, int*)+0x49>
c000d191:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d197:	85 c0                	test   eax,eax
c000d199:	74 20                	je     c000d1bb <File::read(unsigned long long, void*, int*)+0x49>
c000d19b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d19f:	74 21                	je     c000d1c2 <File::read(unsigned long long, void*, int*)+0x50>
c000d1a1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d1a3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d1a7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d1ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d1b5:	5b                   	pop    ebx
c000d1b6:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000d1b9:	ff e0                	jmp    eax
c000d1bb:	b8 0b 00 00 00       	mov    eax,0xb
c000d1c0:	eb 05                	jmp    c000d1c7 <File::read(unsigned long long, void*, int*)+0x55>
c000d1c2:	b8 05 00 00 00       	mov    eax,0x5
c000d1c7:	5b                   	pop    ebx
c000d1c8:	c3                   	ret    
c000d1c9:	90                   	nop

c000d1ca <File::write(unsigned long long, void*, int*)>:
c000d1ca:	53                   	push   ebx
c000d1cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d1d3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d1da:	3c 19                	cmp    al,0x19
c000d1dc:	77 35                	ja     c000d213 <File::write(unsigned long long, void*, int*)+0x49>
c000d1de:	8b 04 85 a0 8f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7060]
c000d1e5:	85 c0                	test   eax,eax
c000d1e7:	74 2a                	je     c000d213 <File::write(unsigned long long, void*, int*)+0x49>
c000d1e9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d1ef:	85 c0                	test   eax,eax
c000d1f1:	74 20                	je     c000d213 <File::write(unsigned long long, void*, int*)+0x49>
c000d1f3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d1f7:	74 21                	je     c000d21a <File::write(unsigned long long, void*, int*)+0x50>
c000d1f9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d1fb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d1ff:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d205:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d209:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d20d:	5b                   	pop    ebx
c000d20e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000d211:	ff e0                	jmp    eax
c000d213:	b8 0b 00 00 00       	mov    eax,0xb
c000d218:	eb 05                	jmp    c000d21f <File::write(unsigned long long, void*, int*)+0x55>
c000d21a:	b8 05 00 00 00       	mov    eax,0x5
c000d21f:	5b                   	pop    ebx
c000d220:	c3                   	ret    
c000d221:	90                   	nop

c000d222 <Directory::read(unsigned long long, void*, int*)>:
c000d222:	53                   	push   ebx
c000d223:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d227:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d22b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d232:	3c 19                	cmp    al,0x19
c000d234:	77 35                	ja     c000d26b <Directory::read(unsigned long long, void*, int*)+0x49>
c000d236:	8b 04 85 a0 8f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7060]
c000d23d:	85 c0                	test   eax,eax
c000d23f:	74 2a                	je     c000d26b <Directory::read(unsigned long long, void*, int*)+0x49>
c000d241:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d247:	85 c0                	test   eax,eax
c000d249:	74 20                	je     c000d26b <Directory::read(unsigned long long, void*, int*)+0x49>
c000d24b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d24f:	74 21                	je     c000d272 <Directory::read(unsigned long long, void*, int*)+0x50>
c000d251:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d253:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d257:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d265:	5b                   	pop    ebx
c000d266:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000d269:	ff e0                	jmp    eax
c000d26b:	b8 0b 00 00 00       	mov    eax,0xb
c000d270:	eb 05                	jmp    c000d277 <Directory::read(unsigned long long, void*, int*)+0x55>
c000d272:	b8 05 00 00 00       	mov    eax,0x5
c000d277:	5b                   	pop    ebx
c000d278:	c3                   	ret    
c000d279:	90                   	nop

c000d27a <Directory::write(unsigned long long, void*, int*)>:
c000d27a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d27e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000d285:	b8 0b 00 00 00       	mov    eax,0xb
c000d28a:	80 fa 19             	cmp    dl,0x19
c000d28d:	77 18                	ja     c000d2a7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d28f:	8b 14 95 a0 8f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7060]
c000d296:	85 d2                	test   edx,edx
c000d298:	74 0d                	je     c000d2a7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d29a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000d2a1:	19 c0                	sbb    eax,eax
c000d2a3:	83 e0 0a             	and    eax,0xa
c000d2a6:	40                   	inc    eax
c000d2a7:	c3                   	ret    

c000d2a8 <File::isAtty()>:
c000d2a8:	31 c0                	xor    eax,eax
c000d2aa:	c3                   	ret    
c000d2ab:	90                   	nop

c000d2ac <Directory::isAtty()>:
c000d2ac:	31 c0                	xor    eax,eax
c000d2ae:	c3                   	ret    
c000d2af:	90                   	nop

c000d2b0 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000d2b0:	b8 0a 00 00 00       	mov    eax,0xa
c000d2b5:	c3                   	ret    

c000d2b6 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000d2b6:	b8 0a 00 00 00       	mov    eax,0xa
c000d2bb:	c3                   	ret    

c000d2bc <Filesystem::allocateSwapfile(char const*, int)>:
c000d2bc:	31 c0                	xor    eax,eax
c000d2be:	31 d2                	xor    edx,edx
c000d2c0:	c3                   	ret    
c000d2c1:	90                   	nop

c000d2c2 <File::~File()>:
c000d2c2:	83 ec 0c             	sub    esp,0xc
c000d2c5:	ba 80 52 02 c0       	mov    edx,0xc0025280
c000d2ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2ce:	89 10                	mov    DWORD PTR [eax],edx
c000d2d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2d4:	83 ec 0c             	sub    esp,0xc
c000d2d7:	50                   	push   eax
c000d2d8:	e8 e3 e7 ff ff       	call   c000bac0 <UnixFile::~UnixFile()>
c000d2dd:	83 c4 10             	add    esp,0x10
c000d2e0:	90                   	nop
c000d2e1:	83 c4 0c             	add    esp,0xc
c000d2e4:	c3                   	ret    
c000d2e5:	90                   	nop

c000d2e6 <File::~File()>:
c000d2e6:	83 ec 0c             	sub    esp,0xc
c000d2e9:	83 ec 0c             	sub    esp,0xc
c000d2ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f0:	e8 cd ff ff ff       	call   c000d2c2 <File::~File()>
c000d2f5:	83 c4 10             	add    esp,0x10
c000d2f8:	83 ec 08             	sub    esp,0x8
c000d2fb:	68 14 01 00 00       	push   0x114
c000d300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d304:	e8 5d fc ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000d309:	83 c4 10             	add    esp,0x10
c000d30c:	83 c4 0c             	add    esp,0xc
c000d30f:	c3                   	ret    

c000d310 <Directory::~Directory()>:
c000d310:	83 ec 0c             	sub    esp,0xc
c000d313:	ba 9c 52 02 c0       	mov    edx,0xc002529c
c000d318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d31c:	89 10                	mov    DWORD PTR [eax],edx
c000d31e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d322:	83 ec 0c             	sub    esp,0xc
c000d325:	50                   	push   eax
c000d326:	e8 95 e7 ff ff       	call   c000bac0 <UnixFile::~UnixFile()>
c000d32b:	83 c4 10             	add    esp,0x10
c000d32e:	90                   	nop
c000d32f:	83 c4 0c             	add    esp,0xc
c000d332:	c3                   	ret    
c000d333:	90                   	nop

c000d334 <Directory::~Directory()>:
c000d334:	83 ec 0c             	sub    esp,0xc
c000d337:	83 ec 0c             	sub    esp,0xc
c000d33a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d33e:	e8 cd ff ff ff       	call   c000d310 <Directory::~Directory()>
c000d343:	83 c4 10             	add    esp,0x10
c000d346:	83 ec 08             	sub    esp,0x8
c000d349:	68 14 01 00 00       	push   0x114
c000d34e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d352:	e8 0f fc ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000d357:	83 c4 10             	add    esp,0x10
c000d35a:	83 c4 0c             	add    esp,0xc
c000d35d:	c3                   	ret    

c000d35e <Filesystem::Filesystem()>:
c000d35e:	ba 18 52 02 c0       	mov    edx,0xc0025218
c000d363:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d367:	89 10                	mov    DWORD PTR [eax],edx
c000d369:	8b 15 14 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028b14
c000d36f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d373:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d376:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d37a:	a3 14 8b 02 c0       	mov    ds:0xc0028b14,eax
c000d37f:	90                   	nop
c000d380:	c3                   	ret    
c000d381:	90                   	nop

c000d382 <Filesystem::~Filesystem()>:
c000d382:	ba 18 52 02 c0       	mov    edx,0xc0025218
c000d387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d38b:	89 10                	mov    DWORD PTR [eax],edx
c000d38d:	90                   	nop
c000d38e:	c3                   	ret    
c000d38f:	90                   	nop

c000d390 <Filesystem::~Filesystem()>:
c000d390:	83 ec 0c             	sub    esp,0xc
c000d393:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d397:	e8 e6 ff ff ff       	call   c000d382 <Filesystem::~Filesystem()>
c000d39c:	83 c4 04             	add    esp,0x4
c000d39f:	83 ec 08             	sub    esp,0x8
c000d3a2:	6a 08                	push   0x8
c000d3a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a8:	e8 b9 fb ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000d3ad:	83 c4 10             	add    esp,0x10
c000d3b0:	83 c4 0c             	add    esp,0xc
c000d3b3:	c3                   	ret    

c000d3b4 <Fs::getcwd(Process*, char*, int)>:
c000d3b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d3b8:	31 c0                	xor    eax,eax
c000d3ba:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d3bd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d3c1:	7d 15                	jge    c000d3d8 <Fs::getcwd(Process*, char*, int)+0x24>
c000d3c3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d3c7:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000d3ce:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000d3d1:	84 c9                	test   cl,cl
c000d3d3:	74 06                	je     c000d3db <Fs::getcwd(Process*, char*, int)+0x27>
c000d3d5:	40                   	inc    eax
c000d3d6:	eb e2                	jmp    c000d3ba <Fs::getcwd(Process*, char*, int)+0x6>
c000d3d8:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d3db:	31 c0                	xor    eax,eax
c000d3dd:	c3                   	ret    

c000d3de <Fs::initVFS()>:
c000d3de:	83 ec 18             	sub    esp,0x18
c000d3e1:	6a 08                	push   0x8
c000d3e3:	e8 73 c9 ff ff       	call   c0009d5b <malloc>
c000d3e8:	89 04 24             	mov    DWORD PTR [esp],eax
c000d3eb:	e8 80 ec 00 00       	call   c001c070 <FAT::FAT()>
c000d3f0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000d3f7:	e8 5f c9 ff ff       	call   c0009d5b <malloc>
c000d3fc:	89 04 24             	mov    DWORD PTR [esp],eax
c000d3ff:	e8 fc fe 00 00       	call   c001d300 <ISO9660::ISO9660()>
c000d404:	83 c4 1c             	add    esp,0x1c
c000d407:	c3                   	ret    

c000d408 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d408:	55                   	push   ebp
c000d409:	57                   	push   edi
c000d40a:	56                   	push   esi
c000d40b:	53                   	push   ebx
c000d40c:	81 ec 10 04 00 00    	sub    esp,0x410
c000d412:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d419:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d420:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d427:	68 00 04 00 00       	push   0x400
c000d42c:	6a 00                	push   0x0
c000d42e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d432:	56                   	push   esi
c000d433:	e8 4c 32 ff ff       	call   c0000684 <memset>
c000d438:	83 c4 10             	add    esp,0x10
c000d43b:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d43f:	75 0b                	jne    c000d44c <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d441:	50                   	push   eax
c000d442:	50                   	push   eax
c000d443:	57                   	push   edi
c000d444:	56                   	push   esi
c000d445:	e8 f6 32 ff ff       	call   c0000740 <strcpy>
c000d44a:	eb 41                	jmp    c000d48d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d44c:	8a 07                	mov    al,BYTE PTR [edi]
c000d44e:	3c 5c                	cmp    al,0x5c
c000d450:	74 04                	je     c000d456 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d452:	3c 2f                	cmp    al,0x2f
c000d454:	75 18                	jne    c000d46e <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d456:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d459:	3c 60                	cmp    al,0x60
c000d45b:	7e 03                	jle    c000d460 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d45d:	83 e8 20             	sub    eax,0x20
c000d460:	88 04 24             	mov    BYTE PTR [esp],al
c000d463:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d46a:	50                   	push   eax
c000d46b:	50                   	push   eax
c000d46c:	eb 18                	jmp    c000d486 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d46e:	50                   	push   eax
c000d46f:	50                   	push   eax
c000d470:	55                   	push   ebp
c000d471:	56                   	push   esi
c000d472:	e8 c9 32 ff ff       	call   c0000740 <strcpy>
c000d477:	5a                   	pop    edx
c000d478:	59                   	pop    ecx
c000d479:	68 1a 6b 02 c0       	push   0xc0026b1a
c000d47e:	56                   	push   esi
c000d47f:	e8 fc 33 ff ff       	call   c0000880 <strcat>
c000d484:	5d                   	pop    ebp
c000d485:	58                   	pop    eax
c000d486:	57                   	push   edi
c000d487:	56                   	push   esi
c000d488:	e8 f3 33 ff ff       	call   c0000880 <strcat>
c000d48d:	83 c4 10             	add    esp,0x10
c000d490:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d493:	3c 60                	cmp    al,0x60
c000d495:	7e 03                	jle    c000d49a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d497:	83 e8 20             	sub    eax,0x20
c000d49a:	88 04 24             	mov    BYTE PTR [esp],al
c000d49d:	88 03                	mov    BYTE PTR [ebx],al
c000d49f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d4a6:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d4ac:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d4b0:	bf 03 00 00 00       	mov    edi,0x3
c000d4b5:	b8 03 00 00 00       	mov    eax,0x3
c000d4ba:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d4bd:	84 d2                	test   dl,dl
c000d4bf:	0f 84 91 00 00 00    	je     c000d556 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d4c5:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d4c8:	80 fa 5c             	cmp    dl,0x5c
c000d4cb:	74 05                	je     c000d4d2 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d4cd:	80 fa 2f             	cmp    dl,0x2f
c000d4d0:	75 12                	jne    c000d4e4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d4d2:	89 c5                	mov    ebp,eax
c000d4d4:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d4d9:	74 09                	je     c000d4e4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d4db:	40                   	inc    eax
c000d4dc:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d4e0:	89 cf                	mov    edi,ecx
c000d4e2:	eb d6                	jmp    c000d4ba <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d4e4:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d4e9:	75 5b                	jne    c000d546 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d4eb:	80 fa 2e             	cmp    dl,0x2e
c000d4ee:	75 56                	jne    c000d546 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d4f0:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d4f4:	74 19                	je     c000d50f <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d4f6:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d4fb:	74 53                	je     c000d550 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d4fd:	89 f9                	mov    ecx,edi
c000d4ff:	41                   	inc    ecx
c000d500:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d503:	80 fa 2f             	cmp    dl,0x2f
c000d506:	74 f7                	je     c000d4ff <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d508:	80 fa 5c             	cmp    dl,0x5c
c000d50b:	74 f2                	je     c000d4ff <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d50d:	eb d1                	jmp    c000d4e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d50f:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d514:	74 3a                	je     c000d550 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d516:	83 f8 03             	cmp    eax,0x3
c000d519:	74 c5                	je     c000d4e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d51b:	41                   	inc    ecx
c000d51c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d51f:	80 fa 2f             	cmp    dl,0x2f
c000d522:	74 f7                	je     c000d51b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d524:	80 fa 5c             	cmp    dl,0x5c
c000d527:	74 f2                	je     c000d51b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d529:	48                   	dec    eax
c000d52a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d52e:	75 06                	jne    c000d536 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d530:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d534:	eb f3                	jmp    c000d529 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d536:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d53a:	74 07                	je     c000d543 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d53c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d540:	48                   	dec    eax
c000d541:	eb f3                	jmp    c000d536 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d543:	40                   	inc    eax
c000d544:	eb 9a                	jmp    c000d4e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d546:	80 fa 2f             	cmp    dl,0x2f
c000d549:	74 95                	je     c000d4e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d54b:	80 fa 5c             	cmp    dl,0x5c
c000d54e:	74 90                	je     c000d4e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d550:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d553:	40                   	inc    eax
c000d554:	eb 8a                	jmp    c000d4e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d556:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d55a:	83 ec 0c             	sub    esp,0xc
c000d55d:	53                   	push   ebx
c000d55e:	e8 3d 31 ff ff       	call   c00006a0 <strlen>
c000d563:	83 c4 10             	add    esp,0x10
c000d566:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d56b:	75 26                	jne    c000d593 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d56d:	83 ec 0c             	sub    esp,0xc
c000d570:	53                   	push   ebx
c000d571:	e8 2a 31 ff ff       	call   c00006a0 <strlen>
c000d576:	83 c4 10             	add    esp,0x10
c000d579:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d57e:	74 26                	je     c000d5a6 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d580:	83 ec 0c             	sub    esp,0xc
c000d583:	53                   	push   ebx
c000d584:	e8 17 31 ff ff       	call   c00006a0 <strlen>
c000d589:	83 c4 10             	add    esp,0x10
c000d58c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d591:	eb c7                	jmp    c000d55a <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d593:	83 ec 0c             	sub    esp,0xc
c000d596:	53                   	push   ebx
c000d597:	e8 04 31 ff ff       	call   c00006a0 <strlen>
c000d59c:	83 c4 10             	add    esp,0x10
c000d59f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d5a4:	74 c7                	je     c000d56d <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d5a6:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d5ac:	5b                   	pop    ebx
c000d5ad:	5e                   	pop    esi
c000d5ae:	5f                   	pop    edi
c000d5af:	5d                   	pop    ebp
c000d5b0:	c3                   	ret    
c000d5b1:	90                   	nop

c000d5b2 <File::File(char const*, Process*)>:
c000d5b2:	83 ec 0c             	sub    esp,0xc
c000d5b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5b9:	83 ec 08             	sub    esp,0x8
c000d5bc:	6a 00                	push   0x0
c000d5be:	50                   	push   eax
c000d5bf:	e8 1a e3 ff ff       	call   c000b8de <UnixFile::UnixFile(int)>
c000d5c4:	83 c4 10             	add    esp,0x10
c000d5c7:	ba 80 52 02 c0       	mov    edx,0xc0025280
c000d5cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5d0:	89 10                	mov    DWORD PTR [eax],edx
c000d5d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d5d6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d5dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5e0:	83 c0 0d             	add    eax,0xd
c000d5e3:	83 ec 04             	sub    esp,0x4
c000d5e6:	52                   	push   edx
c000d5e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5eb:	50                   	push   eax
c000d5ec:	e8 17 fe ff ff       	call   c000d408 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d5f1:	83 c4 10             	add    esp,0x10
c000d5f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5f8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d5fb:	8d 50 bf             	lea    edx,[eax-0x41]
c000d5fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d602:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d60c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d614:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d61a:	0f b6 c0             	movzx  eax,al
c000d61d:	8b 04 85 a0 8f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7060]
c000d624:	85 c0                	test   eax,eax
c000d626:	74 5e                	je     c000d686 <File::File(char const*, Process*)+0xd4>
c000d628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d62c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d632:	0f b6 c0             	movzx  eax,al
c000d635:	8b 04 85 a0 8f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7060]
c000d63c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d642:	85 c0                	test   eax,eax
c000d644:	75 40                	jne    c000d686 <File::File(char const*, Process*)+0xd4>
c000d646:	83 ec 0c             	sub    esp,0xc
c000d649:	68 bc 51 02 c0       	push   0xc00251bc
c000d64e:	e8 f4 f9 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000d653:	83 c4 10             	add    esp,0x10
c000d656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d65a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d660:	0f b6 c0             	movzx  eax,al
c000d663:	8b 04 85 a0 8f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7060]
c000d66a:	83 ec 0c             	sub    esp,0xc
c000d66d:	50                   	push   eax
c000d66e:	e8 55 32 00 00       	call   c00108c8 <LogicalDisk::mount()>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	83 ec 0c             	sub    esp,0xc
c000d679:	68 09 75 02 c0       	push   0xc0027509
c000d67e:	e8 c4 f9 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000d683:	83 c4 10             	add    esp,0x10
c000d686:	90                   	nop
c000d687:	83 c4 0c             	add    esp,0xc
c000d68a:	c3                   	ret    
c000d68b:	90                   	nop

c000d68c <File::open(FileOpenMode)>:
c000d68c:	53                   	push   ebx
c000d68d:	b8 0b 00 00 00       	mov    eax,0xb
c000d692:	83 ec 08             	sub    esp,0x8
c000d695:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d699:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d6a0:	80 fa 19             	cmp    dl,0x19
c000d6a3:	77 40                	ja     c000d6e5 <File::open(FileOpenMode)+0x59>
c000d6a5:	8b 14 95 a0 8f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7060]
c000d6ac:	85 d2                	test   edx,edx
c000d6ae:	74 35                	je     c000d6e5 <File::open(FileOpenMode)+0x59>
c000d6b0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d6b6:	85 d2                	test   edx,edx
c000d6b8:	74 2b                	je     c000d6e5 <File::open(FileOpenMode)+0x59>
c000d6ba:	b8 06 00 00 00       	mov    eax,0x6
c000d6bf:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d6c3:	75 20                	jne    c000d6e5 <File::open(FileOpenMode)+0x59>
c000d6c5:	8b 02                	mov    eax,DWORD PTR [edx]
c000d6c7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d6cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6d1:	51                   	push   ecx
c000d6d2:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d6d5:	51                   	push   ecx
c000d6d6:	52                   	push   edx
c000d6d7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d6da:	83 c4 10             	add    esp,0x10
c000d6dd:	85 c0                	test   eax,eax
c000d6df:	75 04                	jne    c000d6e5 <File::open(FileOpenMode)+0x59>
c000d6e1:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d6e5:	83 c4 08             	add    esp,0x8
c000d6e8:	5b                   	pop    ebx
c000d6e9:	c3                   	ret    

c000d6ea <File::close()>:
c000d6ea:	53                   	push   ebx
c000d6eb:	b8 0b 00 00 00       	mov    eax,0xb
c000d6f0:	83 ec 08             	sub    esp,0x8
c000d6f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d6f7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d6fe:	80 fa 19             	cmp    dl,0x19
c000d701:	77 41                	ja     c000d744 <File::close()+0x5a>
c000d703:	8b 1c 95 a0 8f 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7060]
c000d70a:	85 db                	test   ebx,ebx
c000d70c:	74 36                	je     c000d744 <File::close()+0x5a>
c000d70e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d715:	74 2d                	je     c000d744 <File::close()+0x5a>
c000d717:	b8 05 00 00 00       	mov    eax,0x5
c000d71c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d720:	74 22                	je     c000d744 <File::close()+0x5a>
c000d722:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d726:	8b 04 95 a0 8f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7060]
c000d72d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d733:	53                   	push   ebx
c000d734:	53                   	push   ebx
c000d735:	8b 10                	mov    edx,DWORD PTR [eax]
c000d737:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d73d:	50                   	push   eax
c000d73e:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d741:	83 c4 10             	add    esp,0x10
c000d744:	83 c4 08             	add    esp,0x8
c000d747:	5b                   	pop    ebx
c000d748:	c3                   	ret    
c000d749:	90                   	nop

c000d74a <File::seek(unsigned long long)>:
c000d74a:	56                   	push   esi
c000d74b:	53                   	push   ebx
c000d74c:	b8 0b 00 00 00       	mov    eax,0xb
c000d751:	51                   	push   ecx
c000d752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d756:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d75a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d761:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d765:	80 fa 19             	cmp    dl,0x19
c000d768:	77 31                	ja     c000d79b <File::seek(unsigned long long)+0x51>
c000d76a:	8b 14 95 a0 8f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7060]
c000d771:	85 d2                	test   edx,edx
c000d773:	74 26                	je     c000d79b <File::seek(unsigned long long)+0x51>
c000d775:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d77b:	85 d2                	test   edx,edx
c000d77d:	74 1c                	je     c000d79b <File::seek(unsigned long long)+0x51>
c000d77f:	b8 05 00 00 00       	mov    eax,0x5
c000d784:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d788:	74 11                	je     c000d79b <File::seek(unsigned long long)+0x51>
c000d78a:	8b 02                	mov    eax,DWORD PTR [edx]
c000d78c:	53                   	push   ebx
c000d78d:	51                   	push   ecx
c000d78e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d794:	52                   	push   edx
c000d795:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d798:	83 c4 10             	add    esp,0x10
c000d79b:	5a                   	pop    edx
c000d79c:	5b                   	pop    ebx
c000d79d:	5e                   	pop    esi
c000d79e:	c3                   	ret    
c000d79f:	90                   	nop

c000d7a0 <File::tell(unsigned long long*)>:
c000d7a0:	83 ec 0c             	sub    esp,0xc
c000d7a3:	b8 0b 00 00 00       	mov    eax,0xb
c000d7a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d7ac:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d7b3:	80 fa 19             	cmp    dl,0x19
c000d7b6:	77 34                	ja     c000d7ec <File::tell(unsigned long long*)+0x4c>
c000d7b8:	8b 14 95 a0 8f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7060]
c000d7bf:	85 d2                	test   edx,edx
c000d7c1:	74 29                	je     c000d7ec <File::tell(unsigned long long*)+0x4c>
c000d7c3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d7c9:	85 d2                	test   edx,edx
c000d7cb:	74 1f                	je     c000d7ec <File::tell(unsigned long long*)+0x4c>
c000d7cd:	b8 05 00 00 00       	mov    eax,0x5
c000d7d2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d7d6:	74 14                	je     c000d7ec <File::tell(unsigned long long*)+0x4c>
c000d7d8:	50                   	push   eax
c000d7d9:	8b 02                	mov    eax,DWORD PTR [edx]
c000d7db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d7df:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d7e5:	52                   	push   edx
c000d7e6:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d7e9:	83 c4 10             	add    esp,0x10
c000d7ec:	83 c4 0c             	add    esp,0xc
c000d7ef:	c3                   	ret    

c000d7f0 <File::rewind()>:
c000d7f0:	83 ec 10             	sub    esp,0x10
c000d7f3:	6a 00                	push   0x0
c000d7f5:	6a 00                	push   0x0
c000d7f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7fb:	e8 4a ff ff ff       	call   c000d74a <File::seek(unsigned long long)>
c000d800:	83 c4 1c             	add    esp,0x1c
c000d803:	c3                   	ret    

c000d804 <File::unlink()>:
c000d804:	83 ec 0c             	sub    esp,0xc
c000d807:	b8 0b 00 00 00       	mov    eax,0xb
c000d80c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d810:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d817:	80 f9 19             	cmp    cl,0x19
c000d81a:	77 2f                	ja     c000d84b <File::unlink()+0x47>
c000d81c:	8b 0c 8d a0 8f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7060]
c000d823:	85 c9                	test   ecx,ecx
c000d825:	74 24                	je     c000d84b <File::unlink()+0x47>
c000d827:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d82d:	85 c9                	test   ecx,ecx
c000d82f:	74 1a                	je     c000d84b <File::unlink()+0x47>
c000d831:	b8 06 00 00 00       	mov    eax,0x6
c000d836:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d83a:	75 0f                	jne    c000d84b <File::unlink()+0x47>
c000d83c:	83 c2 0d             	add    edx,0xd
c000d83f:	50                   	push   eax
c000d840:	50                   	push   eax
c000d841:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d843:	52                   	push   edx
c000d844:	51                   	push   ecx
c000d845:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d848:	83 c4 10             	add    esp,0x10
c000d84b:	83 c4 0c             	add    esp,0xc
c000d84e:	c3                   	ret    
c000d84f:	90                   	nop

c000d850 <File::rename(char const*)>:
c000d850:	83 ec 0c             	sub    esp,0xc
c000d853:	b8 0b 00 00 00       	mov    eax,0xb
c000d858:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d85c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d863:	80 f9 19             	cmp    cl,0x19
c000d866:	77 32                	ja     c000d89a <File::rename(char const*)+0x4a>
c000d868:	8b 0c 8d a0 8f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7060]
c000d86f:	85 c9                	test   ecx,ecx
c000d871:	74 27                	je     c000d89a <File::rename(char const*)+0x4a>
c000d873:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d879:	85 c9                	test   ecx,ecx
c000d87b:	74 1d                	je     c000d89a <File::rename(char const*)+0x4a>
c000d87d:	b8 06 00 00 00       	mov    eax,0x6
c000d882:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d886:	75 12                	jne    c000d89a <File::rename(char const*)+0x4a>
c000d888:	83 c2 0d             	add    edx,0xd
c000d88b:	50                   	push   eax
c000d88c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d88e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d892:	52                   	push   edx
c000d893:	51                   	push   ecx
c000d894:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d897:	83 c4 10             	add    esp,0x10
c000d89a:	83 c4 0c             	add    esp,0xc
c000d89d:	c3                   	ret    

c000d89e <File::chfatattr(unsigned char, unsigned char)>:
c000d89e:	57                   	push   edi
c000d89f:	b8 0b 00 00 00       	mov    eax,0xb
c000d8a4:	56                   	push   esi
c000d8a5:	53                   	push   ebx
c000d8a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8aa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d8ae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d8b5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d8b9:	80 f9 19             	cmp    cl,0x19
c000d8bc:	77 37                	ja     c000d8f5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d8be:	8b 0c 8d a0 8f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7060]
c000d8c5:	85 c9                	test   ecx,ecx
c000d8c7:	74 2c                	je     c000d8f5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d8c9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d8cf:	85 c9                	test   ecx,ecx
c000d8d1:	74 22                	je     c000d8f5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d8d3:	b8 06 00 00 00       	mov    eax,0x6
c000d8d8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d8dc:	75 17                	jne    c000d8f5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d8de:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d8e0:	89 f0                	mov    eax,esi
c000d8e2:	83 c2 0d             	add    edx,0xd
c000d8e5:	0f b6 f0             	movzx  esi,al
c000d8e8:	0f b6 db             	movzx  ebx,bl
c000d8eb:	56                   	push   esi
c000d8ec:	53                   	push   ebx
c000d8ed:	52                   	push   edx
c000d8ee:	51                   	push   ecx
c000d8ef:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d8f2:	83 c4 10             	add    esp,0x10
c000d8f5:	5b                   	pop    ebx
c000d8f6:	5e                   	pop    esi
c000d8f7:	5f                   	pop    edi
c000d8f8:	c3                   	ret    
c000d8f9:	90                   	nop

c000d8fa <File::exists()>:
c000d8fa:	83 ec 0c             	sub    esp,0xc
c000d8fd:	31 c0                	xor    eax,eax
c000d8ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d903:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d90a:	80 f9 19             	cmp    cl,0x19
c000d90d:	77 24                	ja     c000d933 <File::exists()+0x39>
c000d90f:	8b 0c 8d a0 8f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7060]
c000d916:	85 c9                	test   ecx,ecx
c000d918:	74 19                	je     c000d933 <File::exists()+0x39>
c000d91a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d920:	85 c9                	test   ecx,ecx
c000d922:	74 0f                	je     c000d933 <File::exists()+0x39>
c000d924:	83 c2 0d             	add    edx,0xd
c000d927:	50                   	push   eax
c000d928:	50                   	push   eax
c000d929:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d92b:	52                   	push   edx
c000d92c:	51                   	push   ecx
c000d92d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d930:	83 c4 10             	add    esp,0x10
c000d933:	83 c4 0c             	add    esp,0xc
c000d936:	c3                   	ret    
c000d937:	90                   	nop

c000d938 <File::stat(unsigned long long*, bool*)>:
c000d938:	56                   	push   esi
c000d939:	53                   	push   ebx
c000d93a:	50                   	push   eax
c000d93b:	b8 0b 00 00 00       	mov    eax,0xb
c000d940:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d944:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d948:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d94f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d953:	80 f9 19             	cmp    cl,0x19
c000d956:	77 3d                	ja     c000d995 <File::stat(unsigned long long*, bool*)+0x5d>
c000d958:	8b 0c 8d a0 8f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7060]
c000d95f:	85 c9                	test   ecx,ecx
c000d961:	74 32                	je     c000d995 <File::stat(unsigned long long*, bool*)+0x5d>
c000d963:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d969:	85 c9                	test   ecx,ecx
c000d96b:	74 28                	je     c000d995 <File::stat(unsigned long long*, bool*)+0x5d>
c000d96d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d96f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d973:	74 13                	je     c000d988 <File::stat(unsigned long long*, bool*)+0x50>
c000d975:	83 ec 04             	sub    esp,0x4
c000d978:	56                   	push   esi
c000d979:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d97f:	51                   	push   ecx
c000d980:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d983:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d986:	eb 0a                	jmp    c000d992 <File::stat(unsigned long long*, bool*)+0x5a>
c000d988:	53                   	push   ebx
c000d989:	83 c2 0d             	add    edx,0xd
c000d98c:	56                   	push   esi
c000d98d:	52                   	push   edx
c000d98e:	51                   	push   ecx
c000d98f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d992:	83 c4 10             	add    esp,0x10
c000d995:	5a                   	pop    edx
c000d996:	5b                   	pop    ebx
c000d997:	5e                   	pop    esi
c000d998:	c3                   	ret    

c000d999 <Fs::setcwd(Process*, char*)>:
c000d999:	55                   	push   ebp
c000d99a:	57                   	push   edi
c000d99b:	56                   	push   esi
c000d99c:	53                   	push   ebx
c000d99d:	81 ec 20 02 00 00    	sub    esp,0x220
c000d9a3:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d9aa:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d9b0:	57                   	push   edi
c000d9b1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d9b8:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d9bc:	56                   	push   esi
c000d9bd:	e8 46 fa ff ff       	call   c000d408 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d9c2:	89 34 24             	mov    DWORD PTR [esp],esi
c000d9c5:	e8 d6 2c ff ff       	call   c00006a0 <strlen>
c000d9ca:	83 c4 10             	add    esp,0x10
c000d9cd:	83 f8 02             	cmp    eax,0x2
c000d9d0:	77 15                	ja     c000d9e7 <Fs::setcwd(Process*, char*)+0x4e>
c000d9d2:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000d9d7:	83 eb 41             	sub    ebx,0x41
c000d9da:	8b 04 9d a0 8f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7060]
c000d9e1:	85 c0                	test   eax,eax
c000d9e3:	75 1c                	jne    c000da01 <Fs::setcwd(Process*, char*)+0x68>
c000d9e5:	eb 4c                	jmp    c000da33 <Fs::setcwd(Process*, char*)+0x9a>
c000d9e7:	83 ec 0c             	sub    esp,0xc
c000d9ea:	56                   	push   esi
c000d9eb:	e8 b0 2c ff ff       	call   c00006a0 <strlen>
c000d9f0:	83 c4 10             	add    esp,0x10
c000d9f3:	83 f8 03             	cmp    eax,0x3
c000d9f6:	75 74                	jne    c000da6c <Fs::setcwd(Process*, char*)+0xd3>
c000d9f8:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d9fd:	75 6d                	jne    c000da6c <Fs::setcwd(Process*, char*)+0xd3>
c000d9ff:	eb d1                	jmp    c000d9d2 <Fs::setcwd(Process*, char*)+0x39>
c000da01:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000da08:	75 29                	jne    c000da33 <Fs::setcwd(Process*, char*)+0x9a>
c000da0a:	83 ec 0c             	sub    esp,0xc
c000da0d:	68 94 51 02 c0       	push   0xc0025194
c000da12:	e8 30 f6 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000da17:	5a                   	pop    edx
c000da18:	ff 34 9d a0 8f 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7060]
c000da1f:	e8 a4 2e 00 00       	call   c00108c8 <LogicalDisk::mount()>
c000da24:	c7 04 24 09 75 02 c0 	mov    DWORD PTR [esp],0xc0027509
c000da2b:	e8 17 f6 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000da30:	83 c4 10             	add    esp,0x10
c000da33:	b8 03 00 00 00       	mov    eax,0x3
c000da38:	83 fb 19             	cmp    ebx,0x19
c000da3b:	0f 87 c6 00 00 00    	ja     c000db07 <Fs::setcwd(Process*, char*)+0x16e>
c000da41:	8b 14 9d a0 8f 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7060]
c000da48:	b8 05 00 00 00       	mov    eax,0x5
c000da4d:	85 d2                	test   edx,edx
c000da4f:	0f 84 b2 00 00 00    	je     c000db07 <Fs::setcwd(Process*, char*)+0x16e>
c000da55:	b8 06 00 00 00       	mov    eax,0x6
c000da5a:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000da61:	0f 85 92 00 00 00    	jne    c000daf9 <Fs::setcwd(Process*, char*)+0x160>
c000da67:	e9 9b 00 00 00       	jmp    c000db07 <Fs::setcwd(Process*, char*)+0x16e>
c000da6c:	83 ec 0c             	sub    esp,0xc
c000da6f:	68 14 01 00 00       	push   0x114
c000da74:	e8 e2 c2 ff ff       	call   c0009d5b <malloc>
c000da79:	83 c4 0c             	add    esp,0xc
c000da7c:	89 c3                	mov    ebx,eax
c000da7e:	55                   	push   ebp
c000da7f:	56                   	push   esi
c000da80:	50                   	push   eax
c000da81:	e8 2c fb ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c000da86:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000da8b:	83 c4 0c             	add    esp,0xc
c000da8e:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000da92:	50                   	push   eax
c000da93:	8d 44 24 10          	lea    eax,[esp+0x10]
c000da97:	50                   	push   eax
c000da98:	53                   	push   ebx
c000da99:	e8 9a fe ff ff       	call   c000d938 <File::stat(unsigned long long*, bool*)>
c000da9e:	83 c4 10             	add    esp,0x10
c000daa1:	83 f8 02             	cmp    eax,0x2
c000daa4:	74 04                	je     c000daaa <Fs::setcwd(Process*, char*)+0x111>
c000daa6:	85 c0                	test   eax,eax
c000daa8:	74 1c                	je     c000dac6 <Fs::setcwd(Process*, char*)+0x12d>
c000daaa:	b8 01 00 00 00       	mov    eax,0x1
c000daaf:	85 db                	test   ebx,ebx
c000dab1:	74 54                	je     c000db07 <Fs::setcwd(Process*, char*)+0x16e>
c000dab3:	83 ec 0c             	sub    esp,0xc
c000dab6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dab8:	53                   	push   ebx
c000dab9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dabc:	83 c4 10             	add    esp,0x10
c000dabf:	b8 01 00 00 00       	mov    eax,0x1
c000dac4:	eb 41                	jmp    c000db07 <Fs::setcwd(Process*, char*)+0x16e>
c000dac6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000dacb:	75 1c                	jne    c000dae9 <Fs::setcwd(Process*, char*)+0x150>
c000dacd:	b8 02 00 00 00       	mov    eax,0x2
c000dad2:	85 db                	test   ebx,ebx
c000dad4:	74 31                	je     c000db07 <Fs::setcwd(Process*, char*)+0x16e>
c000dad6:	83 ec 0c             	sub    esp,0xc
c000dad9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dadb:	53                   	push   ebx
c000dadc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dadf:	83 c4 10             	add    esp,0x10
c000dae2:	b8 02 00 00 00       	mov    eax,0x2
c000dae7:	eb 1e                	jmp    c000db07 <Fs::setcwd(Process*, char*)+0x16e>
c000dae9:	85 db                	test   ebx,ebx
c000daeb:	74 0c                	je     c000daf9 <Fs::setcwd(Process*, char*)+0x160>
c000daed:	83 ec 0c             	sub    esp,0xc
c000daf0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000daf2:	53                   	push   ebx
c000daf3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000daf6:	83 c4 10             	add    esp,0x10
c000daf9:	50                   	push   eax
c000dafa:	50                   	push   eax
c000dafb:	56                   	push   esi
c000dafc:	57                   	push   edi
c000dafd:	e8 3e 2c ff ff       	call   c0000740 <strcpy>
c000db02:	83 c4 10             	add    esp,0x10
c000db05:	31 c0                	xor    eax,eax
c000db07:	81 c4 1c 02 00 00    	add    esp,0x21c
c000db0d:	5b                   	pop    ebx
c000db0e:	5e                   	pop    esi
c000db0f:	5f                   	pop    edi
c000db10:	5d                   	pop    ebp
c000db11:	c3                   	ret    

c000db12 <Directory::Directory(char const*, Process*)>:
c000db12:	83 ec 0c             	sub    esp,0xc
c000db15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db19:	83 ec 08             	sub    esp,0x8
c000db1c:	6a 00                	push   0x0
c000db1e:	50                   	push   eax
c000db1f:	e8 ba dd ff ff       	call   c000b8de <UnixFile::UnixFile(int)>
c000db24:	83 c4 10             	add    esp,0x10
c000db27:	ba 9c 52 02 c0       	mov    edx,0xc002529c
c000db2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db30:	89 10                	mov    DWORD PTR [eax],edx
c000db32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000db36:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000db3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db40:	83 c0 0d             	add    eax,0xd
c000db43:	83 ec 04             	sub    esp,0x4
c000db46:	52                   	push   edx
c000db47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db4b:	50                   	push   eax
c000db4c:	e8 b7 f8 ff ff       	call   c000d408 <Fs::standardiseFiles(char*, char const*, char const*)>
c000db51:	83 c4 10             	add    esp,0x10
c000db54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db58:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000db5b:	8d 50 bf             	lea    edx,[eax-0x41]
c000db5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db62:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000db68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db6c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000db70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db74:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000db7a:	0f b6 c0             	movzx  eax,al
c000db7d:	8b 04 85 a0 8f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7060]
c000db84:	85 c0                	test   eax,eax
c000db86:	74 5e                	je     c000dbe6 <Directory::Directory(char const*, Process*)+0xd4>
c000db88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db8c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000db92:	0f b6 c0             	movzx  eax,al
c000db95:	8b 04 85 a0 8f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7060]
c000db9c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000dba2:	85 c0                	test   eax,eax
c000dba4:	75 40                	jne    c000dbe6 <Directory::Directory(char const*, Process*)+0xd4>
c000dba6:	83 ec 0c             	sub    esp,0xc
c000dba9:	68 e4 51 02 c0       	push   0xc00251e4
c000dbae:	e8 94 f4 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000dbb3:	83 c4 10             	add    esp,0x10
c000dbb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbba:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000dbc0:	0f b6 c0             	movzx  eax,al
c000dbc3:	8b 04 85 a0 8f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7060]
c000dbca:	83 ec 0c             	sub    esp,0xc
c000dbcd:	50                   	push   eax
c000dbce:	e8 f5 2c 00 00       	call   c00108c8 <LogicalDisk::mount()>
c000dbd3:	83 c4 10             	add    esp,0x10
c000dbd6:	83 ec 0c             	sub    esp,0xc
c000dbd9:	68 09 75 02 c0       	push   0xc0027509
c000dbde:	e8 64 f4 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000dbe3:	83 c4 10             	add    esp,0x10
c000dbe6:	90                   	nop
c000dbe7:	83 c4 0c             	add    esp,0xc
c000dbea:	c3                   	ret    
c000dbeb:	90                   	nop

c000dbec <Directory::open()>:
c000dbec:	53                   	push   ebx
c000dbed:	b8 0b 00 00 00       	mov    eax,0xb
c000dbf2:	83 ec 08             	sub    esp,0x8
c000dbf5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dbf9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000dc00:	80 fa 19             	cmp    dl,0x19
c000dc03:	77 3d                	ja     c000dc42 <Directory::open()+0x56>
c000dc05:	8b 14 95 a0 8f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7060]
c000dc0c:	85 d2                	test   edx,edx
c000dc0e:	74 32                	je     c000dc42 <Directory::open()+0x56>
c000dc10:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000dc16:	85 d2                	test   edx,edx
c000dc18:	74 28                	je     c000dc42 <Directory::open()+0x56>
c000dc1a:	b8 06 00 00 00       	mov    eax,0x6
c000dc1f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000dc23:	75 1d                	jne    c000dc42 <Directory::open()+0x56>
c000dc25:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000dc2b:	50                   	push   eax
c000dc2c:	8b 02                	mov    eax,DWORD PTR [edx]
c000dc2e:	51                   	push   ecx
c000dc2f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000dc32:	51                   	push   ecx
c000dc33:	52                   	push   edx
c000dc34:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000dc37:	83 c4 10             	add    esp,0x10
c000dc3a:	85 c0                	test   eax,eax
c000dc3c:	75 04                	jne    c000dc42 <Directory::open()+0x56>
c000dc3e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000dc42:	83 c4 08             	add    esp,0x8
c000dc45:	5b                   	pop    ebx
c000dc46:	c3                   	ret    
c000dc47:	90                   	nop

c000dc48 <Directory::close()>:
c000dc48:	53                   	push   ebx
c000dc49:	b8 0b 00 00 00       	mov    eax,0xb
c000dc4e:	83 ec 08             	sub    esp,0x8
c000dc51:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dc55:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dc5c:	80 fa 19             	cmp    dl,0x19
c000dc5f:	77 41                	ja     c000dca2 <Directory::close()+0x5a>
c000dc61:	8b 1c 95 a0 8f 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7060]
c000dc68:	85 db                	test   ebx,ebx
c000dc6a:	74 36                	je     c000dca2 <Directory::close()+0x5a>
c000dc6c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000dc73:	74 2d                	je     c000dca2 <Directory::close()+0x5a>
c000dc75:	b8 05 00 00 00       	mov    eax,0x5
c000dc7a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000dc7e:	74 22                	je     c000dca2 <Directory::close()+0x5a>
c000dc80:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000dc84:	8b 04 95 a0 8f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7060]
c000dc8b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000dc91:	53                   	push   ebx
c000dc92:	53                   	push   ebx
c000dc93:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc95:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000dc9b:	50                   	push   eax
c000dc9c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000dc9f:	83 c4 10             	add    esp,0x10
c000dca2:	83 c4 08             	add    esp,0x8
c000dca5:	5b                   	pop    ebx
c000dca6:	c3                   	ret    
c000dca7:	90                   	nop

c000dca8 <Directory::unlink()>:
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	b8 0b 00 00 00       	mov    eax,0xb
c000dcb0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dcb4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dcbb:	80 f9 19             	cmp    cl,0x19
c000dcbe:	77 2f                	ja     c000dcef <Directory::unlink()+0x47>
c000dcc0:	8b 0c 8d a0 8f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7060]
c000dcc7:	85 c9                	test   ecx,ecx
c000dcc9:	74 24                	je     c000dcef <Directory::unlink()+0x47>
c000dccb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dcd1:	85 c9                	test   ecx,ecx
c000dcd3:	74 1a                	je     c000dcef <Directory::unlink()+0x47>
c000dcd5:	b8 06 00 00 00       	mov    eax,0x6
c000dcda:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dcde:	75 0f                	jne    c000dcef <Directory::unlink()+0x47>
c000dce0:	83 c2 0d             	add    edx,0xd
c000dce3:	50                   	push   eax
c000dce4:	50                   	push   eax
c000dce5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dce7:	52                   	push   edx
c000dce8:	51                   	push   ecx
c000dce9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000dcec:	83 c4 10             	add    esp,0x10
c000dcef:	83 c4 0c             	add    esp,0xc
c000dcf2:	c3                   	ret    
c000dcf3:	90                   	nop

c000dcf4 <Directory::rename(char const*)>:
c000dcf4:	83 ec 0c             	sub    esp,0xc
c000dcf7:	b8 0b 00 00 00       	mov    eax,0xb
c000dcfc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd00:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dd07:	80 f9 19             	cmp    cl,0x19
c000dd0a:	77 32                	ja     c000dd3e <Directory::rename(char const*)+0x4a>
c000dd0c:	8b 0c 8d a0 8f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7060]
c000dd13:	85 c9                	test   ecx,ecx
c000dd15:	74 27                	je     c000dd3e <Directory::rename(char const*)+0x4a>
c000dd17:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dd1d:	85 c9                	test   ecx,ecx
c000dd1f:	74 1d                	je     c000dd3e <Directory::rename(char const*)+0x4a>
c000dd21:	b8 06 00 00 00       	mov    eax,0x6
c000dd26:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dd2a:	75 12                	jne    c000dd3e <Directory::rename(char const*)+0x4a>
c000dd2c:	83 c2 0d             	add    edx,0xd
c000dd2f:	50                   	push   eax
c000dd30:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd36:	52                   	push   edx
c000dd37:	51                   	push   ecx
c000dd38:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000dd3b:	83 c4 10             	add    esp,0x10
c000dd3e:	83 c4 0c             	add    esp,0xc
c000dd41:	c3                   	ret    

c000dd42 <Directory::exists()>:
c000dd42:	83 ec 0c             	sub    esp,0xc
c000dd45:	31 c0                	xor    eax,eax
c000dd47:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd4b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dd52:	80 f9 19             	cmp    cl,0x19
c000dd55:	77 24                	ja     c000dd7b <Directory::exists()+0x39>
c000dd57:	8b 0c 8d a0 8f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7060]
c000dd5e:	85 c9                	test   ecx,ecx
c000dd60:	74 19                	je     c000dd7b <Directory::exists()+0x39>
c000dd62:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dd68:	85 c9                	test   ecx,ecx
c000dd6a:	74 0f                	je     c000dd7b <Directory::exists()+0x39>
c000dd6c:	83 c2 0d             	add    edx,0xd
c000dd6f:	50                   	push   eax
c000dd70:	50                   	push   eax
c000dd71:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd73:	52                   	push   edx
c000dd74:	51                   	push   ecx
c000dd75:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000dd78:	83 c4 10             	add    esp,0x10
c000dd7b:	83 c4 0c             	add    esp,0xc
c000dd7e:	c3                   	ret    
c000dd7f:	90                   	nop

c000dd80 <Directory::read(dirent*)>:
c000dd80:	83 ec 1c             	sub    esp,0x1c
c000dd83:	b8 0b 00 00 00       	mov    eax,0xb
c000dd88:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dd8c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dd93:	80 fa 19             	cmp    dl,0x19
c000dd96:	77 30                	ja     c000ddc8 <Directory::read(dirent*)+0x48>
c000dd98:	8b 14 95 a0 8f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7060]
c000dd9f:	85 d2                	test   edx,edx
c000dda1:	74 25                	je     c000ddc8 <Directory::read(dirent*)+0x48>
c000dda3:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000ddaa:	74 1c                	je     c000ddc8 <Directory::read(dirent*)+0x48>
c000ddac:	83 ec 0c             	sub    esp,0xc
c000ddaf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ddb1:	8d 54 24 18          	lea    edx,[esp+0x18]
c000ddb5:	52                   	push   edx
c000ddb6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ddba:	6a 00                	push   0x0
c000ddbc:	68 10 01 00 00       	push   0x110
c000ddc1:	51                   	push   ecx
c000ddc2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ddc5:	83 c4 20             	add    esp,0x20
c000ddc8:	83 c4 1c             	add    esp,0x1c
c000ddcb:	c3                   	ret    

c000ddcc <Directory::create()>:
c000ddcc:	83 ec 0c             	sub    esp,0xc
c000ddcf:	b8 0b 00 00 00       	mov    eax,0xb
c000ddd4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ddd8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dddf:	80 f9 19             	cmp    cl,0x19
c000dde2:	77 2f                	ja     c000de13 <Directory::create()+0x47>
c000dde4:	8b 0c 8d a0 8f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7060]
c000ddeb:	85 c9                	test   ecx,ecx
c000dded:	74 24                	je     c000de13 <Directory::create()+0x47>
c000ddef:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ddf5:	85 c9                	test   ecx,ecx
c000ddf7:	74 1a                	je     c000de13 <Directory::create()+0x47>
c000ddf9:	b8 06 00 00 00       	mov    eax,0x6
c000ddfe:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000de02:	75 0f                	jne    c000de13 <Directory::create()+0x47>
c000de04:	83 c2 0d             	add    edx,0xd
c000de07:	50                   	push   eax
c000de08:	50                   	push   eax
c000de09:	8b 01                	mov    eax,DWORD PTR [ecx]
c000de0b:	52                   	push   edx
c000de0c:	51                   	push   ecx
c000de0d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000de10:	83 c4 10             	add    esp,0x10
c000de13:	83 c4 0c             	add    esp,0xc
c000de16:	c3                   	ret    
c000de17:	90                   	nop

c000de18 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000de18:	b8 0a 00 00 00       	mov    eax,0xa
c000de1d:	c3                   	ret    
c000de1e:	66 90                	xchg   ax,ax

c000de20 <Bus::Bus(char const*)>:
c000de20:	83 ec 0c             	sub    esp,0xc
c000de23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de27:	83 ec 08             	sub    esp,0x8
c000de2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2e:	50                   	push   eax
c000de2f:	e8 8a 09 00 00       	call   c000e7be <Device::Device(char const*)>
c000de34:	83 c4 10             	add    esp,0x10
c000de37:	ba b8 52 02 c0       	mov    edx,0xc00252b8
c000de3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de40:	89 10                	mov    DWORD PTR [eax],edx
c000de42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de46:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000de50:	90                   	nop
c000de51:	83 c4 0c             	add    esp,0xc
c000de54:	c3                   	ret    
c000de55:	90                   	nop
c000de56:	66 90                	xchg   ax,ax

c000de58 <Bus::~Bus()>:
c000de58:	83 ec 0c             	sub    esp,0xc
c000de5b:	ba b8 52 02 c0       	mov    edx,0xc00252b8
c000de60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de64:	89 10                	mov    DWORD PTR [eax],edx
c000de66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de6a:	83 ec 0c             	sub    esp,0xc
c000de6d:	50                   	push   eax
c000de6e:	e8 15 06 00 00       	call   c000e488 <Device::~Device()>
c000de73:	83 c4 10             	add    esp,0x10
c000de76:	90                   	nop
c000de77:	83 c4 0c             	add    esp,0xc
c000de7a:	c3                   	ret    
c000de7b:	90                   	nop

c000de7c <Bus::~Bus()>:
c000de7c:	83 ec 0c             	sub    esp,0xc
c000de7f:	83 ec 0c             	sub    esp,0xc
c000de82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de86:	e8 cd ff ff ff       	call   c000de58 <Bus::~Bus()>
c000de8b:	83 c4 10             	add    esp,0x10
c000de8e:	83 ec 08             	sub    esp,0x8
c000de91:	68 58 01 00 00       	push   0x158
c000de96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de9a:	e8 c7 f0 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000de9f:	83 c4 10             	add    esp,0x10
c000dea2:	83 c4 0c             	add    esp,0xc
c000dea5:	c3                   	ret    
c000dea6:	66 90                	xchg   ax,ax

c000dea8 <Buzzer::Buzzer(char const*)>:
c000dea8:	83 ec 0c             	sub    esp,0xc
c000deab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deaf:	83 ec 08             	sub    esp,0x8
c000deb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deb6:	50                   	push   eax
c000deb7:	e8 02 09 00 00       	call   c000e7be <Device::Device(char const*)>
c000debc:	83 c4 10             	add    esp,0x10
c000debf:	ba e4 52 02 c0       	mov    edx,0xc00252e4
c000dec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dec8:	89 10                	mov    DWORD PTR [eax],edx
c000deca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dece:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ded8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dedc:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000dee6:	90                   	nop
c000dee7:	83 c4 0c             	add    esp,0xc
c000deea:	c3                   	ret    
c000deeb:	90                   	nop

c000deec <Buzzer::~Buzzer()>:
c000deec:	83 ec 0c             	sub    esp,0xc
c000deef:	ba e4 52 02 c0       	mov    edx,0xc00252e4
c000def4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000def8:	89 10                	mov    DWORD PTR [eax],edx
c000defa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000defe:	83 ec 0c             	sub    esp,0xc
c000df01:	50                   	push   eax
c000df02:	e8 81 05 00 00       	call   c000e488 <Device::~Device()>
c000df07:	83 c4 10             	add    esp,0x10
c000df0a:	90                   	nop
c000df0b:	83 c4 0c             	add    esp,0xc
c000df0e:	c3                   	ret    
c000df0f:	90                   	nop

c000df10 <Buzzer::~Buzzer()>:
c000df10:	83 ec 0c             	sub    esp,0xc
c000df13:	83 ec 0c             	sub    esp,0xc
c000df16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df1a:	e8 cd ff ff ff       	call   c000deec <Buzzer::~Buzzer()>
c000df1f:	83 c4 10             	add    esp,0x10
c000df22:	83 ec 08             	sub    esp,0x8
c000df25:	68 5c 01 00 00       	push   0x15c
c000df2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df2e:	e8 33 f0 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000df33:	83 c4 10             	add    esp,0x10
c000df36:	83 c4 0c             	add    esp,0xc
c000df39:	c3                   	ret    

c000df3a <Buzzer::stop()>:
c000df3a:	83 ec 14             	sub    esp,0x14
c000df3d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000df41:	8b 10                	mov    edx,DWORD PTR [eax]
c000df43:	6a 00                	push   0x0
c000df45:	50                   	push   eax
c000df46:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000df49:	83 c4 1c             	add    esp,0x1c
c000df4c:	c3                   	ret    

c000df4d <beepThread(void*)>:
c000df4d:	53                   	push   ebx
c000df4e:	83 ec 08             	sub    esp,0x8
c000df51:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c000df56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000df5a:	48                   	dec    eax
c000df5b:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c000df60:	75 02                	jne    c000df64 <beepThread(void*)+0x17>
c000df62:	fb                   	sti    
c000df63:	90                   	nop
c000df64:	83 ec 0c             	sub    esp,0xc
c000df67:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000df6e:	50                   	push   eax
c000df6f:	e8 b8 b0 00 00       	call   c001902c <milliTenthSleep(unsigned int)>
c000df74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000df77:	e8 be ff ff ff       	call   c000df3a <Buzzer::stop()>
c000df7c:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000df84:	83 c4 18             	add    esp,0x18
c000df87:	5b                   	pop    ebx
c000df88:	e9 9f af 00 00       	jmp    c0018f2c <blockTask(TaskState)>
c000df8d:	90                   	nop

c000df8e <Buzzer::beep(int, int, bool)>:
c000df8e:	57                   	push   edi
c000df8f:	56                   	push   esi
c000df90:	53                   	push   ebx
c000df91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000df95:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000df99:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000df9d:	50                   	push   eax
c000df9e:	50                   	push   eax
c000df9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dfa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa5:	53                   	push   ebx
c000dfa6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dfa9:	83 c4 10             	add    esp,0x10
c000dfac:	89 f8                	mov    eax,edi
c000dfae:	84 c0                	test   al,al
c000dfb0:	74 1e                	je     c000dfd0 <Buzzer::beep(int, int, bool)+0x42>
c000dfb2:	83 ec 0c             	sub    esp,0xc
c000dfb5:	6b f6 0a             	imul   esi,esi,0xa
c000dfb8:	56                   	push   esi
c000dfb9:	e8 6e b0 00 00       	call   c001902c <milliTenthSleep(unsigned int)>
c000dfbe:	83 c4 10             	add    esp,0x10
c000dfc1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000dfc5:	5b                   	pop    ebx
c000dfc6:	5e                   	pop    esi
c000dfc7:	5f                   	pop    edi
c000dfc8:	e9 6d ff ff ff       	jmp    c000df3a <Buzzer::stop()>
c000dfcd:	8d 76 00             	lea    esi,[esi+0x0]
c000dfd0:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000dfd6:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000dfdb:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000dfe3:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dfe7:	c7 44 24 14 4d df 00 c0 	mov    DWORD PTR [esp+0x14],0xc000df4d
c000dfef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dff3:	5b                   	pop    ebx
c000dff4:	5e                   	pop    esi
c000dff5:	5f                   	pop    edi
c000dff6:	e9 1d ab 00 00       	jmp    c0018b18 <Process::createThread(void (*)(void*), void*, int)>
c000dffb:	90                   	nop

c000dffc <User::loadClockSettings(int)>:
c000dffc:	53                   	push   ebx
c000dffd:	83 ec 14             	sub    esp,0x14
c000e000:	68 14 01 00 00       	push   0x114
c000e005:	e8 51 bd ff ff       	call   c0009d5b <malloc>
c000e00a:	83 c4 0c             	add    esp,0xc
c000e00d:	89 c3                	mov    ebx,eax
c000e00f:	ff 35 30 9f 02 c0    	push   DWORD PTR ds:0xc0029f30
c000e015:	68 0c 53 02 c0       	push   0xc002530c
c000e01a:	50                   	push   eax
c000e01b:	e8 92 f5 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c000e020:	58                   	pop    eax
c000e021:	5a                   	pop    edx
c000e022:	6a 01                	push   0x1
c000e024:	53                   	push   ebx
c000e025:	e8 62 f6 ff ff       	call   c000d68c <File::open(FileOpenMode)>
c000e02a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e02d:	e8 b8 f6 ff ff       	call   c000d6ea <File::close()>
c000e032:	83 c4 10             	add    esp,0x10
c000e035:	85 db                	test   ebx,ebx
c000e037:	74 0f                	je     c000e048 <User::loadClockSettings(int)+0x4c>
c000e039:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e03b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000e03f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e042:	83 c4 08             	add    esp,0x8
c000e045:	5b                   	pop    ebx
c000e046:	ff e0                	jmp    eax
c000e048:	83 c4 08             	add    esp,0x8
c000e04b:	5b                   	pop    ebx
c000e04c:	c3                   	ret    
c000e04d:	90                   	nop

c000e04e <Clock::Clock(char const*)>:
c000e04e:	83 ec 0c             	sub    esp,0xc
c000e051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e055:	83 ec 08             	sub    esp,0x8
c000e058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e05c:	50                   	push   eax
c000e05d:	e8 5c 07 00 00       	call   c000e7be <Device::Device(char const*)>
c000e062:	83 c4 10             	add    esp,0x10
c000e065:	ba 34 53 02 c0       	mov    edx,0xc0025334
c000e06a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e06e:	89 10                	mov    DWORD PTR [eax],edx
c000e070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e074:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000e07e:	90                   	nop
c000e07f:	83 c4 0c             	add    esp,0xc
c000e082:	c3                   	ret    
c000e083:	90                   	nop

c000e084 <Clock::~Clock()>:
c000e084:	83 ec 0c             	sub    esp,0xc
c000e087:	ba 34 53 02 c0       	mov    edx,0xc0025334
c000e08c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e090:	89 10                	mov    DWORD PTR [eax],edx
c000e092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e096:	83 ec 0c             	sub    esp,0xc
c000e099:	50                   	push   eax
c000e09a:	e8 e9 03 00 00       	call   c000e488 <Device::~Device()>
c000e09f:	83 c4 10             	add    esp,0x10
c000e0a2:	90                   	nop
c000e0a3:	83 c4 0c             	add    esp,0xc
c000e0a6:	c3                   	ret    
c000e0a7:	90                   	nop

c000e0a8 <Clock::~Clock()>:
c000e0a8:	83 ec 0c             	sub    esp,0xc
c000e0ab:	83 ec 0c             	sub    esp,0xc
c000e0ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0b2:	e8 cd ff ff ff       	call   c000e084 <Clock::~Clock()>
c000e0b7:	83 c4 10             	add    esp,0x10
c000e0ba:	83 ec 08             	sub    esp,0x8
c000e0bd:	68 58 01 00 00       	push   0x158
c000e0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0c6:	e8 9b ee ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000e0cb:	83 c4 10             	add    esp,0x10
c000e0ce:	83 c4 0c             	add    esp,0xc
c000e0d1:	c3                   	ret    

c000e0d2 <Clock::timeInSecondsLocal()>:
c000e0d2:	53                   	push   ebx
c000e0d3:	83 ec 14             	sub    esp,0x14
c000e0d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e0da:	8b 10                	mov    edx,DWORD PTR [eax]
c000e0dc:	50                   	push   eax
c000e0dd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e0e0:	0f b6 0d 1c 8b 02 c0 	movzx  ecx,BYTE PTR ds:0xc0028b1c
c000e0e7:	03 0d 20 8b 02 c0    	add    ecx,DWORD PTR ds:0xc0028b20
c000e0ed:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e0f3:	89 cb                	mov    ebx,ecx
c000e0f5:	c1 fb 1f             	sar    ebx,0x1f
c000e0f8:	01 c8                	add    eax,ecx
c000e0fa:	11 da                	adc    edx,ebx
c000e0fc:	83 c4 10             	add    esp,0x10
c000e0ff:	31 c9                	xor    ecx,ecx
c000e101:	80 3d 1d 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b1d,0x0
c000e108:	74 05                	je     c000e10f <Clock::timeInSecondsLocal()+0x3d>
c000e10a:	b9 08 07 00 00       	mov    ecx,0x708
c000e10f:	31 db                	xor    ebx,ebx
c000e111:	01 c8                	add    eax,ecx
c000e113:	11 da                	adc    edx,ebx
c000e115:	83 c4 08             	add    esp,0x8
c000e118:	5b                   	pop    ebx
c000e119:	c3                   	ret    

c000e11a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000e11a:	57                   	push   edi
c000e11b:	56                   	push   esi
c000e11c:	53                   	push   ebx
c000e11d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e121:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e125:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e127:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e12b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000e12e:	0f b6 05 1c 8b 02 c0 	movzx  eax,BYTE PTR ds:0xc0028b1c
c000e135:	03 05 20 8b 02 c0    	add    eax,DWORD PTR ds:0xc0028b20
c000e13b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000e141:	99                   	cdq    
c000e142:	29 c6                	sub    esi,eax
c000e144:	19 d7                	sbb    edi,edx
c000e146:	89 f0                	mov    eax,esi
c000e148:	89 fa                	mov    edx,edi
c000e14a:	31 f6                	xor    esi,esi
c000e14c:	80 3d 1d 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b1d,0x0
c000e153:	74 05                	je     c000e15a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000e155:	be 08 07 00 00       	mov    esi,0x708
c000e15a:	31 ff                	xor    edi,edi
c000e15c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000e160:	29 f0                	sub    eax,esi
c000e162:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e166:	19 fa                	sbb    edx,edi
c000e168:	89 d8                	mov    eax,ebx
c000e16a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e16e:	5b                   	pop    ebx
c000e16f:	5e                   	pop    esi
c000e170:	5f                   	pop    edi
c000e171:	ff e0                	jmp    eax

c000e173 <datetimeToSeconds(datetime_t)>:
c000e173:	55                   	push   ebp
c000e174:	57                   	push   edi
c000e175:	56                   	push   esi
c000e176:	53                   	push   ebx
c000e177:	83 ec 14             	sub    esp,0x14
c000e17a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e17e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e182:	89 d3                	mov    ebx,edx
c000e184:	0f b6 c6             	movzx  eax,dh
c000e187:	c1 eb 10             	shr    ebx,0x10
c000e18a:	48                   	dec    eax
c000e18b:	66 81 eb 6c 07       	sub    bx,0x76c
c000e190:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000e194:	0f b6 f5             	movzx  esi,ch
c000e197:	89 cf                	mov    edi,ecx
c000e199:	6b f6 3c             	imul   esi,esi,0x3c
c000e19c:	c1 ef 10             	shr    edi,0x10
c000e19f:	0f b6 c9             	movzx  ecx,cl
c000e1a2:	89 f8                	mov    eax,edi
c000e1a4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e1aa:	0f b6 f8             	movzx  edi,al
c000e1ad:	0f b6 d2             	movzx  edx,dl
c000e1b0:	01 fe                	add    esi,edi
c000e1b2:	01 f1                	add    ecx,esi
c000e1b4:	0f b7 f3             	movzx  esi,bx
c000e1b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e1bb:	c1 f9 1f             	sar    ecx,0x1f
c000e1be:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000e1c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e1c7:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000e1cc:	8b 0c 8d 80 53 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdac80]
c000e1d3:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000e1d7:	76 29                	jbe    c000e202 <datetimeToSeconds(datetime_t)+0x8f>
c000e1d9:	f6 c3 03             	test   bl,0x3
c000e1dc:	75 24                	jne    c000e202 <datetimeToSeconds(datetime_t)+0x8f>
c000e1de:	31 d2                	xor    edx,edx
c000e1e0:	bf 64 00 00 00       	mov    edi,0x64
c000e1e5:	89 d8                	mov    eax,ebx
c000e1e7:	66 f7 f7             	div    di
c000e1ea:	66 85 d2             	test   dx,dx
c000e1ed:	75 12                	jne    c000e201 <datetimeToSeconds(datetime_t)+0x8e>
c000e1ef:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000e1f5:	bf 90 01 00 00       	mov    edi,0x190
c000e1fa:	99                   	cdq    
c000e1fb:	f7 ff                	idiv   edi
c000e1fd:	85 d2                	test   edx,edx
c000e1ff:	75 01                	jne    c000e202 <datetimeToSeconds(datetime_t)+0x8f>
c000e201:	41                   	inc    ecx
c000e202:	66 83 fb 46          	cmp    bx,0x46
c000e206:	76 45                	jbe    c000e24d <datetimeToSeconds(datetime_t)+0xda>
c000e208:	bb 46 00 00 00       	mov    ebx,0x46
c000e20d:	bf 64 00 00 00       	mov    edi,0x64
c000e212:	bd 90 01 00 00       	mov    ebp,0x190
c000e217:	b8 6d 01 00 00       	mov    eax,0x16d
c000e21c:	f6 c3 03             	test   bl,0x3
c000e21f:	75 23                	jne    c000e244 <datetimeToSeconds(datetime_t)+0xd1>
c000e221:	89 d8                	mov    eax,ebx
c000e223:	99                   	cdq    
c000e224:	f7 ff                	idiv   edi
c000e226:	b8 6e 01 00 00       	mov    eax,0x16e
c000e22b:	85 d2                	test   edx,edx
c000e22d:	75 15                	jne    c000e244 <datetimeToSeconds(datetime_t)+0xd1>
c000e22f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000e235:	99                   	cdq    
c000e236:	f7 fd                	idiv   ebp
c000e238:	83 fa 01             	cmp    edx,0x1
c000e23b:	19 c0                	sbb    eax,eax
c000e23d:	f7 d0                	not    eax
c000e23f:	05 6e 01 00 00       	add    eax,0x16e
c000e244:	01 c1                	add    ecx,eax
c000e246:	43                   	inc    ebx
c000e247:	39 f3                	cmp    ebx,esi
c000e249:	7c cc                	jl     c000e217 <datetimeToSeconds(datetime_t)+0xa4>
c000e24b:	eb 35                	jmp    c000e282 <datetimeToSeconds(datetime_t)+0x10f>
c000e24d:	74 33                	je     c000e282 <datetimeToSeconds(datetime_t)+0x10f>
c000e24f:	b8 45 00 00 00       	mov    eax,0x45
c000e254:	89 c2                	mov    edx,eax
c000e256:	83 e2 03             	and    edx,0x3
c000e259:	39 f0                	cmp    eax,esi
c000e25b:	7e 0f                	jle    c000e26c <datetimeToSeconds(datetime_t)+0xf9>
c000e25d:	83 fa 01             	cmp    edx,0x1
c000e260:	19 d2                	sbb    edx,edx
c000e262:	48                   	dec    eax
c000e263:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000e26a:	eb e8                	jmp    c000e254 <datetimeToSeconds(datetime_t)+0xe1>
c000e26c:	b8 6d 01 00 00       	mov    eax,0x16d
c000e271:	85 d2                	test   edx,edx
c000e273:	75 0b                	jne    c000e280 <datetimeToSeconds(datetime_t)+0x10d>
c000e275:	66 83 fb 01          	cmp    bx,0x1
c000e279:	19 c0                	sbb    eax,eax
c000e27b:	05 6e 01 00 00       	add    eax,0x16e
c000e280:	29 c1                	sub    ecx,eax
c000e282:	b8 80 51 01 00       	mov    eax,0x15180
c000e287:	f7 e9                	imul   ecx
c000e289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e28d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000e291:	83 c4 14             	add    esp,0x14
c000e294:	5b                   	pop    ebx
c000e295:	5e                   	pop    esi
c000e296:	5f                   	pop    edi
c000e297:	5d                   	pop    ebp
c000e298:	c3                   	ret    
c000e299:	90                   	nop

c000e29a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000e29a:	57                   	push   edi
c000e29b:	56                   	push   esi
c000e29c:	53                   	push   ebx
c000e29d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e2a1:	8b 06                	mov    eax,DWORD PTR [esi]
c000e2a3:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000e2a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e2aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e2ae:	e8 c0 fe ff ff       	call   c000e173 <datetimeToSeconds(datetime_t)>
c000e2b3:	59                   	pop    ecx
c000e2b4:	0f b6 0d 1c 8b 02 c0 	movzx  ecx,BYTE PTR ds:0xc0028b1c
c000e2bb:	5b                   	pop    ebx
c000e2bc:	03 0d 20 8b 02 c0    	add    ecx,DWORD PTR ds:0xc0028b20
c000e2c2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e2c8:	89 cb                	mov    ebx,ecx
c000e2ca:	c1 fb 1f             	sar    ebx,0x1f
c000e2cd:	29 c8                	sub    eax,ecx
c000e2cf:	19 da                	sbb    edx,ebx
c000e2d1:	31 c9                	xor    ecx,ecx
c000e2d3:	80 3d 1d 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b1d,0x0
c000e2da:	74 05                	je     c000e2e1 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000e2dc:	b9 08 07 00 00       	mov    ecx,0x708
c000e2e1:	31 db                	xor    ebx,ebx
c000e2e3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000e2e7:	29 c8                	sub    eax,ecx
c000e2e9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e2ed:	19 da                	sbb    edx,ebx
c000e2ef:	89 f8                	mov    eax,edi
c000e2f1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e2f5:	5b                   	pop    ebx
c000e2f6:	5e                   	pop    esi
c000e2f7:	5f                   	pop    edi
c000e2f8:	ff e0                	jmp    eax

c000e2fa <secondsToDatetime(unsigned long long)>:
c000e2fa:	55                   	push   ebp
c000e2fb:	57                   	push   edi
c000e2fc:	56                   	push   esi
c000e2fd:	53                   	push   ebx
c000e2fe:	83 ec 1c             	sub    esp,0x1c
c000e301:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e305:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000e309:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e30d:	6a 00                	push   0x0
c000e30f:	68 80 51 01 00       	push   0x15180
c000e314:	55                   	push   ebp
c000e315:	57                   	push   edi
c000e316:	e8 05 4b 01 00       	call   c0022e20 <__udivdi3>
c000e31b:	83 c4 10             	add    esp,0x10
c000e31e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000e324:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e328:	6a 00                	push   0x0
c000e32a:	68 80 51 01 00       	push   0x15180
c000e32f:	55                   	push   ebp
c000e330:	57                   	push   edi
c000e331:	bf 10 0e 00 00       	mov    edi,0xe10
c000e336:	e8 e5 4b 01 00       	call   c0022f20 <__umoddi3>
c000e33b:	83 c4 10             	add    esp,0x10
c000e33e:	99                   	cdq    
c000e33f:	f7 ff                	idiv   edi
c000e341:	bf 3c 00 00 00       	mov    edi,0x3c
c000e346:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000e349:	89 d0                	mov    eax,edx
c000e34b:	99                   	cdq    
c000e34c:	f7 ff                	idiv   edi
c000e34e:	85 db                	test   ebx,ebx
c000e350:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000e353:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000e356:	79 11                	jns    c000e369 <secondsToDatetime(unsigned long long)+0x6f>
c000e358:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e35c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000e362:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e367:	eb 07                	jmp    c000e370 <secondsToDatetime(unsigned long long)+0x76>
c000e369:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e36e:	89 d8                	mov    eax,ebx
c000e370:	bf b4 05 00 00       	mov    edi,0x5b4
c000e375:	99                   	cdq    
c000e376:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000e37b:	f7 f9                	idiv   ecx
c000e37d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000e382:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e386:	31 d2                	xor    edx,edx
c000e388:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000e390:	01 c3                	add    ebx,eax
c000e392:	89 d8                	mov    eax,ebx
c000e394:	f7 f1                	div    ecx
c000e396:	31 d2                	xor    edx,edx
c000e398:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000e39b:	89 d8                	mov    eax,ebx
c000e39d:	f7 f7                	div    edi
c000e39f:	31 d2                	xor    edx,edx
c000e3a1:	29 c1                	sub    ecx,eax
c000e3a3:	89 d8                	mov    eax,ebx
c000e3a5:	f7 f5                	div    ebp
c000e3a7:	bd 6d 01 00 00       	mov    ebp,0x16d
c000e3ac:	29 c1                	sub    ecx,eax
c000e3ae:	31 d2                	xor    edx,edx
c000e3b0:	89 c8                	mov    eax,ecx
c000e3b2:	f7 f5                	div    ebp
c000e3b4:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000e3b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e3bd:	31 d2                	xor    edx,edx
c000e3bf:	89 c8                	mov    eax,ecx
c000e3c1:	f7 f5                	div    ebp
c000e3c3:	31 d2                	xor    edx,edx
c000e3c5:	01 c3                	add    ebx,eax
c000e3c7:	89 c8                	mov    eax,ecx
c000e3c9:	f7 f7                	div    edi
c000e3cb:	bf 99 00 00 00       	mov    edi,0x99
c000e3d0:	29 c3                	sub    ebx,eax
c000e3d2:	31 d2                	xor    edx,edx
c000e3d4:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000e3dc:	29 c3                	sub    ebx,eax
c000e3de:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000e3e1:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000e3e4:	bb 05 00 00 00       	mov    ebx,0x5
c000e3e9:	83 c1 02             	add    ecx,0x2
c000e3ec:	89 c8                	mov    eax,ecx
c000e3ee:	f7 f7                	div    edi
c000e3f0:	31 d2                	xor    edx,edx
c000e3f2:	89 c7                	mov    edi,eax
c000e3f4:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000e3fa:	83 c0 02             	add    eax,0x2
c000e3fd:	f7 f3                	div    ebx
c000e3ff:	89 eb                	mov    ebx,ebp
c000e401:	29 c3                	sub    ebx,eax
c000e403:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000e409:	88 1e                	mov    BYTE PTR [esi],bl
c000e40b:	19 c0                	sbb    eax,eax
c000e40d:	31 d2                	xor    edx,edx
c000e40f:	83 e0 0c             	and    eax,0xc
c000e412:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000e416:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000e41e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e422:	83 f9 01             	cmp    ecx,0x1
c000e425:	0f 96 c2             	setbe  dl
c000e428:	41                   	inc    ecx
c000e429:	01 d0                	add    eax,edx
c000e42b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000e42e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000e432:	83 c4 1c             	add    esp,0x1c
c000e435:	89 f0                	mov    eax,esi
c000e437:	5b                   	pop    ebx
c000e438:	5e                   	pop    esi
c000e439:	5f                   	pop    edi
c000e43a:	5d                   	pop    ebp
c000e43b:	c2 04 00             	ret    0x4

c000e43e <Clock::timeInDatetimeLocal()>:
c000e43e:	53                   	push   ebx
c000e43f:	83 ec 14             	sub    esp,0x14
c000e442:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e446:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e44a:	e8 83 fc ff ff       	call   c000e0d2 <Clock::timeInSecondsLocal()>
c000e44f:	83 c4 0c             	add    esp,0xc
c000e452:	52                   	push   edx
c000e453:	50                   	push   eax
c000e454:	53                   	push   ebx
c000e455:	e8 a0 fe ff ff       	call   c000e2fa <secondsToDatetime(unsigned long long)>
c000e45a:	89 d8                	mov    eax,ebx
c000e45c:	83 c4 14             	add    esp,0x14
c000e45f:	5b                   	pop    ebx
c000e460:	c2 04 00             	ret    0x4
c000e463:	90                   	nop

c000e464 <Device::hibernate()>:
c000e464:	c3                   	ret    
c000e465:	90                   	nop

c000e466 <Device::wake()>:
c000e466:	c3                   	ret    
c000e467:	90                   	nop

c000e468 <Device::detect()>:
c000e468:	c3                   	ret    
c000e469:	90                   	nop

c000e46a <Device::disableLegacy()>:
c000e46a:	c3                   	ret    
c000e46b:	90                   	nop

c000e46c <Device::powerSaving(PowerSavingLevel)>:
c000e46c:	c3                   	ret    
c000e46d:	90                   	nop

c000e46e <DriverlessDevice::close(int, int, void*)>:
c000e46e:	31 c0                	xor    eax,eax
c000e470:	c3                   	ret    
c000e471:	90                   	nop

c000e472 <DriverlessDevice::detect()>:
c000e472:	c3                   	ret    
c000e473:	90                   	nop

c000e474 <DriverlessDevice::open(int, int, void*)>:
c000e474:	83 ec 18             	sub    esp,0x18
c000e477:	68 b0 53 02 c0       	push   0xc00253b0
c000e47c:	e8 a8 6c 00 00       	call   c0015129 <Krnl::panic(char const*)>
c000e481:	83 c8 ff             	or     eax,0xffffffff
c000e484:	83 c4 1c             	add    esp,0x1c
c000e487:	c3                   	ret    

c000e488 <Device::~Device()>:
c000e488:	ba 10 54 02 c0       	mov    edx,0xc0025410
c000e48d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e491:	89 10                	mov    DWORD PTR [eax],edx
c000e493:	90                   	nop
c000e494:	c3                   	ret    
c000e495:	90                   	nop

c000e496 <Device::~Device()>:
c000e496:	83 ec 0c             	sub    esp,0xc
c000e499:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e49d:	e8 e6 ff ff ff       	call   c000e488 <Device::~Device()>
c000e4a2:	83 c4 04             	add    esp,0x4
c000e4a5:	83 ec 08             	sub    esp,0x8
c000e4a8:	68 58 01 00 00       	push   0x158
c000e4ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b1:	e8 b0 ea ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000e4b6:	83 c4 10             	add    esp,0x10
c000e4b9:	83 c4 0c             	add    esp,0xc
c000e4bc:	c3                   	ret    
c000e4bd:	90                   	nop

c000e4be <Device::findAndLoadDriver()>:
c000e4be:	c7 44 24 04 ce 53 02 c0 	mov    DWORD PTR [esp+0x4],0xc00253ce
c000e4c6:	e9 7c eb ff ff       	jmp    c000d047 <Dbg::kprintf(char const*, ...)>
c000e4cb:	90                   	nop

c000e4cc <Device::preOpenPCI(PCIDeviceInfo)>:
c000e4cc:	57                   	push   edi
c000e4cd:	b9 09 00 00 00       	mov    ecx,0x9
c000e4d2:	56                   	push   esi
c000e4d3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e4d7:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e4db:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000e4e5:	81 c7 18 01 00 00    	add    edi,0x118
c000e4eb:	fc                   	cld    
c000e4ec:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e4ee:	5e                   	pop    esi
c000e4ef:	5f                   	pop    edi
c000e4f0:	c3                   	ret    
c000e4f1:	90                   	nop

c000e4f2 <Device::preOpenACPI(void*, char*, char*)>:
c000e4f2:	57                   	push   edi
c000e4f3:	b9 1e 00 00 00       	mov    ecx,0x1e
c000e4f8:	56                   	push   esi
c000e4f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e501:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000e50b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000e511:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000e517:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e51b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e51d:	b9 0e 00 00 00       	mov    ecx,0xe
c000e522:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000e528:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e52c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e52e:	5e                   	pop    esi
c000e52f:	5f                   	pop    edi
c000e530:	c3                   	ret    
c000e531:	90                   	nop

c000e532 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e532:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e536:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e53b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e542:	75 0b                	jne    c000e54f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000e544:	8b 00                	mov    eax,DWORD PTR [eax]
c000e546:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e54a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e54d:	eb 1e                	jmp    c000e56d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000e54f:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c000e554:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e55a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e560:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e562:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e566:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e56a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000e56d:	ff e0                	jmp    eax
c000e56f:	90                   	nop

c000e570 <Device::getParent()>:
c000e570:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e574:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e57a:	c3                   	ret    
c000e57b:	90                   	nop

c000e57c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e57c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e580:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e585:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e58c:	75 0b                	jne    c000e599 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e58e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e590:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e594:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e597:	eb 1e                	jmp    c000e5b7 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000e599:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c000e59e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e5a4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e5aa:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e5ac:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e5b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e5b4:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000e5b7:	ff e0                	jmp    eax
c000e5b9:	90                   	nop

c000e5ba <Device::addChild(Device*)>:
c000e5ba:	53                   	push   ebx
c000e5bb:	83 ec 08             	sub    esp,0x8
c000e5be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e5c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e5c6:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e5cc:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e5d2:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e5d4:	85 d2                	test   edx,edx
c000e5d6:	74 04                	je     c000e5dc <Device::addChild(Device*)+0x22>
c000e5d8:	89 d3                	mov    ebx,edx
c000e5da:	eb f6                	jmp    c000e5d2 <Device::addChild(Device*)+0x18>
c000e5dc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e5df:	83 ec 0c             	sub    esp,0xc
c000e5e2:	6a 08                	push   0x8
c000e5e4:	e8 72 b7 ff ff       	call   c0009d5b <malloc>
c000e5e9:	89 03                	mov    DWORD PTR [ebx],eax
c000e5eb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e5f1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e5f8:	83 c4 18             	add    esp,0x18
c000e5fb:	5b                   	pop    ebx
c000e5fc:	c3                   	ret    
c000e5fd:	90                   	nop

c000e5fe <Device::removeAllChildren()>:
c000e5fe:	56                   	push   esi
c000e5ff:	53                   	push   ebx
c000e600:	52                   	push   edx
c000e601:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e605:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e60b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e60e:	74 17                	je     c000e627 <Device::removeAllChildren()+0x29>
c000e610:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e613:	85 c0                	test   eax,eax
c000e615:	74 0c                	je     c000e623 <Device::removeAllChildren()+0x25>
c000e617:	83 ec 0c             	sub    esp,0xc
c000e61a:	8b 10                	mov    edx,DWORD PTR [eax]
c000e61c:	50                   	push   eax
c000e61d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e620:	83 c4 10             	add    esp,0x10
c000e623:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e625:	eb e4                	jmp    c000e60b <Device::removeAllChildren()+0xd>
c000e627:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e62d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e633:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e639:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e640:	58                   	pop    eax
c000e641:	5b                   	pop    ebx
c000e642:	5e                   	pop    esi
c000e643:	c3                   	ret    

c000e644 <Device::hibernateAll()>:
c000e644:	53                   	push   ebx
c000e645:	83 ec 14             	sub    esp,0x14
c000e648:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e64c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e64e:	53                   	push   ebx
c000e64f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e652:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e658:	83 c4 10             	add    esp,0x10
c000e65b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e65e:	74 0f                	je     c000e66f <Device::hibernateAll()+0x2b>
c000e660:	83 ec 0c             	sub    esp,0xc
c000e663:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e666:	e8 d9 ff ff ff       	call   c000e644 <Device::hibernateAll()>
c000e66b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e66d:	eb e9                	jmp    c000e658 <Device::hibernateAll()+0x14>
c000e66f:	83 c4 08             	add    esp,0x8
c000e672:	5b                   	pop    ebx
c000e673:	c3                   	ret    

c000e674 <Device::wakeAll()>:
c000e674:	53                   	push   ebx
c000e675:	83 ec 14             	sub    esp,0x14
c000e678:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e67c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e67e:	53                   	push   ebx
c000e67f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e682:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e688:	83 c4 10             	add    esp,0x10
c000e68b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e68e:	74 0f                	je     c000e69f <Device::wakeAll()+0x2b>
c000e690:	83 ec 0c             	sub    esp,0xc
c000e693:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e696:	e8 d9 ff ff ff       	call   c000e674 <Device::wakeAll()>
c000e69b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e69d:	eb e9                	jmp    c000e688 <Device::wakeAll()+0x14>
c000e69f:	83 c4 08             	add    esp,0x8
c000e6a2:	5b                   	pop    ebx
c000e6a3:	c3                   	ret    

c000e6a4 <Device::detectAll()>:
c000e6a4:	53                   	push   ebx
c000e6a5:	83 ec 14             	sub    esp,0x14
c000e6a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e6ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e6ae:	53                   	push   ebx
c000e6af:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e6b2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e6b8:	83 c4 10             	add    esp,0x10
c000e6bb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e6be:	74 0f                	je     c000e6cf <Device::detectAll()+0x2b>
c000e6c0:	83 ec 0c             	sub    esp,0xc
c000e6c3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e6c6:	e8 d9 ff ff ff       	call   c000e6a4 <Device::detectAll()>
c000e6cb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e6cd:	eb e9                	jmp    c000e6b8 <Device::detectAll()+0x14>
c000e6cf:	83 c4 08             	add    esp,0x8
c000e6d2:	5b                   	pop    ebx
c000e6d3:	c3                   	ret    

c000e6d4 <Device::disableLegacyAll()>:
c000e6d4:	53                   	push   ebx
c000e6d5:	83 ec 14             	sub    esp,0x14
c000e6d8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e6dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e6de:	53                   	push   ebx
c000e6df:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e6e2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e6e8:	83 c4 10             	add    esp,0x10
c000e6eb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e6ee:	74 0f                	je     c000e6ff <Device::disableLegacyAll()+0x2b>
c000e6f0:	83 ec 0c             	sub    esp,0xc
c000e6f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e6f6:	e8 d9 ff ff ff       	call   c000e6d4 <Device::disableLegacyAll()>
c000e6fb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e6fd:	eb e9                	jmp    c000e6e8 <Device::disableLegacyAll()+0x14>
c000e6ff:	83 c4 08             	add    esp,0x8
c000e702:	5b                   	pop    ebx
c000e703:	c3                   	ret    

c000e704 <Device::loadDriversForAll()>:
c000e704:	53                   	push   ebx
c000e705:	83 ec 08             	sub    esp,0x8
c000e708:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e70c:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e713:	75 0c                	jne    c000e721 <Device::loadDriversForAll()+0x1d>
c000e715:	83 ec 0c             	sub    esp,0xc
c000e718:	53                   	push   ebx
c000e719:	e8 a0 fd ff ff       	call   c000e4be <Device::findAndLoadDriver()>
c000e71e:	83 c4 10             	add    esp,0x10
c000e721:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e727:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e72a:	74 12                	je     c000e73e <Device::loadDriversForAll()+0x3a>
c000e72c:	83 ec 0c             	sub    esp,0xc
c000e72f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e732:	e8 cd ff ff ff       	call   c000e704 <Device::loadDriversForAll()>
c000e737:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e739:	83 c4 10             	add    esp,0x10
c000e73c:	eb e9                	jmp    c000e727 <Device::loadDriversForAll()+0x23>
c000e73e:	83 c4 08             	add    esp,0x8
c000e741:	5b                   	pop    ebx
c000e742:	c3                   	ret    
c000e743:	90                   	nop

c000e744 <Device::closeAll()>:
c000e744:	53                   	push   ebx
c000e745:	83 ec 08             	sub    esp,0x8
c000e748:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e74c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e74e:	6a 00                	push   0x0
c000e750:	6a 00                	push   0x0
c000e752:	6a 00                	push   0x0
c000e754:	53                   	push   ebx
c000e755:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e758:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e75e:	83 c4 10             	add    esp,0x10
c000e761:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e764:	74 0f                	je     c000e775 <Device::closeAll()+0x31>
c000e766:	83 ec 0c             	sub    esp,0xc
c000e769:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e76c:	e8 d3 ff ff ff       	call   c000e744 <Device::closeAll()>
c000e771:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e773:	eb e9                	jmp    c000e75e <Device::closeAll()+0x1a>
c000e775:	83 c4 08             	add    esp,0x8
c000e778:	5b                   	pop    ebx
c000e779:	c3                   	ret    

c000e77a <Device::powerSavingAll(PowerSavingLevel)>:
c000e77a:	56                   	push   esi
c000e77b:	53                   	push   ebx
c000e77c:	83 ec 0c             	sub    esp,0xc
c000e77f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e783:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e787:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e789:	56                   	push   esi
c000e78a:	53                   	push   ebx
c000e78b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e78e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e794:	83 c4 10             	add    esp,0x10
c000e797:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e79a:	74 0f                	je     c000e7ab <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e79c:	52                   	push   edx
c000e79d:	52                   	push   edx
c000e79e:	56                   	push   esi
c000e79f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e7a2:	e8 d3 ff ff ff       	call   c000e77a <Device::powerSavingAll(PowerSavingLevel)>
c000e7a7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e7a9:	eb e9                	jmp    c000e794 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e7ab:	58                   	pop    eax
c000e7ac:	5b                   	pop    ebx
c000e7ad:	5e                   	pop    esi
c000e7ae:	c3                   	ret    
c000e7af:	90                   	nop

c000e7b0 <Device::setName(char const*)>:
c000e7b0:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e7b8:	e9 83 1f ff ff       	jmp    c0000740 <strcpy>
c000e7bd:	90                   	nop

c000e7be <Device::Device(char const*)>:
c000e7be:	83 ec 1c             	sub    esp,0x1c
c000e7c1:	ba 10 54 02 c0       	mov    edx,0xc0025410
c000e7c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7ca:	89 10                	mov    DWORD PTR [eax],edx
c000e7cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7d0:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e7da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7de:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e7e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7ec:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e7f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7fa:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e804:	83 ec 08             	sub    esp,0x8
c000e807:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e80b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e80f:	e8 9c ff ff ff       	call   c000e7b0 <Device::setName(char const*)>
c000e814:	83 c4 10             	add    esp,0x10
c000e817:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e81f:	83 ec 0c             	sub    esp,0xc
c000e822:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e826:	e8 30 b5 ff ff       	call   c0009d5b <malloc>
c000e82b:	83 c4 10             	add    esp,0x10
c000e82e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e834:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e83b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e83f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e845:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e849:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e84f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e855:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e859:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e85f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e866:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e86a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e871:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e875:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e87c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e880:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e88a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e88e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e898:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e89c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e8a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8aa:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e8b4:	90                   	nop
c000e8b5:	83 c4 1c             	add    esp,0x1c
c000e8b8:	c3                   	ret    
c000e8b9:	90                   	nop

c000e8ba <Device::getName()>:
c000e8ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e8be:	05 d0 00 00 00       	add    eax,0xd0
c000e8c3:	c3                   	ret    

c000e8c4 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e8c4:	83 ec 0c             	sub    esp,0xc
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	83 ec 08             	sub    esp,0x8
c000e8ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8d2:	50                   	push   eax
c000e8d3:	e8 e6 fe ff ff       	call   c000e7be <Device::Device(char const*)>
c000e8d8:	83 c4 10             	add    esp,0x10
c000e8db:	ba 3c 54 02 c0       	mov    edx,0xc002543c
c000e8e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e4:	89 10                	mov    DWORD PTR [eax],edx
c000e8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ea:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e8f4:	90                   	nop
c000e8f5:	83 c4 0c             	add    esp,0xc
c000e8f8:	c3                   	ret    
c000e8f9:	90                   	nop

c000e8fa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e8fa:	57                   	push   edi
c000e8fb:	56                   	push   esi
c000e8fc:	53                   	push   ebx
c000e8fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e901:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e905:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e909:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e90f:	75 0c                	jne    c000e91d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e911:	52                   	push   edx
c000e912:	52                   	push   edx
c000e913:	53                   	push   ebx
c000e914:	56                   	push   esi
c000e915:	e8 b8 49 01 00       	call   c00232d2 <LinkedList<Device>::addElement(Device*)>
c000e91a:	83 c4 10             	add    esp,0x10
c000e91d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e923:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e926:	74 12                	je     c000e93a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e928:	50                   	push   eax
c000e929:	57                   	push   edi
c000e92a:	56                   	push   esi
c000e92b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e92e:	e8 c7 ff ff ff       	call   c000e8fa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e933:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e935:	83 c4 10             	add    esp,0x10
c000e938:	eb e9                	jmp    c000e923 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e93a:	5b                   	pop    ebx
c000e93b:	5e                   	pop    esi
c000e93c:	5f                   	pop    edi
c000e93d:	c3                   	ret    

c000e93e <getDevicesOfType(DeviceType)>:
c000e93e:	53                   	push   ebx
c000e93f:	83 ec 14             	sub    esp,0x14
c000e942:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e946:	53                   	push   ebx
c000e947:	e8 62 4a 01 00       	call   c00233ae <LinkedList<Device>::LinkedList()>
c000e94c:	83 c4 0c             	add    esp,0xc
c000e94f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e953:	53                   	push   ebx
c000e954:	ff 35 e8 89 02 c0    	push   DWORD PTR ds:0xc00289e8
c000e95a:	e8 9b ff ff ff       	call   c000e8fa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e95f:	89 d8                	mov    eax,ebx
c000e961:	83 c4 18             	add    esp,0x18
c000e964:	5b                   	pop    ebx
c000e965:	c2 04 00             	ret    0x4

c000e968 <HardDiskController::HardDiskController(char const*)>:
c000e968:	83 ec 0c             	sub    esp,0xc
c000e96b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e96f:	83 ec 08             	sub    esp,0x8
c000e972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e976:	50                   	push   eax
c000e977:	e8 42 fe ff ff       	call   c000e7be <Device::Device(char const*)>
c000e97c:	83 c4 10             	add    esp,0x10
c000e97f:	ba 68 54 02 c0       	mov    edx,0xc0025468
c000e984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e988:	89 10                	mov    DWORD PTR [eax],edx
c000e98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e98e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e998:	90                   	nop
c000e999:	83 c4 0c             	add    esp,0xc
c000e99c:	c3                   	ret    
c000e99d:	90                   	nop
c000e99e:	66 90                	xchg   ax,ax

c000e9a0 <HardDiskController::~HardDiskController()>:
c000e9a0:	83 ec 0c             	sub    esp,0xc
c000e9a3:	ba 68 54 02 c0       	mov    edx,0xc0025468
c000e9a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9ac:	89 10                	mov    DWORD PTR [eax],edx
c000e9ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9b2:	83 ec 0c             	sub    esp,0xc
c000e9b5:	50                   	push   eax
c000e9b6:	e8 cd fa ff ff       	call   c000e488 <Device::~Device()>
c000e9bb:	83 c4 10             	add    esp,0x10
c000e9be:	90                   	nop
c000e9bf:	83 c4 0c             	add    esp,0xc
c000e9c2:	c3                   	ret    
c000e9c3:	90                   	nop

c000e9c4 <HardDiskController::~HardDiskController()>:
c000e9c4:	83 ec 0c             	sub    esp,0xc
c000e9c7:	83 ec 0c             	sub    esp,0xc
c000e9ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9ce:	e8 cd ff ff ff       	call   c000e9a0 <HardDiskController::~HardDiskController()>
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	83 ec 08             	sub    esp,0x8
c000e9d9:	68 58 01 00 00       	push   0x158
c000e9de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9e2:	e8 7f e5 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000e9e7:	83 c4 10             	add    esp,0x10
c000e9ea:	83 c4 0c             	add    esp,0xc
c000e9ed:	c3                   	ret    

c000e9ee <PhysicalDisk::eject()>:
c000e9ee:	83 c8 ff             	or     eax,0xffffffff
c000e9f1:	c3                   	ret    

c000e9f2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e9f2:	83 ec 0c             	sub    esp,0xc
c000e9f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9f9:	83 ec 08             	sub    esp,0x8
c000e9fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea00:	50                   	push   eax
c000ea01:	e8 b8 fd ff ff       	call   c000e7be <Device::Device(char const*)>
c000ea06:	83 c4 10             	add    esp,0x10
c000ea09:	ba 94 54 02 c0       	mov    edx,0xc0025494
c000ea0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea12:	89 10                	mov    DWORD PTR [eax],edx
c000ea14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea18:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ea1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea23:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000ea2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea2e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000ea38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea3c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea40:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ea46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea4a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ea54:	90                   	nop
c000ea55:	83 c4 0c             	add    esp,0xc
c000ea58:	c3                   	ret    
c000ea59:	90                   	nop

c000ea5a <PhysicalDisk::startCache()>:
c000ea5a:	56                   	push   esi
c000ea5b:	53                   	push   ebx
c000ea5c:	83 ec 10             	sub    esp,0x10
c000ea5f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ea63:	6a 44                	push   0x44
c000ea65:	e8 f1 b2 ff ff       	call   c0009d5b <malloc>
c000ea6a:	89 c6                	mov    esi,eax
c000ea6c:	58                   	pop    eax
c000ea6d:	5a                   	pop    edx
c000ea6e:	53                   	push   ebx
c000ea6f:	56                   	push   esi
c000ea70:	e8 6b 27 00 00       	call   c00111e0 <VCache::VCache(PhysicalDisk*)>
c000ea75:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ea7b:	83 c4 14             	add    esp,0x14
c000ea7e:	5b                   	pop    ebx
c000ea7f:	5e                   	pop    esi
c000ea80:	c3                   	ret    
c000ea81:	90                   	nop

c000ea82 <PhysicalDisk::~PhysicalDisk()>:
c000ea82:	83 ec 0c             	sub    esp,0xc
c000ea85:	ba 94 54 02 c0       	mov    edx,0xc0025494
c000ea8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea8e:	89 10                	mov    DWORD PTR [eax],edx
c000ea90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea94:	83 ec 0c             	sub    esp,0xc
c000ea97:	50                   	push   eax
c000ea98:	e8 eb f9 ff ff       	call   c000e488 <Device::~Device()>
c000ea9d:	83 c4 10             	add    esp,0x10
c000eaa0:	90                   	nop
c000eaa1:	83 c4 0c             	add    esp,0xc
c000eaa4:	c3                   	ret    
c000eaa5:	90                   	nop

c000eaa6 <PhysicalDisk::~PhysicalDisk()>:
c000eaa6:	83 ec 0c             	sub    esp,0xc
c000eaa9:	83 ec 0c             	sub    esp,0xc
c000eaac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eab0:	e8 cd ff ff ff       	call   c000ea82 <PhysicalDisk::~PhysicalDisk()>
c000eab5:	83 c4 10             	add    esp,0x10
c000eab8:	83 ec 08             	sub    esp,0x8
c000eabb:	68 6c 01 00 00       	push   0x16c
c000eac0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eac4:	e8 9d e4 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000eac9:	83 c4 10             	add    esp,0x10
c000eacc:	83 c4 0c             	add    esp,0xc
c000eacf:	c3                   	ret    

c000ead0 <FPU::FPU(char const*)>:
c000ead0:	83 ec 0c             	sub    esp,0xc
c000ead3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ead7:	83 ec 08             	sub    esp,0x8
c000eada:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eade:	50                   	push   eax
c000eadf:	e8 da fc ff ff       	call   c000e7be <Device::Device(char const*)>
c000eae4:	83 c4 10             	add    esp,0x10
c000eae7:	ba f4 54 02 c0       	mov    edx,0xc00254f4
c000eaec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaf0:	89 10                	mov    DWORD PTR [eax],edx
c000eaf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaf6:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000eb00:	90                   	nop
c000eb01:	83 c4 0c             	add    esp,0xc
c000eb04:	c3                   	ret    
c000eb05:	90                   	nop
c000eb06:	66 90                	xchg   ax,ax

c000eb08 <FPU::~FPU()>:
c000eb08:	83 ec 0c             	sub    esp,0xc
c000eb0b:	ba f4 54 02 c0       	mov    edx,0xc00254f4
c000eb10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb14:	89 10                	mov    DWORD PTR [eax],edx
c000eb16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb1a:	83 ec 0c             	sub    esp,0xc
c000eb1d:	50                   	push   eax
c000eb1e:	e8 65 f9 ff ff       	call   c000e488 <Device::~Device()>
c000eb23:	83 c4 10             	add    esp,0x10
c000eb26:	90                   	nop
c000eb27:	83 c4 0c             	add    esp,0xc
c000eb2a:	c3                   	ret    
c000eb2b:	90                   	nop

c000eb2c <FPU::~FPU()>:
c000eb2c:	83 ec 0c             	sub    esp,0xc
c000eb2f:	83 ec 0c             	sub    esp,0xc
c000eb32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb36:	e8 cd ff ff ff       	call   c000eb08 <FPU::~FPU()>
c000eb3b:	83 c4 10             	add    esp,0x10
c000eb3e:	83 ec 08             	sub    esp,0x8
c000eb41:	68 58 01 00 00       	push   0x158
c000eb46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb4a:	e8 17 e4 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000eb4f:	83 c4 10             	add    esp,0x10
c000eb52:	83 c4 0c             	add    esp,0xc
c000eb55:	c3                   	ret    

c000eb56 <setupFPU()>:
c000eb56:	53                   	push   ebx
c000eb57:	83 ec 14             	sub    esp,0x14
c000eb5a:	68 c4 54 02 c0       	push   0xc00254c4
c000eb5f:	e8 e3 e4 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000eb64:	8b 15 e8 89 02 c0    	mov    edx,DWORD PTR ds:0xc00289e8
c000eb6a:	83 c4 10             	add    esp,0x10
c000eb6d:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000eb74:	74 1a                	je     c000eb90 <setupFPU()+0x3a>
c000eb76:	83 ec 0c             	sub    esp,0xc
c000eb79:	68 58 01 00 00       	push   0x158
c000eb7e:	e8 d8 b1 ff ff       	call   c0009d5b <malloc>
c000eb83:	89 c3                	mov    ebx,eax
c000eb85:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb88:	e8 c7 2d 01 00       	call   c0021954 <AVX::AVX()>
c000eb8d:	eb 6d                	jmp    c000ebfc <setupFPU()+0xa6>
c000eb8f:	90                   	nop
c000eb90:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000eb96:	84 c0                	test   al,al
c000eb98:	79 1a                	jns    c000ebb4 <setupFPU()+0x5e>
c000eb9a:	83 ec 0c             	sub    esp,0xc
c000eb9d:	68 58 01 00 00       	push   0x158
c000eba2:	e8 b4 b1 ff ff       	call   c0009d5b <malloc>
c000eba7:	89 c3                	mov    ebx,eax
c000eba9:	89 04 24             	mov    DWORD PTR [esp],eax
c000ebac:	e8 d3 2e 01 00       	call   c0021a84 <SSE::SSE()>
c000ebb1:	eb 49                	jmp    c000ebfc <setupFPU()+0xa6>
c000ebb3:	90                   	nop
c000ebb4:	a8 20                	test   al,0x20
c000ebb6:	74 1c                	je     c000ebd4 <setupFPU()+0x7e>
c000ebb8:	83 ec 0c             	sub    esp,0xc
c000ebbb:	68 58 01 00 00       	push   0x158
c000ebc0:	e8 96 b1 ff ff       	call   c0009d5b <malloc>
c000ebc5:	89 c3                	mov    ebx,eax
c000ebc7:	89 04 24             	mov    DWORD PTR [esp],eax
c000ebca:	e8 19 2e 01 00       	call   c00219e8 <MMX::MMX()>
c000ebcf:	eb 2b                	jmp    c000ebfc <setupFPU()+0xa6>
c000ebd1:	8d 76 00             	lea    esi,[esi+0x0]
c000ebd4:	a8 10                	test   al,0x10
c000ebd6:	74 2c                	je     c000ec04 <setupFPU()+0xae>
c000ebd8:	83 ec 0c             	sub    esp,0xc
c000ebdb:	68 d7 54 02 c0       	push   0xc00254d7
c000ebe0:	e8 62 e4 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000ebe5:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c000ebec:	e8 6a b1 ff ff       	call   c0009d5b <malloc>
c000ebf1:	89 c3                	mov    ebx,eax
c000ebf3:	89 04 24             	mov    DWORD PTR [esp],eax
c000ebf6:	e8 17 2f 01 00       	call   c0021b12 <x87::x87()>
c000ebfb:	90                   	nop
c000ebfc:	83 c4 10             	add    esp,0x10
c000ebff:	eb 27                	jmp    c000ec28 <setupFPU()+0xd2>
c000ec01:	8d 76 00             	lea    esi,[esi+0x0]
c000ec04:	83 e0 ef             	and    eax,0xffffffef
c000ec07:	83 ec 0c             	sub    esp,0xc
c000ec0a:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000ec10:	68 e1 54 02 c0       	push   0xc00254e1
c000ec15:	e8 2d e4 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000ec1a:	0f 20 c0             	mov    eax,cr0
c000ec1d:	83 c8 04             	or     eax,0x4
c000ec20:	0f 22 c0             	mov    cr0,eax
c000ec23:	31 db                	xor    ebx,ebx
c000ec25:	83 c4 10             	add    esp,0x10
c000ec28:	89 d8                	mov    eax,ebx
c000ec2a:	83 c4 08             	add    esp,0x8
c000ec2d:	5b                   	pop    ebx
c000ec2e:	c3                   	ret    
c000ec2f:	90                   	nop

c000ec30 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000ec30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec34:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ec38:	c1 e0 04             	shl    eax,0x4
c000ec3b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000ec3f:	8d 50 10             	lea    edx,[eax+0x10]
c000ec42:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000ec48:	74 08                	je     c000ec52 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000ec4a:	83 c0 04             	add    eax,0x4
c000ec4d:	39 d0                	cmp    eax,edx
c000ec4f:	75 f1                	jne    c000ec42 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000ec51:	c3                   	ret    
c000ec52:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ec5c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000ec66:	eb e2                	jmp    c000ec4a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000ec68 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000ec68:	57                   	push   edi
c000ec69:	31 c0                	xor    eax,eax
c000ec6b:	56                   	push   esi
c000ec6c:	53                   	push   ebx
c000ec6d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ec71:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ec75:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ec79:	89 da                	mov    edx,ebx
c000ec7b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ec7f:	c1 e2 04             	shl    edx,0x4
c000ec82:	01 ca                	add    edx,ecx
c000ec84:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000ec8c:	74 16                	je     c000eca4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000ec8e:	40                   	inc    eax
c000ec8f:	83 f8 04             	cmp    eax,0x4
c000ec92:	75 f0                	jne    c000ec84 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000ec94:	c7 44 24 10 24 55 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025524
c000ec9c:	5b                   	pop    ebx
c000ec9d:	5e                   	pop    esi
c000ec9e:	5f                   	pop    edi
c000ec9f:	e9 85 64 00 00       	jmp    c0015129 <Krnl::panic(char const*)>
c000eca4:	8d 04 98             	lea    eax,[eax+ebx*4]
c000eca7:	8d 04 81             	lea    eax,[ecx+eax*4]
c000ecaa:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000ecb0:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000ecb6:	5b                   	pop    ebx
c000ecb7:	5e                   	pop    esi
c000ecb8:	5f                   	pop    edi
c000ecb9:	c3                   	ret    

c000ecba <doubleFault(regs*, void*)>:
c000ecba:	55                   	push   ebp
c000ecbb:	89 e5                	mov    ebp,esp
c000ecbd:	83 ec 08             	sub    esp,0x8
c000ecc0:	83 ec 0c             	sub    esp,0xc
c000ecc3:	68 31 55 02 c0       	push   0xc0025531
c000ecc8:	e8 5c 64 00 00       	call   c0015129 <Krnl::panic(char const*)>
c000eccd:	83 c4 10             	add    esp,0x10
c000ecd0:	90                   	nop
c000ecd1:	c9                   	leave  
c000ecd2:	c3                   	ret    
c000ecd3:	90                   	nop

c000ecd4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ecd4:	56                   	push   esi
c000ecd5:	53                   	push   ebx
c000ecd6:	50                   	push   eax
c000ecd7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ecdb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ecdf:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000ece4:	75 35                	jne    c000ed1b <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000ece6:	8d 43 20             	lea    eax,[ebx+0x20]
c000ece9:	31 d2                	xor    edx,edx
c000eceb:	89 c1                	mov    ecx,eax
c000eced:	c1 e1 04             	shl    ecx,0x4
c000ecf0:	01 f1                	add    ecx,esi
c000ecf2:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000ecfa:	74 3e                	je     c000ed3a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000ecfc:	42                   	inc    edx
c000ecfd:	83 fa 04             	cmp    edx,0x4
c000ed00:	75 f0                	jne    c000ecf2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000ed02:	83 ec 0c             	sub    esp,0xc
c000ed05:	68 4b 55 02 c0       	push   0xc002554b
c000ed0a:	e8 1a 64 00 00       	call   c0015129 <Krnl::panic(char const*)>
c000ed0f:	83 c4 10             	add    esp,0x10
c000ed12:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ed17:	5a                   	pop    edx
c000ed18:	5b                   	pop    ebx
c000ed19:	5e                   	pop    esi
c000ed1a:	c3                   	ret    
c000ed1b:	83 ec 0c             	sub    esp,0xc
c000ed1e:	56                   	push   esi
c000ed1f:	e8 96 fb ff ff       	call   c000e8ba <Device::getName()>
c000ed24:	83 c4 10             	add    esp,0x10
c000ed27:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ed2a:	75 ba                	jne    c000ece6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ed2c:	83 fb 0f             	cmp    ebx,0xf
c000ed2f:	7f 29                	jg     c000ed5a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000ed31:	0f b6 9b e0 80 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd7f20]
c000ed38:	eb ac                	jmp    c000ece6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ed3a:	8d 04 82             	lea    eax,[edx+eax*4]
c000ed3d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed41:	8d 04 86             	lea    eax,[esi+eax*4]
c000ed44:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000ed4a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ed4e:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000ed54:	89 d8                	mov    eax,ebx
c000ed56:	5a                   	pop    edx
c000ed57:	5b                   	pop    ebx
c000ed58:	5e                   	pop    esi
c000ed59:	c3                   	ret    
c000ed5a:	83 ec 0c             	sub    esp,0xc
c000ed5d:	68 3e 55 02 c0       	push   0xc002553e
c000ed62:	e8 c2 63 00 00       	call   c0015129 <Krnl::panic(char const*)>
c000ed67:	83 c4 10             	add    esp,0x10
c000ed6a:	e9 77 ff ff ff       	jmp    c000ece6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ed6f:	90                   	nop

c000ed70 <InterruptController::clearAllHandlers(int, bool)>:
c000ed70:	56                   	push   esi
c000ed71:	53                   	push   ebx
c000ed72:	52                   	push   edx
c000ed73:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ed77:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed7b:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ed80:	75 61                	jne    c000ede3 <InterruptController::clearAllHandlers(int, bool)+0x73>
c000ed82:	8d 46 20             	lea    eax,[esi+0x20]
c000ed85:	c1 e6 04             	shl    esi,0x4
c000ed88:	c1 e0 04             	shl    eax,0x4
c000ed8b:	01 de                	add    esi,ebx
c000ed8d:	01 d8                	add    eax,ebx
c000ed8f:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000ed99:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000eda3:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000edad:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000edb7:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000edc1:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000edcb:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000edd5:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000eddf:	58                   	pop    eax
c000ede0:	5b                   	pop    ebx
c000ede1:	5e                   	pop    esi
c000ede2:	c3                   	ret    
c000ede3:	83 ec 0c             	sub    esp,0xc
c000ede6:	53                   	push   ebx
c000ede7:	e8 ce fa ff ff       	call   c000e8ba <Device::getName()>
c000edec:	83 c4 10             	add    esp,0x10
c000edef:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000edf2:	75 8e                	jne    c000ed82 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000edf4:	83 fe 0f             	cmp    esi,0xf
c000edf7:	7f 09                	jg     c000ee02 <InterruptController::clearAllHandlers(int, bool)+0x92>
c000edf9:	0f b6 b6 e0 80 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd7f20]
c000ee00:	eb 80                	jmp    c000ed82 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 58 55 02 c0       	push   0xc0025558
c000ee0a:	e8 1a 63 00 00       	call   c0015129 <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	e9 6b ff ff ff       	jmp    c000ed82 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ee17:	90                   	nop

c000ee18 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ee18:	56                   	push   esi
c000ee19:	53                   	push   ebx
c000ee1a:	52                   	push   edx
c000ee1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ee1f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ee23:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000ee28:	75 3a                	jne    c000ee64 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000ee2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ee2e:	8d 50 20             	lea    edx,[eax+0x20]
c000ee31:	c1 e2 04             	shl    edx,0x4
c000ee34:	8d 04 16             	lea    eax,[esi+edx*1]
c000ee37:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000ee3b:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000ee41:	74 0b                	je     c000ee4e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000ee43:	83 c0 04             	add    eax,0x4
c000ee46:	39 d0                	cmp    eax,edx
c000ee48:	75 f1                	jne    c000ee3b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000ee4a:	58                   	pop    eax
c000ee4b:	5b                   	pop    ebx
c000ee4c:	5e                   	pop    esi
c000ee4d:	c3                   	ret    
c000ee4e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ee58:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000ee62:	eb df                	jmp    c000ee43 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000ee64:	83 ec 0c             	sub    esp,0xc
c000ee67:	56                   	push   esi
c000ee68:	e8 4d fa ff ff       	call   c000e8ba <Device::getName()>
c000ee6d:	83 c4 10             	add    esp,0x10
c000ee70:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ee73:	75 b5                	jne    c000ee2a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ee75:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000ee7a:	7f 11                	jg     c000ee8d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000ee7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ee80:	0f b6 80 e0 80 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd7f20]
c000ee87:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ee8b:	eb 9d                	jmp    c000ee2a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ee8d:	83 ec 0c             	sub    esp,0xc
c000ee90:	68 65 55 02 c0       	push   0xc0025565
c000ee95:	e8 8f 62 00 00       	call   c0015129 <Krnl::panic(char const*)>
c000ee9a:	83 c4 10             	add    esp,0x10
c000ee9d:	eb 8b                	jmp    c000ee2a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000ee9f <nmiHandler(regs*, void*)>:
c000ee9f:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c000eea4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000eea8:	e9 77 a6 ff ff       	jmp    c0009524 <Computer::handleNMI()>

c000eead <int_handler>:
c000eead:	55                   	push   ebp
c000eeae:	57                   	push   edi
c000eeaf:	56                   	push   esi
c000eeb0:	53                   	push   ebx
c000eeb1:	83 ec 0c             	sub    esp,0xc
c000eeb4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000eeb8:	80 3d c4 94 02 c0 00 	cmp    BYTE PTR ds:0xc00294c4,0x0
c000eebf:	74 0b                	je     c000eecc <int_handler+0x1f>
c000eec1:	fa                   	cli    
c000eec2:	f4                   	hlt    
c000eec3:	80 3d c4 94 02 c0 00 	cmp    BYTE PTR ds:0xc00294c4,0x0
c000eeca:	75 f5                	jne    c000eec1 <int_handler+0x14>
c000eecc:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c000eed1:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000eed4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000eeda:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000eee0:	8d 43 e0             	lea    eax,[ebx-0x20]
c000eee3:	83 f8 17             	cmp    eax,0x17
c000eee6:	77 13                	ja     c000eefb <int_handler+0x4e>
c000eee8:	83 ec 08             	sub    esp,0x8
c000eeeb:	8b 17                	mov    edx,DWORD PTR [edi]
c000eeed:	8d 43 e0             	lea    eax,[ebx-0x20]
c000eef0:	0f b6 c0             	movzx  eax,al
c000eef3:	50                   	push   eax
c000eef4:	57                   	push   edi
c000eef5:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000eef8:	83 c4 10             	add    esp,0x10
c000eefb:	83 c3 15             	add    ebx,0x15
c000eefe:	c1 e3 04             	shl    ebx,0x4
c000ef01:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000ef05:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000ef0c:	31 db                	xor    ebx,ebx
c000ef0e:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000ef12:	85 c0                	test   eax,eax
c000ef14:	74 13                	je     c000ef29 <int_handler+0x7c>
c000ef16:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000ef19:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000ef1d:	74 1c                	je     c000ef3b <int_handler+0x8e>
c000ef1f:	83 ec 08             	sub    esp,0x8
c000ef22:	52                   	push   edx
c000ef23:	56                   	push   esi
c000ef24:	ff d0                	call   eax
c000ef26:	83 c4 10             	add    esp,0x10
c000ef29:	43                   	inc    ebx
c000ef2a:	83 fb 04             	cmp    ebx,0x4
c000ef2d:	75 df                	jne    c000ef0e <int_handler+0x61>
c000ef2f:	83 c4 0c             	add    esp,0xc
c000ef32:	31 c0                	xor    eax,eax
c000ef34:	5b                   	pop    ebx
c000ef35:	31 d2                	xor    edx,edx
c000ef37:	5e                   	pop    esi
c000ef38:	5f                   	pop    edi
c000ef39:	5d                   	pop    ebp
c000ef3a:	c3                   	ret    
c000ef3b:	83 ec 08             	sub    esp,0x8
c000ef3e:	52                   	push   edx
c000ef3f:	56                   	push   esi
c000ef40:	ff d0                	call   eax
c000ef42:	83 c4 10             	add    esp,0x10
c000ef45:	83 c4 0c             	add    esp,0xc
c000ef48:	5b                   	pop    ebx
c000ef49:	5e                   	pop    esi
c000ef4a:	5f                   	pop    edi
c000ef4b:	5d                   	pop    ebp
c000ef4c:	c3                   	ret    
c000ef4d:	90                   	nop

c000ef4e <InterruptController::InterruptController(char const*)>:
c000ef4e:	83 ec 1c             	sub    esp,0x1c
c000ef51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef55:	83 ec 08             	sub    esp,0x8
c000ef58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef5c:	50                   	push   eax
c000ef5d:	e8 5c f8 ff ff       	call   c000e7be <Device::Device(char const*)>
c000ef62:	83 c4 10             	add    esp,0x10
c000ef65:	ba 9c 58 02 c0       	mov    edx,0xc002589c
c000ef6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef6e:	89 10                	mov    DWORD PTR [eax],edx
c000ef70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef74:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ef7e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ef86:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000ef8e:	7f 5e                	jg     c000efee <InterruptController::InterruptController(char const*)+0xa0>
c000ef90:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ef98:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000ef9d:	7f 49                	jg     c000efe8 <InterruptController::InterruptController(char const*)+0x9a>
c000ef9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efa3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000efa7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000efae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000efb2:	01 ca                	add    edx,ecx
c000efb4:	83 c2 54             	add    edx,0x54
c000efb7:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000efbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efc3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000efc7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000efce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000efd2:	01 ca                	add    edx,ecx
c000efd4:	81 c2 54 04 00 00    	add    edx,0x454
c000efda:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000efe2:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000efe6:	eb b0                	jmp    c000ef98 <InterruptController::InterruptController(char const*)+0x4a>
c000efe8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000efec:	eb 98                	jmp    c000ef86 <InterruptController::InterruptController(char const*)+0x38>
c000efee:	90                   	nop
c000efef:	83 c4 1c             	add    esp,0x1c
c000eff2:	c3                   	ret    
c000eff3:	90                   	nop

c000eff4 <InterruptController::~InterruptController()>:
c000eff4:	83 ec 0c             	sub    esp,0xc
c000eff7:	ba 9c 58 02 c0       	mov    edx,0xc002589c
c000effc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f000:	89 10                	mov    DWORD PTR [eax],edx
c000f002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f006:	83 ec 0c             	sub    esp,0xc
c000f009:	50                   	push   eax
c000f00a:	e8 79 f4 ff ff       	call   c000e488 <Device::~Device()>
c000f00f:	83 c4 10             	add    esp,0x10
c000f012:	90                   	nop
c000f013:	83 c4 0c             	add    esp,0xc
c000f016:	c3                   	ret    
c000f017:	90                   	nop

c000f018 <InterruptController::~InterruptController()>:
c000f018:	83 ec 0c             	sub    esp,0xc
c000f01b:	83 ec 0c             	sub    esp,0xc
c000f01e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f022:	e8 cd ff ff ff       	call   c000eff4 <InterruptController::~InterruptController()>
c000f027:	83 c4 10             	add    esp,0x10
c000f02a:	83 ec 08             	sub    esp,0x8
c000f02d:	68 58 21 00 00       	push   0x2158
c000f032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f036:	e8 2b df ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000f03b:	83 c4 10             	add    esp,0x10
c000f03e:	83 c4 0c             	add    esp,0xc
c000f041:	c3                   	ret    

c000f042 <displayDebugInfo(regs*)>:
c000f042:	55                   	push   ebp
c000f043:	57                   	push   edi
c000f044:	56                   	push   esi
c000f045:	53                   	push   ebx
c000f046:	83 ec 24             	sub    esp,0x24
c000f049:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000f04d:	0f 20 c2             	mov    edx,cr0
c000f050:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000f054:	0f 20 d7             	mov    edi,cr2
c000f057:	0f 20 de             	mov    esi,cr3
c000f05a:	0f 20 e5             	mov    ebp,cr4
c000f05d:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000f060:	68 72 55 02 c0       	push   0xc0025572
c000f065:	e8 dd df ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f06a:	59                   	pop    ecx
c000f06b:	58                   	pop    eax
c000f06c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000f06f:	68 7d 55 02 c0       	push   0xc002557d
c000f074:	e8 ce df ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f079:	58                   	pop    eax
c000f07a:	5a                   	pop    edx
c000f07b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f07e:	68 88 55 02 c0       	push   0xc0025588
c000f083:	e8 bf df ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f088:	59                   	pop    ecx
c000f089:	58                   	pop    eax
c000f08a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f08d:	68 93 55 02 c0       	push   0xc0025593
c000f092:	e8 b0 df ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f097:	58                   	pop    eax
c000f098:	5a                   	pop    edx
c000f099:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000f09c:	68 9e 55 02 c0       	push   0xc002559e
c000f0a1:	e8 a1 df ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f0a6:	59                   	pop    ecx
c000f0a7:	58                   	pop    eax
c000f0a8:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000f0ab:	68 a9 55 02 c0       	push   0xc00255a9
c000f0b0:	e8 92 df ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f0b5:	58                   	pop    eax
c000f0b6:	5a                   	pop    edx
c000f0b7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000f0ba:	68 b4 55 02 c0       	push   0xc00255b4
c000f0bf:	e8 83 df ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f0c4:	59                   	pop    ecx
c000f0c5:	58                   	pop    eax
c000f0c6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000f0c9:	68 bf 55 02 c0       	push   0xc00255bf
c000f0ce:	e8 74 df ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f0d3:	58                   	pop    eax
c000f0d4:	5a                   	pop    edx
c000f0d5:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000f0d8:	68 ca 55 02 c0       	push   0xc00255ca
c000f0dd:	e8 65 df ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f0e2:	59                   	pop    ecx
c000f0e3:	58                   	pop    eax
c000f0e4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f0e7:	68 d9 55 02 c0       	push   0xc00255d9
c000f0ec:	e8 56 df ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f0f1:	58                   	pop    eax
c000f0f2:	5a                   	pop    edx
c000f0f3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000f0f6:	68 e4 55 02 c0       	push   0xc00255e4
c000f0fb:	e8 47 df ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f100:	59                   	pop    ecx
c000f101:	58                   	pop    eax
c000f102:	57                   	push   edi
c000f103:	68 ef 55 02 c0       	push   0xc00255ef
c000f108:	e8 3a df ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f10d:	58                   	pop    eax
c000f10e:	5a                   	pop    edx
c000f10f:	56                   	push   esi
c000f110:	68 fa 55 02 c0       	push   0xc00255fa
c000f115:	e8 2d df ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f11a:	59                   	pop    ecx
c000f11b:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f120:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f126:	e8 2a bd ff ff       	call   c000ae55 <setActiveTerminal(VgaText*)>
c000f12b:	58                   	pop    eax
c000f12c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f12f:	5a                   	pop    edx
c000f130:	c1 e0 05             	shl    eax,0x5
c000f133:	05 40 7e 02 c0       	add    eax,0xc0027e40
c000f138:	50                   	push   eax
c000f139:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f13e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f144:	e8 19 c2 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f149:	59                   	pop    ecx
c000f14a:	58                   	pop    eax
c000f14b:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f150:	68 05 56 02 c0       	push   0xc0025605
c000f155:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f15b:	e8 02 c2 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f160:	58                   	pop    eax
c000f161:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f166:	5a                   	pop    edx
c000f167:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f16a:	83 c0 0c             	add    eax,0xc
c000f16d:	50                   	push   eax
c000f16e:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f173:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f179:	e8 e4 c1 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f17e:	59                   	pop    ecx
c000f17f:	58                   	pop    eax
c000f180:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f185:	68 0e 56 02 c0       	push   0xc002560e
c000f18a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f190:	e8 cd c1 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f195:	58                   	pop    eax
c000f196:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f19b:	5a                   	pop    edx
c000f19c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f19f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1a5:	e8 72 c1 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f1aa:	59                   	pop    ecx
c000f1ab:	58                   	pop    eax
c000f1ac:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f1b1:	68 16 56 02 c0       	push   0xc0025616
c000f1b6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1bc:	e8 a1 c1 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f1c1:	58                   	pop    eax
c000f1c2:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f1c7:	5a                   	pop    edx
c000f1c8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000f1cb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1d1:	e8 46 c1 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f1d6:	59                   	pop    ecx
c000f1d7:	58                   	pop    eax
c000f1d8:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f1dd:	68 1e 56 02 c0       	push   0xc002561e
c000f1e2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1e8:	e8 75 c1 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f1ed:	58                   	pop    eax
c000f1ee:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f1f3:	5a                   	pop    edx
c000f1f4:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000f1f7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1fd:	e8 1a c1 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f202:	59                   	pop    ecx
c000f203:	58                   	pop    eax
c000f204:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f209:	68 26 56 02 c0       	push   0xc0025626
c000f20e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f214:	e8 49 c1 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f219:	58                   	pop    eax
c000f21a:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f21f:	5a                   	pop    edx
c000f220:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000f223:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f229:	e8 ee c0 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f22e:	59                   	pop    ecx
c000f22f:	58                   	pop    eax
c000f230:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f235:	68 2e 56 02 c0       	push   0xc002562e
c000f23a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f240:	e8 1d c1 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f245:	58                   	pop    eax
c000f246:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f24b:	5a                   	pop    edx
c000f24c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000f24f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f255:	e8 c2 c0 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f25a:	59                   	pop    ecx
c000f25b:	58                   	pop    eax
c000f25c:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f261:	68 36 56 02 c0       	push   0xc0025636
c000f266:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f26c:	e8 f1 c0 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f271:	58                   	pop    eax
c000f272:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f277:	5a                   	pop    edx
c000f278:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000f27b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f281:	e8 96 c0 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f286:	59                   	pop    ecx
c000f287:	58                   	pop    eax
c000f288:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f28d:	68 3e 56 02 c0       	push   0xc002563e
c000f292:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f298:	e8 c5 c0 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f29d:	58                   	pop    eax
c000f29e:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f2a3:	5a                   	pop    edx
c000f2a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2a8:	52                   	push   edx
c000f2a9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2af:	e8 68 c0 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f2b4:	59                   	pop    ecx
c000f2b5:	58                   	pop    eax
c000f2b6:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f2bb:	68 47 56 02 c0       	push   0xc0025647
c000f2c0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2c6:	e8 97 c0 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f2cb:	58                   	pop    eax
c000f2cc:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f2d1:	5a                   	pop    edx
c000f2d2:	57                   	push   edi
c000f2d3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2d9:	e8 3e c0 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f2de:	59                   	pop    ecx
c000f2df:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f2e4:	5f                   	pop    edi
c000f2e5:	68 4f 56 02 c0       	push   0xc002564f
c000f2ea:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2f0:	e8 6d c0 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f2f5:	58                   	pop    eax
c000f2f6:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f2fb:	5a                   	pop    edx
c000f2fc:	56                   	push   esi
c000f2fd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f303:	e8 14 c0 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f308:	59                   	pop    ecx
c000f309:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f30e:	5e                   	pop    esi
c000f30f:	68 57 56 02 c0       	push   0xc0025657
c000f314:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f31a:	e8 43 c0 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f31f:	5f                   	pop    edi
c000f320:	58                   	pop    eax
c000f321:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f326:	55                   	push   ebp
c000f327:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f32d:	e8 ea bf ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f332:	58                   	pop    eax
c000f333:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f338:	5a                   	pop    edx
c000f339:	68 5f 56 02 c0       	push   0xc002565f
c000f33e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f344:	e8 19 c0 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f349:	0f 21 c0             	mov    eax,db0
c000f34c:	59                   	pop    ecx
c000f34d:	5e                   	pop    esi
c000f34e:	50                   	push   eax
c000f34f:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f354:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f35a:	e8 bd bf ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f35f:	5f                   	pop    edi
c000f360:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f365:	5d                   	pop    ebp
c000f366:	68 68 56 02 c0       	push   0xc0025668
c000f36b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f371:	e8 ec bf ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f376:	0f 21 c8             	mov    eax,db1
c000f379:	5a                   	pop    edx
c000f37a:	59                   	pop    ecx
c000f37b:	50                   	push   eax
c000f37c:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f381:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f387:	e8 90 bf ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f38c:	5e                   	pop    esi
c000f38d:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f392:	5f                   	pop    edi
c000f393:	68 70 56 02 c0       	push   0xc0025670
c000f398:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f39e:	e8 bf bf ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f3a3:	0f 21 d0             	mov    eax,db2
c000f3a6:	5d                   	pop    ebp
c000f3a7:	5a                   	pop    edx
c000f3a8:	50                   	push   eax
c000f3a9:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f3ae:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3b4:	e8 63 bf ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f3b9:	59                   	pop    ecx
c000f3ba:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f3bf:	5e                   	pop    esi
c000f3c0:	68 78 56 02 c0       	push   0xc0025678
c000f3c5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3cb:	e8 92 bf ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f3d0:	0f 21 d8             	mov    eax,db3
c000f3d3:	5f                   	pop    edi
c000f3d4:	5d                   	pop    ebp
c000f3d5:	50                   	push   eax
c000f3d6:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f3db:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3e1:	e8 36 bf ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f3e6:	58                   	pop    eax
c000f3e7:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f3ec:	5a                   	pop    edx
c000f3ed:	68 80 56 02 c0       	push   0xc0025680
c000f3f2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3f8:	e8 65 bf ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f3fd:	0f 21 f0             	mov    eax,db6
c000f400:	59                   	pop    ecx
c000f401:	5e                   	pop    esi
c000f402:	50                   	push   eax
c000f403:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f408:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f40e:	e8 09 bf ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f413:	5f                   	pop    edi
c000f414:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f419:	5d                   	pop    ebp
c000f41a:	68 88 56 02 c0       	push   0xc0025688
c000f41f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f425:	e8 38 bf ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f42a:	0f 21 f8             	mov    eax,db7
c000f42d:	5a                   	pop    edx
c000f42e:	59                   	pop    ecx
c000f42f:	50                   	push   eax
c000f430:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f435:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f43b:	e8 dc be ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f440:	5e                   	pop    esi
c000f441:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f444:	e8 b4 8e 00 00       	call   c00182fd <Thr::getDriverNameFromAddress(unsigned long)>
c000f449:	83 c4 10             	add    esp,0x10
c000f44c:	85 c0                	test   eax,eax
c000f44e:	74 7d                	je     c000f4cd <displayDebugInfo(regs*)+0x48b>
c000f450:	89 c6                	mov    esi,eax
c000f452:	50                   	push   eax
c000f453:	50                   	push   eax
c000f454:	56                   	push   esi
c000f455:	68 90 56 02 c0       	push   0xc0025690
c000f45a:	e8 e8 db ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f45f:	5a                   	pop    edx
c000f460:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f465:	59                   	pop    ecx
c000f466:	68 9e 56 02 c0       	push   0xc002569e
c000f46b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f471:	e8 ec be ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f476:	5f                   	pop    edi
c000f477:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f47c:	5d                   	pop    ebp
c000f47d:	56                   	push   esi
c000f47e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f484:	e8 d9 be ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f489:	58                   	pop    eax
c000f48a:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f48f:	5a                   	pop    edx
c000f490:	68 aa 56 02 c0       	push   0xc00256aa
c000f495:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f49b:	e8 c2 be ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f4a0:	59                   	pop    ecx
c000f4a1:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c000f4a6:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000f4ac:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f4af:	e8 80 8e 00 00       	call   c0018334 <Thr::getDriverOffsetFromAddress(unsigned long)>
c000f4b4:	5b                   	pop    ebx
c000f4b5:	5d                   	pop    ebp
c000f4b6:	50                   	push   eax
c000f4b7:	57                   	push   edi
c000f4b8:	e8 5f be ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f4bd:	58                   	pop    eax
c000f4be:	5a                   	pop    edx
c000f4bf:	56                   	push   esi
c000f4c0:	68 b6 56 02 c0       	push   0xc00256b6
c000f4c5:	e8 7d db ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f4ca:	83 c4 10             	add    esp,0x10
c000f4cd:	fa                   	cli    
c000f4ce:	f4                   	hlt    
c000f4cf:	eb fe                	jmp    c000f4cf <displayDebugInfo(regs*)+0x48d>

c000f4d1 <x87EmulHandler(regs*, void*)>:
c000f4d1:	53                   	push   ebx
c000f4d2:	83 ec 14             	sub    esp,0x14
c000f4d5:	68 c6 56 02 c0       	push   0xc00256c6
c000f4da:	e8 68 db ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f4df:	0f 20 c2             	mov    edx,cr0
c000f4e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f4e7:	83 c4 10             	add    esp,0x10
c000f4ea:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000f4ee:	0f 85 ff 00 00 00    	jne    c000f5f3 <x87EmulHandler(regs*, void*)+0x122>
c000f4f4:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c000f4f9:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000f4ff:	85 c0                	test   eax,eax
c000f501:	74 05                	je     c000f508 <x87EmulHandler(regs*, void*)+0x37>
c000f503:	83 e2 08             	and    edx,0x8
c000f506:	75 1c                	jne    c000f524 <x87EmulHandler(regs*, void*)+0x53>
c000f508:	83 ec 0c             	sub    esp,0xc
c000f50b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f50f:	e8 4e b3 00 00       	call   c001a862 <Vm::x87Handler(regs*)>
c000f514:	83 c4 10             	add    esp,0x10
c000f517:	84 c0                	test   al,al
c000f519:	0f 84 d4 00 00 00    	je     c000f5f3 <x87EmulHandler(regs*, void*)+0x122>
c000f51f:	83 c4 08             	add    esp,0x8
c000f522:	5b                   	pop    ebx
c000f523:	c3                   	ret    
c000f524:	83 ec 0c             	sub    esp,0xc
c000f527:	68 f6 56 02 c0       	push   0xc00256f6
c000f52c:	e8 16 db ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f531:	0f 06                	clts   
c000f533:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f538:	83 c4 10             	add    esp,0x10
c000f53b:	85 c0                	test   eax,eax
c000f53d:	74 33                	je     c000f572 <x87EmulHandler(regs*, void*)+0xa1>
c000f53f:	83 ec 0c             	sub    esp,0xc
c000f542:	68 03 57 02 c0       	push   0xc0025703
c000f547:	e8 fb da ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f54c:	59                   	pop    ecx
c000f54d:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f552:	5b                   	pop    ebx
c000f553:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c000f556:	8b 15 e8 89 02 c0    	mov    edx,DWORD PTR ds:0xc00289e8
c000f55c:	83 c0 3f             	add    eax,0x3f
c000f55f:	8b 92 e0 01 00 00    	mov    edx,DWORD PTR [edx+0x1e0]
c000f565:	83 e0 c0             	and    eax,0xffffffc0
c000f568:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000f56a:	50                   	push   eax
c000f56b:	52                   	push   edx
c000f56c:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000f56f:	83 c4 10             	add    esp,0x10
c000f572:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f577:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c000f57a:	85 c0                	test   eax,eax
c000f57c:	74 4e                	je     c000f5cc <x87EmulHandler(regs*, void*)+0xfb>
c000f57e:	83 ec 0c             	sub    esp,0xc
c000f581:	68 2f 57 02 c0       	push   0xc002572f
c000f586:	e8 bc da ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f58b:	59                   	pop    ecx
c000f58c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f591:	5b                   	pop    ebx
c000f592:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c000f595:	8b 15 e8 89 02 c0    	mov    edx,DWORD PTR ds:0xc00289e8
c000f59b:	83 c0 3f             	add    eax,0x3f
c000f59e:	8b 92 e0 01 00 00    	mov    edx,DWORD PTR [edx+0x1e0]
c000f5a4:	83 e0 c0             	and    eax,0xffffffc0
c000f5a7:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000f5a9:	50                   	push   eax
c000f5aa:	52                   	push   edx
c000f5ab:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000f5ae:	c7 04 24 45 57 02 c0 	mov    DWORD PTR [esp],0xc0025745
c000f5b5:	e8 8d da ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f5ba:	83 c4 10             	add    esp,0x10
c000f5bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f5c2:	a3 28 8b 02 c0       	mov    ds:0xc0028b28,eax
c000f5c7:	83 c4 08             	add    esp,0x8
c000f5ca:	5b                   	pop    ebx
c000f5cb:	c3                   	ret    
c000f5cc:	83 ec 0c             	sub    esp,0xc
c000f5cf:	68 16 57 02 c0       	push   0xc0025716
c000f5d4:	e8 6e da ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f5d9:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c000f5df:	c7 04 24 40 02 00 00 	mov    DWORD PTR [esp],0x240
c000f5e6:	e8 70 a7 ff ff       	call   c0009d5b <malloc>
c000f5eb:	83 c4 10             	add    esp,0x10
c000f5ee:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c000f5f1:	eb ca                	jmp    c000f5bd <x87EmulHandler(regs*, void*)+0xec>
c000f5f3:	83 ec 0c             	sub    esp,0xc
c000f5f6:	68 e0 56 02 c0       	push   0xc00256e0
c000f5fb:	e8 47 da ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f600:	58                   	pop    eax
c000f601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f605:	e8 38 fa ff ff       	call   c000f042 <displayDebugInfo(regs*)>

c000f60a <gpFault(regs*, void*)>:
c000f60a:	53                   	push   ebx
c000f60b:	83 ec 14             	sub    esp,0x14
c000f60e:	c7 05 24 8b 02 c0 1f 9d 01 c0 	mov    DWORD PTR ds:0xc0028b24,0xc0019d1f
c000f618:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000f61c:	53                   	push   ebx
c000f61d:	e8 fd a6 00 00       	call   c0019d1f <Vm::faultHandler(regs*)>
c000f622:	83 c4 10             	add    esp,0x10
c000f625:	84 c0                	test   al,al
c000f627:	74 05                	je     c000f62e <gpFault(regs*, void*)+0x24>
c000f629:	83 c4 08             	add    esp,0x8
c000f62c:	5b                   	pop    ebx
c000f62d:	c3                   	ret    
c000f62e:	83 ec 0c             	sub    esp,0xc
c000f631:	68 5a 57 02 c0       	push   0xc002575a
c000f636:	e8 0c da ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f63b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f63e:	e8 ff f9 ff ff       	call   c000f042 <displayDebugInfo(regs*)>

c000f643 <pgFault(regs*, void*)>:
c000f643:	53                   	push   ebx
c000f644:	83 ec 10             	sub    esp,0x10
c000f647:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f64b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f64e:	68 75 57 02 c0       	push   0xc0025775
c000f653:	e8 ef d9 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f658:	0f 20 d0             	mov    eax,cr2
c000f65b:	5a                   	pop    edx
c000f65c:	59                   	pop    ecx
c000f65d:	50                   	push   eax
c000f65e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f663:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f666:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000f66c:	e8 51 d5 ff ff       	call   c000cbc2 <VAS::tryLoadBackOffDisk(unsigned long)>
c000f671:	83 c4 10             	add    esp,0x10
c000f674:	84 c0                	test   al,al
c000f676:	74 05                	je     c000f67d <pgFault(regs*, void*)+0x3a>
c000f678:	83 c4 08             	add    esp,0x8
c000f67b:	5b                   	pop    ebx
c000f67c:	c3                   	ret    
c000f67d:	83 ec 0c             	sub    esp,0xc
c000f680:	68 8a 57 02 c0       	push   0xc002578a
c000f685:	e8 bd d9 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f68a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68d:	e8 b0 f9 ff ff       	call   c000f042 <displayDebugInfo(regs*)>

c000f692 <otherISRHandler(regs*, void*)>:
c000f692:	53                   	push   ebx
c000f693:	83 ec 0c             	sub    esp,0xc
c000f696:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f69a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f69d:	50                   	push   eax
c000f69e:	50                   	push   eax
c000f69f:	68 97 57 02 c0       	push   0xc0025797
c000f6a4:	e8 9e d9 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f6a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6ac:	e8 91 f9 ff ff       	call   c000f042 <displayDebugInfo(regs*)>

c000f6b1 <opcodeFault(regs*, void*)>:
c000f6b1:	55                   	push   ebp
c000f6b2:	89 e5                	mov    ebp,esp
c000f6b4:	56                   	push   esi
c000f6b5:	53                   	push   ebx
c000f6b6:	83 ec 30             	sub    esp,0x30
c000f6b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6bc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f6bf:	83 ec 08             	sub    esp,0x8
c000f6c2:	50                   	push   eax
c000f6c3:	68 b4 57 02 c0       	push   0xc00257b4
c000f6c8:	e8 7a d9 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f6cd:	83 c4 10             	add    esp,0x10
c000f6d0:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c000f6d5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f6db:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000f6e1:	84 c0                	test   al,al
c000f6e3:	74 24                	je     c000f709 <opcodeFault(regs*, void*)+0x58>
c000f6e5:	83 ec 0c             	sub    esp,0xc
c000f6e8:	68 c4 57 02 c0       	push   0xc00257c4
c000f6ed:	e8 55 d9 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f6f2:	83 c4 10             	add    esp,0x10
c000f6f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6f8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f6fb:	8d 50 19             	lea    edx,[eax+0x19]
c000f6fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f701:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f704:	e9 7b 03 00 00       	jmp    c000fa84 <opcodeFault(regs*, void*)+0x3d3>
c000f709:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f70c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f70f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f712:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000f716:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f719:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f71c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f71f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f722:	8a 00                	mov    al,BYTE PTR [eax]
c000f724:	3c f0                	cmp    al,0xf0
c000f726:	75 17                	jne    c000f73f <opcodeFault(regs*, void*)+0x8e>
c000f728:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f72b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f72e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f731:	8d 50 01             	lea    edx,[eax+0x1]
c000f734:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f737:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f73a:	e9 d6 00 00 00       	jmp    c000f815 <opcodeFault(regs*, void*)+0x164>
c000f73f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f742:	8a 00                	mov    al,BYTE PTR [eax]
c000f744:	3c f2                	cmp    al,0xf2
c000f746:	74 09                	je     c000f751 <opcodeFault(regs*, void*)+0xa0>
c000f748:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f74b:	8a 00                	mov    al,BYTE PTR [eax]
c000f74d:	3c f3                	cmp    al,0xf3
c000f74f:	75 1b                	jne    c000f76c <opcodeFault(regs*, void*)+0xbb>
c000f751:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f755:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f758:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f75b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f75e:	8d 50 01             	lea    edx,[eax+0x1]
c000f761:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f764:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f767:	e9 a9 00 00 00       	jmp    c000f815 <opcodeFault(regs*, void*)+0x164>
c000f76c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f76f:	8a 00                	mov    al,BYTE PTR [eax]
c000f771:	3c 66                	cmp    al,0x66
c000f773:	75 1b                	jne    c000f790 <opcodeFault(regs*, void*)+0xdf>
c000f775:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f779:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f77c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f77f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f782:	8d 50 01             	lea    edx,[eax+0x1]
c000f785:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f788:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f78b:	e9 85 00 00 00       	jmp    c000f815 <opcodeFault(regs*, void*)+0x164>
c000f790:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f793:	8a 00                	mov    al,BYTE PTR [eax]
c000f795:	3c 67                	cmp    al,0x67
c000f797:	75 18                	jne    c000f7b1 <opcodeFault(regs*, void*)+0x100>
c000f799:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f79d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f7a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7a3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f7a6:	8d 50 01             	lea    edx,[eax+0x1]
c000f7a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7ac:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f7af:	eb 64                	jmp    c000f815 <opcodeFault(regs*, void*)+0x164>
c000f7b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7b4:	8a 00                	mov    al,BYTE PTR [eax]
c000f7b6:	3c 2e                	cmp    al,0x2e
c000f7b8:	74 09                	je     c000f7c3 <opcodeFault(regs*, void*)+0x112>
c000f7ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7bd:	8a 00                	mov    al,BYTE PTR [eax]
c000f7bf:	3c 3e                	cmp    al,0x3e
c000f7c1:	75 18                	jne    c000f7db <opcodeFault(regs*, void*)+0x12a>
c000f7c3:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f7c7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f7ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7cd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f7d0:	8d 50 01             	lea    edx,[eax+0x1]
c000f7d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7d6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f7d9:	eb 3a                	jmp    c000f815 <opcodeFault(regs*, void*)+0x164>
c000f7db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7de:	8a 00                	mov    al,BYTE PTR [eax]
c000f7e0:	3c 36                	cmp    al,0x36
c000f7e2:	74 1b                	je     c000f7ff <opcodeFault(regs*, void*)+0x14e>
c000f7e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7e7:	8a 00                	mov    al,BYTE PTR [eax]
c000f7e9:	3c 26                	cmp    al,0x26
c000f7eb:	74 12                	je     c000f7ff <opcodeFault(regs*, void*)+0x14e>
c000f7ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7f0:	8a 00                	mov    al,BYTE PTR [eax]
c000f7f2:	3c 64                	cmp    al,0x64
c000f7f4:	74 09                	je     c000f7ff <opcodeFault(regs*, void*)+0x14e>
c000f7f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7f9:	8a 00                	mov    al,BYTE PTR [eax]
c000f7fb:	3c 65                	cmp    al,0x65
c000f7fd:	75 16                	jne    c000f815 <opcodeFault(regs*, void*)+0x164>
c000f7ff:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f803:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f806:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f809:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f80c:	8d 50 01             	lea    edx,[eax+0x1]
c000f80f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f812:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f815:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f818:	8a 00                	mov    al,BYTE PTR [eax]
c000f81a:	3c 0f                	cmp    al,0xf
c000f81c:	0f 85 8d 01 00 00    	jne    c000f9af <opcodeFault(regs*, void*)+0x2fe>
c000f822:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f825:	40                   	inc    eax
c000f826:	8a 00                	mov    al,BYTE PTR [eax]
c000f828:	3c c7                	cmp    al,0xc7
c000f82a:	0f 85 7f 01 00 00    	jne    c000f9af <opcodeFault(regs*, void*)+0x2fe>
c000f830:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f833:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f836:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f839:	8d 50 01             	lea    edx,[eax+0x1]
c000f83c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f83f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f842:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f845:	50                   	push   eax
c000f846:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f849:	50                   	push   eax
c000f84a:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f84d:	50                   	push   eax
c000f84e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f851:	e8 ec 4f 00 00       	call   c0014842 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f856:	83 c4 10             	add    esp,0x10
c000f859:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f85c:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f85f:	83 f0 01             	xor    eax,0x1
c000f862:	84 c0                	test   al,al
c000f864:	0f 84 45 01 00 00    	je     c000f9af <opcodeFault(regs*, void*)+0x2fe>
c000f86a:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f86d:	3c 01                	cmp    al,0x1
c000f86f:	0f 85 3a 01 00 00    	jne    c000f9af <opcodeFault(regs*, void*)+0x2fe>
c000f875:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f878:	83 f0 01             	xor    eax,0x1
c000f87b:	84 c0                	test   al,al
c000f87d:	0f 84 2c 01 00 00    	je     c000f9af <opcodeFault(regs*, void*)+0x2fe>
c000f883:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f886:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f889:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f88c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f893:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f896:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f899:	89 c2                	mov    edx,eax
c000f89b:	b8 00 00 00 00       	mov    eax,0x0
c000f8a0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f8a3:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f8a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8a9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f8ac:	ba 00 00 00 00       	mov    edx,0x0
c000f8b1:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f8b4:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f8b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8ba:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f8bd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f8c0:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f8c7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f8ca:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f8cd:	89 c2                	mov    edx,eax
c000f8cf:	b8 00 00 00 00       	mov    eax,0x0
c000f8d4:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f8d7:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f8da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8dd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f8e0:	ba 00 00 00 00       	mov    edx,0x0
c000f8e5:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f8e8:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f8eb:	fa                   	cli    
c000f8ec:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c000f8f1:	40                   	inc    eax
c000f8f2:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c000f8f7:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f8fa:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f8fd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8ff:	89 c1                	mov    ecx,eax
c000f901:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f904:	89 cb                	mov    ebx,ecx
c000f906:	89 d0                	mov    eax,edx
c000f908:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f90b:	89 c6                	mov    esi,eax
c000f90d:	89 f0                	mov    eax,esi
c000f90f:	09 d8                	or     eax,ebx
c000f911:	85 c0                	test   eax,eax
c000f913:	75 21                	jne    c000f936 <opcodeFault(regs*, void*)+0x285>
c000f915:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f918:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f91b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f91e:	89 01                	mov    DWORD PTR [ecx],eax
c000f920:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f923:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f926:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f929:	83 c8 40             	or     eax,0x40
c000f92c:	89 c2                	mov    edx,eax
c000f92e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f931:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f934:	eb 3e                	jmp    c000f974 <opcodeFault(regs*, void*)+0x2c3>
c000f936:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f939:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f93c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f93e:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f941:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f944:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f947:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f94a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f94d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f950:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f953:	89 d0                	mov    eax,edx
c000f955:	31 d2                	xor    edx,edx
c000f957:	89 c3                	mov    ebx,eax
c000f959:	89 d6                	mov    esi,edx
c000f95b:	89 da                	mov    edx,ebx
c000f95d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f960:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f963:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f966:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f969:	83 e0 bf             	and    eax,0xffffffbf
c000f96c:	89 c2                	mov    edx,eax
c000f96e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f971:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f974:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c000f979:	48                   	dec    eax
c000f97a:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c000f97f:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c000f984:	85 c0                	test   eax,eax
c000f986:	75 01                	jne    c000f989 <opcodeFault(regs*, void*)+0x2d8>
c000f988:	fb                   	sti    
c000f989:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f98c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f98f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f992:	01 c2                	add    edx,eax
c000f994:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f997:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f99a:	83 ec 0c             	sub    esp,0xc
c000f99d:	68 e7 57 02 c0       	push   0xc00257e7
c000f9a2:	e8 a0 d6 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f9a7:	83 c4 10             	add    esp,0x10
c000f9aa:	e9 d5 00 00 00       	jmp    c000fa84 <opcodeFault(regs*, void*)+0x3d3>
c000f9af:	83 ec 0c             	sub    esp,0xc
c000f9b2:	68 fa 57 02 c0       	push   0xc00257fa
c000f9b7:	e8 8b d6 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f9bc:	83 c4 10             	add    esp,0x10
c000f9bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9c2:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f9c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9c8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f9cb:	c1 e0 04             	shl    eax,0x4
c000f9ce:	01 d0                	add    eax,edx
c000f9d0:	83 c0 03             	add    eax,0x3
c000f9d3:	8a 00                	mov    al,BYTE PTR [eax]
c000f9d5:	0f b6 d8             	movzx  ebx,al
c000f9d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9db:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f9de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9e1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f9e4:	c1 e0 04             	shl    eax,0x4
c000f9e7:	01 d0                	add    eax,edx
c000f9e9:	83 c0 02             	add    eax,0x2
c000f9ec:	8a 00                	mov    al,BYTE PTR [eax]
c000f9ee:	0f b6 c8             	movzx  ecx,al
c000f9f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9f4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f9f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9fa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f9fd:	c1 e0 04             	shl    eax,0x4
c000fa00:	01 d0                	add    eax,edx
c000fa02:	40                   	inc    eax
c000fa03:	8a 00                	mov    al,BYTE PTR [eax]
c000fa05:	0f b6 d0             	movzx  edx,al
c000fa08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa0b:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000fa0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa11:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fa14:	c1 e0 04             	shl    eax,0x4
c000fa17:	01 f0                	add    eax,esi
c000fa19:	8a 00                	mov    al,BYTE PTR [eax]
c000fa1b:	0f b6 c0             	movzx  eax,al
c000fa1e:	83 ec 0c             	sub    esp,0xc
c000fa21:	53                   	push   ebx
c000fa22:	51                   	push   ecx
c000fa23:	52                   	push   edx
c000fa24:	50                   	push   eax
c000fa25:	68 0c 58 02 c0       	push   0xc002580c
c000fa2a:	e8 18 d6 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000fa2f:	83 c4 20             	add    esp,0x20
c000fa32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa35:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fa38:	83 c0 03             	add    eax,0x3
c000fa3b:	8a 00                	mov    al,BYTE PTR [eax]
c000fa3d:	0f b6 d8             	movzx  ebx,al
c000fa40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa43:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fa46:	83 c0 02             	add    eax,0x2
c000fa49:	8a 00                	mov    al,BYTE PTR [eax]
c000fa4b:	0f b6 c8             	movzx  ecx,al
c000fa4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa51:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fa54:	40                   	inc    eax
c000fa55:	8a 00                	mov    al,BYTE PTR [eax]
c000fa57:	0f b6 d0             	movzx  edx,al
c000fa5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa5d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fa60:	8a 00                	mov    al,BYTE PTR [eax]
c000fa62:	0f b6 c0             	movzx  eax,al
c000fa65:	83 ec 0c             	sub    esp,0xc
c000fa68:	53                   	push   ebx
c000fa69:	51                   	push   ecx
c000fa6a:	52                   	push   edx
c000fa6b:	50                   	push   eax
c000fa6c:	68 34 58 02 c0       	push   0xc0025834
c000fa71:	e8 d1 d5 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000fa76:	83 c4 20             	add    esp,0x20
c000fa79:	83 ec 0c             	sub    esp,0xc
c000fa7c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fa7f:	e8 be f5 ff ff       	call   c000f042 <displayDebugInfo(regs*)>
c000fa84:	8d 65 f8             	lea    esp,[ebp-0x8]
c000fa87:	5b                   	pop    ebx
c000fa88:	5e                   	pop    esi
c000fa89:	5d                   	pop    ebp
c000fa8a:	c3                   	ret    

c000fa8b <displayProgramFault(char const*)>:
c000fa8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fa90:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fa93:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000fa99:	85 c0                	test   eax,eax
c000fa9b:	74 15                	je     c000fab2 <displayProgramFault(char const*)+0x27>
c000fa9d:	83 ec 0c             	sub    esp,0xc
c000faa0:	6a 04                	push   0x4
c000faa2:	6a 0f                	push   0xf
c000faa4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000faa8:	50                   	push   eax
c000faa9:	e8 b0 b5 ff ff       	call   c000b05e <VgaText::puts(char const*, VgaColour, VgaColour)>
c000faae:	83 c4 1c             	add    esp,0x1c
c000fab1:	c3                   	ret    
c000fab2:	c3                   	ret    

c000fab3 <setupInterruptController()>:
c000fab3:	55                   	push   ebp
c000fab4:	89 e5                	mov    ebp,esp
c000fab6:	53                   	push   ebx
c000fab7:	83 ec 24             	sub    esp,0x24
c000faba:	b8 00 00 00 00       	mov    eax,0x0
c000fabf:	85 c0                	test   eax,eax
c000fac1:	0f 95 c0             	setne  al
c000fac4:	84 c0                	test   al,al
c000fac6:	74 5b                	je     c000fb23 <setupInterruptController()+0x70>
c000fac8:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000facf:	83 ec 0c             	sub    esp,0xc
c000fad2:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000fad5:	e8 81 a2 ff ff       	call   c0009d5b <malloc>
c000fada:	83 c4 10             	add    esp,0x10
c000fadd:	89 c3                	mov    ebx,eax
c000fadf:	83 ec 0c             	sub    esp,0xc
c000fae2:	53                   	push   ebx
c000fae3:	e8 68 22 01 00       	call   c0021d50 <APIC::APIC()>
c000fae8:	83 c4 10             	add    esp,0x10
c000faeb:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000faee:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000faf1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000faf4:	8b 00                	mov    eax,DWORD PTR [eax]
c000faf6:	83 c0 08             	add    eax,0x8
c000faf9:	8b 00                	mov    eax,DWORD PTR [eax]
c000fafb:	6a 00                	push   0x0
c000fafd:	6a 00                	push   0x0
c000faff:	6a 00                	push   0x0
c000fb01:	52                   	push   edx
c000fb02:	ff d0                	call   eax
c000fb04:	83 c4 10             	add    esp,0x10
c000fb07:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c000fb0c:	83 ec 08             	sub    esp,0x8
c000fb0f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fb12:	50                   	push   eax
c000fb13:	e8 a2 ea ff ff       	call   c000e5ba <Device::addChild(Device*)>
c000fb18:	83 c4 10             	add    esp,0x10
c000fb1b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fb1e:	e9 79 03 00 00       	jmp    c000fe9c <setupInterruptController()+0x3e9>
c000fb23:	a0 00 93 02 c0       	mov    al,ds:0xc0029300
c000fb28:	84 c0                	test   al,al
c000fb2a:	75 14                	jne    c000fb40 <setupInterruptController()+0x8d>
c000fb2c:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c000fb31:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000fb37:	83 e2 fe             	and    edx,0xfffffffe
c000fb3a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000fb40:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c000fb45:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000fb4b:	83 e0 01             	and    eax,0x1
c000fb4e:	84 c0                	test   al,al
c000fb50:	0f 95 c0             	setne  al
c000fb53:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000fb56:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000fb5d:	83 ec 0c             	sub    esp,0xc
c000fb60:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000fb63:	e8 f3 a1 ff ff       	call   c0009d5b <malloc>
c000fb68:	83 c4 10             	add    esp,0x10
c000fb6b:	89 c3                	mov    ebx,eax
c000fb6d:	83 ec 0c             	sub    esp,0xc
c000fb70:	53                   	push   ebx
c000fb71:	e8 32 27 01 00       	call   c00222a8 <PIC::PIC()>
c000fb76:	83 c4 10             	add    esp,0x10
c000fb79:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000fb7c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fb7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb82:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb84:	83 c0 08             	add    eax,0x8
c000fb87:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb89:	6a 00                	push   0x0
c000fb8b:	6a 00                	push   0x0
c000fb8d:	6a 00                	push   0x0
c000fb8f:	52                   	push   edx
c000fb90:	ff d0                	call   eax
c000fb92:	83 c4 10             	add    esp,0x10
c000fb95:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000fb99:	74 73                	je     c000fc0e <setupInterruptController()+0x15b>
c000fb9b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fb9e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fba1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fba3:	83 c0 0c             	add    eax,0xc
c000fba6:	8b 00                	mov    eax,DWORD PTR [eax]
c000fba8:	6a 00                	push   0x0
c000fbaa:	6a 00                	push   0x0
c000fbac:	6a 00                	push   0x0
c000fbae:	52                   	push   edx
c000fbaf:	ff d0                	call   eax
c000fbb1:	83 c4 10             	add    esp,0x10
c000fbb4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000fbb8:	74 15                	je     c000fbcf <setupInterruptController()+0x11c>
c000fbba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fbbd:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbbf:	83 c0 04             	add    eax,0x4
c000fbc2:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbc4:	83 ec 0c             	sub    esp,0xc
c000fbc7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fbca:	ff d0                	call   eax
c000fbcc:	83 c4 10             	add    esp,0x10
c000fbcf:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000fbd6:	83 ec 0c             	sub    esp,0xc
c000fbd9:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000fbdc:	e8 7a a1 ff ff       	call   c0009d5b <malloc>
c000fbe1:	83 c4 10             	add    esp,0x10
c000fbe4:	89 c3                	mov    ebx,eax
c000fbe6:	83 ec 0c             	sub    esp,0xc
c000fbe9:	53                   	push   ebx
c000fbea:	e8 61 21 01 00       	call   c0021d50 <APIC::APIC()>
c000fbef:	83 c4 10             	add    esp,0x10
c000fbf2:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000fbf5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fbf8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fbfb:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbfd:	83 c0 08             	add    eax,0x8
c000fc00:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc02:	6a 00                	push   0x0
c000fc04:	6a 00                	push   0x0
c000fc06:	6a 00                	push   0x0
c000fc08:	52                   	push   edx
c000fc09:	ff d0                	call   eax
c000fc0b:	83 c4 10             	add    esp,0x10
c000fc0e:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c000fc13:	83 ec 08             	sub    esp,0x8
c000fc16:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc19:	50                   	push   eax
c000fc1a:	e8 9b e9 ff ff       	call   c000e5ba <Device::addChild(Device*)>
c000fc1f:	83 c4 10             	add    esp,0x10
c000fc22:	c7 05 28 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028b28,0x0
c000fc2c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc2f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc31:	83 c0 24             	add    eax,0x24
c000fc34:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc36:	6a 00                	push   0x0
c000fc38:	68 92 f6 00 c0       	push   0xc000f692
c000fc3d:	6a 00                	push   0x0
c000fc3f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc42:	ff d0                	call   eax
c000fc44:	83 c4 10             	add    esp,0x10
c000fc47:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc4a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc4c:	83 c0 24             	add    eax,0x24
c000fc4f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc51:	6a 00                	push   0x0
c000fc53:	68 92 f6 00 c0       	push   0xc000f692
c000fc58:	6a 01                	push   0x1
c000fc5a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc5d:	ff d0                	call   eax
c000fc5f:	83 c4 10             	add    esp,0x10
c000fc62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc65:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc67:	83 c0 24             	add    eax,0x24
c000fc6a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc6c:	6a 00                	push   0x0
c000fc6e:	68 9f ee 00 c0       	push   0xc000ee9f
c000fc73:	6a 02                	push   0x2
c000fc75:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc78:	ff d0                	call   eax
c000fc7a:	83 c4 10             	add    esp,0x10
c000fc7d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc80:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc82:	83 c0 24             	add    eax,0x24
c000fc85:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc87:	6a 00                	push   0x0
c000fc89:	68 92 f6 00 c0       	push   0xc000f692
c000fc8e:	6a 03                	push   0x3
c000fc90:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc93:	ff d0                	call   eax
c000fc95:	83 c4 10             	add    esp,0x10
c000fc98:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc9b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc9d:	83 c0 24             	add    eax,0x24
c000fca0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fca2:	6a 00                	push   0x0
c000fca4:	68 92 f6 00 c0       	push   0xc000f692
c000fca9:	6a 04                	push   0x4
c000fcab:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fcae:	ff d0                	call   eax
c000fcb0:	83 c4 10             	add    esp,0x10
c000fcb3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fcb6:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcb8:	83 c0 24             	add    eax,0x24
c000fcbb:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcbd:	6a 00                	push   0x0
c000fcbf:	68 92 f6 00 c0       	push   0xc000f692
c000fcc4:	6a 05                	push   0x5
c000fcc6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fcc9:	ff d0                	call   eax
c000fccb:	83 c4 10             	add    esp,0x10
c000fcce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fcd1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcd3:	83 c0 24             	add    eax,0x24
c000fcd6:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcd8:	6a 00                	push   0x0
c000fcda:	68 b1 f6 00 c0       	push   0xc000f6b1
c000fcdf:	6a 06                	push   0x6
c000fce1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fce4:	ff d0                	call   eax
c000fce6:	83 c4 10             	add    esp,0x10
c000fce9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fcec:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcee:	83 c0 24             	add    eax,0x24
c000fcf1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcf3:	6a 00                	push   0x0
c000fcf5:	68 d1 f4 00 c0       	push   0xc000f4d1
c000fcfa:	6a 07                	push   0x7
c000fcfc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fcff:	ff d0                	call   eax
c000fd01:	83 c4 10             	add    esp,0x10
c000fd04:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd07:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd09:	83 c0 24             	add    eax,0x24
c000fd0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd0e:	6a 00                	push   0x0
c000fd10:	68 ba ec 00 c0       	push   0xc000ecba
c000fd15:	6a 08                	push   0x8
c000fd17:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd1a:	ff d0                	call   eax
c000fd1c:	83 c4 10             	add    esp,0x10
c000fd1f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd22:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd24:	83 c0 24             	add    eax,0x24
c000fd27:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd29:	6a 00                	push   0x0
c000fd2b:	68 92 f6 00 c0       	push   0xc000f692
c000fd30:	6a 09                	push   0x9
c000fd32:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd35:	ff d0                	call   eax
c000fd37:	83 c4 10             	add    esp,0x10
c000fd3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd3d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd3f:	83 c0 24             	add    eax,0x24
c000fd42:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd44:	6a 00                	push   0x0
c000fd46:	68 92 f6 00 c0       	push   0xc000f692
c000fd4b:	6a 0a                	push   0xa
c000fd4d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd50:	ff d0                	call   eax
c000fd52:	83 c4 10             	add    esp,0x10
c000fd55:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd58:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd5a:	83 c0 24             	add    eax,0x24
c000fd5d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd5f:	6a 00                	push   0x0
c000fd61:	68 92 f6 00 c0       	push   0xc000f692
c000fd66:	6a 0b                	push   0xb
c000fd68:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd6b:	ff d0                	call   eax
c000fd6d:	83 c4 10             	add    esp,0x10
c000fd70:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd73:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd75:	83 c0 24             	add    eax,0x24
c000fd78:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd7a:	6a 00                	push   0x0
c000fd7c:	68 92 f6 00 c0       	push   0xc000f692
c000fd81:	6a 0c                	push   0xc
c000fd83:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd86:	ff d0                	call   eax
c000fd88:	83 c4 10             	add    esp,0x10
c000fd8b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd8e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd90:	83 c0 24             	add    eax,0x24
c000fd93:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd95:	6a 00                	push   0x0
c000fd97:	68 0a f6 00 c0       	push   0xc000f60a
c000fd9c:	6a 0d                	push   0xd
c000fd9e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fda1:	ff d0                	call   eax
c000fda3:	83 c4 10             	add    esp,0x10
c000fda6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fda9:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdab:	83 c0 24             	add    eax,0x24
c000fdae:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdb0:	6a 00                	push   0x0
c000fdb2:	68 43 f6 00 c0       	push   0xc000f643
c000fdb7:	6a 0e                	push   0xe
c000fdb9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fdbc:	ff d0                	call   eax
c000fdbe:	83 c4 10             	add    esp,0x10
c000fdc1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fdc4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdc6:	83 c0 24             	add    eax,0x24
c000fdc9:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdcb:	6a 00                	push   0x0
c000fdcd:	68 92 f6 00 c0       	push   0xc000f692
c000fdd2:	6a 0f                	push   0xf
c000fdd4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fdd7:	ff d0                	call   eax
c000fdd9:	83 c4 10             	add    esp,0x10
c000fddc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fddf:	8b 00                	mov    eax,DWORD PTR [eax]
c000fde1:	83 c0 24             	add    eax,0x24
c000fde4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fde6:	6a 00                	push   0x0
c000fde8:	68 92 f6 00 c0       	push   0xc000f692
c000fded:	6a 10                	push   0x10
c000fdef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fdf2:	ff d0                	call   eax
c000fdf4:	83 c4 10             	add    esp,0x10
c000fdf7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fdfa:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdfc:	83 c0 24             	add    eax,0x24
c000fdff:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe01:	6a 00                	push   0x0
c000fe03:	68 92 f6 00 c0       	push   0xc000f692
c000fe08:	6a 11                	push   0x11
c000fe0a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe0d:	ff d0                	call   eax
c000fe0f:	83 c4 10             	add    esp,0x10
c000fe12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe15:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe17:	83 c0 24             	add    eax,0x24
c000fe1a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe1c:	6a 00                	push   0x0
c000fe1e:	68 92 f6 00 c0       	push   0xc000f692
c000fe23:	6a 12                	push   0x12
c000fe25:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe28:	ff d0                	call   eax
c000fe2a:	83 c4 10             	add    esp,0x10
c000fe2d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe30:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe32:	83 c0 24             	add    eax,0x24
c000fe35:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe37:	6a 00                	push   0x0
c000fe39:	68 92 f6 00 c0       	push   0xc000f692
c000fe3e:	6a 13                	push   0x13
c000fe40:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe43:	ff d0                	call   eax
c000fe45:	83 c4 10             	add    esp,0x10
c000fe48:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe4b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe4d:	83 c0 24             	add    eax,0x24
c000fe50:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe52:	6a 00                	push   0x0
c000fe54:	68 92 f6 00 c0       	push   0xc000f692
c000fe59:	6a 14                	push   0x14
c000fe5b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe5e:	ff d0                	call   eax
c000fe60:	83 c4 10             	add    esp,0x10
c000fe63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe66:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe68:	83 c0 24             	add    eax,0x24
c000fe6b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe6d:	6a 00                	push   0x0
c000fe6f:	68 92 f6 00 c0       	push   0xc000f692
c000fe74:	6a 1e                	push   0x1e
c000fe76:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe79:	ff d0                	call   eax
c000fe7b:	83 c4 10             	add    esp,0x10
c000fe7e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe81:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe83:	83 c0 24             	add    eax,0x24
c000fe86:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe88:	6a 00                	push   0x0
c000fe8a:	68 73 73 01 c0       	push   0xc0017373
c000fe8f:	6a 60                	push   0x60
c000fe91:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe94:	ff d0                	call   eax
c000fe96:	83 c4 10             	add    esp,0x10
c000fe99:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe9c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fe9f:	c9                   	leave  
c000fea0:	c3                   	ret    
c000fea1:	90                   	nop

c000fea2 <InterruptController::convertLegacyIRQNumber(int)>:
c000fea2:	55                   	push   ebp
c000fea3:	89 e5                	mov    ebp,esp
c000fea5:	83 ec 08             	sub    esp,0x8
c000fea8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000feab:	83 ec 0c             	sub    esp,0xc
c000feae:	50                   	push   eax
c000feaf:	e8 06 ea ff ff       	call   c000e8ba <Device::getName()>
c000feb4:	83 c4 10             	add    esp,0x10
c000feb7:	8a 00                	mov    al,BYTE PTR [eax]
c000feb9:	3c 41                	cmp    al,0x41
c000febb:	0f 94 c0             	sete   al
c000febe:	84 c0                	test   al,al
c000fec0:	74 28                	je     c000feea <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000fec2:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000fec6:	7f 12                	jg     c000feda <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000fec8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fecb:	05 e0 80 02 c0       	add    eax,0xc00280e0
c000fed0:	8a 00                	mov    al,BYTE PTR [eax]
c000fed2:	0f b6 c0             	movzx  eax,al
c000fed5:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000fed8:	eb 10                	jmp    c000feea <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000feda:	83 ec 0c             	sub    esp,0xc
c000fedd:	68 5c 58 02 c0       	push   0xc002585c
c000fee2:	e8 42 52 00 00       	call   c0015129 <Krnl::panic(char const*)>
c000fee7:	83 c4 10             	add    esp,0x10
c000feea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000feed:	c9                   	leave  
c000feee:	c3                   	ret    
c000feef:	90                   	nop

c000fef0 <startGUI(void*)>:
c000fef0:	55                   	push   ebp
c000fef1:	89 e5                	mov    ebp,esp
c000fef3:	53                   	push   ebx
c000fef4:	83 ec 04             	sub    esp,0x4
c000fef7:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c000fefc:	48                   	dec    eax
c000fefd:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c000ff02:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c000ff07:	85 c0                	test   eax,eax
c000ff09:	75 01                	jne    c000ff0c <startGUI(void*)+0x1c>
c000ff0b:	fb                   	sti    
c000ff0c:	8b 1d e8 89 02 c0    	mov    ebx,DWORD PTR ds:0xc00289e8
c000ff12:	83 ec 08             	sub    esp,0x8
c000ff15:	6a 01                	push   0x1
c000ff17:	68 dc 58 02 c0       	push   0xc00258dc
c000ff1c:	e8 2d 84 00 00       	call   c001834e <Thr::loadDLL(char const*, bool)>
c000ff21:	83 c4 10             	add    esp,0x10
c000ff24:	83 ec 08             	sub    esp,0x8
c000ff27:	53                   	push   ebx
c000ff28:	50                   	push   eax
c000ff29:	e8 51 86 00 00       	call   c001857f <Thr::executeDLL(unsigned long, void*)>
c000ff2e:	83 c4 10             	add    esp,0x10
c000ff31:	8b 1d e8 89 02 c0    	mov    ebx,DWORD PTR ds:0xc00289e8
c000ff37:	83 ec 08             	sub    esp,0x8
c000ff3a:	6a 01                	push   0x1
c000ff3c:	68 f6 58 02 c0       	push   0xc00258f6
c000ff41:	e8 08 84 00 00       	call   c001834e <Thr::loadDLL(char const*, bool)>
c000ff46:	83 c4 10             	add    esp,0x10
c000ff49:	83 ec 08             	sub    esp,0x8
c000ff4c:	53                   	push   ebx
c000ff4d:	50                   	push   eax
c000ff4e:	e8 2c 86 00 00       	call   c001857f <Thr::executeDLL(unsigned long, void*)>
c000ff53:	83 c4 10             	add    esp,0x10
c000ff56:	90                   	nop
c000ff57:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ff5a:	c9                   	leave  
c000ff5b:	c3                   	ret    

c000ff5c <startGUIVESA(void*)>:
c000ff5c:	55                   	push   ebp
c000ff5d:	89 e5                	mov    ebp,esp
c000ff5f:	53                   	push   ebx
c000ff60:	83 ec 04             	sub    esp,0x4
c000ff63:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c000ff68:	48                   	dec    eax
c000ff69:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c000ff6e:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c000ff73:	85 c0                	test   eax,eax
c000ff75:	75 01                	jne    c000ff78 <startGUIVESA(void*)+0x1c>
c000ff77:	fb                   	sti    
c000ff78:	8b 1d e8 89 02 c0    	mov    ebx,DWORD PTR ds:0xc00289e8
c000ff7e:	83 ec 08             	sub    esp,0x8
c000ff81:	6a 01                	push   0x1
c000ff83:	68 14 59 02 c0       	push   0xc0025914
c000ff88:	e8 c1 83 00 00       	call   c001834e <Thr::loadDLL(char const*, bool)>
c000ff8d:	83 c4 10             	add    esp,0x10
c000ff90:	83 ec 08             	sub    esp,0x8
c000ff93:	53                   	push   ebx
c000ff94:	50                   	push   eax
c000ff95:	e8 e5 85 00 00       	call   c001857f <Thr::executeDLL(unsigned long, void*)>
c000ff9a:	83 c4 10             	add    esp,0x10
c000ff9d:	8b 1d e8 89 02 c0    	mov    ebx,DWORD PTR ds:0xc00289e8
c000ffa3:	83 ec 08             	sub    esp,0x8
c000ffa6:	6a 01                	push   0x1
c000ffa8:	68 f6 58 02 c0       	push   0xc00258f6
c000ffad:	e8 9c 83 00 00       	call   c001834e <Thr::loadDLL(char const*, bool)>
c000ffb2:	83 c4 10             	add    esp,0x10
c000ffb5:	83 ec 08             	sub    esp,0x8
c000ffb8:	53                   	push   ebx
c000ffb9:	50                   	push   eax
c000ffba:	e8 c0 85 00 00       	call   c001857f <Thr::executeDLL(unsigned long, void*)>
c000ffbf:	83 c4 10             	add    esp,0x10
c000ffc2:	90                   	nop
c000ffc3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ffc6:	c9                   	leave  
c000ffc7:	c3                   	ret    

c000ffc8 <sendKeyToTerminal(unsigned char)>:
c000ffc8:	55                   	push   ebp
c000ffc9:	89 e5                	mov    ebp,esp
c000ffcb:	83 ec 28             	sub    esp,0x28
c000ffce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffd1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000ffd4:	a1 64 8a 02 c0       	mov    eax,ds:0xc0028a64
c000ffd9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000ffdd:	83 ec 08             	sub    esp,0x8
c000ffe0:	52                   	push   edx
c000ffe1:	50                   	push   eax
c000ffe2:	e8 1d b5 ff ff       	call   c000b504 <VgaText::receiveKey(unsigned char)>
c000ffe7:	83 c4 10             	add    esp,0x10
c000ffea:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000ffee:	0f 85 8f 00 00 00    	jne    c0010083 <sendKeyToTerminal(unsigned char)+0xbb>
c000fff4:	fa                   	cli    
c000fff5:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c000fffa:	40                   	inc    eax
c000fffb:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c0010000:	a1 04 9f 02 c0       	mov    eax,ds:0xc0029f04
c0010005:	40                   	inc    eax
c0010006:	a3 04 9f 02 c0       	mov    ds:0xc0029f04,eax
c001000b:	a1 40 8b 02 c0       	mov    eax,ds:0xc0028b40
c0010010:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0010013:	c7 05 40 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028b40,0x0
c001001d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0010021:	74 1f                	je     c0010042 <sendKeyToTerminal(unsigned char)+0x7a>
c0010023:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0010026:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0010029:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001002c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001002f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0010032:	83 ec 0c             	sub    esp,0xc
c0010035:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010038:	e8 b3 91 00 00       	call   c00191f0 <unblockTask(ThreadControlBlock*)>
c001003d:	83 c4 10             	add    esp,0x10
c0010040:	eb db                	jmp    c001001d <sendKeyToTerminal(unsigned char)+0x55>
c0010042:	a1 04 9f 02 c0       	mov    eax,ds:0xc0029f04
c0010047:	48                   	dec    eax
c0010048:	a3 04 9f 02 c0       	mov    ds:0xc0029f04,eax
c001004d:	a1 04 9f 02 c0       	mov    eax,ds:0xc0029f04
c0010052:	85 c0                	test   eax,eax
c0010054:	75 18                	jne    c001006e <sendKeyToTerminal(unsigned char)+0xa6>
c0010056:	a1 00 9f 02 c0       	mov    eax,ds:0xc0029f00
c001005b:	85 c0                	test   eax,eax
c001005d:	74 0f                	je     c001006e <sendKeyToTerminal(unsigned char)+0xa6>
c001005f:	c7 05 00 9f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029f00,0x0
c0010069:	e8 c6 8c 00 00       	call   c0018d34 <schedule()>
c001006e:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c0010073:	48                   	dec    eax
c0010074:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c0010079:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c001007e:	85 c0                	test   eax,eax
c0010080:	75 01                	jne    c0010083 <sendKeyToTerminal(unsigned char)+0xbb>
c0010082:	fb                   	sti    
c0010083:	90                   	nop
c0010084:	c9                   	leave  
c0010085:	c3                   	ret    

c0010086 <sendKeyboardToken(KeyboardToken)>:
c0010086:	55                   	push   ebp
c0010087:	89 e5                	mov    ebp,esp
c0010089:	83 ec 18             	sub    esp,0x18
c001008c:	e8 71 53 00 00       	call   c0015402 <Krnl::userIOReceived()>
c0010091:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0010094:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010097:	0f b7 c0             	movzx  eax,ax
c001009a:	83 f2 01             	xor    edx,0x1
c001009d:	88 90 60 8b 02 c0    	mov    BYTE PTR [eax-0x3ffd74a0],dl
c00100a3:	a1 48 8b 02 c0       	mov    eax,ds:0xc0028b48
c00100a8:	85 c0                	test   eax,eax
c00100aa:	74 24                	je     c00100d0 <sendKeyboardToken(KeyboardToken)+0x4a>
c00100ac:	8b 0d 48 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028b48
c00100b2:	83 ec 04             	sub    esp,0x4
c00100b5:	68 60 8b 02 c0       	push   0xc0028b60
c00100ba:	83 ec 08             	sub    esp,0x8
c00100bd:	89 e2                	mov    edx,esp
c00100bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100c2:	89 02                	mov    DWORD PTR [edx],eax
c00100c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00100c7:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00100cb:	ff d1                	call   ecx
c00100cd:	83 c4 10             	add    esp,0x10
c00100d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100d3:	66 3d 03 02          	cmp    ax,0x203
c00100d7:	75 07                	jne    c00100e0 <sendKeyboardToken(KeyboardToken)+0x5a>
c00100d9:	a0 60 8c 02 c0       	mov    al,ds:0xc0028c60
c00100de:	84 c0                	test   al,al
c00100e0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00100e4:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00100e7:	a0 68 8f 02 c0       	mov    al,ds:0xc0028f68
c00100ec:	38 c2                	cmp    dl,al
c00100ee:	74 1c                	je     c001010c <sendKeyboardToken(KeyboardToken)+0x86>
c00100f0:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00100f3:	a2 68 8f 02 c0       	mov    ds:0xc0028f68,al
c00100f8:	a0 68 8f 02 c0       	mov    al,ds:0xc0028f68
c00100fd:	0f b6 c0             	movzx  eax,al
c0010100:	83 ec 0c             	sub    esp,0xc
c0010103:	50                   	push   eax
c0010104:	e8 3d aa ff ff       	call   c000ab46 <setTerminalScrollLock(bool)>
c0010109:	83 c4 10             	add    esp,0x10
c001010c:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001010f:	84 c0                	test   al,al
c0010111:	0f 84 ae 00 00 00    	je     c00101c5 <sendKeyboardToken(KeyboardToken)+0x13f>
c0010117:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001011a:	66 3d 10 03          	cmp    ax,0x310
c001011e:	75 06                	jne    c0010126 <sendKeyboardToken(KeyboardToken)+0xa0>
c0010120:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0010126:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010129:	66 3d 11 03          	cmp    ax,0x311
c001012d:	75 06                	jne    c0010135 <sendKeyboardToken(KeyboardToken)+0xaf>
c001012f:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0010135:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010138:	66 3d 12 03          	cmp    ax,0x312
c001013c:	75 06                	jne    c0010144 <sendKeyboardToken(KeyboardToken)+0xbe>
c001013e:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0010144:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010147:	66 3d 13 03          	cmp    ax,0x313
c001014b:	75 06                	jne    c0010153 <sendKeyboardToken(KeyboardToken)+0xcd>
c001014d:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0010153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010156:	66 3d 14 03          	cmp    ax,0x314
c001015a:	75 06                	jne    c0010162 <sendKeyboardToken(KeyboardToken)+0xdc>
c001015c:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0010162:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010165:	66 3d 15 03          	cmp    ax,0x315
c0010169:	75 06                	jne    c0010171 <sendKeyboardToken(KeyboardToken)+0xeb>
c001016b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0010171:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010174:	66 3d 16 03          	cmp    ax,0x316
c0010178:	75 06                	jne    c0010180 <sendKeyboardToken(KeyboardToken)+0xfa>
c001017a:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0010180:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010183:	66 3d 17 03          	cmp    ax,0x317
c0010187:	75 06                	jne    c001018f <sendKeyboardToken(KeyboardToken)+0x109>
c0010189:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001018f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010192:	66 3d 18 03          	cmp    ax,0x318
c0010196:	75 06                	jne    c001019e <sendKeyboardToken(KeyboardToken)+0x118>
c0010198:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001019e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101a1:	66 3d 19 03          	cmp    ax,0x319
c00101a5:	75 06                	jne    c00101ad <sendKeyboardToken(KeyboardToken)+0x127>
c00101a7:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00101ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101b0:	66 3d 1a 03          	cmp    ax,0x31a
c00101b4:	0f 85 c9 00 00 00    	jne    c0010283 <sendKeyboardToken(KeyboardToken)+0x1fd>
c00101ba:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00101c0:	e9 be 00 00 00       	jmp    c0010283 <sendKeyboardToken(KeyboardToken)+0x1fd>
c00101c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101c8:	66 3d 10 03          	cmp    ax,0x310
c00101cc:	75 0a                	jne    c00101d8 <sendKeyboardToken(KeyboardToken)+0x152>
c00101ce:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00101d4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00101d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101db:	66 3d 11 03          	cmp    ax,0x311
c00101df:	75 0a                	jne    c00101eb <sendKeyboardToken(KeyboardToken)+0x165>
c00101e1:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00101e7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00101eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101ee:	66 3d 12 03          	cmp    ax,0x312
c00101f2:	75 0a                	jne    c00101fe <sendKeyboardToken(KeyboardToken)+0x178>
c00101f4:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00101fa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00101fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010201:	66 3d 13 03          	cmp    ax,0x313
c0010205:	75 0a                	jne    c0010211 <sendKeyboardToken(KeyboardToken)+0x18b>
c0010207:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001020d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010211:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010214:	66 3d 14 03          	cmp    ax,0x314
c0010218:	75 0a                	jne    c0010224 <sendKeyboardToken(KeyboardToken)+0x19e>
c001021a:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0010220:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010224:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010227:	66 3d 15 03          	cmp    ax,0x315
c001022b:	75 0a                	jne    c0010237 <sendKeyboardToken(KeyboardToken)+0x1b1>
c001022d:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0010233:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010237:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001023a:	66 3d 16 03          	cmp    ax,0x316
c001023e:	75 0a                	jne    c001024a <sendKeyboardToken(KeyboardToken)+0x1c4>
c0010240:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0010246:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001024a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001024d:	66 3d 17 03          	cmp    ax,0x317
c0010251:	75 0a                	jne    c001025d <sendKeyboardToken(KeyboardToken)+0x1d7>
c0010253:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0010259:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001025d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010260:	66 3d 18 03          	cmp    ax,0x318
c0010264:	75 0a                	jne    c0010270 <sendKeyboardToken(KeyboardToken)+0x1ea>
c0010266:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001026c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010270:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010273:	66 3d 19 03          	cmp    ax,0x319
c0010277:	75 0a                	jne    c0010283 <sendKeyboardToken(KeyboardToken)+0x1fd>
c0010279:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001027f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010283:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010286:	66 3d 00 02          	cmp    ax,0x200
c001028a:	75 2c                	jne    c00102b8 <sendKeyboardToken(KeyboardToken)+0x232>
c001028c:	a0 60 8f 02 c0       	mov    al,ds:0xc0028f60
c0010291:	83 f0 01             	xor    eax,0x1
c0010294:	84 c0                	test   al,al
c0010296:	74 20                	je     c00102b8 <sendKeyboardToken(KeyboardToken)+0x232>
c0010298:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c001029d:	6a 01                	push   0x1
c001029f:	6a 00                	push   0x0
c00102a1:	68 f0 fe 00 c0       	push   0xc000fef0
c00102a6:	50                   	push   eax
c00102a7:	e8 6c 88 00 00       	call   c0018b18 <Process::createThread(void (*)(void*), void*, int)>
c00102ac:	83 c4 10             	add    esp,0x10
c00102af:	c6 05 60 8f 02 c0 01 	mov    BYTE PTR ds:0xc0028f60,0x1
c00102b6:	eb 33                	jmp    c00102eb <sendKeyboardToken(KeyboardToken)+0x265>
c00102b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102bb:	66 3d 01 02          	cmp    ax,0x201
c00102bf:	75 2a                	jne    c00102eb <sendKeyboardToken(KeyboardToken)+0x265>
c00102c1:	a0 60 8f 02 c0       	mov    al,ds:0xc0028f60
c00102c6:	83 f0 01             	xor    eax,0x1
c00102c9:	84 c0                	test   al,al
c00102cb:	74 1e                	je     c00102eb <sendKeyboardToken(KeyboardToken)+0x265>
c00102cd:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c00102d2:	6a 01                	push   0x1
c00102d4:	6a 00                	push   0x0
c00102d6:	68 5c ff 00 c0       	push   0xc000ff5c
c00102db:	50                   	push   eax
c00102dc:	e8 37 88 00 00       	call   c0018b18 <Process::createThread(void (*)(void*), void*, int)>
c00102e1:	83 c4 10             	add    esp,0x10
c00102e4:	c6 05 60 8f 02 c0 01 	mov    BYTE PTR ds:0xc0028f60,0x1
c00102eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102ee:	66 3d 1d 03          	cmp    ax,0x31d
c00102f2:	75 06                	jne    c00102fa <sendKeyboardToken(KeyboardToken)+0x274>
c00102f4:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00102fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102fd:	66 3d 1c 03          	cmp    ax,0x31c
c0010301:	75 06                	jne    c0010309 <sendKeyboardToken(KeyboardToken)+0x283>
c0010303:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0010309:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001030c:	66 3d 1b 03          	cmp    ax,0x31b
c0010310:	75 06                	jne    c0010318 <sendKeyboardToken(KeyboardToken)+0x292>
c0010312:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0010318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001031b:	66 3d 1e 03          	cmp    ax,0x31e
c001031f:	75 06                	jne    c0010327 <sendKeyboardToken(KeyboardToken)+0x2a1>
c0010321:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0010327:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001032a:	66 3d 1f 03          	cmp    ax,0x31f
c001032e:	75 06                	jne    c0010336 <sendKeyboardToken(KeyboardToken)+0x2b0>
c0010330:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0010336:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010339:	66 3d 1a 03          	cmp    ax,0x31a
c001033d:	75 06                	jne    c0010345 <sendKeyboardToken(KeyboardToken)+0x2bf>
c001033f:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0010345:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0010349:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001034c:	83 f0 01             	xor    eax,0x1
c001034f:	84 c0                	test   al,al
c0010351:	74 77                	je     c00103ca <sendKeyboardToken(KeyboardToken)+0x344>
c0010353:	a0 61 8c 02 c0       	mov    al,ds:0xc0028c61
c0010358:	84 c0                	test   al,al
c001035a:	74 41                	je     c001039d <sendKeyboardToken(KeyboardToken)+0x317>
c001035c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0010360:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0010364:	74 2b                	je     c0010391 <sendKeyboardToken(KeyboardToken)+0x30b>
c0010366:	8b 15 64 8f 02 c0    	mov    edx,DWORD PTR ds:0xc0028f64
c001036c:	89 d0                	mov    eax,edx
c001036e:	c1 e0 02             	shl    eax,0x2
c0010371:	01 d0                	add    eax,edx
c0010373:	01 c0                	add    eax,eax
c0010375:	a3 64 8f 02 c0       	mov    ds:0xc0028f64,eax
c001037a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001037d:	0f b7 c0             	movzx  eax,ax
c0010380:	8d 50 d0             	lea    edx,[eax-0x30]
c0010383:	a1 64 8f 02 c0       	mov    eax,ds:0xc0028f64
c0010388:	01 d0                	add    eax,edx
c001038a:	a3 64 8f 02 c0       	mov    ds:0xc0028f64,eax
c001038f:	eb 6d                	jmp    c00103fe <sendKeyboardToken(KeyboardToken)+0x378>
c0010391:	c7 05 64 8f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028f64,0x0
c001039b:	eb 61                	jmp    c00103fe <sendKeyboardToken(KeyboardToken)+0x378>
c001039d:	a1 64 8f 02 c0       	mov    eax,ds:0xc0028f64
c00103a2:	85 c0                	test   eax,eax
c00103a4:	74 18                	je     c00103be <sendKeyboardToken(KeyboardToken)+0x338>
c00103a6:	a1 64 8f 02 c0       	mov    eax,ds:0xc0028f64
c00103ab:	0f b6 c0             	movzx  eax,al
c00103ae:	83 ec 0c             	sub    esp,0xc
c00103b1:	50                   	push   eax
c00103b2:	e8 11 fc ff ff       	call   c000ffc8 <sendKeyToTerminal(unsigned char)>
c00103b7:	83 c4 10             	add    esp,0x10
c00103ba:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00103be:	c7 05 64 8f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028f64,0x0
c00103c8:	eb 34                	jmp    c00103fe <sendKeyboardToken(KeyboardToken)+0x378>
c00103ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103cd:	66 3d 01 01          	cmp    ax,0x101
c00103d1:	75 2b                	jne    c00103fe <sendKeyboardToken(KeyboardToken)+0x378>
c00103d3:	a1 64 8f 02 c0       	mov    eax,ds:0xc0028f64
c00103d8:	85 c0                	test   eax,eax
c00103da:	74 18                	je     c00103f4 <sendKeyboardToken(KeyboardToken)+0x36e>
c00103dc:	a1 64 8f 02 c0       	mov    eax,ds:0xc0028f64
c00103e1:	0f b6 c0             	movzx  eax,al
c00103e4:	83 ec 0c             	sub    esp,0xc
c00103e7:	50                   	push   eax
c00103e8:	e8 db fb ff ff       	call   c000ffc8 <sendKeyToTerminal(unsigned char)>
c00103ed:	83 c4 10             	add    esp,0x10
c00103f0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00103f4:	c7 05 64 8f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028f64,0x0
c00103fe:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010401:	83 f0 01             	xor    eax,0x1
c0010404:	84 c0                	test   al,al
c0010406:	74 4c                	je     c0010454 <sendKeyboardToken(KeyboardToken)+0x3ce>
c0010408:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001040b:	83 f0 01             	xor    eax,0x1
c001040e:	84 c0                	test   al,al
c0010410:	74 42                	je     c0010454 <sendKeyboardToken(KeyboardToken)+0x3ce>
c0010412:	a0 60 8c 02 c0       	mov    al,ds:0xc0028c60
c0010417:	83 f0 01             	xor    eax,0x1
c001041a:	84 c0                	test   al,al
c001041c:	74 36                	je     c0010454 <sendKeyboardToken(KeyboardToken)+0x3ce>
c001041e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010421:	66 83 f8 1f          	cmp    ax,0x1f
c0010425:	76 09                	jbe    c0010430 <sendKeyboardToken(KeyboardToken)+0x3aa>
c0010427:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001042a:	66 83 f8 7e          	cmp    ax,0x7e
c001042e:	76 12                	jbe    c0010442 <sendKeyboardToken(KeyboardToken)+0x3bc>
c0010430:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010433:	66 83 f8 0a          	cmp    ax,0xa
c0010437:	74 09                	je     c0010442 <sendKeyboardToken(KeyboardToken)+0x3bc>
c0010439:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001043c:	66 83 f8 08          	cmp    ax,0x8
c0010440:	75 12                	jne    c0010454 <sendKeyboardToken(KeyboardToken)+0x3ce>
c0010442:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010445:	0f b6 c0             	movzx  eax,al
c0010448:	83 ec 0c             	sub    esp,0xc
c001044b:	50                   	push   eax
c001044c:	e8 77 fb ff ff       	call   c000ffc8 <sendKeyToTerminal(unsigned char)>
c0010451:	83 c4 10             	add    esp,0x10
c0010454:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010457:	83 f0 01             	xor    eax,0x1
c001045a:	84 c0                	test   al,al
c001045c:	74 4f                	je     c00104ad <sendKeyboardToken(KeyboardToken)+0x427>
c001045e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0010461:	83 f0 01             	xor    eax,0x1
c0010464:	84 c0                	test   al,al
c0010466:	74 45                	je     c00104ad <sendKeyboardToken(KeyboardToken)+0x427>
c0010468:	a0 60 8c 02 c0       	mov    al,ds:0xc0028c60
c001046d:	84 c0                	test   al,al
c001046f:	74 3c                	je     c00104ad <sendKeyboardToken(KeyboardToken)+0x427>
c0010471:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010474:	66 83 f8 3f          	cmp    ax,0x3f
c0010478:	76 33                	jbe    c00104ad <sendKeyboardToken(KeyboardToken)+0x427>
c001047a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001047d:	66 83 f8 7f          	cmp    ax,0x7f
c0010481:	77 2a                	ja     c00104ad <sendKeyboardToken(KeyboardToken)+0x427>
c0010483:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010486:	88 c2                	mov    dl,al
c0010488:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001048b:	66 83 f8 5f          	cmp    ax,0x5f
c001048f:	76 04                	jbe    c0010495 <sendKeyboardToken(KeyboardToken)+0x40f>
c0010491:	b0 20                	mov    al,0x20
c0010493:	eb 02                	jmp    c0010497 <sendKeyboardToken(KeyboardToken)+0x411>
c0010495:	b0 00                	mov    al,0x0
c0010497:	29 c2                	sub    edx,eax
c0010499:	88 d0                	mov    al,dl
c001049b:	83 e8 40             	sub    eax,0x40
c001049e:	0f b6 c0             	movzx  eax,al
c00104a1:	83 ec 0c             	sub    esp,0xc
c00104a4:	50                   	push   eax
c00104a5:	e8 1e fb ff ff       	call   c000ffc8 <sendKeyToTerminal(unsigned char)>
c00104aa:	83 c4 10             	add    esp,0x10
c00104ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00104b0:	66 3d 00 03          	cmp    ax,0x300
c00104b4:	75 0f                	jne    c00104c5 <sendKeyboardToken(KeyboardToken)+0x43f>
c00104b6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00104b9:	83 f0 01             	xor    eax,0x1
c00104bc:	84 c0                	test   al,al
c00104be:	74 05                	je     c00104c5 <sendKeyboardToken(KeyboardToken)+0x43f>
c00104c0:	e8 f2 a9 ff ff       	call   c000aeb7 <doTerminalCycle()>
c00104c5:	90                   	nop
c00104c6:	c9                   	leave  
c00104c7:	c3                   	ret    

c00104c8 <clearInternalKeybuffer(VgaText*)>:
c00104c8:	55                   	push   ebp
c00104c9:	89 e5                	mov    ebp,esp
c00104cb:	83 ec 08             	sub    esp,0x8
c00104ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00104d1:	05 32 01 00 00       	add    eax,0x132
c00104d6:	83 ec 0c             	sub    esp,0xc
c00104d9:	50                   	push   eax
c00104da:	e8 c1 01 ff ff       	call   c00006a0 <strlen>
c00104df:	83 c4 10             	add    esp,0x10
c00104e2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00104e5:	81 c2 32 01 00 00    	add    edx,0x132
c00104eb:	83 ec 04             	sub    esp,0x4
c00104ee:	50                   	push   eax
c00104ef:	6a 00                	push   0x0
c00104f1:	52                   	push   edx
c00104f2:	e8 8d 01 ff ff       	call   c0000684 <memset>
c00104f7:	83 c4 10             	add    esp,0x10
c00104fa:	90                   	nop
c00104fb:	c9                   	leave  
c00104fc:	c3                   	ret    

c00104fd <readKeyboard(VgaText*, char*, unsigned long)>:
c00104fd:	55                   	push   ebp
c00104fe:	89 e5                	mov    ebp,esp
c0010500:	83 ec 18             	sub    esp,0x18
c0010503:	a1 48 8b 02 c0       	mov    eax,ds:0xc0028b48
c0010508:	85 c0                	test   eax,eax
c001050a:	74 2a                	je     c0010536 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c001050c:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0010512:	8b 0d 48 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028b48
c0010518:	83 ec 04             	sub    esp,0x4
c001051b:	68 60 8b 02 c0       	push   0xc0028b60
c0010520:	83 ec 08             	sub    esp,0x8
c0010523:	89 e2                	mov    edx,esp
c0010525:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0010528:	89 02                	mov    DWORD PTR [edx],eax
c001052a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001052d:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0010531:	ff d1                	call   ecx
c0010533:	83 c4 10             	add    esp,0x10
c0010536:	fb                   	sti    
c0010537:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001053e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0010542:	0f 84 a1 00 00 00    	je     c00105e9 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0010548:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001054b:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c0010551:	84 c0                	test   al,al
c0010553:	75 28                	jne    c001057d <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0010555:	fa                   	cli    
c0010556:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c001055b:	40                   	inc    eax
c001055c:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c0010561:	e8 ce 87 00 00       	call   c0018d34 <schedule()>
c0010566:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c001056b:	48                   	dec    eax
c001056c:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c0010571:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c0010576:	85 c0                	test   eax,eax
c0010578:	75 ce                	jne    c0010548 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001057a:	fb                   	sti    
c001057b:	eb cb                	jmp    c0010548 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001057d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0010580:	8d 50 01             	lea    edx,[eax+0x1]
c0010583:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0010586:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010589:	8a 92 32 01 00 00    	mov    dl,BYTE PTR [edx+0x132]
c001058f:	88 10                	mov    BYTE PTR [eax],dl
c0010591:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010594:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c001059a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001059d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00105a0:	05 32 01 00 00       	add    eax,0x132
c00105a5:	83 ec 0c             	sub    esp,0xc
c00105a8:	50                   	push   eax
c00105a9:	e8 f2 00 ff ff       	call   c00006a0 <strlen>
c00105ae:	83 c4 10             	add    esp,0x10
c00105b1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00105b4:	81 c2 32 01 00 00    	add    edx,0x132
c00105ba:	8d 4a 01             	lea    ecx,[edx+0x1]
c00105bd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00105c0:	81 c2 32 01 00 00    	add    edx,0x132
c00105c6:	83 ec 04             	sub    esp,0x4
c00105c9:	50                   	push   eax
c00105ca:	51                   	push   ecx
c00105cb:	52                   	push   edx
c00105cc:	e8 eb ff fe ff       	call   c00005bc <memmove>
c00105d1:	83 c4 10             	add    esp,0x10
c00105d4:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00105d7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00105da:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00105de:	0f 85 5a ff ff ff    	jne    c001053e <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c00105e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00105e7:	eb 03                	jmp    c00105ec <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c00105e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00105ec:	c9                   	leave  
c00105ed:	c3                   	ret    

c00105ee <Keyboard::Keyboard(char const*)>:
c00105ee:	83 ec 0c             	sub    esp,0xc
c00105f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105f5:	83 ec 08             	sub    esp,0x8
c00105f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105fc:	50                   	push   eax
c00105fd:	e8 bc e1 ff ff       	call   c000e7be <Device::Device(char const*)>
c0010602:	83 c4 10             	add    esp,0x10
c0010605:	ba 38 59 02 c0       	mov    edx,0xc0025938
c001060a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001060e:	89 10                	mov    DWORD PTR [eax],edx
c0010610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010614:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001061e:	c6 05 44 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b44,0x1
c0010625:	90                   	nop
c0010626:	83 c4 0c             	add    esp,0xc
c0010629:	c3                   	ret    

c001062a <Keyboard::~Keyboard()>:
c001062a:	83 ec 0c             	sub    esp,0xc
c001062d:	ba 38 59 02 c0       	mov    edx,0xc0025938
c0010632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010636:	89 10                	mov    DWORD PTR [eax],edx
c0010638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001063c:	83 ec 0c             	sub    esp,0xc
c001063f:	50                   	push   eax
c0010640:	e8 43 de ff ff       	call   c000e488 <Device::~Device()>
c0010645:	83 c4 10             	add    esp,0x10
c0010648:	90                   	nop
c0010649:	83 c4 0c             	add    esp,0xc
c001064c:	c3                   	ret    
c001064d:	90                   	nop

c001064e <Keyboard::~Keyboard()>:
c001064e:	83 ec 0c             	sub    esp,0xc
c0010651:	83 ec 0c             	sub    esp,0xc
c0010654:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010658:	e8 cd ff ff ff       	call   c001062a <Keyboard::~Keyboard()>
c001065d:	83 c4 10             	add    esp,0x10
c0010660:	83 ec 08             	sub    esp,0x8
c0010663:	68 5c 01 00 00       	push   0x15c
c0010668:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001066c:	e8 f5 c8 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0010671:	83 c4 10             	add    esp,0x10
c0010674:	83 c4 0c             	add    esp,0xc
c0010677:	c3                   	ret    

c0010678 <LogicalDisk::close(int, int, void*)>:
c0010678:	83 c8 ff             	or     eax,0xffffffff
c001067b:	c3                   	ret    

c001067c <LogicalDisk::~LogicalDisk()>:
c001067c:	83 ec 0c             	sub    esp,0xc
c001067f:	ba 08 5a 02 c0       	mov    edx,0xc0025a08
c0010684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010688:	89 10                	mov    DWORD PTR [eax],edx
c001068a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001068e:	83 ec 0c             	sub    esp,0xc
c0010691:	50                   	push   eax
c0010692:	e8 f1 dd ff ff       	call   c000e488 <Device::~Device()>
c0010697:	83 c4 10             	add    esp,0x10
c001069a:	90                   	nop
c001069b:	83 c4 0c             	add    esp,0xc
c001069e:	c3                   	ret    
c001069f:	90                   	nop

c00106a0 <LogicalDisk::~LogicalDisk()>:
c00106a0:	83 ec 0c             	sub    esp,0xc
c00106a3:	83 ec 0c             	sub    esp,0xc
c00106a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106aa:	e8 cd ff ff ff       	call   c001067c <LogicalDisk::~LogicalDisk()>
c00106af:	83 c4 10             	add    esp,0x10
c00106b2:	83 ec 08             	sub    esp,0x8
c00106b5:	68 74 01 00 00       	push   0x174
c00106ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106be:	e8 a3 c8 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c00106c3:	83 c4 10             	add    esp,0x10
c00106c6:	83 c4 0c             	add    esp,0xc
c00106c9:	c3                   	ret    

c00106ca <LogicalDisk::open(int, int, void*)>:
c00106ca:	83 ec 18             	sub    esp,0x18
c00106cd:	68 64 59 02 c0       	push   0xc0025964
c00106d2:	e8 52 4a 00 00       	call   c0015129 <Krnl::panic(char const*)>
c00106d7:	83 c8 ff             	or     eax,0xffffffff
c00106da:	83 c4 1c             	add    esp,0x1c
c00106dd:	c3                   	ret    

c00106de <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00106de:	53                   	push   ebx
c00106df:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00106e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00106eb:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00106f1:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00106f7:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00106fd:	77 10                	ja     c001070f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00106ff:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0010705:	89 d3                	mov    ebx,edx
c0010707:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001070d:	72 05                	jb     c0010714 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001070f:	83 c8 ff             	or     eax,0xffffffff
c0010712:	89 c2                	mov    edx,eax
c0010714:	5b                   	pop    ebx
c0010715:	c3                   	ret    

c0010716 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0010716:	56                   	push   esi
c0010717:	83 c8 ff             	or     eax,0xffffffff
c001071a:	53                   	push   ebx
c001071b:	89 c2                	mov    edx,eax
c001071d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010721:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0010725:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010729:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001072f:	77 27                	ja     c0010758 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0010731:	89 d8                	mov    eax,ebx
c0010733:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0010739:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001073f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010744:	89 c2                	mov    edx,eax
c0010746:	73 10                	jae    c0010758 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0010748:	89 c8                	mov    eax,ecx
c001074a:	89 da                	mov    edx,ebx
c001074c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0010752:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0010758:	5b                   	pop    ebx
c0010759:	5e                   	pop    esi
c001075a:	c3                   	ret    
c001075b:	90                   	nop

c001075c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001075c:	83 ec 1c             	sub    esp,0x1c
c001075f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010763:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010767:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001076b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001076f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010773:	89 04 24             	mov    DWORD PTR [esp],eax
c0010776:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001077a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001077e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010782:	83 ec 08             	sub    esp,0x8
c0010785:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010789:	50                   	push   eax
c001078a:	e8 2f e0 ff ff       	call   c000e7be <Device::Device(char const*)>
c001078f:	83 c4 10             	add    esp,0x10
c0010792:	ba 08 5a 02 c0       	mov    edx,0xc0025a08
c0010797:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001079b:	89 10                	mov    DWORD PTR [eax],edx
c001079d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00107a1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00107a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00107ac:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00107b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00107b7:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00107c1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00107c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00107c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00107cd:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00107d3:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00107d9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00107dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00107e0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00107e4:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00107ea:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00107f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00107f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00107f8:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00107fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010802:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001080c:	90                   	nop
c001080d:	83 c4 1c             	add    esp,0x1c
c0010810:	c3                   	ret    
c0010811:	90                   	nop

c0010812 <LogicalDisk::assignDriveLetter()>:
c0010812:	55                   	push   ebp
c0010813:	57                   	push   edi
c0010814:	56                   	push   esi
c0010815:	53                   	push   ebx
c0010816:	83 ec 14             	sub    esp,0x14
c0010819:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001081d:	8b 3d 80 8f 02 c0    	mov    edi,DWORD PTR ds:0xc0028f80
c0010823:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0010829:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001082d:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0010833:	8b 3d 84 8f 02 c0    	mov    edi,DWORD PTR ds:0xc0028f84
c0010839:	3c 01                	cmp    al,0x1
c001083b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001083f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010843:	19 c0                	sbb    eax,eax
c0010845:	83 e0 02             	and    eax,0x2
c0010848:	83 c0 41             	add    eax,0x41
c001084b:	0f be e8             	movsx  ebp,al
c001084e:	3c 43                	cmp    al,0x43
c0010850:	75 10                	jne    c0010862 <LogicalDisk::assignDriveLetter()+0x50>
c0010852:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0010859:	75 5d                	jne    c00108b8 <LogicalDisk::assignDriveLetter()+0xa6>
c001085b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0010860:	75 56                	jne    c00108b8 <LogicalDisk::assignDriveLetter()+0xa6>
c0010862:	8d 75 bf             	lea    esi,[ebp-0x41]
c0010865:	ba 01 00 00 00       	mov    edx,0x1
c001086a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001086e:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0010872:	d3 e2                	shl    edx,cl
c0010874:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010878:	89 d7                	mov    edi,edx
c001087a:	89 d6                	mov    esi,edx
c001087c:	c1 ff 1f             	sar    edi,0x1f
c001087f:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0010883:	21 f9                	and    ecx,edi
c0010885:	09 d1                	or     ecx,edx
c0010887:	75 2f                	jne    c00108b8 <LogicalDisk::assignDriveLetter()+0xa6>
c0010889:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001088d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010891:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0010897:	09 f2                	or     edx,esi
c0010899:	89 15 80 8f 02 c0    	mov    DWORD PTR ds:0xc0028f80,edx
c001089f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108a3:	09 fa                	or     edx,edi
c00108a5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00108a9:	89 15 84 8f 02 c0    	mov    DWORD PTR ds:0xc0028f84,edx
c00108af:	89 1c bd a0 8f 02 c0 	mov    DWORD PTR [edi*4-0x3ffd7060],ebx
c00108b6:	eb 08                	jmp    c00108c0 <LogicalDisk::assignDriveLetter()+0xae>
c00108b8:	45                   	inc    ebp
c00108b9:	40                   	inc    eax
c00108ba:	3c 5b                	cmp    al,0x5b
c00108bc:	75 90                	jne    c001084e <LogicalDisk::assignDriveLetter()+0x3c>
c00108be:	31 c0                	xor    eax,eax
c00108c0:	83 c4 14             	add    esp,0x14
c00108c3:	5b                   	pop    ebx
c00108c4:	5e                   	pop    esi
c00108c5:	5f                   	pop    edi
c00108c6:	5d                   	pop    ebp
c00108c7:	c3                   	ret    

c00108c8 <LogicalDisk::mount()>:
c00108c8:	56                   	push   esi
c00108c9:	53                   	push   ebx
c00108ca:	83 ec 1c             	sub    esp,0x1c
c00108cd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00108d1:	8b 1d 14 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b14
c00108d7:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00108de:	50                   	push   eax
c00108df:	68 88 59 02 c0       	push   0xc0025988
c00108e4:	e8 5e c7 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00108e9:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00108f3:	83 c4 10             	add    esp,0x10
c00108f6:	85 db                	test   ebx,ebx
c00108f8:	74 4e                	je     c0010948 <LogicalDisk::mount()+0x80>
c00108fa:	83 ec 0c             	sub    esp,0xc
c00108fd:	68 a9 59 02 c0       	push   0xc00259a9
c0010902:	e8 40 c7 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0010907:	83 c4 0c             	add    esp,0xc
c001090a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0010911:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010913:	83 e8 41             	sub    eax,0x41
c0010916:	50                   	push   eax
c0010917:	56                   	push   esi
c0010918:	53                   	push   ebx
c0010919:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001091c:	83 c4 10             	add    esp,0x10
c001091f:	84 c0                	test   al,al
c0010921:	74 20                	je     c0010943 <LogicalDisk::mount()+0x7b>
c0010923:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0010927:	83 ec 0c             	sub    esp,0xc
c001092a:	68 c5 59 02 c0       	push   0xc00259c5
c001092f:	e8 13 c7 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0010934:	83 c4 10             	add    esp,0x10
c0010937:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001093d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010941:	eb 07                	jmp    c001094a <LogicalDisk::mount()+0x82>
c0010943:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010946:	eb ae                	jmp    c00108f6 <LogicalDisk::mount()+0x2e>
c0010948:	31 c0                	xor    eax,eax
c001094a:	83 c4 14             	add    esp,0x14
c001094d:	5b                   	pop    ebx
c001094e:	5e                   	pop    esi
c001094f:	c3                   	ret    

c0010950 <LogicalDisk::unmount()>:
c0010950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010954:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001095e:	c3                   	ret    
c001095f:	90                   	nop

c0010960 <LogicalDisk::eject()>:
c0010960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010964:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001096a:	8b 10                	mov    edx,DWORD PTR [eax]
c001096c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010970:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0010973:	90                   	nop

c0010974 <LogicalDisk::unassignDriveLetter()>:
c0010974:	57                   	push   edi
c0010975:	56                   	push   esi
c0010976:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001097a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0010981:	84 c9                	test   cl,cl
c0010983:	75 0f                	jne    c0010994 <LogicalDisk::unassignDriveLetter()+0x20>
c0010985:	c7 44 24 0c de 59 02 c0 	mov    DWORD PTR [esp+0xc],0xc00259de
c001098d:	5e                   	pop    esi
c001098e:	5f                   	pop    edi
c001098f:	e9 95 47 00 00       	jmp    c0015129 <Krnl::panic(char const*)>
c0010994:	83 e9 41             	sub    ecx,0x41
c0010997:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001099e:	b8 01 00 00 00       	mov    eax,0x1
c00109a3:	c7 04 8d a0 8f 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7060],0x0
c00109ae:	d3 e0                	shl    eax,cl
c00109b0:	89 c7                	mov    edi,eax
c00109b2:	f7 d0                	not    eax
c00109b4:	c1 ff 1f             	sar    edi,0x1f
c00109b7:	21 05 80 8f 02 c0    	and    DWORD PTR ds:0xc0028f80,eax
c00109bd:	89 fe                	mov    esi,edi
c00109bf:	f7 d6                	not    esi
c00109c1:	21 35 84 8f 02 c0    	and    DWORD PTR ds:0xc0028f84,esi
c00109c7:	5e                   	pop    esi
c00109c8:	5f                   	pop    edi
c00109c9:	c3                   	ret    

c00109ca <LogicalDisk::read(unsigned long long, int, void*)>:
c00109ca:	57                   	push   edi
c00109cb:	56                   	push   esi
c00109cc:	53                   	push   ebx
c00109cd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00109d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00109d5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00109d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00109dd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00109e3:	77 41                	ja     c0010a26 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00109e5:	99                   	cdq    
c00109e6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00109ec:	01 c8                	add    eax,ecx
c00109ee:	11 da                	adc    edx,ebx
c00109f0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00109f6:	19 d7                	sbb    edi,edx
c00109f8:	72 33                	jb     c0010a2d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00109fa:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010a00:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010a06:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010a0a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010a0e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010a14:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010a1e:	5b                   	pop    ebx
c0010a1f:	5e                   	pop    esi
c0010a20:	5f                   	pop    edi
c0010a21:	e9 f4 0a 00 00       	jmp    c001151a <VCache::read(unsigned long long, int, void*)>
c0010a26:	b8 05 00 00 00       	mov    eax,0x5
c0010a2b:	eb 05                	jmp    c0010a32 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0010a2d:	b8 07 00 00 00       	mov    eax,0x7
c0010a32:	5b                   	pop    ebx
c0010a33:	5e                   	pop    esi
c0010a34:	5f                   	pop    edi
c0010a35:	c3                   	ret    

c0010a36 <LogicalDisk::write(unsigned long long, int, void*)>:
c0010a36:	57                   	push   edi
c0010a37:	56                   	push   esi
c0010a38:	53                   	push   ebx
c0010a39:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010a3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010a41:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010a45:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a49:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010a4f:	77 41                	ja     c0010a92 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0010a51:	99                   	cdq    
c0010a52:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010a58:	01 c8                	add    eax,ecx
c0010a5a:	11 da                	adc    edx,ebx
c0010a5c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010a62:	19 d7                	sbb    edi,edx
c0010a64:	72 33                	jb     c0010a99 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0010a66:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010a6c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010a72:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010a76:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010a7a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010a80:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010a86:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010a8a:	5b                   	pop    ebx
c0010a8b:	5e                   	pop    esi
c0010a8c:	5f                   	pop    edi
c0010a8d:	e9 8e 09 00 00       	jmp    c0011420 <VCache::write(unsigned long long, int, void*)>
c0010a92:	b8 05 00 00 00       	mov    eax,0x5
c0010a97:	eb 05                	jmp    c0010a9e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0010a99:	b8 07 00 00 00       	mov    eax,0x7
c0010a9e:	5b                   	pop    ebx
c0010a9f:	5e                   	pop    esi
c0010aa0:	5f                   	pop    edi
c0010aa1:	c3                   	ret    
c0010aa2:	66 90                	xchg   ax,ax

c0010aa4 <Mouse::Mouse(char const*)>:
c0010aa4:	83 ec 0c             	sub    esp,0xc
c0010aa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aab:	83 ec 08             	sub    esp,0x8
c0010aae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ab2:	50                   	push   eax
c0010ab3:	e8 06 dd ff ff       	call   c000e7be <Device::Device(char const*)>
c0010ab8:	83 c4 10             	add    esp,0x10
c0010abb:	ba 34 5a 02 c0       	mov    edx,0xc0025a34
c0010ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ac4:	89 10                	mov    DWORD PTR [eax],edx
c0010ac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aca:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0010ad4:	90                   	nop
c0010ad5:	83 c4 0c             	add    esp,0xc
c0010ad8:	c3                   	ret    
c0010ad9:	90                   	nop
c0010ada:	66 90                	xchg   ax,ax

c0010adc <Mouse::~Mouse()>:
c0010adc:	83 ec 0c             	sub    esp,0xc
c0010adf:	ba 34 5a 02 c0       	mov    edx,0xc0025a34
c0010ae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ae8:	89 10                	mov    DWORD PTR [eax],edx
c0010aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aee:	83 ec 0c             	sub    esp,0xc
c0010af1:	50                   	push   eax
c0010af2:	e8 91 d9 ff ff       	call   c000e488 <Device::~Device()>
c0010af7:	83 c4 10             	add    esp,0x10
c0010afa:	90                   	nop
c0010afb:	83 c4 0c             	add    esp,0xc
c0010afe:	c3                   	ret    
c0010aff:	90                   	nop

c0010b00 <Mouse::~Mouse()>:
c0010b00:	83 ec 0c             	sub    esp,0xc
c0010b03:	83 ec 0c             	sub    esp,0xc
c0010b06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b0a:	e8 cd ff ff ff       	call   c0010adc <Mouse::~Mouse()>
c0010b0f:	83 c4 10             	add    esp,0x10
c0010b12:	83 ec 08             	sub    esp,0x8
c0010b15:	68 58 01 00 00       	push   0x158
c0010b1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b1e:	e8 43 c4 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0010b23:	83 c4 10             	add    esp,0x10
c0010b26:	83 c4 0c             	add    esp,0xc
c0010b29:	c3                   	ret    

c0010b2a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0010b2a:	55                   	push   ebp
c0010b2b:	57                   	push   edi
c0010b2c:	56                   	push   esi
c0010b2d:	53                   	push   ebx
c0010b2e:	81 ec 28 01 00 00    	sub    esp,0x128
c0010b34:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0010b3b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0010b42:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0010b49:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0010b50:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010b54:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010b58:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010b5f:	e8 56 dd ff ff       	call   c000e8ba <Device::getName()>
c0010b64:	5a                   	pop    edx
c0010b65:	59                   	pop    ecx
c0010b66:	50                   	push   eax
c0010b67:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0010b6b:	55                   	push   ebp
c0010b6c:	e8 cf fb fe ff       	call   c0000740 <strcpy>
c0010b71:	5b                   	pop    ebx
c0010b72:	58                   	pop    eax
c0010b73:	68 58 5a 02 c0       	push   0xc0025a58
c0010b78:	55                   	push   ebp
c0010b79:	e8 02 fd fe ff       	call   c0000880 <strcat>
c0010b7e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0010b85:	e8 d1 91 ff ff       	call   c0009d5b <malloc>
c0010b8a:	83 c4 0c             	add    esp,0xc
c0010b8d:	89 c3                	mov    ebx,eax
c0010b8f:	57                   	push   edi
c0010b90:	56                   	push   esi
c0010b91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010b95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010b99:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0010ba0:	55                   	push   ebp
c0010ba1:	50                   	push   eax
c0010ba2:	e8 b5 fb ff ff       	call   c001075c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0010ba7:	83 c4 14             	add    esp,0x14
c0010baa:	53                   	push   ebx
c0010bab:	e8 62 fc ff ff       	call   c0010812 <LogicalDisk::assignDriveLetter()>
c0010bb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bb3:	e8 10 fd ff ff       	call   c00108c8 <LogicalDisk::mount()>
c0010bb8:	58                   	pop    eax
c0010bb9:	5a                   	pop    edx
c0010bba:	53                   	push   ebx
c0010bbb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010bc2:	e8 f3 d9 ff ff       	call   c000e5ba <Device::addChild(Device*)>
c0010bc7:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010bcd:	5b                   	pop    ebx
c0010bce:	5e                   	pop    esi
c0010bcf:	5f                   	pop    edi
c0010bd0:	5d                   	pop    ebp
c0010bd1:	c3                   	ret    

c0010bd2 <createPartitionsForDisk(PhysicalDisk*)>:
c0010bd2:	55                   	push   ebp
c0010bd3:	57                   	push   edi
c0010bd4:	56                   	push   esi
c0010bd5:	53                   	push   ebx
c0010bd6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010bdc:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0010be3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0010be9:	3d 00 02 00 00       	cmp    eax,0x200
c0010bee:	74 27                	je     c0010c17 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0010bf0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0010bf6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0010bfc:	83 ec 10             	sub    esp,0x10
c0010bff:	0f a4 f7 0a          	shld   edi,esi,0xa
c0010c03:	99                   	cdq    
c0010c04:	c1 e6 0a             	shl    esi,0xa
c0010c07:	52                   	push   edx
c0010c08:	89 fd                	mov    ebp,edi
c0010c0a:	50                   	push   eax
c0010c0b:	55                   	push   ebp
c0010c0c:	56                   	push   esi
c0010c0d:	e8 0e 22 01 00       	call   c0022e20 <__udivdi3>
c0010c12:	e9 b1 00 00 00       	jmp    c0010cc8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010c17:	83 ec 0c             	sub    esp,0xc
c0010c1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c1c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0010c20:	56                   	push   esi
c0010c21:	6a 01                	push   0x1
c0010c23:	6a 00                	push   0x0
c0010c25:	6a 00                	push   0x0
c0010c27:	53                   	push   ebx
c0010c28:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0010c2b:	83 c4 20             	add    esp,0x20
c0010c2e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0010c36:	75 0a                	jne    c0010c42 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0010c38:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0010c40:	74 2c                	je     c0010c6e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0010c42:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010c48:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010c4e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010c54:	83 ec 10             	sub    esp,0x10
c0010c57:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010c5b:	89 f7                	mov    edi,esi
c0010c5d:	c1 e0 0a             	shl    eax,0xa
c0010c60:	c1 ff 1f             	sar    edi,0x1f
c0010c63:	57                   	push   edi
c0010c64:	56                   	push   esi
c0010c65:	52                   	push   edx
c0010c66:	50                   	push   eax
c0010c67:	e8 b4 21 01 00       	call   c0022e20 <__udivdi3>
c0010c6c:	eb 5a                	jmp    c0010cc8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010c6e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0010c75:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0010c7c:	83 e1 7f             	and    ecx,0x7f
c0010c7f:	83 e0 7f             	and    eax,0x7f
c0010c82:	01 c1                	add    ecx,eax
c0010c84:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0010c8b:	83 e0 7f             	and    eax,0x7f
c0010c8e:	01 c1                	add    ecx,eax
c0010c90:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0010c97:	83 e0 7f             	and    eax,0x7f
c0010c9a:	00 c1                	add    cl,al
c0010c9c:	74 41                	je     c0010cdf <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0010c9e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010ca4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010caa:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010cb0:	83 ec 10             	sub    esp,0x10
c0010cb3:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010cb7:	89 f7                	mov    edi,esi
c0010cb9:	c1 e0 0a             	shl    eax,0xa
c0010cbc:	c1 ff 1f             	sar    edi,0x1f
c0010cbf:	57                   	push   edi
c0010cc0:	56                   	push   esi
c0010cc1:	52                   	push   edx
c0010cc2:	50                   	push   eax
c0010cc3:	e8 58 21 01 00       	call   c0022e20 <__udivdi3>
c0010cc8:	83 c4 14             	add    esp,0x14
c0010ccb:	52                   	push   edx
c0010ccc:	50                   	push   eax
c0010ccd:	6a 00                	push   0x0
c0010ccf:	6a 00                	push   0x0
c0010cd1:	53                   	push   ebx
c0010cd2:	e8 53 fe ff ff       	call   c0010b2a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010cd7:	83 c4 20             	add    esp,0x20
c0010cda:	e9 79 01 00 00       	jmp    c0010e58 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0010cdf:	89 f0                	mov    eax,esi
c0010ce1:	31 f6                	xor    esi,esi
c0010ce3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0010cea:	75 02                	jne    c0010cee <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0010cec:	89 f1                	mov    ecx,esi
c0010cee:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0010cf5:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0010cfc:	c1 e2 08             	shl    edx,0x8
c0010cff:	c1 e7 10             	shl    edi,0x10
c0010d02:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0010d0a:	09 fa                	or     edx,edi
c0010d0c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0010d14:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0010d1b:	83 c0 10             	add    eax,0x10
c0010d1e:	09 fa                	or     edx,edi
c0010d20:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0010d27:	c1 e7 18             	shl    edi,0x18
c0010d2a:	09 fa                	or     edx,edi
c0010d2c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0010d33:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0010d37:	c1 e7 10             	shl    edi,0x10
c0010d3a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0010d41:	c1 e2 08             	shl    edx,0x8
c0010d44:	09 fa                	or     edx,edi
c0010d46:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0010d4d:	09 fa                	or     edx,edi
c0010d4f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0010d56:	c1 e7 18             	shl    edi,0x18
c0010d59:	09 fa                	or     edx,edi
c0010d5b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0010d5f:	46                   	inc    esi
c0010d60:	83 fe 04             	cmp    esi,0x4
c0010d63:	0f 85 7a ff ff ff    	jne    c0010ce3 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0010d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d6d:	83 f0 01             	xor    eax,0x1
c0010d70:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010d74:	75 57                	jne    c0010dcd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010d76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010d7a:	83 f0 01             	xor    eax,0x1
c0010d7d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0010d81:	75 4a                	jne    c0010dcd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010d83:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010d87:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0010d8f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010d97:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010d9d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010da3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010da9:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010dad:	89 f7                	mov    edi,esi
c0010daf:	c1 e0 0a             	shl    eax,0xa
c0010db2:	c1 ff 1f             	sar    edi,0x1f
c0010db5:	57                   	push   edi
c0010db6:	56                   	push   esi
c0010db7:	52                   	push   edx
c0010db8:	50                   	push   eax
c0010db9:	e8 62 20 01 00       	call   c0022e20 <__udivdi3>
c0010dbe:	83 c4 10             	add    esp,0x10
c0010dc1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010dc5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010dc9:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010dcd:	84 c9                	test   cl,cl
c0010dcf:	74 53                	je     c0010e24 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010dd1:	0f b6 c9             	movzx  ecx,cl
c0010dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dd8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010ddc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010de0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010de4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010de8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010dec:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0010df0:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0010df4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010df8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010dfc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e00:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010e04:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0010e08:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0010e0c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0010e10:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0010e14:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010e18:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010e1c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0010e20:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0010e24:	31 ed                	xor    ebp,ebp
c0010e26:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0010e2a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0010e2e:	89 f8                	mov    eax,edi
c0010e30:	09 f0                	or     eax,esi
c0010e32:	74 1e                	je     c0010e52 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010e34:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0010e38:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0010e3c:	89 d1                	mov    ecx,edx
c0010e3e:	09 c1                	or     ecx,eax
c0010e40:	74 10                	je     c0010e52 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010e42:	83 ec 0c             	sub    esp,0xc
c0010e45:	57                   	push   edi
c0010e46:	56                   	push   esi
c0010e47:	52                   	push   edx
c0010e48:	50                   	push   eax
c0010e49:	53                   	push   ebx
c0010e4a:	e8 db fc ff ff       	call   c0010b2a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010e4f:	83 c4 20             	add    esp,0x20
c0010e52:	45                   	inc    ebp
c0010e53:	83 fd 04             	cmp    ebp,0x4
c0010e56:	75 ce                	jne    c0010e26 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0010e58:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010e5e:	5b                   	pop    ebx
c0010e5f:	5e                   	pop    esi
c0010e60:	5f                   	pop    edi
c0010e61:	5d                   	pop    ebp
c0010e62:	c3                   	ret    
c0010e63:	90                   	nop

c0010e64 <Serial::Serial(char const*)>:
c0010e64:	83 ec 0c             	sub    esp,0xc
c0010e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e6b:	83 ec 08             	sub    esp,0x8
c0010e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e72:	50                   	push   eax
c0010e73:	e8 46 d9 ff ff       	call   c000e7be <Device::Device(char const*)>
c0010e78:	83 c4 10             	add    esp,0x10
c0010e7b:	ba 6c 5a 02 c0       	mov    edx,0xc0025a6c
c0010e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e84:	89 10                	mov    DWORD PTR [eax],edx
c0010e86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e8a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0010e94:	90                   	nop
c0010e95:	83 c4 0c             	add    esp,0xc
c0010e98:	c3                   	ret    
c0010e99:	90                   	nop
c0010e9a:	66 90                	xchg   ax,ax

c0010e9c <Serial::~Serial()>:
c0010e9c:	83 ec 0c             	sub    esp,0xc
c0010e9f:	ba 6c 5a 02 c0       	mov    edx,0xc0025a6c
c0010ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ea8:	89 10                	mov    DWORD PTR [eax],edx
c0010eaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010eae:	83 ec 0c             	sub    esp,0xc
c0010eb1:	50                   	push   eax
c0010eb2:	e8 d1 d5 ff ff       	call   c000e488 <Device::~Device()>
c0010eb7:	83 c4 10             	add    esp,0x10
c0010eba:	90                   	nop
c0010ebb:	83 c4 0c             	add    esp,0xc
c0010ebe:	c3                   	ret    
c0010ebf:	90                   	nop

c0010ec0 <Serial::~Serial()>:
c0010ec0:	83 ec 0c             	sub    esp,0xc
c0010ec3:	83 ec 0c             	sub    esp,0xc
c0010ec6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010eca:	e8 cd ff ff ff       	call   c0010e9c <Serial::~Serial()>
c0010ecf:	83 c4 10             	add    esp,0x10
c0010ed2:	83 ec 08             	sub    esp,0x8
c0010ed5:	68 58 01 00 00       	push   0x158
c0010eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ede:	e8 83 c0 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0010ee3:	83 c4 10             	add    esp,0x10
c0010ee6:	83 c4 0c             	add    esp,0xc
c0010ee9:	c3                   	ret    
c0010eea:	66 90                	xchg   ax,ax

c0010eec <Timer::Timer(char const*)>:
c0010eec:	83 ec 0c             	sub    esp,0xc
c0010eef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ef3:	83 ec 08             	sub    esp,0x8
c0010ef6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010efa:	50                   	push   eax
c0010efb:	e8 be d8 ff ff       	call   c000e7be <Device::Device(char const*)>
c0010f00:	83 c4 10             	add    esp,0x10
c0010f03:	ba b0 5a 02 c0       	mov    edx,0xc0025ab0
c0010f08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f0c:	89 10                	mov    DWORD PTR [eax],edx
c0010f0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f12:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0010f1c:	90                   	nop
c0010f1d:	83 c4 0c             	add    esp,0xc
c0010f20:	c3                   	ret    
c0010f21:	90                   	nop
c0010f22:	66 90                	xchg   ax,ax

c0010f24 <Timer::~Timer()>:
c0010f24:	83 ec 0c             	sub    esp,0xc
c0010f27:	ba b0 5a 02 c0       	mov    edx,0xc0025ab0
c0010f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f30:	89 10                	mov    DWORD PTR [eax],edx
c0010f32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f36:	83 ec 0c             	sub    esp,0xc
c0010f39:	50                   	push   eax
c0010f3a:	e8 49 d5 ff ff       	call   c000e488 <Device::~Device()>
c0010f3f:	83 c4 10             	add    esp,0x10
c0010f42:	90                   	nop
c0010f43:	83 c4 0c             	add    esp,0xc
c0010f46:	c3                   	ret    
c0010f47:	90                   	nop

c0010f48 <Timer::~Timer()>:
c0010f48:	83 ec 0c             	sub    esp,0xc
c0010f4b:	83 ec 0c             	sub    esp,0xc
c0010f4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f52:	e8 cd ff ff ff       	call   c0010f24 <Timer::~Timer()>
c0010f57:	83 c4 10             	add    esp,0x10
c0010f5a:	83 ec 08             	sub    esp,0x8
c0010f5d:	68 5c 01 00 00       	push   0x15c
c0010f62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f66:	e8 fb bf ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0010f6b:	83 c4 10             	add    esp,0x10
c0010f6e:	83 c4 0c             	add    esp,0xc
c0010f71:	c3                   	ret    

c0010f72 <Timer::read()>:
c0010f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f76:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010f7c:	c3                   	ret    

c0010f7d <timerHandler(unsigned int)>:
c0010f7d:	56                   	push   esi
c0010f7e:	53                   	push   ebx
c0010f7f:	51                   	push   ecx
c0010f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f84:	01 05 0c 90 02 c0    	add    DWORD PTR ds:0xc002900c,eax
c0010f8a:	80 3d ed 89 02 c0 00 	cmp    BYTE PTR ds:0xc00289ed,0x0
c0010f91:	0f 84 49 01 00 00    	je     c00110e0 <timerHandler(unsigned int)+0x163>
c0010f97:	fa                   	cli    
c0010f98:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c0010f9e:	83 ec 0c             	sub    esp,0xc
c0010fa1:	ff 05 04 9f 02 c0    	inc    DWORD PTR ds:0xc0029f04
c0010fa7:	68 18 9f 02 c0       	push   0xc0029f18
c0010fac:	e8 3f 24 01 00       	call   c00233f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010fb1:	83 c4 10             	add    esp,0x10
c0010fb4:	84 c0                	test   al,al
c0010fb6:	0f 85 a0 00 00 00    	jne    c001105c <timerHandler(unsigned int)+0xdf>
c0010fbc:	83 ec 0c             	sub    esp,0xc
c0010fbf:	68 18 9f 02 c0       	push   0xc0029f18
c0010fc4:	e8 43 24 01 00       	call   c002340c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010fc9:	83 c4 10             	add    esp,0x10
c0010fcc:	89 c6                	mov    esi,eax
c0010fce:	66 90                	xchg   ax,ax
c0010fd0:	83 ec 0c             	sub    esp,0xc
c0010fd3:	68 18 9f 02 c0       	push   0xc0029f18
c0010fd8:	e8 2f 24 01 00       	call   c002340c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010fdd:	c7 04 24 18 9f 02 c0 	mov    DWORD PTR [esp],0xc0029f18
c0010fe4:	89 c3                	mov    ebx,eax
c0010fe6:	e8 29 24 01 00       	call   c0023414 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0010feb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010fee:	83 c4 10             	add    esp,0x10
c0010ff1:	3b 05 0c 90 02 c0    	cmp    eax,DWORD PTR ds:0xc002900c
c0010ff7:	77 23                	ja     c001101c <timerHandler(unsigned int)+0x9f>
c0010ff9:	83 ec 0c             	sub    esp,0xc
c0010ffc:	53                   	push   ebx
c0010ffd:	e8 ee 81 00 00       	call   c00191f0 <unblockTask(ThreadControlBlock*)>
c0011002:	83 c4 10             	add    esp,0x10
c0011005:	39 de                	cmp    esi,ebx
c0011007:	75 27                	jne    c0011030 <timerHandler(unsigned int)+0xb3>
c0011009:	83 ec 0c             	sub    esp,0xc
c001100c:	68 18 9f 02 c0       	push   0xc0029f18
c0011011:	e8 f6 23 01 00       	call   c002340c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0011016:	89 c6                	mov    esi,eax
c0011018:	eb 12                	jmp    c001102c <timerHandler(unsigned int)+0xaf>
c001101a:	66 90                	xchg   ax,ax
c001101c:	52                   	push   edx
c001101d:	52                   	push   edx
c001101e:	53                   	push   ebx
c001101f:	68 18 9f 02 c0       	push   0xc0029f18
c0011024:	e8 a3 24 01 00       	call   c00234cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0011029:	8d 76 00             	lea    esi,[esi+0x0]
c001102c:	83 c4 10             	add    esp,0x10
c001102f:	90                   	nop
c0011030:	83 ec 0c             	sub    esp,0xc
c0011033:	68 18 9f 02 c0       	push   0xc0029f18
c0011038:	e8 b3 23 01 00       	call   c00233f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001103d:	83 c4 10             	add    esp,0x10
c0011040:	84 c0                	test   al,al
c0011042:	75 18                	jne    c001105c <timerHandler(unsigned int)+0xdf>
c0011044:	83 ec 0c             	sub    esp,0xc
c0011047:	68 18 9f 02 c0       	push   0xc0029f18
c001104c:	e8 bb 23 01 00       	call   c002340c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0011051:	83 c4 10             	add    esp,0x10
c0011054:	39 f0                	cmp    eax,esi
c0011056:	0f 85 74 ff ff ff    	jne    c0010fd0 <timerHandler(unsigned int)+0x53>
c001105c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011061:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0011065:	74 41                	je     c00110a8 <timerHandler(unsigned int)+0x12b>
c0011067:	80 3d ec 89 02 c0 00 	cmp    BYTE PTR ds:0xc00289ec,0x0
c001106e:	74 38                	je     c00110a8 <timerHandler(unsigned int)+0x12b>
c0011070:	fa                   	cli    
c0011071:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c0011077:	a1 0c 90 02 c0       	mov    eax,ds:0xc002900c
c001107c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011082:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0011085:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001108b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c001108e:	72 08                	jb     c0011098 <timerHandler(unsigned int)+0x11b>
c0011090:	e8 9f 7c 00 00       	call   c0018d34 <schedule()>
c0011095:	8d 76 00             	lea    esi,[esi+0x0]
c0011098:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c001109d:	48                   	dec    eax
c001109e:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c00110a3:	75 03                	jne    c00110a8 <timerHandler(unsigned int)+0x12b>
c00110a5:	fb                   	sti    
c00110a6:	66 90                	xchg   ax,ax
c00110a8:	a1 04 9f 02 c0       	mov    eax,ds:0xc0029f04
c00110ad:	48                   	dec    eax
c00110ae:	a3 04 9f 02 c0       	mov    ds:0xc0029f04,eax
c00110b3:	75 1b                	jne    c00110d0 <timerHandler(unsigned int)+0x153>
c00110b5:	83 3d 00 9f 02 c0 00 	cmp    DWORD PTR ds:0xc0029f00,0x0
c00110bc:	74 12                	je     c00110d0 <timerHandler(unsigned int)+0x153>
c00110be:	c7 05 00 9f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029f00,0x0
c00110c8:	e8 67 7c 00 00       	call   c0018d34 <schedule()>
c00110cd:	8d 76 00             	lea    esi,[esi+0x0]
c00110d0:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c00110d5:	48                   	dec    eax
c00110d6:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c00110db:	75 03                	jne    c00110e0 <timerHandler(unsigned int)+0x163>
c00110dd:	fb                   	sti    
c00110de:	66 90                	xchg   ax,ax
c00110e0:	58                   	pop    eax
c00110e1:	5b                   	pop    ebx
c00110e2:	5e                   	pop    esi
c00110e3:	c3                   	ret    

c00110e4 <setupTimer(int)>:
c00110e4:	57                   	push   edi
c00110e5:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c00110ea:	56                   	push   esi
c00110eb:	53                   	push   ebx
c00110ec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00110f0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00110f6:	83 ec 0c             	sub    esp,0xc
c00110f9:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00110ff:	e8 b6 d7 ff ff       	call   c000e8ba <Device::getName()>
c0011104:	83 c4 10             	add    esp,0x10
c0011107:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001110a:	0f 85 94 00 00 00    	jne    c00111a4 <setupTimer(int)+0xc0>
c0011110:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0011115:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001111c:	0f 84 82 00 00 00    	je     c00111a4 <setupTimer(int)+0xc0>
c0011122:	83 ec 0c             	sub    esp,0xc
c0011125:	68 5c 01 00 00       	push   0x15c
c001112a:	e8 2c 8c ff ff       	call   c0009d5b <malloc>
c001112f:	89 04 24             	mov    DWORD PTR [esp],eax
c0011132:	89 c3                	mov    ebx,eax
c0011134:	e8 57 18 01 00       	call   c0022990 <PIT::PIT()>
c0011139:	59                   	pop    ecx
c001113a:	5f                   	pop    edi
c001113b:	53                   	push   ebx
c001113c:	ff 35 e8 89 02 c0    	push   DWORD PTR ds:0xc00289e8
c0011142:	e8 73 d4 ff ff       	call   c000e5ba <Device::addChild(Device*)>
c0011147:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011149:	6a 00                	push   0x0
c001114b:	6a 00                	push   0x0
c001114d:	56                   	push   esi
c001114e:	53                   	push   ebx
c001114f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011152:	83 c4 14             	add    esp,0x14
c0011155:	68 60 01 00 00       	push   0x160
c001115a:	e8 fc 8b ff ff       	call   c0009d5b <malloc>
c001115f:	89 04 24             	mov    DWORD PTR [esp],eax
c0011162:	89 c7                	mov    edi,eax
c0011164:	e8 db 16 01 00       	call   c0022844 <APICTimer::APICTimer()>
c0011169:	6a 00                	push   0x0
c001116b:	6a 00                	push   0x0
c001116d:	56                   	push   esi
c001116e:	57                   	push   edi
c001116f:	e8 d0 15 01 00       	call   c0022744 <APICTimer::open(int, int, void*)>
c0011174:	83 c4 20             	add    esp,0x20
c0011177:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011179:	6a 00                	push   0x0
c001117b:	6a 00                	push   0x0
c001117d:	6a 00                	push   0x0
c001117f:	53                   	push   ebx
c0011180:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011183:	58                   	pop    eax
c0011184:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0011189:	5a                   	pop    edx
c001118a:	57                   	push   edi
c001118b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011191:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0011197:	e8 1e d4 ff ff       	call   c000e5ba <Device::addChild(Device*)>
c001119c:	83 c4 10             	add    esp,0x10
c001119f:	eb 37                	jmp    c00111d8 <setupTimer(int)+0xf4>
c00111a1:	8d 76 00             	lea    esi,[esi+0x0]
c00111a4:	83 ec 0c             	sub    esp,0xc
c00111a7:	68 5c 01 00 00       	push   0x15c
c00111ac:	e8 aa 8b ff ff       	call   c0009d5b <malloc>
c00111b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00111b4:	89 c3                	mov    ebx,eax
c00111b6:	e8 d5 17 01 00       	call   c0022990 <PIT::PIT()>
c00111bb:	58                   	pop    eax
c00111bc:	5a                   	pop    edx
c00111bd:	53                   	push   ebx
c00111be:	ff 35 e8 89 02 c0    	push   DWORD PTR ds:0xc00289e8
c00111c4:	e8 f1 d3 ff ff       	call   c000e5ba <Device::addChild(Device*)>
c00111c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111cb:	6a 00                	push   0x0
c00111cd:	6a 00                	push   0x0
c00111cf:	56                   	push   esi
c00111d0:	53                   	push   ebx
c00111d1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00111d4:	83 c4 20             	add    esp,0x20
c00111d7:	90                   	nop
c00111d8:	89 d8                	mov    eax,ebx
c00111da:	5b                   	pop    ebx
c00111db:	5e                   	pop    esi
c00111dc:	5f                   	pop    edi
c00111dd:	c3                   	ret    
c00111de:	66 90                	xchg   ax,ax

c00111e0 <VCache::VCache(PhysicalDisk*)>:
c00111e0:	53                   	push   ebx
c00111e1:	83 ec 18             	sub    esp,0x18
c00111e4:	ba e0 5a 02 c0       	mov    edx,0xc0025ae0
c00111e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111ed:	89 10                	mov    DWORD PTR [eax],edx
c00111ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111f3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00111fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111fe:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0011205:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011209:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0011210:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0011217:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001121b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0011222:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0011229:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001122d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0011234:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011238:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001123c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011240:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0011247:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001124e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011252:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0011256:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001125a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001125e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011262:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0011266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001126a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0011271:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0011279:	83 ec 0c             	sub    esp,0xc
c001127c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011280:	e8 d6 8a ff ff       	call   c0009d5b <malloc>
c0011285:	83 c4 10             	add    esp,0x10
c0011288:	89 c3                	mov    ebx,eax
c001128a:	83 ec 0c             	sub    esp,0xc
c001128d:	53                   	push   ebx
c001128e:	e8 71 78 00 00       	call   c0018b04 <Mutex::Mutex()>
c0011293:	83 c4 10             	add    esp,0x10
c0011296:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001129a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001129d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112a1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00112a5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00112a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112ac:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00112b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00112b7:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00112bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00112c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00112c8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00112ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00112d4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00112d8:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00112db:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00112de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112e2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00112e6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00112ea:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00112f0:	05 00 01 00 00       	add    eax,0x100
c00112f5:	c1 e0 04             	shl    eax,0x4
c00112f8:	83 ec 0c             	sub    esp,0xc
c00112fb:	50                   	push   eax
c00112fc:	e8 5a 8a ff ff       	call   c0009d5b <malloc>
c0011301:	83 c4 10             	add    esp,0x10
c0011304:	89 c2                	mov    edx,eax
c0011306:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001130a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001130d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011311:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0011318:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001131c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0011320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011324:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001132a:	c1 e0 06             	shl    eax,0x6
c001132d:	83 ec 0c             	sub    esp,0xc
c0011330:	50                   	push   eax
c0011331:	e8 25 8a ff ff       	call   c0009d5b <malloc>
c0011336:	83 c4 10             	add    esp,0x10
c0011339:	89 c2                	mov    edx,eax
c001133b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001133f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0011342:	90                   	nop
c0011343:	83 c4 18             	add    esp,0x18
c0011346:	5b                   	pop    ebx
c0011347:	c3                   	ret    

c0011348 <VCache::invalidateReadBuffer()>:
c0011348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001134c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0011352:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0011356:	c3                   	ret    
c0011357:	90                   	nop

c0011358 <VCache::writeWriteBuffer()>:
c0011358:	53                   	push   ebx
c0011359:	83 ec 08             	sub    esp,0x8
c001135c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011360:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0011364:	74 1e                	je     c0011384 <VCache::writeWriteBuffer()+0x2c>
c0011366:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011369:	83 ec 0c             	sub    esp,0xc
c001136c:	8b 10                	mov    edx,DWORD PTR [eax]
c001136e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011371:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011374:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011377:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001137a:	50                   	push   eax
c001137b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001137e:	83 c4 20             	add    esp,0x20
c0011381:	8d 76 00             	lea    esi,[esi+0x0]
c0011384:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001138b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0011392:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0011396:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001139d:	83 c4 08             	add    esp,0x8
c00113a0:	5b                   	pop    ebx
c00113a1:	c3                   	ret    
c00113a2:	66 90                	xchg   ax,ax

c00113a4 <VCache::~VCache()>:
c00113a4:	83 ec 0c             	sub    esp,0xc
c00113a7:	ba e0 5a 02 c0       	mov    edx,0xc0025ae0
c00113ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113b0:	89 10                	mov    DWORD PTR [eax],edx
c00113b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113b6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00113b9:	84 c0                	test   al,al
c00113bb:	74 0f                	je     c00113cc <VCache::~VCache()+0x28>
c00113bd:	83 ec 0c             	sub    esp,0xc
c00113c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113c4:	e8 8f ff ff ff       	call   c0011358 <VCache::writeWriteBuffer()>
c00113c9:	83 c4 10             	add    esp,0x10
c00113cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113d0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00113d3:	83 ec 0c             	sub    esp,0xc
c00113d6:	50                   	push   eax
c00113d7:	e8 8f 89 ff ff       	call   c0009d6b <free>
c00113dc:	83 c4 10             	add    esp,0x10
c00113df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113e3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00113e6:	83 ec 0c             	sub    esp,0xc
c00113e9:	50                   	push   eax
c00113ea:	e8 7c 89 ff ff       	call   c0009d6b <free>
c00113ef:	83 c4 10             	add    esp,0x10
c00113f2:	90                   	nop
c00113f3:	83 c4 0c             	add    esp,0xc
c00113f6:	c3                   	ret    
c00113f7:	90                   	nop

c00113f8 <VCache::~VCache()>:
c00113f8:	83 ec 0c             	sub    esp,0xc
c00113fb:	83 ec 0c             	sub    esp,0xc
c00113fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011402:	e8 9d ff ff ff       	call   c00113a4 <VCache::~VCache()>
c0011407:	83 c4 10             	add    esp,0x10
c001140a:	83 ec 08             	sub    esp,0x8
c001140d:	6a 44                	push   0x44
c001140f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011413:	e8 4e bb ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0011418:	83 c4 10             	add    esp,0x10
c001141b:	83 c4 0c             	add    esp,0xc
c001141e:	c3                   	ret    
c001141f:	90                   	nop

c0011420 <VCache::write(unsigned long long, int, void*)>:
c0011420:	55                   	push   ebp
c0011421:	31 c0                	xor    eax,eax
c0011423:	57                   	push   edi
c0011424:	56                   	push   esi
c0011425:	53                   	push   ebx
c0011426:	83 ec 0c             	sub    esp,0xc
c0011429:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001142d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0011431:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011435:	8d 76 00             	lea    esi,[esi+0x0]
c0011438:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001143c:	7d 1a                	jge    c0011458 <VCache::write(unsigned long long, int, void*)+0x38>
c001143e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0011441:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0011447:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001144b:	0f af c8             	imul   ecx,eax
c001144e:	01 ca                	add    edx,ecx
c0011450:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0011452:	40                   	inc    eax
c0011453:	eb e3                	jmp    c0011438 <VCache::write(unsigned long long, int, void*)+0x18>
c0011455:	8d 76 00             	lea    esi,[esi+0x0]
c0011458:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001145c:	74 0a                	je     c0011468 <VCache::write(unsigned long long, int, void*)+0x48>
c001145e:	53                   	push   ebx
c001145f:	e8 e4 fe ff ff       	call   c0011348 <VCache::invalidateReadBuffer()>
c0011464:	58                   	pop    eax
c0011465:	8d 76 00             	lea    esi,[esi+0x0]
c0011468:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001146c:	74 5e                	je     c00114cc <VCache::write(unsigned long long, int, void*)+0xac>
c001146e:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0011471:	89 e8                	mov    eax,ebp
c0011473:	99                   	cdq    
c0011474:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0011477:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001147a:	89 c1                	mov    ecx,eax
c001147c:	89 d0                	mov    eax,edx
c001147e:	31 f1                	xor    ecx,esi
c0011480:	31 f8                	xor    eax,edi
c0011482:	09 c1                	or     ecx,eax
c0011484:	75 3a                	jne    c00114c0 <VCache::write(unsigned long long, int, void*)+0xa0>
c0011486:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001148b:	75 33                	jne    c00114c0 <VCache::write(unsigned long long, int, void*)+0xa0>
c001148d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011490:	89 ef                	mov    edi,ebp
c0011492:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011498:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001149c:	0f af f9             	imul   edi,ecx
c001149f:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c00114a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00114a4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00114a7:	40                   	inc    eax
c00114a8:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00114ab:	83 f8 40             	cmp    eax,0x40
c00114ae:	75 60                	jne    c0011510 <VCache::write(unsigned long long, int, void*)+0xf0>
c00114b0:	83 ec 0c             	sub    esp,0xc
c00114b3:	53                   	push   ebx
c00114b4:	e8 9f fe ff ff       	call   c0011358 <VCache::writeWriteBuffer()>
c00114b9:	83 c4 10             	add    esp,0x10
c00114bc:	eb 52                	jmp    c0011510 <VCache::write(unsigned long long, int, void*)+0xf0>
c00114be:	66 90                	xchg   ax,ax
c00114c0:	83 ec 0c             	sub    esp,0xc
c00114c3:	53                   	push   ebx
c00114c4:	e8 8f fe ff ff       	call   c0011358 <VCache::writeWriteBuffer()>
c00114c9:	83 c4 10             	add    esp,0x10
c00114cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00114cf:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c00114d4:	7f 22                	jg     c00114f8 <VCache::write(unsigned long long, int, void*)+0xd8>
c00114d6:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00114d9:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00114dc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00114e0:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00114e4:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c00114e7:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c00114ea:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00114f0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00114f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00114f6:	eb 18                	jmp    c0011510 <VCache::write(unsigned long long, int, void*)+0xf0>
c00114f8:	83 ec 0c             	sub    esp,0xc
c00114fb:	8b 10                	mov    edx,DWORD PTR [eax]
c00114fd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011501:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011505:	57                   	push   edi
c0011506:	56                   	push   esi
c0011507:	50                   	push   eax
c0011508:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001150b:	83 c4 20             	add    esp,0x20
c001150e:	66 90                	xchg   ax,ax
c0011510:	83 c4 0c             	add    esp,0xc
c0011513:	31 c0                	xor    eax,eax
c0011515:	5b                   	pop    ebx
c0011516:	5e                   	pop    esi
c0011517:	5f                   	pop    edi
c0011518:	5d                   	pop    ebp
c0011519:	c3                   	ret    

c001151a <VCache::read(unsigned long long, int, void*)>:
c001151a:	55                   	push   ebp
c001151b:	31 c0                	xor    eax,eax
c001151d:	57                   	push   edi
c001151e:	56                   	push   esi
c001151f:	53                   	push   ebx
c0011520:	83 ec 1c             	sub    esp,0x1c
c0011523:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0011527:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001152b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001152f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0011533:	90                   	nop
c0011534:	39 e8                	cmp    eax,ebp
c0011536:	7d 18                	jge    c0011550 <VCache::read(unsigned long long, int, void*)+0x36>
c0011538:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c001153b:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0011541:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011545:	0f af c8             	imul   ecx,eax
c0011548:	01 ca                	add    edx,ecx
c001154a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001154c:	40                   	inc    eax
c001154d:	eb e5                	jmp    c0011534 <VCache::read(unsigned long long, int, void*)+0x1a>
c001154f:	90                   	nop
c0011550:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0011554:	74 0e                	je     c0011564 <VCache::read(unsigned long long, int, void*)+0x4a>
c0011556:	83 ec 0c             	sub    esp,0xc
c0011559:	53                   	push   ebx
c001155a:	e8 f9 fd ff ff       	call   c0011358 <VCache::writeWriteBuffer()>
c001155f:	83 c4 10             	add    esp,0x10
c0011562:	66 90                	xchg   ax,ax
c0011564:	83 fd 01             	cmp    ebp,0x1
c0011567:	0f 85 87 00 00 00    	jne    c00115f4 <VCache::read(unsigned long long, int, void*)+0xda>
c001156d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011570:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011574:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001157b:	75 77                	jne    c00115f4 <VCache::read(unsigned long long, int, void*)+0xda>
c001157d:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0011580:	89 e9                	mov    ecx,ebp
c0011582:	f7 d9                	neg    ecx
c0011584:	89 c8                	mov    eax,ecx
c0011586:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001158a:	c1 f8 1f             	sar    eax,0x1f
c001158d:	21 f1                	and    ecx,esi
c001158f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011593:	89 c8                	mov    eax,ecx
c0011595:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011599:	21 f9                	and    ecx,edi
c001159b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001159f:	89 ca                	mov    edx,ecx
c00115a1:	74 0d                	je     c00115b0 <VCache::read(unsigned long long, int, void*)+0x96>
c00115a3:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00115a6:	75 08                	jne    c00115b0 <VCache::read(unsigned long long, int, void*)+0x96>
c00115a8:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c00115ab:	74 27                	je     c00115d4 <VCache::read(unsigned long long, int, void*)+0xba>
c00115ad:	8d 76 00             	lea    esi,[esi+0x0]
c00115b0:	83 ec 0c             	sub    esp,0xc
c00115b3:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00115b7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00115bb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00115be:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00115c1:	8b 09                	mov    ecx,DWORD PTR [ecx]
c00115c3:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00115c6:	55                   	push   ebp
c00115c7:	52                   	push   edx
c00115c8:	50                   	push   eax
c00115c9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00115cd:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00115d0:	83 c4 20             	add    esp,0x20
c00115d3:	90                   	nop
c00115d4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00115d7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00115db:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00115e1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00115e4:	48                   	dec    eax
c00115e5:	21 c6                	and    esi,eax
c00115e7:	0f af f1             	imul   esi,ecx
c00115ea:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c00115ed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00115ef:	eb 23                	jmp    c0011614 <VCache::read(unsigned long long, int, void*)+0xfa>
c00115f1:	8d 76 00             	lea    esi,[esi+0x0]
c00115f4:	83 ec 0c             	sub    esp,0xc
c00115f7:	53                   	push   ebx
c00115f8:	e8 4b fd ff ff       	call   c0011348 <VCache::invalidateReadBuffer()>
c00115fd:	5a                   	pop    edx
c00115fe:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011601:	8b 10                	mov    edx,DWORD PTR [eax]
c0011603:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011607:	55                   	push   ebp
c0011608:	57                   	push   edi
c0011609:	56                   	push   esi
c001160a:	50                   	push   eax
c001160b:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001160e:	83 c4 20             	add    esp,0x20
c0011611:	8d 76 00             	lea    esi,[esi+0x0]
c0011614:	83 c4 1c             	add    esp,0x1c
c0011617:	31 c0                	xor    eax,eax
c0011619:	5b                   	pop    ebx
c001161a:	5e                   	pop    esi
c001161b:	5f                   	pop    edi
c001161c:	5d                   	pop    ebp
c001161d:	c3                   	ret    

c001161e <Video::putrect(int, int, int, int, unsigned int)>:
c001161e:	55                   	push   ebp
c001161f:	57                   	push   edi
c0011620:	56                   	push   esi
c0011621:	53                   	push   ebx
c0011622:	83 ec 1c             	sub    esp,0x1c
c0011625:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011629:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001162d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0011631:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0011635:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011639:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001163d:	01 df                	add    edi,ebx
c001163f:	39 fb                	cmp    ebx,edi
c0011641:	7d 1f                	jge    c0011662 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0011643:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011647:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001164b:	7d 12                	jge    c001165f <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001164d:	8b 16                	mov    edx,DWORD PTR [esi]
c001164f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011653:	53                   	push   ebx
c0011654:	55                   	push   ebp
c0011655:	45                   	inc    ebp
c0011656:	56                   	push   esi
c0011657:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001165a:	83 c4 10             	add    esp,0x10
c001165d:	eb e8                	jmp    c0011647 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001165f:	43                   	inc    ebx
c0011660:	eb dd                	jmp    c001163f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0011662:	83 c4 1c             	add    esp,0x1c
c0011665:	5b                   	pop    ebx
c0011666:	5e                   	pop    esi
c0011667:	5f                   	pop    edi
c0011668:	5d                   	pop    ebp
c0011669:	c3                   	ret    

c001166a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001166a:	55                   	push   ebp
c001166b:	57                   	push   edi
c001166c:	31 ff                	xor    edi,edi
c001166e:	56                   	push   esi
c001166f:	53                   	push   ebx
c0011670:	83 ec 1c             	sub    esp,0x1c
c0011673:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0011677:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001167b:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0011682:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0011687:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001168b:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001168f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011693:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0011696:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001169a:	01 f9                	add    ecx,edi
c001169c:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00116a0:	7d 2f                	jge    c00116d1 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00116a2:	31 f6                	xor    esi,esi
c00116a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00116a8:	01 f2                	add    edx,esi
c00116aa:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00116ae:	7d 1a                	jge    c00116ca <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00116b0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00116b3:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00116b6:	46                   	inc    esi
c00116b7:	51                   	push   ecx
c00116b8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00116bc:	52                   	push   edx
c00116bd:	55                   	push   ebp
c00116be:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00116c1:	83 c4 10             	add    esp,0x10
c00116c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00116c8:	eb da                	jmp    c00116a4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00116ca:	47                   	inc    edi
c00116cb:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00116cf:	eb c5                	jmp    c0011696 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00116d1:	83 c4 1c             	add    esp,0x1c
c00116d4:	5b                   	pop    ebx
c00116d5:	5e                   	pop    esi
c00116d6:	5f                   	pop    edi
c00116d7:	5d                   	pop    ebp
c00116d8:	c3                   	ret    
c00116d9:	90                   	nop

c00116da <Video::blit(unsigned int*, int, int, int, int)>:
c00116da:	55                   	push   ebp
c00116db:	57                   	push   edi
c00116dc:	56                   	push   esi
c00116dd:	53                   	push   ebx
c00116de:	83 ec 1c             	sub    esp,0x1c
c00116e1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00116e5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00116e9:	85 c0                	test   eax,eax
c00116eb:	79 02                	jns    c00116ef <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00116ed:	31 c0                	xor    eax,eax
c00116ef:	c1 e0 02             	shl    eax,0x2
c00116f2:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00116f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00116fa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00116fe:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0011702:	39 d8                	cmp    eax,ebx
c0011704:	7e 49                	jle    c001174f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0011706:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001170c:	7c 41                	jl     c001174f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001170e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011712:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011716:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001171a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001171e:	39 f9                	cmp    ecx,edi
c0011720:	7e 22                	jle    c0011744 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0011722:	83 c5 04             	add    ebp,0x4
c0011725:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001172b:	7c 14                	jl     c0011741 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001172d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001172f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0011732:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011736:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001173a:	56                   	push   esi
c001173b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001173e:	83 c4 10             	add    esp,0x10
c0011741:	47                   	inc    edi
c0011742:	eb d2                	jmp    c0011716 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0011744:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011748:	43                   	inc    ebx
c0011749:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001174d:	eb ab                	jmp    c00116fa <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001174f:	83 c4 1c             	add    esp,0x1c
c0011752:	5b                   	pop    ebx
c0011753:	5e                   	pop    esi
c0011754:	5f                   	pop    edi
c0011755:	5d                   	pop    ebp
c0011756:	c3                   	ret    
c0011757:	90                   	nop

c0011758 <Video::clearScreen(unsigned int)>:
c0011758:	57                   	push   edi
c0011759:	56                   	push   esi
c001175a:	53                   	push   ebx
c001175b:	31 db                	xor    ebx,ebx
c001175d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011761:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0011767:	7e 1f                	jle    c0011788 <Video::clearScreen(unsigned int)+0x30>
c0011769:	31 ff                	xor    edi,edi
c001176b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0011771:	7e 12                	jle    c0011785 <Video::clearScreen(unsigned int)+0x2d>
c0011773:	8b 06                	mov    eax,DWORD PTR [esi]
c0011775:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011779:	53                   	push   ebx
c001177a:	57                   	push   edi
c001177b:	47                   	inc    edi
c001177c:	56                   	push   esi
c001177d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011780:	83 c4 10             	add    esp,0x10
c0011783:	eb e6                	jmp    c001176b <Video::clearScreen(unsigned int)+0x13>
c0011785:	43                   	inc    ebx
c0011786:	eb d9                	jmp    c0011761 <Video::clearScreen(unsigned int)+0x9>
c0011788:	5b                   	pop    ebx
c0011789:	5e                   	pop    esi
c001178a:	5f                   	pop    edi
c001178b:	c3                   	ret    

c001178c <Video::putpixel(int, int, unsigned int)>:
c001178c:	c7 44 24 04 e8 5a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025ae8
c0011794:	e9 90 39 00 00       	jmp    c0015129 <Krnl::panic(char const*)>
c0011799:	90                   	nop

c001179a <Video::Video(char const*)>:
c001179a:	83 ec 0c             	sub    esp,0xc
c001179d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117a1:	83 ec 08             	sub    esp,0x8
c00117a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117a8:	50                   	push   eax
c00117a9:	e8 10 d0 ff ff       	call   c000e7be <Device::Device(char const*)>
c00117ae:	83 c4 10             	add    esp,0x10
c00117b1:	ba 58 5b 02 c0       	mov    edx,0xc0025b58
c00117b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117ba:	89 10                	mov    DWORD PTR [eax],edx
c00117bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117c0:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00117ca:	90                   	nop
c00117cb:	83 c4 0c             	add    esp,0xc
c00117ce:	c3                   	ret    
c00117cf:	90                   	nop

c00117d0 <Video::~Video()>:
c00117d0:	83 ec 0c             	sub    esp,0xc
c00117d3:	ba 58 5b 02 c0       	mov    edx,0xc0025b58
c00117d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117dc:	89 10                	mov    DWORD PTR [eax],edx
c00117de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117e2:	83 ec 0c             	sub    esp,0xc
c00117e5:	50                   	push   eax
c00117e6:	e8 9d cc ff ff       	call   c000e488 <Device::~Device()>
c00117eb:	83 c4 10             	add    esp,0x10
c00117ee:	90                   	nop
c00117ef:	83 c4 0c             	add    esp,0xc
c00117f2:	c3                   	ret    
c00117f3:	90                   	nop

c00117f4 <Video::~Video()>:
c00117f4:	83 ec 0c             	sub    esp,0xc
c00117f7:	83 ec 0c             	sub    esp,0xc
c00117fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117fe:	e8 cd ff ff ff       	call   c00117d0 <Video::~Video()>
c0011803:	83 c4 10             	add    esp,0x10
c0011806:	83 ec 08             	sub    esp,0x8
c0011809:	68 64 01 00 00       	push   0x164
c001180e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011812:	e8 4f b7 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0011817:	83 c4 10             	add    esp,0x10
c001181a:	83 c4 0c             	add    esp,0xc
c001181d:	c3                   	ret    

c001181e <Video::isMonochrome()>:
c001181e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011822:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0011828:	c3                   	ret    
c0011829:	90                   	nop

c001182a <Video::getWidth()>:
c001182a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001182e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011834:	c3                   	ret    
c0011835:	90                   	nop

c0011836 <Video::getHeight()>:
c0011836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001183a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011840:	c3                   	ret    
c0011841:	90                   	nop

c0011842 <Video::drawCursor(int, int, unsigned char*, int)>:
c0011842:	55                   	push   ebp
c0011843:	57                   	push   edi
c0011844:	56                   	push   esi
c0011845:	53                   	push   ebx
c0011846:	83 ec 2c             	sub    esp,0x2c
c0011849:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001184d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0011851:	83 f8 01             	cmp    eax,0x1
c0011854:	19 c9                	sbb    ecx,ecx
c0011856:	31 db                	xor    ebx,ebx
c0011858:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001185c:	89 cd                	mov    ebp,ecx
c001185e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0011866:	f7 d5                	not    ebp
c0011868:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001186e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011872:	01 d8                	add    eax,ebx
c0011874:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011878:	56                   	push   esi
c0011879:	e8 b8 ff ff ff       	call   c0011836 <Video::getHeight()>
c001187e:	59                   	pop    ecx
c001187f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0011883:	7e 70                	jle    c00118f5 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0011885:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011889:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001188d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0011890:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011894:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011898:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001189f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00118a3:	89 f8                	mov    eax,edi
c00118a5:	83 c0 20             	add    eax,0x20
c00118a8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00118ac:	56                   	push   esi
c00118ad:	e8 78 ff ff ff       	call   c001182a <Video::getWidth()>
c00118b2:	5a                   	pop    edx
c00118b3:	39 c7                	cmp    edi,eax
c00118b5:	7d 34                	jge    c00118eb <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00118b7:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00118bc:	74 05                	je     c00118c3 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00118be:	8b 06                	mov    eax,DWORD PTR [esi]
c00118c0:	55                   	push   ebp
c00118c1:	eb 0d                	jmp    c00118d0 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00118c3:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00118c8:	74 12                	je     c00118dc <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00118ca:	8b 06                	mov    eax,DWORD PTR [esi]
c00118cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00118d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00118d4:	57                   	push   edi
c00118d5:	56                   	push   esi
c00118d6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00118d9:	83 c4 10             	add    esp,0x10
c00118dc:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00118e0:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00118e4:	47                   	inc    edi
c00118e5:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00118e9:	75 c1                	jne    c00118ac <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00118eb:	43                   	inc    ebx
c00118ec:	83 fb 20             	cmp    ebx,0x20
c00118ef:	0f 85 79 ff ff ff    	jne    c001186e <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00118f5:	83 c4 2c             	add    esp,0x2c
c00118f8:	5b                   	pop    ebx
c00118f9:	5e                   	pop    esi
c00118fa:	5f                   	pop    edi
c00118fb:	5d                   	pop    ebp
c00118fc:	c3                   	ret    
c00118fd:	90                   	nop

c00118fe <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00118fe:	55                   	push   ebp
c00118ff:	57                   	push   edi
c0011900:	56                   	push   esi
c0011901:	53                   	push   ebx
c0011902:	83 ec 28             	sub    esp,0x28
c0011905:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011909:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001190d:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0011911:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0011915:	c1 e6 08             	shl    esi,0x8
c0011918:	01 c6                	add    esi,eax
c001191a:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001191e:	c1 e0 08             	shl    eax,0x8
c0011921:	01 d0                	add    eax,edx
c0011923:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011927:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001192b:	0f af c6             	imul   eax,esi
c001192e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0011935:	50                   	push   eax
c0011936:	e8 20 84 ff ff       	call   c0009d5b <malloc>
c001193b:	83 c4 10             	add    esp,0x10
c001193e:	89 c7                	mov    edi,eax
c0011940:	85 c0                	test   eax,eax
c0011942:	75 10                	jne    c0011954 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0011944:	83 ec 0c             	sub    esp,0xc
c0011947:	68 09 5b 02 c0       	push   0xc0025b09
c001194c:	e8 d8 37 00 00       	call   c0015129 <Krnl::panic(char const*)>
c0011951:	83 c4 10             	add    esp,0x10
c0011954:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0011957:	ba 12 00 00 00       	mov    edx,0x12
c001195c:	84 c0                	test   al,al
c001195e:	74 11                	je     c0011971 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0011960:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0011964:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0011968:	c1 fa 03             	sar    edx,0x3
c001196b:	0f af d1             	imul   edx,ecx
c001196e:	83 c2 12             	add    edx,0x12
c0011971:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0011975:	74 04                	je     c001197b <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0011977:	85 f6                	test   esi,esi
c0011979:	75 12                	jne    c001198d <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c001197b:	83 ec 0c             	sub    esp,0xc
c001197e:	68 19 5b 02 c0       	push   0xc0025b19
c0011983:	e8 bf b6 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0011988:	e9 b8 00 00 00       	jmp    c0011a45 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c001198d:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0011991:	80 f9 02             	cmp    cl,0x2
c0011994:	0f 85 96 00 00 00    	jne    c0011a30 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c001199a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001199f:	75 0e                	jne    c00119af <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00119a1:	84 c0                	test   al,al
c00119a3:	75 0a                	jne    c00119af <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00119a5:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00119a8:	83 e8 18             	sub    eax,0x18
c00119ab:	a8 f7                	test   al,0xf7
c00119ad:	74 0a                	je     c00119b9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c00119af:	83 ec 0c             	sub    esp,0xc
c00119b2:	68 2e 5b 02 c0       	push   0xc0025b2e
c00119b7:	eb 7f                	jmp    c0011a38 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c00119b9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00119c1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00119c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00119cd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00119d5:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00119d9:	75 0c                	jne    c00119e7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00119db:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c00119e0:	c1 e0 18             	shl    eax,0x18
c00119e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00119e7:	45                   	inc    ebp
c00119e8:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c00119ed:	c1 e1 10             	shl    ecx,0x10
c00119f0:	89 c8                	mov    eax,ecx
c00119f2:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c00119f7:	c1 e1 08             	shl    ecx,0x8
c00119fa:	09 c1                	or     ecx,eax
c00119fc:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0011a00:	09 c1                	or     ecx,eax
c0011a02:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0011a06:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0011a0a:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0011a0e:	c1 f8 03             	sar    eax,0x3
c0011a11:	01 c2                	add    edx,eax
c0011a13:	89 e8                	mov    eax,ebp
c0011a15:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0011a19:	39 c6                	cmp    esi,eax
c0011a1b:	7f b0                	jg     c00119cd <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0011a1d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011a21:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011a25:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0011a28:	7e 22                	jle    c0011a4c <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0011a2a:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0011a2e:	eb 99                	jmp    c00119c9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0011a30:	50                   	push   eax
c0011a31:	50                   	push   eax
c0011a32:	51                   	push   ecx
c0011a33:	68 3c 5b 02 c0       	push   0xc0025b3c
c0011a38:	e8 0a b6 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0011a3d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011a40:	e8 26 83 ff ff       	call   c0009d6b <free>
c0011a45:	83 c4 10             	add    esp,0x10
c0011a48:	31 ff                	xor    edi,edi
c0011a4a:	eb 0f                	jmp    c0011a5b <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0011a4c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011a50:	89 30                	mov    DWORD PTR [eax],esi
c0011a52:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011a56:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0011a59:	89 30                	mov    DWORD PTR [eax],esi
c0011a5b:	83 c4 1c             	add    esp,0x1c
c0011a5e:	89 f8                	mov    eax,edi
c0011a60:	5b                   	pop    ebx
c0011a61:	5e                   	pop    esi
c0011a62:	5f                   	pop    edi
c0011a63:	5d                   	pop    ebp
c0011a64:	c3                   	ret    
c0011a65:	90                   	nop

c0011a66 <Video::putTGA(int, int, unsigned char*, int)>:
c0011a66:	55                   	push   ebp
c0011a67:	57                   	push   edi
c0011a68:	56                   	push   esi
c0011a69:	53                   	push   ebx
c0011a6a:	83 ec 28             	sub    esp,0x28
c0011a6d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0011a71:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011a75:	50                   	push   eax
c0011a76:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011a7a:	50                   	push   eax
c0011a7b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011a7f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011a83:	56                   	push   esi
c0011a84:	e8 75 fe ff ff       	call   c00118fe <Video::tgaParse(unsigned char*, int, int*, int*)>
c0011a89:	83 c4 20             	add    esp,0x20
c0011a8c:	85 c0                	test   eax,eax
c0011a8e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011a92:	74 35                	je     c0011ac9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011a94:	89 c7                	mov    edi,eax
c0011a96:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011a9a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0011a9e:	39 d8                	cmp    eax,ebx
c0011aa0:	7e 27                	jle    c0011ac9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011aa2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011aa6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011aaa:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0011aae:	39 e8                	cmp    eax,ebp
c0011ab0:	7e 14                	jle    c0011ac6 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0011ab2:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ab4:	83 c7 04             	add    edi,0x4
c0011ab7:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0011aba:	53                   	push   ebx
c0011abb:	55                   	push   ebp
c0011abc:	45                   	inc    ebp
c0011abd:	56                   	push   esi
c0011abe:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011ac1:	83 c4 10             	add    esp,0x10
c0011ac4:	eb e0                	jmp    c0011aa6 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0011ac6:	43                   	inc    ebx
c0011ac7:	eb cd                	jmp    c0011a96 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0011ac9:	83 c4 1c             	add    esp,0x1c
c0011acc:	5b                   	pop    ebx
c0011acd:	5e                   	pop    esi
c0011ace:	5f                   	pop    edi
c0011acf:	5d                   	pop    ebp
c0011ad0:	c3                   	ret    
c0011ad1:	66 90                	xchg   ax,ax
c0011ad3:	90                   	nop

c0011ad4 <ACPI::close(int, int, void*)>:
c0011ad4:	83 ec 1c             	sub    esp,0x1c
c0011ad7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0011adf:	74 0b                	je     c0011aec <ACPI::close(int, int, void*)+0x18>
c0011ae1:	b8 00 00 00 00       	mov    eax,0x0
c0011ae6:	e9 99 00 00 00       	jmp    c0011b84 <ACPI::close(int, int, void*)+0xb0>
c0011aeb:	90                   	nop
c0011aec:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0011af1:	75 29                	jne    c0011b1c <ACPI::close(int, int, void*)+0x48>
c0011af3:	a1 28 90 02 c0       	mov    eax,ds:0xc0029028
c0011af8:	85 c0                	test   eax,eax
c0011afa:	74 08                	je     c0011b04 <ACPI::close(int, int, void*)+0x30>
c0011afc:	a1 28 90 02 c0       	mov    eax,ds:0xc0029028
c0011b01:	ff d0                	call   eax
c0011b03:	90                   	nop
c0011b04:	83 ec 0c             	sub    esp,0xc
c0011b07:	68 98 5b 02 c0       	push   0xc0025b98
c0011b0c:	e8 18 36 00 00       	call   c0015129 <Krnl::panic(char const*)>
c0011b11:	83 c4 10             	add    esp,0x10
c0011b14:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b19:	eb 69                	jmp    c0011b84 <ACPI::close(int, int, void*)+0xb0>
c0011b1b:	90                   	nop
c0011b1c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0011b21:	75 59                	jne    c0011b7c <ACPI::close(int, int, void*)+0xa8>
c0011b23:	a1 24 90 02 c0       	mov    eax,ds:0xc0029024
c0011b28:	85 c0                	test   eax,eax
c0011b2a:	74 08                	je     c0011b34 <ACPI::close(int, int, void*)+0x60>
c0011b2c:	a1 24 90 02 c0       	mov    eax,ds:0xc0029024
c0011b31:	ff d0                	call   eax
c0011b33:	90                   	nop
c0011b34:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0011b39:	8d 76 00             	lea    esi,[esi+0x0]
c0011b3c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011b41:	83 e0 02             	and    eax,0x2
c0011b44:	74 1e                	je     c0011b64 <ACPI::close(int, int, void*)+0x90>
c0011b46:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0011b4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b51:	89 c2                	mov    edx,eax
c0011b53:	ec                   	in     al,dx
c0011b54:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011b58:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0011b5c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011b60:	eb da                	jmp    c0011b3c <ACPI::close(int, int, void*)+0x68>
c0011b62:	66 90                	xchg   ax,ax
c0011b64:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0011b6b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0011b70:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0011b74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011b78:	ee                   	out    dx,al
c0011b79:	8d 76 00             	lea    esi,[esi+0x0]
c0011b7c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b81:	8d 76 00             	lea    esi,[esi+0x0]
c0011b84:	83 c4 1c             	add    esp,0x1c
c0011b87:	c3                   	ret    

c0011b88 <findRSDP()>:
c0011b88:	83 ec 1c             	sub    esp,0x1c
c0011b8b:	83 ec 0c             	sub    esp,0xc
c0011b8e:	68 bb 5c 02 c0       	push   0xc0025cbb
c0011b93:	e8 1d 82 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0011b98:	83 c4 10             	add    esp,0x10
c0011b9b:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0011ba0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011ba6:	83 e0 04             	and    eax,0x4
c0011ba9:	84 c0                	test   al,al
c0011bab:	75 0b                	jne    c0011bb8 <findRSDP()+0x30>
c0011bad:	b8 00 00 00 00       	mov    eax,0x0
c0011bb2:	e9 a1 00 00 00       	jmp    c0011c58 <findRSDP()+0xd0>
c0011bb7:	90                   	nop
c0011bb8:	a1 18 8a 02 c0       	mov    eax,ds:0xc0028a18
c0011bbd:	3d ff 07 00 00       	cmp    eax,0x7ff
c0011bc2:	7f 1c                	jg     c0011be0 <findRSDP()+0x58>
c0011bc4:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0011bc9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011bcf:	83 e2 fb             	and    edx,0xfffffffb
c0011bd2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011bd8:	b8 00 00 00 00       	mov    eax,0x0
c0011bdd:	eb 79                	jmp    c0011c58 <findRSDP()+0xd0>
c0011bdf:	90                   	nop
c0011be0:	83 ec 0c             	sub    esp,0xc
c0011be3:	68 cb 5c 02 c0       	push   0xc0025ccb
c0011be8:	e8 c8 81 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0011bed:	83 c4 10             	add    esp,0x10
c0011bf0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0011bf8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0011c00:	77 3e                	ja     c0011c40 <findRSDP()+0xb8>
c0011c02:	83 ec 04             	sub    esp,0x4
c0011c05:	6a 08                	push   0x8
c0011c07:	68 e4 5c 02 c0       	push   0xc0025ce4
c0011c0c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011c10:	e8 6b e9 fe ff       	call   c0000580 <memcmp>
c0011c15:	83 c4 10             	add    esp,0x10
c0011c18:	85 c0                	test   eax,eax
c0011c1a:	0f 94 c0             	sete   al
c0011c1d:	84 c0                	test   al,al
c0011c1f:	74 17                	je     c0011c38 <findRSDP()+0xb0>
c0011c21:	83 ec 0c             	sub    esp,0xc
c0011c24:	68 ed 5c 02 c0       	push   0xc0025ced
c0011c29:	e8 87 81 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0011c2e:	83 c4 10             	add    esp,0x10
c0011c31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c35:	eb 21                	jmp    c0011c58 <findRSDP()+0xd0>
c0011c37:	90                   	nop
c0011c38:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0011c3d:	eb b9                	jmp    c0011bf8 <findRSDP()+0x70>
c0011c3f:	90                   	nop
c0011c40:	83 ec 0c             	sub    esp,0xc
c0011c43:	68 fb 5c 02 c0       	push   0xc0025cfb
c0011c48:	e8 68 81 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0011c4d:	83 c4 10             	add    esp,0x10
c0011c50:	b8 00 00 00 00       	mov    eax,0x0
c0011c55:	8d 76 00             	lea    esi,[esi+0x0]
c0011c58:	83 c4 1c             	add    esp,0x1c
c0011c5b:	c3                   	ret    

c0011c5c <loadACPITables(unsigned char*)>:
c0011c5c:	57                   	push   edi
c0011c5d:	56                   	push   esi
c0011c5e:	53                   	push   ebx
c0011c5f:	83 ec 60             	sub    esp,0x60
c0011c62:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0011c67:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011c6d:	83 e0 04             	and    eax,0x4
c0011c70:	84 c0                	test   al,al
c0011c72:	0f 84 3c 02 00 00    	je     c0011eb4 <loadACPITables(unsigned char*)+0x258>
c0011c78:	a0 40 92 02 c0       	mov    al,ds:0xc0029240
c0011c7d:	84 c0                	test   al,al
c0011c7f:	74 77                	je     c0011cf8 <loadACPITables(unsigned char*)+0x9c>
c0011c81:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011c85:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0011c89:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011c8d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c90:	83 e8 24             	sub    eax,0x24
c0011c93:	c1 e8 03             	shr    eax,0x3
c0011c96:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011c9a:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0011ca2:	66 90                	xchg   ax,ax
c0011ca4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011ca8:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0011cac:	0f 8d b6 00 00 00    	jge    c0011d68 <loadACPITables(unsigned char*)+0x10c>
c0011cb2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011cb6:	83 c0 24             	add    eax,0x24
c0011cb9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0011cbd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011cc1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011cc5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011cc9:	c1 e0 03             	shl    eax,0x3
c0011ccc:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0011cd0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011cd4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011cd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cd9:	89 c1                	mov    ecx,eax
c0011cdb:	a1 2c 90 02 c0       	mov    eax,ds:0xc002902c
c0011ce0:	8d 50 01             	lea    edx,[eax+0x1]
c0011ce3:	89 15 2c 90 02 c0    	mov    DWORD PTR ds:0xc002902c,edx
c0011ce9:	89 ca                	mov    edx,ecx
c0011ceb:	89 14 c5 44 90 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6fbc],edx
c0011cf2:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0011cf6:	eb ac                	jmp    c0011ca4 <loadACPITables(unsigned char*)+0x48>
c0011cf8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011cfc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011d00:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011d07:	83 e8 24             	sub    eax,0x24
c0011d0a:	c1 e8 02             	shr    eax,0x2
c0011d0d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011d11:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0011d19:	8d 76 00             	lea    esi,[esi+0x0]
c0011d1c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011d20:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0011d24:	7d 42                	jge    c0011d68 <loadACPITables(unsigned char*)+0x10c>
c0011d26:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011d2a:	83 c0 24             	add    eax,0x24
c0011d2d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011d31:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011d35:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011d39:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011d3d:	c1 e0 02             	shl    eax,0x2
c0011d40:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011d44:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d48:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011d4a:	a1 2c 90 02 c0       	mov    eax,ds:0xc002902c
c0011d4f:	8d 50 01             	lea    edx,[eax+0x1]
c0011d52:	89 15 2c 90 02 c0    	mov    DWORD PTR ds:0xc002902c,edx
c0011d58:	89 ca                	mov    edx,ecx
c0011d5a:	89 14 c5 44 90 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6fbc],edx
c0011d61:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0011d65:	eb b5                	jmp    c0011d1c <loadACPITables(unsigned char*)+0xc0>
c0011d67:	90                   	nop
c0011d68:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0011d70:	a1 2c 90 02 c0       	mov    eax,ds:0xc002902c
c0011d75:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0011d79:	0f 8d 39 01 00 00    	jge    c0011eb8 <loadACPITables(unsigned char*)+0x25c>
c0011d7f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011d83:	8b 04 c5 44 90 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6fbc]
c0011d8a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011d8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d92:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011d96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d9a:	25 ff 0f 00 00       	and    eax,0xfff
c0011d9f:	89 c6                	mov    esi,eax
c0011da1:	8b 1d 10 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b10
c0011da7:	83 ec 0c             	sub    esp,0xc
c0011daa:	6a 01                	push   0x1
c0011dac:	e8 70 9f ff ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c0011db1:	83 c4 10             	add    esp,0x10
c0011db4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011db8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011dbe:	83 ec 0c             	sub    esp,0xc
c0011dc1:	6a 01                	push   0x1
c0011dc3:	6a 01                	push   0x1
c0011dc5:	50                   	push   eax
c0011dc6:	52                   	push   edx
c0011dc7:	53                   	push   ebx
c0011dc8:	e8 f1 a8 ff ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011dcd:	83 c4 20             	add    esp,0x20
c0011dd0:	09 f0                	or     eax,esi
c0011dd2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011dd6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011dda:	c1 e0 03             	shl    eax,0x3
c0011ddd:	05 40 90 02 c0       	add    eax,0xc0029040
c0011de2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011de6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011dea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011dee:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0011df6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011dfa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011dfe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011e02:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e06:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011e0a:	89 c6                	mov    esi,eax
c0011e0c:	89 d7                	mov    edi,edx
c0011e0e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011e10:	89 c8                	mov    eax,ecx
c0011e12:	89 fa                	mov    edx,edi
c0011e14:	89 f3                	mov    ebx,esi
c0011e16:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011e1a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011e1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011e22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011e29:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011e2d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e31:	05 00 10 00 00       	add    eax,0x1000
c0011e36:	c1 e8 0c             	shr    eax,0xc
c0011e39:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011e3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011e45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e49:	25 ff 0f 00 00       	and    eax,0xfff
c0011e4e:	89 c6                	mov    esi,eax
c0011e50:	8b 1d 10 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b10
c0011e56:	83 ec 0c             	sub    esp,0xc
c0011e59:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011e5d:	e8 bf 9e ff ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c0011e62:	83 c4 10             	add    esp,0x10
c0011e65:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011e69:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011e6f:	83 ec 0c             	sub    esp,0xc
c0011e72:	6a 01                	push   0x1
c0011e74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011e78:	50                   	push   eax
c0011e79:	52                   	push   edx
c0011e7a:	53                   	push   ebx
c0011e7b:	e8 3e a8 ff ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e80:	83 c4 20             	add    esp,0x20
c0011e83:	09 f0                	or     eax,esi
c0011e85:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011e8d:	83 ec 0c             	sub    esp,0xc
c0011e90:	50                   	push   eax
c0011e91:	e8 bb a1 ff ff       	call   c000c051 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e96:	83 c4 10             	add    esp,0x10
c0011e99:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011e9d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011ea1:	89 14 c5 44 90 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6fbc],edx
c0011ea8:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0011eac:	e9 bf fe ff ff       	jmp    c0011d70 <loadACPITables(unsigned char*)+0x114>
c0011eb1:	8d 76 00             	lea    esi,[esi+0x0]
c0011eb4:	90                   	nop
c0011eb5:	8d 76 00             	lea    esi,[esi+0x0]
c0011eb8:	83 c4 60             	add    esp,0x60
c0011ebb:	5b                   	pop    ebx
c0011ebc:	5e                   	pop    esi
c0011ebd:	5f                   	pop    edi
c0011ebe:	c3                   	ret    
c0011ebf:	90                   	nop

c0011ec0 <findRSDT(unsigned char*)>:
c0011ec0:	57                   	push   edi
c0011ec1:	56                   	push   esi
c0011ec2:	53                   	push   ebx
c0011ec3:	83 ec 50             	sub    esp,0x50
c0011ec6:	83 ec 0c             	sub    esp,0xc
c0011ec9:	68 0f 5d 02 c0       	push   0xc0025d0f
c0011ece:	e8 e2 7e ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0011ed3:	83 c4 10             	add    esp,0x10
c0011ed6:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0011edb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011ee1:	83 e0 04             	and    eax,0x4
c0011ee4:	84 c0                	test   al,al
c0011ee6:	75 0c                	jne    c0011ef4 <findRSDT(unsigned char*)+0x34>
c0011ee8:	b8 00 00 00 00       	mov    eax,0x0
c0011eed:	e9 86 01 00 00       	jmp    c0012078 <findRSDT(unsigned char*)+0x1b8>
c0011ef2:	66 90                	xchg   ax,ax
c0011ef4:	83 ec 0c             	sub    esp,0xc
c0011ef7:	68 21 5d 02 c0       	push   0xc0025d21
c0011efc:	e8 b4 7e ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0011f01:	83 c4 10             	add    esp,0x10
c0011f04:	89 e0                	mov    eax,esp
c0011f06:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011f0a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011f0e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011f12:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0011f1a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011f1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011f22:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011f26:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011f2a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011f2e:	89 c6                	mov    esi,eax
c0011f30:	89 d7                	mov    edi,edx
c0011f32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011f34:	89 c8                	mov    eax,ecx
c0011f36:	89 fa                	mov    edx,edi
c0011f38:	89 f3                	mov    ebx,esi
c0011f3a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0011f3e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0011f42:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011f46:	83 ec 0c             	sub    esp,0xc
c0011f49:	68 33 5d 02 c0       	push   0xc0025d33
c0011f4e:	e8 62 7e ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0011f53:	83 c4 10             	add    esp,0x10
c0011f56:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011f5a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0011f5e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0011f66:	83 ec 0c             	sub    esp,0xc
c0011f69:	68 45 5d 02 c0       	push   0xc0025d45
c0011f6e:	e8 42 7e ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0011f73:	83 c4 10             	add    esp,0x10
c0011f76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f7e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011f82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f86:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011f8a:	83 ec 04             	sub    esp,0x4
c0011f8d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011f91:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011f95:	68 bc 5b 02 c0       	push   0xc0025bbc
c0011f9a:	e8 a8 b0 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0011f9f:	83 c4 10             	add    esp,0x10
c0011fa2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011fa6:	25 ff 0f 00 00       	and    eax,0xfff
c0011fab:	89 c6                	mov    esi,eax
c0011fad:	8b 1d 10 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b10
c0011fb3:	83 ec 0c             	sub    esp,0xc
c0011fb6:	6a 02                	push   0x2
c0011fb8:	e8 64 9d ff ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c0011fbd:	83 c4 10             	add    esp,0x10
c0011fc0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011fc4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011fca:	83 ec 0c             	sub    esp,0xc
c0011fcd:	6a 01                	push   0x1
c0011fcf:	6a 02                	push   0x2
c0011fd1:	50                   	push   eax
c0011fd2:	52                   	push   edx
c0011fd3:	53                   	push   ebx
c0011fd4:	e8 e5 a6 ff ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011fd9:	83 c4 20             	add    esp,0x20
c0011fdc:	09 f0                	or     eax,esi
c0011fde:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011fe2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011fe6:	25 ff 0f 00 00       	and    eax,0xfff
c0011feb:	89 c6                	mov    esi,eax
c0011fed:	8b 1d 10 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b10
c0011ff3:	83 ec 0c             	sub    esp,0xc
c0011ff6:	6a 02                	push   0x2
c0011ff8:	e8 24 9d ff ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c0011ffd:	83 c4 10             	add    esp,0x10
c0012000:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0012004:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001200a:	83 ec 0c             	sub    esp,0xc
c001200d:	6a 01                	push   0x1
c001200f:	6a 02                	push   0x2
c0012011:	50                   	push   eax
c0012012:	52                   	push   edx
c0012013:	53                   	push   ebx
c0012014:	e8 a5 a6 ff ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012019:	83 c4 20             	add    esp,0x20
c001201c:	09 f0                	or     eax,esi
c001201e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0012022:	83 ec 04             	sub    esp,0x4
c0012025:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012029:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001202d:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012032:	e8 10 b0 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0012037:	83 c4 10             	add    esp,0x10
c001203a:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c001203f:	75 13                	jne    c0012054 <findRSDT(unsigned char*)+0x194>
c0012041:	c6 05 40 92 02 c0 00 	mov    BYTE PTR ds:0xc0029240,0x0
c0012048:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001204c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0012050:	eb 22                	jmp    c0012074 <findRSDT(unsigned char*)+0x1b4>
c0012052:	66 90                	xchg   ax,ax
c0012054:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0012059:	75 11                	jne    c001206c <findRSDT(unsigned char*)+0x1ac>
c001205b:	c6 05 40 92 02 c0 01 	mov    BYTE PTR ds:0xc0029240,0x1
c0012062:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0012066:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001206a:	eb 08                	jmp    c0012074 <findRSDT(unsigned char*)+0x1b4>
c001206c:	b8 00 00 00 00       	mov    eax,0x0
c0012071:	eb 05                	jmp    c0012078 <findRSDT(unsigned char*)+0x1b8>
c0012073:	90                   	nop
c0012074:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012078:	83 c4 50             	add    esp,0x50
c001207b:	5b                   	pop    ebx
c001207c:	5e                   	pop    esi
c001207d:	5f                   	pop    edi
c001207e:	c3                   	ret    
c001207f:	90                   	nop

c0012080 <findDataTable(unsigned char*, char*)>:
c0012080:	83 ec 1c             	sub    esp,0x1c
c0012083:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0012088:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001208e:	83 e0 04             	and    eax,0x4
c0012091:	84 c0                	test   al,al
c0012093:	75 07                	jne    c001209c <findDataTable(unsigned char*, char*)+0x1c>
c0012095:	b8 00 00 00 00       	mov    eax,0x0
c001209a:	eb 58                	jmp    c00120f4 <findDataTable(unsigned char*, char*)+0x74>
c001209c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00120a4:	a1 2c 90 02 c0       	mov    eax,ds:0xc002902c
c00120a9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00120ad:	7d 3d                	jge    c00120ec <findDataTable(unsigned char*, char*)+0x6c>
c00120af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120b3:	c1 e0 03             	shl    eax,0x3
c00120b6:	05 40 90 02 c0       	add    eax,0xc0029040
c00120bb:	83 ec 04             	sub    esp,0x4
c00120be:	6a 04                	push   0x4
c00120c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00120c4:	50                   	push   eax
c00120c5:	e8 b6 e4 fe ff       	call   c0000580 <memcmp>
c00120ca:	83 c4 10             	add    esp,0x10
c00120cd:	85 c0                	test   eax,eax
c00120cf:	0f 94 c0             	sete   al
c00120d2:	84 c0                	test   al,al
c00120d4:	74 0e                	je     c00120e4 <findDataTable(unsigned char*, char*)+0x64>
c00120d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120da:	8b 04 c5 44 90 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6fbc]
c00120e1:	eb 11                	jmp    c00120f4 <findDataTable(unsigned char*, char*)+0x74>
c00120e3:	90                   	nop
c00120e4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00120e8:	eb ba                	jmp    c00120a4 <findDataTable(unsigned char*, char*)+0x24>
c00120ea:	66 90                	xchg   ax,ax
c00120ec:	b8 00 00 00 00       	mov    eax,0x0
c00120f1:	8d 76 00             	lea    esi,[esi+0x0]
c00120f4:	83 c4 1c             	add    esp,0x1c
c00120f7:	c3                   	ret    

c00120f8 <scanMADT()>:
c00120f8:	53                   	push   ebx
c00120f9:	83 ec 38             	sub    esp,0x38
c00120fc:	83 ec 0c             	sub    esp,0xc
c00120ff:	68 57 5d 02 c0       	push   0xc0025d57
c0012104:	e8 ac 7c ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0012109:	83 c4 10             	add    esp,0x10
c001210c:	a1 00 8a 02 c0       	mov    eax,ds:0xc0028a00
c0012111:	25 00 04 00 00       	and    eax,0x400
c0012116:	74 14                	je     c001212c <scanMADT()+0x34>
c0012118:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c001211d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012123:	83 e2 fb             	and    edx,0xfffffffb
c0012126:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001212c:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0012131:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012137:	83 e0 04             	and    eax,0x4
c001213a:	84 c0                	test   al,al
c001213c:	0f 84 82 04 00 00    	je     c00125c4 <scanMADT()+0x4cc>
c0012142:	83 ec 0c             	sub    esp,0xc
c0012145:	68 64 5d 02 c0       	push   0xc0025d64
c001214a:	e8 66 7c ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001214f:	83 c4 10             	add    esp,0x10
c0012152:	e8 31 fa ff ff       	call   c0011b88 <findRSDP()>
c0012157:	a3 4c 92 02 c0       	mov    ds:0xc002924c,eax
c001215c:	a1 4c 92 02 c0       	mov    eax,ds:0xc002924c
c0012161:	85 c0                	test   eax,eax
c0012163:	75 1b                	jne    c0012180 <scanMADT()+0x88>
c0012165:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c001216a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012170:	83 e2 fb             	and    edx,0xfffffffb
c0012173:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012179:	e9 4e 04 00 00       	jmp    c00125cc <scanMADT()+0x4d4>
c001217e:	66 90                	xchg   ax,ax
c0012180:	83 ec 0c             	sub    esp,0xc
c0012183:	68 76 5d 02 c0       	push   0xc0025d76
c0012188:	e8 28 7c ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001218d:	83 c4 10             	add    esp,0x10
c0012190:	a1 4c 92 02 c0       	mov    eax,ds:0xc002924c
c0012195:	83 ec 0c             	sub    esp,0xc
c0012198:	50                   	push   eax
c0012199:	e8 22 fd ff ff       	call   c0011ec0 <findRSDT(unsigned char*)>
c001219e:	83 c4 10             	add    esp,0x10
c00121a1:	a3 48 92 02 c0       	mov    ds:0xc0029248,eax
c00121a6:	a1 48 92 02 c0       	mov    eax,ds:0xc0029248
c00121ab:	85 c0                	test   eax,eax
c00121ad:	75 19                	jne    c00121c8 <scanMADT()+0xd0>
c00121af:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c00121b4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00121ba:	83 e2 fb             	and    edx,0xfffffffb
c00121bd:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00121c3:	e9 04 04 00 00       	jmp    c00125cc <scanMADT()+0x4d4>
c00121c8:	83 ec 0c             	sub    esp,0xc
c00121cb:	68 86 5d 02 c0       	push   0xc0025d86
c00121d0:	e8 e0 7b ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00121d5:	83 c4 10             	add    esp,0x10
c00121d8:	a1 48 92 02 c0       	mov    eax,ds:0xc0029248
c00121dd:	83 ec 0c             	sub    esp,0xc
c00121e0:	50                   	push   eax
c00121e1:	e8 76 fa ff ff       	call   c0011c5c <loadACPITables(unsigned char*)>
c00121e6:	83 c4 10             	add    esp,0x10
c00121e9:	a1 48 92 02 c0       	mov    eax,ds:0xc0029248
c00121ee:	83 ec 08             	sub    esp,0x8
c00121f1:	68 9e 5d 02 c0       	push   0xc0025d9e
c00121f6:	50                   	push   eax
c00121f7:	e8 84 fe ff ff       	call   c0012080 <findDataTable(unsigned char*, char*)>
c00121fc:	83 c4 10             	add    esp,0x10
c00121ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012203:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0012208:	75 1a                	jne    c0012224 <scanMADT()+0x12c>
c001220a:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c001220f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012215:	83 e2 fe             	and    edx,0xfffffffe
c0012218:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001221e:	e9 a9 03 00 00       	jmp    c00125cc <scanMADT()+0x4d4>
c0012223:	90                   	nop
c0012224:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001222c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012230:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012233:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0012237:	0f 87 8f 03 00 00    	ja     c00125cc <scanMADT()+0x4d4>
c001223d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0012245:	0f 87 81 03 00 00    	ja     c00125cc <scanMADT()+0x4d4>
c001224b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001224f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012253:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012257:	8d 50 01             	lea    edx,[eax+0x1]
c001225a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001225e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012262:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012266:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001226a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001226e:	8d 50 01             	lea    edx,[eax+0x1]
c0012271:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012275:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012279:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001227d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0012281:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0012286:	0f 86 3c 03 00 00    	jbe    c00125c8 <scanMADT()+0x4d0>
c001228c:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0012291:	75 59                	jne    c00122ec <scanMADT()+0x1f4>
c0012293:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012297:	8d 50 01             	lea    edx,[eax+0x1]
c001229a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001229e:	8a 15 40 94 02 c0    	mov    dl,BYTE PTR ds:0xc0029440
c00122a4:	0f b6 d2             	movzx  edx,dl
c00122a7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00122ab:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00122af:	88 82 80 94 02 c0    	mov    BYTE PTR [edx-0x3ffd6b80],al
c00122b5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00122b9:	8d 50 01             	lea    edx,[eax+0x1]
c00122bc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00122c0:	8a 15 40 94 02 c0    	mov    dl,BYTE PTR ds:0xc0029440
c00122c6:	8d 4a 01             	lea    ecx,[edx+0x1]
c00122c9:	88 0d 40 94 02 c0    	mov    BYTE PTR ds:0xc0029440,cl
c00122cf:	0f b6 d2             	movzx  edx,dl
c00122d2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00122d6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00122da:	88 82 60 94 02 c0    	mov    BYTE PTR [edx-0x3ffd6ba0],al
c00122e0:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00122e5:	e9 c6 02 00 00       	jmp    c00125b0 <scanMADT()+0x4b8>
c00122ea:	66 90                	xchg   ax,ax
c00122ec:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00122f1:	0f 85 15 01 00 00    	jne    c001240c <scanMADT()+0x314>
c00122f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00122fb:	8d 50 01             	lea    edx,[eax+0x1]
c00122fe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012302:	8a 15 00 93 02 c0    	mov    dl,BYTE PTR ds:0xc0029300
c0012308:	0f b6 d2             	movzx  edx,dl
c001230b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001230f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0012313:	88 82 20 93 02 c0    	mov    BYTE PTR [edx-0x3ffd6ce0],al
c0012319:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c001231d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012321:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012325:	01 d0                	add    eax,edx
c0012327:	83 c0 2c             	add    eax,0x2c
c001232a:	8a 00                	mov    al,BYTE PTR [eax]
c001232c:	0f b6 d0             	movzx  edx,al
c001232f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012333:	8d 48 01             	lea    ecx,[eax+0x1]
c0012336:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001233a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001233e:	0f b6 c0             	movzx  eax,al
c0012341:	c1 e0 08             	shl    eax,0x8
c0012344:	89 d1                	mov    ecx,edx
c0012346:	09 c1                	or     ecx,eax
c0012348:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001234c:	8d 50 02             	lea    edx,[eax+0x2]
c001234f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012353:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012357:	0f b6 c0             	movzx  eax,al
c001235a:	c1 e0 10             	shl    eax,0x10
c001235d:	09 c1                	or     ecx,eax
c001235f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012363:	8d 50 03             	lea    edx,[eax+0x3]
c0012366:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001236a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001236e:	0f b6 c0             	movzx  eax,al
c0012371:	c1 e0 18             	shl    eax,0x18
c0012374:	09 c1                	or     ecx,eax
c0012376:	89 ca                	mov    edx,ecx
c0012378:	a0 00 93 02 c0       	mov    al,ds:0xc0029300
c001237d:	0f b6 c0             	movzx  eax,al
c0012380:	89 14 85 40 93 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6cc0],edx
c0012387:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001238c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012390:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012394:	01 d0                	add    eax,edx
c0012396:	83 c0 2c             	add    eax,0x2c
c0012399:	8a 00                	mov    al,BYTE PTR [eax]
c001239b:	0f b6 d0             	movzx  edx,al
c001239e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123a2:	8d 48 01             	lea    ecx,[eax+0x1]
c00123a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00123a9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00123ad:	0f b6 c0             	movzx  eax,al
c00123b0:	c1 e0 08             	shl    eax,0x8
c00123b3:	89 d1                	mov    ecx,edx
c00123b5:	09 c1                	or     ecx,eax
c00123b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123bb:	8d 50 02             	lea    edx,[eax+0x2]
c00123be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00123c2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00123c6:	0f b6 c0             	movzx  eax,al
c00123c9:	c1 e0 10             	shl    eax,0x10
c00123cc:	09 c1                	or     ecx,eax
c00123ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123d2:	8d 50 03             	lea    edx,[eax+0x3]
c00123d5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00123d9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00123dd:	0f b6 c0             	movzx  eax,al
c00123e0:	c1 e0 18             	shl    eax,0x18
c00123e3:	09 c1                	or     ecx,eax
c00123e5:	89 ca                	mov    edx,ecx
c00123e7:	a0 00 93 02 c0       	mov    al,ds:0xc0029300
c00123ec:	0f b6 c0             	movzx  eax,al
c00123ef:	89 14 85 c0 93 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6c40],edx
c00123f6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00123fb:	a0 00 93 02 c0       	mov    al,ds:0xc0029300
c0012400:	40                   	inc    eax
c0012401:	a2 00 93 02 c0       	mov    ds:0xc0029300,al
c0012406:	e9 a5 01 00 00       	jmp    c00125b0 <scanMADT()+0x4b8>
c001240b:	90                   	nop
c001240c:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0012411:	0f 85 e9 00 00 00    	jne    c0012500 <scanMADT()+0x408>
c0012417:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001241b:	8d 50 01             	lea    edx,[eax+0x1]
c001241e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012422:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012426:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001242a:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001242e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012432:	8d 50 01             	lea    edx,[eax+0x1]
c0012435:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012439:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001243d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012441:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0012445:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012449:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001244d:	01 d0                	add    eax,edx
c001244f:	83 c0 2c             	add    eax,0x2c
c0012452:	8a 00                	mov    al,BYTE PTR [eax]
c0012454:	0f b6 d0             	movzx  edx,al
c0012457:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001245b:	8d 48 01             	lea    ecx,[eax+0x1]
c001245e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012462:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0012466:	0f b6 c0             	movzx  eax,al
c0012469:	c1 e0 08             	shl    eax,0x8
c001246c:	89 d1                	mov    ecx,edx
c001246e:	09 c1                	or     ecx,eax
c0012470:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012474:	8d 50 02             	lea    edx,[eax+0x2]
c0012477:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001247b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001247f:	0f b6 c0             	movzx  eax,al
c0012482:	c1 e0 10             	shl    eax,0x10
c0012485:	09 c1                	or     ecx,eax
c0012487:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001248b:	8d 50 03             	lea    edx,[eax+0x3]
c001248e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012492:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012496:	0f b6 c0             	movzx  eax,al
c0012499:	c1 e0 18             	shl    eax,0x18
c001249c:	09 c8                	or     eax,ecx
c001249e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00124a2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00124a7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00124ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00124af:	01 d0                	add    eax,edx
c00124b1:	83 c0 2c             	add    eax,0x2c
c00124b4:	8a 00                	mov    al,BYTE PTR [eax]
c00124b6:	0f b6 c0             	movzx  eax,al
c00124b9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00124bd:	8d 4a 01             	lea    ecx,[edx+0x1]
c00124c0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00124c4:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00124c8:	0f b6 d2             	movzx  edx,dl
c00124cb:	c1 e2 08             	shl    edx,0x8
c00124ce:	09 d0                	or     eax,edx
c00124d0:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00124d5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00124da:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00124df:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00124e3:	88 90 e0 80 02 c0    	mov    BYTE PTR [eax-0x3ffd7f20],dl
c00124e9:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00124ee:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00124f3:	66 89 84 12 e0 92 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd6d20],ax
c00124fb:	e9 b0 00 00 00       	jmp    c00125b0 <scanMADT()+0x4b8>
c0012500:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0012505:	0f 85 99 00 00 00    	jne    c00125a4 <scanMADT()+0x4ac>
c001250b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001250f:	8d 50 01             	lea    edx,[eax+0x1]
c0012512:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012516:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001251a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001251e:	0f b6 c0             	movzx  eax,al
c0012521:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012525:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012529:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001252d:	01 d0                	add    eax,edx
c001252f:	83 c0 2c             	add    eax,0x2c
c0012532:	8a 00                	mov    al,BYTE PTR [eax]
c0012534:	0f b6 d0             	movzx  edx,al
c0012537:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001253b:	8d 48 01             	lea    ecx,[eax+0x1]
c001253e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012542:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0012546:	0f b6 c0             	movzx  eax,al
c0012549:	c1 e0 08             	shl    eax,0x8
c001254c:	09 d0                	or     eax,edx
c001254e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012552:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0012557:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001255b:	8d 50 01             	lea    edx,[eax+0x1]
c001255e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012562:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012566:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001256a:	0f b6 c0             	movzx  eax,al
c001256d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012575:	c1 e0 08             	shl    eax,0x8
c0012578:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001257c:	89 c1                	mov    ecx,eax
c001257e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012582:	c1 e0 18             	shl    eax,0x18
c0012585:	89 c3                	mov    ebx,eax
c0012587:	a1 50 92 02 c0       	mov    eax,ds:0xc0029250
c001258c:	8d 50 01             	lea    edx,[eax+0x1]
c001258f:	89 15 50 92 02 c0    	mov    DWORD PTR ds:0xc0029250,edx
c0012595:	09 d9                	or     ecx,ebx
c0012597:	89 ca                	mov    edx,ecx
c0012599:	89 14 85 60 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6da0],edx
c00125a0:	eb 0e                	jmp    c00125b0 <scanMADT()+0x4b8>
c00125a2:	66 90                	xchg   ax,ax
c00125a4:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00125a9:	75 05                	jne    c00125b0 <scanMADT()+0x4b8>
c00125ab:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00125b0:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00125b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00125b9:	01 d0                	add    eax,edx
c00125bb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00125bf:	e9 68 fc ff ff       	jmp    c001222c <scanMADT()+0x134>
c00125c4:	90                   	nop
c00125c5:	eb 05                	jmp    c00125cc <scanMADT()+0x4d4>
c00125c7:	90                   	nop
c00125c8:	90                   	nop
c00125c9:	8d 76 00             	lea    esi,[esi+0x0]
c00125cc:	83 c4 38             	add    esp,0x38
c00125cf:	5b                   	pop    ebx
c00125d0:	c3                   	ret    
c00125d1:	90                   	nop
c00125d2:	66 90                	xchg   ax,ax

c00125d4 <ACPI::ACPI()>:
c00125d4:	83 ec 0c             	sub    esp,0xc
c00125d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125db:	83 ec 08             	sub    esp,0x8
c00125de:	68 a3 5d 02 c0       	push   0xc0025da3
c00125e3:	50                   	push   eax
c00125e4:	e8 d5 c1 ff ff       	call   c000e7be <Device::Device(char const*)>
c00125e9:	83 c4 10             	add    esp,0x10
c00125ec:	ba 64 5f 02 c0       	mov    edx,0xc0025f64
c00125f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125f5:	89 10                	mov    DWORD PTR [eax],edx
c00125f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125fb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0012602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012606:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0012610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012614:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001261e:	83 ec 0c             	sub    esp,0xc
c0012621:	68 a8 5d 02 c0       	push   0xc0025da8
c0012626:	e8 8a 77 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001262b:	83 c4 10             	add    esp,0x10
c001262e:	e8 c5 fa ff ff       	call   c00120f8 <scanMADT()>
c0012633:	90                   	nop
c0012634:	83 c4 0c             	add    esp,0xc
c0012637:	c3                   	ret    

c0012638 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0012638:	83 ec 2c             	sub    esp,0x2c
c001263b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001263f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012643:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0012647:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001264b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0012650:	88 d0                	mov    al,dl
c0012652:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0012656:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001265b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012663:	90                   	nop
c0012664:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012668:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001266e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012672:	0f 8d 9c 00 00 00    	jge    c0012714 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0012678:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001267c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012680:	83 c2 2a             	add    edx,0x2a
c0012683:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0012687:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c001268c:	75 7a                	jne    c0012708 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c001268e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012692:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012696:	83 c2 2a             	add    edx,0x2a
c0012699:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001269d:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00126a1:	75 65                	jne    c0012708 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c00126a3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00126a8:	74 3a                	je     c00126e4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c00126aa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126ae:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00126b2:	83 c2 2a             	add    edx,0x2a
c00126b5:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00126b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126bd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00126c0:	39 c2                	cmp    edx,eax
c00126c2:	74 10                	je     c00126d4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c00126c4:	83 ec 0c             	sub    esp,0xc
c00126c7:	68 fc 5b 02 c0       	push   0xc0025bfc
c00126cc:	e8 58 2a 00 00       	call   c0015129 <Krnl::panic(char const*)>
c00126d1:	83 c4 10             	add    esp,0x10
c00126d4:	83 ec 0c             	sub    esp,0xc
c00126d7:	68 b6 5d 02 c0       	push   0xc0025db6
c00126dc:	e8 48 2a 00 00       	call   c0015129 <Krnl::panic(char const*)>
c00126e1:	83 c4 10             	add    esp,0x10
c00126e4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00126e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126ec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00126f0:	83 c2 2a             	add    edx,0x2a
c00126f3:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00126f7:	8b 02                	mov    eax,DWORD PTR [edx]
c00126f9:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00126fc:	89 01                	mov    DWORD PTR [ecx],eax
c00126fe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0012701:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012706:	66 90                	xchg   ax,ax
c0012708:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001270c:	e9 53 ff ff ff       	jmp    c0012664 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0012711:	8d 76 00             	lea    esi,[esi+0x0]
c0012714:	90                   	nop
c0012715:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012719:	83 c4 2c             	add    esp,0x2c
c001271c:	c2 04 00             	ret    0x4
c001271f:	90                   	nop

c0012720 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0012720:	83 ec 1c             	sub    esp,0x1c
c0012723:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012727:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001272b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001272f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012734:	88 c8                	mov    al,cl
c0012736:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001273a:	88 d0                	mov    al,dl
c001273c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0012740:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012744:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001274a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001274e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0012751:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0012755:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0012759:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001275d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012763:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012767:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001276a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001276e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0012773:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012777:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001277d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0012781:	8d 48 01             	lea    ecx,[eax+0x1]
c0012784:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012788:	83 c2 2a             	add    edx,0x2a
c001278b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001278f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012793:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012799:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001279d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00127a0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00127a4:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00127a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127ac:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00127b2:	8d 50 01             	lea    edx,[eax+0x1]
c00127b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127b9:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00127bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127c3:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00127c9:	3d 00 02 00 00       	cmp    eax,0x200
c00127ce:	75 10                	jne    c00127e0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00127d0:	83 ec 0c             	sub    esp,0xc
c00127d3:	68 c5 5d 02 c0       	push   0xc0025dc5
c00127d8:	e8 4c 29 00 00       	call   c0015129 <Krnl::panic(char const*)>
c00127dd:	83 c4 10             	add    esp,0x10
c00127e0:	90                   	nop
c00127e1:	83 c4 1c             	add    esp,0x1c
c00127e4:	c3                   	ret    
c00127e5:	90                   	nop
c00127e6:	66 90                	xchg   ax,ax

c00127e8 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00127e8:	b8 00 00 00 00       	mov    eax,0x0
c00127ed:	c3                   	ret    
c00127ee:	66 90                	xchg   ax,ax

c00127f0 <ACPI::detectPCI()>:
c00127f0:	53                   	push   ebx
c00127f1:	83 ec 68             	sub    esp,0x68
c00127f4:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c00127f9:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c00127fe:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0012803:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012809:	83 e0 04             	and    eax,0x4
c001280c:	84 c0                	test   al,al
c001280e:	74 2c                	je     c001283c <ACPI::detectPCI()+0x4c>
c0012810:	a1 48 92 02 c0       	mov    eax,ds:0xc0029248
c0012815:	83 ec 08             	sub    esp,0x8
c0012818:	68 e2 5d 02 c0       	push   0xc0025de2
c001281d:	50                   	push   eax
c001281e:	e8 5d f8 ff ff       	call   c0012080 <findDataTable(unsigned char*, char*)>
c0012823:	83 c4 10             	add    esp,0x10
c0012826:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001282a:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c001282f:	74 0b                	je     c001283c <ACPI::detectPCI()+0x4c>
c0012831:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012836:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c001283b:	90                   	nop
c001283c:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c0012844:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012848:	8a 00                	mov    al,BYTE PTR [eax]
c001284a:	3c 01                	cmp    al,0x1
c001284c:	75 0e                	jne    c001285c <ACPI::detectPCI()+0x6c>
c001284e:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012853:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012858:	eb 2a                	jmp    c0012884 <ACPI::detectPCI()+0x94>
c001285a:	66 90                	xchg   ax,ax
c001285c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012860:	8a 00                	mov    al,BYTE PTR [eax]
c0012862:	3c 02                	cmp    al,0x2
c0012864:	75 1e                	jne    c0012884 <ACPI::detectPCI()+0x94>
c0012866:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001286b:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012870:	74 12                	je     c0012884 <ACPI::detectPCI()+0x94>
c0012872:	83 ec 0c             	sub    esp,0xc
c0012875:	68 2c 5c 02 c0       	push   0xc0025c2c
c001287a:	e8 aa 28 00 00       	call   c0015129 <Krnl::panic(char const*)>
c001287f:	83 c4 10             	add    esp,0x10
c0012882:	66 90                	xchg   ax,ax
c0012884:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c0012888:	83 f0 01             	xor    eax,0x1
c001288b:	84 c0                	test   al,al
c001288d:	74 41                	je     c00128d0 <ACPI::detectPCI()+0xe0>
c001288f:	e8 bc d8 fe ff       	call   c0000150 <manualPCIProbe>
c0012894:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0012898:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c001289d:	75 0d                	jne    c00128ac <ACPI::detectPCI()+0xbc>
c001289f:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00128a4:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00128a9:	eb 25                	jmp    c00128d0 <ACPI::detectPCI()+0xe0>
c00128ab:	90                   	nop
c00128ac:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c00128b1:	75 1d                	jne    c00128d0 <ACPI::detectPCI()+0xe0>
c00128b3:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00128b8:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00128bd:	74 11                	je     c00128d0 <ACPI::detectPCI()+0xe0>
c00128bf:	83 ec 0c             	sub    esp,0xc
c00128c2:	68 2c 5c 02 c0       	push   0xc0025c2c
c00128c7:	e8 5d 28 00 00       	call   c0015129 <Krnl::panic(char const*)>
c00128cc:	83 c4 10             	add    esp,0x10
c00128cf:	90                   	nop
c00128d0:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c00128d5:	0f 84 49 03 00 00    	je     c0012c24 <ACPI::detectPCI()+0x434>
c00128db:	83 ec 0c             	sub    esp,0xc
c00128de:	68 e7 5d 02 c0       	push   0xc0025de7
c00128e3:	e8 cd 74 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00128e8:	83 c4 10             	add    esp,0x10
c00128eb:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00128f0:	0f 84 8e 00 00 00    	je     c0012984 <ACPI::detectPCI()+0x194>
c00128f6:	a1 00 8a 02 c0       	mov    eax,ds:0xc0028a00
c00128fb:	25 00 08 00 00       	and    eax,0x800
c0012900:	0f 84 16 01 00 00    	je     c0012a1c <ACPI::detectPCI()+0x22c>
c0012906:	83 ec 0c             	sub    esp,0xc
c0012909:	68 54 5c 02 c0       	push   0xc0025c54
c001290e:	e8 a2 74 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0012913:	83 c4 10             	add    esp,0x10
c0012916:	a1 00 8a 02 c0       	mov    eax,ds:0xc0028a00
c001291b:	25 80 00 00 00       	and    eax,0x80
c0012920:	0f 85 f6 00 00 00    	jne    c0012a1c <ACPI::detectPCI()+0x22c>
c0012926:	66 90                	xchg   ax,ax
c0012928:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c001292f:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c0012934:	89 c2                	mov    edx,eax
c0012936:	ec                   	in     al,dx
c0012937:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001293b:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001293f:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c0012943:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c0012948:	74 0a                	je     c0012954 <ACPI::detectPCI()+0x164>
c001294a:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c001294f:	74 03                	je     c0012954 <ACPI::detectPCI()+0x164>
c0012951:	eb d5                	jmp    c0012928 <ACPI::detectPCI()+0x138>
c0012953:	90                   	nop
c0012954:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c001295b:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c0012960:	89 c2                	mov    edx,eax
c0012962:	ec                   	in     al,dx
c0012963:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c0012967:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001296b:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c001296f:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c0012974:	74 de                	je     c0012954 <ACPI::detectPCI()+0x164>
c0012976:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c001297b:	0f 85 93 00 00 00    	jne    c0012a14 <ACPI::detectPCI()+0x224>
c0012981:	eb d1                	jmp    c0012954 <ACPI::detectPCI()+0x164>
c0012983:	90                   	nop
c0012984:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c0012988:	83 f0 01             	xor    eax,0x1
c001298b:	84 c0                	test   al,al
c001298d:	0f 84 89 00 00 00    	je     c0012a1c <ACPI::detectPCI()+0x22c>
c0012993:	a1 00 8a 02 c0       	mov    eax,ds:0xc0028a00
c0012998:	25 00 08 00 00       	and    eax,0x800
c001299d:	74 7d                	je     c0012a1c <ACPI::detectPCI()+0x22c>
c001299f:	83 ec 0c             	sub    esp,0xc
c00129a2:	68 78 5c 02 c0       	push   0xc0025c78
c00129a7:	e8 09 74 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00129ac:	83 c4 10             	add    esp,0x10
c00129af:	a1 00 8a 02 c0       	mov    eax,ds:0xc0028a00
c00129b4:	25 80 00 00 00       	and    eax,0x80
c00129b9:	75 61                	jne    c0012a1c <ACPI::detectPCI()+0x22c>
c00129bb:	90                   	nop
c00129bc:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c00129c3:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c00129c8:	89 c2                	mov    edx,eax
c00129ca:	ec                   	in     al,dx
c00129cb:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c00129cf:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c00129d3:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c00129d7:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c00129dc:	74 0a                	je     c00129e8 <ACPI::detectPCI()+0x1f8>
c00129de:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c00129e3:	74 03                	je     c00129e8 <ACPI::detectPCI()+0x1f8>
c00129e5:	eb d5                	jmp    c00129bc <ACPI::detectPCI()+0x1cc>
c00129e7:	90                   	nop
c00129e8:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c00129ef:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c00129f4:	89 c2                	mov    edx,eax
c00129f6:	ec                   	in     al,dx
c00129f7:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00129fb:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00129ff:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c0012a03:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c0012a08:	74 de                	je     c00129e8 <ACPI::detectPCI()+0x1f8>
c0012a0a:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c0012a0f:	75 07                	jne    c0012a18 <ACPI::detectPCI()+0x228>
c0012a11:	eb d5                	jmp    c00129e8 <ACPI::detectPCI()+0x1f8>
c0012a13:	90                   	nop
c0012a14:	90                   	nop
c0012a15:	eb 05                	jmp    c0012a1c <ACPI::detectPCI()+0x22c>
c0012a17:	90                   	nop
c0012a18:	90                   	nop
c0012a19:	8d 76 00             	lea    esi,[esi+0x0]
c0012a1c:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c0012a24:	83 ec 0c             	sub    esp,0xc
c0012a27:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012a2b:	e8 2b 73 ff ff       	call   c0009d5b <malloc>
c0012a30:	83 c4 10             	add    esp,0x10
c0012a33:	89 c3                	mov    ebx,eax
c0012a35:	83 ec 0c             	sub    esp,0xc
c0012a38:	53                   	push   ebx
c0012a39:	e8 9c af 00 00       	call   c001d9da <PCI::PCI()>
c0012a3e:	83 c4 10             	add    esp,0x10
c0012a41:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c0012a45:	a1 00 8a 02 c0       	mov    eax,ds:0xc0028a00
c0012a4a:	25 00 08 00 00       	and    eax,0x800
c0012a4f:	74 7b                	je     c0012acc <ACPI::detectPCI()+0x2dc>
c0012a51:	83 ec 0c             	sub    esp,0xc
c0012a54:	68 ff 5d 02 c0       	push   0xc0025dff
c0012a59:	e8 57 73 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0012a5e:	83 c4 10             	add    esp,0x10
c0012a61:	a1 00 8a 02 c0       	mov    eax,ds:0xc0028a00
c0012a66:	25 80 00 00 00       	and    eax,0x80
c0012a6b:	75 5f                	jne    c0012acc <ACPI::detectPCI()+0x2dc>
c0012a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0012a70:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c0012a77:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0012a7c:	89 c2                	mov    edx,eax
c0012a7e:	ec                   	in     al,dx
c0012a7f:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c0012a83:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c0012a87:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0012a8b:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c0012a90:	74 0a                	je     c0012a9c <ACPI::detectPCI()+0x2ac>
c0012a92:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c0012a97:	74 03                	je     c0012a9c <ACPI::detectPCI()+0x2ac>
c0012a99:	eb d5                	jmp    c0012a70 <ACPI::detectPCI()+0x280>
c0012a9b:	90                   	nop
c0012a9c:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c0012aa3:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c0012aa8:	89 c2                	mov    edx,eax
c0012aaa:	ec                   	in     al,dx
c0012aab:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0012aaf:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c0012ab3:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012ab7:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c0012abc:	74 de                	je     c0012a9c <ACPI::detectPCI()+0x2ac>
c0012abe:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c0012ac3:	75 03                	jne    c0012ac8 <ACPI::detectPCI()+0x2d8>
c0012ac5:	eb d5                	jmp    c0012a9c <ACPI::detectPCI()+0x2ac>
c0012ac7:	90                   	nop
c0012ac8:	90                   	nop
c0012ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0012acc:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012ad0:	83 ec 08             	sub    esp,0x8
c0012ad3:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012ad7:	50                   	push   eax
c0012ad8:	e8 dd ba ff ff       	call   c000e5ba <Device::addChild(Device*)>
c0012add:	83 c4 10             	add    esp,0x10
c0012ae0:	a1 00 8a 02 c0       	mov    eax,ds:0xc0028a00
c0012ae5:	25 00 08 00 00       	and    eax,0x800
c0012aea:	74 78                	je     c0012b64 <ACPI::detectPCI()+0x374>
c0012aec:	83 ec 0c             	sub    esp,0xc
c0012aef:	68 05 5e 02 c0       	push   0xc0025e05
c0012af4:	e8 bc 72 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0012af9:	83 c4 10             	add    esp,0x10
c0012afc:	a1 00 8a 02 c0       	mov    eax,ds:0xc0028a00
c0012b01:	25 80 00 00 00       	and    eax,0x80
c0012b06:	75 5c                	jne    c0012b64 <ACPI::detectPCI()+0x374>
c0012b08:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c0012b0f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0012b14:	89 c2                	mov    edx,eax
c0012b16:	ec                   	in     al,dx
c0012b17:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0012b1b:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0012b1f:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c0012b23:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c0012b28:	74 0a                	je     c0012b34 <ACPI::detectPCI()+0x344>
c0012b2a:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c0012b2f:	74 03                	je     c0012b34 <ACPI::detectPCI()+0x344>
c0012b31:	eb d5                	jmp    c0012b08 <ACPI::detectPCI()+0x318>
c0012b33:	90                   	nop
c0012b34:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c0012b3b:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0012b40:	89 c2                	mov    edx,eax
c0012b42:	ec                   	in     al,dx
c0012b43:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0012b47:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0012b4b:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c0012b4f:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c0012b54:	74 de                	je     c0012b34 <ACPI::detectPCI()+0x344>
c0012b56:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c0012b5b:	75 03                	jne    c0012b60 <ACPI::detectPCI()+0x370>
c0012b5d:	eb d5                	jmp    c0012b34 <ACPI::detectPCI()+0x344>
c0012b5f:	90                   	nop
c0012b60:	90                   	nop
c0012b61:	8d 76 00             	lea    esi,[esi+0x0]
c0012b64:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0012b68:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b6a:	83 c0 08             	add    eax,0x8
c0012b6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b6f:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012b74:	74 0a                	je     c0012b80 <ACPI::detectPCI()+0x390>
c0012b76:	ba 01 00 00 00       	mov    edx,0x1
c0012b7b:	eb 0b                	jmp    c0012b88 <ACPI::detectPCI()+0x398>
c0012b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0012b80:	ba 02 00 00 00       	mov    edx,0x2
c0012b85:	8d 76 00             	lea    esi,[esi+0x0]
c0012b88:	6a 00                	push   0x0
c0012b8a:	6a 00                	push   0x0
c0012b8c:	52                   	push   edx
c0012b8d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012b91:	ff d0                	call   eax
c0012b93:	83 c4 10             	add    esp,0x10
c0012b96:	a1 00 8a 02 c0       	mov    eax,ds:0xc0028a00
c0012b9b:	25 00 08 00 00       	and    eax,0x800
c0012ba0:	0f 84 26 01 00 00    	je     c0012ccc <ACPI::detectPCI()+0x4dc>
c0012ba6:	83 ec 0c             	sub    esp,0xc
c0012ba9:	68 0b 5e 02 c0       	push   0xc0025e0b
c0012bae:	e8 02 72 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0012bb3:	83 c4 10             	add    esp,0x10
c0012bb6:	a1 00 8a 02 c0       	mov    eax,ds:0xc0028a00
c0012bbb:	25 80 00 00 00       	and    eax,0x80
c0012bc0:	0f 85 06 01 00 00    	jne    c0012ccc <ACPI::detectPCI()+0x4dc>
c0012bc6:	66 90                	xchg   ax,ax
c0012bc8:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c0012bcf:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012bd4:	89 c2                	mov    edx,eax
c0012bd6:	ec                   	in     al,dx
c0012bd7:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012bdb:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0012bdf:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0012be3:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c0012be8:	74 0a                	je     c0012bf4 <ACPI::detectPCI()+0x404>
c0012bea:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c0012bef:	74 03                	je     c0012bf4 <ACPI::detectPCI()+0x404>
c0012bf1:	eb d5                	jmp    c0012bc8 <ACPI::detectPCI()+0x3d8>
c0012bf3:	90                   	nop
c0012bf4:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c0012bfb:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0012c00:	89 c2                	mov    edx,eax
c0012c02:	ec                   	in     al,dx
c0012c03:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0012c07:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0012c0b:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c0012c0f:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c0012c14:	74 de                	je     c0012bf4 <ACPI::detectPCI()+0x404>
c0012c16:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c0012c1b:	0f 85 a7 00 00 00    	jne    c0012cc8 <ACPI::detectPCI()+0x4d8>
c0012c21:	eb d1                	jmp    c0012bf4 <ACPI::detectPCI()+0x404>
c0012c23:	90                   	nop
c0012c24:	83 ec 0c             	sub    esp,0xc
c0012c27:	68 11 5e 02 c0       	push   0xc0025e11
c0012c2c:	e8 16 a4 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0012c31:	83 c4 10             	add    esp,0x10
c0012c34:	83 ec 0c             	sub    esp,0xc
c0012c37:	68 1c 5e 02 c0       	push   0xc0025e1c
c0012c3c:	e8 74 71 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0012c41:	83 c4 10             	add    esp,0x10
c0012c44:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c0012c4c:	83 ec 0c             	sub    esp,0xc
c0012c4f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c53:	e8 03 71 ff ff       	call   c0009d5b <malloc>
c0012c58:	83 c4 10             	add    esp,0x10
c0012c5b:	89 c3                	mov    ebx,eax
c0012c5d:	83 ec 0c             	sub    esp,0xc
c0012c60:	53                   	push   ebx
c0012c61:	e8 de be 00 00       	call   c001eb44 <IDE::IDE()>
c0012c66:	83 c4 10             	add    esp,0x10
c0012c69:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012c6d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012c71:	83 ec 08             	sub    esp,0x8
c0012c74:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012c78:	50                   	push   eax
c0012c79:	e8 3c b9 ff ff       	call   c000e5ba <Device::addChild(Device*)>
c0012c7e:	83 c4 10             	add    esp,0x10
c0012c81:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012c85:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0012c8f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012c93:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0012c9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012ca0:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0012ca9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012cad:	8b 00                	mov    eax,DWORD PTR [eax]
c0012caf:	83 c0 08             	add    eax,0x8
c0012cb2:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cb4:	6a 00                	push   0x0
c0012cb6:	6a 00                	push   0x0
c0012cb8:	6a 00                	push   0x0
c0012cba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012cbe:	ff d0                	call   eax
c0012cc0:	83 c4 10             	add    esp,0x10
c0012cc3:	eb 07                	jmp    c0012ccc <ACPI::detectPCI()+0x4dc>
c0012cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0012cc8:	90                   	nop
c0012cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0012ccc:	90                   	nop
c0012ccd:	83 c4 68             	add    esp,0x68
c0012cd0:	5b                   	pop    ebx
c0012cd1:	c3                   	ret    
c0012cd2:	66 90                	xchg   ax,ax

c0012cd4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0012cd4:	83 ec 1c             	sub    esp,0x1c
c0012cd7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012cdb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0012cde:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012ce2:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0012ce7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012cec:	83 ec 08             	sub    esp,0x8
c0012cef:	52                   	push   edx
c0012cf0:	50                   	push   eax
c0012cf1:	e8 2c 66 ff ff       	call   c0009322 <Computer::readCMOS(unsigned char)>
c0012cf6:	83 c4 10             	add    esp,0x10
c0012cf9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0012cfd:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0012d02:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012d07:	83 ec 04             	sub    esp,0x4
c0012d0a:	6a 01                	push   0x1
c0012d0c:	52                   	push   edx
c0012d0d:	50                   	push   eax
c0012d0e:	e8 f3 67 ff ff       	call   c0009506 <Computer::writeCMOS(unsigned char, unsigned char)>
c0012d13:	83 c4 10             	add    esp,0x10
c0012d16:	90                   	nop
c0012d17:	83 c4 1c             	add    esp,0x1c
c0012d1a:	c3                   	ret    
c0012d1b:	90                   	nop

c0012d1c <ACPI::sleep()>:
c0012d1c:	83 ec 0c             	sub    esp,0xc
c0012d1f:	83 ec 0c             	sub    esp,0xc
c0012d22:	68 31 5e 02 c0       	push   0xc0025e31
c0012d27:	e8 1b a3 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0012d2c:	83 c4 10             	add    esp,0x10
c0012d2f:	a1 20 90 02 c0       	mov    eax,ds:0xc0029020
c0012d34:	85 c0                	test   eax,eax
c0012d36:	74 18                	je     c0012d50 <ACPI::sleep()+0x34>
c0012d38:	83 ec 0c             	sub    esp,0xc
c0012d3b:	68 3e 5e 02 c0       	push   0xc0025e3e
c0012d40:	e8 02 a3 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0012d45:	83 c4 10             	add    esp,0x10
c0012d48:	a1 20 90 02 c0       	mov    eax,ds:0xc0029020
c0012d4d:	ff d0                	call   eax
c0012d4f:	90                   	nop
c0012d50:	90                   	nop
c0012d51:	83 c4 0c             	add    esp,0xc
c0012d54:	c3                   	ret    
c0012d55:	90                   	nop
c0012d56:	66 90                	xchg   ax,ax

c0012d58 <ACPI::open(int, int, void*)>:
c0012d58:	57                   	push   edi
c0012d59:	56                   	push   esi
c0012d5a:	53                   	push   ebx
c0012d5b:	81 ec 70 01 00 00    	sub    esp,0x170
c0012d61:	83 ec 0c             	sub    esp,0xc
c0012d64:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012d6b:	e8 80 fa ff ff       	call   c00127f0 <ACPI::detectPCI()>
c0012d70:	83 c4 10             	add    esp,0x10
c0012d73:	83 ec 0c             	sub    esp,0xc
c0012d76:	68 9c 5c 02 c0       	push   0xc0025c9c
c0012d7b:	e8 35 70 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0012d80:	83 c4 10             	add    esp,0x10
c0012d83:	83 ec 0c             	sub    esp,0xc
c0012d86:	68 58 5e 02 c0       	push   0xc0025e58
c0012d8b:	e8 47 4b 00 00       	call   c00178d7 <Thr::loadKernelSymbolTable(char const*)>
c0012d90:	83 c4 10             	add    esp,0x10
c0012d93:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c0012d9b:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c0012da6:	83 ec 0c             	sub    esp,0xc
c0012da9:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012db0:	e8 a6 6f ff ff       	call   c0009d5b <malloc>
c0012db5:	83 c4 10             	add    esp,0x10
c0012db8:	89 c3                	mov    ebx,eax
c0012dba:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c0012dbf:	83 ec 04             	sub    esp,0x4
c0012dc2:	50                   	push   eax
c0012dc3:	68 76 5e 02 c0       	push   0xc0025e76
c0012dc8:	53                   	push   ebx
c0012dc9:	e8 e4 a7 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0012dce:	83 c4 10             	add    esp,0x10
c0012dd1:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0012dd8:	83 ec 08             	sub    esp,0x8
c0012ddb:	6a 01                	push   0x1
c0012ddd:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012de4:	e8 a3 a8 ff ff       	call   c000d68c <File::open(FileOpenMode)>
c0012de9:	83 c4 10             	add    esp,0x10
c0012dec:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0012df3:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c0012dfb:	75 17                	jne    c0012e14 <ACPI::open(int, int, void*)+0xbc>
c0012dfd:	83 ec 0c             	sub    esp,0xc
c0012e00:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012e07:	e8 de a8 ff ff       	call   c000d6ea <File::close()>
c0012e0c:	83 c4 10             	add    esp,0x10
c0012e0f:	eb 0b                	jmp    c0012e1c <ACPI::open(int, int, void*)+0xc4>
c0012e11:	8d 76 00             	lea    esi,[esi+0x0]
c0012e14:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0012e1c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0012e24:	74 1e                	je     c0012e44 <ACPI::open(int, int, void*)+0xec>
c0012e26:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0012e2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e2f:	83 c0 08             	add    eax,0x8
c0012e32:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e34:	83 ec 0c             	sub    esp,0xc
c0012e37:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012e3e:	ff d0                	call   eax
c0012e40:	83 c4 10             	add    esp,0x10
c0012e43:	90                   	nop
c0012e44:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c0012e4b:	83 f0 01             	xor    eax,0x1
c0012e4e:	84 c0                	test   al,al
c0012e50:	74 42                	je     c0012e94 <ACPI::open(int, int, void*)+0x13c>
c0012e52:	83 ec 0c             	sub    esp,0xc
c0012e55:	68 94 5e 02 c0       	push   0xc0025e94
c0012e5a:	e8 56 6f ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0012e5f:	83 c4 10             	add    esp,0x10
c0012e62:	83 ec 04             	sub    esp,0x4
c0012e65:	6a 0c                	push   0xc
c0012e67:	68 af 5e 02 c0       	push   0xc0025eaf
c0012e6c:	68 c0 5e 02 c0       	push   0xc0025ec0
c0012e71:	e8 cb 30 00 00       	call   c0015f41 <Reg::readIntWithDefault(char*, char*, int)>
c0012e76:	83 c4 10             	add    esp,0x10
c0012e79:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0012e80:	83 ec 0c             	sub    esp,0xc
c0012e83:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c0012e8a:	e8 9c 90 ff ff       	call   c000bf2b <Virt::setupPageSwapping(int)>
c0012e8f:	83 c4 10             	add    esp,0x10
c0012e92:	66 90                	xchg   ax,ax
c0012e94:	83 ec 0c             	sub    esp,0xc
c0012e97:	68 06 44 02 c0       	push   0xc0024406
c0012e9c:	e8 14 6f ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0012ea1:	83 c4 10             	add    esp,0x10
c0012ea4:	8b 1d e8 89 02 c0    	mov    ebx,DWORD PTR ds:0xc00289e8
c0012eaa:	83 ec 08             	sub    esp,0x8
c0012ead:	6a 01                	push   0x1
c0012eaf:	68 c7 5e 02 c0       	push   0xc0025ec7
c0012eb4:	e8 95 54 00 00       	call   c001834e <Thr::loadDLL(char const*, bool)>
c0012eb9:	83 c4 10             	add    esp,0x10
c0012ebc:	83 ec 08             	sub    esp,0x8
c0012ebf:	53                   	push   ebx
c0012ec0:	50                   	push   eax
c0012ec1:	e8 b9 56 00 00       	call   c001857f <Thr::executeDLL(unsigned long, void*)>
c0012ec6:	83 c4 10             	add    esp,0x10
c0012ec9:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012ed0:	83 ec 08             	sub    esp,0x8
c0012ed3:	6a 12                	push   0x12
c0012ed5:	50                   	push   eax
c0012ed6:	e8 63 ba ff ff       	call   c000e93e <getDevicesOfType(DeviceType)>
c0012edb:	83 c4 0c             	add    esp,0xc
c0012ede:	66 90                	xchg   ax,ax
c0012ee0:	83 ec 0c             	sub    esp,0xc
c0012ee3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012eea:	50                   	push   eax
c0012eeb:	e8 0c 07 01 00       	call   c00235fc <LinkedList<Device>::isEmpty()>
c0012ef0:	83 c4 10             	add    esp,0x10
c0012ef3:	83 f0 01             	xor    eax,0x1
c0012ef6:	84 c0                	test   al,al
c0012ef8:	0f 84 46 01 00 00    	je     c0013044 <ACPI::open(int, int, void*)+0x2ec>
c0012efe:	83 ec 0c             	sub    esp,0xc
c0012f01:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012f08:	50                   	push   eax
c0012f09:	e8 0a 07 01 00       	call   c0023618 <LinkedList<Device>::getFirstElement()>
c0012f0e:	83 c4 10             	add    esp,0x10
c0012f11:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0012f18:	83 ec 0c             	sub    esp,0xc
c0012f1b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012f22:	50                   	push   eax
c0012f23:	e8 f8 06 01 00       	call   c0023620 <LinkedList<Device>::removeFirst()>
c0012f28:	83 c4 10             	add    esp,0x10
c0012f2b:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0012f32:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0012f39:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0012f40:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012f44:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0012f4a:	ba 09 00 00 00       	mov    edx,0x9
c0012f4f:	fc                   	cld    
c0012f50:	89 c7                	mov    edi,eax
c0012f52:	89 de                	mov    esi,ebx
c0012f54:	89 d1                	mov    ecx,edx
c0012f56:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012f58:	83 ec 08             	sub    esp,0x8
c0012f5b:	8d 44 24 38          	lea    eax,[esp+0x38]
c0012f5f:	50                   	push   eax
c0012f60:	83 ec 24             	sub    esp,0x24
c0012f63:	89 e0                	mov    eax,esp
c0012f65:	89 c3                	mov    ebx,eax
c0012f67:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012f6b:	ba 09 00 00 00       	mov    edx,0x9
c0012f70:	89 df                	mov    edi,ebx
c0012f72:	89 c6                	mov    esi,eax
c0012f74:	89 d1                	mov    ecx,edx
c0012f76:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012f78:	e8 3b af 00 00       	call   c001deb8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0012f7d:	83 c4 30             	add    esp,0x30
c0012f80:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0012f87:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0012f8f:	0f 84 4b ff ff ff    	je     c0012ee0 <ACPI::open(int, int, void*)+0x188>
c0012f95:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0012fa0:	83 ec 0c             	sub    esp,0xc
c0012fa3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0012faa:	e8 ac 6d ff ff       	call   c0009d5b <malloc>
c0012faf:	83 c4 10             	add    esp,0x10
c0012fb2:	89 c3                	mov    ebx,eax
c0012fb4:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c0012fb9:	83 ec 04             	sub    esp,0x4
c0012fbc:	50                   	push   eax
c0012fbd:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012fc4:	53                   	push   ebx
c0012fc5:	e8 e8 a5 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0012fca:	83 c4 10             	add    esp,0x10
c0012fcd:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0012fd4:	83 ec 0c             	sub    esp,0xc
c0012fd7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012fde:	e8 17 a9 ff ff       	call   c000d8fa <File::exists()>
c0012fe3:	83 c4 10             	add    esp,0x10
c0012fe6:	84 c0                	test   al,al
c0012fe8:	74 2a                	je     c0013014 <ACPI::open(int, int, void*)+0x2bc>
c0012fea:	83 ec 08             	sub    esp,0x8
c0012fed:	6a 01                	push   0x1
c0012fef:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012ff6:	e8 53 53 00 00       	call   c001834e <Thr::loadDLL(char const*, bool)>
c0012ffb:	83 c4 10             	add    esp,0x10
c0012ffe:	83 ec 08             	sub    esp,0x8
c0013001:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0013008:	50                   	push   eax
c0013009:	e8 71 55 00 00       	call   c001857f <Thr::executeDLL(unsigned long, void*)>
c001300e:	83 c4 10             	add    esp,0x10
c0013011:	8d 76 00             	lea    esi,[esi+0x0]
c0013014:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001301c:	0f 84 be fe ff ff    	je     c0012ee0 <ACPI::open(int, int, void*)+0x188>
c0013022:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0013029:	8b 00                	mov    eax,DWORD PTR [eax]
c001302b:	83 c0 08             	add    eax,0x8
c001302e:	8b 00                	mov    eax,DWORD PTR [eax]
c0013030:	83 ec 0c             	sub    esp,0xc
c0013033:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001303a:	ff d0                	call   eax
c001303c:	83 c4 10             	add    esp,0x10
c001303f:	e9 9c fe ff ff       	jmp    c0012ee0 <ACPI::open(int, int, void*)+0x188>
c0013044:	83 ec 0c             	sub    esp,0xc
c0013047:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001304e:	50                   	push   eax
c001304f:	e8 a4 05 01 00       	call   c00235f8 <LinkedList<Device>::~LinkedList()>
c0013054:	83 c4 10             	add    esp,0x10
c0013057:	8b 1d e8 89 02 c0    	mov    ebx,DWORD PTR ds:0xc00289e8
c001305d:	83 ec 08             	sub    esp,0x8
c0013060:	6a 01                	push   0x1
c0013062:	68 e2 5e 02 c0       	push   0xc0025ee2
c0013067:	e8 e2 52 00 00       	call   c001834e <Thr::loadDLL(char const*, bool)>
c001306c:	83 c4 10             	add    esp,0x10
c001306f:	83 ec 08             	sub    esp,0x8
c0013072:	53                   	push   ebx
c0013073:	50                   	push   eax
c0013074:	e8 06 55 00 00       	call   c001857f <Thr::executeDLL(unsigned long, void*)>
c0013079:	83 c4 10             	add    esp,0x10
c001307c:	8b 1d e8 89 02 c0    	mov    ebx,DWORD PTR ds:0xc00289e8
c0013082:	83 ec 08             	sub    esp,0x8
c0013085:	6a 01                	push   0x1
c0013087:	68 ff 5e 02 c0       	push   0xc0025eff
c001308c:	e8 bd 52 00 00       	call   c001834e <Thr::loadDLL(char const*, bool)>
c0013091:	83 c4 10             	add    esp,0x10
c0013094:	83 ec 08             	sub    esp,0x8
c0013097:	53                   	push   ebx
c0013098:	50                   	push   eax
c0013099:	e8 e1 54 00 00       	call   c001857f <Thr::executeDLL(unsigned long, void*)>
c001309e:	83 c4 10             	add    esp,0x10
c00130a1:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c00130a6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00130ac:	83 e0 04             	and    eax,0x4
c00130af:	84 c0                	test   al,al
c00130b1:	0f 84 15 01 00 00    	je     c00131cc <ACPI::open(int, int, void*)+0x474>
c00130b7:	83 ec 0c             	sub    esp,0xc
c00130ba:	68 1c 5f 02 c0       	push   0xc0025f1c
c00130bf:	e8 f1 6c ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00130c4:	83 c4 10             	add    esp,0x10
c00130c7:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00130d2:	83 ec 0c             	sub    esp,0xc
c00130d5:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00130dc:	e8 7a 6c ff ff       	call   c0009d5b <malloc>
c00130e1:	83 c4 10             	add    esp,0x10
c00130e4:	89 c3                	mov    ebx,eax
c00130e6:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c00130eb:	83 ec 04             	sub    esp,0x4
c00130ee:	50                   	push   eax
c00130ef:	68 39 5f 02 c0       	push   0xc0025f39
c00130f4:	53                   	push   ebx
c00130f5:	e8 b8 a4 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c00130fa:	83 c4 10             	add    esp,0x10
c00130fd:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0013104:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001310c:	74 1a                	je     c0013128 <ACPI::open(int, int, void*)+0x3d0>
c001310e:	83 ec 0c             	sub    esp,0xc
c0013111:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0013118:	e8 dd a7 ff ff       	call   c000d8fa <File::exists()>
c001311d:	83 c4 10             	add    esp,0x10
c0013120:	84 c0                	test   al,al
c0013122:	74 04                	je     c0013128 <ACPI::open(int, int, void*)+0x3d0>
c0013124:	b0 01                	mov    al,0x1
c0013126:	eb 04                	jmp    c001312c <ACPI::open(int, int, void*)+0x3d4>
c0013128:	b0 00                	mov    al,0x0
c001312a:	66 90                	xchg   ax,ax
c001312c:	84 c0                	test   al,al
c001312e:	74 28                	je     c0013158 <ACPI::open(int, int, void*)+0x400>
c0013130:	83 ec 08             	sub    esp,0x8
c0013133:	6a 01                	push   0x1
c0013135:	68 39 5f 02 c0       	push   0xc0025f39
c001313a:	e8 0f 52 00 00       	call   c001834e <Thr::loadDLL(char const*, bool)>
c001313f:	83 c4 10             	add    esp,0x10
c0013142:	83 ec 08             	sub    esp,0x8
c0013145:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c001314c:	50                   	push   eax
c001314d:	e8 2d 54 00 00       	call   c001857f <Thr::executeDLL(unsigned long, void*)>
c0013152:	83 c4 10             	add    esp,0x10
c0013155:	8d 76 00             	lea    esi,[esi+0x0]
c0013158:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0013160:	74 2a                	je     c001318c <ACPI::open(int, int, void*)+0x434>
c0013162:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001316a:	74 20                	je     c001318c <ACPI::open(int, int, void*)+0x434>
c001316c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0013173:	8b 00                	mov    eax,DWORD PTR [eax]
c0013175:	83 c0 08             	add    eax,0x8
c0013178:	8b 00                	mov    eax,DWORD PTR [eax]
c001317a:	83 ec 0c             	sub    esp,0xc
c001317d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0013184:	ff d0                	call   eax
c0013186:	83 c4 10             	add    esp,0x10
c0013189:	8d 76 00             	lea    esi,[esi+0x0]
c001318c:	a1 48 92 02 c0       	mov    eax,ds:0xc0029248
c0013191:	83 ec 08             	sub    esp,0x8
c0013194:	68 56 5f 02 c0       	push   0xc0025f56
c0013199:	50                   	push   eax
c001319a:	e8 e1 ee ff ff       	call   c0012080 <findDataTable(unsigned char*, char*)>
c001319f:	83 c4 10             	add    esp,0x10
c00131a2:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c00131a9:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00131b1:	74 19                	je     c00131cc <ACPI::open(int, int, void*)+0x474>
c00131b3:	83 ec 08             	sub    esp,0x8
c00131b6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00131bd:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00131c4:	e8 0b fb ff ff       	call   c0012cd4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00131c9:	83 c4 10             	add    esp,0x10
c00131cc:	b8 00 00 00 00       	mov    eax,0x0
c00131d1:	81 c4 70 01 00 00    	add    esp,0x170
c00131d7:	5b                   	pop    ebx
c00131d8:	5e                   	pop    esi
c00131d9:	5f                   	pop    edi
c00131da:	c3                   	ret    
c00131db:	90                   	nop

c00131dc <CPU::close(int, int, void*)>:
c00131dc:	31 c0                	xor    eax,eax
c00131de:	c3                   	ret    
c00131df:	90                   	nop

c00131e0 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00131e0:	55                   	push   ebp
c00131e1:	57                   	push   edi
c00131e2:	56                   	push   esi
c00131e3:	53                   	push   ebx
c00131e4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00131e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00131ec:	89 ce                	mov    esi,ecx
c00131ee:	89 d5                	mov    ebp,edx
c00131f0:	80 f9 04             	cmp    cl,0x4
c00131f3:	75 28                	jne    c001321d <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00131f5:	8d 42 f9             	lea    eax,[edx-0x7]
c00131f8:	3c 03                	cmp    al,0x3
c00131fa:	0f 86 63 01 00 00    	jbe    c0013363 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0013200:	80 fa 03             	cmp    dl,0x3
c0013203:	0f 84 5a 01 00 00    	je     c0013363 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0013209:	8d 7a f2             	lea    edi,[edx-0xe]
c001320c:	b8 b0 82 02 c0       	mov    eax,0xc00282b0
c0013211:	89 fb                	mov    ebx,edi
c0013213:	80 fb 01             	cmp    bl,0x1
c0013216:	77 4e                	ja     c0013266 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0013218:	e9 52 01 00 00       	jmp    c001336f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001321d:	80 f9 05             	cmp    cl,0x5
c0013220:	75 4d                	jne    c001326f <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0013222:	b8 c0 82 02 c0       	mov    eax,0xc00282c0
c0013227:	80 fa 03             	cmp    dl,0x3
c001322a:	0f 86 3f 01 00 00    	jbe    c001336f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013230:	8d 7a fa             	lea    edi,[edx-0x6]
c0013233:	b8 d0 82 02 c0       	mov    eax,0xc00282d0
c0013238:	89 fb                	mov    ebx,edi
c001323a:	80 fb 01             	cmp    bl,0x1
c001323d:	0f 86 2c 01 00 00    	jbe    c001336f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013243:	b8 e0 82 02 c0       	mov    eax,0xc00282e0
c0013248:	80 fa 08             	cmp    dl,0x8
c001324b:	0f 84 1e 01 00 00    	je     c001336f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013251:	89 d7                	mov    edi,edx
c0013253:	b8 f0 82 02 c0       	mov    eax,0xc00282f0
c0013258:	83 e7 fb             	and    edi,0xfffffffb
c001325b:	89 fb                	mov    ebx,edi
c001325d:	80 fb 09             	cmp    bl,0x9
c0013260:	0f 84 09 01 00 00    	je     c001336f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013266:	31 c0                	xor    eax,eax
c0013268:	89 eb                	mov    ebx,ebp
c001326a:	0f b6 fb             	movzx  edi,bl
c001326d:	eb 30                	jmp    c001329f <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001326f:	31 c0                	xor    eax,eax
c0013271:	80 f9 06             	cmp    cl,0x6
c0013274:	75 f2                	jne    c0013268 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0013276:	80 fa 0a             	cmp    dl,0xa
c0013279:	77 ed                	ja     c0013268 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001327b:	bf de 05 00 00       	mov    edi,0x5de
c0013280:	0f a3 d7             	bt     edi,edx
c0013283:	73 e3                	jae    c0013268 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0013285:	b8 00 83 02 c0       	mov    eax,0xc0028300
c001328a:	e9 e0 00 00 00       	jmp    c001336f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001328f:	39 c7                	cmp    edi,eax
c0013291:	0f 84 d3 00 00 00    	je     c001336a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0013297:	40                   	inc    eax
c0013298:	3d d0 00 00 00       	cmp    eax,0xd0
c001329d:	74 09                	je     c00132a8 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001329f:	89 f3                	mov    ebx,esi
c00132a1:	80 fb 0f             	cmp    bl,0xf
c00132a4:	75 f1                	jne    c0013297 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00132a6:	eb e7                	jmp    c001328f <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00132a8:	80 f9 10             	cmp    cl,0x10
c00132ab:	75 14                	jne    c00132c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00132ad:	8d 42 fc             	lea    eax,[edx-0x4]
c00132b0:	83 e0 fb             	and    eax,0xfffffffb
c00132b3:	3c 02                	cmp    al,0x2
c00132b5:	76 34                	jbe    c00132eb <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00132b7:	b8 91 62 02 c0       	mov    eax,0xc0026291
c00132bc:	80 fa 02             	cmp    dl,0x2
c00132bf:	eb 24                	jmp    c00132e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00132c1:	80 f9 11             	cmp    cl,0x11
c00132c4:	75 13                	jne    c00132d9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00132c6:	b8 91 62 02 c0       	mov    eax,0xc0026291
c00132cb:	80 fa 03             	cmp    dl,0x3
c00132ce:	0f 85 9b 00 00 00    	jne    c001336f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132d4:	e9 91 00 00 00       	jmp    c001336a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00132d9:	80 f9 12             	cmp    cl,0x12
c00132dc:	75 14                	jne    c00132f2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00132de:	b8 91 62 02 c0       	mov    eax,0xc0026291
c00132e3:	fe ca                	dec    dl
c00132e5:	0f 85 84 00 00 00    	jne    c001336f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132eb:	b8 20 83 02 c0       	mov    eax,0xc0028320
c00132f0:	eb 7d                	jmp    c001336f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132f2:	80 f9 14             	cmp    cl,0x14
c00132f5:	75 12                	jne    c0013309 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00132f7:	4a                   	dec    edx
c00132f8:	b8 91 62 02 c0       	mov    eax,0xc0026291
c00132fd:	80 fa 01             	cmp    dl,0x1
c0013300:	77 6d                	ja     c001336f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013302:	b8 30 83 02 c0       	mov    eax,0xc0028330
c0013307:	eb 66                	jmp    c001336f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013309:	80 f9 15             	cmp    cl,0x15
c001330c:	75 31                	jne    c001333f <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001330e:	b8 40 83 02 c0       	mov    eax,0xc0028340
c0013313:	80 fa 01             	cmp    dl,0x1
c0013316:	74 57                	je     c001336f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013318:	b8 91 62 02 c0       	mov    eax,0xc0026291
c001331d:	80 fa 13             	cmp    dl,0x13
c0013320:	76 0c                	jbe    c001332e <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0013322:	80 fa 30             	cmp    dl,0x30
c0013325:	75 48                	jne    c001336f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013327:	b8 60 83 02 c0       	mov    eax,0xc0028360
c001332c:	eb 41                	jmp    c001336f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001332e:	b9 04 00 09 00       	mov    ecx,0x90004
c0013333:	0f a3 d1             	bt     ecx,edx
c0013336:	73 37                	jae    c001336f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013338:	b8 50 83 02 c0       	mov    eax,0xc0028350
c001333d:	eb 30                	jmp    c001336f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001333f:	b8 91 62 02 c0       	mov    eax,0xc0026291
c0013344:	80 f9 16             	cmp    cl,0x16
c0013347:	75 26                	jne    c001336f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013349:	b8 70 83 02 c0       	mov    eax,0xc0028370
c001334e:	84 d2                	test   dl,dl
c0013350:	74 1d                	je     c001336f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013352:	b8 91 62 02 c0       	mov    eax,0xc0026291
c0013357:	80 fa 30             	cmp    dl,0x30
c001335a:	75 13                	jne    c001336f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001335c:	b8 80 83 02 c0       	mov    eax,0xc0028380
c0013361:	eb 0c                	jmp    c001336f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013363:	b8 a0 82 02 c0       	mov    eax,0xc00282a0
c0013368:	eb 05                	jmp    c001336f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001336a:	b8 10 83 02 c0       	mov    eax,0xc0028310
c001336f:	5b                   	pop    ebx
c0013370:	5e                   	pop    esi
c0013371:	5f                   	pop    edi
c0013372:	5d                   	pop    ebp
c0013373:	c3                   	ret    

c0013374 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0013374:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013378:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001337c:	80 f9 04             	cmp    cl,0x4
c001337f:	75 6b                	jne    c00133ec <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0013381:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0013386:	80 fa 01             	cmp    dl,0x1
c0013389:	0f 86 92 02 00 00    	jbe    c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001338f:	b8 10 81 02 c0       	mov    eax,0xc0028110
c0013394:	80 fa 02             	cmp    dl,0x2
c0013397:	0f 84 84 02 00 00    	je     c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001339d:	b8 20 81 02 c0       	mov    eax,0xc0028120
c00133a2:	80 fa 03             	cmp    dl,0x3
c00133a5:	0f 84 76 02 00 00    	je     c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133ab:	b8 30 81 02 c0       	mov    eax,0xc0028130
c00133b0:	80 fa 04             	cmp    dl,0x4
c00133b3:	0f 84 68 02 00 00    	je     c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133b9:	b8 40 81 02 c0       	mov    eax,0xc0028140
c00133be:	80 fa 05             	cmp    dl,0x5
c00133c1:	0f 84 5a 02 00 00    	je     c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133c7:	b8 20 81 02 c0       	mov    eax,0xc0028120
c00133cc:	80 fa 07             	cmp    dl,0x7
c00133cf:	0f 84 4c 02 00 00    	je     c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133d5:	83 ea 08             	sub    edx,0x8
c00133d8:	b8 91 62 02 c0       	mov    eax,0xc0026291
c00133dd:	80 fa 01             	cmp    dl,0x1
c00133e0:	0f 87 3b 02 00 00    	ja     c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133e6:	b8 50 81 02 c0       	mov    eax,0xc0028150
c00133eb:	c3                   	ret    
c00133ec:	80 f9 05             	cmp    cl,0x5
c00133ef:	75 45                	jne    c0013436 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00133f1:	8d 4a ff             	lea    ecx,[edx-0x1]
c00133f4:	b8 60 81 02 c0       	mov    eax,0xc0028160
c00133f9:	80 f9 02             	cmp    cl,0x2
c00133fc:	0f 86 1f 02 00 00    	jbe    c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013402:	80 fa 04             	cmp    dl,0x4
c0013405:	0f 84 f3 01 00 00    	je     c00135fe <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001340b:	80 fa 07             	cmp    dl,0x7
c001340e:	0f 84 0d 02 00 00    	je     c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013414:	b8 70 81 02 c0       	mov    eax,0xc0028170
c0013419:	80 fa 08             	cmp    dl,0x8
c001341c:	0f 84 ff 01 00 00    	je     c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013422:	b8 91 62 02 c0       	mov    eax,0xc0026291
c0013427:	80 fa 09             	cmp    dl,0x9
c001342a:	0f 85 f1 01 00 00    	jne    c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013430:	b8 80 81 02 c0       	mov    eax,0xc0028180
c0013435:	c3                   	ret    
c0013436:	80 f9 06             	cmp    cl,0x6
c0013439:	0f 85 85 01 00 00    	jne    c00135c4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001343f:	b8 90 81 02 c0       	mov    eax,0xc0028190
c0013444:	80 fa 01             	cmp    dl,0x1
c0013447:	0f 84 d4 01 00 00    	je     c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001344d:	8d 42 fb             	lea    eax,[edx-0x5]
c0013450:	3c 01                	cmp    al,0x1
c0013452:	0f 86 ac 01 00 00    	jbe    c0013604 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0013458:	80 fa 03             	cmp    dl,0x3
c001345b:	0f 84 a3 01 00 00    	je     c0013604 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0013461:	8d 4a f9             	lea    ecx,[edx-0x7]
c0013464:	b8 b0 81 02 c0       	mov    eax,0xc00281b0
c0013469:	80 f9 01             	cmp    cl,0x1
c001346c:	0f 86 af 01 00 00    	jbe    c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013472:	80 fa 09             	cmp    dl,0x9
c0013475:	0f 84 8f 01 00 00    	je     c001360a <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c001347b:	8d 4a f6             	lea    ecx,[edx-0xa]
c001347e:	80 f9 01             	cmp    cl,0x1
c0013481:	0f 86 9a 01 00 00    	jbe    c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013487:	b8 c0 81 02 c0       	mov    eax,0xc00281c0
c001348c:	80 fa 0d             	cmp    dl,0xd
c001348f:	0f 84 8c 01 00 00    	je     c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013495:	b8 d0 81 02 c0       	mov    eax,0xc00281d0
c001349a:	80 fa 0e             	cmp    dl,0xe
c001349d:	0f 84 7e 01 00 00    	je     c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134a3:	b8 e0 81 02 c0       	mov    eax,0xc00281e0
c00134a8:	80 fa 0f             	cmp    dl,0xf
c00134ab:	0f 84 70 01 00 00    	je     c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134b1:	b8 c0 81 02 c0       	mov    eax,0xc00281c0
c00134b6:	80 fa 15             	cmp    dl,0x15
c00134b9:	0f 84 62 01 00 00    	je     c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134bf:	8d 4a ea             	lea    ecx,[edx-0x16]
c00134c2:	b8 e0 81 02 c0       	mov    eax,0xc00281e0
c00134c7:	80 f9 01             	cmp    cl,0x1
c00134ca:	0f 86 51 01 00 00    	jbe    c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134d0:	80 fa 1a             	cmp    dl,0x1a
c00134d3:	0f 84 37 01 00 00    	je     c0013610 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00134d9:	80 fa 1c             	cmp    dl,0x1c
c00134dc:	0f 84 34 01 00 00    	je     c0013616 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00134e2:	80 fa 1d             	cmp    dl,0x1d
c00134e5:	0f 84 36 01 00 00    	je     c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134eb:	b8 10 82 02 c0       	mov    eax,0xc0028210
c00134f0:	80 fa 25             	cmp    dl,0x25
c00134f3:	0f 84 28 01 00 00    	je     c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134f9:	8d 4a da             	lea    ecx,[edx-0x26]
c00134fc:	b8 00 82 02 c0       	mov    eax,0xc0028200
c0013501:	80 f9 01             	cmp    cl,0x1
c0013504:	0f 86 17 01 00 00    	jbe    c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001350a:	b8 20 82 02 c0       	mov    eax,0xc0028220
c001350f:	80 fa 2a             	cmp    dl,0x2a
c0013512:	0f 84 09 01 00 00    	je     c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013518:	b8 10 82 02 c0       	mov    eax,0xc0028210
c001351d:	80 fa 2c             	cmp    dl,0x2c
c0013520:	0f 84 fb 00 00 00    	je     c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013526:	b8 20 82 02 c0       	mov    eax,0xc0028220
c001352b:	80 fa 2d             	cmp    dl,0x2d
c001352e:	0f 84 ed 00 00 00    	je     c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013534:	b8 f0 81 02 c0       	mov    eax,0xc00281f0
c0013539:	80 fa 2e             	cmp    dl,0x2e
c001353c:	0f 84 df 00 00 00    	je     c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013542:	b8 10 82 02 c0       	mov    eax,0xc0028210
c0013547:	80 fa 2f             	cmp    dl,0x2f
c001354a:	0f 84 d1 00 00 00    	je     c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013550:	8d 4a cb             	lea    ecx,[edx-0x35]
c0013553:	b8 00 82 02 c0       	mov    eax,0xc0028200
c0013558:	80 f9 01             	cmp    cl,0x1
c001355b:	0f 86 c0 00 00 00    	jbe    c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013561:	b8 30 82 02 c0       	mov    eax,0xc0028230
c0013566:	80 fa 37             	cmp    dl,0x37
c0013569:	0f 84 b2 00 00 00    	je     c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001356f:	b8 40 82 02 c0       	mov    eax,0xc0028240
c0013574:	80 fa 3a             	cmp    dl,0x3a
c0013577:	0f 84 a4 00 00 00    	je     c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001357d:	b8 50 82 02 c0       	mov    eax,0xc0028250
c0013582:	80 fa 3c             	cmp    dl,0x3c
c0013585:	0f 84 96 00 00 00    	je     c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001358b:	b8 60 82 02 c0       	mov    eax,0xc0028260
c0013590:	80 fa 3d             	cmp    dl,0x3d
c0013593:	0f 84 88 00 00 00    	je     c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013599:	b8 40 82 02 c0       	mov    eax,0xc0028240
c001359e:	80 fa 3e             	cmp    dl,0x3e
c00135a1:	74 7e                	je     c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135a3:	8d 42 bb             	lea    eax,[edx-0x45]
c00135a6:	3c 01                	cmp    al,0x1
c00135a8:	76 72                	jbe    c001361c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00135aa:	80 fa 3f             	cmp    dl,0x3f
c00135ad:	74 6d                	je     c001361c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00135af:	80 fa 4a             	cmp    dl,0x4a
c00135b2:	74 0a                	je     c00135be <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00135b4:	b8 91 62 02 c0       	mov    eax,0xc0026291
c00135b9:	80 fa 4d             	cmp    dl,0x4d
c00135bc:	75 63                	jne    c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135be:	b8 30 82 02 c0       	mov    eax,0xc0028230
c00135c3:	c3                   	ret    
c00135c4:	b8 91 62 02 c0       	mov    eax,0xc0026291
c00135c9:	80 f9 0b             	cmp    cl,0xb
c00135cc:	75 0a                	jne    c00135d8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00135ce:	fe ca                	dec    dl
c00135d0:	75 4f                	jne    c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135d2:	b8 70 82 02 c0       	mov    eax,0xc0028270
c00135d7:	c3                   	ret    
c00135d8:	80 f9 0f             	cmp    cl,0xf
c00135db:	75 44                	jne    c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135dd:	b8 80 82 02 c0       	mov    eax,0xc0028280
c00135e2:	80 fa 02             	cmp    dl,0x2
c00135e5:	76 3a                	jbe    c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135e7:	8d 42 fd             	lea    eax,[edx-0x3]
c00135ea:	3c 01                	cmp    al,0x1
c00135ec:	76 0a                	jbe    c00135f8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00135ee:	b8 91 62 02 c0       	mov    eax,0xc0026291
c00135f3:	80 fa 06             	cmp    dl,0x6
c00135f6:	75 29                	jne    c0013621 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135f8:	b8 90 82 02 c0       	mov    eax,0xc0028290
c00135fd:	c3                   	ret    
c00135fe:	b8 70 81 02 c0       	mov    eax,0xc0028170
c0013603:	c3                   	ret    
c0013604:	b8 a0 81 02 c0       	mov    eax,0xc00281a0
c0013609:	c3                   	ret    
c001360a:	b8 c0 81 02 c0       	mov    eax,0xc00281c0
c001360f:	c3                   	ret    
c0013610:	b8 f0 81 02 c0       	mov    eax,0xc00281f0
c0013615:	c3                   	ret    
c0013616:	b8 00 82 02 c0       	mov    eax,0xc0028200
c001361b:	c3                   	ret    
c001361c:	b8 50 82 02 c0       	mov    eax,0xc0028250
c0013621:	c3                   	ret    

c0013622 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0013622:	60                   	pusha  
c0013623:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013627:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001362b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001362f:	9c                   	pushf  
c0013630:	fa                   	cli    
c0013631:	0f 09                	wbinvd 
c0013633:	0f 30                	wrmsr  
c0013635:	9d                   	popf   
c0013636:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001363a:	89 02                	mov    DWORD PTR [edx],eax
c001363c:	61                   	popa   
c001363d:	c3                   	ret    

c001363e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001363e:	60                   	pusha  
c001363f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013643:	9c                   	pushf  
c0013644:	fa                   	cli    
c0013645:	0f 09                	wbinvd 
c0013647:	31 c0                	xor    eax,eax
c0013649:	31 d2                	xor    edx,edx
c001364b:	0f 32                	rdmsr  
c001364d:	9d                   	popf   
c001364e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013652:	89 02                	mov    DWORD PTR [edx],eax
c0013654:	61                   	popa   
c0013655:	c3                   	ret    

c0013656 <CPU::AMD_K6_writeback(int, int, int)>:
c0013656:	56                   	push   esi
c0013657:	53                   	push   ebx
c0013658:	83 ec 10             	sub    esp,0x10
c001365b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001365f:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0013664:	75 5d                	jne    c00136c3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013666:	83 f8 08             	cmp    eax,0x8
c0013669:	75 09                	jne    c0013674 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001366b:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0013670:	7e 13                	jle    c0013685 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0013672:	eb 30                	jmp    c00136a4 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0013674:	83 f8 06             	cmp    eax,0x6
c0013677:	7c 4a                	jl     c00136c3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013679:	83 f8 07             	cmp    eax,0x7
c001367c:	7e 07                	jle    c0013685 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001367e:	83 f8 09             	cmp    eax,0x9
c0013681:	74 21                	je     c00136a4 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0013683:	eb 3e                	jmp    c00136c3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013685:	89 e6                	mov    esi,esp
c0013687:	8b 1d 0c 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a0c
c001368d:	56                   	push   esi
c001368e:	c1 eb 15             	shr    ebx,0x15
c0013691:	68 82 00 00 c0       	push   0xc0000082
c0013696:	83 e3 7e             	and    ebx,0x7e
c0013699:	e8 a0 ff ff ff       	call   c001363e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001369e:	56                   	push   esi
c001369f:	6a 00                	push   0x0
c00136a1:	53                   	push   ebx
c00136a2:	eb 12                	jmp    c00136b6 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00136a4:	89 e3                	mov    ebx,esp
c00136a6:	53                   	push   ebx
c00136a7:	68 82 00 00 c0       	push   0xc0000082
c00136ac:	e8 8d ff ff ff       	call   c001363e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00136b1:	53                   	push   ebx
c00136b2:	6a 00                	push   0x0
c00136b4:	6a 00                	push   0x0
c00136b6:	68 82 00 00 c0       	push   0xc0000082
c00136bb:	e8 62 ff ff ff       	call   c0013622 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00136c0:	83 c4 18             	add    esp,0x18
c00136c3:	83 c4 10             	add    esp,0x10
c00136c6:	5b                   	pop    ebx
c00136c7:	5e                   	pop    esi
c00136c8:	c3                   	ret    
c00136c9:	90                   	nop

c00136ca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00136ca:	55                   	push   ebp
c00136cb:	57                   	push   edi
c00136cc:	56                   	push   esi
c00136cd:	53                   	push   ebx
c00136ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00136d2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00136d6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00136da:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00136de:	39 05 a0 83 02 c0    	cmp    DWORD PTR ds:0xc00283a0,eax
c00136e4:	75 23                	jne    c0013709 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00136e6:	a1 ac 94 02 c0       	mov    eax,ds:0xc00294ac
c00136eb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00136ef:	89 06                	mov    DWORD PTR [esi],eax
c00136f1:	a1 a8 94 02 c0       	mov    eax,ds:0xc00294a8
c00136f6:	89 07                	mov    DWORD PTR [edi],eax
c00136f8:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c00136fd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013700:	a1 a0 94 02 c0       	mov    eax,ds:0xc00294a0
c0013705:	89 02                	mov    DWORD PTR [edx],eax
c0013707:	eb 3f                	jmp    c0013748 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0013709:	31 c9                	xor    ecx,ecx
c001370b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001370f:	0f a2                	cpuid  
c0013711:	89 06                	mov    DWORD PTR [esi],eax
c0013713:	89 1f                	mov    DWORD PTR [edi],ebx
c0013715:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013719:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001371c:	89 10                	mov    DWORD PTR [eax],edx
c001371e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013722:	a3 a0 83 02 c0       	mov    ds:0xc00283a0,eax
c0013727:	8b 06                	mov    eax,DWORD PTR [esi]
c0013729:	a3 ac 94 02 c0       	mov    ds:0xc00294ac,eax
c001372e:	8b 07                	mov    eax,DWORD PTR [edi]
c0013730:	a3 a8 94 02 c0       	mov    ds:0xc00294a8,eax
c0013735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013738:	a3 a4 94 02 c0       	mov    ds:0xc00294a4,eax
c001373d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013741:	8b 00                	mov    eax,DWORD PTR [eax]
c0013743:	a3 a0 94 02 c0       	mov    ds:0xc00294a0,eax
c0013748:	5b                   	pop    ebx
c0013749:	5e                   	pop    esi
c001374a:	5f                   	pop    edi
c001374b:	5d                   	pop    ebp
c001374c:	c3                   	ret    
c001374d:	90                   	nop

c001374e <CPU::cpuidCheckEDX(unsigned int)>:
c001374e:	83 ec 10             	sub    esp,0x10
c0013751:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013755:	50                   	push   eax
c0013756:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001375a:	50                   	push   eax
c001375b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001375f:	50                   	push   eax
c0013760:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013764:	50                   	push   eax
c0013765:	6a 01                	push   0x1
c0013767:	e8 5e ff ff ff       	call   c00136ca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001376c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013770:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0013774:	0f 95 c0             	setne  al
c0013777:	83 c4 24             	add    esp,0x24
c001377a:	c3                   	ret    
c001377b:	90                   	nop

c001377c <CPU::cpuidCheckECX(unsigned int)>:
c001377c:	83 ec 10             	sub    esp,0x10
c001377f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013783:	50                   	push   eax
c0013784:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013788:	50                   	push   eax
c0013789:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001378d:	50                   	push   eax
c001378e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013792:	50                   	push   eax
c0013793:	6a 01                	push   0x1
c0013795:	e8 30 ff ff ff       	call   c00136ca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001379a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001379e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00137a2:	0f 95 c0             	setne  al
c00137a5:	83 c4 24             	add    esp,0x24
c00137a8:	c3                   	ret    
c00137a9:	90                   	nop

c00137aa <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00137aa:	83 ec 10             	sub    esp,0x10
c00137ad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00137b1:	50                   	push   eax
c00137b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00137b6:	50                   	push   eax
c00137b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00137bb:	50                   	push   eax
c00137bc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00137c0:	50                   	push   eax
c00137c1:	6a 07                	push   0x7
c00137c3:	e8 02 ff ff ff       	call   c00136ca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00137c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00137cc:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00137d0:	0f 95 c0             	setne  al
c00137d3:	83 c4 24             	add    esp,0x24
c00137d6:	c3                   	ret    
c00137d7:	90                   	nop

c00137d8 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00137d8:	83 ec 10             	sub    esp,0x10
c00137db:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00137df:	50                   	push   eax
c00137e0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00137e4:	50                   	push   eax
c00137e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00137e9:	50                   	push   eax
c00137ea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00137ee:	50                   	push   eax
c00137ef:	6a 07                	push   0x7
c00137f1:	e8 d4 fe ff ff       	call   c00136ca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00137f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00137fa:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00137fe:	0f 95 c0             	setne  al
c0013801:	83 c4 24             	add    esp,0x24
c0013804:	c3                   	ret    
c0013805:	90                   	nop

c0013806 <CPU::CPU()>:
c0013806:	83 ec 0c             	sub    esp,0xc
c0013809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001380d:	83 ec 08             	sub    esp,0x8
c0013810:	68 91 62 02 c0       	push   0xc0026291
c0013815:	50                   	push   eax
c0013816:	e8 a3 af ff ff       	call   c000e7be <Device::Device(char const*)>
c001381b:	83 c4 10             	add    esp,0x10
c001381e:	ba f4 64 02 c0       	mov    edx,0xc00264f4
c0013823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013827:	89 10                	mov    DWORD PTR [eax],edx
c0013829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001382d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0013837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001383b:	05 78 01 00 00       	add    eax,0x178
c0013840:	83 ec 0c             	sub    esp,0xc
c0013843:	50                   	push   eax
c0013844:	e8 a7 5d ff ff       	call   c00095f0 <GDT::GDT()>
c0013849:	83 c4 10             	add    esp,0x10
c001384c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013850:	05 7c 09 00 00       	add    eax,0x97c
c0013855:	83 ec 0c             	sub    esp,0xc
c0013858:	50                   	push   eax
c0013859:	e8 ea 5f ff ff       	call   c0009848 <IDT::IDT()>
c001385e:	83 c4 10             	add    esp,0x10
c0013861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013865:	05 7c 11 00 00       	add    eax,0x117c
c001386a:	83 ec 0c             	sub    esp,0xc
c001386d:	50                   	push   eax
c001386e:	e8 f1 7d ff ff       	call   c000b664 <TSS::TSS()>
c0013873:	83 c4 10             	add    esp,0x10
c0013876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001387a:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0013881:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013885:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001388f:	90                   	nop
c0013890:	83 c4 0c             	add    esp,0xc
c0013893:	c3                   	ret    

c0013894 <CPU::displayFeatures()>:
c0013894:	53                   	push   ebx
c0013895:	83 ec 10             	sub    esp,0x10
c0013898:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001389c:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00138a2:	68 88 5f 02 c0       	push   0xc0025f88
c00138a7:	e8 9b 97 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00138ac:	58                   	pop    eax
c00138ad:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00138b3:	5a                   	pop    edx
c00138b4:	50                   	push   eax
c00138b5:	68 99 5f 02 c0       	push   0xc0025f99
c00138ba:	e8 88 97 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00138bf:	59                   	pop    ecx
c00138c0:	58                   	pop    eax
c00138c1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00138c7:	c1 e8 0e             	shr    eax,0xe
c00138ca:	0f b6 c0             	movzx  eax,al
c00138cd:	50                   	push   eax
c00138ce:	68 aa 5f 02 c0       	push   0xc0025faa
c00138d3:	e8 6f 97 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00138d8:	58                   	pop    eax
c00138d9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00138df:	5a                   	pop    edx
c00138e0:	66 c1 e8 06          	shr    ax,0x6
c00138e4:	0f b6 c0             	movzx  eax,al
c00138e7:	50                   	push   eax
c00138e8:	68 bb 5f 02 c0       	push   0xc0025fbb
c00138ed:	e8 55 97 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00138f2:	c7 04 24 bb 65 02 c0 	mov    DWORD PTR [esp],0xc00265bb
c00138f9:	e8 49 97 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00138fe:	83 c4 10             	add    esp,0x10
c0013901:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0013906:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c001390d:	74 05                	je     c0013914 <CPU::displayFeatures()+0x80>
c001390f:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0013914:	51                   	push   ecx
c0013915:	51                   	push   ecx
c0013916:	50                   	push   eax
c0013917:	68 cc 5f 02 c0       	push   0xc0025fcc
c001391c:	e8 26 97 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013921:	83 c4 10             	add    esp,0x10
c0013924:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0013929:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0013930:	78 05                	js     c0013937 <CPU::displayFeatures()+0xa3>
c0013932:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0013937:	52                   	push   edx
c0013938:	52                   	push   edx
c0013939:	50                   	push   eax
c001393a:	68 e3 5f 02 c0       	push   0xc0025fe3
c001393f:	e8 03 97 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013944:	83 c4 10             	add    esp,0x10
c0013947:	b8 81 44 02 c0       	mov    eax,0xc0024481
c001394c:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0013953:	75 05                	jne    c001395a <CPU::displayFeatures()+0xc6>
c0013955:	b8 85 44 02 c0       	mov    eax,0xc0024485
c001395a:	51                   	push   ecx
c001395b:	51                   	push   ecx
c001395c:	50                   	push   eax
c001395d:	68 fa 5f 02 c0       	push   0xc0025ffa
c0013962:	e8 e0 96 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013967:	83 c4 10             	add    esp,0x10
c001396a:	b8 81 44 02 c0       	mov    eax,0xc0024481
c001396f:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0013976:	75 05                	jne    c001397d <CPU::displayFeatures()+0xe9>
c0013978:	b8 85 44 02 c0       	mov    eax,0xc0024485
c001397d:	52                   	push   edx
c001397e:	52                   	push   edx
c001397f:	50                   	push   eax
c0013980:	68 11 60 02 c0       	push   0xc0026011
c0013985:	e8 bd 96 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001398a:	83 c4 10             	add    esp,0x10
c001398d:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0013992:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0013999:	75 05                	jne    c00139a0 <CPU::displayFeatures()+0x10c>
c001399b:	b8 85 44 02 c0       	mov    eax,0xc0024485
c00139a0:	51                   	push   ecx
c00139a1:	51                   	push   ecx
c00139a2:	50                   	push   eax
c00139a3:	68 28 60 02 c0       	push   0xc0026028
c00139a8:	e8 9a 96 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00139ad:	83 c4 10             	add    esp,0x10
c00139b0:	b8 81 44 02 c0       	mov    eax,0xc0024481
c00139b5:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00139bc:	75 05                	jne    c00139c3 <CPU::displayFeatures()+0x12f>
c00139be:	b8 85 44 02 c0       	mov    eax,0xc0024485
c00139c3:	52                   	push   edx
c00139c4:	52                   	push   edx
c00139c5:	50                   	push   eax
c00139c6:	68 3f 60 02 c0       	push   0xc002603f
c00139cb:	e8 77 96 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00139d0:	83 c4 10             	add    esp,0x10
c00139d3:	b8 81 44 02 c0       	mov    eax,0xc0024481
c00139d8:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00139df:	75 05                	jne    c00139e6 <CPU::displayFeatures()+0x152>
c00139e1:	b8 85 44 02 c0       	mov    eax,0xc0024485
c00139e6:	51                   	push   ecx
c00139e7:	51                   	push   ecx
c00139e8:	50                   	push   eax
c00139e9:	68 56 60 02 c0       	push   0xc0026056
c00139ee:	e8 54 96 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00139f3:	83 c4 10             	add    esp,0x10
c00139f6:	b8 81 44 02 c0       	mov    eax,0xc0024481
c00139fb:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0013a02:	75 05                	jne    c0013a09 <CPU::displayFeatures()+0x175>
c0013a04:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0013a09:	52                   	push   edx
c0013a0a:	52                   	push   edx
c0013a0b:	50                   	push   eax
c0013a0c:	68 6d 60 02 c0       	push   0xc002606d
c0013a11:	e8 31 96 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013a16:	83 c4 10             	add    esp,0x10
c0013a19:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0013a1e:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0013a25:	75 05                	jne    c0013a2c <CPU::displayFeatures()+0x198>
c0013a27:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0013a2c:	51                   	push   ecx
c0013a2d:	51                   	push   ecx
c0013a2e:	50                   	push   eax
c0013a2f:	68 84 60 02 c0       	push   0xc0026084
c0013a34:	e8 0e 96 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013a39:	83 c4 10             	add    esp,0x10
c0013a3c:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0013a41:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0013a48:	75 05                	jne    c0013a4f <CPU::displayFeatures()+0x1bb>
c0013a4a:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0013a4f:	52                   	push   edx
c0013a50:	52                   	push   edx
c0013a51:	50                   	push   eax
c0013a52:	68 9b 60 02 c0       	push   0xc002609b
c0013a57:	e8 eb 95 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013a5c:	83 c4 10             	add    esp,0x10
c0013a5f:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0013a64:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0013a6b:	75 05                	jne    c0013a72 <CPU::displayFeatures()+0x1de>
c0013a6d:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0013a72:	51                   	push   ecx
c0013a73:	51                   	push   ecx
c0013a74:	50                   	push   eax
c0013a75:	68 b2 60 02 c0       	push   0xc00260b2
c0013a7a:	e8 c8 95 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013a7f:	83 c4 10             	add    esp,0x10
c0013a82:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0013a87:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0013a8e:	75 05                	jne    c0013a95 <CPU::displayFeatures()+0x201>
c0013a90:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0013a95:	52                   	push   edx
c0013a96:	52                   	push   edx
c0013a97:	50                   	push   eax
c0013a98:	68 c9 60 02 c0       	push   0xc00260c9
c0013a9d:	e8 a5 95 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013aa2:	83 c4 10             	add    esp,0x10
c0013aa5:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0013aaa:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0013ab1:	75 05                	jne    c0013ab8 <CPU::displayFeatures()+0x224>
c0013ab3:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0013ab8:	51                   	push   ecx
c0013ab9:	51                   	push   ecx
c0013aba:	50                   	push   eax
c0013abb:	68 e0 60 02 c0       	push   0xc00260e0
c0013ac0:	e8 82 95 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013ac5:	83 c4 10             	add    esp,0x10
c0013ac8:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0013acd:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0013ad4:	78 05                	js     c0013adb <CPU::displayFeatures()+0x247>
c0013ad6:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0013adb:	52                   	push   edx
c0013adc:	52                   	push   edx
c0013add:	50                   	push   eax
c0013ade:	68 f7 60 02 c0       	push   0xc00260f7
c0013ae3:	e8 5f 95 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013ae8:	83 c4 10             	add    esp,0x10
c0013aeb:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0013af0:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0013af7:	75 05                	jne    c0013afe <CPU::displayFeatures()+0x26a>
c0013af9:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0013afe:	51                   	push   ecx
c0013aff:	51                   	push   ecx
c0013b00:	50                   	push   eax
c0013b01:	68 0e 61 02 c0       	push   0xc002610e
c0013b06:	e8 3c 95 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013b0b:	83 c4 10             	add    esp,0x10
c0013b0e:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0013b13:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c0013b1a:	75 05                	jne    c0013b21 <CPU::displayFeatures()+0x28d>
c0013b1c:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0013b21:	52                   	push   edx
c0013b22:	52                   	push   edx
c0013b23:	50                   	push   eax
c0013b24:	68 25 61 02 c0       	push   0xc0026125
c0013b29:	e8 19 95 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013b2e:	83 c4 18             	add    esp,0x18
c0013b31:	5b                   	pop    ebx
c0013b32:	c3                   	ret    
c0013b33:	90                   	nop

c0013b34 <CPU::detectFeatures()>:
c0013b34:	55                   	push   ebp
c0013b35:	57                   	push   edi
c0013b36:	56                   	push   esi
c0013b37:	53                   	push   ebx
c0013b38:	83 ec 50             	sub    esp,0x50
c0013b3b:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0013b3f:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0013b49:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0013b50:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0013b56:	6a 0d                	push   0xd
c0013b58:	6a 00                	push   0x0
c0013b5a:	55                   	push   ebp
c0013b5b:	e8 24 cb fe ff       	call   c0000684 <memset>
c0013b60:	83 c4 10             	add    esp,0x10
c0013b63:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0013b68:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0013b6f:	0f 84 22 09 00 00    	je     c0014497 <CPU::detectFeatures()+0x963>
c0013b75:	83 ec 0c             	sub    esp,0xc
c0013b78:	89 ef                	mov    edi,ebp
c0013b7a:	6a 10                	push   0x10
c0013b7c:	e8 cd fb ff ff       	call   c001374e <CPU::cpuidCheckEDX(unsigned int)>
c0013b81:	83 e0 01             	and    eax,0x1
c0013b84:	8d 14 00             	lea    edx,[eax+eax*1]
c0013b87:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013b8d:	83 e0 fd             	and    eax,0xfffffffd
c0013b90:	09 d0                	or     eax,edx
c0013b92:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013b98:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0013b9f:	e8 aa fb ff ff       	call   c001374e <CPU::cpuidCheckEDX(unsigned int)>
c0013ba4:	83 e0 01             	and    eax,0x1
c0013ba7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013bae:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013bb4:	83 e0 fb             	and    eax,0xfffffffb
c0013bb7:	09 d0                	or     eax,edx
c0013bb9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013bbf:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013bc6:	e8 83 fb ff ff       	call   c001374e <CPU::cpuidCheckEDX(unsigned int)>
c0013bcb:	83 e0 01             	and    eax,0x1
c0013bce:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013bd5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013bdb:	83 e0 f7             	and    eax,0xfffffff7
c0013bde:	09 d0                	or     eax,edx
c0013be0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013be6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0013bed:	e8 5c fb ff ff       	call   c001374e <CPU::cpuidCheckEDX(unsigned int)>
c0013bf2:	83 e0 01             	and    eax,0x1
c0013bf5:	c1 e0 04             	shl    eax,0x4
c0013bf8:	88 c2                	mov    dl,al
c0013bfa:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013c00:	83 e0 ef             	and    eax,0xffffffef
c0013c03:	09 d0                	or     eax,edx
c0013c05:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013c0b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0013c12:	e8 37 fb ff ff       	call   c001374e <CPU::cpuidCheckEDX(unsigned int)>
c0013c17:	83 e0 01             	and    eax,0x1
c0013c1a:	c1 e0 05             	shl    eax,0x5
c0013c1d:	88 c2                	mov    dl,al
c0013c1f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013c25:	83 e0 df             	and    eax,0xffffffdf
c0013c28:	09 d0                	or     eax,edx
c0013c2a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013c30:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0013c37:	e8 12 fb ff ff       	call   c001374e <CPU::cpuidCheckEDX(unsigned int)>
c0013c3c:	83 e0 01             	and    eax,0x1
c0013c3f:	8d 14 00             	lea    edx,[eax+eax*1]
c0013c42:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013c48:	83 e0 fd             	and    eax,0xfffffffd
c0013c4b:	09 d0                	or     eax,edx
c0013c4d:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013c53:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0013c5a:	e8 ef fa ff ff       	call   c001374e <CPU::cpuidCheckEDX(unsigned int)>
c0013c5f:	83 e0 01             	and    eax,0x1
c0013c62:	c1 e0 06             	shl    eax,0x6
c0013c65:	88 c2                	mov    dl,al
c0013c67:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013c6d:	83 e0 bf             	and    eax,0xffffffbf
c0013c70:	09 d0                	or     eax,edx
c0013c72:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013c78:	58                   	pop    eax
c0013c79:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013c7d:	50                   	push   eax
c0013c7e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013c82:	50                   	push   eax
c0013c83:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013c87:	56                   	push   esi
c0013c88:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013c8c:	50                   	push   eax
c0013c8d:	6a 00                	push   0x0
c0013c8f:	e8 36 fa ff ff       	call   c00136ca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013c94:	b8 04 00 00 00       	mov    eax,0x4
c0013c99:	89 c1                	mov    ecx,eax
c0013c9b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c9d:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0013ca3:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013ca7:	89 c1                	mov    ecx,eax
c0013ca9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013cab:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0013cb1:	8d 74 24 38          	lea    esi,[esp+0x38]
c0013cb5:	89 c1                	mov    ecx,eax
c0013cb7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013cb9:	83 c4 18             	add    esp,0x18
c0013cbc:	68 3c 61 02 c0       	push   0xc002613c
c0013cc1:	55                   	push   ebp
c0013cc2:	e8 05 cb fe ff       	call   c00007cc <strcmp>
c0013cc7:	83 c4 10             	add    esp,0x10
c0013cca:	85 c0                	test   eax,eax
c0013ccc:	75 0f                	jne    c0013cdd <CPU::detectFeatures()+0x1a9>
c0013cce:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0013cd8:	e9 22 02 00 00       	jmp    c0013eff <CPU::detectFeatures()+0x3cb>
c0013cdd:	50                   	push   eax
c0013cde:	50                   	push   eax
c0013cdf:	68 49 61 02 c0       	push   0xc0026149
c0013ce4:	55                   	push   ebp
c0013ce5:	e8 e2 ca fe ff       	call   c00007cc <strcmp>
c0013cea:	83 c4 10             	add    esp,0x10
c0013ced:	85 c0                	test   eax,eax
c0013cef:	74 dd                	je     c0013cce <CPU::detectFeatures()+0x19a>
c0013cf1:	50                   	push   eax
c0013cf2:	50                   	push   eax
c0013cf3:	68 56 61 02 c0       	push   0xc0026156
c0013cf8:	55                   	push   ebp
c0013cf9:	e8 ce ca fe ff       	call   c00007cc <strcmp>
c0013cfe:	83 c4 10             	add    esp,0x10
c0013d01:	85 c0                	test   eax,eax
c0013d03:	74 2a                	je     c0013d2f <CPU::detectFeatures()+0x1fb>
c0013d05:	50                   	push   eax
c0013d06:	50                   	push   eax
c0013d07:	68 63 61 02 c0       	push   0xc0026163
c0013d0c:	55                   	push   ebp
c0013d0d:	e8 ba ca fe ff       	call   c00007cc <strcmp>
c0013d12:	83 c4 10             	add    esp,0x10
c0013d15:	85 c0                	test   eax,eax
c0013d17:	74 16                	je     c0013d2f <CPU::detectFeatures()+0x1fb>
c0013d19:	50                   	push   eax
c0013d1a:	50                   	push   eax
c0013d1b:	68 70 61 02 c0       	push   0xc0026170
c0013d20:	55                   	push   ebp
c0013d21:	e8 a6 ca fe ff       	call   c00007cc <strcmp>
c0013d26:	83 c4 10             	add    esp,0x10
c0013d29:	85 c0                	test   eax,eax
c0013d2b:	74 48                	je     c0013d75 <CPU::detectFeatures()+0x241>
c0013d2d:	eb 0f                	jmp    c0013d3e <CPU::detectFeatures()+0x20a>
c0013d2f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0013d39:	e9 c1 01 00 00       	jmp    c0013eff <CPU::detectFeatures()+0x3cb>
c0013d3e:	50                   	push   eax
c0013d3f:	50                   	push   eax
c0013d40:	68 7d 61 02 c0       	push   0xc002617d
c0013d45:	55                   	push   ebp
c0013d46:	e8 81 ca fe ff       	call   c00007cc <strcmp>
c0013d4b:	83 c4 10             	add    esp,0x10
c0013d4e:	85 c0                	test   eax,eax
c0013d50:	74 23                	je     c0013d75 <CPU::detectFeatures()+0x241>
c0013d52:	57                   	push   edi
c0013d53:	57                   	push   edi
c0013d54:	68 8a 61 02 c0       	push   0xc002618a
c0013d59:	55                   	push   ebp
c0013d5a:	e8 6d ca fe ff       	call   c00007cc <strcmp>
c0013d5f:	83 c4 10             	add    esp,0x10
c0013d62:	85 c0                	test   eax,eax
c0013d64:	75 1e                	jne    c0013d84 <CPU::detectFeatures()+0x250>
c0013d66:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013d70:	e9 8a 01 00 00       	jmp    c0013eff <CPU::detectFeatures()+0x3cb>
c0013d75:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013d7f:	e9 7b 01 00 00       	jmp    c0013eff <CPU::detectFeatures()+0x3cb>
c0013d84:	56                   	push   esi
c0013d85:	56                   	push   esi
c0013d86:	68 97 61 02 c0       	push   0xc0026197
c0013d8b:	55                   	push   ebp
c0013d8c:	e8 3b ca fe ff       	call   c00007cc <strcmp>
c0013d91:	83 c4 10             	add    esp,0x10
c0013d94:	85 c0                	test   eax,eax
c0013d96:	75 0f                	jne    c0013da7 <CPU::detectFeatures()+0x273>
c0013d98:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0013da2:	e9 58 01 00 00       	jmp    c0013eff <CPU::detectFeatures()+0x3cb>
c0013da7:	51                   	push   ecx
c0013da8:	51                   	push   ecx
c0013da9:	68 56 61 02 c0       	push   0xc0026156
c0013dae:	55                   	push   ebp
c0013daf:	e8 18 ca fe ff       	call   c00007cc <strcmp>
c0013db4:	83 c4 10             	add    esp,0x10
c0013db7:	85 c0                	test   eax,eax
c0013db9:	75 0f                	jne    c0013dca <CPU::detectFeatures()+0x296>
c0013dbb:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0013dc5:	e9 35 01 00 00       	jmp    c0013eff <CPU::detectFeatures()+0x3cb>
c0013dca:	52                   	push   edx
c0013dcb:	52                   	push   edx
c0013dcc:	68 a4 61 02 c0       	push   0xc00261a4
c0013dd1:	55                   	push   ebp
c0013dd2:	e8 f5 c9 fe ff       	call   c00007cc <strcmp>
c0013dd7:	83 c4 10             	add    esp,0x10
c0013dda:	85 c0                	test   eax,eax
c0013ddc:	75 0f                	jne    c0013ded <CPU::detectFeatures()+0x2b9>
c0013dde:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0013de8:	e9 12 01 00 00       	jmp    c0013eff <CPU::detectFeatures()+0x3cb>
c0013ded:	50                   	push   eax
c0013dee:	50                   	push   eax
c0013def:	68 b1 61 02 c0       	push   0xc00261b1
c0013df4:	55                   	push   ebp
c0013df5:	e8 d2 c9 fe ff       	call   c00007cc <strcmp>
c0013dfa:	83 c4 10             	add    esp,0x10
c0013dfd:	85 c0                	test   eax,eax
c0013dff:	75 0f                	jne    c0013e10 <CPU::detectFeatures()+0x2dc>
c0013e01:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0013e0b:	e9 ef 00 00 00       	jmp    c0013eff <CPU::detectFeatures()+0x3cb>
c0013e10:	50                   	push   eax
c0013e11:	50                   	push   eax
c0013e12:	68 be 61 02 c0       	push   0xc00261be
c0013e17:	55                   	push   ebp
c0013e18:	e8 af c9 fe ff       	call   c00007cc <strcmp>
c0013e1d:	83 c4 10             	add    esp,0x10
c0013e20:	85 c0                	test   eax,eax
c0013e22:	75 0f                	jne    c0013e33 <CPU::detectFeatures()+0x2ff>
c0013e24:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0013e2e:	e9 cc 00 00 00       	jmp    c0013eff <CPU::detectFeatures()+0x3cb>
c0013e33:	50                   	push   eax
c0013e34:	50                   	push   eax
c0013e35:	68 cb 61 02 c0       	push   0xc00261cb
c0013e3a:	55                   	push   ebp
c0013e3b:	e8 8c c9 fe ff       	call   c00007cc <strcmp>
c0013e40:	83 c4 10             	add    esp,0x10
c0013e43:	85 c0                	test   eax,eax
c0013e45:	75 0f                	jne    c0013e56 <CPU::detectFeatures()+0x322>
c0013e47:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0013e51:	e9 a9 00 00 00       	jmp    c0013eff <CPU::detectFeatures()+0x3cb>
c0013e56:	50                   	push   eax
c0013e57:	50                   	push   eax
c0013e58:	68 d8 61 02 c0       	push   0xc00261d8
c0013e5d:	55                   	push   ebp
c0013e5e:	e8 69 c9 fe ff       	call   c00007cc <strcmp>
c0013e63:	83 c4 10             	add    esp,0x10
c0013e66:	85 c0                	test   eax,eax
c0013e68:	75 0f                	jne    c0013e79 <CPU::detectFeatures()+0x345>
c0013e6a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0013e74:	e9 86 00 00 00       	jmp    c0013eff <CPU::detectFeatures()+0x3cb>
c0013e79:	50                   	push   eax
c0013e7a:	50                   	push   eax
c0013e7b:	68 e5 61 02 c0       	push   0xc00261e5
c0013e80:	55                   	push   ebp
c0013e81:	e8 46 c9 fe ff       	call   c00007cc <strcmp>
c0013e86:	83 c4 10             	add    esp,0x10
c0013e89:	85 c0                	test   eax,eax
c0013e8b:	75 0c                	jne    c0013e99 <CPU::detectFeatures()+0x365>
c0013e8d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0013e97:	eb 66                	jmp    c0013eff <CPU::detectFeatures()+0x3cb>
c0013e99:	50                   	push   eax
c0013e9a:	50                   	push   eax
c0013e9b:	68 f2 61 02 c0       	push   0xc00261f2
c0013ea0:	55                   	push   ebp
c0013ea1:	e8 26 c9 fe ff       	call   c00007cc <strcmp>
c0013ea6:	83 c4 10             	add    esp,0x10
c0013ea9:	85 c0                	test   eax,eax
c0013eab:	75 0c                	jne    c0013eb9 <CPU::detectFeatures()+0x385>
c0013ead:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0013eb7:	eb 46                	jmp    c0013eff <CPU::detectFeatures()+0x3cb>
c0013eb9:	57                   	push   edi
c0013eba:	57                   	push   edi
c0013ebb:	68 ff 61 02 c0       	push   0xc00261ff
c0013ec0:	55                   	push   ebp
c0013ec1:	e8 06 c9 fe ff       	call   c00007cc <strcmp>
c0013ec6:	83 c4 10             	add    esp,0x10
c0013ec9:	85 c0                	test   eax,eax
c0013ecb:	74 e0                	je     c0013ead <CPU::detectFeatures()+0x379>
c0013ecd:	56                   	push   esi
c0013ece:	56                   	push   esi
c0013ecf:	68 0c 62 02 c0       	push   0xc002620c
c0013ed4:	55                   	push   ebp
c0013ed5:	e8 f2 c8 fe ff       	call   c00007cc <strcmp>
c0013eda:	83 c4 10             	add    esp,0x10
c0013edd:	85 c0                	test   eax,eax
c0013edf:	74 cc                	je     c0013ead <CPU::detectFeatures()+0x379>
c0013ee1:	51                   	push   ecx
c0013ee2:	51                   	push   ecx
c0013ee3:	68 19 62 02 c0       	push   0xc0026219
c0013ee8:	55                   	push   ebp
c0013ee9:	e8 de c8 fe ff       	call   c00007cc <strcmp>
c0013eee:	83 c4 10             	add    esp,0x10
c0013ef1:	85 c0                	test   eax,eax
c0013ef3:	74 b8                	je     c0013ead <CPU::detectFeatures()+0x379>
c0013ef5:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0013eff:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0013f04:	0f 86 be 00 00 00    	jbe    c0013fc8 <CPU::detectFeatures()+0x494>
c0013f0a:	83 ec 0c             	sub    esp,0xc
c0013f0d:	68 80 00 00 00       	push   0x80
c0013f12:	e8 93 f8 ff ff       	call   c00137aa <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013f17:	83 e0 01             	and    eax,0x1
c0013f1a:	c1 e0 06             	shl    eax,0x6
c0013f1d:	88 c2                	mov    dl,al
c0013f1f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013f25:	83 e0 bf             	and    eax,0xffffffbf
c0013f28:	09 d0                	or     eax,edx
c0013f2a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013f30:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0013f37:	e8 6e f8 ff ff       	call   c00137aa <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013f3c:	83 e0 01             	and    eax,0x1
c0013f3f:	c1 e0 04             	shl    eax,0x4
c0013f42:	88 c2                	mov    dl,al
c0013f44:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013f4a:	83 e0 ef             	and    eax,0xffffffef
c0013f4d:	09 d0                	or     eax,edx
c0013f4f:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013f55:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0013f5c:	e8 49 f8 ff ff       	call   c00137aa <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013f61:	c1 e0 07             	shl    eax,0x7
c0013f64:	88 c2                	mov    dl,al
c0013f66:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013f6c:	83 e0 7f             	and    eax,0x7f
c0013f6f:	09 d0                	or     eax,edx
c0013f71:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013f77:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013f7e:	e8 55 f8 ff ff       	call   c00137d8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013f83:	83 e0 01             	and    eax,0x1
c0013f86:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013f8d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013f93:	83 e0 f7             	and    eax,0xfffffff7
c0013f96:	09 d0                	or     eax,edx
c0013f98:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013f9e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0013fa5:	e8 2e f8 ff ff       	call   c00137d8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013faa:	83 c4 10             	add    esp,0x10
c0013fad:	83 e0 01             	and    eax,0x1
c0013fb0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013fb7:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013fbd:	83 e0 fb             	and    eax,0xfffffffb
c0013fc0:	09 d0                	or     eax,edx
c0013fc2:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013fc8:	83 ec 0c             	sub    esp,0xc
c0013fcb:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013fcf:	50                   	push   eax
c0013fd0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013fd4:	50                   	push   eax
c0013fd5:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013fd9:	56                   	push   esi
c0013fda:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013fde:	50                   	push   eax
c0013fdf:	6a 01                	push   0x1
c0013fe1:	e8 e4 f6 ff ff       	call   c00136ca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013fe6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013fea:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013ff0:	88 ca                	mov    dl,cl
c0013ff2:	83 e0 f0             	and    eax,0xfffffff0
c0013ff5:	83 e2 0f             	and    edx,0xf
c0013ff8:	09 d0                	or     eax,edx
c0013ffa:	88 ca                	mov    dl,cl
c0013ffc:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0014002:	c0 ea 04             	shr    dl,0x4
c0014005:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0014009:	0f b6 c2             	movzx  eax,dl
c001400c:	83 c4 20             	add    esp,0x20
c001400f:	c1 e0 06             	shl    eax,0x6
c0014012:	89 c7                	mov    edi,eax
c0014014:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001401a:	66 25 3f c0          	and    ax,0xc03f
c001401e:	09 f8                	or     eax,edi
c0014020:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0014027:	89 c8                	mov    eax,ecx
c0014029:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0014030:	c1 e8 08             	shr    eax,0x8
c0014033:	83 e5 3f             	and    ebp,0x3f
c0014036:	83 e0 0f             	and    eax,0xf
c0014039:	89 c7                	mov    edi,eax
c001403b:	c1 e7 06             	shl    edi,0x6
c001403e:	09 ef                	or     edi,ebp
c0014040:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0014047:	89 fa                	mov    edx,edi
c0014049:	83 e5 c0             	and    ebp,0xffffffc0
c001404c:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0014052:	88 c2                	mov    dl,al
c0014054:	c0 ea 02             	shr    dl,0x2
c0014057:	89 d7                	mov    edi,edx
c0014059:	09 ef                	or     edi,ebp
c001405b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0014061:	89 fa                	mov    edx,edi
c0014063:	83 e5 cf             	and    ebp,0xffffffcf
c0014066:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001406c:	89 cf                	mov    edi,ecx
c001406e:	c1 ef 0c             	shr    edi,0xc
c0014071:	83 e7 03             	and    edi,0x3
c0014074:	c1 e7 04             	shl    edi,0x4
c0014077:	09 ef                	or     edi,ebp
c0014079:	3c 06                	cmp    al,0x6
c001407b:	89 fa                	mov    edx,edi
c001407d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0014083:	74 04                	je     c0014089 <CPU::detectFeatures()+0x555>
c0014085:	3c 0f                	cmp    al,0xf
c0014087:	75 5c                	jne    c00140e5 <CPU::detectFeatures()+0x5b1>
c0014089:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001408d:	89 cf                	mov    edi,ecx
c001408f:	c1 ef 10             	shr    edi,0x10
c0014092:	c1 e7 04             	shl    edi,0x4
c0014095:	09 fa                	or     edx,edi
c0014097:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c001409d:	0f b6 d2             	movzx  edx,dl
c00140a0:	66 81 e7 3f c0       	and    di,0xc03f
c00140a5:	c1 e2 06             	shl    edx,0x6
c00140a8:	09 fa                	or     edx,edi
c00140aa:	3c 0f                	cmp    al,0xf
c00140ac:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00140b3:	75 30                	jne    c00140e5 <CPU::detectFeatures()+0x5b1>
c00140b5:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00140bb:	c1 e9 14             	shr    ecx,0x14
c00140be:	83 e0 3f             	and    eax,0x3f
c00140c1:	83 c1 0f             	add    ecx,0xf
c00140c4:	88 ca                	mov    dl,cl
c00140c6:	c0 e9 02             	shr    cl,0x2
c00140c9:	c1 e2 06             	shl    edx,0x6
c00140cc:	09 d0                	or     eax,edx
c00140ce:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00140d4:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00140da:	83 e0 c0             	and    eax,0xffffffc0
c00140dd:	09 c1                	or     ecx,eax
c00140df:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00140e5:	83 ec 0c             	sub    esp,0xc
c00140e8:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00140ef:	8d 44 24 28          	lea    eax,[esp+0x28]
c00140f3:	50                   	push   eax
c00140f4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00140f8:	55                   	push   ebp
c00140f9:	56                   	push   esi
c00140fa:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00140fe:	57                   	push   edi
c00140ff:	68 00 00 00 80       	push   0x80000000
c0014104:	e8 c1 f5 ff ff       	call   c00136ca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014109:	83 c4 20             	add    esp,0x20
c001410c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0014114:	76 22                	jbe    c0014138 <CPU::detectFeatures()+0x604>
c0014116:	83 ec 0c             	sub    esp,0xc
c0014119:	8d 44 24 28          	lea    eax,[esp+0x28]
c001411d:	50                   	push   eax
c001411e:	55                   	push   ebp
c001411f:	56                   	push   esi
c0014120:	57                   	push   edi
c0014121:	68 01 00 00 80       	push   0x80000001
c0014126:	e8 9f f5 ff ff       	call   c00136ca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001412b:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0014135:	83 c4 20             	add    esp,0x20
c0014138:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001413e:	83 f8 01             	cmp    eax,0x1
c0014141:	75 6f                	jne    c00141b2 <CPU::detectFeatures()+0x67e>
c0014143:	51                   	push   ecx
c0014144:	51                   	push   ecx
c0014145:	68 25 62 02 c0       	push   0xc0026225
c001414a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001414e:	56                   	push   esi
c001414f:	e8 ec c5 fe ff       	call   c0000740 <strcpy>
c0014154:	5f                   	pop    edi
c0014155:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001415b:	5d                   	pop    ebp
c001415c:	66 c1 e8 06          	shr    ax,0x6
c0014160:	0f b6 c0             	movzx  eax,al
c0014163:	50                   	push   eax
c0014164:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001416a:	c1 e8 0e             	shr    eax,0xe
c001416d:	0f b6 c0             	movzx  eax,al
c0014170:	50                   	push   eax
c0014171:	e8 fe f1 ff ff       	call   c0013374 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0014176:	5a                   	pop    edx
c0014177:	59                   	pop    ecx
c0014178:	50                   	push   eax
c0014179:	56                   	push   esi
c001417a:	e8 01 c7 fe ff       	call   c0000880 <strcat>
c001417f:	5f                   	pop    edi
c0014180:	5d                   	pop    ebp
c0014181:	56                   	push   esi
c0014182:	53                   	push   ebx
c0014183:	e8 28 a6 ff ff       	call   c000e7b0 <Device::setName(char const*)>
c0014188:	58                   	pop    eax
c0014189:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001418f:	5a                   	pop    edx
c0014190:	68 2c 62 02 c0       	push   0xc002622c
c0014195:	50                   	push   eax
c0014196:	e8 31 c6 fe ff       	call   c00007cc <strcmp>
c001419b:	83 c4 10             	add    esp,0x10
c001419e:	85 c0                	test   eax,eax
c00141a0:	0f 85 71 03 00 00    	jne    c0014517 <CPU::detectFeatures()+0x9e3>
c00141a6:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00141ad:	e9 65 03 00 00       	jmp    c0014517 <CPU::detectFeatures()+0x9e3>
c00141b2:	83 f8 02             	cmp    eax,0x2
c00141b5:	0f 85 b5 00 00 00    	jne    c0014270 <CPU::detectFeatures()+0x73c>
c00141bb:	57                   	push   edi
c00141bc:	57                   	push   edi
c00141bd:	68 3e 62 02 c0       	push   0xc002623e
c00141c2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00141c6:	56                   	push   esi
c00141c7:	e8 74 c5 fe ff       	call   c0000740 <strcpy>
c00141cc:	5d                   	pop    ebp
c00141cd:	58                   	pop    eax
c00141ce:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00141d4:	66 c1 e8 06          	shr    ax,0x6
c00141d8:	0f b6 c0             	movzx  eax,al
c00141db:	50                   	push   eax
c00141dc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00141e2:	c1 e8 0e             	shr    eax,0xe
c00141e5:	0f b6 c0             	movzx  eax,al
c00141e8:	50                   	push   eax
c00141e9:	e8 f2 ef ff ff       	call   c00131e0 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00141ee:	5a                   	pop    edx
c00141ef:	59                   	pop    ecx
c00141f0:	50                   	push   eax
c00141f1:	56                   	push   esi
c00141f2:	e8 89 c6 fe ff       	call   c0000880 <strcat>
c00141f7:	5f                   	pop    edi
c00141f8:	5d                   	pop    ebp
c00141f9:	56                   	push   esi
c00141fa:	53                   	push   ebx
c00141fb:	e8 b0 a5 ff ff       	call   c000e7b0 <Device::setName(char const*)>
c0014200:	58                   	pop    eax
c0014201:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0014207:	5a                   	pop    edx
c0014208:	68 43 62 02 c0       	push   0xc0026243
c001420d:	50                   	push   eax
c001420e:	e8 b9 c5 fe ff       	call   c00007cc <strcmp>
c0014213:	83 c4 10             	add    esp,0x10
c0014216:	85 c0                	test   eax,eax
c0014218:	75 20                	jne    c001423a <CPU::detectFeatures()+0x706>
c001421a:	8b 15 e8 89 02 c0    	mov    edx,DWORD PTR ds:0xc00289e8
c0014220:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014226:	a8 01                	test   al,0x1
c0014228:	74 10                	je     c001423a <CPU::detectFeatures()+0x706>
c001422a:	83 e0 fe             	and    eax,0xfffffffe
c001422d:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014233:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001423a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014240:	c1 e8 0e             	shr    eax,0xe
c0014243:	3c 05                	cmp    al,0x5
c0014245:	0f 85 cc 02 00 00    	jne    c0014517 <CPU::detectFeatures()+0x9e3>
c001424b:	56                   	push   esi
c001424c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0014252:	83 e0 0f             	and    eax,0xf
c0014255:	50                   	push   eax
c0014256:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001425c:	66 c1 e8 06          	shr    ax,0x6
c0014260:	0f b6 c0             	movzx  eax,al
c0014263:	50                   	push   eax
c0014264:	6a 05                	push   0x5
c0014266:	e8 eb f3 ff ff       	call   c0013656 <CPU::AMD_K6_writeback(int, int, int)>
c001426b:	e9 1f 02 00 00       	jmp    c001448f <CPU::detectFeatures()+0x95b>
c0014270:	8d 50 fd             	lea    edx,[eax-0x3]
c0014273:	83 fa 01             	cmp    edx,0x1
c0014276:	76 09                	jbe    c0014281 <CPU::detectFeatures()+0x74d>
c0014278:	83 f8 06             	cmp    eax,0x6
c001427b:	0f 85 91 01 00 00    	jne    c0014412 <CPU::detectFeatures()+0x8de>
c0014281:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014287:	c1 ea 0e             	shr    edx,0xe
c001428a:	80 fa 05             	cmp    dl,0x5
c001428d:	75 7b                	jne    c001430a <CPU::detectFeatures()+0x7d6>
c001428f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014295:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001429a:	66 81 fa 00 01       	cmp    dx,0x100
c001429f:	75 0c                	jne    c00142ad <CPU::detectFeatures()+0x779>
c00142a1:	51                   	push   ecx
c00142a2:	51                   	push   ecx
c00142a3:	68 4a 62 02 c0       	push   0xc002624a
c00142a8:	e9 dc 01 00 00       	jmp    c0014489 <CPU::detectFeatures()+0x955>
c00142ad:	66 81 fa 00 02       	cmp    dx,0x200
c00142b2:	75 0c                	jne    c00142c0 <CPU::detectFeatures()+0x78c>
c00142b4:	52                   	push   edx
c00142b5:	52                   	push   edx
c00142b6:	68 5d 62 02 c0       	push   0xc002625d
c00142bb:	e9 c9 01 00 00       	jmp    c0014489 <CPU::detectFeatures()+0x955>
c00142c0:	66 81 fa 40 02       	cmp    dx,0x240
c00142c5:	75 0c                	jne    c00142d3 <CPU::detectFeatures()+0x79f>
c00142c7:	50                   	push   eax
c00142c8:	50                   	push   eax
c00142c9:	68 6f 62 02 c0       	push   0xc002626f
c00142ce:	e9 b6 01 00 00       	jmp    c0014489 <CPU::detectFeatures()+0x955>
c00142d3:	83 f8 06             	cmp    eax,0x6
c00142d6:	75 0c                	jne    c00142e4 <CPU::detectFeatures()+0x7b0>
c00142d8:	50                   	push   eax
c00142d9:	50                   	push   eax
c00142da:	68 81 62 02 c0       	push   0xc0026281
c00142df:	e9 a5 01 00 00       	jmp    c0014489 <CPU::detectFeatures()+0x955>
c00142e4:	83 f8 04             	cmp    eax,0x4
c00142e7:	75 0c                	jne    c00142f5 <CPU::detectFeatures()+0x7c1>
c00142e9:	50                   	push   eax
c00142ea:	50                   	push   eax
c00142eb:	68 8d 62 02 c0       	push   0xc002628d
c00142f0:	e9 94 01 00 00       	jmp    c0014489 <CPU::detectFeatures()+0x955>
c00142f5:	83 f8 03             	cmp    eax,0x3
c00142f8:	0f 85 19 02 00 00    	jne    c0014517 <CPU::detectFeatures()+0x9e3>
c00142fe:	50                   	push   eax
c00142ff:	50                   	push   eax
c0014300:	68 95 62 02 c0       	push   0xc0026295
c0014305:	e9 7f 01 00 00       	jmp    c0014489 <CPU::detectFeatures()+0x955>
c001430a:	80 fa 06             	cmp    dl,0x6
c001430d:	0f 85 db 00 00 00    	jne    c00143ee <CPU::detectFeatures()+0x8ba>
c0014313:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014319:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001431e:	66 81 fa 80 01       	cmp    dx,0x180
c0014323:	75 0c                	jne    c0014331 <CPU::detectFeatures()+0x7fd>
c0014325:	50                   	push   eax
c0014326:	50                   	push   eax
c0014327:	68 a0 62 02 c0       	push   0xc00262a0
c001432c:	e9 58 01 00 00       	jmp    c0014489 <CPU::detectFeatures()+0x955>
c0014331:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0014337:	66 f7 c1 80 ff       	test   cx,0xff80
c001433c:	75 0c                	jne    c001434a <CPU::detectFeatures()+0x816>
c001433e:	50                   	push   eax
c001433f:	50                   	push   eax
c0014340:	68 b0 62 02 c0       	push   0xc00262b0
c0014345:	e9 3f 01 00 00       	jmp    c0014489 <CPU::detectFeatures()+0x955>
c001434a:	66 81 fa 40 02       	cmp    dx,0x240
c001434f:	75 0c                	jne    c001435d <CPU::detectFeatures()+0x829>
c0014351:	55                   	push   ebp
c0014352:	55                   	push   ebp
c0014353:	68 b7 62 02 c0       	push   0xc00262b7
c0014358:	e9 2c 01 00 00       	jmp    c0014489 <CPU::detectFeatures()+0x955>
c001435d:	66 81 fa 80 02       	cmp    dx,0x280
c0014362:	75 0c                	jne    c0014370 <CPU::detectFeatures()+0x83c>
c0014364:	57                   	push   edi
c0014365:	57                   	push   edi
c0014366:	68 c0 62 02 c0       	push   0xc00262c0
c001436b:	e9 19 01 00 00       	jmp    c0014489 <CPU::detectFeatures()+0x955>
c0014370:	66 81 fa 40 03       	cmp    dx,0x340
c0014375:	74 ed                	je     c0014364 <CPU::detectFeatures()+0x830>
c0014377:	66 81 fa c0 03       	cmp    dx,0x3c0
c001437c:	75 0c                	jne    c001438a <CPU::detectFeatures()+0x856>
c001437e:	56                   	push   esi
c001437f:	56                   	push   esi
c0014380:	68 c7 62 02 c0       	push   0xc00262c7
c0014385:	e9 ff 00 00 00       	jmp    c0014489 <CPU::detectFeatures()+0x955>
c001438a:	83 f8 06             	cmp    eax,0x6
c001438d:	0f 84 45 ff ff ff    	je     c00142d8 <CPU::detectFeatures()+0x7a4>
c0014393:	83 f8 04             	cmp    eax,0x4
c0014396:	0f 84 4d ff ff ff    	je     c00142e9 <CPU::detectFeatures()+0x7b5>
c001439c:	83 f8 03             	cmp    eax,0x3
c001439f:	0f 85 72 01 00 00    	jne    c0014517 <CPU::detectFeatures()+0x9e3>
c00143a5:	51                   	push   ecx
c00143a6:	51                   	push   ecx
c00143a7:	68 d0 62 02 c0       	push   0xc00262d0
c00143ac:	53                   	push   ebx
c00143ad:	e8 fe a3 ff ff       	call   c000e7b0 <Device::setName(char const*)>
c00143b2:	b1 c1                	mov    cl,0xc1
c00143b4:	88 c8                	mov    al,cl
c00143b6:	e6 22                	out    0x22,al
c00143b8:	e4 23                	in     al,0x23
c00143ba:	88 c2                	mov    dl,al
c00143bc:	88 c8                	mov    al,cl
c00143be:	e6 22                	out    0x22,al
c00143c0:	88 d0                	mov    al,dl
c00143c2:	83 c8 10             	or     eax,0x10
c00143c5:	e6 23                	out    0x23,al
c00143c7:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00143ce:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00143d1:	89 d0                	mov    eax,edx
c00143d3:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00143d9:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00143dd:	40                   	inc    eax
c00143de:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00143e4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00143e9:	e9 a1 00 00 00       	jmp    c001448f <CPU::detectFeatures()+0x95b>
c00143ee:	83 f8 06             	cmp    eax,0x6
c00143f1:	0f 84 e1 fe ff ff    	je     c00142d8 <CPU::detectFeatures()+0x7a4>
c00143f7:	83 f8 04             	cmp    eax,0x4
c00143fa:	0f 84 e9 fe ff ff    	je     c00142e9 <CPU::detectFeatures()+0x7b5>
c0014400:	83 f8 03             	cmp    eax,0x3
c0014403:	0f 85 0e 01 00 00    	jne    c0014517 <CPU::detectFeatures()+0x9e3>
c0014409:	52                   	push   edx
c001440a:	52                   	push   edx
c001440b:	68 db 62 02 c0       	push   0xc00262db
c0014410:	eb 77                	jmp    c0014489 <CPU::detectFeatures()+0x955>
c0014412:	83 f8 07             	cmp    eax,0x7
c0014415:	75 09                	jne    c0014420 <CPU::detectFeatures()+0x8ec>
c0014417:	50                   	push   eax
c0014418:	50                   	push   eax
c0014419:	68 e5 62 02 c0       	push   0xc00262e5
c001441e:	eb 69                	jmp    c0014489 <CPU::detectFeatures()+0x955>
c0014420:	83 f8 0a             	cmp    eax,0xa
c0014423:	75 09                	jne    c001442e <CPU::detectFeatures()+0x8fa>
c0014425:	50                   	push   eax
c0014426:	50                   	push   eax
c0014427:	68 f0 62 02 c0       	push   0xc00262f0
c001442c:	eb 5b                	jmp    c0014489 <CPU::detectFeatures()+0x955>
c001442e:	83 f8 0b             	cmp    eax,0xb
c0014431:	75 09                	jne    c001443c <CPU::detectFeatures()+0x908>
c0014433:	50                   	push   eax
c0014434:	50                   	push   eax
c0014435:	68 f8 62 02 c0       	push   0xc00262f8
c001443a:	eb 4d                	jmp    c0014489 <CPU::detectFeatures()+0x955>
c001443c:	83 f8 08             	cmp    eax,0x8
c001443f:	75 09                	jne    c001444a <CPU::detectFeatures()+0x916>
c0014441:	50                   	push   eax
c0014442:	50                   	push   eax
c0014443:	68 01 63 02 c0       	push   0xc0026301
c0014448:	eb 3f                	jmp    c0014489 <CPU::detectFeatures()+0x955>
c001444a:	83 f8 09             	cmp    eax,0x9
c001444d:	75 09                	jne    c0014458 <CPU::detectFeatures()+0x924>
c001444f:	50                   	push   eax
c0014450:	50                   	push   eax
c0014451:	68 09 63 02 c0       	push   0xc0026309
c0014456:	eb 31                	jmp    c0014489 <CPU::detectFeatures()+0x955>
c0014458:	83 f8 05             	cmp    eax,0x5
c001445b:	75 09                	jne    c0014466 <CPU::detectFeatures()+0x932>
c001445d:	50                   	push   eax
c001445e:	50                   	push   eax
c001445f:	68 11 63 02 c0       	push   0xc0026311
c0014464:	eb 23                	jmp    c0014489 <CPU::detectFeatures()+0x955>
c0014466:	83 f8 0c             	cmp    eax,0xc
c0014469:	75 09                	jne    c0014474 <CPU::detectFeatures()+0x940>
c001446b:	55                   	push   ebp
c001446c:	55                   	push   ebp
c001446d:	68 1f 63 02 c0       	push   0xc002631f
c0014472:	eb 15                	jmp    c0014489 <CPU::detectFeatures()+0x955>
c0014474:	83 f8 0d             	cmp    eax,0xd
c0014477:	75 09                	jne    c0014482 <CPU::detectFeatures()+0x94e>
c0014479:	57                   	push   edi
c001447a:	57                   	push   edi
c001447b:	68 2a 63 02 c0       	push   0xc002632a
c0014480:	eb 07                	jmp    c0014489 <CPU::detectFeatures()+0x955>
c0014482:	56                   	push   esi
c0014483:	56                   	push   esi
c0014484:	68 3e 63 02 c0       	push   0xc002633e
c0014489:	53                   	push   ebx
c001448a:	e8 21 a3 ff ff       	call   c000e7b0 <Device::setName(char const*)>
c001448f:	83 c4 10             	add    esp,0x10
c0014492:	e9 80 00 00 00       	jmp    c0014517 <CPU::detectFeatures()+0x9e3>
c0014497:	51                   	push   ecx
c0014498:	51                   	push   ecx
c0014499:	68 8a 61 02 c0       	push   0xc002618a
c001449e:	55                   	push   ebp
c001449f:	e8 9c c2 fe ff       	call   c0000740 <strcpy>
c00144a4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00144ae:	e8 30 bd fe ff       	call   c00001e3 <is486>
c00144b3:	83 c4 10             	add    esp,0x10
c00144b6:	85 c0                	test   eax,eax
c00144b8:	74 2b                	je     c00144e5 <CPU::detectFeatures()+0x9b1>
c00144ba:	52                   	push   edx
c00144bb:	52                   	push   edx
c00144bc:	68 4a 63 02 c0       	push   0xc002634a
c00144c1:	53                   	push   ebx
c00144c2:	e8 e9 a2 ff ff       	call   c000e7b0 <Device::setName(char const*)>
c00144c7:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00144ce:	0f 20 c0             	mov    eax,cr0
c00144d1:	83 e0 14             	and    eax,0x14
c00144d4:	83 c4 10             	add    esp,0x10
c00144d7:	83 f8 04             	cmp    eax,0x4
c00144da:	75 1f                	jne    c00144fb <CPU::detectFeatures()+0x9c7>
c00144dc:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00144e3:	eb 32                	jmp    c0014517 <CPU::detectFeatures()+0x9e3>
c00144e5:	50                   	push   eax
c00144e6:	50                   	push   eax
c00144e7:	68 55 63 02 c0       	push   0xc0026355
c00144ec:	53                   	push   ebx
c00144ed:	e8 be a2 ff ff       	call   c000e7b0 <Device::setName(char const*)>
c00144f2:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00144f9:	eb d3                	jmp    c00144ce <CPU::detectFeatures()+0x99a>
c00144fb:	e8 be bc fe ff       	call   c00001be <hasLegacyFPU>
c0014500:	83 e0 01             	and    eax,0x1
c0014503:	8d 14 00             	lea    edx,[eax+eax*1]
c0014506:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001450c:	83 e0 fd             	and    eax,0xfffffffd
c001450f:	09 d0                	or     eax,edx
c0014511:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014517:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c001451e:	74 0e                	je     c001452e <CPU::detectFeatures()+0x9fa>
c0014520:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0014525:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c001452c:	eb 20                	jmp    c001454e <CPU::detectFeatures()+0xa1a>
c001452e:	e8 8b bc fe ff       	call   c00001be <hasLegacyFPU>
c0014533:	83 e0 01             	and    eax,0x1
c0014536:	8d 14 00             	lea    edx,[eax+eax*1]
c0014539:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001453f:	83 e0 fd             	and    eax,0xfffffffd
c0014542:	09 d0                	or     eax,edx
c0014544:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001454a:	a8 02                	test   al,0x2
c001454c:	75 d2                	jne    c0014520 <CPU::detectFeatures()+0x9ec>
c001454e:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0014555:	83 c4 4c             	add    esp,0x4c
c0014558:	5b                   	pop    ebx
c0014559:	5e                   	pop    esi
c001455a:	5f                   	pop    edi
c001455b:	5d                   	pop    ebp
c001455c:	c3                   	ret    
c001455d:	90                   	nop

c001455e <CPU::setupSMEP()>:
c001455e:	0f 20 e0             	mov    eax,cr4
c0014561:	0d 00 00 10 00       	or     eax,0x100000
c0014566:	0f 22 e0             	mov    cr4,eax
c0014569:	c3                   	ret    

c001456a <CPU::setupUMIP()>:
c001456a:	0f 20 e0             	mov    eax,cr4
c001456d:	80 cc 08             	or     ah,0x8
c0014570:	0f 22 e0             	mov    cr4,eax
c0014573:	c3                   	ret    

c0014574 <CPU::setupTSC()>:
c0014574:	0f 20 e0             	mov    eax,cr4
c0014577:	83 c8 04             	or     eax,0x4
c001457a:	0f 22 e0             	mov    cr4,eax
c001457d:	c3                   	ret    

c001457e <CPU::setupLargePages()>:
c001457e:	0f 20 e0             	mov    eax,cr4
c0014581:	83 c8 10             	or     eax,0x10
c0014584:	0f 22 e0             	mov    cr4,eax
c0014587:	c3                   	ret    

c0014588 <CPU::setupPAT()>:
c0014588:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c001458d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014594:	74 2c                	je     c00145c2 <CPU::setupPAT()+0x3a>
c0014596:	53                   	push   ebx
c0014597:	83 ec 10             	sub    esp,0x10
c001459a:	68 77 02 00 00       	push   0x277
c001459f:	50                   	push   eax
c00145a0:	e8 c9 4c ff ff       	call   c000926e <Computer::rdmsr(unsigned int)>
c00145a5:	83 e2 f8             	and    edx,0xfffffff8
c00145a8:	83 ca 01             	or     edx,0x1
c00145ab:	52                   	push   edx
c00145ac:	50                   	push   eax
c00145ad:	68 77 02 00 00       	push   0x277
c00145b2:	ff 35 e8 89 02 c0    	push   DWORD PTR ds:0xc00289e8
c00145b8:	e8 dd 4c ff ff       	call   c000929a <Computer::wrmsr(unsigned int, unsigned long long)>
c00145bd:	83 c4 28             	add    esp,0x28
c00145c0:	5b                   	pop    ebx
c00145c1:	c3                   	ret    
c00145c2:	c3                   	ret    
c00145c3:	90                   	nop

c00145c4 <CPU::setupMTRR()>:
c00145c4:	c3                   	ret    
c00145c5:	90                   	nop

c00145c6 <CPU::setupGlobalPages()>:
c00145c6:	0f 20 e0             	mov    eax,cr4
c00145c9:	0c 80                	or     al,0x80
c00145cb:	0f 22 e0             	mov    cr4,eax
c00145ce:	c3                   	ret    
c00145cf:	90                   	nop

c00145d0 <CPU::allowUsermodeDataAccess()>:
c00145d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145d4:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00145db:	74 03                	je     c00145e0 <CPU::allowUsermodeDataAccess()+0x10>
c00145dd:	0f 01 cb             	stac   
c00145e0:	c3                   	ret    
c00145e1:	90                   	nop

c00145e2 <CPU::prohibitUsermodeDataAccess()>:
c00145e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145e6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00145ed:	74 03                	je     c00145f2 <CPU::prohibitUsermodeDataAccess()+0x10>
c00145ef:	0f 01 ca             	clac   
c00145f2:	c3                   	ret    
c00145f3:	90                   	nop

c00145f4 <CPU::setupSMAP()>:
c00145f4:	0f 20 e0             	mov    eax,cr4
c00145f7:	0d 00 00 20 00       	or     eax,0x200000
c00145fc:	0f 22 e0             	mov    cr4,eax
c00145ff:	eb e1                	jmp    c00145e2 <CPU::prohibitUsermodeDataAccess()>
c0014601:	90                   	nop

c0014602 <CPU::setupFeatures()>:
c0014602:	53                   	push   ebx
c0014603:	83 ec 08             	sub    esp,0x8
c0014606:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001460a:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014611:	74 18                	je     c001462b <CPU::setupFeatures()+0x29>
c0014613:	83 ec 0c             	sub    esp,0xc
c0014616:	68 60 63 02 c0       	push   0xc0026360
c001461b:	e8 27 8a ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0014620:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014623:	e8 42 ff ff ff       	call   c001456a <CPU::setupUMIP()>
c0014628:	83 c4 10             	add    esp,0x10
c001462b:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014632:	74 18                	je     c001464c <CPU::setupFeatures()+0x4a>
c0014634:	83 ec 0c             	sub    esp,0xc
c0014637:	68 6a 63 02 c0       	push   0xc002636a
c001463c:	e8 06 8a ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0014641:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014644:	e8 2b ff ff ff       	call   c0014574 <CPU::setupTSC()>
c0014649:	83 c4 10             	add    esp,0x10
c001464c:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014653:	74 18                	je     c001466d <CPU::setupFeatures()+0x6b>
c0014655:	83 ec 0c             	sub    esp,0xc
c0014658:	68 73 63 02 c0       	push   0xc0026373
c001465d:	e8 e5 89 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0014662:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014665:	e8 14 ff ff ff       	call   c001457e <CPU::setupLargePages()>
c001466a:	83 c4 10             	add    esp,0x10
c001466d:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014674:	74 18                	je     c001468e <CPU::setupFeatures()+0x8c>
c0014676:	83 ec 0c             	sub    esp,0xc
c0014679:	68 7c 63 02 c0       	push   0xc002637c
c001467e:	e8 c4 89 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0014683:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014686:	e8 3b ff ff ff       	call   c00145c6 <CPU::setupGlobalPages()>
c001468b:	83 c4 10             	add    esp,0x10
c001468e:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014695:	74 18                	je     c00146af <CPU::setupFeatures()+0xad>
c0014697:	83 ec 0c             	sub    esp,0xc
c001469a:	68 8e 63 02 c0       	push   0xc002638e
c001469f:	e8 a3 89 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00146a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146a7:	e8 dc fe ff ff       	call   c0014588 <CPU::setupPAT()>
c00146ac:	83 c4 10             	add    esp,0x10
c00146af:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00146b6:	74 11                	je     c00146c9 <CPU::setupFeatures()+0xc7>
c00146b8:	c7 44 24 10 97 63 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026397
c00146c0:	83 c4 08             	add    esp,0x8
c00146c3:	5b                   	pop    ebx
c00146c4:	e9 7e 89 ff ff       	jmp    c000d047 <Dbg::kprintf(char const*, ...)>
c00146c9:	83 c4 08             	add    esp,0x8
c00146cc:	5b                   	pop    ebx
c00146cd:	c3                   	ret    

c00146ce <CPU::open(int, int, void*)>:
c00146ce:	57                   	push   edi
c00146cf:	56                   	push   esi
c00146d0:	53                   	push   ebx
c00146d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00146d5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00146d9:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00146df:	83 ec 0c             	sub    esp,0xc
c00146e2:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00146e8:	68 a1 63 02 c0       	push   0xc00263a1
c00146ed:	e8 c3 56 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00146f2:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00146f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00146fb:	e8 52 4f ff ff       	call   c0009652 <GDT::setup()>
c0014700:	c7 04 24 b3 63 02 c0 	mov    DWORD PTR [esp],0xc00263b3
c0014707:	e8 a9 56 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001470c:	83 c4 0c             	add    esp,0xc
c001470f:	6a 00                	push   0x0
c0014711:	68 ef be ad de       	push   0xdeadbeef
c0014716:	57                   	push   edi
c0014717:	e8 8c 6f ff ff       	call   c000b6a8 <TSS::setup(unsigned long, unsigned long)>
c001471c:	c7 04 24 c5 63 02 c0 	mov    DWORD PTR [esp],0xc00263c5
c0014723:	e8 8d 56 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0014728:	89 3c 24             	mov    DWORD PTR [esp],edi
c001472b:	e8 58 6f ff ff       	call   c000b688 <TSS::flush()>
c0014730:	c7 04 24 d9 63 02 c0 	mov    DWORD PTR [esp],0xc00263d9
c0014737:	e8 79 56 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001473c:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0014742:	89 04 24             	mov    DWORD PTR [esp],eax
c0014745:	e8 74 51 ff ff       	call   c00098be <IDT::setup()>
c001474a:	c7 04 24 eb 63 02 c0 	mov    DWORD PTR [esp],0xc00263eb
c0014751:	e8 5f 56 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0014756:	b8 00 04 00 00       	mov    eax,0x400
c001475b:	0f 23 f8             	mov    db7,eax
c001475e:	c7 04 24 09 64 02 c0 	mov    DWORD PTR [esp],0xc0026409
c0014765:	e8 4b 56 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001476a:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0014774:	e8 99 5c ff ff       	call   c000a412 <Phys::allocatePage()>
c0014779:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001477f:	89 30                	mov    DWORD PTR [eax],esi
c0014781:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0014787:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001478a:	c7 04 24 2b 64 02 c0 	mov    DWORD PTR [esp],0xc002642b
c0014791:	e8 1f 56 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0014796:	58                   	pop    eax
c0014797:	5a                   	pop    edx
c0014798:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001479e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00147a2:	e8 fb 7e ff ff       	call   c000c6a2 <VAS::setCPUSpecific(unsigned long)>
c00147a7:	c7 04 24 53 64 02 c0 	mov    DWORD PTR [esp],0xc0026453
c00147ae:	e8 02 56 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00147b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00147b6:	e8 79 f3 ff ff       	call   c0013b34 <CPU::detectFeatures()>
c00147bb:	c7 04 24 76 64 02 c0 	mov    DWORD PTR [esp],0xc0026476
c00147c2:	e8 ee 55 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00147c7:	e8 e7 b2 ff ff       	call   c000fab3 <setupInterruptController()>
c00147cc:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00147d2:	c7 04 24 9a 64 02 c0 	mov    DWORD PTR [esp],0xc002649a
c00147d9:	e8 d7 55 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00147de:	a1 00 8a 02 c0       	mov    eax,ds:0xc0028a00
c00147e3:	83 e0 10             	and    eax,0x10
c00147e6:	83 f8 01             	cmp    eax,0x1
c00147e9:	19 c0                	sbb    eax,eax
c00147eb:	83 e0 46             	and    eax,0x46
c00147ee:	83 c0 1e             	add    eax,0x1e
c00147f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00147f4:	e8 eb c8 ff ff       	call   c00110e4 <setupTimer(int)>
c00147f9:	83 c4 10             	add    esp,0x10
c00147fc:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0014802:	f6 05 00 8a 02 c0 20 	test   BYTE PTR ds:0xc0028a00,0x20
c0014809:	74 18                	je     c0014823 <CPU::open(int, int, void*)+0x155>
c001480b:	83 ec 0c             	sub    esp,0xc
c001480e:	68 b5 64 02 c0       	push   0xc00264b5
c0014813:	e8 9d 55 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0014818:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001481b:	e8 e2 fd ff ff       	call   c0014602 <CPU::setupFeatures()>
c0014820:	83 c4 10             	add    esp,0x10
c0014823:	83 ec 0c             	sub    esp,0xc
c0014826:	68 d0 64 02 c0       	push   0xc00264d0
c001482b:	e8 85 55 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0014830:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014833:	e8 5c f0 ff ff       	call   c0013894 <CPU::displayFeatures()>
c0014838:	83 c4 10             	add    esp,0x10
c001483b:	31 c0                	xor    eax,eax
c001483d:	5b                   	pop    ebx
c001483e:	5e                   	pop    esi
c001483f:	5f                   	pop    edi
c0014840:	c3                   	ret    
c0014841:	90                   	nop

c0014842 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0014842:	57                   	push   edi
c0014843:	56                   	push   esi
c0014844:	53                   	push   ebx
c0014845:	51                   	push   ecx
c0014846:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001484a:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c001484d:	0f 02 c0             	lar    eax,ax
c0014850:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0014853:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0014857:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c001485a:	88 ca                	mov    dl,cl
c001485c:	c0 ea 06             	shr    dl,0x6
c001485f:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0014863:	89 ca                	mov    edx,ecx
c0014865:	66 c1 ea 03          	shr    dx,0x3
c0014869:	83 e2 07             	and    edx,0x7
c001486c:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0014871:	88 17                	mov    BYTE PTR [edi],dl
c0014873:	0f 84 a6 01 00 00    	je     c0014a1f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0014879:	83 e1 07             	and    ecx,0x7
c001487c:	80 f9 04             	cmp    cl,0x4
c001487f:	0f 84 98 00 00 00    	je     c001491d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0014885:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001488a:	0f 95 c0             	setne  al
c001488d:	80 f9 05             	cmp    cl,0x5
c0014890:	0f 95 c2             	setne  dl
c0014893:	08 c2                	or     dl,al
c0014895:	74 79                	je     c0014910 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0014897:	84 c9                	test   cl,cl
c0014899:	75 05                	jne    c00148a0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001489b:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001489e:	eb 3c                	jmp    c00148dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00148a0:	80 f9 01             	cmp    cl,0x1
c00148a3:	75 05                	jne    c00148aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00148a5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00148a8:	eb 32                	jmp    c00148dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00148aa:	80 f9 02             	cmp    cl,0x2
c00148ad:	75 05                	jne    c00148b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00148af:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00148b2:	eb 28                	jmp    c00148dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00148b4:	31 c0                	xor    eax,eax
c00148b6:	80 f9 03             	cmp    cl,0x3
c00148b9:	75 05                	jne    c00148c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00148bb:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00148be:	eb 1c                	jmp    c00148dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00148c0:	80 f9 05             	cmp    cl,0x5
c00148c3:	75 05                	jne    c00148ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00148c5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00148c8:	eb 12                	jmp    c00148dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00148ca:	80 f9 06             	cmp    cl,0x6
c00148cd:	75 05                	jne    c00148d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00148cf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00148d2:	eb 08                	jmp    c00148dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00148d4:	80 f9 07             	cmp    cl,0x7
c00148d7:	75 03                	jne    c00148dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00148d9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00148dc:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00148e1:	75 10                	jne    c00148f3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00148e3:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00148e7:	b9 03 00 00 00       	mov    ecx,0x3
c00148ec:	01 d0                	add    eax,edx
c00148ee:	e9 37 01 00 00       	jmp    c0014a2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00148f3:	b9 02 00 00 00       	mov    ecx,0x2
c00148f8:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00148fd:	0f 85 27 01 00 00    	jne    c0014a2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014903:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0014906:	b9 06 00 00 00       	mov    ecx,0x6
c001490b:	e9 1a 01 00 00       	jmp    c0014a2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014910:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0014913:	b9 06 00 00 00       	mov    ecx,0x6
c0014918:	e9 0f 01 00 00       	jmp    c0014a2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001491d:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0014920:	88 ca                	mov    dl,cl
c0014922:	c0 ea 06             	shr    dl,0x6
c0014925:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0014929:	89 ca                	mov    edx,ecx
c001492b:	66 c1 ea 03          	shr    dx,0x3
c001492f:	83 e2 07             	and    edx,0x7
c0014932:	80 e1 07             	and    cl,0x7
c0014935:	75 05                	jne    c001493c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0014937:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001493a:	eb 4c                	jmp    c0014988 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001493c:	80 f9 01             	cmp    cl,0x1
c001493f:	75 05                	jne    c0014946 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0014941:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014944:	eb 42                	jmp    c0014988 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014946:	80 f9 02             	cmp    cl,0x2
c0014949:	75 05                	jne    c0014950 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001494b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001494e:	eb 38                	jmp    c0014988 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014950:	80 f9 03             	cmp    cl,0x3
c0014953:	75 05                	jne    c001495a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0014955:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0014958:	eb 2e                	jmp    c0014988 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001495a:	80 f9 04             	cmp    cl,0x4
c001495d:	75 12                	jne    c0014971 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001495f:	f6 c4 60             	test   ah,0x60
c0014962:	75 08                	jne    c001496c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0014964:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0014967:	8d 78 14             	lea    edi,[eax+0x14]
c001496a:	eb 1c                	jmp    c0014988 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001496c:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001496f:	eb 17                	jmp    c0014988 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014971:	80 f9 05             	cmp    cl,0x5
c0014974:	75 05                	jne    c001497b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0014976:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0014979:	eb 0d                	jmp    c0014988 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001497b:	80 f9 06             	cmp    cl,0x6
c001497e:	75 05                	jne    c0014985 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0014980:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0014983:	eb 03                	jmp    c0014988 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014985:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0014988:	84 d2                	test   dl,dl
c001498a:	75 05                	jne    c0014991 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001498c:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001498f:	eb 3c                	jmp    c00149cd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014991:	80 fa 01             	cmp    dl,0x1
c0014994:	75 05                	jne    c001499b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0014996:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014999:	eb 32                	jmp    c00149cd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001499b:	80 fa 02             	cmp    dl,0x2
c001499e:	75 05                	jne    c00149a5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00149a0:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00149a3:	eb 28                	jmp    c00149cd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00149a5:	80 fa 03             	cmp    dl,0x3
c00149a8:	75 05                	jne    c00149af <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00149aa:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00149ad:	eb 1e                	jmp    c00149cd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00149af:	31 c0                	xor    eax,eax
c00149b1:	80 fa 04             	cmp    dl,0x4
c00149b4:	74 17                	je     c00149cd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00149b6:	80 fa 05             	cmp    dl,0x5
c00149b9:	75 05                	jne    c00149c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00149bb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00149be:	eb 0d                	jmp    c00149cd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00149c0:	80 fa 06             	cmp    dl,0x6
c00149c3:	75 05                	jne    c00149ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00149c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00149c8:	eb 03                	jmp    c00149cd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00149ca:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00149cd:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00149d2:	0f 94 c2             	sete   dl
c00149d5:	80 f9 05             	cmp    cl,0x5
c00149d8:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00149dc:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00149e1:	d3 e0                	shl    eax,cl
c00149e3:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00149e7:	74 0a                	je     c00149f3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00149e9:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00149ec:	b9 07 00 00 00       	mov    ecx,0x7
c00149f1:	eb 37                	jmp    c0014a2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00149f3:	01 f8                	add    eax,edi
c00149f5:	b9 03 00 00 00       	mov    ecx,0x3
c00149fa:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00149ff:	74 2b                	je     c0014a2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014a01:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0014a06:	75 0d                	jne    c0014a15 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0014a08:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0014a0c:	01 c8                	add    eax,ecx
c0014a0e:	b9 04 00 00 00       	mov    ecx,0x4
c0014a13:	eb 17                	jmp    c0014a2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014a15:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0014a18:	b9 07 00 00 00       	mov    ecx,0x7
c0014a1d:	eb 0d                	jmp    c0014a2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014a1f:	b9 02 00 00 00       	mov    ecx,0x2
c0014a24:	b2 01                	mov    dl,0x1
c0014a26:	31 c0                	xor    eax,eax
c0014a28:	eb 02                	jmp    c0014a2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014a2a:	31 d2                	xor    edx,edx
c0014a2c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014a30:	89 0b                	mov    DWORD PTR [ebx],ecx
c0014a32:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014a36:	88 11                	mov    BYTE PTR [ecx],dl
c0014a38:	5a                   	pop    edx
c0014a39:	5b                   	pop    ebx
c0014a3a:	5e                   	pop    esi
c0014a3b:	5f                   	pop    edi
c0014a3c:	c3                   	ret    

c0014a3d <Krnl::smpEntry()>:
c0014a3d:	eb fe                	jmp    c0014a3d <Krnl::smpEntry()>

c0014a3f <Krnl::startCPU(int)>:
c0014a3f:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0014a44:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014a4b:	0f 84 36 01 00 00    	je     c0014b87 <Krnl::startCPU(int)+0x148>
c0014a51:	53                   	push   ebx
c0014a52:	83 ec 10             	sub    esp,0x10
c0014a55:	fa                   	cli    
c0014a56:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c0014a5c:	6a 1b                	push   0x1b
c0014a5e:	ff 35 e8 89 02 c0    	push   DWORD PTR ds:0xc00289e8
c0014a64:	e8 05 48 ff ff       	call   c000926e <Computer::rdmsr(unsigned int)>
c0014a69:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014a6e:	89 c3                	mov    ebx,eax
c0014a70:	58                   	pop    eax
c0014a71:	5a                   	pop    edx
c0014a72:	53                   	push   ebx
c0014a73:	68 18 65 02 c0       	push   0xc0026518
c0014a78:	e8 ca 85 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0014a7d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014a87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a8b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014a95:	c1 e0 18             	shl    eax,0x18
c0014a98:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0014a9e:	83 c4 10             	add    esp,0x10
c0014aa1:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0014aa7:	09 c2                	or     edx,eax
c0014aa9:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0014aaf:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0014ab5:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014abb:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0014ac1:	80 cd c5             	or     ch,0xc5
c0014ac4:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014aca:	f3 90                	pause  
c0014acc:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014ace:	0f ba e1 0c          	bt     ecx,0xc
c0014ad2:	72 f6                	jb     c0014aca <Krnl::startCPU(int)+0x8b>
c0014ad4:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014ada:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014ae0:	09 c1                	or     ecx,eax
c0014ae2:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0014ae8:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014aee:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0014af4:	80 cd 85             	or     ch,0x85
c0014af7:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014afd:	f3 90                	pause  
c0014aff:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014b01:	0f ba e1 0c          	bt     ecx,0xc
c0014b05:	72 f6                	jb     c0014afd <Krnl::startCPU(int)+0xbe>
c0014b07:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014b11:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014b17:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014b1d:	09 c1                	or     ecx,eax
c0014b1f:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0014b25:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014b2b:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0014b31:	81 c9 02 06 00 00    	or     ecx,0x602
c0014b37:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014b3d:	f3 90                	pause  
c0014b3f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014b41:	0f ba e1 0c          	bt     ecx,0xc
c0014b45:	72 f6                	jb     c0014b3d <Krnl::startCPU(int)+0xfe>
c0014b47:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014b51:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014b57:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014b5d:	09 c8                	or     eax,ecx
c0014b5f:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0014b65:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0014b6b:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0014b70:	0d 02 06 00 00       	or     eax,0x602
c0014b75:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0014b7b:	f3 90                	pause  
c0014b7d:	8b 02                	mov    eax,DWORD PTR [edx]
c0014b7f:	0f ba e0 0c          	bt     eax,0xc
c0014b83:	72 f6                	jb     c0014b7b <Krnl::startCPU(int)+0x13c>
c0014b85:	eb fe                	jmp    c0014b85 <Krnl::startCPU(int)+0x146>
c0014b87:	c3                   	ret    

c0014b88 <Krnl::startCPUs()>:
c0014b88:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0014b8d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014b93:	88 c2                	mov    dl,al
c0014b95:	83 e2 0a             	and    edx,0xa
c0014b98:	80 fa 0a             	cmp    dl,0xa
c0014b9b:	75 09                	jne    c0014ba6 <Krnl::startCPUs()+0x1e>
c0014b9d:	a8 01                	test   al,0x1
c0014b9f:	74 05                	je     c0014ba6 <Krnl::startCPUs()+0x1e>
c0014ba1:	e9 f5 b5 fe ff       	jmp    c000019b <prepareTramp>
c0014ba6:	c3                   	ret    
c0014ba7:	90                   	nop

c0014ba8 <EnvVarContainer::getEnv(char const*)>:
c0014ba8:	57                   	push   edi
c0014ba9:	56                   	push   esi
c0014baa:	53                   	push   ebx
c0014bab:	31 db                	xor    ebx,ebx
c0014bad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014bb1:	39 1e                	cmp    DWORD PTR [esi],ebx
c0014bb3:	7e 2b                	jle    c0014be0 <EnvVarContainer::getEnv(char const*)+0x38>
c0014bb5:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0014bbc:	50                   	push   eax
c0014bbd:	50                   	push   eax
c0014bbe:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014bc1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0014bc4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014bc8:	e8 ff bb fe ff       	call   c00007cc <strcmp>
c0014bcd:	83 c4 10             	add    esp,0x10
c0014bd0:	85 c0                	test   eax,eax
c0014bd2:	75 09                	jne    c0014bdd <EnvVarContainer::getEnv(char const*)+0x35>
c0014bd4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014bd7:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0014bdb:	eb 05                	jmp    c0014be2 <EnvVarContainer::getEnv(char const*)+0x3a>
c0014bdd:	43                   	inc    ebx
c0014bde:	eb d1                	jmp    c0014bb1 <EnvVarContainer::getEnv(char const*)+0x9>
c0014be0:	31 c0                	xor    eax,eax
c0014be2:	5b                   	pop    ebx
c0014be3:	5e                   	pop    esi
c0014be4:	5f                   	pop    edi
c0014be5:	c3                   	ret    

c0014be6 <EnvVarContainer::setEnv(char const*, char const*)>:
c0014be6:	55                   	push   ebp
c0014be7:	57                   	push   edi
c0014be8:	56                   	push   esi
c0014be9:	53                   	push   ebx
c0014bea:	83 ec 28             	sub    esp,0x28
c0014bed:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0014bf1:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0014bf5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0014bf9:	56                   	push   esi
c0014bfa:	e8 a1 ba fe ff       	call   c00006a0 <strlen>
c0014bff:	40                   	inc    eax
c0014c00:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c03:	e8 53 51 ff ff       	call   c0009d5b <malloc>
c0014c08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c0f:	e8 8c ba fe ff       	call   c00006a0 <strlen>
c0014c14:	40                   	inc    eax
c0014c15:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c18:	e8 3e 51 ff ff       	call   c0009d5b <malloc>
c0014c1d:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c20:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014c24:	e8 77 ba fe ff       	call   c00006a0 <strlen>
c0014c29:	83 c4 0c             	add    esp,0xc
c0014c2c:	40                   	inc    eax
c0014c2d:	50                   	push   eax
c0014c2e:	6a 00                	push   0x0
c0014c30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014c34:	e8 4b ba fe ff       	call   c0000684 <memset>
c0014c39:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c3c:	e8 5f ba fe ff       	call   c00006a0 <strlen>
c0014c41:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014c45:	8d 48 01             	lea    ecx,[eax+0x1]
c0014c48:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014c4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c4d:	89 de                	mov    esi,ebx
c0014c4f:	e8 4c ba fe ff       	call   c00006a0 <strlen>
c0014c54:	83 c4 0c             	add    esp,0xc
c0014c57:	40                   	inc    eax
c0014c58:	50                   	push   eax
c0014c59:	6a 00                	push   0x0
c0014c5b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c5f:	e8 20 ba fe ff       	call   c0000684 <memset>
c0014c64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c67:	e8 34 ba fe ff       	call   c00006a0 <strlen>
c0014c6c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014c70:	8d 48 01             	lea    ecx,[eax+0x1]
c0014c73:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014c75:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014c78:	40                   	inc    eax
c0014c79:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014c7c:	c1 e0 03             	shl    eax,0x3
c0014c7f:	5a                   	pop    edx
c0014c80:	59                   	pop    ecx
c0014c81:	50                   	push   eax
c0014c82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014c85:	e8 bd 50 ff ff       	call   c0009d47 <realloc>
c0014c8a:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014c8e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014c91:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014c94:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014c98:	b9 08 00 00 00       	mov    ecx,0x8
c0014c9d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014c9f:	83 c4 2c             	add    esp,0x2c
c0014ca2:	5b                   	pop    ebx
c0014ca3:	5e                   	pop    esi
c0014ca4:	5f                   	pop    edi
c0014ca5:	5d                   	pop    ebp
c0014ca6:	c3                   	ret    
c0014ca7:	90                   	nop

c0014ca8 <EnvVarContainer::deleteEnv(char const*)>:
c0014ca8:	c3                   	ret    
c0014ca9:	90                   	nop

c0014caa <EnvVarContainer::loadFrom(char const*, char const*)>:
c0014caa:	55                   	push   ebp
c0014cab:	57                   	push   edi
c0014cac:	56                   	push   esi
c0014cad:	53                   	push   ebx
c0014cae:	81 ec 38 01 00 00    	sub    esp,0x138
c0014cb4:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014cbb:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0014cc2:	68 14 01 00 00       	push   0x114
c0014cc7:	e8 8f 50 ff ff       	call   c0009d5b <malloc>
c0014ccc:	83 c4 0c             	add    esp,0xc
c0014ccf:	89 c3                	mov    ebx,eax
c0014cd1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014cd4:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0014cdb:	50                   	push   eax
c0014cdc:	e8 d1 88 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0014ce1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ce4:	e8 11 8c ff ff       	call   c000d8fa <File::exists()>
c0014ce9:	83 c4 10             	add    esp,0x10
c0014cec:	84 c0                	test   al,al
c0014cee:	75 31                	jne    c0014d21 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0014cf0:	50                   	push   eax
c0014cf1:	50                   	push   eax
c0014cf2:	6a 12                	push   0x12
c0014cf4:	53                   	push   ebx
c0014cf5:	e8 92 89 ff ff       	call   c000d68c <File::open(FileOpenMode)>
c0014cfa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014cfc:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0014cff:	89 34 24             	mov    DWORD PTR [esp],esi
c0014d02:	e8 99 b9 fe ff       	call   c00006a0 <strlen>
c0014d07:	5a                   	pop    edx
c0014d08:	31 d2                	xor    edx,edx
c0014d0a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014d0e:	51                   	push   ecx
c0014d0f:	56                   	push   esi
c0014d10:	52                   	push   edx
c0014d11:	50                   	push   eax
c0014d12:	53                   	push   ebx
c0014d13:	ff d7                	call   edi
c0014d15:	83 c4 14             	add    esp,0x14
c0014d18:	53                   	push   ebx
c0014d19:	e8 cc 89 ff ff       	call   c000d6ea <File::close()>
c0014d1e:	83 c4 10             	add    esp,0x10
c0014d21:	56                   	push   esi
c0014d22:	31 f6                	xor    esi,esi
c0014d24:	68 00 01 00 00       	push   0x100
c0014d29:	6a 00                	push   0x0
c0014d2b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014d2f:	50                   	push   eax
c0014d30:	e8 4f b9 fe ff       	call   c0000684 <memset>
c0014d35:	5f                   	pop    edi
c0014d36:	58                   	pop    eax
c0014d37:	6a 01                	push   0x1
c0014d39:	53                   	push   ebx
c0014d3a:	e8 4d 89 ff ff       	call   c000d68c <File::open(FileOpenMode)>
c0014d3f:	83 c4 10             	add    esp,0x10
c0014d42:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014d4a:	83 ec 0c             	sub    esp,0xc
c0014d4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d4f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014d53:	51                   	push   ecx
c0014d54:	8d 54 24 23          	lea    edx,[esp+0x23]
c0014d58:	52                   	push   edx
c0014d59:	6a 00                	push   0x0
c0014d5b:	6a 01                	push   0x1
c0014d5d:	53                   	push   ebx
c0014d5e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d61:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0014d65:	83 c4 20             	add    esp,0x20
c0014d68:	3c 0d                	cmp    al,0xd
c0014d6a:	0f 84 09 01 00 00    	je     c0014e79 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014d70:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014d75:	0f 84 ef 00 00 00    	je     c0014e6a <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014d7b:	3c 0a                	cmp    al,0xa
c0014d7d:	74 13                	je     c0014d92 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014d7f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014d84:	74 0c                	je     c0014d92 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014d86:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0014d8c:	0f 8e d8 00 00 00    	jle    c0014e6a <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014d92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014d96:	83 ec 0c             	sub    esp,0xc
c0014d99:	8d 78 01             	lea    edi,[eax+0x1]
c0014d9c:	57                   	push   edi
c0014d9d:	e8 b9 4f ff ff       	call   c0009d5b <malloc>
c0014da2:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0014da6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014daa:	8d 56 04             	lea    edx,[esi+0x4]
c0014dad:	89 14 24             	mov    DWORD PTR [esp],edx
c0014db0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0014db4:	e8 a2 4f ff ff       	call   c0009d5b <malloc>
c0014db9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014dbd:	83 c4 0c             	add    esp,0xc
c0014dc0:	57                   	push   edi
c0014dc1:	6a 00                	push   0x0
c0014dc3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014dc7:	e8 b8 b8 fe ff       	call   c0000684 <memset>
c0014dcc:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014dd0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014dd4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014dd8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014dda:	83 c4 0c             	add    esp,0xc
c0014ddd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014de1:	52                   	push   edx
c0014de2:	6a 00                	push   0x0
c0014de4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014de8:	e8 97 b8 fe ff       	call   c0000684 <memset>
c0014ded:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014df1:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014df5:	89 34 24             	mov    DWORD PTR [esp],esi
c0014df8:	e8 a3 b8 fe ff       	call   c00006a0 <strlen>
c0014dfd:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0014e01:	89 c1                	mov    ecx,eax
c0014e03:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014e05:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014e08:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0014e0b:	40                   	inc    eax
c0014e0c:	83 c4 10             	add    esp,0x10
c0014e0f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014e12:	85 d2                	test   edx,edx
c0014e14:	75 0c                	jne    c0014e22 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0014e16:	83 ec 0c             	sub    esp,0xc
c0014e19:	6a 08                	push   0x8
c0014e1b:	e8 3b 4f ff ff       	call   c0009d5b <malloc>
c0014e20:	eb 0c                	jmp    c0014e2e <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0014e22:	c1 e0 03             	shl    eax,0x3
c0014e25:	51                   	push   ecx
c0014e26:	51                   	push   ecx
c0014e27:	50                   	push   eax
c0014e28:	52                   	push   edx
c0014e29:	e8 19 4f ff ff       	call   c0009d47 <realloc>
c0014e2e:	83 c4 10             	add    esp,0x10
c0014e31:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014e34:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014e37:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014e3a:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014e3e:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014e42:	b9 08 00 00 00       	mov    ecx,0x8
c0014e47:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014e49:	31 f6                	xor    esi,esi
c0014e4b:	50                   	push   eax
c0014e4c:	68 00 01 00 00       	push   0x100
c0014e51:	6a 00                	push   0x0
c0014e53:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014e57:	50                   	push   eax
c0014e58:	e8 27 b8 fe ff       	call   c0000684 <memset>
c0014e5d:	83 c4 10             	add    esp,0x10
c0014e60:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014e68:	eb 0f                	jmp    c0014e79 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014e6a:	3c 3d                	cmp    al,0x3d
c0014e6c:	74 07                	je     c0014e75 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0014e6e:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0014e72:	46                   	inc    esi
c0014e73:	eb 04                	jmp    c0014e79 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014e75:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014e79:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014e7e:	0f 85 c6 fe ff ff    	jne    c0014d4a <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0014e84:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014e8a:	5b                   	pop    ebx
c0014e8b:	5e                   	pop    esi
c0014e8c:	5f                   	pop    edi
c0014e8d:	5d                   	pop    ebp
c0014e8e:	c3                   	ret    
c0014e8f:	90                   	nop

c0014e90 <EnvVarContainer::__loadSystem()>:
c0014e90:	83 ec 10             	sub    esp,0x10
c0014e93:	68 c0 83 02 c0       	push   0xc00283c0
c0014e98:	68 29 65 02 c0       	push   0xc0026529
c0014e9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ea1:	e8 04 fe ff ff       	call   c0014caa <EnvVarContainer::loadFrom(char const*, char const*)>
c0014ea6:	83 c4 1c             	add    esp,0x1c
c0014ea9:	c3                   	ret    

c0014eaa <EnvVarContainer::__loadUser()>:
c0014eaa:	c3                   	ret    
c0014eab:	90                   	nop

c0014eac <EnvVarContainer::EnvVarContainer(Process*)>:
c0014eac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014eb0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014eb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014eba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014ebe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0014ec1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ec5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014ecc:	90                   	nop
c0014ecd:	c3                   	ret    

c0014ece <EnvVarContainer::~EnvVarContainer()>:
c0014ece:	83 ec 0c             	sub    esp,0xc
c0014ed1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ed5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014ed8:	85 c0                	test   eax,eax
c0014eda:	74 1d                	je     c0014ef9 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ee0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ee2:	85 c0                	test   eax,eax
c0014ee4:	74 13                	je     c0014ef9 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014ee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014eea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014eed:	83 ec 0c             	sub    esp,0xc
c0014ef0:	50                   	push   eax
c0014ef1:	e8 75 4e ff ff       	call   c0009d6b <free>
c0014ef6:	83 c4 10             	add    esp,0x10
c0014ef9:	90                   	nop
c0014efa:	83 c4 0c             	add    esp,0xc
c0014efd:	c3                   	ret    

c0014efe <Krnl::getEnv(Process*, char const*)>:
c0014efe:	53                   	push   ebx
c0014eff:	83 ec 08             	sub    esp,0x8
c0014f02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f06:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014f0a:	39 05 30 9f 02 c0    	cmp    DWORD PTR ds:0xc0029f30,eax
c0014f10:	74 04                	je     c0014f16 <Krnl::getEnv(Process*, char const*)+0x18>
c0014f12:	85 c0                	test   eax,eax
c0014f14:	75 0b                	jne    c0014f21 <Krnl::getEnv(Process*, char const*)+0x23>
c0014f16:	a1 b4 94 02 c0       	mov    eax,ds:0xc00294b4
c0014f1b:	85 c0                	test   eax,eax
c0014f1d:	75 19                	jne    c0014f38 <Krnl::getEnv(Process*, char const*)+0x3a>
c0014f1f:	eb 27                	jmp    c0014f48 <Krnl::getEnv(Process*, char const*)+0x4a>
c0014f21:	52                   	push   edx
c0014f22:	52                   	push   edx
c0014f23:	53                   	push   ebx
c0014f24:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0014f2a:	e8 79 fc ff ff       	call   c0014ba8 <EnvVarContainer::getEnv(char const*)>
c0014f2f:	83 c4 10             	add    esp,0x10
c0014f32:	85 c0                	test   eax,eax
c0014f34:	75 28                	jne    c0014f5e <Krnl::getEnv(Process*, char const*)+0x60>
c0014f36:	eb de                	jmp    c0014f16 <Krnl::getEnv(Process*, char const*)+0x18>
c0014f38:	52                   	push   edx
c0014f39:	52                   	push   edx
c0014f3a:	53                   	push   ebx
c0014f3b:	50                   	push   eax
c0014f3c:	e8 67 fc ff ff       	call   c0014ba8 <EnvVarContainer::getEnv(char const*)>
c0014f41:	83 c4 10             	add    esp,0x10
c0014f44:	85 c0                	test   eax,eax
c0014f46:	75 16                	jne    c0014f5e <Krnl::getEnv(Process*, char const*)+0x60>
c0014f48:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0014f4c:	a1 b8 94 02 c0       	mov    eax,ds:0xc00294b8
c0014f51:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014f55:	83 c4 08             	add    esp,0x8
c0014f58:	5b                   	pop    ebx
c0014f59:	e9 4a fc ff ff       	jmp    c0014ba8 <EnvVarContainer::getEnv(char const*)>
c0014f5e:	83 c4 08             	add    esp,0x8
c0014f61:	5b                   	pop    ebx
c0014f62:	c3                   	ret    

c0014f63 <Krnl::setEnvSystem(char const*, char const*)>:
c0014f63:	83 ec 10             	sub    esp,0x10
c0014f66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f6e:	ff 35 b8 94 02 c0    	push   DWORD PTR ds:0xc00294b8
c0014f74:	e8 6d fc ff ff       	call   c0014be6 <EnvVarContainer::setEnv(char const*, char const*)>
c0014f79:	83 c4 1c             	add    esp,0x1c
c0014f7c:	c3                   	ret    

c0014f7d <Krnl::setEnvUser(char const*, char const*)>:
c0014f7d:	a1 b4 94 02 c0       	mov    eax,ds:0xc00294b4
c0014f82:	85 c0                	test   eax,eax
c0014f84:	74 15                	je     c0014f9b <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0014f86:	83 ec 10             	sub    esp,0x10
c0014f89:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f8d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f91:	50                   	push   eax
c0014f92:	e8 4f fc ff ff       	call   c0014be6 <EnvVarContainer::setEnv(char const*, char const*)>
c0014f97:	83 c4 1c             	add    esp,0x1c
c0014f9a:	c3                   	ret    
c0014f9b:	c3                   	ret    

c0014f9c <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0014f9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014fa0:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0014fa6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014faa:	e9 37 fc ff ff       	jmp    c0014be6 <EnvVarContainer::setEnv(char const*, char const*)>

c0014faf <Krnl::deleteEnvSystem(char const*)>:
c0014faf:	c3                   	ret    

c0014fb0 <Krnl::deleteEnvUser(char const*)>:
c0014fb0:	c3                   	ret    

c0014fb1 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0014fb1:	c3                   	ret    

c0014fb2 <Krnl::newProcessEnv(Process*)>:
c0014fb2:	83 ec 28             	sub    esp,0x28
c0014fb5:	6a 0c                	push   0xc
c0014fb7:	e8 9f 4d ff ff       	call   c0009d5b <malloc>
c0014fbc:	5a                   	pop    edx
c0014fbd:	59                   	pop    ecx
c0014fbe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014fc2:	50                   	push   eax
c0014fc3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014fc7:	e8 e0 fe ff ff       	call   c0014eac <EnvVarContainer::EnvVarContainer(Process*)>
c0014fcc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014fd0:	83 c4 2c             	add    esp,0x2c
c0014fd3:	c3                   	ret    

c0014fd4 <Krnl::copyProcessEnv(Process*, Process*)>:
c0014fd4:	57                   	push   edi
c0014fd5:	56                   	push   esi
c0014fd6:	53                   	push   ebx
c0014fd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fdb:	83 ec 0c             	sub    esp,0xc
c0014fde:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0014fe4:	6a 0c                	push   0xc
c0014fe6:	e8 70 4d ff ff       	call   c0009d5b <malloc>
c0014feb:	89 c3                	mov    ebx,eax
c0014fed:	58                   	pop    eax
c0014fee:	5a                   	pop    edx
c0014fef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ff3:	53                   	push   ebx
c0014ff4:	e8 b3 fe ff ff       	call   c0014eac <EnvVarContainer::EnvVarContainer(Process*)>
c0014ff9:	8b 07                	mov    eax,DWORD PTR [edi]
c0014ffb:	89 03                	mov    DWORD PTR [ebx],eax
c0014ffd:	c1 e0 03             	shl    eax,0x3
c0015000:	89 04 24             	mov    DWORD PTR [esp],eax
c0015003:	e8 53 4d ff ff       	call   c0009d5b <malloc>
c0015008:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001500b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001500d:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0015010:	c1 e1 03             	shl    ecx,0x3
c0015013:	89 c7                	mov    edi,eax
c0015015:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015017:	83 c4 10             	add    esp,0x10
c001501a:	89 d8                	mov    eax,ebx
c001501c:	5b                   	pop    ebx
c001501d:	5e                   	pop    esi
c001501e:	5f                   	pop    edi
c001501f:	c3                   	ret    

c0015020 <Krnl::loadSystemEnv()>:
c0015020:	53                   	push   ebx
c0015021:	83 ec 14             	sub    esp,0x14
c0015024:	6a 0c                	push   0xc
c0015026:	e8 30 4d ff ff       	call   c0009d5b <malloc>
c001502b:	89 c3                	mov    ebx,eax
c001502d:	58                   	pop    eax
c001502e:	5a                   	pop    edx
c001502f:	ff 35 30 9f 02 c0    	push   DWORD PTR ds:0xc0029f30
c0015035:	53                   	push   ebx
c0015036:	e8 71 fe ff ff       	call   c0014eac <EnvVarContainer::EnvVarContainer(Process*)>
c001503b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001503e:	89 1d b8 94 02 c0    	mov    DWORD PTR ds:0xc00294b8,ebx
c0015044:	e8 47 fe ff ff       	call   c0014e90 <EnvVarContainer::__loadSystem()>
c0015049:	83 c4 18             	add    esp,0x18
c001504c:	5b                   	pop    ebx
c001504d:	c3                   	ret    

c001504e <Krnl::loadUserEnv()>:
c001504e:	53                   	push   ebx
c001504f:	83 ec 14             	sub    esp,0x14
c0015052:	6a 0c                	push   0xc
c0015054:	e8 02 4d ff ff       	call   c0009d5b <malloc>
c0015059:	89 c3                	mov    ebx,eax
c001505b:	58                   	pop    eax
c001505c:	5a                   	pop    edx
c001505d:	ff 35 30 9f 02 c0    	push   DWORD PTR ds:0xc0029f30
c0015063:	53                   	push   ebx
c0015064:	e8 43 fe ff ff       	call   c0014eac <EnvVarContainer::EnvVarContainer(Process*)>
c0015069:	89 1d b4 94 02 c0    	mov    DWORD PTR ds:0xc00294b4,ebx
c001506f:	83 c4 18             	add    esp,0x18
c0015072:	5b                   	pop    ebx
c0015073:	c3                   	ret    

c0015074 <Krnl::flushEnv()>:
c0015074:	c3                   	ret    

c0015075 <Krnl::getProcessTotalEnvCount(Process*)>:
c0015075:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015079:	8b 15 b4 94 02 c0    	mov    edx,DWORD PTR ds:0xc00294b4
c001507f:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0015085:	a1 b8 94 02 c0       	mov    eax,ds:0xc00294b8
c001508a:	8b 00                	mov    eax,DWORD PTR [eax]
c001508c:	03 01                	add    eax,DWORD PTR [ecx]
c001508e:	85 d2                	test   edx,edx
c0015090:	74 02                	je     c0015094 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0015092:	03 02                	add    eax,DWORD PTR [edx]
c0015094:	c3                   	ret    

c0015095 <Krnl::getProcessEnvPair(Process*, int)>:
c0015095:	57                   	push   edi
c0015096:	56                   	push   esi
c0015097:	8b 35 b4 94 02 c0    	mov    esi,DWORD PTR ds:0xc00294b4
c001509d:	53                   	push   ebx
c001509e:	85 f6                	test   esi,esi
c00150a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00150a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00150a8:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00150ae:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00150b2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00150b4:	75 16                	jne    c00150cc <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00150b6:	39 c2                	cmp    edx,eax
c00150b8:	7c 16                	jl     c00150d0 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00150ba:	8b 0d b8 94 02 c0    	mov    ecx,DWORD PTR ds:0xc00294b8
c00150c0:	8b 31                	mov    esi,DWORD PTR [ecx]
c00150c2:	01 c6                	add    esi,eax
c00150c4:	39 d6                	cmp    esi,edx
c00150c6:	7e 3c                	jle    c0015104 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00150c8:	29 c2                	sub    edx,eax
c00150ca:	eb 04                	jmp    c00150d0 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00150cc:	39 c2                	cmp    edx,eax
c00150ce:	7d 05                	jge    c00150d5 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00150d0:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00150d3:	eb 20                	jmp    c00150f5 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00150d5:	8b 3e                	mov    edi,DWORD PTR [esi]
c00150d7:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00150da:	39 d1                	cmp    ecx,edx
c00150dc:	7e 04                	jle    c00150e2 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00150de:	29 c2                	sub    edx,eax
c00150e0:	eb 10                	jmp    c00150f2 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00150e2:	8b 35 b8 94 02 c0    	mov    esi,DWORD PTR ds:0xc00294b8
c00150e8:	03 0e                	add    ecx,DWORD PTR [esi]
c00150ea:	39 d1                	cmp    ecx,edx
c00150ec:	7e 16                	jle    c0015104 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00150ee:	29 c2                	sub    edx,eax
c00150f0:	29 fa                	sub    edx,edi
c00150f2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00150f5:	8d 14 d0             	lea    edx,[eax+edx*8]
c00150f8:	8b 02                	mov    eax,DWORD PTR [edx]
c00150fa:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00150fd:	89 03                	mov    DWORD PTR [ebx],eax
c00150ff:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0015102:	eb 1d                	jmp    c0015121 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0015104:	83 ec 0c             	sub    esp,0xc
c0015107:	68 4b 65 02 c0       	push   0xc002654b
c001510c:	e8 18 00 00 00       	call   c0015129 <Krnl::panic(char const*)>
c0015111:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0015117:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001511e:	83 c4 10             	add    esp,0x10
c0015121:	89 d8                	mov    eax,ebx
c0015123:	5b                   	pop    ebx
c0015124:	5e                   	pop    esi
c0015125:	5f                   	pop    edi
c0015126:	c2 04 00             	ret    0x4

c0015129 <Krnl::panic(char const*)>:
c0015129:	53                   	push   ebx
c001512a:	83 ec 10             	sub    esp,0x10
c001512d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015131:	fa                   	cli    
c0015132:	c6 05 c4 94 02 c0 01 	mov    BYTE PTR ds:0xc00294c4,0x1
c0015139:	53                   	push   ebx
c001513a:	68 65 65 02 c0       	push   0xc0026565
c001513f:	e8 03 7f ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0015144:	83 c4 0c             	add    esp,0xc
c0015147:	6a 01                	push   0x1
c0015149:	6a 0f                	push   0xf
c001514b:	ff 35 64 8a 02 c0    	push   DWORD PTR ds:0xc0028a64
c0015151:	e8 5e 5b ff ff       	call   c000acb4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015156:	59                   	pop    ecx
c0015157:	ff 35 64 8a 02 c0    	push   DWORD PTR ds:0xc0028a64
c001515d:	e8 74 60 ff ff       	call   c000b1d6 <VgaText::clearScreen()>
c0015162:	58                   	pop    eax
c0015163:	5a                   	pop    edx
c0015164:	68 bc 65 02 c0       	push   0xc00265bc
c0015169:	ff 35 64 8a 02 c0    	push   DWORD PTR ds:0xc0028a64
c001516f:	e8 80 5b ff ff       	call   c000acf4 <VgaText::setTitle(char*)>
c0015174:	83 c4 0c             	add    esp,0xc
c0015177:	6a 01                	push   0x1
c0015179:	6a 0f                	push   0xf
c001517b:	ff 35 64 8a 02 c0    	push   DWORD PTR ds:0xc0028a64
c0015181:	e8 2e 5b ff ff       	call   c000acb4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015186:	59                   	pop    ecx
c0015187:	58                   	pop    eax
c0015188:	68 7e 65 02 c0       	push   0xc002657e
c001518d:	ff 35 64 8a 02 c0    	push   DWORD PTR ds:0xc0028a64
c0015193:	e8 ca 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015198:	58                   	pop    eax
c0015199:	5a                   	pop    edx
c001519a:	68 08 66 02 c0       	push   0xc0026608
c001519f:	ff 35 64 8a 02 c0    	push   DWORD PTR ds:0xc0028a64
c00151a5:	e8 b8 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c00151aa:	59                   	pop    ecx
c00151ab:	58                   	pop    eax
c00151ac:	68 9a 65 02 c0       	push   0xc002659a
c00151b1:	ff 35 64 8a 02 c0    	push   DWORD PTR ds:0xc0028a64
c00151b7:	e8 a6 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c00151bc:	58                   	pop    eax
c00151bd:	5a                   	pop    edx
c00151be:	53                   	push   ebx
c00151bf:	ff 35 64 8a 02 c0    	push   DWORD PTR ds:0xc0028a64
c00151c5:	e8 98 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c00151ca:	59                   	pop    ecx
c00151cb:	5b                   	pop    ebx
c00151cc:	68 ba 65 02 c0       	push   0xc00265ba
c00151d1:	ff 35 64 8a 02 c0    	push   DWORD PTR ds:0xc0028a64
c00151d7:	e8 86 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c00151dc:	58                   	pop    eax
c00151dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00151e1:	e8 17 31 00 00       	call   c00182fd <Thr::getDriverNameFromAddress(unsigned long)>
c00151e6:	83 c4 10             	add    esp,0x10
c00151e9:	85 c0                	test   eax,eax
c00151eb:	0f 84 36 01 00 00    	je     c0015327 <Krnl::panic(char const*)+0x1fe>
c00151f1:	83 ec 08             	sub    esp,0x8
c00151f4:	89 c3                	mov    ebx,eax
c00151f6:	68 44 66 02 c0       	push   0xc0026644
c00151fb:	ff 35 64 8a 02 c0    	push   DWORD PTR ds:0xc0028a64
c0015201:	e8 5c 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015206:	59                   	pop    ecx
c0015207:	58                   	pop    eax
c0015208:	68 9a 65 02 c0       	push   0xc002659a
c001520d:	ff 35 64 8a 02 c0    	push   DWORD PTR ds:0xc0028a64
c0015213:	e8 4a 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015218:	58                   	pop    eax
c0015219:	5a                   	pop    edx
c001521a:	53                   	push   ebx
c001521b:	ff 35 64 8a 02 c0    	push   DWORD PTR ds:0xc0028a64
c0015221:	e8 3c 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015226:	83 c4 10             	add    esp,0x10
c0015229:	83 ec 08             	sub    esp,0x8
c001522c:	68 b9 65 02 c0       	push   0xc00265b9
c0015231:	ff 35 64 8a 02 c0    	push   DWORD PTR ds:0xc0028a64
c0015237:	e8 26 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c001523c:	58                   	pop    eax
c001523d:	5a                   	pop    edx
c001523e:	68 9c 66 02 c0       	push   0xc002669c
c0015243:	ff 35 64 8a 02 c0    	push   DWORD PTR ds:0xc0028a64
c0015249:	e8 14 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c001524e:	59                   	pop    ecx
c001524f:	5b                   	pop    ebx
c0015250:	68 dc 66 02 c0       	push   0xc00266dc
c0015255:	ff 35 64 8a 02 c0    	push   DWORD PTR ds:0xc0028a64
c001525b:	e8 02 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015260:	58                   	pop    eax
c0015261:	5a                   	pop    edx
c0015262:	68 a5 65 02 c0       	push   0xc00265a5
c0015267:	ff 35 64 8a 02 c0    	push   DWORD PTR ds:0xc0028a64
c001526d:	e8 f0 60 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015272:	59                   	pop    ecx
c0015273:	5b                   	pop    ebx
c0015274:	68 20 67 02 c0       	push   0xc0026720
c0015279:	ff 35 64 8a 02 c0    	push   DWORD PTR ds:0xc0028a64
c001527f:	e8 de 60 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015284:	58                   	pop    eax
c0015285:	5a                   	pop    edx
c0015286:	68 bd 65 02 c0       	push   0xc00265bd
c001528b:	ff 35 64 8a 02 c0    	push   DWORD PTR ds:0xc0028a64
c0015291:	e8 cc 60 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015296:	0f 20 c0             	mov    eax,cr0
c0015299:	59                   	pop    ecx
c001529a:	5b                   	pop    ebx
c001529b:	50                   	push   eax
c001529c:	ff 35 64 8a 02 c0    	push   DWORD PTR ds:0xc0028a64
c00152a2:	e8 75 60 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c00152a7:	58                   	pop    eax
c00152a8:	5a                   	pop    edx
c00152a9:	68 c7 65 02 c0       	push   0xc00265c7
c00152ae:	ff 35 64 8a 02 c0    	push   DWORD PTR ds:0xc0028a64
c00152b4:	e8 a9 60 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c00152b9:	0f 20 d0             	mov    eax,cr2
c00152bc:	59                   	pop    ecx
c00152bd:	5b                   	pop    ebx
c00152be:	50                   	push   eax
c00152bf:	ff 35 64 8a 02 c0    	push   DWORD PTR ds:0xc0028a64
c00152c5:	e8 52 60 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c00152ca:	58                   	pop    eax
c00152cb:	5a                   	pop    edx
c00152cc:	68 d1 65 02 c0       	push   0xc00265d1
c00152d1:	ff 35 64 8a 02 c0    	push   DWORD PTR ds:0xc0028a64
c00152d7:	e8 86 60 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c00152dc:	0f 20 d8             	mov    eax,cr3
c00152df:	59                   	pop    ecx
c00152e0:	5b                   	pop    ebx
c00152e1:	50                   	push   eax
c00152e2:	ff 35 64 8a 02 c0    	push   DWORD PTR ds:0xc0028a64
c00152e8:	e8 2f 60 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c00152ed:	58                   	pop    eax
c00152ee:	5a                   	pop    edx
c00152ef:	68 e4 65 02 c0       	push   0xc00265e4
c00152f4:	ff 35 64 8a 02 c0    	push   DWORD PTR ds:0xc0028a64
c00152fa:	e8 63 60 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c00152ff:	0f 20 e0             	mov    eax,cr4
c0015302:	59                   	pop    ecx
c0015303:	5b                   	pop    ebx
c0015304:	50                   	push   eax
c0015305:	ff 35 64 8a 02 c0    	push   DWORD PTR ds:0xc0028a64
c001530b:	e8 0c 60 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c0015310:	58                   	pop    eax
c0015311:	5a                   	pop    edx
c0015312:	68 ee 65 02 c0       	push   0xc00265ee
c0015317:	ff 35 64 8a 02 c0    	push   DWORD PTR ds:0xc0028a64
c001531d:	e8 40 60 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015322:	83 c4 10             	add    esp,0x10
c0015325:	eb fe                	jmp    c0015325 <Krnl::panic(char const*)+0x1fc>
c0015327:	51                   	push   ecx
c0015328:	51                   	push   ecx
c0015329:	68 70 66 02 c0       	push   0xc0026670
c001532e:	ff 35 64 8a 02 c0    	push   DWORD PTR ds:0xc0028a64
c0015334:	e8 29 60 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015339:	5b                   	pop    ebx
c001533a:	58                   	pop    eax
c001533b:	68 9a 65 02 c0       	push   0xc002659a
c0015340:	ff 35 64 8a 02 c0    	push   DWORD PTR ds:0xc0028a64
c0015346:	e8 17 60 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c001534b:	58                   	pop    eax
c001534c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015351:	5a                   	pop    edx
c0015352:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015355:	83 c0 0c             	add    eax,0xc
c0015358:	50                   	push   eax
c0015359:	ff 35 64 8a 02 c0    	push   DWORD PTR ds:0xc0028a64
c001535f:	e8 fe 5f ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015364:	83 c4 10             	add    esp,0x10
c0015367:	e9 bd fe ff ff       	jmp    c0015229 <Krnl::panic(char const*)+0x100>

c001536c <Krnl::powerThread(void*)>:
c001536c:	53                   	push   ebx
c001536d:	83 ec 08             	sub    esp,0x8
c0015370:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c0015375:	48                   	dec    eax
c0015376:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c001537b:	75 01                	jne    c001537e <Krnl::powerThread(void*)+0x12>
c001537d:	fb                   	sti    
c001537e:	52                   	push   edx
c001537f:	52                   	push   edx
c0015380:	ff 35 24 95 02 c0    	push   DWORD PTR ds:0xc0029524
c0015386:	68 46 67 02 c0       	push   0xc0026746
c001538b:	e8 b7 7c ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0015390:	59                   	pop    ecx
c0015391:	8b 1d 14 95 02 c0    	mov    ebx,DWORD PTR ds:0xc0029514
c0015397:	58                   	pop    eax
c0015398:	c6 05 e0 94 02 c0 00 	mov    BYTE PTR ds:0xc00294e0,0x0
c001539f:	53                   	push   ebx
c00153a0:	68 50 67 02 c0       	push   0xc0026750
c00153a5:	e8 9d 7c ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00153aa:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c00153b1:	e8 86 3c 00 00       	call   c001903c <sleep(unsigned int)>
c00153b6:	a1 24 95 02 c0       	mov    eax,ds:0xc0029524
c00153bb:	83 c4 10             	add    esp,0x10
c00153be:	83 c0 0a             	add    eax,0xa
c00153c1:	85 db                	test   ebx,ebx
c00153c3:	a3 24 95 02 c0       	mov    ds:0xc0029524,eax
c00153c8:	74 b4                	je     c001537e <Krnl::powerThread(void*)+0x12>
c00153ca:	39 d8                	cmp    eax,ebx
c00153cc:	7e b0                	jle    c001537e <Krnl::powerThread(void*)+0x12>
c00153ce:	83 ec 0c             	sub    esp,0xc
c00153d1:	68 68 67 02 c0       	push   0xc0026768
c00153d6:	e8 6c 7c ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00153db:	58                   	pop    eax
c00153dc:	ff 35 e8 89 02 c0    	push   DWORD PTR ds:0xc00289e8
c00153e2:	e8 1b 3f ff ff       	call   c0009302 <Computer::sleep()>
c00153e7:	83 c4 10             	add    esp,0x10
c00153ea:	eb 92                	jmp    c001537e <Krnl::powerThread(void*)+0x12>

c00153ec <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00153ec:	57                   	push   edi
c00153ed:	b9 09 00 00 00       	mov    ecx,0x9
c00153f2:	56                   	push   esi
c00153f3:	bf 00 95 02 c0       	mov    edi,0xc0029500
c00153f8:	fc                   	cld    
c00153f9:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00153fd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00153ff:	5e                   	pop    esi
c0015400:	5f                   	pop    edi
c0015401:	c3                   	ret    

c0015402 <Krnl::userIOReceived()>:
c0015402:	c7 05 24 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029524,0x0
c001540c:	c3                   	ret    

c001540d <Krnl::handlePowerButton()>:
c001540d:	83 ec 0c             	sub    esp,0xc
c0015410:	a1 00 95 02 c0       	mov    eax,ds:0xc0029500
c0015415:	83 f8 02             	cmp    eax,0x2
c0015418:	75 10                	jne    c001542a <Krnl::handlePowerButton()+0x1d>
c001541a:	83 ec 0c             	sub    esp,0xc
c001541d:	ff 35 e8 89 02 c0    	push   DWORD PTR ds:0xc00289e8
c0015423:	e8 aa 3e ff ff       	call   c00092d2 <Computer::shutdown()>
c0015428:	eb 11                	jmp    c001543b <Krnl::handlePowerButton()+0x2e>
c001542a:	48                   	dec    eax
c001542b:	75 11                	jne    c001543e <Krnl::handlePowerButton()+0x31>
c001542d:	83 ec 0c             	sub    esp,0xc
c0015430:	ff 35 e8 89 02 c0    	push   DWORD PTR ds:0xc00289e8
c0015436:	e8 c7 3e ff ff       	call   c0009302 <Computer::sleep()>
c001543b:	83 c4 10             	add    esp,0x10
c001543e:	83 c4 0c             	add    esp,0xc
c0015441:	c3                   	ret    

c0015442 <Krnl::handleSleepButton()>:
c0015442:	83 ec 0c             	sub    esp,0xc
c0015445:	a1 04 95 02 c0       	mov    eax,ds:0xc0029504
c001544a:	83 f8 02             	cmp    eax,0x2
c001544d:	75 10                	jne    c001545f <Krnl::handleSleepButton()+0x1d>
c001544f:	83 ec 0c             	sub    esp,0xc
c0015452:	ff 35 e8 89 02 c0    	push   DWORD PTR ds:0xc00289e8
c0015458:	e8 75 3e ff ff       	call   c00092d2 <Computer::shutdown()>
c001545d:	eb 11                	jmp    c0015470 <Krnl::handleSleepButton()+0x2e>
c001545f:	48                   	dec    eax
c0015460:	75 11                	jne    c0015473 <Krnl::handleSleepButton()+0x31>
c0015462:	83 ec 0c             	sub    esp,0xc
c0015465:	ff 35 e8 89 02 c0    	push   DWORD PTR ds:0xc00289e8
c001546b:	e8 92 3e ff ff       	call   c0009302 <Computer::sleep()>
c0015470:	83 c4 10             	add    esp,0x10
c0015473:	83 c4 0c             	add    esp,0xc
c0015476:	c3                   	ret    

c0015477 <Krnl::setupPowerManager()>:
c0015477:	83 ec 0c             	sub    esp,0xc
c001547a:	c7 05 24 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029524,0x0
c0015484:	68 f0 00 00 00       	push   0xf0
c0015489:	c6 05 e0 94 02 c0 00 	mov    BYTE PTR ds:0xc00294e0,0x0
c0015490:	6a 00                	push   0x0
c0015492:	68 6c 53 01 c0       	push   0xc001536c
c0015497:	ff 35 30 9f 02 c0    	push   DWORD PTR ds:0xc0029f30
c001549d:	e8 76 36 00 00       	call   c0018b18 <Process::createThread(void (*)(void*), void*, int)>
c00154a2:	c7 05 00 95 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0029500,0x2
c00154ac:	c7 05 04 95 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029504,0x1
c00154b6:	c7 05 08 95 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0029508,0x3
c00154c0:	c7 05 0c 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002950c,0x0
c00154ca:	c7 05 18 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029518,0x0
c00154d4:	c7 05 10 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029510,0x0
c00154de:	c7 05 1c 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002951c,0x0
c00154e8:	c7 05 14 95 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0029514,0x3c
c00154f2:	c7 05 20 95 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0029520,0x3c
c00154fc:	83 c4 1c             	add    esp,0x1c
c00154ff:	c3                   	ret    

c0015500 <Net::switchEndian16(unsigned short)>:
c0015500:	83 ec 04             	sub    esp,0x4
c0015503:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015507:	66 89 04 24          	mov    WORD PTR [esp],ax
c001550b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001550f:	c1 f8 08             	sar    eax,0x8
c0015512:	89 c2                	mov    edx,eax
c0015514:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0015518:	c1 e0 08             	shl    eax,0x8
c001551b:	09 d0                	or     eax,edx
c001551d:	83 c4 04             	add    esp,0x4
c0015520:	c3                   	ret    
c0015521:	8d 76 00             	lea    esi,[esi+0x0]

c0015524 <Net::switchEndian32(unsigned int)>:
c0015524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015528:	c1 e8 18             	shr    eax,0x18
c001552b:	89 c2                	mov    edx,eax
c001552d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015531:	c1 e0 08             	shl    eax,0x8
c0015534:	25 00 00 ff 00       	and    eax,0xff0000
c0015539:	09 c2                	or     edx,eax
c001553b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001553f:	c1 e8 08             	shr    eax,0x8
c0015542:	25 00 ff 00 00       	and    eax,0xff00
c0015547:	09 c2                	or     edx,eax
c0015549:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001554d:	c1 e0 18             	shl    eax,0x18
c0015550:	09 d0                	or     eax,edx
c0015552:	c3                   	ret    
c0015553:	90                   	nop

c0015554 <Net::crc32Calc(unsigned char*, int)>:
c0015554:	83 ec 10             	sub    esp,0x10
c0015557:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001555c:	75 0a                	jne    c0015568 <Net::crc32Calc(unsigned char*, int)+0x14>
c001555e:	b8 00 00 00 00       	mov    eax,0x0
c0015563:	e9 8c 00 00 00       	jmp    c00155f4 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0015568:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001556d:	7f 09                	jg     c0015578 <Net::crc32Calc(unsigned char*, int)+0x24>
c001556f:	b8 00 00 00 00       	mov    eax,0x0
c0015574:	eb 7e                	jmp    c00155f4 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0015576:	66 90                	xchg   ax,ax
c0015578:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0015580:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015588:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001558c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0015590:	7d 5a                	jge    c00155ec <Net::crc32Calc(unsigned char*, int)+0x98>
c0015592:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015596:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001559a:	01 d0                	add    eax,edx
c001559c:	8a 00                	mov    al,BYTE PTR [eax]
c001559e:	0f b6 c0             	movzx  eax,al
c00155a1:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c00155a5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00155ad:	8d 76 00             	lea    esi,[esi+0x0]
c00155b0:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c00155b5:	7f 2d                	jg     c00155e4 <Net::crc32Calc(unsigned char*, int)+0x90>
c00155b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00155bb:	83 e0 01             	and    eax,0x1
c00155be:	74 10                	je     c00155d0 <Net::crc32Calc(unsigned char*, int)+0x7c>
c00155c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00155c4:	d1 e8                	shr    eax,1
c00155c6:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00155cb:	eb 0b                	jmp    c00155d8 <Net::crc32Calc(unsigned char*, int)+0x84>
c00155cd:	8d 76 00             	lea    esi,[esi+0x0]
c00155d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00155d4:	d1 e8                	shr    eax,1
c00155d6:	66 90                	xchg   ax,ax
c00155d8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00155dc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00155e0:	eb ce                	jmp    c00155b0 <Net::crc32Calc(unsigned char*, int)+0x5c>
c00155e2:	66 90                	xchg   ax,ax
c00155e4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00155e8:	eb 9e                	jmp    c0015588 <Net::crc32Calc(unsigned char*, int)+0x34>
c00155ea:	66 90                	xchg   ax,ax
c00155ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00155f0:	f7 d0                	not    eax
c00155f2:	66 90                	xchg   ax,ax
c00155f4:	83 c4 10             	add    esp,0x10
c00155f7:	c3                   	ret    

c00155f8 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c00155f8:	57                   	push   edi
c00155f9:	56                   	push   esi
c00155fa:	53                   	push   ebx
c00155fb:	83 ec 60             	sub    esp,0x60
c00155fe:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015605:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0015609:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0015611:	8d 76 00             	lea    esi,[esi+0x0]
c0015614:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c0015619:	7f 1d                	jg     c0015638 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c001561b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015622:	8d 50 01             	lea    edx,[eax+0x1]
c0015625:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001562c:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001562f:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0015633:	eb df                	jmp    c0015614 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c0015635:	8d 76 00             	lea    esi,[esi+0x0]
c0015638:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001563f:	8d 50 01             	lea    edx,[eax+0x1]
c0015642:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015649:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001564c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015653:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015657:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001565b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001565f:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c0015667:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001566b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001566f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015673:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015677:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001567b:	89 c6                	mov    esi,eax
c001567d:	89 d7                	mov    edi,edx
c001567f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015681:	89 c8                	mov    eax,ecx
c0015683:	89 fa                	mov    edx,edi
c0015685:	89 f3                	mov    ebx,esi
c0015687:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001568b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001568f:	89 04 24             	mov    DWORD PTR [esp],eax
c0015692:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001569a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00156a1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00156a5:	8d 44 24 78          	lea    eax,[esp+0x78]
c00156a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00156ad:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c00156b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00156b9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00156bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156c1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00156c5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00156c9:	89 c6                	mov    esi,eax
c00156cb:	89 d7                	mov    edi,edx
c00156cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00156cf:	89 c8                	mov    eax,ecx
c00156d1:	89 fa                	mov    edx,edi
c00156d3:	89 f3                	mov    ebx,esi
c00156d5:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c00156d9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00156dd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00156e1:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c00156e9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00156f0:	0f b7 c0             	movzx  eax,ax
c00156f3:	c1 f8 08             	sar    eax,0x8
c00156f6:	89 c1                	mov    ecx,eax
c00156f8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00156ff:	8d 50 01             	lea    edx,[eax+0x1]
c0015702:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015709:	88 ca                	mov    dl,cl
c001570b:	88 10                	mov    BYTE PTR [eax],dl
c001570d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0015714:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001571b:	8d 48 01             	lea    ecx,[eax+0x1]
c001571e:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c0015725:	88 10                	mov    BYTE PTR [eax],dl
c0015727:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001572b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001572f:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c0015736:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001573a:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001573e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0015742:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015746:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001574a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001574e:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0015752:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0015756:	89 c6                	mov    esi,eax
c0015758:	89 d7                	mov    edi,edx
c001575a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001575c:	89 c8                	mov    eax,ecx
c001575e:	89 fa                	mov    edx,edi
c0015760:	89 f3                	mov    ebx,esi
c0015762:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0015766:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001576a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001576e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0015772:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c0015779:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015780:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c0015784:	50                   	push   eax
c0015785:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0015789:	e8 c6 fd ff ff       	call   c0015554 <Net::crc32Calc(unsigned char*, int)>
c001578e:	83 c4 08             	add    esp,0x8
c0015791:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0015795:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015799:	c1 e8 18             	shr    eax,0x18
c001579c:	89 c1                	mov    ecx,eax
c001579e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00157a5:	8d 50 01             	lea    edx,[eax+0x1]
c00157a8:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00157af:	88 ca                	mov    dl,cl
c00157b1:	88 10                	mov    BYTE PTR [eax],dl
c00157b3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00157b7:	c1 e8 10             	shr    eax,0x10
c00157ba:	89 c1                	mov    ecx,eax
c00157bc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00157c3:	8d 50 01             	lea    edx,[eax+0x1]
c00157c6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00157cd:	88 ca                	mov    dl,cl
c00157cf:	88 10                	mov    BYTE PTR [eax],dl
c00157d1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00157d5:	c1 e8 08             	shr    eax,0x8
c00157d8:	89 c1                	mov    ecx,eax
c00157da:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00157e1:	8d 50 01             	lea    edx,[eax+0x1]
c00157e4:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00157eb:	88 ca                	mov    dl,cl
c00157ed:	88 10                	mov    BYTE PTR [eax],dl
c00157ef:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00157f6:	8d 50 01             	lea    edx,[eax+0x1]
c00157f9:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015800:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0015804:	88 10                	mov    BYTE PTR [eax],dl
c0015806:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001580a:	83 c4 60             	add    esp,0x60
c001580d:	5b                   	pop    ebx
c001580e:	5e                   	pop    esi
c001580f:	5f                   	pop    edi
c0015810:	c3                   	ret    
c0015811:	8d 76 00             	lea    esi,[esi+0x0]

c0015814 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0015814:	57                   	push   edi
c0015815:	56                   	push   esi
c0015816:	53                   	push   ebx
c0015817:	83 ec 70             	sub    esp,0x70
c001581a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015821:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0015825:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001582d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015834:	83 c0 0e             	add    eax,0xe
c0015837:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001583b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015842:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015846:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001584e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015852:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015856:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001585a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001585e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015862:	89 c6                	mov    esi,eax
c0015864:	89 d7                	mov    edi,edx
c0015866:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015868:	89 c8                	mov    eax,ecx
c001586a:	89 fa                	mov    edx,edi
c001586c:	89 f3                	mov    ebx,esi
c001586e:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0015872:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0015876:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001587a:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0015882:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015889:	83 c0 08             	add    eax,0x8
c001588c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0015890:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015897:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001589b:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c00158a3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00158a7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00158ab:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00158af:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00158b3:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00158b7:	89 c6                	mov    esi,eax
c00158b9:	89 d7                	mov    edi,edx
c00158bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00158bd:	89 c8                	mov    eax,ecx
c00158bf:	89 fa                	mov    edx,edi
c00158c1:	89 f3                	mov    ebx,esi
c00158c3:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c00158c7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00158cb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00158cf:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c00158d7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00158de:	8d 50 01             	lea    edx,[eax+0x1]
c00158e1:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00158e8:	8a 00                	mov    al,BYTE PTR [eax]
c00158ea:	0f b6 c0             	movzx  eax,al
c00158ed:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c00158f2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00158f9:	8d 50 01             	lea    edx,[eax+0x1]
c00158fc:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015903:	8a 00                	mov    al,BYTE PTR [eax]
c0015905:	0f b6 c0             	movzx  eax,al
c0015908:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001590d:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c0015912:	c1 e0 08             	shl    eax,0x8
c0015915:	89 c2                	mov    edx,eax
c0015917:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001591b:	09 d0                	or     eax,edx
c001591d:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0015924:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0015928:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c0015930:	75 46                	jne    c0015978 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0015932:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015939:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001593c:	66 3d dc 05          	cmp    ax,0x5dc
c0015940:	77 16                	ja     c0015958 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c0015942:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015949:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001594c:	0f b7 c0             	movzx  eax,ax
c001594f:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0015956:	eb 20                	jmp    c0015978 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0015958:	83 ec 0c             	sub    esp,0xc
c001595b:	68 78 67 02 c0       	push   0xc0026778
c0015960:	e8 e2 76 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0015965:	83 c4 10             	add    esp,0x10
c0015968:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001596f:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0015973:	e9 18 01 00 00       	jmp    c0015a90 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0015978:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001597f:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0015986:	8b 12                	mov    edx,DWORD PTR [edx]
c0015988:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001598c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0015993:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015997:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001599b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001599f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00159a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00159a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00159ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00159af:	89 c6                	mov    esi,eax
c00159b1:	89 d7                	mov    edi,edx
c00159b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00159b5:	89 c8                	mov    eax,ecx
c00159b7:	89 fa                	mov    edx,edi
c00159b9:	89 f3                	mov    ebx,esi
c00159bb:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00159bf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00159c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00159c6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00159cd:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c00159d4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00159db:	8d 50 01             	lea    edx,[eax+0x1]
c00159de:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00159e5:	8a 00                	mov    al,BYTE PTR [eax]
c00159e7:	0f b6 c0             	movzx  eax,al
c00159ea:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00159ee:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00159f5:	8d 50 01             	lea    edx,[eax+0x1]
c00159f8:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00159ff:	8a 00                	mov    al,BYTE PTR [eax]
c0015a01:	0f b6 c0             	movzx  eax,al
c0015a04:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0015a08:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015a0f:	8d 50 01             	lea    edx,[eax+0x1]
c0015a12:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015a19:	8a 00                	mov    al,BYTE PTR [eax]
c0015a1b:	0f b6 c0             	movzx  eax,al
c0015a1e:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0015a22:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015a29:	8d 50 01             	lea    edx,[eax+0x1]
c0015a2c:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015a33:	8a 00                	mov    al,BYTE PTR [eax]
c0015a35:	0f b6 c0             	movzx  eax,al
c0015a38:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0015a3c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0015a40:	c1 e0 18             	shl    eax,0x18
c0015a43:	89 c2                	mov    edx,eax
c0015a45:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0015a49:	c1 e0 10             	shl    eax,0x10
c0015a4c:	09 c2                	or     edx,eax
c0015a4e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0015a52:	c1 e0 08             	shl    eax,0x8
c0015a55:	09 d0                	or     eax,edx
c0015a57:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c0015a5b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0015a5f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015a66:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0015a6a:	83 e8 04             	sub    eax,0x4
c0015a6d:	83 ec 08             	sub    esp,0x8
c0015a70:	50                   	push   eax
c0015a71:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015a75:	e8 da fa ff ff       	call   c0015554 <Net::crc32Calc(unsigned char*, int)>
c0015a7a:	83 c4 10             	add    esp,0x10
c0015a7d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0015a81:	0f 94 c2             	sete   dl
c0015a84:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015a8b:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0015a8e:	90                   	nop
c0015a8f:	90                   	nop
c0015a90:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015a97:	83 c4 70             	add    esp,0x70
c0015a9a:	5b                   	pop    ebx
c0015a9b:	5e                   	pop    esi
c0015a9c:	5f                   	pop    edi
c0015a9d:	c2 04 00             	ret    0x4

c0015aa0 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015aa0:	55                   	push   ebp
c0015aa1:	57                   	push   edi
c0015aa2:	56                   	push   esi
c0015aa3:	53                   	push   ebx
c0015aa4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015aaa:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015ab1:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015ab3:	8d 6e 01             	lea    ebp,[esi+0x1]
c0015ab6:	80 fb 40             	cmp    bl,0x40
c0015ab9:	75 1b                	jne    c0015ad6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0015abb:	8a 16                	mov    dl,BYTE PTR [esi]
c0015abd:	84 d2                	test   dl,dl
c0015abf:	0f 84 f1 00 00 00    	je     c0015bb6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015ac5:	8d 46 01             	lea    eax,[esi+0x1]
c0015ac8:	80 fa 3a             	cmp    dl,0x3a
c0015acb:	74 04                	je     c0015ad1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0015acd:	89 c6                	mov    esi,eax
c0015acf:	eb ea                	jmp    c0015abb <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0015ad1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015ad4:	89 c6                	mov    esi,eax
c0015ad6:	50                   	push   eax
c0015ad7:	6a 40                	push   0x40
c0015ad9:	6a 00                	push   0x0
c0015adb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015adf:	50                   	push   eax
c0015ae0:	e8 9f ab fe ff       	call   c0000684 <memset>
c0015ae5:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015aec:	31 c0                	xor    eax,eax
c0015aee:	83 c4 10             	add    esp,0x10
c0015af1:	8a 0f                	mov    cl,BYTE PTR [edi]
c0015af3:	84 c9                	test   cl,cl
c0015af5:	0f 84 bb 00 00 00    	je     c0015bb6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015afb:	3d c7 00 00 00       	cmp    eax,0xc7
c0015b00:	0f 8f b0 00 00 00    	jg     c0015bb6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015b06:	80 f9 0a             	cmp    cl,0xa
c0015b09:	0f 85 98 00 00 00    	jne    c0015ba7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0015b0f:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0015b14:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0015b18:	a8 df                	test   al,0xdf
c0015b1a:	0f 94 c1             	sete   cl
c0015b1d:	3c 23                	cmp    al,0x23
c0015b1f:	0f 94 c2             	sete   dl
c0015b22:	08 d1                	or     cl,dl
c0015b24:	75 4a                	jne    c0015b70 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015b26:	8d 50 f7             	lea    edx,[eax-0x9]
c0015b29:	80 fa 01             	cmp    dl,0x1
c0015b2c:	76 42                	jbe    c0015b70 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015b2e:	3c 5b                	cmp    al,0x5b
c0015b30:	75 42                	jne    c0015b74 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0015b32:	80 fb 40             	cmp    bl,0x40
c0015b35:	75 39                	jne    c0015b70 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015b37:	83 ec 0c             	sub    esp,0xc
c0015b3a:	8d 54 24 65          	lea    edx,[esp+0x65]
c0015b3e:	52                   	push   edx
c0015b3f:	e8 5c ab fe ff       	call   c00006a0 <strlen>
c0015b44:	83 c4 10             	add    esp,0x10
c0015b47:	83 f8 3f             	cmp    eax,0x3f
c0015b4a:	77 6a                	ja     c0015bb6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015b4c:	50                   	push   eax
c0015b4d:	50                   	push   eax
c0015b4e:	8d 54 24 61          	lea    edx,[esp+0x61]
c0015b52:	52                   	push   edx
c0015b53:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015b57:	52                   	push   edx
c0015b58:	e8 e3 ab fe ff       	call   c0000740 <strcpy>
c0015b5d:	58                   	pop    eax
c0015b5e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015b62:	52                   	push   edx
c0015b63:	e8 38 ab fe ff       	call   c00006a0 <strlen>
c0015b68:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015b6d:	83 c4 10             	add    esp,0x10
c0015b70:	31 d2                	xor    edx,edx
c0015b72:	eb 3a                	jmp    c0015bae <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0015b74:	80 fb 40             	cmp    bl,0x40
c0015b77:	74 06                	je     c0015b7f <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0015b79:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015b7d:	eb 20                	jmp    c0015b9f <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0015b7f:	50                   	push   eax
c0015b80:	50                   	push   eax
c0015b81:	55                   	push   ebp
c0015b82:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015b86:	50                   	push   eax
c0015b87:	e8 40 ac fe ff       	call   c00007cc <strcmp>
c0015b8c:	83 c4 10             	add    esp,0x10
c0015b8f:	85 c0                	test   eax,eax
c0015b91:	75 dd                	jne    c0015b70 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015b93:	eb e4                	jmp    c0015b79 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0015b95:	8d 50 01             	lea    edx,[eax+0x1]
c0015b98:	80 f9 3d             	cmp    cl,0x3d
c0015b9b:	74 1d                	je     c0015bba <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0015b9d:	89 d0                	mov    eax,edx
c0015b9f:	8a 08                	mov    cl,BYTE PTR [eax]
c0015ba1:	84 c9                	test   cl,cl
c0015ba3:	75 f0                	jne    c0015b95 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0015ba5:	eb 0f                	jmp    c0015bb6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015ba7:	8d 50 01             	lea    edx,[eax+0x1]
c0015baa:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0015bae:	47                   	inc    edi
c0015baf:	89 d0                	mov    eax,edx
c0015bb1:	e9 3b ff ff ff       	jmp    c0015af1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0015bb6:	31 c0                	xor    eax,eax
c0015bb8:	eb 33                	jmp    c0015bed <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0015bba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015bbe:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015bc1:	50                   	push   eax
c0015bc2:	50                   	push   eax
c0015bc3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015bc7:	50                   	push   eax
c0015bc8:	56                   	push   esi
c0015bc9:	e8 fe ab fe ff       	call   c00007cc <strcmp>
c0015bce:	83 c4 10             	add    esp,0x10
c0015bd1:	85 c0                	test   eax,eax
c0015bd3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015bd7:	75 97                	jne    c0015b70 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015bd9:	51                   	push   ecx
c0015bda:	51                   	push   ecx
c0015bdb:	52                   	push   edx
c0015bdc:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015be3:	e8 58 ab fe ff       	call   c0000740 <strcpy>
c0015be8:	83 c4 10             	add    esp,0x10
c0015beb:	b0 01                	mov    al,0x1
c0015bed:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015bf3:	5b                   	pop    ebx
c0015bf4:	5e                   	pop    esi
c0015bf5:	5f                   	pop    edi
c0015bf6:	5d                   	pop    ebp
c0015bf7:	c3                   	ret    

c0015bf8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015bf8:	57                   	push   edi
c0015bf9:	56                   	push   esi
c0015bfa:	53                   	push   ebx
c0015bfb:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015c01:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0015c08:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0015c0f:	53                   	push   ebx
c0015c10:	e8 8b aa fe ff       	call   c00006a0 <strlen>
c0015c15:	89 34 24             	mov    DWORD PTR [esp],esi
c0015c18:	89 c7                	mov    edi,eax
c0015c1a:	e8 81 aa fe ff       	call   c00006a0 <strlen>
c0015c1f:	83 c4 10             	add    esp,0x10
c0015c22:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015c26:	3d ff 00 00 00       	cmp    eax,0xff
c0015c2b:	0f 87 d3 00 00 00    	ja     c0015d04 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015c31:	57                   	push   edi
c0015c32:	57                   	push   edi
c0015c33:	56                   	push   esi
c0015c34:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015c38:	56                   	push   esi
c0015c39:	e8 02 ab fe ff       	call   c0000740 <strcpy>
c0015c3e:	58                   	pop    eax
c0015c3f:	5a                   	pop    edx
c0015c40:	68 1a 6b 02 c0       	push   0xc0026b1a
c0015c45:	56                   	push   esi
c0015c46:	e8 35 ac fe ff       	call   c0000880 <strcat>
c0015c4b:	59                   	pop    ecx
c0015c4c:	5f                   	pop    edi
c0015c4d:	53                   	push   ebx
c0015c4e:	56                   	push   esi
c0015c4f:	e8 2c ac fe ff       	call   c0000880 <strcat>
c0015c54:	58                   	pop    eax
c0015c55:	5a                   	pop    edx
c0015c56:	68 c4 67 02 c0       	push   0xc00267c4
c0015c5b:	56                   	push   esi
c0015c5c:	e8 1f ac fe ff       	call   c0000880 <strcat>
c0015c61:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015c68:	e8 ee 40 ff ff       	call   c0009d5b <malloc>
c0015c6d:	83 c4 0c             	add    esp,0xc
c0015c70:	89 c3                	mov    ebx,eax
c0015c72:	ff 35 30 9f 02 c0    	push   DWORD PTR ds:0xc0029f30
c0015c78:	56                   	push   esi
c0015c79:	50                   	push   eax
c0015c7a:	e8 33 79 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0015c7f:	83 c4 10             	add    esp,0x10
c0015c82:	85 db                	test   ebx,ebx
c0015c84:	74 7e                	je     c0015d04 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015c86:	51                   	push   ecx
c0015c87:	51                   	push   ecx
c0015c88:	6a 01                	push   0x1
c0015c8a:	53                   	push   ebx
c0015c8b:	e8 fc 79 ff ff       	call   c000d68c <File::open(FileOpenMode)>
c0015c90:	83 c4 10             	add    esp,0x10
c0015c93:	85 c0                	test   eax,eax
c0015c95:	74 08                	je     c0015c9f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0015c97:	83 ec 0c             	sub    esp,0xc
c0015c9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c9c:	53                   	push   ebx
c0015c9d:	eb 5f                	jmp    c0015cfe <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015c9f:	52                   	push   edx
c0015ca0:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015ca4:	50                   	push   eax
c0015ca5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015ca9:	50                   	push   eax
c0015caa:	53                   	push   ebx
c0015cab:	e8 88 7c ff ff       	call   c000d938 <File::stat(unsigned long long*, bool*)>
c0015cb0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015cb4:	83 c4 10             	add    esp,0x10
c0015cb7:	89 c1                	mov    ecx,eax
c0015cb9:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0015cbd:	74 31                	je     c0015cf0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015cbf:	83 ec 0c             	sub    esp,0xc
c0015cc2:	50                   	push   eax
c0015cc3:	e8 93 40 ff ff       	call   c0009d5b <malloc>
c0015cc8:	89 c6                	mov    esi,eax
c0015cca:	58                   	pop    eax
c0015ccb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ccd:	8d 54 24 20          	lea    edx,[esp+0x20]
c0015cd1:	52                   	push   edx
c0015cd2:	56                   	push   esi
c0015cd3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015cd7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015cdb:	53                   	push   ebx
c0015cdc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015cdf:	83 c4 20             	add    esp,0x20
c0015ce2:	85 c0                	test   eax,eax
c0015ce4:	75 0a                	jne    c0015cf0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015ce6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015cea:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0015cee:	74 18                	je     c0015d08 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0015cf0:	83 ec 0c             	sub    esp,0xc
c0015cf3:	53                   	push   ebx
c0015cf4:	e8 f1 79 ff ff       	call   c000d6ea <File::close()>
c0015cf9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015cfb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015cfe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015d01:	83 c4 10             	add    esp,0x10
c0015d04:	31 c0                	xor    eax,eax
c0015d06:	eb 3b                	jmp    c0015d43 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0015d08:	83 ec 0c             	sub    esp,0xc
c0015d0b:	53                   	push   ebx
c0015d0c:	e8 d9 79 ff ff       	call   c000d6ea <File::close()>
c0015d11:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d16:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015d19:	83 c4 0c             	add    esp,0xc
c0015d1c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015d23:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015d2a:	56                   	push   esi
c0015d2b:	e8 70 fd ff ff       	call   c0015aa0 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015d30:	89 34 24             	mov    DWORD PTR [esp],esi
c0015d33:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015d37:	e8 2f 40 ff ff       	call   c0009d6b <free>
c0015d3c:	83 c4 10             	add    esp,0x10
c0015d3f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015d43:	81 c4 20 01 00 00    	add    esp,0x120
c0015d49:	5b                   	pop    ebx
c0015d4a:	5e                   	pop    esi
c0015d4b:	5f                   	pop    edi
c0015d4c:	c3                   	ret    

c0015d4d <Reg::getLine(char*, char*, char*)>:
c0015d4d:	57                   	push   edi
c0015d4e:	56                   	push   esi
c0015d4f:	53                   	push   ebx
c0015d50:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015d54:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015d58:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015d5c:	57                   	push   edi
c0015d5d:	56                   	push   esi
c0015d5e:	53                   	push   ebx
c0015d5f:	68 c9 67 02 c0       	push   0xc00267c9
c0015d64:	e8 8f fe ff ff       	call   c0015bf8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015d69:	83 c4 10             	add    esp,0x10
c0015d6c:	84 c0                	test   al,al
c0015d6e:	75 10                	jne    c0015d80 <Reg::getLine(char*, char*, char*)+0x33>
c0015d70:	57                   	push   edi
c0015d71:	56                   	push   esi
c0015d72:	53                   	push   ebx
c0015d73:	68 ee 67 02 c0       	push   0xc00267ee
c0015d78:	e8 7b fe ff ff       	call   c0015bf8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015d7d:	83 c4 10             	add    esp,0x10
c0015d80:	5b                   	pop    ebx
c0015d81:	5e                   	pop    esi
c0015d82:	5f                   	pop    edi
c0015d83:	c3                   	ret    

c0015d84 <Reg::readInt(char*, char*, int*)>:
c0015d84:	55                   	push   ebp
c0015d85:	57                   	push   edi
c0015d86:	56                   	push   esi
c0015d87:	53                   	push   ebx
c0015d88:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015d8e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015d92:	57                   	push   edi
c0015d93:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015d9a:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015da1:	e8 a7 ff ff ff       	call   c0015d4d <Reg::getLine(char*, char*, char*)>
c0015da6:	83 c4 10             	add    esp,0x10
c0015da9:	84 c0                	test   al,al
c0015dab:	0f 84 b3 00 00 00    	je     c0015e64 <Reg::readInt(char*, char*, int*)+0xe0>
c0015db1:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015db5:	80 fa 2b             	cmp    dl,0x2b
c0015db8:	74 0c                	je     c0015dc6 <Reg::readInt(char*, char*, int*)+0x42>
c0015dba:	80 fa 2d             	cmp    dl,0x2d
c0015dbd:	75 0e                	jne    c0015dcd <Reg::readInt(char*, char*, int*)+0x49>
c0015dbf:	ba 01 00 00 00       	mov    edx,0x1
c0015dc4:	eb 0b                	jmp    c0015dd1 <Reg::readInt(char*, char*, int*)+0x4d>
c0015dc6:	ba 01 00 00 00       	mov    edx,0x1
c0015dcb:	eb 02                	jmp    c0015dcf <Reg::readInt(char*, char*, int*)+0x4b>
c0015dcd:	31 d2                	xor    edx,edx
c0015dcf:	31 c0                	xor    eax,eax
c0015dd1:	be 0a 00 00 00       	mov    esi,0xa
c0015dd6:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0015ddb:	75 20                	jne    c0015dfd <Reg::readInt(char*, char*, int*)+0x79>
c0015ddd:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015de1:	80 f9 78             	cmp    cl,0x78
c0015de4:	75 0a                	jne    c0015df0 <Reg::readInt(char*, char*, int*)+0x6c>
c0015de6:	83 c2 02             	add    edx,0x2
c0015de9:	be 10 00 00 00       	mov    esi,0x10
c0015dee:	eb 0d                	jmp    c0015dfd <Reg::readInt(char*, char*, int*)+0x79>
c0015df0:	80 f9 62             	cmp    cl,0x62
c0015df3:	75 08                	jne    c0015dfd <Reg::readInt(char*, char*, int*)+0x79>
c0015df5:	83 c2 02             	add    edx,0x2
c0015df8:	be 02 00 00 00       	mov    esi,0x2
c0015dfd:	01 d7                	add    edi,edx
c0015dff:	31 d2                	xor    edx,edx
c0015e01:	8a 1f                	mov    bl,BYTE PTR [edi]
c0015e03:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0015e07:	80 fb 0d             	cmp    bl,0xd
c0015e0a:	0f 94 c3             	sete   bl
c0015e0d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015e12:	0f 94 c1             	sete   cl
c0015e15:	08 cb                	or     bl,cl
c0015e17:	75 3a                	jne    c0015e53 <Reg::readInt(char*, char*, int*)+0xcf>
c0015e19:	0f af d6             	imul   edx,esi
c0015e1c:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015e21:	83 fe 10             	cmp    esi,0x10
c0015e24:	75 26                	jne    c0015e4c <Reg::readInt(char*, char*, int*)+0xc8>
c0015e26:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015e2a:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0015e2d:	89 e9                	mov    ecx,ebp
c0015e2f:	80 f9 05             	cmp    cl,0x5
c0015e32:	77 06                	ja     c0015e3a <Reg::readInt(char*, char*, int*)+0xb6>
c0015e34:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015e38:	eb 16                	jmp    c0015e50 <Reg::readInt(char*, char*, int*)+0xcc>
c0015e3a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015e3e:	83 e9 61             	sub    ecx,0x61
c0015e41:	80 f9 05             	cmp    cl,0x5
c0015e44:	77 06                	ja     c0015e4c <Reg::readInt(char*, char*, int*)+0xc8>
c0015e46:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0015e4a:	eb 04                	jmp    c0015e50 <Reg::readInt(char*, char*, int*)+0xcc>
c0015e4c:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0015e50:	47                   	inc    edi
c0015e51:	eb ae                	jmp    c0015e01 <Reg::readInt(char*, char*, int*)+0x7d>
c0015e53:	84 c0                	test   al,al
c0015e55:	74 02                	je     c0015e59 <Reg::readInt(char*, char*, int*)+0xd5>
c0015e57:	f7 da                	neg    edx
c0015e59:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015e60:	89 10                	mov    DWORD PTR [eax],edx
c0015e62:	88 d8                	mov    al,bl
c0015e64:	81 c4 ec 00 00 00    	add    esp,0xec
c0015e6a:	5b                   	pop    ebx
c0015e6b:	5e                   	pop    esi
c0015e6c:	5f                   	pop    edi
c0015e6d:	5d                   	pop    ebp
c0015e6e:	c3                   	ret    

c0015e6f <Reg::readString(char*, char*, char*, int)>:
c0015e6f:	57                   	push   edi
c0015e70:	56                   	push   esi
c0015e71:	53                   	push   ebx
c0015e72:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015e78:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0015e7f:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0015e83:	57                   	push   edi
c0015e84:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015e8b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015e92:	e8 b6 fe ff ff       	call   c0015d4d <Reg::getLine(char*, char*, char*)>
c0015e97:	83 c4 10             	add    esp,0x10
c0015e9a:	89 c6                	mov    esi,eax
c0015e9c:	84 c0                	test   al,al
c0015e9e:	74 44                	je     c0015ee4 <Reg::readString(char*, char*, char*, int)+0x75>
c0015ea0:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0015ea7:	31 c0                	xor    eax,eax
c0015ea9:	4a                   	dec    edx
c0015eaa:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015ead:	84 c9                	test   cl,cl
c0015eaf:	74 0f                	je     c0015ec0 <Reg::readString(char*, char*, char*, int)+0x51>
c0015eb1:	39 c2                	cmp    edx,eax
c0015eb3:	7e 0b                	jle    c0015ec0 <Reg::readString(char*, char*, char*, int)+0x51>
c0015eb5:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0015eb8:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015ebd:	40                   	inc    eax
c0015ebe:	eb ea                	jmp    c0015eaa <Reg::readString(char*, char*, char*, int)+0x3b>
c0015ec0:	83 ec 0c             	sub    esp,0xc
c0015ec3:	53                   	push   ebx
c0015ec4:	e8 d7 a7 fe ff       	call   c00006a0 <strlen>
c0015ec9:	83 c4 10             	add    esp,0x10
c0015ecc:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0015ed1:	75 11                	jne    c0015ee4 <Reg::readString(char*, char*, char*, int)+0x75>
c0015ed3:	83 ec 0c             	sub    esp,0xc
c0015ed6:	53                   	push   ebx
c0015ed7:	e8 c4 a7 fe ff       	call   c00006a0 <strlen>
c0015edc:	83 c4 10             	add    esp,0x10
c0015edf:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0015ee4:	81 c4 d0 00 00 00    	add    esp,0xd0
c0015eea:	89 f0                	mov    eax,esi
c0015eec:	5b                   	pop    ebx
c0015eed:	5e                   	pop    esi
c0015eee:	5f                   	pop    edi
c0015eef:	c3                   	ret    

c0015ef0 <Reg::readBool(char*, char*, bool*)>:
c0015ef0:	83 ec 20             	sub    esp,0x20
c0015ef3:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015ef7:	50                   	push   eax
c0015ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015f00:	e8 7f fe ff ff       	call   c0015d84 <Reg::readInt(char*, char*, int*)>
c0015f05:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015f0a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015f0e:	0f 95 02             	setne  BYTE PTR [edx]
c0015f11:	83 c4 2c             	add    esp,0x2c
c0015f14:	c3                   	ret    

c0015f15 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0015f15:	53                   	push   ebx
c0015f16:	83 ec 1c             	sub    esp,0x1c
c0015f19:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0015f1d:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015f21:	50                   	push   eax
c0015f22:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015f26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015f2a:	e8 c1 ff ff ff       	call   c0015ef0 <Reg::readBool(char*, char*, bool*)>
c0015f2f:	83 c4 10             	add    esp,0x10
c0015f32:	84 c0                	test   al,al
c0015f34:	74 04                	je     c0015f3a <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0015f36:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0015f3a:	88 d8                	mov    al,bl
c0015f3c:	83 c4 18             	add    esp,0x18
c0015f3f:	5b                   	pop    ebx
c0015f40:	c3                   	ret    

c0015f41 <Reg::readIntWithDefault(char*, char*, int)>:
c0015f41:	53                   	push   ebx
c0015f42:	83 ec 1c             	sub    esp,0x1c
c0015f45:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015f49:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015f4d:	50                   	push   eax
c0015f4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015f52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015f56:	e8 29 fe ff ff       	call   c0015d84 <Reg::readInt(char*, char*, int*)>
c0015f5b:	83 c4 10             	add    esp,0x10
c0015f5e:	84 c0                	test   al,al
c0015f60:	74 04                	je     c0015f66 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0015f62:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0015f66:	89 d8                	mov    eax,ebx
c0015f68:	83 c4 18             	add    esp,0x18
c0015f6b:	5b                   	pop    ebx
c0015f6c:	c3                   	ret    

c0015f6d <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015f6d:	57                   	push   edi
c0015f6e:	56                   	push   esi
c0015f6f:	56                   	push   esi
c0015f70:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015f74:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015f78:	56                   	push   esi
c0015f79:	57                   	push   edi
c0015f7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f82:	e8 e8 fe ff ff       	call   c0015e6f <Reg::readString(char*, char*, char*, int)>
c0015f87:	83 c4 10             	add    esp,0x10
c0015f8a:	84 c0                	test   al,al
c0015f8c:	75 1a                	jne    c0015fa8 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0015f8e:	51                   	push   ecx
c0015f8f:	56                   	push   esi
c0015f90:	6a 00                	push   0x0
c0015f92:	57                   	push   edi
c0015f93:	e8 ec a6 fe ff       	call   c0000684 <memset>
c0015f98:	8d 4e ff             	lea    ecx,[esi-0x1]
c0015f9b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015f9f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015fa1:	83 c4 10             	add    esp,0x10
c0015fa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0015fa8:	89 f8                	mov    eax,edi
c0015faa:	5a                   	pop    edx
c0015fab:	5e                   	pop    esi
c0015fac:	5f                   	pop    edi
c0015fad:	c3                   	ret    

c0015fae <Sys::eject(regs*)>:
c0015fae:	83 ec 0c             	sub    esp,0xc
c0015fb1:	83 ca ff             	or     edx,0xffffffff
c0015fb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fb8:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0015fbb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015fc0:	83 e9 41             	sub    ecx,0x41
c0015fc3:	83 f9 19             	cmp    ecx,0x19
c0015fc6:	77 18                	ja     c0015fe0 <Sys::eject(regs*)+0x32>
c0015fc8:	8b 0c 8d a0 8f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7060]
c0015fcf:	85 c9                	test   ecx,ecx
c0015fd1:	74 0d                	je     c0015fe0 <Sys::eject(regs*)+0x32>
c0015fd3:	83 ec 0c             	sub    esp,0xc
c0015fd6:	51                   	push   ecx
c0015fd7:	e8 84 a9 ff ff       	call   c0010960 <LogicalDisk::eject()>
c0015fdc:	83 c4 10             	add    esp,0x10
c0015fdf:	99                   	cdq    
c0015fe0:	83 c4 0c             	add    esp,0xc
c0015fe3:	c3                   	ret    

c0015fe4 <Sys::exit(regs*)>:
c0015fe4:	83 ec 18             	sub    esp,0x18
c0015fe7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015feb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015fee:	e8 59 36 00 00       	call   c001964c <terminateTask(int)>
c0015ff3:	83 c8 ff             	or     eax,0xffffffff
c0015ff6:	83 c4 1c             	add    esp,0x1c
c0015ff9:	89 c2                	mov    edx,eax
c0015ffb:	c3                   	ret    

c0015ffc <Sys::getCwd(regs*)>:
c0015ffc:	83 ec 10             	sub    esp,0x10
c0015fff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016003:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0016006:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016009:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001600e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016011:	e8 9e 73 ff ff       	call   c000d3b4 <Fs::getcwd(Process*, char*, int)>
c0016016:	83 c4 1c             	add    esp,0x1c
c0016019:	99                   	cdq    
c001601a:	c3                   	ret    

c001601b <Sys::getPID(regs*)>:
c001601b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016020:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016023:	8b 00                	mov    eax,DWORD PTR [eax]
c0016025:	99                   	cdq    
c0016026:	c3                   	ret    

c0016027 <Sys::getRAMData(regs*)>:
c0016027:	8b 0d 18 8a 02 c0    	mov    ecx,DWORD PTR ds:0xc0028a18
c001602d:	69 05 14 8a 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0028a14,0xc8
c0016037:	99                   	cdq    
c0016038:	f7 f9                	idiv   ecx
c001603a:	c1 e0 18             	shl    eax,0x18
c001603d:	09 c8                	or     eax,ecx
c001603f:	99                   	cdq    
c0016040:	c3                   	ret    

c0016041 <Sys::getVGAPtr(regs*)>:
c0016041:	55                   	push   ebp
c0016042:	57                   	push   edi
c0016043:	56                   	push   esi
c0016044:	53                   	push   ebx
c0016045:	83 ec 18             	sub    esp,0x18
c0016048:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001604c:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001604f:	e8 fc 30 00 00       	call   c0019150 <Thr::processFromPID(int)>
c0016054:	83 c4 10             	add    esp,0x10
c0016057:	89 c1                	mov    ecx,eax
c0016059:	b8 01 00 00 00       	mov    eax,0x1
c001605e:	85 c9                	test   ecx,ecx
c0016060:	74 59                	je     c00160bb <Sys::getVGAPtr(regs*)+0x7a>
c0016062:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c0016068:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001606c:	74 0c                	je     c001607a <Sys::getVGAPtr(regs*)+0x39>
c001606e:	83 ec 0c             	sub    esp,0xc
c0016071:	53                   	push   ebx
c0016072:	e8 de 4d ff ff       	call   c000ae55 <setActiveTerminal(VgaText*)>
c0016077:	83 c4 10             	add    esp,0x10
c001607a:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001607d:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0016080:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0016085:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016087:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001608a:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001608d:	81 c3 82 00 00 00    	add    ebx,0x82
c0016093:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0016099:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001609c:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001609f:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00160a5:	50                   	push   eax
c00160a6:	50                   	push   eax
c00160a7:	53                   	push   ebx
c00160a8:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00160ab:	05 a8 0f 00 00       	add    eax,0xfa8
c00160b0:	50                   	push   eax
c00160b1:	e8 8a a6 fe ff       	call   c0000740 <strcpy>
c00160b6:	83 c4 10             	add    esp,0x10
c00160b9:	31 c0                	xor    eax,eax
c00160bb:	83 c4 0c             	add    esp,0xc
c00160be:	31 d2                	xor    edx,edx
c00160c0:	5b                   	pop    ebx
c00160c1:	5e                   	pop    esi
c00160c2:	5f                   	pop    edi
c00160c3:	5d                   	pop    ebp
c00160c4:	c3                   	ret    

c00160c5 <Sys::loadDLL(regs*)>:
c00160c5:	56                   	push   esi
c00160c6:	53                   	push   ebx
c00160c7:	31 d2                	xor    edx,edx
c00160c9:	51                   	push   ecx
c00160ca:	b8 01 00 00 00       	mov    eax,0x1
c00160cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00160d3:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00160d7:	0f 84 8c 00 00 00    	je     c0016169 <Sys::loadDLL(regs*)+0xa4>
c00160dd:	83 ec 0c             	sub    esp,0xc
c00160e0:	68 14 01 00 00       	push   0x114
c00160e5:	e8 71 3c ff ff       	call   c0009d5b <malloc>
c00160ea:	83 c4 0c             	add    esp,0xc
c00160ed:	89 c3                	mov    ebx,eax
c00160ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160f4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00160f7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00160fa:	53                   	push   ebx
c00160fb:	e8 b2 74 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0016100:	83 c4 10             	add    esp,0x10
c0016103:	31 d2                	xor    edx,edx
c0016105:	b8 02 00 00 00       	mov    eax,0x2
c001610a:	85 db                	test   ebx,ebx
c001610c:	74 5b                	je     c0016169 <Sys::loadDLL(regs*)+0xa4>
c001610e:	83 ec 0c             	sub    esp,0xc
c0016111:	53                   	push   ebx
c0016112:	e8 e3 77 ff ff       	call   c000d8fa <File::exists()>
c0016117:	83 c4 10             	add    esp,0x10
c001611a:	84 c0                	test   al,al
c001611c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001611e:	75 11                	jne    c0016131 <Sys::loadDLL(regs*)+0x6c>
c0016120:	83 ec 0c             	sub    esp,0xc
c0016123:	53                   	push   ebx
c0016124:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016127:	83 c4 10             	add    esp,0x10
c001612a:	b8 03 00 00 00       	mov    eax,0x3
c001612f:	eb 36                	jmp    c0016167 <Sys::loadDLL(regs*)+0xa2>
c0016131:	83 ec 0c             	sub    esp,0xc
c0016134:	53                   	push   ebx
c0016135:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016138:	58                   	pop    eax
c0016139:	5a                   	pop    edx
c001613a:	6a 00                	push   0x0
c001613c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001613f:	e8 0a 22 00 00       	call   c001834e <Thr::loadDLL(char const*, bool)>
c0016144:	83 c4 10             	add    esp,0x10
c0016147:	89 c1                	mov    ecx,eax
c0016149:	31 d2                	xor    edx,edx
c001614b:	b8 04 00 00 00       	mov    eax,0x4
c0016150:	85 c9                	test   ecx,ecx
c0016152:	74 15                	je     c0016169 <Sys::loadDLL(regs*)+0xa4>
c0016154:	53                   	push   ebx
c0016155:	53                   	push   ebx
c0016156:	ff 35 e8 89 02 c0    	push   DWORD PTR ds:0xc00289e8
c001615c:	51                   	push   ecx
c001615d:	e8 1d 24 00 00       	call   c001857f <Thr::executeDLL(unsigned long, void*)>
c0016162:	83 c4 10             	add    esp,0x10
c0016165:	31 c0                	xor    eax,eax
c0016167:	31 d2                	xor    edx,edx
c0016169:	59                   	pop    ecx
c001616a:	5b                   	pop    ebx
c001616b:	5e                   	pop    esi
c001616c:	c3                   	ret    

c001616d <Sys::read(regs*)>:
c001616d:	57                   	push   edi
c001616e:	56                   	push   esi
c001616f:	53                   	push   ebx
c0016170:	83 ec 10             	sub    esp,0x10
c0016173:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016177:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001617a:	83 f8 02             	cmp    eax,0x2
c001617d:	77 10                	ja     c001618f <Sys::read(regs*)+0x22>
c001617f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016184:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016187:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001618d:	eb 0e                	jmp    c001619d <Sys::read(regs*)+0x30>
c001618f:	83 ec 0c             	sub    esp,0xc
c0016192:	50                   	push   eax
c0016193:	e8 33 5a ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c0016198:	83 c4 10             	add    esp,0x10
c001619b:	89 c1                	mov    ecx,eax
c001619d:	83 c8 ff             	or     eax,0xffffffff
c00161a0:	85 c9                	test   ecx,ecx
c00161a2:	89 c2                	mov    edx,eax
c00161a4:	74 28                	je     c00161ce <Sys::read(regs*)+0x61>
c00161a6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00161ae:	31 ff                	xor    edi,edi
c00161b0:	83 ec 0c             	sub    esp,0xc
c00161b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00161b5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00161b9:	52                   	push   edx
c00161ba:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00161bd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00161c0:	57                   	push   edi
c00161c1:	56                   	push   esi
c00161c2:	51                   	push   ecx
c00161c3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00161c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00161ca:	83 c4 20             	add    esp,0x20
c00161cd:	99                   	cdq    
c00161ce:	83 c4 10             	add    esp,0x10
c00161d1:	5b                   	pop    ebx
c00161d2:	5e                   	pop    esi
c00161d3:	5f                   	pop    edi
c00161d4:	c3                   	ret    

c00161d5 <Sys::sbrk(regs*)>:
c00161d5:	56                   	push   esi
c00161d6:	53                   	push   ebx
c00161d7:	50                   	push   eax
c00161d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00161e1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00161e4:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00161e7:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00161ed:	85 db                	test   ebx,ebx
c00161ef:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00161f2:	74 02                	je     c00161f6 <Sys::sbrk(regs*)+0x21>
c00161f4:	79 06                	jns    c00161fc <Sys::sbrk(regs*)+0x27>
c00161f6:	89 f0                	mov    eax,esi
c00161f8:	31 d2                	xor    edx,edx
c00161fa:	eb 2a                	jmp    c0016226 <Sys::sbrk(regs*)+0x51>
c00161fc:	83 c8 ff             	or     eax,0xffffffff
c00161ff:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0016205:	89 c2                	mov    edx,eax
c0016207:	77 1d                	ja     c0016226 <Sys::sbrk(regs*)+0x51>
c0016209:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001620f:	50                   	push   eax
c0016210:	c1 ea 0c             	shr    edx,0xc
c0016213:	68 07 0c 00 00       	push   0xc07
c0016218:	52                   	push   edx
c0016219:	51                   	push   ecx
c001621a:	e8 ab 62 ff ff       	call   c000c4ca <VAS::allocatePages(int, int)>
c001621f:	89 f0                	mov    eax,esi
c0016221:	31 d2                	xor    edx,edx
c0016223:	83 c4 10             	add    esp,0x10
c0016226:	59                   	pop    ecx
c0016227:	5b                   	pop    ebx
c0016228:	5e                   	pop    esi
c0016229:	c3                   	ret    

c001622a <Sys::setCwd(regs*)>:
c001622a:	83 ec 14             	sub    esp,0x14
c001622d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016231:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016234:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016239:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001623c:	e8 58 77 ff ff       	call   c000d999 <Fs::setcwd(Process*, char*)>
c0016241:	83 c4 1c             	add    esp,0x1c
c0016244:	99                   	cdq    
c0016245:	c3                   	ret    

c0016246 <Sys::setTime(regs*)>:
c0016246:	55                   	push   ebp
c0016247:	31 c9                	xor    ecx,ecx
c0016249:	57                   	push   edi
c001624a:	bd 0c 00 00 00       	mov    ebp,0xc
c001624f:	56                   	push   esi
c0016250:	53                   	push   ebx
c0016251:	31 db                	xor    ebx,ebx
c0016253:	83 ec 10             	sub    esp,0x10
c0016256:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001625a:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001625d:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0016260:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0016263:	89 c2                	mov    edx,eax
c0016265:	66 81 ef 6c 07       	sub    di,0x76c
c001626a:	83 e2 1f             	and    edx,0x1f
c001626d:	c1 e7 10             	shl    edi,0x10
c0016270:	42                   	inc    edx
c0016271:	c1 e8 05             	shr    eax,0x5
c0016274:	88 d1                	mov    cl,dl
c0016276:	31 d2                	xor    edx,edx
c0016278:	f7 f5                	div    ebp
c001627a:	89 dd                	mov    ebp,ebx
c001627c:	88 d5                	mov    ch,dl
c001627e:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0016284:	0f b7 c1             	movzx  eax,cx
c0016287:	31 d2                	xor    edx,edx
c0016289:	09 f8                	or     eax,edi
c001628b:	bf 3c 00 00 00       	mov    edi,0x3c
c0016290:	89 c1                	mov    ecx,eax
c0016292:	89 f0                	mov    eax,esi
c0016294:	f7 f7                	div    edi
c0016296:	c1 e2 10             	shl    edx,0x10
c0016299:	09 d5                	or     ebp,edx
c001629b:	31 d2                	xor    edx,edx
c001629d:	89 eb                	mov    ebx,ebp
c001629f:	f7 f7                	div    edi
c00162a1:	bf 10 0e 00 00       	mov    edi,0xe10
c00162a6:	88 d7                	mov    bh,dl
c00162a8:	89 f0                	mov    eax,esi
c00162aa:	31 d2                	xor    edx,edx
c00162ac:	f7 f7                	div    edi
c00162ae:	bf 18 00 00 00       	mov    edi,0x18
c00162b3:	31 d2                	xor    edx,edx
c00162b5:	f7 f7                	div    edi
c00162b7:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c00162bc:	88 d3                	mov    bl,dl
c00162be:	53                   	push   ebx
c00162bf:	51                   	push   ecx
c00162c0:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00162c6:	e8 cf 7f ff ff       	call   c000e29a <Clock::setTimeInDatetimeLocal(datetime_t)>
c00162cb:	83 c4 1c             	add    esp,0x1c
c00162ce:	83 f0 01             	xor    eax,0x1
c00162d1:	5b                   	pop    ebx
c00162d2:	0f b6 c0             	movzx  eax,al
c00162d5:	5e                   	pop    esi
c00162d6:	31 d2                	xor    edx,edx
c00162d8:	5f                   	pop    edi
c00162d9:	5d                   	pop    ebp
c00162da:	c3                   	ret    

c00162db <Sys::timezone(regs*)>:
c00162db:	53                   	push   ebx
c00162dc:	83 ec 08             	sub    esp,0x8
c00162df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00162e3:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00162e7:	75 17                	jne    c0016300 <Sys::timezone(regs*)+0x25>
c00162e9:	83 ec 0c             	sub    esp,0xc
c00162ec:	68 09 68 02 c0       	push   0xc0026809
c00162f1:	e8 51 6d ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00162f6:	83 c8 ff             	or     eax,0xffffffff
c00162f9:	83 c4 10             	add    esp,0x10
c00162fc:	89 c2                	mov    edx,eax
c00162fe:	eb 20                	jmp    c0016320 <Sys::timezone(regs*)+0x45>
c0016300:	83 ec 0c             	sub    esp,0xc
c0016303:	68 1e 68 02 c0       	push   0xc002681e
c0016308:	e8 3a 6d ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001630d:	58                   	pop    eax
c001630e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016311:	e8 e6 7c ff ff       	call   c000dffc <User::loadClockSettings(int)>
c0016316:	83 c4 10             	add    esp,0x10
c0016319:	b8 01 00 00 00       	mov    eax,0x1
c001631e:	31 d2                	xor    edx,edx
c0016320:	83 c4 08             	add    esp,0x8
c0016323:	5b                   	pop    ebx
c0016324:	c3                   	ret    

c0016325 <Sys::write(regs*)>:
c0016325:	57                   	push   edi
c0016326:	56                   	push   esi
c0016327:	53                   	push   ebx
c0016328:	83 ec 10             	sub    esp,0x10
c001632b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001632f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016332:	83 f8 02             	cmp    eax,0x2
c0016335:	77 10                	ja     c0016347 <Sys::write(regs*)+0x22>
c0016337:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001633c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001633f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0016345:	eb 0e                	jmp    c0016355 <Sys::write(regs*)+0x30>
c0016347:	83 ec 0c             	sub    esp,0xc
c001634a:	50                   	push   eax
c001634b:	e8 7b 58 ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c0016350:	83 c4 10             	add    esp,0x10
c0016353:	89 c1                	mov    ecx,eax
c0016355:	83 c8 ff             	or     eax,0xffffffff
c0016358:	85 c9                	test   ecx,ecx
c001635a:	89 c2                	mov    edx,eax
c001635c:	74 28                	je     c0016386 <Sys::write(regs*)+0x61>
c001635e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016366:	31 ff                	xor    edi,edi
c0016368:	83 ec 0c             	sub    esp,0xc
c001636b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001636d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0016371:	52                   	push   edx
c0016372:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016375:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0016378:	57                   	push   edi
c0016379:	56                   	push   esi
c001637a:	51                   	push   ecx
c001637b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001637e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016382:	83 c4 20             	add    esp,0x20
c0016385:	99                   	cdq    
c0016386:	83 c4 10             	add    esp,0x10
c0016389:	5b                   	pop    ebx
c001638a:	5e                   	pop    esi
c001638b:	5f                   	pop    edi
c001638c:	c3                   	ret    

c001638d <Sys::wsbe(regs*)>:
c001638d:	57                   	push   edi
c001638e:	b9 0b 00 00 00       	mov    ecx,0xb
c0016393:	56                   	push   esi
c0016394:	be 5d 68 02 c0       	mov    esi,0xc002685d
c0016399:	53                   	push   ebx
c001639a:	83 ec 30             	sub    esp,0x30
c001639d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00163a1:	fc                   	cld    
c00163a2:	83 ec 0c             	sub    esp,0xc
c00163a5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00163a7:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00163ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163b0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00163b3:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00163b9:	8b 06                	mov    eax,DWORD PTR [esi]
c00163bb:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00163be:	57                   	push   edi
c00163bf:	e8 dc a2 fe ff       	call   c00006a0 <strlen>
c00163c4:	5a                   	pop    edx
c00163c5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00163c9:	52                   	push   edx
c00163ca:	31 d2                	xor    edx,edx
c00163cc:	57                   	push   edi
c00163cd:	52                   	push   edx
c00163ce:	50                   	push   eax
c00163cf:	56                   	push   esi
c00163d0:	ff d3                	call   ebx
c00163d2:	83 c4 14             	add    esp,0x14
c00163d5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00163d9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00163dc:	e8 6b 32 00 00       	call   c001964c <terminateTask(int)>
c00163e1:	83 c4 40             	add    esp,0x40
c00163e4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00163e9:	5b                   	pop    ebx
c00163ea:	31 d2                	xor    edx,edx
c00163ec:	5e                   	pop    esi
c00163ed:	5f                   	pop    edi
c00163ee:	c3                   	ret    

c00163ef <Sys::yield(regs*)>:
c00163ef:	83 ec 0c             	sub    esp,0xc
c00163f2:	fa                   	cli    
c00163f3:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c00163f9:	e8 36 29 00 00       	call   c0018d34 <schedule()>
c00163fe:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c0016403:	48                   	dec    eax
c0016404:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c0016409:	75 01                	jne    c001640c <Sys::yield(regs*)+0x1d>
c001640b:	fb                   	sti    
c001640c:	8b 15 0c 90 02 c0    	mov    edx,DWORD PTR ds:0xc002900c
c0016412:	83 c4 0c             	add    esp,0xc
c0016415:	89 d0                	mov    eax,edx
c0016417:	c1 ea 11             	shr    edx,0x11
c001641a:	c1 e0 07             	shl    eax,0x7
c001641d:	25 80 30 0f 00       	and    eax,0xf3080
c0016422:	31 d0                	xor    eax,edx
c0016424:	31 d2                	xor    edx,edx
c0016426:	c3                   	ret    

c0016427 <sysCallSeekDir(regs*)>:
c0016427:	31 c0                	xor    eax,eax
c0016429:	31 d2                	xor    edx,edx
c001642b:	c3                   	ret    

c001642c <sysCallTellDir(regs*)>:
c001642c:	31 c0                	xor    eax,eax
c001642e:	31 d2                	xor    edx,edx
c0016430:	c3                   	ret    

c0016431 <sysCallVerify(regs*)>:
c0016431:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016435:	31 d2                	xor    edx,edx
c0016437:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001643a:	c3                   	ret    

c001643b <sysCallGetArgc(regs*)>:
c001643b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016440:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016443:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0016449:	99                   	cdq    
c001644a:	c3                   	ret    

c001644b <sysFormatDisk(regs*)>:
c001644b:	56                   	push   esi
c001644c:	53                   	push   ebx
c001644d:	53                   	push   ebx
c001644e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016452:	8b 1d 14 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b14
c0016458:	eb 25                	jmp    c001647f <sysFormatDisk(regs*)+0x34>
c001645a:	83 ec 0c             	sub    esp,0xc
c001645d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016460:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016462:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0016465:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016468:	50                   	push   eax
c0016469:	ff 34 85 a0 8f 02 c0 	push   DWORD PTR [eax*4-0x3ffd7060]
c0016470:	53                   	push   ebx
c0016471:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0016474:	83 c4 20             	add    esp,0x20
c0016477:	83 f8 08             	cmp    eax,0x8
c001647a:	75 12                	jne    c001648e <sysFormatDisk(regs*)+0x43>
c001647c:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001647f:	85 db                	test   ebx,ebx
c0016481:	75 d7                	jne    c001645a <sysFormatDisk(regs*)+0xf>
c0016483:	59                   	pop    ecx
c0016484:	b8 03 00 00 00       	mov    eax,0x3
c0016489:	31 d2                	xor    edx,edx
c001648b:	5b                   	pop    ebx
c001648c:	5e                   	pop    esi
c001648d:	c3                   	ret    
c001648e:	85 c0                	test   eax,eax
c0016490:	74 1b                	je     c00164ad <sysFormatDisk(regs*)+0x62>
c0016492:	83 f8 09             	cmp    eax,0x9
c0016495:	74 0b                	je     c00164a2 <sysFormatDisk(regs*)+0x57>
c0016497:	59                   	pop    ecx
c0016498:	b8 02 00 00 00       	mov    eax,0x2
c001649d:	31 d2                	xor    edx,edx
c001649f:	5b                   	pop    ebx
c00164a0:	5e                   	pop    esi
c00164a1:	c3                   	ret    
c00164a2:	59                   	pop    ecx
c00164a3:	b8 01 00 00 00       	mov    eax,0x1
c00164a8:	31 d2                	xor    edx,edx
c00164aa:	5b                   	pop    ebx
c00164ab:	5e                   	pop    esi
c00164ac:	c3                   	ret    
c00164ad:	59                   	pop    ecx
c00164ae:	31 c0                	xor    eax,eax
c00164b0:	31 d2                	xor    edx,edx
c00164b2:	5b                   	pop    ebx
c00164b3:	5e                   	pop    esi
c00164b4:	c3                   	ret    

c00164b5 <sysSetDiskVolumeLabel(regs*)>:
c00164b5:	56                   	push   esi
c00164b6:	53                   	push   ebx
c00164b7:	53                   	push   ebx
c00164b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164bc:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00164bf:	83 f8 19             	cmp    eax,0x19
c00164c2:	77 2d                	ja     c00164f1 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00164c4:	8b 0c 85 a0 8f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7060]
c00164cb:	85 c9                	test   ecx,ecx
c00164cd:	74 22                	je     c00164f1 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00164cf:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00164d2:	85 db                	test   ebx,ebx
c00164d4:	74 1b                	je     c00164f1 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00164d6:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00164dc:	85 d2                	test   edx,edx
c00164de:	74 11                	je     c00164f1 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00164e0:	8b 32                	mov    esi,DWORD PTR [edx]
c00164e2:	53                   	push   ebx
c00164e3:	50                   	push   eax
c00164e4:	51                   	push   ecx
c00164e5:	52                   	push   edx
c00164e6:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00164e9:	83 c4 10             	add    esp,0x10
c00164ec:	99                   	cdq    
c00164ed:	59                   	pop    ecx
c00164ee:	5b                   	pop    ebx
c00164ef:	5e                   	pop    esi
c00164f0:	c3                   	ret    
c00164f1:	59                   	pop    ecx
c00164f2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00164f7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00164fc:	5b                   	pop    ebx
c00164fd:	5e                   	pop    esi
c00164fe:	c3                   	ret    

c00164ff <sysGetDiskVolumeLabel(regs*)>:
c00164ff:	57                   	push   edi
c0016500:	56                   	push   esi
c0016501:	53                   	push   ebx
c0016502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016506:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016509:	83 fa 19             	cmp    edx,0x19
c001650c:	77 38                	ja     c0016546 <sysGetDiskVolumeLabel(regs*)+0x47>
c001650e:	8b 0c 95 a0 8f 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7060]
c0016515:	85 c9                	test   ecx,ecx
c0016517:	74 2d                	je     c0016546 <sysGetDiskVolumeLabel(regs*)+0x47>
c0016519:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001651c:	85 db                	test   ebx,ebx
c001651e:	74 26                	je     c0016546 <sysGetDiskVolumeLabel(regs*)+0x47>
c0016520:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016523:	85 f6                	test   esi,esi
c0016525:	74 1f                	je     c0016546 <sysGetDiskVolumeLabel(regs*)+0x47>
c0016527:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c001652d:	85 c0                	test   eax,eax
c001652f:	74 15                	je     c0016546 <sysGetDiskVolumeLabel(regs*)+0x47>
c0016531:	83 ec 0c             	sub    esp,0xc
c0016534:	8b 38                	mov    edi,DWORD PTR [eax]
c0016536:	56                   	push   esi
c0016537:	53                   	push   ebx
c0016538:	52                   	push   edx
c0016539:	51                   	push   ecx
c001653a:	50                   	push   eax
c001653b:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001653e:	83 c4 20             	add    esp,0x20
c0016541:	99                   	cdq    
c0016542:	5b                   	pop    ebx
c0016543:	5e                   	pop    esi
c0016544:	5f                   	pop    edi
c0016545:	c3                   	ret    
c0016546:	5b                   	pop    ebx
c0016547:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001654c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016551:	5e                   	pop    esi
c0016552:	5f                   	pop    edi
c0016553:	c3                   	ret    

c0016554 <sysShutdown(regs*)>:
c0016554:	83 ec 0c             	sub    esp,0xc
c0016557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001655b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001655e:	85 c0                	test   eax,eax
c0016560:	74 18                	je     c001657a <sysShutdown(regs*)+0x26>
c0016562:	83 f8 01             	cmp    eax,0x1
c0016565:	74 38                	je     c001659f <sysShutdown(regs*)+0x4b>
c0016567:	83 f8 02             	cmp    eax,0x2
c001656a:	74 24                	je     c0016590 <sysShutdown(regs*)+0x3c>
c001656c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016571:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016576:	83 c4 0c             	add    esp,0xc
c0016579:	c3                   	ret    
c001657a:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c001657f:	8b 10                	mov    edx,DWORD PTR [eax]
c0016581:	6a 00                	push   0x0
c0016583:	6a 00                	push   0x0
c0016585:	6a 00                	push   0x0
c0016587:	50                   	push   eax
c0016588:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001658b:	83 c4 10             	add    esp,0x10
c001658e:	eb dc                	jmp    c001656c <sysShutdown(regs*)+0x18>
c0016590:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0016595:	8b 10                	mov    edx,DWORD PTR [eax]
c0016597:	6a 00                	push   0x0
c0016599:	6a 00                	push   0x0
c001659b:	6a 01                	push   0x1
c001659d:	eb e8                	jmp    c0016587 <sysShutdown(regs*)+0x33>
c001659f:	a1 20 90 02 c0       	mov    eax,ds:0xc0029020
c00165a4:	85 c0                	test   eax,eax
c00165a6:	74 02                	je     c00165aa <sysShutdown(regs*)+0x56>
c00165a8:	ff d0                	call   eax
c00165aa:	31 c0                	xor    eax,eax
c00165ac:	31 d2                	xor    edx,edx
c00165ae:	83 c4 0c             	add    esp,0xc
c00165b1:	c3                   	ret    

c00165b2 <sysCallRealpath(regs*)>:
c00165b2:	83 ec 0c             	sub    esp,0xc
c00165b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165b9:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00165bc:	85 d2                	test   edx,edx
c00165be:	74 07                	je     c00165c7 <sysCallRealpath(regs*)+0x15>
c00165c0:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00165c3:	85 c0                	test   eax,eax
c00165c5:	75 0b                	jne    c00165d2 <sysCallRealpath(regs*)+0x20>
c00165c7:	b8 01 00 00 00       	mov    eax,0x1
c00165cc:	31 d2                	xor    edx,edx
c00165ce:	83 c4 0c             	add    esp,0xc
c00165d1:	c3                   	ret    
c00165d2:	51                   	push   ecx
c00165d3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00165d9:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00165dc:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00165e2:	51                   	push   ecx
c00165e3:	52                   	push   edx
c00165e4:	50                   	push   eax
c00165e5:	e8 1e 6e ff ff       	call   c000d408 <Fs::standardiseFiles(char*, char const*, char const*)>
c00165ea:	83 c4 10             	add    esp,0x10
c00165ed:	31 c0                	xor    eax,eax
c00165ef:	31 d2                	xor    edx,edx
c00165f1:	83 c4 0c             	add    esp,0xc
c00165f4:	c3                   	ret    

c00165f5 <sysCallReadDir(regs*)>:
c00165f5:	53                   	push   ebx
c00165f6:	83 ec 18             	sub    esp,0x18
c00165f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00165fd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016600:	83 f8 02             	cmp    eax,0x2
c0016603:	76 60                	jbe    c0016665 <sysCallReadDir(regs*)+0x70>
c0016605:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001660c:	77 48                	ja     c0016656 <sysCallReadDir(regs*)+0x61>
c001660e:	83 ec 0c             	sub    esp,0xc
c0016611:	50                   	push   eax
c0016612:	e8 b4 55 ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c0016617:	83 c4 10             	add    esp,0x10
c001661a:	85 c0                	test   eax,eax
c001661c:	74 38                	je     c0016656 <sysCallReadDir(regs*)+0x61>
c001661e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016626:	83 ec 0c             	sub    esp,0xc
c0016629:	8b 10                	mov    edx,DWORD PTR [eax]
c001662b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001662f:	51                   	push   ecx
c0016630:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016633:	6a 00                	push   0x0
c0016635:	68 10 01 00 00       	push   0x110
c001663a:	50                   	push   eax
c001663b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001663e:	83 c4 20             	add    esp,0x20
c0016641:	85 c0                	test   eax,eax
c0016643:	74 29                	je     c001666e <sysCallReadDir(regs*)+0x79>
c0016645:	83 f8 07             	cmp    eax,0x7
c0016648:	74 1b                	je     c0016665 <sysCallReadDir(regs*)+0x70>
c001664a:	b8 02 00 00 00       	mov    eax,0x2
c001664f:	31 d2                	xor    edx,edx
c0016651:	83 c4 18             	add    esp,0x18
c0016654:	5b                   	pop    ebx
c0016655:	c3                   	ret    
c0016656:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001665b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016660:	83 c4 18             	add    esp,0x18
c0016663:	5b                   	pop    ebx
c0016664:	c3                   	ret    
c0016665:	b8 01 00 00 00       	mov    eax,0x1
c001666a:	31 d2                	xor    edx,edx
c001666c:	eb e3                	jmp    c0016651 <sysCallReadDir(regs*)+0x5c>
c001666e:	31 c0                	xor    eax,eax
c0016670:	31 d2                	xor    edx,edx
c0016672:	eb dd                	jmp    c0016651 <sysCallReadDir(regs*)+0x5c>

c0016674 <sysCallIsATTY(regs*)>:
c0016674:	83 ec 0c             	sub    esp,0xc
c0016677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001667b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001667e:	83 f8 02             	cmp    eax,0x2
c0016681:	76 07                	jbe    c001668a <sysCallIsATTY(regs*)+0x16>
c0016683:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016688:	75 26                	jne    c00166b0 <sysCallIsATTY(regs*)+0x3c>
c001668a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001668f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016692:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016698:	85 c0                	test   eax,eax
c001669a:	74 24                	je     c00166c0 <sysCallIsATTY(regs*)+0x4c>
c001669c:	83 ec 0c             	sub    esp,0xc
c001669f:	8b 10                	mov    edx,DWORD PTR [eax]
c00166a1:	50                   	push   eax
c00166a2:	ff 12                	call   DWORD PTR [edx]
c00166a4:	31 d2                	xor    edx,edx
c00166a6:	0f b6 c0             	movzx  eax,al
c00166a9:	83 c4 10             	add    esp,0x10
c00166ac:	83 c4 0c             	add    esp,0xc
c00166af:	c3                   	ret    
c00166b0:	83 ec 0c             	sub    esp,0xc
c00166b3:	50                   	push   eax
c00166b4:	e8 12 55 ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c00166b9:	83 c4 10             	add    esp,0x10
c00166bc:	85 c0                	test   eax,eax
c00166be:	75 dc                	jne    c001669c <sysCallIsATTY(regs*)+0x28>
c00166c0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00166c5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00166ca:	83 c4 0c             	add    esp,0xc
c00166cd:	c3                   	ret    

c00166ce <sysCallSeek(regs*)>:
c00166ce:	53                   	push   ebx
c00166cf:	83 ec 08             	sub    esp,0x8
c00166d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00166d6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00166d9:	8d 50 fd             	lea    edx,[eax-0x3]
c00166dc:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00166e2:	77 32                	ja     c0016716 <sysCallSeek(regs*)+0x48>
c00166e4:	83 ec 0c             	sub    esp,0xc
c00166e7:	50                   	push   eax
c00166e8:	e8 de 54 ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c00166ed:	83 c4 0c             	add    esp,0xc
c00166f0:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00166f3:	31 db                	xor    ebx,ebx
c00166f5:	53                   	push   ebx
c00166f6:	51                   	push   ecx
c00166f7:	50                   	push   eax
c00166f8:	e8 4d 70 ff ff       	call   c000d74a <File::seek(unsigned long long)>
c00166fd:	83 c4 10             	add    esp,0x10
c0016700:	85 c0                	test   eax,eax
c0016702:	0f 95 c0             	setne  al
c0016705:	31 d2                	xor    edx,edx
c0016707:	0f b6 c0             	movzx  eax,al
c001670a:	f7 d8                	neg    eax
c001670c:	83 d2 00             	adc    edx,0x0
c001670f:	83 c4 08             	add    esp,0x8
c0016712:	f7 da                	neg    edx
c0016714:	5b                   	pop    ebx
c0016715:	c3                   	ret    
c0016716:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001671b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016720:	83 c4 08             	add    esp,0x8
c0016723:	5b                   	pop    ebx
c0016724:	c3                   	ret    

c0016725 <sysCallTell(regs*)>:
c0016725:	53                   	push   ebx
c0016726:	83 ec 08             	sub    esp,0x8
c0016729:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001672d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016730:	83 f8 02             	cmp    eax,0x2
c0016733:	76 4d                	jbe    c0016782 <sysCallTell(regs*)+0x5d>
c0016735:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001673a:	76 19                	jbe    c0016755 <sysCallTell(regs*)+0x30>
c001673c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001673f:	31 d2                	xor    edx,edx
c0016741:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016747:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001674e:	31 c0                	xor    eax,eax
c0016750:	83 c4 08             	add    esp,0x8
c0016753:	5b                   	pop    ebx
c0016754:	c3                   	ret    
c0016755:	83 ec 0c             	sub    esp,0xc
c0016758:	50                   	push   eax
c0016759:	e8 6d 54 ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c001675e:	5a                   	pop    edx
c001675f:	59                   	pop    ecx
c0016760:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016763:	50                   	push   eax
c0016764:	e8 37 70 ff ff       	call   c000d7a0 <File::tell(unsigned long long*)>
c0016769:	83 c4 10             	add    esp,0x10
c001676c:	85 c0                	test   eax,eax
c001676e:	0f 95 c0             	setne  al
c0016771:	31 d2                	xor    edx,edx
c0016773:	0f b6 c0             	movzx  eax,al
c0016776:	f7 d8                	neg    eax
c0016778:	83 d2 00             	adc    edx,0x0
c001677b:	83 c4 08             	add    esp,0x8
c001677e:	f7 da                	neg    edx
c0016780:	5b                   	pop    ebx
c0016781:	c3                   	ret    
c0016782:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016787:	ba ff ff ff ff       	mov    edx,0xffffffff
c001678c:	83 c4 08             	add    esp,0x8
c001678f:	5b                   	pop    ebx
c0016790:	c3                   	ret    

c0016791 <sysCallSize(regs*)>:
c0016791:	53                   	push   ebx
c0016792:	83 ec 18             	sub    esp,0x18
c0016795:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016799:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001679c:	83 f8 02             	cmp    eax,0x2
c001679f:	76 53                	jbe    c00167f4 <sysCallSize(regs*)+0x63>
c00167a1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00167a6:	76 19                	jbe    c00167c1 <sysCallSize(regs*)+0x30>
c00167a8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00167ab:	31 d2                	xor    edx,edx
c00167ad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00167b3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00167ba:	31 c0                	xor    eax,eax
c00167bc:	83 c4 18             	add    esp,0x18
c00167bf:	5b                   	pop    ebx
c00167c0:	c3                   	ret    
c00167c1:	83 ec 0c             	sub    esp,0xc
c00167c4:	50                   	push   eax
c00167c5:	e8 01 54 ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c00167ca:	83 c4 0c             	add    esp,0xc
c00167cd:	8d 54 24 13          	lea    edx,[esp+0x13]
c00167d1:	52                   	push   edx
c00167d2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00167d5:	50                   	push   eax
c00167d6:	e8 5d 71 ff ff       	call   c000d938 <File::stat(unsigned long long*, bool*)>
c00167db:	83 c4 10             	add    esp,0x10
c00167de:	85 c0                	test   eax,eax
c00167e0:	0f 95 c0             	setne  al
c00167e3:	31 d2                	xor    edx,edx
c00167e5:	0f b6 c0             	movzx  eax,al
c00167e8:	f7 d8                	neg    eax
c00167ea:	83 d2 00             	adc    edx,0x0
c00167ed:	83 c4 18             	add    esp,0x18
c00167f0:	f7 da                	neg    edx
c00167f2:	5b                   	pop    ebx
c00167f3:	c3                   	ret    
c00167f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00167f9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00167fe:	83 c4 18             	add    esp,0x18
c0016801:	5b                   	pop    ebx
c0016802:	c3                   	ret    

c0016803 <sysCallSizeFromFilename(regs*)>:
c0016803:	57                   	push   edi
c0016804:	56                   	push   esi
c0016805:	53                   	push   ebx
c0016806:	83 ec 20             	sub    esp,0x20
c0016809:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001680d:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0016810:	83 fb 02             	cmp    ebx,0x2
c0016813:	0f 86 88 00 00 00    	jbe    c00168a1 <sysCallSizeFromFilename(regs*)+0x9e>
c0016819:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001681f:	76 1b                	jbe    c001683c <sysCallSizeFromFilename(regs*)+0x39>
c0016821:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016824:	31 d2                	xor    edx,edx
c0016826:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001682c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016833:	83 c4 20             	add    esp,0x20
c0016836:	31 c0                	xor    eax,eax
c0016838:	5b                   	pop    ebx
c0016839:	5e                   	pop    esi
c001683a:	5f                   	pop    edi
c001683b:	c3                   	ret    
c001683c:	83 ec 0c             	sub    esp,0xc
c001683f:	68 14 01 00 00       	push   0x114
c0016844:	e8 12 35 ff ff       	call   c0009d5b <malloc>
c0016849:	83 c4 0c             	add    esp,0xc
c001684c:	89 c7                	mov    edi,eax
c001684e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016853:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016856:	53                   	push   ebx
c0016857:	57                   	push   edi
c0016858:	e8 55 6d ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c001685d:	83 c4 0c             	add    esp,0xc
c0016860:	8d 44 24 23          	lea    eax,[esp+0x23]
c0016864:	50                   	push   eax
c0016865:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0016868:	57                   	push   edi
c0016869:	e8 ca 70 ff ff       	call   c000d938 <File::stat(unsigned long long*, bool*)>
c001686e:	83 c4 10             	add    esp,0x10
c0016871:	85 ff                	test   edi,edi
c0016873:	74 14                	je     c0016889 <sysCallSizeFromFilename(regs*)+0x86>
c0016875:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016879:	8b 17                	mov    edx,DWORD PTR [edi]
c001687b:	83 ec 0c             	sub    esp,0xc
c001687e:	57                   	push   edi
c001687f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016882:	83 c4 10             	add    esp,0x10
c0016885:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016889:	85 c0                	test   eax,eax
c001688b:	0f 95 c0             	setne  al
c001688e:	31 d2                	xor    edx,edx
c0016890:	0f b6 c0             	movzx  eax,al
c0016893:	f7 d8                	neg    eax
c0016895:	83 d2 00             	adc    edx,0x0
c0016898:	83 c4 20             	add    esp,0x20
c001689b:	f7 da                	neg    edx
c001689d:	5b                   	pop    ebx
c001689e:	5e                   	pop    esi
c001689f:	5f                   	pop    edi
c00168a0:	c3                   	ret    
c00168a1:	83 c4 20             	add    esp,0x20
c00168a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00168a9:	5b                   	pop    ebx
c00168aa:	ba ff ff ff ff       	mov    edx,0xffffffff
c00168af:	5e                   	pop    esi
c00168b0:	5f                   	pop    edi
c00168b1:	c3                   	ret    

c00168b2 <sysCallClose(regs*)>:
c00168b2:	53                   	push   ebx
c00168b3:	83 ec 08             	sub    esp,0x8
c00168b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168ba:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00168bd:	83 f8 02             	cmp    eax,0x2
c00168c0:	76 41                	jbe    c0016903 <sysCallClose(regs*)+0x51>
c00168c2:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00168c8:	83 fa 01             	cmp    edx,0x1
c00168cb:	76 2d                	jbe    c00168fa <sysCallClose(regs*)+0x48>
c00168cd:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00168d2:	77 2f                	ja     c0016903 <sysCallClose(regs*)+0x51>
c00168d4:	83 ec 0c             	sub    esp,0xc
c00168d7:	50                   	push   eax
c00168d8:	e8 ee 52 ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c00168dd:	89 c3                	mov    ebx,eax
c00168df:	89 04 24             	mov    DWORD PTR [esp],eax
c00168e2:	e8 03 6e ff ff       	call   c000d6ea <File::close()>
c00168e7:	83 c4 10             	add    esp,0x10
c00168ea:	85 db                	test   ebx,ebx
c00168ec:	74 0c                	je     c00168fa <sysCallClose(regs*)+0x48>
c00168ee:	83 ec 0c             	sub    esp,0xc
c00168f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00168f3:	53                   	push   ebx
c00168f4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00168f7:	83 c4 10             	add    esp,0x10
c00168fa:	31 c0                	xor    eax,eax
c00168fc:	31 d2                	xor    edx,edx
c00168fe:	83 c4 08             	add    esp,0x8
c0016901:	5b                   	pop    ebx
c0016902:	c3                   	ret    
c0016903:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016908:	ba ff ff ff ff       	mov    edx,0xffffffff
c001690d:	83 c4 08             	add    esp,0x8
c0016910:	5b                   	pop    ebx
c0016911:	c3                   	ret    

c0016912 <sysCallOpenDir(regs*)>:
c0016912:	56                   	push   esi
c0016913:	53                   	push   ebx
c0016914:	53                   	push   ebx
c0016915:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016919:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001691c:	85 f6                	test   esi,esi
c001691e:	74 59                	je     c0016979 <sysCallOpenDir(regs*)+0x67>
c0016920:	83 ec 0c             	sub    esp,0xc
c0016923:	68 14 01 00 00       	push   0x114
c0016928:	e8 2e 34 ff ff       	call   c0009d5b <malloc>
c001692d:	83 c4 0c             	add    esp,0xc
c0016930:	89 c6                	mov    esi,eax
c0016932:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016937:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001693a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001693d:	56                   	push   esi
c001693e:	e8 cf 71 ff ff       	call   c000db12 <Directory::Directory(char const*, Process*)>
c0016943:	83 c4 10             	add    esp,0x10
c0016946:	85 f6                	test   esi,esi
c0016948:	74 2f                	je     c0016979 <sysCallOpenDir(regs*)+0x67>
c001694a:	83 ec 0c             	sub    esp,0xc
c001694d:	56                   	push   esi
c001694e:	e8 99 72 ff ff       	call   c000dbec <Directory::open()>
c0016953:	83 c4 10             	add    esp,0x10
c0016956:	85 c0                	test   eax,eax
c0016958:	75 1f                	jne    c0016979 <sysCallOpenDir(regs*)+0x67>
c001695a:	83 ec 0c             	sub    esp,0xc
c001695d:	56                   	push   esi
c001695e:	e8 73 4f ff ff       	call   c000b8d6 <UnixFile::getFileDescriptor()>
c0016963:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016966:	83 c4 10             	add    esp,0x10
c0016969:	89 02                	mov    DWORD PTR [edx],eax
c001696b:	c1 f8 1f             	sar    eax,0x1f
c001696e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016971:	31 c0                	xor    eax,eax
c0016973:	59                   	pop    ecx
c0016974:	31 d2                	xor    edx,edx
c0016976:	5b                   	pop    ebx
c0016977:	5e                   	pop    esi
c0016978:	c3                   	ret    
c0016979:	59                   	pop    ecx
c001697a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001697f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016984:	5b                   	pop    ebx
c0016985:	5e                   	pop    esi
c0016986:	c3                   	ret    

c0016987 <sysCallCloseDir(regs*)>:
c0016987:	53                   	push   ebx
c0016988:	83 ec 08             	sub    esp,0x8
c001698b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001698f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016992:	8d 50 fd             	lea    edx,[eax-0x3]
c0016995:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001699b:	77 2f                	ja     c00169cc <sysCallCloseDir(regs*)+0x45>
c001699d:	83 ec 0c             	sub    esp,0xc
c00169a0:	50                   	push   eax
c00169a1:	e8 25 52 ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c00169a6:	89 c3                	mov    ebx,eax
c00169a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00169ab:	e8 98 72 ff ff       	call   c000dc48 <Directory::close()>
c00169b0:	83 c4 10             	add    esp,0x10
c00169b3:	85 db                	test   ebx,ebx
c00169b5:	74 0c                	je     c00169c3 <sysCallCloseDir(regs*)+0x3c>
c00169b7:	83 ec 0c             	sub    esp,0xc
c00169ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169bc:	53                   	push   ebx
c00169bd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00169c0:	83 c4 10             	add    esp,0x10
c00169c3:	31 c0                	xor    eax,eax
c00169c5:	31 d2                	xor    edx,edx
c00169c7:	83 c4 08             	add    esp,0x8
c00169ca:	5b                   	pop    ebx
c00169cb:	c3                   	ret    
c00169cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00169d1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00169d6:	83 c4 08             	add    esp,0x8
c00169d9:	5b                   	pop    ebx
c00169da:	c3                   	ret    

c00169db <sysCallMakeDir(regs*)>:
c00169db:	56                   	push   esi
c00169dc:	53                   	push   ebx
c00169dd:	83 ec 10             	sub    esp,0x10
c00169e0:	68 14 01 00 00       	push   0x114
c00169e5:	e8 71 33 ff ff       	call   c0009d5b <malloc>
c00169ea:	83 c4 0c             	add    esp,0xc
c00169ed:	89 c3                	mov    ebx,eax
c00169ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169f4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00169f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00169fb:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00169fe:	53                   	push   ebx
c00169ff:	e8 0e 71 ff ff       	call   c000db12 <Directory::Directory(char const*, Process*)>
c0016a04:	83 c4 10             	add    esp,0x10
c0016a07:	85 db                	test   ebx,ebx
c0016a09:	74 32                	je     c0016a3d <sysCallMakeDir(regs*)+0x62>
c0016a0b:	83 ec 0c             	sub    esp,0xc
c0016a0e:	53                   	push   ebx
c0016a0f:	e8 b8 73 ff ff       	call   c000ddcc <Directory::create()>
c0016a14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a17:	89 c6                	mov    esi,eax
c0016a19:	e8 2a 72 ff ff       	call   c000dc48 <Directory::close()>
c0016a1e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a23:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a26:	83 c4 10             	add    esp,0x10
c0016a29:	31 c0                	xor    eax,eax
c0016a2b:	59                   	pop    ecx
c0016a2c:	85 f6                	test   esi,esi
c0016a2e:	5b                   	pop    ebx
c0016a2f:	0f 95 c0             	setne  al
c0016a32:	5e                   	pop    esi
c0016a33:	31 d2                	xor    edx,edx
c0016a35:	f7 d8                	neg    eax
c0016a37:	83 d2 00             	adc    edx,0x0
c0016a3a:	f7 da                	neg    edx
c0016a3c:	c3                   	ret    
c0016a3d:	59                   	pop    ecx
c0016a3e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016a43:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016a48:	5b                   	pop    ebx
c0016a49:	5e                   	pop    esi
c0016a4a:	c3                   	ret    

c0016a4b <sysCallWait(regs*)>:
c0016a4b:	83 ec 10             	sub    esp,0x10
c0016a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016a52:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0016a55:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016a58:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016a5b:	e8 fc 24 00 00       	call   c0018f5c <waitTask(int, int*, int)>
c0016a60:	83 c4 1c             	add    esp,0x1c
c0016a63:	99                   	cdq    
c0016a64:	c3                   	ret    

c0016a65 <sysCallNotImpl(regs*)>:
c0016a65:	83 ec 18             	sub    esp,0x18
c0016a68:	68 89 68 02 c0       	push   0xc0026889
c0016a6d:	e8 b7 e6 ff ff       	call   c0015129 <Krnl::panic(char const*)>
c0016a72:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016a77:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016a7c:	83 c4 1c             	add    esp,0x1c
c0016a7f:	c3                   	ret    

c0016a80 <sysPanic(regs*)>:
c0016a80:	83 ec 18             	sub    esp,0x18
c0016a83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a87:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016a8a:	e8 9a e6 ff ff       	call   c0015129 <Krnl::panic(char const*)>
c0016a8f:	b8 01 00 00 00       	mov    eax,0x1
c0016a94:	31 d2                	xor    edx,edx
c0016a96:	83 c4 1c             	add    esp,0x1c
c0016a99:	c3                   	ret    

c0016a9a <sysCallRmdir(regs*)>:
c0016a9a:	56                   	push   esi
c0016a9b:	53                   	push   ebx
c0016a9c:	83 ec 20             	sub    esp,0x20
c0016a9f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016aa3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016aa6:	68 14 01 00 00       	push   0x114
c0016aab:	e8 ab 32 ff ff       	call   c0009d5b <malloc>
c0016ab0:	83 c4 0c             	add    esp,0xc
c0016ab3:	89 c3                	mov    ebx,eax
c0016ab5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016aba:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016abd:	56                   	push   esi
c0016abe:	53                   	push   ebx
c0016abf:	e8 ee 6a ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0016ac4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ac7:	e8 38 6d ff ff       	call   c000d804 <File::unlink()>
c0016acc:	83 c4 10             	add    esp,0x10
c0016acf:	85 db                	test   ebx,ebx
c0016ad1:	74 14                	je     c0016ae7 <sysCallRmdir(regs*)+0x4d>
c0016ad3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ad7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016ad9:	83 ec 0c             	sub    esp,0xc
c0016adc:	53                   	push   ebx
c0016add:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016ae0:	83 c4 10             	add    esp,0x10
c0016ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ae7:	85 c0                	test   eax,eax
c0016ae9:	0f 95 c0             	setne  al
c0016aec:	31 d2                	xor    edx,edx
c0016aee:	0f b6 c0             	movzx  eax,al
c0016af1:	f7 d8                	neg    eax
c0016af3:	83 d2 00             	adc    edx,0x0
c0016af6:	83 c4 14             	add    esp,0x14
c0016af9:	f7 da                	neg    edx
c0016afb:	5b                   	pop    ebx
c0016afc:	5e                   	pop    esi
c0016afd:	c3                   	ret    

c0016afe <sysCallUnlink(regs*)>:
c0016afe:	56                   	push   esi
c0016aff:	53                   	push   ebx
c0016b00:	83 ec 20             	sub    esp,0x20
c0016b03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016b07:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016b0a:	68 14 01 00 00       	push   0x114
c0016b0f:	e8 47 32 ff ff       	call   c0009d5b <malloc>
c0016b14:	83 c4 0c             	add    esp,0xc
c0016b17:	89 c3                	mov    ebx,eax
c0016b19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b1e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016b21:	56                   	push   esi
c0016b22:	53                   	push   ebx
c0016b23:	e8 8a 6a ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0016b28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b2b:	e8 d4 6c ff ff       	call   c000d804 <File::unlink()>
c0016b30:	83 c4 10             	add    esp,0x10
c0016b33:	85 db                	test   ebx,ebx
c0016b35:	74 14                	je     c0016b4b <sysCallUnlink(regs*)+0x4d>
c0016b37:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b3b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016b3d:	83 ec 0c             	sub    esp,0xc
c0016b40:	53                   	push   ebx
c0016b41:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016b44:	83 c4 10             	add    esp,0x10
c0016b47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016b4b:	85 c0                	test   eax,eax
c0016b4d:	0f 95 c0             	setne  al
c0016b50:	31 d2                	xor    edx,edx
c0016b52:	0f b6 c0             	movzx  eax,al
c0016b55:	f7 d8                	neg    eax
c0016b57:	83 d2 00             	adc    edx,0x0
c0016b5a:	83 c4 14             	add    esp,0x14
c0016b5d:	f7 da                	neg    edx
c0016b5f:	5b                   	pop    ebx
c0016b60:	5e                   	pop    esi
c0016b61:	c3                   	ret    

c0016b62 <sysCallGetArgv(regs*)>:
c0016b62:	83 ec 0c             	sub    esp,0xc
c0016b65:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016b69:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016b6c:	85 c0                	test   eax,eax
c0016b6e:	78 2b                	js     c0016b9b <sysCallGetArgv(regs*)+0x39>
c0016b70:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016b76:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0016b79:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0016b7f:	7d 1a                	jge    c0016b9b <sysCallGetArgv(regs*)+0x39>
c0016b81:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0016b88:	85 c0                	test   eax,eax
c0016b8a:	74 17                	je     c0016ba3 <sysCallGetArgv(regs*)+0x41>
c0016b8c:	83 ec 08             	sub    esp,0x8
c0016b8f:	50                   	push   eax
c0016b90:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0016b93:	e8 a8 9b fe ff       	call   c0000740 <strcpy>
c0016b98:	83 c4 10             	add    esp,0x10
c0016b9b:	31 c0                	xor    eax,eax
c0016b9d:	31 d2                	xor    edx,edx
c0016b9f:	83 c4 0c             	add    esp,0xc
c0016ba2:	c3                   	ret    
c0016ba3:	b8 01 00 00 00       	mov    eax,0x1
c0016ba8:	31 d2                	xor    edx,edx
c0016baa:	83 c4 0c             	add    esp,0xc
c0016bad:	c3                   	ret    

c0016bae <sysCallTTYName(regs*)>:
c0016bae:	56                   	push   esi
c0016baf:	53                   	push   ebx
c0016bb0:	53                   	push   ebx
c0016bb1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016bb5:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016bb8:	85 c0                	test   eax,eax
c0016bba:	74 5f                	je     c0016c1b <sysCallTTYName(regs*)+0x6d>
c0016bbc:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016bbf:	83 f8 02             	cmp    eax,0x2
c0016bc2:	77 3e                	ja     c0016c02 <sysCallTTYName(regs*)+0x54>
c0016bc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bc9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016bcc:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0016bd2:	85 db                	test   ebx,ebx
c0016bd4:	74 45                	je     c0016c1b <sysCallTTYName(regs*)+0x6d>
c0016bd6:	83 ec 0c             	sub    esp,0xc
c0016bd9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016bdb:	53                   	push   ebx
c0016bdc:	ff 10                	call   DWORD PTR [eax]
c0016bde:	83 c4 10             	add    esp,0x10
c0016be1:	84 c0                	test   al,al
c0016be3:	74 41                	je     c0016c26 <sysCallTTYName(regs*)+0x78>
c0016be5:	83 ec 08             	sub    esp,0x8
c0016be8:	81 c3 82 00 00 00    	add    ebx,0x82
c0016bee:	53                   	push   ebx
c0016bef:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016bf2:	e8 49 9b fe ff       	call   c0000740 <strcpy>
c0016bf7:	83 c4 10             	add    esp,0x10
c0016bfa:	31 c0                	xor    eax,eax
c0016bfc:	59                   	pop    ecx
c0016bfd:	31 d2                	xor    edx,edx
c0016bff:	5b                   	pop    ebx
c0016c00:	5e                   	pop    esi
c0016c01:	c3                   	ret    
c0016c02:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016c07:	74 bb                	je     c0016bc4 <sysCallTTYName(regs*)+0x16>
c0016c09:	83 ec 0c             	sub    esp,0xc
c0016c0c:	50                   	push   eax
c0016c0d:	e8 b9 4f ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c0016c12:	83 c4 10             	add    esp,0x10
c0016c15:	89 c3                	mov    ebx,eax
c0016c17:	85 db                	test   ebx,ebx
c0016c19:	75 bb                	jne    c0016bd6 <sysCallTTYName(regs*)+0x28>
c0016c1b:	59                   	pop    ecx
c0016c1c:	b8 01 00 00 00       	mov    eax,0x1
c0016c21:	31 d2                	xor    edx,edx
c0016c23:	5b                   	pop    ebx
c0016c24:	5e                   	pop    esi
c0016c25:	c3                   	ret    
c0016c26:	59                   	pop    ecx
c0016c27:	b8 02 00 00 00       	mov    eax,0x2
c0016c2c:	31 d2                	xor    edx,edx
c0016c2e:	5b                   	pop    ebx
c0016c2f:	5e                   	pop    esi
c0016c30:	c3                   	ret    

c0016c31 <sysCallUSleep(regs*)>:
c0016c31:	83 ec 1c             	sub    esp,0x1c
c0016c34:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016c38:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016c3b:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0016c3e:	6a 00                	push   0x0
c0016c40:	6a 64                	push   0x64
c0016c42:	52                   	push   edx
c0016c43:	50                   	push   eax
c0016c44:	e8 d7 c1 00 00       	call   c0022e20 <__udivdi3>
c0016c49:	83 c4 14             	add    esp,0x14
c0016c4c:	50                   	push   eax
c0016c4d:	e8 da 23 00 00       	call   c001902c <milliTenthSleep(unsigned int)>
c0016c52:	31 c0                	xor    eax,eax
c0016c54:	31 d2                	xor    edx,edx
c0016c56:	83 c4 1c             	add    esp,0x1c
c0016c59:	c3                   	ret    

c0016c5a <sysCallSpawn(regs*)>:
c0016c5a:	56                   	push   esi
c0016c5b:	53                   	push   ebx
c0016c5c:	50                   	push   eax
c0016c5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016c61:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016c64:	85 c0                	test   eax,eax
c0016c66:	75 08                	jne    c0016c70 <sysCallSpawn(regs*)+0x16>
c0016c68:	59                   	pop    ecx
c0016c69:	31 c0                	xor    eax,eax
c0016c6b:	31 d2                	xor    edx,edx
c0016c6d:	5b                   	pop    ebx
c0016c6e:	5e                   	pop    esi
c0016c6f:	c3                   	ret    
c0016c70:	83 ec 0c             	sub    esp,0xc
c0016c73:	68 1f 07 00 00       	push   0x71f
c0016c78:	e8 de 30 ff ff       	call   c0009d5b <malloc>
c0016c7d:	83 c4 10             	add    esp,0x10
c0016c80:	89 c6                	mov    esi,eax
c0016c82:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016c85:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016c88:	85 c0                	test   eax,eax
c0016c8a:	75 32                	jne    c0016cbe <sysCallSpawn(regs*)+0x64>
c0016c8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c91:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c94:	52                   	push   edx
c0016c95:	50                   	push   eax
c0016c96:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016c99:	56                   	push   esi
c0016c9a:	e8 85 1a 00 00       	call   c0018724 <Process::Process(char const*, Process*, char**)>
c0016c9f:	83 c4 10             	add    esp,0x10
c0016ca2:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0016ca9:	75 bd                	jne    c0016c68 <sysCallSpawn(regs*)+0xe>
c0016cab:	83 ec 0c             	sub    esp,0xc
c0016cae:	56                   	push   esi
c0016caf:	e8 5c 1f 00 00       	call   c0018c10 <Process::createUserThread()>
c0016cb4:	8b 06                	mov    eax,DWORD PTR [esi]
c0016cb6:	83 c4 10             	add    esp,0x10
c0016cb9:	99                   	cdq    
c0016cba:	59                   	pop    ecx
c0016cbb:	5b                   	pop    ebx
c0016cbc:	5e                   	pop    esi
c0016cbd:	c3                   	ret    
c0016cbe:	31 c0                	xor    eax,eax
c0016cc0:	eb d2                	jmp    c0016c94 <sysCallSpawn(regs*)+0x3a>

c0016cc2 <sysCallGetEnv(regs*)>:
c0016cc2:	57                   	push   edi
c0016cc3:	56                   	push   esi
c0016cc4:	53                   	push   ebx
c0016cc5:	83 ec 1c             	sub    esp,0x1c
c0016cc8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016ccc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cd1:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0016cd4:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0016cd7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016cda:	e8 96 e3 ff ff       	call   c0015075 <Krnl::getProcessTotalEnvCount(Process*)>
c0016cdf:	83 c4 10             	add    esp,0x10
c0016ce2:	39 c7                	cmp    edi,eax
c0016ce4:	7c 14                	jl     c0016cfa <sysCallGetEnv(regs*)+0x38>
c0016ce6:	85 f6                	test   esi,esi
c0016ce8:	75 0b                	jne    c0016cf5 <sysCallGetEnv(regs*)+0x33>
c0016cea:	83 c4 10             	add    esp,0x10
c0016ced:	31 c0                	xor    eax,eax
c0016cef:	5b                   	pop    ebx
c0016cf0:	31 d2                	xor    edx,edx
c0016cf2:	5e                   	pop    esi
c0016cf3:	5f                   	pop    edi
c0016cf4:	c3                   	ret    
c0016cf5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016cf8:	eb f0                	jmp    c0016cea <sysCallGetEnv(regs*)+0x28>
c0016cfa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016cfe:	52                   	push   edx
c0016cff:	57                   	push   edi
c0016d00:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d06:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0016d09:	50                   	push   eax
c0016d0a:	e8 86 e3 ff ff       	call   c0015095 <Krnl::getProcessEnvPair(Process*, int)>
c0016d0f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0016d12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d16:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016d1a:	83 c4 0c             	add    esp,0xc
c0016d1d:	85 c9                	test   ecx,ecx
c0016d1f:	75 23                	jne    c0016d44 <sysCallGetEnv(regs*)+0x82>
c0016d21:	83 ec 0c             	sub    esp,0xc
c0016d24:	50                   	push   eax
c0016d25:	e8 76 99 fe ff       	call   c00006a0 <strlen>
c0016d2a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016d2d:	89 c3                	mov    ebx,eax
c0016d2f:	e8 6c 99 fe ff       	call   c00006a0 <strlen>
c0016d34:	83 c4 10             	add    esp,0x10
c0016d37:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0016d3b:	83 c4 10             	add    esp,0x10
c0016d3e:	31 d2                	xor    edx,edx
c0016d40:	5b                   	pop    ebx
c0016d41:	5e                   	pop    esi
c0016d42:	5f                   	pop    edi
c0016d43:	c3                   	ret    
c0016d44:	83 ec 08             	sub    esp,0x8
c0016d47:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016d4a:	50                   	push   eax
c0016d4b:	56                   	push   esi
c0016d4c:	e8 ef 99 fe ff       	call   c0000740 <strcpy>
c0016d51:	58                   	pop    eax
c0016d52:	5a                   	pop    edx
c0016d53:	68 a3 68 02 c0       	push   0xc00268a3
c0016d58:	56                   	push   esi
c0016d59:	e8 22 9b fe ff       	call   c0000880 <strcat>
c0016d5e:	59                   	pop    ecx
c0016d5f:	5b                   	pop    ebx
c0016d60:	57                   	push   edi
c0016d61:	56                   	push   esi
c0016d62:	e8 19 9b fe ff       	call   c0000880 <strcat>
c0016d67:	83 c4 10             	add    esp,0x10
c0016d6a:	e9 7b ff ff ff       	jmp    c0016cea <sysCallGetEnv(regs*)+0x28>

c0016d6f <sysAppSettings(regs*)>:
c0016d6f:	57                   	push   edi
c0016d70:	56                   	push   esi
c0016d71:	56                   	push   esi
c0016d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d76:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016d79:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0016d7f:	25 e0 1f 00 00       	and    eax,0x1fe0
c0016d84:	66 3d c0 09          	cmp    ax,0x9c0
c0016d88:	75 2e                	jne    c0016db8 <sysAppSettings(regs*)+0x49>
c0016d8a:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0016d90:	83 e0 1f             	and    eax,0x1f
c0016d93:	3c 01                	cmp    al,0x1
c0016d95:	74 2c                	je     c0016dc3 <sysAppSettings(regs*)+0x54>
c0016d97:	3c 07                	cmp    al,0x7
c0016d99:	0f 84 b3 00 00 00    	je     c0016e52 <sysAppSettings(regs*)+0xe3>
c0016d9f:	84 c0                	test   al,al
c0016da1:	0f 84 d2 00 00 00    	je     c0016e79 <sysAppSettings(regs*)+0x10a>
c0016da7:	3c 08                	cmp    al,0x8
c0016da9:	74 63                	je     c0016e0e <sysAppSettings(regs*)+0x9f>
c0016dab:	59                   	pop    ecx
c0016dac:	0f b6 c0             	movzx  eax,al
c0016daf:	5e                   	pop    esi
c0016db0:	05 e8 03 00 00       	add    eax,0x3e8
c0016db5:	5f                   	pop    edi
c0016db6:	99                   	cdq    
c0016db7:	c3                   	ret    
c0016db8:	b8 01 00 00 00       	mov    eax,0x1
c0016dbd:	59                   	pop    ecx
c0016dbe:	31 d2                	xor    edx,edx
c0016dc0:	5e                   	pop    esi
c0016dc1:	5f                   	pop    edi
c0016dc2:	c3                   	ret    
c0016dc3:	50                   	push   eax
c0016dc4:	68 00 01 00 00       	push   0x100
c0016dc9:	6a 00                	push   0x0
c0016dcb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016dd0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016dd3:	83 c0 0c             	add    eax,0xc
c0016dd6:	50                   	push   eax
c0016dd7:	e8 a8 98 fe ff       	call   c0000684 <memset>
c0016ddc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016de1:	b9 ff 00 00 00       	mov    ecx,0xff
c0016de6:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0016de9:	83 c7 0c             	add    edi,0xc
c0016dec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016dee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016df3:	5a                   	pop    edx
c0016df4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016df7:	59                   	pop    ecx
c0016df8:	8d 50 0c             	lea    edx,[eax+0xc]
c0016dfb:	52                   	push   edx
c0016dfc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016e02:	e8 ed 3e ff ff       	call   c000acf4 <VgaText::setTitle(char*)>
c0016e07:	83 c4 10             	add    esp,0x10
c0016e0a:	31 c0                	xor    eax,eax
c0016e0c:	eb af                	jmp    c0016dbd <sysAppSettings(regs*)+0x4e>
c0016e0e:	83 ec 08             	sub    esp,0x8
c0016e11:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016e17:	83 e0 0f             	and    eax,0xf
c0016e1a:	50                   	push   eax
c0016e1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e20:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016e23:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016e29:	e8 b6 3e ff ff       	call   c000ace4 <VgaText::setTitleColour(VgaColour)>
c0016e2e:	5f                   	pop    edi
c0016e2f:	58                   	pop    eax
c0016e30:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016e36:	c1 e8 04             	shr    eax,0x4
c0016e39:	83 e0 0f             	and    eax,0xf
c0016e3c:	50                   	push   eax
c0016e3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e42:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016e45:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016e4b:	e8 84 3e ff ff       	call   c000acd4 <VgaText::setTitleTextColour(VgaColour)>
c0016e50:	eb b5                	jmp    c0016e07 <sysAppSettings(regs*)+0x98>
c0016e52:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e57:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016e5a:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016e60:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c0016e66:	c0 e8 06             	shr    al,0x6
c0016e69:	83 e0 01             	and    eax,0x1
c0016e6c:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c0016e72:	31 c0                	xor    eax,eax
c0016e74:	e9 44 ff ff ff       	jmp    c0016dbd <sysAppSettings(regs*)+0x4e>
c0016e79:	b8 02 00 00 00       	mov    eax,0x2
c0016e7e:	e9 3a ff ff ff       	jmp    c0016dbd <sysAppSettings(regs*)+0x4e>

c0016e83 <sysSetFatAttrib(regs*)>:
c0016e83:	57                   	push   edi
c0016e84:	56                   	push   esi
c0016e85:	53                   	push   ebx
c0016e86:	83 ec 1c             	sub    esp,0x1c
c0016e89:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016e8d:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016e90:	68 14 01 00 00       	push   0x114
c0016e95:	e8 c1 2e ff ff       	call   c0009d5b <malloc>
c0016e9a:	83 c4 0c             	add    esp,0xc
c0016e9d:	89 c3                	mov    ebx,eax
c0016e9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ea4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016ea7:	57                   	push   edi
c0016ea8:	53                   	push   ebx
c0016ea9:	e8 04 67 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0016eae:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016eb1:	83 c4 0c             	add    esp,0xc
c0016eb4:	0f b6 d4             	movzx  edx,ah
c0016eb7:	0f b6 c0             	movzx  eax,al
c0016eba:	52                   	push   edx
c0016ebb:	50                   	push   eax
c0016ebc:	53                   	push   ebx
c0016ebd:	e8 dc 69 ff ff       	call   c000d89e <File::chfatattr(unsigned char, unsigned char)>
c0016ec2:	83 c4 10             	add    esp,0x10
c0016ec5:	85 db                	test   ebx,ebx
c0016ec7:	74 14                	je     c0016edd <sysSetFatAttrib(regs*)+0x5a>
c0016ec9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ecd:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016ecf:	83 ec 0c             	sub    esp,0xc
c0016ed2:	53                   	push   ebx
c0016ed3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016ed6:	83 c4 10             	add    esp,0x10
c0016ed9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016edd:	85 c0                	test   eax,eax
c0016edf:	0f 95 c0             	setne  al
c0016ee2:	31 d2                	xor    edx,edx
c0016ee4:	0f b6 c0             	movzx  eax,al
c0016ee7:	f7 d8                	neg    eax
c0016ee9:	83 d2 00             	adc    edx,0x0
c0016eec:	83 c4 10             	add    esp,0x10
c0016eef:	f7 da                	neg    edx
c0016ef1:	5b                   	pop    ebx
c0016ef2:	5e                   	pop    esi
c0016ef3:	5f                   	pop    edi
c0016ef4:	c3                   	ret    

c0016ef5 <sysPipe(regs*)>:
c0016ef5:	57                   	push   edi
c0016ef6:	56                   	push   esi
c0016ef7:	53                   	push   ebx
c0016ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016efc:	83 ec 0c             	sub    esp,0xc
c0016eff:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016f02:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016f05:	6a 20                	push   0x20
c0016f07:	e8 4f 2e ff ff       	call   c0009d5b <malloc>
c0016f0c:	89 c3                	mov    ebx,eax
c0016f0e:	58                   	pop    eax
c0016f0f:	5a                   	pop    edx
c0016f10:	68 00 50 00 00       	push   0x5000
c0016f15:	53                   	push   ebx
c0016f16:	e8 51 3b ff ff       	call   c000aa6c <Pipe::Pipe(int)>
c0016f1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f1e:	e8 b3 49 ff ff       	call   c000b8d6 <UnixFile::getFileDescriptor()>
c0016f23:	89 07                	mov    DWORD PTR [edi],eax
c0016f25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f28:	e8 a9 49 ff ff       	call   c000b8d6 <UnixFile::getFileDescriptor()>
c0016f2d:	83 c4 10             	add    esp,0x10
c0016f30:	89 06                	mov    DWORD PTR [esi],eax
c0016f32:	31 d2                	xor    edx,edx
c0016f34:	5b                   	pop    ebx
c0016f35:	31 c0                	xor    eax,eax
c0016f37:	5e                   	pop    esi
c0016f38:	5f                   	pop    edi
c0016f39:	c3                   	ret    

c0016f3a <sysGetUnixTime(regs*)>:
c0016f3a:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0016f3f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016f45:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016f49:	e9 84 71 ff ff       	jmp    c000e0d2 <Clock::timeInSecondsLocal()>

c0016f4e <string_ends_with(char const*, char const*)>:
c0016f4e:	57                   	push   edi
c0016f4f:	56                   	push   esi
c0016f50:	53                   	push   ebx
c0016f51:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016f55:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016f59:	83 ec 0c             	sub    esp,0xc
c0016f5c:	53                   	push   ebx
c0016f5d:	e8 3e 97 fe ff       	call   c00006a0 <strlen>
c0016f62:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016f65:	89 c6                	mov    esi,eax
c0016f67:	e8 34 97 fe ff       	call   c00006a0 <strlen>
c0016f6c:	83 c4 10             	add    esp,0x10
c0016f6f:	39 c6                	cmp    esi,eax
c0016f71:	7d 06                	jge    c0016f79 <string_ends_with(char const*, char const*)+0x2b>
c0016f73:	5b                   	pop    ebx
c0016f74:	31 c0                	xor    eax,eax
c0016f76:	5e                   	pop    esi
c0016f77:	5f                   	pop    edi
c0016f78:	c3                   	ret    
c0016f79:	83 ec 08             	sub    esp,0x8
c0016f7c:	29 c6                	sub    esi,eax
c0016f7e:	57                   	push   edi
c0016f7f:	01 f3                	add    ebx,esi
c0016f81:	53                   	push   ebx
c0016f82:	e8 45 98 fe ff       	call   c00007cc <strcmp>
c0016f87:	83 c4 10             	add    esp,0x10
c0016f8a:	85 c0                	test   eax,eax
c0016f8c:	5b                   	pop    ebx
c0016f8d:	0f 94 c0             	sete   al
c0016f90:	5e                   	pop    esi
c0016f91:	0f b6 c0             	movzx  eax,al
c0016f94:	5f                   	pop    edi
c0016f95:	c3                   	ret    

c0016f96 <sysCallOpen(regs*)>:
c0016f96:	56                   	push   esi
c0016f97:	53                   	push   ebx
c0016f98:	81 ec 04 01 00 00    	sub    esp,0x104
c0016f9e:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016fa5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016fa8:	85 c9                	test   ecx,ecx
c0016faa:	0f 84 ad 01 00 00    	je     c001715d <sysCallOpen(regs*)+0x1c7>
c0016fb0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016fb3:	85 c0                	test   eax,eax
c0016fb5:	0f 84 a2 01 00 00    	je     c001715d <sysCallOpen(regs*)+0x1c7>
c0016fbb:	52                   	push   edx
c0016fbc:	68 a5 68 02 c0       	push   0xc00268a5
c0016fc1:	50                   	push   eax
c0016fc2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0016fc6:	56                   	push   esi
c0016fc7:	e8 3c 64 ff ff       	call   c000d408 <Fs::standardiseFiles(char*, char const*, char const*)>
c0016fcc:	89 34 24             	mov    DWORD PTR [esp],esi
c0016fcf:	e8 cc 96 fe ff       	call   c00006a0 <strlen>
c0016fd4:	83 c4 10             	add    esp,0x10
c0016fd7:	48                   	dec    eax
c0016fd8:	74 1d                	je     c0016ff7 <sysCallOpen(regs*)+0x61>
c0016fda:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016fdd:	eb 0f                	jmp    c0016fee <sysCallOpen(regs*)+0x58>
c0016fdf:	80 fa 3a             	cmp    dl,0x3a
c0016fe2:	74 0f                	je     c0016ff3 <sysCallOpen(regs*)+0x5d>
c0016fe4:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016fe8:	48                   	dec    eax
c0016fe9:	74 0c                	je     c0016ff7 <sysCallOpen(regs*)+0x61>
c0016feb:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0016fee:	80 fa 2e             	cmp    dl,0x2e
c0016ff1:	75 ec                	jne    c0016fdf <sysCallOpen(regs*)+0x49>
c0016ff3:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0016ff7:	83 ec 08             	sub    esp,0x8
c0016ffa:	68 a9 68 02 c0       	push   0xc00268a9
c0016fff:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017002:	e8 47 ff ff ff       	call   c0016f4e <string_ends_with(char const*, char const*)>
c0017007:	83 c4 10             	add    esp,0x10
c001700a:	85 c0                	test   eax,eax
c001700c:	74 1d                	je     c001702b <sysCallOpen(regs*)+0x95>
c001700e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017011:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0017017:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001701e:	81 c4 04 01 00 00    	add    esp,0x104
c0017024:	31 c0                	xor    eax,eax
c0017026:	31 d2                	xor    edx,edx
c0017028:	5b                   	pop    ebx
c0017029:	5e                   	pop    esi
c001702a:	c3                   	ret    
c001702b:	83 ec 08             	sub    esp,0x8
c001702e:	68 ae 68 02 c0       	push   0xc00268ae
c0017033:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017036:	e8 13 ff ff ff       	call   c0016f4e <string_ends_with(char const*, char const*)>
c001703b:	83 c4 10             	add    esp,0x10
c001703e:	85 c0                	test   eax,eax
c0017040:	75 cc                	jne    c001700e <sysCallOpen(regs*)+0x78>
c0017042:	83 ec 08             	sub    esp,0x8
c0017045:	68 aa 68 02 c0       	push   0xc00268aa
c001704a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001704d:	e8 7a 97 fe ff       	call   c00007cc <strcmp>
c0017052:	83 c4 10             	add    esp,0x10
c0017055:	85 c0                	test   eax,eax
c0017057:	74 b5                	je     c001700e <sysCallOpen(regs*)+0x78>
c0017059:	83 ec 08             	sub    esp,0x8
c001705c:	68 a9 68 02 c0       	push   0xc00268a9
c0017061:	56                   	push   esi
c0017062:	e8 e7 fe ff ff       	call   c0016f4e <string_ends_with(char const*, char const*)>
c0017067:	83 c4 10             	add    esp,0x10
c001706a:	85 c0                	test   eax,eax
c001706c:	75 a0                	jne    c001700e <sysCallOpen(regs*)+0x78>
c001706e:	83 ec 08             	sub    esp,0x8
c0017071:	68 b3 68 02 c0       	push   0xc00268b3
c0017076:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017079:	e8 d0 fe ff ff       	call   c0016f4e <string_ends_with(char const*, char const*)>
c001707e:	83 c4 10             	add    esp,0x10
c0017081:	85 c0                	test   eax,eax
c0017083:	0f 85 e7 00 00 00    	jne    c0017170 <sysCallOpen(regs*)+0x1da>
c0017089:	83 ec 08             	sub    esp,0x8
c001708c:	68 b8 68 02 c0       	push   0xc00268b8
c0017091:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017094:	e8 b5 fe ff ff       	call   c0016f4e <string_ends_with(char const*, char const*)>
c0017099:	83 c4 10             	add    esp,0x10
c001709c:	85 c0                	test   eax,eax
c001709e:	0f 85 cc 00 00 00    	jne    c0017170 <sysCallOpen(regs*)+0x1da>
c00170a4:	83 ec 08             	sub    esp,0x8
c00170a7:	68 b4 68 02 c0       	push   0xc00268b4
c00170ac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00170af:	e8 18 97 fe ff       	call   c00007cc <strcmp>
c00170b4:	83 c4 10             	add    esp,0x10
c00170b7:	85 c0                	test   eax,eax
c00170b9:	0f 84 b1 00 00 00    	je     c0017170 <sysCallOpen(regs*)+0x1da>
c00170bf:	83 ec 08             	sub    esp,0x8
c00170c2:	68 b3 68 02 c0       	push   0xc00268b3
c00170c7:	56                   	push   esi
c00170c8:	e8 81 fe ff ff       	call   c0016f4e <string_ends_with(char const*, char const*)>
c00170cd:	83 c4 10             	add    esp,0x10
c00170d0:	85 c0                	test   eax,eax
c00170d2:	0f 85 98 00 00 00    	jne    c0017170 <sysCallOpen(regs*)+0x1da>
c00170d8:	83 ec 0c             	sub    esp,0xc
c00170db:	68 14 01 00 00       	push   0x114
c00170e0:	e8 76 2c ff ff       	call   c0009d5b <malloc>
c00170e5:	83 c4 0c             	add    esp,0xc
c00170e8:	89 c6                	mov    esi,eax
c00170ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170ef:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00170f2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00170f5:	56                   	push   esi
c00170f6:	e8 b7 64 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c00170fb:	83 c4 10             	add    esp,0x10
c00170fe:	85 f6                	test   esi,esi
c0017100:	74 5b                	je     c001715d <sysCallOpen(regs*)+0x1c7>
c0017102:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0017105:	0f b6 c2             	movzx  eax,dl
c0017108:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001710b:	89 d0                	mov    eax,edx
c001710d:	83 e0 01             	and    eax,0x1
c0017110:	f6 c2 02             	test   dl,0x2
c0017113:	74 03                	je     c0017118 <sysCallOpen(regs*)+0x182>
c0017115:	83 c8 02             	or     eax,0x2
c0017118:	f6 c2 04             	test   dl,0x4
c001711b:	74 03                	je     c0017120 <sysCallOpen(regs*)+0x18a>
c001711d:	83 c8 04             	or     eax,0x4
c0017120:	f6 c2 08             	test   dl,0x8
c0017123:	74 03                	je     c0017128 <sysCallOpen(regs*)+0x192>
c0017125:	83 c8 0a             	or     eax,0xa
c0017128:	83 e2 10             	and    edx,0x10
c001712b:	74 03                	je     c0017130 <sysCallOpen(regs*)+0x19a>
c001712d:	83 c8 12             	or     eax,0x12
c0017130:	83 ec 08             	sub    esp,0x8
c0017133:	50                   	push   eax
c0017134:	56                   	push   esi
c0017135:	e8 52 65 ff ff       	call   c000d68c <File::open(FileOpenMode)>
c001713a:	83 c4 10             	add    esp,0x10
c001713d:	85 c0                	test   eax,eax
c001713f:	75 1c                	jne    c001715d <sysCallOpen(regs*)+0x1c7>
c0017141:	83 ec 0c             	sub    esp,0xc
c0017144:	56                   	push   esi
c0017145:	e8 8c 47 ff ff       	call   c000b8d6 <UnixFile::getFileDescriptor()>
c001714a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001714d:	83 c4 10             	add    esp,0x10
c0017150:	89 02                	mov    DWORD PTR [edx],eax
c0017152:	c1 f8 1f             	sar    eax,0x1f
c0017155:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017158:	e9 c1 fe ff ff       	jmp    c001701e <sysCallOpen(regs*)+0x88>
c001715d:	81 c4 04 01 00 00    	add    esp,0x104
c0017163:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017168:	ba ff ff ff ff       	mov    edx,0xffffffff
c001716d:	5b                   	pop    ebx
c001716e:	5e                   	pop    esi
c001716f:	c3                   	ret    
c0017170:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017173:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0017179:	e9 99 fe ff ff       	jmp    c0017017 <sysCallOpen(regs*)+0x81>

c001717e <Sys::loadSyscalls()>:
c001717e:	c7 05 40 95 02 c0 ef 63 01 c0 	mov    DWORD PTR ds:0xc0029540,0xc00163ef
c0017188:	c7 05 44 95 02 c0 e4 5f 01 c0 	mov    DWORD PTR ds:0xc0029544,0xc0015fe4
c0017192:	c7 05 48 95 02 c0 d5 61 01 c0 	mov    DWORD PTR ds:0xc0029548,0xc00161d5
c001719c:	c7 05 4c 95 02 c0 25 63 01 c0 	mov    DWORD PTR ds:0xc002954c,0xc0016325
c00171a6:	c7 05 50 95 02 c0 6d 61 01 c0 	mov    DWORD PTR ds:0xc0029550,0xc001616d
c00171b0:	c7 05 54 95 02 c0 1b 60 01 c0 	mov    DWORD PTR ds:0xc0029554,0xc001601b
c00171ba:	c7 05 58 95 02 c0 fc 5f 01 c0 	mov    DWORD PTR ds:0xc0029558,0xc0015ffc
c00171c4:	c7 05 5c 95 02 c0 2a 62 01 c0 	mov    DWORD PTR ds:0xc002955c,0xc001622a
c00171ce:	c7 05 64 95 02 c0 b2 68 01 c0 	mov    DWORD PTR ds:0xc0029564,0xc00168b2
c00171d8:	c7 05 60 95 02 c0 96 6f 01 c0 	mov    DWORD PTR ds:0xc0029560,0xc0016f96
c00171e2:	c7 05 68 95 02 c0 12 69 01 c0 	mov    DWORD PTR ds:0xc0029568,0xc0016912
c00171ec:	c7 05 6c 95 02 c0 f5 65 01 c0 	mov    DWORD PTR ds:0xc002956c,0xc00165f5
c00171f6:	c7 05 70 95 02 c0 27 64 01 c0 	mov    DWORD PTR ds:0xc0029570,0xc0016427
c0017200:	c7 05 74 95 02 c0 2c 64 01 c0 	mov    DWORD PTR ds:0xc0029574,0xc001642c
c001720a:	c7 05 78 95 02 c0 db 69 01 c0 	mov    DWORD PTR ds:0xc0029578,0xc00169db
c0017214:	c7 05 7c 95 02 c0 87 69 01 c0 	mov    DWORD PTR ds:0xc002957c,0xc0016987
c001721e:	c7 05 80 95 02 c0 ce 66 01 c0 	mov    DWORD PTR ds:0xc0029580,0xc00166ce
c0017228:	c7 05 84 95 02 c0 25 67 01 c0 	mov    DWORD PTR ds:0xc0029584,0xc0016725
c0017232:	c7 05 88 95 02 c0 91 67 01 c0 	mov    DWORD PTR ds:0xc0029588,0xc0016791
c001723c:	c7 05 8c 95 02 c0 31 64 01 c0 	mov    DWORD PTR ds:0xc002958c,0xc0016431
c0017246:	c7 05 90 95 02 c0 4b 6a 01 c0 	mov    DWORD PTR ds:0xc0029590,0xc0016a4b
c0017250:	c7 05 94 95 02 c0 65 6a 01 c0 	mov    DWORD PTR ds:0xc0029594,0xc0016a65
c001725a:	c7 05 98 95 02 c0 65 6a 01 c0 	mov    DWORD PTR ds:0xc0029598,0xc0016a65
c0017264:	c7 05 9c 95 02 c0 9a 6a 01 c0 	mov    DWORD PTR ds:0xc002959c,0xc0016a9a
c001726e:	c7 05 a0 95 02 c0 fe 6a 01 c0 	mov    DWORD PTR ds:0xc00295a0,0xc0016afe
c0017278:	c7 05 a4 95 02 c0 3b 64 01 c0 	mov    DWORD PTR ds:0xc00295a4,0xc001643b
c0017282:	c7 05 a8 95 02 c0 62 6b 01 c0 	mov    DWORD PTR ds:0xc00295a8,0xc0016b62
c001728c:	c7 05 ac 95 02 c0 b2 65 01 c0 	mov    DWORD PTR ds:0xc00295ac,0xc00165b2
c0017296:	c7 05 b0 95 02 c0 ae 6b 01 c0 	mov    DWORD PTR ds:0xc00295b0,0xc0016bae
c00172a0:	c7 05 b4 95 02 c0 74 66 01 c0 	mov    DWORD PTR ds:0xc00295b4,0xc0016674
c00172aa:	c7 05 b8 95 02 c0 31 6c 01 c0 	mov    DWORD PTR ds:0xc00295b8,0xc0016c31
c00172b4:	c7 05 bc 95 02 c0 03 68 01 c0 	mov    DWORD PTR ds:0xc00295bc,0xc0016803
c00172be:	c7 05 c0 95 02 c0 5a 6c 01 c0 	mov    DWORD PTR ds:0xc00295c0,0xc0016c5a
c00172c8:	c7 05 c4 95 02 c0 c2 6c 01 c0 	mov    DWORD PTR ds:0xc00295c4,0xc0016cc2
c00172d2:	c7 05 c8 95 02 c0 6f 6d 01 c0 	mov    DWORD PTR ds:0xc00295c8,0xc0016d6f
c00172dc:	c7 05 cc 95 02 c0 4b 64 01 c0 	mov    DWORD PTR ds:0xc00295cc,0xc001644b
c00172e6:	c7 05 d0 95 02 c0 b5 64 01 c0 	mov    DWORD PTR ds:0xc00295d0,0xc00164b5
c00172f0:	c7 05 d4 95 02 c0 ff 64 01 c0 	mov    DWORD PTR ds:0xc00295d4,0xc00164ff
c00172fa:	c7 05 d8 95 02 c0 83 6e 01 c0 	mov    DWORD PTR ds:0xc00295d8,0xc0016e83
c0017304:	c7 05 dc 95 02 c0 80 6a 01 c0 	mov    DWORD PTR ds:0xc00295dc,0xc0016a80
c001730e:	c7 05 e0 95 02 c0 54 65 01 c0 	mov    DWORD PTR ds:0xc00295e0,0xc0016554
c0017318:	c7 05 e4 95 02 c0 f5 6e 01 c0 	mov    DWORD PTR ds:0xc00295e4,0xc0016ef5
c0017322:	c7 05 e8 95 02 c0 3a 6f 01 c0 	mov    DWORD PTR ds:0xc00295e8,0xc0016f3a
c001732c:	c7 05 ec 95 02 c0 c5 60 01 c0 	mov    DWORD PTR ds:0xc00295ec,0xc00160c5
c0017336:	c7 05 f0 95 02 c0 46 62 01 c0 	mov    DWORD PTR ds:0xc00295f0,0xc0016246
c0017340:	c7 05 f4 95 02 c0 db 62 01 c0 	mov    DWORD PTR ds:0xc00295f4,0xc00162db
c001734a:	c7 05 f8 95 02 c0 ae 5f 01 c0 	mov    DWORD PTR ds:0xc00295f8,0xc0015fae
c0017354:	c7 05 fc 95 02 c0 8d 63 01 c0 	mov    DWORD PTR ds:0xc00295fc,0xc001638d
c001735e:	c7 05 00 96 02 c0 27 60 01 c0 	mov    DWORD PTR ds:0xc0029600,0xc0016027
c0017368:	c7 05 04 96 02 c0 41 60 01 c0 	mov    DWORD PTR ds:0xc0029604,0xc0016041
c0017372:	c3                   	ret    

c0017373 <Sys::systemCall(regs*, void*)>:
c0017373:	53                   	push   ebx
c0017374:	83 ec 08             	sub    esp,0x8
c0017377:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001737b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001737e:	83 f8 7f             	cmp    eax,0x7f
c0017381:	77 16                	ja     c0017399 <Sys::systemCall(regs*, void*)+0x26>
c0017383:	8b 14 85 40 95 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6ac0]
c001738a:	85 d2                	test   edx,edx
c001738c:	74 0b                	je     c0017399 <Sys::systemCall(regs*, void*)+0x26>
c001738e:	83 ec 0c             	sub    esp,0xc
c0017391:	53                   	push   ebx
c0017392:	ff d2                	call   edx
c0017394:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017397:	eb 0d                	jmp    c00173a6 <Sys::systemCall(regs*, void*)+0x33>
c0017399:	52                   	push   edx
c001739a:	52                   	push   edx
c001739b:	50                   	push   eax
c001739c:	68 bd 68 02 c0       	push   0xc00268bd
c00173a1:	e8 a1 5c ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00173a6:	83 c4 10             	add    esp,0x10
c00173a9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00173ae:	31 d2                	xor    edx,edx
c00173b0:	83 c4 08             	add    esp,0x8
c00173b3:	5b                   	pop    ebx
c00173b4:	c3                   	ret    

c00173b5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00173b5:	55                   	push   ebp
c00173b6:	57                   	push   edi
c00173b7:	56                   	push   esi
c00173b8:	53                   	push   ebx
c00173b9:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00173bf:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00173c6:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c00173cd:	85 c0                	test   eax,eax
c00173cf:	0f 95 c1             	setne  cl
c00173d2:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00173da:	0f 94 c2             	sete   dl
c00173dd:	84 d1                	test   cl,dl
c00173df:	74 23                	je     c0017404 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00173e1:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c00173e7:	74 1b                	je     c0017404 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00173e9:	81 c3 00 10 00 00    	add    ebx,0x1000
c00173ef:	89 da                	mov    edx,ebx
c00173f1:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00173f7:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00173fd:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0017404:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001740b:	05 ff 0f 00 00       	add    eax,0xfff
c0017410:	83 ec 0c             	sub    esp,0xc
c0017413:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017417:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001741d:	c1 e8 0c             	shr    eax,0xc
c0017420:	89 fe                	mov    esi,edi
c0017422:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017426:	c1 ee 0c             	shr    esi,0xc
c0017429:	6a 01                	push   0x1
c001742b:	e8 f1 48 ff ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c0017430:	89 c5                	mov    ebp,eax
c0017432:	58                   	pop    eax
c0017433:	5a                   	pop    edx
c0017434:	56                   	push   esi
c0017435:	68 d1 68 02 c0       	push   0xc00268d1
c001743a:	e8 08 5c ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001743f:	59                   	pop    ecx
c0017440:	58                   	pop    eax
c0017441:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017445:	68 e3 68 02 c0       	push   0xc00268e3
c001744a:	e8 f8 5b ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001744f:	83 c4 10             	add    esp,0x10
c0017452:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0017458:	0f 86 31 01 00 00    	jbe    c001758f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001745e:	c1 e6 0c             	shl    esi,0xc
c0017461:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017464:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0017467:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001746b:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0017472:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017475:	01 df                	add    edi,ebx
c0017477:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001747a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001747e:	0f 84 08 01 00 00    	je     c001758c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0017484:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001748a:	76 05                	jbe    c0017491 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001748c:	bf 00 10 00 00       	mov    edi,0x1000
c0017491:	83 ec 0c             	sub    esp,0xc
c0017494:	31 d2                	xor    edx,edx
c0017496:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001749d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001749f:	8d 44 24 28          	lea    eax,[esp+0x28]
c00174a3:	50                   	push   eax
c00174a4:	8d 74 24 30          	lea    esi,[esp+0x30]
c00174a8:	56                   	push   esi
c00174a9:	52                   	push   edx
c00174aa:	57                   	push   edi
c00174ab:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00174b2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00174b5:	83 c4 20             	add    esp,0x20
c00174b8:	85 c0                	test   eax,eax
c00174ba:	74 0a                	je     c00174c6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c00174bc:	53                   	push   ebx
c00174bd:	53                   	push   ebx
c00174be:	50                   	push   eax
c00174bf:	68 f5 68 02 c0       	push   0xc00268f5
c00174c4:	eb 0f                	jmp    c00174d5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c00174c6:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00174ca:	74 20                	je     c00174ec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c00174cc:	51                   	push   ecx
c00174cd:	51                   	push   ecx
c00174ce:	6a 00                	push   0x0
c00174d0:	68 20 69 02 c0       	push   0xc0026920
c00174d5:	e8 6d 5b ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00174da:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00174dd:	e8 6f 4b ff ff       	call   c000c051 <Virt::freeKernelVirtualPages(unsigned long)>
c00174e2:	83 c4 10             	add    esp,0x10
c00174e5:	31 c0                	xor    eax,eax
c00174e7:	e9 68 01 00 00       	jmp    c0017654 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c00174ec:	fa                   	cli    
c00174ed:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c00174f3:	e8 1a 2f ff ff       	call   c000a412 <Phys::allocatePage()>
c00174f8:	6a 07                	push   0x7
c00174fa:	89 c7                	mov    edi,eax
c00174fc:	55                   	push   ebp
c00174fd:	50                   	push   eax
c00174fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017503:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017506:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001750c:	e8 b7 4e ff ff       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0017511:	83 c4 0c             	add    esp,0xc
c0017514:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001751b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017521:	6a 00                	push   0x0
c0017523:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017528:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001752b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017531:	e8 ec 4c ff ff       	call   c000c222 <VAS::mapOtherVASIn(bool, VAS*)>
c0017536:	58                   	pop    eax
c0017537:	5a                   	pop    edx
c0017538:	68 07 0c 00 00       	push   0xc07
c001753d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017541:	57                   	push   edi
c0017542:	89 ef                	mov    edi,ebp
c0017544:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001754b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017551:	6a 00                	push   0x0
c0017553:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017558:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001755b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017561:	e8 1e 52 ff ff       	call   c000c784 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0017566:	b9 00 10 00 00       	mov    ecx,0x1000
c001756b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001756d:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c0017572:	83 c4 20             	add    esp,0x20
c0017575:	48                   	dec    eax
c0017576:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c001757b:	85 c0                	test   eax,eax
c001757d:	75 01                	jne    c0017580 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001757f:	fb                   	sti    
c0017580:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c0017587:	e9 df fe ff ff       	jmp    c001746b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001758c:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001758f:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c0017597:	0f 86 a9 00 00 00    	jbe    c0017646 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001759d:	fa                   	cli    
c001759e:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c00175a4:	51                   	push   ecx
c00175a5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00175ac:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00175b2:	6a 00                	push   0x0
c00175b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175b9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00175bc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00175c2:	e8 5b 4c ff ff       	call   c000c222 <VAS::mapOtherVASIn(bool, VAS*)>
c00175c7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00175cb:	c1 e6 0c             	shl    esi,0xc
c00175ce:	01 de                	add    esi,ebx
c00175d0:	83 c4 10             	add    esp,0x10
c00175d3:	39 de                	cmp    esi,ebx
c00175d5:	74 61                	je     c0017638 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c00175d7:	e8 36 2e ff ff       	call   c000a412 <Phys::allocatePage()>
c00175dc:	6a 07                	push   0x7
c00175de:	89 c7                	mov    edi,eax
c00175e0:	55                   	push   ebp
c00175e1:	50                   	push   eax
c00175e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175e7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00175ea:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00175f0:	e8 d3 4d ff ff       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00175f5:	58                   	pop    eax
c00175f6:	5a                   	pop    edx
c00175f7:	68 07 0c 00 00       	push   0xc07
c00175fc:	53                   	push   ebx
c00175fd:	81 c3 00 10 00 00    	add    ebx,0x1000
c0017603:	57                   	push   edi
c0017604:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001760b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017611:	6a 00                	push   0x0
c0017613:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017618:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001761b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017621:	e8 5e 51 ff ff       	call   c000c784 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0017626:	83 c4 1c             	add    esp,0x1c
c0017629:	68 00 10 00 00       	push   0x1000
c001762e:	6a 00                	push   0x0
c0017630:	55                   	push   ebp
c0017631:	e8 4e 90 fe ff       	call   c0000684 <memset>
c0017636:	eb 98                	jmp    c00175d0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0017638:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c001763d:	48                   	dec    eax
c001763e:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c0017643:	75 01                	jne    c0017646 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0017645:	fb                   	sti    
c0017646:	83 ec 0c             	sub    esp,0xc
c0017649:	55                   	push   ebp
c001764a:	e8 02 4a ff ff       	call   c000c051 <Virt::freeKernelVirtualPages(unsigned long)>
c001764f:	83 c4 10             	add    esp,0x10
c0017652:	b0 01                	mov    al,0x1
c0017654:	81 c4 2c 10 00 00    	add    esp,0x102c
c001765a:	5b                   	pop    ebx
c001765b:	5e                   	pop    esi
c001765c:	5f                   	pop    edi
c001765d:	5d                   	pop    ebp
c001765e:	c3                   	ret    

c001765f <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001765f:	55                   	push   ebp
c0017660:	57                   	push   edi
c0017661:	56                   	push   esi
c0017662:	53                   	push   ebx
c0017663:	83 ec 48             	sub    esp,0x48
c0017666:	68 14 01 00 00       	push   0x114
c001766b:	e8 eb 26 ff ff       	call   c0009d5b <malloc>
c0017670:	83 c4 0c             	add    esp,0xc
c0017673:	89 c6                	mov    esi,eax
c0017675:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017679:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001767d:	50                   	push   eax
c001767e:	e8 2f 5f ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0017683:	58                   	pop    eax
c0017684:	5a                   	pop    edx
c0017685:	6a 01                	push   0x1
c0017687:	56                   	push   esi
c0017688:	e8 ff 5f ff ff       	call   c000d68c <File::open(FileOpenMode)>
c001768d:	83 c4 10             	add    esp,0x10
c0017690:	85 c0                	test   eax,eax
c0017692:	0f 85 47 01 00 00    	jne    c00177df <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017698:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00176a0:	83 ec 0c             	sub    esp,0xc
c00176a3:	6a 34                	push   0x34
c00176a5:	e8 b1 26 ff ff       	call   c0009d5b <malloc>
c00176aa:	89 c3                	mov    ebx,eax
c00176ac:	58                   	pop    eax
c00176ad:	8b 06                	mov    eax,DWORD PTR [esi]
c00176af:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00176b3:	57                   	push   edi
c00176b4:	53                   	push   ebx
c00176b5:	6a 00                	push   0x0
c00176b7:	6a 34                	push   0x34
c00176b9:	56                   	push   esi
c00176ba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00176bd:	83 c4 20             	add    esp,0x20
c00176c0:	85 c0                	test   eax,eax
c00176c2:	0f 85 17 01 00 00    	jne    c00177df <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00176c8:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00176ce:	0f 85 0b 01 00 00    	jne    c00177df <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00176d4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00176d7:	85 c0                	test   eax,eax
c00176d9:	0f 84 00 01 00 00    	je     c00177df <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00176df:	31 d2                	xor    edx,edx
c00176e1:	55                   	push   ebp
c00176e2:	52                   	push   edx
c00176e3:	50                   	push   eax
c00176e4:	56                   	push   esi
c00176e5:	e8 60 60 ff ff       	call   c000d74a <File::seek(unsigned long long)>
c00176ea:	83 c4 10             	add    esp,0x10
c00176ed:	85 c0                	test   eax,eax
c00176ef:	0f 85 ea 00 00 00    	jne    c00177df <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00176f5:	83 ec 0c             	sub    esp,0xc
c00176f8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00176fb:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00176ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017703:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0017707:	0f af c2             	imul   eax,edx
c001770a:	50                   	push   eax
c001770b:	e8 4b 26 ff ff       	call   c0009d5b <malloc>
c0017710:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017712:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017716:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017719:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001771d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0017721:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0017725:	0f af c2             	imul   eax,edx
c0017728:	99                   	cdq    
c0017729:	52                   	push   edx
c001772a:	50                   	push   eax
c001772b:	56                   	push   esi
c001772c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001772f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0017732:	83 c4 20             	add    esp,0x20
c0017735:	85 c0                	test   eax,eax
c0017737:	0f 84 a2 00 00 00    	je     c00177df <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001773d:	31 d2                	xor    edx,edx
c001773f:	51                   	push   ecx
c0017740:	52                   	push   edx
c0017741:	50                   	push   eax
c0017742:	56                   	push   esi
c0017743:	e8 02 60 ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017748:	83 c4 10             	add    esp,0x10
c001774b:	85 c0                	test   eax,eax
c001774d:	0f 85 8c 00 00 00    	jne    c00177df <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017753:	83 ec 0c             	sub    esp,0xc
c0017756:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001775a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001775e:	31 ed                	xor    ebp,ebp
c0017760:	0f af c2             	imul   eax,edx
c0017763:	50                   	push   eax
c0017764:	e8 f2 25 ff ff       	call   c0009d5b <malloc>
c0017769:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001776b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001776f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017776:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001777a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001777e:	0f af c2             	imul   eax,edx
c0017781:	99                   	cdq    
c0017782:	52                   	push   edx
c0017783:	50                   	push   eax
c0017784:	56                   	push   esi
c0017785:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017788:	83 c4 20             	add    esp,0x20
c001778b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017793:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0017797:	0f 86 80 00 00 00    	jbe    c001781d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001779d:	0f b7 fd             	movzx  edi,bp
c00177a0:	c1 e7 05             	shl    edi,0x5
c00177a3:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00177a7:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00177aa:	75 6b                	jne    c0017817 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00177ac:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00177af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00177b3:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00177b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00177ba:	52                   	push   edx
c00177bb:	31 d2                	xor    edx,edx
c00177bd:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00177c0:	52                   	push   edx
c00177c1:	50                   	push   eax
c00177c2:	56                   	push   esi
c00177c3:	e8 82 5f ff ff       	call   c000d74a <File::seek(unsigned long long)>
c00177c8:	83 c4 10             	add    esp,0x10
c00177cb:	85 c0                	test   eax,eax
c00177cd:	74 17                	je     c00177e6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00177cf:	83 ec 0c             	sub    esp,0xc
c00177d2:	68 4c 69 02 c0       	push   0xc002694c
c00177d7:	e8 6b 58 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00177dc:	83 c4 10             	add    esp,0x10
c00177df:	31 c0                	xor    eax,eax
c00177e1:	e9 87 00 00 00       	jmp    c001786d <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00177e6:	83 ec 0c             	sub    esp,0xc
c00177e9:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00177ec:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00177ef:	50                   	push   eax
c00177f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00177f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00177f8:	56                   	push   esi
c00177f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00177fd:	e8 b3 fb ff ff       	call   c00173b5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0017802:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017806:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001780a:	83 c4 20             	add    esp,0x20
c001780d:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0017811:	73 04                	jae    c0017817 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017813:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017817:	45                   	inc    ebp
c0017818:	e9 76 ff ff ff       	jmp    c0017793 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001781d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0017821:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017825:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017829:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001782f:	83 ec 0c             	sub    esp,0xc
c0017832:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0017838:	25 00 f0 ff ff       	and    eax,0xfffff000
c001783d:	05 00 10 00 00       	add    eax,0x1000
c0017842:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017845:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017849:	e8 1d 25 ff ff       	call   c0009d6b <free>
c001784e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017851:	e8 15 25 ff ff       	call   c0009d6b <free>
c0017856:	58                   	pop    eax
c0017857:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001785b:	e8 0b 25 ff ff       	call   c0009d6b <free>
c0017860:	89 34 24             	mov    DWORD PTR [esp],esi
c0017863:	e8 82 5e ff ff       	call   c000d6ea <File::close()>
c0017868:	83 c4 10             	add    esp,0x10
c001786b:	b0 01                	mov    al,0x1
c001786d:	83 c4 3c             	add    esp,0x3c
c0017870:	5b                   	pop    ebx
c0017871:	5e                   	pop    esi
c0017872:	5f                   	pop    edi
c0017873:	5d                   	pop    ebp
c0017874:	c3                   	ret    

c0017875 <Thr::runtimeReferenceHelper()>:
c0017875:	83 ec 18             	sub    esp,0x18
c0017878:	68 54 69 02 c0       	push   0xc0026954
c001787d:	e8 c5 57 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0017882:	fa                   	cli    
c0017883:	83 c4 10             	add    esp,0x10
c0017886:	eb fe                	jmp    c0017886 <Thr::runtimeReferenceHelper()+0x11>

c0017888 <Thr::getAddressOfKernelSymbol(char const*)>:
c0017888:	57                   	push   edi
c0017889:	56                   	push   esi
c001788a:	53                   	push   ebx
c001788b:	31 db                	xor    ebx,ebx
c001788d:	39 1d e0 9e 02 c0    	cmp    DWORD PTR ds:0xc0029ee0,ebx
c0017893:	7e 3c                	jle    c00178d1 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0017895:	8b 34 9d 60 9e 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd61a0]
c001789c:	31 ff                	xor    edi,edi
c001789e:	39 3c 9d 60 9d 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd62a0],edi
c00178a5:	7e 27                	jle    c00178ce <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00178a7:	50                   	push   eax
c00178a8:	50                   	push   eax
c00178a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00178ad:	8b 06                	mov    eax,DWORD PTR [esi]
c00178af:	03 04 9d e0 9d 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6220]
c00178b6:	50                   	push   eax
c00178b7:	e8 10 8f fe ff       	call   c00007cc <strcmp>
c00178bc:	83 c4 10             	add    esp,0x10
c00178bf:	85 c0                	test   eax,eax
c00178c1:	75 05                	jne    c00178c8 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00178c3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00178c6:	eb 0b                	jmp    c00178d3 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00178c8:	83 c6 10             	add    esi,0x10
c00178cb:	47                   	inc    edi
c00178cc:	eb d0                	jmp    c001789e <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00178ce:	43                   	inc    ebx
c00178cf:	eb bc                	jmp    c001788d <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00178d1:	31 c0                	xor    eax,eax
c00178d3:	5b                   	pop    ebx
c00178d4:	5e                   	pop    esi
c00178d5:	5f                   	pop    edi
c00178d6:	c3                   	ret    

c00178d7 <Thr::loadKernelSymbolTable(char const*)>:
c00178d7:	55                   	push   ebp
c00178d8:	57                   	push   edi
c00178d9:	56                   	push   esi
c00178da:	53                   	push   ebx
c00178db:	83 ec 68             	sub    esp,0x68
c00178de:	8b 35 30 9f 02 c0    	mov    esi,DWORD PTR ds:0xc0029f30
c00178e4:	68 14 01 00 00       	push   0x114
c00178e9:	e8 6d 24 ff ff       	call   c0009d5b <malloc>
c00178ee:	83 c4 0c             	add    esp,0xc
c00178f1:	89 c3                	mov    ebx,eax
c00178f3:	56                   	push   esi
c00178f4:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00178f8:	50                   	push   eax
c00178f9:	e8 b4 5c ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c00178fe:	5e                   	pop    esi
c00178ff:	5f                   	pop    edi
c0017900:	6a 01                	push   0x1
c0017902:	53                   	push   ebx
c0017903:	e8 84 5d ff ff       	call   c000d68c <File::open(FileOpenMode)>
c0017908:	83 c4 10             	add    esp,0x10
c001790b:	85 c0                	test   eax,eax
c001790d:	74 0a                	je     c0017919 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001790f:	83 ec 0c             	sub    esp,0xc
c0017912:	68 76 69 02 c0       	push   0xc0026976
c0017917:	eb 34                	jmp    c001794d <Thr::loadKernelSymbolTable(char const*)+0x76>
c0017919:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017921:	83 ec 0c             	sub    esp,0xc
c0017924:	6a 34                	push   0x34
c0017926:	e8 30 24 ff ff       	call   c0009d5b <malloc>
c001792b:	59                   	pop    ecx
c001792c:	89 c7                	mov    edi,eax
c001792e:	8d 74 24 34          	lea    esi,[esp+0x34]
c0017932:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017934:	56                   	push   esi
c0017935:	57                   	push   edi
c0017936:	6a 00                	push   0x0
c0017938:	6a 34                	push   0x34
c001793a:	53                   	push   ebx
c001793b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001793e:	83 c4 20             	add    esp,0x20
c0017941:	85 c0                	test   eax,eax
c0017943:	74 17                	je     c001795c <Thr::loadKernelSymbolTable(char const*)+0x85>
c0017945:	83 ec 0c             	sub    esp,0xc
c0017948:	68 8d 69 02 c0       	push   0xc002698d
c001794d:	e8 d7 d7 ff ff       	call   c0015129 <Krnl::panic(char const*)>
c0017952:	83 c4 10             	add    esp,0x10
c0017955:	31 c0                	xor    eax,eax
c0017957:	e9 31 02 00 00       	jmp    c0017b8d <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001795c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017962:	75 e1                	jne    c0017945 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017964:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017967:	85 c0                	test   eax,eax
c0017969:	74 da                	je     c0017945 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001796b:	52                   	push   edx
c001796c:	31 d2                	xor    edx,edx
c001796e:	52                   	push   edx
c001796f:	50                   	push   eax
c0017970:	53                   	push   ebx
c0017971:	e8 d4 5d ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017976:	83 c4 10             	add    esp,0x10
c0017979:	85 c0                	test   eax,eax
c001797b:	75 c8                	jne    c0017945 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001797d:	83 ec 0c             	sub    esp,0xc
c0017980:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017984:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017988:	31 ed                	xor    ebp,ebp
c001798a:	0f af c2             	imul   eax,edx
c001798d:	50                   	push   eax
c001798e:	e8 c8 23 ff ff       	call   c0009d5b <malloc>
c0017993:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017995:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017999:	89 34 24             	mov    DWORD PTR [esp],esi
c001799c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179a0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00179a4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00179a8:	0f af c2             	imul   eax,edx
c00179ab:	99                   	cdq    
c00179ac:	52                   	push   edx
c00179ad:	50                   	push   eax
c00179ae:	53                   	push   ebx
c00179af:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00179b2:	83 c4 20             	add    esp,0x20
c00179b5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00179bd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00179c5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00179cd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00179d5:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00179d9:	0f 86 aa 00 00 00    	jbe    c0017a89 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00179df:	0f b7 f5             	movzx  esi,bp
c00179e2:	6b f6 28             	imul   esi,esi,0x28
c00179e5:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00179e9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00179ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00179f0:	50                   	push   eax
c00179f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00179f5:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00179f9:	8b 16                	mov    edx,DWORD PTR [esi]
c00179fb:	6b c0 28             	imul   eax,eax,0x28
c00179fe:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0017a02:	89 d0                	mov    eax,edx
c0017a04:	31 d2                	xor    edx,edx
c0017a06:	52                   	push   edx
c0017a07:	50                   	push   eax
c0017a08:	53                   	push   ebx
c0017a09:	e8 3c 5d ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017a0e:	83 c4 0c             	add    esp,0xc
c0017a11:	6a 20                	push   0x20
c0017a13:	6a 00                	push   0x0
c0017a15:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017a19:	52                   	push   edx
c0017a1a:	e8 65 8c fe ff       	call   c0000684 <memset>
c0017a1f:	58                   	pop    eax
c0017a20:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017a22:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0017a26:	51                   	push   ecx
c0017a27:	8d 54 24 40          	lea    edx,[esp+0x40]
c0017a2b:	52                   	push   edx
c0017a2c:	6a 00                	push   0x0
c0017a2e:	6a 1f                	push   0x1f
c0017a30:	53                   	push   ebx
c0017a31:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017a34:	83 c4 18             	add    esp,0x18
c0017a37:	68 a4 69 02 c0       	push   0xc00269a4
c0017a3c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017a40:	52                   	push   edx
c0017a41:	e8 86 8d fe ff       	call   c00007cc <strcmp>
c0017a46:	83 c4 10             	add    esp,0x10
c0017a49:	85 c0                	test   eax,eax
c0017a4b:	75 0f                	jne    c0017a5c <Thr::loadKernelSymbolTable(char const*)+0x185>
c0017a4d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017a50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a5c:	50                   	push   eax
c0017a5d:	50                   	push   eax
c0017a5e:	68 ac 69 02 c0       	push   0xc00269ac
c0017a63:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017a67:	50                   	push   eax
c0017a68:	e8 5f 8d fe ff       	call   c00007cc <strcmp>
c0017a6d:	83 c4 10             	add    esp,0x10
c0017a70:	85 c0                	test   eax,eax
c0017a72:	75 0f                	jne    c0017a83 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0017a74:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017a77:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a7b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a7f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a83:	45                   	inc    ebp
c0017a84:	e9 4c ff ff ff       	jmp    c00179d5 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0017a89:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017a8e:	75 10                	jne    c0017aa0 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0017a90:	83 ec 0c             	sub    esp,0xc
c0017a93:	68 b4 69 02 c0       	push   0xc00269b4
c0017a98:	e8 8c d6 ff ff       	call   c0015129 <Krnl::panic(char const*)>
c0017a9d:	83 c4 10             	add    esp,0x10
c0017aa0:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0017aa5:	75 10                	jne    c0017ab7 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0017aa7:	83 ec 0c             	sub    esp,0xc
c0017aaa:	68 b4 69 02 c0       	push   0xc00269b4
c0017aaf:	e8 75 d6 ff ff       	call   c0015129 <Krnl::panic(char const*)>
c0017ab4:	83 c4 10             	add    esp,0x10
c0017ab7:	31 d2                	xor    edx,edx
c0017ab9:	50                   	push   eax
c0017aba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017abe:	52                   	push   edx
c0017abf:	50                   	push   eax
c0017ac0:	53                   	push   ebx
c0017ac1:	e8 84 5c ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017ac6:	5a                   	pop    edx
c0017ac7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017acb:	e8 8b 22 ff ff       	call   c0009d5b <malloc>
c0017ad0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017ad4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017ad8:	31 c9                	xor    ecx,ecx
c0017ada:	5e                   	pop    esi
c0017adb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017add:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017ae1:	55                   	push   ebp
c0017ae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ae6:	51                   	push   ecx
c0017ae7:	52                   	push   edx
c0017ae8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017aec:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0017af0:	53                   	push   ebx
c0017af1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017af4:	83 c4 14             	add    esp,0x14
c0017af7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017afb:	e8 5b 22 ff ff       	call   c0009d5b <malloc>
c0017b00:	89 c6                	mov    esi,eax
c0017b02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017b04:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017b07:	56                   	push   esi
c0017b08:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017b0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017b10:	51                   	push   ecx
c0017b11:	52                   	push   edx
c0017b12:	53                   	push   ebx
c0017b13:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017b16:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017b1a:	8b 15 e0 9e 02 c0    	mov    edx,DWORD PTR ds:0xc0029ee0
c0017b20:	83 c4 1c             	add    esp,0x1c
c0017b23:	c1 e8 04             	shr    eax,0x4
c0017b26:	89 04 95 60 9d 02 c0 	mov    DWORD PTR [edx*4-0x3ffd62a0],eax
c0017b2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b31:	31 d2                	xor    edx,edx
c0017b33:	52                   	push   edx
c0017b34:	50                   	push   eax
c0017b35:	53                   	push   ebx
c0017b36:	e8 0f 5c ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017b3b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017b3d:	31 d2                	xor    edx,edx
c0017b3f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017b42:	56                   	push   esi
c0017b43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b47:	52                   	push   edx
c0017b48:	50                   	push   eax
c0017b49:	53                   	push   ebx
c0017b4a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017b4d:	83 c4 14             	add    esp,0x14
c0017b50:	53                   	push   ebx
c0017b51:	e8 94 5b ff ff       	call   c000d6ea <File::close()>
c0017b56:	5d                   	pop    ebp
c0017b57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b5b:	e8 0b 22 ff ff       	call   c0009d6b <free>
c0017b60:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017b63:	e8 03 22 ff ff       	call   c0009d6b <free>
c0017b68:	a1 e0 9e 02 c0       	mov    eax,ds:0xc0029ee0
c0017b6d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017b71:	8d 50 01             	lea    edx,[eax+0x1]
c0017b74:	89 0c 85 60 9e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd61a0],ecx
c0017b7b:	89 34 85 e0 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6220],esi
c0017b82:	89 15 e0 9e 02 c0    	mov    DWORD PTR ds:0xc0029ee0,edx
c0017b88:	83 c4 10             	add    esp,0x10
c0017b8b:	b0 01                	mov    al,0x1
c0017b8d:	83 c4 5c             	add    esp,0x5c
c0017b90:	5b                   	pop    ebx
c0017b91:	5e                   	pop    esi
c0017b92:	5f                   	pop    edi
c0017b93:	5d                   	pop    ebp
c0017b94:	c3                   	ret    

c0017b95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017b95:	55                   	push   ebp
c0017b96:	57                   	push   edi
c0017b97:	56                   	push   esi
c0017b98:	53                   	push   ebx
c0017b99:	81 ec 68 03 00 00    	sub    esp,0x368
c0017b9f:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017ba6:	8b 1d 30 9f 02 c0    	mov    ebx,DWORD PTR ds:0xc0029f30
c0017bac:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017bb0:	68 14 01 00 00       	push   0x114
c0017bb5:	e8 a1 21 ff ff       	call   c0009d5b <malloc>
c0017bba:	83 c4 0c             	add    esp,0xc
c0017bbd:	89 c5                	mov    ebp,eax
c0017bbf:	53                   	push   ebx
c0017bc0:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017bc7:	50                   	push   eax
c0017bc8:	e8 e5 59 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0017bcd:	5e                   	pop    esi
c0017bce:	5f                   	pop    edi
c0017bcf:	6a 01                	push   0x1
c0017bd1:	55                   	push   ebp
c0017bd2:	e8 b5 5a ff ff       	call   c000d68c <File::open(FileOpenMode)>
c0017bd7:	83 c4 10             	add    esp,0x10
c0017bda:	85 c0                	test   eax,eax
c0017bdc:	0f 85 a7 06 00 00    	jne    c0018289 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017be2:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017bea:	83 ec 0c             	sub    esp,0xc
c0017bed:	6a 34                	push   0x34
c0017bef:	e8 67 21 ff ff       	call   c0009d5b <malloc>
c0017bf4:	5b                   	pop    ebx
c0017bf5:	89 c7                	mov    edi,eax
c0017bf7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017bfb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017bfe:	53                   	push   ebx
c0017bff:	57                   	push   edi
c0017c00:	6a 00                	push   0x0
c0017c02:	6a 34                	push   0x34
c0017c04:	55                   	push   ebp
c0017c05:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017c08:	83 c4 20             	add    esp,0x20
c0017c0b:	85 c0                	test   eax,eax
c0017c0d:	0f 85 76 06 00 00    	jne    c0018289 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017c13:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017c19:	0f 85 6a 06 00 00    	jne    c0018289 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017c1f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017c22:	85 c0                	test   eax,eax
c0017c24:	0f 84 5f 06 00 00    	je     c0018289 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017c2a:	31 d2                	xor    edx,edx
c0017c2c:	51                   	push   ecx
c0017c2d:	52                   	push   edx
c0017c2e:	50                   	push   eax
c0017c2f:	55                   	push   ebp
c0017c30:	e8 15 5b ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017c35:	83 c4 10             	add    esp,0x10
c0017c38:	85 c0                	test   eax,eax
c0017c3a:	0f 85 49 06 00 00    	jne    c0018289 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017c40:	83 ec 0c             	sub    esp,0xc
c0017c43:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0017c46:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017c4a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c4e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017c52:	0f af c2             	imul   eax,edx
c0017c55:	50                   	push   eax
c0017c56:	e8 00 21 ff ff       	call   c0009d5b <malloc>
c0017c5b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017c5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017c62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017c65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c69:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017c6d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017c71:	0f af c2             	imul   eax,edx
c0017c74:	99                   	cdq    
c0017c75:	52                   	push   edx
c0017c76:	50                   	push   eax
c0017c77:	55                   	push   ebp
c0017c78:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017c7b:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0017c7e:	83 c4 20             	add    esp,0x20
c0017c81:	85 c0                	test   eax,eax
c0017c83:	0f 84 00 06 00 00    	je     c0018289 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017c89:	52                   	push   edx
c0017c8a:	31 d2                	xor    edx,edx
c0017c8c:	52                   	push   edx
c0017c8d:	50                   	push   eax
c0017c8e:	55                   	push   ebp
c0017c8f:	e8 b6 5a ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017c94:	83 c4 10             	add    esp,0x10
c0017c97:	85 c0                	test   eax,eax
c0017c99:	0f 85 ea 05 00 00    	jne    c0018289 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017c9f:	83 ec 0c             	sub    esp,0xc
c0017ca2:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0017ca6:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017caa:	31 f6                	xor    esi,esi
c0017cac:	0f af c2             	imul   eax,edx
c0017caf:	50                   	push   eax
c0017cb0:	e8 a6 20 ff ff       	call   c0009d5b <malloc>
c0017cb5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017cb8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017cbc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017cbf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017cc3:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0017cc7:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017ccb:	0f af c2             	imul   eax,edx
c0017cce:	99                   	cdq    
c0017ccf:	52                   	push   edx
c0017cd0:	50                   	push   eax
c0017cd1:	55                   	push   ebp
c0017cd2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017cd5:	83 c4 20             	add    esp,0x20
c0017cd8:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0017cdc:	0f 86 8a 00 00 00    	jbe    c0017d6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0017ce2:	0f b7 de             	movzx  ebx,si
c0017ce5:	c1 e3 05             	shl    ebx,0x5
c0017ce8:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0017cec:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017cef:	75 75                	jne    c0017d66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0017cf1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017cf4:	31 d2                	xor    edx,edx
c0017cf6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017cfa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017cfd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d01:	50                   	push   eax
c0017d02:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017d05:	52                   	push   edx
c0017d06:	50                   	push   eax
c0017d07:	55                   	push   ebp
c0017d08:	e8 3d 5a ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017d0d:	83 c4 10             	add    esp,0x10
c0017d10:	85 c0                	test   eax,eax
c0017d12:	0f 85 71 05 00 00    	jne    c0018289 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017d18:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0017d1f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017d22:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0017d26:	31 d2                	xor    edx,edx
c0017d28:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0017d2c:	83 ec 0c             	sub    esp,0xc
c0017d2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d33:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017d3a:	50                   	push   eax
c0017d3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017d3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d43:	52                   	push   edx
c0017d44:	50                   	push   eax
c0017d45:	55                   	push   ebp
c0017d46:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017d49:	83 c4 1c             	add    esp,0x1c
c0017d4c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017d4f:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017d52:	50                   	push   eax
c0017d53:	6a 00                	push   0x0
c0017d55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d59:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017d5d:	50                   	push   eax
c0017d5e:	e8 21 89 fe ff       	call   c0000684 <memset>
c0017d63:	83 c4 10             	add    esp,0x10
c0017d66:	46                   	inc    esi
c0017d67:	e9 6c ff ff ff       	jmp    c0017cd8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0017d6c:	53                   	push   ebx
c0017d6d:	31 db                	xor    ebx,ebx
c0017d6f:	68 00 01 00 00       	push   0x100
c0017d74:	6a 00                	push   0x0
c0017d76:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017d7a:	50                   	push   eax
c0017d7b:	e8 04 89 fe ff       	call   c0000684 <memset>
c0017d80:	83 c4 0c             	add    esp,0xc
c0017d83:	68 00 01 00 00       	push   0x100
c0017d88:	6a 00                	push   0x0
c0017d8a:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017d91:	50                   	push   eax
c0017d92:	e8 ed 88 fe ff       	call   c0000684 <memset>
c0017d97:	83 c4 10             	add    esp,0x10
c0017d9a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017da2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017daa:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0017db2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017dba:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017dc2:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0017dc6:	0f 86 30 01 00 00    	jbe    c0017efc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0017dcc:	0f b7 f3             	movzx  esi,bx
c0017dcf:	6b f6 28             	imul   esi,esi,0x28
c0017dd2:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0017dd6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017dd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ddd:	52                   	push   edx
c0017dde:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017de2:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0017de6:	8b 06                	mov    eax,DWORD PTR [esi]
c0017de8:	6b d2 28             	imul   edx,edx,0x28
c0017deb:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017def:	31 d2                	xor    edx,edx
c0017df1:	52                   	push   edx
c0017df2:	50                   	push   eax
c0017df3:	55                   	push   ebp
c0017df4:	e8 51 59 ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017df9:	83 c4 0c             	add    esp,0xc
c0017dfc:	6a 20                	push   0x20
c0017dfe:	6a 00                	push   0x0
c0017e00:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017e07:	51                   	push   ecx
c0017e08:	e8 77 88 fe ff       	call   c0000684 <memset>
c0017e0d:	59                   	pop    ecx
c0017e0e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017e11:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017e15:	52                   	push   edx
c0017e16:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017e1d:	51                   	push   ecx
c0017e1e:	6a 00                	push   0x0
c0017e20:	6a 1f                	push   0x1f
c0017e22:	55                   	push   ebp
c0017e23:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017e26:	83 c4 1c             	add    esp,0x1c
c0017e29:	6a 09                	push   0x9
c0017e2b:	68 ce 69 02 c0       	push   0xc00269ce
c0017e30:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017e37:	51                   	push   ecx
c0017e38:	e8 43 87 fe ff       	call   c0000580 <memcmp>
c0017e3d:	83 c4 10             	add    esp,0x10
c0017e40:	85 c0                	test   eax,eax
c0017e42:	75 21                	jne    c0017e65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0017e44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017e4c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017e50:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017e54:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017e57:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017e5e:	89 d0                	mov    eax,edx
c0017e60:	40                   	inc    eax
c0017e61:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e65:	50                   	push   eax
c0017e66:	6a 09                	push   0x9
c0017e68:	68 d8 69 02 c0       	push   0xc00269d8
c0017e6d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017e74:	50                   	push   eax
c0017e75:	e8 06 87 fe ff       	call   c0000580 <memcmp>
c0017e7a:	83 c4 10             	add    esp,0x10
c0017e7d:	85 c0                	test   eax,eax
c0017e7f:	75 21                	jne    c0017ea2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0017e81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017e89:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017e8d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017e91:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017e94:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017e9b:	89 d0                	mov    eax,edx
c0017e9d:	40                   	inc    eax
c0017e9e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ea2:	50                   	push   eax
c0017ea3:	50                   	push   eax
c0017ea4:	68 a4 69 02 c0       	push   0xc00269a4
c0017ea9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017eb0:	50                   	push   eax
c0017eb1:	e8 16 89 fe ff       	call   c00007cc <strcmp>
c0017eb6:	83 c4 10             	add    esp,0x10
c0017eb9:	85 c0                	test   eax,eax
c0017ebb:	75 0f                	jne    c0017ecc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0017ebd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017ec0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017ec4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ec8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017ecc:	50                   	push   eax
c0017ecd:	50                   	push   eax
c0017ece:	68 ac 69 02 c0       	push   0xc00269ac
c0017ed3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017eda:	50                   	push   eax
c0017edb:	e8 ec 88 fe ff       	call   c00007cc <strcmp>
c0017ee0:	83 c4 10             	add    esp,0x10
c0017ee3:	85 c0                	test   eax,eax
c0017ee5:	75 0f                	jne    c0017ef6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0017ee7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017eea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017eee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ef2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017ef6:	43                   	inc    ebx
c0017ef7:	e9 c6 fe ff ff       	jmp    c0017dc2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0017efc:	31 d2                	xor    edx,edx
c0017efe:	50                   	push   eax
c0017eff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f03:	52                   	push   edx
c0017f04:	50                   	push   eax
c0017f05:	55                   	push   ebp
c0017f06:	e8 3f 58 ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017f0b:	58                   	pop    eax
c0017f0c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017f10:	e8 46 1e ff ff       	call   c0009d5b <malloc>
c0017f15:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017f18:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017f1c:	31 d2                	xor    edx,edx
c0017f1e:	58                   	pop    eax
c0017f1f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017f23:	53                   	push   ebx
c0017f24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017f28:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f2c:	52                   	push   edx
c0017f2d:	50                   	push   eax
c0017f2e:	55                   	push   ebp
c0017f2f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017f32:	83 c4 14             	add    esp,0x14
c0017f35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f39:	e8 1d 1e ff ff       	call   c0009d5b <malloc>
c0017f3e:	31 d2                	xor    edx,edx
c0017f40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017f44:	83 c4 0c             	add    esp,0xc
c0017f47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f4b:	52                   	push   edx
c0017f4c:	50                   	push   eax
c0017f4d:	55                   	push   ebp
c0017f4e:	e8 f7 57 ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017f53:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017f56:	31 d2                	xor    edx,edx
c0017f58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017f5b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017f5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017f63:	52                   	push   edx
c0017f64:	50                   	push   eax
c0017f65:	55                   	push   ebp
c0017f66:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017f69:	83 c4 20             	add    esp,0x20
c0017f6c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017f74:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017f78:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0017f7c:	0f 84 0b 03 00 00    	je     c001828d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0017f82:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0017f89:	31 d2                	xor    edx,edx
c0017f8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017f8f:	c1 e8 03             	shr    eax,0x3
c0017f92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017f96:	51                   	push   ecx
c0017f97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017f9b:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017f9f:	52                   	push   edx
c0017fa0:	50                   	push   eax
c0017fa1:	55                   	push   ebp
c0017fa2:	e8 a3 57 ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017fa7:	5b                   	pop    ebx
c0017fa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fac:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0017fb3:	e8 a3 1d ff ff       	call   c0009d5b <malloc>
c0017fb8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017fbb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017fbf:	31 d2                	xor    edx,edx
c0017fc1:	5e                   	pop    esi
c0017fc2:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017fc6:	50                   	push   eax
c0017fc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017fcb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fcf:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0017fd6:	52                   	push   edx
c0017fd7:	50                   	push   eax
c0017fd8:	55                   	push   ebp
c0017fd9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017fdc:	83 c4 20             	add    esp,0x20
c0017fdf:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017fe7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0017feb:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0017fef:	0f 8d 7c 02 00 00    	jge    c0018271 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0017ff5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017ff9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ffd:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0018002:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0018005:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018009:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001800d:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0018011:	89 d8                	mov    eax,ebx
c0018013:	c1 e8 08             	shr    eax,0x8
c0018016:	89 c6                	mov    esi,eax
c0018018:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001801c:	c1 e6 04             	shl    esi,0x4
c001801f:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0018023:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0018026:	85 d2                	test   edx,edx
c0018028:	0f 85 bf 00 00 00    	jne    c00180ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001802e:	83 ec 0c             	sub    esp,0xc
c0018031:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018035:	03 06                	add    eax,DWORD PTR [esi]
c0018037:	50                   	push   eax
c0018038:	e8 4b f8 ff ff       	call   c0017888 <Thr::getAddressOfKernelSymbol(char const*)>
c001803d:	83 c4 10             	add    esp,0x10
c0018040:	89 c2                	mov    edx,eax
c0018042:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0018047:	85 c0                	test   eax,eax
c0018049:	0f 85 9e 00 00 00    	jne    c00180ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001804f:	83 ec 0c             	sub    esp,0xc
c0018052:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018056:	03 06                	add    eax,DWORD PTR [esi]
c0018058:	50                   	push   eax
c0018059:	e8 b2 08 ff ff       	call   c0008910 <Krnl::resolveCompatibilitySymbol(char*)>
c001805e:	83 c4 10             	add    esp,0x10
c0018061:	89 c2                	mov    edx,eax
c0018063:	85 c0                	test   eax,eax
c0018065:	0f 85 82 00 00 00    	jne    c00180ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001806b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001806f:	50                   	push   eax
c0018070:	50                   	push   eax
c0018071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018075:	03 06                	add    eax,DWORD PTR [esi]
c0018077:	50                   	push   eax
c0018078:	68 e2 69 02 c0       	push   0xc00269e2
c001807d:	e8 c5 4f ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0018082:	58                   	pop    eax
c0018083:	5a                   	pop    edx
c0018084:	68 fc 69 02 c0       	push   0xc00269fc
c0018089:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0018090:	50                   	push   eax
c0018091:	e8 aa 86 fe ff       	call   c0000740 <strcpy>
c0018096:	59                   	pop    ecx
c0018097:	58                   	pop    eax
c0018098:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001809c:	03 06                	add    eax,DWORD PTR [esi]
c001809e:	50                   	push   eax
c001809f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00180a6:	50                   	push   eax
c00180a7:	e8 d4 87 fe ff       	call   c0000880 <strcat>
c00180ac:	58                   	pop    eax
c00180ad:	5a                   	pop    edx
c00180ae:	68 92 6a 02 c0       	push   0xc0026a92
c00180b3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00180ba:	50                   	push   eax
c00180bb:	e8 c0 87 fe ff       	call   c0000880 <strcat>
c00180c0:	83 c4 10             	add    esp,0x10
c00180c3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00180c8:	0f 84 5d 01 00 00    	je     c001822b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00180ce:	83 ec 0c             	sub    esp,0xc
c00180d1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00180d8:	50                   	push   eax
c00180d9:	e8 4b d0 ff ff       	call   c0015129 <Krnl::panic(char const*)>
c00180de:	83 c4 10             	add    esp,0x10
c00180e1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00180e5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00180e9:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00180ed:	80 fb 01             	cmp    bl,0x1
c00180f0:	0f 85 88 00 00 00    	jne    c001817e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c00180f6:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00180fd:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018101:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0018105:	01 ce                	add    esi,ecx
c0018107:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001810d:	0f 94 c0             	sete   al
c0018110:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0018116:	0f 94 c3             	sete   bl
c0018119:	09 c3                	or     ebx,eax
c001811b:	8b 06                	mov    eax,DWORD PTR [esi]
c001811d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0018122:	74 41                	je     c0018165 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0018124:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018127:	84 db                	test   bl,bl
c0018129:	75 15                	jne    c0018140 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001812b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001812f:	66 83 f8 0c          	cmp    ax,0xc
c0018133:	76 05                	jbe    c001813a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0018135:	b8 0c 00 00 00       	mov    eax,0xc
c001813a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001813e:	76 37                	jbe    c0018177 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0018140:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0018144:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018149:	0f 84 dc 00 00 00    	je     c001822b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001814f:	83 ec 0c             	sub    esp,0xc
c0018152:	68 13 6a 02 c0       	push   0xc0026a13
c0018157:	e8 cd cf ff ff       	call   c0015129 <Krnl::panic(char const*)>
c001815c:	83 c4 10             	add    esp,0x10
c001815f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0018163:	eb 12                	jmp    c0018177 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0018165:	01 c1                	add    ecx,eax
c0018167:	84 db                	test   bl,bl
c0018169:	75 0c                	jne    c0018177 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001816b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001816f:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0018173:	77 02                	ja     c0018177 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0018175:	01 d1                	add    ecx,edx
c0018177:	89 0e                	mov    DWORD PTR [esi],ecx
c0018179:	e9 ea 00 00 00       	jmp    c0018268 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001817e:	80 fb 02             	cmp    bl,0x2
c0018181:	75 7c                	jne    c00181ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0018183:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001818a:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001818e:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0018192:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0018198:	74 20                	je     c00181ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001819a:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00181a0:	74 18                	je     c00181ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00181a2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00181a6:	b9 0a 00 00 00       	mov    ecx,0xa
c00181ab:	66 83 f8 0e          	cmp    ax,0xe
c00181af:	77 03                	ja     c00181b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c00181b1:	8d 48 fc             	lea    ecx,[eax-0x4]
c00181b4:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c00181b8:	76 1f                	jbe    c00181d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c00181ba:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00181be:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00181c3:	74 66                	je     c001822b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00181c5:	83 ec 0c             	sub    esp,0xc
c00181c8:	68 2f 6a 02 c0       	push   0xc0026a2f
c00181cd:	e8 57 cf ff ff       	call   c0015129 <Krnl::panic(char const*)>
c00181d2:	83 c4 10             	add    esp,0x10
c00181d5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00181d9:	8b 06                	mov    eax,DWORD PTR [esi]
c00181db:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00181e0:	74 13                	je     c00181f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c00181e2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00181e6:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00181ed:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c00181f1:	01 c8                	add    eax,ecx
c00181f3:	eb 04                	jmp    c00181f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c00181f5:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00181f9:	01 c2                	add    edx,eax
c00181fb:	89 16                	mov    DWORD PTR [esi],edx
c00181fd:	eb 69                	jmp    c0018268 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00181ff:	0f b6 db             	movzx  ebx,bl
c0018202:	50                   	push   eax
c0018203:	50                   	push   eax
c0018204:	53                   	push   ebx
c0018205:	68 4b 6a 02 c0       	push   0xc0026a4b
c001820a:	e8 38 4e ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001820f:	83 c4 10             	add    esp,0x10
c0018212:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018217:	74 12                	je     c001822b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0018219:	83 ec 0c             	sub    esp,0xc
c001821c:	68 56 6a 02 c0       	push   0xc0026a56
c0018221:	e8 03 cf ff ff       	call   c0015129 <Krnl::panic(char const*)>
c0018226:	83 c4 10             	add    esp,0x10
c0018229:	eb 3d                	jmp    c0018268 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001822b:	83 ec 0c             	sub    esp,0xc
c001822e:	55                   	push   ebp
c001822f:	e8 b6 54 ff ff       	call   c000d6ea <File::close()>
c0018234:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018237:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001823a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001823d:	59                   	pop    ecx
c001823e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018242:	e8 24 1b ff ff       	call   c0009d6b <free>
c0018247:	5b                   	pop    ebx
c0018248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001824c:	e8 1a 1b ff ff       	call   c0009d6b <free>
c0018251:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018254:	e8 12 1b ff ff       	call   c0009d6b <free>
c0018259:	5e                   	pop    esi
c001825a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001825e:	e8 08 1b ff ff       	call   c0009d6b <free>
c0018263:	83 c4 10             	add    esp,0x10
c0018266:	eb 21                	jmp    c0018289 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0018268:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001826c:	e9 76 fd ff ff       	jmp    c0017fe7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0018271:	83 ec 0c             	sub    esp,0xc
c0018274:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018278:	e8 ee 1a ff ff       	call   c0009d6b <free>
c001827d:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0018281:	83 c4 10             	add    esp,0x10
c0018284:	e9 eb fc ff ff       	jmp    c0017f74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0018289:	31 c0                	xor    eax,eax
c001828b:	eb 33                	jmp    c00182c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001828d:	83 ec 0c             	sub    esp,0xc
c0018290:	55                   	push   ebp
c0018291:	e8 54 54 ff ff       	call   c000d6ea <File::close()>
c0018296:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018299:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001829c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001829f:	58                   	pop    eax
c00182a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00182a4:	e8 c2 1a ff ff       	call   c0009d6b <free>
c00182a9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00182ac:	e8 ba 1a ff ff       	call   c0009d6b <free>
c00182b1:	5a                   	pop    edx
c00182b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00182b6:	e8 b0 1a ff ff       	call   c0009d6b <free>
c00182bb:	83 c4 10             	add    esp,0x10
c00182be:	b0 01                	mov    al,0x1
c00182c0:	81 c4 5c 03 00 00    	add    esp,0x35c
c00182c6:	5b                   	pop    ebx
c00182c7:	5e                   	pop    esi
c00182c8:	5f                   	pop    edi
c00182c9:	5d                   	pop    ebp
c00182ca:	c3                   	ret    

c00182cb <Thr::getDriverBaseFromAddress(unsigned long)>:
c00182cb:	56                   	push   esi
c00182cc:	31 d2                	xor    edx,edx
c00182ce:	53                   	push   ebx
c00182cf:	8b 1d 40 97 02 c0    	mov    ebx,DWORD PTR ds:0xc0029740
c00182d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00182d9:	39 d3                	cmp    ebx,edx
c00182db:	7e 1b                	jle    c00182f8 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00182dd:	8b 04 95 60 99 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd66a0]
c00182e4:	39 c8                	cmp    eax,ecx
c00182e6:	77 0d                	ja     c00182f5 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00182e8:	8b 34 95 60 97 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd68a0]
c00182ef:	01 c6                	add    esi,eax
c00182f1:	39 ce                	cmp    esi,ecx
c00182f3:	77 05                	ja     c00182fa <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00182f5:	42                   	inc    edx
c00182f6:	eb e1                	jmp    c00182d9 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00182f8:	31 c0                	xor    eax,eax
c00182fa:	5b                   	pop    ebx
c00182fb:	5e                   	pop    esi
c00182fc:	c3                   	ret    

c00182fd <Thr::getDriverNameFromAddress(unsigned long)>:
c00182fd:	53                   	push   ebx
c00182fe:	31 c0                	xor    eax,eax
c0018300:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018304:	8b 1d 40 97 02 c0    	mov    ebx,DWORD PTR ds:0xc0029740
c001830a:	39 c3                	cmp    ebx,eax
c001830c:	7e 22                	jle    c0018330 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001830e:	8b 14 85 60 99 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd66a0]
c0018315:	39 ca                	cmp    edx,ecx
c0018317:	77 14                	ja     c001832d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018319:	03 14 85 60 97 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd68a0]
c0018320:	39 ca                	cmp    edx,ecx
c0018322:	76 09                	jbe    c001832d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018324:	8b 04 85 60 9b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd64a0]
c001832b:	eb 05                	jmp    c0018332 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001832d:	40                   	inc    eax
c001832e:	eb da                	jmp    c001830a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0018330:	31 c0                	xor    eax,eax
c0018332:	5b                   	pop    ebx
c0018333:	c3                   	ret    

c0018334 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0018334:	53                   	push   ebx
c0018335:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018339:	53                   	push   ebx
c001833a:	e8 8c ff ff ff       	call   c00182cb <Thr::getDriverBaseFromAddress(unsigned long)>
c001833f:	5a                   	pop    edx
c0018340:	31 d2                	xor    edx,edx
c0018342:	85 c0                	test   eax,eax
c0018344:	74 04                	je     c001834a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0018346:	89 da                	mov    edx,ebx
c0018348:	29 c2                	sub    edx,eax
c001834a:	89 d0                	mov    eax,edx
c001834c:	5b                   	pop    ebx
c001834d:	c3                   	ret    

c001834e <Thr::loadDLL(char const*, bool)>:
c001834e:	55                   	push   ebp
c001834f:	57                   	push   edi
c0018350:	56                   	push   esi
c0018351:	53                   	push   ebx
c0018352:	81 ec 34 01 00 00    	sub    esp,0x134
c0018358:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001835f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0018366:	56                   	push   esi
c0018367:	68 6e 6a 02 c0       	push   0xc0026a6e
c001836c:	e8 d6 4c ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0018371:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018378:	e8 de 19 ff ff       	call   c0009d5b <malloc>
c001837d:	83 c4 0c             	add    esp,0xc
c0018380:	89 c3                	mov    ebx,eax
c0018382:	ff 35 30 9f 02 c0    	push   DWORD PTR ds:0xc0029f30
c0018388:	56                   	push   esi
c0018389:	50                   	push   eax
c001838a:	e8 23 52 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c001838f:	83 c4 10             	add    esp,0x10
c0018392:	85 db                	test   ebx,ebx
c0018394:	75 3c                	jne    c00183d2 <Thr::loadDLL(char const*, bool)+0x84>
c0018396:	89 f8                	mov    eax,edi
c0018398:	84 c0                	test   al,al
c001839a:	0f 84 d2 01 00 00    	je     c0018572 <Thr::loadDLL(char const*, bool)+0x224>
c00183a0:	55                   	push   ebp
c00183a1:	55                   	push   ebp
c00183a2:	68 7f 6a 02 c0       	push   0xc0026a7f
c00183a7:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00183ab:	55                   	push   ebp
c00183ac:	e8 8f 83 fe ff       	call   c0000740 <strcpy>
c00183b1:	58                   	pop    eax
c00183b2:	5a                   	pop    edx
c00183b3:	56                   	push   esi
c00183b4:	55                   	push   ebp
c00183b5:	e8 c6 84 fe ff       	call   c0000880 <strcat>
c00183ba:	59                   	pop    ecx
c00183bb:	58                   	pop    eax
c00183bc:	68 92 6a 02 c0       	push   0xc0026a92
c00183c1:	55                   	push   ebp
c00183c2:	e8 b9 84 fe ff       	call   c0000880 <strcat>
c00183c7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00183ca:	e8 5a cd ff ff       	call   c0015129 <Krnl::panic(char const*)>
c00183cf:	83 c4 10             	add    esp,0x10
c00183d2:	51                   	push   ecx
c00183d3:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00183d7:	50                   	push   eax
c00183d8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00183dc:	50                   	push   eax
c00183dd:	53                   	push   ebx
c00183de:	e8 55 55 ff ff       	call   c000d938 <File::stat(unsigned long long*, bool*)>
c00183e3:	83 c4 10             	add    esp,0x10
c00183e6:	85 db                	test   ebx,ebx
c00183e8:	74 0c                	je     c00183f6 <Thr::loadDLL(char const*, bool)+0xa8>
c00183ea:	83 ec 0c             	sub    esp,0xc
c00183ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00183ef:	53                   	push   ebx
c00183f0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00183f3:	83 c4 10             	add    esp,0x10
c00183f6:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00183fb:	75 0a                	jne    c0018407 <Thr::loadDLL(char const*, bool)+0xb9>
c00183fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018401:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0018405:	75 3c                	jne    c0018443 <Thr::loadDLL(char const*, bool)+0xf5>
c0018407:	89 f8                	mov    eax,edi
c0018409:	84 c0                	test   al,al
c001840b:	0f 84 49 01 00 00    	je     c001855a <Thr::loadDLL(char const*, bool)+0x20c>
c0018411:	51                   	push   ecx
c0018412:	51                   	push   ecx
c0018413:	68 7f 6a 02 c0       	push   0xc0026a7f
c0018418:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001841c:	53                   	push   ebx
c001841d:	e8 1e 83 fe ff       	call   c0000740 <strcpy>
c0018422:	5d                   	pop    ebp
c0018423:	58                   	pop    eax
c0018424:	56                   	push   esi
c0018425:	53                   	push   ebx
c0018426:	e8 55 84 fe ff       	call   c0000880 <strcat>
c001842b:	58                   	pop    eax
c001842c:	5a                   	pop    edx
c001842d:	68 92 6a 02 c0       	push   0xc0026a92
c0018432:	53                   	push   ebx
c0018433:	e8 48 84 fe ff       	call   c0000880 <strcat>
c0018438:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001843b:	e8 e9 cc ff ff       	call   c0015129 <Krnl::panic(char const*)>
c0018440:	83 c4 10             	add    esp,0x10
c0018443:	52                   	push   edx
c0018444:	6a 03                	push   0x3
c0018446:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001844a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001844e:	05 ff 0f 00 00       	add    eax,0xfff
c0018453:	83 d2 00             	adc    edx,0x0
c0018456:	0f ac d0 0c          	shrd   eax,edx,0xc
c001845a:	50                   	push   eax
c001845b:	ff 35 10 8b 02 c0    	push   DWORD PTR ds:0xc0028b10
c0018461:	e8 64 40 ff ff       	call   c000c4ca <VAS::allocatePages(int, int)>
c0018466:	59                   	pop    ecx
c0018467:	89 c3                	mov    ebx,eax
c0018469:	5d                   	pop    ebp
c001846a:	50                   	push   eax
c001846b:	68 ae 49 02 c0       	push   0xc00249ae
c0018470:	e8 d2 4b ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0018475:	89 34 24             	mov    DWORD PTR [esp],esi
c0018478:	e8 23 82 fe ff       	call   c00006a0 <strlen>
c001847d:	8b 2d 40 97 02 c0    	mov    ebp,DWORD PTR ds:0xc0029740
c0018483:	40                   	inc    eax
c0018484:	89 04 24             	mov    DWORD PTR [esp],eax
c0018487:	e8 cf 18 ff ff       	call   c0009d5b <malloc>
c001848c:	89 04 ad 60 9b 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd64a0],eax
c0018493:	58                   	pop    eax
c0018494:	a1 40 97 02 c0       	mov    eax,ds:0xc0029740
c0018499:	5a                   	pop    edx
c001849a:	56                   	push   esi
c001849b:	ff 34 85 60 9b 02 c0 	push   DWORD PTR [eax*4-0x3ffd64a0]
c00184a2:	e8 99 82 fe ff       	call   c0000740 <strcpy>
c00184a7:	a1 40 97 02 c0       	mov    eax,ds:0xc0029740
c00184ac:	8d 50 01             	lea    edx,[eax+0x1]
c00184af:	89 1c 85 60 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd66a0],ebx
c00184b6:	89 15 40 97 02 c0    	mov    DWORD PTR ds:0xc0029740,edx
c00184bc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00184c0:	83 c4 0c             	add    esp,0xc
c00184c3:	89 14 85 60 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd68a0],edx
c00184ca:	6a 01                	push   0x1
c00184cc:	53                   	push   ebx
c00184cd:	56                   	push   esi
c00184ce:	e8 c2 f6 ff ff       	call   c0017b95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00184d3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00184d7:	83 c4 10             	add    esp,0x10
c00184da:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00184df:	0f 85 89 00 00 00    	jne    c001856e <Thr::loadDLL(char const*, bool)+0x220>
c00184e5:	89 f8                	mov    eax,edi
c00184e7:	84 c0                	test   al,al
c00184e9:	74 73                	je     c001855e <Thr::loadDLL(char const*, bool)+0x210>
c00184eb:	83 ec 0c             	sub    esp,0xc
c00184ee:	68 94 6a 02 c0       	push   0xc0026a94
c00184f3:	e8 31 cc ff ff       	call   c0015129 <Krnl::panic(char const*)>
c00184f8:	83 c4 10             	add    esp,0x10
c00184fb:	eb 61                	jmp    c001855e <Thr::loadDLL(char const*, bool)+0x210>
c00184fd:	50                   	push   eax
c00184fe:	50                   	push   eax
c00184ff:	89 e8                	mov    eax,ebp
c0018501:	c1 e0 0c             	shl    eax,0xc
c0018504:	01 d8                	add    eax,ebx
c0018506:	50                   	push   eax
c0018507:	ff 35 10 8b 02 c0    	push   DWORD PTR ds:0xc0028b10
c001850d:	e8 20 3b ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c0018512:	83 c4 10             	add    esp,0x10
c0018515:	8b 00                	mov    eax,DWORD PTR [eax]
c0018517:	a8 60                	test   al,0x60
c0018519:	75 11                	jne    c001852c <Thr::loadDLL(char const*, bool)+0x1de>
c001851b:	83 ec 0c             	sub    esp,0xc
c001851e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018523:	50                   	push   eax
c0018524:	e8 66 1e ff ff       	call   c000a38f <Phys::freePage(unsigned long)>
c0018529:	83 c4 10             	add    esp,0x10
c001852c:	45                   	inc    ebp
c001852d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018531:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018535:	05 ff 0f 00 00       	add    eax,0xfff
c001853a:	bf 00 00 00 00       	mov    edi,0x0
c001853f:	83 d2 00             	adc    edx,0x0
c0018542:	0f ac d0 0c          	shrd   eax,edx,0xc
c0018546:	c1 ea 0c             	shr    edx,0xc
c0018549:	39 c5                	cmp    ebp,eax
c001854b:	89 d1                	mov    ecx,edx
c001854d:	89 f8                	mov    eax,edi
c001854f:	19 c8                	sbb    eax,ecx
c0018551:	72 aa                	jb     c00184fd <Thr::loadDLL(char const*, bool)+0x1af>
c0018553:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0018558:	75 18                	jne    c0018572 <Thr::loadDLL(char const*, bool)+0x224>
c001855a:	31 db                	xor    ebx,ebx
c001855c:	eb 14                	jmp    c0018572 <Thr::loadDLL(char const*, bool)+0x224>
c001855e:	83 ec 0c             	sub    esp,0xc
c0018561:	68 b3 6a 02 c0       	push   0xc0026ab3
c0018566:	e8 be cb ff ff       	call   c0015129 <Krnl::panic(char const*)>
c001856b:	83 c4 10             	add    esp,0x10
c001856e:	31 ed                	xor    ebp,ebp
c0018570:	eb bb                	jmp    c001852d <Thr::loadDLL(char const*, bool)+0x1df>
c0018572:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018578:	89 d8                	mov    eax,ebx
c001857a:	5b                   	pop    ebx
c001857b:	5e                   	pop    esi
c001857c:	5f                   	pop    edi
c001857d:	5d                   	pop    ebp
c001857e:	c3                   	ret    

c001857f <Thr::executeDLL(unsigned long, void*)>:
c001857f:	56                   	push   esi
c0018580:	53                   	push   ebx
c0018581:	52                   	push   edx
c0018582:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018586:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001858a:	85 db                	test   ebx,ebx
c001858c:	75 10                	jne    c001859e <Thr::executeDLL(unsigned long, void*)+0x1f>
c001858e:	83 ec 0c             	sub    esp,0xc
c0018591:	68 cf 6a 02 c0       	push   0xc0026acf
c0018596:	e8 8e cb ff ff       	call   c0015129 <Krnl::panic(char const*)>
c001859b:	83 c4 10             	add    esp,0x10
c001859e:	50                   	push   eax
c001859f:	50                   	push   eax
c00185a0:	53                   	push   ebx
c00185a1:	68 f9 6a 02 c0       	push   0xc0026af9
c00185a6:	e8 9c 4a ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00185ab:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00185af:	89 d8                	mov    eax,ebx
c00185b1:	83 c4 14             	add    esp,0x14
c00185b4:	5b                   	pop    ebx
c00185b5:	5e                   	pop    esi
c00185b6:	ff e0                	jmp    eax

c00185b8 <userModeEntryPoint(void*)>:
c00185b8:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c00185bd:	48                   	dec    eax
c00185be:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c00185c3:	75 03                	jne    c00185c8 <userModeEntryPoint(void*)+0x10>
c00185c5:	fb                   	sti    
c00185c6:	66 90                	xchg   ax,ax
c00185c8:	fb                   	sti    
c00185c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00185ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00185d1:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00185d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00185db:	e9 7f 7c fe ff       	jmp    c000025f <goToUsermode>

c00185e0 <changeTSS>:
c00185e0:	83 ec 14             	sub    esp,0x14
c00185e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00185e8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00185eb:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00185f0:	c1 e2 15             	shl    edx,0x15
c00185f3:	29 d0                	sub    eax,edx
c00185f5:	50                   	push   eax
c00185f6:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c00185fb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018601:	05 7c 11 00 00       	add    eax,0x117c
c0018606:	50                   	push   eax
c0018607:	e8 68 30 ff ff       	call   c000b674 <TSS::setESP(unsigned long)>
c001860c:	83 c4 1c             	add    esp,0x1c
c001860f:	c3                   	ret    

c0018610 <switchToThread(ThreadControlBlock*)>:
c0018610:	57                   	push   edi
c0018611:	a1 04 9f 02 c0       	mov    eax,ds:0xc0029f04
c0018616:	56                   	push   esi
c0018617:	85 c0                	test   eax,eax
c0018619:	53                   	push   ebx
c001861a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001861e:	0f 85 90 00 00 00    	jne    c00186b4 <switchToThread(ThreadControlBlock*)+0xa4>
c0018624:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c0018627:	3c ff                	cmp    al,0xff
c0018629:	0f 84 81 00 00 00    	je     c00186b0 <switchToThread(ThreadControlBlock*)+0xa0>
c001862f:	0f b6 d0             	movzx  edx,al
c0018632:	b8 00 04 00 00       	mov    eax,0x400
c0018637:	29 d0                	sub    eax,edx
c0018639:	d1 f8                	sar    eax,1
c001863b:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c001863e:	66 90                	xchg   ax,ax
c0018640:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c0018643:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0018648:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001864e:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0018655:	74 4d                	je     c00186a4 <switchToThread(ThreadControlBlock*)+0x94>
c0018657:	0f 31                	rdtsc  
c0018659:	a3 48 9f 02 c0       	mov    ds:0xc0029f48,eax
c001865e:	89 c6                	mov    esi,eax
c0018660:	89 d7                	mov    edi,edx
c0018662:	2b 35 38 9f 02 c0    	sub    esi,DWORD PTR ds:0xc0029f38
c0018668:	89 15 4c 9f 02 c0    	mov    DWORD PTR ds:0xc0029f4c,edx
c001866e:	1b 3d 3c 9f 02 c0    	sbb    edi,DWORD PTR ds:0xc0029f3c
c0018674:	89 35 40 9f 02 c0    	mov    DWORD PTR ds:0xc0029f40,esi
c001867a:	a3 38 9f 02 c0       	mov    ds:0xc0029f38,eax
c001867f:	89 3d 44 9f 02 c0    	mov    DWORD PTR ds:0xc0029f44,edi
c0018685:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001868b:	89 15 3c 9f 02 c0    	mov    DWORD PTR ds:0xc0029f3c,edx
c0018691:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018694:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0018697:	01 c6                	add    esi,eax
c0018699:	11 d7                	adc    edi,edx
c001869b:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001869e:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c00186a1:	8d 76 00             	lea    esi,[esi+0x0]
c00186a4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00186a8:	5b                   	pop    ebx
c00186a9:	5e                   	pop    esi
c00186aa:	5f                   	pop    edi
c00186ab:	e9 e7 7b fe ff       	jmp    c0000297 <switchToThreadASM>
c00186b0:	31 c0                	xor    eax,eax
c00186b2:	eb 8c                	jmp    c0018640 <switchToThread(ThreadControlBlock*)+0x30>
c00186b4:	5b                   	pop    ebx
c00186b5:	c7 05 00 9f 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029f00,0x1
c00186bf:	5e                   	pop    esi
c00186c0:	5f                   	pop    edi
c00186c1:	c3                   	ret    
c00186c2:	66 90                	xchg   ax,ax

c00186c4 <Process::addArgs(char**)>:
c00186c4:	57                   	push   edi
c00186c5:	56                   	push   esi
c00186c6:	53                   	push   ebx
c00186c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00186cb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00186cf:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00186d9:	85 ff                	test   edi,edi
c00186db:	74 43                	je     c0018720 <Process::addArgs(char**)+0x5c>
c00186dd:	8b 07                	mov    eax,DWORD PTR [edi]
c00186df:	85 c0                	test   eax,eax
c00186e1:	74 3d                	je     c0018720 <Process::addArgs(char**)+0x5c>
c00186e3:	31 db                	xor    ebx,ebx
c00186e5:	8d 76 00             	lea    esi,[esi+0x0]
c00186e8:	83 ec 0c             	sub    esp,0xc
c00186eb:	50                   	push   eax
c00186ec:	e8 af 7f fe ff       	call   c00006a0 <strlen>
c00186f1:	40                   	inc    eax
c00186f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00186f5:	e8 61 16 ff ff       	call   c0009d5b <malloc>
c00186fa:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0018701:	5a                   	pop    edx
c0018702:	59                   	pop    ecx
c0018703:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0018706:	43                   	inc    ebx
c0018707:	50                   	push   eax
c0018708:	e8 33 80 fe ff       	call   c0000740 <strcpy>
c001870d:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0018713:	83 c4 10             	add    esp,0x10
c0018716:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018719:	85 c0                	test   eax,eax
c001871b:	75 cb                	jne    c00186e8 <Process::addArgs(char**)+0x24>
c001871d:	8d 76 00             	lea    esi,[esi+0x0]
c0018720:	5b                   	pop    ebx
c0018721:	5e                   	pop    esi
c0018722:	5f                   	pop    edi
c0018723:	c3                   	ret    

c0018724 <Process::Process(char const*, Process*, char**)>:
c0018724:	56                   	push   esi
c0018725:	53                   	push   ebx
c0018726:	83 ec 14             	sub    esp,0x14
c0018729:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001872d:	05 0c 02 00 00       	add    eax,0x20c
c0018732:	bb 07 00 00 00       	mov    ebx,0x7
c0018737:	89 c6                	mov    esi,eax
c0018739:	8d 76 00             	lea    esi,[esi+0x0]
c001873c:	85 db                	test   ebx,ebx
c001873e:	78 14                	js     c0018754 <Process::Process(char const*, Process*, char**)+0x30>
c0018740:	83 ec 0c             	sub    esp,0xc
c0018743:	56                   	push   esi
c0018744:	e8 e3 af 00 00       	call   c002372c <ThreadControlBlock::ThreadControlBlock()>
c0018749:	83 c4 10             	add    esp,0x10
c001874c:	83 c6 5f             	add    esi,0x5f
c001874f:	4b                   	dec    ebx
c0018750:	eb ea                	jmp    c001873c <Process::Process(char const*, Process*, char**)+0x18>
c0018752:	66 90                	xchg   ax,ax
c0018754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018758:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001875f:	83 ec 0c             	sub    esp,0xc
c0018762:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018766:	e8 47 c8 ff ff       	call   c0014fb2 <Krnl::newProcessEnv(Process*)>
c001876b:	83 c4 10             	add    esp,0x10
c001876e:	89 c2                	mov    edx,eax
c0018770:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018774:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001877a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001877e:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0018787:	a1 10 84 02 c0       	mov    eax,ds:0xc0028410
c001878c:	8d 50 01             	lea    edx,[eax+0x1]
c001878f:	89 15 10 84 02 c0    	mov    DWORD PTR ds:0xc0028410,edx
c0018795:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018799:	89 02                	mov    DWORD PTR [edx],eax
c001879b:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00187a3:	83 ec 0c             	sub    esp,0xc
c00187a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00187aa:	e8 ac 15 ff ff       	call   c0009d5b <malloc>
c00187af:	83 c4 10             	add    esp,0x10
c00187b2:	89 c3                	mov    ebx,eax
c00187b4:	83 ec 08             	sub    esp,0x8
c00187b7:	6a 00                	push   0x0
c00187b9:	53                   	push   ebx
c00187ba:	e8 b3 40 ff ff       	call   c000c872 <VAS::VAS(bool)>
c00187bf:	83 c4 10             	add    esp,0x10
c00187c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187c6:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00187cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187d0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00187da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00187e2:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00187e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187ec:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00187f2:	85 c0                	test   eax,eax
c00187f4:	74 42                	je     c0018838 <Process::Process(char const*, Process*, char**)+0x114>
c00187f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187fa:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018800:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018806:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001880a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0018810:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018814:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001881a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018820:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018824:	05 0c 01 00 00       	add    eax,0x10c
c0018829:	83 ec 08             	sub    esp,0x8
c001882c:	52                   	push   edx
c001882d:	50                   	push   eax
c001882e:	e8 0d 7f fe ff       	call   c0000740 <strcpy>
c0018833:	83 c4 10             	add    esp,0x10
c0018836:	eb 64                	jmp    c001889c <Process::Process(char const*, Process*, char**)+0x178>
c0018838:	c7 44 24 04 b4 01 00 00 	mov    DWORD PTR [esp+0x4],0x1b4
c0018840:	83 ec 0c             	sub    esp,0xc
c0018843:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018847:	e8 0f 15 ff ff       	call   c0009d5b <malloc>
c001884c:	83 c4 10             	add    esp,0x10
c001884f:	89 c3                	mov    ebx,eax
c0018851:	83 ec 08             	sub    esp,0x8
c0018854:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018858:	53                   	push   ebx
c0018859:	e8 2a 2b ff ff       	call   c000b388 <VgaText::VgaText(char const*)>
c001885e:	83 c4 10             	add    esp,0x10
c0018861:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018865:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001886b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001886f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018875:	83 ec 0c             	sub    esp,0xc
c0018878:	50                   	push   eax
c0018879:	e8 c9 22 ff ff       	call   c000ab47 <addToTerminalCycle(VgaText*)>
c001887e:	83 c4 10             	add    esp,0x10
c0018881:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018885:	05 0c 01 00 00       	add    eax,0x10c
c001888a:	83 ec 08             	sub    esp,0x8
c001888d:	68 18 6b 02 c0       	push   0xc0026b18
c0018892:	50                   	push   eax
c0018893:	e8 a8 7e fe ff       	call   c0000740 <strcpy>
c0018898:	83 c4 10             	add    esp,0x10
c001889b:	90                   	nop
c001889c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188a0:	83 c0 0c             	add    eax,0xc
c00188a3:	83 ec 08             	sub    esp,0x8
c00188a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188aa:	50                   	push   eax
c00188ab:	e8 90 7e fe ff       	call   c0000740 <strcpy>
c00188b0:	83 c4 10             	add    esp,0x10
c00188b3:	83 ec 08             	sub    esp,0x8
c00188b6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00188ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188be:	e8 01 fe ff ff       	call   c00186c4 <Process::addArgs(char**)>
c00188c3:	83 c4 10             	add    esp,0x10
c00188c6:	83 ec 08             	sub    esp,0x8
c00188c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188d1:	e8 89 ed ff ff       	call   c001765f <Thr::loadProgramIntoMemory(Process*, char const*)>
c00188d6:	83 c4 10             	add    esp,0x10
c00188d9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00188dd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00188e1:	83 f0 01             	xor    eax,0x1
c00188e4:	88 c2                	mov    dl,al
c00188e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188ea:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00188f0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00188f5:	83 ec 08             	sub    esp,0x8
c00188f8:	50                   	push   eax
c00188f9:	68 70 6b 02 c0       	push   0xc0026b70
c00188fe:	e8 44 47 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0018903:	83 c4 10             	add    esp,0x10
c0018906:	90                   	nop
c0018907:	83 c4 14             	add    esp,0x14
c001890a:	5b                   	pop    ebx
c001890b:	5e                   	pop    esi
c001890c:	c3                   	ret    
c001890d:	90                   	nop
c001890e:	66 90                	xchg   ax,ax

c0018910 <Process::Process(bool, char const*, Process*, char**)>:
c0018910:	56                   	push   esi
c0018911:	53                   	push   ebx
c0018912:	83 ec 24             	sub    esp,0x24
c0018915:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018919:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001891d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018921:	05 0c 02 00 00       	add    eax,0x20c
c0018926:	bb 07 00 00 00       	mov    ebx,0x7
c001892b:	89 c6                	mov    esi,eax
c001892d:	8d 76 00             	lea    esi,[esi+0x0]
c0018930:	85 db                	test   ebx,ebx
c0018932:	78 14                	js     c0018948 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0018934:	83 ec 0c             	sub    esp,0xc
c0018937:	56                   	push   esi
c0018938:	e8 ef ad 00 00       	call   c002372c <ThreadControlBlock::ThreadControlBlock()>
c001893d:	83 c4 10             	add    esp,0x10
c0018940:	83 c6 5f             	add    esi,0x5f
c0018943:	4b                   	dec    ebx
c0018944:	eb ea                	jmp    c0018930 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0018946:	66 90                	xchg   ax,ax
c0018948:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001894c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0018953:	83 ec 0c             	sub    esp,0xc
c0018956:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001895a:	e8 53 c6 ff ff       	call   c0014fb2 <Krnl::newProcessEnv(Process*)>
c001895f:	83 c4 10             	add    esp,0x10
c0018962:	89 c2                	mov    edx,eax
c0018964:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018968:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001896e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018972:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001897b:	a1 10 84 02 c0       	mov    eax,ds:0xc0028410
c0018980:	8d 50 01             	lea    edx,[eax+0x1]
c0018983:	89 15 10 84 02 c0    	mov    DWORD PTR ds:0xc0028410,edx
c0018989:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001898d:	89 02                	mov    DWORD PTR [edx],eax
c001898f:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0018997:	83 ec 0c             	sub    esp,0xc
c001899a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001899e:	e8 b8 13 ff ff       	call   c0009d5b <malloc>
c00189a3:	83 c4 10             	add    esp,0x10
c00189a6:	89 c3                	mov    ebx,eax
c00189a8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00189ad:	83 ec 08             	sub    esp,0x8
c00189b0:	50                   	push   eax
c00189b1:	53                   	push   ebx
c00189b2:	e8 bb 3e ff ff       	call   c000c872 <VAS::VAS(bool)>
c00189b7:	83 c4 10             	add    esp,0x10
c00189ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189be:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00189c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189c8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00189d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189d6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00189da:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00189e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189e4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00189ea:	85 c0                	test   eax,eax
c00189ec:	74 42                	je     c0018a30 <Process::Process(bool, char const*, Process*, char**)+0x120>
c00189ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189f2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00189f8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00189fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a02:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0018a08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a0c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018a12:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018a18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a1c:	05 0c 01 00 00       	add    eax,0x10c
c0018a21:	83 ec 08             	sub    esp,0x8
c0018a24:	52                   	push   edx
c0018a25:	50                   	push   eax
c0018a26:	e8 15 7d fe ff       	call   c0000740 <strcpy>
c0018a2b:	83 c4 10             	add    esp,0x10
c0018a2e:	eb 64                	jmp    c0018a94 <Process::Process(bool, char const*, Process*, char**)+0x184>
c0018a30:	c7 44 24 18 b4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1b4
c0018a38:	83 ec 0c             	sub    esp,0xc
c0018a3b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018a3f:	e8 17 13 ff ff       	call   c0009d5b <malloc>
c0018a44:	83 c4 10             	add    esp,0x10
c0018a47:	89 c3                	mov    ebx,eax
c0018a49:	83 ec 08             	sub    esp,0x8
c0018a4c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018a50:	53                   	push   ebx
c0018a51:	e8 32 29 ff ff       	call   c000b388 <VgaText::VgaText(char const*)>
c0018a56:	83 c4 10             	add    esp,0x10
c0018a59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a5d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0018a63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a67:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018a6d:	83 ec 0c             	sub    esp,0xc
c0018a70:	50                   	push   eax
c0018a71:	e8 d1 20 ff ff       	call   c000ab47 <addToTerminalCycle(VgaText*)>
c0018a76:	83 c4 10             	add    esp,0x10
c0018a79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a7d:	05 0c 01 00 00       	add    eax,0x10c
c0018a82:	83 ec 08             	sub    esp,0x8
c0018a85:	68 18 6b 02 c0       	push   0xc0026b18
c0018a8a:	50                   	push   eax
c0018a8b:	e8 b0 7c fe ff       	call   c0000740 <strcpy>
c0018a90:	83 c4 10             	add    esp,0x10
c0018a93:	90                   	nop
c0018a94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a98:	83 c0 0c             	add    eax,0xc
c0018a9b:	83 ec 08             	sub    esp,0x8
c0018a9e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018aa2:	50                   	push   eax
c0018aa3:	e8 98 7c fe ff       	call   c0000740 <strcpy>
c0018aa8:	83 c4 10             	add    esp,0x10
c0018aab:	83 ec 08             	sub    esp,0x8
c0018aae:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018ab2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018ab6:	e8 09 fc ff ff       	call   c00186c4 <Process::addArgs(char**)>
c0018abb:	83 c4 10             	add    esp,0x10
c0018abe:	90                   	nop
c0018abf:	83 c4 24             	add    esp,0x24
c0018ac2:	5b                   	pop    ebx
c0018ac3:	5e                   	pop    esi
c0018ac4:	c3                   	ret    
c0018ac5:	8d 76 00             	lea    esi,[esi+0x0]

c0018ac8 <taskStartupFunction>:
c0018ac8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018acd:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0018ad0:	c3                   	ret    
c0018ad1:	90                   	nop
c0018ad2:	66 90                	xchg   ax,ax

c0018ad4 <Semaphore::Semaphore(int)>:
c0018ad4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ad8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018adc:	89 10                	mov    DWORD PTR [eax],edx
c0018ade:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ae2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018ae9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018aed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018af4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018af8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018aff:	90                   	nop
c0018b00:	c3                   	ret    
c0018b01:	90                   	nop
c0018b02:	66 90                	xchg   ax,ax

c0018b04 <Mutex::Mutex()>:
c0018b04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b08:	6a 01                	push   0x1
c0018b0a:	50                   	push   eax
c0018b0b:	e8 c4 ff ff ff       	call   c0018ad4 <Semaphore::Semaphore(int)>
c0018b10:	83 c4 08             	add    esp,0x8
c0018b13:	90                   	nop
c0018b14:	c3                   	ret    
c0018b15:	90                   	nop
c0018b16:	66 90                	xchg   ax,ax

c0018b18 <Process::createThread(void (*)(void*), void*, int)>:
c0018b18:	57                   	push   edi
c0018b19:	31 c9                	xor    ecx,ecx
c0018b1b:	56                   	push   esi
c0018b1c:	53                   	push   ebx
c0018b1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018b21:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0018b28:	89 f2                	mov    edx,esi
c0018b2a:	66 90                	xchg   ax,ax
c0018b2c:	0f b7 c2             	movzx  eax,dx
c0018b2f:	83 e2 01             	and    edx,0x1
c0018b32:	74 14                	je     c0018b48 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0018b34:	d1 f8                	sar    eax,1
c0018b36:	41                   	inc    ecx
c0018b37:	89 c2                	mov    edx,eax
c0018b39:	83 f9 10             	cmp    ecx,0x10
c0018b3c:	75 ee                	jne    c0018b2c <Process::createThread(void (*)(void*), void*, int)+0x14>
c0018b3e:	31 db                	xor    ebx,ebx
c0018b40:	89 d8                	mov    eax,ebx
c0018b42:	5b                   	pop    ebx
c0018b43:	5e                   	pop    esi
c0018b44:	5f                   	pop    edi
c0018b45:	c3                   	ret    
c0018b46:	66 90                	xchg   ax,ax
c0018b48:	b8 01 00 00 00       	mov    eax,0x1
c0018b4d:	d3 e0                	shl    eax,cl
c0018b4f:	09 c6                	or     esi,eax
c0018b51:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018b54:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0018b5b:	01 c0                	add    eax,eax
c0018b5d:	01 c8                	add    eax,ecx
c0018b5f:	8d 04 80             	lea    eax,[eax+eax*4]
c0018b62:	01 d8                	add    eax,ebx
c0018b64:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0018b6b:	75 0b                	jne    c0018b78 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0018b6d:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0018b77:	90                   	nop
c0018b78:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018b7e:	83 ec 08             	sub    esp,0x8
c0018b81:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018b84:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018b87:	01 c0                	add    eax,eax
c0018b89:	01 c8                	add    eax,ecx
c0018b8b:	8d 3c 80             	lea    edi,[eax+eax*4]
c0018b8e:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0018b91:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018b97:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0018b9d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018ba1:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0018ba7:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0018bad:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0018bb4:	89 ca                	mov    edx,ecx
c0018bb6:	f7 da                	neg    edx
c0018bb8:	c1 e2 15             	shl    edx,0x15
c0018bbb:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018bc1:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018bc7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018bcb:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018bd5:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0018bdb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018bdf:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018be5:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018bef:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018bf9:	53                   	push   ebx
c0018bfa:	68 24 9f 02 c0       	push   0xc0029f24
c0018bff:	e8 c8 a8 00 00       	call   c00234cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018c04:	83 c4 10             	add    esp,0x10
c0018c07:	89 d8                	mov    eax,ebx
c0018c09:	5b                   	pop    ebx
c0018c0a:	5e                   	pop    esi
c0018c0b:	5f                   	pop    edi
c0018c0c:	c3                   	ret    
c0018c0d:	90                   	nop
c0018c0e:	66 90                	xchg   ax,ax

c0018c10 <Process::createUserThread()>:
c0018c10:	83 ec 0c             	sub    esp,0xc
c0018c13:	68 80 00 00 00       	push   0x80
c0018c18:	6a 00                	push   0x0
c0018c1a:	68 b8 85 01 c0       	push   0xc00185b8
c0018c1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018c23:	e8 f0 fe ff ff       	call   c0018b18 <Process::createThread(void (*)(void*), void*, int)>
c0018c28:	83 c4 1c             	add    esp,0x1c
c0018c2b:	c3                   	ret    

c0018c2c <setupMultitasking(void (*)())>:
c0018c2c:	56                   	push   esi
c0018c2d:	53                   	push   ebx
c0018c2e:	51                   	push   ecx
c0018c2f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018c33:	eb 13                	jmp    c0018c48 <setupMultitasking(void (*)())+0x1c>
c0018c35:	8d 76 00             	lea    esi,[esi+0x0]
c0018c38:	83 ec 0c             	sub    esp,0xc
c0018c3b:	68 24 9f 02 c0       	push   0xc0029f24
c0018c40:	e8 cf a7 00 00       	call   c0023414 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018c45:	83 c4 10             	add    esp,0x10
c0018c48:	83 ec 0c             	sub    esp,0xc
c0018c4b:	68 24 9f 02 c0       	push   0xc0029f24
c0018c50:	e8 9b a7 00 00       	call   c00233f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018c55:	83 c4 10             	add    esp,0x10
c0018c58:	84 c0                	test   al,al
c0018c5a:	74 dc                	je     c0018c38 <setupMultitasking(void (*)())+0xc>
c0018c5c:	83 ec 0c             	sub    esp,0xc
c0018c5f:	68 1f 07 00 00       	push   0x71f
c0018c64:	e8 f2 10 ff ff       	call   c0009d5b <malloc>
c0018c69:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018c70:	89 c3                	mov    ebx,eax
c0018c72:	6a 00                	push   0x0
c0018c74:	68 1c 6b 02 c0       	push   0xc0026b1c
c0018c79:	6a 01                	push   0x1
c0018c7b:	50                   	push   eax
c0018c7c:	e8 8f fc ff ff       	call   c0018910 <Process::Process(bool, char const*, Process*, char**)>
c0018c81:	83 c4 14             	add    esp,0x14
c0018c84:	89 1d 30 9f 02 c0    	mov    DWORD PTR ds:0xc0029f30,ebx
c0018c8a:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0018c90:	e8 c0 21 ff ff       	call   c000ae55 <setActiveTerminal(VgaText*)>
c0018c95:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0018c9d:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0018ca7:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018cb0:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0018cba:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018cc0:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0018cc6:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018cd0:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0018cda:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018ce4:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018cea:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018cf4:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018cfa:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018d04:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018d0a:	58                   	pop    eax
c0018d0b:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018d11:	5a                   	pop    edx
c0018d12:	68 18 6b 02 c0       	push   0xc0026b18
c0018d17:	50                   	push   eax
c0018d18:	e8 23 7a fe ff       	call   c0000740 <strcpy>
c0018d1d:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0018d24:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018d28:	83 c4 14             	add    esp,0x14
c0018d2b:	5b                   	pop    ebx
c0018d2c:	5e                   	pop    esi
c0018d2d:	e9 57 75 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0018d32:	66 90                	xchg   ax,ax

c0018d34 <schedule()>:
c0018d34:	a1 04 9f 02 c0       	mov    eax,ds:0xc0029f04
c0018d39:	85 c0                	test   eax,eax
c0018d3b:	74 0b                	je     c0018d48 <schedule()+0x14>
c0018d3d:	c7 05 00 9f 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029f00,0x1
c0018d47:	c3                   	ret    
c0018d48:	53                   	push   ebx
c0018d49:	83 ec 14             	sub    esp,0x14
c0018d4c:	68 24 9f 02 c0       	push   0xc0029f24
c0018d51:	e8 9a a6 00 00       	call   c00233f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018d56:	83 c4 10             	add    esp,0x10
c0018d59:	84 c0                	test   al,al
c0018d5b:	75 3b                	jne    c0018d98 <schedule()+0x64>
c0018d5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d62:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018d65:	4a                   	dec    edx
c0018d66:	74 38                	je     c0018da0 <schedule()+0x6c>
c0018d68:	83 ec 0c             	sub    esp,0xc
c0018d6b:	68 24 9f 02 c0       	push   0xc0029f24
c0018d70:	e8 97 a6 00 00       	call   c002340c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018d75:	c7 04 24 24 9f 02 c0 	mov    DWORD PTR [esp],0xc0029f24
c0018d7c:	89 c3                	mov    ebx,eax
c0018d7e:	e8 91 a6 00 00       	call   c0023414 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018d83:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018d8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018d8d:	e8 7e f8 ff ff       	call   c0018610 <switchToThread(ThreadControlBlock*)>
c0018d92:	83 c4 10             	add    esp,0x10
c0018d95:	8d 76 00             	lea    esi,[esi+0x0]
c0018d98:	83 c4 08             	add    esp,0x8
c0018d9b:	5b                   	pop    ebx
c0018d9c:	c3                   	ret    
c0018d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0018da0:	83 ec 08             	sub    esp,0x8
c0018da3:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018daa:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018db0:	68 24 9f 02 c0       	push   0xc0029f24
c0018db5:	e8 12 a7 00 00       	call   c00234cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018dba:	83 c4 10             	add    esp,0x10
c0018dbd:	eb a9                	jmp    c0018d68 <schedule()+0x34>
c0018dbf:	90                   	nop

c0018dc0 <Semaphore::tryAcquire()>:
c0018dc0:	53                   	push   ebx
c0018dc1:	83 ec 08             	sub    esp,0x8
c0018dc4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018dc8:	fa                   	cli    
c0018dc9:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c0018dce:	8d 50 01             	lea    edx,[eax+0x1]
c0018dd1:	89 15 08 9f 02 c0    	mov    DWORD PTR ds:0xc0029f08,edx
c0018dd7:	8b 15 04 9f 02 c0    	mov    edx,DWORD PTR ds:0xc0029f04
c0018ddd:	8d 5a 01             	lea    ebx,[edx+0x1]
c0018de0:	89 1d 04 9f 02 c0    	mov    DWORD PTR ds:0xc0029f04,ebx
c0018de6:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0018de9:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0018deb:	7c 33                	jl     c0018e20 <Semaphore::tryAcquire()+0x60>
c0018ded:	89 15 04 9f 02 c0    	mov    DWORD PTR ds:0xc0029f04,edx
c0018df3:	85 d2                	test   edx,edx
c0018df5:	75 0d                	jne    c0018e04 <Semaphore::tryAcquire()+0x44>
c0018df7:	8b 15 00 9f 02 c0    	mov    edx,DWORD PTR ds:0xc0029f00
c0018dfd:	85 d2                	test   edx,edx
c0018dff:	75 6b                	jne    c0018e6c <Semaphore::tryAcquire()+0xac>
c0018e01:	8d 76 00             	lea    esi,[esi+0x0]
c0018e04:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c0018e09:	85 c0                	test   eax,eax
c0018e0b:	74 0b                	je     c0018e18 <Semaphore::tryAcquire()+0x58>
c0018e0d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e10:	31 c0                	xor    eax,eax
c0018e12:	83 c4 08             	add    esp,0x8
c0018e15:	5b                   	pop    ebx
c0018e16:	c3                   	ret    
c0018e17:	90                   	nop
c0018e18:	fb                   	sti    
c0018e19:	83 c4 08             	add    esp,0x8
c0018e1c:	5b                   	pop    ebx
c0018e1d:	c3                   	ret    
c0018e1e:	66 90                	xchg   ax,ax
c0018e20:	43                   	inc    ebx
c0018e21:	89 15 04 9f 02 c0    	mov    DWORD PTR ds:0xc0029f04,edx
c0018e27:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0018e2a:	85 d2                	test   edx,edx
c0018e2c:	75 22                	jne    c0018e50 <Semaphore::tryAcquire()+0x90>
c0018e2e:	8b 0d 00 9f 02 c0    	mov    ecx,DWORD PTR ds:0xc0029f00
c0018e34:	85 c9                	test   ecx,ecx
c0018e36:	74 18                	je     c0018e50 <Semaphore::tryAcquire()+0x90>
c0018e38:	c7 05 00 9f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029f00,0x0
c0018e42:	e8 ed fe ff ff       	call   c0018d34 <schedule()>
c0018e47:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c0018e4c:	48                   	dec    eax
c0018e4d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e50:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c0018e55:	85 c0                	test   eax,eax
c0018e57:	75 0b                	jne    c0018e64 <Semaphore::tryAcquire()+0xa4>
c0018e59:	fb                   	sti    
c0018e5a:	b0 01                	mov    al,0x1
c0018e5c:	83 c4 08             	add    esp,0x8
c0018e5f:	5b                   	pop    ebx
c0018e60:	c3                   	ret    
c0018e61:	8d 76 00             	lea    esi,[esi+0x0]
c0018e64:	b0 01                	mov    al,0x1
c0018e66:	83 c4 08             	add    esp,0x8
c0018e69:	5b                   	pop    ebx
c0018e6a:	c3                   	ret    
c0018e6b:	90                   	nop
c0018e6c:	c7 05 00 9f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029f00,0x0
c0018e76:	e8 b9 fe ff ff       	call   c0018d34 <schedule()>
c0018e7b:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c0018e80:	48                   	dec    eax
c0018e81:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c0018e86:	85 c0                	test   eax,eax
c0018e88:	75 86                	jne    c0018e10 <Semaphore::tryAcquire()+0x50>
c0018e8a:	eb 8c                	jmp    c0018e18 <Semaphore::tryAcquire()+0x58>

c0018e8c <Semaphore::assertLocked(char const*)>:
c0018e8c:	83 ec 0c             	sub    esp,0xc
c0018e8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e93:	fa                   	cli    
c0018e94:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c0018e9a:	a1 04 9f 02 c0       	mov    eax,ds:0xc0029f04
c0018e9f:	8d 48 01             	lea    ecx,[eax+0x1]
c0018ea2:	89 0d 04 9f 02 c0    	mov    DWORD PTR ds:0xc0029f04,ecx
c0018ea8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018eaa:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0018ead:	7c 29                	jl     c0018ed8 <Semaphore::assertLocked(char const*)+0x4c>
c0018eaf:	90                   	nop
c0018eb0:	a3 04 9f 02 c0       	mov    ds:0xc0029f04,eax
c0018eb5:	85 c0                	test   eax,eax
c0018eb7:	75 0b                	jne    c0018ec4 <Semaphore::assertLocked(char const*)+0x38>
c0018eb9:	a1 00 9f 02 c0       	mov    eax,ds:0xc0029f00
c0018ebe:	85 c0                	test   eax,eax
c0018ec0:	75 2e                	jne    c0018ef0 <Semaphore::assertLocked(char const*)+0x64>
c0018ec2:	66 90                	xchg   ax,ax
c0018ec4:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c0018ec9:	48                   	dec    eax
c0018eca:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c0018ecf:	75 03                	jne    c0018ed4 <Semaphore::assertLocked(char const*)+0x48>
c0018ed1:	fb                   	sti    
c0018ed2:	66 90                	xchg   ax,ax
c0018ed4:	83 c4 0c             	add    esp,0xc
c0018ed7:	c3                   	ret    
c0018ed8:	83 ec 0c             	sub    esp,0xc
c0018edb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018edf:	e8 45 c2 ff ff       	call   c0015129 <Krnl::panic(char const*)>
c0018ee4:	a1 04 9f 02 c0       	mov    eax,ds:0xc0029f04
c0018ee9:	83 c4 10             	add    esp,0x10
c0018eec:	48                   	dec    eax
c0018eed:	eb c1                	jmp    c0018eb0 <Semaphore::assertLocked(char const*)+0x24>
c0018eef:	90                   	nop
c0018ef0:	c7 05 00 9f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029f00,0x0
c0018efa:	e8 35 fe ff ff       	call   c0018d34 <schedule()>
c0018eff:	eb c3                	jmp    c0018ec4 <Semaphore::assertLocked(char const*)+0x38>
c0018f01:	8d 76 00             	lea    esi,[esi+0x0]

c0018f04 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018f04:	83 ec 0c             	sub    esp,0xc
c0018f07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f10:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018f13:	e8 1c fe ff ff       	call   c0018d34 <schedule()>
c0018f18:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c0018f1d:	48                   	dec    eax
c0018f1e:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c0018f23:	75 03                	jne    c0018f28 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0018f25:	fb                   	sti    
c0018f26:	66 90                	xchg   ax,ax
c0018f28:	83 c4 0c             	add    esp,0xc
c0018f2b:	c3                   	ret    

c0018f2c <blockTask(TaskState)>:
c0018f2c:	83 ec 0c             	sub    esp,0xc
c0018f2f:	fa                   	cli    
c0018f30:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c0018f36:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f3f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018f42:	e8 ed fd ff ff       	call   c0018d34 <schedule()>
c0018f47:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c0018f4c:	48                   	dec    eax
c0018f4d:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c0018f52:	75 04                	jne    c0018f58 <blockTask(TaskState)+0x2c>
c0018f54:	fb                   	sti    
c0018f55:	8d 76 00             	lea    esi,[esi+0x0]
c0018f58:	83 c4 0c             	add    esp,0xc
c0018f5b:	c3                   	ret    

c0018f5c <waitTask(int, int*, int)>:
c0018f5c:	83 ec 18             	sub    esp,0x18
c0018f5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f64:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f68:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0018f6b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018f6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f74:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018f77:	6a 07                	push   0x7
c0018f79:	e8 ae ff ff ff       	call   c0018f2c <blockTask(TaskState)>
c0018f7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f83:	83 c4 10             	add    esp,0x10
c0018f86:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0018f89:	85 d2                	test   edx,edx
c0018f8b:	74 0b                	je     c0018f98 <waitTask(int, int*, int)+0x3c>
c0018f8d:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0018f90:	89 02                	mov    DWORD PTR [edx],eax
c0018f92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f97:	90                   	nop
c0018f98:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018f9b:	83 c4 0c             	add    esp,0xc
c0018f9e:	c3                   	ret    
c0018f9f:	90                   	nop

c0018fa0 <milliTenthSleepUntil(unsigned int)>:
c0018fa0:	83 ec 0c             	sub    esp,0xc
c0018fa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fa7:	39 05 0c 90 02 c0    	cmp    DWORD PTR ds:0xc002900c,eax
c0018fad:	76 05                	jbe    c0018fb4 <milliTenthSleepUntil(unsigned int)+0x14>
c0018faf:	90                   	nop
c0018fb0:	83 c4 0c             	add    esp,0xc
c0018fb3:	c3                   	ret    
c0018fb4:	fa                   	cli    
c0018fb5:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c0018fbb:	83 ec 08             	sub    esp,0x8
c0018fbe:	ff 05 04 9f 02 c0    	inc    DWORD PTR ds:0xc0029f04
c0018fc4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018fca:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0018fcd:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018fd3:	68 18 9f 02 c0       	push   0xc0029f18
c0018fd8:	e8 ef a4 00 00       	call   c00234cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018fdd:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018fe4:	e8 43 ff ff ff       	call   c0018f2c <blockTask(TaskState)>
c0018fe9:	a1 04 9f 02 c0       	mov    eax,ds:0xc0029f04
c0018fee:	83 c4 10             	add    esp,0x10
c0018ff1:	48                   	dec    eax
c0018ff2:	a3 04 9f 02 c0       	mov    ds:0xc0029f04,eax
c0018ff7:	85 c0                	test   eax,eax
c0018ff9:	75 09                	jne    c0019004 <milliTenthSleepUntil(unsigned int)+0x64>
c0018ffb:	a1 00 9f 02 c0       	mov    eax,ds:0xc0029f00
c0019000:	85 c0                	test   eax,eax
c0019002:	75 14                	jne    c0019018 <milliTenthSleepUntil(unsigned int)+0x78>
c0019004:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c0019009:	48                   	dec    eax
c001900a:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c001900f:	75 9f                	jne    c0018fb0 <milliTenthSleepUntil(unsigned int)+0x10>
c0019011:	fb                   	sti    
c0019012:	83 c4 0c             	add    esp,0xc
c0019015:	c3                   	ret    
c0019016:	66 90                	xchg   ax,ax
c0019018:	c7 05 00 9f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029f00,0x0
c0019022:	e8 0d fd ff ff       	call   c0018d34 <schedule()>
c0019027:	eb db                	jmp    c0019004 <milliTenthSleepUntil(unsigned int)+0x64>
c0019029:	8d 76 00             	lea    esi,[esi+0x0]

c001902c <milliTenthSleep(unsigned int)>:
c001902c:	a1 0c 90 02 c0       	mov    eax,ds:0xc002900c
c0019031:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0019035:	e9 66 ff ff ff       	jmp    c0018fa0 <milliTenthSleepUntil(unsigned int)>
c001903a:	66 90                	xchg   ax,ax

c001903c <sleep(unsigned int)>:
c001903c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019040:	8d 04 80             	lea    eax,[eax+eax*4]
c0019043:	8d 04 80             	lea    eax,[eax+eax*4]
c0019046:	8d 04 80             	lea    eax,[eax+eax*4]
c0019049:	8d 04 80             	lea    eax,[eax+eax*4]
c001904c:	c1 e0 04             	shl    eax,0x4
c001904f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019053:	eb d7                	jmp    c001902c <milliTenthSleep(unsigned int)>
c0019055:	90                   	nop
c0019056:	66 90                	xchg   ax,ax

c0019058 <Semaphore::acquire()>:
c0019058:	83 ec 0c             	sub    esp,0xc
c001905b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001905f:	fa                   	cli    
c0019060:	a1 04 9f 02 c0       	mov    eax,ds:0xc0029f04
c0019065:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c001906b:	8d 48 01             	lea    ecx,[eax+0x1]
c001906e:	89 0d 04 9f 02 c0    	mov    DWORD PTR ds:0xc0029f04,ecx
c0019074:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0019077:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0019079:	7d 2d                	jge    c00190a8 <Semaphore::acquire()+0x50>
c001907b:	41                   	inc    ecx
c001907c:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001907f:	90                   	nop
c0019080:	a3 04 9f 02 c0       	mov    ds:0xc0029f04,eax
c0019085:	85 c0                	test   eax,eax
c0019087:	75 0b                	jne    c0019094 <Semaphore::acquire()+0x3c>
c0019089:	a1 00 9f 02 c0       	mov    eax,ds:0xc0029f00
c001908e:	85 c0                	test   eax,eax
c0019090:	75 62                	jne    c00190f4 <Semaphore::acquire()+0x9c>
c0019092:	66 90                	xchg   ax,ax
c0019094:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c0019099:	48                   	dec    eax
c001909a:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c001909f:	75 03                	jne    c00190a4 <Semaphore::acquire()+0x4c>
c00190a1:	fb                   	sti    
c00190a2:	66 90                	xchg   ax,ax
c00190a4:	83 c4 0c             	add    esp,0xc
c00190a7:	c3                   	ret    
c00190a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00190ad:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00190b4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00190b7:	85 c9                	test   ecx,ecx
c00190b9:	74 4d                	je     c0019108 <Semaphore::acquire()+0xb0>
c00190bb:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00190be:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00190c4:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00190c7:	90                   	nop
c00190c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00190cd:	83 ec 0c             	sub    esp,0xc
c00190d0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00190d3:	68 98 6b 02 c0       	push   0xc0026b98
c00190d8:	e8 6a 3f ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00190dd:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00190e4:	e8 43 fe ff ff       	call   c0018f2c <blockTask(TaskState)>
c00190e9:	a1 04 9f 02 c0       	mov    eax,ds:0xc0029f04
c00190ee:	83 c4 10             	add    esp,0x10
c00190f1:	48                   	dec    eax
c00190f2:	eb 8c                	jmp    c0019080 <Semaphore::acquire()+0x28>
c00190f4:	c7 05 00 9f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029f00,0x0
c00190fe:	e8 31 fc ff ff       	call   c0018d34 <schedule()>
c0019103:	eb 8f                	jmp    c0019094 <Semaphore::acquire()+0x3c>
c0019105:	8d 76 00             	lea    esi,[esi+0x0]
c0019108:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001910d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019110:	eb b6                	jmp    c00190c8 <Semaphore::acquire()+0x70>
c0019112:	66 90                	xchg   ax,ax

c0019114 <taskReturned>:
c0019114:	83 ec 18             	sub    esp,0x18
c0019117:	68 b8 6b 02 c0       	push   0xc0026bb8
c001911c:	e8 08 c0 ff ff       	call   c0015129 <Krnl::panic(char const*)>
c0019121:	83 c4 10             	add    esp,0x10
c0019124:	83 ec 0c             	sub    esp,0xc
c0019127:	6a 02                	push   0x2
c0019129:	e8 fe fd ff ff       	call   c0018f2c <blockTask(TaskState)>
c001912e:	fa                   	cli    
c001912f:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c0019135:	e8 fa fb ff ff       	call   c0018d34 <schedule()>
c001913a:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c001913f:	83 c4 10             	add    esp,0x10
c0019142:	48                   	dec    eax
c0019143:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c0019148:	85 c0                	test   eax,eax
c001914a:	75 d8                	jne    c0019124 <taskReturned+0x10>
c001914c:	fb                   	sti    
c001914d:	eb d5                	jmp    c0019124 <taskReturned+0x10>
c001914f:	90                   	nop

c0019150 <Thr::processFromPID(int)>:
c0019150:	57                   	push   edi
c0019151:	56                   	push   esi
c0019152:	53                   	push   ebx
c0019153:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019157:	fa                   	cli    
c0019158:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c001915e:	83 ec 0c             	sub    esp,0xc
c0019161:	68 24 9f 02 c0       	push   0xc0029f24
c0019166:	e8 a1 a2 00 00       	call   c002340c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001916b:	83 c4 10             	add    esp,0x10
c001916e:	89 c7                	mov    edi,eax
c0019170:	eb 16                	jmp    c0019188 <Thr::processFromPID(int)+0x38>
c0019172:	66 90                	xchg   ax,ax
c0019174:	83 ec 0c             	sub    esp,0xc
c0019177:	68 24 9f 02 c0       	push   0xc0029f24
c001917c:	e8 8b a2 00 00       	call   c002340c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019181:	83 c4 10             	add    esp,0x10
c0019184:	39 f8                	cmp    eax,edi
c0019186:	74 4c                	je     c00191d4 <Thr::processFromPID(int)+0x84>
c0019188:	83 ec 0c             	sub    esp,0xc
c001918b:	68 24 9f 02 c0       	push   0xc0029f24
c0019190:	e8 77 a2 00 00       	call   c002340c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019195:	c7 04 24 24 9f 02 c0 	mov    DWORD PTR [esp],0xc0029f24
c001919c:	89 c3                	mov    ebx,eax
c001919e:	e8 71 a2 00 00       	call   c0023414 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00191a3:	58                   	pop    eax
c00191a4:	5a                   	pop    edx
c00191a5:	53                   	push   ebx
c00191a6:	68 24 9f 02 c0       	push   0xc0029f24
c00191ab:	e8 1c a3 00 00       	call   c00234cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00191b0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00191b3:	83 c4 10             	add    esp,0x10
c00191b6:	39 30                	cmp    DWORD PTR [eax],esi
c00191b8:	75 ba                	jne    c0019174 <Thr::processFromPID(int)+0x24>
c00191ba:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c00191bf:	48                   	dec    eax
c00191c0:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c00191c5:	74 09                	je     c00191d0 <Thr::processFromPID(int)+0x80>
c00191c7:	90                   	nop
c00191c8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00191cb:	5b                   	pop    ebx
c00191cc:	5e                   	pop    esi
c00191cd:	5f                   	pop    edi
c00191ce:	c3                   	ret    
c00191cf:	90                   	nop
c00191d0:	fb                   	sti    
c00191d1:	eb f5                	jmp    c00191c8 <Thr::processFromPID(int)+0x78>
c00191d3:	90                   	nop
c00191d4:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c00191d9:	48                   	dec    eax
c00191da:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c00191df:	75 07                	jne    c00191e8 <Thr::processFromPID(int)+0x98>
c00191e1:	fb                   	sti    
c00191e2:	5b                   	pop    ebx
c00191e3:	5e                   	pop    esi
c00191e4:	5f                   	pop    edi
c00191e5:	c3                   	ret    
c00191e6:	66 90                	xchg   ax,ax
c00191e8:	5b                   	pop    ebx
c00191e9:	31 c0                	xor    eax,eax
c00191eb:	5e                   	pop    esi
c00191ec:	5f                   	pop    edi
c00191ed:	c3                   	ret    
c00191ee:	66 90                	xchg   ax,ax

c00191f0 <unblockTask(ThreadControlBlock*)>:
c00191f0:	53                   	push   ebx
c00191f1:	83 ec 08             	sub    esp,0x8
c00191f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00191f8:	fa                   	cli    
c00191f9:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c00191ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0019202:	85 c0                	test   eax,eax
c0019204:	74 66                	je     c001926c <unblockTask(ThreadControlBlock*)+0x7c>
c0019206:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0019209:	48                   	dec    eax
c001920a:	74 38                	je     c0019244 <unblockTask(ThreadControlBlock*)+0x54>
c001920c:	83 ec 0c             	sub    esp,0xc
c001920f:	68 24 9f 02 c0       	push   0xc0029f24
c0019214:	e8 f3 a1 00 00       	call   c002340c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019219:	83 c4 10             	add    esp,0x10
c001921c:	85 c0                	test   eax,eax
c001921e:	75 1c                	jne    c001923c <unblockTask(ThreadControlBlock*)+0x4c>
c0019220:	eb 5e                	jmp    c0019280 <unblockTask(ThreadControlBlock*)+0x90>
c0019222:	66 90                	xchg   ax,ax
c0019224:	83 ec 08             	sub    esp,0x8
c0019227:	50                   	push   eax
c0019228:	68 24 9f 02 c0       	push   0xc0029f24
c001922d:	e8 8a a5 00 00       	call   c00237bc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0019232:	83 c4 10             	add    esp,0x10
c0019235:	85 c0                	test   eax,eax
c0019237:	74 47                	je     c0019280 <unblockTask(ThreadControlBlock*)+0x90>
c0019239:	8d 76 00             	lea    esi,[esi+0x0]
c001923c:	39 c3                	cmp    ebx,eax
c001923e:	75 e4                	jne    c0019224 <unblockTask(ThreadControlBlock*)+0x34>
c0019240:	eb 12                	jmp    c0019254 <unblockTask(ThreadControlBlock*)+0x64>
c0019242:	66 90                	xchg   ax,ax
c0019244:	83 ec 0c             	sub    esp,0xc
c0019247:	68 3a 6b 02 c0       	push   0xc0026b3a
c001924c:	e8 f6 3d ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0019251:	83 c4 10             	add    esp,0x10
c0019254:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c0019259:	48                   	dec    eax
c001925a:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c001925f:	75 03                	jne    c0019264 <unblockTask(ThreadControlBlock*)+0x74>
c0019261:	fb                   	sti    
c0019262:	66 90                	xchg   ax,ax
c0019264:	83 c4 08             	add    esp,0x8
c0019267:	5b                   	pop    ebx
c0019268:	c3                   	ret    
c0019269:	8d 76 00             	lea    esi,[esi+0x0]
c001926c:	83 ec 0c             	sub    esp,0xc
c001926f:	68 23 6b 02 c0       	push   0xc0026b23
c0019274:	e8 ce 3d ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0019279:	83 c4 10             	add    esp,0x10
c001927c:	eb d6                	jmp    c0019254 <unblockTask(ThreadControlBlock*)+0x64>
c001927e:	66 90                	xchg   ax,ax
c0019280:	83 ec 08             	sub    esp,0x8
c0019283:	53                   	push   ebx
c0019284:	68 24 9f 02 c0       	push   0xc0029f24
c0019289:	e8 3e a2 00 00       	call   c00234cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001928e:	83 c4 10             	add    esp,0x10
c0019291:	eb c1                	jmp    c0019254 <unblockTask(ThreadControlBlock*)+0x64>
c0019293:	90                   	nop

c0019294 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0019294:	55                   	push   ebp
c0019295:	57                   	push   edi
c0019296:	56                   	push   esi
c0019297:	53                   	push   ebx
c0019298:	83 ec 1c             	sub    esp,0x1c
c001929b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001929f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00192a2:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c00192a8:	85 ff                	test   edi,edi
c00192aa:	7e 24                	jle    c00192d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c00192ac:	31 f6                	xor    esi,esi
c00192ae:	66 90                	xchg   ax,ax
c00192b0:	83 ec 0c             	sub    esp,0xc
c00192b3:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c00192ba:	46                   	inc    esi
c00192bb:	e8 ab 0a ff ff       	call   c0009d6b <free>
c00192c0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00192c3:	83 c4 10             	add    esp,0x10
c00192c6:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00192cc:	7f e2                	jg     c00192b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00192ce:	66 90                	xchg   ax,ax
c00192d0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00192da:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00192df:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00192e2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00192e5:	d3 c0                	rol    eax,cl
c00192e7:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c00192ee:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00192f1:	89 f7                	mov    edi,esi
c00192f3:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00192fb:	0f 85 73 01 00 00    	jne    c0019474 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0019301:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0019307:	85 ed                	test   ebp,ebp
c0019309:	74 1d                	je     c0019328 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c001930b:	83 ec 0c             	sub    esp,0xc
c001930e:	55                   	push   ebp
c001930f:	e8 ba bb ff ff       	call   c0014ece <EnvVarContainer::~EnvVarContainer()>
c0019314:	59                   	pop    ecx
c0019315:	5e                   	pop    esi
c0019316:	6a 0c                	push   0xc
c0019318:	55                   	push   ebp
c0019319:	e8 48 3c ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c001931e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0019321:	83 c4 10             	add    esp,0x10
c0019324:	89 f7                	mov    edi,esi
c0019326:	66 90                	xchg   ax,ax
c0019328:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001932e:	85 c0                	test   eax,eax
c0019330:	0f 84 b2 00 00 00    	je     c00193e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0019336:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0019339:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001933d:	31 c9                	xor    ecx,ecx
c001933f:	eb 17                	jmp    c0019358 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0019341:	8d 76 00             	lea    esi,[esi+0x0]
c0019344:	41                   	inc    ecx
c0019345:	83 f9 10             	cmp    ecx,0x10
c0019348:	0f 84 9a 00 00 00    	je     c00193e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c001934e:	66 90                	xchg   ax,ax
c0019350:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0019356:	66 90                	xchg   ax,ax
c0019358:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001935f:	d3 fa                	sar    edx,cl
c0019361:	83 e2 01             	and    edx,0x1
c0019364:	74 de                	je     c0019344 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0019366:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0019369:	01 d2                	add    edx,edx
c001936b:	01 ca                	add    edx,ecx
c001936d:	8d 14 92             	lea    edx,[edx+edx*4]
c0019370:	01 d0                	add    eax,edx
c0019372:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0019378:	83 fd 07             	cmp    ebp,0x7
c001937b:	75 c7                	jne    c0019344 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001937d:	05 40 02 00 00       	add    eax,0x240
c0019382:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0019385:	83 fd ff             	cmp    ebp,0xffffffff
c0019388:	0f 8c ee 00 00 00    	jl     c001947c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c001938e:	0f 84 ac 01 00 00    	je     c0019540 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0019394:	85 ed                	test   ebp,ebp
c0019396:	0f 84 90 01 00 00    	je     c001952c <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c001939c:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001939e:	75 a4                	jne    c0019344 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00193a0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00193a6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00193aa:	01 d0                	add    eax,edx
c00193ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00193b0:	83 ec 0c             	sub    esp,0xc
c00193b3:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00193b9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00193bc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00193c2:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00193c9:	50                   	push   eax
c00193ca:	e8 21 fe ff ff       	call   c00191f0 <unblockTask(ThreadControlBlock*)>
c00193cf:	83 c4 10             	add    esp,0x10
c00193d2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00193d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00193d9:	89 f7                	mov    edi,esi
c00193db:	41                   	inc    ecx
c00193dc:	83 f9 10             	cmp    ecx,0x10
c00193df:	0f 85 6b ff ff ff    	jne    c0019350 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00193e5:	8d 76 00             	lea    esi,[esi+0x0]
c00193e8:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00193ee:	85 c0                	test   eax,eax
c00193f0:	74 62                	je     c0019454 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00193f2:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00193f8:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00193fe:	74 54                	je     c0019454 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0019400:	83 ec 0c             	sub    esp,0xc
c0019403:	68 24 9f 02 c0       	push   0xc0029f24
c0019408:	e8 ff 9f 00 00       	call   c002340c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001940d:	c7 04 24 24 9f 02 c0 	mov    DWORD PTR [esp],0xc0029f24
c0019414:	89 c7                	mov    edi,eax
c0019416:	e8 d5 9f 00 00       	call   c00233f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001941b:	83 c4 10             	add    esp,0x10
c001941e:	84 c0                	test   al,al
c0019420:	0f 84 ce 00 00 00    	je     c00194f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0019426:	66 90                	xchg   ax,ax
c0019428:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001942b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0019431:	85 d2                	test   edx,edx
c0019433:	74 0f                	je     c0019444 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0019435:	83 ec 0c             	sub    esp,0xc
c0019438:	8b 02                	mov    eax,DWORD PTR [edx]
c001943a:	52                   	push   edx
c001943b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001943e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019441:	83 c4 10             	add    esp,0x10
c0019444:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001944e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0019451:	8d 76 00             	lea    esi,[esi+0x0]
c0019454:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001945a:	85 db                	test   ebx,ebx
c001945c:	74 16                	je     c0019474 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c001945e:	83 ec 0c             	sub    esp,0xc
c0019461:	53                   	push   ebx
c0019462:	e8 e5 2d ff ff       	call   c000c24c <VAS::~VAS()>
c0019467:	58                   	pop    eax
c0019468:	5a                   	pop    edx
c0019469:	6a 14                	push   0x14
c001946b:	53                   	push   ebx
c001946c:	e8 f5 3a ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0019471:	83 c4 10             	add    esp,0x10
c0019474:	83 c4 1c             	add    esp,0x1c
c0019477:	5b                   	pop    ebx
c0019478:	5e                   	pop    esi
c0019479:	5f                   	pop    edi
c001947a:	5d                   	pop    ebp
c001947b:	c3                   	ret    
c001947c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019480:	83 ec 0c             	sub    esp,0xc
c0019483:	68 ec 6b 02 c0       	push   0xc0026bec
c0019488:	e8 9c bc ff ff       	call   c0015129 <Krnl::panic(char const*)>
c001948d:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0019490:	83 c4 10             	add    esp,0x10
c0019493:	89 f7                	mov    edi,esi
c0019495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019499:	e9 a6 fe ff ff       	jmp    c0019344 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001949e:	66 90                	xchg   ax,ax
c00194a0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00194a6:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00194ac:	75 1e                	jne    c00194cc <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00194ae:	83 ec 0c             	sub    esp,0xc
c00194b1:	68 54 6c 02 c0       	push   0xc0026c54
c00194b6:	e8 8c 3b ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00194bb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00194c2:	e8 65 fa ff ff       	call   c0018f2c <blockTask(TaskState)>
c00194c7:	83 c4 10             	add    esp,0x10
c00194ca:	66 90                	xchg   ax,ax
c00194cc:	83 ec 08             	sub    esp,0x8
c00194cf:	56                   	push   esi
c00194d0:	68 24 9f 02 c0       	push   0xc0029f24
c00194d5:	e8 f2 9f 00 00       	call   c00234cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00194da:	c7 04 24 24 9f 02 c0 	mov    DWORD PTR [esp],0xc0029f24
c00194e1:	e8 26 9f 00 00       	call   c002340c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00194e6:	83 c4 10             	add    esp,0x10
c00194e9:	39 f8                	cmp    eax,edi
c00194eb:	0f 84 37 ff ff ff    	je     c0019428 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c00194f1:	8d 76 00             	lea    esi,[esi+0x0]
c00194f4:	83 ec 0c             	sub    esp,0xc
c00194f7:	68 24 9f 02 c0       	push   0xc0029f24
c00194fc:	e8 0b 9f 00 00       	call   c002340c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019501:	c7 04 24 24 9f 02 c0 	mov    DWORD PTR [esp],0xc0029f24
c0019508:	89 c6                	mov    esi,eax
c001950a:	e8 05 9f 00 00       	call   c0023414 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001950f:	83 c4 10             	add    esp,0x10
c0019512:	39 f3                	cmp    ebx,esi
c0019514:	74 b6                	je     c00194cc <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0019516:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0019519:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001951c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0019522:	75 a8                	jne    c00194cc <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0019524:	e9 77 ff ff ff       	jmp    c00194a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0019529:	8d 76 00             	lea    esi,[esi+0x0]
c001952c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019530:	83 ec 0c             	sub    esp,0xc
c0019533:	68 20 6c 02 c0       	push   0xc0026c20
c0019538:	e9 4b ff ff ff       	jmp    c0019488 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001953d:	8d 76 00             	lea    esi,[esi+0x0]
c0019540:	8b 36                	mov    esi,DWORD PTR [esi]
c0019542:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019546:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0019549:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001954c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0019552:	01 d7                	add    edi,edx
c0019554:	89 f8                	mov    eax,edi
c0019556:	e9 51 fe ff ff       	jmp    c00193ac <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c001955b:	90                   	nop

c001955c <cleanerTaskFunction(void*)>:
c001955c:	53                   	push   ebx
c001955d:	83 ec 08             	sub    esp,0x8
c0019560:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c0019565:	48                   	dec    eax
c0019566:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c001956b:	75 03                	jne    c0019570 <cleanerTaskFunction(void*)+0x14>
c001956d:	fb                   	sti    
c001956e:	66 90                	xchg   ax,ax
c0019570:	fa                   	cli    
c0019571:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c0019576:	80 3d ec 9e 02 c0 00 	cmp    BYTE PTR ds:0xc0029eec,0x0
c001957d:	8d 50 01             	lea    edx,[eax+0x1]
c0019580:	89 15 08 9f 02 c0    	mov    DWORD PTR ds:0xc0029f08,edx
c0019586:	0f 84 ac 00 00 00    	je     c0019638 <cleanerTaskFunction(void*)+0xdc>
c001958c:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c0019591:	85 c0                	test   eax,eax
c0019593:	75 03                	jne    c0019598 <cleanerTaskFunction(void*)+0x3c>
c0019595:	fb                   	sti    
c0019596:	66 90                	xchg   ax,ax
c0019598:	c6 05 ec 9e 02 c0 00 	mov    BYTE PTR ds:0xc0029eec,0x0
c001959f:	fa                   	cli    
c00195a0:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c00195a6:	ff 05 04 9f 02 c0    	inc    DWORD PTR ds:0xc0029f04
c00195ac:	fa                   	cli    
c00195ad:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c00195b3:	eb 2b                	jmp    c00195e0 <cleanerTaskFunction(void*)+0x84>
c00195b5:	8d 76 00             	lea    esi,[esi+0x0]
c00195b8:	83 ec 0c             	sub    esp,0xc
c00195bb:	68 0c 9f 02 c0       	push   0xc0029f0c
c00195c0:	e8 47 9e 00 00       	call   c002340c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00195c5:	c7 04 24 0c 9f 02 c0 	mov    DWORD PTR [esp],0xc0029f0c
c00195cc:	89 c3                	mov    ebx,eax
c00195ce:	e8 41 9e 00 00       	call   c0023414 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00195d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00195d6:	e8 b9 fc ff ff       	call   c0019294 <cleanupTerminatedTask(ThreadControlBlock*)>
c00195db:	83 c4 10             	add    esp,0x10
c00195de:	66 90                	xchg   ax,ax
c00195e0:	83 ec 0c             	sub    esp,0xc
c00195e3:	68 0c 9f 02 c0       	push   0xc0029f0c
c00195e8:	e8 03 9e 00 00       	call   c00233f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00195ed:	83 c4 10             	add    esp,0x10
c00195f0:	84 c0                	test   al,al
c00195f2:	74 c4                	je     c00195b8 <cleanerTaskFunction(void*)+0x5c>
c00195f4:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c00195f9:	48                   	dec    eax
c00195fa:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c00195ff:	75 03                	jne    c0019604 <cleanerTaskFunction(void*)+0xa8>
c0019601:	fb                   	sti    
c0019602:	66 90                	xchg   ax,ax
c0019604:	a1 04 9f 02 c0       	mov    eax,ds:0xc0029f04
c0019609:	48                   	dec    eax
c001960a:	a3 04 9f 02 c0       	mov    ds:0xc0029f04,eax
c001960f:	0f 85 4b ff ff ff    	jne    c0019560 <cleanerTaskFunction(void*)+0x4>
c0019615:	a1 00 9f 02 c0       	mov    eax,ds:0xc0029f00
c001961a:	85 c0                	test   eax,eax
c001961c:	0f 84 3e ff ff ff    	je     c0019560 <cleanerTaskFunction(void*)+0x4>
c0019622:	c7 05 00 9f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029f00,0x0
c001962c:	e8 03 f7 ff ff       	call   c0018d34 <schedule()>
c0019631:	e9 2a ff ff ff       	jmp    c0019560 <cleanerTaskFunction(void*)+0x4>
c0019636:	66 90                	xchg   ax,ax
c0019638:	83 ec 0c             	sub    esp,0xc
c001963b:	6a 02                	push   0x2
c001963d:	e8 c2 f8 ff ff       	call   c0018f04 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0019642:	83 c4 10             	add    esp,0x10
c0019645:	e9 4e ff ff ff       	jmp    c0019598 <cleanerTaskFunction(void*)+0x3c>
c001964a:	66 90                	xchg   ax,ax

c001964c <terminateTask(int)>:
c001964c:	83 ec 14             	sub    esp,0x14
c001964f:	fa                   	cli    
c0019650:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c0019656:	ff 05 04 9f 02 c0    	inc    DWORD PTR ds:0xc0029f04
c001965c:	fa                   	cli    
c001965d:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c0019663:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019667:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001966c:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001966f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019674:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0019677:	50                   	push   eax
c0019678:	68 0c 9f 02 c0       	push   0xc0029f0c
c001967d:	e8 4a 9e 00 00       	call   c00234cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019682:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019687:	83 c4 10             	add    esp,0x10
c001968a:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0019691:	a1 e8 9e 02 c0       	mov    eax,ds:0xc0029ee8
c0019696:	85 c0                	test   eax,eax
c0019698:	74 5e                	je     c00196f8 <terminateTask(int)+0xac>
c001969a:	83 ec 0c             	sub    esp,0xc
c001969d:	c6 05 ec 9e 02 c0 01 	mov    BYTE PTR ds:0xc0029eec,0x1
c00196a4:	50                   	push   eax
c00196a5:	e8 46 fb ff ff       	call   c00191f0 <unblockTask(ThreadControlBlock*)>
c00196aa:	83 c4 10             	add    esp,0x10
c00196ad:	8d 76 00             	lea    esi,[esi+0x0]
c00196b0:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c00196b5:	48                   	dec    eax
c00196b6:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c00196bb:	75 03                	jne    c00196c0 <terminateTask(int)+0x74>
c00196bd:	fb                   	sti    
c00196be:	66 90                	xchg   ax,ax
c00196c0:	a1 04 9f 02 c0       	mov    eax,ds:0xc0029f04
c00196c5:	48                   	dec    eax
c00196c6:	a3 04 9f 02 c0       	mov    ds:0xc0029f04,eax
c00196cb:	75 0b                	jne    c00196d8 <terminateTask(int)+0x8c>
c00196cd:	83 3d 00 9f 02 c0 00 	cmp    DWORD PTR ds:0xc0029f00,0x0
c00196d4:	75 36                	jne    c001970c <terminateTask(int)+0xc0>
c00196d6:	66 90                	xchg   ax,ax
c00196d8:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c00196dd:	48                   	dec    eax
c00196de:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c00196e3:	75 03                	jne    c00196e8 <terminateTask(int)+0x9c>
c00196e5:	fb                   	sti    
c00196e6:	66 90                	xchg   ax,ax
c00196e8:	fa                   	cli    
c00196e9:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c00196ef:	90                   	nop
c00196f0:	e8 3f f6 ff ff       	call   c0018d34 <schedule()>
c00196f5:	eb e1                	jmp    c00196d8 <terminateTask(int)+0x8c>
c00196f7:	90                   	nop
c00196f8:	83 ec 0c             	sub    esp,0xc
c00196fb:	68 51 6b 02 c0       	push   0xc0026b51
c0019700:	e8 42 39 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0019705:	83 c4 10             	add    esp,0x10
c0019708:	eb a6                	jmp    c00196b0 <terminateTask(int)+0x64>
c001970a:	66 90                	xchg   ax,ax
c001970c:	c7 05 00 9f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029f00,0x0
c0019716:	eb d8                	jmp    c00196f0 <terminateTask(int)+0xa4>

c0019718 <Thr::terminateFromIRQ(int)>:
c0019718:	83 ec 18             	sub    esp,0x18
c001971b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001971f:	e8 28 ff ff ff       	call   c001964c <terminateTask(int)>

c0019724 <Semaphore::release()>:
c0019724:	83 ec 0c             	sub    esp,0xc
c0019727:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001972b:	fa                   	cli    
c001972c:	a1 04 9f 02 c0       	mov    eax,ds:0xc0029f04
c0019731:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c0019737:	8d 48 01             	lea    ecx,[eax+0x1]
c001973a:	89 0d 04 9f 02 c0    	mov    DWORD PTR ds:0xc0029f04,ecx
c0019740:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0019743:	85 c9                	test   ecx,ecx
c0019745:	74 41                	je     c0019788 <Semaphore::release()+0x64>
c0019747:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001974a:	83 ec 0c             	sub    esp,0xc
c001974d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019750:	51                   	push   ecx
c0019751:	e8 9a fa ff ff       	call   c00191f0 <unblockTask(ThreadControlBlock*)>
c0019756:	a1 04 9f 02 c0       	mov    eax,ds:0xc0029f04
c001975b:	83 c4 10             	add    esp,0x10
c001975e:	48                   	dec    eax
c001975f:	90                   	nop
c0019760:	a3 04 9f 02 c0       	mov    ds:0xc0029f04,eax
c0019765:	85 c0                	test   eax,eax
c0019767:	75 0b                	jne    c0019774 <Semaphore::release()+0x50>
c0019769:	a1 00 9f 02 c0       	mov    eax,ds:0xc0029f00
c001976e:	85 c0                	test   eax,eax
c0019770:	75 1e                	jne    c0019790 <Semaphore::release()+0x6c>
c0019772:	66 90                	xchg   ax,ax
c0019774:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c0019779:	48                   	dec    eax
c001977a:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c001977f:	75 03                	jne    c0019784 <Semaphore::release()+0x60>
c0019781:	fb                   	sti    
c0019782:	66 90                	xchg   ax,ax
c0019784:	83 c4 0c             	add    esp,0xc
c0019787:	c3                   	ret    
c0019788:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001978b:	eb d3                	jmp    c0019760 <Semaphore::release()+0x3c>
c001978d:	8d 76 00             	lea    esi,[esi+0x0]
c0019790:	c7 05 00 9f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029f00,0x0
c001979a:	e8 95 f5 ff ff       	call   c0018d34 <schedule()>
c001979f:	eb d3                	jmp    c0019774 <Semaphore::release()+0x50>
c00197a1:	8d 76 00             	lea    esi,[esi+0x0]

c00197a4 <__static_initialization_and_destruction_0(int, int)>:
c00197a4:	83 ec 0c             	sub    esp,0xc
c00197a7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00197ac:	0f 85 8e 00 00 00    	jne    c0019840 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00197b2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00197ba:	0f 85 80 00 00 00    	jne    c0019840 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00197c0:	83 ec 0c             	sub    esp,0xc
c00197c3:	68 24 9f 02 c0       	push   0xc0029f24
c00197c8:	e8 ab 9f 00 00       	call   c0023778 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00197cd:	83 c4 10             	add    esp,0x10
c00197d0:	83 ec 04             	sub    esp,0x4
c00197d3:	68 48 7c 02 c0       	push   0xc0027c48
c00197d8:	68 24 9f 02 c0       	push   0xc0029f24
c00197dd:	68 28 37 02 c0       	push   0xc0023728
c00197e2:	e8 f9 36 ff ff       	call   c000cee0 <__cxa_atexit>
c00197e7:	83 c4 10             	add    esp,0x10
c00197ea:	83 ec 0c             	sub    esp,0xc
c00197ed:	68 18 9f 02 c0       	push   0xc0029f18
c00197f2:	e8 81 9f 00 00       	call   c0023778 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00197f7:	83 c4 10             	add    esp,0x10
c00197fa:	83 ec 04             	sub    esp,0x4
c00197fd:	68 48 7c 02 c0       	push   0xc0027c48
c0019802:	68 18 9f 02 c0       	push   0xc0029f18
c0019807:	68 28 37 02 c0       	push   0xc0023728
c001980c:	e8 cf 36 ff ff       	call   c000cee0 <__cxa_atexit>
c0019811:	83 c4 10             	add    esp,0x10
c0019814:	83 ec 0c             	sub    esp,0xc
c0019817:	68 0c 9f 02 c0       	push   0xc0029f0c
c001981c:	e8 57 9f 00 00       	call   c0023778 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019821:	83 c4 10             	add    esp,0x10
c0019824:	83 ec 04             	sub    esp,0x4
c0019827:	68 48 7c 02 c0       	push   0xc0027c48
c001982c:	68 0c 9f 02 c0       	push   0xc0029f0c
c0019831:	68 28 37 02 c0       	push   0xc0023728
c0019836:	e8 a5 36 ff ff       	call   c000cee0 <__cxa_atexit>
c001983b:	83 c4 10             	add    esp,0x10
c001983e:	66 90                	xchg   ax,ax
c0019840:	90                   	nop
c0019841:	83 c4 0c             	add    esp,0xc
c0019844:	c3                   	ret    
c0019845:	8d 76 00             	lea    esi,[esi+0x0]

c0019848 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0019848:	83 ec 0c             	sub    esp,0xc
c001984b:	83 ec 08             	sub    esp,0x8
c001984e:	68 ff ff 00 00       	push   0xffff
c0019853:	6a 01                	push   0x1
c0019855:	e8 4a ff ff ff       	call   c00197a4 <__static_initialization_and_destruction_0(int, int)>
c001985a:	83 c4 10             	add    esp,0x10
c001985d:	83 c4 0c             	add    esp,0xc
c0019860:	c3                   	ret    

c0019861 <Vm::inbv(unsigned short)>:
c0019861:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019865:	66 81 fa fe fe       	cmp    dx,0xfefe
c001986a:	75 06                	jne    c0019872 <Vm::inbv(unsigned short)+0x11>
c001986c:	a0 6c 9f 02 c0       	mov    al,ds:0xc0029f6c
c0019871:	c3                   	ret    
c0019872:	ec                   	in     al,dx
c0019873:	c3                   	ret    

c0019874 <Vm::outbv(unsigned short, unsigned char)>:
c0019874:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001987c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0019881:	75 25                	jne    c00198a8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0019883:	8b 0d 6c 9f 02 c0    	mov    ecx,DWORD PTR ds:0xc0029f6c
c0019889:	8d 51 01             	lea    edx,[ecx+0x1]
c001988c:	88 81 80 9f 02 c0    	mov    BYTE PTR [ecx-0x3ffd6080],al
c0019892:	89 15 6c 9f 02 c0    	mov    DWORD PTR ds:0xc0029f6c,edx
c0019898:	83 fa 20             	cmp    edx,0x20
c001989b:	75 0c                	jne    c00198a9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001989d:	c7 05 6c 9f 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0029f6c,0x1f
c00198a7:	c3                   	ret    
c00198a8:	ee                   	out    dx,al
c00198a9:	c3                   	ret    

c00198aa <Vm::realToLinear(unsigned short, unsigned short)>:
c00198aa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00198af:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198b4:	c1 e0 04             	shl    eax,0x4
c00198b7:	01 d0                	add    eax,edx
c00198b9:	c3                   	ret    

c00198ba <Vm::getSegment(unsigned int)>:
c00198ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00198be:	c1 e8 10             	shr    eax,0x10
c00198c1:	c3                   	ret    

c00198c2 <Vm::getOffset(unsigned int)>:
c00198c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00198c6:	c3                   	ret    

c00198c7 <Vm::mainloop2()>:
c00198c7:	83 ec 18             	sub    esp,0x18
c00198ca:	fa                   	cli    
c00198cb:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c00198d1:	6a 02                	push   0x2
c00198d3:	c6 05 65 9f 02 c0 01 	mov    BYTE PTR ds:0xc0029f65,0x1
c00198da:	e8 25 f6 ff ff       	call   c0018f04 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00198df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00198e4:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00198e8:	52                   	push   edx
c00198e9:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00198ed:	52                   	push   edx
c00198ee:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00198f2:	52                   	push   edx
c00198f3:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00198f7:	50                   	push   eax
c00198f8:	e8 32 69 fe ff       	call   c000022f <goToVM86>
c00198fd:	83 c4 2c             	add    esp,0x2c
c0019900:	c3                   	ret    

c0019901 <Vm::mainVm8086Loop(void*)>:
c0019901:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c0019906:	48                   	dec    eax
c0019907:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c001990c:	75 01                	jne    c001990f <Vm::mainVm8086Loop(void*)+0xe>
c001990e:	fb                   	sti    
c001990f:	eb b6                	jmp    c00198c7 <Vm::mainloop2()>

c0019911 <Vm::mainloop3(unsigned long)>:
c0019911:	83 ec 18             	sub    esp,0x18
c0019914:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019918:	fa                   	cli    
c0019919:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c001991f:	6a 02                	push   0x2
c0019921:	c6 05 64 9f 02 c0 01 	mov    BYTE PTR ds:0xc0029f64,0x1
c0019928:	a3 60 9f 02 c0       	mov    ds:0xc0029f60,eax
c001992d:	e8 d2 f5 ff ff       	call   c0018f04 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0019932:	83 c4 1c             	add    esp,0x1c
c0019935:	eb 90                	jmp    c00198c7 <Vm::mainloop2()>

c0019937 <Vm::initialise8086()>:
c0019937:	83 ec 0c             	sub    esp,0xc
c001993a:	68 80 00 00 00       	push   0x80
c001993f:	6a 00                	push   0x0
c0019941:	68 01 99 01 c0       	push   0xc0019901
c0019946:	ff 35 30 9f 02 c0    	push   DWORD PTR ds:0xc0029f30
c001994c:	e8 c7 f1 ff ff       	call   c0018b18 <Process::createThread(void (*)(void*), void*, int)>
c0019951:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019958:	a3 68 9f 02 c0       	mov    ds:0xc0029f68,eax
c001995d:	68 00 01 00 00       	push   0x100
c0019962:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c0019967:	6a 00                	push   0x0
c0019969:	6a 00                	push   0x0
c001996b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0019971:	e8 48 2d ff ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019976:	83 c4 2c             	add    esp,0x2c
c0019979:	c3                   	ret    

c001997a <Vm::finish8086()>:
c001997a:	53                   	push   ebx
c001997b:	83 ec 08             	sub    esp,0x8
c001997e:	fa                   	cli    
c001997f:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c0019985:	80 3d 64 9f 02 c0 00 	cmp    BYTE PTR ds:0xc0029f64,0x0
c001998c:	75 15                	jne    c00199a3 <Vm::finish8086()+0x29>
c001998e:	e8 a1 f3 ff ff       	call   c0018d34 <schedule()>
c0019993:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c0019998:	48                   	dec    eax
c0019999:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c001999e:	75 de                	jne    c001997e <Vm::finish8086()+0x4>
c00199a0:	fb                   	sti    
c00199a1:	eb db                	jmp    c001997e <Vm::finish8086()+0x4>
c00199a3:	83 ec 0c             	sub    esp,0xc
c00199a6:	8b 1d 60 9f 02 c0    	mov    ebx,DWORD PTR ds:0xc0029f60
c00199ac:	ff 35 68 9f 02 c0    	push   DWORD PTR ds:0xc0029f68
c00199b2:	c6 05 64 9f 02 c0 00 	mov    BYTE PTR ds:0xc0029f64,0x0
c00199b9:	e8 32 f8 ff ff       	call   c00191f0 <unblockTask(ThreadControlBlock*)>
c00199be:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c00199c3:	83 c4 10             	add    esp,0x10
c00199c6:	8d 50 ff             	lea    edx,[eax-0x1]
c00199c9:	89 15 08 9f 02 c0    	mov    DWORD PTR ds:0xc0029f08,edx
c00199cf:	85 d2                	test   edx,edx
c00199d1:	75 01                	jne    c00199d4 <Vm::finish8086()+0x5a>
c00199d3:	fb                   	sti    
c00199d4:	89 d8                	mov    eax,ebx
c00199d6:	83 c4 08             	add    esp,0x8
c00199d9:	5b                   	pop    ebx
c00199da:	c3                   	ret    

c00199db <Vm::getOutput8086(unsigned char*)>:
c00199db:	57                   	push   edi
c00199dc:	8b 0d 6c 9f 02 c0    	mov    ecx,DWORD PTR ds:0xc0029f6c
c00199e2:	56                   	push   esi
c00199e3:	be 80 9f 02 c0       	mov    esi,0xc0029f80
c00199e8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00199ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00199ee:	a1 6c 9f 02 c0       	mov    eax,ds:0xc0029f6c
c00199f3:	5e                   	pop    esi
c00199f4:	c7 05 6c 9f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029f6c,0x0
c00199fe:	5f                   	pop    edi
c00199ff:	c3                   	ret    

c0019a00 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019a00:	55                   	push   ebp
c0019a01:	57                   	push   edi
c0019a02:	56                   	push   esi
c0019a03:	53                   	push   ebx
c0019a04:	83 ec 0c             	sub    esp,0xc
c0019a07:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019a0b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0019a0f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0019a13:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019a17:	fa                   	cli    
c0019a18:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c0019a1e:	80 3d 65 9f 02 c0 00 	cmp    BYTE PTR ds:0xc0029f65,0x0
c0019a25:	75 15                	jne    c0019a3c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0019a27:	e8 08 f3 ff ff       	call   c0018d34 <schedule()>
c0019a2c:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c0019a31:	48                   	dec    eax
c0019a32:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c0019a37:	75 de                	jne    c0019a17 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019a39:	fb                   	sti    
c0019a3a:	eb db                	jmp    c0019a17 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019a3c:	a1 68 9f 02 c0       	mov    eax,ds:0xc0029f68
c0019a41:	c7 05 6c 9f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029f6c,0x0
c0019a4b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0019a4f:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0019a53:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0019a57:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0019a5b:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0019a5f:	0f b7 ff             	movzx  edi,di
c0019a62:	0f b7 f6             	movzx  esi,si
c0019a65:	50                   	push   eax
c0019a66:	6a 20                	push   0x20
c0019a68:	6a 00                	push   0x0
c0019a6a:	68 80 9f 02 c0       	push   0xc0029f80
c0019a6f:	e8 10 6c fe ff       	call   c0000684 <memset>
c0019a74:	5a                   	pop    edx
c0019a75:	59                   	pop    ecx
c0019a76:	57                   	push   edi
c0019a77:	56                   	push   esi
c0019a78:	e8 2d fe ff ff       	call   c00198aa <Vm::realToLinear(unsigned short, unsigned short)>
c0019a7d:	83 c4 10             	add    esp,0x10
c0019a80:	89 c7                	mov    edi,eax
c0019a82:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019a86:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019a8a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a8c:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c0019a91:	c6 05 65 9f 02 c0 00 	mov    BYTE PTR ds:0xc0029f65,0x0
c0019a98:	48                   	dec    eax
c0019a99:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c0019a9e:	75 01                	jne    c0019aa1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0019aa0:	fb                   	sti    
c0019aa1:	83 ec 0c             	sub    esp,0xc
c0019aa4:	ff 35 68 9f 02 c0    	push   DWORD PTR ds:0xc0029f68
c0019aaa:	e8 41 f7 ff ff       	call   c00191f0 <unblockTask(ThreadControlBlock*)>
c0019aaf:	83 c4 1c             	add    esp,0x1c
c0019ab2:	b0 01                	mov    al,0x1
c0019ab4:	5b                   	pop    ebx
c0019ab5:	5e                   	pop    esi
c0019ab6:	5f                   	pop    edi
c0019ab7:	5d                   	pop    ebp
c0019ab8:	c3                   	ret    

c0019ab9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019ab9:	55                   	push   ebp
c0019aba:	57                   	push   edi
c0019abb:	56                   	push   esi
c0019abc:	53                   	push   ebx
c0019abd:	83 ec 2c             	sub    esp,0x2c
c0019ac0:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0019ac4:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019ac8:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0019acc:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0019ad0:	fa                   	cli    
c0019ad1:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c0019ad7:	0f b6 35 65 9f 02 c0 	movzx  esi,BYTE PTR ds:0xc0029f65
c0019ade:	89 f0                	mov    eax,esi
c0019ae0:	84 c0                	test   al,al
c0019ae2:	75 1d                	jne    c0019b01 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0019ae4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019ae8:	e8 47 f2 ff ff       	call   c0018d34 <schedule()>
c0019aed:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c0019af2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019af6:	48                   	dec    eax
c0019af7:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c0019afc:	75 d2                	jne    c0019ad0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019afe:	fb                   	sti    
c0019aff:	eb cf                	jmp    c0019ad0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019b01:	a1 68 9f 02 c0       	mov    eax,ds:0xc0029f68
c0019b06:	c7 05 6c 9f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029f6c,0x0
c0019b10:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0019b14:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0019b18:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0019b1c:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0019b20:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0019b24:	50                   	push   eax
c0019b25:	6a 20                	push   0x20
c0019b27:	6a 00                	push   0x0
c0019b29:	68 80 9f 02 c0       	push   0xc0029f80
c0019b2e:	e8 51 6b fe ff       	call   c0000684 <memset>
c0019b33:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019b3a:	e8 1c 02 ff ff       	call   c0009d5b <malloc>
c0019b3f:	83 c4 0c             	add    esp,0xc
c0019b42:	89 c3                	mov    ebx,eax
c0019b44:	ff 35 30 9f 02 c0    	push   DWORD PTR ds:0xc0029f30
c0019b4a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019b4e:	50                   	push   eax
c0019b4f:	e8 5e 3a ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0019b54:	83 c4 10             	add    esp,0x10
c0019b57:	85 db                	test   ebx,ebx
c0019b59:	75 0a                	jne    c0019b65 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0019b5b:	83 ec 0c             	sub    esp,0xc
c0019b5e:	68 7c 6c 02 c0       	push   0xc0026c7c
c0019b63:	eb 3e                	jmp    c0019ba3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019b65:	50                   	push   eax
c0019b66:	8d 44 24 17          	lea    eax,[esp+0x17]
c0019b6a:	50                   	push   eax
c0019b6b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019b6f:	50                   	push   eax
c0019b70:	53                   	push   ebx
c0019b71:	e8 c2 3d ff ff       	call   c000d938 <File::stat(unsigned long long*, bool*)>
c0019b76:	83 c4 10             	add    esp,0x10
c0019b79:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0019b7e:	74 0a                	je     c0019b8a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0019b80:	83 ec 0c             	sub    esp,0xc
c0019b83:	68 90 6c 02 c0       	push   0xc0026c90
c0019b88:	eb 19                	jmp    c0019ba3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019b8a:	51                   	push   ecx
c0019b8b:	51                   	push   ecx
c0019b8c:	6a 01                	push   0x1
c0019b8e:	53                   	push   ebx
c0019b8f:	e8 f8 3a ff ff       	call   c000d68c <File::open(FileOpenMode)>
c0019b94:	83 c4 10             	add    esp,0x10
c0019b97:	85 c0                	test   eax,eax
c0019b99:	74 24                	je     c0019bbf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0019b9b:	83 ec 0c             	sub    esp,0xc
c0019b9e:	68 a9 6c 02 c0       	push   0xc0026ca9
c0019ba3:	e8 81 b5 ff ff       	call   c0015129 <Krnl::panic(char const*)>
c0019ba8:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c0019bad:	83 c4 10             	add    esp,0x10
c0019bb0:	48                   	dec    eax
c0019bb1:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c0019bb6:	85 c0                	test   eax,eax
c0019bb8:	75 01                	jne    c0019bbb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0019bba:	fb                   	sti    
c0019bbb:	31 f6                	xor    esi,esi
c0019bbd:	eb 58                	jmp    c0019c17 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0019bbf:	0f b7 ed             	movzx  ebp,bp
c0019bc2:	50                   	push   eax
c0019bc3:	0f b7 ff             	movzx  edi,di
c0019bc6:	50                   	push   eax
c0019bc7:	55                   	push   ebp
c0019bc8:	57                   	push   edi
c0019bc9:	e8 dc fc ff ff       	call   c00198aa <Vm::realToLinear(unsigned short, unsigned short)>
c0019bce:	5a                   	pop    edx
c0019bcf:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019bd1:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019bd5:	51                   	push   ecx
c0019bd6:	50                   	push   eax
c0019bd7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019bdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019bdf:	53                   	push   ebx
c0019be0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019be3:	83 c4 14             	add    esp,0x14
c0019be6:	53                   	push   ebx
c0019be7:	e8 fe 3a ff ff       	call   c000d6ea <File::close()>
c0019bec:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c0019bf1:	83 c4 10             	add    esp,0x10
c0019bf4:	48                   	dec    eax
c0019bf5:	c6 05 65 9f 02 c0 00 	mov    BYTE PTR ds:0xc0029f65,0x0
c0019bfc:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c0019c01:	85 c0                	test   eax,eax
c0019c03:	75 01                	jne    c0019c06 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0019c05:	fb                   	sti    
c0019c06:	83 ec 0c             	sub    esp,0xc
c0019c09:	ff 35 68 9f 02 c0    	push   DWORD PTR ds:0xc0029f68
c0019c0f:	e8 dc f5 ff ff       	call   c00191f0 <unblockTask(ThreadControlBlock*)>
c0019c14:	83 c4 10             	add    esp,0x10
c0019c17:	83 c4 2c             	add    esp,0x2c
c0019c1a:	89 f0                	mov    eax,esi
c0019c1c:	5b                   	pop    ebx
c0019c1d:	5e                   	pop    esi
c0019c1e:	5f                   	pop    edi
c0019c1f:	5d                   	pop    ebp
c0019c20:	c3                   	ret    

c0019c21 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0019c21:	57                   	push   edi
c0019c22:	56                   	push   esi
c0019c23:	53                   	push   ebx
c0019c24:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019c28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c2c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019c30:	83 e8 06             	sub    eax,0x6
c0019c33:	0f b7 c0             	movzx  eax,ax
c0019c36:	50                   	push   eax
c0019c37:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0019c3c:	50                   	push   eax
c0019c3d:	e8 68 fc ff ff       	call   c00198aa <Vm::realToLinear(unsigned short, unsigned short)>
c0019c42:	5a                   	pop    edx
c0019c43:	5e                   	pop    esi
c0019c44:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0019c47:	8d 56 fa             	lea    edx,[esi-0x6]
c0019c4a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0019c50:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0019c53:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0019c56:	83 c2 02             	add    edx,0x2
c0019c59:	66 89 10             	mov    WORD PTR [eax],dx
c0019c5c:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0019c5f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0019c63:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0019c66:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0019c6a:	89 d6                	mov    esi,edx
c0019c6c:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0019c72:	66 81 e6 ff fd       	and    si,0xfdff
c0019c77:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0019c7b:	74 07                	je     c0019c84 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0019c7d:	89 d6                	mov    esi,edx
c0019c7f:	66 81 ce 00 02       	or     si,0x200
c0019c84:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0019c88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019c8d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0019c91:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019c99:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019c9c:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0019ca4:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0019ca7:	5b                   	pop    ebx
c0019ca8:	5e                   	pop    esi
c0019ca9:	5f                   	pop    edi
c0019caa:	c3                   	ret    

c0019cab <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019cab:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019cb0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019cb5:	c1 e0 04             	shl    eax,0x4
c0019cb8:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019cbb:	c3                   	ret    

c0019cbc <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019cbc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019cc1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019cc6:	c1 e0 04             	shl    eax,0x4
c0019cc9:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019ccd:	c3                   	ret    

c0019cce <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019cce:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019cd3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019cd8:	c1 e0 04             	shl    eax,0x4
c0019cdb:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0019cde:	c3                   	ret    

c0019cdf <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0019cdf:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019ce4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019ce9:	c1 e0 04             	shl    eax,0x4
c0019cec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019cf0:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0019cf3:	c3                   	ret    

c0019cf4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0019cf4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019cf9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019cfe:	c1 e0 04             	shl    eax,0x4
c0019d01:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019d05:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0019d09:	c3                   	ret    

c0019d0a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0019d0a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019d0f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019d14:	c1 e0 04             	shl    eax,0x4
c0019d17:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019d1b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0019d1e:	c3                   	ret    

c0019d1f <Vm::faultHandler(regs*)>:
c0019d1f:	55                   	push   ebp
c0019d20:	57                   	push   edi
c0019d21:	56                   	push   esi
c0019d22:	53                   	push   ebx
c0019d23:	83 ec 1c             	sub    esp,0x1c
c0019d26:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019d2a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019d2d:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0019d31:	0f b7 f8             	movzx  edi,ax
c0019d34:	52                   	push   edx
c0019d35:	0f b7 c0             	movzx  eax,ax
c0019d38:	50                   	push   eax
c0019d39:	e8 6c fb ff ff       	call   c00198aa <Vm::realToLinear(unsigned short, unsigned short)>
c0019d3e:	5a                   	pop    edx
c0019d3f:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0019d42:	59                   	pop    ecx
c0019d43:	89 c1                	mov    ecx,eax
c0019d45:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019d48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019d4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019d51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019d55:	0f b7 c5             	movzx  eax,bp
c0019d58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019d5c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0019d60:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019d64:	e8 41 fb ff ff       	call   c00198aa <Vm::realToLinear(unsigned short, unsigned short)>
c0019d69:	5e                   	pop    esi
c0019d6a:	be 06 00 00 00       	mov    esi,0x6
c0019d6f:	5a                   	pop    edx
c0019d70:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0019d75:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0019d7a:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0019d7d:	80 fa 9d             	cmp    dl,0x9d
c0019d80:	0f 84 2c 02 00 00    	je     c0019fb2 <Vm::faultHandler(regs*)+0x293>
c0019d86:	0f 87 91 00 00 00    	ja     c0019e1d <Vm::faultHandler(regs*)+0xfe>
c0019d8c:	80 fa 66             	cmp    dl,0x66
c0019d8f:	0f 84 98 01 00 00    	je     c0019f2d <Vm::faultHandler(regs*)+0x20e>
c0019d95:	77 47                	ja     c0019dde <Vm::faultHandler(regs*)+0xbf>
c0019d97:	80 fa 36             	cmp    dl,0x36
c0019d9a:	0f 84 80 01 00 00    	je     c0019f20 <Vm::faultHandler(regs*)+0x201>
c0019da0:	77 1a                	ja     c0019dbc <Vm::faultHandler(regs*)+0x9d>
c0019da2:	80 fa 26             	cmp    dl,0x26
c0019da5:	0f 84 4e 01 00 00    	je     c0019ef9 <Vm::faultHandler(regs*)+0x1da>
c0019dab:	80 fa 2e             	cmp    dl,0x2e
c0019dae:	0f 85 e2 05 00 00    	jne    c001a396 <Vm::faultHandler(regs*)+0x677>
c0019db4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019db7:	31 f6                	xor    esi,esi
c0019db9:	41                   	inc    ecx
c0019dba:	eb be                	jmp    c0019d7a <Vm::faultHandler(regs*)+0x5b>
c0019dbc:	80 fa 64             	cmp    dl,0x64
c0019dbf:	0f 84 41 01 00 00    	je     c0019f06 <Vm::faultHandler(regs*)+0x1e7>
c0019dc5:	0f 87 48 01 00 00    	ja     c0019f13 <Vm::faultHandler(regs*)+0x1f4>
c0019dcb:	80 fa 3e             	cmp    dl,0x3e
c0019dce:	0f 85 c2 05 00 00    	jne    c001a396 <Vm::faultHandler(regs*)+0x677>
c0019dd4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019dd7:	be 01 00 00 00       	mov    esi,0x1
c0019ddc:	eb db                	jmp    c0019db9 <Vm::faultHandler(regs*)+0x9a>
c0019dde:	80 fa 6d             	cmp    dl,0x6d
c0019de1:	0f 84 ec 02 00 00    	je     c001a0d3 <Vm::faultHandler(regs*)+0x3b4>
c0019de7:	77 17                	ja     c0019e00 <Vm::faultHandler(regs*)+0xe1>
c0019de9:	80 fa 67             	cmp    dl,0x67
c0019dec:	0f 84 48 01 00 00    	je     c0019f3a <Vm::faultHandler(regs*)+0x21b>
c0019df2:	80 fa 6c             	cmp    dl,0x6c
c0019df5:	0f 84 69 02 00 00    	je     c001a064 <Vm::faultHandler(regs*)+0x345>
c0019dfb:	e9 96 05 00 00       	jmp    c001a396 <Vm::faultHandler(regs*)+0x677>
c0019e00:	80 fa 6f             	cmp    dl,0x6f
c0019e03:	0f 84 f4 03 00 00    	je     c001a1fd <Vm::faultHandler(regs*)+0x4de>
c0019e09:	0f 82 59 03 00 00    	jb     c001a168 <Vm::faultHandler(regs*)+0x449>
c0019e0f:	80 fa 9c             	cmp    dl,0x9c
c0019e12:	0f 84 2f 01 00 00    	je     c0019f47 <Vm::faultHandler(regs*)+0x228>
c0019e18:	e9 79 05 00 00       	jmp    c001a396 <Vm::faultHandler(regs*)+0x677>
c0019e1d:	80 fa ec             	cmp    dl,0xec
c0019e20:	0f 84 14 05 00 00    	je     c001a33a <Vm::faultHandler(regs*)+0x61b>
c0019e26:	77 7b                	ja     c0019ea3 <Vm::faultHandler(regs*)+0x184>
c0019e28:	80 fa e4             	cmp    dl,0xe4
c0019e2b:	0f 84 93 04 00 00    	je     c001a2c4 <Vm::faultHandler(regs*)+0x5a5>
c0019e31:	77 53                	ja     c0019e86 <Vm::faultHandler(regs*)+0x167>
c0019e33:	80 fa cd             	cmp    dl,0xcd
c0019e36:	0f 84 d9 01 00 00    	je     c001a015 <Vm::faultHandler(regs*)+0x2f6>
c0019e3c:	80 fa cf             	cmp    dl,0xcf
c0019e3f:	0f 85 51 05 00 00    	jne    c001a396 <Vm::faultHandler(regs*)+0x677>
c0019e45:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019e48:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0019e4b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0019e4f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0019e52:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0019e56:	81 ca 00 02 02 00    	or     edx,0x20200
c0019e5c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019e5f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0019e63:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019e69:	66 c1 e8 09          	shr    ax,0x9
c0019e6d:	83 e0 01             	and    eax,0x1
c0019e70:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019e73:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019e76:	83 c0 06             	add    eax,0x6
c0019e79:	25 ff ff 00 00       	and    eax,0xffff
c0019e7e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019e81:	e9 0c 05 00 00       	jmp    c001a392 <Vm::faultHandler(regs*)+0x673>
c0019e86:	80 fa e6             	cmp    dl,0xe6
c0019e89:	0f 84 7f 04 00 00    	je     c001a30e <Vm::faultHandler(regs*)+0x5ef>
c0019e8f:	0f 82 4b 04 00 00    	jb     c001a2e0 <Vm::faultHandler(regs*)+0x5c1>
c0019e95:	80 fa e7             	cmp    dl,0xe7
c0019e98:	0f 84 87 04 00 00    	je     c001a325 <Vm::faultHandler(regs*)+0x606>
c0019e9e:	e9 f3 04 00 00       	jmp    c001a396 <Vm::faultHandler(regs*)+0x677>
c0019ea3:	80 fa ef             	cmp    dl,0xef
c0019ea6:	0f 84 d1 04 00 00    	je     c001a37d <Vm::faultHandler(regs*)+0x65e>
c0019eac:	77 28                	ja     c0019ed6 <Vm::faultHandler(regs*)+0x1b7>
c0019eae:	80 fa ed             	cmp    dl,0xed
c0019eb1:	0f 84 9f 04 00 00    	je     c001a356 <Vm::faultHandler(regs*)+0x637>
c0019eb7:	80 fa ee             	cmp    dl,0xee
c0019eba:	0f 85 d6 04 00 00    	jne    c001a396 <Vm::faultHandler(regs*)+0x677>
c0019ec0:	50                   	push   eax
c0019ec1:	50                   	push   eax
c0019ec2:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019ec6:	50                   	push   eax
c0019ec7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019ecb:	50                   	push   eax
c0019ecc:	e8 a3 f9 ff ff       	call   c0019874 <Vm::outbv(unsigned short, unsigned char)>
c0019ed1:	e9 9f 04 00 00       	jmp    c001a375 <Vm::faultHandler(regs*)+0x656>
c0019ed6:	80 fa fa             	cmp    dl,0xfa
c0019ed9:	0f 84 69 01 00 00    	je     c001a048 <Vm::faultHandler(regs*)+0x329>
c0019edf:	80 fa fb             	cmp    dl,0xfb
c0019ee2:	0f 84 6e 01 00 00    	je     c001a056 <Vm::faultHandler(regs*)+0x337>
c0019ee8:	80 fa f3             	cmp    dl,0xf3
c0019eeb:	0f 85 a5 04 00 00    	jne    c001a396 <Vm::faultHandler(regs*)+0x677>
c0019ef1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ef4:	e9 c0 fe ff ff       	jmp    c0019db9 <Vm::faultHandler(regs*)+0x9a>
c0019ef9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019efc:	be 02 00 00 00       	mov    esi,0x2
c0019f01:	e9 b3 fe ff ff       	jmp    c0019db9 <Vm::faultHandler(regs*)+0x9a>
c0019f06:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019f09:	be 03 00 00 00       	mov    esi,0x3
c0019f0e:	e9 a6 fe ff ff       	jmp    c0019db9 <Vm::faultHandler(regs*)+0x9a>
c0019f13:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019f16:	be 04 00 00 00       	mov    esi,0x4
c0019f1b:	e9 99 fe ff ff       	jmp    c0019db9 <Vm::faultHandler(regs*)+0x9a>
c0019f20:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019f23:	be 05 00 00 00       	mov    esi,0x5
c0019f28:	e9 8c fe ff ff       	jmp    c0019db9 <Vm::faultHandler(regs*)+0x9a>
c0019f2d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019f30:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019f35:	e9 7f fe ff ff       	jmp    c0019db9 <Vm::faultHandler(regs*)+0x9a>
c0019f3a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019f3d:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019f42:	e9 72 fe ff ff       	jmp    c0019db9 <Vm::faultHandler(regs*)+0x9a>
c0019f47:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019f4a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019f4e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019f53:	74 30                	je     c0019f85 <Vm::faultHandler(regs*)+0x266>
c0019f55:	83 e9 04             	sub    ecx,0x4
c0019f58:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019f5e:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019f64:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019f67:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019f6a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019f70:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0019f74:	0f 84 15 04 00 00    	je     c001a38f <Vm::faultHandler(regs*)+0x670>
c0019f7a:	80 ce 02             	or     dh,0x2
c0019f7d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019f80:	e9 0a 04 00 00       	jmp    c001a38f <Vm::faultHandler(regs*)+0x670>
c0019f85:	83 e9 02             	sub    ecx,0x2
c0019f88:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019f8e:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019f91:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019f95:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019f9b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0019f9f:	74 05                	je     c0019fa6 <Vm::faultHandler(regs*)+0x287>
c0019fa1:	80 ce 02             	or     dh,0x2
c0019fa4:	eb 03                	jmp    c0019fa9 <Vm::faultHandler(regs*)+0x28a>
c0019fa6:	80 e6 fd             	and    dh,0xfd
c0019fa9:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019fad:	e9 dd 03 00 00       	jmp    c001a38f <Vm::faultHandler(regs*)+0x670>
c0019fb2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019fb7:	74 2a                	je     c0019fe3 <Vm::faultHandler(regs*)+0x2c4>
c0019fb9:	8b 10                	mov    edx,DWORD PTR [eax]
c0019fbb:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019fc1:	81 ca 00 02 02 00    	or     edx,0x20200
c0019fc7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019fca:	8b 00                	mov    eax,DWORD PTR [eax]
c0019fcc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019fd2:	c1 e8 09             	shr    eax,0x9
c0019fd5:	83 e0 01             	and    eax,0x1
c0019fd8:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019fdb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019fde:	83 c0 04             	add    eax,0x4
c0019fe1:	eb 25                	jmp    c001a008 <Vm::faultHandler(regs*)+0x2e9>
c0019fe3:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019fe6:	81 ca 00 02 02 00    	or     edx,0x20200
c0019fec:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019fef:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019ff2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019ff8:	66 c1 e8 09          	shr    ax,0x9
c0019ffc:	83 e0 01             	and    eax,0x1
c0019fff:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001a002:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001a005:	83 c0 02             	add    eax,0x2
c001a008:	25 ff ff 00 00       	and    eax,0xffff
c001a00d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001a010:	e9 7a 03 00 00       	jmp    c001a38f <Vm::faultHandler(regs*)+0x670>
c001a015:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a019:	3c ee                	cmp    al,0xee
c001a01b:	75 10                	jne    c001a02d <Vm::faultHandler(regs*)+0x30e>
c001a01d:	83 ec 0c             	sub    esp,0xc
c001a020:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001a023:	e8 e9 f8 ff ff       	call   c0019911 <Vm::mainloop3(unsigned long)>
c001a028:	e9 4b 03 00 00       	jmp    c001a378 <Vm::faultHandler(regs*)+0x659>
c001a02d:	83 ec 0c             	sub    esp,0xc
c001a030:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a034:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a038:	51                   	push   ecx
c001a039:	50                   	push   eax
c001a03a:	53                   	push   ebx
c001a03b:	e8 e1 fb ff ff       	call   c0019c21 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001a040:	83 c4 20             	add    esp,0x20
c001a043:	e9 4a 03 00 00       	jmp    c001a392 <Vm::faultHandler(regs*)+0x673>
c001a048:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a04d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001a051:	e9 39 03 00 00       	jmp    c001a38f <Vm::faultHandler(regs*)+0x670>
c001a056:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a05b:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001a05f:	e9 2b 03 00 00       	jmp    c001a38f <Vm::faultHandler(regs*)+0x670>
c001a064:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001a067:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a06c:	74 2b                	je     c001a099 <Vm::faultHandler(regs*)+0x37a>
c001a06e:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001a075:	76 22                	jbe    c001a099 <Vm::faultHandler(regs*)+0x37a>
c001a077:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a07b:	50                   	push   eax
c001a07c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a080:	50                   	push   eax
c001a081:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a085:	50                   	push   eax
c001a086:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a08a:	50                   	push   eax
c001a08b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a08f:	50                   	push   eax
c001a090:	6a 6c                	push   0x6c
c001a092:	6a 6c                	push   0x6c
c001a094:	e9 b9 01 00 00       	jmp    c001a252 <Vm::faultHandler(regs*)+0x533>
c001a099:	83 ec 0c             	sub    esp,0xc
c001a09c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a0a0:	0f b7 f6             	movzx  esi,si
c001a0a3:	50                   	push   eax
c001a0a4:	e8 b8 f7 ff ff       	call   c0019861 <Vm::inbv(unsigned short)>
c001a0a9:	83 c4 0c             	add    esp,0xc
c001a0ac:	0f b6 c0             	movzx  eax,al
c001a0af:	50                   	push   eax
c001a0b0:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001a0b4:	50                   	push   eax
c001a0b5:	56                   	push   esi
c001a0b6:	e8 24 fc ff ff       	call   c0019cdf <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001a0bb:	83 c4 10             	add    esp,0x10
c001a0be:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a0c1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a0c5:	74 03                	je     c001a0ca <Vm::faultHandler(regs*)+0x3ab>
c001a0c7:	48                   	dec    eax
c001a0c8:	eb 01                	jmp    c001a0cb <Vm::faultHandler(regs*)+0x3ac>
c001a0ca:	40                   	inc    eax
c001a0cb:	0f b7 c0             	movzx  eax,ax
c001a0ce:	e9 8d 00 00 00       	jmp    c001a160 <Vm::faultHandler(regs*)+0x441>
c001a0d3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001a0d6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a0d9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a0de:	74 29                	je     c001a109 <Vm::faultHandler(regs*)+0x3ea>
c001a0e0:	3d ff ff 00 00       	cmp    eax,0xffff
c001a0e5:	76 22                	jbe    c001a109 <Vm::faultHandler(regs*)+0x3ea>
c001a0e7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a0eb:	50                   	push   eax
c001a0ec:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a0f0:	50                   	push   eax
c001a0f1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a0f5:	50                   	push   eax
c001a0f6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a0fa:	50                   	push   eax
c001a0fb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a0ff:	50                   	push   eax
c001a100:	6a 6d                	push   0x6d
c001a102:	6a 6d                	push   0x6d
c001a104:	e9 49 01 00 00       	jmp    c001a252 <Vm::faultHandler(regs*)+0x533>
c001a109:	0f b7 c8             	movzx  ecx,ax
c001a10c:	0f b7 f6             	movzx  esi,si
c001a10f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a112:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a117:	74 20                	je     c001a139 <Vm::faultHandler(regs*)+0x41a>
c001a119:	ed                   	in     eax,dx
c001a11a:	55                   	push   ebp
c001a11b:	50                   	push   eax
c001a11c:	51                   	push   ecx
c001a11d:	56                   	push   esi
c001a11e:	e8 e7 fb ff ff       	call   c0019d0a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001a123:	83 c4 10             	add    esp,0x10
c001a126:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a129:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a12d:	74 05                	je     c001a134 <Vm::faultHandler(regs*)+0x415>
c001a12f:	83 e8 04             	sub    eax,0x4
c001a132:	eb 27                	jmp    c001a15b <Vm::faultHandler(regs*)+0x43c>
c001a134:	83 c0 04             	add    eax,0x4
c001a137:	eb 22                	jmp    c001a15b <Vm::faultHandler(regs*)+0x43c>
c001a139:	66 ed                	in     ax,dx
c001a13b:	0f b7 c0             	movzx  eax,ax
c001a13e:	57                   	push   edi
c001a13f:	50                   	push   eax
c001a140:	51                   	push   ecx
c001a141:	56                   	push   esi
c001a142:	e8 ad fb ff ff       	call   c0019cf4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001a147:	83 c4 10             	add    esp,0x10
c001a14a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a14d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a151:	74 05                	je     c001a158 <Vm::faultHandler(regs*)+0x439>
c001a153:	83 e8 02             	sub    eax,0x2
c001a156:	eb 03                	jmp    c001a15b <Vm::faultHandler(regs*)+0x43c>
c001a158:	83 c0 02             	add    eax,0x2
c001a15b:	25 ff ff 00 00       	and    eax,0xffff
c001a160:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001a163:	e9 27 02 00 00       	jmp    c001a38f <Vm::faultHandler(regs*)+0x670>
c001a168:	8d 46 ff             	lea    eax,[esi-0x1]
c001a16b:	3c 05                	cmp    al,0x5
c001a16d:	77 24                	ja     c001a193 <Vm::faultHandler(regs*)+0x474>
c001a16f:	0f b6 c0             	movzx  eax,al
c001a172:	ff 24 85 1c 6d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd92e4]
c001a179:	0f b7 fd             	movzx  edi,bp
c001a17c:	eb 15                	jmp    c001a193 <Vm::faultHandler(regs*)+0x474>
c001a17e:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001a182:	eb 0f                	jmp    c001a193 <Vm::faultHandler(regs*)+0x474>
c001a184:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001a188:	eb 09                	jmp    c001a193 <Vm::faultHandler(regs*)+0x474>
c001a18a:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001a18e:	eb 03                	jmp    c001a193 <Vm::faultHandler(regs*)+0x474>
c001a190:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001a193:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a196:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a19b:	74 29                	je     c001a1c6 <Vm::faultHandler(regs*)+0x4a7>
c001a19d:	3d ff ff 00 00       	cmp    eax,0xffff
c001a1a2:	76 22                	jbe    c001a1c6 <Vm::faultHandler(regs*)+0x4a7>
c001a1a4:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a1a8:	50                   	push   eax
c001a1a9:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a1ad:	50                   	push   eax
c001a1ae:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a1b2:	50                   	push   eax
c001a1b3:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a1b7:	50                   	push   eax
c001a1b8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a1bc:	50                   	push   eax
c001a1bd:	6a 6e                	push   0x6e
c001a1bf:	6a 6e                	push   0x6e
c001a1c1:	e9 8c 00 00 00       	jmp    c001a252 <Vm::faultHandler(regs*)+0x533>
c001a1c6:	0f b7 c0             	movzx  eax,ax
c001a1c9:	52                   	push   edx
c001a1ca:	52                   	push   edx
c001a1cb:	50                   	push   eax
c001a1cc:	57                   	push   edi
c001a1cd:	e8 d9 fa ff ff       	call   c0019cab <Vm::readByteFromReal(unsigned short, unsigned short)>
c001a1d2:	59                   	pop    ecx
c001a1d3:	0f b6 c0             	movzx  eax,al
c001a1d6:	5e                   	pop    esi
c001a1d7:	50                   	push   eax
c001a1d8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a1dc:	50                   	push   eax
c001a1dd:	e8 92 f6 ff ff       	call   c0019874 <Vm::outbv(unsigned short, unsigned char)>
c001a1e2:	83 c4 10             	add    esp,0x10
c001a1e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a1e8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a1ec:	74 03                	je     c001a1f1 <Vm::faultHandler(regs*)+0x4d2>
c001a1ee:	48                   	dec    eax
c001a1ef:	eb 01                	jmp    c001a1f2 <Vm::faultHandler(regs*)+0x4d3>
c001a1f1:	40                   	inc    eax
c001a1f2:	0f b7 c0             	movzx  eax,ax
c001a1f5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001a1f8:	e9 92 01 00 00       	jmp    c001a38f <Vm::faultHandler(regs*)+0x670>
c001a1fd:	8d 46 ff             	lea    eax,[esi-0x1]
c001a200:	3c 05                	cmp    al,0x5
c001a202:	77 1f                	ja     c001a223 <Vm::faultHandler(regs*)+0x504>
c001a204:	0f b6 c0             	movzx  eax,al
c001a207:	ff 24 85 34 6d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd92cc]
c001a20e:	89 ef                	mov    edi,ebp
c001a210:	eb 11                	jmp    c001a223 <Vm::faultHandler(regs*)+0x504>
c001a212:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001a215:	eb 0c                	jmp    c001a223 <Vm::faultHandler(regs*)+0x504>
c001a217:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001a21a:	eb 07                	jmp    c001a223 <Vm::faultHandler(regs*)+0x504>
c001a21c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001a21f:	eb 02                	jmp    c001a223 <Vm::faultHandler(regs*)+0x504>
c001a221:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001a223:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001a226:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a22b:	74 37                	je     c001a264 <Vm::faultHandler(regs*)+0x545>
c001a22d:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001a233:	76 2f                	jbe    c001a264 <Vm::faultHandler(regs*)+0x545>
c001a235:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a239:	50                   	push   eax
c001a23a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a23e:	50                   	push   eax
c001a23f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a243:	50                   	push   eax
c001a244:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a248:	50                   	push   eax
c001a249:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a24d:	50                   	push   eax
c001a24e:	6a 6f                	push   0x6f
c001a250:	6a 6f                	push   0x6f
c001a252:	68 c2 6c 02 c0       	push   0xc0026cc2
c001a257:	e8 eb 2d ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001a25c:	83 c4 20             	add    esp,0x20
c001a25f:	e9 86 01 00 00       	jmp    c001a3ea <Vm::faultHandler(regs*)+0x6cb>
c001a264:	0f b7 d7             	movzx  edx,di
c001a267:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001a26a:	0f b7 c6             	movzx  eax,si
c001a26d:	81 e1 00 04 00 00    	and    ecx,0x400
c001a273:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001a276:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a27b:	74 1d                	je     c001a29a <Vm::faultHandler(regs*)+0x57b>
c001a27d:	55                   	push   ebp
c001a27e:	55                   	push   ebp
c001a27f:	50                   	push   eax
c001a280:	52                   	push   edx
c001a281:	e8 48 fa ff ff       	call   c0019cce <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001a286:	83 c4 10             	add    esp,0x10
c001a289:	89 fa                	mov    edx,edi
c001a28b:	ef                   	out    dx,eax
c001a28c:	85 c9                	test   ecx,ecx
c001a28e:	74 05                	je     c001a295 <Vm::faultHandler(regs*)+0x576>
c001a290:	83 ee 04             	sub    esi,0x4
c001a293:	eb 21                	jmp    c001a2b6 <Vm::faultHandler(regs*)+0x597>
c001a295:	83 c6 04             	add    esi,0x4
c001a298:	eb 1c                	jmp    c001a2b6 <Vm::faultHandler(regs*)+0x597>
c001a29a:	55                   	push   ebp
c001a29b:	55                   	push   ebp
c001a29c:	50                   	push   eax
c001a29d:	52                   	push   edx
c001a29e:	e8 19 fa ff ff       	call   c0019cbc <Vm::readWordFromReal(unsigned short, unsigned short)>
c001a2a3:	83 c4 10             	add    esp,0x10
c001a2a6:	89 fa                	mov    edx,edi
c001a2a8:	66 ef                	out    dx,ax
c001a2aa:	85 c9                	test   ecx,ecx
c001a2ac:	74 05                	je     c001a2b3 <Vm::faultHandler(regs*)+0x594>
c001a2ae:	83 ee 02             	sub    esi,0x2
c001a2b1:	eb 03                	jmp    c001a2b6 <Vm::faultHandler(regs*)+0x597>
c001a2b3:	83 c6 02             	add    esi,0x2
c001a2b6:	81 e6 ff ff 00 00    	and    esi,0xffff
c001a2bc:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001a2bf:	e9 cb 00 00 00       	jmp    c001a38f <Vm::faultHandler(regs*)+0x670>
c001a2c4:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001a2cb:	83 ec 0c             	sub    esp,0xc
c001a2ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a2d2:	50                   	push   eax
c001a2d3:	e8 89 f5 ff ff       	call   c0019861 <Vm::inbv(unsigned short)>
c001a2d8:	0f b6 c0             	movzx  eax,al
c001a2db:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001a2de:	eb 3f                	jmp    c001a31f <Vm::faultHandler(regs*)+0x600>
c001a2e0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a2e5:	74 07                	je     c001a2ee <Vm::faultHandler(regs*)+0x5cf>
c001a2e7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a2eb:	ed                   	in     eax,dx
c001a2ec:	eb 14                	jmp    c001a302 <Vm::faultHandler(regs*)+0x5e3>
c001a2ee:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001a2f1:	66 31 f6             	xor    si,si
c001a2f4:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001a2f7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a2fb:	66 ed                	in     ax,dx
c001a2fd:	0f b7 c0             	movzx  eax,ax
c001a300:	09 f0                	or     eax,esi
c001a302:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a305:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a309:	e9 84 00 00 00       	jmp    c001a392 <Vm::faultHandler(regs*)+0x673>
c001a30e:	52                   	push   edx
c001a30f:	52                   	push   edx
c001a310:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001a314:	50                   	push   eax
c001a315:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a319:	50                   	push   eax
c001a31a:	e8 55 f5 ff ff       	call   c0019874 <Vm::outbv(unsigned short, unsigned char)>
c001a31f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a323:	eb 53                	jmp    c001a378 <Vm::faultHandler(regs*)+0x659>
c001a325:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a328:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a32c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a331:	74 03                	je     c001a336 <Vm::faultHandler(regs*)+0x617>
c001a333:	ef                   	out    dx,eax
c001a334:	eb cf                	jmp    c001a305 <Vm::faultHandler(regs*)+0x5e6>
c001a336:	66 ef                	out    dx,ax
c001a338:	eb cb                	jmp    c001a305 <Vm::faultHandler(regs*)+0x5e6>
c001a33a:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001a341:	83 ec 0c             	sub    esp,0xc
c001a344:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a348:	50                   	push   eax
c001a349:	e8 13 f5 ff ff       	call   c0019861 <Vm::inbv(unsigned short)>
c001a34e:	0f b6 c0             	movzx  eax,al
c001a351:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001a354:	eb 1f                	jmp    c001a375 <Vm::faultHandler(regs*)+0x656>
c001a356:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a359:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a35e:	74 03                	je     c001a363 <Vm::faultHandler(regs*)+0x644>
c001a360:	ed                   	in     eax,dx
c001a361:	eb 0d                	jmp    c001a370 <Vm::faultHandler(regs*)+0x651>
c001a363:	66 ed                	in     ax,dx
c001a365:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001a368:	0f b7 c0             	movzx  eax,ax
c001a36b:	66 31 d2             	xor    dx,dx
c001a36e:	09 d0                	or     eax,edx
c001a370:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a373:	eb 1a                	jmp    c001a38f <Vm::faultHandler(regs*)+0x670>
c001a375:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a378:	83 c4 10             	add    esp,0x10
c001a37b:	eb 15                	jmp    c001a392 <Vm::faultHandler(regs*)+0x673>
c001a37d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a380:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a383:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a388:	74 03                	je     c001a38d <Vm::faultHandler(regs*)+0x66e>
c001a38a:	ef                   	out    dx,eax
c001a38b:	eb 02                	jmp    c001a38f <Vm::faultHandler(regs*)+0x670>
c001a38d:	66 ef                	out    dx,ax
c001a38f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a392:	b0 01                	mov    al,0x1
c001a394:	eb 56                	jmp    c001a3ec <Vm::faultHandler(regs*)+0x6cd>
c001a396:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a39a:	50                   	push   eax
c001a39b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a39f:	50                   	push   eax
c001a3a0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a3a4:	50                   	push   eax
c001a3a5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a3a9:	50                   	push   eax
c001a3aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a3ae:	50                   	push   eax
c001a3af:	52                   	push   edx
c001a3b0:	52                   	push   edx
c001a3b1:	68 ef 6c 02 c0       	push   0xc0026cef
c001a3b6:	e8 8c 2c ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001a3bb:	83 c4 20             	add    esp,0x20
c001a3be:	83 ec 0c             	sub    esp,0xc
c001a3c1:	6a 60                	push   0x60
c001a3c3:	e8 99 f4 ff ff       	call   c0019861 <Vm::inbv(unsigned short)>
c001a3c8:	83 c4 10             	add    esp,0x10
c001a3cb:	3c 1c                	cmp    al,0x1c
c001a3cd:	74 04                	je     c001a3d3 <Vm::faultHandler(regs*)+0x6b4>
c001a3cf:	3c 5a                	cmp    al,0x5a
c001a3d1:	75 eb                	jne    c001a3be <Vm::faultHandler(regs*)+0x69f>
c001a3d3:	3c 5a                	cmp    al,0x5a
c001a3d5:	74 04                	je     c001a3db <Vm::faultHandler(regs*)+0x6bc>
c001a3d7:	3c 1c                	cmp    al,0x1c
c001a3d9:	75 0f                	jne    c001a3ea <Vm::faultHandler(regs*)+0x6cb>
c001a3db:	83 ec 0c             	sub    esp,0xc
c001a3de:	6a 60                	push   0x60
c001a3e0:	e8 7c f4 ff ff       	call   c0019861 <Vm::inbv(unsigned short)>
c001a3e5:	83 c4 10             	add    esp,0x10
c001a3e8:	eb e9                	jmp    c001a3d3 <Vm::faultHandler(regs*)+0x6b4>
c001a3ea:	31 c0                	xor    eax,eax
c001a3ec:	83 c4 1c             	add    esp,0x1c
c001a3ef:	5b                   	pop    ebx
c001a3f0:	5e                   	pop    esi
c001a3f1:	5f                   	pop    edi
c001a3f2:	5d                   	pop    ebp
c001a3f3:	c3                   	ret    

c001a3f4 <Vm::fpuInternalTo32(unsigned long long)>:
c001a3f4:	57                   	push   edi
c001a3f5:	56                   	push   esi
c001a3f6:	53                   	push   ebx
c001a3f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a3fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3ff:	89 d6                	mov    esi,edx
c001a401:	89 d7                	mov    edi,edx
c001a403:	89 c1                	mov    ecx,eax
c001a405:	c1 ef 14             	shr    edi,0x14
c001a408:	89 d3                	mov    ebx,edx
c001a40a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a410:	31 d2                	xor    edx,edx
c001a412:	89 f8                	mov    eax,edi
c001a414:	81 e6 00 00 00 80    	and    esi,0x80000000
c001a41a:	bf ff 00 00 00       	mov    edi,0xff
c001a41f:	05 80 fc ff ff       	add    eax,0xfffffc80
c001a424:	83 d2 ff             	adc    edx,0xffffffff
c001a427:	39 c7                	cmp    edi,eax
c001a429:	bf 00 00 00 00       	mov    edi,0x0
c001a42e:	19 d7                	sbb    edi,edx
c001a430:	72 16                	jb     c001a448 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c001a432:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001a436:	c1 e0 17             	shl    eax,0x17
c001a439:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001a43f:	09 f1                	or     ecx,esi
c001a441:	09 c1                	or     ecx,eax
c001a443:	89 cf                	mov    edi,ecx
c001a445:	eb 05                	jmp    c001a44c <Vm::fpuInternalTo32(unsigned long long)+0x58>
c001a447:	90                   	nop
c001a448:	31 ff                	xor    edi,edi
c001a44a:	66 90                	xchg   ax,ax
c001a44c:	89 f8                	mov    eax,edi
c001a44e:	5b                   	pop    ebx
c001a44f:	5e                   	pop    esi
c001a450:	5f                   	pop    edi
c001a451:	c3                   	ret    

c001a452 <Vm::fpuInternalTo64(unsigned long long)>:
c001a452:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a456:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a45a:	c3                   	ret    

c001a45b <Vm::fpu32ToInternal(unsigned int)>:
c001a45b:	57                   	push   edi
c001a45c:	31 ff                	xor    edi,edi
c001a45e:	56                   	push   esi
c001a45f:	53                   	push   ebx
c001a460:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a464:	89 cb                	mov    ebx,ecx
c001a466:	89 ce                	mov    esi,ecx
c001a468:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001a46e:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001a474:	c1 e9 17             	shr    ecx,0x17
c001a477:	89 f0                	mov    eax,esi
c001a479:	0f b6 d1             	movzx  edx,cl
c001a47c:	81 c2 80 03 00 00    	add    edx,0x380
c001a482:	89 d1                	mov    ecx,edx
c001a484:	89 fa                	mov    edx,edi
c001a486:	c1 e1 14             	shl    ecx,0x14
c001a489:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001a48d:	c1 e0 1d             	shl    eax,0x1d
c001a490:	89 d7                	mov    edi,edx
c001a492:	89 c6                	mov    esi,eax
c001a494:	89 ca                	mov    edx,ecx
c001a496:	89 f0                	mov    eax,esi
c001a498:	09 fa                	or     edx,edi
c001a49a:	09 da                	or     edx,ebx
c001a49c:	5b                   	pop    ebx
c001a49d:	5e                   	pop    esi
c001a49e:	5f                   	pop    edi
c001a49f:	c3                   	ret    

c001a4a0 <Vm::fpu64ToInternal(unsigned long long)>:
c001a4a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a4a8:	c3                   	ret    

c001a4a9 <Vm::fpuFloatToLong(unsigned long long)>:
c001a4a9:	57                   	push   edi
c001a4aa:	31 c0                	xor    eax,eax
c001a4ac:	56                   	push   esi
c001a4ad:	31 d2                	xor    edx,edx
c001a4af:	53                   	push   ebx
c001a4b0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a4b4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4b8:	89 d9                	mov    ecx,ebx
c001a4ba:	c1 e9 14             	shr    ecx,0x14
c001a4bd:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a4c3:	89 cf                	mov    edi,ecx
c001a4c5:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001a4cb:	78 37                	js     c001a504 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c001a4cd:	89 d9                	mov    ecx,ebx
c001a4cf:	89 f0                	mov    eax,esi
c001a4d1:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001a4d7:	81 c9 00 00 10 00    	or     ecx,0x100000
c001a4dd:	89 ca                	mov    edx,ecx
c001a4df:	b9 34 00 00 00       	mov    ecx,0x34
c001a4e4:	29 f9                	sub    ecx,edi
c001a4e6:	0f ad d0             	shrd   eax,edx,cl
c001a4e9:	d3 fa                	sar    edx,cl
c001a4eb:	f6 c1 20             	test   cl,0x20
c001a4ee:	74 08                	je     c001a4f8 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c001a4f0:	89 d0                	mov    eax,edx
c001a4f2:	c1 fa 1f             	sar    edx,0x1f
c001a4f5:	8d 76 00             	lea    esi,[esi+0x0]
c001a4f8:	85 db                	test   ebx,ebx
c001a4fa:	79 08                	jns    c001a504 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c001a4fc:	f7 d8                	neg    eax
c001a4fe:	83 d2 00             	adc    edx,0x0
c001a501:	f7 da                	neg    edx
c001a503:	90                   	nop
c001a504:	5b                   	pop    ebx
c001a505:	5e                   	pop    esi
c001a506:	5f                   	pop    edi
c001a507:	c3                   	ret    

c001a508 <Vm::fpuULongToFloat(unsigned long long)>:
c001a508:	57                   	push   edi
c001a509:	31 c9                	xor    ecx,ecx
c001a50b:	56                   	push   esi
c001a50c:	53                   	push   ebx
c001a50d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a511:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a515:	8d 76 00             	lea    esi,[esi+0x0]
c001a518:	0f ba e7 14          	bt     edi,0x14
c001a51c:	72 0a                	jb     c001a528 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c001a51e:	01 f6                	add    esi,esi
c001a520:	11 ff                	adc    edi,edi
c001a522:	41                   	inc    ecx
c001a523:	eb f3                	jmp    c001a518 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c001a525:	8d 76 00             	lea    esi,[esi+0x0]
c001a528:	89 fa                	mov    edx,edi
c001a52a:	89 f0                	mov    eax,esi
c001a52c:	bb 33 04 00 00       	mov    ebx,0x433
c001a531:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001a537:	29 cb                	sub    ebx,ecx
c001a539:	89 d9                	mov    ecx,ebx
c001a53b:	5b                   	pop    ebx
c001a53c:	c1 e1 14             	shl    ecx,0x14
c001a53f:	5e                   	pop    esi
c001a540:	09 ca                	or     edx,ecx
c001a542:	5f                   	pop    edi
c001a543:	c3                   	ret    

c001a544 <Vm::fpuLongToFloat(long long)>:
c001a544:	56                   	push   esi
c001a545:	31 c0                	xor    eax,eax
c001a547:	53                   	push   ebx
c001a548:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a54c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a550:	39 c8                	cmp    eax,ecx
c001a552:	19 d8                	sbb    eax,ebx
c001a554:	7d 06                	jge    c001a55c <Vm::fpuLongToFloat(long long)+0x18>
c001a556:	31 f6                	xor    esi,esi
c001a558:	eb 0e                	jmp    c001a568 <Vm::fpuLongToFloat(long long)+0x24>
c001a55a:	66 90                	xchg   ax,ax
c001a55c:	f7 d9                	neg    ecx
c001a55e:	be 01 00 00 00       	mov    esi,0x1
c001a563:	83 d3 00             	adc    ebx,0x0
c001a566:	f7 db                	neg    ebx
c001a568:	31 c0                	xor    eax,eax
c001a56a:	66 90                	xchg   ax,ax
c001a56c:	0f ba e3 14          	bt     ebx,0x14
c001a570:	72 0a                	jb     c001a57c <Vm::fpuLongToFloat(long long)+0x38>
c001a572:	01 c9                	add    ecx,ecx
c001a574:	11 db                	adc    ebx,ebx
c001a576:	40                   	inc    eax
c001a577:	eb f3                	jmp    c001a56c <Vm::fpuLongToFloat(long long)+0x28>
c001a579:	8d 76 00             	lea    esi,[esi+0x0]
c001a57c:	ba 33 04 00 00       	mov    edx,0x433
c001a581:	29 c2                	sub    edx,eax
c001a583:	89 c8                	mov    eax,ecx
c001a585:	c1 e2 14             	shl    edx,0x14
c001a588:	89 d9                	mov    ecx,ebx
c001a58a:	89 f3                	mov    ebx,esi
c001a58c:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001a592:	09 ca                	or     edx,ecx
c001a594:	84 db                	test   bl,bl
c001a596:	74 08                	je     c001a5a0 <Vm::fpuLongToFloat(long long)+0x5c>
c001a598:	81 ca 00 00 00 80    	or     edx,0x80000000
c001a59e:	66 90                	xchg   ax,ax
c001a5a0:	5b                   	pop    ebx
c001a5a1:	5e                   	pop    esi
c001a5a2:	c3                   	ret    

c001a5a3 <Vm::fpuGet0()>:
c001a5a3:	31 c0                	xor    eax,eax
c001a5a5:	31 d2                	xor    edx,edx
c001a5a7:	c3                   	ret    

c001a5a8 <Vm::fpuGet1()>:
c001a5a8:	b8 01 00 00 00       	mov    eax,0x1
c001a5ad:	31 d2                	xor    edx,edx
c001a5af:	c3                   	ret    

c001a5b0 <Vm::fpuGetPi()>:
c001a5b0:	b8 03 00 00 00       	mov    eax,0x3
c001a5b5:	31 d2                	xor    edx,edx
c001a5b7:	c3                   	ret    

c001a5b8 <Vm::fpuGetLog2E()>:
c001a5b8:	83 ec 18             	sub    esp,0x18
c001a5bb:	68 4c 6d 02 c0       	push   0xc0026d4c
c001a5c0:	e8 64 ab ff ff       	call   c0015129 <Krnl::panic(char const*)>
c001a5c5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a5ca:	31 d2                	xor    edx,edx
c001a5cc:	83 c4 1c             	add    esp,0x1c
c001a5cf:	c3                   	ret    

c001a5d0 <Vm::fpuGetLogE2()>:
c001a5d0:	83 ec 18             	sub    esp,0x18
c001a5d3:	68 58 6d 02 c0       	push   0xc0026d58
c001a5d8:	e8 4c ab ff ff       	call   c0015129 <Krnl::panic(char const*)>
c001a5dd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a5e2:	31 d2                	xor    edx,edx
c001a5e4:	83 c4 1c             	add    esp,0x1c
c001a5e7:	c3                   	ret    

c001a5e8 <Vm::fpuGetLog210()>:
c001a5e8:	83 ec 18             	sub    esp,0x18
c001a5eb:	68 64 6d 02 c0       	push   0xc0026d64
c001a5f0:	e8 34 ab ff ff       	call   c0015129 <Krnl::panic(char const*)>
c001a5f5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a5fa:	31 d2                	xor    edx,edx
c001a5fc:	83 c4 1c             	add    esp,0x1c
c001a5ff:	c3                   	ret    

c001a600 <Vm::fpuGetLog102()>:
c001a600:	83 ec 18             	sub    esp,0x18
c001a603:	68 71 6d 02 c0       	push   0xc0026d71
c001a608:	e8 1c ab ff ff       	call   c0015129 <Krnl::panic(char const*)>
c001a60d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a612:	31 d2                	xor    edx,edx
c001a614:	83 c4 1c             	add    esp,0x1c
c001a617:	c3                   	ret    

c001a618 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001a618:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a61c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a624:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001a628:	0f 92 c0             	setb   al
c001a62b:	c3                   	ret    

c001a62c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001a62c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a634:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001a638:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001a63c:	09 c2                	or     edx,eax
c001a63e:	0f 94 c0             	sete   al
c001a641:	c3                   	ret    

c001a642 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001a642:	57                   	push   edi
c001a643:	56                   	push   esi
c001a644:	53                   	push   ebx
c001a645:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a649:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a64d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a651:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a655:	57                   	push   edi
c001a656:	56                   	push   esi
c001a657:	53                   	push   ebx
c001a658:	51                   	push   ecx
c001a659:	e8 ce ff ff ff       	call   c001a62c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001a65e:	83 c4 10             	add    esp,0x10
c001a661:	88 c2                	mov    dl,al
c001a663:	31 c0                	xor    eax,eax
c001a665:	84 d2                	test   dl,dl
c001a667:	75 0f                	jne    c001a678 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c001a669:	57                   	push   edi
c001a66a:	56                   	push   esi
c001a66b:	53                   	push   ebx
c001a66c:	51                   	push   ecx
c001a66d:	e8 a6 ff ff ff       	call   c001a618 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001a672:	83 c4 10             	add    esp,0x10
c001a675:	8d 76 00             	lea    esi,[esi+0x0]
c001a678:	83 e0 01             	and    eax,0x1
c001a67b:	5b                   	pop    ebx
c001a67c:	88 c1                	mov    cl,al
c001a67e:	83 e2 01             	and    edx,0x1
c001a681:	a0 a1 9f 02 c0       	mov    al,ds:0xc0029fa1
c001a686:	c1 e2 06             	shl    edx,0x6
c001a689:	83 e0 ba             	and    eax,0xffffffba
c001a68c:	5e                   	pop    esi
c001a68d:	09 c8                	or     eax,ecx
c001a68f:	5f                   	pop    edi
c001a690:	09 d0                	or     eax,edx
c001a692:	a2 a1 9f 02 c0       	mov    ds:0xc0029fa1,al
c001a697:	c3                   	ret    

c001a698 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001a698:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a69c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a6a0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001a6a4:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001a6a8:	c3                   	ret    

c001a6a9 <Vm::fpuAbs(unsigned long long)>:
c001a6a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a6b1:	c3                   	ret    

c001a6b2 <Vm::fpuChs(unsigned long long)>:
c001a6b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a6ba:	f7 d8                	neg    eax
c001a6bc:	83 d2 00             	adc    edx,0x0
c001a6bf:	f7 da                	neg    edx
c001a6c1:	c3                   	ret    

c001a6c2 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001a6c2:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001a6c6:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001a6cb:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001a6cf:	eb c7                	jmp    c001a698 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001a6d1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001a6d1:	53                   	push   ebx
c001a6d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a6da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a6de:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a6e2:	0f af ca             	imul   ecx,edx
c001a6e5:	0f af d8             	imul   ebx,eax
c001a6e8:	f7 e2                	mul    edx
c001a6ea:	01 d9                	add    ecx,ebx
c001a6ec:	5b                   	pop    ebx
c001a6ed:	01 ca                	add    edx,ecx
c001a6ef:	c3                   	ret    

c001a6f0 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001a6f0:	83 ec 0c             	sub    esp,0xc
c001a6f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a703:	e8 18 87 00 00       	call   c0022e20 <__udivdi3>
c001a708:	83 c4 1c             	add    esp,0x1c
c001a70b:	c3                   	ret    

c001a70c <Vm::fpuSquare(unsigned long long)>:
c001a70c:	50                   	push   eax
c001a70d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a711:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a715:	52                   	push   edx
c001a716:	50                   	push   eax
c001a717:	52                   	push   edx
c001a718:	50                   	push   eax
c001a719:	e8 b3 ff ff ff       	call   c001a6d1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a71e:	83 c4 14             	add    esp,0x14
c001a721:	c3                   	ret    

c001a722 <Vm::fpuGetReg(int)>:
c001a722:	83 ec 0c             	sub    esp,0xc
c001a725:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a72a:	76 10                	jbe    c001a73c <Vm::fpuGetReg(int)+0x1a>
c001a72c:	83 ec 0c             	sub    esp,0xc
c001a72f:	68 7e 6d 02 c0       	push   0xc0026d7e
c001a734:	e8 f0 a9 ff ff       	call   c0015129 <Krnl::panic(char const*)>
c001a739:	83 c4 10             	add    esp,0x10
c001a73c:	a0 a1 9f 02 c0       	mov    al,ds:0xc0029fa1
c001a741:	b9 08 00 00 00       	mov    ecx,0x8
c001a746:	c0 e8 03             	shr    al,0x3
c001a749:	83 e0 07             	and    eax,0x7
c001a74c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a750:	99                   	cdq    
c001a751:	f7 f9                	idiv   ecx
c001a753:	8b 04 d5 a4 9f 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd605c]
c001a75a:	8b 14 d5 a8 9f 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd6058]
c001a761:	83 c4 0c             	add    esp,0xc
c001a764:	c3                   	ret    

c001a765 <Vm::fpuSetReg(int, unsigned long long)>:
c001a765:	57                   	push   edi
c001a766:	56                   	push   esi
c001a767:	52                   	push   edx
c001a768:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a76c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a770:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a775:	76 11                	jbe    c001a788 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c001a777:	83 ec 0c             	sub    esp,0xc
c001a77a:	68 91 6d 02 c0       	push   0xc0026d91
c001a77f:	e8 a5 a9 ff ff       	call   c0015129 <Krnl::panic(char const*)>
c001a784:	83 c4 10             	add    esp,0x10
c001a787:	90                   	nop
c001a788:	a0 a1 9f 02 c0       	mov    al,ds:0xc0029fa1
c001a78d:	b9 08 00 00 00       	mov    ecx,0x8
c001a792:	c0 e8 03             	shr    al,0x3
c001a795:	83 e0 07             	and    eax,0x7
c001a798:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a79c:	99                   	cdq    
c001a79d:	f7 f9                	idiv   ecx
c001a79f:	89 34 d5 a4 9f 02 c0 	mov    DWORD PTR [edx*8-0x3ffd605c],esi
c001a7a6:	89 3c d5 a8 9f 02 c0 	mov    DWORD PTR [edx*8-0x3ffd6058],edi
c001a7ad:	58                   	pop    eax
c001a7ae:	5e                   	pop    esi
c001a7af:	5f                   	pop    edi
c001a7b0:	c3                   	ret    

c001a7b1 <Vm::fpuPush(unsigned long long)>:
c001a7b1:	a0 a1 9f 02 c0       	mov    al,ds:0xc0029fa1
c001a7b6:	c0 e8 03             	shr    al,0x3
c001a7b9:	83 e0 07             	and    eax,0x7
c001a7bc:	83 c0 07             	add    eax,0x7
c001a7bf:	88 c2                	mov    dl,al
c001a7c1:	83 e0 07             	and    eax,0x7
c001a7c4:	83 e2 07             	and    edx,0x7
c001a7c7:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001a7ce:	8a 15 a1 9f 02 c0    	mov    dl,BYTE PTR ds:0xc0029fa1
c001a7d4:	83 e2 c7             	and    edx,0xffffffc7
c001a7d7:	09 ca                	or     edx,ecx
c001a7d9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a7dd:	88 15 a1 9f 02 c0    	mov    BYTE PTR ds:0xc0029fa1,dl
c001a7e3:	89 0c c5 a8 9f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6058],ecx
c001a7ea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a7ee:	89 14 c5 a4 9f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd605c],edx
c001a7f5:	a1 e4 9f 02 c0       	mov    eax,ds:0xc0029fe4
c001a7fa:	83 f8 08             	cmp    eax,0x8
c001a7fd:	75 09                	jne    c001a808 <Vm::fpuPush(unsigned long long)+0x57>
c001a7ff:	80 0d a0 9f 02 c0 40 	or     BYTE PTR ds:0xc0029fa0,0x40
c001a806:	c3                   	ret    
c001a807:	90                   	nop
c001a808:	40                   	inc    eax
c001a809:	a3 e4 9f 02 c0       	mov    ds:0xc0029fe4,eax
c001a80e:	c3                   	ret    

c001a80f <Vm::fpuPop()>:
c001a80f:	8a 0d a1 9f 02 c0    	mov    cl,BYTE PTR ds:0xc0029fa1
c001a815:	53                   	push   ebx
c001a816:	c0 e9 03             	shr    cl,0x3
c001a819:	8a 1d a1 9f 02 c0    	mov    bl,BYTE PTR ds:0xc0029fa1
c001a81f:	83 e1 07             	and    ecx,0x7
c001a822:	83 e3 c7             	and    ebx,0xffffffc7
c001a825:	8b 04 cd a4 9f 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd605c]
c001a82c:	8b 14 cd a8 9f 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd6058]
c001a833:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001a83a:	83 e1 38             	and    ecx,0x38
c001a83d:	09 d9                	or     ecx,ebx
c001a83f:	88 0d a1 9f 02 c0    	mov    BYTE PTR ds:0xc0029fa1,cl
c001a845:	8b 0d e4 9f 02 c0    	mov    ecx,DWORD PTR ds:0xc0029fe4
c001a84b:	85 c9                	test   ecx,ecx
c001a84d:	74 09                	je     c001a858 <Vm::fpuPop()+0x49>
c001a84f:	49                   	dec    ecx
c001a850:	89 0d e4 9f 02 c0    	mov    DWORD PTR ds:0xc0029fe4,ecx
c001a856:	eb 08                	jmp    c001a860 <Vm::fpuPop()+0x51>
c001a858:	80 0d a0 9f 02 c0 40 	or     BYTE PTR ds:0xc0029fa0,0x40
c001a85f:	90                   	nop
c001a860:	5b                   	pop    ebx
c001a861:	c3                   	ret    

c001a862 <Vm::x87Handler(regs*)>:
c001a862:	55                   	push   ebp
c001a863:	57                   	push   edi
c001a864:	56                   	push   esi
c001a865:	53                   	push   ebx
c001a866:	83 ec 1c             	sub    esp,0x1c
c001a869:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a86d:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001a872:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001a875:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001a87d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001a881:	50                   	push   eax
c001a882:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001a886:	50                   	push   eax
c001a887:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a88b:	50                   	push   eax
c001a88c:	53                   	push   ebx
c001a88d:	e8 b0 9f ff ff       	call   c0014842 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001a892:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001a895:	83 c4 10             	add    esp,0x10
c001a898:	89 c6                	mov    esi,eax
c001a89a:	80 fa d9             	cmp    dl,0xd9
c001a89d:	0f 85 79 01 00 00    	jne    c001aa1c <Vm::x87Handler(regs*)+0x1ba>
c001a8a3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a8a7:	8d 50 20             	lea    edx,[eax+0x20]
c001a8aa:	80 fa 0e             	cmp    dl,0xe
c001a8ad:	0f 87 a5 00 00 00    	ja     c001a958 <Vm::x87Handler(regs*)+0xf6>
c001a8b3:	0f b6 d2             	movzx  edx,dl
c001a8b6:	ff 24 95 a4 6d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd925c]
c001a8bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a8c0:	e8 de fc ff ff       	call   c001a5a3 <Vm::fpuGet0()>
c001a8c5:	eb 09                	jmp    c001a8d0 <Vm::x87Handler(regs*)+0x6e>
c001a8c7:	90                   	nop
c001a8c8:	e8 db fc ff ff       	call   c001a5a8 <Vm::fpuGet1()>
c001a8cd:	8d 76 00             	lea    esi,[esi+0x0]
c001a8d0:	57                   	push   edi
c001a8d1:	57                   	push   edi
c001a8d2:	66 90                	xchg   ax,ax
c001a8d4:	52                   	push   edx
c001a8d5:	50                   	push   eax
c001a8d6:	e8 d6 fe ff ff       	call   c001a7b1 <Vm::fpuPush(unsigned long long)>
c001a8db:	90                   	nop
c001a8dc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a8e0:	83 c4 10             	add    esp,0x10
c001a8e3:	90                   	nop
c001a8e4:	b0 01                	mov    al,0x1
c001a8e6:	e9 89 0a 00 00       	jmp    c001b374 <Vm::x87Handler(regs*)+0xb12>
c001a8eb:	90                   	nop
c001a8ec:	83 ec 0c             	sub    esp,0xc
c001a8ef:	6a 00                	push   0x0
c001a8f1:	e8 2c fe ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001a8f6:	59                   	pop    ecx
c001a8f7:	5e                   	pop    esi
c001a8f8:	52                   	push   edx
c001a8f9:	50                   	push   eax
c001a8fa:	e8 b3 fd ff ff       	call   c001a6b2 <Vm::fpuChs(unsigned long long)>
c001a8ff:	eb 17                	jmp    c001a918 <Vm::x87Handler(regs*)+0xb6>
c001a901:	8d 76 00             	lea    esi,[esi+0x0]
c001a904:	83 ec 0c             	sub    esp,0xc
c001a907:	6a 00                	push   0x0
c001a909:	e8 14 fe ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001a90e:	5f                   	pop    edi
c001a90f:	5d                   	pop    ebp
c001a910:	52                   	push   edx
c001a911:	50                   	push   eax
c001a912:	e8 92 fd ff ff       	call   c001a6a9 <Vm::fpuAbs(unsigned long long)>
c001a917:	90                   	nop
c001a918:	83 c4 0c             	add    esp,0xc
c001a91b:	90                   	nop
c001a91c:	52                   	push   edx
c001a91d:	50                   	push   eax
c001a91e:	66 90                	xchg   ax,ax
c001a920:	6a 00                	push   0x0
c001a922:	66 90                	xchg   ax,ax
c001a924:	e8 3c fe ff ff       	call   c001a765 <Vm::fpuSetReg(int, unsigned long long)>
c001a929:	eb b1                	jmp    c001a8dc <Vm::x87Handler(regs*)+0x7a>
c001a92b:	90                   	nop
c001a92c:	e8 b7 fc ff ff       	call   c001a5e8 <Vm::fpuGetLog210()>
c001a931:	eb 9d                	jmp    c001a8d0 <Vm::x87Handler(regs*)+0x6e>
c001a933:	90                   	nop
c001a934:	e8 7f fc ff ff       	call   c001a5b8 <Vm::fpuGetLog2E()>
c001a939:	eb 95                	jmp    c001a8d0 <Vm::x87Handler(regs*)+0x6e>
c001a93b:	90                   	nop
c001a93c:	e8 6f fc ff ff       	call   c001a5b0 <Vm::fpuGetPi()>
c001a941:	eb 8d                	jmp    c001a8d0 <Vm::x87Handler(regs*)+0x6e>
c001a943:	90                   	nop
c001a944:	e8 b7 fc ff ff       	call   c001a600 <Vm::fpuGetLog102()>
c001a949:	eb 85                	jmp    c001a8d0 <Vm::x87Handler(regs*)+0x6e>
c001a94b:	90                   	nop
c001a94c:	e8 7f fc ff ff       	call   c001a5d0 <Vm::fpuGetLogE2()>
c001a951:	e9 7a ff ff ff       	jmp    c001a8d0 <Vm::x87Handler(regs*)+0x6e>
c001a956:	66 90                	xchg   ax,ax
c001a958:	8d 50 40             	lea    edx,[eax+0x40]
c001a95b:	80 fa 07             	cmp    dl,0x7
c001a95e:	77 18                	ja     c001a978 <Vm::x87Handler(regs*)+0x116>
c001a960:	83 ec 0c             	sub    esp,0xc
c001a963:	2d c0 00 00 00       	sub    eax,0xc0
c001a968:	50                   	push   eax
c001a969:	e8 b4 fd ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001a96e:	59                   	pop    ecx
c001a96f:	5e                   	pop    esi
c001a970:	e9 5f ff ff ff       	jmp    c001a8d4 <Vm::x87Handler(regs*)+0x72>
c001a975:	8d 76 00             	lea    esi,[esi+0x0]
c001a978:	8d 50 38             	lea    edx,[eax+0x38]
c001a97b:	80 fa 07             	cmp    dl,0x7
c001a97e:	77 3c                	ja     c001a9bc <Vm::x87Handler(regs*)+0x15a>
c001a980:	83 ec 0c             	sub    esp,0xc
c001a983:	2d c8 00 00 00       	sub    eax,0xc8
c001a988:	50                   	push   eax
c001a989:	e8 94 fd ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001a98e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a995:	89 c6                	mov    esi,eax
c001a997:	89 d7                	mov    edi,edx
c001a999:	e8 84 fd ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001a99e:	83 c4 0c             	add    esp,0xc
c001a9a1:	52                   	push   edx
c001a9a2:	50                   	push   eax
c001a9a3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a9a7:	2d c8 00 00 00       	sub    eax,0xc8
c001a9ac:	50                   	push   eax
c001a9ad:	e8 b3 fd ff ff       	call   c001a765 <Vm::fpuSetReg(int, unsigned long long)>
c001a9b2:	83 c4 0c             	add    esp,0xc
c001a9b5:	57                   	push   edi
c001a9b6:	56                   	push   esi
c001a9b7:	e9 64 ff ff ff       	jmp    c001a920 <Vm::x87Handler(regs*)+0xbe>
c001a9bc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a9c0:	84 d2                	test   dl,dl
c001a9c2:	75 10                	jne    c001a9d4 <Vm::x87Handler(regs*)+0x172>
c001a9c4:	83 ec 0c             	sub    esp,0xc
c001a9c7:	ff 36                	push   DWORD PTR [esi]
c001a9c9:	e8 8d fa ff ff       	call   c001a45b <Vm::fpu32ToInternal(unsigned int)>
c001a9ce:	e9 c9 00 00 00       	jmp    c001aa9c <Vm::x87Handler(regs*)+0x23a>
c001a9d3:	90                   	nop
c001a9d4:	80 fa 03             	cmp    dl,0x3
c001a9d7:	75 13                	jne    c001a9ec <Vm::x87Handler(regs*)+0x18a>
c001a9d9:	e8 31 fe ff ff       	call   c001a80f <Vm::fpuPop()>
c001a9de:	55                   	push   ebp
c001a9df:	55                   	push   ebp
c001a9e0:	52                   	push   edx
c001a9e1:	50                   	push   eax
c001a9e2:	e8 0d fa ff ff       	call   c001a3f4 <Vm::fpuInternalTo32(unsigned long long)>
c001a9e7:	e9 90 00 00 00       	jmp    c001aa7c <Vm::x87Handler(regs*)+0x21a>
c001a9ec:	80 fa 05             	cmp    dl,0x5
c001a9ef:	75 0f                	jne    c001aa00 <Vm::x87Handler(regs*)+0x19e>
c001a9f1:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a9f4:	66 a3 a2 9f 02 c0    	mov    ds:0xc0029fa2,ax
c001a9fa:	e9 ed 00 00 00       	jmp    c001aaec <Vm::x87Handler(regs*)+0x28a>
c001a9ff:	90                   	nop
c001aa00:	31 c0                	xor    eax,eax
c001aa02:	80 fa 07             	cmp    dl,0x7
c001aa05:	0f 85 69 09 00 00    	jne    c001b374 <Vm::x87Handler(regs*)+0xb12>
c001aa0b:	66 a1 a2 9f 02 c0    	mov    ax,ds:0xc0029fa2
c001aa11:	66 89 06             	mov    WORD PTR [esi],ax
c001aa14:	e9 d3 00 00 00       	jmp    c001aaec <Vm::x87Handler(regs*)+0x28a>
c001aa19:	8d 76 00             	lea    esi,[esi+0x0]
c001aa1c:	80 fa d8             	cmp    dl,0xd8
c001aa1f:	0f 84 d3 00 00 00    	je     c001aaf8 <Vm::x87Handler(regs*)+0x296>
c001aa25:	80 fa dc             	cmp    dl,0xdc
c001aa28:	0f 84 2a 02 00 00    	je     c001ac58 <Vm::x87Handler(regs*)+0x3f6>
c001aa2e:	80 fa de             	cmp    dl,0xde
c001aa31:	0f 84 f1 02 00 00    	je     c001ad28 <Vm::x87Handler(regs*)+0x4c6>
c001aa37:	80 fa dd             	cmp    dl,0xdd
c001aa3a:	0f 84 94 04 00 00    	je     c001aed4 <Vm::x87Handler(regs*)+0x672>
c001aa40:	80 fa da             	cmp    dl,0xda
c001aa43:	0f 84 5f 05 00 00    	je     c001afa8 <Vm::x87Handler(regs*)+0x746>
c001aa49:	80 fa df             	cmp    dl,0xdf
c001aa4c:	0f 84 aa 05 00 00    	je     c001affc <Vm::x87Handler(regs*)+0x79a>
c001aa52:	31 c0                	xor    eax,eax
c001aa54:	80 fa db             	cmp    dl,0xdb
c001aa57:	0f 85 17 09 00 00    	jne    c001b374 <Vm::x87Handler(regs*)+0xb12>
c001aa5d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001aa61:	80 fa 03             	cmp    dl,0x3
c001aa64:	0f 85 c2 06 00 00    	jne    c001b12c <Vm::x87Handler(regs*)+0x8ca>
c001aa6a:	e8 a0 fd ff ff       	call   c001a80f <Vm::fpuPop()>
c001aa6f:	55                   	push   ebp
c001aa70:	55                   	push   ebp
c001aa71:	8d 76 00             	lea    esi,[esi+0x0]
c001aa74:	52                   	push   edx
c001aa75:	50                   	push   eax
c001aa76:	e8 2e fa ff ff       	call   c001a4a9 <Vm::fpuFloatToLong(unsigned long long)>
c001aa7b:	90                   	nop
c001aa7c:	83 c4 10             	add    esp,0x10
c001aa7f:	89 06                	mov    DWORD PTR [esi],eax
c001aa81:	eb 69                	jmp    c001aaec <Vm::x87Handler(regs*)+0x28a>
c001aa83:	90                   	nop
c001aa84:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001aa88:	84 d2                	test   dl,dl
c001aa8a:	0f 85 2c 06 00 00    	jne    c001b0bc <Vm::x87Handler(regs*)+0x85a>
c001aa90:	57                   	push   edi
c001aa91:	57                   	push   edi
c001aa92:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aa95:	ff 36                	push   DWORD PTR [esi]
c001aa97:	e8 04 fa ff ff       	call   c001a4a0 <Vm::fpu64ToInternal(unsigned long long)>
c001aa9c:	5e                   	pop    esi
c001aa9d:	5f                   	pop    edi
c001aa9e:	52                   	push   edx
c001aa9f:	50                   	push   eax
c001aaa0:	e8 0c fd ff ff       	call   c001a7b1 <Vm::fpuPush(unsigned long long)>
c001aaa5:	8d 76 00             	lea    esi,[esi+0x0]
c001aaa8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aaac:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001aaaf:	e9 2c fe ff ff       	jmp    c001a8e0 <Vm::x87Handler(regs*)+0x7e>
c001aab4:	80 fa 03             	cmp    dl,0x3
c001aab7:	0f 85 2b 07 00 00    	jne    c001b1e8 <Vm::x87Handler(regs*)+0x986>
c001aabd:	57                   	push   edi
c001aabe:	57                   	push   edi
c001aabf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aac2:	ff 36                	push   DWORD PTR [esi]
c001aac4:	e8 d7 f9 ff ff       	call   c001a4a0 <Vm::fpu64ToInternal(unsigned long long)>
c001aac9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aad0:	89 c6                	mov    esi,eax
c001aad2:	89 d7                	mov    edi,edx
c001aad4:	e8 49 fc ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001aad9:	57                   	push   edi
c001aada:	56                   	push   esi
c001aadb:	52                   	push   edx
c001aadc:	50                   	push   eax
c001aadd:	e8 60 fb ff ff       	call   c001a642 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001aae2:	83 c4 20             	add    esp,0x20
c001aae5:	e8 25 fd ff ff       	call   c001a80f <Vm::fpuPop()>
c001aaea:	66 90                	xchg   ax,ax
c001aaec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aaf0:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001aaf3:	e9 ec fd ff ff       	jmp    c001a8e4 <Vm::x87Handler(regs*)+0x82>
c001aaf8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aafc:	8d 50 40             	lea    edx,[eax+0x40]
c001aaff:	80 fa 07             	cmp    dl,0x7
c001ab02:	77 2c                	ja     c001ab30 <Vm::x87Handler(regs*)+0x2ce>
c001ab04:	83 ec 0c             	sub    esp,0xc
c001ab07:	2d c0 00 00 00       	sub    eax,0xc0
c001ab0c:	50                   	push   eax
c001ab0d:	e8 10 fc ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001ab12:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ab19:	89 c6                	mov    esi,eax
c001ab1b:	89 d7                	mov    edi,edx
c001ab1d:	e8 00 fc ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001ab22:	57                   	push   edi
c001ab23:	56                   	push   esi
c001ab24:	52                   	push   edx
c001ab25:	50                   	push   eax
c001ab26:	e8 6d fb ff ff       	call   c001a698 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ab2b:	eb 33                	jmp    c001ab60 <Vm::x87Handler(regs*)+0x2fe>
c001ab2d:	8d 76 00             	lea    esi,[esi+0x0]
c001ab30:	8d 50 38             	lea    edx,[eax+0x38]
c001ab33:	80 fa 07             	cmp    dl,0x7
c001ab36:	77 30                	ja     c001ab68 <Vm::x87Handler(regs*)+0x306>
c001ab38:	83 ec 0c             	sub    esp,0xc
c001ab3b:	2d c8 00 00 00       	sub    eax,0xc8
c001ab40:	50                   	push   eax
c001ab41:	e8 dc fb ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001ab46:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ab4d:	89 c6                	mov    esi,eax
c001ab4f:	89 d7                	mov    edi,edx
c001ab51:	e8 cc fb ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001ab56:	57                   	push   edi
c001ab57:	56                   	push   esi
c001ab58:	52                   	push   edx
c001ab59:	50                   	push   eax
c001ab5a:	e8 72 fb ff ff       	call   c001a6d1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ab5f:	90                   	nop
c001ab60:	83 c4 1c             	add    esp,0x1c
c001ab63:	e9 b4 fd ff ff       	jmp    c001a91c <Vm::x87Handler(regs*)+0xba>
c001ab68:	8d 50 30             	lea    edx,[eax+0x30]
c001ab6b:	80 fa 07             	cmp    dl,0x7
c001ab6e:	77 10                	ja     c001ab80 <Vm::x87Handler(regs*)+0x31e>
c001ab70:	83 ec 0c             	sub    esp,0xc
c001ab73:	2d d0 00 00 00       	sub    eax,0xd0
c001ab78:	e9 c3 03 00 00       	jmp    c001af40 <Vm::x87Handler(regs*)+0x6de>
c001ab7d:	8d 76 00             	lea    esi,[esi+0x0]
c001ab80:	8d 50 28             	lea    edx,[eax+0x28]
c001ab83:	80 fa 07             	cmp    dl,0x7
c001ab86:	77 10                	ja     c001ab98 <Vm::x87Handler(regs*)+0x336>
c001ab88:	83 ec 0c             	sub    esp,0xc
c001ab8b:	2d d8 00 00 00       	sub    eax,0xd8
c001ab90:	e9 e7 03 00 00       	jmp    c001af7c <Vm::x87Handler(regs*)+0x71a>
c001ab95:	8d 76 00             	lea    esi,[esi+0x0]
c001ab98:	8d 50 20             	lea    edx,[eax+0x20]
c001ab9b:	80 fa 07             	cmp    dl,0x7
c001ab9e:	77 1c                	ja     c001abbc <Vm::x87Handler(regs*)+0x35a>
c001aba0:	83 ec 0c             	sub    esp,0xc
c001aba3:	2d e0 00 00 00       	sub    eax,0xe0
c001aba8:	50                   	push   eax
c001aba9:	e8 74 fb ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001abae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001abb5:	89 c6                	mov    esi,eax
c001abb7:	89 d7                	mov    edi,edx
c001abb9:	eb 25                	jmp    c001abe0 <Vm::x87Handler(regs*)+0x37e>
c001abbb:	90                   	nop
c001abbc:	8d 50 18             	lea    edx,[eax+0x18]
c001abbf:	80 fa 07             	cmp    dl,0x7
c001abc2:	77 30                	ja     c001abf4 <Vm::x87Handler(regs*)+0x392>
c001abc4:	83 ec 0c             	sub    esp,0xc
c001abc7:	6a 00                	push   0x0
c001abc9:	e8 54 fb ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001abce:	89 c6                	mov    esi,eax
c001abd0:	89 d7                	mov    edi,edx
c001abd2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001abd6:	2d e8 00 00 00       	sub    eax,0xe8
c001abdb:	89 04 24             	mov    DWORD PTR [esp],eax
c001abde:	66 90                	xchg   ax,ax
c001abe0:	e8 3d fb ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001abe5:	57                   	push   edi
c001abe6:	56                   	push   esi
c001abe7:	52                   	push   edx
c001abe8:	50                   	push   eax
c001abe9:	e8 d4 fa ff ff       	call   c001a6c2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001abee:	e9 6d ff ff ff       	jmp    c001ab60 <Vm::x87Handler(regs*)+0x2fe>
c001abf3:	90                   	nop
c001abf4:	8d 50 10             	lea    edx,[eax+0x10]
c001abf7:	80 fa 07             	cmp    dl,0x7
c001abfa:	77 1c                	ja     c001ac18 <Vm::x87Handler(regs*)+0x3b6>
c001abfc:	83 ec 0c             	sub    esp,0xc
c001abff:	2d f0 00 00 00       	sub    eax,0xf0
c001ac04:	50                   	push   eax
c001ac05:	e8 18 fb ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001ac0a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ac11:	89 c6                	mov    esi,eax
c001ac13:	89 d7                	mov    edi,edx
c001ac15:	eb 25                	jmp    c001ac3c <Vm::x87Handler(regs*)+0x3da>
c001ac17:	90                   	nop
c001ac18:	3c f7                	cmp    al,0xf7
c001ac1a:	0f 86 00 04 00 00    	jbe    c001b020 <Vm::x87Handler(regs*)+0x7be>
c001ac20:	83 ec 0c             	sub    esp,0xc
c001ac23:	6a 00                	push   0x0
c001ac25:	e8 f8 fa ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001ac2a:	89 c6                	mov    esi,eax
c001ac2c:	89 d7                	mov    edi,edx
c001ac2e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ac32:	2d f8 00 00 00       	sub    eax,0xf8
c001ac37:	89 04 24             	mov    DWORD PTR [esp],eax
c001ac3a:	66 90                	xchg   ax,ax
c001ac3c:	e8 e1 fa ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001ac41:	57                   	push   edi
c001ac42:	56                   	push   esi
c001ac43:	52                   	push   edx
c001ac44:	50                   	push   eax
c001ac45:	e8 a6 fa ff ff       	call   c001a6f0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ac4a:	83 c4 1c             	add    esp,0x1c
c001ac4d:	52                   	push   edx
c001ac4e:	50                   	push   eax
c001ac4f:	6a 00                	push   0x0
c001ac51:	e9 6a 02 00 00       	jmp    c001aec0 <Vm::x87Handler(regs*)+0x65e>
c001ac56:	66 90                	xchg   ax,ax
c001ac58:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ac5c:	8d 50 40             	lea    edx,[eax+0x40]
c001ac5f:	80 fa 07             	cmp    dl,0x7
c001ac62:	77 38                	ja     c001ac9c <Vm::x87Handler(regs*)+0x43a>
c001ac64:	83 ec 0c             	sub    esp,0xc
c001ac67:	2d c0 00 00 00       	sub    eax,0xc0
c001ac6c:	50                   	push   eax
c001ac6d:	e8 b0 fa ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001ac72:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ac79:	89 c6                	mov    esi,eax
c001ac7b:	89 d7                	mov    edi,edx
c001ac7d:	e8 a0 fa ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001ac82:	57                   	push   edi
c001ac83:	56                   	push   esi
c001ac84:	52                   	push   edx
c001ac85:	50                   	push   eax
c001ac86:	e8 0d fa ff ff       	call   c001a698 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ac8b:	83 c4 1c             	add    esp,0x1c
c001ac8e:	52                   	push   edx
c001ac8f:	50                   	push   eax
c001ac90:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ac94:	2d c0 00 00 00       	sub    eax,0xc0
c001ac99:	eb 41                	jmp    c001acdc <Vm::x87Handler(regs*)+0x47a>
c001ac9b:	90                   	nop
c001ac9c:	8d 50 38             	lea    edx,[eax+0x38]
c001ac9f:	80 fa 07             	cmp    dl,0x7
c001aca2:	77 40                	ja     c001ace4 <Vm::x87Handler(regs*)+0x482>
c001aca4:	83 ec 0c             	sub    esp,0xc
c001aca7:	2d c8 00 00 00       	sub    eax,0xc8
c001acac:	50                   	push   eax
c001acad:	e8 70 fa ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001acb2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001acb9:	89 c6                	mov    esi,eax
c001acbb:	89 d7                	mov    edi,edx
c001acbd:	e8 60 fa ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001acc2:	57                   	push   edi
c001acc3:	56                   	push   esi
c001acc4:	52                   	push   edx
c001acc5:	50                   	push   eax
c001acc6:	e8 06 fa ff ff       	call   c001a6d1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001accb:	83 c4 1c             	add    esp,0x1c
c001acce:	52                   	push   edx
c001accf:	50                   	push   eax
c001acd0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001acd4:	2d c8 00 00 00       	sub    eax,0xc8
c001acd9:	8d 76 00             	lea    esi,[esi+0x0]
c001acdc:	50                   	push   eax
c001acdd:	e9 42 fc ff ff       	jmp    c001a924 <Vm::x87Handler(regs*)+0xc2>
c001ace2:	66 90                	xchg   ax,ax
c001ace4:	83 c0 18             	add    eax,0x18
c001ace7:	3c 07                	cmp    al,0x7
c001ace9:	0f 87 6d 04 00 00    	ja     c001b15c <Vm::x87Handler(regs*)+0x8fa>
c001acef:	83 ec 0c             	sub    esp,0xc
c001acf2:	6a 00                	push   0x0
c001acf4:	e8 29 fa ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001acf9:	89 c6                	mov    esi,eax
c001acfb:	89 d7                	mov    edi,edx
c001acfd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ad01:	2d e8 00 00 00       	sub    eax,0xe8
c001ad06:	89 04 24             	mov    DWORD PTR [esp],eax
c001ad09:	e8 14 fa ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001ad0e:	57                   	push   edi
c001ad0f:	56                   	push   esi
c001ad10:	52                   	push   edx
c001ad11:	50                   	push   eax
c001ad12:	e8 ab f9 ff ff       	call   c001a6c2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ad17:	83 c4 1c             	add    esp,0x1c
c001ad1a:	52                   	push   edx
c001ad1b:	50                   	push   eax
c001ad1c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ad20:	2d e8 00 00 00       	sub    eax,0xe8
c001ad25:	eb b5                	jmp    c001acdc <Vm::x87Handler(regs*)+0x47a>
c001ad27:	90                   	nop
c001ad28:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ad2c:	8d 50 40             	lea    edx,[eax+0x40]
c001ad2f:	80 fa 07             	cmp    dl,0x7
c001ad32:	77 3c                	ja     c001ad70 <Vm::x87Handler(regs*)+0x50e>
c001ad34:	83 ec 0c             	sub    esp,0xc
c001ad37:	2d c0 00 00 00       	sub    eax,0xc0
c001ad3c:	50                   	push   eax
c001ad3d:	e8 e0 f9 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001ad42:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ad49:	89 c6                	mov    esi,eax
c001ad4b:	89 d7                	mov    edi,edx
c001ad4d:	e8 d0 f9 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001ad52:	57                   	push   edi
c001ad53:	56                   	push   esi
c001ad54:	52                   	push   edx
c001ad55:	50                   	push   eax
c001ad56:	e8 3d f9 ff ff       	call   c001a698 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ad5b:	83 c4 1c             	add    esp,0x1c
c001ad5e:	52                   	push   edx
c001ad5f:	50                   	push   eax
c001ad60:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ad64:	2d c0 00 00 00       	sub    eax,0xc0
c001ad69:	e9 b2 01 00 00       	jmp    c001af20 <Vm::x87Handler(regs*)+0x6be>
c001ad6e:	66 90                	xchg   ax,ax
c001ad70:	8d 50 20             	lea    edx,[eax+0x20]
c001ad73:	80 fa 07             	cmp    dl,0x7
c001ad76:	77 3c                	ja     c001adb4 <Vm::x87Handler(regs*)+0x552>
c001ad78:	83 ec 0c             	sub    esp,0xc
c001ad7b:	2d e0 00 00 00       	sub    eax,0xe0
c001ad80:	50                   	push   eax
c001ad81:	e8 9c f9 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001ad86:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ad8d:	89 c6                	mov    esi,eax
c001ad8f:	89 d7                	mov    edi,edx
c001ad91:	e8 8c f9 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001ad96:	57                   	push   edi
c001ad97:	56                   	push   esi
c001ad98:	52                   	push   edx
c001ad99:	50                   	push   eax
c001ad9a:	e8 23 f9 ff ff       	call   c001a6c2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ad9f:	83 c4 1c             	add    esp,0x1c
c001ada2:	52                   	push   edx
c001ada3:	50                   	push   eax
c001ada4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ada8:	2d e0 00 00 00       	sub    eax,0xe0
c001adad:	e9 6e 01 00 00       	jmp    c001af20 <Vm::x87Handler(regs*)+0x6be>
c001adb2:	66 90                	xchg   ax,ax
c001adb4:	8d 50 18             	lea    edx,[eax+0x18]
c001adb7:	80 fa 07             	cmp    dl,0x7
c001adba:	77 3c                	ja     c001adf8 <Vm::x87Handler(regs*)+0x596>
c001adbc:	83 ec 0c             	sub    esp,0xc
c001adbf:	6a 00                	push   0x0
c001adc1:	e8 5c f9 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001adc6:	89 c6                	mov    esi,eax
c001adc8:	89 d7                	mov    edi,edx
c001adca:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001adce:	2d e8 00 00 00       	sub    eax,0xe8
c001add3:	89 04 24             	mov    DWORD PTR [esp],eax
c001add6:	e8 47 f9 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001addb:	57                   	push   edi
c001addc:	56                   	push   esi
c001addd:	52                   	push   edx
c001adde:	50                   	push   eax
c001addf:	e8 de f8 ff ff       	call   c001a6c2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ade4:	83 c4 1c             	add    esp,0x1c
c001ade7:	52                   	push   edx
c001ade8:	50                   	push   eax
c001ade9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aded:	2d e8 00 00 00       	sub    eax,0xe8
c001adf2:	e9 29 01 00 00       	jmp    c001af20 <Vm::x87Handler(regs*)+0x6be>
c001adf7:	90                   	nop
c001adf8:	8d 50 38             	lea    edx,[eax+0x38]
c001adfb:	80 fa 07             	cmp    dl,0x7
c001adfe:	77 3c                	ja     c001ae3c <Vm::x87Handler(regs*)+0x5da>
c001ae00:	83 ec 0c             	sub    esp,0xc
c001ae03:	2d c8 00 00 00       	sub    eax,0xc8
c001ae08:	50                   	push   eax
c001ae09:	e8 14 f9 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001ae0e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ae15:	89 c6                	mov    esi,eax
c001ae17:	89 d7                	mov    edi,edx
c001ae19:	e8 04 f9 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001ae1e:	57                   	push   edi
c001ae1f:	56                   	push   esi
c001ae20:	52                   	push   edx
c001ae21:	50                   	push   eax
c001ae22:	e8 aa f8 ff ff       	call   c001a6d1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ae27:	83 c4 1c             	add    esp,0x1c
c001ae2a:	52                   	push   edx
c001ae2b:	50                   	push   eax
c001ae2c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ae30:	2d c8 00 00 00       	sub    eax,0xc8
c001ae35:	e9 82 00 00 00       	jmp    c001aebc <Vm::x87Handler(regs*)+0x65a>
c001ae3a:	66 90                	xchg   ax,ax
c001ae3c:	3c f7                	cmp    al,0xf7
c001ae3e:	76 38                	jbe    c001ae78 <Vm::x87Handler(regs*)+0x616>
c001ae40:	83 ec 0c             	sub    esp,0xc
c001ae43:	6a 00                	push   0x0
c001ae45:	e8 d8 f8 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001ae4a:	89 c6                	mov    esi,eax
c001ae4c:	89 d7                	mov    edi,edx
c001ae4e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ae52:	2d f8 00 00 00       	sub    eax,0xf8
c001ae57:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae5a:	e8 c3 f8 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001ae5f:	57                   	push   edi
c001ae60:	56                   	push   esi
c001ae61:	52                   	push   edx
c001ae62:	50                   	push   eax
c001ae63:	e8 88 f8 ff ff       	call   c001a6f0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ae68:	83 c4 1c             	add    esp,0x1c
c001ae6b:	52                   	push   edx
c001ae6c:	50                   	push   eax
c001ae6d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ae71:	2d f8 00 00 00       	sub    eax,0xf8
c001ae76:	eb 44                	jmp    c001aebc <Vm::x87Handler(regs*)+0x65a>
c001ae78:	8d 50 10             	lea    edx,[eax+0x10]
c001ae7b:	80 fa 07             	cmp    dl,0x7
c001ae7e:	0f 87 6c 01 00 00    	ja     c001aff0 <Vm::x87Handler(regs*)+0x78e>
c001ae84:	83 ec 0c             	sub    esp,0xc
c001ae87:	2d f0 00 00 00       	sub    eax,0xf0
c001ae8c:	50                   	push   eax
c001ae8d:	e8 90 f8 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001ae92:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ae99:	89 c6                	mov    esi,eax
c001ae9b:	89 d7                	mov    edi,edx
c001ae9d:	e8 80 f8 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001aea2:	57                   	push   edi
c001aea3:	56                   	push   esi
c001aea4:	52                   	push   edx
c001aea5:	50                   	push   eax
c001aea6:	e8 45 f8 ff ff       	call   c001a6f0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001aeab:	83 c4 1c             	add    esp,0x1c
c001aeae:	52                   	push   edx
c001aeaf:	50                   	push   eax
c001aeb0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aeb4:	2d f0 00 00 00       	sub    eax,0xf0
c001aeb9:	8d 76 00             	lea    esi,[esi+0x0]
c001aebc:	50                   	push   eax
c001aebd:	8d 76 00             	lea    esi,[esi+0x0]
c001aec0:	e8 a0 f8 ff ff       	call   c001a765 <Vm::fpuSetReg(int, unsigned long long)>
c001aec5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001aec9:	e8 41 f9 ff ff       	call   c001a80f <Vm::fpuPop()>
c001aece:	e9 0d fa ff ff       	jmp    c001a8e0 <Vm::x87Handler(regs*)+0x7e>
c001aed3:	90                   	nop
c001aed4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aed8:	8d 50 30             	lea    edx,[eax+0x30]
c001aedb:	80 fa 07             	cmp    dl,0x7
c001aede:	77 20                	ja     c001af00 <Vm::x87Handler(regs*)+0x69e>
c001aee0:	83 ec 0c             	sub    esp,0xc
c001aee3:	6a 00                	push   0x0
c001aee5:	e8 38 f8 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001aeea:	83 c4 0c             	add    esp,0xc
c001aeed:	52                   	push   edx
c001aeee:	50                   	push   eax
c001aeef:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aef3:	2d d0 00 00 00       	sub    eax,0xd0
c001aef8:	e9 df fd ff ff       	jmp    c001acdc <Vm::x87Handler(regs*)+0x47a>
c001aefd:	8d 76 00             	lea    esi,[esi+0x0]
c001af00:	8d 50 28             	lea    edx,[eax+0x28]
c001af03:	80 fa 07             	cmp    dl,0x7
c001af06:	77 28                	ja     c001af30 <Vm::x87Handler(regs*)+0x6ce>
c001af08:	83 ec 0c             	sub    esp,0xc
c001af0b:	6a 00                	push   0x0
c001af0d:	e8 10 f8 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001af12:	83 c4 0c             	add    esp,0xc
c001af15:	52                   	push   edx
c001af16:	50                   	push   eax
c001af17:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001af1b:	2d d8 00 00 00       	sub    eax,0xd8
c001af20:	50                   	push   eax
c001af21:	e8 3f f8 ff ff       	call   c001a765 <Vm::fpuSetReg(int, unsigned long long)>
c001af26:	e8 e4 f8 ff ff       	call   c001a80f <Vm::fpuPop()>
c001af2b:	e9 ac f9 ff ff       	jmp    c001a8dc <Vm::x87Handler(regs*)+0x7a>
c001af30:	8d 50 20             	lea    edx,[eax+0x20]
c001af33:	80 fa 07             	cmp    dl,0x7
c001af36:	77 30                	ja     c001af68 <Vm::x87Handler(regs*)+0x706>
c001af38:	83 ec 0c             	sub    esp,0xc
c001af3b:	2d e0 00 00 00       	sub    eax,0xe0
c001af40:	50                   	push   eax
c001af41:	e8 dc f7 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001af46:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001af4d:	89 c6                	mov    esi,eax
c001af4f:	89 d7                	mov    edi,edx
c001af51:	e8 cc f7 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001af56:	57                   	push   edi
c001af57:	56                   	push   esi
c001af58:	52                   	push   edx
c001af59:	50                   	push   eax
c001af5a:	e8 e3 f6 ff ff       	call   c001a642 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001af5f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001af63:	e9 78 02 00 00       	jmp    c001b1e0 <Vm::x87Handler(regs*)+0x97e>
c001af68:	8d 50 18             	lea    edx,[eax+0x18]
c001af6b:	80 fa 07             	cmp    dl,0x7
c001af6e:	0f 87 10 fb ff ff    	ja     c001aa84 <Vm::x87Handler(regs*)+0x222>
c001af74:	83 ec 0c             	sub    esp,0xc
c001af77:	2d e8 00 00 00       	sub    eax,0xe8
c001af7c:	50                   	push   eax
c001af7d:	e8 a0 f7 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001af82:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001af89:	89 c6                	mov    esi,eax
c001af8b:	89 d7                	mov    edi,edx
c001af8d:	e8 90 f7 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001af92:	57                   	push   edi
c001af93:	56                   	push   esi
c001af94:	52                   	push   edx
c001af95:	50                   	push   eax
c001af96:	e8 a7 f6 ff ff       	call   c001a642 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001af9b:	83 c4 20             	add    esp,0x20
c001af9e:	e8 6c f8 ff ff       	call   c001a80f <Vm::fpuPop()>
c001afa3:	eb 6f                	jmp    c001b014 <Vm::x87Handler(regs*)+0x7b2>
c001afa5:	8d 76 00             	lea    esi,[esi+0x0]
c001afa8:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001afac:	0f 85 22 01 00 00    	jne    c001b0d4 <Vm::x87Handler(regs*)+0x872>
c001afb2:	66 90                	xchg   ax,ax
c001afb4:	83 ec 0c             	sub    esp,0xc
c001afb7:	6a 01                	push   0x1
c001afb9:	e8 64 f7 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001afbe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001afc5:	89 c6                	mov    esi,eax
c001afc7:	89 d7                	mov    edi,edx
c001afc9:	e8 54 f7 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001afce:	57                   	push   edi
c001afcf:	56                   	push   esi
c001afd0:	52                   	push   edx
c001afd1:	50                   	push   eax
c001afd2:	e8 6b f6 ff ff       	call   c001a642 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001afd7:	83 c4 20             	add    esp,0x20
c001afda:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001afde:	e8 2c f8 ff ff       	call   c001a80f <Vm::fpuPop()>
c001afe3:	e8 27 f8 ff ff       	call   c001a80f <Vm::fpuPop()>
c001afe8:	e9 f7 f8 ff ff       	jmp    c001a8e4 <Vm::x87Handler(regs*)+0x82>
c001afed:	8d 76 00             	lea    esi,[esi+0x0]
c001aff0:	3c d9                	cmp    al,0xd9
c001aff2:	0f 85 e8 02 00 00    	jne    c001b2e0 <Vm::x87Handler(regs*)+0xa7e>
c001aff8:	eb ba                	jmp    c001afb4 <Vm::x87Handler(regs*)+0x752>
c001affa:	66 90                	xchg   ax,ax
c001affc:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001b000:	0f 85 2a 03 00 00    	jne    c001b330 <Vm::x87Handler(regs*)+0xace>
c001b006:	0f b7 05 a0 9f 02 c0 	movzx  eax,WORD PTR ds:0xc0029fa0
c001b00d:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001b011:	8d 76 00             	lea    esi,[esi+0x0]
c001b014:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001b018:	e9 c7 f8 ff ff       	jmp    c001a8e4 <Vm::x87Handler(regs*)+0x82>
c001b01d:	8d 76 00             	lea    esi,[esi+0x0]
c001b020:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b024:	84 d2                	test   dl,dl
c001b026:	75 10                	jne    c001b038 <Vm::x87Handler(regs*)+0x7d6>
c001b028:	83 ec 0c             	sub    esp,0xc
c001b02b:	ff 36                	push   DWORD PTR [esi]
c001b02d:	e8 29 f4 ff ff       	call   c001a45b <Vm::fpu32ToInternal(unsigned int)>
c001b032:	e9 39 01 00 00       	jmp    c001b170 <Vm::x87Handler(regs*)+0x90e>
c001b037:	90                   	nop
c001b038:	80 fa 01             	cmp    dl,0x1
c001b03b:	75 0f                	jne    c001b04c <Vm::x87Handler(regs*)+0x7ea>
c001b03d:	83 ec 0c             	sub    esp,0xc
c001b040:	ff 36                	push   DWORD PTR [esi]
c001b042:	e8 14 f4 ff ff       	call   c001a45b <Vm::fpu32ToInternal(unsigned int)>
c001b047:	e9 b4 02 00 00       	jmp    c001b300 <Vm::x87Handler(regs*)+0xa9e>
c001b04c:	80 fa 04             	cmp    dl,0x4
c001b04f:	75 0f                	jne    c001b060 <Vm::x87Handler(regs*)+0x7fe>
c001b051:	83 ec 0c             	sub    esp,0xc
c001b054:	ff 36                	push   DWORD PTR [esi]
c001b056:	e8 00 f4 ff ff       	call   c001a45b <Vm::fpu32ToInternal(unsigned int)>
c001b05b:	e9 9c 01 00 00       	jmp    c001b1fc <Vm::x87Handler(regs*)+0x99a>
c001b060:	80 fa 05             	cmp    dl,0x5
c001b063:	75 1b                	jne    c001b080 <Vm::x87Handler(regs*)+0x81e>
c001b065:	83 ec 0c             	sub    esp,0xc
c001b068:	6a 00                	push   0x0
c001b06a:	e8 b3 f6 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001b06f:	89 c7                	mov    edi,eax
c001b071:	89 d5                	mov    ebp,edx
c001b073:	58                   	pop    eax
c001b074:	ff 36                	push   DWORD PTR [esi]
c001b076:	e8 e0 f3 ff ff       	call   c001a45b <Vm::fpu32ToInternal(unsigned int)>
c001b07b:	e9 bc 01 00 00       	jmp    c001b23c <Vm::x87Handler(regs*)+0x9da>
c001b080:	80 fa 06             	cmp    dl,0x6
c001b083:	75 0f                	jne    c001b094 <Vm::x87Handler(regs*)+0x832>
c001b085:	83 ec 0c             	sub    esp,0xc
c001b088:	ff 36                	push   DWORD PTR [esi]
c001b08a:	e8 cc f3 ff ff       	call   c001a45b <Vm::fpu32ToInternal(unsigned int)>
c001b08f:	e9 cc 01 00 00       	jmp    c001b260 <Vm::x87Handler(regs*)+0x9fe>
c001b094:	31 c0                	xor    eax,eax
c001b096:	80 fa 07             	cmp    dl,0x7
c001b099:	0f 85 d5 02 00 00    	jne    c001b374 <Vm::x87Handler(regs*)+0xb12>
c001b09f:	83 ec 0c             	sub    esp,0xc
c001b0a2:	6a 00                	push   0x0
c001b0a4:	e8 79 f6 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001b0a9:	89 c7                	mov    edi,eax
c001b0ab:	89 d5                	mov    ebp,edx
c001b0ad:	58                   	pop    eax
c001b0ae:	ff 36                	push   DWORD PTR [esi]
c001b0b0:	e8 a6 f3 ff ff       	call   c001a45b <Vm::fpu32ToInternal(unsigned int)>
c001b0b5:	e9 ee 01 00 00       	jmp    c001b2a8 <Vm::x87Handler(regs*)+0xa46>
c001b0ba:	66 90                	xchg   ax,ax
c001b0bc:	80 fa 03             	cmp    dl,0x3
c001b0bf:	0f 85 f7 01 00 00    	jne    c001b2bc <Vm::x87Handler(regs*)+0xa5a>
c001b0c5:	e8 45 f7 ff ff       	call   c001a80f <Vm::fpuPop()>
c001b0ca:	51                   	push   ecx
c001b0cb:	51                   	push   ecx
c001b0cc:	e9 03 02 00 00       	jmp    c001b2d4 <Vm::x87Handler(regs*)+0xa72>
c001b0d1:	8d 76 00             	lea    esi,[esi+0x0]
c001b0d4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b0d8:	80 fa 01             	cmp    dl,0x1
c001b0db:	75 0b                	jne    c001b0e8 <Vm::x87Handler(regs*)+0x886>
c001b0dd:	57                   	push   edi
c001b0de:	57                   	push   edi
c001b0df:	8b 06                	mov    eax,DWORD PTR [esi]
c001b0e1:	e9 0e 02 00 00       	jmp    c001b2f4 <Vm::x87Handler(regs*)+0xa92>
c001b0e6:	66 90                	xchg   ax,ax
c001b0e8:	80 fa 04             	cmp    dl,0x4
c001b0eb:	75 13                	jne    c001b100 <Vm::x87Handler(regs*)+0x89e>
c001b0ed:	31 d2                	xor    edx,edx
c001b0ef:	51                   	push   ecx
c001b0f0:	51                   	push   ecx
c001b0f1:	8b 06                	mov    eax,DWORD PTR [esi]
c001b0f3:	52                   	push   edx
c001b0f4:	50                   	push   eax
c001b0f5:	e8 4a f4 ff ff       	call   c001a544 <Vm::fpuLongToFloat(long long)>
c001b0fa:	e9 fd 00 00 00       	jmp    c001b1fc <Vm::x87Handler(regs*)+0x99a>
c001b0ff:	90                   	nop
c001b100:	31 c0                	xor    eax,eax
c001b102:	80 fa 07             	cmp    dl,0x7
c001b105:	0f 85 69 02 00 00    	jne    c001b374 <Vm::x87Handler(regs*)+0xb12>
c001b10b:	83 ec 0c             	sub    esp,0xc
c001b10e:	6a 00                	push   0x0
c001b110:	e8 0d f6 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001b115:	89 c7                	mov    edi,eax
c001b117:	89 d5                	mov    ebp,edx
c001b119:	58                   	pop    eax
c001b11a:	8b 06                	mov    eax,DWORD PTR [esi]
c001b11c:	5a                   	pop    edx
c001b11d:	31 d2                	xor    edx,edx
c001b11f:	52                   	push   edx
c001b120:	50                   	push   eax
c001b121:	e8 1e f4 ff ff       	call   c001a544 <Vm::fpuLongToFloat(long long)>
c001b126:	e9 7d 01 00 00       	jmp    c001b2a8 <Vm::x87Handler(regs*)+0xa46>
c001b12b:	90                   	nop
c001b12c:	84 d2                	test   dl,dl
c001b12e:	75 10                	jne    c001b140 <Vm::x87Handler(regs*)+0x8de>
c001b130:	31 d2                	xor    edx,edx
c001b132:	55                   	push   ebp
c001b133:	55                   	push   ebp
c001b134:	8b 06                	mov    eax,DWORD PTR [esi]
c001b136:	52                   	push   edx
c001b137:	50                   	push   eax
c001b138:	e9 03 02 00 00       	jmp    c001b340 <Vm::x87Handler(regs*)+0xade>
c001b13d:	8d 76 00             	lea    esi,[esi+0x0]
c001b140:	31 c0                	xor    eax,eax
c001b142:	80 fa 02             	cmp    dl,0x2
c001b145:	0f 85 29 02 00 00    	jne    c001b374 <Vm::x87Handler(regs*)+0xb12>
c001b14b:	83 ec 0c             	sub    esp,0xc
c001b14e:	6a 00                	push   0x0
c001b150:	e8 cd f5 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001b155:	59                   	pop    ecx
c001b156:	5f                   	pop    edi
c001b157:	e9 18 f9 ff ff       	jmp    c001aa74 <Vm::x87Handler(regs*)+0x212>
c001b15c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b160:	84 d2                	test   dl,dl
c001b162:	75 2c                	jne    c001b190 <Vm::x87Handler(regs*)+0x92e>
c001b164:	50                   	push   eax
c001b165:	50                   	push   eax
c001b166:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b169:	ff 36                	push   DWORD PTR [esi]
c001b16b:	e8 30 f3 ff ff       	call   c001a4a0 <Vm::fpu64ToInternal(unsigned long long)>
c001b170:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b177:	89 c6                	mov    esi,eax
c001b179:	89 d7                	mov    edi,edx
c001b17b:	e8 a2 f5 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001b180:	57                   	push   edi
c001b181:	56                   	push   esi
c001b182:	52                   	push   edx
c001b183:	50                   	push   eax
c001b184:	e8 0f f5 ff ff       	call   c001a698 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001b189:	e9 8e 01 00 00       	jmp    c001b31c <Vm::x87Handler(regs*)+0xaba>
c001b18e:	66 90                	xchg   ax,ax
c001b190:	80 fa 01             	cmp    dl,0x1
c001b193:	75 13                	jne    c001b1a8 <Vm::x87Handler(regs*)+0x946>
c001b195:	50                   	push   eax
c001b196:	50                   	push   eax
c001b197:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b19a:	ff 36                	push   DWORD PTR [esi]
c001b19c:	e8 ff f2 ff ff       	call   c001a4a0 <Vm::fpu64ToInternal(unsigned long long)>
c001b1a1:	e9 5a 01 00 00       	jmp    c001b300 <Vm::x87Handler(regs*)+0xa9e>
c001b1a6:	66 90                	xchg   ax,ax
c001b1a8:	80 fa 02             	cmp    dl,0x2
c001b1ab:	0f 85 03 f9 ff ff    	jne    c001aab4 <Vm::x87Handler(regs*)+0x252>
c001b1b1:	55                   	push   ebp
c001b1b2:	55                   	push   ebp
c001b1b3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b1b6:	ff 36                	push   DWORD PTR [esi]
c001b1b8:	e8 e3 f2 ff ff       	call   c001a4a0 <Vm::fpu64ToInternal(unsigned long long)>
c001b1bd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b1c4:	89 c6                	mov    esi,eax
c001b1c6:	89 d7                	mov    edi,edx
c001b1c8:	e8 55 f5 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001b1cd:	57                   	push   edi
c001b1ce:	56                   	push   esi
c001b1cf:	52                   	push   edx
c001b1d0:	50                   	push   eax
c001b1d1:	e8 6c f4 ff ff       	call   c001a642 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b1d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b1da:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001b1dd:	8d 76 00             	lea    esi,[esi+0x0]
c001b1e0:	83 c4 20             	add    esp,0x20
c001b1e3:	e9 fc f6 ff ff       	jmp    c001a8e4 <Vm::x87Handler(regs*)+0x82>
c001b1e8:	80 fa 04             	cmp    dl,0x4
c001b1eb:	75 2f                	jne    c001b21c <Vm::x87Handler(regs*)+0x9ba>
c001b1ed:	51                   	push   ecx
c001b1ee:	51                   	push   ecx
c001b1ef:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b1f2:	ff 36                	push   DWORD PTR [esi]
c001b1f4:	e8 a7 f2 ff ff       	call   c001a4a0 <Vm::fpu64ToInternal(unsigned long long)>
c001b1f9:	8d 76 00             	lea    esi,[esi+0x0]
c001b1fc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b203:	89 c6                	mov    esi,eax
c001b205:	89 d7                	mov    edi,edx
c001b207:	e8 16 f5 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001b20c:	57                   	push   edi
c001b20d:	56                   	push   esi
c001b20e:	52                   	push   edx
c001b20f:	50                   	push   eax
c001b210:	e8 ad f4 ff ff       	call   c001a6c2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001b215:	e9 02 01 00 00       	jmp    c001b31c <Vm::x87Handler(regs*)+0xaba>
c001b21a:	66 90                	xchg   ax,ax
c001b21c:	80 fa 05             	cmp    dl,0x5
c001b21f:	75 2b                	jne    c001b24c <Vm::x87Handler(regs*)+0x9ea>
c001b221:	83 ec 0c             	sub    esp,0xc
c001b224:	6a 00                	push   0x0
c001b226:	e8 f7 f4 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001b22b:	89 c7                	mov    edi,eax
c001b22d:	89 d5                	mov    ebp,edx
c001b22f:	58                   	pop    eax
c001b230:	5a                   	pop    edx
c001b231:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b234:	ff 36                	push   DWORD PTR [esi]
c001b236:	e8 65 f2 ff ff       	call   c001a4a0 <Vm::fpu64ToInternal(unsigned long long)>
c001b23b:	90                   	nop
c001b23c:	83 c4 10             	add    esp,0x10
c001b23f:	55                   	push   ebp
c001b240:	57                   	push   edi
c001b241:	52                   	push   edx
c001b242:	50                   	push   eax
c001b243:	e8 7a f4 ff ff       	call   c001a6c2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001b248:	eb 6a                	jmp    c001b2b4 <Vm::x87Handler(regs*)+0xa52>
c001b24a:	66 90                	xchg   ax,ax
c001b24c:	80 fa 06             	cmp    dl,0x6
c001b24f:	75 2f                	jne    c001b280 <Vm::x87Handler(regs*)+0xa1e>
c001b251:	51                   	push   ecx
c001b252:	51                   	push   ecx
c001b253:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b256:	ff 36                	push   DWORD PTR [esi]
c001b258:	e8 43 f2 ff ff       	call   c001a4a0 <Vm::fpu64ToInternal(unsigned long long)>
c001b25d:	8d 76 00             	lea    esi,[esi+0x0]
c001b260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b267:	89 c6                	mov    esi,eax
c001b269:	89 d7                	mov    edi,edx
c001b26b:	e8 b2 f4 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001b270:	57                   	push   edi
c001b271:	56                   	push   esi
c001b272:	52                   	push   edx
c001b273:	50                   	push   eax
c001b274:	e8 77 f4 ff ff       	call   c001a6f0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b279:	e9 9e 00 00 00       	jmp    c001b31c <Vm::x87Handler(regs*)+0xaba>
c001b27e:	66 90                	xchg   ax,ax
c001b280:	31 c0                	xor    eax,eax
c001b282:	80 fa 07             	cmp    dl,0x7
c001b285:	0f 85 e9 00 00 00    	jne    c001b374 <Vm::x87Handler(regs*)+0xb12>
c001b28b:	83 ec 0c             	sub    esp,0xc
c001b28e:	6a 00                	push   0x0
c001b290:	e8 8d f4 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001b295:	89 c7                	mov    edi,eax
c001b297:	89 d5                	mov    ebp,edx
c001b299:	58                   	pop    eax
c001b29a:	5a                   	pop    edx
c001b29b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b29e:	ff 36                	push   DWORD PTR [esi]
c001b2a0:	e8 fb f1 ff ff       	call   c001a4a0 <Vm::fpu64ToInternal(unsigned long long)>
c001b2a5:	8d 76 00             	lea    esi,[esi+0x0]
c001b2a8:	83 c4 10             	add    esp,0x10
c001b2ab:	55                   	push   ebp
c001b2ac:	57                   	push   edi
c001b2ad:	52                   	push   edx
c001b2ae:	50                   	push   eax
c001b2af:	e8 3c f4 ff ff       	call   c001a6f0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b2b4:	83 c4 0c             	add    esp,0xc
c001b2b7:	eb 67                	jmp    c001b320 <Vm::x87Handler(regs*)+0xabe>
c001b2b9:	8d 76 00             	lea    esi,[esi+0x0]
c001b2bc:	31 c0                	xor    eax,eax
c001b2be:	80 fa 02             	cmp    dl,0x2
c001b2c1:	0f 85 ad 00 00 00    	jne    c001b374 <Vm::x87Handler(regs*)+0xb12>
c001b2c7:	83 ec 0c             	sub    esp,0xc
c001b2ca:	6a 00                	push   0x0
c001b2cc:	e8 51 f4 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001b2d1:	59                   	pop    ecx
c001b2d2:	5f                   	pop    edi
c001b2d3:	90                   	nop
c001b2d4:	52                   	push   edx
c001b2d5:	50                   	push   eax
c001b2d6:	e8 77 f1 ff ff       	call   c001a452 <Vm::fpuInternalTo64(unsigned long long)>
c001b2db:	e9 84 00 00 00       	jmp    c001b364 <Vm::x87Handler(regs*)+0xb02>
c001b2e0:	31 c0                	xor    eax,eax
c001b2e2:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001b2e7:	0f 85 87 00 00 00    	jne    c001b374 <Vm::x87Handler(regs*)+0xb12>
c001b2ed:	50                   	push   eax
c001b2ee:	50                   	push   eax
c001b2ef:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001b2f2:	66 90                	xchg   ax,ax
c001b2f4:	31 d2                	xor    edx,edx
c001b2f6:	52                   	push   edx
c001b2f7:	50                   	push   eax
c001b2f8:	e8 47 f2 ff ff       	call   c001a544 <Vm::fpuLongToFloat(long long)>
c001b2fd:	8d 76 00             	lea    esi,[esi+0x0]
c001b300:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b307:	89 c6                	mov    esi,eax
c001b309:	89 d7                	mov    edi,edx
c001b30b:	e8 12 f4 ff ff       	call   c001a722 <Vm::fpuGetReg(int)>
c001b310:	57                   	push   edi
c001b311:	56                   	push   esi
c001b312:	52                   	push   edx
c001b313:	50                   	push   eax
c001b314:	e8 b8 f3 ff ff       	call   c001a6d1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001b319:	8d 76 00             	lea    esi,[esi+0x0]
c001b31c:	83 c4 1c             	add    esp,0x1c
c001b31f:	90                   	nop
c001b320:	52                   	push   edx
c001b321:	50                   	push   eax
c001b322:	6a 00                	push   0x0
c001b324:	e8 3c f4 ff ff       	call   c001a765 <Vm::fpuSetReg(int, unsigned long long)>
c001b329:	e9 7a f7 ff ff       	jmp    c001aaa8 <Vm::x87Handler(regs*)+0x246>
c001b32e:	66 90                	xchg   ax,ax
c001b330:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b334:	80 fa 05             	cmp    dl,0x5
c001b337:	75 13                	jne    c001b34c <Vm::x87Handler(regs*)+0xaea>
c001b339:	55                   	push   ebp
c001b33a:	55                   	push   ebp
c001b33b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b33e:	ff 36                	push   DWORD PTR [esi]
c001b340:	e8 c3 f1 ff ff       	call   c001a508 <Vm::fpuULongToFloat(unsigned long long)>
c001b345:	e9 52 f7 ff ff       	jmp    c001aa9c <Vm::x87Handler(regs*)+0x23a>
c001b34a:	66 90                	xchg   ax,ax
c001b34c:	31 c0                	xor    eax,eax
c001b34e:	80 fa 07             	cmp    dl,0x7
c001b351:	75 21                	jne    c001b374 <Vm::x87Handler(regs*)+0xb12>
c001b353:	e8 b7 f4 ff ff       	call   c001a80f <Vm::fpuPop()>
c001b358:	51                   	push   ecx
c001b359:	51                   	push   ecx
c001b35a:	52                   	push   edx
c001b35b:	50                   	push   eax
c001b35c:	e8 48 f1 ff ff       	call   c001a4a9 <Vm::fpuFloatToLong(unsigned long long)>
c001b361:	8d 76 00             	lea    esi,[esi+0x0]
c001b364:	83 c4 10             	add    esp,0x10
c001b367:	89 06                	mov    DWORD PTR [esi],eax
c001b369:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001b36c:	e9 7b f7 ff ff       	jmp    c001aaec <Vm::x87Handler(regs*)+0x28a>
c001b371:	8d 76 00             	lea    esi,[esi+0x0]
c001b374:	83 c4 1c             	add    esp,0x1c
c001b377:	5b                   	pop    ebx
c001b378:	5e                   	pop    esi
c001b379:	5f                   	pop    edi
c001b37a:	5d                   	pop    ebp
c001b37b:	c3                   	ret    

c001b37c <__static_initialization_and_destruction_0(int, int)>:
c001b37c:	83 ec 0c             	sub    esp,0xc
c001b37f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001b384:	75 1a                	jne    c001b3a0 <__static_initialization_and_destruction_0(int, int)+0x24>
c001b386:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001b38e:	75 10                	jne    c001b3a0 <__static_initialization_and_destruction_0(int, int)+0x24>
c001b390:	83 ec 0c             	sub    esp,0xc
c001b393:	68 a0 9f 02 c0       	push   0xc0029fa0
c001b398:	e8 27 84 00 00       	call   c00237c4 <Vm::_FPUState::_FPUState()>
c001b39d:	83 c4 10             	add    esp,0x10
c001b3a0:	90                   	nop
c001b3a1:	83 c4 0c             	add    esp,0xc
c001b3a4:	c3                   	ret    
c001b3a5:	8d 76 00             	lea    esi,[esi+0x0]

c001b3a8 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001b3a8:	83 ec 0c             	sub    esp,0xc
c001b3ab:	83 ec 08             	sub    esp,0x8
c001b3ae:	68 ff ff 00 00       	push   0xffff
c001b3b3:	6a 01                	push   0x1
c001b3b5:	e8 c2 ff ff ff       	call   c001b37c <__static_initialization_and_destruction_0(int, int)>
c001b3ba:	83 c4 10             	add    esp,0x10
c001b3bd:	83 c4 0c             	add    esp,0xc
c001b3c0:	c3                   	ret    
c001b3c1:	66 90                	xchg   ax,ax
c001b3c3:	90                   	nop

c001b3c4 <FAT::getName()>:
c001b3c4:	b8 e0 6d 02 c0       	mov    eax,0xc0026de0
c001b3c9:	c3                   	ret    
c001b3ca:	66 90                	xchg   ax,ax

c001b3cc <FAT::tell(void*, unsigned long long*)>:
c001b3cc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b3d1:	75 09                	jne    c001b3dc <FAT::tell(void*, unsigned long long*)+0x10>
c001b3d3:	b8 04 00 00 00       	mov    eax,0x4
c001b3d8:	c3                   	ret    
c001b3d9:	8d 76 00             	lea    esi,[esi+0x0]
c001b3dc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b3e1:	75 09                	jne    c001b3ec <FAT::tell(void*, unsigned long long*)+0x20>
c001b3e3:	b8 04 00 00 00       	mov    eax,0x4
c001b3e8:	c3                   	ret    
c001b3e9:	8d 76 00             	lea    esi,[esi+0x0]
c001b3ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b3f0:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001b3f3:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001b3f6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b3fa:	89 01                	mov    DWORD PTR [ecx],eax
c001b3fc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b3ff:	b8 00 00 00 00       	mov    eax,0x0
c001b404:	c3                   	ret    
c001b405:	90                   	nop
c001b406:	66 90                	xchg   ax,ax

c001b408 <FAT::stat(void*, unsigned long long*)>:
c001b408:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b40d:	75 09                	jne    c001b418 <FAT::stat(void*, unsigned long long*)+0x10>
c001b40f:	b8 04 00 00 00       	mov    eax,0x4
c001b414:	c3                   	ret    
c001b415:	8d 76 00             	lea    esi,[esi+0x0]
c001b418:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b41d:	75 09                	jne    c001b428 <FAT::stat(void*, unsigned long long*)+0x20>
c001b41f:	b8 04 00 00 00       	mov    eax,0x4
c001b424:	c3                   	ret    
c001b425:	8d 76 00             	lea    esi,[esi+0x0]
c001b428:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b42c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b42f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b432:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b436:	89 01                	mov    DWORD PTR [ecx],eax
c001b438:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b43b:	b8 00 00 00 00       	mov    eax,0x0
c001b440:	c3                   	ret    
c001b441:	90                   	nop
c001b442:	66 90                	xchg   ax,ax

c001b444 <FAT::~FAT()>:
c001b444:	83 ec 0c             	sub    esp,0xc
c001b447:	ba 2c 6e 02 c0       	mov    edx,0xc0026e2c
c001b44c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b450:	89 10                	mov    DWORD PTR [eax],edx
c001b452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b456:	83 ec 0c             	sub    esp,0xc
c001b459:	50                   	push   eax
c001b45a:	e8 23 1f ff ff       	call   c000d382 <Filesystem::~Filesystem()>
c001b45f:	83 c4 10             	add    esp,0x10
c001b462:	90                   	nop
c001b463:	83 c4 0c             	add    esp,0xc
c001b466:	c3                   	ret    
c001b467:	90                   	nop

c001b468 <FAT::~FAT()>:
c001b468:	83 ec 0c             	sub    esp,0xc
c001b46b:	83 ec 0c             	sub    esp,0xc
c001b46e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b472:	e8 cd ff ff ff       	call   c001b444 <FAT::~FAT()>
c001b477:	83 c4 10             	add    esp,0x10
c001b47a:	83 ec 08             	sub    esp,0x8
c001b47d:	6a 08                	push   0x8
c001b47f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b483:	e8 de 1a ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c001b488:	83 c4 10             	add    esp,0x10
c001b48b:	83 c4 0c             	add    esp,0xc
c001b48e:	c3                   	ret    
c001b48f:	90                   	nop

c001b490 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001b490:	83 ec 1c             	sub    esp,0x1c
c001b493:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001b49a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b49f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b4a3:	8b 04 85 20 a0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5fe0]
c001b4aa:	83 f8 ff             	cmp    eax,0xffffffff
c001b4ad:	75 35                	jne    c001b4e4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001b4af:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b4b3:	88 c2                	mov    dl,al
c001b4b5:	a1 00 a0 02 c0       	mov    eax,ds:0xc002a000
c001b4ba:	01 d0                	add    eax,edx
c001b4bc:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b4c0:	8b 15 00 a0 02 c0    	mov    edx,DWORD PTR ds:0xc002a000
c001b4c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b4ca:	89 14 85 20 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5fe0],edx
c001b4d1:	a1 00 a0 02 c0       	mov    eax,ds:0xc002a000
c001b4d6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b4da:	89 14 85 a0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f60],edx
c001b4e1:	eb 19                	jmp    c001b4fc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001b4e3:	90                   	nop
c001b4e4:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b4e8:	88 c2                	mov    dl,al
c001b4ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b4ee:	8b 04 85 20 a0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5fe0]
c001b4f5:	01 d0                	add    eax,edx
c001b4f7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b4fb:	90                   	nop
c001b4fc:	83 ec 04             	sub    esp,0x4
c001b4ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b503:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b507:	8d 44 24 15          	lea    eax,[esp+0x15]
c001b50b:	50                   	push   eax
c001b50c:	e8 21 b7 fe ff       	call   c0006c32 <f_getlabel>
c001b511:	83 c4 10             	add    esp,0x10
c001b514:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b518:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b51d:	75 09                	jne    c001b528 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001b51f:	b8 00 00 00 00       	mov    eax,0x0
c001b524:	eb 0a                	jmp    c001b530 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001b526:	66 90                	xchg   ax,ax
c001b528:	b8 01 00 00 00       	mov    eax,0x1
c001b52d:	8d 76 00             	lea    esi,[esi+0x0]
c001b530:	83 c4 1c             	add    esp,0x1c
c001b533:	c3                   	ret    

c001b534 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001b534:	57                   	push   edi
c001b535:	83 ec 58             	sub    esp,0x58
c001b538:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001b540:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b544:	b9 0f 00 00 00       	mov    ecx,0xf
c001b549:	b8 00 00 00 00       	mov    eax,0x0
c001b54e:	fc                   	cld    
c001b54f:	89 d7                	mov    edi,edx
c001b551:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b553:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b557:	8b 04 85 20 a0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5fe0]
c001b55e:	83 f8 ff             	cmp    eax,0xffffffff
c001b561:	75 35                	jne    c001b598 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001b563:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b567:	88 c2                	mov    dl,al
c001b569:	a1 00 a0 02 c0       	mov    eax,ds:0xc002a000
c001b56e:	01 d0                	add    eax,edx
c001b570:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b574:	8b 15 00 a0 02 c0    	mov    edx,DWORD PTR ds:0xc002a000
c001b57a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b57e:	89 14 85 20 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5fe0],edx
c001b585:	a1 00 a0 02 c0       	mov    eax,ds:0xc002a000
c001b58a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001b58e:	89 14 85 a0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f60],edx
c001b595:	eb 19                	jmp    c001b5b0 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001b597:	90                   	nop
c001b598:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b59c:	88 c2                	mov    dl,al
c001b59e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b5a2:	8b 04 85 20 a0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5fe0]
c001b5a9:	01 d0                	add    eax,edx
c001b5ab:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b5af:	90                   	nop
c001b5b0:	83 ec 08             	sub    esp,0x8
c001b5b3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001b5b7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b5bb:	50                   	push   eax
c001b5bc:	e8 bf 52 fe ff       	call   c0000880 <strcat>
c001b5c1:	83 c4 10             	add    esp,0x10
c001b5c4:	83 ec 0c             	sub    esp,0xc
c001b5c7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b5cb:	50                   	push   eax
c001b5cc:	e8 4f b8 fe ff       	call   c0006e20 <f_setlabel>
c001b5d1:	83 c4 10             	add    esp,0x10
c001b5d4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b5d8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001b5dd:	75 09                	jne    c001b5e8 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001b5df:	b8 00 00 00 00       	mov    eax,0x0
c001b5e4:	eb 0a                	jmp    c001b5f0 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001b5e6:	66 90                	xchg   ax,ax
c001b5e8:	b8 01 00 00 00       	mov    eax,0x1
c001b5ed:	8d 76 00             	lea    esi,[esi+0x0]
c001b5f0:	83 c4 58             	add    esp,0x58
c001b5f3:	5f                   	pop    edi
c001b5f4:	c3                   	ret    
c001b5f5:	90                   	nop
c001b5f6:	66 90                	xchg   ax,ax

c001b5f8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001b5f8:	83 ec 2c             	sub    esp,0x2c
c001b5fb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b603:	83 ec 08             	sub    esp,0x8
c001b606:	68 04 6e 02 c0       	push   0xc0026e04
c001b60b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b60f:	e8 b8 51 fe ff       	call   c00007cc <strcmp>
c001b614:	83 c4 10             	add    esp,0x10
c001b617:	85 c0                	test   eax,eax
c001b619:	0f 94 c0             	sete   al
c001b61c:	84 c0                	test   al,al
c001b61e:	74 10                	je     c001b630 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001b620:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b628:	e9 b3 00 00 00       	jmp    c001b6e0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b62d:	8d 76 00             	lea    esi,[esi+0x0]
c001b630:	83 ec 08             	sub    esp,0x8
c001b633:	68 f6 6d 02 c0       	push   0xc0026df6
c001b638:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b63c:	e8 8b 51 fe ff       	call   c00007cc <strcmp>
c001b641:	83 c4 10             	add    esp,0x10
c001b644:	85 c0                	test   eax,eax
c001b646:	0f 94 c0             	sete   al
c001b649:	84 c0                	test   al,al
c001b64b:	74 0f                	je     c001b65c <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001b64d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b655:	e9 86 00 00 00       	jmp    c001b6e0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b65a:	66 90                	xchg   ax,ax
c001b65c:	83 ec 08             	sub    esp,0x8
c001b65f:	68 fc 6d 02 c0       	push   0xc0026dfc
c001b664:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b668:	e8 5f 51 fe ff       	call   c00007cc <strcmp>
c001b66d:	83 c4 10             	add    esp,0x10
c001b670:	85 c0                	test   eax,eax
c001b672:	0f 94 c0             	sete   al
c001b675:	84 c0                	test   al,al
c001b677:	74 0b                	je     c001b684 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001b679:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b681:	eb 5d                	jmp    c001b6e0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b683:	90                   	nop
c001b684:	83 ec 08             	sub    esp,0x8
c001b687:	68 2c 3f 02 c0       	push   0xc0023f2c
c001b68c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b690:	e8 37 51 fe ff       	call   c00007cc <strcmp>
c001b695:	83 c4 10             	add    esp,0x10
c001b698:	85 c0                	test   eax,eax
c001b69a:	0f 94 c0             	sete   al
c001b69d:	84 c0                	test   al,al
c001b69f:	74 0b                	je     c001b6ac <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001b6a1:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001b6a9:	eb 35                	jmp    c001b6e0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b6ab:	90                   	nop
c001b6ac:	83 ec 08             	sub    esp,0x8
c001b6af:	68 02 6e 02 c0       	push   0xc0026e02
c001b6b4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b6b8:	e8 0f 51 fe ff       	call   c00007cc <strcmp>
c001b6bd:	83 c4 10             	add    esp,0x10
c001b6c0:	85 c0                	test   eax,eax
c001b6c2:	0f 94 c0             	sete   al
c001b6c5:	84 c0                	test   al,al
c001b6c7:	74 0b                	je     c001b6d4 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001b6c9:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b6d1:	eb 0d                	jmp    c001b6e0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b6d3:	90                   	nop
c001b6d4:	b8 08 00 00 00       	mov    eax,0x8
c001b6d9:	e9 ea 00 00 00       	jmp    c001b7c8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b6de:	66 90                	xchg   ax,ax
c001b6e0:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b6e7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b6ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b6f0:	8b 04 85 20 a0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5fe0]
c001b6f7:	83 f8 ff             	cmp    eax,0xffffffff
c001b6fa:	75 34                	jne    c001b730 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001b6fc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b700:	88 c2                	mov    dl,al
c001b702:	a1 00 a0 02 c0       	mov    eax,ds:0xc002a000
c001b707:	01 d0                	add    eax,edx
c001b709:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b70d:	8b 15 00 a0 02 c0    	mov    edx,DWORD PTR ds:0xc002a000
c001b713:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b717:	89 14 85 20 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5fe0],edx
c001b71e:	a1 00 a0 02 c0       	mov    eax,ds:0xc002a000
c001b723:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b727:	89 14 85 a0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f60],edx
c001b72e:	eb 18                	jmp    c001b748 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001b730:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b734:	88 c2                	mov    dl,al
c001b736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b73a:	8b 04 85 20 a0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5fe0]
c001b741:	01 d0                	add    eax,edx
c001b743:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b747:	90                   	nop
c001b748:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b74c:	88 04 24             	mov    BYTE PTR [esp],al
c001b74f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b753:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b757:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b75f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b764:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b76c:	83 ec 0c             	sub    esp,0xc
c001b76f:	68 00 20 00 00       	push   0x2000
c001b774:	e8 e2 e5 fe ff       	call   c0009d5b <malloc>
c001b779:	83 c4 10             	add    esp,0x10
c001b77c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b780:	68 00 20 00 00       	push   0x2000
c001b785:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b789:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b78d:	50                   	push   eax
c001b78e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b792:	50                   	push   eax
c001b793:	e8 09 bd fe ff       	call   c00074a1 <f_mkfs>
c001b798:	83 c4 10             	add    esp,0x10
c001b79b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b79f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b7a4:	75 0a                	jne    c001b7b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001b7a6:	b8 00 00 00 00       	mov    eax,0x0
c001b7ab:	eb 1b                	jmp    c001b7c8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b7ad:	8d 76 00             	lea    esi,[esi+0x0]
c001b7b0:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001b7b5:	75 09                	jne    c001b7c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001b7b7:	b8 09 00 00 00       	mov    eax,0x9
c001b7bc:	eb 0a                	jmp    c001b7c8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b7be:	66 90                	xchg   ax,ax
c001b7c0:	b8 01 00 00 00       	mov    eax,0x1
c001b7c5:	8d 76 00             	lea    esi,[esi+0x0]
c001b7c8:	83 c4 2c             	add    esp,0x2c
c001b7cb:	c3                   	ret    

c001b7cc <FAT::tryMount(LogicalDisk*, int)>:
c001b7cc:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001b7d2:	a1 00 a0 02 c0       	mov    eax,ds:0xc002a000
c001b7d7:	83 f8 14             	cmp    eax,0x14
c001b7da:	75 18                	jne    c001b7f4 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001b7dc:	83 ec 0c             	sub    esp,0xc
c001b7df:	68 08 6e 02 c0       	push   0xc0026e08
c001b7e4:	e8 40 99 ff ff       	call   c0015129 <Krnl::panic(char const*)>
c001b7e9:	83 c4 10             	add    esp,0x10
c001b7ec:	b0 00                	mov    al,0x0
c001b7ee:	e9 e9 01 00 00       	jmp    c001b9dc <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b7f3:	90                   	nop
c001b7f4:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001b7fb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b801:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b807:	3d 00 02 00 00       	cmp    eax,0x200
c001b80c:	74 0a                	je     c001b818 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001b80e:	b0 00                	mov    al,0x0
c001b810:	e9 c7 01 00 00       	jmp    c001b9dc <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b815:	8d 76 00             	lea    esi,[esi+0x0]
c001b818:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001b820:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b827:	8b 04 85 20 a0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5fe0]
c001b82e:	83 f8 ff             	cmp    eax,0xffffffff
c001b831:	74 09                	je     c001b83c <FAT::tryMount(LogicalDisk*, int)+0x70>
c001b833:	b0 01                	mov    al,0x1
c001b835:	e9 a2 01 00 00       	jmp    c001b9dc <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b83a:	66 90                	xchg   ax,ax
c001b83c:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001b846:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001b84e:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001b855:	88 c2                	mov    dl,al
c001b857:	a1 00 a0 02 c0       	mov    eax,ds:0xc002a000
c001b85c:	01 d0                	add    eax,edx
c001b85e:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001b865:	8b 15 00 a0 02 c0    	mov    edx,DWORD PTR ds:0xc002a000
c001b86b:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b872:	89 14 85 20 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5fe0],edx
c001b879:	a1 00 a0 02 c0       	mov    eax,ds:0xc002a000
c001b87e:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001b885:	89 14 85 a0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f60],edx
c001b88c:	83 ec 0c             	sub    esp,0xc
c001b88f:	68 54 02 00 00       	push   0x254
c001b894:	e8 c2 e4 fe ff       	call   c0009d5b <malloc>
c001b899:	83 c4 10             	add    esp,0x10
c001b89c:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001b8a3:	83 ec 04             	sub    esp,0x4
c001b8a6:	6a 00                	push   0x0
c001b8a8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b8af:	50                   	push   eax
c001b8b0:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b8b7:	e8 6d 95 fe ff       	call   c0004e29 <f_mount>
c001b8bc:	83 c4 10             	add    esp,0x10
c001b8bf:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b8c6:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001b8ce:	74 1c                	je     c001b8ec <FAT::tryMount(LogicalDisk*, int)+0x120>
c001b8d0:	83 ec 0c             	sub    esp,0xc
c001b8d3:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b8da:	e8 9c e4 fe ff       	call   c0009d7b <rfree>
c001b8df:	83 c4 10             	add    esp,0x10
c001b8e2:	b0 00                	mov    al,0x0
c001b8e4:	e9 f3 00 00 00       	jmp    c001b9dc <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b8e9:	8d 76 00             	lea    esi,[esi+0x0]
c001b8ec:	83 ec 04             	sub    esp,0x4
c001b8ef:	68 00 01 00 00       	push   0x100
c001b8f4:	6a 00                	push   0x0
c001b8f6:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b8fd:	50                   	push   eax
c001b8fe:	e8 81 4d fe ff       	call   c0000684 <memset>
c001b903:	83 c4 10             	add    esp,0x10
c001b906:	83 ec 08             	sub    esp,0x8
c001b909:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b910:	50                   	push   eax
c001b911:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b918:	50                   	push   eax
c001b919:	e8 62 4f fe ff       	call   c0000880 <strcat>
c001b91e:	83 c4 10             	add    esp,0x10
c001b921:	83 ec 08             	sub    esp,0x8
c001b924:	68 16 6e 02 c0       	push   0xc0026e16
c001b929:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b930:	50                   	push   eax
c001b931:	e8 4a 4f fe ff       	call   c0000880 <strcat>
c001b936:	83 c4 10             	add    esp,0x10
c001b939:	83 ec 04             	sub    esp,0x4
c001b93c:	6a 01                	push   0x1
c001b93e:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001b945:	50                   	push   eax
c001b946:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b94a:	50                   	push   eax
c001b94b:	e8 3b 95 fe ff       	call   c0004e8b <f_open>
c001b950:	83 c4 10             	add    esp,0x10
c001b953:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b95a:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001b961:	85 c0                	test   eax,eax
c001b963:	74 0b                	je     c001b970 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001b965:	78 31                	js     c001b998 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b967:	83 e8 04             	sub    eax,0x4
c001b96a:	83 f8 01             	cmp    eax,0x1
c001b96d:	77 29                	ja     c001b998 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b96f:	90                   	nop
c001b970:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001b978:	83 ec 0c             	sub    esp,0xc
c001b97b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b97f:	50                   	push   eax
c001b980:	e8 58 a0 fe ff       	call   c00059dd <f_close>
c001b985:	83 c4 10             	add    esp,0x10
c001b988:	90                   	nop
c001b989:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001b991:	74 41                	je     c001b9d4 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001b993:	eb 33                	jmp    c001b9c8 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001b995:	8d 76 00             	lea    esi,[esi+0x0]
c001b998:	83 ec 0c             	sub    esp,0xc
c001b99b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b9a2:	e8 d4 e3 fe ff       	call   c0009d7b <rfree>
c001b9a7:	83 c4 10             	add    esp,0x10
c001b9aa:	83 ec 04             	sub    esp,0x4
c001b9ad:	6a 00                	push   0x0
c001b9af:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b9b6:	50                   	push   eax
c001b9b7:	6a 00                	push   0x0
c001b9b9:	e8 6b 94 fe ff       	call   c0004e29 <f_mount>
c001b9be:	83 c4 10             	add    esp,0x10
c001b9c1:	b0 00                	mov    al,0x0
c001b9c3:	eb 17                	jmp    c001b9dc <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b9c5:	8d 76 00             	lea    esi,[esi+0x0]
c001b9c8:	a1 00 a0 02 c0       	mov    eax,ds:0xc002a000
c001b9cd:	40                   	inc    eax
c001b9ce:	a3 00 a0 02 c0       	mov    ds:0xc002a000,eax
c001b9d3:	90                   	nop
c001b9d4:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001b9db:	90                   	nop
c001b9dc:	81 c4 6c 03 00 00    	add    esp,0x36c
c001b9e2:	c3                   	ret    
c001b9e3:	90                   	nop

c001b9e4 <FAT::allocateSwapfile(char const*, int)>:
c001b9e4:	55                   	push   ebp
c001b9e5:	57                   	push   edi
c001b9e6:	56                   	push   esi
c001b9e7:	53                   	push   ebx
c001b9e8:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001b9ee:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001b9f9:	83 ec 0c             	sub    esp,0xc
c001b9fc:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001ba03:	e8 53 e3 fe ff       	call   c0009d5b <malloc>
c001ba08:	83 c4 10             	add    esp,0x10
c001ba0b:	89 c7                	mov    edi,eax
c001ba0d:	a1 30 9f 02 c0       	mov    eax,ds:0xc0029f30
c001ba12:	83 ec 04             	sub    esp,0x4
c001ba15:	50                   	push   eax
c001ba16:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001ba1d:	57                   	push   edi
c001ba1e:	e8 8f 1b ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c001ba23:	83 c4 10             	add    esp,0x10
c001ba26:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001ba2d:	83 ec 04             	sub    esp,0x4
c001ba30:	8d 44 24 13          	lea    eax,[esp+0x13]
c001ba34:	50                   	push   eax
c001ba35:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ba39:	50                   	push   eax
c001ba3a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ba41:	e8 f2 1e ff ff       	call   c000d938 <File::stat(unsigned long long*, bool*)>
c001ba46:	83 c4 10             	add    esp,0x10
c001ba49:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001ba50:	c1 e0 14             	shl    eax,0x14
c001ba53:	89 c7                	mov    edi,eax
c001ba55:	89 c5                	mov    ebp,eax
c001ba57:	c1 fd 1f             	sar    ebp,0x1f
c001ba5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba5e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ba62:	89 f9                	mov    ecx,edi
c001ba64:	31 c1                	xor    ecx,eax
c001ba66:	89 cb                	mov    ebx,ecx
c001ba68:	89 e9                	mov    ecx,ebp
c001ba6a:	31 d1                	xor    ecx,edx
c001ba6c:	89 ce                	mov    esi,ecx
c001ba6e:	89 f0                	mov    eax,esi
c001ba70:	09 d8                	or     eax,ebx
c001ba72:	0f 84 98 00 00 00    	je     c001bb10 <FAT::allocateSwapfile(char const*, int)+0x12c>
c001ba78:	83 ec 0c             	sub    esp,0xc
c001ba7b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ba82:	e8 7d 1d ff ff       	call   c000d804 <File::unlink()>
c001ba87:	83 c4 10             	add    esp,0x10
c001ba8a:	83 ec 08             	sub    esp,0x8
c001ba8d:	6a 12                	push   0x12
c001ba8f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ba96:	e8 f1 1b ff ff       	call   c000d68c <File::open(FileOpenMode)>
c001ba9b:	83 c4 10             	add    esp,0x10
c001ba9e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001baa5:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001baab:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001bab2:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001bab9:	c1 e0 14             	shl    eax,0x14
c001babc:	99                   	cdq    
c001babd:	6a 01                	push   0x1
c001babf:	52                   	push   edx
c001bac0:	50                   	push   eax
c001bac1:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001bac8:	e8 c0 b5 fe ff       	call   c000708d <f_expand>
c001bacd:	83 c4 10             	add    esp,0x10
c001bad0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bad7:	8b 00                	mov    eax,DWORD PTR [eax]
c001bad9:	83 c0 10             	add    eax,0x10
c001badc:	8b 00                	mov    eax,DWORD PTR [eax]
c001bade:	83 ec 0c             	sub    esp,0xc
c001bae1:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bae5:	52                   	push   edx
c001bae6:	8d 54 24 30          	lea    edx,[esp+0x30]
c001baea:	52                   	push   edx
c001baeb:	6a 00                	push   0x0
c001baed:	68 00 04 00 00       	push   0x400
c001baf2:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001baf9:	ff d0                	call   eax
c001bafb:	83 c4 20             	add    esp,0x20
c001bafe:	83 ec 0c             	sub    esp,0xc
c001bb01:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bb08:	e8 dd 1b ff ff       	call   c000d6ea <File::close()>
c001bb0d:	83 c4 10             	add    esp,0x10
c001bb10:	83 ec 08             	sub    esp,0x8
c001bb13:	6a 01                	push   0x1
c001bb15:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bb1c:	e8 6b 1b ff ff       	call   c000d68c <File::open(FileOpenMode)>
c001bb21:	83 c4 10             	add    esp,0x10
c001bb24:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bb2b:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb2d:	83 c0 0c             	add    eax,0xc
c001bb30:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb32:	83 ec 0c             	sub    esp,0xc
c001bb35:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bb39:	52                   	push   edx
c001bb3a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001bb3e:	52                   	push   edx
c001bb3f:	6a 00                	push   0x0
c001bb41:	6a 04                	push   0x4
c001bb43:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bb4a:	ff d0                	call   eax
c001bb4c:	83 c4 20             	add    esp,0x20
c001bb4f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bb56:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001bb5c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001bb63:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001bb6a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001bb6d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001bb70:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001bb77:	83 ec 0c             	sub    esp,0xc
c001bb7a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bb81:	e8 64 1b ff ff       	call   c000d6ea <File::close()>
c001bb86:	83 c4 10             	add    esp,0x10
c001bb89:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001bb90:	ba 00 00 00 00       	mov    edx,0x0
c001bb95:	81 c4 3c 04 00 00    	add    esp,0x43c
c001bb9b:	5b                   	pop    ebx
c001bb9c:	5e                   	pop    esi
c001bb9d:	5f                   	pop    edi
c001bb9e:	5d                   	pop    ebp
c001bb9f:	c3                   	ret    

c001bba0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001bba0:	57                   	push   edi
c001bba1:	56                   	push   esi
c001bba2:	53                   	push   ebx
c001bba3:	81 ec 50 02 00 00    	sub    esp,0x250
c001bba9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001bbb1:	74 0d                	je     c001bbc0 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001bbb3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001bbbb:	75 0f                	jne    c001bbcc <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001bbbd:	8d 76 00             	lea    esi,[esi+0x0]
c001bbc0:	b8 04 00 00 00       	mov    eax,0x4
c001bbc5:	e9 36 01 00 00       	jmp    c001bd00 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001bbca:	66 90                	xchg   ax,ax
c001bbcc:	83 ec 08             	sub    esp,0x8
c001bbcf:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001bbd6:	50                   	push   eax
c001bbd7:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001bbde:	e8 04 a4 fe ff       	call   c0005fe7 <f_readdir>
c001bbe3:	83 c4 10             	add    esp,0x10
c001bbe6:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001bbed:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001bbf4:	83 ec 0c             	sub    esp,0xc
c001bbf7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001bbfe:	83 c0 1a             	add    eax,0x1a
c001bc01:	50                   	push   eax
c001bc02:	e8 99 4a fe ff       	call   c00006a0 <strlen>
c001bc07:	83 c4 10             	add    esp,0x10
c001bc0a:	ba 00 00 00 00       	mov    edx,0x0
c001bc0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bc13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bc17:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001bc1e:	0f b6 c0             	movzx  eax,al
c001bc21:	83 e0 10             	and    eax,0x10
c001bc24:	74 0a                	je     c001bc30 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001bc26:	b8 02 00 00 00       	mov    eax,0x2
c001bc2b:	eb 0b                	jmp    c001bc38 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001bc2d:	8d 76 00             	lea    esi,[esi+0x0]
c001bc30:	b8 01 00 00 00       	mov    eax,0x1
c001bc35:	8d 76 00             	lea    esi,[esi+0x0]
c001bc38:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bc3c:	83 ec 08             	sub    esp,0x8
c001bc3f:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001bc46:	83 c0 1a             	add    eax,0x1a
c001bc49:	50                   	push   eax
c001bc4a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bc4e:	83 c0 10             	add    eax,0x10
c001bc51:	50                   	push   eax
c001bc52:	e8 e9 4a fe ff       	call   c0000740 <strcpy>
c001bc57:	83 c4 10             	add    esp,0x10
c001bc5a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001bc61:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001bc68:	8d 44 24 04          	lea    eax,[esp+0x4]
c001bc6c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001bc73:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001bc7a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001bc81:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001bc88:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001bc8f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001bc96:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001bc9d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001bca4:	89 c6                	mov    esi,eax
c001bca6:	89 d7                	mov    edi,edx
c001bca8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bcaa:	89 c8                	mov    eax,ecx
c001bcac:	89 fa                	mov    edx,edi
c001bcae:	89 f3                	mov    ebx,esi
c001bcb0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001bcb7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001bcbe:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001bcc5:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001bccc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001bcd2:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001bcd9:	84 c0                	test   al,al
c001bcdb:	75 07                	jne    c001bce4 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001bcdd:	b8 07 00 00 00       	mov    eax,0x7
c001bce2:	eb 1c                	jmp    c001bd00 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001bce4:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001bceb:	85 c0                	test   eax,eax
c001bced:	75 09                	jne    c001bcf8 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001bcef:	b8 00 00 00 00       	mov    eax,0x0
c001bcf4:	eb 0a                	jmp    c001bd00 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001bcf6:	66 90                	xchg   ax,ax
c001bcf8:	b8 01 00 00 00       	mov    eax,0x1
c001bcfd:	8d 76 00             	lea    esi,[esi+0x0]
c001bd00:	81 c4 50 02 00 00    	add    esp,0x250
c001bd06:	5b                   	pop    ebx
c001bd07:	5e                   	pop    esi
c001bd08:	5f                   	pop    edi
c001bd09:	c3                   	ret    
c001bd0a:	66 90                	xchg   ax,ax

c001bd0c <FAT::read(void*, unsigned long, void*, int*)>:
c001bd0c:	83 ec 1c             	sub    esp,0x1c
c001bd0f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bd14:	74 0a                	je     c001bd20 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001bd16:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bd1b:	75 0b                	jne    c001bd28 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001bd1d:	8d 76 00             	lea    esi,[esi+0x0]
c001bd20:	b8 04 00 00 00       	mov    eax,0x4
c001bd25:	eb 41                	jmp    c001bd68 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001bd27:	90                   	nop
c001bd28:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bd2c:	50                   	push   eax
c001bd2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bd31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bd35:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bd39:	e8 89 95 fe ff       	call   c00052c7 <f_read>
c001bd3e:	83 c4 10             	add    esp,0x10
c001bd41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bd49:	89 c2                	mov    edx,eax
c001bd4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd4f:	89 10                	mov    DWORD PTR [eax],edx
c001bd51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd55:	85 c0                	test   eax,eax
c001bd57:	75 07                	jne    c001bd60 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001bd59:	b8 00 00 00 00       	mov    eax,0x0
c001bd5e:	eb 08                	jmp    c001bd68 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001bd60:	b8 01 00 00 00       	mov    eax,0x1
c001bd65:	8d 76 00             	lea    esi,[esi+0x0]
c001bd68:	83 c4 1c             	add    esp,0x1c
c001bd6b:	c3                   	ret    

c001bd6c <FAT::write(void*, unsigned long, void*, int*)>:
c001bd6c:	83 ec 1c             	sub    esp,0x1c
c001bd6f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bd74:	74 0a                	je     c001bd80 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001bd76:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bd7b:	75 0b                	jne    c001bd88 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001bd7d:	8d 76 00             	lea    esi,[esi+0x0]
c001bd80:	b8 04 00 00 00       	mov    eax,0x4
c001bd85:	eb 41                	jmp    c001bdc8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001bd87:	90                   	nop
c001bd88:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bd8c:	50                   	push   eax
c001bd8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bd91:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bd95:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bd99:	e8 a9 97 fe ff       	call   c0005547 <f_write>
c001bd9e:	83 c4 10             	add    esp,0x10
c001bda1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bda5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bda9:	89 c2                	mov    edx,eax
c001bdab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bdaf:	89 10                	mov    DWORD PTR [eax],edx
c001bdb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bdb5:	85 c0                	test   eax,eax
c001bdb7:	75 07                	jne    c001bdc0 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001bdb9:	b8 00 00 00 00       	mov    eax,0x0
c001bdbe:	eb 08                	jmp    c001bdc8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001bdc0:	b8 01 00 00 00       	mov    eax,0x1
c001bdc5:	8d 76 00             	lea    esi,[esi+0x0]
c001bdc8:	83 c4 1c             	add    esp,0x1c
c001bdcb:	c3                   	ret    

c001bdcc <FAT::close(void*)>:
c001bdcc:	83 ec 1c             	sub    esp,0x1c
c001bdcf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bdd4:	75 0a                	jne    c001bde0 <FAT::close(void*)+0x14>
c001bdd6:	b8 04 00 00 00       	mov    eax,0x4
c001bddb:	eb 3f                	jmp    c001be1c <FAT::close(void*)+0x50>
c001bddd:	8d 76 00             	lea    esi,[esi+0x0]
c001bde0:	83 ec 0c             	sub    esp,0xc
c001bde3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bde7:	e8 f1 9b fe ff       	call   c00059dd <f_close>
c001bdec:	83 c4 10             	add    esp,0x10
c001bdef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bdf3:	83 ec 0c             	sub    esp,0xc
c001bdf6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bdfa:	e8 6c df fe ff       	call   c0009d6b <free>
c001bdff:	83 c4 10             	add    esp,0x10
c001be02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be06:	85 c0                	test   eax,eax
c001be08:	75 0a                	jne    c001be14 <FAT::close(void*)+0x48>
c001be0a:	b8 00 00 00 00       	mov    eax,0x0
c001be0f:	eb 0b                	jmp    c001be1c <FAT::close(void*)+0x50>
c001be11:	8d 76 00             	lea    esi,[esi+0x0]
c001be14:	b8 01 00 00 00       	mov    eax,0x1
c001be19:	8d 76 00             	lea    esi,[esi+0x0]
c001be1c:	83 c4 1c             	add    esp,0x1c
c001be1f:	c3                   	ret    

c001be20 <FAT::closeDir(void*)>:
c001be20:	83 ec 1c             	sub    esp,0x1c
c001be23:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001be28:	75 0a                	jne    c001be34 <FAT::closeDir(void*)+0x14>
c001be2a:	b8 04 00 00 00       	mov    eax,0x4
c001be2f:	eb 3f                	jmp    c001be70 <FAT::closeDir(void*)+0x50>
c001be31:	8d 76 00             	lea    esi,[esi+0x0]
c001be34:	83 ec 0c             	sub    esp,0xc
c001be37:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001be3b:	e8 85 a1 fe ff       	call   c0005fc5 <f_closedir>
c001be40:	83 c4 10             	add    esp,0x10
c001be43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be47:	83 ec 0c             	sub    esp,0xc
c001be4a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001be4e:	e8 18 df fe ff       	call   c0009d6b <free>
c001be53:	83 c4 10             	add    esp,0x10
c001be56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be5a:	85 c0                	test   eax,eax
c001be5c:	75 0a                	jne    c001be68 <FAT::closeDir(void*)+0x48>
c001be5e:	b8 00 00 00 00       	mov    eax,0x0
c001be63:	eb 0b                	jmp    c001be70 <FAT::closeDir(void*)+0x50>
c001be65:	8d 76 00             	lea    esi,[esi+0x0]
c001be68:	b8 01 00 00 00       	mov    eax,0x1
c001be6d:	8d 76 00             	lea    esi,[esi+0x0]
c001be70:	83 c4 1c             	add    esp,0x1c
c001be73:	c3                   	ret    

c001be74 <FAT::seek(void*, unsigned long long)>:
c001be74:	83 ec 2c             	sub    esp,0x2c
c001be77:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001be7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001be7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001be83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be87:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001be8c:	75 0a                	jne    c001be98 <FAT::seek(void*, unsigned long long)+0x24>
c001be8e:	b8 04 00 00 00       	mov    eax,0x4
c001be93:	eb 37                	jmp    c001becc <FAT::seek(void*, unsigned long long)+0x58>
c001be95:	8d 76 00             	lea    esi,[esi+0x0]
c001be98:	83 ec 04             	sub    esp,0x4
c001be9b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001be9f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bea3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001bea7:	e8 60 9b fe ff       	call   c0005a0c <f_lseek>
c001beac:	83 c4 10             	add    esp,0x10
c001beaf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001beb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001beb7:	85 c0                	test   eax,eax
c001beb9:	75 09                	jne    c001bec4 <FAT::seek(void*, unsigned long long)+0x50>
c001bebb:	b8 00 00 00 00       	mov    eax,0x0
c001bec0:	eb 0a                	jmp    c001becc <FAT::seek(void*, unsigned long long)+0x58>
c001bec2:	66 90                	xchg   ax,ax
c001bec4:	b8 01 00 00 00       	mov    eax,0x1
c001bec9:	8d 76 00             	lea    esi,[esi+0x0]
c001becc:	83 c4 2c             	add    esp,0x2c
c001becf:	c3                   	ret    

c001bed0 <fatWrapperReadDisk>:
c001bed0:	83 ec 1c             	sub    esp,0x1c
c001bed3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bed7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bedb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bedf:	89 04 24             	mov    DWORD PTR [esp],eax
c001bee2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bee6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001beea:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001beef:	8b 04 85 a0 8f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7060]
c001bef6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001befa:	83 ec 0c             	sub    esp,0xc
c001befd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bf01:	52                   	push   edx
c001bf02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bf06:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bf0a:	50                   	push   eax
c001bf0b:	e8 ba 4a ff ff       	call   c00109ca <LogicalDisk::read(unsigned long long, int, void*)>
c001bf10:	83 c4 20             	add    esp,0x20
c001bf13:	83 c4 1c             	add    esp,0x1c
c001bf16:	c3                   	ret    
c001bf17:	90                   	nop

c001bf18 <fatWrapperWriteDisk>:
c001bf18:	83 ec 1c             	sub    esp,0x1c
c001bf1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf1f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bf23:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bf27:	89 04 24             	mov    DWORD PTR [esp],eax
c001bf2a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bf2e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bf32:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bf37:	8b 04 85 a0 8f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7060]
c001bf3e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bf42:	83 ec 0c             	sub    esp,0xc
c001bf45:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bf49:	52                   	push   edx
c001bf4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bf4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bf52:	50                   	push   eax
c001bf53:	e8 de 4a ff ff       	call   c0010a36 <LogicalDisk::write(unsigned long long, int, void*)>
c001bf58:	83 c4 20             	add    esp,0x20
c001bf5b:	83 c4 1c             	add    esp,0x1c
c001bf5e:	c3                   	ret    
c001bf5f:	90                   	nop

c001bf60 <fatWrapperIoctl>:
c001bf60:	53                   	push   ebx
c001bf61:	83 ec 28             	sub    esp,0x28
c001bf64:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bf68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bf6c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001bf70:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bf74:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001bf79:	75 31                	jne    c001bfac <fatWrapperIoctl+0x4c>
c001bf7b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bf7f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bf83:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bf88:	8b 04 85 a0 8f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7060]
c001bf8f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001bf95:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bf9b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bf9f:	66 89 02             	mov    WORD PTR [edx],ax
c001bfa2:	b8 00 00 00 00       	mov    eax,0x0
c001bfa7:	e9 bc 00 00 00       	jmp    c001c068 <fatWrapperIoctl+0x108>
c001bfac:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001bfb1:	75 6d                	jne    c001c020 <fatWrapperIoctl+0xc0>
c001bfb3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bfb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bfbb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bfc0:	8b 04 85 a0 8f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7060]
c001bfc7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001bfcd:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001bfd3:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001bfd9:	89 c8                	mov    eax,ecx
c001bfdb:	89 da                	mov    edx,ebx
c001bfdd:	0f a4 c2 0a          	shld   edx,eax,0xa
c001bfe1:	c1 e0 0a             	shl    eax,0xa
c001bfe4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001bfe9:	8b 0c 8d a0 8f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7060]
c001bff0:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001bff6:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001bffc:	89 cb                	mov    ebx,ecx
c001bffe:	c1 fb 1f             	sar    ebx,0x1f
c001c001:	53                   	push   ebx
c001c002:	51                   	push   ecx
c001c003:	52                   	push   edx
c001c004:	50                   	push   eax
c001c005:	e8 16 6e 00 00       	call   c0022e20 <__udivdi3>
c001c00a:	83 c4 10             	add    esp,0x10
c001c00d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c011:	89 01                	mov    DWORD PTR [ecx],eax
c001c013:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c016:	b8 00 00 00 00       	mov    eax,0x0
c001c01b:	eb 4b                	jmp    c001c068 <fatWrapperIoctl+0x108>
c001c01d:	8d 76 00             	lea    esi,[esi+0x0]
c001c020:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001c025:	75 09                	jne    c001c030 <fatWrapperIoctl+0xd0>
c001c027:	b8 00 00 00 00       	mov    eax,0x0
c001c02c:	eb 3a                	jmp    c001c068 <fatWrapperIoctl+0x108>
c001c02e:	66 90                	xchg   ax,ax
c001c030:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001c035:	75 19                	jne    c001c050 <fatWrapperIoctl+0xf0>
c001c037:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c03b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c03f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c043:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001c049:	b8 00 00 00 00       	mov    eax,0x0
c001c04e:	eb 18                	jmp    c001c068 <fatWrapperIoctl+0x108>
c001c050:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001c055:	75 09                	jne    c001c060 <fatWrapperIoctl+0x100>
c001c057:	b8 00 00 00 00       	mov    eax,0x0
c001c05c:	eb 0a                	jmp    c001c068 <fatWrapperIoctl+0x108>
c001c05e:	66 90                	xchg   ax,ax
c001c060:	b8 04 00 00 00       	mov    eax,0x4
c001c065:	8d 76 00             	lea    esi,[esi+0x0]
c001c068:	83 c4 28             	add    esp,0x28
c001c06b:	5b                   	pop    ebx
c001c06c:	c3                   	ret    
c001c06d:	90                   	nop
c001c06e:	66 90                	xchg   ax,ax

c001c070 <FAT::FAT()>:
c001c070:	83 ec 1c             	sub    esp,0x1c
c001c073:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c077:	83 ec 0c             	sub    esp,0xc
c001c07a:	50                   	push   eax
c001c07b:	e8 de 12 ff ff       	call   c000d35e <Filesystem::Filesystem()>
c001c080:	83 c4 10             	add    esp,0x10
c001c083:	ba 2c 6e 02 c0       	mov    edx,0xc0026e2c
c001c088:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c08c:	89 10                	mov    DWORD PTR [eax],edx
c001c08e:	c7 05 00 a0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a000,0x0
c001c098:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c0a0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001c0a5:	7f 15                	jg     c001c0bc <FAT::FAT()+0x4c>
c001c0a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0ab:	c7 04 85 20 a0 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd5fe0],0xffffffff
c001c0b6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c0ba:	eb e4                	jmp    c001c0a0 <FAT::FAT()+0x30>
c001c0bc:	90                   	nop
c001c0bd:	83 c4 1c             	add    esp,0x1c
c001c0c0:	c3                   	ret    
c001c0c1:	90                   	nop
c001c0c2:	66 90                	xchg   ax,ax

c001c0c4 <FAT::fixFilepath(char*)>:
c001c0c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c0c8:	8a 00                	mov    al,BYTE PTR [eax]
c001c0ca:	3c 40                	cmp    al,0x40
c001c0cc:	7e 2e                	jle    c001c0fc <FAT::fixFilepath(char*)+0x38>
c001c0ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c0d2:	8a 00                	mov    al,BYTE PTR [eax]
c001c0d4:	83 e8 41             	sub    eax,0x41
c001c0d7:	88 c2                	mov    dl,al
c001c0d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c0dd:	88 10                	mov    BYTE PTR [eax],dl
c001c0df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c0e3:	8a 00                	mov    al,BYTE PTR [eax]
c001c0e5:	0f be c0             	movsx  eax,al
c001c0e8:	8b 04 85 20 a0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5fe0]
c001c0ef:	83 c0 30             	add    eax,0x30
c001c0f2:	88 c2                	mov    dl,al
c001c0f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c0f8:	88 10                	mov    BYTE PTR [eax],dl
c001c0fa:	66 90                	xchg   ax,ax
c001c0fc:	90                   	nop
c001c0fd:	c3                   	ret    
c001c0fe:	66 90                	xchg   ax,ax

c001c100 <FAT::open(char const*, void**, FileOpenMode)>:
c001c100:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c106:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c10e:	74 0c                	je     c001c11c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001c110:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c118:	75 0e                	jne    c001c128 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001c11a:	66 90                	xchg   ax,ax
c001c11c:	b8 04 00 00 00       	mov    eax,0x4
c001c121:	e9 06 01 00 00       	jmp    c001c22c <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001c126:	66 90                	xchg   ax,ax
c001c128:	83 ec 08             	sub    esp,0x8
c001c12b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c132:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c136:	50                   	push   eax
c001c137:	e8 04 46 fe ff       	call   c0000740 <strcpy>
c001c13c:	83 c4 10             	add    esp,0x10
c001c13f:	83 ec 08             	sub    esp,0x8
c001c142:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c146:	50                   	push   eax
c001c147:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c14e:	e8 71 ff ff ff       	call   c001c0c4 <FAT::fixFilepath(char*)>
c001c153:	83 c4 10             	add    esp,0x10
c001c156:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001c15e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c165:	83 e0 01             	and    eax,0x1
c001c168:	74 0a                	je     c001c174 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001c16a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001c172:	66 90                	xchg   ax,ax
c001c174:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c17b:	83 e0 04             	and    eax,0x4
c001c17e:	74 10                	je     c001c190 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001c180:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001c188:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001c190:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c197:	83 e0 02             	and    eax,0x2
c001c19a:	74 08                	je     c001c1a4 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001c19c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001c1a4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c1ab:	83 e0 08             	and    eax,0x8
c001c1ae:	74 08                	je     c001c1b8 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001c1b0:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001c1b8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c1bf:	83 e0 10             	and    eax,0x10
c001c1c2:	74 08                	je     c001c1cc <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001c1c4:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001c1cc:	83 ec 0c             	sub    esp,0xc
c001c1cf:	68 50 02 00 00       	push   0x250
c001c1d4:	e8 82 db fe ff       	call   c0009d5b <malloc>
c001c1d9:	83 c4 10             	add    esp,0x10
c001c1dc:	89 c2                	mov    edx,eax
c001c1de:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c1e5:	89 10                	mov    DWORD PTR [eax],edx
c001c1e7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001c1ef:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c1f6:	8b 00                	mov    eax,DWORD PTR [eax]
c001c1f8:	83 ec 04             	sub    esp,0x4
c001c1fb:	52                   	push   edx
c001c1fc:	8d 54 24 10          	lea    edx,[esp+0x10]
c001c200:	52                   	push   edx
c001c201:	50                   	push   eax
c001c202:	e8 84 8c fe ff       	call   c0004e8b <f_open>
c001c207:	83 c4 10             	add    esp,0x10
c001c20a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001c211:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001c219:	74 09                	je     c001c224 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001c21b:	b8 01 00 00 00       	mov    eax,0x1
c001c220:	eb 0a                	jmp    c001c22c <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001c222:	66 90                	xchg   ax,ax
c001c224:	b8 00 00 00 00       	mov    eax,0x0
c001c229:	8d 76 00             	lea    esi,[esi+0x0]
c001c22c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c232:	c3                   	ret    
c001c233:	90                   	nop

c001c234 <FAT::openDir(char const*, void**)>:
c001c234:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c23a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c242:	74 0c                	je     c001c250 <FAT::openDir(char const*, void**)+0x1c>
c001c244:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c24c:	75 0e                	jne    c001c25c <FAT::openDir(char const*, void**)+0x28>
c001c24e:	66 90                	xchg   ax,ax
c001c250:	b8 04 00 00 00       	mov    eax,0x4
c001c255:	e9 82 00 00 00       	jmp    c001c2dc <FAT::openDir(char const*, void**)+0xa8>
c001c25a:	66 90                	xchg   ax,ax
c001c25c:	83 ec 08             	sub    esp,0x8
c001c25f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c266:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c26a:	50                   	push   eax
c001c26b:	e8 d0 44 fe ff       	call   c0000740 <strcpy>
c001c270:	83 c4 10             	add    esp,0x10
c001c273:	83 ec 08             	sub    esp,0x8
c001c276:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c27a:	50                   	push   eax
c001c27b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c282:	e8 3d fe ff ff       	call   c001c0c4 <FAT::fixFilepath(char*)>
c001c287:	83 c4 10             	add    esp,0x10
c001c28a:	83 ec 0c             	sub    esp,0xc
c001c28d:	6a 4c                	push   0x4c
c001c28f:	e8 c7 da fe ff       	call   c0009d5b <malloc>
c001c294:	83 c4 10             	add    esp,0x10
c001c297:	89 c2                	mov    edx,eax
c001c299:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c2a0:	89 10                	mov    DWORD PTR [eax],edx
c001c2a2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c2a9:	8b 00                	mov    eax,DWORD PTR [eax]
c001c2ab:	83 ec 08             	sub    esp,0x8
c001c2ae:	8d 54 24 14          	lea    edx,[esp+0x14]
c001c2b2:	52                   	push   edx
c001c2b3:	50                   	push   eax
c001c2b4:	e8 0a 9c fe ff       	call   c0005ec3 <f_opendir>
c001c2b9:	83 c4 10             	add    esp,0x10
c001c2bc:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c2c3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001c2cb:	74 07                	je     c001c2d4 <FAT::openDir(char const*, void**)+0xa0>
c001c2cd:	b8 01 00 00 00       	mov    eax,0x1
c001c2d2:	eb 08                	jmp    c001c2dc <FAT::openDir(char const*, void**)+0xa8>
c001c2d4:	b8 00 00 00 00       	mov    eax,0x0
c001c2d9:	8d 76 00             	lea    esi,[esi+0x0]
c001c2dc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c2e2:	c3                   	ret    
c001c2e3:	90                   	nop

c001c2e4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001c2e4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c2ea:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001c2f2:	75 0c                	jne    c001c300 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001c2f4:	b8 04 00 00 00       	mov    eax,0x4
c001c2f9:	e9 d2 00 00 00       	jmp    c001c3d0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c2fe:	66 90                	xchg   ax,ax
c001c300:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001c308:	75 0a                	jne    c001c314 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001c30a:	b8 04 00 00 00       	mov    eax,0x4
c001c30f:	e9 bc 00 00 00       	jmp    c001c3d0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c314:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001c31c:	75 0a                	jne    c001c328 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001c31e:	b8 04 00 00 00       	mov    eax,0x4
c001c323:	e9 a8 00 00 00       	jmp    c001c3d0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c328:	83 ec 08             	sub    esp,0x8
c001c32b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c332:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c339:	50                   	push   eax
c001c33a:	e8 01 44 fe ff       	call   c0000740 <strcpy>
c001c33f:	83 c4 10             	add    esp,0x10
c001c342:	83 ec 08             	sub    esp,0x8
c001c345:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c34c:	50                   	push   eax
c001c34d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c354:	e8 6b fd ff ff       	call   c001c0c4 <FAT::fixFilepath(char*)>
c001c359:	83 c4 10             	add    esp,0x10
c001c35c:	83 ec 08             	sub    esp,0x8
c001c35f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c363:	50                   	push   eax
c001c364:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c36b:	50                   	push   eax
c001c36c:	e8 11 9d fe ff       	call   c0006082 <f_stat>
c001c371:	83 c4 10             	add    esp,0x10
c001c374:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c37b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c382:	85 c0                	test   eax,eax
c001c384:	74 0a                	je     c001c390 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001c386:	83 f8 04             	cmp    eax,0x4
c001c389:	74 35                	je     c001c3c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001c38b:	eb 3b                	jmp    c001c3c8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001c38d:	8d 76 00             	lea    esi,[esi+0x0]
c001c390:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c394:	0f b6 c0             	movzx  eax,al
c001c397:	83 e0 10             	and    eax,0x10
c001c39a:	0f 95 c2             	setne  dl
c001c39d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001c3a4:	88 10                	mov    BYTE PTR [eax],dl
c001c3a6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c3a9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c3ad:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001c3b4:	89 01                	mov    DWORD PTR [ecx],eax
c001c3b6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c3b9:	b8 00 00 00 00       	mov    eax,0x0
c001c3be:	eb 10                	jmp    c001c3d0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c3c0:	b8 02 00 00 00       	mov    eax,0x2
c001c3c5:	eb 09                	jmp    c001c3d0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c3c7:	90                   	nop
c001c3c8:	b8 01 00 00 00       	mov    eax,0x1
c001c3cd:	8d 76 00             	lea    esi,[esi+0x0]
c001c3d0:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c3d6:	c3                   	ret    
c001c3d7:	90                   	nop

c001c3d8 <FAT::unlink(char const*)>:
c001c3d8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c3de:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c3e6:	75 08                	jne    c001c3f0 <FAT::unlink(char const*)+0x18>
c001c3e8:	b8 04 00 00 00       	mov    eax,0x4
c001c3ed:	eb 61                	jmp    c001c450 <FAT::unlink(char const*)+0x78>
c001c3ef:	90                   	nop
c001c3f0:	83 ec 08             	sub    esp,0x8
c001c3f3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c3fa:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c3fe:	50                   	push   eax
c001c3ff:	e8 3c 43 fe ff       	call   c0000740 <strcpy>
c001c404:	83 c4 10             	add    esp,0x10
c001c407:	83 ec 08             	sub    esp,0x8
c001c40a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c40e:	50                   	push   eax
c001c40f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c416:	e8 a9 fc ff ff       	call   c001c0c4 <FAT::fixFilepath(char*)>
c001c41b:	83 c4 10             	add    esp,0x10
c001c41e:	83 ec 0c             	sub    esp,0xc
c001c421:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c425:	50                   	push   eax
c001c426:	e8 a9 9f fe ff       	call   c00063d4 <f_unlink>
c001c42b:	83 c4 10             	add    esp,0x10
c001c42e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c435:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c43c:	85 c0                	test   eax,eax
c001c43e:	75 08                	jne    c001c448 <FAT::unlink(char const*)+0x70>
c001c440:	b8 00 00 00 00       	mov    eax,0x0
c001c445:	eb 09                	jmp    c001c450 <FAT::unlink(char const*)+0x78>
c001c447:	90                   	nop
c001c448:	b8 01 00 00 00       	mov    eax,0x1
c001c44d:	8d 76 00             	lea    esi,[esi+0x0]
c001c450:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c456:	c3                   	ret    
c001c457:	90                   	nop

c001c458 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001c458:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001c45e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001c465:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001c46c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c470:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c474:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001c47c:	75 0a                	jne    c001c488 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001c47e:	b8 04 00 00 00       	mov    eax,0x4
c001c483:	e9 30 01 00 00       	jmp    c001c5b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001c488:	83 ec 08             	sub    esp,0x8
c001c48b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c492:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c496:	50                   	push   eax
c001c497:	e8 a4 42 fe ff       	call   c0000740 <strcpy>
c001c49c:	83 c4 10             	add    esp,0x10
c001c49f:	83 ec 08             	sub    esp,0x8
c001c4a2:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c4a6:	50                   	push   eax
c001c4a7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c4ae:	e8 11 fc ff ff       	call   c001c0c4 <FAT::fixFilepath(char*)>
c001c4b3:	83 c4 10             	add    esp,0x10
c001c4b6:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001c4be:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001c4c6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c4cb:	83 e0 01             	and    eax,0x1
c001c4ce:	74 08                	je     c001c4d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001c4d0:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001c4d8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c4dd:	83 e0 02             	and    eax,0x2
c001c4e0:	74 0a                	je     c001c4ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001c4e2:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001c4ea:	66 90                	xchg   ax,ax
c001c4ec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c4f1:	83 e0 04             	and    eax,0x4
c001c4f4:	74 0a                	je     c001c500 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001c4f6:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001c4fe:	66 90                	xchg   ax,ax
c001c500:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c505:	83 e0 08             	and    eax,0x8
c001c508:	74 0a                	je     c001c514 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001c50a:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001c512:	66 90                	xchg   ax,ax
c001c514:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c519:	83 e0 01             	and    eax,0x1
c001c51c:	74 0a                	je     c001c528 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001c51e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001c526:	66 90                	xchg   ax,ax
c001c528:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c52d:	83 e0 02             	and    eax,0x2
c001c530:	74 0a                	je     c001c53c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001c532:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001c53a:	66 90                	xchg   ax,ax
c001c53c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c541:	83 e0 04             	and    eax,0x4
c001c544:	74 0a                	je     c001c550 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001c546:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001c54e:	66 90                	xchg   ax,ax
c001c550:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c555:	83 e0 08             	and    eax,0x8
c001c558:	74 0a                	je     c001c564 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001c55a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001c562:	66 90                	xchg   ax,ax
c001c564:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c56b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001c572:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001c57a:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001c582:	83 ec 04             	sub    esp,0x4
c001c585:	52                   	push   edx
c001c586:	50                   	push   eax
c001c587:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c58b:	50                   	push   eax
c001c58c:	e8 e5 a4 fe ff       	call   c0006a76 <f_chmod>
c001c591:	83 c4 10             	add    esp,0x10
c001c594:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001c59b:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001c5a2:	85 c0                	test   eax,eax
c001c5a4:	75 0a                	jne    c001c5b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001c5a6:	b8 00 00 00 00       	mov    eax,0x0
c001c5ab:	eb 0b                	jmp    c001c5b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001c5ad:	8d 76 00             	lea    esi,[esi+0x0]
c001c5b0:	b8 01 00 00 00       	mov    eax,0x1
c001c5b5:	8d 76 00             	lea    esi,[esi+0x0]
c001c5b8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c5be:	c3                   	ret    
c001c5bf:	90                   	nop

c001c5c0 <FAT::rename(char const*, char const*)>:
c001c5c0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c5c6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001c5ce:	74 0c                	je     c001c5dc <FAT::rename(char const*, char const*)+0x1c>
c001c5d0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001c5d8:	75 0e                	jne    c001c5e8 <FAT::rename(char const*, char const*)+0x28>
c001c5da:	66 90                	xchg   ax,ax
c001c5dc:	b8 04 00 00 00       	mov    eax,0x4
c001c5e1:	e9 9e 00 00 00       	jmp    c001c684 <FAT::rename(char const*, char const*)+0xc4>
c001c5e6:	66 90                	xchg   ax,ax
c001c5e8:	83 ec 08             	sub    esp,0x8
c001c5eb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c5f2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c5f9:	50                   	push   eax
c001c5fa:	e8 41 41 fe ff       	call   c0000740 <strcpy>
c001c5ff:	83 c4 10             	add    esp,0x10
c001c602:	83 ec 08             	sub    esp,0x8
c001c605:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001c60c:	50                   	push   eax
c001c60d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c614:	e8 ab fa ff ff       	call   c001c0c4 <FAT::fixFilepath(char*)>
c001c619:	83 c4 10             	add    esp,0x10
c001c61c:	83 ec 08             	sub    esp,0x8
c001c61f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001c626:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c62a:	50                   	push   eax
c001c62b:	e8 10 41 fe ff       	call   c0000740 <strcpy>
c001c630:	83 c4 10             	add    esp,0x10
c001c633:	83 ec 08             	sub    esp,0x8
c001c636:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c63a:	50                   	push   eax
c001c63b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c642:	e8 7d fa ff ff       	call   c001c0c4 <FAT::fixFilepath(char*)>
c001c647:	83 c4 10             	add    esp,0x10
c001c64a:	83 ec 08             	sub    esp,0x8
c001c64d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c651:	50                   	push   eax
c001c652:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c659:	50                   	push   eax
c001c65a:	e8 24 a1 fe ff       	call   c0006783 <f_rename>
c001c65f:	83 c4 10             	add    esp,0x10
c001c662:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001c669:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001c670:	85 c0                	test   eax,eax
c001c672:	75 08                	jne    c001c67c <FAT::rename(char const*, char const*)+0xbc>
c001c674:	b8 00 00 00 00       	mov    eax,0x0
c001c679:	eb 09                	jmp    c001c684 <FAT::rename(char const*, char const*)+0xc4>
c001c67b:	90                   	nop
c001c67c:	b8 01 00 00 00       	mov    eax,0x1
c001c681:	8d 76 00             	lea    esi,[esi+0x0]
c001c684:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c68a:	c3                   	ret    
c001c68b:	90                   	nop

c001c68c <FAT::mkdir(char const*)>:
c001c68c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c692:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c69a:	75 08                	jne    c001c6a4 <FAT::mkdir(char const*)+0x18>
c001c69c:	b8 04 00 00 00       	mov    eax,0x4
c001c6a1:	eb 61                	jmp    c001c704 <FAT::mkdir(char const*)+0x78>
c001c6a3:	90                   	nop
c001c6a4:	83 ec 08             	sub    esp,0x8
c001c6a7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c6ae:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c6b2:	50                   	push   eax
c001c6b3:	e8 88 40 fe ff       	call   c0000740 <strcpy>
c001c6b8:	83 c4 10             	add    esp,0x10
c001c6bb:	83 ec 08             	sub    esp,0x8
c001c6be:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c6c2:	50                   	push   eax
c001c6c3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c6ca:	e8 f5 f9 ff ff       	call   c001c0c4 <FAT::fixFilepath(char*)>
c001c6cf:	83 c4 10             	add    esp,0x10
c001c6d2:	83 ec 0c             	sub    esp,0xc
c001c6d5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c6d9:	50                   	push   eax
c001c6da:	e8 78 9e fe ff       	call   c0006557 <f_mkdir>
c001c6df:	83 c4 10             	add    esp,0x10
c001c6e2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c6e9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c6f0:	85 c0                	test   eax,eax
c001c6f2:	75 08                	jne    c001c6fc <FAT::mkdir(char const*)+0x70>
c001c6f4:	b8 00 00 00 00       	mov    eax,0x0
c001c6f9:	eb 09                	jmp    c001c704 <FAT::mkdir(char const*)+0x78>
c001c6fb:	90                   	nop
c001c6fc:	b8 01 00 00 00       	mov    eax,0x1
c001c701:	8d 76 00             	lea    esi,[esi+0x0]
c001c704:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c70a:	c3                   	ret    
c001c70b:	90                   	nop

c001c70c <FAT::exists(char const*)>:
c001c70c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c712:	83 ec 08             	sub    esp,0x8
c001c715:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c71c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c720:	50                   	push   eax
c001c721:	e8 1a 40 fe ff       	call   c0000740 <strcpy>
c001c726:	83 c4 10             	add    esp,0x10
c001c729:	83 ec 08             	sub    esp,0x8
c001c72c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c730:	50                   	push   eax
c001c731:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c738:	e8 87 f9 ff ff       	call   c001c0c4 <FAT::fixFilepath(char*)>
c001c73d:	83 c4 10             	add    esp,0x10
c001c740:	83 ec 08             	sub    esp,0x8
c001c743:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001c74a:	50                   	push   eax
c001c74b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c74f:	50                   	push   eax
c001c750:	e8 2d 99 fe ff       	call   c0006082 <f_stat>
c001c755:	83 c4 10             	add    esp,0x10
c001c758:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c75f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c766:	85 c0                	test   eax,eax
c001c768:	75 06                	jne    c001c770 <FAT::exists(char const*)+0x64>
c001c76a:	b0 01                	mov    al,0x1
c001c76c:	eb 06                	jmp    c001c774 <FAT::exists(char const*)+0x68>
c001c76e:	66 90                	xchg   ax,ax
c001c770:	b0 00                	mov    al,0x0
c001c772:	66 90                	xchg   ax,ax
c001c774:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c77a:	c3                   	ret    
c001c77b:	90                   	nop

c001c77c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001c77c:	b8 08 00 00 00       	mov    eax,0x8
c001c781:	c3                   	ret    

c001c782 <ISO9660::seek(void*, unsigned long long)>:
c001c782:	53                   	push   ebx
c001c783:	b8 04 00 00 00       	mov    eax,0x4
c001c788:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c78c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c790:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c794:	85 d2                	test   edx,edx
c001c796:	74 17                	je     c001c7af <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c798:	89 c8                	mov    eax,ecx
c001c79a:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001c79d:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001c7a0:	b8 01 00 00 00       	mov    eax,0x1
c001c7a5:	73 08                	jae    c001c7af <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c7a7:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001c7aa:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c7ad:	31 c0                	xor    eax,eax
c001c7af:	5b                   	pop    ebx
c001c7b0:	c3                   	ret    
c001c7b1:	90                   	nop

c001c7b2 <ISO9660::tell(void*, unsigned long long*)>:
c001c7b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c7b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7ba:	85 d2                	test   edx,edx
c001c7bc:	74 12                	je     c001c7d0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c7be:	85 c0                	test   eax,eax
c001c7c0:	74 0e                	je     c001c7d0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c7c2:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c7c5:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001c7c8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c7cb:	89 10                	mov    DWORD PTR [eax],edx
c001c7cd:	31 c0                	xor    eax,eax
c001c7cf:	c3                   	ret    
c001c7d0:	b8 04 00 00 00       	mov    eax,0x4
c001c7d5:	c3                   	ret    

c001c7d6 <ISO9660::getName()>:
c001c7d6:	b8 8c 6e 02 c0       	mov    eax,0xc0026e8c
c001c7db:	c3                   	ret    

c001c7dc <ISO9660::stat(void*, unsigned long long*)>:
c001c7dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c7e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7e4:	85 d2                	test   edx,edx
c001c7e6:	74 12                	je     c001c7fa <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c7e8:	85 c0                	test   eax,eax
c001c7ea:	74 0e                	je     c001c7fa <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c7ec:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001c7ef:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001c7f2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c7f5:	89 10                	mov    DWORD PTR [eax],edx
c001c7f7:	31 c0                	xor    eax,eax
c001c7f9:	c3                   	ret    
c001c7fa:	b8 04 00 00 00       	mov    eax,0x4
c001c7ff:	c3                   	ret    

c001c800 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001c800:	b8 01 00 00 00       	mov    eax,0x1
c001c805:	c3                   	ret    

c001c806 <ISO9660::unlink(char const*)>:
c001c806:	b8 01 00 00 00       	mov    eax,0x1
c001c80b:	c3                   	ret    

c001c80c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001c80c:	b8 01 00 00 00       	mov    eax,0x1
c001c811:	c3                   	ret    

c001c812 <ISO9660::rename(char const*, char const*)>:
c001c812:	b8 01 00 00 00       	mov    eax,0x1
c001c817:	c3                   	ret    

c001c818 <ISO9660::mkdir(char const*)>:
c001c818:	b8 01 00 00 00       	mov    eax,0x1
c001c81d:	c3                   	ret    

c001c81e <ISO9660::close(void*)>:
c001c81e:	83 ec 0c             	sub    esp,0xc
c001c821:	b8 04 00 00 00       	mov    eax,0x4
c001c826:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c82a:	85 d2                	test   edx,edx
c001c82c:	74 0e                	je     c001c83c <ISO9660::close(void*)+0x1e>
c001c82e:	83 ec 0c             	sub    esp,0xc
c001c831:	52                   	push   edx
c001c832:	e8 34 d5 fe ff       	call   c0009d6b <free>
c001c837:	83 c4 10             	add    esp,0x10
c001c83a:	31 c0                	xor    eax,eax
c001c83c:	83 c4 0c             	add    esp,0xc
c001c83f:	c3                   	ret    

c001c840 <ISO9660::closeDir(void*)>:
c001c840:	83 ec 0c             	sub    esp,0xc
c001c843:	b8 04 00 00 00       	mov    eax,0x4
c001c848:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c84c:	85 d2                	test   edx,edx
c001c84e:	74 0e                	je     c001c85e <ISO9660::closeDir(void*)+0x1e>
c001c850:	83 ec 0c             	sub    esp,0xc
c001c853:	52                   	push   edx
c001c854:	e8 12 d5 fe ff       	call   c0009d6b <free>
c001c859:	83 c4 10             	add    esp,0x10
c001c85c:	31 c0                	xor    eax,eax
c001c85e:	83 c4 0c             	add    esp,0xc
c001c861:	c3                   	ret    

c001c862 <ISO9660::~ISO9660()>:
c001c862:	83 ec 0c             	sub    esp,0xc
c001c865:	ba b0 6e 02 c0       	mov    edx,0xc0026eb0
c001c86a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c86e:	89 10                	mov    DWORD PTR [eax],edx
c001c870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c874:	83 ec 0c             	sub    esp,0xc
c001c877:	50                   	push   eax
c001c878:	e8 05 0b ff ff       	call   c000d382 <Filesystem::~Filesystem()>
c001c87d:	83 c4 10             	add    esp,0x10
c001c880:	90                   	nop
c001c881:	83 c4 0c             	add    esp,0xc
c001c884:	c3                   	ret    
c001c885:	90                   	nop

c001c886 <ISO9660::~ISO9660()>:
c001c886:	83 ec 0c             	sub    esp,0xc
c001c889:	83 ec 0c             	sub    esp,0xc
c001c88c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c890:	e8 cd ff ff ff       	call   c001c862 <ISO9660::~ISO9660()>
c001c895:	83 c4 10             	add    esp,0x10
c001c898:	83 ec 08             	sub    esp,0x8
c001c89b:	6a 08                	push   0x8
c001c89d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8a1:	e8 c0 06 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c001c8a6:	83 c4 10             	add    esp,0x10
c001c8a9:	83 c4 0c             	add    esp,0xc
c001c8ac:	c3                   	ret    

c001c8ad <__memmem(unsigned char*, int, unsigned char*, int)>:
c001c8ad:	55                   	push   ebp
c001c8ae:	31 c9                	xor    ecx,ecx
c001c8b0:	57                   	push   edi
c001c8b1:	56                   	push   esi
c001c8b2:	53                   	push   ebx
c001c8b3:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c8b7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c8bb:	89 eb                	mov    ebx,ebp
c001c8bd:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001c8c1:	39 ce                	cmp    esi,ecx
c001c8c3:	7e 17                	jle    c001c8dc <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001c8c5:	31 d2                	xor    edx,edx
c001c8c7:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001c8cb:	7d 13                	jge    c001c8e0 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001c8cd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c8d1:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c8d4:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001c8d7:	75 0d                	jne    c001c8e6 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001c8d9:	42                   	inc    edx
c001c8da:	eb eb                	jmp    c001c8c7 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001c8dc:	31 c0                	xor    eax,eax
c001c8de:	eb 0a                	jmp    c001c8ea <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c8e0:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001c8e4:	eb 04                	jmp    c001c8ea <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c8e6:	41                   	inc    ecx
c001c8e7:	43                   	inc    ebx
c001c8e8:	eb d7                	jmp    c001c8c1 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001c8ea:	5b                   	pop    ebx
c001c8eb:	5e                   	pop    esi
c001c8ec:	5f                   	pop    edi
c001c8ed:	5d                   	pop    ebp
c001c8ee:	c3                   	ret    

c001c8ef <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001c8ef:	57                   	push   edi
c001c8f0:	56                   	push   esi
c001c8f1:	53                   	push   ebx
c001c8f2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c8f6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c8fa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c8fe:	39 35 00 a1 02 c0    	cmp    DWORD PTR ds:0xc002a100,esi
c001c904:	75 08                	jne    c001c90e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001c906:	38 1d 14 84 02 c0    	cmp    BYTE PTR ds:0xc0028414,bl
c001c90c:	74 4a                	je     c001c958 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001c90e:	83 ec 0c             	sub    esp,0xc
c001c911:	31 d2                	xor    edx,edx
c001c913:	68 20 a1 02 c0       	push   0xc002a120
c001c918:	0f be c3             	movsx  eax,bl
c001c91b:	6a 01                	push   0x1
c001c91d:	52                   	push   edx
c001c91e:	56                   	push   esi
c001c91f:	ff 34 85 9c 8e 02 c0 	push   DWORD PTR [eax*4-0x3ffd7164]
c001c926:	e8 9f 40 ff ff       	call   c00109ca <LogicalDisk::read(unsigned long long, int, void*)>
c001c92b:	83 c4 20             	add    esp,0x20
c001c92e:	85 c0                	test   eax,eax
c001c930:	75 0e                	jne    c001c940 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001c932:	89 35 00 a1 02 c0    	mov    DWORD PTR ds:0xc002a100,esi
c001c938:	88 1d 14 84 02 c0    	mov    BYTE PTR ds:0xc0028414,bl
c001c93e:	eb 18                	jmp    c001c958 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001c940:	50                   	push   eax
c001c941:	68 00 08 00 00       	push   0x800
c001c946:	6a 00                	push   0x0
c001c948:	57                   	push   edi
c001c949:	e8 36 3d fe ff       	call   c0000684 <memset>
c001c94e:	83 c4 10             	add    esp,0x10
c001c951:	b8 01 00 00 00       	mov    eax,0x1
c001c956:	eb 0e                	jmp    c001c966 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001c958:	be 20 a1 02 c0       	mov    esi,0xc002a120
c001c95d:	b9 00 08 00 00       	mov    ecx,0x800
c001c962:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c964:	31 c0                	xor    eax,eax
c001c966:	5b                   	pop    ebx
c001c967:	5e                   	pop    esi
c001c968:	5f                   	pop    edi
c001c969:	c3                   	ret    

c001c96a <ISO9660::tryMount(LogicalDisk*, int)>:
c001c96a:	81 ec 10 08 00 00    	sub    esp,0x810
c001c970:	c7 05 00 a1 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002a100,0xdeadbeef
c001c97a:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001c981:	83 c0 41             	add    eax,0x41
c001c984:	0f be c0             	movsx  eax,al
c001c987:	50                   	push   eax
c001c988:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c98c:	50                   	push   eax
c001c98d:	6a 10                	push   0x10
c001c98f:	e8 5b ff ff ff       	call   c001c8ef <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c994:	83 c4 10             	add    esp,0x10
c001c997:	31 d2                	xor    edx,edx
c001c999:	85 c0                	test   eax,eax
c001c99b:	75 24                	jne    c001c9c1 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c99d:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001c9a2:	75 1d                	jne    c001c9c1 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c9a4:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001c9a9:	75 16                	jne    c001c9c1 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c9ab:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001c9b0:	75 0f                	jne    c001c9c1 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c9b2:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001c9b7:	75 08                	jne    c001c9c1 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c9b9:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001c9be:	0f 94 c2             	sete   dl
c001c9c1:	88 d0                	mov    al,dl
c001c9c3:	81 c4 0c 08 00 00    	add    esp,0x80c
c001c9c9:	c3                   	ret    

c001c9ca <ISO9660::read(void*, unsigned long, void*, int*)>:
c001c9ca:	55                   	push   ebp
c001c9cb:	57                   	push   edi
c001c9cc:	56                   	push   esi
c001c9cd:	53                   	push   ebx
c001c9ce:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001c9d4:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001c9db:	85 ed                	test   ebp,ebp
c001c9dd:	0f 84 da 01 00 00    	je     c001cbbd <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c9e3:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001c9eb:	0f 84 cc 01 00 00    	je     c001cbbd <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c9f1:	b8 01 00 00 00       	mov    eax,0x1
c001c9f6:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001c9fa:	0f 85 c2 01 00 00    	jne    c001cbc2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001ca00:	31 d2                	xor    edx,edx
c001ca02:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001ca09:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001ca0c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001ca0f:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001ca12:	89 04 24             	mov    DWORD PTR [esp],eax
c001ca15:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ca19:	01 c8                	add    eax,ecx
c001ca1b:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001ca1e:	11 da                	adc    edx,ebx
c001ca20:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001ca24:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ca28:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001ca2c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ca30:	19 d7                	sbb    edi,edx
c001ca32:	72 11                	jb     c001ca45 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001ca34:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001ca37:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001ca3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ca3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ca43:	eb 0c                	jmp    c001ca51 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001ca45:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001ca49:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ca4d:	29 ce                	sub    esi,ecx
c001ca4f:	19 df                	sbb    edi,ebx
c001ca51:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ca54:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001ca57:	0f a4 c2 0b          	shld   edx,eax,0xb
c001ca5b:	c1 e0 0b             	shl    eax,0xb
c001ca5e:	01 c8                	add    eax,ecx
c001ca60:	11 da                	adc    edx,ebx
c001ca62:	89 04 24             	mov    DWORD PTR [esp],eax
c001ca65:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ca69:	51                   	push   ecx
c001ca6a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001ca6e:	50                   	push   eax
c001ca6f:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001ca73:	53                   	push   ebx
c001ca74:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ca78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca7c:	0f ac d0 0b          	shrd   eax,edx,0xb
c001ca80:	50                   	push   eax
c001ca81:	e8 69 fe ff ff       	call   c001c8ef <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ca86:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001ca89:	b8 00 08 00 00       	mov    eax,0x800
c001ca8e:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001ca94:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001ca98:	29 d0                	sub    eax,edx
c001ca9a:	83 c4 10             	add    esp,0x10
c001ca9d:	89 f9                	mov    ecx,edi
c001ca9f:	39 c6                	cmp    esi,eax
c001caa1:	83 d9 00             	sbb    ecx,0x0
c001caa4:	7d 1b                	jge    c001cac1 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001caa6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001caab:	75 12                	jne    c001cabf <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001caad:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001cab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001caba:	e9 fa 00 00 00       	jmp    c001cbb9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001cabf:	89 f0                	mov    eax,esi
c001cac1:	01 d3                	add    ebx,edx
c001cac3:	31 d2                	xor    edx,edx
c001cac5:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001cac9:	39 c2                	cmp    edx,eax
c001cacb:	7d 14                	jge    c001cae1 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001cacd:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001cad4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cad8:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001cadb:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001cade:	42                   	inc    edx
c001cadf:	eb e8                	jmp    c001cac9 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001cae1:	89 c2                	mov    edx,eax
c001cae3:	85 c0                	test   eax,eax
c001cae5:	79 02                	jns    c001cae9 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001cae7:	31 d2                	xor    edx,edx
c001cae9:	01 c2                	add    edx,eax
c001caeb:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001caee:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001caf5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001caf9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001cafd:	99                   	cdq    
c001cafe:	01 c1                	add    ecx,eax
c001cb00:	11 d3                	adc    ebx,edx
c001cb02:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001cb06:	29 c6                	sub    esi,eax
c001cb08:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001cb0c:	19 d7                	sbb    edi,edx
c001cb0e:	89 34 24             	mov    DWORD PTR [esp],esi
c001cb11:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001cb15:	b8 ff 07 00 00       	mov    eax,0x7ff
c001cb1a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001cb1d:	b8 00 00 00 00       	mov    eax,0x0
c001cb22:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001cb26:	7d 43                	jge    c001cb6b <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001cb28:	52                   	push   edx
c001cb29:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cb2d:	50                   	push   eax
c001cb2e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cb36:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cb3a:	0f ac d0 0b          	shrd   eax,edx,0xb
c001cb3e:	50                   	push   eax
c001cb3f:	e8 ab fd ff ff       	call   c001c8ef <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cb44:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001cb4c:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001cb51:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001cb59:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001cb61:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001cb66:	83 c4 10             	add    esp,0x10
c001cb69:	eb aa                	jmp    c001cb15 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001cb6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb6f:	0b 04 24             	or     eax,DWORD PTR [esp]
c001cb72:	74 2a                	je     c001cb9e <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001cb74:	50                   	push   eax
c001cb75:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cb79:	50                   	push   eax
c001cb7a:	8d 74 24 28          	lea    esi,[esp+0x28]
c001cb7e:	56                   	push   esi
c001cb7f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cb83:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cb87:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001cb8b:	51                   	push   ecx
c001cb8c:	e8 5e fd ff ff       	call   c001c8ef <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cb91:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cb95:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cb99:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cb9b:	83 c4 10             	add    esp,0x10
c001cb9e:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001cba5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001cba9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cbad:	89 18                	mov    DWORD PTR [eax],ebx
c001cbaf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cbb3:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001cbb6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001cbb9:	31 c0                	xor    eax,eax
c001cbbb:	eb 05                	jmp    c001cbc2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001cbbd:	b8 04 00 00 00       	mov    eax,0x4
c001cbc2:	81 c4 2c 08 00 00    	add    esp,0x82c
c001cbc8:	5b                   	pop    ebx
c001cbc9:	5e                   	pop    esi
c001cbca:	5f                   	pop    edi
c001cbcb:	5d                   	pop    ebp
c001cbcc:	c3                   	ret    
c001cbcd:	90                   	nop

c001cbce <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001cbce:	55                   	push   ebp
c001cbcf:	57                   	push   edi
c001cbd0:	56                   	push   esi
c001cbd1:	53                   	push   ebx
c001cbd2:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001cbd8:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001cbdf:	85 ed                	test   ebp,ebp
c001cbe1:	0f 84 51 02 00 00    	je     c001ce38 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001cbe7:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001cbef:	0f 84 43 02 00 00    	je     c001ce38 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001cbf5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001cbf8:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001cbfb:	75 0a                	jne    c001cc07 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001cbfd:	b8 07 00 00 00       	mov    eax,0x7
c001cc02:	e9 36 02 00 00       	jmp    c001ce3d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001cc07:	50                   	push   eax
c001cc08:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cc0c:	50                   	push   eax
c001cc0d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001cc14:	53                   	push   ebx
c001cc15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cc18:	c1 e0 0b             	shl    eax,0xb
c001cc1b:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001cc1e:	c1 e8 0b             	shr    eax,0xb
c001cc21:	50                   	push   eax
c001cc22:	e8 c8 fc ff ff       	call   c001c8ef <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cc27:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cc2a:	83 c4 10             	add    esp,0x10
c001cc2d:	89 c1                	mov    ecx,eax
c001cc2f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001cc32:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001cc38:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001cc3b:	84 db                	test   bl,bl
c001cc3d:	0f 85 8b 00 00 00    	jne    c001ccce <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001cc43:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001cc49:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001cc4c:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001cc52:	29 c6                	sub    esi,eax
c001cc54:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001cc58:	89 f3                	mov    ebx,esi
c001cc5a:	89 f1                	mov    ecx,esi
c001cc5c:	c1 fb 1f             	sar    ebx,0x1f
c001cc5f:	01 f0                	add    eax,esi
c001cc61:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001cc64:	11 da                	adc    edx,ebx
c001cc66:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc69:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001cc6d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001cc70:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001cc73:	89 d8                	mov    eax,ebx
c001cc75:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001cc79:	ba 00 00 00 00       	mov    edx,0x0
c001cc7e:	19 f8                	sbb    eax,edi
c001cc80:	b8 00 00 00 00       	mov    eax,0x0
c001cc85:	73 08                	jae    c001cc8f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001cc87:	89 f0                	mov    eax,esi
c001cc89:	89 fa                	mov    edx,edi
c001cc8b:	29 c8                	sub    eax,ecx
c001cc8d:	19 da                	sbb    edx,ebx
c001cc8f:	89 d7                	mov    edi,edx
c001cc91:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001cc94:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001cc97:	09 c7                	or     edi,eax
c001cc99:	0f 84 5e ff ff ff    	je     c001cbfd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001cc9f:	57                   	push   edi
c001cca0:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cca4:	50                   	push   eax
c001cca5:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001ccac:	53                   	push   ebx
c001ccad:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ccb0:	c1 e0 0b             	shl    eax,0xb
c001ccb3:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001ccb7:	c1 e8 0b             	shr    eax,0xb
c001ccba:	50                   	push   eax
c001ccbb:	e8 2f fc ff ff       	call   c001c8ef <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ccc0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ccc3:	83 c4 10             	add    esp,0x10
c001ccc6:	25 ff 07 00 00       	and    eax,0x7ff
c001cccb:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001ccce:	31 ff                	xor    edi,edi
c001ccd0:	56                   	push   esi
c001ccd1:	6a 28                	push   0x28
c001ccd3:	6a 00                	push   0x0
c001ccd5:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ccd9:	50                   	push   eax
c001ccda:	e8 a5 39 fe ff       	call   c0000684 <memset>
c001ccdf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cce2:	25 ff 07 00 00       	and    eax,0x7ff
c001cce7:	89 c6                	mov    esi,eax
c001cce9:	83 c6 21             	add    esi,0x21
c001ccec:	83 d7 00             	adc    edi,0x0
c001ccef:	83 c4 10             	add    esp,0x10
c001ccf2:	31 c9                	xor    ecx,ecx
c001ccf4:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001ccfb:	83 f9 28             	cmp    ecx,0x28
c001ccfe:	88 04 24             	mov    BYTE PTR [esp],al
c001cd01:	0f 94 c2             	sete   dl
c001cd04:	88 d0                	mov    al,dl
c001cd06:	ba ff 07 00 00       	mov    edx,0x7ff
c001cd0b:	39 f2                	cmp    edx,esi
c001cd0d:	ba 00 00 00 00       	mov    edx,0x0
c001cd12:	19 fa                	sbb    edx,edi
c001cd14:	0f 92 c2             	setb   dl
c001cd17:	09 c2                	or     edx,eax
c001cd19:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001cd1d:	0f 94 c0             	sete   al
c001cd20:	08 d0                	or     al,dl
c001cd22:	75 16                	jne    c001cd3a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001cd24:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001cd28:	74 10                	je     c001cd3a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001cd2a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001cd2d:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001cd31:	41                   	inc    ecx
c001cd32:	83 c6 01             	add    esi,0x1
c001cd35:	83 d7 00             	adc    edi,0x0
c001cd38:	eb ba                	jmp    c001ccf4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001cd3a:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001cd41:	83 ec 0c             	sub    esp,0xc
c001cd44:	8d 74 24 24          	lea    esi,[esp+0x24]
c001cd48:	56                   	push   esi
c001cd49:	e8 52 39 fe ff       	call   c00006a0 <strlen>
c001cd4e:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001cd55:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001cd59:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001cd61:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cd64:	5a                   	pop    edx
c001cd65:	25 ff 07 00 00       	and    eax,0x7ff
c001cd6a:	59                   	pop    ecx
c001cd6b:	01 f8                	add    eax,edi
c001cd6d:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001cd73:	83 e0 02             	and    eax,0x2
c001cd76:	3c 01                	cmp    al,0x1
c001cd78:	19 c0                	sbb    eax,eax
c001cd7a:	83 c0 02             	add    eax,0x2
c001cd7d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001cd81:	56                   	push   esi
c001cd82:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cd86:	50                   	push   eax
c001cd87:	e8 b4 39 fe ff       	call   c0000740 <strcpy>
c001cd8c:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001cd90:	83 c4 10             	add    esp,0x10
c001cd93:	84 c0                	test   al,al
c001cd95:	75 21                	jne    c001cdb8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001cd97:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001cd9f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cda7:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001cdaf:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001cdb6:	eb 28                	jmp    c001cde0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001cdb8:	fe c8                	dec    al
c001cdba:	75 24                	jne    c001cde0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001cdbc:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001cdc4:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cdcc:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001cdd4:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001cddb:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001cde0:	8d 74 24 40          	lea    esi,[esp+0x40]
c001cde4:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001cdeb:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001cdf2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cdf4:	0f b6 f3             	movzx  esi,bl
c001cdf7:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001cdfe:	31 db                	xor    ebx,ebx
c001ce00:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001ce06:	89 df                	mov    edi,ebx
c001ce08:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001ce0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ce0e:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001ce11:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ce14:	39 c6                	cmp    esi,eax
c001ce16:	19 d7                	sbb    edi,edx
c001ce18:	72 10                	jb     c001ce2a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001ce1a:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001ce21:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001ce28:	eb 0a                	jmp    c001ce34 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001ce2a:	29 f0                	sub    eax,esi
c001ce2c:	19 da                	sbb    edx,ebx
c001ce2e:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001ce31:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001ce34:	31 c0                	xor    eax,eax
c001ce36:	eb 05                	jmp    c001ce3d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001ce38:	b8 04 00 00 00       	mov    eax,0x4
c001ce3d:	81 c4 5c 09 00 00    	add    esp,0x95c
c001ce43:	5b                   	pop    ebx
c001ce44:	5e                   	pop    esi
c001ce45:	5f                   	pop    edi
c001ce46:	5d                   	pop    ebp
c001ce47:	c3                   	ret    

c001ce48 <readRoot(unsigned int*, unsigned int*, char)>:
c001ce48:	57                   	push   edi
c001ce49:	56                   	push   esi
c001ce4a:	81 ec 38 08 00 00    	sub    esp,0x838
c001ce50:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001ce58:	50                   	push   eax
c001ce59:	8d 44 24 38          	lea    eax,[esp+0x38]
c001ce5d:	50                   	push   eax
c001ce5e:	6a 10                	push   0x10
c001ce60:	e8 8a fa ff ff       	call   c001c8ef <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ce65:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001ce6c:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001ce70:	b9 22 00 00 00       	mov    ecx,0x22
c001ce75:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ce77:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001ce7e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ce82:	89 10                	mov    DWORD PTR [eax],edx
c001ce84:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001ce8b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ce8f:	89 10                	mov    DWORD PTR [eax],edx
c001ce91:	81 c4 44 08 00 00    	add    esp,0x844
c001ce97:	b0 01                	mov    al,0x1
c001ce99:	5e                   	pop    esi
c001ce9a:	5f                   	pop    edi
c001ce9b:	c3                   	ret    

c001ce9c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001ce9c:	55                   	push   ebp
c001ce9d:	57                   	push   edi
c001ce9e:	56                   	push   esi
c001ce9f:	53                   	push   ebx
c001cea0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cea6:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001cead:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001ceb4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ceb8:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001cebc:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001cec0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cec4:	75 03                	jne    c001cec9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001cec6:	83 c3 02             	add    ebx,0x2
c001cec9:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001cecc:	75 03                	jne    c001ced1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001cece:	43                   	inc    ebx
c001cecf:	eb f8                	jmp    c001cec9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001ced1:	52                   	push   edx
c001ced2:	68 00 01 00 00       	push   0x100
c001ced7:	6a 00                	push   0x0
c001ced9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cedd:	50                   	push   eax
c001cede:	e8 a1 37 fe ff       	call   c0000684 <memset>
c001cee3:	83 c4 10             	add    esp,0x10
c001cee6:	31 d2                	xor    edx,edx
c001cee8:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001ceeb:	84 c0                	test   al,al
c001ceed:	74 21                	je     c001cf10 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001ceef:	3c 2f                	cmp    al,0x2f
c001cef1:	75 0b                	jne    c001cefe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001cef3:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001cef7:	bd 01 00 00 00       	mov    ebp,0x1
c001cefc:	eb 14                	jmp    c001cf12 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001cefe:	8d 48 9f             	lea    ecx,[eax-0x61]
c001cf01:	80 f9 19             	cmp    cl,0x19
c001cf04:	77 03                	ja     c001cf09 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001cf06:	83 e8 20             	sub    eax,0x20
c001cf09:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001cf0d:	42                   	inc    edx
c001cf0e:	eb d8                	jmp    c001cee8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001cf10:	31 ed                	xor    ebp,ebp
c001cf12:	83 ec 0c             	sub    esp,0xc
c001cf15:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001cf1c:	e8 3a ce fe ff       	call   c0009d5b <malloc>
c001cf21:	89 c6                	mov    esi,eax
c001cf23:	89 c2                	mov    edx,eax
c001cf25:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001cf2c:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001cf32:	c1 ef 0b             	shr    edi,0xb
c001cf35:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001cf3c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001cf40:	83 c4 10             	add    esp,0x10
c001cf43:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001cf48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cf4c:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c001cf53:	74 29                	je     c001cf7e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c001cf55:	50                   	push   eax
c001cf56:	57                   	push   edi
c001cf57:	52                   	push   edx
c001cf58:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001cf5c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001cf63:	e8 87 f9 ff ff       	call   c001c8ef <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cf68:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cf6c:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001cf73:	81 c2 00 08 00 00    	add    edx,0x800
c001cf79:	83 c4 10             	add    esp,0x10
c001cf7c:	eb ca                	jmp    c001cf48 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c001cf7e:	83 ec 0c             	sub    esp,0xc
c001cf81:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001cf85:	57                   	push   edi
c001cf86:	e8 15 37 fe ff       	call   c00006a0 <strlen>
c001cf8b:	50                   	push   eax
c001cf8c:	57                   	push   edi
c001cf8d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001cf94:	56                   	push   esi
c001cf95:	e8 13 f9 ff ff       	call   c001c8ad <__memmem(unsigned char*, int, unsigned char*, int)>
c001cf9a:	83 c4 20             	add    esp,0x20
c001cf9d:	85 c0                	test   eax,eax
c001cf9f:	75 13                	jne    c001cfb4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c001cfa1:	83 ec 0c             	sub    esp,0xc
c001cfa4:	56                   	push   esi
c001cfa5:	e8 c1 cd fe ff       	call   c0009d6b <free>
c001cfaa:	83 c4 10             	add    esp,0x10
c001cfad:	31 c0                	xor    eax,eax
c001cfaf:	e9 b3 00 00 00       	jmp    c001d067 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001cfb4:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001cfb8:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001cfbc:	c1 e7 08             	shl    edi,0x8
c001cfbf:	c1 e2 10             	shl    edx,0x10
c001cfc2:	09 d7                	or     edi,edx
c001cfc4:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001cfc8:	09 d7                	or     edi,edx
c001cfca:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001cfce:	c1 e2 18             	shl    edx,0x18
c001cfd1:	09 d7                	or     edi,edx
c001cfd3:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001cfd7:	89 d1                	mov    ecx,edx
c001cfd9:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001cfdd:	c1 e1 08             	shl    ecx,0x8
c001cfe0:	c1 e2 10             	shl    edx,0x10
c001cfe3:	09 ca                	or     edx,ecx
c001cfe5:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001cfe9:	09 ca                	or     edx,ecx
c001cfeb:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001cfef:	c1 e1 18             	shl    ecx,0x18
c001cff2:	09 ca                	or     edx,ecx
c001cff4:	89 e9                	mov    ecx,ebp
c001cff6:	84 c9                	test   cl,cl
c001cff8:	74 3c                	je     c001d036 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c001cffa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001cffe:	83 ec 0c             	sub    esp,0xc
c001d001:	56                   	push   esi
c001d002:	e8 64 cd fe ff       	call   c0009d6b <free>
c001d007:	83 c4 0c             	add    esp,0xc
c001d00a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001d011:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001d016:	50                   	push   eax
c001d017:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001d01e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001d025:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d029:	52                   	push   edx
c001d02a:	57                   	push   edi
c001d02b:	53                   	push   ebx
c001d02c:	e8 6b fe ff ff       	call   c001ce9c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001d031:	83 c4 20             	add    esp,0x20
c001d034:	eb 31                	jmp    c001d067 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001d036:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001d039:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001d040:	d0 e8                	shr    al,1
c001d042:	89 3b                	mov    DWORD PTR [ebx],edi
c001d044:	83 e0 01             	and    eax,0x1
c001d047:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001d04e:	83 ec 0c             	sub    esp,0xc
c001d051:	89 13                	mov    DWORD PTR [ebx],edx
c001d053:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001d05a:	89 03                	mov    DWORD PTR [ebx],eax
c001d05c:	56                   	push   esi
c001d05d:	e8 09 cd fe ff       	call   c0009d6b <free>
c001d062:	83 c4 10             	add    esp,0x10
c001d065:	b0 01                	mov    al,0x1
c001d067:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d06d:	5b                   	pop    ebx
c001d06e:	5e                   	pop    esi
c001d06f:	5f                   	pop    edi
c001d070:	5d                   	pop    ebp
c001d071:	c3                   	ret    

c001d072 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001d072:	55                   	push   ebp
c001d073:	57                   	push   edi
c001d074:	56                   	push   esi
c001d075:	53                   	push   ebx
c001d076:	83 ec 20             	sub    esp,0x20
c001d079:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d07d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001d081:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d085:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d08d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d095:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001d09a:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001d0a0:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001d0a6:	57                   	push   edi
c001d0a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d0ab:	50                   	push   eax
c001d0ac:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d0b0:	50                   	push   eax
c001d0b1:	e8 92 fd ff ff       	call   c001ce48 <readRoot(unsigned int*, unsigned int*, char)>
c001d0b6:	5a                   	pop    edx
c001d0b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d0bb:	e8 e0 35 fe ff       	call   c00006a0 <strlen>
c001d0c0:	83 c4 10             	add    esp,0x10
c001d0c3:	83 f8 03             	cmp    eax,0x3
c001d0c6:	77 17                	ja     c001d0df <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001d0c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d0cc:	89 03                	mov    DWORD PTR [ebx],eax
c001d0ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0d2:	89 06                	mov    DWORD PTR [esi],eax
c001d0d4:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001d0db:	b0 01                	mov    al,0x1
c001d0dd:	eb 19                	jmp    c001d0f8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001d0df:	50                   	push   eax
c001d0e0:	55                   	push   ebp
c001d0e1:	57                   	push   edi
c001d0e2:	56                   	push   esi
c001d0e3:	53                   	push   ebx
c001d0e4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d0e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d0ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d0f0:	e8 a7 fd ff ff       	call   c001ce9c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001d0f5:	83 c4 20             	add    esp,0x20
c001d0f8:	83 c4 1c             	add    esp,0x1c
c001d0fb:	5b                   	pop    ebx
c001d0fc:	5e                   	pop    esi
c001d0fd:	5f                   	pop    edi
c001d0fe:	5d                   	pop    ebp
c001d0ff:	c3                   	ret    

c001d100 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001d100:	57                   	push   edi
c001d101:	56                   	push   esi
c001d102:	53                   	push   ebx
c001d103:	83 ec 10             	sub    esp,0x10
c001d106:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d10a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d10e:	85 ff                	test   edi,edi
c001d110:	0f 84 8b 00 00 00    	je     c001d1a1 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001d116:	85 f6                	test   esi,esi
c001d118:	0f 84 83 00 00 00    	je     c001d1a1 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001d11e:	b8 03 00 00 00       	mov    eax,0x3
c001d123:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001d128:	75 7c                	jne    c001d1a6 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d12a:	83 ec 0c             	sub    esp,0xc
c001d12d:	6a 1c                	push   0x1c
c001d12f:	e8 27 cc fe ff       	call   c0009d5b <malloc>
c001d134:	89 07                	mov    DWORD PTR [edi],eax
c001d136:	89 c3                	mov    ebx,eax
c001d138:	58                   	pop    eax
c001d139:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d13d:	50                   	push   eax
c001d13e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001d141:	50                   	push   eax
c001d142:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d146:	50                   	push   eax
c001d147:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d14b:	50                   	push   eax
c001d14c:	56                   	push   esi
c001d14d:	e8 20 ff ff ff       	call   c001d072 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d152:	83 c4 20             	add    esp,0x20
c001d155:	84 c0                	test   al,al
c001d157:	74 07                	je     c001d160 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001d159:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d15e:	74 0b                	je     c001d16b <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001d160:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001d164:	b8 01 00 00 00       	mov    eax,0x1
c001d169:	eb 3b                	jmp    c001d1a6 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d16b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d16f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001d173:	89 03                	mov    DWORD PTR [ebx],eax
c001d175:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001d17c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d180:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001d187:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d18e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d191:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d198:	8a 06                	mov    al,BYTE PTR [esi]
c001d19a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001d19d:	31 c0                	xor    eax,eax
c001d19f:	eb 05                	jmp    c001d1a6 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d1a1:	b8 04 00 00 00       	mov    eax,0x4
c001d1a6:	83 c4 10             	add    esp,0x10
c001d1a9:	5b                   	pop    ebx
c001d1aa:	5e                   	pop    esi
c001d1ab:	5f                   	pop    edi
c001d1ac:	c3                   	ret    
c001d1ad:	90                   	nop

c001d1ae <ISO9660::exists(char const*)>:
c001d1ae:	83 ec 28             	sub    esp,0x28
c001d1b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d1b5:	8d 54 24 18          	lea    edx,[esp+0x18]
c001d1b9:	52                   	push   edx
c001d1ba:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001d1bd:	52                   	push   edx
c001d1be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001d1c2:	52                   	push   edx
c001d1c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001d1c7:	52                   	push   edx
c001d1c8:	50                   	push   eax
c001d1c9:	e8 a4 fe ff ff       	call   c001d072 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d1ce:	83 c4 3c             	add    esp,0x3c
c001d1d1:	c3                   	ret    

c001d1d2 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001d1d2:	56                   	push   esi
c001d1d3:	53                   	push   ebx
c001d1d4:	83 ec 14             	sub    esp,0x14
c001d1d7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d1db:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d1df:	85 db                	test   ebx,ebx
c001d1e1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d1e5:	0f 94 c2             	sete   dl
c001d1e8:	85 f6                	test   esi,esi
c001d1ea:	0f 94 c0             	sete   al
c001d1ed:	08 c2                	or     dl,al
c001d1ef:	75 68                	jne    c001d259 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001d1f1:	85 c9                	test   ecx,ecx
c001d1f3:	74 64                	je     c001d259 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001d1f5:	83 ec 0c             	sub    esp,0xc
c001d1f8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001d1fb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d1ff:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d205:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d20c:	50                   	push   eax
c001d20d:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001d210:	50                   	push   eax
c001d211:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d215:	50                   	push   eax
c001d216:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d21a:	50                   	push   eax
c001d21b:	51                   	push   ecx
c001d21c:	e8 51 fe ff ff       	call   c001d072 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d221:	83 c4 20             	add    esp,0x20
c001d224:	ba 01 00 00 00       	mov    edx,0x1
c001d229:	84 c0                	test   al,al
c001d22b:	74 31                	je     c001d25e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d22d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d231:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d238:	89 03                	mov    DWORD PTR [ebx],eax
c001d23a:	ba 00 00 00 00       	mov    edx,0x0
c001d23f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d243:	85 c0                	test   eax,eax
c001d245:	0f 95 06             	setne  BYTE PTR [esi]
c001d248:	74 14                	je     c001d25e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d24a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d250:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d257:	eb 05                	jmp    c001d25e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d259:	ba 04 00 00 00       	mov    edx,0x4
c001d25e:	83 c4 14             	add    esp,0x14
c001d261:	89 d0                	mov    eax,edx
c001d263:	5b                   	pop    ebx
c001d264:	5e                   	pop    esi
c001d265:	c3                   	ret    

c001d266 <ISO9660::openDir(char const*, void**)>:
c001d266:	57                   	push   edi
c001d267:	56                   	push   esi
c001d268:	53                   	push   ebx
c001d269:	83 ec 10             	sub    esp,0x10
c001d26c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d270:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d274:	85 ff                	test   edi,edi
c001d276:	74 7b                	je     c001d2f3 <ISO9660::openDir(char const*, void**)+0x8d>
c001d278:	85 f6                	test   esi,esi
c001d27a:	74 77                	je     c001d2f3 <ISO9660::openDir(char const*, void**)+0x8d>
c001d27c:	83 ec 0c             	sub    esp,0xc
c001d27f:	6a 1c                	push   0x1c
c001d281:	e8 d5 ca fe ff       	call   c0009d5b <malloc>
c001d286:	89 07                	mov    DWORD PTR [edi],eax
c001d288:	89 c3                	mov    ebx,eax
c001d28a:	58                   	pop    eax
c001d28b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d28f:	50                   	push   eax
c001d290:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001d293:	50                   	push   eax
c001d294:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d298:	50                   	push   eax
c001d299:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d29d:	50                   	push   eax
c001d29e:	56                   	push   esi
c001d29f:	e8 ce fd ff ff       	call   c001d072 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d2a4:	83 c4 20             	add    esp,0x20
c001d2a7:	84 c0                	test   al,al
c001d2a9:	74 07                	je     c001d2b2 <ISO9660::openDir(char const*, void**)+0x4c>
c001d2ab:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d2b0:	75 0b                	jne    c001d2bd <ISO9660::openDir(char const*, void**)+0x57>
c001d2b2:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001d2b6:	b8 01 00 00 00       	mov    eax,0x1
c001d2bb:	eb 3b                	jmp    c001d2f8 <ISO9660::openDir(char const*, void**)+0x92>
c001d2bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2c1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001d2c5:	89 03                	mov    DWORD PTR [ebx],eax
c001d2c7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001d2ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d2d2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001d2d9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d2e0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d2e3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d2ea:	8a 06                	mov    al,BYTE PTR [esi]
c001d2ec:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001d2ef:	31 c0                	xor    eax,eax
c001d2f1:	eb 05                	jmp    c001d2f8 <ISO9660::openDir(char const*, void**)+0x92>
c001d2f3:	b8 04 00 00 00       	mov    eax,0x4
c001d2f8:	83 c4 10             	add    esp,0x10
c001d2fb:	5b                   	pop    ebx
c001d2fc:	5e                   	pop    esi
c001d2fd:	5f                   	pop    edi
c001d2fe:	c3                   	ret    
c001d2ff:	90                   	nop

c001d300 <ISO9660::ISO9660()>:
c001d300:	83 ec 0c             	sub    esp,0xc
c001d303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d307:	83 ec 0c             	sub    esp,0xc
c001d30a:	50                   	push   eax
c001d30b:	e8 4e 00 ff ff       	call   c000d35e <Filesystem::Filesystem()>
c001d310:	83 c4 10             	add    esp,0x10
c001d313:	ba b0 6e 02 c0       	mov    edx,0xc0026eb0
c001d318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d31c:	89 10                	mov    DWORD PTR [eax],edx
c001d31e:	90                   	nop
c001d31f:	83 c4 0c             	add    esp,0xc
c001d322:	c3                   	ret    
c001d323:	90                   	nop

c001d324 <SoundCard::beginPlayback()>:
c001d324:	c7 44 24 04 10 6f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026f10
c001d32c:	e9 f8 7d ff ff       	jmp    c0015129 <Krnl::panic(char const*)>
c001d331:	90                   	nop

c001d332 <SoundCard::stopPlayback()>:
c001d332:	c7 44 24 04 44 6f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026f44
c001d33a:	e9 ea 7d ff ff       	jmp    c0015129 <Krnl::panic(char const*)>
c001d33f:	90                   	nop

c001d340 <SoundCard::SoundCard(char const*)>:
c001d340:	83 ec 1c             	sub    esp,0x1c
c001d343:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d347:	83 ec 08             	sub    esp,0x8
c001d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d34e:	50                   	push   eax
c001d34f:	e8 6a 14 ff ff       	call   c000e7be <Device::Device(char const*)>
c001d354:	83 c4 10             	add    esp,0x10
c001d357:	ba dc 6f 02 c0       	mov    edx,0xc0026fdc
c001d35c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d360:	89 10                	mov    DWORD PTR [eax],edx
c001d362:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d366:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d36d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d371:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001d37b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d37f:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001d389:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d38d:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001d397:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d39b:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001d3a5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d3ad:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001d3b2:	7f 19                	jg     c001d3cd <SoundCard::SoundCard(char const*)+0x8d>
c001d3b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d3bc:	83 c2 54             	add    edx,0x54
c001d3bf:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001d3c7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d3cb:	eb e0                	jmp    c001d3ad <SoundCard::SoundCard(char const*)+0x6d>
c001d3cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3d1:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d3d8:	90                   	nop
c001d3d9:	83 c4 1c             	add    esp,0x1c
c001d3dc:	c3                   	ret    
c001d3dd:	90                   	nop

c001d3de <SoundCard::~SoundCard()>:
c001d3de:	83 ec 0c             	sub    esp,0xc
c001d3e1:	ba dc 6f 02 c0       	mov    edx,0xc0026fdc
c001d3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3ea:	89 10                	mov    DWORD PTR [eax],edx
c001d3ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3f0:	83 ec 0c             	sub    esp,0xc
c001d3f3:	50                   	push   eax
c001d3f4:	e8 8f 10 ff ff       	call   c000e488 <Device::~Device()>
c001d3f9:	83 c4 10             	add    esp,0x10
c001d3fc:	90                   	nop
c001d3fd:	83 c4 0c             	add    esp,0xc
c001d400:	c3                   	ret    
c001d401:	90                   	nop

c001d402 <SoundCard::~SoundCard()>:
c001d402:	83 ec 0c             	sub    esp,0xc
c001d405:	83 ec 0c             	sub    esp,0xc
c001d408:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d40c:	e8 cd ff ff ff       	call   c001d3de <SoundCard::~SoundCard()>
c001d411:	83 c4 10             	add    esp,0x10
c001d414:	83 ec 08             	sub    esp,0x8
c001d417:	68 e8 01 00 00       	push   0x1e8
c001d41c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d420:	e8 41 fb fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c001d425:	83 c4 10             	add    esp,0x10
c001d428:	83 c4 0c             	add    esp,0xc
c001d42b:	c3                   	ret    

c001d42c <SoundCard::configureRates(int, int, int)>:
c001d42c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d430:	31 c0                	xor    eax,eax
c001d432:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001d439:	75 20                	jne    c001d45b <SoundCard::configureRates(int, int, int)+0x2f>
c001d43b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d43f:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001d445:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d449:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001d44f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d453:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001d459:	b0 01                	mov    al,0x1
c001d45b:	c3                   	ret    

c001d45c <SoundCard::getSamples16(int, short*)>:
c001d45c:	55                   	push   ebp
c001d45d:	57                   	push   edi
c001d45e:	31 ff                	xor    edi,edi
c001d460:	56                   	push   esi
c001d461:	53                   	push   ebx
c001d462:	31 db                	xor    ebx,ebx
c001d464:	83 ec 18             	sub    esp,0x18
c001d467:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d46b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d46f:	68 77 6f 02 c0       	push   0xc0026f77
c001d474:	e8 ce fb fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001d479:	83 c4 0c             	add    esp,0xc
c001d47c:	8d 04 36             	lea    eax,[esi+esi*1]
c001d47f:	50                   	push   eax
c001d480:	6a 00                	push   0x0
c001d482:	55                   	push   ebp
c001d483:	e8 fc 31 fe ff       	call   c0000684 <memset>
c001d488:	83 c4 10             	add    esp,0x10
c001d48b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d48f:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001d496:	85 c0                	test   eax,eax
c001d498:	74 1b                	je     c001d4b5 <SoundCard::getSamples16(int, short*)+0x59>
c001d49a:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d49e:	75 15                	jne    c001d4b5 <SoundCard::getSamples16(int, short*)+0x59>
c001d4a0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d4a4:	55                   	push   ebp
c001d4a5:	56                   	push   esi
c001d4a6:	50                   	push   eax
c001d4a7:	e8 58 03 00 00       	call   c001d804 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d4ac:	83 c4 10             	add    esp,0x10
c001d4af:	39 c7                	cmp    edi,eax
c001d4b1:	7d 02                	jge    c001d4b5 <SoundCard::getSamples16(int, short*)+0x59>
c001d4b3:	89 c7                	mov    edi,eax
c001d4b5:	43                   	inc    ebx
c001d4b6:	83 fb 20             	cmp    ebx,0x20
c001d4b9:	75 d0                	jne    c001d48b <SoundCard::getSamples16(int, short*)+0x2f>
c001d4bb:	83 c4 0c             	add    esp,0xc
c001d4be:	89 f8                	mov    eax,edi
c001d4c0:	5b                   	pop    ebx
c001d4c1:	5e                   	pop    esi
c001d4c2:	5f                   	pop    edi
c001d4c3:	5d                   	pop    ebp
c001d4c4:	c3                   	ret    
c001d4c5:	90                   	nop

c001d4c6 <SoundCard::getSamples32(int, int*)>:
c001d4c6:	55                   	push   ebp
c001d4c7:	57                   	push   edi
c001d4c8:	31 ff                	xor    edi,edi
c001d4ca:	56                   	push   esi
c001d4cb:	31 f6                	xor    esi,esi
c001d4cd:	53                   	push   ebx
c001d4ce:	83 ec 10             	sub    esp,0x10
c001d4d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d4d5:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d4d9:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d4dd:	c1 e0 02             	shl    eax,0x2
c001d4e0:	50                   	push   eax
c001d4e1:	6a 00                	push   0x0
c001d4e3:	55                   	push   ebp
c001d4e4:	e8 9b 31 fe ff       	call   c0000684 <memset>
c001d4e9:	83 c4 10             	add    esp,0x10
c001d4ec:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001d4f3:	85 c0                	test   eax,eax
c001d4f5:	74 1b                	je     c001d512 <SoundCard::getSamples32(int, int*)+0x4c>
c001d4f7:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d4fb:	75 15                	jne    c001d512 <SoundCard::getSamples32(int, int*)+0x4c>
c001d4fd:	53                   	push   ebx
c001d4fe:	55                   	push   ebp
c001d4ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d503:	50                   	push   eax
c001d504:	e8 f7 03 00 00       	call   c001d900 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001d509:	83 c4 10             	add    esp,0x10
c001d50c:	39 c6                	cmp    esi,eax
c001d50e:	7d 02                	jge    c001d512 <SoundCard::getSamples32(int, int*)+0x4c>
c001d510:	89 c6                	mov    esi,eax
c001d512:	47                   	inc    edi
c001d513:	83 ff 20             	cmp    edi,0x20
c001d516:	75 d4                	jne    c001d4ec <SoundCard::getSamples32(int, int*)+0x26>
c001d518:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001d51e:	85 f6                	test   esi,esi
c001d520:	75 0f                	jne    c001d531 <SoundCard::getSamples32(int, int*)+0x6b>
c001d522:	84 c0                	test   al,al
c001d524:	74 1b                	je     c001d541 <SoundCard::getSamples32(int, int*)+0x7b>
c001d526:	83 ec 0c             	sub    esp,0xc
c001d529:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d52b:	53                   	push   ebx
c001d52c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001d52f:	eb 0d                	jmp    c001d53e <SoundCard::getSamples32(int, int*)+0x78>
c001d531:	84 c0                	test   al,al
c001d533:	75 0c                	jne    c001d541 <SoundCard::getSamples32(int, int*)+0x7b>
c001d535:	83 ec 0c             	sub    esp,0xc
c001d538:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d53a:	53                   	push   ebx
c001d53b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d53e:	83 c4 10             	add    esp,0x10
c001d541:	83 c4 0c             	add    esp,0xc
c001d544:	89 f0                	mov    eax,esi
c001d546:	5b                   	pop    ebx
c001d547:	5e                   	pop    esi
c001d548:	5f                   	pop    edi
c001d549:	5d                   	pop    ebp
c001d54a:	c3                   	ret    
c001d54b:	90                   	nop

c001d54c <SoundCard::addChannel(SoundPort*)>:
c001d54c:	56                   	push   esi
c001d54d:	53                   	push   ebx
c001d54e:	53                   	push   ebx
c001d54f:	31 db                	xor    ebx,ebx
c001d551:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d555:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001d55d:	74 27                	je     c001d586 <SoundCard::addChannel(SoundPort*)+0x3a>
c001d55f:	43                   	inc    ebx
c001d560:	83 fb 20             	cmp    ebx,0x20
c001d563:	75 f0                	jne    c001d555 <SoundCard::addChannel(SoundPort*)+0x9>
c001d565:	83 ec 0c             	sub    esp,0xc
c001d568:	83 cb ff             	or     ebx,0xffffffff
c001d56b:	68 9d 6f 02 c0       	push   0xc0026f9d
c001d570:	e8 d2 fa fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001d575:	c7 04 24 96 6f 02 c0 	mov    DWORD PTR [esp],0xc0026f96
c001d57c:	e8 a8 7b ff ff       	call   c0015129 <Krnl::panic(char const*)>
c001d581:	83 c4 10             	add    esp,0x10
c001d584:	eb 1b                	jmp    c001d5a1 <SoundCard::addChannel(SoundPort*)+0x55>
c001d586:	51                   	push   ecx
c001d587:	51                   	push   ecx
c001d588:	53                   	push   ebx
c001d589:	68 b5 6f 02 c0       	push   0xc0026fb5
c001d58e:	e8 b4 fa fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001d593:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d597:	83 c4 10             	add    esp,0x10
c001d59a:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001d5a1:	89 d8                	mov    eax,ebx
c001d5a3:	5a                   	pop    edx
c001d5a4:	5b                   	pop    ebx
c001d5a5:	5e                   	pop    esi
c001d5a6:	c3                   	ret    
c001d5a7:	90                   	nop

c001d5a8 <SoundCard::removeChannel(int)>:
c001d5a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d5b0:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001d5bb:	c3                   	ret    

c001d5bc <SoundPort::SoundPort(int, int, int, int)>:
c001d5bc:	83 ec 0c             	sub    esp,0xc
c001d5bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5c3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d5ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5ce:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d5d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d5da:	89 10                	mov    DWORD PTR [eax],edx
c001d5dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d5e4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d5e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d5ef:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d5f2:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001d5f7:	75 13                	jne    c001d60c <SoundPort::SoundPort(int, int, int, int)+0x50>
c001d5f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5fd:	8b 00                	mov    eax,DWORD PTR [eax]
c001d5ff:	05 a0 0f 00 00       	add    eax,0xfa0
c001d604:	01 c0                	add    eax,eax
c001d606:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d60a:	66 90                	xchg   ax,ax
c001d60c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d610:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d614:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001d617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d61b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d626:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d629:	c1 e0 02             	shl    eax,0x2
c001d62c:	83 ec 0c             	sub    esp,0xc
c001d62f:	50                   	push   eax
c001d630:	e8 26 c7 fe ff       	call   c0009d5b <malloc>
c001d635:	83 c4 10             	add    esp,0x10
c001d638:	89 c2                	mov    edx,eax
c001d63a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d63e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d641:	90                   	nop
c001d642:	83 c4 0c             	add    esp,0xc
c001d645:	c3                   	ret    
c001d646:	66 90                	xchg   ax,ax

c001d648 <SoundPort::~SoundPort()>:
c001d648:	83 ec 0c             	sub    esp,0xc
c001d64b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d64f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d652:	85 c0                	test   eax,eax
c001d654:	74 1e                	je     c001d674 <SoundPort::~SoundPort()+0x2c>
c001d656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d65a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d65d:	83 ec 0c             	sub    esp,0xc
c001d660:	50                   	push   eax
c001d661:	e8 05 c7 fe ff       	call   c0009d6b <free>
c001d666:	83 c4 10             	add    esp,0x10
c001d669:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d66d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d674:	90                   	nop
c001d675:	83 c4 0c             	add    esp,0xc
c001d678:	c3                   	ret    
c001d679:	90                   	nop
c001d67a:	66 90                	xchg   ax,ax

c001d67c <SoundPort::unpause()>:
c001d67c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d680:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d684:	c3                   	ret    
c001d685:	90                   	nop
c001d686:	66 90                	xchg   ax,ax

c001d688 <SoundPort::pause()>:
c001d688:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d68c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d690:	c3                   	ret    
c001d691:	90                   	nop
c001d692:	66 90                	xchg   ax,ax

c001d694 <SoundPort::getBufferUsed()>:
c001d694:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d698:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d69b:	c3                   	ret    

c001d69c <SoundPort::getBufferSize()>:
c001d69c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d6a0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d6a3:	c3                   	ret    

c001d6a4 <SoundPort::buffer16(short*, int)>:
c001d6a4:	55                   	push   ebp
c001d6a5:	57                   	push   edi
c001d6a6:	56                   	push   esi
c001d6a7:	53                   	push   ebx
c001d6a8:	83 ec 1c             	sub    esp,0x1c
c001d6ab:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d6af:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d6b3:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d6b6:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d6b9:	0f 84 85 00 00 00    	je     c001d744 <SoundPort::buffer16(short*, int)+0xa0>
c001d6bf:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d6c3:	85 c9                	test   ecx,ecx
c001d6c5:	7e 7d                	jle    c001d744 <SoundPort::buffer16(short*, int)+0xa0>
c001d6c7:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001d6cb:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d6ce:	c1 e1 0f             	shl    ecx,0xf
c001d6d1:	8d 70 01             	lea    esi,[eax+0x1]
c001d6d4:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d6d7:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d6da:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d6dd:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d6e0:	74 6e                	je     c001d750 <SoundPort::buffer16(short*, int)+0xac>
c001d6e2:	31 f6                	xor    esi,esi
c001d6e4:	eb 22                	jmp    c001d708 <SoundPort::buffer16(short*, int)+0x64>
c001d6e6:	66 90                	xchg   ax,ax
c001d6e8:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001d6ed:	8d 79 01             	lea    edi,[ecx+0x1]
c001d6f0:	c1 e3 0f             	shl    ebx,0xf
c001d6f3:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001d6f6:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001d6f9:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001d6fc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d6ff:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d702:	74 1c                	je     c001d720 <SoundPort::buffer16(short*, int)+0x7c>
c001d704:	89 c6                	mov    esi,eax
c001d706:	66 90                	xchg   ax,ax
c001d708:	8d 46 01             	lea    eax,[esi+0x1]
c001d70b:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001d70f:	75 d7                	jne    c001d6e8 <SoundPort::buffer16(short*, int)+0x44>
c001d711:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d715:	83 c4 1c             	add    esp,0x1c
c001d718:	5b                   	pop    ebx
c001d719:	5e                   	pop    esi
c001d71a:	5f                   	pop    edi
c001d71b:	5d                   	pop    ebp
c001d71c:	c3                   	ret    
c001d71d:	8d 76 00             	lea    esi,[esi+0x0]
c001d720:	8d 46 02             	lea    eax,[esi+0x2]
c001d723:	90                   	nop
c001d724:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d728:	83 ec 0c             	sub    esp,0xc
c001d72b:	68 08 70 02 c0       	push   0xc0027008
c001d730:	e8 12 f9 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001d735:	83 c4 10             	add    esp,0x10
c001d738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d73c:	83 c4 1c             	add    esp,0x1c
c001d73f:	5b                   	pop    ebx
c001d740:	5e                   	pop    esi
c001d741:	5f                   	pop    edi
c001d742:	5d                   	pop    ebp
c001d743:	c3                   	ret    
c001d744:	83 c4 1c             	add    esp,0x1c
c001d747:	31 c0                	xor    eax,eax
c001d749:	5b                   	pop    ebx
c001d74a:	5e                   	pop    esi
c001d74b:	5f                   	pop    edi
c001d74c:	5d                   	pop    ebp
c001d74d:	c3                   	ret    
c001d74e:	66 90                	xchg   ax,ax
c001d750:	b8 01 00 00 00       	mov    eax,0x1
c001d755:	eb cd                	jmp    c001d724 <SoundPort::buffer16(short*, int)+0x80>
c001d757:	90                   	nop

c001d758 <SoundPort::buffer32(int*, int)>:
c001d758:	55                   	push   ebp
c001d759:	57                   	push   edi
c001d75a:	56                   	push   esi
c001d75b:	53                   	push   ebx
c001d75c:	83 ec 1c             	sub    esp,0x1c
c001d75f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d763:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d767:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d76a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d76e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d772:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d775:	74 79                	je     c001d7f0 <SoundPort::buffer32(int*, int)+0x98>
c001d777:	85 c0                	test   eax,eax
c001d779:	7e 75                	jle    c001d7f0 <SoundPort::buffer32(int*, int)+0x98>
c001d77b:	8d 71 01             	lea    esi,[ecx+0x1]
c001d77e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d781:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d784:	8b 37                	mov    esi,DWORD PTR [edi]
c001d786:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d789:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d78c:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d78f:	74 6b                	je     c001d7fc <SoundPort::buffer32(int*, int)+0xa4>
c001d791:	31 f6                	xor    esi,esi
c001d793:	eb 1f                	jmp    c001d7b4 <SoundPort::buffer32(int*, int)+0x5c>
c001d795:	8d 76 00             	lea    esi,[esi+0x0]
c001d798:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d79b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d79e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d7a1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d7a4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d7a8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d7ab:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d7ae:	74 1c                	je     c001d7cc <SoundPort::buffer32(int*, int)+0x74>
c001d7b0:	89 de                	mov    esi,ebx
c001d7b2:	66 90                	xchg   ax,ax
c001d7b4:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d7b7:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001d7bb:	75 db                	jne    c001d798 <SoundPort::buffer32(int*, int)+0x40>
c001d7bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d7c1:	83 c4 1c             	add    esp,0x1c
c001d7c4:	5b                   	pop    ebx
c001d7c5:	5e                   	pop    esi
c001d7c6:	5f                   	pop    edi
c001d7c7:	5d                   	pop    ebp
c001d7c8:	c3                   	ret    
c001d7c9:	8d 76 00             	lea    esi,[esi+0x0]
c001d7cc:	8d 46 02             	lea    eax,[esi+0x2]
c001d7cf:	90                   	nop
c001d7d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d7d4:	83 ec 0c             	sub    esp,0xc
c001d7d7:	68 23 70 02 c0       	push   0xc0027023
c001d7dc:	e8 66 f8 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001d7e1:	83 c4 10             	add    esp,0x10
c001d7e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d7e8:	83 c4 1c             	add    esp,0x1c
c001d7eb:	5b                   	pop    ebx
c001d7ec:	5e                   	pop    esi
c001d7ed:	5f                   	pop    edi
c001d7ee:	5d                   	pop    ebp
c001d7ef:	c3                   	ret    
c001d7f0:	83 c4 1c             	add    esp,0x1c
c001d7f3:	31 c0                	xor    eax,eax
c001d7f5:	5b                   	pop    ebx
c001d7f6:	5e                   	pop    esi
c001d7f7:	5f                   	pop    edi
c001d7f8:	5d                   	pop    ebp
c001d7f9:	c3                   	ret    
c001d7fa:	66 90                	xchg   ax,ax
c001d7fc:	b8 01 00 00 00       	mov    eax,0x1
c001d801:	eb cd                	jmp    c001d7d0 <SoundPort::buffer32(int*, int)+0x78>
c001d803:	90                   	nop

c001d804 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d804:	57                   	push   edi
c001d805:	56                   	push   esi
c001d806:	53                   	push   ebx
c001d807:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d80b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001d80f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001d815:	39 03                	cmp    DWORD PTR [ebx],eax
c001d817:	74 13                	je     c001d82c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001d819:	83 ec 0c             	sub    esp,0xc
c001d81c:	68 78 70 02 c0       	push   0xc0027078
c001d821:	e8 03 79 ff ff       	call   c0015129 <Krnl::panic(char const*)>
c001d826:	83 c4 10             	add    esp,0x10
c001d829:	8d 76 00             	lea    esi,[esi+0x0]
c001d82c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001d832:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d835:	74 11                	je     c001d848 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001d837:	83 ec 0c             	sub    esp,0xc
c001d83a:	68 3e 70 02 c0       	push   0xc002703e
c001d83f:	e8 e5 78 ff ff       	call   c0015129 <Krnl::panic(char const*)>
c001d844:	83 c4 10             	add    esp,0x10
c001d847:	90                   	nop
c001d848:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001d84e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d851:	74 11                	je     c001d864 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001d853:	83 ec 0c             	sub    esp,0xc
c001d856:	68 3e 70 02 c0       	push   0xc002703e
c001d85b:	e8 c9 78 ff ff       	call   c0015129 <Krnl::panic(char const*)>
c001d860:	83 c4 10             	add    esp,0x10
c001d863:	90                   	nop
c001d864:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d867:	89 c6                	mov    esi,eax
c001d869:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001d86d:	7e 05                	jle    c001d874 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001d86f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d873:	90                   	nop
c001d874:	85 f6                	test   esi,esi
c001d876:	7e 30                	jle    c001d8a8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001d878:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d87c:	8d 3c 36             	lea    edi,[esi+esi*1]
c001d87f:	31 c9                	xor    ecx,ecx
c001d881:	01 d7                	add    edi,edx
c001d883:	90                   	nop
c001d884:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d887:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001d88a:	85 c0                	test   eax,eax
c001d88c:	79 06                	jns    c001d894 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001d88e:	05 ff 7f 00 00       	add    eax,0x7fff
c001d893:	90                   	nop
c001d894:	c1 f8 0f             	sar    eax,0xf
c001d897:	83 c1 04             	add    ecx,0x4
c001d89a:	66 01 02             	add    WORD PTR [edx],ax
c001d89d:	83 c2 02             	add    edx,0x2
c001d8a0:	39 d7                	cmp    edi,edx
c001d8a2:	75 e0                	jne    c001d884 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001d8a4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d8a7:	90                   	nop
c001d8a8:	56                   	push   esi
c001d8a9:	89 c2                	mov    edx,eax
c001d8ab:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001d8b2:	29 f2                	sub    edx,esi
c001d8b4:	52                   	push   edx
c001d8b5:	50                   	push   eax
c001d8b6:	68 98 70 02 c0       	push   0xc0027098
c001d8bb:	e8 87 f7 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001d8c0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d8c3:	50                   	push   eax
c001d8c4:	01 f8                	add    eax,edi
c001d8c6:	50                   	push   eax
c001d8c7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d8ca:	29 f0                	sub    eax,esi
c001d8cc:	c1 e0 02             	shl    eax,0x2
c001d8cf:	50                   	push   eax
c001d8d0:	68 c8 70 02 c0       	push   0xc00270c8
c001d8d5:	e8 6d f7 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001d8da:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d8dd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d8e0:	83 c4 1c             	add    esp,0x1c
c001d8e3:	01 d7                	add    edi,edx
c001d8e5:	29 f0                	sub    eax,esi
c001d8e7:	c1 e0 02             	shl    eax,0x2
c001d8ea:	50                   	push   eax
c001d8eb:	57                   	push   edi
c001d8ec:	52                   	push   edx
c001d8ed:	e8 ca 2c fe ff       	call   c00005bc <memmove>
c001d8f2:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001d8f5:	83 c4 10             	add    esp,0x10
c001d8f8:	89 f0                	mov    eax,esi
c001d8fa:	5b                   	pop    ebx
c001d8fb:	5e                   	pop    esi
c001d8fc:	5f                   	pop    edi
c001d8fd:	c3                   	ret    
c001d8fe:	66 90                	xchg   ax,ax

c001d900 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001d900:	57                   	push   edi
c001d901:	56                   	push   esi
c001d902:	53                   	push   ebx
c001d903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d907:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d90b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d90f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001d915:	39 06                	cmp    DWORD PTR [esi],eax
c001d917:	74 13                	je     c001d92c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001d919:	83 ec 0c             	sub    esp,0xc
c001d91c:	68 ec 70 02 c0       	push   0xc00270ec
c001d921:	e8 03 78 ff ff       	call   c0015129 <Krnl::panic(char const*)>
c001d926:	83 c4 10             	add    esp,0x10
c001d929:	8d 76 00             	lea    esi,[esi+0x0]
c001d92c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001d932:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001d935:	74 11                	je     c001d948 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001d937:	83 ec 0c             	sub    esp,0xc
c001d93a:	68 5a 70 02 c0       	push   0xc002705a
c001d93f:	e8 e5 77 ff ff       	call   c0015129 <Krnl::panic(char const*)>
c001d944:	83 c4 10             	add    esp,0x10
c001d947:	90                   	nop
c001d948:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001d94e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001d951:	74 11                	je     c001d964 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001d953:	83 ec 0c             	sub    esp,0xc
c001d956:	68 5a 70 02 c0       	push   0xc002705a
c001d95b:	e8 c9 77 ff ff       	call   c0015129 <Krnl::panic(char const*)>
c001d960:	83 c4 10             	add    esp,0x10
c001d963:	90                   	nop
c001d964:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001d967:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001d96b:	7e 07                	jle    c001d974 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001d96d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d971:	8d 76 00             	lea    esi,[esi+0x0]
c001d974:	85 ff                	test   edi,edi
c001d976:	7e 1c                	jle    c001d994 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001d978:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001d97f:	31 c0                	xor    eax,eax
c001d981:	8d 76 00             	lea    esi,[esi+0x0]
c001d984:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d987:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001d98a:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001d98d:	83 c0 04             	add    eax,0x4
c001d990:	39 c1                	cmp    ecx,eax
c001d992:	75 f0                	jne    c001d984 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001d994:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d997:	50                   	push   eax
c001d998:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d99b:	29 f8                	sub    eax,edi
c001d99d:	c1 e0 02             	shl    eax,0x2
c001d9a0:	50                   	push   eax
c001d9a1:	8d 04 ba             	lea    eax,[edx+edi*4]
c001d9a4:	50                   	push   eax
c001d9a5:	52                   	push   edx
c001d9a6:	e8 11 2c fe ff       	call   c00005bc <memmove>
c001d9ab:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001d9ae:	83 c4 10             	add    esp,0x10
c001d9b1:	89 f8                	mov    eax,edi
c001d9b3:	5b                   	pop    ebx
c001d9b4:	5e                   	pop    esi
c001d9b5:	5f                   	pop    edi
c001d9b6:	c3                   	ret    
c001d9b7:	90                   	nop

c001d9b8 <PCI::open(int, int, void*)>:
c001d9b8:	83 ec 18             	sub    esp,0x18
c001d9bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d9bf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d9c3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d9c9:	8b 10                	mov    edx,DWORD PTR [eax]
c001d9cb:	50                   	push   eax
c001d9cc:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001d9cf:	31 c0                	xor    eax,eax
c001d9d1:	83 c4 1c             	add    esp,0x1c
c001d9d4:	c3                   	ret    
c001d9d5:	90                   	nop

c001d9d6 <PCI::close(int, int, void*)>:
c001d9d6:	31 c0                	xor    eax,eax
c001d9d8:	c3                   	ret    
c001d9d9:	90                   	nop

c001d9da <PCI::PCI()>:
c001d9da:	83 ec 0c             	sub    esp,0xc
c001d9dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9e1:	83 ec 08             	sub    esp,0x8
c001d9e4:	68 0b 71 02 c0       	push   0xc002710b
c001d9e9:	50                   	push   eax
c001d9ea:	e8 31 04 ff ff       	call   c000de20 <Bus::Bus(char const*)>
c001d9ef:	83 c4 10             	add    esp,0x10
c001d9f2:	ba e0 72 02 c0       	mov    edx,0xc00272e0
c001d9f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9fb:	89 10                	mov    DWORD PTR [eax],edx
c001d9fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da01:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001da0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da0f:	a3 20 a9 02 c0       	mov    ds:0xc002a920,eax
c001da14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da18:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001da1e:	0f b6 d0             	movzx  edx,al
c001da21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da25:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001da2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da30:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001da36:	0f b6 d0             	movzx  edx,al
c001da39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da3d:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001da42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da46:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001da4c:	8d 50 01             	lea    edx,[eax+0x1]
c001da4f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001da53:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001da59:	0f b6 d0             	movzx  edx,al
c001da5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da60:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001da64:	83 c9 c0             	or     ecx,0xffffffc0
c001da67:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001da6b:	90                   	nop
c001da6c:	83 c4 0c             	add    esp,0xc
c001da6f:	c3                   	ret    

c001da70 <PCI::readBAR8(unsigned int, int)>:
c001da70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001da74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da78:	f6 c2 01             	test   dl,0x1
c001da7b:	74 07                	je     c001da84 <PCI::readBAR8(unsigned int, int)+0x14>
c001da7d:	83 e2 fc             	and    edx,0xfffffffc
c001da80:	01 c2                	add    edx,eax
c001da82:	ec                   	in     al,dx
c001da83:	c3                   	ret    
c001da84:	83 e2 f0             	and    edx,0xfffffff0
c001da87:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001da8a:	c3                   	ret    
c001da8b:	90                   	nop

c001da8c <PCI::readBAR16(unsigned int, int)>:
c001da8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001da90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da94:	f6 c2 01             	test   dl,0x1
c001da97:	74 08                	je     c001daa1 <PCI::readBAR16(unsigned int, int)+0x15>
c001da99:	83 e2 fc             	and    edx,0xfffffffc
c001da9c:	01 c2                	add    edx,eax
c001da9e:	66 ed                	in     ax,dx
c001daa0:	c3                   	ret    
c001daa1:	83 e2 f0             	and    edx,0xfffffff0
c001daa4:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001daa8:	c3                   	ret    
c001daa9:	90                   	nop

c001daaa <PCI::readBAR32(unsigned int, int)>:
c001daaa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001daae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dab2:	f6 c2 01             	test   dl,0x1
c001dab5:	74 07                	je     c001dabe <PCI::readBAR32(unsigned int, int)+0x14>
c001dab7:	83 e2 fc             	and    edx,0xfffffffc
c001daba:	01 c2                	add    edx,eax
c001dabc:	ed                   	in     eax,dx
c001dabd:	c3                   	ret    
c001dabe:	83 e2 f0             	and    edx,0xfffffff0
c001dac1:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001dac4:	c3                   	ret    
c001dac5:	90                   	nop

c001dac6 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001dac6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001daca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dace:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dad2:	f6 c2 01             	test   dl,0x1
c001dad5:	74 07                	je     c001dade <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001dad7:	83 e2 fc             	and    edx,0xfffffffc
c001dada:	01 ca                	add    edx,ecx
c001dadc:	ee                   	out    dx,al
c001dadd:	c3                   	ret    
c001dade:	83 e2 f0             	and    edx,0xfffffff0
c001dae1:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001dae4:	c3                   	ret    
c001dae5:	90                   	nop

c001dae6 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001dae6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001daea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001daee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001daf2:	f6 c2 01             	test   dl,0x1
c001daf5:	74 08                	je     c001daff <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001daf7:	83 e2 fc             	and    edx,0xfffffffc
c001dafa:	01 ca                	add    edx,ecx
c001dafc:	66 ef                	out    dx,ax
c001dafe:	c3                   	ret    
c001daff:	83 e2 f0             	and    edx,0xfffffff0
c001db02:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001db06:	c3                   	ret    
c001db07:	90                   	nop

c001db08 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001db08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001db0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001db10:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001db14:	f6 c2 01             	test   dl,0x1
c001db17:	74 07                	je     c001db20 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001db19:	83 e2 fc             	and    edx,0xfffffffc
c001db1c:	01 ca                	add    edx,ecx
c001db1e:	ef                   	out    dx,eax
c001db1f:	c3                   	ret    
c001db20:	83 e2 f0             	and    edx,0xfffffff0
c001db23:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001db26:	c3                   	ret    
c001db27:	90                   	nop

c001db28 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001db28:	55                   	push   ebp
c001db29:	57                   	push   edi
c001db2a:	56                   	push   esi
c001db2b:	53                   	push   ebx
c001db2c:	83 ec 0c             	sub    esp,0xc
c001db2f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001db33:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001db37:	89 f0                	mov    eax,esi
c001db39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001db3d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001db41:	3c 07                	cmp    al,0x7
c001db43:	76 10                	jbe    c001db55 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001db45:	83 ec 0c             	sub    esp,0xc
c001db48:	68 13 71 02 c0       	push   0xc0027113
c001db4d:	e8 d7 75 ff ff       	call   c0015129 <Krnl::panic(char const*)>
c001db52:	83 c4 10             	add    esp,0x10
c001db55:	80 fb 0f             	cmp    bl,0xf
c001db58:	76 10                	jbe    c001db6a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001db5a:	83 ec 0c             	sub    esp,0xc
c001db5d:	68 43 71 02 c0       	push   0xc0027143
c001db62:	e8 c2 75 ff ff       	call   c0015129 <Krnl::panic(char const*)>
c001db67:	83 c4 10             	add    esp,0x10
c001db6a:	8d 04 36             	lea    eax,[esi+esi*1]
c001db6d:	ba f8 0c 00 00       	mov    edx,0xcf8
c001db72:	83 c8 f0             	or     eax,0xfffffff0
c001db75:	ee                   	out    dx,al
c001db76:	ba fa 0c 00 00       	mov    edx,0xcfa
c001db7b:	89 e8                	mov    eax,ebp
c001db7d:	ee                   	out    dx,al
c001db7e:	83 c4 0c             	add    esp,0xc
c001db81:	89 d8                	mov    eax,ebx
c001db83:	66 81 e7 fc 00       	and    di,0xfc
c001db88:	5b                   	pop    ebx
c001db89:	c1 e0 08             	shl    eax,0x8
c001db8c:	5e                   	pop    esi
c001db8d:	09 f8                	or     eax,edi
c001db8f:	5f                   	pop    edi
c001db90:	66 0d 00 c0          	or     ax,0xc000
c001db94:	5d                   	pop    ebp
c001db95:	c3                   	ret    

c001db96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001db96:	57                   	push   edi
c001db97:	56                   	push   esi
c001db98:	53                   	push   ebx
c001db99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001db9d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dba1:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001dba7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dbab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dbaf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001dbb3:	83 ff 01             	cmp    edi,0x1
c001dbb6:	75 3e                	jne    c001dbf6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001dbb8:	89 de                	mov    esi,ebx
c001dbba:	0f b6 c0             	movzx  eax,al
c001dbbd:	81 e6 fc 00 00 00    	and    esi,0xfc
c001dbc3:	c1 e0 10             	shl    eax,0x10
c001dbc6:	0f b6 c9             	movzx  ecx,cl
c001dbc9:	09 f0                	or     eax,esi
c001dbcb:	c1 e1 08             	shl    ecx,0x8
c001dbce:	0f b6 d2             	movzx  edx,dl
c001dbd1:	09 c8                	or     eax,ecx
c001dbd3:	c1 e2 0b             	shl    edx,0xb
c001dbd6:	09 d0                	or     eax,edx
c001dbd8:	ba f8 0c 00 00       	mov    edx,0xcf8
c001dbdd:	0d 00 00 00 80       	or     eax,0x80000000
c001dbe2:	ef                   	out    dx,eax
c001dbe3:	ba fc 0c 00 00       	mov    edx,0xcfc
c001dbe8:	ed                   	in     eax,dx
c001dbe9:	83 e3 02             	and    ebx,0x2
c001dbec:	0f b6 cb             	movzx  ecx,bl
c001dbef:	c1 e1 03             	shl    ecx,0x3
c001dbf2:	d3 e8                	shr    eax,cl
c001dbf4:	eb 43                	jmp    c001dc39 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001dbf6:	83 ff 02             	cmp    edi,0x2
c001dbf9:	75 2c                	jne    c001dc27 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001dbfb:	83 ec 0c             	sub    esp,0xc
c001dbfe:	0f b6 c9             	movzx  ecx,cl
c001dc01:	0f b6 d2             	movzx  edx,dl
c001dc04:	0f b6 fb             	movzx  edi,bl
c001dc07:	0f b6 c0             	movzx  eax,al
c001dc0a:	57                   	push   edi
c001dc0b:	51                   	push   ecx
c001dc0c:	52                   	push   edx
c001dc0d:	50                   	push   eax
c001dc0e:	56                   	push   esi
c001dc0f:	e8 14 ff ff ff       	call   c001db28 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dc14:	89 c2                	mov    edx,eax
c001dc16:	ed                   	in     eax,dx
c001dc17:	83 e3 02             	and    ebx,0x2
c001dc1a:	83 c4 20             	add    esp,0x20
c001dc1d:	0f b6 cb             	movzx  ecx,bl
c001dc20:	c1 e1 03             	shl    ecx,0x3
c001dc23:	d3 e8                	shr    eax,cl
c001dc25:	eb 12                	jmp    c001dc39 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001dc27:	83 ec 0c             	sub    esp,0xc
c001dc2a:	68 73 71 02 c0       	push   0xc0027173
c001dc2f:	e8 f5 74 ff ff       	call   c0015129 <Krnl::panic(char const*)>
c001dc34:	83 c4 10             	add    esp,0x10
c001dc37:	31 c0                	xor    eax,eax
c001dc39:	5b                   	pop    ebx
c001dc3a:	5e                   	pop    esi
c001dc3b:	5f                   	pop    edi
c001dc3c:	c3                   	ret    
c001dc3d:	90                   	nop

c001dc3e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001dc3e:	83 ec 18             	sub    esp,0x18
c001dc41:	6a 00                	push   0x0
c001dc43:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc48:	50                   	push   eax
c001dc49:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc4e:	50                   	push   eax
c001dc4f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc54:	50                   	push   eax
c001dc55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc59:	e8 38 ff ff ff       	call   c001db96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dc5e:	83 c4 2c             	add    esp,0x2c
c001dc61:	c3                   	ret    

c001dc62 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001dc62:	83 ec 18             	sub    esp,0x18
c001dc65:	6a 0e                	push   0xe
c001dc67:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc6c:	50                   	push   eax
c001dc6d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc72:	50                   	push   eax
c001dc73:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc78:	50                   	push   eax
c001dc79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc7d:	e8 14 ff ff ff       	call   c001db96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dc82:	83 c4 2c             	add    esp,0x2c
c001dc85:	0f b6 c0             	movzx  eax,al
c001dc88:	c3                   	ret    
c001dc89:	90                   	nop

c001dc8a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001dc8a:	55                   	push   ebp
c001dc8b:	57                   	push   edi
c001dc8c:	56                   	push   esi
c001dc8d:	53                   	push   ebx
c001dc8e:	83 ec 18             	sub    esp,0x18
c001dc91:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001dc96:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001dc9b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001dca0:	6a 0a                	push   0xa
c001dca2:	56                   	push   esi
c001dca3:	55                   	push   ebp
c001dca4:	57                   	push   edi
c001dca5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dca9:	e8 e8 fe ff ff       	call   c001db96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dcae:	83 c4 14             	add    esp,0x14
c001dcb1:	89 c3                	mov    ebx,eax
c001dcb3:	6a 0a                	push   0xa
c001dcb5:	0f b6 db             	movzx  ebx,bl
c001dcb8:	56                   	push   esi
c001dcb9:	55                   	push   ebp
c001dcba:	57                   	push   edi
c001dcbb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dcbf:	e8 d2 fe ff ff       	call   c001db96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dcc4:	83 c4 2c             	add    esp,0x2c
c001dcc7:	25 00 ff 00 00       	and    eax,0xff00
c001dccc:	09 d8                	or     eax,ebx
c001dcce:	5b                   	pop    ebx
c001dccf:	5e                   	pop    esi
c001dcd0:	5f                   	pop    edi
c001dcd1:	5d                   	pop    ebp
c001dcd2:	c3                   	ret    
c001dcd3:	90                   	nop

c001dcd4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001dcd4:	83 ec 18             	sub    esp,0x18
c001dcd7:	6a 08                	push   0x8
c001dcd9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dcde:	50                   	push   eax
c001dcdf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dce4:	50                   	push   eax
c001dce5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dcea:	50                   	push   eax
c001dceb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcef:	e8 a2 fe ff ff       	call   c001db96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dcf4:	83 c4 2c             	add    esp,0x2c
c001dcf7:	0f b6 c4             	movzx  eax,ah
c001dcfa:	c3                   	ret    
c001dcfb:	90                   	nop

c001dcfc <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001dcfc:	83 ec 18             	sub    esp,0x18
c001dcff:	6a 08                	push   0x8
c001dd01:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd06:	50                   	push   eax
c001dd07:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd0c:	50                   	push   eax
c001dd0d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd12:	50                   	push   eax
c001dd13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dd17:	e8 7a fe ff ff       	call   c001db96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd1c:	83 c4 2c             	add    esp,0x2c
c001dd1f:	c3                   	ret    

c001dd20 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001dd20:	83 ec 18             	sub    esp,0x18
c001dd23:	6a 3c                	push   0x3c
c001dd25:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd2a:	50                   	push   eax
c001dd2b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd30:	50                   	push   eax
c001dd31:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd36:	50                   	push   eax
c001dd37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dd3b:	e8 56 fe ff ff       	call   c001db96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd40:	83 c4 2c             	add    esp,0x2c
c001dd43:	c3                   	ret    

c001dd44 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001dd44:	83 ec 18             	sub    esp,0x18
c001dd47:	6a 18                	push   0x18
c001dd49:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd4e:	50                   	push   eax
c001dd4f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd54:	50                   	push   eax
c001dd55:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd5a:	50                   	push   eax
c001dd5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dd5f:	e8 32 fe ff ff       	call   c001db96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd64:	83 c4 2c             	add    esp,0x2c
c001dd67:	0f b6 c4             	movzx  eax,ah
c001dd6a:	c3                   	ret    
c001dd6b:	90                   	nop

c001dd6c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dd6c:	55                   	push   ebp
c001dd6d:	57                   	push   edi
c001dd6e:	56                   	push   esi
c001dd6f:	53                   	push   ebx
c001dd70:	83 ec 28             	sub    esp,0x28
c001dd73:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001dd77:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001dd7c:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001dd81:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001dd86:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001dd8d:	8d 43 12             	lea    eax,[ebx+0x12]
c001dd90:	83 c3 10             	add    ebx,0x10
c001dd93:	0f b6 c0             	movzx  eax,al
c001dd96:	0f b6 db             	movzx  ebx,bl
c001dd99:	50                   	push   eax
c001dd9a:	51                   	push   ecx
c001dd9b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001dd9f:	57                   	push   edi
c001dda0:	55                   	push   ebp
c001dda1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dda5:	e8 ec fd ff ff       	call   c001db96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ddaa:	83 c4 14             	add    esp,0x14
c001ddad:	89 c6                	mov    esi,eax
c001ddaf:	53                   	push   ebx
c001ddb0:	c1 e6 10             	shl    esi,0x10
c001ddb3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ddb7:	51                   	push   ecx
c001ddb8:	57                   	push   edi
c001ddb9:	55                   	push   ebp
c001ddba:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ddbe:	e8 d3 fd ff ff       	call   c001db96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ddc3:	83 c4 3c             	add    esp,0x3c
c001ddc6:	0f b7 c0             	movzx  eax,ax
c001ddc9:	5b                   	pop    ebx
c001ddca:	09 f0                	or     eax,esi
c001ddcc:	5e                   	pop    esi
c001ddcd:	5f                   	pop    edi
c001ddce:	5d                   	pop    ebp
c001ddcf:	c3                   	ret    

c001ddd0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001ddd0:	55                   	push   ebp
c001ddd1:	57                   	push   edi
c001ddd2:	56                   	push   esi
c001ddd3:	53                   	push   ebx
c001ddd4:	83 ec 0c             	sub    esp,0xc
c001ddd7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001dddb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001dddf:	89 f5                	mov    ebp,esi
c001dde1:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001dde7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ddeb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ddef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ddf3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ddf7:	83 f9 01             	cmp    ecx,0x1
c001ddfa:	75 5d                	jne    c001de59 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001ddfc:	0f b6 c8             	movzx  ecx,al
c001ddff:	0f b6 d2             	movzx  edx,dl
c001de02:	c1 e1 10             	shl    ecx,0x10
c001de05:	c1 e2 0b             	shl    edx,0xb
c001de08:	89 f0                	mov    eax,esi
c001de0a:	25 fc 00 00 00       	and    eax,0xfc
c001de0f:	09 c1                	or     ecx,eax
c001de11:	89 e8                	mov    eax,ebp
c001de13:	0f b6 c0             	movzx  eax,al
c001de16:	c1 e0 08             	shl    eax,0x8
c001de19:	09 c1                	or     ecx,eax
c001de1b:	09 d1                	or     ecx,edx
c001de1d:	ba f8 0c 00 00       	mov    edx,0xcf8
c001de22:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001de28:	89 c8                	mov    eax,ecx
c001de2a:	ef                   	out    dx,eax
c001de2b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001de30:	ed                   	in     eax,dx
c001de31:	0f b7 db             	movzx  ebx,bx
c001de34:	83 e6 02             	and    esi,0x2
c001de37:	74 0a                	je     c001de43 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001de39:	0f b7 d0             	movzx  edx,ax
c001de3c:	c1 e3 10             	shl    ebx,0x10
c001de3f:	09 d3                	or     ebx,edx
c001de41:	eb 05                	jmp    c001de48 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001de43:	66 31 c0             	xor    ax,ax
c001de46:	09 c3                	or     ebx,eax
c001de48:	ba f8 0c 00 00       	mov    edx,0xcf8
c001de4d:	89 c8                	mov    eax,ecx
c001de4f:	ef                   	out    dx,eax
c001de50:	ba fc 0c 00 00       	mov    edx,0xcfc
c001de55:	89 d8                	mov    eax,ebx
c001de57:	eb 41                	jmp    c001de9a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001de59:	83 f9 02             	cmp    ecx,0x2
c001de5c:	75 45                	jne    c001dea3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001de5e:	83 ec 0c             	sub    esp,0xc
c001de61:	0f b6 d2             	movzx  edx,dl
c001de64:	89 f1                	mov    ecx,esi
c001de66:	0f b6 c0             	movzx  eax,al
c001de69:	0f b6 f1             	movzx  esi,cl
c001de6c:	89 e9                	mov    ecx,ebp
c001de6e:	56                   	push   esi
c001de6f:	0f b6 c9             	movzx  ecx,cl
c001de72:	51                   	push   ecx
c001de73:	52                   	push   edx
c001de74:	50                   	push   eax
c001de75:	57                   	push   edi
c001de76:	e8 ad fc ff ff       	call   c001db28 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de7b:	89 c2                	mov    edx,eax
c001de7d:	ed                   	in     eax,dx
c001de7e:	83 c4 20             	add    esp,0x20
c001de81:	0f b7 db             	movzx  ebx,bx
c001de84:	f6 c2 02             	test   dl,0x2
c001de87:	74 0c                	je     c001de95 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001de89:	0f b7 c8             	movzx  ecx,ax
c001de8c:	89 d8                	mov    eax,ebx
c001de8e:	c1 e0 10             	shl    eax,0x10
c001de91:	09 c8                	or     eax,ecx
c001de93:	eb 05                	jmp    c001de9a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001de95:	66 31 c0             	xor    ax,ax
c001de98:	09 d8                	or     eax,ebx
c001de9a:	ef                   	out    dx,eax
c001de9b:	83 c4 0c             	add    esp,0xc
c001de9e:	5b                   	pop    ebx
c001de9f:	5e                   	pop    esi
c001dea0:	5f                   	pop    edi
c001dea1:	5d                   	pop    ebp
c001dea2:	c3                   	ret    
c001dea3:	c7 44 24 20 73 71 02 c0 	mov    DWORD PTR [esp+0x20],0xc0027173
c001deab:	83 c4 0c             	add    esp,0xc
c001deae:	5b                   	pop    ebx
c001deaf:	5e                   	pop    esi
c001deb0:	5f                   	pop    edi
c001deb1:	5d                   	pop    ebp
c001deb2:	e9 72 72 ff ff       	jmp    c0015129 <Krnl::panic(char const*)>
c001deb7:	90                   	nop

c001deb8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001deb8:	55                   	push   ebp
c001deb9:	57                   	push   edi
c001deba:	56                   	push   esi
c001debb:	53                   	push   ebx
c001debc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001dec2:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c001dec9:	75 0f                	jne    c001deda <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001decb:	80 3d 2c a9 02 c0 00 	cmp    BYTE PTR ds:0xc002a92c,0x0
c001ded2:	0f 85 fa 00 00 00    	jne    c001dfd2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001ded8:	eb 2f                	jmp    c001df09 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001deda:	83 ec 0c             	sub    esp,0xc
c001dedd:	68 79 71 02 c0       	push   0xc0027179
c001dee2:	e8 ce be fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001dee7:	83 c4 10             	add    esp,0x10
c001deea:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c001def1:	75 d8                	jne    c001decb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001def3:	e4 60                	in     al,0x60
c001def5:	3c 1c                	cmp    al,0x1c
c001def7:	74 04                	je     c001defd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001def9:	3c 5a                	cmp    al,0x5a
c001defb:	75 f6                	jne    c001def3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001defd:	e4 60                	in     al,0x60
c001deff:	3c 5a                	cmp    al,0x5a
c001df01:	74 fa                	je     c001defd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001df03:	3c 1c                	cmp    al,0x1c
c001df05:	74 f6                	je     c001defd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001df07:	eb c2                	jmp    c001decb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001df09:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c001df10:	0f 85 86 00 00 00    	jne    c001df9c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001df16:	83 ec 0c             	sub    esp,0xc
c001df19:	68 14 01 00 00       	push   0x114
c001df1e:	e8 38 be fe ff       	call   c0009d5b <malloc>
c001df23:	83 c4 0c             	add    esp,0xc
c001df26:	89 c3                	mov    ebx,eax
c001df28:	ff 35 30 9f 02 c0    	push   DWORD PTR ds:0xc0029f30
c001df2e:	68 93 71 02 c0       	push   0xc0027193
c001df33:	50                   	push   eax
c001df34:	e8 79 f6 fe ff       	call   c000d5b2 <File::File(char const*, Process*)>
c001df39:	5a                   	pop    edx
c001df3a:	59                   	pop    ecx
c001df3b:	6a 01                	push   0x1
c001df3d:	53                   	push   ebx
c001df3e:	e8 49 f7 fe ff       	call   c000d68c <File::open(FileOpenMode)>
c001df43:	83 c4 0c             	add    esp,0xc
c001df46:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001df4a:	50                   	push   eax
c001df4b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001df4f:	50                   	push   eax
c001df50:	53                   	push   ebx
c001df51:	e8 e2 f9 fe ff       	call   c000d938 <File::stat(unsigned long long*, bool*)>
c001df56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df5a:	40                   	inc    eax
c001df5b:	89 04 24             	mov    DWORD PTR [esp],eax
c001df5e:	e8 f8 bd fe ff       	call   c0009d5b <malloc>
c001df63:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001df67:	a3 28 a9 02 c0       	mov    ds:0xc002a928,eax
c001df6c:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001df70:	5e                   	pop    esi
c001df71:	8b 13                	mov    edx,DWORD PTR [ebx]
c001df73:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001df77:	51                   	push   ecx
c001df78:	50                   	push   eax
c001df79:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001df7d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001df81:	53                   	push   ebx
c001df82:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001df85:	83 c4 14             	add    esp,0x14
c001df88:	53                   	push   ebx
c001df89:	e8 5c f7 fe ff       	call   c000d6ea <File::close()>
c001df8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df92:	83 c4 10             	add    esp,0x10
c001df95:	a3 24 a9 02 c0       	mov    ds:0xc002a924,eax
c001df9a:	eb 36                	jmp    c001dfd2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001df9c:	83 ec 0c             	sub    esp,0xc
c001df9f:	68 ac 71 02 c0       	push   0xc00271ac
c001dfa4:	e8 0c be fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001dfa9:	83 c4 10             	add    esp,0x10
c001dfac:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c001dfb3:	0f 85 5d ff ff ff    	jne    c001df16 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001dfb9:	e4 60                	in     al,0x60
c001dfbb:	3c 1c                	cmp    al,0x1c
c001dfbd:	74 04                	je     c001dfc3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001dfbf:	3c 5a                	cmp    al,0x5a
c001dfc1:	75 f6                	jne    c001dfb9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001dfc3:	e4 60                	in     al,0x60
c001dfc5:	3c 5a                	cmp    al,0x5a
c001dfc7:	74 fa                	je     c001dfc3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001dfc9:	3c 1c                	cmp    al,0x1c
c001dfcb:	74 f6                	je     c001dfc3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001dfcd:	e9 44 ff ff ff       	jmp    c001df16 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001dfd2:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c001dfd9:	75 0b                	jne    c001dfe6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001dfdb:	31 f6                	xor    esi,esi
c001dfdd:	31 db                	xor    ebx,ebx
c001dfdf:	31 ed                	xor    ebp,ebp
c001dfe1:	e9 a3 01 00 00       	jmp    c001e189 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001dfe6:	83 ec 0c             	sub    esp,0xc
c001dfe9:	68 be 71 02 c0       	push   0xc00271be
c001dfee:	e8 c2 bd fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001dff3:	8b 15 00 8a 02 c0    	mov    edx,DWORD PTR ds:0xc0028a00
c001dff9:	83 c4 10             	add    esp,0x10
c001dffc:	f6 c2 80             	test   dl,0x80
c001dfff:	74 0c                	je     c001e00d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001e001:	0f ba e2 0b          	bt     edx,0xb
c001e005:	72 1a                	jb     c001e021 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001e007:	eb d2                	jmp    c001dfdb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001e009:	3c 5a                	cmp    al,0x5a
c001e00b:	74 0c                	je     c001e019 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001e00d:	e4 60                	in     al,0x60
c001e00f:	3c 1c                	cmp    al,0x1c
c001e011:	75 f6                	jne    c001e009 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001e013:	eb 04                	jmp    c001e019 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001e015:	3c 1c                	cmp    al,0x1c
c001e017:	75 e8                	jne    c001e001 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001e019:	e4 60                	in     al,0x60
c001e01b:	3c 5a                	cmp    al,0x5a
c001e01d:	74 fa                	je     c001e019 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001e01f:	eb f4                	jmp    c001e015 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001e021:	83 ec 0c             	sub    esp,0xc
c001e024:	68 c3 71 02 c0       	push   0xc00271c3
c001e029:	e8 87 bd fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e02e:	83 c4 10             	add    esp,0x10
c001e031:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c001e038:	75 a1                	jne    c001dfdb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001e03a:	e4 60                	in     al,0x60
c001e03c:	3c 5a                	cmp    al,0x5a
c001e03e:	74 04                	je     c001e044 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001e040:	3c 1c                	cmp    al,0x1c
c001e042:	75 f6                	jne    c001e03a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001e044:	e4 60                	in     al,0x60
c001e046:	3c 5a                	cmp    al,0x5a
c001e048:	74 fa                	je     c001e044 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001e04a:	3c 1c                	cmp    al,0x1c
c001e04c:	74 f6                	je     c001e044 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001e04e:	eb 8b                	jmp    c001dfdb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001e050:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c001e057:	0f 85 3d 01 00 00    	jne    c001e19a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001e05d:	a1 28 a9 02 c0       	mov    eax,ds:0xc002a928
c001e062:	8d 7e 01             	lea    edi,[esi+0x1]
c001e065:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001e068:	d4 40                	aam    0x40
c001e06a:	d5 39                	aad    0x39
c001e06c:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c001e073:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e077:	0f 85 53 01 00 00    	jne    c001e1d0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001e07d:	8b 15 28 a9 02 c0    	mov    edx,DWORD PTR ds:0xc002a928
c001e083:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001e086:	d4 40                	aam    0x40
c001e088:	d5 39                	aad    0x39
c001e08a:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e08e:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001e092:	d4 40                	aam    0x40
c001e094:	d5 39                	aad    0x39
c001e096:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001e09a:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001e09e:	d4 40                	aam    0x40
c001e0a0:	d5 39                	aad    0x39
c001e0a2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e0a6:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001e0aa:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001e0ae:	3c 56                	cmp    al,0x56
c001e0b0:	74 49                	je     c001e0fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001e0b2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001e0b6:	d4 40                	aam    0x40
c001e0b8:	d5 39                	aad    0x39
c001e0ba:	8d 48 d0             	lea    ecx,[eax-0x30]
c001e0bd:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001e0c1:	0f b6 c9             	movzx  ecx,cl
c001e0c4:	c1 e1 04             	shl    ecx,0x4
c001e0c7:	d4 40                	aam    0x40
c001e0c9:	d5 39                	aad    0x39
c001e0cb:	83 e8 30             	sub    eax,0x30
c001e0ce:	0f b6 c0             	movzx  eax,al
c001e0d1:	09 c1                	or     ecx,eax
c001e0d3:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001e0d7:	c1 e1 04             	shl    ecx,0x4
c001e0da:	d4 40                	aam    0x40
c001e0dc:	d5 39                	aad    0x39
c001e0de:	83 e8 30             	sub    eax,0x30
c001e0e1:	0f b6 c0             	movzx  eax,al
c001e0e4:	09 c1                	or     ecx,eax
c001e0e6:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001e0ea:	c1 e1 04             	shl    ecx,0x4
c001e0ed:	d4 40                	aam    0x40
c001e0ef:	d5 39                	aad    0x39
c001e0f1:	83 e8 30             	sub    eax,0x30
c001e0f4:	0f b6 c0             	movzx  eax,al
c001e0f7:	09 c8                	or     eax,ecx
c001e0f9:	89 c5                	mov    ebp,eax
c001e0fb:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001e0ff:	80 f9 44             	cmp    cl,0x44
c001e102:	74 47                	je     c001e14b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001e104:	88 c8                	mov    al,cl
c001e106:	d4 40                	aam    0x40
c001e108:	d5 39                	aad    0x39
c001e10a:	83 e8 30             	sub    eax,0x30
c001e10d:	0f b6 f8             	movzx  edi,al
c001e110:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001e114:	c1 e7 04             	shl    edi,0x4
c001e117:	d4 40                	aam    0x40
c001e119:	d5 39                	aad    0x39
c001e11b:	8d 58 d0             	lea    ebx,[eax-0x30]
c001e11e:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001e122:	0f b6 db             	movzx  ebx,bl
c001e125:	09 fb                	or     ebx,edi
c001e127:	c1 e3 04             	shl    ebx,0x4
c001e12a:	d4 40                	aam    0x40
c001e12c:	d5 39                	aad    0x39
c001e12e:	83 e8 30             	sub    eax,0x30
c001e131:	0f b6 f8             	movzx  edi,al
c001e134:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001e138:	09 fb                	or     ebx,edi
c001e13a:	89 df                	mov    edi,ebx
c001e13c:	c1 e7 04             	shl    edi,0x4
c001e13f:	d4 40                	aam    0x40
c001e141:	d5 39                	aad    0x39
c001e143:	8d 58 d0             	lea    ebx,[eax-0x30]
c001e146:	0f b6 db             	movzx  ebx,bl
c001e149:	09 fb                	or     ebx,edi
c001e14b:	a1 24 a9 02 c0       	mov    eax,ds:0xc002a924
c001e150:	83 c6 10             	add    esi,0x10
c001e153:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e157:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001e15b:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001e15e:	3c 0a                	cmp    al,0xa
c001e160:	0f 85 a0 00 00 00    	jne    c001e206 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001e166:	3c 0a                	cmp    al,0xa
c001e168:	0f 94 c0             	sete   al
c001e16b:	0f b6 c0             	movzx  eax,al
c001e16e:	01 c6                	add    esi,eax
c001e170:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001e175:	0f 84 a2 00 00 00    	je     c001e21d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001e17b:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001e183:	0f 84 94 00 00 00    	je     c001e21d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001e189:	39 35 24 a9 02 c0    	cmp    DWORD PTR ds:0xc002a924,esi
c001e18f:	0f 8f bb fe ff ff    	jg     c001e050 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001e195:	e9 e8 00 00 00       	jmp    c001e282 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001e19a:	83 ec 0c             	sub    esp,0xc
c001e19d:	68 ca 71 02 c0       	push   0xc00271ca
c001e1a2:	e8 0e bc fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e1a7:	83 c4 10             	add    esp,0x10
c001e1aa:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c001e1b1:	0f 85 a6 fe ff ff    	jne    c001e05d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001e1b7:	e4 60                	in     al,0x60
c001e1b9:	3c 5a                	cmp    al,0x5a
c001e1bb:	74 04                	je     c001e1c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e1bd:	3c 1c                	cmp    al,0x1c
c001e1bf:	75 f6                	jne    c001e1b7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001e1c1:	e4 60                	in     al,0x60
c001e1c3:	3c 5a                	cmp    al,0x5a
c001e1c5:	74 fa                	je     c001e1c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e1c7:	3c 1c                	cmp    al,0x1c
c001e1c9:	74 f6                	je     c001e1c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e1cb:	e9 8d fe ff ff       	jmp    c001e05d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001e1d0:	83 ec 0c             	sub    esp,0xc
c001e1d3:	68 d2 71 02 c0       	push   0xc00271d2
c001e1d8:	e8 d8 bb fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e1dd:	83 c4 10             	add    esp,0x10
c001e1e0:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c001e1e7:	0f 85 90 fe ff ff    	jne    c001e07d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001e1ed:	e4 60                	in     al,0x60
c001e1ef:	3c 5a                	cmp    al,0x5a
c001e1f1:	74 04                	je     c001e1f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e1f3:	3c 1c                	cmp    al,0x1c
c001e1f5:	75 f6                	jne    c001e1ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001e1f7:	e4 60                	in     al,0x60
c001e1f9:	3c 5a                	cmp    al,0x5a
c001e1fb:	74 fa                	je     c001e1f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e1fd:	3c 1c                	cmp    al,0x1c
c001e1ff:	74 f6                	je     c001e1f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e201:	e9 77 fe ff ff       	jmp    c001e07d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001e206:	47                   	inc    edi
c001e207:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001e20b:	0f 84 55 ff ff ff    	je     c001e166 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001e211:	46                   	inc    esi
c001e212:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001e215:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001e218:	e9 3e ff ff ff       	jmp    c001e15b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001e21d:	80 f9 44             	cmp    cl,0x44
c001e220:	74 0e                	je     c001e230 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001e222:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001e22a:	0f 85 59 ff ff ff    	jne    c001e189 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e230:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e234:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001e238:	c1 e0 04             	shl    eax,0x4
c001e23b:	83 ea 30             	sub    edx,0x30
c001e23e:	09 d0                	or     eax,edx
c001e240:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001e247:	0f 85 3c ff ff ff    	jne    c001e189 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e24d:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001e251:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e255:	c1 e2 04             	shl    edx,0x4
c001e258:	83 e8 30             	sub    eax,0x30
c001e25b:	09 d0                	or     eax,edx
c001e25d:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001e264:	0f 85 1f ff ff ff    	jne    c001e189 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e26a:	50                   	push   eax
c001e26b:	50                   	push   eax
c001e26c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e270:	50                   	push   eax
c001e271:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001e278:	e8 c3 24 fe ff       	call   c0000740 <strcpy>
c001e27d:	83 c4 10             	add    esp,0x10
c001e280:	eb 15                	jmp    c001e297 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001e282:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001e289:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001e294:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001e297:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001e29e:	81 c4 2c 01 00 00    	add    esp,0x12c
c001e2a4:	5b                   	pop    ebx
c001e2a5:	5e                   	pop    esi
c001e2a6:	5f                   	pop    edi
c001e2a7:	5d                   	pop    ebp
c001e2a8:	c3                   	ret    
c001e2a9:	90                   	nop

c001e2aa <PCI::checkBus(unsigned char)>:
c001e2aa:	56                   	push   esi
c001e2ab:	53                   	push   ebx
c001e2ac:	31 db                	xor    ebx,ebx
c001e2ae:	51                   	push   ecx
c001e2af:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e2b4:	52                   	push   edx
c001e2b5:	53                   	push   ebx
c001e2b6:	43                   	inc    ebx
c001e2b7:	56                   	push   esi
c001e2b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e2bc:	e8 bf 07 00 00       	call   c001ea80 <PCI::checkDevice(unsigned char, unsigned char)>
c001e2c1:	83 c4 10             	add    esp,0x10
c001e2c4:	83 fb 20             	cmp    ebx,0x20
c001e2c7:	75 eb                	jne    c001e2b4 <PCI::checkBus(unsigned char)+0xa>
c001e2c9:	58                   	pop    eax
c001e2ca:	5b                   	pop    ebx
c001e2cb:	5e                   	pop    esi
c001e2cc:	c3                   	ret    
c001e2cd:	90                   	nop

c001e2ce <PCI::foundDevice(PCIDeviceInfo)>:
c001e2ce:	55                   	push   ebp
c001e2cf:	57                   	push   edi
c001e2d0:	56                   	push   esi
c001e2d1:	53                   	push   ebx
c001e2d2:	83 ec 1c             	sub    esp,0x1c
c001e2d5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e2d9:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001e2df:	0f 84 20 04 00 00    	je     c001e705 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e2e5:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c001e2ec:	75 37                	jne    c001e325 <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001e2ee:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e2f2:	66 81 f9 06 04       	cmp    cx,0x406
c001e2f7:	75 5b                	jne    c001e354 <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001e2f9:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001e2fe:	50                   	push   eax
c001e2ff:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001e304:	50                   	push   eax
c001e305:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001e30a:	50                   	push   eax
c001e30b:	53                   	push   ebx
c001e30c:	e8 33 fa ff ff       	call   c001dd44 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001e311:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001e315:	0f b6 c0             	movzx  eax,al
c001e318:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001e31c:	83 c4 2c             	add    esp,0x2c
c001e31f:	5b                   	pop    ebx
c001e320:	5e                   	pop    esi
c001e321:	5f                   	pop    edi
c001e322:	5d                   	pop    ebp
c001e323:	eb 85                	jmp    c001e2aa <PCI::checkBus(unsigned char)>
c001e325:	83 ec 0c             	sub    esp,0xc
c001e328:	68 db 71 02 c0       	push   0xc00271db
c001e32d:	e8 83 ba fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e332:	83 c4 10             	add    esp,0x10
c001e335:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c001e33c:	75 b0                	jne    c001e2ee <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001e33e:	e4 60                	in     al,0x60
c001e340:	3c 5a                	cmp    al,0x5a
c001e342:	74 04                	je     c001e348 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e344:	3c 1c                	cmp    al,0x1c
c001e346:	75 f6                	jne    c001e33e <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001e348:	e4 60                	in     al,0x60
c001e34a:	3c 5a                	cmp    al,0x5a
c001e34c:	74 fa                	je     c001e348 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e34e:	3c 1c                	cmp    al,0x1c
c001e350:	74 f6                	je     c001e348 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e352:	eb 9a                	jmp    c001e2ee <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001e354:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001e35a:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001e35e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e362:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001e366:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001e36a:	88 d0                	mov    al,dl
c001e36c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e371:	74 3b                	je     c001e3ae <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001e373:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e377:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e37a:	85 d2                	test   edx,edx
c001e37c:	74 24                	je     c001e3a2 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e37e:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001e384:	31 ef                	xor    edi,ebp
c001e386:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001e38c:	75 14                	jne    c001e3a2 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e38e:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001e394:	75 0c                	jne    c001e3a2 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e396:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001e39c:	0f 84 63 03 00 00    	je     c001e705 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e3a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e3a6:	8b 12                	mov    edx,DWORD PTR [edx]
c001e3a8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e3ac:	eb be                	jmp    c001e36c <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001e3ae:	66 81 f9 01 06       	cmp    cx,0x601
c001e3b3:	0f 85 81 01 00 00    	jne    c001e53a <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001e3b9:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c001e3c0:	75 25                	jne    c001e3e7 <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001e3c2:	83 ec 0c             	sub    esp,0xc
c001e3c5:	68 64 01 00 00       	push   0x164
c001e3ca:	e8 8c b9 fe ff       	call   c0009d5b <malloc>
c001e3cf:	89 04 24             	mov    DWORD PTR [esp],eax
c001e3d2:	89 c5                	mov    ebp,eax
c001e3d4:	e8 b7 12 00 00       	call   c001f690 <SATABus::SATABus()>
c001e3d9:	83 c4 10             	add    esp,0x10
c001e3dc:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c001e3e3:	74 4a                	je     c001e42f <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001e3e5:	eb 2f                	jmp    c001e416 <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001e3e7:	83 ec 0c             	sub    esp,0xc
c001e3ea:	68 eb 71 02 c0       	push   0xc00271eb
c001e3ef:	e8 c1 b9 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e3f4:	83 c4 10             	add    esp,0x10
c001e3f7:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c001e3fe:	75 c2                	jne    c001e3c2 <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001e400:	e4 60                	in     al,0x60
c001e402:	3c 1c                	cmp    al,0x1c
c001e404:	74 04                	je     c001e40a <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e406:	3c 5a                	cmp    al,0x5a
c001e408:	75 f6                	jne    c001e400 <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001e40a:	e4 60                	in     al,0x60
c001e40c:	3c 5a                	cmp    al,0x5a
c001e40e:	74 fa                	je     c001e40a <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e410:	3c 1c                	cmp    al,0x1c
c001e412:	74 f6                	je     c001e40a <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e414:	eb ac                	jmp    c001e3c2 <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001e416:	83 ec 0c             	sub    esp,0xc
c001e419:	68 f1 71 02 c0       	push   0xc00271f1
c001e41e:	e8 92 b9 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e423:	83 c4 10             	add    esp,0x10
c001e426:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c001e42d:	74 1b                	je     c001e44a <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001e42f:	50                   	push   eax
c001e430:	50                   	push   eax
c001e431:	55                   	push   ebp
c001e432:	53                   	push   ebx
c001e433:	e8 82 01 ff ff       	call   c000e5ba <Device::addChild(Device*)>
c001e438:	83 c4 10             	add    esp,0x10
c001e43b:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c001e442:	74 33                	je     c001e477 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001e444:	eb 18                	jmp    c001e45e <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001e446:	3c 1c                	cmp    al,0x1c
c001e448:	74 0c                	je     c001e456 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e44a:	e4 60                	in     al,0x60
c001e44c:	3c 5a                	cmp    al,0x5a
c001e44e:	75 f6                	jne    c001e446 <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001e450:	eb 04                	jmp    c001e456 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e452:	3c 1c                	cmp    al,0x1c
c001e454:	75 d9                	jne    c001e42f <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001e456:	e4 60                	in     al,0x60
c001e458:	3c 5a                	cmp    al,0x5a
c001e45a:	74 fa                	je     c001e456 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e45c:	eb f4                	jmp    c001e452 <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001e45e:	83 ec 0c             	sub    esp,0xc
c001e461:	68 f9 71 02 c0       	push   0xc00271f9
c001e466:	e8 4a b9 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e46b:	83 c4 10             	add    esp,0x10
c001e46e:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c001e475:	74 29                	je     c001e4a0 <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001e477:	83 ec 2c             	sub    esp,0x2c
c001e47a:	b9 09 00 00 00       	mov    ecx,0x9
c001e47f:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e483:	fc                   	cld    
c001e484:	89 e7                	mov    edi,esp
c001e486:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e488:	55                   	push   ebp
c001e489:	e8 3e 00 ff ff       	call   c000e4cc <Device::preOpenPCI(PCIDeviceInfo)>
c001e48e:	83 c4 30             	add    esp,0x30
c001e491:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c001e498:	74 33                	je     c001e4cd <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001e49a:	eb 18                	jmp    c001e4b4 <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001e49c:	3c 1c                	cmp    al,0x1c
c001e49e:	74 0c                	je     c001e4ac <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e4a0:	e4 60                	in     al,0x60
c001e4a2:	3c 5a                	cmp    al,0x5a
c001e4a4:	75 f6                	jne    c001e49c <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001e4a6:	eb 04                	jmp    c001e4ac <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e4a8:	3c 1c                	cmp    al,0x1c
c001e4aa:	75 cb                	jne    c001e477 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001e4ac:	e4 60                	in     al,0x60
c001e4ae:	3c 5a                	cmp    al,0x5a
c001e4b0:	74 fa                	je     c001e4ac <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e4b2:	eb f4                	jmp    c001e4a8 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e4b4:	83 ec 0c             	sub    esp,0xc
c001e4b7:	68 01 72 02 c0       	push   0xc0027201
c001e4bc:	e8 f4 b8 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e4c1:	83 c4 10             	add    esp,0x10
c001e4c4:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c001e4cb:	74 23                	je     c001e4f0 <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001e4cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e4d0:	6a 00                	push   0x0
c001e4d2:	6a 00                	push   0x0
c001e4d4:	6a 00                	push   0x0
c001e4d6:	55                   	push   ebp
c001e4d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e4da:	83 c4 10             	add    esp,0x10
c001e4dd:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c001e4e4:	0f 84 1b 02 00 00    	je     c001e705 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e4ea:	eb 18                	jmp    c001e504 <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001e4ec:	3c 1c                	cmp    al,0x1c
c001e4ee:	74 0c                	je     c001e4fc <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e4f0:	e4 60                	in     al,0x60
c001e4f2:	3c 5a                	cmp    al,0x5a
c001e4f4:	75 f6                	jne    c001e4ec <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001e4f6:	eb 04                	jmp    c001e4fc <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e4f8:	3c 1c                	cmp    al,0x1c
c001e4fa:	75 d1                	jne    c001e4cd <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001e4fc:	e4 60                	in     al,0x60
c001e4fe:	3c 5a                	cmp    al,0x5a
c001e500:	74 fa                	je     c001e4fc <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e502:	eb f4                	jmp    c001e4f8 <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001e504:	83 ec 0c             	sub    esp,0xc
c001e507:	68 09 72 02 c0       	push   0xc0027209
c001e50c:	e8 a4 b8 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e511:	83 c4 10             	add    esp,0x10
c001e514:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c001e51b:	0f 85 e4 01 00 00    	jne    c001e705 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e521:	e4 60                	in     al,0x60
c001e523:	3c 5a                	cmp    al,0x5a
c001e525:	74 04                	je     c001e52b <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e527:	3c 1c                	cmp    al,0x1c
c001e529:	75 f6                	jne    c001e521 <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001e52b:	e4 60                	in     al,0x60
c001e52d:	3c 5a                	cmp    al,0x5a
c001e52f:	74 fa                	je     c001e52b <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e531:	3c 1c                	cmp    al,0x1c
c001e533:	74 f6                	je     c001e52b <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e535:	e9 cb 01 00 00       	jmp    c001e705 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e53a:	66 81 f9 01 01       	cmp    cx,0x101
c001e53f:	0f 85 7a 01 00 00    	jne    c001e6bf <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001e545:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c001e54c:	75 25                	jne    c001e573 <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001e54e:	83 ec 0c             	sub    esp,0xc
c001e551:	68 70 02 00 00       	push   0x270
c001e556:	e8 00 b8 fe ff       	call   c0009d5b <malloc>
c001e55b:	89 04 24             	mov    DWORD PTR [esp],eax
c001e55e:	89 c5                	mov    ebp,eax
c001e560:	e8 df 05 00 00       	call   c001eb44 <IDE::IDE()>
c001e565:	83 c4 10             	add    esp,0x10
c001e568:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c001e56f:	74 4a                	je     c001e5bb <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001e571:	eb 2f                	jmp    c001e5a2 <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001e573:	83 ec 0c             	sub    esp,0xc
c001e576:	68 11 72 02 c0       	push   0xc0027211
c001e57b:	e8 35 b8 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e580:	83 c4 10             	add    esp,0x10
c001e583:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c001e58a:	75 c2                	jne    c001e54e <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001e58c:	e4 60                	in     al,0x60
c001e58e:	3c 5a                	cmp    al,0x5a
c001e590:	74 04                	je     c001e596 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e592:	3c 1c                	cmp    al,0x1c
c001e594:	75 f6                	jne    c001e58c <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001e596:	e4 60                	in     al,0x60
c001e598:	3c 5a                	cmp    al,0x5a
c001e59a:	74 fa                	je     c001e596 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e59c:	3c 1c                	cmp    al,0x1c
c001e59e:	74 f6                	je     c001e596 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e5a0:	eb ac                	jmp    c001e54e <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001e5a2:	83 ec 0c             	sub    esp,0xc
c001e5a5:	68 18 72 02 c0       	push   0xc0027218
c001e5aa:	e8 06 b8 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e5af:	83 c4 10             	add    esp,0x10
c001e5b2:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c001e5b9:	74 1b                	je     c001e5d6 <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001e5bb:	57                   	push   edi
c001e5bc:	57                   	push   edi
c001e5bd:	55                   	push   ebp
c001e5be:	53                   	push   ebx
c001e5bf:	e8 f6 ff fe ff       	call   c000e5ba <Device::addChild(Device*)>
c001e5c4:	83 c4 10             	add    esp,0x10
c001e5c7:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c001e5ce:	74 33                	je     c001e603 <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e5d0:	eb 18                	jmp    c001e5ea <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001e5d2:	3c 1c                	cmp    al,0x1c
c001e5d4:	74 0c                	je     c001e5e2 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e5d6:	e4 60                	in     al,0x60
c001e5d8:	3c 5a                	cmp    al,0x5a
c001e5da:	75 f6                	jne    c001e5d2 <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001e5dc:	eb 04                	jmp    c001e5e2 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e5de:	3c 1c                	cmp    al,0x1c
c001e5e0:	75 d9                	jne    c001e5bb <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001e5e2:	e4 60                	in     al,0x60
c001e5e4:	3c 5a                	cmp    al,0x5a
c001e5e6:	74 fa                	je     c001e5e2 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e5e8:	eb f4                	jmp    c001e5de <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001e5ea:	83 ec 0c             	sub    esp,0xc
c001e5ed:	68 1f 72 02 c0       	push   0xc002721f
c001e5f2:	e8 be b7 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e5f7:	83 c4 10             	add    esp,0x10
c001e5fa:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c001e601:	74 29                	je     c001e62c <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001e603:	83 ec 2c             	sub    esp,0x2c
c001e606:	b9 09 00 00 00       	mov    ecx,0x9
c001e60b:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e60f:	fc                   	cld    
c001e610:	89 e7                	mov    edi,esp
c001e612:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e614:	55                   	push   ebp
c001e615:	e8 b2 fe fe ff       	call   c000e4cc <Device::preOpenPCI(PCIDeviceInfo)>
c001e61a:	83 c4 30             	add    esp,0x30
c001e61d:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c001e624:	74 33                	je     c001e659 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e626:	eb 18                	jmp    c001e640 <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001e628:	3c 1c                	cmp    al,0x1c
c001e62a:	74 0c                	je     c001e638 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e62c:	e4 60                	in     al,0x60
c001e62e:	3c 5a                	cmp    al,0x5a
c001e630:	75 f6                	jne    c001e628 <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001e632:	eb 04                	jmp    c001e638 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e634:	3c 1c                	cmp    al,0x1c
c001e636:	75 cb                	jne    c001e603 <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e638:	e4 60                	in     al,0x60
c001e63a:	3c 5a                	cmp    al,0x5a
c001e63c:	74 fa                	je     c001e638 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e63e:	eb f4                	jmp    c001e634 <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001e640:	83 ec 0c             	sub    esp,0xc
c001e643:	68 26 72 02 c0       	push   0xc0027226
c001e648:	e8 68 b7 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e64d:	83 c4 10             	add    esp,0x10
c001e650:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c001e657:	74 23                	je     c001e67c <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001e659:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e65c:	6a 00                	push   0x0
c001e65e:	6a 00                	push   0x0
c001e660:	6a 00                	push   0x0
c001e662:	55                   	push   ebp
c001e663:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e666:	83 c4 10             	add    esp,0x10
c001e669:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c001e670:	0f 84 8f 00 00 00    	je     c001e705 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e676:	eb 18                	jmp    c001e690 <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001e678:	3c 1c                	cmp    al,0x1c
c001e67a:	74 0c                	je     c001e688 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e67c:	e4 60                	in     al,0x60
c001e67e:	3c 5a                	cmp    al,0x5a
c001e680:	75 f6                	jne    c001e678 <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001e682:	eb 04                	jmp    c001e688 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e684:	3c 1c                	cmp    al,0x1c
c001e686:	75 d1                	jne    c001e659 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e688:	e4 60                	in     al,0x60
c001e68a:	3c 5a                	cmp    al,0x5a
c001e68c:	74 fa                	je     c001e688 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e68e:	eb f4                	jmp    c001e684 <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001e690:	83 ec 0c             	sub    esp,0xc
c001e693:	68 2d 72 02 c0       	push   0xc002722d
c001e698:	e8 18 b7 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e69d:	83 c4 10             	add    esp,0x10
c001e6a0:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c001e6a7:	75 5c                	jne    c001e705 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e6a9:	e4 60                	in     al,0x60
c001e6ab:	3c 5a                	cmp    al,0x5a
c001e6ad:	74 04                	je     c001e6b3 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e6af:	3c 1c                	cmp    al,0x1c
c001e6b1:	75 f6                	jne    c001e6a9 <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001e6b3:	e4 60                	in     al,0x60
c001e6b5:	3c 5a                	cmp    al,0x5a
c001e6b7:	74 fa                	je     c001e6b3 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e6b9:	3c 1c                	cmp    al,0x1c
c001e6bb:	74 f6                	je     c001e6b3 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e6bd:	eb 46                	jmp    c001e705 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e6bf:	83 ec 0c             	sub    esp,0xc
c001e6c2:	68 58 01 00 00       	push   0x158
c001e6c7:	e8 8f b6 fe ff       	call   c0009d5b <malloc>
c001e6cc:	89 c5                	mov    ebp,eax
c001e6ce:	58                   	pop    eax
c001e6cf:	5a                   	pop    edx
c001e6d0:	68 34 72 02 c0       	push   0xc0027234
c001e6d5:	55                   	push   ebp
c001e6d6:	e8 e9 01 ff ff       	call   c000e8c4 <DriverlessDevice::DriverlessDevice(char const*)>
c001e6db:	59                   	pop    ecx
c001e6dc:	5e                   	pop    esi
c001e6dd:	55                   	push   ebp
c001e6de:	53                   	push   ebx
c001e6df:	e8 d6 fe fe ff       	call   c000e5ba <Device::addChild(Device*)>
c001e6e4:	83 c4 10             	add    esp,0x10
c001e6e7:	b9 09 00 00 00       	mov    ecx,0x9
c001e6ec:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001e6f0:	fc                   	cld    
c001e6f1:	89 fe                	mov    esi,edi
c001e6f3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e6f5:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001e6f9:	83 c4 1c             	add    esp,0x1c
c001e6fc:	5b                   	pop    ebx
c001e6fd:	5e                   	pop    esi
c001e6fe:	5f                   	pop    edi
c001e6ff:	5d                   	pop    ebp
c001e700:	e9 c7 fd fe ff       	jmp    c000e4cc <Device::preOpenPCI(PCIDeviceInfo)>
c001e705:	83 c4 1c             	add    esp,0x1c
c001e708:	5b                   	pop    ebx
c001e709:	5e                   	pop    esi
c001e70a:	5f                   	pop    edi
c001e70b:	5d                   	pop    ebp
c001e70c:	c3                   	ret    
c001e70d:	90                   	nop

c001e70e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e70e:	55                   	push   ebp
c001e70f:	57                   	push   edi
c001e710:	56                   	push   esi
c001e711:	53                   	push   ebx
c001e712:	81 ec b4 00 00 00    	sub    esp,0xb4
c001e718:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001e71f:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001e726:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e72a:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001e731:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e735:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001e73c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e740:	68 4e 72 02 c0       	push   0xc002724e
c001e745:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001e749:	53                   	push   ebx
c001e74a:	e8 f1 1f fe ff       	call   c0000740 <strcpy>
c001e74f:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001e754:	b2 64                	mov    dl,0x64
c001e756:	89 c8                	mov    eax,ecx
c001e758:	f6 f2                	div    dl
c001e75a:	b2 0a                	mov    dl,0xa
c001e75c:	83 c0 30             	add    eax,0x30
c001e75f:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001e763:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001e767:	83 c4 10             	add    esp,0x10
c001e76a:	89 c8                	mov    eax,ecx
c001e76c:	f6 f2                	div    dl
c001e76e:	89 c1                	mov    ecx,eax
c001e770:	0f b6 c0             	movzx  eax,al
c001e773:	88 e9                	mov    cl,ch
c001e775:	f6 f2                	div    dl
c001e777:	88 e0                	mov    al,ah
c001e779:	83 c0 30             	add    eax,0x30
c001e77c:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e780:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e784:	8d 41 30             	lea    eax,[ecx+0x30]
c001e787:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001e78b:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001e78f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001e794:	f6 f2                	div    dl
c001e796:	89 c1                	mov    ecx,eax
c001e798:	0f b6 c0             	movzx  eax,al
c001e79b:	88 e9                	mov    cl,ch
c001e79d:	f6 f2                	div    dl
c001e79f:	88 e0                	mov    al,ah
c001e7a1:	83 c0 30             	add    eax,0x30
c001e7a4:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001e7a8:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001e7ac:	8d 41 30             	lea    eax,[ecx+0x30]
c001e7af:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001e7b3:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001e7b7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001e7bc:	f6 f2                	div    dl
c001e7be:	89 c1                	mov    ecx,eax
c001e7c0:	0f b6 c0             	movzx  eax,al
c001e7c3:	88 e9                	mov    cl,ch
c001e7c5:	f6 f2                	div    dl
c001e7c7:	88 e0                	mov    al,ah
c001e7c9:	83 c0 30             	add    eax,0x30
c001e7cc:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c001e7d3:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001e7d7:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e7db:	8d 41 30             	lea    eax,[ecx+0x30]
c001e7de:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001e7e2:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001e7e6:	74 29                	je     c001e811 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e7e8:	83 ec 0c             	sub    esp,0xc
c001e7eb:	53                   	push   ebx
c001e7ec:	e8 c4 b5 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e7f1:	83 c4 10             	add    esp,0x10
c001e7f4:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c001e7fb:	75 14                	jne    c001e811 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e7fd:	e4 60                	in     al,0x60
c001e7ff:	3c 1c                	cmp    al,0x1c
c001e801:	74 04                	je     c001e807 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e803:	3c 5a                	cmp    al,0x5a
c001e805:	75 f6                	jne    c001e7fd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001e807:	e4 60                	in     al,0x60
c001e809:	3c 5a                	cmp    al,0x5a
c001e80b:	74 fa                	je     c001e807 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e80d:	3c 1c                	cmp    al,0x1c
c001e80f:	74 f6                	je     c001e807 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e811:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001e816:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001e81b:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e820:	83 ec 0c             	sub    esp,0xc
c001e823:	6a 0c                	push   0xc
c001e825:	56                   	push   esi
c001e826:	53                   	push   ebx
c001e827:	57                   	push   edi
c001e828:	55                   	push   ebp
c001e829:	e8 68 f3 ff ff       	call   c001db96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e82e:	83 c4 20             	add    esp,0x20
c001e831:	56                   	push   esi
c001e832:	53                   	push   ebx
c001e833:	57                   	push   edi
c001e834:	55                   	push   ebp
c001e835:	e8 50 f4 ff ff       	call   c001dc8a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e83a:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001e83f:	56                   	push   esi
c001e840:	53                   	push   ebx
c001e841:	57                   	push   edi
c001e842:	55                   	push   ebp
c001e843:	e8 d8 f4 ff ff       	call   c001dd20 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e848:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001e84c:	83 c4 14             	add    esp,0x14
c001e84f:	6a 3c                	push   0x3c
c001e851:	56                   	push   esi
c001e852:	53                   	push   ebx
c001e853:	57                   	push   edi
c001e854:	55                   	push   ebp
c001e855:	e8 3c f3 ff ff       	call   c001db96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e85a:	0f b6 c4             	movzx  eax,ah
c001e85d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e861:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e865:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001e86c:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c001e871:	83 c4 20             	add    esp,0x20
c001e874:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e87a:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001e881:	0f 84 38 01 00 00    	je     c001e9bf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e887:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e88f:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c001e894:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e898:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e89e:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001e8a4:	0f 8e 15 01 00 00    	jle    c001e9bf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e8aa:	50                   	push   eax
c001e8ab:	50                   	push   eax
c001e8ac:	68 69 72 02 c0       	push   0xc0027269
c001e8b1:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e8b5:	50                   	push   eax
c001e8b6:	e8 85 1e fe ff       	call   c0000740 <strcpy>
c001e8bb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001e8bf:	b9 0a 00 00 00       	mov    ecx,0xa
c001e8c4:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e8c8:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e8cc:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e8d0:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001e8d4:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001e8d8:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001e8dc:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001e8e0:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001e8e4:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001e8e8:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e8ec:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001e8f0:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001e8f4:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001e8f8:	83 c4 10             	add    esp,0x10
c001e8fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8ff:	99                   	cdq    
c001e900:	f7 f9                	idiv   ecx
c001e902:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e906:	99                   	cdq    
c001e907:	f7 f9                	idiv   ecx
c001e909:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001e90d:	83 c2 30             	add    edx,0x30
c001e910:	83 c0 30             	add    eax,0x30
c001e913:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001e917:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001e91b:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c001e922:	74 2d                	je     c001e951 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e924:	83 ec 0c             	sub    esp,0xc
c001e927:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e92b:	50                   	push   eax
c001e92c:	e8 84 b4 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e931:	83 c4 10             	add    esp,0x10
c001e934:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c001e93b:	75 14                	jne    c001e951 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e93d:	e4 60                	in     al,0x60
c001e93f:	3c 5a                	cmp    al,0x5a
c001e941:	74 04                	je     c001e947 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e943:	3c 1c                	cmp    al,0x1c
c001e945:	75 f6                	jne    c001e93d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001e947:	e4 60                	in     al,0x60
c001e949:	3c 5a                	cmp    al,0x5a
c001e94b:	74 fa                	je     c001e947 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e94d:	3c 1c                	cmp    al,0x1c
c001e94f:	74 f6                	je     c001e947 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e951:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e955:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c001e95a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e960:	8d 04 d0             	lea    eax,[eax+edx*8]
c001e963:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001e96a:	39 d3                	cmp    ebx,edx
c001e96c:	75 48                	jne    c001e9b6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e96e:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001e975:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001e979:	75 3b                	jne    c001e9b6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e97b:	83 ec 0c             	sub    esp,0xc
c001e97e:	68 98 72 02 c0       	push   0xc0027298
c001e983:	e8 bf e6 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001e988:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e98c:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c001e991:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e997:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001e99f:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001e9a3:	50                   	push   eax
c001e9a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e9a8:	53                   	push   ebx
c001e9a9:	68 bd 72 02 c0       	push   0xc00272bd
c001e9ae:	e8 94 e6 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001e9b3:	83 c4 20             	add    esp,0x20
c001e9b6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e9ba:	e9 d0 fe ff ff       	jmp    c001e88f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001e9bf:	31 d2                	xor    edx,edx
c001e9c1:	83 ec 0c             	sub    esp,0xc
c001e9c4:	56                   	push   esi
c001e9c5:	53                   	push   ebx
c001e9c6:	57                   	push   edi
c001e9c7:	52                   	push   edx
c001e9c8:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e9cc:	55                   	push   ebp
c001e9cd:	e8 9a f3 ff ff       	call   c001dd6c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e9d2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e9d6:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001e9dd:	42                   	inc    edx
c001e9de:	83 c4 20             	add    esp,0x20
c001e9e1:	83 fa 06             	cmp    edx,0x6
c001e9e4:	75 db                	jne    c001e9c1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001e9e6:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001e9eb:	83 ec 0c             	sub    esp,0xc
c001e9ee:	86 e0                	xchg   al,ah
c001e9f0:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001e9f8:	6a 02                	push   0x2
c001e9fa:	56                   	push   esi
c001e9fb:	53                   	push   ebx
c001e9fc:	57                   	push   edi
c001e9fd:	55                   	push   ebp
c001e9fe:	e8 93 f1 ff ff       	call   c001db96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ea03:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001ea0b:	83 c4 20             	add    esp,0x20
c001ea0e:	56                   	push   esi
c001ea0f:	53                   	push   ebx
c001ea10:	57                   	push   edi
c001ea11:	55                   	push   ebp
c001ea12:	e8 bd f2 ff ff       	call   c001dcd4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001ea17:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001ea1e:	56                   	push   esi
c001ea1f:	53                   	push   ebx
c001ea20:	57                   	push   edi
c001ea21:	55                   	push   ebp
c001ea22:	e8 17 f2 ff ff       	call   c001dc3e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ea27:	b9 09 00 00 00       	mov    ecx,0x9
c001ea2c:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001ea34:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001ea38:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001ea3f:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001ea43:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001ea4a:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001ea4e:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001ea55:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001ea59:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001ea60:	83 ec 0c             	sub    esp,0xc
c001ea63:	fc                   	cld    
c001ea64:	89 e7                	mov    edi,esp
c001ea66:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001ea6d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ea6f:	55                   	push   ebp
c001ea70:	e8 59 f8 ff ff       	call   c001e2ce <PCI::foundDevice(PCIDeviceInfo)>
c001ea75:	81 c4 dc 00 00 00    	add    esp,0xdc
c001ea7b:	5b                   	pop    ebx
c001ea7c:	5e                   	pop    esi
c001ea7d:	5f                   	pop    edi
c001ea7e:	5d                   	pop    ebp
c001ea7f:	c3                   	ret    

c001ea80 <PCI::checkDevice(unsigned char, unsigned char)>:
c001ea80:	55                   	push   ebp
c001ea81:	57                   	push   edi
c001ea82:	56                   	push   esi
c001ea83:	53                   	push   ebx
c001ea84:	83 ec 0c             	sub    esp,0xc
c001ea87:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ea8b:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001ea90:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001ea95:	6a 00                	push   0x0
c001ea97:	56                   	push   esi
c001ea98:	57                   	push   edi
c001ea99:	55                   	push   ebp
c001ea9a:	e8 9f f1 ff ff       	call   c001dc3e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ea9f:	6a 00                	push   0x0
c001eaa1:	56                   	push   esi
c001eaa2:	57                   	push   edi
c001eaa3:	55                   	push   ebp
c001eaa4:	e8 65 fc ff ff       	call   c001e70e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001eaa9:	83 c4 20             	add    esp,0x20
c001eaac:	6a 00                	push   0x0
c001eaae:	56                   	push   esi
c001eaaf:	57                   	push   edi
c001eab0:	55                   	push   ebp
c001eab1:	e8 ac f1 ff ff       	call   c001dc62 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001eab6:	83 c4 10             	add    esp,0x10
c001eab9:	84 c0                	test   al,al
c001eabb:	79 27                	jns    c001eae4 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001eabd:	bb 01 00 00 00       	mov    ebx,0x1
c001eac2:	53                   	push   ebx
c001eac3:	56                   	push   esi
c001eac4:	57                   	push   edi
c001eac5:	55                   	push   ebp
c001eac6:	e8 73 f1 ff ff       	call   c001dc3e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001eacb:	83 c4 10             	add    esp,0x10
c001eace:	66 40                	inc    ax
c001ead0:	74 0c                	je     c001eade <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001ead2:	53                   	push   ebx
c001ead3:	56                   	push   esi
c001ead4:	57                   	push   edi
c001ead5:	55                   	push   ebp
c001ead6:	e8 33 fc ff ff       	call   c001e70e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001eadb:	83 c4 10             	add    esp,0x10
c001eade:	43                   	inc    ebx
c001eadf:	83 fb 08             	cmp    ebx,0x8
c001eae2:	75 de                	jne    c001eac2 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001eae4:	83 c4 0c             	add    esp,0xc
c001eae7:	5b                   	pop    ebx
c001eae8:	5e                   	pop    esi
c001eae9:	5f                   	pop    edi
c001eaea:	5d                   	pop    ebp
c001eaeb:	c3                   	ret    

c001eaec <PCI::detect()>:
c001eaec:	56                   	push   esi
c001eaed:	53                   	push   ebx
c001eaee:	53                   	push   ebx
c001eaef:	31 db                	xor    ebx,ebx
c001eaf1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eaf5:	6a 00                	push   0x0
c001eaf7:	6a 00                	push   0x0
c001eaf9:	6a 00                	push   0x0
c001eafb:	56                   	push   esi
c001eafc:	e8 61 f1 ff ff       	call   c001dc62 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001eb01:	83 c4 10             	add    esp,0x10
c001eb04:	a8 80                	test   al,0x80
c001eb06:	75 21                	jne    c001eb29 <PCI::detect()+0x3d>
c001eb08:	51                   	push   ecx
c001eb09:	51                   	push   ecx
c001eb0a:	6a 00                	push   0x0
c001eb0c:	56                   	push   esi
c001eb0d:	e8 98 f7 ff ff       	call   c001e2aa <PCI::checkBus(unsigned char)>
c001eb12:	83 c4 10             	add    esp,0x10
c001eb15:	eb 24                	jmp    c001eb3b <PCI::detect()+0x4f>
c001eb17:	52                   	push   edx
c001eb18:	52                   	push   edx
c001eb19:	53                   	push   ebx
c001eb1a:	43                   	inc    ebx
c001eb1b:	56                   	push   esi
c001eb1c:	e8 89 f7 ff ff       	call   c001e2aa <PCI::checkBus(unsigned char)>
c001eb21:	83 c4 10             	add    esp,0x10
c001eb24:	83 fb 08             	cmp    ebx,0x8
c001eb27:	74 12                	je     c001eb3b <PCI::detect()+0x4f>
c001eb29:	53                   	push   ebx
c001eb2a:	6a 00                	push   0x0
c001eb2c:	6a 00                	push   0x0
c001eb2e:	56                   	push   esi
c001eb2f:	e8 0a f1 ff ff       	call   c001dc3e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001eb34:	83 c4 10             	add    esp,0x10
c001eb37:	66 40                	inc    ax
c001eb39:	74 dc                	je     c001eb17 <PCI::detect()+0x2b>
c001eb3b:	58                   	pop    eax
c001eb3c:	5b                   	pop    ebx
c001eb3d:	5e                   	pop    esi
c001eb3e:	c3                   	ret    
c001eb3f:	90                   	nop

c001eb40 <IDE::close(int, int, void*)>:
c001eb40:	83 c8 ff             	or     eax,0xffffffff
c001eb43:	c3                   	ret    

c001eb44 <IDE::IDE()>:
c001eb44:	83 ec 0c             	sub    esp,0xc
c001eb47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb4b:	83 ec 08             	sub    esp,0x8
c001eb4e:	68 04 73 02 c0       	push   0xc0027304
c001eb53:	50                   	push   eax
c001eb54:	e8 0f fe fe ff       	call   c000e968 <HardDiskController::HardDiskController(char const*)>
c001eb59:	83 c4 10             	add    esp,0x10
c001eb5c:	ba 94 73 02 c0       	mov    edx,0xc0027394
c001eb61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb65:	89 10                	mov    DWORD PTR [eax],edx
c001eb67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb6b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001eb72:	90                   	nop
c001eb73:	83 c4 0c             	add    esp,0xc
c001eb76:	c3                   	ret    
c001eb77:	90                   	nop

c001eb78 <IDE::prepareInterrupt(unsigned char)>:
c001eb78:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb7d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eb81:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001eb89:	c3                   	ret    

c001eb8a <selectDrive(unsigned char, unsigned char)>:
c001eb8a:	c3                   	ret    
c001eb8b:	90                   	nop

c001eb8c <IDE::getBase(unsigned char)>:
c001eb8c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001eb91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb95:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001eb9d:	c3                   	ret    

c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001eb9e:	55                   	push   ebp
c001eb9f:	57                   	push   edi
c001eba0:	56                   	push   esi
c001eba1:	53                   	push   ebx
c001eba2:	83 ec 1c             	sub    esp,0x1c
c001eba5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001eba9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ebad:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001ebb0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ebb4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ebb8:	80 f9 03             	cmp    cl,0x3
c001ebbb:	77 51                	ja     c001ec0e <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001ebbd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ebc1:	0f b6 f2             	movzx  esi,dl
c001ebc4:	0f b6 db             	movzx  ebx,bl
c001ebc7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001ebca:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001ebce:	83 ca 80             	or     edx,0xffffff80
c001ebd1:	0f b6 d2             	movzx  edx,dl
c001ebd4:	52                   	push   edx
c001ebd5:	6a 0c                	push   0xc
c001ebd7:	56                   	push   esi
c001ebd8:	57                   	push   edi
c001ebd9:	e8 c0 ff ff ff       	call   c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ebde:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001ebe3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ebe7:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001ebeb:	ee                   	out    dx,al
c001ebec:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001ebf1:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001ebf5:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001ebf9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ebfd:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ec05:	83 c4 2c             	add    esp,0x2c
c001ec08:	5b                   	pop    ebx
c001ec09:	5e                   	pop    esi
c001ec0a:	5f                   	pop    edi
c001ec0b:	5d                   	pop    ebp
c001ec0c:	eb 90                	jmp    c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec0e:	80 fb 07             	cmp    bl,0x7
c001ec11:	77 12                	ja     c001ec25 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001ec13:	0f b6 d2             	movzx  edx,dl
c001ec16:	0f b6 db             	movzx  ebx,bl
c001ec19:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001ec21:	89 da                	mov    edx,ebx
c001ec23:	eb 2f                	jmp    c001ec54 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001ec25:	80 fb 0d             	cmp    bl,0xd
c001ec28:	77 13                	ja     c001ec3d <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001ec2a:	0f b6 d2             	movzx  edx,dl
c001ec2d:	0f b6 db             	movzx  ebx,bl
c001ec30:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001ec37:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ec3b:	eb 17                	jmp    c001ec54 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001ec3d:	80 fb 15             	cmp    bl,0x15
c001ec40:	77 13                	ja     c001ec55 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ec42:	0f b6 d2             	movzx  edx,dl
c001ec45:	0f b6 db             	movzx  ebx,bl
c001ec48:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001ec50:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ec54:	ee                   	out    dx,al
c001ec55:	83 c4 1c             	add    esp,0x1c
c001ec58:	5b                   	pop    ebx
c001ec59:	5e                   	pop    esi
c001ec5a:	5f                   	pop    edi
c001ec5b:	5d                   	pop    ebp
c001ec5c:	c3                   	ret    
c001ec5d:	90                   	nop

c001ec5e <IDE::read(unsigned char, unsigned char)>:
c001ec5e:	55                   	push   ebp
c001ec5f:	57                   	push   edi
c001ec60:	56                   	push   esi
c001ec61:	53                   	push   ebx
c001ec62:	83 ec 1c             	sub    esp,0x1c
c001ec65:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ec69:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ec6d:	8d 43 f8             	lea    eax,[ebx-0x8]
c001ec70:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ec74:	3c 03                	cmp    al,0x3
c001ec76:	77 43                	ja     c001ecbb <IDE::read(unsigned char, unsigned char)+0x5d>
c001ec78:	0f b6 f2             	movzx  esi,dl
c001ec7b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001ec7e:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001ec82:	83 c8 80             	or     eax,0xffffff80
c001ec85:	0f b6 c0             	movzx  eax,al
c001ec88:	50                   	push   eax
c001ec89:	6a 0c                	push   0xc
c001ec8b:	56                   	push   esi
c001ec8c:	57                   	push   edi
c001ec8d:	e8 0c ff ff ff       	call   c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec92:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001ec97:	0f b6 c3             	movzx  eax,bl
c001ec9a:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001ec9e:	ec                   	in     al,dx
c001ec9f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001eca3:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001eca8:	52                   	push   edx
c001eca9:	6a 0c                	push   0xc
c001ecab:	56                   	push   esi
c001ecac:	57                   	push   edi
c001ecad:	e8 ec fe ff ff       	call   c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ecb2:	83 c4 20             	add    esp,0x20
c001ecb5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ecb9:	eb 49                	jmp    c001ed04 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ecbb:	80 fb 07             	cmp    bl,0x7
c001ecbe:	77 12                	ja     c001ecd2 <IDE::read(unsigned char, unsigned char)+0x74>
c001ecc0:	0f b6 d2             	movzx  edx,dl
c001ecc3:	0f b6 c3             	movzx  eax,bl
c001ecc6:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001ecce:	89 c2                	mov    edx,eax
c001ecd0:	eb 31                	jmp    c001ed03 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ecd2:	80 fb 0d             	cmp    bl,0xd
c001ecd5:	77 13                	ja     c001ecea <IDE::read(unsigned char, unsigned char)+0x8c>
c001ecd7:	0f b6 d2             	movzx  edx,dl
c001ecda:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001ece1:	0f b6 d3             	movzx  edx,bl
c001ece4:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ece8:	eb 19                	jmp    c001ed03 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ecea:	31 c0                	xor    eax,eax
c001ecec:	80 fb 15             	cmp    bl,0x15
c001ecef:	77 13                	ja     c001ed04 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ecf1:	0f b6 d2             	movzx  edx,dl
c001ecf4:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001ecfc:	0f b6 d3             	movzx  edx,bl
c001ecff:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ed03:	ec                   	in     al,dx
c001ed04:	83 c4 1c             	add    esp,0x1c
c001ed07:	5b                   	pop    ebx
c001ed08:	5e                   	pop    esi
c001ed09:	5f                   	pop    edi
c001ed0a:	5d                   	pop    ebp
c001ed0b:	c3                   	ret    

c001ed0c <IDE::waitInterrupt(unsigned char)>:
c001ed0c:	55                   	push   ebp
c001ed0d:	57                   	push   edi
c001ed0e:	56                   	push   esi
c001ed0f:	53                   	push   ebx
c001ed10:	31 db                	xor    ebx,ebx
c001ed12:	83 ec 0c             	sub    esp,0xc
c001ed15:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ed19:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ed1e:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ed26:	89 e8                	mov    eax,ebp
c001ed28:	84 c0                	test   al,al
c001ed2a:	75 30                	jne    c001ed5c <IDE::waitInterrupt(unsigned char)+0x50>
c001ed2c:	50                   	push   eax
c001ed2d:	6a 0c                	push   0xc
c001ed2f:	56                   	push   esi
c001ed30:	57                   	push   edi
c001ed31:	e8 28 ff ff ff       	call   c001ec5e <IDE::read(unsigned char, unsigned char)>
c001ed36:	83 c4 10             	add    esp,0x10
c001ed39:	a8 01                	test   al,0x1
c001ed3b:	75 27                	jne    c001ed64 <IDE::waitInterrupt(unsigned char)+0x58>
c001ed3d:	f6 c3 04             	test   bl,0x4
c001ed40:	75 12                	jne    c001ed54 <IDE::waitInterrupt(unsigned char)+0x48>
c001ed42:	83 fb 32             	cmp    ebx,0x32
c001ed45:	7e 0d                	jle    c001ed54 <IDE::waitInterrupt(unsigned char)+0x48>
c001ed47:	83 ec 0c             	sub    esp,0xc
c001ed4a:	6a 64                	push   0x64
c001ed4c:	e8 db a2 ff ff       	call   c001902c <milliTenthSleep(unsigned int)>
c001ed51:	83 c4 10             	add    esp,0x10
c001ed54:	83 fb 3c             	cmp    ebx,0x3c
c001ed57:	74 0b                	je     c001ed64 <IDE::waitInterrupt(unsigned char)+0x58>
c001ed59:	43                   	inc    ebx
c001ed5a:	eb c2                	jmp    c001ed1e <IDE::waitInterrupt(unsigned char)+0x12>
c001ed5c:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ed64:	83 c4 0c             	add    esp,0xc
c001ed67:	89 e8                	mov    eax,ebp
c001ed69:	5b                   	pop    ebx
c001ed6a:	5e                   	pop    esi
c001ed6b:	5f                   	pop    edi
c001ed6c:	5d                   	pop    ebp
c001ed6d:	c3                   	ret    

c001ed6e <ideChannel0IRQHandler(regs*, void*)>:
c001ed6e:	83 ec 10             	sub    esp,0x10
c001ed71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ed75:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ed7c:	6a 07                	push   0x7
c001ed7e:	6a 00                	push   0x0
c001ed80:	50                   	push   eax
c001ed81:	e8 d8 fe ff ff       	call   c001ec5e <IDE::read(unsigned char, unsigned char)>
c001ed86:	83 c4 1c             	add    esp,0x1c
c001ed89:	c3                   	ret    

c001ed8a <ideChannel1IRQHandler(regs*, void*)>:
c001ed8a:	83 ec 10             	sub    esp,0x10
c001ed8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ed91:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ed98:	6a 07                	push   0x7
c001ed9a:	6a 01                	push   0x1
c001ed9c:	50                   	push   eax
c001ed9d:	e8 bc fe ff ff       	call   c001ec5e <IDE::read(unsigned char, unsigned char)>
c001eda2:	83 c4 1c             	add    esp,0x1c
c001eda5:	c3                   	ret    

c001eda6 <IDE::enableIRQs(unsigned char, bool)>:
c001eda6:	57                   	push   edi
c001eda7:	56                   	push   esi
c001eda8:	be 04 00 00 00       	mov    esi,0x4
c001edad:	53                   	push   ebx
c001edae:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001edb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001edb7:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001edbc:	0f 94 c0             	sete   al
c001edbf:	d1 e0                	shl    eax,1
c001edc1:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001edc8:	0f b6 c0             	movzx  eax,al
c001edcb:	50                   	push   eax
c001edcc:	6a 0c                	push   0xc
c001edce:	57                   	push   edi
c001edcf:	53                   	push   ebx
c001edd0:	e8 c9 fd ff ff       	call   c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001edd5:	83 c4 10             	add    esp,0x10
c001edd8:	50                   	push   eax
c001edd9:	6a 0c                	push   0xc
c001eddb:	57                   	push   edi
c001eddc:	53                   	push   ebx
c001eddd:	e8 7c fe ff ff       	call   c001ec5e <IDE::read(unsigned char, unsigned char)>
c001ede2:	83 c4 10             	add    esp,0x10
c001ede5:	4e                   	dec    esi
c001ede6:	75 f0                	jne    c001edd8 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001ede8:	5b                   	pop    ebx
c001ede9:	5e                   	pop    esi
c001edea:	5f                   	pop    edi
c001edeb:	c3                   	ret    

c001edec <IDE::open(int, int, void*)>:
c001edec:	55                   	push   ebp
c001eded:	57                   	push   edi
c001edee:	56                   	push   esi
c001edef:	53                   	push   ebx
c001edf0:	83 ec 1c             	sub    esp,0x1c
c001edf3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001edf7:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ee00:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ee09:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ee10:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ee17:	0f 85 b0 02 00 00    	jne    c001f0cd <IDE::open(int, int, void*)+0x2e1>
c001ee1d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ee23:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001ee27:	83 e0 7f             	and    eax,0x7f
c001ee2a:	3c 05                	cmp    al,0x5
c001ee2c:	74 04                	je     c001ee32 <IDE::open(int, int, void*)+0x46>
c001ee2e:	3c 0f                	cmp    al,0xf
c001ee30:	75 32                	jne    c001ee64 <IDE::open(int, int, void*)+0x78>
c001ee32:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ee38:	83 e0 fc             	and    eax,0xfffffffc
c001ee3b:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ee42:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ee48:	83 e0 fc             	and    eax,0xfffffffc
c001ee4b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ee52:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ee58:	83 e0 fc             	and    eax,0xfffffffc
c001ee5b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ee62:	eb 14                	jmp    c001ee78 <IDE::open(int, int, void*)+0x8c>
c001ee64:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ee6e:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ee78:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ee7f:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001ee86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ee8a:	89 c6                	mov    esi,eax
c001ee8c:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ee91:	c1 e6 10             	shl    esi,0x10
c001ee94:	89 e8                	mov    eax,ebp
c001ee96:	89 fa                	mov    edx,edi
c001ee98:	c1 e0 0b             	shl    eax,0xb
c001ee9b:	09 f0                	or     eax,esi
c001ee9d:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001eea4:	c1 e6 08             	shl    esi,0x8
c001eea7:	09 c6                	or     esi,eax
c001eea9:	89 f0                	mov    eax,esi
c001eeab:	0d 08 00 00 80       	or     eax,0x80000008
c001eeb0:	ef                   	out    dx,eax
c001eeb1:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001eeb6:	89 ca                	mov    edx,ecx
c001eeb8:	ed                   	in     eax,dx
c001eeb9:	c1 e8 10             	shr    eax,0x10
c001eebc:	3d ff ff 00 00       	cmp    eax,0xffff
c001eec1:	0f 84 f5 00 00 00    	je     c001efbc <IDE::open(int, int, void*)+0x1d0>
c001eec7:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001eecd:	89 fa                	mov    edx,edi
c001eecf:	89 f0                	mov    eax,esi
c001eed1:	ef                   	out    dx,eax
c001eed2:	b0 fe                	mov    al,0xfe
c001eed4:	89 ca                	mov    edx,ecx
c001eed6:	ee                   	out    dx,al
c001eed7:	89 f0                	mov    eax,esi
c001eed9:	89 fa                	mov    edx,edi
c001eedb:	ef                   	out    dx,eax
c001eedc:	89 ca                	mov    edx,ecx
c001eede:	ed                   	in     eax,dx
c001eedf:	3c fe                	cmp    al,0xfe
c001eee1:	0f 85 a9 00 00 00    	jne    c001ef90 <IDE::open(int, int, void*)+0x1a4>
c001eee7:	8b 15 e8 89 02 c0    	mov    edx,DWORD PTR ds:0xc00289e8
c001eeed:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001eef4:	74 33                	je     c001ef29 <IDE::open(int, int, void*)+0x13d>
c001eef6:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001eefc:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001ef00:	40                   	inc    eax
c001ef01:	83 ec 0c             	sub    esp,0xc
c001ef04:	0f b6 c0             	movzx  eax,al
c001ef07:	50                   	push   eax
c001ef08:	55                   	push   ebp
c001ef09:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ef0d:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001ef13:	51                   	push   ecx
c001ef14:	e8 1f 37 ff ff       	call   c0012638 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001ef19:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001ef1e:	83 c4 1c             	add    esp,0x1c
c001ef21:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ef27:	eb 0a                	jmp    c001ef33 <IDE::open(int, int, void*)+0x147>
c001ef29:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001ef33:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001ef3a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ef41:	c1 e1 10             	shl    ecx,0x10
c001ef44:	c1 e0 08             	shl    eax,0x8
c001ef47:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ef4c:	09 c1                	or     ecx,eax
c001ef4e:	89 fa                	mov    edx,edi
c001ef50:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ef57:	c1 e0 0b             	shl    eax,0xb
c001ef5a:	09 c1                	or     ecx,eax
c001ef5c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001ef62:	89 c8                	mov    eax,ecx
c001ef64:	ef                   	out    dx,eax
c001ef65:	be fc 0c 00 00       	mov    esi,0xcfc
c001ef6a:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001ef70:	89 f2                	mov    edx,esi
c001ef72:	ee                   	out    dx,al
c001ef73:	89 c8                	mov    eax,ecx
c001ef75:	89 fa                	mov    edx,edi
c001ef77:	ef                   	out    dx,eax
c001ef78:	89 f2                	mov    edx,esi
c001ef7a:	ed                   	in     eax,dx
c001ef7b:	0f b6 c0             	movzx  eax,al
c001ef7e:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001ef84:	74 46                	je     c001efcc <IDE::open(int, int, void*)+0x1e0>
c001ef86:	83 ec 0c             	sub    esp,0xc
c001ef89:	68 1c 73 02 c0       	push   0xc002731c
c001ef8e:	eb 34                	jmp    c001efc4 <IDE::open(int, int, void*)+0x1d8>
c001ef90:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ef99:	75 17                	jne    c001efb2 <IDE::open(int, int, void*)+0x1c6>
c001ef9b:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001efa0:	74 07                	je     c001efa9 <IDE::open(int, int, void*)+0x1bd>
c001efa2:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001efa7:	75 09                	jne    c001efb2 <IDE::open(int, int, void*)+0x1c6>
c001efa9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001efb0:	eb 1a                	jmp    c001efcc <IDE::open(int, int, void*)+0x1e0>
c001efb2:	83 ec 0c             	sub    esp,0xc
c001efb5:	68 24 73 02 c0       	push   0xc0027324
c001efba:	eb 08                	jmp    c001efc4 <IDE::open(int, int, void*)+0x1d8>
c001efbc:	83 ec 0c             	sub    esp,0xc
c001efbf:	68 55 73 02 c0       	push   0xc0027355
c001efc4:	e8 60 61 ff ff       	call   c0015129 <Krnl::panic(char const*)>
c001efc9:	83 c4 10             	add    esp,0x10
c001efcc:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001efd3:	79 1a                	jns    c001efef <IDE::open(int, int, void*)+0x203>
c001efd5:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001efdb:	83 e0 fc             	and    eax,0xfffffffc
c001efde:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001efe5:	83 c0 08             	add    eax,0x8
c001efe8:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001efef:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001eff5:	89 c2                	mov    edx,eax
c001eff7:	83 e2 0f             	and    edx,0xf
c001effa:	66 83 fa 08          	cmp    dx,0x8
c001effe:	75 0a                	jne    c001f00a <IDE::open(int, int, void*)+0x21e>
c001f000:	83 e8 02             	sub    eax,0x2
c001f003:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f00a:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001f010:	89 c2                	mov    edx,eax
c001f012:	83 e2 0f             	and    edx,0xf
c001f015:	66 83 fa 08          	cmp    dx,0x8
c001f019:	75 0a                	jne    c001f025 <IDE::open(int, int, void*)+0x239>
c001f01b:	83 e8 02             	sub    eax,0x2
c001f01e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f025:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001f02c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001f033:	89 d0                	mov    eax,edx
c001f035:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f038:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f03c:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001f040:	8d 4a 01             	lea    ecx,[edx+0x1]
c001f043:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001f048:	0f b6 c9             	movzx  ecx,cl
c001f04b:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001f052:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f055:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f059:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001f05d:	8d 50 02             	lea    edx,[eax+0x2]
c001f060:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001f065:	0f b6 d2             	movzx  edx,dl
c001f068:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001f06e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f071:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f075:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001f079:	8d 48 03             	lea    ecx,[eax+0x3]
c001f07c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001f081:	0f b6 c9             	movzx  ecx,cl
c001f084:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001f08a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f08d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f091:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001f095:	8d 50 04             	lea    edx,[eax+0x4]
c001f098:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001f09e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001f0a3:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001f0aa:	66 85 f6             	test   si,si
c001f0ad:	74 5b                	je     c001f10a <IDE::open(int, int, void*)+0x31e>
c001f0af:	0f b6 d2             	movzx  edx,dl
c001f0b2:	83 c0 05             	add    eax,0x5
c001f0b5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f0b8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f0bc:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001f0c0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001f0c6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001f0cb:	eb 3d                	jmp    c001f10a <IDE::open(int, int, void*)+0x31e>
c001f0cd:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001f0d3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001f0da:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001f0e1:	66 05 06 02          	add    ax,0x206
c001f0e5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f0ec:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001f0f3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001f0fa:	66 05 06 02          	add    ax,0x206
c001f0fe:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f105:	e9 e5 fe ff ff       	jmp    c001efef <IDE::open(int, int, void*)+0x203>
c001f10a:	50                   	push   eax
c001f10b:	50                   	push   eax
c001f10c:	6a 00                	push   0x0
c001f10e:	53                   	push   ebx
c001f10f:	e8 64 fa ff ff       	call   c001eb78 <IDE::prepareInterrupt(unsigned char)>
c001f114:	5a                   	pop    edx
c001f115:	59                   	pop    ecx
c001f116:	6a 01                	push   0x1
c001f118:	53                   	push   ebx
c001f119:	e8 5a fa ff ff       	call   c001eb78 <IDE::prepareInterrupt(unsigned char)>
c001f11e:	83 c4 0c             	add    esp,0xc
c001f121:	6a 00                	push   0x0
c001f123:	6a 00                	push   0x0
c001f125:	53                   	push   ebx
c001f126:	e8 7b fc ff ff       	call   c001eda6 <IDE::enableIRQs(unsigned char, bool)>
c001f12b:	83 c4 0c             	add    esp,0xc
c001f12e:	6a 00                	push   0x0
c001f130:	6a 01                	push   0x1
c001f132:	53                   	push   ebx
c001f133:	e8 6e fc ff ff       	call   c001eda6 <IDE::enableIRQs(unsigned char, bool)>
c001f138:	83 c4 10             	add    esp,0x10
c001f13b:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001f142:	74 34                	je     c001f178 <IDE::open(int, int, void*)+0x38c>
c001f144:	83 ec 0c             	sub    esp,0xc
c001f147:	53                   	push   ebx
c001f148:	6a 01                	push   0x1
c001f14a:	68 6e ed 01 c0       	push   0xc001ed6e
c001f14f:	6a 0e                	push   0xe
c001f151:	53                   	push   ebx
c001f152:	e8 db f3 fe ff       	call   c000e532 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f157:	83 c4 14             	add    esp,0x14
c001f15a:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001f160:	53                   	push   ebx
c001f161:	6a 01                	push   0x1
c001f163:	68 8a ed 01 c0       	push   0xc001ed8a
c001f168:	6a 0f                	push   0xf
c001f16a:	53                   	push   ebx
c001f16b:	e8 c2 f3 fe ff       	call   c000e532 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f170:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001f176:	eb 38                	jmp    c001f1b0 <IDE::open(int, int, void*)+0x3c4>
c001f178:	83 ec 0c             	sub    esp,0xc
c001f17b:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001f185:	53                   	push   ebx
c001f186:	6a 00                	push   0x0
c001f188:	68 6e ed 01 c0       	push   0xc001ed6e
c001f18d:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001f193:	53                   	push   ebx
c001f194:	e8 99 f3 fe ff       	call   c000e532 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f199:	83 c4 14             	add    esp,0x14
c001f19c:	53                   	push   ebx
c001f19d:	6a 00                	push   0x0
c001f19f:	68 8a ed 01 c0       	push   0xc001ed8a
c001f1a4:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001f1aa:	53                   	push   ebx
c001f1ab:	e8 82 f3 fe ff       	call   c000e532 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f1b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f1b2:	83 c4 20             	add    esp,0x20
c001f1b5:	83 ec 0c             	sub    esp,0xc
c001f1b8:	53                   	push   ebx
c001f1b9:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001f1bc:	83 c4 0c             	add    esp,0xc
c001f1bf:	6a 07                	push   0x7
c001f1c1:	6a 00                	push   0x0
c001f1c3:	53                   	push   ebx
c001f1c4:	e8 95 fa ff ff       	call   c001ec5e <IDE::read(unsigned char, unsigned char)>
c001f1c9:	83 c4 0c             	add    esp,0xc
c001f1cc:	6a 07                	push   0x7
c001f1ce:	6a 01                	push   0x1
c001f1d0:	53                   	push   ebx
c001f1d1:	e8 88 fa ff ff       	call   c001ec5e <IDE::read(unsigned char, unsigned char)>
c001f1d6:	83 c4 0c             	add    esp,0xc
c001f1d9:	6a 01                	push   0x1
c001f1db:	6a 00                	push   0x0
c001f1dd:	53                   	push   ebx
c001f1de:	e8 c3 fb ff ff       	call   c001eda6 <IDE::enableIRQs(unsigned char, bool)>
c001f1e3:	83 c4 0c             	add    esp,0xc
c001f1e6:	6a 01                	push   0x1
c001f1e8:	6a 01                	push   0x1
c001f1ea:	53                   	push   ebx
c001f1eb:	e8 b6 fb ff ff       	call   c001eda6 <IDE::enableIRQs(unsigned char, bool)>
c001f1f0:	83 c4 2c             	add    esp,0x2c
c001f1f3:	31 c0                	xor    eax,eax
c001f1f5:	5b                   	pop    ebx
c001f1f6:	5e                   	pop    esi
c001f1f7:	5f                   	pop    edi
c001f1f8:	5d                   	pop    ebp
c001f1f9:	c3                   	ret    

c001f1fa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001f1fa:	55                   	push   ebp
c001f1fb:	57                   	push   edi
c001f1fc:	56                   	push   esi
c001f1fd:	53                   	push   ebx
c001f1fe:	83 ec 1c             	sub    esp,0x1c
c001f201:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f205:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f209:	8d 50 f8             	lea    edx,[eax-0x8]
c001f20c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f210:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001f214:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f218:	80 fa 03             	cmp    dl,0x3
c001f21b:	77 5d                	ja     c001f27a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001f21d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f221:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f225:	0f b6 db             	movzx  ebx,bl
c001f228:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001f22b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001f22f:	83 ca 80             	or     edx,0xffffff80
c001f232:	0f b6 d2             	movzx  edx,dl
c001f235:	52                   	push   edx
c001f236:	6a 0c                	push   0xc
c001f238:	53                   	push   ebx
c001f239:	56                   	push   esi
c001f23a:	e8 5f f9 ff ff       	call   c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f23f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001f244:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f248:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f24c:	0f b6 c0             	movzx  eax,al
c001f24f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001f253:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f255:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f25a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001f25e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001f262:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f266:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001f26e:	83 c4 2c             	add    esp,0x2c
c001f271:	5b                   	pop    ebx
c001f272:	5e                   	pop    esi
c001f273:	5f                   	pop    edi
c001f274:	5d                   	pop    ebp
c001f275:	e9 24 f9 ff ff       	jmp    c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f27a:	3c 07                	cmp    al,0x7
c001f27c:	77 10                	ja     c001f28e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001f27e:	0f b6 db             	movzx  ebx,bl
c001f281:	0f b6 d0             	movzx  edx,al
c001f284:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001f28c:	eb 2d                	jmp    c001f2bb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001f28e:	3c 0d                	cmp    al,0xd
c001f290:	77 13                	ja     c001f2a5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001f292:	0f b6 db             	movzx  ebx,bl
c001f295:	0f b6 c0             	movzx  eax,al
c001f298:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001f29f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001f2a3:	eb 16                	jmp    c001f2bb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001f2a5:	3c 15                	cmp    al,0x15
c001f2a7:	77 14                	ja     c001f2bd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001f2a9:	0f b6 db             	movzx  ebx,bl
c001f2ac:	0f b6 c0             	movzx  eax,al
c001f2af:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001f2b7:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001f2bb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f2bd:	83 c4 1c             	add    esp,0x1c
c001f2c0:	5b                   	pop    ebx
c001f2c1:	5e                   	pop    esi
c001f2c2:	5f                   	pop    edi
c001f2c3:	5d                   	pop    ebp
c001f2c4:	c3                   	ret    
c001f2c5:	90                   	nop

c001f2c6 <IDE::detect()>:
c001f2c6:	55                   	push   ebp
c001f2c7:	57                   	push   edi
c001f2c8:	56                   	push   esi
c001f2c9:	53                   	push   ebx
c001f2ca:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001f2d0:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001f2d7:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001f2de:	0f 85 97 02 00 00    	jne    c001f57b <IDE::detect()+0x2b5>
c001f2e4:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001f2eb:	31 f6                	xor    esi,esi
c001f2ed:	31 ed                	xor    ebp,ebp
c001f2ef:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001f2f7:	89 e8                	mov    eax,ebp
c001f2f9:	c1 e0 06             	shl    eax,0x6
c001f2fc:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001f304:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f308:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001f30c:	c1 e0 04             	shl    eax,0x4
c001f30f:	83 c8 a0             	or     eax,0xffffffa0
c001f312:	0f b6 c0             	movzx  eax,al
c001f315:	50                   	push   eax
c001f316:	6a 06                	push   0x6
c001f318:	56                   	push   esi
c001f319:	53                   	push   ebx
c001f31a:	e8 7f f8 ff ff       	call   c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f31f:	83 c4 0c             	add    esp,0xc
c001f322:	6a 0c                	push   0xc
c001f324:	56                   	push   esi
c001f325:	53                   	push   ebx
c001f326:	e8 33 f9 ff ff       	call   c001ec5e <IDE::read(unsigned char, unsigned char)>
c001f32b:	83 c4 0c             	add    esp,0xc
c001f32e:	6a 0c                	push   0xc
c001f330:	56                   	push   esi
c001f331:	53                   	push   ebx
c001f332:	e8 27 f9 ff ff       	call   c001ec5e <IDE::read(unsigned char, unsigned char)>
c001f337:	83 c4 0c             	add    esp,0xc
c001f33a:	6a 0c                	push   0xc
c001f33c:	56                   	push   esi
c001f33d:	53                   	push   ebx
c001f33e:	e8 1b f9 ff ff       	call   c001ec5e <IDE::read(unsigned char, unsigned char)>
c001f343:	83 c4 0c             	add    esp,0xc
c001f346:	6a 0c                	push   0xc
c001f348:	56                   	push   esi
c001f349:	53                   	push   ebx
c001f34a:	e8 0f f9 ff ff       	call   c001ec5e <IDE::read(unsigned char, unsigned char)>
c001f34f:	68 ec 00 00 00       	push   0xec
c001f354:	6a 07                	push   0x7
c001f356:	56                   	push   esi
c001f357:	53                   	push   ebx
c001f358:	e8 41 f8 ff ff       	call   c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f35d:	83 c4 1c             	add    esp,0x1c
c001f360:	6a 0c                	push   0xc
c001f362:	56                   	push   esi
c001f363:	53                   	push   ebx
c001f364:	e8 f5 f8 ff ff       	call   c001ec5e <IDE::read(unsigned char, unsigned char)>
c001f369:	83 c4 0c             	add    esp,0xc
c001f36c:	6a 0c                	push   0xc
c001f36e:	56                   	push   esi
c001f36f:	53                   	push   ebx
c001f370:	e8 e9 f8 ff ff       	call   c001ec5e <IDE::read(unsigned char, unsigned char)>
c001f375:	83 c4 0c             	add    esp,0xc
c001f378:	6a 0c                	push   0xc
c001f37a:	56                   	push   esi
c001f37b:	53                   	push   ebx
c001f37c:	e8 dd f8 ff ff       	call   c001ec5e <IDE::read(unsigned char, unsigned char)>
c001f381:	83 c4 0c             	add    esp,0xc
c001f384:	6a 0c                	push   0xc
c001f386:	56                   	push   esi
c001f387:	53                   	push   ebx
c001f388:	e8 d1 f8 ff ff       	call   c001ec5e <IDE::read(unsigned char, unsigned char)>
c001f38d:	83 c4 0c             	add    esp,0xc
c001f390:	6a 0c                	push   0xc
c001f392:	56                   	push   esi
c001f393:	53                   	push   ebx
c001f394:	e8 c5 f8 ff ff       	call   c001ec5e <IDE::read(unsigned char, unsigned char)>
c001f399:	83 c4 10             	add    esp,0x10
c001f39c:	84 c0                	test   al,al
c001f39e:	0f 84 5f 01 00 00    	je     c001f503 <IDE::detect()+0x23d>
c001f3a4:	31 ff                	xor    edi,edi
c001f3a6:	50                   	push   eax
c001f3a7:	6a 0c                	push   0xc
c001f3a9:	56                   	push   esi
c001f3aa:	53                   	push   ebx
c001f3ab:	e8 ae f8 ff ff       	call   c001ec5e <IDE::read(unsigned char, unsigned char)>
c001f3b0:	83 c4 10             	add    esp,0x10
c001f3b3:	a8 01                	test   al,0x1
c001f3b5:	0f 85 69 01 00 00    	jne    c001f524 <IDE::detect()+0x25e>
c001f3bb:	84 c0                	test   al,al
c001f3bd:	78 04                	js     c001f3c3 <IDE::detect()+0xfd>
c001f3bf:	a8 08                	test   al,0x8
c001f3c1:	75 23                	jne    c001f3e6 <IDE::detect()+0x120>
c001f3c3:	47                   	inc    edi
c001f3c4:	81 ff 17 01 00 00    	cmp    edi,0x117
c001f3ca:	7e da                	jle    c001f3a6 <IDE::detect()+0xe0>
c001f3cc:	83 ec 0c             	sub    esp,0xc
c001f3cf:	6a 32                	push   0x32
c001f3d1:	e8 56 9c ff ff       	call   c001902c <milliTenthSleep(unsigned int)>
c001f3d6:	83 c4 10             	add    esp,0x10
c001f3d9:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001f3df:	75 c5                	jne    c001f3a6 <IDE::detect()+0xe0>
c001f3e1:	e9 3e 01 00 00       	jmp    c001f524 <IDE::detect()+0x25e>
c001f3e6:	31 c9                	xor    ecx,ecx
c001f3e8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001f3ec:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001f3f0:	83 ec 0c             	sub    esp,0xc
c001f3f3:	68 80 00 00 00       	push   0x80
c001f3f8:	57                   	push   edi
c001f3f9:	6a 00                	push   0x0
c001f3fb:	56                   	push   esi
c001f3fc:	53                   	push   ebx
c001f3fd:	e8 f8 fd ff ff       	call   c001f1fa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001f402:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001f407:	89 e8                	mov    eax,ebp
c001f409:	89 d1                	mov    ecx,edx
c001f40b:	c1 e0 06             	shl    eax,0x6
c001f40e:	01 d8                	add    eax,ebx
c001f410:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001f417:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001f41e:	89 f2                	mov    edx,esi
c001f420:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001f426:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001f42a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001f430:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001f434:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001f43b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001f443:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001f44a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001f452:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001f458:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001f45f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001f465:	8d 54 24 58          	lea    edx,[esp+0x58]
c001f469:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001f46d:	83 c4 20             	add    esp,0x20
c001f470:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001f473:	83 c0 02             	add    eax,0x2
c001f476:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001f47c:	83 c7 02             	add    edi,0x2
c001f47f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001f482:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001f488:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001f48c:	75 e2                	jne    c001f470 <IDE::detect()+0x1aa>
c001f48e:	89 e8                	mov    eax,ebp
c001f490:	c1 e0 06             	shl    eax,0x6
c001f493:	01 d8                	add    eax,ebx
c001f495:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001f49b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001f4a2:	66 c1 ea 09          	shr    dx,0x9
c001f4a6:	83 e2 01             	and    edx,0x1
c001f4a9:	84 c9                	test   cl,cl
c001f4ab:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001f4b1:	75 22                	jne    c001f4d5 <IDE::detect()+0x20f>
c001f4b3:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001f4ba:	74 46                	je     c001f502 <IDE::detect()+0x23c>
c001f4bc:	83 ec 0c             	sub    esp,0xc
c001f4bf:	68 7c 01 00 00       	push   0x17c
c001f4c4:	e8 92 a8 fe ff       	call   c0009d5b <malloc>
c001f4c9:	89 c7                	mov    edi,eax
c001f4cb:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4ce:	e8 35 06 00 00       	call   c001fb08 <ATA::ATA()>
c001f4d3:	eb 17                	jmp    c001f4ec <IDE::detect()+0x226>
c001f4d5:	83 ec 0c             	sub    esp,0xc
c001f4d8:	68 84 01 00 00       	push   0x184
c001f4dd:	e8 79 a8 fe ff       	call   c0009d5b <malloc>
c001f4e2:	89 c7                	mov    edi,eax
c001f4e4:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4e7:	e8 a4 0c 00 00       	call   c0020190 <ATAPI::ATAPI()>
c001f4ec:	5a                   	pop    edx
c001f4ed:	59                   	pop    ecx
c001f4ee:	57                   	push   edi
c001f4ef:	53                   	push   ebx
c001f4f0:	e8 c5 f0 fe ff       	call   c000e5ba <Device::addChild(Device*)>
c001f4f5:	8b 07                	mov    eax,DWORD PTR [edi]
c001f4f7:	53                   	push   ebx
c001f4f8:	55                   	push   ebp
c001f4f9:	6a 00                	push   0x0
c001f4fb:	57                   	push   edi
c001f4fc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f4ff:	83 c4 20             	add    esp,0x20
c001f502:	45                   	inc    ebp
c001f503:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001f508:	74 0d                	je     c001f517 <IDE::detect()+0x251>
c001f50a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001f512:	e9 e0 fd ff ff       	jmp    c001f2f7 <IDE::detect()+0x31>
c001f517:	4e                   	dec    esi
c001f518:	74 61                	je     c001f57b <IDE::detect()+0x2b5>
c001f51a:	be 01 00 00 00       	mov    esi,0x1
c001f51f:	e9 cb fd ff ff       	jmp    c001f2ef <IDE::detect()+0x29>
c001f524:	50                   	push   eax
c001f525:	6a 04                	push   0x4
c001f527:	56                   	push   esi
c001f528:	53                   	push   ebx
c001f529:	e8 30 f7 ff ff       	call   c001ec5e <IDE::read(unsigned char, unsigned char)>
c001f52e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001f532:	83 c4 0c             	add    esp,0xc
c001f535:	6a 05                	push   0x5
c001f537:	56                   	push   esi
c001f538:	53                   	push   ebx
c001f539:	e8 20 f7 ff ff       	call   c001ec5e <IDE::read(unsigned char, unsigned char)>
c001f53e:	83 c4 10             	add    esp,0x10
c001f541:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001f545:	80 fa 14             	cmp    dl,0x14
c001f548:	75 04                	jne    c001f54e <IDE::detect()+0x288>
c001f54a:	3c eb                	cmp    al,0xeb
c001f54c:	eb 07                	jmp    c001f555 <IDE::detect()+0x28f>
c001f54e:	3c 96                	cmp    al,0x96
c001f550:	75 b1                	jne    c001f503 <IDE::detect()+0x23d>
c001f552:	80 fa 69             	cmp    dl,0x69
c001f555:	75 ac                	jne    c001f503 <IDE::detect()+0x23d>
c001f557:	68 a1 00 00 00       	push   0xa1
c001f55c:	6a 07                	push   0x7
c001f55e:	56                   	push   esi
c001f55f:	53                   	push   ebx
c001f560:	e8 39 f6 ff ff       	call   c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f565:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001f56c:	e8 bb 9a ff ff       	call   c001902c <milliTenthSleep(unsigned int)>
c001f571:	83 c4 10             	add    esp,0x10
c001f574:	b1 01                	mov    cl,0x1
c001f576:	e9 6d fe ff ff       	jmp    c001f3e8 <IDE::detect()+0x122>
c001f57b:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f581:	5b                   	pop    ebx
c001f582:	5e                   	pop    esi
c001f583:	5f                   	pop    edi
c001f584:	5d                   	pop    ebp
c001f585:	c3                   	ret    

c001f586 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f586:	55                   	push   ebp
c001f587:	57                   	push   edi
c001f588:	56                   	push   esi
c001f589:	53                   	push   ebx
c001f58a:	83 ec 1c             	sub    esp,0x1c
c001f58d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f591:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f595:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f599:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001f59d:	88 c3                	mov    bl,al
c001f59f:	84 c0                	test   al,al
c001f5a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f5a5:	0f 84 81 00 00 00    	je     c001f62c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f5ab:	83 ec 0c             	sub    esp,0xc
c001f5ae:	68 7f 73 02 c0       	push   0xc002737f
c001f5b3:	e8 8f da fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001f5b8:	83 c4 10             	add    esp,0x10
c001f5bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f5bf:	3c 01                	cmp    al,0x1
c001f5c1:	74 63                	je     c001f626 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001f5c3:	3c 02                	cmp    al,0x2
c001f5c5:	75 53                	jne    c001f61a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f5c7:	d1 e6                	shl    esi,1
c001f5c9:	09 ee                	or     esi,ebp
c001f5cb:	50                   	push   eax
c001f5cc:	89 f0                	mov    eax,esi
c001f5ce:	6a 01                	push   0x1
c001f5d0:	0f b6 f0             	movzx  esi,al
c001f5d3:	c1 e6 06             	shl    esi,0x6
c001f5d6:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001f5de:	50                   	push   eax
c001f5df:	57                   	push   edi
c001f5e0:	e8 79 f6 ff ff       	call   c001ec5e <IDE::read(unsigned char, unsigned char)>
c001f5e5:	83 c4 10             	add    esp,0x10
c001f5e8:	a8 01                	test   al,0x1
c001f5ea:	74 02                	je     c001f5ee <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001f5ec:	b3 07                	mov    bl,0x7
c001f5ee:	a8 02                	test   al,0x2
c001f5f0:	74 02                	je     c001f5f4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001f5f2:	b3 03                	mov    bl,0x3
c001f5f4:	a8 04                	test   al,0x4
c001f5f6:	74 02                	je     c001f5fa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001f5f8:	b3 14                	mov    bl,0x14
c001f5fa:	a8 08                	test   al,0x8
c001f5fc:	74 02                	je     c001f600 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001f5fe:	b3 03                	mov    bl,0x3
c001f600:	a8 10                	test   al,0x10
c001f602:	74 02                	je     c001f606 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001f604:	b3 15                	mov    bl,0x15
c001f606:	a8 20                	test   al,0x20
c001f608:	74 02                	je     c001f60c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001f60a:	b3 03                	mov    bl,0x3
c001f60c:	a8 40                	test   al,0x40
c001f60e:	74 02                	je     c001f612 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001f610:	b3 16                	mov    bl,0x16
c001f612:	84 c0                	test   al,al
c001f614:	79 16                	jns    c001f62c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f616:	b3 0d                	mov    bl,0xd
c001f618:	eb 12                	jmp    c001f62c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f61a:	3c 03                	cmp    al,0x3
c001f61c:	74 0c                	je     c001f62a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001f61e:	3c 04                	cmp    al,0x4
c001f620:	75 0a                	jne    c001f62c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f622:	b3 08                	mov    bl,0x8
c001f624:	eb 06                	jmp    c001f62c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f626:	b3 13                	mov    bl,0x13
c001f628:	eb 02                	jmp    c001f62c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f62a:	b3 17                	mov    bl,0x17
c001f62c:	83 c4 1c             	add    esp,0x1c
c001f62f:	88 d8                	mov    al,bl
c001f631:	5b                   	pop    ebx
c001f632:	5e                   	pop    esi
c001f633:	5f                   	pop    edi
c001f634:	5d                   	pop    ebp
c001f635:	c3                   	ret    

c001f636 <IDE::polling(unsigned char, unsigned int)>:
c001f636:	57                   	push   edi
c001f637:	56                   	push   esi
c001f638:	53                   	push   ebx
c001f639:	bb 04 00 00 00       	mov    ebx,0x4
c001f63e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f642:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f647:	52                   	push   edx
c001f648:	6a 0c                	push   0xc
c001f64a:	56                   	push   esi
c001f64b:	57                   	push   edi
c001f64c:	e8 0d f6 ff ff       	call   c001ec5e <IDE::read(unsigned char, unsigned char)>
c001f651:	83 c4 10             	add    esp,0x10
c001f654:	4b                   	dec    ebx
c001f655:	75 f0                	jne    c001f647 <IDE::polling(unsigned char, unsigned int)+0x11>
c001f657:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f65c:	50                   	push   eax
c001f65d:	6a 0c                	push   0xc
c001f65f:	56                   	push   esi
c001f660:	57                   	push   edi
c001f661:	e8 f8 f5 ff ff       	call   c001ec5e <IDE::read(unsigned char, unsigned char)>
c001f666:	83 c4 10             	add    esp,0x10
c001f669:	a8 01                	test   al,0x1
c001f66b:	75 17                	jne    c001f684 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f66d:	a8 20                	test   al,0x20
c001f66f:	75 0f                	jne    c001f680 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f671:	4b                   	dec    ebx
c001f672:	74 10                	je     c001f684 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f674:	84 c0                	test   al,al
c001f676:	78 e4                	js     c001f65c <IDE::polling(unsigned char, unsigned int)+0x26>
c001f678:	a8 08                	test   al,0x8
c001f67a:	74 e0                	je     c001f65c <IDE::polling(unsigned char, unsigned int)+0x26>
c001f67c:	31 c0                	xor    eax,eax
c001f67e:	eb 06                	jmp    c001f686 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f680:	b0 01                	mov    al,0x1
c001f682:	eb 02                	jmp    c001f686 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f684:	b0 02                	mov    al,0x2
c001f686:	5b                   	pop    ebx
c001f687:	5e                   	pop    esi
c001f688:	5f                   	pop    edi
c001f689:	c3                   	ret    

c001f68a <SATABus::close(int, int, void*)>:
c001f68a:	31 c0                	xor    eax,eax
c001f68c:	c3                   	ret    
c001f68d:	90                   	nop

c001f68e <SATABus::detect()>:
c001f68e:	c3                   	ret    
c001f68f:	90                   	nop

c001f690 <SATABus::SATABus()>:
c001f690:	83 ec 0c             	sub    esp,0xc
c001f693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f697:	83 ec 08             	sub    esp,0x8
c001f69a:	68 b8 73 02 c0       	push   0xc00273b8
c001f69f:	50                   	push   eax
c001f6a0:	e8 c3 f2 fe ff       	call   c000e968 <HardDiskController::HardDiskController(char const*)>
c001f6a5:	83 c4 10             	add    esp,0x10
c001f6a8:	ba 50 74 02 c0       	mov    edx,0xc0027450
c001f6ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6b1:	89 10                	mov    DWORD PTR [eax],edx
c001f6b3:	83 ec 0c             	sub    esp,0xc
c001f6b6:	6a 50                	push   0x50
c001f6b8:	e8 40 ae fe ff       	call   c000a4fd <Phys::allocateContiguousPages(int)>
c001f6bd:	83 c4 10             	add    esp,0x10
c001f6c0:	89 c2                	mov    edx,eax
c001f6c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6c6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f6cc:	83 ec 0c             	sub    esp,0xc
c001f6cf:	6a 50                	push   0x50
c001f6d1:	e8 4b c6 fe ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c001f6d6:	83 c4 10             	add    esp,0x10
c001f6d9:	89 c2                	mov    edx,eax
c001f6db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6df:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f6e5:	a1 10 8b 02 c0       	mov    eax,ds:0xc0028b10
c001f6ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f6ee:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f6f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f6f8:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f6fe:	83 ec 0c             	sub    esp,0xc
c001f701:	6a 03                	push   0x3
c001f703:	6a 50                	push   0x50
c001f705:	51                   	push   ecx
c001f706:	52                   	push   edx
c001f707:	50                   	push   eax
c001f708:	e8 b1 cf fe ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f70d:	83 c4 20             	add    esp,0x20
c001f710:	90                   	nop
c001f711:	83 c4 0c             	add    esp,0xc
c001f714:	c3                   	ret    
c001f715:	90                   	nop

c001f716 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f716:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f71a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f71d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f720:	09 c2                	or     edx,eax
c001f722:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f726:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f72c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f72e:	31 c0                	xor    eax,eax
c001f730:	c1 e9 08             	shr    ecx,0x8
c001f733:	83 e1 0f             	and    ecx,0xf
c001f736:	39 c8                	cmp    eax,ecx
c001f738:	74 0a                	je     c001f744 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f73a:	f6 c2 01             	test   dl,0x1
c001f73d:	74 08                	je     c001f747 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f73f:	d1 ea                	shr    edx,1
c001f741:	40                   	inc    eax
c001f742:	eb f2                	jmp    c001f736 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f744:	83 c8 ff             	or     eax,0xffffffff
c001f747:	c3                   	ret    

c001f748 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f748:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f74c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f74f:	89 c2                	mov    edx,eax
c001f751:	c1 ea 08             	shr    edx,0x8
c001f754:	83 e2 0f             	and    edx,0xf
c001f757:	fe ca                	dec    dl
c001f759:	75 31                	jne    c001f78c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f75b:	83 e0 0f             	and    eax,0xf
c001f75e:	3c 03                	cmp    al,0x3
c001f760:	75 2a                	jne    c001f78c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f762:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f765:	b8 02 00 00 00       	mov    eax,0x2
c001f76a:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f770:	74 1c                	je     c001f78e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f772:	b8 04 00 00 00       	mov    eax,0x4
c001f777:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f77d:	74 0f                	je     c001f78e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f77f:	31 c0                	xor    eax,eax
c001f781:	83 fa 03             	cmp    edx,0x3
c001f784:	0f 94 c0             	sete   al
c001f787:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f78b:	c3                   	ret    
c001f78c:	31 c0                	xor    eax,eax
c001f78e:	c3                   	ret    
c001f78f:	90                   	nop

c001f790 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f790:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f794:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f797:	0f ba e2 0f          	bt     edx,0xf
c001f79b:	72 f7                	jb     c001f794 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f79d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f7a0:	83 ca 10             	or     edx,0x10
c001f7a3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f7a6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f7a9:	83 ca 01             	or     edx,0x1
c001f7ac:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f7af:	c3                   	ret    

c001f7b0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f7b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7b4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f7b7:	83 e2 fe             	and    edx,0xfffffffe
c001f7ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f7bd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f7c0:	83 e2 ef             	and    edx,0xffffffef
c001f7c3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f7c6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f7c9:	0f ba e2 0e          	bt     edx,0xe
c001f7cd:	72 f7                	jb     c001f7c6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f7cf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f7d2:	0f ba e2 0f          	bt     edx,0xf
c001f7d6:	72 ee                	jb     c001f7c6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f7d8:	c3                   	ret    
c001f7d9:	90                   	nop

c001f7da <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f7da:	55                   	push   ebp
c001f7db:	57                   	push   edi
c001f7dc:	56                   	push   esi
c001f7dd:	53                   	push   ebx
c001f7de:	83 ec 1c             	sub    esp,0x1c
c001f7e1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f7e5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f7e9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f7ed:	53                   	push   ebx
c001f7ee:	89 fd                	mov    ebp,edi
c001f7f0:	56                   	push   esi
c001f7f1:	c1 e5 0a             	shl    ebp,0xa
c001f7f4:	e8 b7 ff ff ff       	call   c001f7b0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f7f9:	83 ec 0c             	sub    esp,0xc
c001f7fc:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f802:	01 e8                	add    eax,ebp
c001f804:	89 03                	mov    DWORD PTR [ebx],eax
c001f806:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f808:	68 00 04 00 00       	push   0x400
c001f80d:	6a 00                	push   0x0
c001f80f:	50                   	push   eax
c001f810:	e8 6f 0e fe ff       	call   c0000684 <memset>
c001f815:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001f81b:	89 fa                	mov    edx,edi
c001f81d:	01 e8                	add    eax,ebp
c001f81f:	c1 e7 0d             	shl    edi,0xd
c001f822:	89 03                	mov    DWORD PTR [ebx],eax
c001f824:	c1 e2 08             	shl    edx,0x8
c001f827:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f82e:	81 c2 00 80 00 00    	add    edx,0x8000
c001f834:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f838:	89 d0                	mov    eax,edx
c001f83a:	83 c4 1c             	add    esp,0x1c
c001f83d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f843:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f846:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f849:	68 00 01 00 00       	push   0x100
c001f84e:	6a 00                	push   0x0
c001f850:	50                   	push   eax
c001f851:	e8 2e 0e fe ff       	call   c0000684 <memset>
c001f856:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f85a:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001f860:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001f866:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f86a:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001f86d:	83 c4 10             	add    esp,0x10
c001f870:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f877:	31 ff                	xor    edi,edi
c001f879:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001f87f:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001f885:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f889:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f88f:	83 c5 20             	add    ebp,0x20
c001f892:	01 f8                	add    eax,edi
c001f894:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f897:	52                   	push   edx
c001f898:	68 00 01 00 00       	push   0x100
c001f89d:	6a 00                	push   0x0
c001f89f:	50                   	push   eax
c001f8a0:	e8 df 0d fe ff       	call   c0000684 <memset>
c001f8a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f8a9:	83 c4 10             	add    esp,0x10
c001f8ac:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001f8b2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001f8b9:	01 f8                	add    eax,edi
c001f8bb:	81 c7 00 01 00 00    	add    edi,0x100
c001f8c1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f8c4:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001f8ca:	75 b3                	jne    c001f87f <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001f8cc:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001f8d0:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001f8d4:	83 c4 1c             	add    esp,0x1c
c001f8d7:	5b                   	pop    ebx
c001f8d8:	5e                   	pop    esi
c001f8d9:	5f                   	pop    edi
c001f8da:	5d                   	pop    ebp
c001f8db:	e9 b0 fe ff ff       	jmp    c001f790 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001f8e0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f8e0:	55                   	push   ebp
c001f8e1:	57                   	push   edi
c001f8e2:	56                   	push   esi
c001f8e3:	53                   	push   ebx
c001f8e4:	83 ec 0c             	sub    esp,0xc
c001f8e7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f8eb:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c001f8f2:	74 2d                	je     c001f921 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f8f4:	83 ec 0c             	sub    esp,0xc
c001f8f7:	68 dc 73 02 c0       	push   0xc00273dc
c001f8fc:	e8 b4 a4 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001f901:	83 c4 10             	add    esp,0x10
c001f904:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c001f90b:	75 14                	jne    c001f921 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f90d:	e4 60                	in     al,0x60
c001f90f:	3c 1c                	cmp    al,0x1c
c001f911:	74 04                	je     c001f917 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f913:	3c 5a                	cmp    al,0x5a
c001f915:	75 f6                	jne    c001f90d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001f917:	e4 60                	in     al,0x60
c001f919:	3c 5a                	cmp    al,0x5a
c001f91b:	74 fa                	je     c001f917 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f91d:	3c 1c                	cmp    al,0x1c
c001f91f:	74 f6                	je     c001f917 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f921:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f925:	31 db                	xor    ebx,ebx
c001f927:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001f92a:	f7 c5 01 00 00 00    	test   ebp,0x1
c001f930:	0f 84 78 01 00 00    	je     c001faae <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f936:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f93a:	89 d8                	mov    eax,ebx
c001f93c:	c1 e0 07             	shl    eax,0x7
c001f93f:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001f946:	50                   	push   eax
c001f947:	50                   	push   eax
c001f948:	57                   	push   edi
c001f949:	56                   	push   esi
c001f94a:	e8 f9 fd ff ff       	call   c001f748 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f94f:	83 c4 10             	add    esp,0x10
c001f952:	83 f8 01             	cmp    eax,0x1
c001f955:	0f 85 19 01 00 00    	jne    c001fa74 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001f95b:	50                   	push   eax
c001f95c:	53                   	push   ebx
c001f95d:	57                   	push   edi
c001f95e:	56                   	push   esi
c001f95f:	e8 76 fe ff ff       	call   c001f7da <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f964:	83 c4 10             	add    esp,0x10
c001f967:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c001f96e:	74 2d                	je     c001f99d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f970:	83 ec 0c             	sub    esp,0xc
c001f973:	68 f1 73 02 c0       	push   0xc00273f1
c001f978:	e8 38 a4 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001f97d:	83 c4 10             	add    esp,0x10
c001f980:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c001f987:	75 14                	jne    c001f99d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f989:	e4 60                	in     al,0x60
c001f98b:	3c 1c                	cmp    al,0x1c
c001f98d:	74 04                	je     c001f993 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f98f:	3c 5a                	cmp    al,0x5a
c001f991:	75 f6                	jne    c001f989 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001f993:	e4 60                	in     al,0x60
c001f995:	3c 5a                	cmp    al,0x5a
c001f997:	74 fa                	je     c001f993 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f999:	3c 1c                	cmp    al,0x1c
c001f99b:	74 f6                	je     c001f993 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f99d:	83 ec 0c             	sub    esp,0xc
c001f9a0:	68 7c 01 00 00       	push   0x17c
c001f9a5:	e8 b1 a3 fe ff       	call   c0009d5b <malloc>
c001f9aa:	89 04 24             	mov    DWORD PTR [esp],eax
c001f9ad:	89 c7                	mov    edi,eax
c001f9af:	e8 14 10 00 00       	call   c00209c8 <SATA::SATA()>
c001f9b4:	83 c4 10             	add    esp,0x10
c001f9b7:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c001f9be:	74 2d                	je     c001f9ed <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f9c0:	83 ec 0c             	sub    esp,0xc
c001f9c3:	68 06 74 02 c0       	push   0xc0027406
c001f9c8:	e8 e8 a3 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001f9cd:	83 c4 10             	add    esp,0x10
c001f9d0:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c001f9d7:	75 14                	jne    c001f9ed <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f9d9:	e4 60                	in     al,0x60
c001f9db:	3c 5a                	cmp    al,0x5a
c001f9dd:	74 04                	je     c001f9e3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f9df:	3c 1c                	cmp    al,0x1c
c001f9e1:	75 f6                	jne    c001f9d9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001f9e3:	e4 60                	in     al,0x60
c001f9e5:	3c 5a                	cmp    al,0x5a
c001f9e7:	74 fa                	je     c001f9e3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f9e9:	3c 1c                	cmp    al,0x1c
c001f9eb:	74 f6                	je     c001f9e3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f9ed:	50                   	push   eax
c001f9ee:	50                   	push   eax
c001f9ef:	57                   	push   edi
c001f9f0:	56                   	push   esi
c001f9f1:	e8 c4 eb fe ff       	call   c000e5ba <Device::addChild(Device*)>
c001f9f6:	83 c4 10             	add    esp,0x10
c001f9f9:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c001fa00:	74 2d                	je     c001fa2f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001fa02:	83 ec 0c             	sub    esp,0xc
c001fa05:	68 1b 74 02 c0       	push   0xc002741b
c001fa0a:	e8 a6 a3 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001fa0f:	83 c4 10             	add    esp,0x10
c001fa12:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c001fa19:	75 14                	jne    c001fa2f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001fa1b:	e4 60                	in     al,0x60
c001fa1d:	3c 1c                	cmp    al,0x1c
c001fa1f:	74 04                	je     c001fa25 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001fa21:	3c 5a                	cmp    al,0x5a
c001fa23:	75 f6                	jne    c001fa1b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001fa25:	e4 60                	in     al,0x60
c001fa27:	3c 5a                	cmp    al,0x5a
c001fa29:	74 fa                	je     c001fa25 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001fa2b:	3c 1c                	cmp    al,0x1c
c001fa2d:	74 f6                	je     c001fa25 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001fa2f:	8b 07                	mov    eax,DWORD PTR [edi]
c001fa31:	56                   	push   esi
c001fa32:	6a 00                	push   0x0
c001fa34:	53                   	push   ebx
c001fa35:	57                   	push   edi
c001fa36:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fa39:	83 c4 10             	add    esp,0x10
c001fa3c:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c001fa43:	74 69                	je     c001faae <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fa45:	83 ec 0c             	sub    esp,0xc
c001fa48:	68 30 74 02 c0       	push   0xc0027430
c001fa4d:	e8 63 a3 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001fa52:	83 c4 10             	add    esp,0x10
c001fa55:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c001fa5c:	75 50                	jne    c001faae <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fa5e:	e4 60                	in     al,0x60
c001fa60:	3c 1c                	cmp    al,0x1c
c001fa62:	74 04                	je     c001fa68 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fa64:	3c 5a                	cmp    al,0x5a
c001fa66:	75 f6                	jne    c001fa5e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001fa68:	e4 60                	in     al,0x60
c001fa6a:	3c 5a                	cmp    al,0x5a
c001fa6c:	74 fa                	je     c001fa68 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fa6e:	3c 1c                	cmp    al,0x1c
c001fa70:	74 f6                	je     c001fa68 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fa72:	eb 3a                	jmp    c001faae <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fa74:	83 f8 04             	cmp    eax,0x4
c001fa77:	75 35                	jne    c001faae <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fa79:	50                   	push   eax
c001fa7a:	53                   	push   ebx
c001fa7b:	57                   	push   edi
c001fa7c:	56                   	push   esi
c001fa7d:	e8 58 fd ff ff       	call   c001f7da <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fa82:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001fa89:	e8 cd a2 fe ff       	call   c0009d5b <malloc>
c001fa8e:	89 04 24             	mov    DWORD PTR [esp],eax
c001fa91:	89 c7                	mov    edi,eax
c001fa93:	e8 a6 17 00 00       	call   c002123e <SATAPI::SATAPI()>
c001fa98:	5a                   	pop    edx
c001fa99:	59                   	pop    ecx
c001fa9a:	57                   	push   edi
c001fa9b:	56                   	push   esi
c001fa9c:	e8 19 eb fe ff       	call   c000e5ba <Device::addChild(Device*)>
c001faa1:	8b 07                	mov    eax,DWORD PTR [edi]
c001faa3:	56                   	push   esi
c001faa4:	6a 00                	push   0x0
c001faa6:	53                   	push   ebx
c001faa7:	57                   	push   edi
c001faa8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001faab:	83 c4 20             	add    esp,0x20
c001faae:	d1 ed                	shr    ebp,1
c001fab0:	43                   	inc    ebx
c001fab1:	83 fb 20             	cmp    ebx,0x20
c001fab4:	0f 85 70 fe ff ff    	jne    c001f92a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001faba:	83 c4 0c             	add    esp,0xc
c001fabd:	5b                   	pop    ebx
c001fabe:	5e                   	pop    esi
c001fabf:	5f                   	pop    edi
c001fac0:	5d                   	pop    ebp
c001fac1:	c3                   	ret    

c001fac2 <SATABus::open(int, int, void*)>:
c001fac2:	83 ec 14             	sub    esp,0x14
c001fac5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fac9:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001facf:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001fad5:	52                   	push   edx
c001fad6:	50                   	push   eax
c001fad7:	e8 04 fe ff ff       	call   c001f8e0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001fadc:	31 c0                	xor    eax,eax
c001fade:	83 c4 1c             	add    esp,0x1c
c001fae1:	c3                   	ret    

c001fae2 <ATA::close(int, int, void*)>:
c001fae2:	83 ec 0c             	sub    esp,0xc
c001fae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001faef:	85 c0                	test   eax,eax
c001faf1:	74 0c                	je     c001faff <ATA::close(int, int, void*)+0x1d>
c001faf3:	83 ec 0c             	sub    esp,0xc
c001faf6:	8b 10                	mov    edx,DWORD PTR [eax]
c001faf8:	50                   	push   eax
c001faf9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fafc:	83 c4 10             	add    esp,0x10
c001faff:	31 c0                	xor    eax,eax
c001fb01:	83 c4 0c             	add    esp,0xc
c001fb04:	c3                   	ret    
c001fb05:	90                   	nop

c001fb06 <ATA::powerSaving(PowerSavingLevel)>:
c001fb06:	c3                   	ret    
c001fb07:	90                   	nop

c001fb08 <ATA::ATA()>:
c001fb08:	83 ec 0c             	sub    esp,0xc
c001fb0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb0f:	83 ec 04             	sub    esp,0x4
c001fb12:	68 00 02 00 00       	push   0x200
c001fb17:	68 bf 75 02 c0       	push   0xc00275bf
c001fb1c:	50                   	push   eax
c001fb1d:	e8 d0 ee fe ff       	call   c000e9f2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fb22:	83 c4 10             	add    esp,0x10
c001fb25:	ba c8 74 02 c0       	mov    edx,0xc00274c8
c001fb2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb2e:	89 10                	mov    DWORD PTR [eax],edx
c001fb30:	90                   	nop
c001fb31:	83 c4 0c             	add    esp,0xc
c001fb34:	c3                   	ret    
c001fb35:	90                   	nop

c001fb36 <ATA::flush(bool)>:
c001fb36:	53                   	push   ebx
c001fb37:	83 ec 08             	sub    esp,0x8
c001fb3a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001fb3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fb43:	19 c0                	sbb    eax,eax
c001fb45:	83 e0 fd             	and    eax,0xfffffffd
c001fb48:	05 ea 00 00 00       	add    eax,0xea
c001fb4d:	50                   	push   eax
c001fb4e:	6a 07                	push   0x7
c001fb50:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb57:	50                   	push   eax
c001fb58:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb5e:	e8 3b f0 ff ff       	call   c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb63:	83 c4 0c             	add    esp,0xc
c001fb66:	6a 00                	push   0x0
c001fb68:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb6f:	50                   	push   eax
c001fb70:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb76:	e8 bb fa ff ff       	call   c001f636 <IDE::polling(unsigned char, unsigned int)>
c001fb7b:	83 c4 18             	add    esp,0x18
c001fb7e:	5b                   	pop    ebx
c001fb7f:	c3                   	ret    

c001fb80 <ATA::readyForCommand()>:
c001fb80:	56                   	push   esi
c001fb81:	53                   	push   ebx
c001fb82:	53                   	push   ebx
c001fb83:	31 db                	xor    ebx,ebx
c001fb85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fb89:	51                   	push   ecx
c001fb8a:	6a 0c                	push   0xc
c001fb8c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fb93:	50                   	push   eax
c001fb94:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fb9a:	e8 bf f0 ff ff       	call   c001ec5e <IDE::read(unsigned char, unsigned char)>
c001fb9f:	83 c4 10             	add    esp,0x10
c001fba2:	a8 88                	test   al,0x88
c001fba4:	74 1f                	je     c001fbc5 <ATA::readyForCommand()+0x45>
c001fba6:	43                   	inc    ebx
c001fba7:	83 fb 63             	cmp    ebx,0x63
c001fbaa:	7e dd                	jle    c001fb89 <ATA::readyForCommand()+0x9>
c001fbac:	83 ec 0c             	sub    esp,0xc
c001fbaf:	6a 0a                	push   0xa
c001fbb1:	e8 76 94 ff ff       	call   c001902c <milliTenthSleep(unsigned int)>
c001fbb6:	83 c4 10             	add    esp,0x10
c001fbb9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001fbbf:	75 c8                	jne    c001fb89 <ATA::readyForCommand()+0x9>
c001fbc1:	31 c0                	xor    eax,eax
c001fbc3:	eb 02                	jmp    c001fbc7 <ATA::readyForCommand()+0x47>
c001fbc5:	b0 01                	mov    al,0x1
c001fbc7:	5a                   	pop    edx
c001fbc8:	5b                   	pop    ebx
c001fbc9:	5e                   	pop    esi
c001fbca:	c3                   	ret    
c001fbcb:	90                   	nop

c001fbcc <ATA::access(unsigned long long, int, void*, bool)>:
c001fbcc:	55                   	push   ebp
c001fbcd:	57                   	push   edi
c001fbce:	56                   	push   esi
c001fbcf:	53                   	push   ebx
c001fbd0:	83 ec 38             	sub    esp,0x38
c001fbd3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001fbd7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001fbdb:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001fbdf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001fbe3:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001fbe7:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001fbeb:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001fbef:	68 74 74 02 c0       	push   0xc0027474
c001fbf4:	e8 4e d4 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001fbf9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fc03:	83 c4 10             	add    esp,0x10
c001fc06:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fc0c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fc10:	c1 e0 06             	shl    eax,0x6
c001fc13:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001fc1b:	74 5d                	je     c001fc7a <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001fc1d:	89 fa                	mov    edx,edi
c001fc1f:	89 f0                	mov    eax,esi
c001fc21:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001fc25:	c1 ea 1c             	shr    edx,0x1c
c001fc28:	89 d1                	mov    ecx,edx
c001fc2a:	09 c1                	or     ecx,eax
c001fc2c:	74 25                	je     c001fc53 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001fc2e:	31 ed                	xor    ebp,ebp
c001fc30:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001fc37:	89 fa                	mov    edx,edi
c001fc39:	89 f0                	mov    eax,esi
c001fc3b:	0f ad d0             	shrd   eax,edx,cl
c001fc3e:	d3 ea                	shr    edx,cl
c001fc40:	f6 c1 20             	test   cl,0x20
c001fc43:	74 02                	je     c001fc47 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001fc45:	89 d0                	mov    eax,edx
c001fc47:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001fc4b:	45                   	inc    ebp
c001fc4c:	83 fd 06             	cmp    ebp,0x6
c001fc4f:	75 df                	jne    c001fc30 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001fc51:	eb 76                	jmp    c001fcc9 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001fc53:	89 f0                	mov    eax,esi
c001fc55:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001fc5a:	89 fa                	mov    edx,edi
c001fc5c:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fc63:	0f ac d0 10          	shrd   eax,edx,0x10
c001fc67:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fc6c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001fc70:	c1 ee 18             	shr    esi,0x18
c001fc73:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001fc78:	eb 56                	jmp    c001fcd0 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001fc7a:	6a 00                	push   0x0
c001fc7c:	6a 3f                	push   0x3f
c001fc7e:	57                   	push   edi
c001fc7f:	56                   	push   esi
c001fc80:	e8 9b 32 00 00       	call   c0022f20 <__umoddi3>
c001fc85:	83 c4 10             	add    esp,0x10
c001fc88:	40                   	inc    eax
c001fc89:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001fc8d:	6a 00                	push   0x0
c001fc8f:	68 f0 03 00 00       	push   0x3f0
c001fc94:	57                   	push   edi
c001fc95:	56                   	push   esi
c001fc96:	e8 85 31 00 00       	call   c0022e20 <__udivdi3>
c001fc9b:	83 c4 10             	add    esp,0x10
c001fc9e:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001fca3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fcaa:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fcaf:	6a 00                	push   0x0
c001fcb1:	6a 3f                	push   0x3f
c001fcb3:	57                   	push   edi
c001fcb4:	56                   	push   esi
c001fcb5:	e8 66 31 00 00       	call   c0022e20 <__udivdi3>
c001fcba:	83 c4 10             	add    esp,0x10
c001fcbd:	89 c6                	mov    esi,eax
c001fcbf:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001fcc4:	83 e6 0f             	and    esi,0xf
c001fcc7:	eb 07                	jmp    c001fcd0 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001fcc9:	31 f6                	xor    esi,esi
c001fccb:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001fcd0:	bf 01 00 00 00       	mov    edi,0x1
c001fcd5:	50                   	push   eax
c001fcd6:	6a 00                	push   0x0
c001fcd8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fcdf:	50                   	push   eax
c001fce0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fce4:	e8 bd f0 ff ff       	call   c001eda6 <IDE::enableIRQs(unsigned char, bool)>
c001fce9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fcec:	e8 8f fe ff ff       	call   c001fb80 <ATA::readyForCommand()>
c001fcf1:	83 c4 10             	add    esp,0x10
c001fcf4:	84 c0                	test   al,al
c001fcf6:	0f 84 bc 02 00 00    	je     c001ffb8 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001fcfc:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001fd02:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001fd08:	c1 e0 04             	shl    eax,0x4
c001fd0b:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001fd12:	09 c6                	or     esi,eax
c001fd14:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fd19:	75 05                	jne    c001fd20 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001fd1b:	83 ce a0             	or     esi,0xffffffa0
c001fd1e:	eb 03                	jmp    c001fd23 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001fd20:	83 ce e0             	or     esi,0xffffffe0
c001fd23:	89 f0                	mov    eax,esi
c001fd25:	0f b6 f0             	movzx  esi,al
c001fd28:	56                   	push   esi
c001fd29:	6a 06                	push   0x6
c001fd2b:	51                   	push   ecx
c001fd2c:	52                   	push   edx
c001fd2d:	e8 6c ee ff ff       	call   c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd32:	83 c4 10             	add    esp,0x10
c001fd35:	6a 00                	push   0x0
c001fd37:	6a 01                	push   0x1
c001fd39:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd40:	50                   	push   eax
c001fd41:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd47:	e8 52 ee ff ff       	call   c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd4c:	83 c4 10             	add    esp,0x10
c001fd4f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001fd54:	75 6e                	jne    c001fdc4 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001fd56:	6a 00                	push   0x0
c001fd58:	6a 08                	push   0x8
c001fd5a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd61:	50                   	push   eax
c001fd62:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd68:	e8 31 ee ff ff       	call   c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd6d:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001fd72:	50                   	push   eax
c001fd73:	6a 09                	push   0x9
c001fd75:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd7c:	50                   	push   eax
c001fd7d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd83:	e8 16 ee ff ff       	call   c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd88:	83 c4 20             	add    esp,0x20
c001fd8b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001fd90:	50                   	push   eax
c001fd91:	6a 0a                	push   0xa
c001fd93:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd9a:	50                   	push   eax
c001fd9b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fda1:	e8 f8 ed ff ff       	call   c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fda6:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001fdab:	50                   	push   eax
c001fdac:	6a 0b                	push   0xb
c001fdae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdb5:	50                   	push   eax
c001fdb6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdbc:	e8 dd ed ff ff       	call   c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fdc1:	83 c4 20             	add    esp,0x20
c001fdc4:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001fdc9:	50                   	push   eax
c001fdca:	6a 02                	push   0x2
c001fdcc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdd3:	50                   	push   eax
c001fdd4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdda:	e8 bf ed ff ff       	call   c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fddf:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001fde4:	50                   	push   eax
c001fde5:	6a 03                	push   0x3
c001fde7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdee:	50                   	push   eax
c001fdef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdf5:	e8 a4 ed ff ff       	call   c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fdfa:	83 c4 20             	add    esp,0x20
c001fdfd:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001fe02:	50                   	push   eax
c001fe03:	6a 04                	push   0x4
c001fe05:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe0c:	50                   	push   eax
c001fe0d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe13:	e8 86 ed ff ff       	call   c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe18:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001fe1d:	50                   	push   eax
c001fe1e:	6a 05                	push   0x5
c001fe20:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe27:	50                   	push   eax
c001fe28:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe2e:	e8 6b ed ff ff       	call   c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe33:	83 c4 20             	add    esp,0x20
c001fe36:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001fe3b:	0f 94 c0             	sete   al
c001fe3e:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fe43:	74 09                	je     c001fe4e <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001fe45:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001fe4c:	eb 07                	jmp    c001fe55 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001fe4e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001fe55:	0f b6 c0             	movzx  eax,al
c001fe58:	50                   	push   eax
c001fe59:	6a 07                	push   0x7
c001fe5b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe62:	50                   	push   eax
c001fe63:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe69:	e8 30 ed ff ff       	call   c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe6e:	c7 04 24 81 74 02 c0 	mov    DWORD PTR [esp],0xc0027481
c001fe75:	e8 cd d1 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001fe7a:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001fe7e:	83 c4 10             	add    esp,0x10
c001fe81:	85 f6                	test   esi,esi
c001fe83:	0f 84 f7 00 00 00    	je     c001ff80 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001fe89:	83 ec 0c             	sub    esp,0xc
c001fe8c:	68 84 74 02 c0       	push   0xc0027484
c001fe91:	e8 b1 d1 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001fe96:	83 c4 0c             	add    esp,0xc
c001fe99:	6a 01                	push   0x1
c001fe9b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fea2:	50                   	push   eax
c001fea3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fea9:	e8 88 f7 ff ff       	call   c001f636 <IDE::polling(unsigned char, unsigned int)>
c001feae:	c7 04 24 87 74 02 c0 	mov    DWORD PTR [esp],0xc0027487
c001feb5:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001feb9:	e8 89 d1 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001febe:	83 c4 10             	add    esp,0x10
c001fec1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001fec5:	84 c0                	test   al,al
c001fec7:	74 2b                	je     c001fef4 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001fec9:	0f b6 f8             	movzx  edi,al
c001fecc:	57                   	push   edi
c001fecd:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001fed4:	50                   	push   eax
c001fed5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fedc:	50                   	push   eax
c001fedd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fee3:	e8 9e f6 ff ff       	call   c001f586 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fee8:	c7 04 24 8a 74 02 c0 	mov    DWORD PTR [esp],0xc002748a
c001feef:	e9 bc 00 00 00       	jmp    c001ffb0 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001fef4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fef9:	74 50                	je     c001ff4b <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001fefb:	83 ec 0c             	sub    esp,0xc
c001fefe:	31 ed                	xor    ebp,ebp
c001ff00:	68 95 74 02 c0       	push   0xc0027495
c001ff05:	e8 3d d1 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001ff0a:	83 c4 10             	add    esp,0x10
c001ff0d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ff11:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001ff15:	50                   	push   eax
c001ff16:	50                   	push   eax
c001ff17:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff1e:	50                   	push   eax
c001ff1f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff25:	e8 62 ec ff ff       	call   c001eb8c <IDE::getBase(unsigned char)>
c001ff2a:	89 c2                	mov    edx,eax
c001ff2c:	89 f8                	mov    eax,edi
c001ff2e:	66 ef                	out    dx,ax
c001ff30:	45                   	inc    ebp
c001ff31:	83 c4 10             	add    esp,0x10
c001ff34:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001ff3a:	75 d1                	jne    c001ff0d <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001ff3c:	83 ec 0c             	sub    esp,0xc
c001ff3f:	68 98 74 02 c0       	push   0xc0027498
c001ff44:	e8 fe d0 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001ff49:	eb 24                	jmp    c001ff6f <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001ff4b:	51                   	push   ecx
c001ff4c:	51                   	push   ecx
c001ff4d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff54:	50                   	push   eax
c001ff55:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff5b:	e8 2c ec ff ff       	call   c001eb8c <IDE::getBase(unsigned char)>
c001ff60:	b9 00 01 00 00       	mov    ecx,0x100
c001ff65:	89 c2                	mov    edx,eax
c001ff67:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001ff6b:	fc                   	cld    
c001ff6c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001ff6f:	83 c4 10             	add    esp,0x10
c001ff72:	4e                   	dec    esi
c001ff73:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001ff7b:	e9 01 ff ff ff       	jmp    c001fe81 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001ff80:	31 ff                	xor    edi,edi
c001ff82:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ff87:	74 2f                	je     c001ffb8 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001ff89:	83 ec 0c             	sub    esp,0xc
c001ff8c:	68 9b 74 02 c0       	push   0xc002749b
c001ff91:	e8 b1 d0 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001ff96:	58                   	pop    eax
c001ff97:	31 c0                	xor    eax,eax
c001ff99:	5a                   	pop    edx
c001ff9a:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001ff9f:	0f 94 c0             	sete   al
c001ffa2:	50                   	push   eax
c001ffa3:	53                   	push   ebx
c001ffa4:	e8 8d fb ff ff       	call   c001fb36 <ATA::flush(bool)>
c001ffa9:	c7 04 24 9e 74 02 c0 	mov    DWORD PTR [esp],0xc002749e
c001ffb0:	e8 92 d0 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001ffb5:	83 c4 10             	add    esp,0x10
c001ffb8:	83 c4 2c             	add    esp,0x2c
c001ffbb:	89 f8                	mov    eax,edi
c001ffbd:	5b                   	pop    ebx
c001ffbe:	5e                   	pop    esi
c001ffbf:	5f                   	pop    edi
c001ffc0:	5d                   	pop    ebp
c001ffc1:	c3                   	ret    

c001ffc2 <ATA::read(unsigned long long, int, void*)>:
c001ffc2:	57                   	push   edi
c001ffc3:	b8 04 00 00 00       	mov    eax,0x4
c001ffc8:	56                   	push   esi
c001ffc9:	53                   	push   ebx
c001ffca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ffce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ffd2:	8d 7a ff             	lea    edi,[edx-0x1]
c001ffd5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ffd9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ffdd:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ffe3:	77 25                	ja     c002000a <ATA::read(unsigned long long, int, void*)+0x48>
c001ffe5:	b8 06 00 00 00       	mov    eax,0x6
c001ffea:	85 f6                	test   esi,esi
c001ffec:	74 1c                	je     c002000a <ATA::read(unsigned long long, int, void*)+0x48>
c001ffee:	50                   	push   eax
c001ffef:	50                   	push   eax
c001fff0:	6a 00                	push   0x0
c001fff2:	56                   	push   esi
c001fff3:	52                   	push   edx
c001fff4:	53                   	push   ebx
c001fff5:	51                   	push   ecx
c001fff6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fffa:	e8 cd fb ff ff       	call   c001fbcc <ATA::access(unsigned long long, int, void*, bool)>
c001ffff:	83 c4 20             	add    esp,0x20
c0020002:	85 c0                	test   eax,eax
c0020004:	0f 95 c0             	setne  al
c0020007:	0f b6 c0             	movzx  eax,al
c002000a:	5b                   	pop    ebx
c002000b:	5e                   	pop    esi
c002000c:	5f                   	pop    edi
c002000d:	c3                   	ret    

c002000e <ATA::write(unsigned long long, int, void*)>:
c002000e:	55                   	push   ebp
c002000f:	57                   	push   edi
c0020010:	56                   	push   esi
c0020011:	53                   	push   ebx
c0020012:	83 ec 18             	sub    esp,0x18
c0020015:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020019:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002001d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0020021:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0020025:	68 a1 74 02 c0       	push   0xc00274a1
c002002a:	e8 18 d0 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c002002f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0020032:	83 c4 10             	add    esp,0x10
c0020035:	b8 04 00 00 00       	mov    eax,0x4
c002003a:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020040:	77 25                	ja     c0020067 <ATA::write(unsigned long long, int, void*)+0x59>
c0020042:	b8 06 00 00 00       	mov    eax,0x6
c0020047:	85 f6                	test   esi,esi
c0020049:	74 1c                	je     c0020067 <ATA::write(unsigned long long, int, void*)+0x59>
c002004b:	50                   	push   eax
c002004c:	50                   	push   eax
c002004d:	6a 01                	push   0x1
c002004f:	56                   	push   esi
c0020050:	53                   	push   ebx
c0020051:	55                   	push   ebp
c0020052:	57                   	push   edi
c0020053:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020057:	e8 70 fb ff ff       	call   c001fbcc <ATA::access(unsigned long long, int, void*, bool)>
c002005c:	83 c4 20             	add    esp,0x20
c002005f:	85 c0                	test   eax,eax
c0020061:	0f 95 c0             	setne  al
c0020064:	0f b6 c0             	movzx  eax,al
c0020067:	83 c4 0c             	add    esp,0xc
c002006a:	5b                   	pop    ebx
c002006b:	5e                   	pop    esi
c002006c:	5f                   	pop    edi
c002006d:	5d                   	pop    ebp
c002006e:	c3                   	ret    
c002006f:	90                   	nop

c0020070 <ATA::detectCHS()>:
c0020070:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020074:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002007a:	c1 e0 06             	shl    eax,0x6
c002007d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0020083:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002008d:	c7 44 24 04 ad 74 02 c0 	mov    DWORD PTR [esp+0x4],0xc00274ad
c0020095:	e9 8f 50 ff ff       	jmp    c0015129 <Krnl::panic(char const*)>

c002009a <ATA::open(int, int, void*)>:
c002009a:	53                   	push   ebx
c002009b:	83 ec 08             	sub    esp,0x8
c002009e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00200a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00200a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00200aa:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00200b0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00200b6:	c1 e0 06             	shl    eax,0x6
c00200b9:	01 d0                	add    eax,edx
c00200bb:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00200c2:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00200c8:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00200cf:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00200d9:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00200df:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00200e6:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00200ed:	75 0c                	jne    c00200fb <ATA::open(int, int, void*)+0x61>
c00200ef:	83 ec 0c             	sub    esp,0xc
c00200f2:	53                   	push   ebx
c00200f3:	e8 78 ff ff ff       	call   c0020070 <ATA::detectCHS()>
c00200f8:	83 c4 10             	add    esp,0x10
c00200fb:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0020101:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0020107:	c1 e0 06             	shl    eax,0x6
c002010a:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0020111:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002011b:	d1 e8                	shr    eax,1
c002011d:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0020123:	6a 04                	push   0x4
c0020125:	6a 0c                	push   0xc
c0020127:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002012e:	50                   	push   eax
c002012f:	52                   	push   edx
c0020130:	e8 69 ea ff ff       	call   c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020135:	90                   	nop
c0020136:	90                   	nop
c0020137:	6a 00                	push   0x0
c0020139:	6a 0c                	push   0xc
c002013b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020142:	50                   	push   eax
c0020143:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020149:	e8 50 ea ff ff       	call   c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002014e:	83 c4 14             	add    esp,0x14
c0020151:	53                   	push   ebx
c0020152:	e8 03 e9 fe ff       	call   c000ea5a <PhysicalDisk::startCache()>
c0020157:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002015a:	e8 73 0a ff ff       	call   c0010bd2 <createPartitionsForDisk(PhysicalDisk*)>
c002015f:	31 c0                	xor    eax,eax
c0020161:	83 c4 18             	add    esp,0x18
c0020164:	5b                   	pop    ebx
c0020165:	c3                   	ret    

c0020166 <ATAPI::write(unsigned long long, int, void*)>:
c0020166:	b8 03 00 00 00       	mov    eax,0x3
c002016b:	c3                   	ret    

c002016c <ATAPI::close(int, int, void*)>:
c002016c:	83 ec 0c             	sub    esp,0xc
c002016f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020173:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020179:	85 c0                	test   eax,eax
c002017b:	74 0c                	je     c0020189 <ATAPI::close(int, int, void*)+0x1d>
c002017d:	83 ec 0c             	sub    esp,0xc
c0020180:	8b 10                	mov    edx,DWORD PTR [eax]
c0020182:	50                   	push   eax
c0020183:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020186:	83 c4 10             	add    esp,0x10
c0020189:	31 c0                	xor    eax,eax
c002018b:	83 c4 0c             	add    esp,0xc
c002018e:	c3                   	ret    
c002018f:	90                   	nop

c0020190 <ATAPI::ATAPI()>:
c0020190:	83 ec 0c             	sub    esp,0xc
c0020193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020197:	83 ec 04             	sub    esp,0x4
c002019a:	68 00 08 00 00       	push   0x800
c002019f:	68 99 77 02 c0       	push   0xc0027799
c00201a4:	50                   	push   eax
c00201a5:	e8 48 e8 fe ff       	call   c000e9f2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00201aa:	83 c4 10             	add    esp,0x10
c00201ad:	ba 2c 75 02 c0       	mov    edx,0xc002752c
c00201b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201b6:	89 10                	mov    DWORD PTR [eax],edx
c00201b8:	90                   	nop
c00201b9:	83 c4 0c             	add    esp,0xc
c00201bc:	c3                   	ret    
c00201bd:	90                   	nop

c00201be <ATAPI::readyForCommand()>:
c00201be:	56                   	push   esi
c00201bf:	53                   	push   ebx
c00201c0:	53                   	push   ebx
c00201c1:	31 db                	xor    ebx,ebx
c00201c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00201c7:	51                   	push   ecx
c00201c8:	6a 0c                	push   0xc
c00201ca:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00201d1:	50                   	push   eax
c00201d2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00201d8:	e8 81 ea ff ff       	call   c001ec5e <IDE::read(unsigned char, unsigned char)>
c00201dd:	83 c4 10             	add    esp,0x10
c00201e0:	a8 88                	test   al,0x88
c00201e2:	74 25                	je     c0020209 <ATAPI::readyForCommand()+0x4b>
c00201e4:	43                   	inc    ebx
c00201e5:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c00201eb:	7e da                	jle    c00201c7 <ATAPI::readyForCommand()+0x9>
c00201ed:	83 ec 0c             	sub    esp,0xc
c00201f0:	68 5e 01 00 00       	push   0x15e
c00201f5:	e8 32 8e ff ff       	call   c001902c <milliTenthSleep(unsigned int)>
c00201fa:	83 c4 10             	add    esp,0x10
c00201fd:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c0020203:	75 c2                	jne    c00201c7 <ATAPI::readyForCommand()+0x9>
c0020205:	31 c0                	xor    eax,eax
c0020207:	eb 02                	jmp    c002020b <ATAPI::readyForCommand()+0x4d>
c0020209:	b0 01                	mov    al,0x1
c002020b:	5a                   	pop    edx
c002020c:	5b                   	pop    ebx
c002020d:	5e                   	pop    esi
c002020e:	c3                   	ret    
c002020f:	90                   	nop

c0020210 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0020210:	55                   	push   ebp
c0020211:	57                   	push   edi
c0020212:	56                   	push   esi
c0020213:	53                   	push   ebx
c0020214:	83 ec 20             	sub    esp,0x20
c0020217:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002021b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002021f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0020223:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0020227:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002022b:	6a 01                	push   0x1
c002022d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020234:	50                   	push   eax
c0020235:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002023b:	e8 66 eb ff ff       	call   c001eda6 <IDE::enableIRQs(unsigned char, bool)>
c0020240:	5e                   	pop    esi
c0020241:	58                   	pop    eax
c0020242:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020249:	50                   	push   eax
c002024a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020250:	e8 23 e9 ff ff       	call   c001eb78 <IDE::prepareInterrupt(unsigned char)>
c0020255:	89 3c 24             	mov    DWORD PTR [esp],edi
c0020258:	e8 61 ff ff ff       	call   c00201be <ATAPI::readyForCommand()>
c002025d:	83 c4 10             	add    esp,0x10
c0020260:	84 c0                	test   al,al
c0020262:	75 0a                	jne    c002026e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0020264:	bb 01 00 00 00       	mov    ebx,0x1
c0020269:	e9 57 02 00 00       	jmp    c00204c5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002026e:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0020274:	c1 e0 04             	shl    eax,0x4
c0020277:	0f b6 c0             	movzx  eax,al
c002027a:	50                   	push   eax
c002027b:	6a 06                	push   0x6
c002027d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020284:	50                   	push   eax
c0020285:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002028b:	e8 0e e9 ff ff       	call   c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020290:	6a 00                	push   0x0
c0020292:	6a 01                	push   0x1
c0020294:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002029b:	50                   	push   eax
c002029c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00202a2:	e8 f7 e8 ff ff       	call   c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00202a7:	83 c4 20             	add    esp,0x20
c00202aa:	0f b6 c3             	movzx  eax,bl
c00202ad:	0f b6 df             	movzx  ebx,bh
c00202b0:	50                   	push   eax
c00202b1:	6a 04                	push   0x4
c00202b3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00202ba:	50                   	push   eax
c00202bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00202c1:	e8 d8 e8 ff ff       	call   c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00202c6:	53                   	push   ebx
c00202c7:	6a 05                	push   0x5
c00202c9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00202d0:	50                   	push   eax
c00202d1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00202d7:	e8 c2 e8 ff ff       	call   c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00202dc:	83 c4 20             	add    esp,0x20
c00202df:	68 a0 00 00 00       	push   0xa0
c00202e4:	6a 07                	push   0x7
c00202e6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00202ed:	50                   	push   eax
c00202ee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00202f4:	e8 a5 e8 ff ff       	call   c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00202f9:	83 c4 0c             	add    esp,0xc
c00202fc:	6a 01                	push   0x1
c00202fe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020305:	50                   	push   eax
c0020306:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002030c:	e8 25 f3 ff ff       	call   c001f636 <IDE::polling(unsigned char, unsigned int)>
c0020311:	83 c4 10             	add    esp,0x10
c0020314:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c002031a:	84 c0                	test   al,al
c002031c:	74 23                	je     c0020341 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002031e:	0f b6 d8             	movzx  ebx,al
c0020321:	0f b6 d2             	movzx  edx,dl
c0020324:	53                   	push   ebx
c0020325:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002032c:	50                   	push   eax
c002032d:	52                   	push   edx
c002032e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020334:	e8 4d f2 ff ff       	call   c001f586 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0020339:	83 c4 10             	add    esp,0x10
c002033c:	e9 84 01 00 00       	jmp    c00204c5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0020341:	0f b6 d2             	movzx  edx,dl
c0020344:	53                   	push   ebx
c0020345:	53                   	push   ebx
c0020346:	52                   	push   edx
c0020347:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002034d:	e8 3a e8 ff ff       	call   c001eb8c <IDE::getBase(unsigned char)>
c0020352:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0020356:	b9 06 00 00 00       	mov    ecx,0x6
c002035b:	89 c2                	mov    edx,eax
c002035d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0020360:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0020364:	83 c4 10             	add    esp,0x10
c0020367:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002036d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020374:	85 db                	test   ebx,ebx
c0020376:	0f 84 ec 00 00 00    	je     c0020468 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002037c:	51                   	push   ecx
c002037d:	51                   	push   ecx
c002037e:	52                   	push   edx
c002037f:	50                   	push   eax
c0020380:	e8 87 e9 ff ff       	call   c001ed0c <IDE::waitInterrupt(unsigned char)>
c0020385:	83 c4 10             	add    esp,0x10
c0020388:	84 c0                	test   al,al
c002038a:	0f 84 d4 fe ff ff    	je     c0020264 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0020390:	56                   	push   esi
c0020391:	56                   	push   esi
c0020392:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020399:	50                   	push   eax
c002039a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00203a0:	e8 d3 e7 ff ff       	call   c001eb78 <IDE::prepareInterrupt(unsigned char)>
c00203a5:	83 c4 0c             	add    esp,0xc
c00203a8:	6a 04                	push   0x4
c00203aa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00203b1:	50                   	push   eax
c00203b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00203b8:	e8 a1 e8 ff ff       	call   c001ec5e <IDE::read(unsigned char, unsigned char)>
c00203bd:	83 c4 0c             	add    esp,0xc
c00203c0:	89 c6                	mov    esi,eax
c00203c2:	6a 05                	push   0x5
c00203c4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00203cb:	50                   	push   eax
c00203cc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00203d2:	e8 87 e8 ff ff       	call   c001ec5e <IDE::read(unsigned char, unsigned char)>
c00203d7:	89 f1                	mov    ecx,esi
c00203d9:	0f b6 c0             	movzx  eax,al
c00203dc:	0f b6 f1             	movzx  esi,cl
c00203df:	c1 e0 08             	shl    eax,0x8
c00203e2:	09 c6                	or     esi,eax
c00203e4:	d1 fe                	sar    esi,1
c00203e6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00203ea:	83 c4 10             	add    esp,0x10
c00203ed:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00203f2:	74 41                	je     c0020435 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00203f4:	31 c9                	xor    ecx,ecx
c00203f6:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00203fc:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020403:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0020407:	75 0a                	jne    c0020413 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0020409:	01 c9                	add    ecx,ecx
c002040b:	01 cd                	add    ebp,ecx
c002040d:	4b                   	dec    ebx
c002040e:	e9 54 ff ff ff       	jmp    c0020367 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0020413:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0020418:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002041c:	51                   	push   ecx
c002041d:	51                   	push   ecx
c002041e:	52                   	push   edx
c002041f:	50                   	push   eax
c0020420:	e8 67 e7 ff ff       	call   c001eb8c <IDE::getBase(unsigned char)>
c0020425:	89 c2                	mov    edx,eax
c0020427:	89 f0                	mov    eax,esi
c0020429:	66 ef                	out    dx,ax
c002042b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002042f:	83 c4 10             	add    esp,0x10
c0020432:	41                   	inc    ecx
c0020433:	eb c1                	jmp    c00203f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0020435:	31 f6                	xor    esi,esi
c0020437:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002043d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020444:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0020448:	75 06                	jne    c0020450 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c002044a:	01 f6                	add    esi,esi
c002044c:	01 f5                	add    ebp,esi
c002044e:	eb bd                	jmp    c002040d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0020450:	51                   	push   ecx
c0020451:	51                   	push   ecx
c0020452:	52                   	push   edx
c0020453:	50                   	push   eax
c0020454:	e8 33 e7 ff ff       	call   c001eb8c <IDE::getBase(unsigned char)>
c0020459:	89 c2                	mov    edx,eax
c002045b:	66 ed                	in     ax,dx
c002045d:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0020462:	83 c4 10             	add    esp,0x10
c0020465:	46                   	inc    esi
c0020466:	eb cf                	jmp    c0020437 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0020468:	51                   	push   ecx
c0020469:	51                   	push   ecx
c002046a:	52                   	push   edx
c002046b:	50                   	push   eax
c002046c:	e8 9b e8 ff ff       	call   c001ed0c <IDE::waitInterrupt(unsigned char)>
c0020471:	83 c4 10             	add    esp,0x10
c0020474:	84 c0                	test   al,al
c0020476:	0f 84 e8 fd ff ff    	je     c0020264 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002047c:	bb a0 86 01 00       	mov    ebx,0x186a0
c0020481:	52                   	push   edx
c0020482:	52                   	push   edx
c0020483:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002048a:	50                   	push   eax
c002048b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020491:	e8 e2 e6 ff ff       	call   c001eb78 <IDE::prepareInterrupt(unsigned char)>
c0020496:	83 c4 10             	add    esp,0x10
c0020499:	50                   	push   eax
c002049a:	50                   	push   eax
c002049b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204a2:	50                   	push   eax
c00204a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204a9:	e8 de e6 ff ff       	call   c001eb8c <IDE::getBase(unsigned char)>
c00204ae:	8d 50 07             	lea    edx,[eax+0x7]
c00204b1:	ec                   	in     al,dx
c00204b2:	83 c4 10             	add    esp,0x10
c00204b5:	a8 88                	test   al,0x88
c00204b7:	74 0a                	je     c00204c3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00204b9:	4b                   	dec    ebx
c00204ba:	75 dd                	jne    c0020499 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00204bc:	bb 02 00 00 00       	mov    ebx,0x2
c00204c1:	eb 02                	jmp    c00204c5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00204c3:	31 db                	xor    ebx,ebx
c00204c5:	83 c4 1c             	add    esp,0x1c
c00204c8:	89 d8                	mov    eax,ebx
c00204ca:	5b                   	pop    ebx
c00204cb:	5e                   	pop    esi
c00204cc:	5f                   	pop    edi
c00204cd:	5d                   	pop    ebp
c00204ce:	c3                   	ret    
c00204cf:	90                   	nop

c00204d0 <ATAPI::diskRemoved()>:
c00204d0:	53                   	push   ebx
c00204d1:	83 ec 14             	sub    esp,0x14
c00204d4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00204d8:	68 a5 77 02 c0       	push   0xc00277a5
c00204dd:	e8 65 cb fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00204e2:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00204e9:	c7 04 24 f8 74 02 c0 	mov    DWORD PTR [esp],0xc00274f8
c00204f0:	e8 52 cb fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00204f5:	58                   	pop    eax
c00204f6:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c00204fc:	e8 4f 04 ff ff       	call   c0010950 <LogicalDisk::unmount()>
c0020501:	c7 04 24 07 75 02 c0 	mov    DWORD PTR [esp],0xc0027507
c0020508:	e8 3a cb fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c002050d:	5a                   	pop    edx
c002050e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020514:	e8 3f 0e ff ff       	call   c0011358 <VCache::writeWriteBuffer()>
c0020519:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c002051f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020523:	83 c4 18             	add    esp,0x18
c0020526:	5b                   	pop    ebx
c0020527:	e9 1c 0e ff ff       	jmp    c0011348 <VCache::invalidateReadBuffer()>

c002052c <ATAPI::eject()>:
c002052c:	57                   	push   edi
c002052d:	b9 03 00 00 00       	mov    ecx,0x3
c0020532:	53                   	push   ebx
c0020533:	83 ec 14             	sub    esp,0x14
c0020536:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002053a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002053e:	fc                   	cld    
c002053f:	31 c0                	xor    eax,eax
c0020541:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020543:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020548:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002054d:	50                   	push   eax
c002054e:	50                   	push   eax
c002054f:	6a 00                	push   0x0
c0020551:	6a 00                	push   0x0
c0020553:	6a 00                	push   0x0
c0020555:	6a 02                	push   0x2
c0020557:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002055b:	50                   	push   eax
c002055c:	53                   	push   ebx
c002055d:	e8 ae fc ff ff       	call   c0020210 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020562:	83 c4 14             	add    esp,0x14
c0020565:	53                   	push   ebx
c0020566:	e8 65 ff ff ff       	call   c00204d0 <ATAPI::diskRemoved()>
c002056b:	83 c4 24             	add    esp,0x24
c002056e:	31 c0                	xor    eax,eax
c0020570:	5b                   	pop    ebx
c0020571:	5f                   	pop    edi
c0020572:	c3                   	ret    
c0020573:	90                   	nop

c0020574 <ATAPI::diskInserted()>:
c0020574:	83 ec 18             	sub    esp,0x18
c0020577:	68 bc 77 02 c0       	push   0xc00277bc
c002057c:	e8 c6 ca fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0020581:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020585:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c002058c:	83 c4 1c             	add    esp,0x1c
c002058f:	c3                   	ret    

c0020590 <ATAPI::detectMedia()>:
c0020590:	56                   	push   esi
c0020591:	53                   	push   ebx
c0020592:	83 ec 28             	sub    esp,0x28
c0020595:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020599:	6a 0c                	push   0xc
c002059b:	6a 00                	push   0x0
c002059d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00205a1:	56                   	push   esi
c00205a2:	e8 dd 00 fe ff       	call   c0000684 <memset>
c00205a7:	58                   	pop    eax
c00205a8:	5a                   	pop    edx
c00205a9:	6a 00                	push   0x0
c00205ab:	6a 00                	push   0x0
c00205ad:	6a 00                	push   0x0
c00205af:	6a 00                	push   0x0
c00205b1:	56                   	push   esi
c00205b2:	53                   	push   ebx
c00205b3:	e8 58 fc ff ff       	call   c0020210 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00205b8:	83 c4 1c             	add    esp,0x1c
c00205bb:	6a 0c                	push   0xc
c00205bd:	6a 00                	push   0x0
c00205bf:	56                   	push   esi
c00205c0:	e8 bf 00 fe ff       	call   c0000684 <memset>
c00205c5:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00205ca:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00205cf:	59                   	pop    ecx
c00205d0:	58                   	pop    eax
c00205d1:	6a 01                	push   0x1
c00205d3:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00205d7:	50                   	push   eax
c00205d8:	6a 00                	push   0x0
c00205da:	6a 12                	push   0x12
c00205dc:	56                   	push   esi
c00205dd:	53                   	push   ebx
c00205de:	e8 2d fc ff ff       	call   c0020210 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00205e3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00205e7:	83 c4 20             	add    esp,0x20
c00205ea:	83 e0 7f             	and    eax,0x7f
c00205ed:	3c 70                	cmp    al,0x70
c00205ef:	74 15                	je     c0020606 <ATAPI::detectMedia()+0x76>
c00205f1:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00205f8:	75 0c                	jne    c0020606 <ATAPI::detectMedia()+0x76>
c00205fa:	83 ec 0c             	sub    esp,0xc
c00205fd:	53                   	push   ebx
c00205fe:	e8 71 ff ff ff       	call   c0020574 <ATAPI::diskInserted()>
c0020603:	83 c4 10             	add    esp,0x10
c0020606:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002060a:	83 e0 0f             	and    eax,0xf
c002060d:	3c 02                	cmp    al,0x2
c002060f:	75 1b                	jne    c002062c <ATAPI::detectMedia()+0x9c>
c0020611:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0020616:	75 2d                	jne    c0020645 <ATAPI::detectMedia()+0xb5>
c0020618:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002061f:	74 24                	je     c0020645 <ATAPI::detectMedia()+0xb5>
c0020621:	83 ec 0c             	sub    esp,0xc
c0020624:	53                   	push   ebx
c0020625:	e8 a6 fe ff ff       	call   c00204d0 <ATAPI::diskRemoved()>
c002062a:	eb 16                	jmp    c0020642 <ATAPI::detectMedia()+0xb2>
c002062c:	84 c0                	test   al,al
c002062e:	75 15                	jne    c0020645 <ATAPI::detectMedia()+0xb5>
c0020630:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020637:	75 0c                	jne    c0020645 <ATAPI::detectMedia()+0xb5>
c0020639:	83 ec 0c             	sub    esp,0xc
c002063c:	53                   	push   ebx
c002063d:	e8 32 ff ff ff       	call   c0020574 <ATAPI::diskInserted()>
c0020642:	83 c4 10             	add    esp,0x10
c0020645:	83 c4 24             	add    esp,0x24
c0020648:	5b                   	pop    ebx
c0020649:	5e                   	pop    esi
c002064a:	c3                   	ret    
c002064b:	90                   	nop

c002064c <ATAPI::open(int, int, void*)>:
c002064c:	56                   	push   esi
c002064d:	53                   	push   ebx
c002064e:	50                   	push   eax
c002064f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020653:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020657:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002065b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020661:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0020667:	c1 e0 06             	shl    eax,0x6
c002066a:	01 d0                	add    eax,edx
c002066c:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0020673:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0020679:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0020680:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002068a:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020690:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020697:	6a 04                	push   0x4
c0020699:	6a 0c                	push   0xc
c002069b:	51                   	push   ecx
c002069c:	52                   	push   edx
c002069d:	e8 fc e4 ff ff       	call   c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00206a2:	90                   	nop
c00206a3:	90                   	nop
c00206a4:	6a 00                	push   0x0
c00206a6:	6a 0c                	push   0xc
c00206a8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00206af:	50                   	push   eax
c00206b0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00206b6:	e8 e3 e4 ff ff       	call   c001eb9e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00206bb:	83 c4 14             	add    esp,0x14
c00206be:	68 74 01 00 00       	push   0x174
c00206c3:	e8 93 96 fe ff       	call   c0009d5b <malloc>
c00206c8:	83 c4 0c             	add    esp,0xc
c00206cb:	89 c6                	mov    esi,eax
c00206cd:	6a 00                	push   0x0
c00206cf:	68 ff ff ff 7f       	push   0x7fffffff
c00206d4:	6a 00                	push   0x0
c00206d6:	6a 00                	push   0x0
c00206d8:	53                   	push   ebx
c00206d9:	68 84 78 02 c0       	push   0xc0027884
c00206de:	50                   	push   eax
c00206df:	e8 78 00 ff ff       	call   c001075c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00206e4:	83 c4 14             	add    esp,0x14
c00206e7:	56                   	push   esi
c00206e8:	e8 25 01 ff ff       	call   c0010812 <LogicalDisk::assignDriveLetter()>
c00206ed:	5a                   	pop    edx
c00206ee:	0f be c0             	movsx  eax,al
c00206f1:	59                   	pop    ecx
c00206f2:	50                   	push   eax
c00206f3:	68 15 75 02 c0       	push   0xc0027515
c00206f8:	e8 4a c9 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00206fd:	58                   	pop    eax
c00206fe:	5a                   	pop    edx
c00206ff:	56                   	push   esi
c0020700:	53                   	push   ebx
c0020701:	e8 b4 de fe ff       	call   c000e5ba <Device::addChild(Device*)>
c0020706:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c002070c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002070f:	e8 46 e3 fe ff       	call   c000ea5a <PhysicalDisk::startCache()>
c0020714:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002071b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002071e:	e8 6d fe ff ff       	call   c0020590 <ATAPI::detectMedia()>
c0020723:	83 c4 14             	add    esp,0x14
c0020726:	31 c0                	xor    eax,eax
c0020728:	5b                   	pop    ebx
c0020729:	5e                   	pop    esi
c002072a:	c3                   	ret    
c002072b:	90                   	nop

c002072c <ATAPI::read(unsigned long long, int, void*)>:
c002072c:	55                   	push   ebp
c002072d:	57                   	push   edi
c002072e:	56                   	push   esi
c002072f:	53                   	push   ebx
c0020730:	83 ec 1c             	sub    esp,0x1c
c0020733:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020737:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002073b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002073f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0020746:	74 41                	je     c0020789 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0020748:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002074c:	b9 03 00 00 00       	mov    ecx,0x3
c0020751:	fc                   	cld    
c0020752:	31 c0                	xor    eax,eax
c0020754:	86 fb                	xchg   bl,bh
c0020756:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020758:	c1 c3 10             	rol    ebx,0x10
c002075b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0020760:	89 e8                	mov    eax,ebp
c0020762:	86 fb                	xchg   bl,bh
c0020764:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0020768:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c002076c:	50                   	push   eax
c002076d:	50                   	push   eax
c002076e:	55                   	push   ebp
c002076f:	c1 e5 0b             	shl    ebp,0xb
c0020772:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020776:	6a 00                	push   0x0
c0020778:	55                   	push   ebp
c0020779:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002077d:	50                   	push   eax
c002077e:	56                   	push   esi
c002077f:	e8 8c fa ff ff       	call   c0020210 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020784:	83 c4 20             	add    esp,0x20
c0020787:	eb 1a                	jmp    c00207a3 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0020789:	83 ec 0c             	sub    esp,0xc
c002078c:	56                   	push   esi
c002078d:	e8 fe fd ff ff       	call   c0020590 <ATAPI::detectMedia()>
c0020792:	83 c4 10             	add    esp,0x10
c0020795:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002079c:	75 aa                	jne    c0020748 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002079e:	b8 02 00 00 00       	mov    eax,0x2
c00207a3:	83 c4 1c             	add    esp,0x1c
c00207a6:	5b                   	pop    ebx
c00207a7:	5e                   	pop    esi
c00207a8:	5f                   	pop    edi
c00207a9:	5d                   	pop    ebp
c00207aa:	c3                   	ret    
c00207ab:	90                   	nop

c00207ac <SATA::close(int, int, void*)>:
c00207ac:	83 ec 0c             	sub    esp,0xc
c00207af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207b3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00207b9:	85 c0                	test   eax,eax
c00207bb:	74 0c                	je     c00207c9 <SATA::close(int, int, void*)+0x1d>
c00207bd:	83 ec 0c             	sub    esp,0xc
c00207c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00207c2:	50                   	push   eax
c00207c3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00207c6:	83 c4 10             	add    esp,0x10
c00207c9:	31 c0                	xor    eax,eax
c00207cb:	83 c4 0c             	add    esp,0xc
c00207ce:	c3                   	ret    
c00207cf:	90                   	nop

c00207d0 <SATA::powerSaving(PowerSavingLevel)>:
c00207d0:	c3                   	ret    
c00207d1:	90                   	nop

c00207d2 <SATA::open(int, int, void*)>:
c00207d2:	56                   	push   esi
c00207d3:	53                   	push   ebx
c00207d4:	51                   	push   ecx
c00207d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00207d9:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c00207e0:	74 2d                	je     c002080f <SATA::open(int, int, void*)+0x3d>
c00207e2:	83 ec 0c             	sub    esp,0xc
c00207e5:	68 5c 75 02 c0       	push   0xc002755c
c00207ea:	e8 c6 95 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00207ef:	83 c4 10             	add    esp,0x10
c00207f2:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c00207f9:	75 14                	jne    c002080f <SATA::open(int, int, void*)+0x3d>
c00207fb:	e4 60                	in     al,0x60
c00207fd:	3c 5a                	cmp    al,0x5a
c00207ff:	74 04                	je     c0020805 <SATA::open(int, int, void*)+0x33>
c0020801:	3c 1c                	cmp    al,0x1c
c0020803:	75 f6                	jne    c00207fb <SATA::open(int, int, void*)+0x29>
c0020805:	e4 60                	in     al,0x60
c0020807:	3c 5a                	cmp    al,0x5a
c0020809:	74 fa                	je     c0020805 <SATA::open(int, int, void*)+0x33>
c002080b:	3c 1c                	cmp    al,0x1c
c002080d:	74 f6                	je     c0020805 <SATA::open(int, int, void*)+0x33>
c002080f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020813:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002081d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020823:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002082d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020831:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002083b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020841:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020848:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c002084f:	74 2d                	je     c002087e <SATA::open(int, int, void*)+0xac>
c0020851:	83 ec 0c             	sub    esp,0xc
c0020854:	68 69 75 02 c0       	push   0xc0027569
c0020859:	e8 57 95 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c002085e:	83 c4 10             	add    esp,0x10
c0020861:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c0020868:	75 14                	jne    c002087e <SATA::open(int, int, void*)+0xac>
c002086a:	e4 60                	in     al,0x60
c002086c:	3c 1c                	cmp    al,0x1c
c002086e:	74 04                	je     c0020874 <SATA::open(int, int, void*)+0xa2>
c0020870:	3c 5a                	cmp    al,0x5a
c0020872:	75 f6                	jne    c002086a <SATA::open(int, int, void*)+0x98>
c0020874:	e4 60                	in     al,0x60
c0020876:	3c 5a                	cmp    al,0x5a
c0020878:	74 fa                	je     c0020874 <SATA::open(int, int, void*)+0xa2>
c002087a:	3c 1c                	cmp    al,0x1c
c002087c:	74 f6                	je     c0020874 <SATA::open(int, int, void*)+0xa2>
c002087e:	e8 8f 9b fe ff       	call   c000a412 <Phys::allocatePage()>
c0020883:	89 c6                	mov    esi,eax
c0020885:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002088b:	81 c6 00 10 00 00    	add    esi,0x1000
c0020891:	e8 7c 9b fe ff       	call   c000a412 <Phys::allocatePage()>
c0020896:	39 c6                	cmp    esi,eax
c0020898:	74 10                	je     c00208aa <SATA::open(int, int, void*)+0xd8>
c002089a:	83 ec 0c             	sub    esp,0xc
c002089d:	68 76 75 02 c0       	push   0xc0027576
c00208a2:	e8 82 48 ff ff       	call   c0015129 <Krnl::panic(char const*)>
c00208a7:	83 c4 10             	add    esp,0x10
c00208aa:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c00208b1:	74 2d                	je     c00208e0 <SATA::open(int, int, void*)+0x10e>
c00208b3:	83 ec 0c             	sub    esp,0xc
c00208b6:	68 8a 75 02 c0       	push   0xc002758a
c00208bb:	e8 f5 94 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00208c0:	83 c4 10             	add    esp,0x10
c00208c3:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c00208ca:	75 14                	jne    c00208e0 <SATA::open(int, int, void*)+0x10e>
c00208cc:	e4 60                	in     al,0x60
c00208ce:	3c 1c                	cmp    al,0x1c
c00208d0:	74 04                	je     c00208d6 <SATA::open(int, int, void*)+0x104>
c00208d2:	3c 5a                	cmp    al,0x5a
c00208d4:	75 f6                	jne    c00208cc <SATA::open(int, int, void*)+0xfa>
c00208d6:	e4 60                	in     al,0x60
c00208d8:	3c 5a                	cmp    al,0x5a
c00208da:	74 fa                	je     c00208d6 <SATA::open(int, int, void*)+0x104>
c00208dc:	3c 1c                	cmp    al,0x1c
c00208de:	74 f6                	je     c00208d6 <SATA::open(int, int, void*)+0x104>
c00208e0:	83 ec 0c             	sub    esp,0xc
c00208e3:	6a 02                	push   0x2
c00208e5:	e8 37 b4 fe ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c00208ea:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00208f0:	6a 03                	push   0x3
c00208f2:	50                   	push   eax
c00208f3:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00208f9:	ff 35 10 8b 02 c0    	push   DWORD PTR ds:0xc0028b10
c00208ff:	e8 c4 ba fe ff       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020904:	83 c4 20             	add    esp,0x20
c0020907:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c002090e:	74 2d                	je     c002093d <SATA::open(int, int, void*)+0x16b>
c0020910:	83 ec 0c             	sub    esp,0xc
c0020913:	68 97 75 02 c0       	push   0xc0027597
c0020918:	e8 98 94 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c002091d:	83 c4 10             	add    esp,0x10
c0020920:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c0020927:	75 14                	jne    c002093d <SATA::open(int, int, void*)+0x16b>
c0020929:	e4 60                	in     al,0x60
c002092b:	3c 1c                	cmp    al,0x1c
c002092d:	74 04                	je     c0020933 <SATA::open(int, int, void*)+0x161>
c002092f:	3c 5a                	cmp    al,0x5a
c0020931:	75 f6                	jne    c0020929 <SATA::open(int, int, void*)+0x157>
c0020933:	e4 60                	in     al,0x60
c0020935:	3c 5a                	cmp    al,0x5a
c0020937:	74 fa                	je     c0020933 <SATA::open(int, int, void*)+0x161>
c0020939:	3c 1c                	cmp    al,0x1c
c002093b:	74 f6                	je     c0020933 <SATA::open(int, int, void*)+0x161>
c002093d:	83 ec 0c             	sub    esp,0xc
c0020940:	53                   	push   ebx
c0020941:	e8 14 e1 fe ff       	call   c000ea5a <PhysicalDisk::startCache()>
c0020946:	83 c4 10             	add    esp,0x10
c0020949:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c0020950:	74 2d                	je     c002097f <SATA::open(int, int, void*)+0x1ad>
c0020952:	83 ec 0c             	sub    esp,0xc
c0020955:	68 a4 75 02 c0       	push   0xc00275a4
c002095a:	e8 56 94 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c002095f:	83 c4 10             	add    esp,0x10
c0020962:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c0020969:	75 14                	jne    c002097f <SATA::open(int, int, void*)+0x1ad>
c002096b:	e4 60                	in     al,0x60
c002096d:	3c 1c                	cmp    al,0x1c
c002096f:	74 04                	je     c0020975 <SATA::open(int, int, void*)+0x1a3>
c0020971:	3c 5a                	cmp    al,0x5a
c0020973:	75 f6                	jne    c002096b <SATA::open(int, int, void*)+0x199>
c0020975:	e4 60                	in     al,0x60
c0020977:	3c 5a                	cmp    al,0x5a
c0020979:	74 fa                	je     c0020975 <SATA::open(int, int, void*)+0x1a3>
c002097b:	3c 1c                	cmp    al,0x1c
c002097d:	74 f6                	je     c0020975 <SATA::open(int, int, void*)+0x1a3>
c002097f:	83 ec 0c             	sub    esp,0xc
c0020982:	53                   	push   ebx
c0020983:	e8 4a 02 ff ff       	call   c0010bd2 <createPartitionsForDisk(PhysicalDisk*)>
c0020988:	83 c4 10             	add    esp,0x10
c002098b:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c0020992:	74 2d                	je     c00209c1 <SATA::open(int, int, void*)+0x1ef>
c0020994:	83 ec 0c             	sub    esp,0xc
c0020997:	68 b1 75 02 c0       	push   0xc00275b1
c002099c:	e8 14 94 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00209a1:	83 c4 10             	add    esp,0x10
c00209a4:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c00209ab:	75 14                	jne    c00209c1 <SATA::open(int, int, void*)+0x1ef>
c00209ad:	e4 60                	in     al,0x60
c00209af:	3c 1c                	cmp    al,0x1c
c00209b1:	74 04                	je     c00209b7 <SATA::open(int, int, void*)+0x1e5>
c00209b3:	3c 5a                	cmp    al,0x5a
c00209b5:	75 f6                	jne    c00209ad <SATA::open(int, int, void*)+0x1db>
c00209b7:	e4 60                	in     al,0x60
c00209b9:	3c 5a                	cmp    al,0x5a
c00209bb:	74 fa                	je     c00209b7 <SATA::open(int, int, void*)+0x1e5>
c00209bd:	3c 1c                	cmp    al,0x1c
c00209bf:	74 f6                	je     c00209b7 <SATA::open(int, int, void*)+0x1e5>
c00209c1:	5a                   	pop    edx
c00209c2:	31 c0                	xor    eax,eax
c00209c4:	5b                   	pop    ebx
c00209c5:	5e                   	pop    esi
c00209c6:	c3                   	ret    
c00209c7:	90                   	nop

c00209c8 <SATA::SATA()>:
c00209c8:	83 ec 0c             	sub    esp,0xc
c00209cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209cf:	83 ec 04             	sub    esp,0x4
c00209d2:	68 00 02 00 00       	push   0x200
c00209d7:	68 be 75 02 c0       	push   0xc00275be
c00209dc:	50                   	push   eax
c00209dd:	e8 10 e0 fe ff       	call   c000e9f2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00209e2:	83 c4 10             	add    esp,0x10
c00209e5:	ba 68 77 02 c0       	mov    edx,0xc0027768
c00209ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209ee:	89 10                	mov    DWORD PTR [eax],edx
c00209f0:	90                   	nop
c00209f1:	83 c4 0c             	add    esp,0xc
c00209f4:	c3                   	ret    
c00209f5:	90                   	nop

c00209f6 <SATA::access(unsigned long long, int, void*, bool)>:
c00209f6:	55                   	push   ebp
c00209f7:	57                   	push   edi
c00209f8:	56                   	push   esi
c00209f9:	53                   	push   ebx
c00209fa:	83 ec 2c             	sub    esp,0x2c
c00209fd:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020a01:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020a05:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020a09:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c0020a10:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020a14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020a18:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020a1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a20:	75 19                	jne    c0020a3b <SATA::access(unsigned long long, int, void*, bool)+0x45>
c0020a22:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0020a27:	7e 41                	jle    c0020a6a <SATA::access(unsigned long long, int, void*, bool)+0x74>
c0020a29:	83 ec 0c             	sub    esp,0xc
c0020a2c:	68 dd 75 02 c0       	push   0xc00275dd
c0020a31:	e8 f3 46 ff ff       	call   c0015129 <Krnl::panic(char const*)>
c0020a36:	83 c4 10             	add    esp,0x10
c0020a39:	eb 2f                	jmp    c0020a6a <SATA::access(unsigned long long, int, void*, bool)+0x74>
c0020a3b:	83 ec 0c             	sub    esp,0xc
c0020a3e:	68 ce 75 02 c0       	push   0xc00275ce
c0020a43:	e8 6d 93 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020a48:	83 c4 10             	add    esp,0x10
c0020a4b:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c0020a52:	75 ce                	jne    c0020a22 <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c0020a54:	e4 60                	in     al,0x60
c0020a56:	3c 1c                	cmp    al,0x1c
c0020a58:	74 04                	je     c0020a5e <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020a5a:	3c 5a                	cmp    al,0x5a
c0020a5c:	75 f6                	jne    c0020a54 <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c0020a5e:	e4 60                	in     al,0x60
c0020a60:	3c 5a                	cmp    al,0x5a
c0020a62:	74 fa                	je     c0020a5e <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020a64:	3c 1c                	cmp    al,0x1c
c0020a66:	74 f6                	je     c0020a5e <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020a68:	eb b8                	jmp    c0020a22 <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c0020a6a:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c0020a71:	75 29                	jne    c0020a9c <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c0020a73:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020a79:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c0020a7f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020a85:	8d 75 02             	lea    esi,[ebp+0x2]
c0020a88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020a8c:	c1 e6 07             	shl    esi,0x7
c0020a8f:	01 c6                	add    esi,eax
c0020a91:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c0020a98:	74 4a                	je     c0020ae4 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020a9a:	eb 2f                	jmp    c0020acb <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c0020a9c:	83 ec 0c             	sub    esp,0xc
c0020a9f:	68 16 76 02 c0       	push   0xc0027616
c0020aa4:	e8 0c 93 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020aa9:	83 c4 10             	add    esp,0x10
c0020aac:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c0020ab3:	75 be                	jne    c0020a73 <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020ab5:	e4 60                	in     al,0x60
c0020ab7:	3c 1c                	cmp    al,0x1c
c0020ab9:	74 04                	je     c0020abf <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020abb:	3c 5a                	cmp    al,0x5a
c0020abd:	75 f6                	jne    c0020ab5 <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c0020abf:	e4 60                	in     al,0x60
c0020ac1:	3c 5a                	cmp    al,0x5a
c0020ac3:	74 fa                	je     c0020abf <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020ac5:	3c 1c                	cmp    al,0x1c
c0020ac7:	74 f6                	je     c0020abf <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020ac9:	eb a8                	jmp    c0020a73 <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020acb:	83 ec 0c             	sub    esp,0xc
c0020ace:	68 25 76 02 c0       	push   0xc0027625
c0020ad3:	e8 dd 92 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020ad8:	83 c4 10             	add    esp,0x10
c0020adb:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c0020ae2:	74 3d                	je     c0020b21 <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c0020ae4:	89 e8                	mov    eax,ebp
c0020ae6:	c1 e0 07             	shl    eax,0x7
c0020ae9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020aed:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020af7:	52                   	push   edx
c0020af8:	52                   	push   edx
c0020af9:	56                   	push   esi
c0020afa:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020b00:	e8 11 ec ff ff       	call   c001f716 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020b05:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020b09:	83 c4 10             	add    esp,0x10
c0020b0c:	b8 01 00 00 00       	mov    eax,0x1
c0020b11:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020b16:	75 1d                	jne    c0020b35 <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c0020b18:	e9 c8 04 00 00       	jmp    c0020fe5 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020b1d:	3c 5a                	cmp    al,0x5a
c0020b1f:	74 0c                	je     c0020b2d <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020b21:	e4 60                	in     al,0x60
c0020b23:	3c 1c                	cmp    al,0x1c
c0020b25:	75 f6                	jne    c0020b1d <SATA::access(unsigned long long, int, void*, bool)+0x127>
c0020b27:	eb 04                	jmp    c0020b2d <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020b29:	3c 1c                	cmp    al,0x1c
c0020b2b:	75 b7                	jne    c0020ae4 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020b2d:	e4 60                	in     al,0x60
c0020b2f:	3c 5a                	cmp    al,0x5a
c0020b31:	74 fa                	je     c0020b2d <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020b33:	eb f4                	jmp    c0020b29 <SATA::access(unsigned long long, int, void*, bool)+0x133>
c0020b35:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c0020b3c:	74 3a                	je     c0020b78 <SATA::access(unsigned long long, int, void*, bool)+0x182>
c0020b3e:	83 ec 0c             	sub    esp,0xc
c0020b41:	68 34 76 02 c0       	push   0xc0027634
c0020b46:	e8 6a 92 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020b4b:	83 c4 10             	add    esp,0x10
c0020b4e:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c0020b55:	74 0d                	je     c0020b64 <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c0020b57:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020b5c:	74 34                	je     c0020b92 <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c0020b5e:	eb 1f                	jmp    c0020b7f <SATA::access(unsigned long long, int, void*, bool)+0x189>
c0020b60:	3c 1c                	cmp    al,0x1c
c0020b62:	74 0c                	je     c0020b70 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020b64:	e4 60                	in     al,0x60
c0020b66:	3c 5a                	cmp    al,0x5a
c0020b68:	75 f6                	jne    c0020b60 <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c0020b6a:	eb 04                	jmp    c0020b70 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020b6c:	3c 1c                	cmp    al,0x1c
c0020b6e:	75 e7                	jne    c0020b57 <SATA::access(unsigned long long, int, void*, bool)+0x161>
c0020b70:	e4 60                	in     al,0x60
c0020b72:	3c 5a                	cmp    al,0x5a
c0020b74:	74 fa                	je     c0020b70 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020b76:	eb f4                	jmp    c0020b6c <SATA::access(unsigned long long, int, void*, bool)+0x176>
c0020b78:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020b7d:	74 1c                	je     c0020b9b <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020b7f:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0020b83:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020b89:	c1 e1 09             	shl    ecx,0x9
c0020b8c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020b90:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020b92:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c0020b99:	75 55                	jne    c0020bf0 <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c0020b9b:	8d 45 02             	lea    eax,[ebp+0x2]
c0020b9e:	c1 e0 07             	shl    eax,0x7
c0020ba1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020ba5:	8b 38                	mov    edi,DWORD PTR [eax]
c0020ba7:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020bad:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c0020bb3:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c0020bb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bbd:	c1 e0 05             	shl    eax,0x5
c0020bc0:	01 c7                	add    edi,eax
c0020bc2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020bc6:	83 e0 01             	and    eax,0x1
c0020bc9:	c1 e0 06             	shl    eax,0x6
c0020bcc:	88 c2                	mov    dl,al
c0020bce:	8a 07                	mov    al,BYTE PTR [edi]
c0020bd0:	83 e0 bf             	and    eax,0xffffffbf
c0020bd3:	09 d0                	or     eax,edx
c0020bd5:	88 07                	mov    BYTE PTR [edi],al
c0020bd7:	8b 07                	mov    eax,DWORD PTR [edi]
c0020bd9:	25 e0 ff 00 00       	and    eax,0xffe0
c0020bde:	0d 05 00 01 00       	or     eax,0x10005
c0020be3:	89 07                	mov    DWORD PTR [edi],eax
c0020be5:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c0020bec:	74 4d                	je     c0020c3b <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020bee:	eb 32                	jmp    c0020c22 <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c0020bf0:	83 ec 0c             	sub    esp,0xc
c0020bf3:	68 43 76 02 c0       	push   0xc0027643
c0020bf8:	e8 b8 91 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020bfd:	83 c4 10             	add    esp,0x10
c0020c00:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c0020c07:	75 92                	jne    c0020b9b <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020c09:	e4 60                	in     al,0x60
c0020c0b:	3c 1c                	cmp    al,0x1c
c0020c0d:	74 04                	je     c0020c13 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020c0f:	3c 5a                	cmp    al,0x5a
c0020c11:	75 f6                	jne    c0020c09 <SATA::access(unsigned long long, int, void*, bool)+0x213>
c0020c13:	e4 60                	in     al,0x60
c0020c15:	3c 5a                	cmp    al,0x5a
c0020c17:	74 fa                	je     c0020c13 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020c19:	3c 1c                	cmp    al,0x1c
c0020c1b:	74 f6                	je     c0020c13 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020c1d:	e9 79 ff ff ff       	jmp    c0020b9b <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020c22:	83 ec 0c             	sub    esp,0xc
c0020c25:	68 52 76 02 c0       	push   0xc0027652
c0020c2a:	e8 86 91 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020c2f:	83 c4 10             	add    esp,0x10
c0020c32:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c0020c39:	74 3b                	je     c0020c76 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020c3b:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020c41:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c0020c47:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c0020c4d:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c0020c50:	50                   	push   eax
c0020c51:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c0020c55:	83 c0 08             	add    eax,0x8
c0020c58:	c1 e0 04             	shl    eax,0x4
c0020c5b:	50                   	push   eax
c0020c5c:	6a 00                	push   0x0
c0020c5e:	56                   	push   esi
c0020c5f:	e8 20 fa fd ff       	call   c0000684 <memset>
c0020c64:	83 c4 10             	add    esp,0x10
c0020c67:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c0020c6e:	74 33                	je     c0020ca3 <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020c70:	eb 18                	jmp    c0020c8a <SATA::access(unsigned long long, int, void*, bool)+0x294>
c0020c72:	3c 1c                	cmp    al,0x1c
c0020c74:	74 0c                	je     c0020c82 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020c76:	e4 60                	in     al,0x60
c0020c78:	3c 5a                	cmp    al,0x5a
c0020c7a:	75 f6                	jne    c0020c72 <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c0020c7c:	eb 04                	jmp    c0020c82 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020c7e:	3c 1c                	cmp    al,0x1c
c0020c80:	75 b9                	jne    c0020c3b <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020c82:	e4 60                	in     al,0x60
c0020c84:	3c 5a                	cmp    al,0x5a
c0020c86:	74 fa                	je     c0020c82 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020c88:	eb f4                	jmp    c0020c7e <SATA::access(unsigned long long, int, void*, bool)+0x288>
c0020c8a:	83 ec 0c             	sub    esp,0xc
c0020c8d:	68 61 76 02 c0       	push   0xc0027661
c0020c92:	e8 1e 91 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020c97:	83 c4 10             	add    esp,0x10
c0020c9a:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c0020ca1:	74 48                	je     c0020ceb <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c0020ca3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020ca9:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020caf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020cb3:	c1 e0 09             	shl    eax,0x9
c0020cb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020cba:	48                   	dec    eax
c0020cbb:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020cc0:	89 c2                	mov    edx,eax
c0020cc2:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020cc8:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020ccd:	09 d0                	or     eax,edx
c0020ccf:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020cd5:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0020cdc:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c0020ce3:	74 33                	je     c0020d18 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020ce5:	eb 18                	jmp    c0020cff <SATA::access(unsigned long long, int, void*, bool)+0x309>
c0020ce7:	3c 1c                	cmp    al,0x1c
c0020ce9:	74 0c                	je     c0020cf7 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020ceb:	e4 60                	in     al,0x60
c0020ced:	3c 5a                	cmp    al,0x5a
c0020cef:	75 f6                	jne    c0020ce7 <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c0020cf1:	eb 04                	jmp    c0020cf7 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020cf3:	3c 1c                	cmp    al,0x1c
c0020cf5:	75 ac                	jne    c0020ca3 <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020cf7:	e4 60                	in     al,0x60
c0020cf9:	3c 5a                	cmp    al,0x5a
c0020cfb:	74 fa                	je     c0020cf7 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020cfd:	eb f4                	jmp    c0020cf3 <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c0020cff:	83 ec 0c             	sub    esp,0xc
c0020d02:	68 70 76 02 c0       	push   0xc0027670
c0020d07:	e8 a9 90 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020d0c:	83 c4 10             	add    esp,0x10
c0020d0f:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c0020d16:	74 63                	je     c0020d7b <SATA::access(unsigned long long, int, void*, bool)+0x385>
c0020d18:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020d1b:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0020d1f:	66 25 00 7f          	and    ax,0x7f00
c0020d23:	66 0d 27 80          	or     ax,0x8027
c0020d27:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0020d2c:	66 89 06             	mov    WORD PTR [esi],ax
c0020d2f:	19 c0                	sbb    eax,eax
c0020d31:	83 e0 f0             	and    eax,0xfffffff0
c0020d34:	83 c0 35             	add    eax,0x35
c0020d37:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020d3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d3e:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c0020d42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d46:	c1 e8 10             	shr    eax,0x10
c0020d49:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d50:	c1 e8 18             	shr    eax,0x18
c0020d53:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c0020d5a:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020d5d:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0020d61:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0020d64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d68:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0020d6b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020d6f:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0020d73:	74 33                	je     c0020da8 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020d75:	eb 18                	jmp    c0020d8f <SATA::access(unsigned long long, int, void*, bool)+0x399>
c0020d77:	3c 1c                	cmp    al,0x1c
c0020d79:	74 0c                	je     c0020d87 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020d7b:	e4 60                	in     al,0x60
c0020d7d:	3c 5a                	cmp    al,0x5a
c0020d7f:	75 f6                	jne    c0020d77 <SATA::access(unsigned long long, int, void*, bool)+0x381>
c0020d81:	eb 04                	jmp    c0020d87 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020d83:	3c 1c                	cmp    al,0x1c
c0020d85:	75 91                	jne    c0020d18 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020d87:	e4 60                	in     al,0x60
c0020d89:	3c 5a                	cmp    al,0x5a
c0020d8b:	74 fa                	je     c0020d87 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020d8d:	eb f4                	jmp    c0020d83 <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c0020d8f:	83 ec 0c             	sub    esp,0xc
c0020d92:	68 7f 76 02 c0       	push   0xc002767f
c0020d97:	e8 19 90 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020d9c:	83 c4 10             	add    esp,0x10
c0020d9f:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c0020da6:	74 11                	je     c0020db9 <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c0020da8:	89 e8                	mov    eax,ebp
c0020daa:	31 f6                	xor    esi,esi
c0020dac:	c1 e0 07             	shl    eax,0x7
c0020daf:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020db3:	eb 21                	jmp    c0020dd6 <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c0020db5:	3c 1c                	cmp    al,0x1c
c0020db7:	74 0c                	je     c0020dc5 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020db9:	e4 60                	in     al,0x60
c0020dbb:	3c 5a                	cmp    al,0x5a
c0020dbd:	75 f6                	jne    c0020db5 <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c0020dbf:	eb 04                	jmp    c0020dc5 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020dc1:	3c 1c                	cmp    al,0x1c
c0020dc3:	75 e3                	jne    c0020da8 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020dc5:	e4 60                	in     al,0x60
c0020dc7:	3c 5a                	cmp    al,0x5a
c0020dc9:	74 fa                	je     c0020dc5 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020dcb:	eb f4                	jmp    c0020dc1 <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c0020dcd:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020dd3:	74 0c                	je     c0020de1 <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c0020dd5:	46                   	inc    esi
c0020dd6:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c0020ddc:	80 e2 88             	and    dl,0x88
c0020ddf:	75 ec                	jne    c0020dcd <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c0020de1:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c0020de8:	74 3d                	je     c0020e27 <SATA::access(unsigned long long, int, void*, bool)+0x431>
c0020dea:	83 ec 0c             	sub    esp,0xc
c0020ded:	68 8e 76 02 c0       	push   0xc002768e
c0020df2:	e8 be 8f fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020df7:	8b 15 00 8a 02 c0    	mov    edx,DWORD PTR ds:0xc0028a00
c0020dfd:	83 c4 10             	add    esp,0x10
c0020e00:	f6 c2 80             	test   dl,0x80
c0020e03:	74 0e                	je     c0020e13 <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c0020e05:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020e0b:	75 2f                	jne    c0020e3c <SATA::access(unsigned long long, int, void*, bool)+0x446>
c0020e0d:	eb 20                	jmp    c0020e2f <SATA::access(unsigned long long, int, void*, bool)+0x439>
c0020e0f:	3c 1c                	cmp    al,0x1c
c0020e11:	74 0c                	je     c0020e1f <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020e13:	e4 60                	in     al,0x60
c0020e15:	3c 5a                	cmp    al,0x5a
c0020e17:	75 f6                	jne    c0020e0f <SATA::access(unsigned long long, int, void*, bool)+0x419>
c0020e19:	eb 04                	jmp    c0020e1f <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020e1b:	3c 1c                	cmp    al,0x1c
c0020e1d:	75 e6                	jne    c0020e05 <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c0020e1f:	e4 60                	in     al,0x60
c0020e21:	3c 5a                	cmp    al,0x5a
c0020e23:	74 fa                	je     c0020e1f <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020e25:	eb f4                	jmp    c0020e1b <SATA::access(unsigned long long, int, void*, bool)+0x425>
c0020e27:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020e2d:	75 13                	jne    c0020e42 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020e2f:	83 ec 0c             	sub    esp,0xc
c0020e32:	68 9e 76 02 c0       	push   0xc002769e
c0020e37:	e9 d2 00 00 00       	jmp    c0020f0e <SATA::access(unsigned long long, int, void*, bool)+0x518>
c0020e3c:	0f ba e2 0b          	bt     edx,0xb
c0020e40:	72 25                	jb     c0020e67 <SATA::access(unsigned long long, int, void*, bool)+0x471>
c0020e42:	be 01 00 00 00       	mov    esi,0x1
c0020e47:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020e4b:	89 e8                	mov    eax,ebp
c0020e4d:	d3 e6                	shl    esi,cl
c0020e4f:	c1 e0 07             	shl    eax,0x7
c0020e52:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020e56:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c0020e5d:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c0020e63:	74 4a                	je     c0020eaf <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020e65:	eb 2f                	jmp    c0020e96 <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c0020e67:	83 ec 0c             	sub    esp,0xc
c0020e6a:	68 ac 76 02 c0       	push   0xc00276ac
c0020e6f:	e8 41 8f fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020e74:	83 c4 10             	add    esp,0x10
c0020e77:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c0020e7e:	75 c2                	jne    c0020e42 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020e80:	e4 60                	in     al,0x60
c0020e82:	3c 5a                	cmp    al,0x5a
c0020e84:	74 04                	je     c0020e8a <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020e86:	3c 1c                	cmp    al,0x1c
c0020e88:	75 f6                	jne    c0020e80 <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c0020e8a:	e4 60                	in     al,0x60
c0020e8c:	3c 5a                	cmp    al,0x5a
c0020e8e:	74 fa                	je     c0020e8a <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020e90:	3c 1c                	cmp    al,0x1c
c0020e92:	74 f6                	je     c0020e8a <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020e94:	eb ac                	jmp    c0020e42 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020e96:	83 ec 0c             	sub    esp,0xc
c0020e99:	68 bc 76 02 c0       	push   0xc00276bc
c0020e9e:	e8 12 8f fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020ea3:	83 c4 10             	add    esp,0x10
c0020ea6:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c0020ead:	74 0f                	je     c0020ebe <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c0020eaf:	89 e8                	mov    eax,ebp
c0020eb1:	c1 e0 07             	shl    eax,0x7
c0020eb4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020eb8:	eb 24                	jmp    c0020ede <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c0020eba:	3c 1c                	cmp    al,0x1c
c0020ebc:	74 0c                	je     c0020eca <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020ebe:	e4 60                	in     al,0x60
c0020ec0:	3c 5a                	cmp    al,0x5a
c0020ec2:	75 f6                	jne    c0020eba <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c0020ec4:	eb 04                	jmp    c0020eca <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020ec6:	3c 1c                	cmp    al,0x1c
c0020ec8:	75 e5                	jne    c0020eaf <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020eca:	e4 60                	in     al,0x60
c0020ecc:	3c 5a                	cmp    al,0x5a
c0020ece:	74 fa                	je     c0020eca <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020ed0:	eb f4                	jmp    c0020ec6 <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c0020ed2:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c0020ed8:	0f ba e2 1e          	bt     edx,0x1e
c0020edc:	72 28                	jb     c0020f06 <SATA::access(unsigned long long, int, void*, bool)+0x510>
c0020ede:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c0020ee4:	85 d6                	test   esi,edx
c0020ee6:	75 ea                	jne    c0020ed2 <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c0020ee8:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c0020eef:	75 2f                	jne    c0020f20 <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c0020ef1:	89 e8                	mov    eax,ebp
c0020ef3:	c1 e0 07             	shl    eax,0x7
c0020ef6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020efa:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020f00:	0f ba e0 1e          	bt     eax,0x1e
c0020f04:	73 49                	jae    c0020f4f <SATA::access(unsigned long long, int, void*, bool)+0x559>
c0020f06:	83 ec 0c             	sub    esp,0xc
c0020f09:	68 cc 76 02 c0       	push   0xc00276cc
c0020f0e:	e8 16 42 ff ff       	call   c0015129 <Krnl::panic(char const*)>
c0020f13:	83 c4 10             	add    esp,0x10
c0020f16:	b8 01 00 00 00       	mov    eax,0x1
c0020f1b:	e9 c5 00 00 00       	jmp    c0020fe5 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020f20:	83 ec 0c             	sub    esp,0xc
c0020f23:	68 dd 76 02 c0       	push   0xc00276dd
c0020f28:	e8 88 8e fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020f2d:	83 c4 10             	add    esp,0x10
c0020f30:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c0020f37:	75 b8                	jne    c0020ef1 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0020f39:	e4 60                	in     al,0x60
c0020f3b:	3c 5a                	cmp    al,0x5a
c0020f3d:	74 04                	je     c0020f43 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020f3f:	3c 1c                	cmp    al,0x1c
c0020f41:	75 f6                	jne    c0020f39 <SATA::access(unsigned long long, int, void*, bool)+0x543>
c0020f43:	e4 60                	in     al,0x60
c0020f45:	3c 5a                	cmp    al,0x5a
c0020f47:	74 fa                	je     c0020f43 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020f49:	3c 1c                	cmp    al,0x1c
c0020f4b:	74 f6                	je     c0020f43 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020f4d:	eb a2                	jmp    c0020ef1 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0020f4f:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c0020f56:	74 3a                	je     c0020f92 <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c0020f58:	83 ec 0c             	sub    esp,0xc
c0020f5b:	68 ed 76 02 c0       	push   0xc00276ed
c0020f60:	e8 50 8e fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020f65:	83 c4 10             	add    esp,0x10
c0020f68:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c0020f6f:	74 0d                	je     c0020f7e <SATA::access(unsigned long long, int, void*, bool)+0x588>
c0020f71:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020f76:	75 31                	jne    c0020fa9 <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c0020f78:	eb 1f                	jmp    c0020f99 <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c0020f7a:	3c 1c                	cmp    al,0x1c
c0020f7c:	74 0c                	je     c0020f8a <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020f7e:	e4 60                	in     al,0x60
c0020f80:	3c 5a                	cmp    al,0x5a
c0020f82:	75 f6                	jne    c0020f7a <SATA::access(unsigned long long, int, void*, bool)+0x584>
c0020f84:	eb 04                	jmp    c0020f8a <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020f86:	3c 1c                	cmp    al,0x1c
c0020f88:	75 e7                	jne    c0020f71 <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c0020f8a:	e4 60                	in     al,0x60
c0020f8c:	3c 5a                	cmp    al,0x5a
c0020f8e:	74 fa                	je     c0020f8a <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020f90:	eb f4                	jmp    c0020f86 <SATA::access(unsigned long long, int, void*, bool)+0x590>
c0020f92:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020f97:	75 19                	jne    c0020fb2 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020f99:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0020f9f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0020fa3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020fa7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020fa9:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c0020fb0:	75 04                	jne    c0020fb6 <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c0020fb2:	31 c0                	xor    eax,eax
c0020fb4:	eb 2f                	jmp    c0020fe5 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020fb6:	83 ec 0c             	sub    esp,0xc
c0020fb9:	68 fd 76 02 c0       	push   0xc00276fd
c0020fbe:	e8 f2 8d fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020fc3:	83 c4 10             	add    esp,0x10
c0020fc6:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c0020fcd:	75 e3                	jne    c0020fb2 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020fcf:	e4 60                	in     al,0x60
c0020fd1:	3c 1c                	cmp    al,0x1c
c0020fd3:	74 04                	je     c0020fd9 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020fd5:	3c 5a                	cmp    al,0x5a
c0020fd7:	75 f6                	jne    c0020fcf <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c0020fd9:	e4 60                	in     al,0x60
c0020fdb:	3c 5a                	cmp    al,0x5a
c0020fdd:	74 fa                	je     c0020fd9 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020fdf:	3c 1c                	cmp    al,0x1c
c0020fe1:	74 f6                	je     c0020fd9 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020fe3:	eb cd                	jmp    c0020fb2 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020fe5:	83 c4 2c             	add    esp,0x2c
c0020fe8:	5b                   	pop    ebx
c0020fe9:	5e                   	pop    esi
c0020fea:	5f                   	pop    edi
c0020feb:	5d                   	pop    ebp
c0020fec:	c3                   	ret    
c0020fed:	90                   	nop

c0020fee <SATA::read(unsigned long long, int, void*)>:
c0020fee:	55                   	push   ebp
c0020fef:	57                   	push   edi
c0020ff0:	56                   	push   esi
c0020ff1:	53                   	push   ebx
c0020ff2:	83 ec 0c             	sub    esp,0xc
c0020ff5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020ff9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020ffd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021001:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021005:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c002100c:	74 2d                	je     c002103b <SATA::read(unsigned long long, int, void*)+0x4d>
c002100e:	83 ec 0c             	sub    esp,0xc
c0021011:	68 0d 77 02 c0       	push   0xc002770d
c0021016:	e8 9a 8d fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c002101b:	83 c4 10             	add    esp,0x10
c002101e:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c0021025:	75 14                	jne    c002103b <SATA::read(unsigned long long, int, void*)+0x4d>
c0021027:	e4 60                	in     al,0x60
c0021029:	3c 1c                	cmp    al,0x1c
c002102b:	74 04                	je     c0021031 <SATA::read(unsigned long long, int, void*)+0x43>
c002102d:	3c 5a                	cmp    al,0x5a
c002102f:	75 f6                	jne    c0021027 <SATA::read(unsigned long long, int, void*)+0x39>
c0021031:	e4 60                	in     al,0x60
c0021033:	3c 5a                	cmp    al,0x5a
c0021035:	74 fa                	je     c0021031 <SATA::read(unsigned long long, int, void*)+0x43>
c0021037:	3c 1c                	cmp    al,0x1c
c0021039:	74 f6                	je     c0021031 <SATA::read(unsigned long long, int, void*)+0x43>
c002103b:	8d 53 ff             	lea    edx,[ebx-0x1]
c002103e:	b8 04 00 00 00       	mov    eax,0x4
c0021043:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0021049:	0f 87 96 00 00 00    	ja     c00210e5 <SATA::read(unsigned long long, int, void*)+0xf7>
c002104f:	b8 06 00 00 00       	mov    eax,0x6
c0021054:	85 ed                	test   ebp,ebp
c0021056:	0f 84 89 00 00 00    	je     c00210e5 <SATA::read(unsigned long long, int, void*)+0xf7>
c002105c:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c0021063:	74 2d                	je     c0021092 <SATA::read(unsigned long long, int, void*)+0xa4>
c0021065:	83 ec 0c             	sub    esp,0xc
c0021068:	68 1a 77 02 c0       	push   0xc002771a
c002106d:	e8 43 8d fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0021072:	83 c4 10             	add    esp,0x10
c0021075:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c002107c:	75 14                	jne    c0021092 <SATA::read(unsigned long long, int, void*)+0xa4>
c002107e:	e4 60                	in     al,0x60
c0021080:	3c 5a                	cmp    al,0x5a
c0021082:	74 04                	je     c0021088 <SATA::read(unsigned long long, int, void*)+0x9a>
c0021084:	3c 1c                	cmp    al,0x1c
c0021086:	75 f6                	jne    c002107e <SATA::read(unsigned long long, int, void*)+0x90>
c0021088:	e4 60                	in     al,0x60
c002108a:	3c 5a                	cmp    al,0x5a
c002108c:	74 fa                	je     c0021088 <SATA::read(unsigned long long, int, void*)+0x9a>
c002108e:	3c 1c                	cmp    al,0x1c
c0021090:	74 f6                	je     c0021088 <SATA::read(unsigned long long, int, void*)+0x9a>
c0021092:	50                   	push   eax
c0021093:	50                   	push   eax
c0021094:	6a 00                	push   0x0
c0021096:	55                   	push   ebp
c0021097:	53                   	push   ebx
c0021098:	57                   	push   edi
c0021099:	56                   	push   esi
c002109a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002109e:	e8 53 f9 ff ff       	call   c00209f6 <SATA::access(unsigned long long, int, void*, bool)>
c00210a3:	83 c4 20             	add    esp,0x20
c00210a6:	89 c3                	mov    ebx,eax
c00210a8:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c00210af:	74 2d                	je     c00210de <SATA::read(unsigned long long, int, void*)+0xf0>
c00210b1:	83 ec 0c             	sub    esp,0xc
c00210b4:	68 27 77 02 c0       	push   0xc0027727
c00210b9:	e8 f7 8c fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00210be:	83 c4 10             	add    esp,0x10
c00210c1:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c00210c8:	75 14                	jne    c00210de <SATA::read(unsigned long long, int, void*)+0xf0>
c00210ca:	e4 60                	in     al,0x60
c00210cc:	3c 5a                	cmp    al,0x5a
c00210ce:	74 04                	je     c00210d4 <SATA::read(unsigned long long, int, void*)+0xe6>
c00210d0:	3c 1c                	cmp    al,0x1c
c00210d2:	75 f6                	jne    c00210ca <SATA::read(unsigned long long, int, void*)+0xdc>
c00210d4:	e4 60                	in     al,0x60
c00210d6:	3c 5a                	cmp    al,0x5a
c00210d8:	74 fa                	je     c00210d4 <SATA::read(unsigned long long, int, void*)+0xe6>
c00210da:	3c 1c                	cmp    al,0x1c
c00210dc:	74 f6                	je     c00210d4 <SATA::read(unsigned long long, int, void*)+0xe6>
c00210de:	31 c0                	xor    eax,eax
c00210e0:	85 db                	test   ebx,ebx
c00210e2:	0f 95 c0             	setne  al
c00210e5:	83 c4 0c             	add    esp,0xc
c00210e8:	5b                   	pop    ebx
c00210e9:	5e                   	pop    esi
c00210ea:	5f                   	pop    edi
c00210eb:	5d                   	pop    ebp
c00210ec:	c3                   	ret    
c00210ed:	90                   	nop

c00210ee <SATA::write(unsigned long long, int, void*)>:
c00210ee:	55                   	push   ebp
c00210ef:	57                   	push   edi
c00210f0:	56                   	push   esi
c00210f1:	53                   	push   ebx
c00210f2:	83 ec 1c             	sub    esp,0x1c
c00210f5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00210f9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00210fd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0021101:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0021105:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c002110c:	74 2d                	je     c002113b <SATA::write(unsigned long long, int, void*)+0x4d>
c002110e:	83 ec 0c             	sub    esp,0xc
c0021111:	68 34 77 02 c0       	push   0xc0027734
c0021116:	e8 9a 8c fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c002111b:	83 c4 10             	add    esp,0x10
c002111e:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c0021125:	75 14                	jne    c002113b <SATA::write(unsigned long long, int, void*)+0x4d>
c0021127:	e4 60                	in     al,0x60
c0021129:	3c 1c                	cmp    al,0x1c
c002112b:	74 04                	je     c0021131 <SATA::write(unsigned long long, int, void*)+0x43>
c002112d:	3c 5a                	cmp    al,0x5a
c002112f:	75 f6                	jne    c0021127 <SATA::write(unsigned long long, int, void*)+0x39>
c0021131:	e4 60                	in     al,0x60
c0021133:	3c 5a                	cmp    al,0x5a
c0021135:	74 fa                	je     c0021131 <SATA::write(unsigned long long, int, void*)+0x43>
c0021137:	3c 1c                	cmp    al,0x1c
c0021139:	74 f6                	je     c0021131 <SATA::write(unsigned long long, int, void*)+0x43>
c002113b:	8d 55 ff             	lea    edx,[ebp-0x1]
c002113e:	b8 04 00 00 00       	mov    eax,0x4
c0021143:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0021149:	0f 87 bd 00 00 00    	ja     c002120c <SATA::write(unsigned long long, int, void*)+0x11e>
c002114f:	b8 06 00 00 00       	mov    eax,0x6
c0021154:	85 db                	test   ebx,ebx
c0021156:	0f 84 b0 00 00 00    	je     c002120c <SATA::write(unsigned long long, int, void*)+0x11e>
c002115c:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c0021163:	74 2d                	je     c0021192 <SATA::write(unsigned long long, int, void*)+0xa4>
c0021165:	83 ec 0c             	sub    esp,0xc
c0021168:	68 42 77 02 c0       	push   0xc0027742
c002116d:	e8 43 8c fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0021172:	83 c4 10             	add    esp,0x10
c0021175:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c002117c:	75 14                	jne    c0021192 <SATA::write(unsigned long long, int, void*)+0xa4>
c002117e:	e4 60                	in     al,0x60
c0021180:	3c 1c                	cmp    al,0x1c
c0021182:	74 04                	je     c0021188 <SATA::write(unsigned long long, int, void*)+0x9a>
c0021184:	3c 5a                	cmp    al,0x5a
c0021186:	75 f6                	jne    c002117e <SATA::write(unsigned long long, int, void*)+0x90>
c0021188:	e4 60                	in     al,0x60
c002118a:	3c 5a                	cmp    al,0x5a
c002118c:	74 fa                	je     c0021188 <SATA::write(unsigned long long, int, void*)+0x9a>
c002118e:	3c 1c                	cmp    al,0x1c
c0021190:	74 f6                	je     c0021188 <SATA::write(unsigned long long, int, void*)+0x9a>
c0021192:	c1 e5 09             	shl    ebp,0x9
c0021195:	01 dd                	add    ebp,ebx
c0021197:	89 f0                	mov    eax,esi
c0021199:	89 fa                	mov    edx,edi
c002119b:	83 c0 01             	add    eax,0x1
c002119e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00211a2:	83 d2 00             	adc    edx,0x0
c00211a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00211a9:	50                   	push   eax
c00211aa:	50                   	push   eax
c00211ab:	6a 01                	push   0x1
c00211ad:	53                   	push   ebx
c00211ae:	81 c3 00 02 00 00    	add    ebx,0x200
c00211b4:	6a 01                	push   0x1
c00211b6:	57                   	push   edi
c00211b7:	56                   	push   esi
c00211b8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00211bc:	e8 35 f8 ff ff       	call   c00209f6 <SATA::access(unsigned long long, int, void*, bool)>
c00211c1:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00211c5:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00211c9:	83 c4 20             	add    esp,0x20
c00211cc:	39 dd                	cmp    ebp,ebx
c00211ce:	75 c7                	jne    c0021197 <SATA::write(unsigned long long, int, void*)+0xa9>
c00211d0:	f6 05 01 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a01,0x8
c00211d7:	75 04                	jne    c00211dd <SATA::write(unsigned long long, int, void*)+0xef>
c00211d9:	31 c0                	xor    eax,eax
c00211db:	eb 2f                	jmp    c002120c <SATA::write(unsigned long long, int, void*)+0x11e>
c00211dd:	83 ec 0c             	sub    esp,0xc
c00211e0:	68 50 77 02 c0       	push   0xc0027750
c00211e5:	e8 cb 8b fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00211ea:	83 c4 10             	add    esp,0x10
c00211ed:	f6 05 00 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a00,0x80
c00211f4:	75 e3                	jne    c00211d9 <SATA::write(unsigned long long, int, void*)+0xeb>
c00211f6:	e4 60                	in     al,0x60
c00211f8:	3c 5a                	cmp    al,0x5a
c00211fa:	74 04                	je     c0021200 <SATA::write(unsigned long long, int, void*)+0x112>
c00211fc:	3c 1c                	cmp    al,0x1c
c00211fe:	75 f6                	jne    c00211f6 <SATA::write(unsigned long long, int, void*)+0x108>
c0021200:	e4 60                	in     al,0x60
c0021202:	3c 5a                	cmp    al,0x5a
c0021204:	74 fa                	je     c0021200 <SATA::write(unsigned long long, int, void*)+0x112>
c0021206:	3c 1c                	cmp    al,0x1c
c0021208:	74 f6                	je     c0021200 <SATA::write(unsigned long long, int, void*)+0x112>
c002120a:	eb cd                	jmp    c00211d9 <SATA::write(unsigned long long, int, void*)+0xeb>
c002120c:	83 c4 1c             	add    esp,0x1c
c002120f:	5b                   	pop    ebx
c0021210:	5e                   	pop    esi
c0021211:	5f                   	pop    edi
c0021212:	5d                   	pop    ebp
c0021213:	c3                   	ret    

c0021214 <SATAPI::write(unsigned long long, int, void*)>:
c0021214:	b8 03 00 00 00       	mov    eax,0x3
c0021219:	c3                   	ret    

c002121a <SATAPI::close(int, int, void*)>:
c002121a:	83 ec 0c             	sub    esp,0xc
c002121d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021221:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021227:	85 c0                	test   eax,eax
c0021229:	74 0c                	je     c0021237 <SATAPI::close(int, int, void*)+0x1d>
c002122b:	83 ec 0c             	sub    esp,0xc
c002122e:	8b 10                	mov    edx,DWORD PTR [eax]
c0021230:	50                   	push   eax
c0021231:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0021234:	83 c4 10             	add    esp,0x10
c0021237:	31 c0                	xor    eax,eax
c0021239:	83 c4 0c             	add    esp,0xc
c002123c:	c3                   	ret    
c002123d:	90                   	nop

c002123e <SATAPI::SATAPI()>:
c002123e:	83 ec 0c             	sub    esp,0xc
c0021241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021245:	83 ec 04             	sub    esp,0x4
c0021248:	68 00 08 00 00       	push   0x800
c002124d:	68 98 77 02 c0       	push   0xc0027798
c0021252:	50                   	push   eax
c0021253:	e8 9a d7 fe ff       	call   c000e9f2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021258:	83 c4 10             	add    esp,0x10
c002125b:	ba d4 78 02 c0       	mov    edx,0xc00278d4
c0021260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021264:	89 10                	mov    DWORD PTR [eax],edx
c0021266:	90                   	nop
c0021267:	83 c4 0c             	add    esp,0xc
c002126a:	c3                   	ret    
c002126b:	90                   	nop

c002126c <SATAPI::diskRemoved()>:
c002126c:	53                   	push   ebx
c002126d:	83 ec 14             	sub    esp,0x14
c0021270:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021274:	68 a4 77 02 c0       	push   0xc00277a4
c0021279:	e8 c9 bd fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c002127e:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0021285:	c7 04 24 f8 74 02 c0 	mov    DWORD PTR [esp],0xc00274f8
c002128c:	e8 b6 bd fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0021291:	58                   	pop    eax
c0021292:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0021298:	e8 b3 f6 fe ff       	call   c0010950 <LogicalDisk::unmount()>
c002129d:	c7 04 24 07 75 02 c0 	mov    DWORD PTR [esp],0xc0027507
c00212a4:	e8 9e bd fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00212a9:	5a                   	pop    edx
c00212aa:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00212b0:	e8 a3 00 ff ff       	call   c0011358 <VCache::writeWriteBuffer()>
c00212b5:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00212bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00212bf:	83 c4 18             	add    esp,0x18
c00212c2:	5b                   	pop    ebx
c00212c3:	e9 80 00 ff ff       	jmp    c0011348 <VCache::invalidateReadBuffer()>

c00212c8 <SATAPI::diskInserted()>:
c00212c8:	83 ec 18             	sub    esp,0x18
c00212cb:	68 bb 77 02 c0       	push   0xc00277bb
c00212d0:	e8 72 bd fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00212d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00212d9:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c00212e0:	83 c4 1c             	add    esp,0x1c
c00212e3:	c3                   	ret    

c00212e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00212e4:	55                   	push   ebp
c00212e5:	57                   	push   edi
c00212e6:	56                   	push   esi
c00212e7:	53                   	push   ebx
c00212e8:	83 ec 38             	sub    esp,0x38
c00212eb:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00212ef:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00212f3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00212f7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00212fb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00212ff:	68 d3 77 02 c0       	push   0xc00277d3
c0021304:	e8 3e bd fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0021309:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002130f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021315:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021319:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c002131f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021323:	c1 e0 07             	shl    eax,0x7
c0021326:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c002132a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002132e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0021338:	5a                   	pop    edx
c0021339:	59                   	pop    ecx
c002133a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002133e:	8d 58 02             	lea    ebx,[eax+0x2]
c0021341:	c1 e3 07             	shl    ebx,0x7
c0021344:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0021348:	53                   	push   ebx
c0021349:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002134f:	e8 c2 e3 ff ff       	call   c001f716 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0021354:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021358:	83 c4 10             	add    esp,0x10
c002135b:	b8 01 00 00 00       	mov    eax,0x1
c0021360:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0021365:	0f 84 04 02 00 00    	je     c002156f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28b>
c002136b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0021371:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021373:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0021379:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002137f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021383:	c1 e1 05             	shl    ecx,0x5
c0021386:	01 c8                	add    eax,ecx
c0021388:	8b 08                	mov    ecx,DWORD PTR [eax]
c002138a:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0021390:	81 c9 25 00 01 00    	or     ecx,0x10025
c0021396:	89 08                	mov    DWORD PTR [eax],ecx
c0021398:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002139e:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00213a4:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00213aa:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00213ad:	8d 7b 40             	lea    edi,[ebx+0x40]
c00213b0:	50                   	push   eax
c00213b1:	68 90 00 00 00       	push   0x90
c00213b6:	6a 00                	push   0x0
c00213b8:	53                   	push   ebx
c00213b9:	e8 c6 f2 fd ff       	call   c0000684 <memset>
c00213be:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00213c2:	b9 0c 00 00 00       	mov    ecx,0xc
c00213c7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00213c9:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c00213cf:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00213d3:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00213d9:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00213dd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00213e1:	48                   	dec    eax
c00213e2:	25 ff ff 3f 00       	and    eax,0x3fffff
c00213e7:	89 c1                	mov    ecx,eax
c00213e9:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00213ef:	25 00 00 c0 ff       	and    eax,0xffc00000
c00213f4:	09 c8                	or     eax,ecx
c00213f6:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00213fc:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00213ff:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0021406:	66 25 00 7f          	and    ax,0x7f00
c002140a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002140e:	66 0d 27 80          	or     ax,0x8027
c0021412:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0021416:	66 89 03             	mov    WORD PTR [ebx],ax
c0021419:	89 d0                	mov    eax,edx
c002141b:	c1 ea 18             	shr    edx,0x18
c002141e:	c1 e8 10             	shr    eax,0x10
c0021421:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0021424:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0021427:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002142b:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002142e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021432:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0021435:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0021439:	83 c4 10             	add    esp,0x10
c002143c:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0021440:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021444:	31 c0                	xor    eax,eax
c0021446:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002144c:	80 e1 88             	and    cl,0x88
c002144f:	74 0a                	je     c002145b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c0021451:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0021456:	74 0a                	je     c0021462 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c0021458:	40                   	inc    eax
c0021459:	eb eb                	jmp    c0021446 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c002145b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0021460:	75 0f                	jne    c0021471 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18d>
c0021462:	83 ec 0c             	sub    esp,0xc
c0021465:	68 9e 76 02 c0       	push   0xc002769e
c002146a:	e8 ba 3c ff ff       	call   c0015129 <Krnl::panic(char const*)>
c002146f:	eb 48                	jmp    c00214b9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d5>
c0021471:	be 01 00 00 00       	mov    esi,0x1
c0021476:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002147a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002147e:	d3 e6                	shl    esi,cl
c0021480:	c1 e7 07             	shl    edi,0x7
c0021483:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0021489:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c002148e:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0021492:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0021498:	85 c6                	test   esi,eax
c002149a:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00214a0:	0f 84 96 00 00 00    	je     c002153c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x258>
c00214a6:	0f ba e0 1e          	bt     eax,0x1e
c00214aa:	73 1a                	jae    c00214c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e2>
c00214ac:	83 ec 0c             	sub    esp,0xc
c00214af:	68 ed 77 02 c0       	push   0xc00277ed
c00214b4:	e8 8e bb fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00214b9:	83 c4 10             	add    esp,0x10
c00214bc:	b8 01 00 00 00       	mov    eax,0x1
c00214c1:	e9 a9 00 00 00       	jmp    c002156f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28b>
c00214c6:	83 fb 0d             	cmp    ebx,0xd
c00214c9:	77 12                	ja     c00214dd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00214cb:	83 ec 0c             	sub    esp,0xc
c00214ce:	68 c8 00 00 00       	push   0xc8
c00214d3:	e8 54 7b ff ff       	call   c001902c <milliTenthSleep(unsigned int)>
c00214d8:	83 c4 10             	add    esp,0x10
c00214db:	eb 2a                	jmp    c0021507 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x223>
c00214dd:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c00214e3:	83 f8 0d             	cmp    eax,0xd
c00214e6:	77 0a                	ja     c00214f2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20e>
c00214e8:	83 ec 0c             	sub    esp,0xc
c00214eb:	68 58 02 00 00       	push   0x258
c00214f0:	eb 28                	jmp    c002151a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c00214f2:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c00214f8:	83 f8 0d             	cmp    eax,0xd
c00214fb:	77 0a                	ja     c0021507 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x223>
c00214fd:	83 ec 0c             	sub    esp,0xc
c0021500:	68 dc 05 00 00       	push   0x5dc
c0021505:	eb 13                	jmp    c002151a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c0021507:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c002150d:	83 f8 0d             	cmp    eax,0xd
c0021510:	77 10                	ja     c0021522 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23e>
c0021512:	83 ec 0c             	sub    esp,0xc
c0021515:	68 c4 09 00 00       	push   0x9c4
c002151a:	e8 0d 7b ff ff       	call   c001902c <milliTenthSleep(unsigned int)>
c002151f:	83 c4 10             	add    esp,0x10
c0021522:	43                   	inc    ebx
c0021523:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c0021529:	0f 85 63 ff ff ff    	jne    c0021492 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ae>
c002152f:	83 ec 0c             	sub    esp,0xc
c0021532:	68 00 78 02 c0       	push   0xc0027800
c0021537:	e9 78 ff ff ff       	jmp    c00214b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d0>
c002153c:	0f ba e0 1e          	bt     eax,0x1e
c0021540:	73 0d                	jae    c002154f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26b>
c0021542:	83 ec 0c             	sub    esp,0xc
c0021545:	68 14 78 02 c0       	push   0xc0027814
c002154a:	e9 65 ff ff ff       	jmp    c00214b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d0>
c002154f:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0021554:	74 17                	je     c002156d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x289>
c0021556:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002155b:	74 10                	je     c002156d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x289>
c002155d:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0021563:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0021567:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c002156b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002156d:	31 c0                	xor    eax,eax
c002156f:	83 c4 2c             	add    esp,0x2c
c0021572:	5b                   	pop    ebx
c0021573:	5e                   	pop    esi
c0021574:	5f                   	pop    edi
c0021575:	5d                   	pop    ebp
c0021576:	c3                   	ret    
c0021577:	90                   	nop

c0021578 <SATAPI::eject()>:
c0021578:	57                   	push   edi
c0021579:	b9 03 00 00 00       	mov    ecx,0x3
c002157e:	53                   	push   ebx
c002157f:	83 ec 14             	sub    esp,0x14
c0021582:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021586:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002158a:	fc                   	cld    
c002158b:	31 c0                	xor    eax,eax
c002158d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002158f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0021594:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0021599:	50                   	push   eax
c002159a:	6a 00                	push   0x0
c002159c:	6a 00                	push   0x0
c002159e:	6a 00                	push   0x0
c00215a0:	6a 00                	push   0x0
c00215a2:	6a 02                	push   0x2
c00215a4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00215a8:	50                   	push   eax
c00215a9:	53                   	push   ebx
c00215aa:	e8 35 fd ff ff       	call   c00212e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00215af:	83 c4 20             	add    esp,0x20
c00215b2:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00215b9:	74 0c                	je     c00215c7 <SATAPI::eject()+0x4f>
c00215bb:	83 ec 0c             	sub    esp,0xc
c00215be:	53                   	push   ebx
c00215bf:	e8 a8 fc ff ff       	call   c002126c <SATAPI::diskRemoved()>
c00215c4:	83 c4 10             	add    esp,0x10
c00215c7:	83 c4 14             	add    esp,0x14
c00215ca:	31 c0                	xor    eax,eax
c00215cc:	5b                   	pop    ebx
c00215cd:	5f                   	pop    edi
c00215ce:	c3                   	ret    
c00215cf:	90                   	nop

c00215d0 <SATAPI::detectMedia()>:
c00215d0:	56                   	push   esi
c00215d1:	53                   	push   ebx
c00215d2:	83 ec 30             	sub    esp,0x30
c00215d5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00215d9:	68 29 78 02 c0       	push   0xc0027829
c00215de:	e8 64 ba fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00215e3:	83 c4 0c             	add    esp,0xc
c00215e6:	6a 0c                	push   0xc
c00215e8:	6a 00                	push   0x0
c00215ea:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00215ee:	56                   	push   esi
c00215ef:	e8 90 f0 fd ff       	call   c0000684 <memset>
c00215f4:	83 c4 0c             	add    esp,0xc
c00215f7:	6a 00                	push   0x0
c00215f9:	6a 00                	push   0x0
c00215fb:	6a 00                	push   0x0
c00215fd:	6a 00                	push   0x0
c00215ff:	6a 00                	push   0x0
c0021601:	56                   	push   esi
c0021602:	53                   	push   ebx
c0021603:	e8 dc fc ff ff       	call   c00212e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021608:	83 c4 20             	add    esp,0x20
c002160b:	48                   	dec    eax
c002160c:	75 27                	jne    c0021635 <SATAPI::detectMedia()+0x65>
c002160e:	83 ec 0c             	sub    esp,0xc
c0021611:	68 3d 78 02 c0       	push   0xc002783d
c0021616:	e8 2c ba fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c002161b:	83 c4 10             	add    esp,0x10
c002161e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021625:	74 0e                	je     c0021635 <SATAPI::detectMedia()+0x65>
c0021627:	83 ec 0c             	sub    esp,0xc
c002162a:	53                   	push   ebx
c002162b:	e8 3c fc ff ff       	call   c002126c <SATAPI::diskRemoved()>
c0021630:	e9 d1 00 00 00       	jmp    c0021706 <SATAPI::detectMedia()+0x136>
c0021635:	50                   	push   eax
c0021636:	6a 0c                	push   0xc
c0021638:	6a 00                	push   0x0
c002163a:	56                   	push   esi
c002163b:	e8 44 f0 fd ff       	call   c0000684 <memset>
c0021640:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0021645:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002164a:	83 c4 0c             	add    esp,0xc
c002164d:	6a 01                	push   0x1
c002164f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0021653:	50                   	push   eax
c0021654:	6a 00                	push   0x0
c0021656:	6a 00                	push   0x0
c0021658:	6a 12                	push   0x12
c002165a:	56                   	push   esi
c002165b:	53                   	push   ebx
c002165c:	e8 83 fc ff ff       	call   c00212e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021661:	83 c4 20             	add    esp,0x20
c0021664:	48                   	dec    eax
c0021665:	75 19                	jne    c0021680 <SATAPI::detectMedia()+0xb0>
c0021667:	83 ec 0c             	sub    esp,0xc
c002166a:	68 47 78 02 c0       	push   0xc0027847
c002166f:	e8 d3 b9 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0021674:	83 c4 10             	add    esp,0x10
c0021677:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002167e:	75 a7                	jne    c0021627 <SATAPI::detectMedia()+0x57>
c0021680:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0021684:	83 e0 7f             	and    eax,0x7f
c0021687:	3c 70                	cmp    al,0x70
c0021689:	74 25                	je     c00216b0 <SATAPI::detectMedia()+0xe0>
c002168b:	83 ec 0c             	sub    esp,0xc
c002168e:	68 51 78 02 c0       	push   0xc0027851
c0021693:	e8 af b9 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0021698:	83 c4 10             	add    esp,0x10
c002169b:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00216a2:	75 0c                	jne    c00216b0 <SATAPI::detectMedia()+0xe0>
c00216a4:	83 ec 0c             	sub    esp,0xc
c00216a7:	53                   	push   ebx
c00216a8:	e8 1b fc ff ff       	call   c00212c8 <SATAPI::diskInserted()>
c00216ad:	83 c4 10             	add    esp,0x10
c00216b0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00216b4:	83 e0 0f             	and    eax,0xf
c00216b7:	3c 02                	cmp    al,0x2
c00216b9:	75 25                	jne    c00216e0 <SATAPI::detectMedia()+0x110>
c00216bb:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00216c0:	75 47                	jne    c0021709 <SATAPI::detectMedia()+0x139>
c00216c2:	83 ec 0c             	sub    esp,0xc
c00216c5:	68 5a 78 02 c0       	push   0xc002785a
c00216ca:	e8 78 b9 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00216cf:	83 c4 10             	add    esp,0x10
c00216d2:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00216d9:	74 2e                	je     c0021709 <SATAPI::detectMedia()+0x139>
c00216db:	e9 47 ff ff ff       	jmp    c0021627 <SATAPI::detectMedia()+0x57>
c00216e0:	84 c0                	test   al,al
c00216e2:	75 25                	jne    c0021709 <SATAPI::detectMedia()+0x139>
c00216e4:	83 ec 0c             	sub    esp,0xc
c00216e7:	68 63 78 02 c0       	push   0xc0027863
c00216ec:	e8 56 b9 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00216f1:	83 c4 10             	add    esp,0x10
c00216f4:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00216fb:	75 0c                	jne    c0021709 <SATAPI::detectMedia()+0x139>
c00216fd:	83 ec 0c             	sub    esp,0xc
c0021700:	53                   	push   ebx
c0021701:	e8 c2 fb ff ff       	call   c00212c8 <SATAPI::diskInserted()>
c0021706:	83 c4 10             	add    esp,0x10
c0021709:	83 c4 24             	add    esp,0x24
c002170c:	5b                   	pop    ebx
c002170d:	5e                   	pop    esi
c002170e:	c3                   	ret    
c002170f:	90                   	nop

c0021710 <SATAPI::open(int, int, void*)>:
c0021710:	56                   	push   esi
c0021711:	53                   	push   ebx
c0021712:	51                   	push   ecx
c0021713:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021717:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002171b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0021725:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002172b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0021735:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021739:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0021743:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0021749:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0021750:	e8 bd 8c fe ff       	call   c000a412 <Phys::allocatePage()>
c0021755:	89 c6                	mov    esi,eax
c0021757:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002175d:	81 c6 00 10 00 00    	add    esi,0x1000
c0021763:	e8 aa 8c fe ff       	call   c000a412 <Phys::allocatePage()>
c0021768:	39 c6                	cmp    esi,eax
c002176a:	74 10                	je     c002177c <SATAPI::open(int, int, void*)+0x6c>
c002176c:	83 ec 0c             	sub    esp,0xc
c002176f:	68 6d 78 02 c0       	push   0xc002786d
c0021774:	e8 b0 39 ff ff       	call   c0015129 <Krnl::panic(char const*)>
c0021779:	83 c4 10             	add    esp,0x10
c002177c:	83 ec 0c             	sub    esp,0xc
c002177f:	6a 02                	push   0x2
c0021781:	e8 9b a5 fe ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c0021786:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002178c:	6a 03                	push   0x3
c002178e:	50                   	push   eax
c002178f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0021795:	ff 35 10 8b 02 c0    	push   DWORD PTR ds:0xc0028b10
c002179b:	e8 28 ac fe ff       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00217a0:	83 c4 14             	add    esp,0x14
c00217a3:	68 74 01 00 00       	push   0x174
c00217a8:	e8 ae 85 fe ff       	call   c0009d5b <malloc>
c00217ad:	83 c4 0c             	add    esp,0xc
c00217b0:	89 c6                	mov    esi,eax
c00217b2:	6a 00                	push   0x0
c00217b4:	68 ff ff ff 7f       	push   0x7fffffff
c00217b9:	6a 00                	push   0x0
c00217bb:	6a 00                	push   0x0
c00217bd:	53                   	push   ebx
c00217be:	68 83 78 02 c0       	push   0xc0027883
c00217c3:	50                   	push   eax
c00217c4:	e8 93 ef fe ff       	call   c001075c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00217c9:	83 c4 14             	add    esp,0x14
c00217cc:	56                   	push   esi
c00217cd:	e8 40 f0 fe ff       	call   c0010812 <LogicalDisk::assignDriveLetter()>
c00217d2:	5a                   	pop    edx
c00217d3:	0f be c0             	movsx  eax,al
c00217d6:	59                   	pop    ecx
c00217d7:	50                   	push   eax
c00217d8:	68 15 75 02 c0       	push   0xc0027515
c00217dd:	e8 65 b8 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00217e2:	58                   	pop    eax
c00217e3:	5a                   	pop    edx
c00217e4:	56                   	push   esi
c00217e5:	53                   	push   ebx
c00217e6:	e8 cf cd fe ff       	call   c000e5ba <Device::addChild(Device*)>
c00217eb:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c00217f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00217f4:	e8 61 d2 fe ff       	call   c000ea5a <PhysicalDisk::startCache()>
c00217f9:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0021800:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021803:	e8 c8 fd ff ff       	call   c00215d0 <SATAPI::detectMedia()>
c0021808:	83 c4 14             	add    esp,0x14
c002180b:	31 c0                	xor    eax,eax
c002180d:	5b                   	pop    ebx
c002180e:	5e                   	pop    esi
c002180f:	c3                   	ret    

c0021810 <SATAPI::read(unsigned long long, int, void*)>:
c0021810:	55                   	push   ebp
c0021811:	57                   	push   edi
c0021812:	56                   	push   esi
c0021813:	53                   	push   ebx
c0021814:	83 ec 48             	sub    esp,0x48
c0021817:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c002181b:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c002181f:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0021823:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0021827:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002182b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002182f:	68 91 78 02 c0       	push   0xc0027891
c0021834:	e8 0e b8 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0021839:	83 c4 10             	add    esp,0x10
c002183c:	83 fb 04             	cmp    ebx,0x4
c002183f:	7e 10                	jle    c0021851 <SATAPI::read(unsigned long long, int, void*)+0x41>
c0021841:	83 ec 0c             	sub    esp,0xc
c0021844:	68 a2 78 02 c0       	push   0xc00278a2
c0021849:	e8 db 38 ff ff       	call   c0015129 <Krnl::panic(char const*)>
c002184e:	83 c4 10             	add    esp,0x10
c0021851:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0021855:	31 ed                	xor    ebp,ebp
c0021857:	b9 03 00 00 00       	mov    ecx,0x3
c002185c:	fc                   	cld    
c002185d:	89 e8                	mov    eax,ebp
c002185f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021861:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c0021866:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c002186b:	50                   	push   eax
c002186c:	6a 00                	push   0x0
c002186e:	6a 00                	push   0x0
c0021870:	6a 00                	push   0x0
c0021872:	6a 00                	push   0x0
c0021874:	6a 02                	push   0x2
c0021876:	8d 44 24 30          	lea    eax,[esp+0x30]
c002187a:	50                   	push   eax
c002187b:	56                   	push   esi
c002187c:	e8 63 fa ff ff       	call   c00212e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021881:	8d 7c 24 44          	lea    edi,[esp+0x44]
c0021885:	89 e8                	mov    eax,ebp
c0021887:	b9 03 00 00 00       	mov    ecx,0x3
c002188c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002188e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021892:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c0021896:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c002189b:	86 e0                	xchg   al,ah
c002189d:	c1 c0 10             	rol    eax,0x10
c00218a0:	86 e0                	xchg   al,ah
c00218a2:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c00218a6:	83 c4 1c             	add    esp,0x1c
c00218a9:	53                   	push   ebx
c00218aa:	c1 e3 0b             	shl    ebx,0xb
c00218ad:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c00218b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00218b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00218b9:	53                   	push   ebx
c00218ba:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00218be:	50                   	push   eax
c00218bf:	56                   	push   esi
c00218c0:	e8 1f fa ff ff       	call   c00212e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00218c5:	83 c4 20             	add    esp,0x20
c00218c8:	85 c0                	test   eax,eax
c00218ca:	74 14                	je     c00218e0 <SATAPI::read(unsigned long long, int, void*)+0xd0>
c00218cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00218d0:	83 ec 0c             	sub    esp,0xc
c00218d3:	56                   	push   esi
c00218d4:	e8 f7 fc ff ff       	call   c00215d0 <SATAPI::detectMedia()>
c00218d9:	83 c4 10             	add    esp,0x10
c00218dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218e0:	83 c4 3c             	add    esp,0x3c
c00218e3:	5b                   	pop    ebx
c00218e4:	5e                   	pop    esi
c00218e5:	5f                   	pop    edi
c00218e6:	5d                   	pop    ebp
c00218e7:	c3                   	ret    

c00218e8 <AVX::open(int, int, void*)>:
c00218e8:	83 ec 0c             	sub    esp,0xc
c00218eb:	e8 6c 11 00 00       	call   c0022a5c <avxInit>
c00218f0:	b8 00 00 00 00       	mov    eax,0x0
c00218f5:	83 c4 0c             	add    esp,0xc
c00218f8:	c3                   	ret    
c00218f9:	90                   	nop
c00218fa:	66 90                	xchg   ax,ax

c00218fc <AVX::close(int, int, void*)>:
c00218fc:	83 ec 0c             	sub    esp,0xc
c00218ff:	e8 7a 11 00 00       	call   c0022a7e <avxClose>
c0021904:	b8 00 00 00 00       	mov    eax,0x0
c0021909:	83 c4 0c             	add    esp,0xc
c002190c:	c3                   	ret    
c002190d:	90                   	nop
c002190e:	66 90                	xchg   ax,ax

c0021910 <AVX::available()>:
c0021910:	83 ec 0c             	sub    esp,0xc
c0021913:	e8 f8 10 00 00       	call   c0022a10 <avxDetect>
c0021918:	85 c0                	test   eax,eax
c002191a:	0f 95 c0             	setne  al
c002191d:	83 c4 0c             	add    esp,0xc
c0021920:	c3                   	ret    
c0021921:	90                   	nop
c0021922:	66 90                	xchg   ax,ax

c0021924 <AVX::save(void*)>:
c0021924:	83 ec 0c             	sub    esp,0xc
c0021927:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002192b:	83 ec 0c             	sub    esp,0xc
c002192e:	50                   	push   eax
c002192f:	e8 06 11 00 00       	call   c0022a3a <avxSave>
c0021934:	83 c4 10             	add    esp,0x10
c0021937:	90                   	nop
c0021938:	83 c4 0c             	add    esp,0xc
c002193b:	c3                   	ret    

c002193c <AVX::load(void*)>:
c002193c:	83 ec 0c             	sub    esp,0xc
c002193f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021943:	83 ec 0c             	sub    esp,0xc
c0021946:	50                   	push   eax
c0021947:	e8 ff 10 00 00       	call   c0022a4b <avxLoad>
c002194c:	83 c4 10             	add    esp,0x10
c002194f:	90                   	nop
c0021950:	83 c4 0c             	add    esp,0xc
c0021953:	c3                   	ret    

c0021954 <AVX::AVX()>:
c0021954:	83 ec 0c             	sub    esp,0xc
c0021957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002195b:	83 ec 08             	sub    esp,0x8
c002195e:	68 04 79 02 c0       	push   0xc0027904
c0021963:	50                   	push   eax
c0021964:	e8 67 d1 fe ff       	call   c000ead0 <FPU::FPU(char const*)>
c0021969:	83 c4 10             	add    esp,0x10
c002196c:	ba 14 79 02 c0       	mov    edx,0xc0027914
c0021971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021975:	89 10                	mov    DWORD PTR [eax],edx
c0021977:	90                   	nop
c0021978:	83 c4 0c             	add    esp,0xc
c002197b:	c3                   	ret    

c002197c <MMX::available()>:
c002197c:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0021981:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021987:	83 e0 20             	and    eax,0x20
c002198a:	84 c0                	test   al,al
c002198c:	0f 95 c0             	setne  al
c002198f:	c3                   	ret    

c0021990 <MMX::open(int, int, void*)>:
c0021990:	83 ec 0c             	sub    esp,0xc
c0021993:	e8 77 11 00 00       	call   c0022b0f <x87Init>
c0021998:	b8 00 00 00 00       	mov    eax,0x0
c002199d:	83 c4 0c             	add    esp,0xc
c00219a0:	c3                   	ret    
c00219a1:	90                   	nop
c00219a2:	66 90                	xchg   ax,ax

c00219a4 <MMX::close(int, int, void*)>:
c00219a4:	83 ec 0c             	sub    esp,0xc
c00219a7:	e8 7c 11 00 00       	call   c0022b28 <x87Close>
c00219ac:	b8 00 00 00 00       	mov    eax,0x0
c00219b1:	83 c4 0c             	add    esp,0xc
c00219b4:	c3                   	ret    
c00219b5:	90                   	nop
c00219b6:	66 90                	xchg   ax,ax

c00219b8 <MMX::save(void*)>:
c00219b8:	83 ec 0c             	sub    esp,0xc
c00219bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00219bf:	83 ec 0c             	sub    esp,0xc
c00219c2:	50                   	push   eax
c00219c3:	e8 39 11 00 00       	call   c0022b01 <x87Save>
c00219c8:	83 c4 10             	add    esp,0x10
c00219cb:	90                   	nop
c00219cc:	83 c4 0c             	add    esp,0xc
c00219cf:	c3                   	ret    

c00219d0 <MMX::load(void*)>:
c00219d0:	83 ec 0c             	sub    esp,0xc
c00219d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00219d7:	83 ec 0c             	sub    esp,0xc
c00219da:	50                   	push   eax
c00219db:	e8 28 11 00 00       	call   c0022b08 <x87Load>
c00219e0:	83 c4 10             	add    esp,0x10
c00219e3:	90                   	nop
c00219e4:	83 c4 0c             	add    esp,0xc
c00219e7:	c3                   	ret    

c00219e8 <MMX::MMX()>:
c00219e8:	83 ec 0c             	sub    esp,0xc
c00219eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219ef:	83 ec 08             	sub    esp,0x8
c00219f2:	68 44 79 02 c0       	push   0xc0027944
c00219f7:	50                   	push   eax
c00219f8:	e8 d3 d0 fe ff       	call   c000ead0 <FPU::FPU(char const*)>
c00219fd:	83 c4 10             	add    esp,0x10
c0021a00:	ba 54 79 02 c0       	mov    edx,0xc0027954
c0021a05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a09:	89 10                	mov    DWORD PTR [eax],edx
c0021a0b:	90                   	nop
c0021a0c:	83 c4 0c             	add    esp,0xc
c0021a0f:	c3                   	ret    

c0021a10 <SSE::open(int, int, void*)>:
c0021a10:	83 ec 0c             	sub    esp,0xc
c0021a13:	e8 b0 10 00 00       	call   c0022ac8 <sseInit>
c0021a18:	b8 00 00 00 00       	mov    eax,0x0
c0021a1d:	83 c4 0c             	add    esp,0xc
c0021a20:	c3                   	ret    
c0021a21:	90                   	nop
c0021a22:	66 90                	xchg   ax,ax

c0021a24 <SSE::close(int, int, void*)>:
c0021a24:	83 ec 0c             	sub    esp,0xc
c0021a27:	e8 ac 10 00 00       	call   c0022ad8 <sseClose>
c0021a2c:	b8 00 00 00 00       	mov    eax,0x0
c0021a31:	83 c4 0c             	add    esp,0xc
c0021a34:	c3                   	ret    
c0021a35:	90                   	nop
c0021a36:	66 90                	xchg   ax,ax

c0021a38 <SSE::available()>:
c0021a38:	83 ec 1c             	sub    esp,0x1c
c0021a3b:	e8 60 10 00 00       	call   c0022aa0 <absolutelyNoChanceInHell>
c0021a40:	85 c0                	test   eax,eax
c0021a42:	0f 95 c0             	setne  al
c0021a45:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021a49:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0021a4d:	83 c4 1c             	add    esp,0x1c
c0021a50:	c3                   	ret    
c0021a51:	90                   	nop
c0021a52:	66 90                	xchg   ax,ax

c0021a54 <SSE::save(void*)>:
c0021a54:	83 ec 0c             	sub    esp,0xc
c0021a57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021a5b:	83 ec 0c             	sub    esp,0xc
c0021a5e:	50                   	push   eax
c0021a5f:	e8 54 10 00 00       	call   c0022ab8 <sseSave>
c0021a64:	83 c4 10             	add    esp,0x10
c0021a67:	90                   	nop
c0021a68:	83 c4 0c             	add    esp,0xc
c0021a6b:	c3                   	ret    

c0021a6c <SSE::load(void*)>:
c0021a6c:	83 ec 0c             	sub    esp,0xc
c0021a6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021a73:	83 ec 0c             	sub    esp,0xc
c0021a76:	50                   	push   eax
c0021a77:	e8 44 10 00 00       	call   c0022ac0 <sseLoad>
c0021a7c:	83 c4 10             	add    esp,0x10
c0021a7f:	90                   	nop
c0021a80:	83 c4 0c             	add    esp,0xc
c0021a83:	c3                   	ret    

c0021a84 <SSE::SSE()>:
c0021a84:	83 ec 0c             	sub    esp,0xc
c0021a87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a8b:	83 ec 08             	sub    esp,0x8
c0021a8e:	68 84 79 02 c0       	push   0xc0027984
c0021a93:	50                   	push   eax
c0021a94:	e8 37 d0 fe ff       	call   c000ead0 <FPU::FPU(char const*)>
c0021a99:	83 c4 10             	add    esp,0x10
c0021a9c:	ba 94 79 02 c0       	mov    edx,0xc0027994
c0021aa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021aa5:	89 10                	mov    DWORD PTR [eax],edx
c0021aa7:	90                   	nop
c0021aa8:	83 c4 0c             	add    esp,0xc
c0021aab:	c3                   	ret    

c0021aac <x87::open(int, int, void*)>:
c0021aac:	55                   	push   ebp
c0021aad:	89 e5                	mov    ebp,esp
c0021aaf:	83 ec 08             	sub    esp,0x8
c0021ab2:	e8 58 10 00 00       	call   c0022b0f <x87Init>
c0021ab7:	b8 00 00 00 00       	mov    eax,0x0
c0021abc:	c9                   	leave  
c0021abd:	c3                   	ret    

c0021abe <x87::close(int, int, void*)>:
c0021abe:	55                   	push   ebp
c0021abf:	89 e5                	mov    ebp,esp
c0021ac1:	83 ec 08             	sub    esp,0x8
c0021ac4:	e8 5f 10 00 00       	call   c0022b28 <x87Close>
c0021ac9:	b8 00 00 00 00       	mov    eax,0x0
c0021ace:	c9                   	leave  
c0021acf:	c3                   	ret    

c0021ad0 <x87::available()>:
c0021ad0:	55                   	push   ebp
c0021ad1:	89 e5                	mov    ebp,esp
c0021ad3:	83 ec 08             	sub    esp,0x8
c0021ad6:	e8 0b 10 00 00       	call   c0022ae6 <x87Detect>
c0021adb:	85 c0                	test   eax,eax
c0021add:	0f 95 c0             	setne  al
c0021ae0:	c9                   	leave  
c0021ae1:	c3                   	ret    

c0021ae2 <x87::save(void*)>:
c0021ae2:	55                   	push   ebp
c0021ae3:	89 e5                	mov    ebp,esp
c0021ae5:	83 ec 08             	sub    esp,0x8
c0021ae8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021aeb:	83 ec 0c             	sub    esp,0xc
c0021aee:	50                   	push   eax
c0021aef:	e8 0d 10 00 00       	call   c0022b01 <x87Save>
c0021af4:	83 c4 10             	add    esp,0x10
c0021af7:	90                   	nop
c0021af8:	c9                   	leave  
c0021af9:	c3                   	ret    

c0021afa <x87::load(void*)>:
c0021afa:	55                   	push   ebp
c0021afb:	89 e5                	mov    ebp,esp
c0021afd:	83 ec 08             	sub    esp,0x8
c0021b00:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021b03:	83 ec 0c             	sub    esp,0xc
c0021b06:	50                   	push   eax
c0021b07:	e8 fc 0f 00 00       	call   c0022b08 <x87Load>
c0021b0c:	83 c4 10             	add    esp,0x10
c0021b0f:	90                   	nop
c0021b10:	c9                   	leave  
c0021b11:	c3                   	ret    

c0021b12 <x87::x87()>:
c0021b12:	83 ec 0c             	sub    esp,0xc
c0021b15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b19:	83 ec 08             	sub    esp,0x8
c0021b1c:	68 c4 79 02 c0       	push   0xc00279c4
c0021b21:	50                   	push   eax
c0021b22:	e8 a9 cf fe ff       	call   c000ead0 <FPU::FPU(char const*)>
c0021b27:	83 c4 10             	add    esp,0x10
c0021b2a:	ba d4 79 02 c0       	mov    edx,0xc00279d4
c0021b2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b33:	89 10                	mov    DWORD PTR [eax],edx
c0021b35:	90                   	nop
c0021b36:	83 c4 0c             	add    esp,0xc
c0021b39:	c3                   	ret    

c0021b3a <APIC::disable()>:
c0021b3a:	90                   	nop
c0021b3b:	c3                   	ret    

c0021b3c <APIC::close(int, int, void*)>:
c0021b3c:	55                   	push   ebp
c0021b3d:	89 e5                	mov    ebp,esp
c0021b3f:	83 ec 08             	sub    esp,0x8
c0021b42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021b45:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b47:	83 c0 3c             	add    eax,0x3c
c0021b4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b4c:	83 ec 0c             	sub    esp,0xc
c0021b4f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021b52:	ff d0                	call   eax
c0021b54:	83 c4 10             	add    esp,0x10
c0021b57:	b8 00 00 00 00       	mov    eax,0x0
c0021b5c:	c9                   	leave  
c0021b5d:	c3                   	ret    

c0021b5e <IOAPIC::close(int, int, void*)>:
c0021b5e:	b8 00 00 00 00       	mov    eax,0x0
c0021b63:	c3                   	ret    

c0021b64 <APIC::io_wait()>:
c0021b64:	eb 00                	jmp    c0021b66 <APIC::io_wait()+0x2>
c0021b66:	eb 00                	jmp    c0021b68 <APIC::io_wait()+0x4>
c0021b68:	90                   	nop
c0021b69:	c3                   	ret    

c0021b6a <APIC::getBase()>:
c0021b6a:	55                   	push   ebp
c0021b6b:	89 e5                	mov    ebp,esp
c0021b6d:	83 ec 18             	sub    esp,0x18
c0021b70:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0021b75:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021b7b:	83 e0 08             	and    eax,0x8
c0021b7e:	84 c0                	test   al,al
c0021b80:	75 07                	jne    c0021b89 <APIC::getBase()+0x1f>
c0021b82:	b8 00 00 00 00       	mov    eax,0x0
c0021b87:	eb 21                	jmp    c0021baa <APIC::getBase()+0x40>
c0021b89:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0021b8e:	83 ec 08             	sub    esp,0x8
c0021b91:	6a 1b                	push   0x1b
c0021b93:	50                   	push   eax
c0021b94:	e8 d5 76 fe ff       	call   c000926e <Computer::rdmsr(unsigned int)>
c0021b99:	83 c4 10             	add    esp,0x10
c0021b9c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0021b9f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0021ba2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021ba5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0021baa:	c9                   	leave  
c0021bab:	c3                   	ret    

c0021bac <APIC::eoi(unsigned char)>:
c0021bac:	55                   	push   ebp
c0021bad:	89 e5                	mov    ebp,esp
c0021baf:	83 ec 28             	sub    esp,0x28
c0021bb2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021bb5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0021bb8:	83 ec 0c             	sub    esp,0xc
c0021bbb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021bbe:	e8 a7 ff ff ff       	call   c0021b6a <APIC::getBase()>
c0021bc3:	83 c4 10             	add    esp,0x10
c0021bc6:	05 b0 00 00 00       	add    eax,0xb0
c0021bcb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0021bce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021bd1:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021bd7:	90                   	nop
c0021bd8:	c9                   	leave  
c0021bd9:	c3                   	ret    

c0021bda <APIC::open(int, int, void*)>:
c0021bda:	55                   	push   ebp
c0021bdb:	89 e5                	mov    ebp,esp
c0021bdd:	57                   	push   edi
c0021bde:	56                   	push   esi
c0021bdf:	53                   	push   ebx
c0021be0:	83 ec 2c             	sub    esp,0x2c
c0021be3:	83 ec 0c             	sub    esp,0xc
c0021be6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021be9:	e8 7c ff ff ff       	call   c0021b6a <APIC::getBase()>
c0021bee:	83 c4 10             	add    esp,0x10
c0021bf1:	89 c2                	mov    edx,eax
c0021bf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021bf6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021bfc:	0f b6 f8             	movzx  edi,al
c0021bff:	89 d0                	mov    eax,edx
c0021c01:	ba 00 00 00 00       	mov    edx,0x0
c0021c06:	89 c1                	mov    ecx,eax
c0021c08:	80 e5 ff             	and    ch,0xff
c0021c0b:	89 cb                	mov    ebx,ecx
c0021c0d:	0f b6 f2             	movzx  esi,dl
c0021c10:	89 d8                	mov    eax,ebx
c0021c12:	89 f2                	mov    edx,esi
c0021c14:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021c17:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021c1a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021c1e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021c22:	83 e0 00             	and    eax,0x0
c0021c25:	09 d0                	or     eax,edx
c0021c27:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021c2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021c2e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021c34:	8d 50 01             	lea    edx,[eax+0x1]
c0021c37:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021c3a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021c40:	0f b6 d0             	movzx  edx,al
c0021c43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021c46:	83 c2 08             	add    edx,0x8
c0021c49:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021c4d:	0f b6 c9             	movzx  ecx,cl
c0021c50:	81 c9 00 00 01 00    	or     ecx,0x10000
c0021c56:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021c5a:	83 ec 0c             	sub    esp,0xc
c0021c5d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021c60:	e8 05 ff ff ff       	call   c0021b6a <APIC::getBase()>
c0021c65:	83 c4 10             	add    esp,0x10
c0021c68:	05 f0 00 00 00       	add    eax,0xf0
c0021c6d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0021c70:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021c73:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c75:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021c78:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0021c7f:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0021c86:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021c89:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021c8c:	89 10                	mov    DWORD PTR [eax],edx
c0021c8e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0021c95:	a1 50 92 02 c0       	mov    eax,ds:0xc0029250
c0021c9a:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0021c9d:	7d 7c                	jge    c0021d1b <APIC::open(int, int, void*)+0x141>
c0021c9f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021ca2:	8b 04 85 60 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6da0]
c0021ca9:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0021cac:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021caf:	8b 04 85 60 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6da0]
c0021cb6:	c1 e8 08             	shr    eax,0x8
c0021cb9:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0021cbd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021cc0:	8b 04 85 60 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6da0]
c0021cc7:	c1 e8 18             	shr    eax,0x18
c0021cca:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0021ccd:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0021cd1:	75 40                	jne    c0021d13 <APIC::open(int, int, void*)+0x139>
c0021cd3:	83 ec 0c             	sub    esp,0xc
c0021cd6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021cd9:	e8 8c fe ff ff       	call   c0021b6a <APIC::getBase()>
c0021cde:	83 c4 10             	add    esp,0x10
c0021ce1:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0021ce5:	75 07                	jne    c0021cee <APIC::open(int, int, void*)+0x114>
c0021ce7:	ba 60 03 00 00       	mov    edx,0x360
c0021cec:	eb 05                	jmp    c0021cf3 <APIC::open(int, int, void*)+0x119>
c0021cee:	ba 50 03 00 00       	mov    edx,0x350
c0021cf3:	01 d0                	add    eax,edx
c0021cf5:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021cf8:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021cfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0021cfd:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0021d00:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0021d07:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0021d0b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021d0e:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021d11:	89 10                	mov    DWORD PTR [eax],edx
c0021d13:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0021d16:	e9 7a ff ff ff       	jmp    c0021c95 <APIC::open(int, int, void*)+0xbb>
c0021d1b:	b8 00 00 00 00       	mov    eax,0x0
c0021d20:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021d23:	5b                   	pop    ebx
c0021d24:	5e                   	pop    esi
c0021d25:	5f                   	pop    edi
c0021d26:	5d                   	pop    ebp
c0021d27:	c3                   	ret    

c0021d28 <IOAPIC::IOAPIC()>:
c0021d28:	83 ec 0c             	sub    esp,0xc
c0021d2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d2f:	83 ec 08             	sub    esp,0x8
c0021d32:	68 04 7a 02 c0       	push   0xc0027a04
c0021d37:	50                   	push   eax
c0021d38:	e8 81 ca fe ff       	call   c000e7be <Device::Device(char const*)>
c0021d3d:	83 c4 10             	add    esp,0x10
c0021d40:	ba 2c 7b 02 c0       	mov    edx,0xc0027b2c
c0021d45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d49:	89 10                	mov    DWORD PTR [eax],edx
c0021d4b:	90                   	nop
c0021d4c:	83 c4 0c             	add    esp,0xc
c0021d4f:	c3                   	ret    

c0021d50 <APIC::APIC()>:
c0021d50:	53                   	push   ebx
c0021d51:	83 ec 18             	sub    esp,0x18
c0021d54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d58:	83 ec 08             	sub    esp,0x8
c0021d5b:	68 0c 7a 02 c0       	push   0xc0027a0c
c0021d60:	50                   	push   eax
c0021d61:	e8 e8 d1 fe ff       	call   c000ef4e <InterruptController::InterruptController(char const*)>
c0021d66:	83 c4 10             	add    esp,0x10
c0021d69:	ba e4 7a 02 c0       	mov    edx,0xc0027ae4
c0021d6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d72:	89 10                	mov    DWORD PTR [eax],edx
c0021d74:	a0 80 a9 02 c0       	mov    al,ds:0xc002a980
c0021d79:	83 f0 01             	xor    eax,0x1
c0021d7c:	84 c0                	test   al,al
c0021d7e:	0f 84 a1 00 00 00    	je     c0021e25 <APIC::APIC()+0xd5>
c0021d84:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0021d89:	a0 00 93 02 c0       	mov    al,ds:0xc0029300
c0021d8e:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0021d92:	0f 83 86 00 00 00    	jae    c0021e1e <APIC::APIC()+0xce>
c0021d98:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0021da0:	83 ec 0c             	sub    esp,0xc
c0021da3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021da7:	e8 af 7f fe ff       	call   c0009d5b <malloc>
c0021dac:	83 c4 10             	add    esp,0x10
c0021daf:	89 c3                	mov    ebx,eax
c0021db1:	83 ec 0c             	sub    esp,0xc
c0021db4:	53                   	push   ebx
c0021db5:	e8 6e ff ff ff       	call   c0021d28 <IOAPIC::IOAPIC()>
c0021dba:	83 c4 10             	add    esp,0x10
c0021dbd:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0021dc1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0021dc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021dca:	89 14 85 60 a9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd56a0],edx
c0021dd1:	a1 40 a9 02 c0       	mov    eax,ds:0xc002a940
c0021dd6:	40                   	inc    eax
c0021dd7:	a3 40 a9 02 c0       	mov    ds:0xc002a940,eax
c0021ddc:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0021de1:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021de7:	83 ec 08             	sub    esp,0x8
c0021dea:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021dee:	50                   	push   eax
c0021def:	e8 c6 c7 fe ff       	call   c000e5ba <Device::addChild(Device*)>
c0021df4:	83 c4 10             	add    esp,0x10
c0021df7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021dfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0021dfd:	83 c0 08             	add    eax,0x8
c0021e00:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e02:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0021e07:	6a 00                	push   0x0
c0021e09:	6a 00                	push   0x0
c0021e0b:	52                   	push   edx
c0021e0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e10:	ff d0                	call   eax
c0021e12:	83 c4 10             	add    esp,0x10
c0021e15:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0021e19:	e9 6b ff ff ff       	jmp    c0021d89 <APIC::APIC()+0x39>
c0021e1e:	c6 05 80 a9 02 c0 01 	mov    BYTE PTR ds:0xc002a980,0x1
c0021e25:	90                   	nop
c0021e26:	83 c4 18             	add    esp,0x18
c0021e29:	5b                   	pop    ebx
c0021e2a:	c3                   	ret    
c0021e2b:	90                   	nop

c0021e2c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0021e2c:	55                   	push   ebp
c0021e2d:	89 e5                	mov    ebp,esp
c0021e2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e32:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021e38:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021e3b:	72 1d                	jb     c0021e5a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021e3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e40:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0021e46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e49:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0021e4f:	01 d0                	add    eax,edx
c0021e51:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021e54:	73 04                	jae    c0021e5a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021e56:	b0 01                	mov    al,0x1
c0021e58:	eb 02                	jmp    c0021e5c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0021e5a:	b0 00                	mov    al,0x0
c0021e5c:	5d                   	pop    ebp
c0021e5d:	c3                   	ret    

c0021e5e <IOAPIC::read(int)>:
c0021e5e:	55                   	push   ebp
c0021e5f:	89 e5                	mov    ebp,esp
c0021e61:	83 ec 10             	sub    esp,0x10
c0021e64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e67:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021e6d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0021e70:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021e73:	0f b6 d0             	movzx  edx,al
c0021e76:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021e79:	89 10                	mov    DWORD PTR [eax],edx
c0021e7b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021e7e:	83 c0 10             	add    eax,0x10
c0021e81:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e83:	c9                   	leave  
c0021e84:	c3                   	ret    
c0021e85:	90                   	nop

c0021e86 <IOAPIC::open(int, int, void*)>:
c0021e86:	55                   	push   ebp
c0021e87:	89 e5                	mov    ebp,esp
c0021e89:	57                   	push   edi
c0021e8a:	56                   	push   esi
c0021e8b:	53                   	push   ebx
c0021e8c:	83 ec 0c             	sub    esp,0xc
c0021e8f:	83 ec 0c             	sub    esp,0xc
c0021e92:	68 37 7a 02 c0       	push   0xc0027a37
c0021e97:	e8 ab b1 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0021e9c:	83 c4 10             	add    esp,0x10
c0021e9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021ea2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021ea5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021eab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021eae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021eb4:	8b 14 85 40 93 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6cc0]
c0021ebb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021ebe:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021ec4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021ec7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021ecd:	8b 14 85 c0 93 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6c40]
c0021ed4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021ed7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0021edd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021ee0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0021ee6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021ee9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021eef:	0f b6 f8             	movzx  edi,al
c0021ef2:	89 d0                	mov    eax,edx
c0021ef4:	ba 00 00 00 00       	mov    edx,0x0
c0021ef9:	89 c1                	mov    ecx,eax
c0021efb:	80 e5 ff             	and    ch,0xff
c0021efe:	89 cb                	mov    ebx,ecx
c0021f00:	0f b6 f2             	movzx  esi,dl
c0021f03:	89 d8                	mov    eax,ebx
c0021f05:	89 f2                	mov    edx,esi
c0021f07:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021f0a:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021f0d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021f11:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021f15:	83 e0 00             	and    eax,0x0
c0021f18:	09 d0                	or     eax,edx
c0021f1a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021f1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021f21:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021f27:	8d 50 01             	lea    edx,[eax+0x1]
c0021f2a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021f2d:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021f33:	0f b6 d0             	movzx  edx,al
c0021f36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021f39:	83 c2 08             	add    edx,0x8
c0021f3c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021f40:	0f b6 c9             	movzx  ecx,cl
c0021f43:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0021f49:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021f4d:	83 ec 08             	sub    esp,0x8
c0021f50:	6a 01                	push   0x1
c0021f52:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021f55:	e8 04 ff ff ff       	call   c0021e5e <IOAPIC::read(int)>
c0021f5a:	83 c4 10             	add    esp,0x10
c0021f5d:	c1 f8 10             	sar    eax,0x10
c0021f60:	0f b6 c0             	movzx  eax,al
c0021f63:	8d 50 01             	lea    edx,[eax+0x1]
c0021f66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021f69:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0021f6f:	b8 00 00 00 00       	mov    eax,0x0
c0021f74:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021f77:	5b                   	pop    ebx
c0021f78:	5e                   	pop    esi
c0021f79:	5f                   	pop    edi
c0021f7a:	5d                   	pop    ebp
c0021f7b:	c3                   	ret    

c0021f7c <IOAPIC::write(int, int)>:
c0021f7c:	55                   	push   ebp
c0021f7d:	89 e5                	mov    ebp,esp
c0021f7f:	83 ec 10             	sub    esp,0x10
c0021f82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021f85:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021f8b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0021f8e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021f91:	0f b6 d0             	movzx  edx,al
c0021f94:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021f97:	89 10                	mov    DWORD PTR [eax],edx
c0021f99:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021f9c:	8d 50 10             	lea    edx,[eax+0x10]
c0021f9f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021fa2:	89 02                	mov    DWORD PTR [edx],eax
c0021fa4:	90                   	nop
c0021fa5:	c9                   	leave  
c0021fa6:	c3                   	ret    
c0021fa7:	90                   	nop

c0021fa8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0021fa8:	55                   	push   ebp
c0021fa9:	89 e5                	mov    ebp,esp
c0021fab:	53                   	push   ebx
c0021fac:	83 ec 2c             	sub    esp,0x2c
c0021faf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021fb2:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0021fb5:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0021fb8:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0021fbb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0021fbe:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021fc1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0021fc4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0021fc7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021fca:	88 d8                	mov    al,bl
c0021fcc:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0021fcf:	88 c8                	mov    al,cl
c0021fd1:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0021fd4:	88 d0                	mov    al,dl
c0021fd6:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0021fd9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0021fdd:	83 c0 08             	add    eax,0x8
c0021fe0:	01 c0                	add    eax,eax
c0021fe2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0021fe5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0021fe9:	83 c0 08             	add    eax,0x8
c0021fec:	01 c0                	add    eax,eax
c0021fee:	40                   	inc    eax
c0021fef:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0021ff2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0021ff5:	50                   	push   eax
c0021ff6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021ff9:	e8 60 fe ff ff       	call   c0021e5e <IOAPIC::read(int)>
c0021ffe:	83 c4 08             	add    esp,0x8
c0022001:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022004:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002200b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002200e:	c1 e0 18             	shl    eax,0x18
c0022011:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0022014:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0022017:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002201a:	52                   	push   edx
c002201b:	50                   	push   eax
c002201c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002201f:	e8 58 ff ff ff       	call   c0021f7c <IOAPIC::write(int, int)>
c0022024:	83 c4 0c             	add    esp,0xc
c0022027:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002202a:	50                   	push   eax
c002202b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002202e:	e8 2b fe ff ff       	call   c0021e5e <IOAPIC::read(int)>
c0022033:	83 c4 08             	add    esp,0x8
c0022036:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0022039:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0022040:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0022047:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002204e:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0022052:	74 09                	je     c002205d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0022054:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002205b:	eb 07                	jmp    c0022064 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002205d:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0022064:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0022068:	74 09                	je     c0022073 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c002206a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0022071:	eb 07                	jmp    c002207a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0022073:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002207a:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0022081:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0022085:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0022088:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002208b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002208e:	52                   	push   edx
c002208f:	50                   	push   eax
c0022090:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022093:	e8 e4 fe ff ff       	call   c0021f7c <IOAPIC::write(int, int)>
c0022098:	83 c4 0c             	add    esp,0xc
c002209b:	90                   	nop
c002209c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002209f:	c9                   	leave  
c00220a0:	c3                   	ret    
c00220a1:	90                   	nop

c00220a2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00220a2:	55                   	push   ebp
c00220a3:	89 e5                	mov    ebp,esp
c00220a5:	57                   	push   edi
c00220a6:	56                   	push   esi
c00220a7:	53                   	push   ebx
c00220a8:	83 ec 2c             	sub    esp,0x2c
c00220ab:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00220ae:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00220b1:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00220b5:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00220b9:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00220bd:	74 5a                	je     c0022119 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00220bf:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00220c3:	7f 44                	jg     c0022109 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00220c5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00220c8:	05 e0 80 02 c0       	add    eax,0xc00280e0
c00220cd:	8a 00                	mov    al,BYTE PTR [eax]
c00220cf:	0f b6 c0             	movzx  eax,al
c00220d2:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00220d5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00220d8:	66 8b 84 00 e0 92 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd6d20]
c00220e0:	0f b7 c0             	movzx  eax,ax
c00220e3:	83 e0 02             	and    eax,0x2
c00220e6:	85 c0                	test   eax,eax
c00220e8:	74 04                	je     c00220ee <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00220ea:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00220ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00220f1:	66 8b 84 00 e0 92 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd6d20]
c00220f9:	0f b7 c0             	movzx  eax,ax
c00220fc:	83 e0 08             	and    eax,0x8
c00220ff:	85 c0                	test   eax,eax
c0022101:	74 16                	je     c0022119 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0022103:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0022107:	eb 10                	jmp    c0022119 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0022109:	83 ec 0c             	sub    esp,0xc
c002210c:	68 48 7a 02 c0       	push   0xc0027a48
c0022111:	e8 13 30 ff ff       	call   c0015129 <Krnl::panic(char const*)>
c0022116:	83 c4 10             	add    esp,0x10
c0022119:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c002211d:	a1 40 a9 02 c0       	mov    eax,ds:0xc002a940
c0022122:	83 ec 08             	sub    esp,0x8
c0022125:	50                   	push   eax
c0022126:	68 80 7a 02 c0       	push   0xc0027a80
c002212b:	e8 17 af fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0022130:	83 c4 10             	add    esp,0x10
c0022133:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c002213a:	a1 40 a9 02 c0       	mov    eax,ds:0xc002a940
c002213f:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0022142:	7d 67                	jge    c00221ab <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0022144:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022147:	8b 04 85 60 a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd56a0]
c002214e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022151:	83 ec 08             	sub    esp,0x8
c0022154:	52                   	push   edx
c0022155:	50                   	push   eax
c0022156:	e8 d1 fc ff ff       	call   c0021e2c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c002215b:	83 c4 10             	add    esp,0x10
c002215e:	84 c0                	test   al,al
c0022160:	74 44                	je     c00221a6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0022162:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022165:	8b 1c 85 60 a9 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd56a0]
c002216c:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0022170:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0022173:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0022177:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002217a:	83 c0 20             	add    eax,0x20
c002217d:	0f b6 f0             	movzx  esi,al
c0022180:	b8 00 00 00 00       	mov    eax,0x0
c0022185:	99                   	cdq    
c0022186:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0022189:	0f b6 c9             	movzx  ecx,cl
c002218c:	83 ec 04             	sub    esp,0x4
c002218f:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0022192:	57                   	push   edi
c0022193:	56                   	push   esi
c0022194:	52                   	push   edx
c0022195:	50                   	push   eax
c0022196:	51                   	push   ecx
c0022197:	53                   	push   ebx
c0022198:	e8 0b fe ff ff       	call   c0021fa8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c002219d:	83 c4 20             	add    esp,0x20
c00221a0:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00221a4:	eb 05                	jmp    c00221ab <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00221a6:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00221a9:	eb 8f                	jmp    c002213a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00221ab:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00221ae:	83 f0 01             	xor    eax,0x1
c00221b1:	84 c0                	test   al,al
c00221b3:	74 10                	je     c00221c5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00221b5:	83 ec 0c             	sub    esp,0xc
c00221b8:	68 97 7a 02 c0       	push   0xc0027a97
c00221bd:	e8 67 2f ff ff       	call   c0015129 <Krnl::panic(char const*)>
c00221c2:	83 c4 10             	add    esp,0x10
c00221c5:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00221c9:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00221d0:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00221d4:	7f 65                	jg     c002223b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00221d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00221d9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00221dc:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00221e3:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00221e6:	01 ca                	add    edx,ecx
c00221e8:	83 c2 54             	add    edx,0x54
c00221eb:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00221ef:	85 c0                	test   eax,eax
c00221f1:	75 43                	jne    c0022236 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00221f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00221f6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00221f9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0022200:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022203:	01 ca                	add    edx,ecx
c0022205:	8d 4a 54             	lea    ecx,[edx+0x54]
c0022208:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002220b:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002220f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022212:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022215:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002221c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002221f:	01 ca                	add    edx,ecx
c0022221:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0022227:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002222a:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002222e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022231:	83 e8 20             	sub    eax,0x20
c0022234:	eb 1a                	jmp    c0022250 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0022236:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0022239:	eb 95                	jmp    c00221d0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c002223b:	83 ec 0c             	sub    esp,0xc
c002223e:	68 a4 7a 02 c0       	push   0xc0027aa4
c0022243:	e8 e1 2e ff ff       	call   c0015129 <Krnl::panic(char const*)>
c0022248:	83 c4 10             	add    esp,0x10
c002224b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0022250:	8d 65 f4             	lea    esp,[ebp-0xc]
c0022253:	5b                   	pop    ebx
c0022254:	5e                   	pop    esi
c0022255:	5f                   	pop    edi
c0022256:	5d                   	pop    ebp
c0022257:	c3                   	ret    

c0022258 <PIC::disable()>:
c0022258:	55                   	push   ebp
c0022259:	89 e5                	mov    ebp,esp
c002225b:	83 ec 10             	sub    esp,0x10
c002225e:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0022264:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0022268:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002226b:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002226f:	ee                   	out    dx,al
c0022270:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0022276:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c002227a:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002227d:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0022281:	ee                   	out    dx,al
c0022282:	90                   	nop
c0022283:	c9                   	leave  
c0022284:	c3                   	ret    
c0022285:	90                   	nop

c0022286 <PIC::close(int, int, void*)>:
c0022286:	55                   	push   ebp
c0022287:	89 e5                	mov    ebp,esp
c0022289:	83 ec 08             	sub    esp,0x8
c002228c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002228f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022291:	83 c0 3c             	add    eax,0x3c
c0022294:	8b 00                	mov    eax,DWORD PTR [eax]
c0022296:	83 ec 0c             	sub    esp,0xc
c0022299:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002229c:	ff d0                	call   eax
c002229e:	83 c4 10             	add    esp,0x10
c00222a1:	b8 00 00 00 00       	mov    eax,0x0
c00222a6:	c9                   	leave  
c00222a7:	c3                   	ret    

c00222a8 <PIC::PIC()>:
c00222a8:	83 ec 0c             	sub    esp,0xc
c00222ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222af:	83 ec 08             	sub    esp,0x8
c00222b2:	68 50 7b 02 c0       	push   0xc0027b50
c00222b7:	50                   	push   eax
c00222b8:	e8 91 cc fe ff       	call   c000ef4e <InterruptController::InterruptController(char const*)>
c00222bd:	83 c4 10             	add    esp,0x10
c00222c0:	ba 7c 7b 02 c0       	mov    edx,0xc0027b7c
c00222c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222c9:	89 10                	mov    DWORD PTR [eax],edx
c00222cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222cf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00222d5:	0f b6 d0             	movzx  edx,al
c00222d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222dc:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00222e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00222ed:	0f b6 d0             	movzx  edx,al
c00222f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222f4:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00222f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222fd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022303:	8d 50 01             	lea    edx,[eax+0x1]
c0022306:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002230a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022310:	0f b6 d0             	movzx  edx,al
c0022313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022317:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002231b:	83 e1 3f             	and    ecx,0x3f
c002231e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022326:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002232c:	0f b6 d0             	movzx  edx,al
c002232f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022333:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c002233a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002233e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022344:	0f b6 d0             	movzx  edx,al
c0022347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002234b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0022350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022354:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002235a:	8d 50 01             	lea    edx,[eax+0x1]
c002235d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022361:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022367:	0f b6 d0             	movzx  edx,al
c002236a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002236e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022372:	83 e1 3f             	and    ecx,0x3f
c0022375:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022379:	90                   	nop
c002237a:	83 c4 0c             	add    esp,0xc
c002237d:	c3                   	ret    

c002237e <PIC::ioWait()>:
c002237e:	eb 00                	jmp    c0022380 <PIC::ioWait()+0x2>
c0022380:	eb 00                	jmp    c0022382 <PIC::ioWait()+0x4>
c0022382:	90                   	nop
c0022383:	c3                   	ret    

c0022384 <PIC::getIRQReg(int)>:
c0022384:	55                   	push   ebp
c0022385:	89 e5                	mov    ebp,esp
c0022387:	83 ec 10             	sub    esp,0x10
c002238a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002238d:	0f b6 c0             	movzx  eax,al
c0022390:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0022396:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0022399:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002239c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00223a0:	ee                   	out    dx,al
c00223a1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00223a4:	0f b6 c0             	movzx  eax,al
c00223a7:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00223ad:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c00223b0:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00223b3:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00223b7:	ee                   	out    dx,al
c00223b8:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00223be:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00223c2:	89 c2                	mov    edx,eax
c00223c4:	ec                   	in     al,dx
c00223c5:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00223c8:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00223cb:	0f b6 c0             	movzx  eax,al
c00223ce:	c1 e0 08             	shl    eax,0x8
c00223d1:	89 c1                	mov    ecx,eax
c00223d3:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00223d9:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00223dd:	89 c2                	mov    edx,eax
c00223df:	ec                   	in     al,dx
c00223e0:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00223e3:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00223e6:	0f b6 c0             	movzx  eax,al
c00223e9:	09 c8                	or     eax,ecx
c00223eb:	c9                   	leave  
c00223ec:	c3                   	ret    
c00223ed:	90                   	nop

c00223ee <PIC::eoi(unsigned char)>:
c00223ee:	55                   	push   ebp
c00223ef:	89 e5                	mov    ebp,esp
c00223f1:	83 ec 14             	sub    esp,0x14
c00223f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00223f7:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00223fa:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00223fe:	75 1e                	jne    c002241e <PIC::eoi(unsigned char)+0x30>
c0022400:	6a 0b                	push   0xb
c0022402:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022405:	e8 7a ff ff ff       	call   c0022384 <PIC::getIRQReg(int)>
c002240a:	83 c4 08             	add    esp,0x8
c002240d:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0022411:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0022415:	25 80 00 00 00       	and    eax,0x80
c002241a:	85 c0                	test   eax,eax
c002241c:	74 5f                	je     c002247d <PIC::eoi(unsigned char)+0x8f>
c002241e:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0022422:	75 2d                	jne    c0022451 <PIC::eoi(unsigned char)+0x63>
c0022424:	6a 0b                	push   0xb
c0022426:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022429:	e8 56 ff ff ff       	call   c0022384 <PIC::getIRQReg(int)>
c002242e:	83 c4 08             	add    esp,0x8
c0022431:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0022435:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022438:	66 85 c0             	test   ax,ax
c002243b:	78 14                	js     c0022451 <PIC::eoi(unsigned char)+0x63>
c002243d:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0022443:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0022447:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002244a:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002244e:	ee                   	out    dx,al
c002244f:	eb 2d                	jmp    c002247e <PIC::eoi(unsigned char)+0x90>
c0022451:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0022455:	76 12                	jbe    c0022469 <PIC::eoi(unsigned char)+0x7b>
c0022457:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002245d:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0022461:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022464:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022468:	ee                   	out    dx,al
c0022469:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002246f:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0022473:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022476:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002247a:	ee                   	out    dx,al
c002247b:	eb 01                	jmp    c002247e <PIC::eoi(unsigned char)+0x90>
c002247d:	90                   	nop
c002247e:	c9                   	leave  
c002247f:	c3                   	ret    

c0022480 <PIC::remap()>:
c0022480:	55                   	push   ebp
c0022481:	89 e5                	mov    ebp,esp
c0022483:	83 ec 48             	sub    esp,0x48
c0022486:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c002248d:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0022494:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c002249a:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002249d:	89 c2                	mov    edx,eax
c002249f:	ec                   	in     al,dx
c00224a0:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00224a3:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00224a6:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00224a9:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00224af:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00224b2:	89 c2                	mov    edx,eax
c00224b4:	ec                   	in     al,dx
c00224b5:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00224b8:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00224bb:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00224be:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00224c4:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00224c8:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00224cb:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00224ce:	ee                   	out    dx,al
c00224cf:	83 ec 0c             	sub    esp,0xc
c00224d2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00224d5:	e8 a4 fe ff ff       	call   c002237e <PIC::ioWait()>
c00224da:	83 c4 10             	add    esp,0x10
c00224dd:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00224e3:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00224e7:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00224ea:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00224ed:	ee                   	out    dx,al
c00224ee:	83 ec 0c             	sub    esp,0xc
c00224f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00224f4:	e8 85 fe ff ff       	call   c002237e <PIC::ioWait()>
c00224f9:	83 c4 10             	add    esp,0x10
c00224fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00224ff:	0f b6 c0             	movzx  eax,al
c0022502:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0022508:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c002250b:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c002250e:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0022511:	ee                   	out    dx,al
c0022512:	83 ec 0c             	sub    esp,0xc
c0022515:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022518:	e8 61 fe ff ff       	call   c002237e <PIC::ioWait()>
c002251d:	83 c4 10             	add    esp,0x10
c0022520:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022523:	0f b6 c0             	movzx  eax,al
c0022526:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002252c:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c002252f:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0022532:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0022535:	ee                   	out    dx,al
c0022536:	83 ec 0c             	sub    esp,0xc
c0022539:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002253c:	e8 3d fe ff ff       	call   c002237e <PIC::ioWait()>
c0022541:	83 c4 10             	add    esp,0x10
c0022544:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c002254a:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c002254e:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0022551:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0022554:	ee                   	out    dx,al
c0022555:	83 ec 0c             	sub    esp,0xc
c0022558:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002255b:	e8 1e fe ff ff       	call   c002237e <PIC::ioWait()>
c0022560:	83 c4 10             	add    esp,0x10
c0022563:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0022569:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002256d:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0022570:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022573:	ee                   	out    dx,al
c0022574:	83 ec 0c             	sub    esp,0xc
c0022577:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002257a:	e8 ff fd ff ff       	call   c002237e <PIC::ioWait()>
c002257f:	83 c4 10             	add    esp,0x10
c0022582:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0022588:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002258c:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002258f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0022592:	ee                   	out    dx,al
c0022593:	83 ec 0c             	sub    esp,0xc
c0022596:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022599:	e8 e0 fd ff ff       	call   c002237e <PIC::ioWait()>
c002259e:	83 c4 10             	add    esp,0x10
c00225a1:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00225a7:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00225ab:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00225ae:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00225b1:	ee                   	out    dx,al
c00225b2:	83 ec 0c             	sub    esp,0xc
c00225b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00225b8:	e8 c1 fd ff ff       	call   c002237e <PIC::ioWait()>
c00225bd:	83 c4 10             	add    esp,0x10
c00225c0:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00225c4:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00225ca:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00225cd:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00225d0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00225d3:	ee                   	out    dx,al
c00225d4:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00225d8:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00225de:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00225e1:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00225e4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00225e7:	ee                   	out    dx,al
c00225e8:	90                   	nop
c00225e9:	c9                   	leave  
c00225ea:	c3                   	ret    
c00225eb:	90                   	nop

c00225ec <PIC::open(int, int, void*)>:
c00225ec:	55                   	push   ebp
c00225ed:	89 e5                	mov    ebp,esp
c00225ef:	83 ec 18             	sub    esp,0x18
c00225f2:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00225f8:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00225fc:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00225ff:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022603:	ee                   	out    dx,al
c0022604:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c002260a:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c002260e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022611:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022615:	ee                   	out    dx,al
c0022616:	83 ec 0c             	sub    esp,0xc
c0022619:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002261c:	e8 5f fe ff ff       	call   c0022480 <PIC::remap()>
c0022621:	83 c4 10             	add    esp,0x10
c0022624:	b8 00 00 00 00       	mov    eax,0x0
c0022629:	c9                   	leave  
c002262a:	c3                   	ret    
c002262b:	90                   	nop

c002262c <APICTimer::close(int, int, void*)>:
c002262c:	b8 00 00 00 00       	mov    eax,0x0
c0022631:	c3                   	ret    
c0022632:	66 90                	xchg   ax,ax

c0022634 <apicTimerHandler(regs*, void*)>:
c0022634:	83 ec 0c             	sub    esp,0xc
c0022637:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002263b:	8b 08                	mov    ecx,DWORD PTR [eax]
c002263d:	b8 10 27 00 00       	mov    eax,0x2710
c0022642:	ba 00 00 00 00       	mov    edx,0x0
c0022647:	f7 f1                	div    ecx
c0022649:	83 ec 0c             	sub    esp,0xc
c002264c:	50                   	push   eax
c002264d:	e8 2b e9 fe ff       	call   c0010f7d <timerHandler(unsigned int)>
c0022652:	83 c4 10             	add    esp,0x10
c0022655:	90                   	nop
c0022656:	83 c4 0c             	add    esp,0xc
c0022659:	c3                   	ret    
c002265a:	66 90                	xchg   ax,ax

c002265c <APICTimer::write(int)>:
c002265c:	83 ec 1c             	sub    esp,0x1c
c002265f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022663:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022667:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002266d:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0022672:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022678:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002267e:	83 ec 0c             	sub    esp,0xc
c0022681:	50                   	push   eax
c0022682:	e8 e3 f4 ff ff       	call   c0021b6a <APIC::getBase()>
c0022687:	83 c4 10             	add    esp,0x10
c002268a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002268e:	a1 0c 90 02 c0       	mov    eax,ds:0xc002900c
c0022693:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022697:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002269b:	05 e0 03 00 00       	add    eax,0x3e0
c00226a0:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00226a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00226aa:	05 80 03 00 00       	add    eax,0x380
c00226af:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00226b5:	fb                   	sti    
c00226b6:	66 90                	xchg   ax,ax
c00226b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00226bc:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c00226c2:	a1 0c 90 02 c0       	mov    eax,ds:0xc002900c
c00226c7:	39 c2                	cmp    edx,eax
c00226c9:	76 05                	jbe    c00226d0 <APICTimer::write(int)+0x74>
c00226cb:	eb eb                	jmp    c00226b8 <APICTimer::write(int)+0x5c>
c00226cd:	8d 76 00             	lea    esi,[esi+0x0]
c00226d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00226d4:	05 20 03 00 00       	add    eax,0x320
c00226d9:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00226df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00226e3:	05 90 03 00 00       	add    eax,0x390
c00226e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00226ea:	f7 d0                	not    eax
c00226ec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00226f0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00226f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226f8:	ba 00 00 00 00       	mov    edx,0x0
c00226fd:	f7 f1                	div    ecx
c00226ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0022702:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022706:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002270c:	0d 00 00 02 00       	or     eax,0x20000
c0022711:	89 c2                	mov    edx,eax
c0022713:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022717:	05 20 03 00 00       	add    eax,0x320
c002271c:	89 10                	mov    DWORD PTR [eax],edx
c002271e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022722:	05 e0 03 00 00       	add    eax,0x3e0
c0022727:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002272d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022731:	05 80 03 00 00       	add    eax,0x380
c0022736:	89 c2                	mov    edx,eax
c0022738:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002273b:	89 02                	mov    DWORD PTR [edx],eax
c002273d:	90                   	nop
c002273e:	83 c4 1c             	add    esp,0x1c
c0022741:	c3                   	ret    
c0022742:	66 90                	xchg   ax,ax

c0022744 <APICTimer::open(int, int, void*)>:
c0022744:	57                   	push   edi
c0022745:	56                   	push   esi
c0022746:	53                   	push   ebx
c0022747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002274b:	8b 00                	mov    eax,DWORD PTR [eax]
c002274d:	83 c0 24             	add    eax,0x24
c0022750:	8b 00                	mov    eax,DWORD PTR [eax]
c0022752:	83 ec 08             	sub    esp,0x8
c0022755:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022759:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002275d:	ff d0                	call   eax
c002275f:	83 c4 10             	add    esp,0x10
c0022762:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0022767:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002276d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022773:	83 ec 0c             	sub    esp,0xc
c0022776:	50                   	push   eax
c0022777:	e8 ee f3 ff ff       	call   c0021b6a <APIC::getBase()>
c002277c:	83 c4 10             	add    esp,0x10
c002277f:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0022785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022789:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002278f:	0f b6 f8             	movzx  edi,al
c0022792:	89 d0                	mov    eax,edx
c0022794:	ba 00 00 00 00       	mov    edx,0x0
c0022799:	89 c1                	mov    ecx,eax
c002279b:	80 e5 ff             	and    ch,0xff
c002279e:	89 cb                	mov    ebx,ecx
c00227a0:	0f b6 f2             	movzx  esi,dl
c00227a3:	89 d8                	mov    eax,ebx
c00227a5:	89 f2                	mov    edx,esi
c00227a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00227ab:	8d 5f 08             	lea    ebx,[edi+0x8]
c00227ae:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00227b2:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00227b6:	83 e0 00             	and    eax,0x0
c00227b9:	09 d0                	or     eax,edx
c00227bb:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00227bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227c3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00227c9:	8d 50 01             	lea    edx,[eax+0x1]
c00227cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00227d0:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00227d6:	0f b6 d0             	movzx  edx,al
c00227d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227dd:	83 c2 08             	add    edx,0x8
c00227e0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00227e4:	0f b6 c9             	movzx  ecx,cl
c00227e7:	81 c9 00 00 01 00    	or     ecx,0x10000
c00227ed:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00227f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00227f9:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00227ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022803:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022807:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002280d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022811:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022817:	83 ec 0c             	sub    esp,0xc
c002281a:	51                   	push   ecx
c002281b:	6a 01                	push   0x1
c002281d:	68 34 26 02 c0       	push   0xc0022634
c0022822:	52                   	push   edx
c0022823:	50                   	push   eax
c0022824:	e8 09 bd fe ff       	call   c000e532 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022829:	83 c4 20             	add    esp,0x20
c002282c:	89 c2                	mov    edx,eax
c002282e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022832:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022838:	b8 00 00 00 00       	mov    eax,0x0
c002283d:	5b                   	pop    ebx
c002283e:	5e                   	pop    esi
c002283f:	5f                   	pop    edi
c0022840:	c3                   	ret    
c0022841:	90                   	nop
c0022842:	66 90                	xchg   ax,ax

c0022844 <APICTimer::APICTimer()>:
c0022844:	83 ec 0c             	sub    esp,0xc
c0022847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002284b:	83 ec 08             	sub    esp,0x8
c002284e:	68 bc 7b 02 c0       	push   0xc0027bbc
c0022853:	50                   	push   eax
c0022854:	e8 93 e6 fe ff       	call   c0010eec <Timer::Timer(char const*)>
c0022859:	83 c4 10             	add    esp,0x10
c002285c:	ba d0 7b 02 c0       	mov    edx,0xc0027bd0
c0022861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022865:	89 10                	mov    DWORD PTR [eax],edx
c0022867:	90                   	nop
c0022868:	83 c4 0c             	add    esp,0xc
c002286b:	c3                   	ret    

c002286c <PIT::write(int)>:
c002286c:	83 ec 10             	sub    esp,0x10
c002286f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022873:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022877:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002287d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022881:	a3 84 a9 02 c0       	mov    ds:0xc002a984,eax
c0022886:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002288b:	99                   	cdq    
c002288c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0022890:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022894:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002289b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00228a0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00228a4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00228a9:	ee                   	out    dx,al
c00228aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00228ae:	0f b6 c0             	movzx  eax,al
c00228b1:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00228b8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00228bc:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00228c0:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00228c5:	ee                   	out    dx,al
c00228c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00228ca:	c1 f8 08             	sar    eax,0x8
c00228cd:	0f b6 c0             	movzx  eax,al
c00228d0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00228d7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00228db:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00228df:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00228e4:	ee                   	out    dx,al
c00228e5:	90                   	nop
c00228e6:	83 c4 10             	add    esp,0x10
c00228e9:	c3                   	ret    
c00228ea:	66 90                	xchg   ax,ax

c00228ec <pitHandler(regs*, void*)>:
c00228ec:	83 ec 0c             	sub    esp,0xc
c00228ef:	8b 0d 84 a9 02 c0    	mov    ecx,DWORD PTR ds:0xc002a984
c00228f5:	b8 10 27 00 00       	mov    eax,0x2710
c00228fa:	99                   	cdq    
c00228fb:	f7 f9                	idiv   ecx
c00228fd:	83 ec 0c             	sub    esp,0xc
c0022900:	50                   	push   eax
c0022901:	e8 77 e6 fe ff       	call   c0010f7d <timerHandler(unsigned int)>
c0022906:	83 c4 10             	add    esp,0x10
c0022909:	90                   	nop
c002290a:	83 c4 0c             	add    esp,0xc
c002290d:	c3                   	ret    
c002290e:	66 90                	xchg   ax,ax

c0022910 <PIT::open(int, int, void*)>:
c0022910:	83 ec 0c             	sub    esp,0xc
c0022913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022917:	8b 00                	mov    eax,DWORD PTR [eax]
c0022919:	83 c0 24             	add    eax,0x24
c002291c:	8b 00                	mov    eax,DWORD PTR [eax]
c002291e:	83 ec 08             	sub    esp,0x8
c0022921:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022925:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022929:	ff d0                	call   eax
c002292b:	83 c4 10             	add    esp,0x10
c002292e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022932:	83 ec 0c             	sub    esp,0xc
c0022935:	6a 00                	push   0x0
c0022937:	6a 01                	push   0x1
c0022939:	68 ec 28 02 c0       	push   0xc00228ec
c002293e:	6a 00                	push   0x0
c0022940:	50                   	push   eax
c0022941:	e8 ec bb fe ff       	call   c000e532 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022946:	83 c4 20             	add    esp,0x20
c0022949:	89 c2                	mov    edx,eax
c002294b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002294f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022955:	b8 00 00 00 00       	mov    eax,0x0
c002295a:	83 c4 0c             	add    esp,0xc
c002295d:	c3                   	ret    
c002295e:	66 90                	xchg   ax,ax

c0022960 <PIT::close(int, int, void*)>:
c0022960:	83 ec 0c             	sub    esp,0xc
c0022963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022967:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0022971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022975:	6a 01                	push   0x1
c0022977:	68 ec 28 02 c0       	push   0xc00228ec
c002297c:	6a 00                	push   0x0
c002297e:	50                   	push   eax
c002297f:	e8 f8 bb fe ff       	call   c000e57c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0022984:	83 c4 10             	add    esp,0x10
c0022987:	b8 00 00 00 00       	mov    eax,0x0
c002298c:	83 c4 0c             	add    esp,0xc
c002298f:	c3                   	ret    

c0022990 <PIT::PIT()>:
c0022990:	83 ec 0c             	sub    esp,0xc
c0022993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022997:	83 ec 08             	sub    esp,0x8
c002299a:	68 f8 7b 02 c0       	push   0xc0027bf8
c002299f:	50                   	push   eax
c00229a0:	e8 47 e5 fe ff       	call   c0010eec <Timer::Timer(char const*)>
c00229a5:	83 c4 10             	add    esp,0x10
c00229a8:	ba 20 7c 02 c0       	mov    edx,0xc0027c20
c00229ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229b1:	89 10                	mov    DWORD PTR [eax],edx
c00229b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229b7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229bd:	0f b6 d0             	movzx  edx,al
c00229c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229c4:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00229cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229cf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229d5:	0f b6 d0             	movzx  edx,al
c00229d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229dc:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00229e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229e5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229eb:	8d 50 01             	lea    edx,[eax+0x1]
c00229ee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00229f2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00229f8:	0f b6 d0             	movzx  edx,al
c00229fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ff:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022a03:	83 e1 3f             	and    ecx,0x3f
c0022a06:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022a0a:	90                   	nop
c0022a0b:	83 c4 0c             	add    esp,0xc
c0022a0e:	c3                   	ret    
c0022a0f:	90                   	nop

c0022a10 <avxDetect>:
c0022a10:	b8 01 00 00 00       	mov    eax,0x1
c0022a15:	0f a2                	cpuid  
c0022a17:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c0022a1d:	74 15                	je     c0022a34 <avxDetect.noAVX>
c0022a1f:	b8 01 00 00 00       	mov    eax,0x1
c0022a24:	0f a2                	cpuid  
c0022a26:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c0022a2c:	74 06                	je     c0022a34 <avxDetect.noAVX>
c0022a2e:	b8 01 00 00 00       	mov    eax,0x1
c0022a33:	c3                   	ret    

c0022a34 <avxDetect.noAVX>:
c0022a34:	b8 00 00 00 00       	mov    eax,0x0
c0022a39:	c3                   	ret    

c0022a3a <avxSave>:
c0022a3a:	53                   	push   ebx
c0022a3b:	52                   	push   edx
c0022a3c:	31 c0                	xor    eax,eax
c0022a3e:	48                   	dec    eax
c0022a3f:	89 c2                	mov    edx,eax
c0022a41:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022a45:	0f ae 23             	xsave  [ebx]
c0022a48:	5a                   	pop    edx
c0022a49:	5b                   	pop    ebx
c0022a4a:	c3                   	ret    

c0022a4b <avxLoad>:
c0022a4b:	53                   	push   ebx
c0022a4c:	52                   	push   edx
c0022a4d:	31 c0                	xor    eax,eax
c0022a4f:	48                   	dec    eax
c0022a50:	89 c2                	mov    edx,eax
c0022a52:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022a56:	0f ae 2b             	xrstor [ebx]
c0022a59:	5a                   	pop    edx
c0022a5a:	5b                   	pop    ebx
c0022a5b:	c3                   	ret    

c0022a5c <avxInit>:
c0022a5c:	e8 67 00 00 00       	call   c0022ac8 <sseInit>
c0022a61:	50                   	push   eax
c0022a62:	51                   	push   ecx
c0022a63:	0f 20 e0             	mov    eax,cr4
c0022a66:	0d 00 00 04 00       	or     eax,0x40000
c0022a6b:	0f 22 e0             	mov    cr4,eax
c0022a6e:	31 c9                	xor    ecx,ecx
c0022a70:	0f 01 d0             	xgetbv 
c0022a73:	0d 07 00 00 00       	or     eax,0x7
c0022a78:	0f 01 d1             	xsetbv 
c0022a7b:	59                   	pop    ecx
c0022a7c:	58                   	pop    eax
c0022a7d:	c3                   	ret    

c0022a7e <avxClose>:
c0022a7e:	c3                   	ret    

c0022a7f <wouldSheSayYes>:
c0022a7f:	c3                   	ret    
c0022a80:	49                   	dec    ecx
c0022a81:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0022a85:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0022a89:	75 20                	jne    c0022aab <absolutelyNoChanceInHell+0xb>
c0022a8b:	4e                   	dec    esi
c0022a8c:	79 61                	jns    c0022aef <x87Detect+0x9>
c0022a8e:	68 2e 2e 2e 00       	push   0x2e2e2e
c0022a93:	66 90                	xchg   ax,ax
c0022a95:	66 90                	xchg   ax,ax
c0022a97:	66 90                	xchg   ax,ax
c0022a99:	66 90                	xchg   ax,ax
c0022a9b:	66 90                	xchg   ax,ax
c0022a9d:	66 90                	xchg   ax,ax
c0022a9f:	90                   	nop

c0022aa0 <absolutelyNoChanceInHell>:
c0022aa0:	b8 01 00 00 00       	mov    eax,0x1
c0022aa5:	0f a2                	cpuid  
c0022aa7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0022aad:	74 06                	je     c0022ab5 <sseDetect.noSSE>
c0022aaf:	b8 01 00 00 00       	mov    eax,0x1
c0022ab4:	c3                   	ret    

c0022ab5 <sseDetect.noSSE>:
c0022ab5:	31 c0                	xor    eax,eax
c0022ab7:	c3                   	ret    

c0022ab8 <sseSave>:
c0022ab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022abc:	0f ae 00             	fxsave [eax]
c0022abf:	c3                   	ret    

c0022ac0 <sseLoad>:
c0022ac0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ac4:	0f ae 08             	fxrstor [eax]
c0022ac7:	c3                   	ret    

c0022ac8 <sseInit>:
c0022ac8:	e8 42 00 00 00       	call   c0022b0f <x87Init>
c0022acd:	0f 20 e0             	mov    eax,cr4
c0022ad0:	66 0d 00 06          	or     ax,0x600
c0022ad4:	0f 22 e0             	mov    cr4,eax
c0022ad7:	c3                   	ret    

c0022ad8 <sseClose>:
c0022ad8:	c3                   	ret    
c0022ad9:	66 90                	xchg   ax,ax
c0022adb:	66 90                	xchg   ax,ax
c0022add:	66 90                	xchg   ax,ax
c0022adf:	90                   	nop

c0022ae0 <value_37F>:
c0022ae0:	7f 03                	jg     c0022ae5 <value_37A+0x1>

c0022ae2 <value_37E>:
c0022ae2:	7e 03                	jle    c0022ae7 <x87Detect+0x1>

c0022ae4 <value_37A>:
c0022ae4:	7a 03                	jp     c0022ae9 <x87Detect+0x3>

c0022ae6 <x87Detect>:
c0022ae6:	b8 01 00 00 00       	mov    eax,0x1
c0022aeb:	0f a2                	cpuid  
c0022aed:	f7 c2 01 00 00 00    	test   edx,0x1
c0022af3:	74 06                	je     c0022afb <x87Detect.nox87>
c0022af5:	b8 01 00 00 00       	mov    eax,0x1
c0022afa:	c3                   	ret    

c0022afb <x87Detect.nox87>:
c0022afb:	b8 00 00 00 00       	mov    eax,0x0
c0022b00:	c3                   	ret    

c0022b01 <x87Save>:
c0022b01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b05:	dd 30                	fnsave [eax]
c0022b07:	c3                   	ret    

c0022b08 <x87Load>:
c0022b08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b0c:	dd 20                	frstor [eax]
c0022b0e:	c3                   	ret    

c0022b0f <x87Init>:
c0022b0f:	0f 20 c0             	mov    eax,cr0
c0022b12:	66 25 fb ff          	and    ax,0xfffb
c0022b16:	66 0d 22 00          	or     ax,0x22
c0022b1a:	0f 22 c0             	mov    cr0,eax
c0022b1d:	db e3                	fninit 
c0022b1f:	0f 06                	clts   
c0022b21:	d9 2d e4 2a 02 c0    	fldcw  WORD PTR ds:0xc0022ae4
c0022b27:	c3                   	ret    

c0022b28 <x87Close>:
c0022b28:	c3                   	ret    
c0022b29:	66 90                	xchg   ax,ax
c0022b2b:	90                   	nop

c0022b2c <__do_global_ctors_aux>:
c0022b2c:	a1 c8 3c 02 c0       	mov    eax,ds:0xc0023cc8
c0022b31:	83 f8 ff             	cmp    eax,0xffffffff
c0022b34:	74 1a                	je     c0022b50 <__do_global_ctors_aux+0x24>
c0022b36:	55                   	push   ebp
c0022b37:	89 e5                	mov    ebp,esp
c0022b39:	53                   	push   ebx
c0022b3a:	52                   	push   edx
c0022b3b:	bb c8 3c 02 c0       	mov    ebx,0xc0023cc8
c0022b40:	ff d0                	call   eax
c0022b42:	83 eb 04             	sub    ebx,0x4
c0022b45:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022b47:	83 f8 ff             	cmp    eax,0xffffffff
c0022b4a:	75 f4                	jne    c0022b40 <__do_global_ctors_aux+0x14>
c0022b4c:	58                   	pop    eax
c0022b4d:	5b                   	pop    ebx
c0022b4e:	5d                   	pop    ebp
c0022b4f:	c3                   	ret    
c0022b50:	c3                   	ret    
c0022b51:	66 90                	xchg   ax,ax
c0022b53:	90                   	nop

c0022b54 <__divdi3>:
c0022b54:	55                   	push   ebp
c0022b55:	57                   	push   edi
c0022b56:	56                   	push   esi
c0022b57:	53                   	push   ebx
c0022b58:	83 ec 1c             	sub    esp,0x1c
c0022b5b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0022b5f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022b63:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022b66:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0022b6a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022b6e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022b72:	85 db                	test   ebx,ebx
c0022b74:	0f 88 8e 00 00 00    	js     c0022c08 <__divdi3+0xb4>
c0022b7a:	89 dd                	mov    ebp,ebx
c0022b7c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022b84:	89 d3                	mov    ebx,edx
c0022b86:	85 d2                	test   edx,edx
c0022b88:	79 0d                	jns    c0022b97 <__divdi3+0x43>
c0022b8a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0022b8e:	f7 d8                	neg    eax
c0022b90:	83 d2 00             	adc    edx,0x0
c0022b93:	f7 da                	neg    edx
c0022b95:	89 d3                	mov    ebx,edx
c0022b97:	89 c7                	mov    edi,eax
c0022b99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022b9c:	85 db                	test   ebx,ebx
c0022b9e:	75 48                	jne    c0022be8 <__divdi3+0x94>
c0022ba0:	39 ef                	cmp    edi,ebp
c0022ba2:	76 24                	jbe    c0022bc8 <__divdi3+0x74>
c0022ba4:	89 ea                	mov    edx,ebp
c0022ba6:	f7 f7                	div    edi
c0022ba8:	89 c1                	mov    ecx,eax
c0022baa:	31 f6                	xor    esi,esi
c0022bac:	89 c8                	mov    eax,ecx
c0022bae:	89 f2                	mov    edx,esi
c0022bb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022bb4:	85 c9                	test   ecx,ecx
c0022bb6:	74 07                	je     c0022bbf <__divdi3+0x6b>
c0022bb8:	f7 d8                	neg    eax
c0022bba:	83 d2 00             	adc    edx,0x0
c0022bbd:	f7 da                	neg    edx
c0022bbf:	83 c4 1c             	add    esp,0x1c
c0022bc2:	5b                   	pop    ebx
c0022bc3:	5e                   	pop    esi
c0022bc4:	5f                   	pop    edi
c0022bc5:	5d                   	pop    ebp
c0022bc6:	c3                   	ret    
c0022bc7:	90                   	nop
c0022bc8:	85 ff                	test   edi,edi
c0022bca:	75 0b                	jne    c0022bd7 <__divdi3+0x83>
c0022bcc:	b8 01 00 00 00       	mov    eax,0x1
c0022bd1:	31 d2                	xor    edx,edx
c0022bd3:	f7 f3                	div    ebx
c0022bd5:	89 c7                	mov    edi,eax
c0022bd7:	31 d2                	xor    edx,edx
c0022bd9:	89 e8                	mov    eax,ebp
c0022bdb:	f7 f7                	div    edi
c0022bdd:	89 c6                	mov    esi,eax
c0022bdf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022be2:	f7 f7                	div    edi
c0022be4:	89 c1                	mov    ecx,eax
c0022be6:	eb c4                	jmp    c0022bac <__divdi3+0x58>
c0022be8:	39 eb                	cmp    ebx,ebp
c0022bea:	77 3c                	ja     c0022c28 <__divdi3+0xd4>
c0022bec:	0f bd f3             	bsr    esi,ebx
c0022bef:	83 f6 1f             	xor    esi,0x1f
c0022bf2:	75 40                	jne    c0022c34 <__divdi3+0xe0>
c0022bf4:	39 eb                	cmp    ebx,ebp
c0022bf6:	72 09                	jb     c0022c01 <__divdi3+0xad>
c0022bf8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0022bfb:	0f 87 97 00 00 00    	ja     c0022c98 <__divdi3+0x144>
c0022c01:	b9 01 00 00 00       	mov    ecx,0x1
c0022c06:	eb a4                	jmp    c0022bac <__divdi3+0x58>
c0022c08:	f7 d9                	neg    ecx
c0022c0a:	83 d3 00             	adc    ebx,0x0
c0022c0d:	f7 db                	neg    ebx
c0022c0f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022c12:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0022c16:	89 dd                	mov    ebp,ebx
c0022c18:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0022c20:	e9 5f ff ff ff       	jmp    c0022b84 <__divdi3+0x30>
c0022c25:	8d 76 00             	lea    esi,[esi+0x0]
c0022c28:	31 f6                	xor    esi,esi
c0022c2a:	31 c9                	xor    ecx,ecx
c0022c2c:	e9 7b ff ff ff       	jmp    c0022bac <__divdi3+0x58>
c0022c31:	8d 76 00             	lea    esi,[esi+0x0]
c0022c34:	b8 20 00 00 00       	mov    eax,0x20
c0022c39:	29 f0                	sub    eax,esi
c0022c3b:	89 f1                	mov    ecx,esi
c0022c3d:	d3 e3                	shl    ebx,cl
c0022c3f:	89 fa                	mov    edx,edi
c0022c41:	88 c1                	mov    cl,al
c0022c43:	d3 ea                	shr    edx,cl
c0022c45:	09 da                	or     edx,ebx
c0022c47:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c4b:	89 f1                	mov    ecx,esi
c0022c4d:	d3 e7                	shl    edi,cl
c0022c4f:	89 eb                	mov    ebx,ebp
c0022c51:	88 c1                	mov    cl,al
c0022c53:	d3 eb                	shr    ebx,cl
c0022c55:	89 f1                	mov    ecx,esi
c0022c57:	d3 e5                	shl    ebp,cl
c0022c59:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0022c5c:	88 c1                	mov    cl,al
c0022c5e:	d3 ea                	shr    edx,cl
c0022c60:	09 d5                	or     ebp,edx
c0022c62:	89 e8                	mov    eax,ebp
c0022c64:	89 da                	mov    edx,ebx
c0022c66:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0022c6a:	89 d3                	mov    ebx,edx
c0022c6c:	89 c5                	mov    ebp,eax
c0022c6e:	f7 e7                	mul    edi
c0022c70:	39 d3                	cmp    ebx,edx
c0022c72:	72 18                	jb     c0022c8c <__divdi3+0x138>
c0022c74:	74 0a                	je     c0022c80 <__divdi3+0x12c>
c0022c76:	89 e9                	mov    ecx,ebp
c0022c78:	31 f6                	xor    esi,esi
c0022c7a:	e9 2d ff ff ff       	jmp    c0022bac <__divdi3+0x58>
c0022c7f:	90                   	nop
c0022c80:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022c83:	89 f1                	mov    ecx,esi
c0022c85:	d3 e7                	shl    edi,cl
c0022c87:	39 c7                	cmp    edi,eax
c0022c89:	73 eb                	jae    c0022c76 <__divdi3+0x122>
c0022c8b:	90                   	nop
c0022c8c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0022c8f:	31 f6                	xor    esi,esi
c0022c91:	e9 16 ff ff ff       	jmp    c0022bac <__divdi3+0x58>
c0022c96:	66 90                	xchg   ax,ax
c0022c98:	31 c9                	xor    ecx,ecx
c0022c9a:	e9 0d ff ff ff       	jmp    c0022bac <__divdi3+0x58>
c0022c9f:	90                   	nop

c0022ca0 <__moddi3>:
c0022ca0:	55                   	push   ebp
c0022ca1:	57                   	push   edi
c0022ca2:	56                   	push   esi
c0022ca3:	53                   	push   ebx
c0022ca4:	83 ec 2c             	sub    esp,0x2c
c0022ca7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022cab:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0022caf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022cb3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0022cb7:	85 db                	test   ebx,ebx
c0022cb9:	0f 88 85 00 00 00    	js     c0022d44 <__moddi3+0xa4>
c0022cbf:	89 de                	mov    esi,ebx
c0022cc1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022cc9:	89 d7                	mov    edi,edx
c0022ccb:	85 d2                	test   edx,edx
c0022ccd:	79 09                	jns    c0022cd8 <__moddi3+0x38>
c0022ccf:	f7 d8                	neg    eax
c0022cd1:	83 d2 00             	adc    edx,0x0
c0022cd4:	f7 da                	neg    edx
c0022cd6:	89 d7                	mov    edi,edx
c0022cd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022cdc:	89 cd                	mov    ebp,ecx
c0022cde:	85 ff                	test   edi,edi
c0022ce0:	75 52                	jne    c0022d34 <__moddi3+0x94>
c0022ce2:	89 c3                	mov    ebx,eax
c0022ce4:	39 f0                	cmp    eax,esi
c0022ce6:	76 24                	jbe    c0022d0c <__moddi3+0x6c>
c0022ce8:	89 c8                	mov    eax,ecx
c0022cea:	89 f2                	mov    edx,esi
c0022cec:	f7 f3                	div    ebx
c0022cee:	89 d6                	mov    esi,edx
c0022cf0:	89 f0                	mov    eax,esi
c0022cf2:	31 d2                	xor    edx,edx
c0022cf4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022cf8:	85 c9                	test   ecx,ecx
c0022cfa:	74 07                	je     c0022d03 <__moddi3+0x63>
c0022cfc:	f7 d8                	neg    eax
c0022cfe:	83 d2 00             	adc    edx,0x0
c0022d01:	f7 da                	neg    edx
c0022d03:	83 c4 2c             	add    esp,0x2c
c0022d06:	5b                   	pop    ebx
c0022d07:	5e                   	pop    esi
c0022d08:	5f                   	pop    edi
c0022d09:	5d                   	pop    ebp
c0022d0a:	c3                   	ret    
c0022d0b:	90                   	nop
c0022d0c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022d10:	85 db                	test   ebx,ebx
c0022d12:	75 0d                	jne    c0022d21 <__moddi3+0x81>
c0022d14:	b8 01 00 00 00       	mov    eax,0x1
c0022d19:	31 d2                	xor    edx,edx
c0022d1b:	f7 f7                	div    edi
c0022d1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022d21:	89 f0                	mov    eax,esi
c0022d23:	31 d2                	xor    edx,edx
c0022d25:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022d29:	f7 f7                	div    edi
c0022d2b:	89 e8                	mov    eax,ebp
c0022d2d:	f7 f7                	div    edi
c0022d2f:	89 d6                	mov    esi,edx
c0022d31:	eb bd                	jmp    c0022cf0 <__moddi3+0x50>
c0022d33:	90                   	nop
c0022d34:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022d38:	39 f7                	cmp    edi,esi
c0022d3a:	76 20                	jbe    c0022d5c <__moddi3+0xbc>
c0022d3c:	89 c8                	mov    eax,ecx
c0022d3e:	89 f2                	mov    edx,esi
c0022d40:	eb b2                	jmp    c0022cf4 <__moddi3+0x54>
c0022d42:	66 90                	xchg   ax,ax
c0022d44:	f7 d9                	neg    ecx
c0022d46:	83 d3 00             	adc    ebx,0x0
c0022d49:	f7 db                	neg    ebx
c0022d4b:	89 de                	mov    esi,ebx
c0022d4d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0022d55:	e9 6f ff ff ff       	jmp    c0022cc9 <__moddi3+0x29>
c0022d5a:	66 90                	xchg   ax,ax
c0022d5c:	0f bd c7             	bsr    eax,edi
c0022d5f:	83 f0 1f             	xor    eax,0x1f
c0022d62:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022d66:	75 24                	jne    c0022d8c <__moddi3+0xec>
c0022d68:	39 f7                	cmp    edi,esi
c0022d6a:	72 06                	jb     c0022d72 <__moddi3+0xd2>
c0022d6c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0022d70:	77 0c                	ja     c0022d7e <__moddi3+0xde>
c0022d72:	89 e9                	mov    ecx,ebp
c0022d74:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0022d78:	19 fe                	sbb    esi,edi
c0022d7a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022d7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022d82:	89 f2                	mov    edx,esi
c0022d84:	e9 6b ff ff ff       	jmp    c0022cf4 <__moddi3+0x54>
c0022d89:	8d 76 00             	lea    esi,[esi+0x0]
c0022d8c:	b8 20 00 00 00       	mov    eax,0x20
c0022d91:	89 c2                	mov    edx,eax
c0022d93:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022d97:	29 da                	sub    edx,ebx
c0022d99:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022d9d:	88 d9                	mov    cl,bl
c0022d9f:	d3 e7                	shl    edi,cl
c0022da1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022da5:	88 d1                	mov    cl,dl
c0022da7:	d3 e8                	shr    eax,cl
c0022da9:	09 c7                	or     edi,eax
c0022dab:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0022daf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022db3:	89 d8                	mov    eax,ebx
c0022db5:	88 d9                	mov    cl,bl
c0022db7:	d3 e7                	shl    edi,cl
c0022db9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022dbd:	89 f3                	mov    ebx,esi
c0022dbf:	88 d1                	mov    cl,dl
c0022dc1:	d3 eb                	shr    ebx,cl
c0022dc3:	89 c7                	mov    edi,eax
c0022dc5:	88 c1                	mov    cl,al
c0022dc7:	d3 e6                	shl    esi,cl
c0022dc9:	89 e8                	mov    eax,ebp
c0022dcb:	88 d1                	mov    cl,dl
c0022dcd:	d3 e8                	shr    eax,cl
c0022dcf:	09 f0                	or     eax,esi
c0022dd1:	89 f9                	mov    ecx,edi
c0022dd3:	d3 e5                	shl    ebp,cl
c0022dd5:	89 da                	mov    edx,ebx
c0022dd7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0022ddb:	89 d3                	mov    ebx,edx
c0022ddd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022de1:	89 c6                	mov    esi,eax
c0022de3:	89 d1                	mov    ecx,edx
c0022de5:	39 d3                	cmp    ebx,edx
c0022de7:	72 27                	jb     c0022e10 <__moddi3+0x170>
c0022de9:	74 21                	je     c0022e0c <__moddi3+0x16c>
c0022deb:	29 f5                	sub    ebp,esi
c0022ded:	19 cb                	sbb    ebx,ecx
c0022def:	89 de                	mov    esi,ebx
c0022df1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0022df5:	d3 e6                	shl    esi,cl
c0022df7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022dfb:	89 f9                	mov    ecx,edi
c0022dfd:	d3 ed                	shr    ebp,cl
c0022dff:	09 ee                	or     esi,ebp
c0022e01:	89 f0                	mov    eax,esi
c0022e03:	d3 eb                	shr    ebx,cl
c0022e05:	89 da                	mov    edx,ebx
c0022e07:	e9 e8 fe ff ff       	jmp    c0022cf4 <__moddi3+0x54>
c0022e0c:	39 c5                	cmp    ebp,eax
c0022e0e:	73 db                	jae    c0022deb <__moddi3+0x14b>
c0022e10:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022e14:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0022e18:	89 d1                	mov    ecx,edx
c0022e1a:	89 c6                	mov    esi,eax
c0022e1c:	eb cd                	jmp    c0022deb <__moddi3+0x14b>
c0022e1e:	66 90                	xchg   ax,ax

c0022e20 <__udivdi3>:
c0022e20:	55                   	push   ebp
c0022e21:	57                   	push   edi
c0022e22:	56                   	push   esi
c0022e23:	53                   	push   ebx
c0022e24:	83 ec 1c             	sub    esp,0x1c
c0022e27:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0022e2b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022e2f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022e33:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022e37:	85 d2                	test   edx,edx
c0022e39:	75 41                	jne    c0022e7c <__udivdi3+0x5c>
c0022e3b:	39 f7                	cmp    edi,esi
c0022e3d:	76 15                	jbe    c0022e54 <__udivdi3+0x34>
c0022e3f:	89 e8                	mov    eax,ebp
c0022e41:	89 f2                	mov    edx,esi
c0022e43:	f7 f7                	div    edi
c0022e45:	31 db                	xor    ebx,ebx
c0022e47:	89 da                	mov    edx,ebx
c0022e49:	83 c4 1c             	add    esp,0x1c
c0022e4c:	5b                   	pop    ebx
c0022e4d:	5e                   	pop    esi
c0022e4e:	5f                   	pop    edi
c0022e4f:	5d                   	pop    ebp
c0022e50:	c3                   	ret    
c0022e51:	8d 76 00             	lea    esi,[esi+0x0]
c0022e54:	89 f9                	mov    ecx,edi
c0022e56:	85 ff                	test   edi,edi
c0022e58:	75 0b                	jne    c0022e65 <__udivdi3+0x45>
c0022e5a:	b8 01 00 00 00       	mov    eax,0x1
c0022e5f:	31 d2                	xor    edx,edx
c0022e61:	f7 f7                	div    edi
c0022e63:	89 c1                	mov    ecx,eax
c0022e65:	31 d2                	xor    edx,edx
c0022e67:	89 f0                	mov    eax,esi
c0022e69:	f7 f1                	div    ecx
c0022e6b:	89 c3                	mov    ebx,eax
c0022e6d:	89 e8                	mov    eax,ebp
c0022e6f:	f7 f1                	div    ecx
c0022e71:	89 da                	mov    edx,ebx
c0022e73:	83 c4 1c             	add    esp,0x1c
c0022e76:	5b                   	pop    ebx
c0022e77:	5e                   	pop    esi
c0022e78:	5f                   	pop    edi
c0022e79:	5d                   	pop    ebp
c0022e7a:	c3                   	ret    
c0022e7b:	90                   	nop
c0022e7c:	39 f2                	cmp    edx,esi
c0022e7e:	77 1c                	ja     c0022e9c <__udivdi3+0x7c>
c0022e80:	0f bd da             	bsr    ebx,edx
c0022e83:	83 f3 1f             	xor    ebx,0x1f
c0022e86:	75 24                	jne    c0022eac <__udivdi3+0x8c>
c0022e88:	39 f2                	cmp    edx,esi
c0022e8a:	72 08                	jb     c0022e94 <__udivdi3+0x74>
c0022e8c:	39 ef                	cmp    edi,ebp
c0022e8e:	0f 87 84 00 00 00    	ja     c0022f18 <__udivdi3+0xf8>
c0022e94:	b8 01 00 00 00       	mov    eax,0x1
c0022e99:	eb ac                	jmp    c0022e47 <__udivdi3+0x27>
c0022e9b:	90                   	nop
c0022e9c:	31 db                	xor    ebx,ebx
c0022e9e:	31 c0                	xor    eax,eax
c0022ea0:	89 da                	mov    edx,ebx
c0022ea2:	83 c4 1c             	add    esp,0x1c
c0022ea5:	5b                   	pop    ebx
c0022ea6:	5e                   	pop    esi
c0022ea7:	5f                   	pop    edi
c0022ea8:	5d                   	pop    ebp
c0022ea9:	c3                   	ret    
c0022eaa:	66 90                	xchg   ax,ax
c0022eac:	b8 20 00 00 00       	mov    eax,0x20
c0022eb1:	29 d8                	sub    eax,ebx
c0022eb3:	88 d9                	mov    cl,bl
c0022eb5:	d3 e2                	shl    edx,cl
c0022eb7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0022ebb:	89 fa                	mov    edx,edi
c0022ebd:	88 c1                	mov    cl,al
c0022ebf:	d3 ea                	shr    edx,cl
c0022ec1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022ec5:	09 d1                	or     ecx,edx
c0022ec7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022ecb:	88 d9                	mov    cl,bl
c0022ecd:	d3 e7                	shl    edi,cl
c0022ecf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022ed3:	89 f7                	mov    edi,esi
c0022ed5:	88 c1                	mov    cl,al
c0022ed7:	d3 ef                	shr    edi,cl
c0022ed9:	88 d9                	mov    cl,bl
c0022edb:	d3 e6                	shl    esi,cl
c0022edd:	89 ea                	mov    edx,ebp
c0022edf:	88 c1                	mov    cl,al
c0022ee1:	d3 ea                	shr    edx,cl
c0022ee3:	09 d6                	or     esi,edx
c0022ee5:	89 f0                	mov    eax,esi
c0022ee7:	89 fa                	mov    edx,edi
c0022ee9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0022eed:	89 d7                	mov    edi,edx
c0022eef:	89 c6                	mov    esi,eax
c0022ef1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022ef5:	39 d7                	cmp    edi,edx
c0022ef7:	72 13                	jb     c0022f0c <__udivdi3+0xec>
c0022ef9:	74 09                	je     c0022f04 <__udivdi3+0xe4>
c0022efb:	89 f0                	mov    eax,esi
c0022efd:	31 db                	xor    ebx,ebx
c0022eff:	e9 43 ff ff ff       	jmp    c0022e47 <__udivdi3+0x27>
c0022f04:	88 d9                	mov    cl,bl
c0022f06:	d3 e5                	shl    ebp,cl
c0022f08:	39 c5                	cmp    ebp,eax
c0022f0a:	73 ef                	jae    c0022efb <__udivdi3+0xdb>
c0022f0c:	8d 46 ff             	lea    eax,[esi-0x1]
c0022f0f:	31 db                	xor    ebx,ebx
c0022f11:	e9 31 ff ff ff       	jmp    c0022e47 <__udivdi3+0x27>
c0022f16:	66 90                	xchg   ax,ax
c0022f18:	31 c0                	xor    eax,eax
c0022f1a:	e9 28 ff ff ff       	jmp    c0022e47 <__udivdi3+0x27>
c0022f1f:	90                   	nop

c0022f20 <__umoddi3>:
c0022f20:	55                   	push   ebp
c0022f21:	57                   	push   edi
c0022f22:	56                   	push   esi
c0022f23:	53                   	push   ebx
c0022f24:	83 ec 1c             	sub    esp,0x1c
c0022f27:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022f2b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022f2f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022f33:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022f37:	89 da                	mov    edx,ebx
c0022f39:	85 c0                	test   eax,eax
c0022f3b:	75 37                	jne    c0022f74 <__umoddi3+0x54>
c0022f3d:	39 df                	cmp    edi,ebx
c0022f3f:	76 13                	jbe    c0022f54 <__umoddi3+0x34>
c0022f41:	89 f0                	mov    eax,esi
c0022f43:	f7 f7                	div    edi
c0022f45:	89 d0                	mov    eax,edx
c0022f47:	31 d2                	xor    edx,edx
c0022f49:	83 c4 1c             	add    esp,0x1c
c0022f4c:	5b                   	pop    ebx
c0022f4d:	5e                   	pop    esi
c0022f4e:	5f                   	pop    edi
c0022f4f:	5d                   	pop    ebp
c0022f50:	c3                   	ret    
c0022f51:	8d 76 00             	lea    esi,[esi+0x0]
c0022f54:	89 fd                	mov    ebp,edi
c0022f56:	85 ff                	test   edi,edi
c0022f58:	75 0b                	jne    c0022f65 <__umoddi3+0x45>
c0022f5a:	b8 01 00 00 00       	mov    eax,0x1
c0022f5f:	31 d2                	xor    edx,edx
c0022f61:	f7 f7                	div    edi
c0022f63:	89 c5                	mov    ebp,eax
c0022f65:	89 d8                	mov    eax,ebx
c0022f67:	31 d2                	xor    edx,edx
c0022f69:	f7 f5                	div    ebp
c0022f6b:	89 f0                	mov    eax,esi
c0022f6d:	f7 f5                	div    ebp
c0022f6f:	89 d0                	mov    eax,edx
c0022f71:	eb d4                	jmp    c0022f47 <__umoddi3+0x27>
c0022f73:	90                   	nop
c0022f74:	89 f1                	mov    ecx,esi
c0022f76:	39 d8                	cmp    eax,ebx
c0022f78:	76 0a                	jbe    c0022f84 <__umoddi3+0x64>
c0022f7a:	89 f0                	mov    eax,esi
c0022f7c:	83 c4 1c             	add    esp,0x1c
c0022f7f:	5b                   	pop    ebx
c0022f80:	5e                   	pop    esi
c0022f81:	5f                   	pop    edi
c0022f82:	5d                   	pop    ebp
c0022f83:	c3                   	ret    
c0022f84:	0f bd e8             	bsr    ebp,eax
c0022f87:	83 f5 1f             	xor    ebp,0x1f
c0022f8a:	75 1c                	jne    c0022fa8 <__umoddi3+0x88>
c0022f8c:	39 d8                	cmp    eax,ebx
c0022f8e:	72 04                	jb     c0022f94 <__umoddi3+0x74>
c0022f90:	39 f7                	cmp    edi,esi
c0022f92:	77 08                	ja     c0022f9c <__umoddi3+0x7c>
c0022f94:	89 da                	mov    edx,ebx
c0022f96:	29 fe                	sub    esi,edi
c0022f98:	19 c2                	sbb    edx,eax
c0022f9a:	89 f1                	mov    ecx,esi
c0022f9c:	89 c8                	mov    eax,ecx
c0022f9e:	83 c4 1c             	add    esp,0x1c
c0022fa1:	5b                   	pop    ebx
c0022fa2:	5e                   	pop    esi
c0022fa3:	5f                   	pop    edi
c0022fa4:	5d                   	pop    ebp
c0022fa5:	c3                   	ret    
c0022fa6:	66 90                	xchg   ax,ax
c0022fa8:	ba 20 00 00 00       	mov    edx,0x20
c0022fad:	29 ea                	sub    edx,ebp
c0022faf:	89 e9                	mov    ecx,ebp
c0022fb1:	d3 e0                	shl    eax,cl
c0022fb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022fb7:	89 f8                	mov    eax,edi
c0022fb9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022fbd:	88 d1                	mov    cl,dl
c0022fbf:	d3 e8                	shr    eax,cl
c0022fc1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022fc5:	09 c1                	or     ecx,eax
c0022fc7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022fcb:	89 e9                	mov    ecx,ebp
c0022fcd:	d3 e7                	shl    edi,cl
c0022fcf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022fd3:	89 d8                	mov    eax,ebx
c0022fd5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022fd9:	88 d1                	mov    cl,dl
c0022fdb:	d3 e8                	shr    eax,cl
c0022fdd:	89 c7                	mov    edi,eax
c0022fdf:	89 e9                	mov    ecx,ebp
c0022fe1:	d3 e3                	shl    ebx,cl
c0022fe3:	89 f0                	mov    eax,esi
c0022fe5:	88 d1                	mov    cl,dl
c0022fe7:	d3 e8                	shr    eax,cl
c0022fe9:	09 d8                	or     eax,ebx
c0022feb:	89 e9                	mov    ecx,ebp
c0022fed:	d3 e6                	shl    esi,cl
c0022fef:	89 f3                	mov    ebx,esi
c0022ff1:	89 fa                	mov    edx,edi
c0022ff3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0022ff7:	89 d1                	mov    ecx,edx
c0022ff9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022ffd:	89 c6                	mov    esi,eax
c0022fff:	89 d7                	mov    edi,edx
c0023001:	39 d1                	cmp    ecx,edx
c0023003:	72 27                	jb     c002302c <__umoddi3+0x10c>
c0023005:	74 21                	je     c0023028 <__umoddi3+0x108>
c0023007:	89 ca                	mov    edx,ecx
c0023009:	29 f3                	sub    ebx,esi
c002300b:	19 fa                	sbb    edx,edi
c002300d:	89 d0                	mov    eax,edx
c002300f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0023013:	d3 e0                	shl    eax,cl
c0023015:	89 e9                	mov    ecx,ebp
c0023017:	d3 eb                	shr    ebx,cl
c0023019:	09 d8                	or     eax,ebx
c002301b:	d3 ea                	shr    edx,cl
c002301d:	83 c4 1c             	add    esp,0x1c
c0023020:	5b                   	pop    ebx
c0023021:	5e                   	pop    esi
c0023022:	5f                   	pop    edi
c0023023:	5d                   	pop    ebp
c0023024:	c3                   	ret    
c0023025:	8d 76 00             	lea    esi,[esi+0x0]
c0023028:	39 c3                	cmp    ebx,eax
c002302a:	73 db                	jae    c0023007 <__umoddi3+0xe7>
c002302c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0023030:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0023034:	89 d7                	mov    edi,edx
c0023036:	89 c6                	mov    esi,eax
c0023038:	eb cd                	jmp    c0023007 <__umoddi3+0xe7>

Disassembly of section .init:

c002303a <_init>:
c002303a:	55                   	push   ebp
c002303b:	89 e5                	mov    ebp,esp
c002303d:	e8 d6 d0 fd ff       	call   c0000118 <frame_dummy>
c0023042:	e8 e5 fa ff ff       	call   c0022b2c <__do_global_ctors_aux>
c0023047:	5d                   	pop    ebp
c0023048:	c3                   	ret    

Disassembly of section .fini:

c0023049 <_fini>:
c0023049:	55                   	push   ebp
c002304a:	89 e5                	mov    ebp,esp
c002304c:	e8 57 d0 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0023051:	5d                   	pop    ebp
c0023052:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0023054 <Computer::~Computer()>:
c0023054:	83 ec 0c             	sub    esp,0xc
c0023057:	ba c0 47 02 c0       	mov    edx,0xc00247c0
c002305c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023060:	89 10                	mov    DWORD PTR [eax],edx
c0023062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023066:	83 ec 0c             	sub    esp,0xc
c0023069:	50                   	push   eax
c002306a:	e8 19 b4 fe ff       	call   c000e488 <Device::~Device()>
c002306f:	83 c4 10             	add    esp,0x10
c0023072:	90                   	nop
c0023073:	83 c4 0c             	add    esp,0xc
c0023076:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0023078 <Computer::~Computer()>:
c0023078:	83 ec 0c             	sub    esp,0xc
c002307b:	83 ec 0c             	sub    esp,0xc
c002307e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023082:	e8 cd ff ff ff       	call   c0023054 <Computer::~Computer()>
c0023087:	83 c4 10             	add    esp,0x10
c002308a:	83 ec 08             	sub    esp,0x8
c002308d:	68 ec 01 00 00       	push   0x1ec
c0023092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023096:	e8 cb 9e fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c002309b:	83 c4 10             	add    esp,0x10
c002309e:	83 c4 0c             	add    esp,0xc
c00230a1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00230a2 <idleCommon()>:
c00230a2:	83 ec 0c             	sub    esp,0xc
c00230a5:	fa                   	cli    
c00230a6:	ff 05 08 9f 02 c0    	inc    DWORD PTR ds:0xc0029f08
c00230ac:	e8 83 5c ff ff       	call   c0018d34 <schedule()>
c00230b1:	a1 08 9f 02 c0       	mov    eax,ds:0xc0029f08
c00230b6:	48                   	dec    eax
c00230b7:	a3 08 9f 02 c0       	mov    ds:0xc0029f08,eax
c00230bc:	75 01                	jne    c00230bf <idleCommon()+0x1d>
c00230be:	fb                   	sti    
c00230bf:	83 c4 0c             	add    esp,0xc
c00230c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00230c4 <LinkedList<UnixFile>::~LinkedList()>:
c00230c4:	90                   	nop
c00230c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00230c6 <LinkedList<UnixFile>::LinkedList()>:
c00230c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00230d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00230db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00230e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00230f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00230fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023106:	90                   	nop
c0023107:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0023108 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0023108:	83 ec 0c             	sub    esp,0xc
c002310b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0023110:	75 10                	jne    c0023122 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0023112:	83 ec 0c             	sub    esp,0xc
c0023115:	68 90 4b 02 c0       	push   0xc0024b90
c002311a:	e8 0a 20 ff ff       	call   c0015129 <Krnl::panic(char const*)>
c002311f:	83 c4 10             	add    esp,0x10
c0023122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023126:	8b 00                	mov    eax,DWORD PTR [eax]
c0023128:	85 c0                	test   eax,eax
c002312a:	74 34                	je     c0023160 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002312c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023130:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023133:	85 c0                	test   eax,eax
c0023135:	74 29                	je     c0023160 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0023137:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002313b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002313e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023142:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023149:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002314d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0023150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023154:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023157:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002315e:	eb 65                	jmp    c00231c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0023160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023164:	8b 00                	mov    eax,DWORD PTR [eax]
c0023166:	85 c0                	test   eax,eax
c0023168:	75 4b                	jne    c00231b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002316a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002316e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023171:	85 c0                	test   eax,eax
c0023173:	75 40                	jne    c00231b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0023175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023179:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002317d:	89 10                	mov    DWORD PTR [eax],edx
c002317f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023183:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023187:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002318a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002318e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023191:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002319c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002319f:	85 c0                	test   eax,eax
c00231a1:	74 22                	je     c00231c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00231a3:	83 ec 0c             	sub    esp,0xc
c00231a6:	68 b2 4b 02 c0       	push   0xc0024bb2
c00231ab:	e8 79 1f ff ff       	call   c0015129 <Krnl::panic(char const*)>
c00231b0:	83 c4 10             	add    esp,0x10
c00231b3:	eb 10                	jmp    c00231c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00231b5:	83 ec 0c             	sub    esp,0xc
c00231b8:	68 bc 4b 02 c0       	push   0xc0024bbc
c00231bd:	e8 67 1f ff ff       	call   c0015129 <Krnl::panic(char const*)>
c00231c2:	83 c4 10             	add    esp,0x10
c00231c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231c9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00231cc:	8d 50 01             	lea    edx,[eax+0x1]
c00231cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231d3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00231d6:	90                   	nop
c00231d7:	83 c4 0c             	add    esp,0xc
c00231da:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00231dc <LinkedList<UnixFile>::getFirstElement()>:
c00231dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00231e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00231e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00231e4 <LinkedList<UnixFile>::removeFirst()>:
c00231e4:	83 ec 0c             	sub    esp,0xc
c00231e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00231ed:	85 c0                	test   eax,eax
c00231ef:	75 12                	jne    c0023203 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00231f1:	83 ec 0c             	sub    esp,0xc
c00231f4:	68 c8 4b 02 c0       	push   0xc0024bc8
c00231f9:	e8 2b 1f ff ff       	call   c0015129 <Krnl::panic(char const*)>
c00231fe:	83 c4 10             	add    esp,0x10
c0023201:	eb 7e                	jmp    c0023281 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0023203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023207:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002320a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002320d:	85 c0                	test   eax,eax
c002320f:	74 10                	je     c0023221 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0023211:	83 ec 0c             	sub    esp,0xc
c0023214:	68 13 4c 02 c0       	push   0xc0024c13
c0023219:	e8 0b 1f ff ff       	call   c0015129 <Krnl::panic(char const*)>
c002321e:	83 c4 10             	add    esp,0x10
c0023221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023225:	8b 00                	mov    eax,DWORD PTR [eax]
c0023227:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002322a:	85 c0                	test   eax,eax
c002322c:	75 33                	jne    c0023261 <LinkedList<UnixFile>::removeFirst()+0x7d>
c002322e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023232:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002323c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023247:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002324a:	83 f8 01             	cmp    eax,0x1
c002324d:	74 21                	je     c0023270 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002324f:	83 ec 0c             	sub    esp,0xc
c0023252:	68 ec 4b 02 c0       	push   0xc0024bec
c0023257:	e8 cd 1e ff ff       	call   c0015129 <Krnl::panic(char const*)>
c002325c:	83 c4 10             	add    esp,0x10
c002325f:	eb 0f                	jmp    c0023270 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0023261:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023265:	8b 00                	mov    eax,DWORD PTR [eax]
c0023267:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002326a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002326e:	89 10                	mov    DWORD PTR [eax],edx
c0023270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023274:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023277:	8d 50 ff             	lea    edx,[eax-0x1]
c002327a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002327e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023281:	83 c4 0c             	add    esp,0xc
c0023284:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0023286 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0023286:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002328a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002328d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002328e <DriverlessDevice::~DriverlessDevice()>:
c002328e:	ba 3c 54 02 c0       	mov    edx,0xc002543c
c0023293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023297:	89 10                	mov    DWORD PTR [eax],edx
c0023299:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002329d:	50                   	push   eax
c002329e:	e8 e5 b1 fe ff       	call   c000e488 <Device::~Device()>
c00232a3:	83 c4 04             	add    esp,0x4
c00232a6:	90                   	nop
c00232a7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00232a8 <DriverlessDevice::~DriverlessDevice()>:
c00232a8:	83 ec 0c             	sub    esp,0xc
c00232ab:	83 ec 0c             	sub    esp,0xc
c00232ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232b2:	e8 d7 ff ff ff       	call   c002328e <DriverlessDevice::~DriverlessDevice()>
c00232b7:	83 c4 10             	add    esp,0x10
c00232ba:	83 ec 08             	sub    esp,0x8
c00232bd:	68 58 01 00 00       	push   0x158
c00232c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232c6:	e8 9b 9c fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c00232cb:	83 c4 10             	add    esp,0x10
c00232ce:	83 c4 0c             	add    esp,0xc
c00232d1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00232d2 <LinkedList<Device>::addElement(Device*)>:
c00232d2:	83 ec 0c             	sub    esp,0xc
c00232d5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00232da:	75 10                	jne    c00232ec <LinkedList<Device>::addElement(Device*)+0x1a>
c00232dc:	83 ec 0c             	sub    esp,0xc
c00232df:	68 90 4b 02 c0       	push   0xc0024b90
c00232e4:	e8 40 1e ff ff       	call   c0015129 <Krnl::panic(char const*)>
c00232e9:	83 c4 10             	add    esp,0x10
c00232ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00232f2:	85 c0                	test   eax,eax
c00232f4:	74 3a                	je     c0023330 <LinkedList<Device>::addElement(Device*)+0x5e>
c00232f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00232fd:	85 c0                	test   eax,eax
c00232ff:	74 2f                	je     c0023330 <LinkedList<Device>::addElement(Device*)+0x5e>
c0023301:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023305:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023308:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002330c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0023312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023316:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002331a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002331d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023321:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023324:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002332e:	eb 68                	jmp    c0023398 <LinkedList<Device>::addElement(Device*)+0xc6>
c0023330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023334:	8b 00                	mov    eax,DWORD PTR [eax]
c0023336:	85 c0                	test   eax,eax
c0023338:	75 4e                	jne    c0023388 <LinkedList<Device>::addElement(Device*)+0xb6>
c002333a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002333e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023341:	85 c0                	test   eax,eax
c0023343:	75 43                	jne    c0023388 <LinkedList<Device>::addElement(Device*)+0xb6>
c0023345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023349:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002334d:	89 10                	mov    DWORD PTR [eax],edx
c002334f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023353:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023357:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002335a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002335e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023361:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002336b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002336f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023372:	85 c0                	test   eax,eax
c0023374:	74 22                	je     c0023398 <LinkedList<Device>::addElement(Device*)+0xc6>
c0023376:	83 ec 0c             	sub    esp,0xc
c0023379:	68 b2 4b 02 c0       	push   0xc0024bb2
c002337e:	e8 a6 1d ff ff       	call   c0015129 <Krnl::panic(char const*)>
c0023383:	83 c4 10             	add    esp,0x10
c0023386:	eb 10                	jmp    c0023398 <LinkedList<Device>::addElement(Device*)+0xc6>
c0023388:	83 ec 0c             	sub    esp,0xc
c002338b:	68 bc 4b 02 c0       	push   0xc0024bbc
c0023390:	e8 94 1d ff ff       	call   c0015129 <Krnl::panic(char const*)>
c0023395:	83 c4 10             	add    esp,0x10
c0023398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002339c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002339f:	8d 50 01             	lea    edx,[eax+0x1]
c00233a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00233a9:	90                   	nop
c00233aa:	83 c4 0c             	add    esp,0xc
c00233ad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00233ae <LinkedList<Device>::LinkedList()>:
c00233ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00233b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00233b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00233bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00233c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00233c7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00233ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00233d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00233d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00233dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00233e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00233e7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00233ee:	90                   	nop
c00233ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00233f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00233f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00233f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00233f6:	85 c0                	test   eax,eax
c00233f8:	75 0e                	jne    c0023408 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00233fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00233fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023401:	85 c0                	test   eax,eax
c0023403:	75 03                	jne    c0023408 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0023405:	b0 01                	mov    al,0x1
c0023407:	c3                   	ret    
c0023408:	b0 00                	mov    al,0x0
c002340a:	90                   	nop
c002340b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002340c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002340c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023410:	8b 00                	mov    eax,DWORD PTR [eax]
c0023412:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0023414 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0023414:	83 ec 0c             	sub    esp,0xc
c0023417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002341b:	8b 00                	mov    eax,DWORD PTR [eax]
c002341d:	85 c0                	test   eax,eax
c002341f:	75 17                	jne    c0023438 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0023421:	83 ec 0c             	sub    esp,0xc
c0023424:	68 c8 4b 02 c0       	push   0xc0024bc8
c0023429:	e8 fb 1c ff ff       	call   c0015129 <Krnl::panic(char const*)>
c002342e:	83 c4 10             	add    esp,0x10
c0023431:	e9 92 00 00 00       	jmp    c00234c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c0023436:	66 90                	xchg   ax,ax
c0023438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002343c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002343f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0023442:	85 c0                	test   eax,eax
c0023444:	0f 95 c0             	setne  al
c0023447:	84 c0                	test   al,al
c0023449:	74 11                	je     c002345c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c002344b:	83 ec 0c             	sub    esp,0xc
c002344e:	68 13 4c 02 c0       	push   0xc0024c13
c0023453:	e8 d1 1c ff ff       	call   c0015129 <Krnl::panic(char const*)>
c0023458:	83 c4 10             	add    esp,0x10
c002345b:	90                   	nop
c002345c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023460:	8b 00                	mov    eax,DWORD PTR [eax]
c0023462:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0023465:	85 c0                	test   eax,eax
c0023467:	0f 94 c0             	sete   al
c002346a:	84 c0                	test   al,al
c002346c:	74 36                	je     c00234a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c002346e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023472:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002347c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023487:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002348a:	83 f8 01             	cmp    eax,0x1
c002348d:	74 25                	je     c00234b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c002348f:	83 ec 0c             	sub    esp,0xc
c0023492:	68 ec 4b 02 c0       	push   0xc0024bec
c0023497:	e8 8d 1c ff ff       	call   c0015129 <Krnl::panic(char const*)>
c002349c:	83 c4 10             	add    esp,0x10
c002349f:	eb 13                	jmp    c00234b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c00234a1:	8d 76 00             	lea    esi,[esi+0x0]
c00234a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00234aa:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00234ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234b1:	89 10                	mov    DWORD PTR [eax],edx
c00234b3:	90                   	nop
c00234b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234b8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00234bb:	8d 50 ff             	lea    edx,[eax-0x1]
c00234be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234c2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00234c5:	8d 76 00             	lea    esi,[esi+0x0]
c00234c8:	83 c4 0c             	add    esp,0xc
c00234cb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00234cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00234cc:	83 ec 0c             	sub    esp,0xc
c00234cf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00234d4:	75 12                	jne    c00234e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c00234d6:	83 ec 0c             	sub    esp,0xc
c00234d9:	68 90 4b 02 c0       	push   0xc0024b90
c00234de:	e8 46 1c ff ff       	call   c0015129 <Krnl::panic(char const*)>
c00234e3:	83 c4 10             	add    esp,0x10
c00234e6:	66 90                	xchg   ax,ax
c00234e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00234ee:	85 c0                	test   eax,eax
c00234f0:	74 36                	je     c0023528 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00234f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00234f9:	85 c0                	test   eax,eax
c00234fb:	74 2b                	je     c0023528 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00234fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023501:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023504:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023508:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002350b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002350f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023513:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0023516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002351a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002351d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0023524:	eb 6a                	jmp    c0023590 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0023526:	66 90                	xchg   ax,ax
c0023528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002352c:	8b 00                	mov    eax,DWORD PTR [eax]
c002352e:	85 c0                	test   eax,eax
c0023530:	75 4e                	jne    c0023580 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0023532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023536:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023539:	85 c0                	test   eax,eax
c002353b:	75 43                	jne    c0023580 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002353d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023541:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023545:	89 10                	mov    DWORD PTR [eax],edx
c0023547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002354b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002354f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0023552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023556:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023559:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0023560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023564:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023567:	85 c0                	test   eax,eax
c0023569:	74 25                	je     c0023590 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002356b:	83 ec 0c             	sub    esp,0xc
c002356e:	68 b2 4b 02 c0       	push   0xc0024bb2
c0023573:	e8 b1 1b ff ff       	call   c0015129 <Krnl::panic(char const*)>
c0023578:	83 c4 10             	add    esp,0x10
c002357b:	eb 13                	jmp    c0023590 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002357d:	8d 76 00             	lea    esi,[esi+0x0]
c0023580:	83 ec 0c             	sub    esp,0xc
c0023583:	68 bc 4b 02 c0       	push   0xc0024bbc
c0023588:	e8 9c 1b ff ff       	call   c0015129 <Krnl::panic(char const*)>
c002358d:	83 c4 10             	add    esp,0x10
c0023590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023594:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023597:	8d 50 01             	lea    edx,[eax+0x1]
c002359a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002359e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00235a1:	90                   	nop
c00235a2:	83 c4 0c             	add    esp,0xc
c00235a5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00235a8 <ACPI::~ACPI()>:
c00235a8:	83 ec 0c             	sub    esp,0xc
c00235ab:	ba 64 5f 02 c0       	mov    edx,0xc0025f64
c00235b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235b4:	89 10                	mov    DWORD PTR [eax],edx
c00235b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235ba:	83 ec 0c             	sub    esp,0xc
c00235bd:	50                   	push   eax
c00235be:	e8 c5 ae fe ff       	call   c000e488 <Device::~Device()>
c00235c3:	83 c4 10             	add    esp,0x10
c00235c6:	90                   	nop
c00235c7:	83 c4 0c             	add    esp,0xc
c00235ca:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00235cc <ACPI::~ACPI()>:
c00235cc:	83 ec 0c             	sub    esp,0xc
c00235cf:	83 ec 0c             	sub    esp,0xc
c00235d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00235d6:	e8 cd ff ff ff       	call   c00235a8 <ACPI::~ACPI()>
c00235db:	83 c4 10             	add    esp,0x10
c00235de:	83 ec 08             	sub    esp,0x8
c00235e1:	68 64 12 00 00       	push   0x1264
c00235e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00235ea:	e8 77 99 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c00235ef:	83 c4 10             	add    esp,0x10
c00235f2:	83 c4 0c             	add    esp,0xc
c00235f5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00235f8 <LinkedList<Device>::~LinkedList()>:
c00235f8:	90                   	nop
c00235f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00235fc <LinkedList<Device>::isEmpty()>:
c00235fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023600:	8b 00                	mov    eax,DWORD PTR [eax]
c0023602:	85 c0                	test   eax,eax
c0023604:	75 0e                	jne    c0023614 <LinkedList<Device>::isEmpty()+0x18>
c0023606:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002360a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002360d:	85 c0                	test   eax,eax
c002360f:	75 03                	jne    c0023614 <LinkedList<Device>::isEmpty()+0x18>
c0023611:	b0 01                	mov    al,0x1
c0023613:	c3                   	ret    
c0023614:	b0 00                	mov    al,0x0
c0023616:	90                   	nop
c0023617:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0023618 <LinkedList<Device>::getFirstElement()>:
c0023618:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002361c:	8b 00                	mov    eax,DWORD PTR [eax]
c002361e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0023620 <LinkedList<Device>::removeFirst()>:
c0023620:	83 ec 0c             	sub    esp,0xc
c0023623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023627:	8b 00                	mov    eax,DWORD PTR [eax]
c0023629:	85 c0                	test   eax,eax
c002362b:	75 17                	jne    c0023644 <LinkedList<Device>::removeFirst()+0x24>
c002362d:	83 ec 0c             	sub    esp,0xc
c0023630:	68 c8 4b 02 c0       	push   0xc0024bc8
c0023635:	e8 ef 1a ff ff       	call   c0015129 <Krnl::panic(char const*)>
c002363a:	83 c4 10             	add    esp,0x10
c002363d:	e9 92 00 00 00       	jmp    c00236d4 <LinkedList<Device>::removeFirst()+0xb4>
c0023642:	66 90                	xchg   ax,ax
c0023644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023648:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002364b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0023651:	85 c0                	test   eax,eax
c0023653:	74 13                	je     c0023668 <LinkedList<Device>::removeFirst()+0x48>
c0023655:	83 ec 0c             	sub    esp,0xc
c0023658:	68 13 4c 02 c0       	push   0xc0024c13
c002365d:	e8 c7 1a ff ff       	call   c0015129 <Krnl::panic(char const*)>
c0023662:	83 c4 10             	add    esp,0x10
c0023665:	8d 76 00             	lea    esi,[esi+0x0]
c0023668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002366c:	8b 00                	mov    eax,DWORD PTR [eax]
c002366e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0023674:	85 c0                	test   eax,eax
c0023676:	75 34                	jne    c00236ac <LinkedList<Device>::removeFirst()+0x8c>
c0023678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002367c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023686:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002368d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023691:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023694:	83 f8 01             	cmp    eax,0x1
c0023697:	74 27                	je     c00236c0 <LinkedList<Device>::removeFirst()+0xa0>
c0023699:	83 ec 0c             	sub    esp,0xc
c002369c:	68 ec 4b 02 c0       	push   0xc0024bec
c00236a1:	e8 83 1a ff ff       	call   c0015129 <Krnl::panic(char const*)>
c00236a6:	83 c4 10             	add    esp,0x10
c00236a9:	eb 15                	jmp    c00236c0 <LinkedList<Device>::removeFirst()+0xa0>
c00236ab:	90                   	nop
c00236ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00236b2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00236b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236bc:	89 10                	mov    DWORD PTR [eax],edx
c00236be:	66 90                	xchg   ax,ax
c00236c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00236c7:	8d 50 ff             	lea    edx,[eax-0x1]
c00236ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236ce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00236d1:	8d 76 00             	lea    esi,[esi+0x0]
c00236d4:	83 c4 0c             	add    esp,0xc
c00236d7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00236d8 <CPU::~CPU()>:
c00236d8:	83 ec 0c             	sub    esp,0xc
c00236db:	ba f4 64 02 c0       	mov    edx,0xc00264f4
c00236e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236e4:	89 10                	mov    DWORD PTR [eax],edx
c00236e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236ea:	83 ec 0c             	sub    esp,0xc
c00236ed:	50                   	push   eax
c00236ee:	e8 95 ad fe ff       	call   c000e488 <Device::~Device()>
c00236f3:	83 c4 10             	add    esp,0x10
c00236f6:	90                   	nop
c00236f7:	83 c4 0c             	add    esp,0xc
c00236fa:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00236fc <CPU::~CPU()>:
c00236fc:	83 ec 0c             	sub    esp,0xc
c00236ff:	83 ec 0c             	sub    esp,0xc
c0023702:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023706:	e8 cd ff ff ff       	call   c00236d8 <CPU::~CPU()>
c002370b:	83 c4 10             	add    esp,0x10
c002370e:	83 ec 08             	sub    esp,0x8
c0023711:	68 98 11 00 00       	push   0x1198
c0023716:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002371a:	e8 47 98 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c002371f:	83 c4 10             	add    esp,0x10
c0023722:	83 c4 0c             	add    esp,0xc
c0023725:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0023728 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0023728:	90                   	nop
c0023729:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c002372c <ThreadControlBlock::ThreadControlBlock()>:
c002372c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023730:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0023737:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002373b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0023742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023746:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002374d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023751:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0023758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002375c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0023763:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023767:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002376b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002376f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0023773:	90                   	nop
c0023774:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0023778 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0023778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002377c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023782:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023786:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002378d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023791:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002379c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00237a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00237a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00237ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00237b1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00237b8:	90                   	nop
c00237b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00237bc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00237bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00237c0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00237c3:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00237c4 <Vm::_FPUState::_FPUState()>:
c00237c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00237c8:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00237cf:	90                   	nop
c00237d0:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00237d2 <PCI::~PCI()>:
c00237d2:	83 ec 0c             	sub    esp,0xc
c00237d5:	ba e0 72 02 c0       	mov    edx,0xc00272e0
c00237da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237de:	89 10                	mov    DWORD PTR [eax],edx
c00237e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237e4:	83 ec 0c             	sub    esp,0xc
c00237e7:	50                   	push   eax
c00237e8:	e8 6b a6 fe ff       	call   c000de58 <Bus::~Bus()>
c00237ed:	83 c4 10             	add    esp,0x10
c00237f0:	90                   	nop
c00237f1:	83 c4 0c             	add    esp,0xc
c00237f4:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00237f6 <PCI::~PCI()>:
c00237f6:	83 ec 0c             	sub    esp,0xc
c00237f9:	83 ec 0c             	sub    esp,0xc
c00237fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023800:	e8 cd ff ff ff       	call   c00237d2 <PCI::~PCI()>
c0023805:	83 c4 10             	add    esp,0x10
c0023808:	83 ec 08             	sub    esp,0x8
c002380b:	68 5c 01 00 00       	push   0x15c
c0023810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023814:	e8 4d 97 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023819:	83 c4 10             	add    esp,0x10
c002381c:	83 c4 0c             	add    esp,0xc
c002381f:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0023820 <IDE::~IDE()>:
c0023820:	83 ec 0c             	sub    esp,0xc
c0023823:	ba 94 73 02 c0       	mov    edx,0xc0027394
c0023828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002382c:	89 10                	mov    DWORD PTR [eax],edx
c002382e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023832:	83 ec 0c             	sub    esp,0xc
c0023835:	50                   	push   eax
c0023836:	e8 65 b1 fe ff       	call   c000e9a0 <HardDiskController::~HardDiskController()>
c002383b:	83 c4 10             	add    esp,0x10
c002383e:	90                   	nop
c002383f:	83 c4 0c             	add    esp,0xc
c0023842:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0023844 <IDE::~IDE()>:
c0023844:	83 ec 0c             	sub    esp,0xc
c0023847:	83 ec 0c             	sub    esp,0xc
c002384a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002384e:	e8 cd ff ff ff       	call   c0023820 <IDE::~IDE()>
c0023853:	83 c4 10             	add    esp,0x10
c0023856:	83 ec 08             	sub    esp,0x8
c0023859:	68 70 02 00 00       	push   0x270
c002385e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023862:	e8 ff 96 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023867:	83 c4 10             	add    esp,0x10
c002386a:	83 c4 0c             	add    esp,0xc
c002386d:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002386e <SATABus::~SATABus()>:
c002386e:	83 ec 0c             	sub    esp,0xc
c0023871:	ba 50 74 02 c0       	mov    edx,0xc0027450
c0023876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002387a:	89 10                	mov    DWORD PTR [eax],edx
c002387c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023880:	83 ec 0c             	sub    esp,0xc
c0023883:	50                   	push   eax
c0023884:	e8 17 b1 fe ff       	call   c000e9a0 <HardDiskController::~HardDiskController()>
c0023889:	83 c4 10             	add    esp,0x10
c002388c:	90                   	nop
c002388d:	83 c4 0c             	add    esp,0xc
c0023890:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0023892 <SATABus::~SATABus()>:
c0023892:	83 ec 0c             	sub    esp,0xc
c0023895:	83 ec 0c             	sub    esp,0xc
c0023898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002389c:	e8 cd ff ff ff       	call   c002386e <SATABus::~SATABus()>
c00238a1:	83 c4 10             	add    esp,0x10
c00238a4:	83 ec 08             	sub    esp,0x8
c00238a7:	68 64 01 00 00       	push   0x164
c00238ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00238b0:	e8 b1 96 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c00238b5:	83 c4 10             	add    esp,0x10
c00238b8:	83 c4 0c             	add    esp,0xc
c00238bb:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00238bc <ATA::~ATA()>:
c00238bc:	83 ec 0c             	sub    esp,0xc
c00238bf:	ba c8 74 02 c0       	mov    edx,0xc00274c8
c00238c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238c8:	89 10                	mov    DWORD PTR [eax],edx
c00238ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238ce:	83 ec 0c             	sub    esp,0xc
c00238d1:	50                   	push   eax
c00238d2:	e8 ab b1 fe ff       	call   c000ea82 <PhysicalDisk::~PhysicalDisk()>
c00238d7:	83 c4 10             	add    esp,0x10
c00238da:	90                   	nop
c00238db:	83 c4 0c             	add    esp,0xc
c00238de:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00238e0 <ATA::~ATA()>:
c00238e0:	83 ec 0c             	sub    esp,0xc
c00238e3:	83 ec 0c             	sub    esp,0xc
c00238e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00238ea:	e8 cd ff ff ff       	call   c00238bc <ATA::~ATA()>
c00238ef:	83 c4 10             	add    esp,0x10
c00238f2:	83 ec 08             	sub    esp,0x8
c00238f5:	68 7c 01 00 00       	push   0x17c
c00238fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00238fe:	e8 63 96 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023903:	83 c4 10             	add    esp,0x10
c0023906:	83 c4 0c             	add    esp,0xc
c0023909:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002390a <ATAPI::~ATAPI()>:
c002390a:	83 ec 0c             	sub    esp,0xc
c002390d:	ba 2c 75 02 c0       	mov    edx,0xc002752c
c0023912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023916:	89 10                	mov    DWORD PTR [eax],edx
c0023918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002391c:	83 ec 0c             	sub    esp,0xc
c002391f:	50                   	push   eax
c0023920:	e8 5d b1 fe ff       	call   c000ea82 <PhysicalDisk::~PhysicalDisk()>
c0023925:	83 c4 10             	add    esp,0x10
c0023928:	90                   	nop
c0023929:	83 c4 0c             	add    esp,0xc
c002392c:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002392e <ATAPI::~ATAPI()>:
c002392e:	83 ec 0c             	sub    esp,0xc
c0023931:	83 ec 0c             	sub    esp,0xc
c0023934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023938:	e8 cd ff ff ff       	call   c002390a <ATAPI::~ATAPI()>
c002393d:	83 c4 10             	add    esp,0x10
c0023940:	83 ec 08             	sub    esp,0x8
c0023943:	68 84 01 00 00       	push   0x184
c0023948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002394c:	e8 15 96 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023951:	83 c4 10             	add    esp,0x10
c0023954:	83 c4 0c             	add    esp,0xc
c0023957:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0023958 <SATA::~SATA()>:
c0023958:	83 ec 0c             	sub    esp,0xc
c002395b:	ba 68 77 02 c0       	mov    edx,0xc0027768
c0023960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023964:	89 10                	mov    DWORD PTR [eax],edx
c0023966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002396a:	83 ec 0c             	sub    esp,0xc
c002396d:	50                   	push   eax
c002396e:	e8 0f b1 fe ff       	call   c000ea82 <PhysicalDisk::~PhysicalDisk()>
c0023973:	83 c4 10             	add    esp,0x10
c0023976:	90                   	nop
c0023977:	83 c4 0c             	add    esp,0xc
c002397a:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c002397c <SATA::~SATA()>:
c002397c:	83 ec 0c             	sub    esp,0xc
c002397f:	83 ec 0c             	sub    esp,0xc
c0023982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023986:	e8 cd ff ff ff       	call   c0023958 <SATA::~SATA()>
c002398b:	83 c4 10             	add    esp,0x10
c002398e:	83 ec 08             	sub    esp,0x8
c0023991:	68 7c 01 00 00       	push   0x17c
c0023996:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002399a:	e8 c7 95 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c002399f:	83 c4 10             	add    esp,0x10
c00239a2:	83 c4 0c             	add    esp,0xc
c00239a5:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00239a6 <SATAPI::~SATAPI()>:
c00239a6:	83 ec 0c             	sub    esp,0xc
c00239a9:	ba d4 78 02 c0       	mov    edx,0xc00278d4
c00239ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239b2:	89 10                	mov    DWORD PTR [eax],edx
c00239b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239b8:	83 ec 0c             	sub    esp,0xc
c00239bb:	50                   	push   eax
c00239bc:	e8 c1 b0 fe ff       	call   c000ea82 <PhysicalDisk::~PhysicalDisk()>
c00239c1:	83 c4 10             	add    esp,0x10
c00239c4:	90                   	nop
c00239c5:	83 c4 0c             	add    esp,0xc
c00239c8:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00239ca <SATAPI::~SATAPI()>:
c00239ca:	83 ec 0c             	sub    esp,0xc
c00239cd:	83 ec 0c             	sub    esp,0xc
c00239d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00239d4:	e8 cd ff ff ff       	call   c00239a6 <SATAPI::~SATAPI()>
c00239d9:	83 c4 10             	add    esp,0x10
c00239dc:	83 ec 08             	sub    esp,0x8
c00239df:	68 84 01 00 00       	push   0x184
c00239e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00239e8:	e8 79 95 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c00239ed:	83 c4 10             	add    esp,0x10
c00239f0:	83 c4 0c             	add    esp,0xc
c00239f3:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00239f4 <AVX::~AVX()>:
c00239f4:	83 ec 0c             	sub    esp,0xc
c00239f7:	ba 14 79 02 c0       	mov    edx,0xc0027914
c00239fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a00:	89 10                	mov    DWORD PTR [eax],edx
c0023a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a06:	83 ec 0c             	sub    esp,0xc
c0023a09:	50                   	push   eax
c0023a0a:	e8 f9 b0 fe ff       	call   c000eb08 <FPU::~FPU()>
c0023a0f:	83 c4 10             	add    esp,0x10
c0023a12:	90                   	nop
c0023a13:	83 c4 0c             	add    esp,0xc
c0023a16:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0023a18 <AVX::~AVX()>:
c0023a18:	83 ec 0c             	sub    esp,0xc
c0023a1b:	83 ec 0c             	sub    esp,0xc
c0023a1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a22:	e8 cd ff ff ff       	call   c00239f4 <AVX::~AVX()>
c0023a27:	83 c4 10             	add    esp,0x10
c0023a2a:	83 ec 08             	sub    esp,0x8
c0023a2d:	68 58 01 00 00       	push   0x158
c0023a32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a36:	e8 2b 95 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023a3b:	83 c4 10             	add    esp,0x10
c0023a3e:	83 c4 0c             	add    esp,0xc
c0023a41:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0023a44 <MMX::~MMX()>:
c0023a44:	83 ec 0c             	sub    esp,0xc
c0023a47:	ba 54 79 02 c0       	mov    edx,0xc0027954
c0023a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a50:	89 10                	mov    DWORD PTR [eax],edx
c0023a52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a56:	83 ec 0c             	sub    esp,0xc
c0023a59:	50                   	push   eax
c0023a5a:	e8 a9 b0 fe ff       	call   c000eb08 <FPU::~FPU()>
c0023a5f:	83 c4 10             	add    esp,0x10
c0023a62:	90                   	nop
c0023a63:	83 c4 0c             	add    esp,0xc
c0023a66:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0023a68 <MMX::~MMX()>:
c0023a68:	83 ec 0c             	sub    esp,0xc
c0023a6b:	83 ec 0c             	sub    esp,0xc
c0023a6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a72:	e8 cd ff ff ff       	call   c0023a44 <MMX::~MMX()>
c0023a77:	83 c4 10             	add    esp,0x10
c0023a7a:	83 ec 08             	sub    esp,0x8
c0023a7d:	68 58 01 00 00       	push   0x158
c0023a82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a86:	e8 db 94 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023a8b:	83 c4 10             	add    esp,0x10
c0023a8e:	83 c4 0c             	add    esp,0xc
c0023a91:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0023a94 <SSE::~SSE()>:
c0023a94:	83 ec 0c             	sub    esp,0xc
c0023a97:	ba 94 79 02 c0       	mov    edx,0xc0027994
c0023a9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023aa0:	89 10                	mov    DWORD PTR [eax],edx
c0023aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023aa6:	83 ec 0c             	sub    esp,0xc
c0023aa9:	50                   	push   eax
c0023aaa:	e8 59 b0 fe ff       	call   c000eb08 <FPU::~FPU()>
c0023aaf:	83 c4 10             	add    esp,0x10
c0023ab2:	90                   	nop
c0023ab3:	83 c4 0c             	add    esp,0xc
c0023ab6:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0023ab8 <SSE::~SSE()>:
c0023ab8:	83 ec 0c             	sub    esp,0xc
c0023abb:	83 ec 0c             	sub    esp,0xc
c0023abe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023ac2:	e8 cd ff ff ff       	call   c0023a94 <SSE::~SSE()>
c0023ac7:	83 c4 10             	add    esp,0x10
c0023aca:	83 ec 08             	sub    esp,0x8
c0023acd:	68 58 01 00 00       	push   0x158
c0023ad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023ad6:	e8 8b 94 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023adb:	83 c4 10             	add    esp,0x10
c0023ade:	83 c4 0c             	add    esp,0xc
c0023ae1:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0023ae2 <x87::~x87()>:
c0023ae2:	83 ec 0c             	sub    esp,0xc
c0023ae5:	ba d4 79 02 c0       	mov    edx,0xc00279d4
c0023aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023aee:	89 10                	mov    DWORD PTR [eax],edx
c0023af0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023af4:	83 ec 0c             	sub    esp,0xc
c0023af7:	50                   	push   eax
c0023af8:	e8 0b b0 fe ff       	call   c000eb08 <FPU::~FPU()>
c0023afd:	83 c4 10             	add    esp,0x10
c0023b00:	90                   	nop
c0023b01:	83 c4 0c             	add    esp,0xc
c0023b04:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0023b06 <x87::~x87()>:
c0023b06:	83 ec 0c             	sub    esp,0xc
c0023b09:	83 ec 0c             	sub    esp,0xc
c0023b0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b10:	e8 cd ff ff ff       	call   c0023ae2 <x87::~x87()>
c0023b15:	83 c4 10             	add    esp,0x10
c0023b18:	83 ec 08             	sub    esp,0x8
c0023b1b:	68 58 01 00 00       	push   0x158
c0023b20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b24:	e8 3d 94 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023b29:	83 c4 10             	add    esp,0x10
c0023b2c:	83 c4 0c             	add    esp,0xc
c0023b2f:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0023b30 <IOAPIC::~IOAPIC()>:
c0023b30:	83 ec 0c             	sub    esp,0xc
c0023b33:	ba 2c 7b 02 c0       	mov    edx,0xc0027b2c
c0023b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b3c:	89 10                	mov    DWORD PTR [eax],edx
c0023b3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b42:	83 ec 0c             	sub    esp,0xc
c0023b45:	50                   	push   eax
c0023b46:	e8 3d a9 fe ff       	call   c000e488 <Device::~Device()>
c0023b4b:	83 c4 10             	add    esp,0x10
c0023b4e:	90                   	nop
c0023b4f:	83 c4 0c             	add    esp,0xc
c0023b52:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0023b54 <IOAPIC::~IOAPIC()>:
c0023b54:	83 ec 0c             	sub    esp,0xc
c0023b57:	83 ec 0c             	sub    esp,0xc
c0023b5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b5e:	e8 cd ff ff ff       	call   c0023b30 <IOAPIC::~IOAPIC()>
c0023b63:	83 c4 10             	add    esp,0x10
c0023b66:	83 ec 08             	sub    esp,0x8
c0023b69:	68 68 01 00 00       	push   0x168
c0023b6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b72:	e8 ef 93 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023b77:	83 c4 10             	add    esp,0x10
c0023b7a:	83 c4 0c             	add    esp,0xc
c0023b7d:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0023b7e <APIC::~APIC()>:
c0023b7e:	83 ec 0c             	sub    esp,0xc
c0023b81:	ba e4 7a 02 c0       	mov    edx,0xc0027ae4
c0023b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b8a:	89 10                	mov    DWORD PTR [eax],edx
c0023b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b90:	83 ec 0c             	sub    esp,0xc
c0023b93:	50                   	push   eax
c0023b94:	e8 5b b4 fe ff       	call   c000eff4 <InterruptController::~InterruptController()>
c0023b99:	83 c4 10             	add    esp,0x10
c0023b9c:	90                   	nop
c0023b9d:	83 c4 0c             	add    esp,0xc
c0023ba0:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0023ba2 <APIC::~APIC()>:
c0023ba2:	83 ec 0c             	sub    esp,0xc
c0023ba5:	83 ec 0c             	sub    esp,0xc
c0023ba8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023bac:	e8 cd ff ff ff       	call   c0023b7e <APIC::~APIC()>
c0023bb1:	83 c4 10             	add    esp,0x10
c0023bb4:	83 ec 08             	sub    esp,0x8
c0023bb7:	68 58 21 00 00       	push   0x2158
c0023bbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023bc0:	e8 a1 93 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023bc5:	83 c4 10             	add    esp,0x10
c0023bc8:	83 c4 0c             	add    esp,0xc
c0023bcb:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0023bcc <PIC::~PIC()>:
c0023bcc:	83 ec 0c             	sub    esp,0xc
c0023bcf:	ba 7c 7b 02 c0       	mov    edx,0xc0027b7c
c0023bd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bd8:	89 10                	mov    DWORD PTR [eax],edx
c0023bda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bde:	83 ec 0c             	sub    esp,0xc
c0023be1:	50                   	push   eax
c0023be2:	e8 0d b4 fe ff       	call   c000eff4 <InterruptController::~InterruptController()>
c0023be7:	83 c4 10             	add    esp,0x10
c0023bea:	90                   	nop
c0023beb:	83 c4 0c             	add    esp,0xc
c0023bee:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0023bf0 <PIC::~PIC()>:
c0023bf0:	83 ec 0c             	sub    esp,0xc
c0023bf3:	83 ec 0c             	sub    esp,0xc
c0023bf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023bfa:	e8 cd ff ff ff       	call   c0023bcc <PIC::~PIC()>
c0023bff:	83 c4 10             	add    esp,0x10
c0023c02:	83 ec 08             	sub    esp,0x8
c0023c05:	68 58 21 00 00       	push   0x2158
c0023c0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c0e:	e8 53 93 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023c13:	83 c4 10             	add    esp,0x10
c0023c16:	83 c4 0c             	add    esp,0xc
c0023c19:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0023c1c <APICTimer::~APICTimer()>:
c0023c1c:	83 ec 0c             	sub    esp,0xc
c0023c1f:	ba d0 7b 02 c0       	mov    edx,0xc0027bd0
c0023c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c28:	89 10                	mov    DWORD PTR [eax],edx
c0023c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c2e:	83 ec 0c             	sub    esp,0xc
c0023c31:	50                   	push   eax
c0023c32:	e8 ed d2 fe ff       	call   c0010f24 <Timer::~Timer()>
c0023c37:	83 c4 10             	add    esp,0x10
c0023c3a:	90                   	nop
c0023c3b:	83 c4 0c             	add    esp,0xc
c0023c3e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0023c40 <APICTimer::~APICTimer()>:
c0023c40:	83 ec 0c             	sub    esp,0xc
c0023c43:	83 ec 0c             	sub    esp,0xc
c0023c46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c4a:	e8 cd ff ff ff       	call   c0023c1c <APICTimer::~APICTimer()>
c0023c4f:	83 c4 10             	add    esp,0x10
c0023c52:	83 ec 08             	sub    esp,0x8
c0023c55:	68 60 01 00 00       	push   0x160
c0023c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c5e:	e8 03 93 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023c63:	83 c4 10             	add    esp,0x10
c0023c66:	83 c4 0c             	add    esp,0xc
c0023c69:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0023c6c <PIT::~PIT()>:
c0023c6c:	83 ec 0c             	sub    esp,0xc
c0023c6f:	ba 20 7c 02 c0       	mov    edx,0xc0027c20
c0023c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c78:	89 10                	mov    DWORD PTR [eax],edx
c0023c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c7e:	83 ec 0c             	sub    esp,0xc
c0023c81:	50                   	push   eax
c0023c82:	e8 9d d2 fe ff       	call   c0010f24 <Timer::~Timer()>
c0023c87:	83 c4 10             	add    esp,0x10
c0023c8a:	90                   	nop
c0023c8b:	83 c4 0c             	add    esp,0xc
c0023c8e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0023c90 <PIT::~PIT()>:
c0023c90:	83 ec 0c             	sub    esp,0xc
c0023c93:	83 ec 0c             	sub    esp,0xc
c0023c96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c9a:	e8 cd ff ff ff       	call   c0023c6c <PIT::~PIT()>
c0023c9f:	83 c4 10             	add    esp,0x10
c0023ca2:	83 ec 08             	sub    esp,0x8
c0023ca5:	68 5c 01 00 00       	push   0x15c
c0023caa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023cae:	e8 b3 92 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023cb3:	83 c4 10             	add    esp,0x10
c0023cb6:	83 c4 0c             	add    esp,0xc
c0023cb9:	c3                   	ret    
