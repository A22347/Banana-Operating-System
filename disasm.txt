
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f0 7a 00 00       	call   c0007b10 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 04 37 02 c0       	mov    eax,0xc0023704
c0000025:	3d 04 37 02 c0       	cmp    eax,0xc0023704
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 04 37 02 c0       	push   0xc0023704
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 04 37 02 c0       	mov    eax,0xc0023704
c0000051:	2d 04 37 02 c0       	sub    eax,0xc0023704
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 04 37 02 c0       	push   0xc0023704
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 4c fe 01 c0       	mov    ebx,0xc001fe4c
c0000097:	81 eb 48 fe 01 c0    	sub    ebx,0xc001fe48
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 48 fe 01 c0       	mov    esi,0xc001fe48
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 04 37 02 c0       	push   0xc0023704
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 04 37 02 c0       	push   0xc0023704
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 97 50 01 00       	call   c0015344 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 08 a4 00 00       	call   c000a6cd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 75 50 01 00       	call   c0015344 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 82 55 01 00       	call   c0015870 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 41 5c 01 00       	call   c0015f38 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 bd 0e 01 00       	jmp    c001123c <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 60 fe 01 c0 02 	test   BYTE PTR [edx-0x3ffe01a0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 60 fe 01 c0 01 	test   BYTE PTR [edx-0x3ffe01a0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 60 fe 01 c0 08 	test   BYTE PTR [edx-0x3ffe01a0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 60 fe 01 c0 04 	test   BYTE PTR [ecx-0x3ffe01a0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 60 fe 01 c0 01 	test   BYTE PTR [edx-0x3ffe01a0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000df7:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 b0 6a 00 00       	call   c0007988 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 f5 69 00 00       	call   c0007988 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 df 69 00 00       	call   c0007988 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 bb 69 00 00       	call   c0007988 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c0001176:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011b2:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011b7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011c5:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c0001216:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c0001231:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c00012eb:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c00012f1:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c00012f8:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013be:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013c4:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c00013cb:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 64 ff 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe009c]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 3e 77 01 00       	jmp    c00194e0 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 68 77 01 00       	jmp    c0019520 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 89 77 01 00       	jmp    c0019560 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 c0 00 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdff40]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 c0 00 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdff40]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba 24 27 02 c0       	mov    edx,0xc0022724
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba 7c ff 01 c0       	mov    edx,0xc001ff7c
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 82 ff 01 c0       	mov    eax,0xc001ff82
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf 40 00 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdffc0]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 8b ff 01 c0       	mov    eax,0xc001ff8b
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 c0 00 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdff40]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 10 00 02 c0       	mov    eax,0xc0020010
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb 00 00 02 c0       	mov    ebx,0xc0020000
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 e0 ff 01 c0       	mov    eax,0xc001ffe0
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 f0 ff 01 c0       	mov    eax,0xc001fff0
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba 92 ff 01 c0       	mov    edx,0xc001ff92
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba 9e ff 01 c0       	mov    edx,0xc001ff9e
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba b2 ff 01 c0       	mov    edx,0xc001ffb2
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 87 1e 00 00       	call   c0007ab6 <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 7f 1e 00 00       	call   c0007ac6 <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c e0 03 02 c0 	mov    DWORD PTR [esp+0xc],0xc00203e0
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 e0 03 02 c0 	mov    DWORD PTR [esp+0x10],0xc00203e0
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 e0 01 02 c0       	mov    eax,0xc00201e0
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 20 01 02 c0       	mov    eax,0xc0020120
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 e0 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdff20]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 e0 04 02 c0       	push   0xc00204e0
c000611b:	e8 5c 3d 01 00       	call   c0019e7c <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 ee 04 02 c0       	push   0xc00204ee
c0006153:	e8 24 3d 01 00       	call   c0019e7c <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 8d 3c 01 00       	call   c0019e20 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 50 02 c0       	mov    eax,0xc0025020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 5e 02 c0    	mov    ebp,DWORD PTR ds:0xc0025eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 fd 04 02 c0       	push   0xc00204fd
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000655e:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c0006564:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c0006580:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00065f9:	8b 8d 4c 55 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdaab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c00066f1:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000672f:	05 40 55 02 c0       	add    eax,0xc0025540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c00067ee:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 00 05 02 c0       	push   0xc0020500
c0006812:	e8 65 36 01 00       	call   c0019e7c <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 79 36 01 00       	call   c0019e98 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 05 05 02 c0 	mov    DWORD PTR [esp],0xc0020505
c000682c:	e8 4b 36 01 00       	call   c0019e7c <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006838:	e8 5b 36 01 00       	call   c0019e98 <iso_kprintfd>
c000683d:	c7 04 24 0b 05 02 c0 	mov    DWORD PTR [esp],0xc002050b
c0006844:	e8 33 36 01 00       	call   c0019e7c <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c0006850:	e8 43 36 01 00       	call   c0019e98 <iso_kprintfd>
c0006855:	c7 04 24 11 05 02 c0 	mov    DWORD PTR [esp],0xc0020511
c000685c:	e8 1b 36 01 00       	call   c0019e7c <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006868:	e8 2b 36 01 00       	call   c0019e98 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068ce:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 55 02 c0    	lea    ebp,[eax-0x3ffdaaa8]
c000692a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 55 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdaaa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 fd 04 02 c0       	push   0xc00204fd
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a06:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a0c:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 55 02 c0       	add    eax,0xc0025550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 1a 05 02 c0       	push   0xc002051a
c0006a31:	e8 46 34 01 00       	call   c0019e7c <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a66:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 25 05 02 c0       	push   0xc0020525
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 2c 05 02 c0       	push   0xc002052c
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b27:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 33 05 02 c0       	push   0xc0020533
c0006b48:	e8 2f 33 01 00       	call   c0019e7c <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 3e 05 02 c0       	push   0xc002053e
c0006b63:	e8 14 33 01 00       	call   c0019e7c <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 55 02 c0       	push   0xc0025540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006b8d:	e8 24 0f 00 00       	call   c0007ab6 <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006b9e:	e8 13 0f 00 00       	call   c0007ab6 <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 fe 0e 00 00       	call   c0007ab6 <malloc>
c0006bb8:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 e5 0e 00 00       	call   c0007ab6 <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006bfe:	e8 c3 0e 00 00       	call   c0007ac6 <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 b5 0e 00 00       	call   c0007ac6 <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 9b 0e 00 00       	call   c0007ac6 <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 86 0e 00 00       	call   c0007ac6 <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c4d:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	e8 2a 9e 00 00       	call   c0010a9c <KeExecuteAtexit()>
c0006c72:	83 ec 0c             	sub    esp,0xc
c0006c75:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c7b:	50                   	push   eax
c0006c7c:	e8 bf 5a 00 00       	call   c000c740 <Device::closeAll()>
c0006c81:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c87:	83 c4 10             	add    esp,0x10
c0006c8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c8c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c90:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c98:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ca0:	5b                   	pop    ebx
c0006ca1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ca4:	5e                   	pop    esi
c0006ca5:	5f                   	pop    edi
c0006ca6:	ff e0                	jmp    eax

c0006ca8 <Krnl::firstTask()>:
c0006ca8:	53                   	push   ebx
c0006ca9:	83 ec 14             	sub    esp,0x14
c0006cac:	fb                   	sti    
c0006cad:	68 4f 05 02 c0       	push   0xc002054f
c0006cb2:	e8 c4 9e 00 00       	call   c0010b7b <KeSetBootMessage(char const*)>
c0006cb7:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cbe:	e8 f3 0d 00 00       	call   c0007ab6 <malloc>
c0006cc3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cca:	89 c3                	mov    ebx,eax
c0006ccc:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0006cd1:	50                   	push   eax
c0006cd2:	68 68 05 02 c0       	push   0xc0020568
c0006cd7:	6a 01                	push   0x1
c0006cd9:	53                   	push   ebx
c0006cda:	e8 bd e9 00 00       	call   c001569c <Process::Process(bool, char const*, Process*, char**)>
c0006cdf:	83 c4 20             	add    esp,0x20
c0006ce2:	68 ff 00 00 00       	push   0xff
c0006ce7:	6a 00                	push   0x0
c0006ce9:	68 fd 74 00 c0       	push   0xc00074fd
c0006cee:	53                   	push   ebx
c0006cef:	e8 cc eb 00 00       	call   c00158c0 <Process::createThread(void (*)(void*), void*, int)>
c0006cf4:	8b 15 f0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296f0
c0006cfa:	6a 7a                	push   0x7a
c0006cfc:	6a 00                	push   0x0
c0006cfe:	68 a8 63 01 c0       	push   0xc00163a8
c0006d03:	52                   	push   edx
c0006d04:	e8 b7 eb 00 00       	call   c00158c0 <Process::createThread(void (*)(void*), void*, int)>
c0006d09:	83 c4 14             	add    esp,0x14
c0006d0c:	a3 a8 96 02 c0       	mov    ds:0xc00296a8,eax
c0006d11:	68 64 06 02 c0       	push   0xc0020664
c0006d16:	e8 60 9e 00 00       	call   c0010b7b <KeSetBootMessage(char const*)>
c0006d1b:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d22:	e8 e3 a6 00 00       	call   c001140a <KeInitRand()>
c0006d27:	e8 9f fa 00 00       	call   c00167cb <Vm::initialise8086()>
c0006d2c:	e8 07 48 00 00       	call   c000b538 <Fs::initVFS()>
c0006d31:	c7 04 24 75 05 02 c0 	mov    DWORD PTR [esp],0xc0020575
c0006d38:	e8 3e 9e 00 00       	call   c0010b7b <KeSetBootMessage(char const*)>
c0006d3d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d42:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d48:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	6a 00                	push   0x0
c0006d50:	50                   	push   eax
c0006d51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d54:	83 c4 14             	add    esp,0x14
c0006d57:	68 64 06 02 c0       	push   0xc0020664
c0006d5c:	e8 1a 9e 00 00       	call   c0010b7b <KeSetBootMessage(char const*)>
c0006d61:	e8 b0 44 00 00       	call   c000b216 <KeInitialiseSymlinks()>
c0006d66:	e8 49 a3 00 00       	call   c00110b4 <KeLoadSystemEnv()>
c0006d6b:	e8 a6 a5 00 00       	call   c0011316 <KeSetupPowerManager()>
c0006d70:	83 c4 0c             	add    esp,0xc
c0006d73:	6a 3a                	push   0x3a
c0006d75:	68 8f 05 02 c0       	push   0xc002058f
c0006d7a:	68 98 05 02 c0       	push   0xc0020598
c0006d7f:	e8 64 cb 00 00       	call   c00138e8 <Reg::readIntWithDefault(char*, char*, int)>
c0006d84:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d87:	e8 14 53 00 00       	call   c000c0a0 <User::loadClockSettings(int)>
c0006d8c:	c7 04 24 88 06 02 c0 	mov    DWORD PTR [esp],0xc0020688
c0006d93:	e8 e3 9d 00 00       	call   c0010b7b <KeSetBootMessage(char const*)>
c0006d98:	59                   	pop    ecx
c0006d99:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d9e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006da4:	53                   	push   ebx
c0006da5:	e8 94 59 00 00       	call   c000c73e <Device::loadDriversForAll()>
c0006daa:	c7 04 24 a0 05 02 c0 	mov    DWORD PTR [esp],0xc00205a0
c0006db1:	e8 c5 9d 00 00       	call   c0010b7b <KeSetBootMessage(char const*)>
c0006db6:	58                   	pop    eax
c0006db7:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006dbd:	5a                   	pop    edx
c0006dbe:	6a 01                	push   0x1
c0006dc0:	68 b1 05 02 c0       	push   0xc00205b1
c0006dc5:	e8 e8 e2 00 00       	call   c00150b2 <Thr::loadDLL(char const*, bool)>
c0006dca:	59                   	pop    ecx
c0006dcb:	5a                   	pop    edx
c0006dcc:	53                   	push   ebx
c0006dcd:	50                   	push   eax
c0006dce:	e8 10 e5 00 00       	call   c00152e3 <Thr::executeDLL(unsigned long, void*)>
c0006dd3:	83 c4 10             	add    esp,0x10
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	6a 02                	push   0x2
c0006ddb:	e8 44 ef 00 00       	call   c0015d24 <blockTask(TaskState)>
c0006de0:	83 c4 10             	add    esp,0x10
c0006de3:	eb f1                	jmp    c0006dd6 <Krnl::firstTask()+0x12e>
c0006de5:	90                   	nop

c0006de6 <Computer::Computer()>:
c0006de6:	83 ec 0c             	sub    esp,0xc
c0006de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ded:	83 ec 08             	sub    esp,0x8
c0006df0:	68 cd 05 02 c0       	push   0xc00205cd
c0006df5:	50                   	push   eax
c0006df6:	e8 bf 59 00 00       	call   c000c7ba <Device::Device(char const*)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	ba d4 06 02 c0       	mov    edx,0xc00206d4
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	89 10                	mov    DWORD PTR [eax],edx
c0006e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e1b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e2f:	83 ca 04             	or     edx,0x4
c0006e32:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e42:	0f b6 d0             	movzx  edx,al
c0006e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e49:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5a:	0f b6 d0             	movzx  edx,al
c0006e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e61:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e70:	8d 50 01             	lea    edx,[eax+0x1]
c0006e73:	88 d1                	mov    cl,dl
c0006e75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e79:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e7f:	0f b6 d0             	movzx  edx,al
c0006e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e86:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e8a:	83 e1 3f             	and    ecx,0x3f
c0006e8d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e91:	90                   	nop
c0006e92:	83 c4 0c             	add    esp,0xc
c0006e95:	c3                   	ret    

c0006e96 <Computer::setBootMessage(char const*)>:
c0006e96:	c3                   	ret    
c0006e97:	90                   	nop

c0006e98 <Computer::detectFeatures()>:
c0006e98:	55                   	push   ebp
c0006e99:	57                   	push   edi
c0006e9a:	56                   	push   esi
c0006e9b:	53                   	push   ebx
c0006e9c:	83 ec 1c             	sub    esp,0x1c
c0006e9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ea3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea9:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006eaf:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006eb5:	e8 3f 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eba:	31 d2                	xor    edx,edx
c0006ebc:	85 c0                	test   eax,eax
c0006ebe:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ec4:	0f 95 c2             	setne  dl
c0006ec7:	83 e0 fd             	and    eax,0xfffffffd
c0006eca:	d1 e2                	shl    edx,1
c0006ecc:	09 d0                	or     eax,edx
c0006ece:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ed4:	a8 02                	test   al,0x2
c0006ed6:	75 51                	jne    c0006f29 <Computer::detectFeatures()+0x91>
c0006ed8:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006edf:	74 0f                	je     c0006ef0 <Computer::detectFeatures()+0x58>
c0006ee1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee7:	83 e0 fb             	and    eax,0xfffffffb
c0006eea:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef0:	e8 51 7f 01 00       	call   c001ee46 <x87Detect>
c0006ef5:	83 e0 01             	and    eax,0x1
c0006ef8:	c1 e0 04             	shl    eax,0x4
c0006efb:	89 c2                	mov    edx,eax
c0006efd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f03:	83 e0 ef             	and    eax,0xffffffef
c0006f06:	09 d0                	or     eax,edx
c0006f08:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0e:	88 c2                	mov    dl,al
c0006f10:	a8 10                	test   al,0x10
c0006f12:	0f 85 33 01 00 00    	jne    c000704b <Computer::detectFeatures()+0x1b3>
c0006f18:	80 e2 80             	and    dl,0x80
c0006f1b:	0f 85 4c 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1d5>
c0006f21:	83 c4 1c             	add    esp,0x1c
c0006f24:	5b                   	pop    ebx
c0006f25:	5e                   	pop    esi
c0006f26:	5f                   	pop    edi
c0006f27:	5d                   	pop    ebp
c0006f28:	c3                   	ret    
c0006f29:	83 ec 0c             	sub    esp,0xc
c0006f2c:	6a 20                	push   0x20
c0006f2e:	e8 81 90 00 00       	call   c000ffb4 <CPU::cpuidCheckEDX(unsigned int)>
c0006f33:	83 e0 01             	and    eax,0x1
c0006f36:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f43:	83 e0 f7             	and    eax,0xfffffff7
c0006f46:	09 d0                	or     eax,edx
c0006f48:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f4e:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f55:	e8 5a 90 00 00       	call   c000ffb4 <CPU::cpuidCheckEDX(unsigned int)>
c0006f5a:	89 c2                	mov    edx,eax
c0006f5c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f62:	83 e2 01             	and    edx,0x1
c0006f65:	83 e0 fe             	and    eax,0xfffffffe
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f70:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f77:	e8 38 90 00 00       	call   c000ffb4 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	c1 e2 07             	shl    edx,0x7
c0006f87:	83 e0 7f             	and    eax,0x7f
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f99:	e8 16 90 00 00       	call   c000ffb4 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	83 c4 10             	add    esp,0x10
c0006fa1:	83 e0 01             	and    eax,0x1
c0006fa4:	c1 e0 05             	shl    eax,0x5
c0006fa7:	89 c2                	mov    edx,eax
c0006fa9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006faf:	83 e0 df             	and    eax,0xffffffdf
c0006fb2:	09 d0                	or     eax,edx
c0006fb4:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fbe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc4:	0f 84 c9 00 00 00    	je     c0007093 <Computer::detectFeatures()+0x1fb>
c0006fca:	83 e0 fe             	and    eax,0xfffffffe
c0006fcd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fd3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd9:	89 c2                	mov    edx,eax
c0006fdb:	83 e2 09             	and    edx,0x9
c0006fde:	83 fa 01             	cmp    edx,0x1
c0006fe1:	75 09                	jne    c0006fec <Computer::detectFeatures()+0x154>
c0006fe3:	83 e0 fe             	and    eax,0xfffffffe
c0006fe6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fec:	83 ec 0c             	sub    esp,0xc
c0006fef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ff3:	50                   	push   eax
c0006ff4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff8:	55                   	push   ebp
c0006ff9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ffd:	57                   	push   edi
c0006ffe:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007002:	56                   	push   esi
c0007003:	68 00 00 00 80       	push   0x80000000
c0007008:	e8 23 8f 00 00       	call   c000ff30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000700d:	83 c4 20             	add    esp,0x20
c0007010:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000701b:	0f 86 b7 fe ff ff    	jbe    c0006ed8 <Computer::detectFeatures()+0x40>
c0007021:	83 ec 0c             	sub    esp,0xc
c0007024:	50                   	push   eax
c0007025:	55                   	push   ebp
c0007026:	57                   	push   edi
c0007027:	56                   	push   esi
c0007028:	68 01 00 00 80       	push   0x80000001
c000702d:	e8 fe 8e 00 00       	call   c000ff30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007032:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007038:	83 c4 20             	add    esp,0x20
c000703b:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007040:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007046:	e9 8d fe ff ff       	jmp    c0006ed8 <Computer::detectFeatures()+0x40>
c000704b:	e8 b0 7d 01 00       	call   c001ee00 <absolutelyNoChanceInHell>
c0007050:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007056:	c1 e0 07             	shl    eax,0x7
c0007059:	83 e2 7f             	and    edx,0x7f
c000705c:	09 c2                	or     edx,eax
c000705e:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007064:	80 e2 80             	and    dl,0x80
c0007067:	0f 84 b4 fe ff ff    	je     c0006f21 <Computer::detectFeatures()+0x89>
c000706d:	e8 fe 79 01 00       	call   c001ea70 <avxDetect>
c0007072:	83 e0 01             	and    eax,0x1
c0007075:	c1 e0 05             	shl    eax,0x5
c0007078:	89 c2                	mov    edx,eax
c000707a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007080:	83 e0 df             	and    eax,0xffffffdf
c0007083:	09 d0                	or     eax,edx
c0007085:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000708b:	83 c4 1c             	add    esp,0x1c
c000708e:	5b                   	pop    ebx
c000708f:	5e                   	pop    esi
c0007090:	5f                   	pop    edi
c0007091:	5d                   	pop    ebp
c0007092:	c3                   	ret    
c0007093:	83 ec 0c             	sub    esp,0xc
c0007096:	68 00 02 00 00       	push   0x200
c000709b:	e8 14 8f 00 00       	call   c000ffb4 <CPU::cpuidCheckEDX(unsigned int)>
c00070a0:	83 c4 10             	add    esp,0x10
c00070a3:	89 c2                	mov    edx,eax
c00070a5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070ab:	83 e2 01             	and    edx,0x1
c00070ae:	83 e0 fe             	and    eax,0xfffffffe
c00070b1:	09 d0                	or     eax,edx
c00070b3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b9:	e9 15 ff ff ff       	jmp    c0006fd3 <Computer::detectFeatures()+0x13b>

c00070be <Computer::displayFeatures()>:
c00070be:	c3                   	ret    
c00070bf:	90                   	nop

c00070c0 <Computer::rdmsr(unsigned int)>:
c00070c0:	83 ec 0c             	sub    esp,0xc
c00070c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070c7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070ce:	74 0a                	je     c00070da <Computer::rdmsr(unsigned int)+0x1a>
c00070d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070d4:	0f 32                	rdmsr  
c00070d6:	83 c4 0c             	add    esp,0xc
c00070d9:	c3                   	ret    
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	68 d6 05 02 c0       	push   0xc00205d6
c00070e2:	e8 6a a1 00 00       	call   c0011251 <KePanic(char const*)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	eb e4                	jmp    c00070d0 <Computer::rdmsr(unsigned int)+0x10>

c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070ec:	57                   	push   edi
c00070ed:	56                   	push   esi
c00070ee:	83 ec 04             	sub    esp,0x4
c00070f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070fd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007104:	74 10                	je     c0007116 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007106:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000710a:	89 f0                	mov    eax,esi
c000710c:	89 fa                	mov    edx,edi
c000710e:	0f 30                	wrmsr  
c0007110:	83 c4 04             	add    esp,0x4
c0007113:	5e                   	pop    esi
c0007114:	5f                   	pop    edi
c0007115:	c3                   	ret    
c0007116:	83 ec 0c             	sub    esp,0xc
c0007119:	68 dc 05 02 c0       	push   0xc00205dc
c000711e:	e8 2e a1 00 00       	call   c0011251 <KePanic(char const*)>
c0007123:	83 c4 10             	add    esp,0x10
c0007126:	eb de                	jmp    c0007106 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007128 <Computer::shutdown()>:
c0007128:	83 ec 0c             	sub    esp,0xc
c000712b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000712f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007131:	6a 00                	push   0x0
c0007133:	6a 00                	push   0x0
c0007135:	6a 00                	push   0x0
c0007137:	50                   	push   eax
c0007138:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000713b:	83 c4 1c             	add    esp,0x1c
c000713e:	c3                   	ret    
c000713f:	90                   	nop

c0007140 <Computer::restart()>:
c0007140:	83 ec 0c             	sub    esp,0xc
c0007143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007147:	8b 10                	mov    edx,DWORD PTR [eax]
c0007149:	6a 00                	push   0x0
c000714b:	6a 00                	push   0x0
c000714d:	6a 01                	push   0x1
c000714f:	50                   	push   eax
c0007150:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007153:	83 c4 1c             	add    esp,0x1c
c0007156:	c3                   	ret    
c0007157:	90                   	nop

c0007158 <Computer::sleep()>:
c0007158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000715c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007162:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007166:	e9 61 88 00 00       	jmp    c000f9cc <ACPI::sleep()>
c000716b:	90                   	nop

c000716c <Computer::nmiEnabled()>:
c000716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007170:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007176:	c3                   	ret    
c0007177:	90                   	nop

c0007178 <Computer::readCMOS(unsigned char)>:
c0007178:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000717c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007180:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0007187:	75 09                	jne    c0007192 <Computer::readCMOS(unsigned char)+0x1a>
c0007189:	b2 80                	mov    dl,0x80
c000718b:	09 d0                	or     eax,edx
c000718d:	e6 70                	out    0x70,al
c000718f:	e4 71                	in     al,0x71
c0007191:	c3                   	ret    
c0007192:	31 d2                	xor    edx,edx
c0007194:	eb f5                	jmp    c000718b <Computer::readCMOS(unsigned char)+0x13>

c0007196 <Computer::enableNMI(bool)>:
c0007196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000719a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000719e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071a4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071ac:	eb ca                	jmp    c0007178 <Computer::readCMOS(unsigned char)>

c00071ae <Computer::open(int, int, void*)>:
c00071ae:	56                   	push   esi
c00071af:	53                   	push   ebx
c00071b0:	83 ec 10             	sub    esp,0x10
c00071b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071b7:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071be:	68 e2 05 02 c0       	push   0xc00205e2
c00071c3:	0f 94 05 60 2f 02 c0 	sete   BYTE PTR ds:0xc0022f60
c00071ca:	e8 ac 99 00 00       	call   c0010b7b <KeSetBootMessage(char const*)>
c00071cf:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071d6:	e8 db 08 00 00       	call   c0007ab6 <malloc>
c00071db:	89 04 24             	mov    DWORD PTR [esp],eax
c00071de:	89 c6                	mov    esi,eax
c00071e0:	e8 5b 83 00 00       	call   c000f540 <ACPI::ACPI()>
c00071e5:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071eb:	58                   	pop    eax
c00071ec:	5a                   	pop    edx
c00071ed:	56                   	push   esi
c00071ee:	53                   	push   ebx
c00071ef:	e8 2e 54 00 00       	call   c000c622 <Device::addChild(Device*)>
c00071f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071f7:	e8 9c fc ff ff       	call   c0006e98 <Computer::detectFeatures()>
c00071fc:	59                   	pop    ecx
c00071fd:	5e                   	pop    esi
c00071fe:	6a 01                	push   0x1
c0007200:	53                   	push   ebx
c0007201:	e8 90 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c0007206:	c7 04 24 fa 05 02 c0 	mov    DWORD PTR [esp],0xc00205fa
c000720d:	e8 69 99 00 00       	call   c0010b7b <KeSetBootMessage(char const*)>
c0007212:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007219:	e8 98 08 00 00       	call   c0007ab6 <malloc>
c000721e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007221:	89 c6                	mov    esi,eax
c0007223:	e8 44 8e 00 00       	call   c001006c <CPU::CPU()>
c0007228:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000722e:	58                   	pop    eax
c000722f:	5a                   	pop    edx
c0007230:	56                   	push   esi
c0007231:	53                   	push   ebx
c0007232:	e8 eb 53 00 00       	call   c000c622 <Device::addChild(Device*)>
c0007237:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000723d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007241:	8b 10                	mov    edx,DWORD PTR [eax]
c0007243:	51                   	push   ecx
c0007244:	6a 00                	push   0x0
c0007246:	6a 00                	push   0x0
c0007248:	50                   	push   eax
c0007249:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000724c:	83 c4 14             	add    esp,0x14
c000724f:	68 a8 06 02 c0       	push   0xc00206a8
c0007254:	e8 22 99 00 00       	call   c0010b7b <KeSetBootMessage(char const*)>
c0007259:	e8 aa 07 01 00       	call   c0017a08 <HalInitialiseCoprocessor()>
c000725e:	c7 04 24 14 06 02 c0 	mov    DWORD PTR [esp],0xc0020614
c0007265:	e8 11 99 00 00       	call   c0010b7b <KeSetBootMessage(char const*)>
c000726a:	c7 04 24 a8 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca8
c0007271:	e8 76 e7 00 00       	call   c00159ec <setupMultitasking(void (*)())>
c0007276:	83 c4 14             	add    esp,0x14
c0007279:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000727e:	5b                   	pop    ebx
c000727f:	5e                   	pop    esi
c0007280:	c3                   	ret    
c0007281:	90                   	nop

c0007282 <Computer::disableNMI()>:
c0007282:	6a 00                	push   0x0
c0007284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007288:	50                   	push   eax
c0007289:	e8 08 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c000728e:	5a                   	pop    edx
c000728f:	59                   	pop    ecx
c0007290:	c3                   	ret    
c0007291:	90                   	nop

c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007292:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000729a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000729e:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00072a5:	75 0b                	jne    c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c00072a7:	b1 80                	mov    cl,0x80
c00072a9:	09 c8                	or     eax,ecx
c00072ab:	e6 70                	out    0x70,al
c00072ad:	88 d0                	mov    al,dl
c00072af:	e6 71                	out    0x71,al
c00072b1:	c3                   	ret    
c00072b2:	31 c9                	xor    ecx,ecx
c00072b4:	eb f3                	jmp    c00072a9 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072b6 <Computer::handleNMI()>:
c00072b6:	56                   	push   esi
c00072b7:	53                   	push   ebx
c00072b8:	83 ec 10             	sub    esp,0x10
c00072bb:	e4 92                	in     al,0x92
c00072bd:	89 c6                	mov    esi,eax
c00072bf:	e4 61                	in     al,0x61
c00072c1:	68 2f 06 02 c0       	push   0xc002062f
c00072c6:	88 c3                	mov    bl,al
c00072c8:	e8 78 36 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00072cd:	83 c4 10             	add    esp,0x10
c00072d0:	83 e6 10             	and    esi,0x10
c00072d3:	75 10                	jne    c00072e5 <Computer::handleNMI()+0x2f>
c00072d5:	f6 c3 40             	test   bl,0x40
c00072d8:	75 20                	jne    c00072fa <Computer::handleNMI()+0x44>
c00072da:	80 e3 80             	and    bl,0x80
c00072dd:	75 30                	jne    c000730f <Computer::handleNMI()+0x59>
c00072df:	83 c4 04             	add    esp,0x4
c00072e2:	5b                   	pop    ebx
c00072e3:	5e                   	pop    esi
c00072e4:	c3                   	ret    
c00072e5:	83 ec 0c             	sub    esp,0xc
c00072e8:	68 40 06 02 c0       	push   0xc0020640
c00072ed:	e8 5f 9f 00 00       	call   c0011251 <KePanic(char const*)>
c00072f2:	83 c4 10             	add    esp,0x10
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	74 e0                	je     c00072da <Computer::handleNMI()+0x24>
c00072fa:	83 ec 0c             	sub    esp,0xc
c00072fd:	68 4d 06 02 c0       	push   0xc002064d
c0007302:	e8 4a 9f 00 00       	call   c0011251 <KePanic(char const*)>
c0007307:	83 c4 10             	add    esp,0x10
c000730a:	80 e3 80             	and    bl,0x80
c000730d:	74 d0                	je     c00072df <Computer::handleNMI()+0x29>
c000730f:	c7 44 24 10 57 06 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020657
c0007317:	83 c4 04             	add    esp,0x4
c000731a:	5b                   	pop    ebx
c000731b:	5e                   	pop    esi
c000731c:	e9 30 9f 00 00       	jmp    c0011251 <KePanic(char const*)>
c0007321:	90                   	nop

c0007322 <GDTEntry::setBase(unsigned int)>:
c0007322:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007326:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000732a:	89 c1                	mov    ecx,eax
c000732c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007330:	c1 e9 10             	shr    ecx,0x10
c0007333:	c1 e8 18             	shr    eax,0x18
c0007336:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007339:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000733c:	c3                   	ret    
c000733d:	90                   	nop

c000733e <GDTEntry::setLimit(unsigned int)>:
c000733e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007349:	66 89 01             	mov    WORD PTR [ecx],ax
c000734c:	83 e2 f0             	and    edx,0xfffffff0
c000734f:	c1 e8 10             	shr    eax,0x10
c0007352:	83 e0 0f             	and    eax,0xf
c0007355:	09 d0                	or     eax,edx
c0007357:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000735a:	c3                   	ret    
c000735b:	90                   	nop

c000735c <GDT::GDT()>:
c000735c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007360:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000736a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007370:	90                   	nop
c0007371:	c3                   	ret    

c0007372 <GDT::addEntry(GDTEntry)>:
c0007372:	53                   	push   ebx
c0007373:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000737b:	8b 02                	mov    eax,DWORD PTR [edx]
c000737d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007381:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007385:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007389:	8d 48 01             	lea    ecx,[eax+0x1]
c000738c:	c1 e0 03             	shl    eax,0x3
c000738f:	89 0a                	mov    DWORD PTR [edx],ecx
c0007391:	5b                   	pop    ebx
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::getNumberOfEntries()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 00                	mov    eax,DWORD PTR [eax]
c000739a:	c3                   	ret    
c000739b:	90                   	nop

c000739c <GDT::flush()>:
c000739c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073a2:	83 c0 04             	add    eax,0x4
c00073a5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073ac:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073b1:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073b8:	e9 9d 8f ff ff       	jmp    c000035a <loadGDT>
c00073bd:	90                   	nop

c00073be <GDT::setup()>:
c00073be:	57                   	push   edi
c00073bf:	56                   	push   esi
c00073c0:	53                   	push   ebx
c00073c1:	83 ec 30             	sub    esp,0x30
c00073c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c8:	6a 00                	push   0x0
c00073ca:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ce:	56                   	push   esi
c00073cf:	e8 4e ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073d4:	6a 00                	push   0x0
c00073d6:	56                   	push   esi
c00073d7:	e8 62 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073dc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073e4:	6a 00                	push   0x0
c00073e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073ea:	56                   	push   esi
c00073eb:	e8 32 ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073f0:	68 ff ff ff 00       	push   0xffffff
c00073f5:	56                   	push   esi
c00073f6:	e8 43 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073fb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007403:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007407:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000740b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007410:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007415:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007419:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000741d:	89 f8                	mov    eax,edi
c000741f:	89 fa                	mov    edx,edi
c0007421:	80 e4 f7             	and    ah,0xf7
c0007424:	80 ce 60             	or     dh,0x60
c0007427:	89 c7                	mov    edi,eax
c0007429:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000742d:	80 cc 60             	or     ah,0x60
c0007430:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007434:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007438:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000743c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007440:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007444:	83 c4 20             	add    esp,0x20
c0007447:	6a 00                	push   0x0
c0007449:	8d 44 24 24          	lea    eax,[esp+0x24]
c000744d:	50                   	push   eax
c000744e:	e8 cf fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007453:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007457:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000745b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000745f:	83 e0 3f             	and    eax,0x3f
c0007462:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007466:	6a 00                	push   0x0
c0007468:	8d 44 24 34          	lea    eax,[esp+0x34]
c000746c:	50                   	push   eax
c000746d:	e8 b0 fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007472:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007476:	83 e0 3f             	and    eax,0x3f
c0007479:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000747d:	83 c4 0c             	add    esp,0xc
c0007480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007488:	53                   	push   ebx
c0007489:	e8 e4 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000748e:	83 c4 0c             	add    esp,0xc
c0007491:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007495:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007499:	53                   	push   ebx
c000749a:	e8 d3 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000749f:	83 c4 0c             	add    esp,0xc
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	e8 c8 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074aa:	83 c4 0c             	add    esp,0xc
c00074ad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b5:	53                   	push   ebx
c00074b6:	e8 b7 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074bb:	83 c4 0c             	add    esp,0xc
c00074be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c6:	53                   	push   ebx
c00074c7:	e8 a6 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074cc:	83 c4 0c             	add    esp,0xc
c00074cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d7:	53                   	push   ebx
c00074d8:	e8 95 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074dd:	83 c4 0c             	add    esp,0xc
c00074e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e8:	53                   	push   ebx
c00074e9:	e8 84 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074f1:	e8 a6 fe ff ff       	call   c000739c <GDT::flush()>
c00074f6:	83 c4 40             	add    esp,0x40
c00074f9:	5b                   	pop    ebx
c00074fa:	5e                   	pop    esi
c00074fb:	5f                   	pop    edi
c00074fc:	c3                   	ret    

c00074fd <idleFunction(void*)>:
c00074fd:	83 ec 0c             	sub    esp,0xc
c0007500:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007505:	48                   	dec    eax
c0007506:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000750b:	75 01                	jne    c000750e <idleFunction(void*)+0x11>
c000750d:	fb                   	sti    
c000750e:	e8 c1 01 01 00       	call   c00176d4 <HalSystemIdle()>
c0007513:	e8 ea 7e 01 00       	call   c001f402 <idleCommon()>
c0007518:	eb f4                	jmp    c000750e <idleFunction(void*)+0x11>
c000751a:	66 90                	xchg   ax,ax

c000751c <IDTEntry::IDTEntry(bool)>:
c000751c:	53                   	push   ebx
c000751d:	83 ec 04             	sub    esp,0x4
c0007520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007524:	88 04 24             	mov    BYTE PTR [esp],al
c0007527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000753d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007540:	83 e2 f0             	and    edx,0xfffffff0
c0007543:	83 ca 0e             	or     edx,0xe
c0007546:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007550:	83 e2 ef             	and    edx,0xffffffef
c0007553:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007556:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000755a:	85 c0                	test   eax,eax
c000755c:	74 06                	je     c0007564 <IDTEntry::IDTEntry(bool)+0x48>
c000755e:	b2 03                	mov    dl,0x3
c0007560:	eb 06                	jmp    c0007568 <IDTEntry::IDTEntry(bool)+0x4c>
c0007562:	66 90                	xchg   ax,ax
c0007564:	b2 00                	mov    dl,0x0
c0007566:	66 90                	xchg   ax,ax
c0007568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756c:	83 e2 03             	and    edx,0x3
c000756f:	89 d3                	mov    ebx,edx
c0007571:	c1 e3 05             	shl    ebx,0x5
c0007574:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007577:	83 e2 9f             	and    edx,0xffffff9f
c000757a:	88 d1                	mov    cl,dl
c000757c:	88 da                	mov    dl,bl
c000757e:	09 ca                	or     edx,ecx
c0007580:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007587:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758a:	83 ca 80             	or     edx,0xffffff80
c000758d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007590:	90                   	nop
c0007591:	83 c4 04             	add    esp,0x4
c0007594:	5b                   	pop    ebx
c0007595:	c3                   	ret    

c0007596 <IDTEntry::setOffset(unsigned int)>:
c0007596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000759a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759e:	66 89 02             	mov    WORD PTR [edx],ax
c00075a1:	c1 e8 10             	shr    eax,0x10
c00075a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a8:	c3                   	ret    
c00075a9:	90                   	nop
c00075aa:	66 90                	xchg   ax,ax

c00075ac <IDT::IDT()>:
c00075ac:	90                   	nop
c00075ad:	c3                   	ret    

c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075b2:	83 c0 30             	add    eax,0x30
c00075b5:	c3                   	ret    

c00075b6 <IDT::addEntry(IDTEntry, int)>:
c00075b6:	53                   	push   ebx
c00075b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075c7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ca:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ce:	5b                   	pop    ebx
c00075cf:	c3                   	ret    

c00075d0 <IDT::addEntry(int, void (*)(), bool)>:
c00075d0:	53                   	push   ebx
c00075d1:	83 ec 10             	sub    esp,0x10
c00075d4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d9:	50                   	push   eax
c00075da:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075de:	53                   	push   ebx
c00075df:	e8 38 ff ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c00075e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e8:	53                   	push   ebx
c00075e9:	e8 a8 ff ff ff       	call   c0007596 <IDTEntry::setOffset(unsigned int)>
c00075ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075fe:	e8 b3 ff ff ff       	call   c00075b6 <IDT::addEntry(IDTEntry, int)>
c0007603:	83 c4 30             	add    esp,0x30
c0007606:	5b                   	pop    ebx
c0007607:	c3                   	ret    

c0007608 <IDT::flush()>:
c0007608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000760c:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c0007615:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c000761a:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007621:	c3                   	ret    

c0007622 <IDT::setup()>:
c0007622:	57                   	push   edi
c0007623:	56                   	push   esi
c0007624:	53                   	push   ebx
c0007625:	83 ec 10             	sub    esp,0x10
c0007628:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000762c:	6a 00                	push   0x0
c000762e:	68 00 eb 01 c0       	push   0xc001eb00
c0007633:	6a 00                	push   0x0
c0007635:	53                   	push   ebx
c0007636:	e8 95 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000763b:	6a 00                	push   0x0
c000763d:	68 10 eb 01 c0       	push   0xc001eb10
c0007642:	6a 01                	push   0x1
c0007644:	53                   	push   ebx
c0007645:	e8 86 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000764a:	83 c4 20             	add    esp,0x20
c000764d:	6a 00                	push   0x0
c000764f:	68 1a eb 01 c0       	push   0xc001eb1a
c0007654:	6a 02                	push   0x2
c0007656:	53                   	push   ebx
c0007657:	e8 74 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000765c:	6a 00                	push   0x0
c000765e:	68 24 eb 01 c0       	push   0xc001eb24
c0007663:	6a 03                	push   0x3
c0007665:	53                   	push   ebx
c0007666:	e8 65 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000766b:	83 c4 20             	add    esp,0x20
c000766e:	6a 00                	push   0x0
c0007670:	68 2e eb 01 c0       	push   0xc001eb2e
c0007675:	6a 04                	push   0x4
c0007677:	53                   	push   ebx
c0007678:	e8 53 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000767d:	6a 00                	push   0x0
c000767f:	68 38 eb 01 c0       	push   0xc001eb38
c0007684:	6a 05                	push   0x5
c0007686:	53                   	push   ebx
c0007687:	e8 44 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000768c:	83 c4 20             	add    esp,0x20
c000768f:	6a 00                	push   0x0
c0007691:	68 42 eb 01 c0       	push   0xc001eb42
c0007696:	6a 06                	push   0x6
c0007698:	53                   	push   ebx
c0007699:	e8 32 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000769e:	6a 00                	push   0x0
c00076a0:	68 4c eb 01 c0       	push   0xc001eb4c
c00076a5:	6a 07                	push   0x7
c00076a7:	53                   	push   ebx
c00076a8:	e8 23 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ad:	83 c4 20             	add    esp,0x20
c00076b0:	6a 00                	push   0x0
c00076b2:	68 56 eb 01 c0       	push   0xc001eb56
c00076b7:	6a 08                	push   0x8
c00076b9:	53                   	push   ebx
c00076ba:	e8 11 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076bf:	6a 00                	push   0x0
c00076c1:	68 5e eb 01 c0       	push   0xc001eb5e
c00076c6:	6a 09                	push   0x9
c00076c8:	53                   	push   ebx
c00076c9:	e8 02 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ce:	83 c4 20             	add    esp,0x20
c00076d1:	6a 00                	push   0x0
c00076d3:	68 68 eb 01 c0       	push   0xc001eb68
c00076d8:	6a 0a                	push   0xa
c00076da:	53                   	push   ebx
c00076db:	e8 f0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076e0:	6a 00                	push   0x0
c00076e2:	68 70 eb 01 c0       	push   0xc001eb70
c00076e7:	6a 0b                	push   0xb
c00076e9:	53                   	push   ebx
c00076ea:	e8 e1 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ef:	83 c4 20             	add    esp,0x20
c00076f2:	6a 00                	push   0x0
c00076f4:	68 78 eb 01 c0       	push   0xc001eb78
c00076f9:	6a 0c                	push   0xc
c00076fb:	53                   	push   ebx
c00076fc:	e8 cf fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007701:	6a 00                	push   0x0
c0007703:	68 80 eb 01 c0       	push   0xc001eb80
c0007708:	6a 0d                	push   0xd
c000770a:	53                   	push   ebx
c000770b:	e8 c0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007710:	83 c4 20             	add    esp,0x20
c0007713:	6a 00                	push   0x0
c0007715:	68 9a eb 01 c0       	push   0xc001eb9a
c000771a:	6a 0e                	push   0xe
c000771c:	53                   	push   ebx
c000771d:	e8 ae fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007722:	6a 00                	push   0x0
c0007724:	68 a2 eb 01 c0       	push   0xc001eba2
c0007729:	6a 0f                	push   0xf
c000772b:	53                   	push   ebx
c000772c:	e8 9f fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007731:	83 c4 20             	add    esp,0x20
c0007734:	6a 00                	push   0x0
c0007736:	68 ac eb 01 c0       	push   0xc001ebac
c000773b:	6a 10                	push   0x10
c000773d:	53                   	push   ebx
c000773e:	e8 8d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007743:	6a 00                	push   0x0
c0007745:	68 b6 eb 01 c0       	push   0xc001ebb6
c000774a:	6a 11                	push   0x11
c000774c:	53                   	push   ebx
c000774d:	e8 7e fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	6a 00                	push   0x0
c0007757:	68 c0 eb 01 c0       	push   0xc001ebc0
c000775c:	6a 12                	push   0x12
c000775e:	53                   	push   ebx
c000775f:	e8 6c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007764:	6a 01                	push   0x1
c0007766:	68 5a ec 01 c0       	push   0xc001ec5a
c000776b:	6a 60                	push   0x60
c000776d:	53                   	push   ebx
c000776e:	e8 5d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007773:	83 c4 20             	add    esp,0x20
c0007776:	6a 00                	push   0x0
c0007778:	68 61 ec 01 c0       	push   0xc001ec61
c000777d:	6a 20                	push   0x20
c000777f:	53                   	push   ebx
c0007780:	e8 4b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007785:	6a 00                	push   0x0
c0007787:	68 4c ec 01 c0       	push   0xc001ec4c
c000778c:	6a 21                	push   0x21
c000778e:	53                   	push   ebx
c000778f:	e8 3c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007794:	83 c4 20             	add    esp,0x20
c0007797:	6a 00                	push   0x0
c0007799:	68 53 ec 01 c0       	push   0xc001ec53
c000779e:	6a 22                	push   0x22
c00077a0:	53                   	push   ebx
c00077a1:	e8 2a fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077a6:	6a 00                	push   0x0
c00077a8:	68 ca eb 01 c0       	push   0xc001ebca
c00077ad:	6a 23                	push   0x23
c00077af:	53                   	push   ebx
c00077b0:	e8 1b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077b5:	83 c4 20             	add    esp,0x20
c00077b8:	6a 00                	push   0x0
c00077ba:	68 d4 eb 01 c0       	push   0xc001ebd4
c00077bf:	6a 24                	push   0x24
c00077c1:	53                   	push   ebx
c00077c2:	e8 09 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077c7:	6a 00                	push   0x0
c00077c9:	68 de eb 01 c0       	push   0xc001ebde
c00077ce:	6a 25                	push   0x25
c00077d0:	53                   	push   ebx
c00077d1:	e8 fa fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077d6:	83 c4 20             	add    esp,0x20
c00077d9:	6a 00                	push   0x0
c00077db:	68 e8 eb 01 c0       	push   0xc001ebe8
c00077e0:	6a 26                	push   0x26
c00077e2:	53                   	push   ebx
c00077e3:	e8 e8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077e8:	6a 00                	push   0x0
c00077ea:	68 f2 eb 01 c0       	push   0xc001ebf2
c00077ef:	6a 27                	push   0x27
c00077f1:	53                   	push   ebx
c00077f2:	e8 d9 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077f7:	83 c4 20             	add    esp,0x20
c00077fa:	6a 00                	push   0x0
c00077fc:	68 fc eb 01 c0       	push   0xc001ebfc
c0007801:	6a 28                	push   0x28
c0007803:	53                   	push   ebx
c0007804:	e8 c7 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007809:	6a 00                	push   0x0
c000780b:	68 06 ec 01 c0       	push   0xc001ec06
c0007810:	6a 29                	push   0x29
c0007812:	53                   	push   ebx
c0007813:	e8 b8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007818:	83 c4 20             	add    esp,0x20
c000781b:	6a 00                	push   0x0
c000781d:	68 10 ec 01 c0       	push   0xc001ec10
c0007822:	6a 2a                	push   0x2a
c0007824:	53                   	push   ebx
c0007825:	e8 a6 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000782a:	6a 00                	push   0x0
c000782c:	68 1a ec 01 c0       	push   0xc001ec1a
c0007831:	6a 2b                	push   0x2b
c0007833:	53                   	push   ebx
c0007834:	e8 97 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007839:	83 c4 20             	add    esp,0x20
c000783c:	6a 00                	push   0x0
c000783e:	68 24 ec 01 c0       	push   0xc001ec24
c0007843:	6a 2c                	push   0x2c
c0007845:	53                   	push   ebx
c0007846:	e8 85 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000784b:	6a 00                	push   0x0
c000784d:	68 2e ec 01 c0       	push   0xc001ec2e
c0007852:	6a 2d                	push   0x2d
c0007854:	53                   	push   ebx
c0007855:	e8 76 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000785a:	83 c4 20             	add    esp,0x20
c000785d:	6a 00                	push   0x0
c000785f:	68 38 ec 01 c0       	push   0xc001ec38
c0007864:	6a 2e                	push   0x2e
c0007866:	53                   	push   ebx
c0007867:	e8 64 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000786c:	6a 00                	push   0x0
c000786e:	68 42 ec 01 c0       	push   0xc001ec42
c0007873:	6a 2f                	push   0x2f
c0007875:	53                   	push   ebx
c0007876:	e8 55 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000787b:	83 c4 20             	add    esp,0x20
c000787e:	6a 00                	push   0x0
c0007880:	68 9c ed 01 c0       	push   0xc001ed9c
c0007885:	6a 30                	push   0x30
c0007887:	53                   	push   ebx
c0007888:	e8 43 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000788d:	6a 00                	push   0x0
c000788f:	68 a6 ed 01 c0       	push   0xc001eda6
c0007894:	6a 31                	push   0x31
c0007896:	53                   	push   ebx
c0007897:	e8 34 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000789c:	83 c4 20             	add    esp,0x20
c000789f:	6a 00                	push   0x0
c00078a1:	68 b0 ed 01 c0       	push   0xc001edb0
c00078a6:	6a 32                	push   0x32
c00078a8:	53                   	push   ebx
c00078a9:	e8 22 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ae:	6a 00                	push   0x0
c00078b0:	68 ba ed 01 c0       	push   0xc001edba
c00078b5:	6a 33                	push   0x33
c00078b7:	53                   	push   ebx
c00078b8:	e8 13 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078bd:	83 c4 20             	add    esp,0x20
c00078c0:	6a 00                	push   0x0
c00078c2:	68 c4 ed 01 c0       	push   0xc001edc4
c00078c7:	6a 34                	push   0x34
c00078c9:	53                   	push   ebx
c00078ca:	e8 01 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078cf:	6a 00                	push   0x0
c00078d1:	68 ce ed 01 c0       	push   0xc001edce
c00078d6:	6a 35                	push   0x35
c00078d8:	53                   	push   ebx
c00078d9:	e8 f2 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078de:	83 c4 20             	add    esp,0x20
c00078e1:	6a 00                	push   0x0
c00078e3:	68 d8 ed 01 c0       	push   0xc001edd8
c00078e8:	6a 36                	push   0x36
c00078ea:	53                   	push   ebx
c00078eb:	e8 e0 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078f0:	6a 00                	push   0x0
c00078f2:	68 e2 ed 01 c0       	push   0xc001ede2
c00078f7:	6a 37                	push   0x37
c00078f9:	53                   	push   ebx
c00078fa:	e8 d1 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ff:	83 c4 1c             	add    esp,0x1c
c0007902:	6a 03                	push   0x3
c0007904:	6a 02                	push   0x2
c0007906:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c000790c:	e8 13 25 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007911:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007918:	89 c6                	mov    esi,eax
c000791a:	e8 97 01 00 00       	call   c0007ab6 <malloc>
c000791f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	89 c7                	mov    edi,eax
c000792a:	e8 15 16 00 00       	call   c0008f44 <TSS::TSS()>
c000792f:	83 c4 0c             	add    esp,0xc
c0007932:	68 56 eb 01 c0       	push   0xc001eb56
c0007937:	56                   	push   esi
c0007938:	57                   	push   edi
c0007939:	e8 4a 16 00 00       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c000793e:	89 c6                	mov    esi,eax
c0007940:	58                   	pop    eax
c0007941:	5a                   	pop    edx
c0007942:	6a 00                	push   0x0
c0007944:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007948:	50                   	push   eax
c0007949:	e8 ce fb ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c000794e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007952:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007957:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000795e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007968:	80 ce 05             	or     dh,0x5
c000796b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000796e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007976:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007979:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000797c:	e8 87 fc ff ff       	call   c0007608 <IDT::flush()>
c0007981:	83 c4 20             	add    esp,0x20
c0007984:	5b                   	pop    ebx
c0007985:	5e                   	pop    esi
c0007986:	5f                   	pop    edi
c0007987:	c3                   	ret    

c0007988 <sbrk>:
c0007988:	55                   	push   ebp
c0007989:	57                   	push   edi
c000798a:	56                   	push   esi
c000798b:	53                   	push   ebx
c000798c:	83 ec 1c             	sub    esp,0x1c
c000798f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007993:	85 c0                	test   eax,eax
c0007995:	74 61                	je     c00079f8 <sbrk+0x70>
c0007997:	78 66                	js     c00079ff <sbrk+0x77>
c0007999:	8b 15 54 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f54
c000799f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079a3:	05 ff 0f 00 00       	add    eax,0xfff
c00079a8:	89 c5                	mov    ebp,eax
c00079aa:	78 6b                	js     c0007a17 <sbrk+0x8f>
c00079ac:	c1 fd 0c             	sar    ebp,0xc
c00079af:	bb 00 00 00 00       	mov    ebx,0x0
c00079b4:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079ba:	8b 3d 54 2f 02 c0    	mov    edi,DWORD PTR ds:0xc0022f54
c00079c0:	e8 fa 03 00 00       	call   c0007dbf <Phys::allocatePage()>
c00079c5:	68 01 04 00 00       	push   0x401
c00079ca:	57                   	push   edi
c00079cb:	50                   	push   eax
c00079cc:	56                   	push   esi
c00079cd:	e8 4e 23 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079d2:	81 05 54 2f 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0022f54,0x1000
c00079dc:	83 c3 01             	add    ebx,0x1
c00079df:	83 c4 10             	add    esp,0x10
c00079e2:	39 dd                	cmp    ebp,ebx
c00079e4:	75 ce                	jne    c00079b4 <sbrk+0x2c>
c00079e6:	0f 20 d8             	mov    eax,cr3
c00079e9:	0f 22 d8             	mov    cr3,eax
c00079ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079f0:	83 c4 1c             	add    esp,0x1c
c00079f3:	5b                   	pop    ebx
c00079f4:	5e                   	pop    esi
c00079f5:	5f                   	pop    edi
c00079f6:	5d                   	pop    ebp
c00079f7:	c3                   	ret    
c00079f8:	a1 54 2f 02 c0       	mov    eax,ds:0xc0022f54
c00079fd:	eb f1                	jmp    c00079f0 <sbrk+0x68>
c00079ff:	83 ec 08             	sub    esp,0x8
c0007a02:	50                   	push   eax
c0007a03:	68 f8 06 02 c0       	push   0xc00206f8
c0007a08:	e8 38 2f 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007a0d:	83 c4 10             	add    esp,0x10
c0007a10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a15:	eb d9                	jmp    c00079f0 <sbrk+0x68>
c0007a17:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a1d:	eb 8d                	jmp    c00079ac <sbrk+0x24>

c0007a1f <mmap>:
c0007a1f:	83 ec 18             	sub    esp,0x18
c0007a22:	68 28 07 02 c0       	push   0xc0020728
c0007a27:	e8 25 98 00 00       	call   c0011251 <KePanic(char const*)>
c0007a2c:	b8 00 00 00 00       	mov    eax,0x0
c0007a31:	83 c4 1c             	add    esp,0x1c
c0007a34:	c3                   	ret    

c0007a35 <munmap>:
c0007a35:	83 ec 18             	sub    esp,0x18
c0007a38:	68 2d 07 02 c0       	push   0xc002072d
c0007a3d:	e8 0f 98 00 00       	call   c0011251 <KePanic(char const*)>
c0007a42:	b8 00 00 00 00       	mov    eax,0x0
c0007a47:	83 c4 1c             	add    esp,0x1c
c0007a4a:	c3                   	ret    

c0007a4b <liballoc_lock()>:
c0007a4b:	fa                   	cli    
c0007a4c:	83 05 c8 96 02 c0 01 	add    DWORD PTR ds:0xc00296c8,0x1
c0007a53:	b8 00 00 00 00       	mov    eax,0x0
c0007a58:	c3                   	ret    

c0007a59 <liballoc_unlock()>:
c0007a59:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007a5e:	83 e8 01             	sub    eax,0x1
c0007a61:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007a66:	75 01                	jne    c0007a69 <liballoc_unlock()+0x10>
c0007a68:	fb                   	sti    
c0007a69:	b8 00 00 00 00       	mov    eax,0x0
c0007a6e:	c3                   	ret    

c0007a6f <liballoc_alloc(int)>:
c0007a6f:	83 ec 10             	sub    esp,0x10
c0007a72:	6a 01                	push   0x1
c0007a74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a78:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a7e:	e8 a1 23 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007a83:	83 c4 1c             	add    esp,0x1c
c0007a86:	c3                   	ret    

c0007a87 <liballoc_free(void*, int)>:
c0007a87:	83 ec 14             	sub    esp,0x14
c0007a8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8e:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a94:	e8 cf 1f 00 00       	call   c0009a68 <VAS::freeAllocatedPages(unsigned long)>
c0007a99:	b8 00 00 00 00       	mov    eax,0x0
c0007a9e:	83 c4 1c             	add    esp,0x1c
c0007aa1:	c3                   	ret    

c0007aa2 <realloc>:
c0007aa2:	83 ec 14             	sub    esp,0x14
c0007aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aad:	e8 36 9b ff ff       	call   c00015e8 <dlrealloc>
c0007ab2:	83 c4 1c             	add    esp,0x1c
c0007ab5:	c3                   	ret    

c0007ab6 <malloc>:
c0007ab6:	83 ec 18             	sub    esp,0x18
c0007ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abd:	e8 e9 95 ff ff       	call   c00010ab <dlmalloc>
c0007ac2:	83 c4 1c             	add    esp,0x1c
c0007ac5:	c3                   	ret    

c0007ac6 <free>:
c0007ac6:	83 ec 18             	sub    esp,0x18
c0007ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007acd:	e8 81 92 ff ff       	call   c0000d53 <dlfree>
c0007ad2:	83 c4 1c             	add    esp,0x1c
c0007ad5:	c3                   	ret    

c0007ad6 <rfree>:
c0007ad6:	83 ec 18             	sub    esp,0x18
c0007ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007add:	e8 71 92 ff ff       	call   c0000d53 <dlfree>
c0007ae2:	83 c4 1c             	add    esp,0x1c
c0007ae5:	c3                   	ret    

c0007ae6 <calloc>:
c0007ae6:	56                   	push   esi
c0007ae7:	53                   	push   ebx
c0007ae8:	83 ec 10             	sub    esp,0x10
c0007aeb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007aef:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007af4:	53                   	push   ebx
c0007af5:	e8 bc ff ff ff       	call   c0007ab6 <malloc>
c0007afa:	89 c6                	mov    esi,eax
c0007afc:	83 c4 0c             	add    esp,0xc
c0007aff:	53                   	push   ebx
c0007b00:	6a 00                	push   0x0
c0007b02:	50                   	push   eax
c0007b03:	e8 e8 89 ff ff       	call   c00004f0 <memset>
c0007b08:	89 f0                	mov    eax,esi
c0007b0a:	83 c4 14             	add    esp,0x14
c0007b0d:	5b                   	pop    ebx
c0007b0e:	5e                   	pop    esi
c0007b0f:	c3                   	ret    

c0007b10 <KeEntryPoint>:
c0007b10:	57                   	push   edi
c0007b11:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b16:	56                   	push   esi
c0007b17:	89 fa                	mov    edx,edi
c0007b19:	53                   	push   ebx
c0007b1a:	31 f6                	xor    esi,esi
c0007b1c:	83 ec 2c             	sub    esp,0x2c
c0007b1f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b24:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b29:	89 f0                	mov    eax,esi
c0007b2b:	ee                   	out    dx,al
c0007b2c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b31:	b0 80                	mov    al,0x80
c0007b33:	89 da                	mov    edx,ebx
c0007b35:	ee                   	out    dx,al
c0007b36:	b1 03                	mov    cl,0x3
c0007b38:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	ee                   	out    dx,al
c0007b40:	89 f0                	mov    eax,esi
c0007b42:	89 fa                	mov    edx,edi
c0007b44:	ee                   	out    dx,al
c0007b45:	88 c8                	mov    al,cl
c0007b47:	89 da                	mov    edx,ebx
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 c7                	mov    al,0xc7
c0007b4c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b51:	ee                   	out    dx,al
c0007b52:	b0 0b                	mov    al,0xb
c0007b54:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b59:	ee                   	out    dx,al
c0007b5a:	68 34 07 02 c0       	push   0xc0020734
c0007b5f:	e8 e1 2d 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007b64:	e8 96 8f 00 00       	call   c0010aff <KeDisplaySplashScreen()>
c0007b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0007b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b7b:	e8 ad 03 00 00       	call   c0007f2d <Phys::physicalMemorySetup(unsigned int)>
c0007b80:	e8 66 1c 00 00       	call   c00097eb <Virt::virtualMemorySetup()>
c0007b85:	e8 bf 8e 00 00       	call   c0010a49 <KeInitialiseAtexit()>
c0007b8a:	58                   	pop    eax
c0007b8b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b8f:	53                   	push   ebx
c0007b90:	e8 53 1f 00 00       	call   c0009ae8 <VAS::VAS()>
c0007b95:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007b9b:	e8 fa 77 01 00       	call   c001f39a <_init>
c0007ba0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007ba7:	e8 0a ff ff ff       	call   c0007ab6 <malloc>
c0007bac:	89 04 24             	mov    DWORD PTR [esp],eax
c0007baf:	89 c6                	mov    esi,eax
c0007bb1:	e8 30 f2 ff ff       	call   c0006de6 <Computer::Computer()>
c0007bb6:	53                   	push   ebx
c0007bb7:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bbd:	6a 00                	push   0x0
c0007bbf:	6a 00                	push   0x0
c0007bc1:	56                   	push   esi
c0007bc2:	e8 e7 f5 ff ff       	call   c00071ae <Computer::open(int, int, void*)>
c0007bc7:	83 c4 14             	add    esp,0x14
c0007bca:	53                   	push   ebx
c0007bcb:	e8 e2 1f 00 00       	call   c0009bb2 <VAS::~VAS()>
c0007bd0:	83 c4 30             	add    esp,0x30
c0007bd3:	5b                   	pop    ebx
c0007bd4:	5e                   	pop    esi
c0007bd5:	5f                   	pop    edi
c0007bd6:	c3                   	ret    

c0007bd7 <Phys::allocateDMA(unsigned long)>:
c0007bd7:	55                   	push   ebp
c0007bd8:	31 ed                	xor    ebp,ebp
c0007bda:	57                   	push   edi
c0007bdb:	56                   	push   esi
c0007bdc:	53                   	push   ebx
c0007bdd:	31 db                	xor    ebx,ebx
c0007bdf:	83 ec 1c             	sub    esp,0x1c
c0007be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007be6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bee:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bf4:	31 c0                	xor    eax,eax
c0007bf6:	c1 ef 0c             	shr    edi,0xc
c0007bf9:	eb 1b                	jmp    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bfb:	85 c0                	test   eax,eax
c0007bfd:	75 06                	jne    c0007c05 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bff:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c03:	89 dd                	mov    ebp,ebx
c0007c05:	8d 70 01             	lea    esi,[eax+0x1]
c0007c08:	39 f7                	cmp    edi,esi
c0007c0a:	74 37                	je     c0007c43 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c0c:	89 f0                	mov    eax,esi
c0007c0e:	83 c3 01             	add    ebx,0x1
c0007c11:	83 fb 0f             	cmp    ebx,0xf
c0007c14:	7f 13                	jg     c0007c29 <Phys::allocateDMA(unsigned long)+0x52>
c0007c16:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c1d:	74 dc                	je     c0007bfb <Phys::allocateDMA(unsigned long)+0x24>
c0007c1f:	31 c0                	xor    eax,eax
c0007c21:	83 c3 01             	add    ebx,0x1
c0007c24:	83 fb 0f             	cmp    ebx,0xf
c0007c27:	7e ed                	jle    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c29:	83 ec 0c             	sub    esp,0xc
c0007c2c:	68 4c 07 02 c0       	push   0xc002074c
c0007c31:	e8 1b 96 00 00       	call   c0011251 <KePanic(char const*)>
c0007c36:	83 c4 10             	add    esp,0x10
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c4 1c             	add    esp,0x1c
c0007c3e:	5b                   	pop    ebx
c0007c3f:	5e                   	pop    esi
c0007c40:	5f                   	pop    edi
c0007c41:	5d                   	pop    ebp
c0007c42:	c3                   	ret    
c0007c43:	89 e9                	mov    ecx,ebp
c0007c45:	c1 f9 04             	sar    ecx,0x4
c0007c48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c4c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c50:	89 ca                	mov    edx,ecx
c0007c52:	83 ea 01             	sub    edx,0x1
c0007c55:	79 03                	jns    c0007c5a <Phys::allocateDMA(unsigned long)+0x83>
c0007c57:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c5a:	c1 fa 04             	sar    edx,0x4
c0007c5d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c61:	74 08                	je     c0007c6b <Phys::allocateDMA(unsigned long)+0x94>
c0007c63:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c67:	31 c0                	xor    eax,eax
c0007c69:	eb b6                	jmp    c0007c21 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c6b:	85 f6                	test   esi,esi
c0007c6d:	74 17                	je     c0007c86 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c6f:	8d 95 ec 5e 02 c0    	lea    edx,[ebp-0x3ffda114]
c0007c75:	8d 84 05 ed 5e 02 c0 	lea    eax,[ebp+eax*1-0x3ffda113]
c0007c7c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c7f:	83 c2 01             	add    edx,0x1
c0007c82:	39 d0                	cmp    eax,edx
c0007c84:	75 f6                	jne    c0007c7c <Phys::allocateDMA(unsigned long)+0xa5>
c0007c86:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c8f:	01 f8                	add    eax,edi
c0007c91:	85 d2                	test   edx,edx
c0007c93:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007c98:	74 17                	je     c0007cb1 <Phys::allocateDMA(unsigned long)+0xda>
c0007c9a:	83 ec 0c             	sub    esp,0xc
c0007c9d:	68 4c 07 02 c0       	push   0xc002074c
c0007ca2:	e8 aa 95 00 00       	call   c0011251 <KePanic(char const*)>
c0007ca7:	83 c4 10             	add    esp,0x10
c0007caa:	89 f0                	mov    eax,esi
c0007cac:	e9 5d ff ff ff       	jmp    c0007c0e <Phys::allocateDMA(unsigned long)+0x37>
c0007cb1:	c1 e5 0c             	shl    ebp,0xc
c0007cb4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cba:	e9 7c ff ff ff       	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x64>

c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cc3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cc9:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cce:	c1 ea 0c             	shr    edx,0xc
c0007cd1:	29 d0                	sub    eax,edx
c0007cd3:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdc:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007ce1:	c1 e8 0c             	shr    eax,0xc
c0007ce4:	85 d2                	test   edx,edx
c0007ce6:	74 11                	je     c0007cf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007ce8:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007ced:	01 c2                	add    edx,eax
c0007cef:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cf2:	83 c0 01             	add    eax,0x1
c0007cf5:	39 d0                	cmp    eax,edx
c0007cf7:	75 f6                	jne    c0007cef <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cf9:	c3                   	ret    

c0007cfa <Phys::setPageState(unsigned long, bool)>:
c0007cfa:	57                   	push   edi
c0007cfb:	56                   	push   esi
c0007cfc:	8b 35 58 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022f58
c0007d02:	53                   	push   ebx
c0007d03:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d10:	0f b6 c0             	movzx  eax,al
c0007d13:	89 ca                	mov    edx,ecx
c0007d15:	83 e1 07             	and    ecx,0x7
c0007d18:	c1 ea 03             	shr    edx,0x3
c0007d1b:	d3 c3                	rol    ebx,cl
c0007d1d:	01 d6                	add    esi,edx
c0007d1f:	d3 e0                	shl    eax,cl
c0007d21:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d24:	21 fb                	and    ebx,edi
c0007d26:	88 1e                	mov    BYTE PTR [esi],bl
c0007d28:	8b 1d 58 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f58
c0007d2e:	01 da                	add    edx,ebx
c0007d30:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d32:	09 c8                	or     eax,ecx
c0007d34:	88 02                	mov    BYTE PTR [edx],al
c0007d36:	5b                   	pop    ebx
c0007d37:	5e                   	pop    esi
c0007d38:	5f                   	pop    edi
c0007d39:	c3                   	ret    

c0007d3a <Phys::getPageState(unsigned long)>:
c0007d3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d3e:	8b 15 58 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f58
c0007d44:	89 c8                	mov    eax,ecx
c0007d46:	83 e1 07             	and    ecx,0x7
c0007d49:	c1 e8 03             	shr    eax,0x3
c0007d4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d50:	d3 f8                	sar    eax,cl
c0007d52:	83 e0 01             	and    eax,0x1
c0007d55:	c3                   	ret    

c0007d56 <Phys::freePage(unsigned long)>:
c0007d56:	53                   	push   ebx
c0007d57:	83 ec 08             	sub    esp,0x8
c0007d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d64:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d6a:	76 41                	jbe    c0007dad <Phys::freePage(unsigned long)+0x57>
c0007d6c:	c1 e8 0c             	shr    eax,0xc
c0007d6f:	50                   	push   eax
c0007d70:	89 c3                	mov    ebx,eax
c0007d72:	e8 c3 ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007d77:	5a                   	pop    edx
c0007d78:	84 c0                	test   al,al
c0007d7a:	74 20                	je     c0007d9c <Phys::freePage(unsigned long)+0x46>
c0007d7c:	83 ec 08             	sub    esp,0x8
c0007d7f:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007d84:	6a 00                	push   0x0
c0007d86:	83 e8 01             	sub    eax,0x1
c0007d89:	53                   	push   ebx
c0007d8a:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007d8f:	e8 66 ff ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007d94:	83 c4 10             	add    esp,0x10
c0007d97:	83 c4 08             	add    esp,0x8
c0007d9a:	5b                   	pop    ebx
c0007d9b:	c3                   	ret    
c0007d9c:	c7 44 24 10 f1 07 02 c0 	mov    DWORD PTR [esp+0x10],0xc00207f1
c0007da4:	83 c4 08             	add    esp,0x8
c0007da7:	5b                   	pop    ebx
c0007da8:	e9 a4 94 00 00       	jmp    c0011251 <KePanic(char const*)>
c0007dad:	68 00 10 00 00       	push   0x1000
c0007db2:	50                   	push   eax
c0007db3:	e8 07 ff ff ff       	call   c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>
c0007db8:	59                   	pop    ecx
c0007db9:	5b                   	pop    ebx
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    

c0007dbf <Phys::allocatePage()>:
c0007dbf:	56                   	push   esi
c0007dc0:	53                   	push   ebx
c0007dc1:	83 ec 14             	sub    esp,0x14
c0007dc4:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007dca:	89 f3                	mov    ebx,esi
c0007dcc:	eb 0a                	jmp    c0007dd8 <Phys::allocatePage()+0x19>
c0007dce:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007dd4:	39 de                	cmp    esi,ebx
c0007dd6:	74 26                	je     c0007dfe <Phys::allocatePage()+0x3f>
c0007dd8:	53                   	push   ebx
c0007dd9:	e8 5c ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007dde:	5a                   	pop    edx
c0007ddf:	84 c0                	test   al,al
c0007de1:	74 67                	je     c0007e4a <Phys::allocatePage()+0x8b>
c0007de3:	83 c3 01             	add    ebx,0x1
c0007de6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007dec:	75 e0                	jne    c0007dce <Phys::allocatePage()+0xf>
c0007dee:	31 db                	xor    ebx,ebx
c0007df0:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007dfa:	39 de                	cmp    esi,ebx
c0007dfc:	75 da                	jne    c0007dd8 <Phys::allocatePage()+0x19>
c0007dfe:	83 ec 0c             	sub    esp,0xc
c0007e01:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007e06:	83 f0 01             	xor    eax,0x1
c0007e09:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e16:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e1c:	50                   	push   eax
c0007e1d:	e8 a8 27 00 00       	call   c000a5ca <VAS::scanForEviction()>
c0007e22:	83 c4 10             	add    esp,0x10
c0007e25:	85 c0                	test   eax,eax
c0007e27:	75 48                	jne    c0007e71 <Phys::allocatePage()+0xb2>
c0007e29:	83 ec 0c             	sub    esp,0xc
c0007e2c:	68 74 07 02 c0       	push   0xc0020774
c0007e31:	e8 1b 94 00 00       	call   c0011251 <KePanic(char const*)>
c0007e36:	83 c4 10             	add    esp,0x10
c0007e39:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e3f:	53                   	push   ebx
c0007e40:	e8 f5 fe ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007e45:	5a                   	pop    edx
c0007e46:	84 c0                	test   al,al
c0007e48:	75 99                	jne    c0007de3 <Phys::allocatePage()+0x24>
c0007e4a:	6a 01                	push   0x1
c0007e4c:	53                   	push   ebx
c0007e4d:	e8 a8 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e52:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e58:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e5d:	83 c2 01             	add    edx,0x1
c0007e60:	59                   	pop    ecx
c0007e61:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e67:	c1 e0 0c             	shl    eax,0xc
c0007e6a:	5b                   	pop    ebx
c0007e6b:	83 c4 14             	add    esp,0x14
c0007e6e:	5b                   	pop    ebx
c0007e6f:	5e                   	pop    esi
c0007e70:	c3                   	ret    
c0007e71:	83 ec 08             	sub    esp,0x8
c0007e74:	89 c2                	mov    edx,eax
c0007e76:	6a 01                	push   0x1
c0007e78:	c1 ea 0c             	shr    edx,0xc
c0007e7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e7f:	52                   	push   edx
c0007e80:	e8 75 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e85:	83 c4 10             	add    esp,0x10
c0007e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e8c:	eb dd                	jmp    c0007e6b <Phys::allocatePage()+0xac>

c0007e8e <Phys::allocateContiguousPages(int)>:
c0007e8e:	57                   	push   edi
c0007e8f:	56                   	push   esi
c0007e90:	53                   	push   ebx
c0007e91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e95:	fa                   	cli    
c0007e96:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007e9b:	31 db                	xor    ebx,ebx
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ea5:	85 db                	test   ebx,ebx
c0007ea7:	75 11                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ea9:	e8 11 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007eae:	83 fe 01             	cmp    esi,0x1
c0007eb1:	89 c7                	mov    edi,eax
c0007eb3:	74 21                	je     c0007ed6 <Phys::allocateContiguousPages(int)+0x48>
c0007eb5:	bb 01 00 00 00       	mov    ebx,0x1
c0007eba:	e8 00 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007ebf:	89 da                	mov    edx,ebx
c0007ec1:	c1 e2 0c             	shl    edx,0xc
c0007ec4:	01 fa                	add    edx,edi
c0007ec6:	39 c2                	cmp    edx,eax
c0007ec8:	74 22                	je     c0007eec <Phys::allocateContiguousPages(int)+0x5e>
c0007eca:	bb 01 00 00 00       	mov    ebx,0x1
c0007ecf:	89 c7                	mov    edi,eax
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	75 e4                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ed6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007edb:	83 e8 01             	sub    eax,0x1
c0007ede:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ee3:	75 01                	jne    c0007ee6 <Phys::allocateContiguousPages(int)+0x58>
c0007ee5:	fb                   	sti    
c0007ee6:	89 f8                	mov    eax,edi
c0007ee8:	5b                   	pop    ebx
c0007ee9:	5e                   	pop    esi
c0007eea:	5f                   	pop    edi
c0007eeb:	c3                   	ret    
c0007eec:	83 c3 01             	add    ebx,0x1
c0007eef:	39 f3                	cmp    ebx,esi
c0007ef1:	75 b2                	jne    c0007ea5 <Phys::allocateContiguousPages(int)+0x17>
c0007ef3:	eb e1                	jmp    c0007ed6 <Phys::allocateContiguousPages(int)+0x48>

c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ef5:	56                   	push   esi
c0007ef6:	53                   	push   ebx
c0007ef7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007efb:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007f01:	73 06                	jae    c0007f09 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f03:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007f09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f0d:	c1 eb 0c             	shr    ebx,0xc
c0007f10:	c1 e8 0c             	shr    eax,0xc
c0007f13:	39 d8                	cmp    eax,ebx
c0007f15:	73 13                	jae    c0007f2a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f17:	6a 00                	push   0x0
c0007f19:	8d 70 01             	lea    esi,[eax+0x1]
c0007f1c:	50                   	push   eax
c0007f1d:	e8 d8 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f22:	5a                   	pop    edx
c0007f23:	89 f0                	mov    eax,esi
c0007f25:	59                   	pop    ecx
c0007f26:	39 f3                	cmp    ebx,esi
c0007f28:	75 ed                	jne    c0007f17 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f2a:	5b                   	pop    ebx
c0007f2b:	5e                   	pop    esi
c0007f2c:	c3                   	ret    

c0007f2d <Phys::physicalMemorySetup(unsigned int)>:
c0007f2d:	55                   	push   ebp
c0007f2e:	57                   	push   edi
c0007f2f:	56                   	push   esi
c0007f30:	53                   	push   ebx
c0007f31:	83 ec 40             	sub    esp,0x40
c0007f34:	6a 10                	push   0x10
c0007f36:	6a 00                	push   0x0
c0007f38:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f3d:	e8 ae 85 ff ff       	call   c00004f0 <memset>
c0007f42:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f4b:	05 00 10 00 00       	add    eax,0x1000
c0007f50:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f54:	5b                   	pop    ebx
c0007f55:	31 db                	xor    ebx,ebx
c0007f57:	5e                   	pop    esi
c0007f58:	50                   	push   eax
c0007f59:	68 07 08 02 c0       	push   0xc0020807
c0007f5e:	e8 e2 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007f63:	83 c4 10             	add    esp,0x10
c0007f66:	83 ec 08             	sub    esp,0x8
c0007f69:	6a 01                	push   0x1
c0007f6b:	53                   	push   ebx
c0007f6c:	83 c3 01             	add    ebx,0x1
c0007f6f:	e8 86 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f74:	83 c4 10             	add    esp,0x10
c0007f77:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f7d:	75 e7                	jne    c0007f66 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f7f:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f86:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f8d:	c1 e0 08             	shl    eax,0x8
c0007f90:	09 c2                	or     edx,eax
c0007f92:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f96:	0f 84 98 01 00 00    	je     c0008134 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007f9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fa0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fa8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fb1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fb9:	eb 1c                	jmp    c0007fd7 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fbf:	83 c3 18             	add    ebx,0x18
c0007fc2:	83 c6 01             	add    esi,0x1
c0007fc5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fcd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fd1:	0f 84 6d 01 00 00    	je     c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fdd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fe0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fe4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fe8:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fea:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fed:	01 f0                	add    eax,esi
c0007fef:	55                   	push   ebp
c0007ff0:	11 fa                	adc    edx,edi
c0007ff2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ff6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ffe:	51                   	push   ecx
c0007fff:	56                   	push   esi
c0008000:	68 a4 07 02 c0       	push   0xc00207a4
c0008005:	e8 3b 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000800a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	09 f8                	or     eax,edi
c0008013:	0f 85 2b 01 00 00    	jne    c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008019:	83 fd 01             	cmp    ebp,0x1
c000801c:	75 9d                	jne    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000801e:	ba 00 00 08 00       	mov    edx,0x80000
c0008023:	89 c1                	mov    ecx,eax
c0008025:	39 f2                	cmp    edx,esi
c0008027:	19 f9                	sbb    ecx,edi
c0008029:	0f 82 ab 00 00 00    	jb     c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000802f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008033:	89 c1                	mov    ecx,eax
c0008035:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008039:	0f 83 9b 00 00 00    	jae    c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000803f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008044:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008048:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000804c:	39 fa                	cmp    edx,edi
c000804e:	19 e8                	sbb    eax,ebp
c0008050:	0f 82 b0 01 00 00    	jb     c0008206 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008056:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000805a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000805e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008064:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008069:	83 d5 ff             	adc    ebp,0xffffffff
c000806c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008070:	31 c0                	xor    eax,eax
c0008072:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008076:	39 fa                	cmp    edx,edi
c0008078:	89 c1                	mov    ecx,eax
c000807a:	19 e9                	sbb    ecx,ebp
c000807c:	0f 83 39 ff ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008082:	be 00 00 08 00       	mov    esi,0x80000
c0008087:	83 ec 04             	sub    esp,0x4
c000808a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000808e:	57                   	push   edi
c000808f:	56                   	push   esi
c0008090:	68 c8 07 02 c0       	push   0xc00207c8
c0008095:	e8 ab 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000809a:	5d                   	pop    ebp
c000809b:	58                   	pop    eax
c000809c:	57                   	push   edi
c000809d:	56                   	push   esi
c000809e:	e8 52 fe ff ff       	call   c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00080a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00080a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00080ab:	83 c4 0c             	add    esp,0xc
c00080ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080b2:	8b 15 e8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee8
c00080b8:	01 d0                	add    eax,edx
c00080ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080c1:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00080c6:	52                   	push   edx
c00080c7:	50                   	push   eax
c00080c8:	68 2d 08 02 c0       	push   0xc002082d
c00080cd:	e8 73 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00080d2:	83 c4 10             	add    esp,0x10
c00080d5:	e9 e1 fe ff ff       	jmp    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080da:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080e6:	39 ea                	cmp    edx,ebp
c00080e8:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080ec:	0f 82 c9 fe ff ff    	jb     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080f7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080fb:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080ff:	0f 83 b6 fe ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008105:	39 ee                	cmp    esi,ebp
c0008107:	89 f8                	mov    eax,edi
c0008109:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000810d:	0f 83 74 ff ff ff    	jae    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008113:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000811b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000811f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008123:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000812b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000812f:	e9 53 ff ff ff       	jmp    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008134:	83 ec 0c             	sub    esp,0xc
c0008137:	68 1f 08 02 c0       	push   0xc002081f
c000813c:	e8 10 91 00 00       	call   c0011251 <KePanic(char const*)>
c0008141:	83 c4 10             	add    esp,0x10
c0008144:	83 ec 08             	sub    esp,0x8
c0008147:	bb 60 00 00 00       	mov    ebx,0x60
c000814c:	6a 00                	push   0x0
c000814e:	6a 06                	push   0x6
c0008150:	e8 a5 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008155:	58                   	pop    eax
c0008156:	5a                   	pop    edx
c0008157:	6a 00                	push   0x0
c0008159:	6a 07                	push   0x7
c000815b:	e8 9a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008160:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008166:	83 c4 10             	add    esp,0x10
c0008169:	83 c1 02             	add    ecx,0x2
c000816c:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008172:	83 ec 08             	sub    esp,0x8
c0008175:	6a 00                	push   0x0
c0008177:	53                   	push   ebx
c0008178:	83 c3 01             	add    ebx,0x1
c000817b:	e8 7a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008189:	75 e7                	jne    c0008172 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000818b:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008190:	bb 40 01 00 00       	mov    ebx,0x140
c0008195:	83 c0 20             	add    eax,0x20
c0008198:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000819d:	eb 26                	jmp    c00081c5 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000819f:	83 ec 08             	sub    esp,0x8
c00081a2:	6a 00                	push   0x0
c00081a4:	53                   	push   ebx
c00081a5:	83 c3 01             	add    ebx,0x1
c00081a8:	e8 4d fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081ad:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	83 c0 01             	add    eax,0x1
c00081b8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081be:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081c3:	74 07                	je     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081c5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081ca:	7e d3                	jle    c000819f <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081cc:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081d1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081d6:	7f 26                	jg     c00081fe <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081d8:	83 ec 08             	sub    esp,0x8
c00081db:	6a 00                	push   0x0
c00081dd:	53                   	push   ebx
c00081de:	83 c3 01             	add    ebx,0x1
c00081e1:	e8 14 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081e6:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	83 c0 01             	add    eax,0x1
c00081f1:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081f7:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081fc:	75 d3                	jne    c00081d1 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00081fe:	83 c4 3c             	add    esp,0x3c
c0008201:	5b                   	pop    ebx
c0008202:	5e                   	pop    esi
c0008203:	5f                   	pop    edi
c0008204:	5d                   	pop    ebp
c0008205:	c3                   	ret    
c0008206:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000820e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008216:	e9 3b fe ff ff       	jmp    c0008056 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000821b:	90                   	nop

c000821c <Pipe::isAtty()>:
c000821c:	31 c0                	xor    eax,eax
c000821e:	c3                   	ret    
c000821f:	90                   	nop

c0008220 <Pipe::~Pipe()>:
c0008220:	83 ec 0c             	sub    esp,0xc
c0008223:	ba 8c 08 02 c0       	mov    edx,0xc002088c
c0008228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000822c:	89 10                	mov    DWORD PTR [eax],edx
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	50                   	push   eax
c0008236:	e8 69 11 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	90                   	nop
c000823f:	83 c4 0c             	add    esp,0xc
c0008242:	c3                   	ret    
c0008243:	90                   	nop

c0008244 <Pipe::~Pipe()>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 cd ff ff ff       	call   c0008220 <Pipe::~Pipe()>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 ec 08             	sub    esp,0x8
c0008259:	6a 20                	push   0x20
c000825b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825f:	e8 b4 25 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0008264:	83 c4 10             	add    esp,0x10
c0008267:	83 c4 0c             	add    esp,0xc
c000826a:	c3                   	ret    
c000826b:	90                   	nop

c000826c <Pipe::write(unsigned long long, void*, int*)>:
c000826c:	55                   	push   ebp
c000826d:	57                   	push   edi
c000826e:	56                   	push   esi
c000826f:	53                   	push   ebx
c0008270:	83 ec 1c             	sub    esp,0x1c
c0008273:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008277:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000827b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000827e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008282:	89 04 24             	mov    DWORD PTR [esp],eax
c0008285:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008289:	89 d8                	mov    eax,ebx
c000828b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008292:	89 d6                	mov    esi,edx
c0008294:	89 d7                	mov    edi,edx
c0008296:	c1 ff 1f             	sar    edi,0x1f
c0008299:	03 34 24             	add    esi,DWORD PTR [esp]
c000829c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a0:	c1 f8 1f             	sar    eax,0x1f
c00082a3:	39 f3                	cmp    ebx,esi
c00082a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ad:	19 f8                	sbb    eax,edi
c00082af:	b8 01 00 00 00       	mov    eax,0x1
c00082b4:	72 6e                	jb     c0008324 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082b9:	01 d0                	add    eax,edx
c00082bb:	99                   	cdq    
c00082bc:	f7 fb                	idiv   ebx
c00082be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082c2:	29 d3                	sub    ebx,edx
c00082c4:	89 d7                	mov    edi,edx
c00082c6:	89 de                	mov    esi,ebx
c00082c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082cb:	c1 fb 1f             	sar    ebx,0x1f
c00082ce:	39 f2                	cmp    edx,esi
c00082d0:	19 d8                	sbb    eax,ebx
c00082d2:	b8 00 00 00 00       	mov    eax,0x0
c00082d7:	72 04                	jb     c00082dd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082d9:	89 d0                	mov    eax,edx
c00082db:	29 f0                	sub    eax,esi
c00082dd:	89 d3                	mov    ebx,edx
c00082df:	29 c3                	sub    ebx,eax
c00082e1:	74 0b                	je     c00082ee <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082e3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082e6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082ea:	89 d9                	mov    ecx,ebx
c00082ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ee:	85 c0                	test   eax,eax
c00082f0:	74 0d                	je     c00082ff <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082f2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082f6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082f9:	89 de                	mov    esi,ebx
c00082fb:	89 c1                	mov    ecx,eax
c00082fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ff:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008302:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008307:	75 10                	jne    c0008319 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008309:	83 ec 0c             	sub    esp,0xc
c000830c:	68 49 08 02 c0       	push   0xc0020849
c0008311:	e8 3b 8f 00 00       	call   c0011251 <KePanic(char const*)>
c0008316:	83 c4 10             	add    esp,0x10
c0008319:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000831d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008320:	89 08                	mov    DWORD PTR [eax],ecx
c0008322:	31 c0                	xor    eax,eax
c0008324:	83 c4 1c             	add    esp,0x1c
c0008327:	5b                   	pop    ebx
c0008328:	5e                   	pop    esi
c0008329:	5f                   	pop    edi
c000832a:	5d                   	pop    ebp
c000832b:	c3                   	ret    

c000832c <Pipe::read(unsigned long long, void*, int*)>:
c000832c:	55                   	push   ebp
c000832d:	57                   	push   edi
c000832e:	56                   	push   esi
c000832f:	53                   	push   ebx
c0008330:	83 ec 1c             	sub    esp,0x1c
c0008333:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008337:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000833b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000833f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008342:	89 c8                	mov    eax,ecx
c0008344:	99                   	cdq    
c0008345:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008349:	74 24                	je     c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000834b:	39 f9                	cmp    ecx,edi
c000834d:	89 d1                	mov    ecx,edx
c000834f:	19 f1                	sbb    ecx,esi
c0008351:	73 1c                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008353:	fa                   	cli    
c0008354:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000835a:	e8 b1 d7 00 00       	call   c0015b10 <schedule()>
c000835f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0008364:	48                   	dec    eax
c0008365:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000836a:	75 d3                	jne    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836c:	fb                   	sti    
c000836d:	eb d0                	jmp    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836f:	39 f8                	cmp    eax,edi
c0008371:	89 d1                	mov    ecx,edx
c0008373:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008376:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000837a:	19 f1                	sbb    ecx,esi
c000837c:	73 07                	jae    c0008385 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000837e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008381:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008385:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008388:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000838b:	29 f7                	sub    edi,esi
c000838d:	89 f8                	mov    eax,edi
c000838f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008393:	99                   	cdq    
c0008394:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000839b:	19 d0                	sbb    eax,edx
c000839d:	73 07                	jae    c00083a6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000839f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00083a9:	89 ea                	mov    edx,ebp
c00083ab:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083b4:	74 0d                	je     c00083c3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083b6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083b9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c3:	85 d2                	test   edx,edx
c00083c5:	74 11                	je     c00083d8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083cb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ce:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083d2:	89 d1                	mov    ecx,edx
c00083d4:	89 c7                	mov    edi,eax
c00083d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083db:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083de:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083e1:	99                   	cdq    
c00083e2:	89 f7                	mov    edi,esi
c00083e4:	03 04 24             	add    eax,DWORD PTR [esp]
c00083e7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 89 6e 01 00       	call   c001f280 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083fd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 66 08 02 c0       	push   0xc0020866
c000840c:	e8 40 8e 00 00       	call   c0011251 <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000841b:	89 10                	mov    DWORD PTR [eax],edx
c000841d:	83 c4 1c             	add    esp,0x1c
c0008420:	31 c0                	xor    eax,eax
c0008422:	5b                   	pop    ebx
c0008423:	5e                   	pop    esi
c0008424:	5f                   	pop    edi
c0008425:	5d                   	pop    ebp
c0008426:	c3                   	ret    
c0008427:	90                   	nop

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 84 0d 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba 8c 08 02 c0       	mov    edx,0xc002088c
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 40 f6 ff ff       	call   c0007ab6 <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba d4 08 02 c0       	mov    edx,0xc00208d4
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 f5 0e 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 3d 23 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 06 50 00 00       	call   c000d4fc <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 ac 03 01 00       	call   c00188c8 <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000853f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d 80 2f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd080]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d 80 2f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd080]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 38 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd1c8]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 10 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd1f0]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 de 00 01 00       	call   c001875c <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	0f b6 c0             	movzx  eax,al
c00086d4:	59                   	pop    ecx
c00086d5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	01 f2                	add    edx,esi
c00086ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008705:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 3b 01 01 00       	jmp    c0018864 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 a0 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc00208a0
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 db 8a 00 00       	jmp    c0011251 <KePanic(char const*)>
c0008776:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c0008791:	50                   	push   eax
c0008792:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	83 c4 10             	add    esp,0x10
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000883e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	83 ec 0c             	sub    esp,0xc
c0008853:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 74 37 00 00       	jmp    c000c047 <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088e9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	83 ec 0c             	sub    esp,0xc
c00088fe:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	83 ec 10             	sub    esp,0x10
c000896e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008972:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008976:	89 f8                	mov    eax,edi
c0008978:	0f be c0             	movsx  eax,al
c000897b:	83 f8 5b             	cmp    eax,0x5b
c000897e:	75 18                	jne    c0008998 <VgaText::putchar(char)+0x30>
c0008980:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008984:	74 20                	je     c00089a6 <VgaText::putchar(char)+0x3e>
c0008986:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000898c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008993:	e9 c1 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008998:	83 f8 1b             	cmp    eax,0x1b
c000899b:	75 09                	jne    c00089a6 <VgaText::putchar(char)+0x3e>
c000899d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089a1:	e9 b3 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c00089a6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00089a9:	84 c9                	test   cl,cl
c00089ab:	0f 84 98 00 00 00    	je     c0008a49 <VgaText::putchar(char)+0xe1>
c00089b1:	8d 77 c0             	lea    esi,[edi-0x40]
c00089b4:	89 f2                	mov    edx,esi
c00089b6:	80 fa 3e             	cmp    dl,0x3e
c00089b9:	77 78                	ja     c0008a33 <VgaText::putchar(char)+0xcb>
c00089bb:	83 f8 6d             	cmp    eax,0x6d
c00089be:	75 47                	jne    c0008a07 <VgaText::putchar(char)+0x9f>
c00089c0:	31 f6                	xor    esi,esi
c00089c2:	31 d2                	xor    edx,edx
c00089c4:	31 c0                	xor    eax,eax
c00089c6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c9:	7e 2d                	jle    c00089f8 <VgaText::putchar(char)+0x90>
c00089cb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089d0:	83 fa 3b             	cmp    edx,0x3b
c00089d3:	75 17                	jne    c00089ec <VgaText::putchar(char)+0x84>
c00089d5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089d9:	50                   	push   eax
c00089da:	53                   	push   ebx
c00089db:	e8 40 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089e0:	59                   	pop    ecx
c00089e1:	31 d2                	xor    edx,edx
c00089e3:	5f                   	pop    edi
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089ea:	eb 09                	jmp    c00089f5 <VgaText::putchar(char)+0x8d>
c00089ec:	6b c0 0a             	imul   eax,eax,0xa
c00089ef:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089f3:	88 ca                	mov    dl,cl
c00089f5:	46                   	inc    esi
c00089f6:	eb ce                	jmp    c00089c6 <VgaText::putchar(char)+0x5e>
c00089f8:	84 d2                	test   dl,dl
c00089fa:	74 2f                	je     c0008a2b <VgaText::putchar(char)+0xc3>
c00089fc:	50                   	push   eax
c00089fd:	53                   	push   ebx
c00089fe:	e8 1d fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c0008a03:	58                   	pop    eax
c0008a04:	5a                   	pop    edx
c0008a05:	eb 24                	jmp    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a07:	83 f8 4a             	cmp    eax,0x4a
c0008a0a:	75 1f                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a0c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a10:	75 19                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a12:	83 ec 0c             	sub    esp,0xc
c0008a15:	53                   	push   ebx
c0008a16:	e8 89 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a1b:	83 c4 0c             	add    esp,0xc
c0008a1e:	6a 00                	push   0x0
c0008a20:	6a 00                	push   0x0
c0008a22:	53                   	push   ebx
c0008a23:	e8 1a fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a31:	eb 26                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a33:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a36:	83 f8 0e             	cmp    eax,0xe
c0008a39:	7f 1e                	jg     c0008a59 <VgaText::putchar(char)+0xf1>
c0008a3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a3e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a41:	89 f9                	mov    ecx,edi
c0008a43:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a47:	eb 10                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a49:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a4c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a4f:	50                   	push   eax
c0008a50:	53                   	push   ebx
c0008a51:	e8 42 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	83 c4 10             	add    esp,0x10
c0008a5c:	5b                   	pop    ebx
c0008a5d:	5e                   	pop    esi
c0008a5e:	5f                   	pop    edi
c0008a5f:	c3                   	ret    

c0008a60 <VgaText::putx(unsigned int)>:
c0008a60:	57                   	push   edi
c0008a61:	b9 11 00 00 00       	mov    ecx,0x11
c0008a66:	56                   	push   esi
c0008a67:	be ae 08 02 c0       	mov    esi,0xc00208ae
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 20             	sub    esp,0x20
c0008a70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a74:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a78:	fc                   	cld    
c0008a79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a7b:	be 08 00 00 00       	mov    esi,0x8
c0008a80:	50                   	push   eax
c0008a81:	50                   	push   eax
c0008a82:	89 d8                	mov    eax,ebx
c0008a84:	c1 e3 04             	shl    ebx,0x4
c0008a87:	c1 e8 1c             	shr    eax,0x1c
c0008a8a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a8f:	50                   	push   eax
c0008a90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a94:	e8 cf fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a99:	83 c4 10             	add    esp,0x10
c0008a9c:	4e                   	dec    esi
c0008a9d:	75 e1                	jne    c0008a80 <VgaText::putx(unsigned int)+0x20>
c0008a9f:	83 c4 20             	add    esp,0x20
c0008aa2:	5b                   	pop    ebx
c0008aa3:	5e                   	pop    esi
c0008aa4:	5f                   	pop    edi
c0008aa5:	c3                   	ret    

c0008aa6 <VgaText::puts(char const*)>:
c0008aa6:	53                   	push   ebx
c0008aa7:	83 ec 08             	sub    esp,0x8
c0008aaa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab1:	85 c0                	test   eax,eax
c0008ab3:	74 12                	je     c0008ac7 <VgaText::puts(char const*)+0x21>
c0008ab5:	43                   	inc    ebx
c0008ab6:	51                   	push   ecx
c0008ab7:	51                   	push   ecx
c0008ab8:	50                   	push   eax
c0008ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008abd:	e8 a6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	eb e7                	jmp    c0008aae <VgaText::puts(char const*)+0x8>
c0008ac7:	83 c4 08             	add    esp,0x8
c0008aca:	5b                   	pop    ebx
c0008acb:	c3                   	ret    

c0008acc <VgaText::write(unsigned long long, void*, int*)>:
c0008acc:	55                   	push   ebp
c0008acd:	57                   	push   edi
c0008ace:	56                   	push   esi
c0008acf:	53                   	push   ebx
c0008ad0:	83 ec 0c             	sub    esp,0xc
c0008ad3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ad7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008adb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008adf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ae6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ae9:	39 eb                	cmp    ebx,ebp
c0008aeb:	74 13                	je     c0008b00 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008aed:	43                   	inc    ebx
c0008aee:	50                   	push   eax
c0008aef:	50                   	push   eax
c0008af0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008af4:	50                   	push   eax
c0008af5:	56                   	push   esi
c0008af6:	e8 6d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008afb:	83 c4 10             	add    esp,0x10
c0008afe:	eb e9                	jmp    c0008ae9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b00:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0b:	89 38                	mov    DWORD PTR [eax],edi
c0008b0d:	83 c4 0c             	add    esp,0xc
c0008b10:	31 c0                	xor    eax,eax
c0008b12:	5b                   	pop    ebx
c0008b13:	5e                   	pop    esi
c0008b14:	5f                   	pop    edi
c0008b15:	5d                   	pop    ebp
c0008b16:	c3                   	ret    
c0008b17:	90                   	nop

c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b18:	55                   	push   ebp
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	53                   	push   ebx
c0008b1c:	83 ec 0c             	sub    esp,0xc
c0008b1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b28:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b2f:	50                   	push   eax
c0008b30:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b35:	50                   	push   eax
c0008b36:	e8 b3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b3b:	5a                   	pop    edx
c0008b3c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b40:	59                   	pop    ecx
c0008b41:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b44:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b48:	0f b7 f6             	movzx  esi,si
c0008b4b:	0f b6 e8             	movzx  ebp,al
c0008b4e:	01 f6                	add    esi,esi
c0008b50:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b53:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b56:	85 c0                	test   eax,eax
c0008b58:	0f 84 ef 00 00 00    	je     c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b5e:	83 f8 0d             	cmp    eax,0xd
c0008b61:	75 0c                	jne    c0008b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b6a:	e9 d8 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b6f:	83 f8 0a             	cmp    eax,0xa
c0008b72:	75 44                	jne    c0008bb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b74:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b77:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b7e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b81:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b84:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b87:	75 0f                	jne    c0008b98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b89:	83 ec 0c             	sub    esp,0xc
c0008b8c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b8f:	53                   	push   ebx
c0008b90:	e8 6b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	83 ec 0c             	sub    esp,0xc
c0008b9b:	53                   	push   ebx
c0008b9c:	e8 69 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008ba1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bab:	0f b7 f6             	movzx  esi,si
c0008bae:	01 f6                	add    esi,esi
c0008bb0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bb3:	e9 8f 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bb8:	83 f8 08             	cmp    eax,0x8
c0008bbb:	75 34                	jne    c0008bf1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bbd:	51                   	push   ecx
c0008bbe:	51                   	push   ecx
c0008bbf:	6a 01                	push   0x1
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 af fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bc7:	5e                   	pop    esi
c0008bc8:	58                   	pop    eax
c0008bc9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bcc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bcf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bd2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd5:	6a 20                	push   0x20
c0008bd7:	53                   	push   ebx
c0008bd8:	e8 c5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bdd:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008be1:	83 c4 20             	add    esp,0x20
c0008be4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008be7:	0f b7 f6             	movzx  esi,si
c0008bea:	01 f6                	add    esi,esi
c0008bec:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bef:	eb 56                	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf1:	52                   	push   edx
c0008bf2:	52                   	push   edx
c0008bf3:	55                   	push   ebp
c0008bf4:	50                   	push   eax
c0008bf5:	e8 98 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bfa:	83 c4 10             	add    esp,0x10
c0008bfd:	66 89 06             	mov    WORD PTR [esi],ax
c0008c00:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008c06:	75 1d                	jne    c0008c25 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c08:	83 ec 0c             	sub    esp,0xc
c0008c0b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c0e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c11:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c15:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c19:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c1c:	50                   	push   eax
c0008c1d:	e8 42 fc 00 00       	call   c0018864 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c22:	83 c4 20             	add    esp,0x20
c0008c25:	83 c6 02             	add    esi,0x2
c0008c28:	50                   	push   eax
c0008c29:	50                   	push   eax
c0008c2a:	6a 00                	push   0x0
c0008c2c:	53                   	push   ebx
c0008c2d:	e8 f0 fb ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c32:	83 c4 10             	add    esp,0x10
c0008c35:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c39:	75 0c                	jne    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c3b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c3f:	0f b7 f6             	movzx  esi,si
c0008c42:	01 f6                	add    esi,esi
c0008c44:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c47:	47                   	inc    edi
c0008c48:	e9 06 ff ff ff       	jmp    c0008b53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c4d:	83 ec 0c             	sub    esp,0xc
c0008c50:	53                   	push   ebx
c0008c51:	e8 b4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c56:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c5d:	83 c4 1c             	add    esp,0x1c
c0008c60:	5b                   	pop    ebx
c0008c61:	5e                   	pop    esi
c0008c62:	5f                   	pop    edi
c0008c63:	5d                   	pop    ebp
c0008c64:	c3                   	ret    
c0008c65:	90                   	nop

c0008c66 <VgaText::VgaText(char const*)>:
c0008c66:	56                   	push   esi
c0008c67:	53                   	push   ebx
c0008c68:	83 ec 04             	sub    esp,0x4
c0008c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6f:	83 ec 08             	sub    esp,0x8
c0008c72:	6a 00                	push   0x0
c0008c74:	50                   	push   eax
c0008c75:	e8 44 05 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	ba d4 08 02 c0       	mov    edx,0xc00208d4
c0008c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c86:	89 10                	mov    DWORD PTR [eax],edx
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c97:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cde:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ce5:	83 ec 0c             	sub    esp,0xc
c0008ce8:	6a 01                	push   0x1
c0008cea:	e8 1e 09 00 00       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0008cef:	83 c4 10             	add    esp,0x10
c0008cf2:	89 c2                	mov    edx,eax
c0008cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cfb:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d08:	89 c6                	mov    esi,eax
c0008d0a:	e8 b0 f0 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0008d0f:	68 05 0c 00 00       	push   0xc05
c0008d14:	56                   	push   esi
c0008d15:	50                   	push   eax
c0008d16:	53                   	push   ebx
c0008d17:	e8 04 10 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d1c:	83 c4 10             	add    esp,0x10
c0008d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d26:	83 ec 04             	sub    esp,0x4
c0008d29:	68 a0 0f 00 00       	push   0xfa0
c0008d2e:	6a 00                	push   0x0
c0008d30:	50                   	push   eax
c0008d31:	e8 ba 77 ff ff       	call   c00004f0 <memset>
c0008d36:	83 c4 10             	add    esp,0x10
c0008d39:	83 ec 04             	sub    esp,0x4
c0008d3c:	6a 00                	push   0x0
c0008d3e:	6a 07                	push   0x7
c0008d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d44:	e8 6b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	83 ec 04             	sub    esp,0x4
c0008d4f:	6a 00                	push   0x0
c0008d51:	6a 00                	push   0x0
c0008d53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d57:	e8 e6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d5c:	83 c4 10             	add    esp,0x10
c0008d5f:	83 ec 0c             	sub    esp,0xc
c0008d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d66:	e8 39 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d6b:	83 c4 10             	add    esp,0x10
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d7a:	05 82 00 00 00       	add    eax,0x82
c0008d7f:	83 ec 04             	sub    esp,0x4
c0008d82:	68 80 00 00 00       	push   0x80
c0008d87:	6a 00                	push   0x0
c0008d89:	50                   	push   eax
c0008d8a:	e8 61 77 ff ff       	call   c00004f0 <memset>
c0008d8f:	83 c4 10             	add    esp,0x10
c0008d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d96:	05 02 01 00 00       	add    eax,0x102
c0008d9b:	83 ec 04             	sub    esp,0x4
c0008d9e:	68 80 00 00 00       	push   0x80
c0008da3:	6a 00                	push   0x0
c0008da5:	50                   	push   eax
c0008da6:	e8 45 77 ff ff       	call   c00004f0 <memset>
c0008dab:	83 c4 10             	add    esp,0x10
c0008dae:	90                   	nop
c0008daf:	83 c4 04             	add    esp,0x4
c0008db2:	5b                   	pop    ebx
c0008db3:	5e                   	pop    esi
c0008db4:	c3                   	ret    
c0008db5:	90                   	nop

c0008db6 <VgaText::receiveKey(unsigned char)>:
c0008db6:	55                   	push   ebp
c0008db7:	57                   	push   edi
c0008db8:	56                   	push   esi
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 2c             	sub    esp,0x2c
c0008dbd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dc1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dc5:	89 ef                	mov    edi,ebp
c0008dc7:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dcd:	0f 84 66 01 00 00    	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008dd3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dd9:	83 ff 08             	cmp    edi,0x8
c0008ddc:	75 73                	jne    c0008e51 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dde:	83 ec 0c             	sub    esp,0xc
c0008de1:	56                   	push   esi
c0008de2:	e8 89 77 ff ff       	call   c0000570 <strlen>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	85 c0                	test   eax,eax
c0008dec:	0f 84 02 01 00 00    	je     c0008ef4 <VgaText::receiveKey(unsigned char)+0x13e>
c0008df2:	50                   	push   eax
c0008df3:	50                   	push   eax
c0008df4:	6a 08                	push   0x8
c0008df6:	53                   	push   ebx
c0008df7:	e8 6c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0008dff:	e8 6c 77 ff ff       	call   c0000570 <strlen>
c0008e04:	83 c4 10             	add    esp,0x10
c0008e07:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e0f:	83 fa 0d             	cmp    edx,0xd
c0008e12:	89 d0                	mov    eax,edx
c0008e14:	0f 95 c1             	setne  cl
c0008e17:	83 fa 1f             	cmp    edx,0x1f
c0008e1a:	0f 9e c2             	setle  dl
c0008e1d:	0f b6 d2             	movzx  edx,dl
c0008e20:	85 ca                	test   edx,ecx
c0008e22:	74 17                	je     c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e24:	83 e8 08             	sub    eax,0x8
c0008e27:	3c 02                	cmp    al,0x2
c0008e29:	76 10                	jbe    c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e2b:	55                   	push   ebp
c0008e2c:	55                   	push   ebp
c0008e2d:	68 bf 08 02 c0       	push   0xc00208bf
c0008e32:	53                   	push   ebx
c0008e33:	e8 6e fc ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0008e38:	83 c4 10             	add    esp,0x10
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	56                   	push   esi
c0008e3f:	e8 2c 77 ff ff       	call   c0000570 <strlen>
c0008e44:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e4c:	e9 a0 00 00 00       	jmp    c0008ef1 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e51:	83 ec 0c             	sub    esp,0xc
c0008e54:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e5a:	50                   	push   eax
c0008e5b:	e8 10 77 ff ff       	call   c0000570 <strlen>
c0008e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e67:	e8 04 77 ff ff       	call   c0000570 <strlen>
c0008e6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e70:	83 c4 10             	add    esp,0x10
c0008e73:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e77:	3d 80 00 00 00       	cmp    eax,0x80
c0008e7c:	0f 87 b7 00 00 00    	ja     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008e82:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e85:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e88:	3c 1e                	cmp    al,0x1e
c0008e8a:	0f 96 c0             	setbe  al
c0008e8d:	80 fa 01             	cmp    dl,0x1
c0008e90:	0f 97 c2             	seta   dl
c0008e93:	0f b6 d2             	movzx  edx,dl
c0008e96:	85 c2                	test   edx,eax
c0008e98:	74 2e                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9a:	83 ff 0d             	cmp    edi,0xd
c0008e9d:	74 29                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea5:	68 c5 08 02 c0       	push   0xc00208c5
c0008eaa:	53                   	push   ebx
c0008eab:	e8 68 fc ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008eb0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008eb3:	8d 45 40             	lea    eax,[ebp+0x40]
c0008eb6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eb9:	0f b6 c0             	movzx  eax,al
c0008ebc:	50                   	push   eax
c0008ebd:	53                   	push   ebx
c0008ebe:	e8 d5 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ec3:	83 c4 20             	add    esp,0x20
c0008ec6:	eb 11                	jmp    c0008ed9 <VgaText::receiveKey(unsigned char)+0x123>
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	51                   	push   ecx
c0008ecb:	0f be c0             	movsx  eax,al
c0008ece:	51                   	push   ecx
c0008ecf:	50                   	push   eax
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 92 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ede:	89 e8                	mov    eax,ebp
c0008ee0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ee4:	52                   	push   edx
c0008ee5:	52                   	push   edx
c0008ee6:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008eea:	50                   	push   eax
c0008eeb:	56                   	push   esi
c0008eec:	e8 4f 79 ff ff       	call   c0000840 <strcat>
c0008ef1:	83 c4 10             	add    esp,0x10
c0008ef4:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008efa:	b0 01                	mov    al,0x1
c0008efc:	83 ff 1c             	cmp    edi,0x1c
c0008eff:	77 0e                	ja     c0008f0f <VgaText::receiveKey(unsigned char)+0x159>
c0008f01:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f06:	89 f9                	mov    ecx,edi
c0008f08:	d3 e8                	shr    eax,cl
c0008f0a:	f7 d0                	not    eax
c0008f0c:	83 e0 01             	and    eax,0x1
c0008f0f:	84 c0                	test   al,al
c0008f11:	74 04                	je     c0008f17 <VgaText::receiveKey(unsigned char)+0x161>
c0008f13:	84 d2                	test   dl,dl
c0008f15:	74 22                	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008f17:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f1d:	50                   	push   eax
c0008f1e:	50                   	push   eax
c0008f1f:	56                   	push   esi
c0008f20:	53                   	push   ebx
c0008f21:	e8 1a 79 ff ff       	call   c0000840 <strcat>
c0008f26:	83 c4 0c             	add    esp,0xc
c0008f29:	68 80 00 00 00       	push   0x80
c0008f2e:	6a 00                	push   0x0
c0008f30:	56                   	push   esi
c0008f31:	e8 ba 75 ff ff       	call   c00004f0 <memset>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	83 c4 2c             	add    esp,0x2c
c0008f3c:	5b                   	pop    ebx
c0008f3d:	5e                   	pop    esi
c0008f3e:	5f                   	pop    edi
c0008f3f:	5d                   	pop    ebp
c0008f40:	c3                   	ret    
c0008f41:	90                   	nop

c0008f42 <VgaText::doUpdate()>:
c0008f42:	c3                   	ret    
c0008f43:	90                   	nop

c0008f44 <TSS::TSS()>:
c0008f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f4f:	90                   	nop
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::setESP(unsigned long)>:
c0008f54:	55                   	push   ebp
c0008f55:	89 e5                	mov    ebp,esp
c0008f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f63:	90                   	nop
c0008f64:	5d                   	pop    ebp
c0008f65:	c3                   	ret    
c0008f66:	66 90                	xchg   ax,ax

c0008f68 <TSS::flush()>:
c0008f68:	55                   	push   ebp
c0008f69:	89 e5                	mov    ebp,esp
c0008f6b:	83 ec 10             	sub    esp,0x10
c0008f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f71:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f73:	83 c8 03             	or     eax,0x3
c0008f76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f7a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f7e:	66 89 d0             	mov    ax,dx
c0008f81:	0f 00 d8             	ltr    ax
c0008f84:	90                   	nop
c0008f85:	c9                   	leave  
c0008f86:	c3                   	ret    
c0008f87:	90                   	nop

c0008f88 <TSS::setup(unsigned long, unsigned long)>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	83 ec 18             	sub    esp,0x18
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	6a 68                	push   0x68
c0008f93:	e8 1e eb ff ff       	call   c0007ab6 <malloc>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	89 c2                	mov    edx,eax
c0008f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa9:	83 ec 04             	sub    esp,0x4
c0008fac:	6a 68                	push   0x68
c0008fae:	6a 00                	push   0x0
c0008fb0:	50                   	push   eax
c0008fb1:	e8 3a 75 ff ff       	call   c00004f0 <memset>
c0008fb6:	83 c4 10             	add    esp,0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000902e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000903a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000904a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009050:	0f 20 da             	mov    edx,cr3
c0009053:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009056:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009059:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000905c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009062:	83 ec 08             	sub    esp,0x8
c0009065:	50                   	push   eax
c0009066:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009069:	50                   	push   eax
c000906a:	e8 b3 e2 ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	6a 68                	push   0x68
c0009077:	8d 45 ec             	lea    eax,[ebp-0x14]
c000907a:	50                   	push   eax
c000907b:	e8 be e2 ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009087:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908a:	83 e0 0f             	and    eax,0xf
c000908d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009090:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009093:	83 c8 40             	or     eax,0x40
c0009096:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009099:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000909e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a4:	05 78 01 00 00       	add    eax,0x178
c00090a9:	83 ec 04             	sub    esp,0x4
c00090ac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090af:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090b2:	50                   	push   eax
c00090b3:	e8 ba e2 ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00090b8:	83 c4 10             	add    esp,0x10
c00090bb:	89 c2                	mov    edx,eax
c00090bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c0:	89 10                	mov    DWORD PTR [eax],edx
c00090c2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090cd:	05 78 01 00 00       	add    eax,0x178
c00090d2:	83 ec 0c             	sub    esp,0xc
c00090d5:	50                   	push   eax
c00090d6:	e8 c1 e2 ff ff       	call   c000739c <GDT::flush()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090e3:	c9                   	leave  
c00090e4:	c3                   	ret    
c00090e5:	90                   	nop

c00090e6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090f6:	75 08                	jne    c0009100 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090fe:	eb 38                	jmp    c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009100:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009105:	75 17                	jne    c000911e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000910c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000910f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009115:	8b 10                	mov    edx,DWORD PTR [eax]
c0009117:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000911b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000911e:	89 c1                	mov    ecx,eax
c0009120:	83 e1 fd             	and    ecx,0xfffffffd
c0009123:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009129:	74 cd                	je     c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009130:	83 e0 ef             	and    eax,0xffffffef
c0009133:	83 f8 08             	cmp    eax,0x8
c0009136:	76 c0                	jbe    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009138:	31 c0                	xor    eax,eax
c000913a:	c3                   	ret    
c000913b:	90                   	nop

c000913c <ReservedFilename::isAtty()>:
c000913c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009140:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009143:	31 c0                	xor    eax,eax
c0009145:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000914b:	74 09                	je     c0009156 <ReservedFilename::isAtty()+0x1a>
c000914d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009153:	0f 94 c0             	sete   al
c0009156:	c3                   	ret    
c0009157:	90                   	nop

c0009158 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000915c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009163:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009167:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000916c:	75 08                	jne    c0009176 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000916e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009174:	eb 3d                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009176:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000917b:	75 17                	jne    c0009194 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000917d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009182:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009185:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000918b:	8b 10                	mov    edx,DWORD PTR [eax]
c000918d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009191:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009194:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009199:	75 04                	jne    c000919f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000919b:	89 0a                	mov    DWORD PTR [edx],ecx
c000919d:	eb 14                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000919f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091a4:	74 c8                	je     c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091ab:	83 e0 ef             	and    eax,0xffffffef
c00091ae:	83 f8 08             	cmp    eax,0x8
c00091b1:	76 bb                	jbe    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b3:	31 c0                	xor    eax,eax
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::getFileDescriptor()>:
c00091b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091bd:	c3                   	ret    

c00091be <UnixFile::UnixFile(int)>:
c00091be:	53                   	push   ebx
c00091bf:	83 ec 28             	sub    esp,0x28
c00091c2:	ba 9c 09 02 c0       	mov    edx,0xc002099c
c00091c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091cb:	89 10                	mov    DWORD PTR [eax],edx
c00091cd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091d5:	0f 8f 90 01 00 00    	jg     c000936b <UnixFile::UnixFile(int)+0x1ad>
c00091db:	a1 c0 2f 02 c0       	mov    eax,ds:0xc0022fc0
c00091e0:	8d 50 01             	lea    edx,[eax+0x1]
c00091e3:	89 15 c0 2f 02 c0    	mov    DWORD PTR ds:0xc0022fc0,edx
c00091e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091f0:	83 ec 08             	sub    esp,0x8
c00091f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091f7:	68 98 5f 02 c0       	push   0xc0025f98
c00091fc:	e8 67 62 01 00       	call   c001f468 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009201:	83 c4 10             	add    esp,0x10
c0009204:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c0009209:	83 f0 01             	xor    eax,0x1
c000920c:	0f b6 c0             	movzx  eax,al
c000920f:	85 c0                	test   eax,eax
c0009211:	0f 84 55 01 00 00    	je     c000936c <UnixFile::UnixFile(int)+0x1ae>
c0009217:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c000921e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009226:	83 ec 0c             	sub    esp,0xc
c0009229:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000922d:	e8 84 e8 ff ff       	call   c0007ab6 <malloc>
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	89 c3                	mov    ebx,eax
c0009237:	83 ec 08             	sub    esp,0x8
c000923a:	68 03 ff ff 0f       	push   0xfffff03
c000923f:	53                   	push   ebx
c0009240:	e8 2d 01 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009245:	83 c4 10             	add    esp,0x10
c0009248:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c000924e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009256:	83 ec 0c             	sub    esp,0xc
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 54 e8 ff ff       	call   c0007ab6 <malloc>
c0009262:	83 c4 10             	add    esp,0x10
c0009265:	89 c3                	mov    ebx,eax
c0009267:	83 ec 08             	sub    esp,0x8
c000926a:	68 01 ff ff 0f       	push   0xfffff01
c000926f:	53                   	push   ebx
c0009270:	e8 fd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c000927e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009286:	83 ec 0c             	sub    esp,0xc
c0009289:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000928d:	e8 24 e8 ff ff       	call   c0007ab6 <malloc>
c0009292:	83 c4 10             	add    esp,0x10
c0009295:	89 c3                	mov    ebx,eax
c0009297:	83 ec 08             	sub    esp,0x8
c000929a:	68 00 ff ff 0f       	push   0xfffff00
c000929f:	53                   	push   ebx
c00092a0:	e8 cd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c00092ae:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092b6:	83 ec 0c             	sub    esp,0xc
c00092b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bd:	e8 f4 e7 ff ff       	call   c0007ab6 <malloc>
c00092c2:	83 c4 10             	add    esp,0x10
c00092c5:	89 c3                	mov    ebx,eax
c00092c7:	83 ec 08             	sub    esp,0x8
c00092ca:	68 02 ff ff 0f       	push   0xfffff02
c00092cf:	53                   	push   ebx
c00092d0:	e8 9d 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092d5:	83 c4 10             	add    esp,0x10
c00092d8:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092e6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092eb:	7f 7f                	jg     c000936c <UnixFile::UnixFile(int)+0x1ae>
c00092ed:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092f5:	83 ec 0c             	sub    esp,0xc
c00092f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092fc:	e8 b5 e7 ff ff       	call   c0007ab6 <malloc>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	89 c3                	mov    ebx,eax
c0009306:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000930f:	83 ec 08             	sub    esp,0x8
c0009312:	50                   	push   eax
c0009313:	53                   	push   ebx
c0009314:	e8 59 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009319:	83 c4 10             	add    esp,0x10
c000931c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009320:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c0009327:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000932f:	83 ec 0c             	sub    esp,0xc
c0009332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009336:	e8 7b e7 ff ff       	call   c0007ab6 <malloc>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	89 c3                	mov    ebx,eax
c0009340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009344:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009349:	83 ec 08             	sub    esp,0x8
c000934c:	50                   	push   eax
c000934d:	53                   	push   ebx
c000934e:	e8 1f 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009353:	83 c4 10             	add    esp,0x10
c0009356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000935a:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009361:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009366:	e9 7b ff ff ff       	jmp    c00092e6 <UnixFile::UnixFile(int)+0x128>
c000936b:	90                   	nop
c000936c:	83 c4 28             	add    esp,0x28
c000936f:	5b                   	pop    ebx
c0009370:	c3                   	ret    
c0009371:	90                   	nop

c0009372 <ReservedFilename::ReservedFilename(int)>:
c0009372:	83 ec 0c             	sub    esp,0xc
c0009375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009379:	83 ec 08             	sub    esp,0x8
c000937c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009380:	50                   	push   eax
c0009381:	e8 38 fe ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c0009386:	83 c4 10             	add    esp,0x10
c0009389:	ba b8 09 02 c0       	mov    edx,0xc00209b8
c000938e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009392:	89 10                	mov    DWORD PTR [eax],edx
c0009394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000939c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000939f:	90                   	nop
c00093a0:	83 c4 0c             	add    esp,0xc
c00093a3:	c3                   	ret    

c00093a4 <UnixFile::~UnixFile()>:
c00093a4:	83 ec 1c             	sub    esp,0x1c
c00093a7:	ba 9c 09 02 c0       	mov    edx,0xc002099c
c00093ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b0:	89 10                	mov    DWORD PTR [eax],edx
c00093b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093be:	7f 76                	jg     c0009436 <UnixFile::~UnixFile()+0x92>
c00093c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c8:	83 ec 0c             	sub    esp,0xc
c00093cb:	68 98 5f 02 c0       	push   0xc0025f98
c00093d0:	e8 67 61 01 00       	call   c001f53c <LinkedList<UnixFile>::getFirstElement()>
c00093d5:	83 c4 10             	add    esp,0x10
c00093d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093dc:	83 ec 0c             	sub    esp,0xc
c00093df:	68 98 5f 02 c0       	push   0xc0025f98
c00093e4:	e8 5b 61 01 00       	call   c001f544 <LinkedList<UnixFile>::removeFirst()>
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093f0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093f4:	74 43                	je     c0009439 <UnixFile::~UnixFile()+0x95>
c00093f6:	83 ec 08             	sub    esp,0x8
c00093f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093fd:	68 98 5f 02 c0       	push   0xc0025f98
c0009402:	e8 61 60 01 00       	call   c001f468 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000940e:	8d 50 01             	lea    edx,[eax+0x1]
c0009411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009415:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000941a:	0f 94 c0             	sete   al
c000941d:	0f b6 c0             	movzx  eax,al
c0009420:	85 c0                	test   eax,eax
c0009422:	74 a4                	je     c00093c8 <UnixFile::~UnixFile()+0x24>
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	68 74 09 02 c0       	push   0xc0020974
c000942c:	e8 20 7e 00 00       	call   c0011251 <KePanic(char const*)>
c0009431:	83 c4 10             	add    esp,0x10
c0009434:	eb 92                	jmp    c00093c8 <UnixFile::~UnixFile()+0x24>
c0009436:	90                   	nop
c0009437:	eb 01                	jmp    c000943a <UnixFile::~UnixFile()+0x96>
c0009439:	90                   	nop
c000943a:	90                   	nop
c000943b:	83 c4 1c             	add    esp,0x1c
c000943e:	c3                   	ret    
c000943f:	90                   	nop

c0009440 <UnixFile::~UnixFile()>:
c0009440:	83 ec 0c             	sub    esp,0xc
c0009443:	83 ec 0c             	sub    esp,0xc
c0009446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944a:	e8 55 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000944f:	83 c4 10             	add    esp,0x10
c0009452:	83 ec 08             	sub    esp,0x8
c0009455:	6a 0c                	push   0xc
c0009457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945b:	e8 b8 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0009460:	83 c4 10             	add    esp,0x10
c0009463:	83 c4 0c             	add    esp,0xc
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 0c             	sub    esp,0xc
c000946b:	ba b8 09 02 c0       	mov    edx,0xc00209b8
c0009470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009474:	89 10                	mov    DWORD PTR [eax],edx
c0009476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947a:	83 ec 0c             	sub    esp,0xc
c000947d:	50                   	push   eax
c000947e:	e8 21 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	90                   	nop
c0009487:	83 c4 0c             	add    esp,0xc
c000948a:	c3                   	ret    
c000948b:	90                   	nop

c000948c <ReservedFilename::~ReservedFilename()>:
c000948c:	83 ec 0c             	sub    esp,0xc
c000948f:	83 ec 0c             	sub    esp,0xc
c0009492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009496:	e8 cd ff ff ff       	call   c0009468 <ReservedFilename::~ReservedFilename()>
c000949b:	83 c4 10             	add    esp,0x10
c000949e:	83 ec 08             	sub    esp,0x8
c00094a1:	6a 0c                	push   0xc
c00094a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a7:	e8 6c 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	83 c4 0c             	add    esp,0xc
c00094b2:	c3                   	ret    

c00094b3 <KeGetFileFromDescriptor(int)>:
c00094b3:	53                   	push   ebx
c00094b4:	83 ec 08             	sub    esp,0x8
c00094b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094bb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094c1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094c7:	7f 2c                	jg     c00094f5 <KeGetFileFromDescriptor(int)+0x42>
c00094c9:	83 ec 0c             	sub    esp,0xc
c00094cc:	68 98 5f 02 c0       	push   0xc0025f98
c00094d1:	e8 66 60 01 00       	call   c001f53c <LinkedList<UnixFile>::getFirstElement()>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	85 c0                	test   eax,eax
c00094db:	75 04                	jne    c00094e1 <KeGetFileFromDescriptor(int)+0x2e>
c00094dd:	31 c0                	xor    eax,eax
c00094df:	eb 6e                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094e4:	74 69                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e6:	52                   	push   edx
c00094e7:	52                   	push   edx
c00094e8:	50                   	push   eax
c00094e9:	68 98 5f 02 c0       	push   0xc0025f98
c00094ee:	e8 f3 60 01 00       	call   c001f5e6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094f3:	eb e1                	jmp    c00094d6 <KeGetFileFromDescriptor(int)+0x23>
c00094f5:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094fa:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009500:	74 4d                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009502:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c0009507:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000950d:	74 40                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000950f:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009514:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000951a:	74 33                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000951c:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c0009521:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009527:	74 26                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009529:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000952f:	83 f8 08             	cmp    eax,0x8
c0009532:	77 09                	ja     c000953d <KeGetFileFromDescriptor(int)+0x8a>
c0009534:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c000953b:	eb 12                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000953d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009543:	83 fb 08             	cmp    ebx,0x8
c0009546:	77 95                	ja     c00094dd <KeGetFileFromDescriptor(int)+0x2a>
c0009548:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c000954f:	83 c4 08             	add    esp,0x8
c0009552:	5b                   	pop    ebx
c0009553:	c3                   	ret    

c0009554 <__static_initialization_and_destruction_0(int, int)>:
c0009554:	83 ec 0c             	sub    esp,0xc
c0009557:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000955c:	75 34                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009566:	75 2a                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 98 5f 02 c0       	push   0xc0025f98
c0009570:	e8 b1 5e 01 00       	call   c001f426 <LinkedList<UnixFile>::LinkedList()>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	83 ec 04             	sub    esp,0x4
c000957b:	68 50 2f 02 c0       	push   0xc0022f50
c0009580:	68 98 5f 02 c0       	push   0xc0025f98
c0009585:	68 24 f4 01 c0       	push   0xc001f424
c000958a:	e8 39 12 00 00       	call   c000a7c8 <__cxa_atexit>
c000958f:	83 c4 10             	add    esp,0x10
c0009592:	90                   	nop
c0009593:	83 c4 0c             	add    esp,0xc
c0009596:	c3                   	ret    

c0009597 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009597:	83 ec 0c             	sub    esp,0xc
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	68 ff ff 00 00       	push   0xffff
c00095a2:	6a 01                	push   0x1
c00095a4:	e8 ab ff ff ff       	call   c0009554 <__static_initialization_and_destruction_0(int, int)>
c00095a9:	83 c4 10             	add    esp,0x10
c00095ac:	83 c4 0c             	add    esp,0xc
c00095af:	c3                   	ret    

c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095b0:	53                   	push   ebx
c00095b1:	8b 15 c8 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022fc8
c00095b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095bf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095c5:	89 d8                	mov    eax,ebx
c00095c7:	d1 e8                	shr    eax,1
c00095c9:	01 d0                	add    eax,edx
c00095cb:	80 e3 01             	and    bl,0x1
c00095ce:	8a 10                	mov    dl,BYTE PTR [eax]
c00095d0:	75 09                	jne    c00095db <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095d2:	83 e2 f0             	and    edx,0xfffffff0
c00095d5:	09 ca                	or     edx,ecx
c00095d7:	88 10                	mov    BYTE PTR [eax],dl
c00095d9:	5b                   	pop    ebx
c00095da:	c3                   	ret    
c00095db:	83 e2 0f             	and    edx,0xf
c00095de:	0f b6 c9             	movzx  ecx,cl
c00095e1:	c1 e1 04             	shl    ecx,0x4
c00095e4:	09 ca                	or     edx,ecx
c00095e6:	88 10                	mov    BYTE PTR [eax],dl
c00095e8:	5b                   	pop    ebx
c00095e9:	c3                   	ret    

c00095ea <Virt::getPageState(unsigned long)>:
c00095ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ee:	8b 0d c8 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022fc8
c00095f4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095fa:	89 d0                	mov    eax,edx
c00095fc:	d1 e8                	shr    eax,1
c00095fe:	80 e2 01             	and    dl,0x1
c0009601:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009604:	74 03                	je     c0009609 <Virt::getPageState(unsigned long)+0x1f>
c0009606:	c1 e8 04             	shr    eax,0x4
c0009609:	83 e0 0f             	and    eax,0xf
c000960c:	c3                   	ret    

c000960d <Virt::allocateKernelVirtualPages(int)>:
c000960d:	55                   	push   ebp
c000960e:	31 ed                	xor    ebp,ebp
c0009610:	57                   	push   edi
c0009611:	31 ff                	xor    edi,edi
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	31 db                	xor    ebx,ebx
c0009617:	83 ec 0c             	sub    esp,0xc
c000961a:	8b 35 c4 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022fc4
c0009620:	56                   	push   esi
c0009621:	e8 c4 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009626:	5a                   	pop    edx
c0009627:	84 c0                	test   al,al
c0009629:	75 41                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000962b:	85 db                	test   ebx,ebx
c000962d:	75 02                	jne    c0009631 <Virt::allocateKernelVirtualPages(int)+0x24>
c000962f:	89 f5                	mov    ebp,esi
c0009631:	83 c3 01             	add    ebx,0x1
c0009634:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009638:	74 5f                	je     c0009699 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000963a:	83 c6 01             	add    esi,0x1
c000963d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009643:	76 34                	jbe    c0009679 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009645:	c7 05 c4 2f 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0022fc4,0xc8000
c000964f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009655:	75 2a                	jne    c0009681 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009657:	be 00 80 0c 00       	mov    esi,0xc8000
c000965c:	bf 01 00 00 00       	mov    edi,0x1
c0009661:	56                   	push   esi
c0009662:	e8 83 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009667:	5a                   	pop    edx
c0009668:	84 c0                	test   al,al
c000966a:	74 bf                	je     c000962b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000966c:	31 db                	xor    ebx,ebx
c000966e:	83 c6 01             	add    esi,0x1
c0009671:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009677:	77 cc                	ja     c0009645 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009679:	89 35 c4 2f 02 c0    	mov    DWORD PTR ds:0xc0022fc4,esi
c000967f:	eb 9f                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009681:	83 ec 0c             	sub    esp,0xc
c0009684:	68 cc 09 02 c0       	push   0xc00209cc
c0009689:	e8 c3 7b 00 00       	call   c0011251 <KePanic(char const*)>
c000968e:	8b 35 c4 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022fc4
c0009694:	83 c4 10             	add    esp,0x10
c0009697:	eb 87                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009699:	89 2d c4 2f 02 c0    	mov    DWORD PTR ds:0xc0022fc4,ebp
c000969f:	83 fb 01             	cmp    ebx,0x1
c00096a2:	74 6f                	je     c0009713 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a8:	85 c9                	test   ecx,ecx
c00096aa:	74 49                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b0:	89 e8                	mov    eax,ebp
c00096b2:	31 db                	xor    ebx,ebx
c00096b4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096b7:	eb 18                	jmp    c00096d1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096b9:	6a 01                	push   0x1
c00096bb:	83 c3 01             	add    ebx,0x1
c00096be:	50                   	push   eax
c00096bf:	e8 ec fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c4:	58                   	pop    eax
c00096c5:	5a                   	pop    edx
c00096c6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ca:	74 29                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096cc:	a1 c4 2f 02 c0       	mov    eax,ds:0xc0022fc4
c00096d1:	8d 50 01             	lea    edx,[eax+0x1]
c00096d4:	85 db                	test   ebx,ebx
c00096d6:	89 15 c4 2f 02 c0    	mov    DWORD PTR ds:0xc0022fc4,edx
c00096dc:	74 24                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096de:	39 df                	cmp    edi,ebx
c00096e0:	75 d7                	jne    c00096b9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096e2:	6a 03                	push   0x3
c00096e4:	83 c3 01             	add    ebx,0x1
c00096e7:	50                   	push   eax
c00096e8:	e8 c3 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ed:	59                   	pop    ecx
c00096ee:	5e                   	pop    esi
c00096ef:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096f3:	75 d7                	jne    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096f5:	83 c4 0c             	add    esp,0xc
c00096f8:	89 e8                	mov    eax,ebp
c00096fa:	5b                   	pop    ebx
c00096fb:	c1 e0 0c             	shl    eax,0xc
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	5d                   	pop    ebp
c0009701:	c3                   	ret    
c0009702:	6a 02                	push   0x2
c0009704:	bb 01 00 00 00       	mov    ebx,0x1
c0009709:	50                   	push   eax
c000970a:	e8 a1 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000970f:	58                   	pop    eax
c0009710:	5a                   	pop    edx
c0009711:	eb b9                	jmp    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009713:	6a 04                	push   0x4
c0009715:	8d 45 01             	lea    eax,[ebp+0x1]
c0009718:	55                   	push   ebp
c0009719:	a3 c4 2f 02 c0       	mov    ds:0xc0022fc4,eax
c000971e:	e8 8d fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009723:	5b                   	pop    ebx
c0009724:	89 e8                	mov    eax,ebp
c0009726:	5e                   	pop    esi
c0009727:	c1 e0 0c             	shl    eax,0xc
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <Virt::freeSwapfilePage(unsigned long)>:
c0009732:	53                   	push   ebx
c0009733:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c0009739:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000973d:	b8 01 00 00 00       	mov    eax,0x1
c0009742:	89 cb                	mov    ebx,ecx
c0009744:	d3 e0                	shl    eax,cl
c0009746:	c1 eb 05             	shr    ebx,0x5
c0009749:	f7 d0                	not    eax
c000974b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000974e:	21 c1                	and    ecx,eax
c0009750:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009753:	5b                   	pop    ebx
c0009754:	c3                   	ret    

c0009755 <Virt::swapIDToSector(unsigned long)>:
c0009755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009759:	8b 15 cc 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022fcc
c000975f:	8b 0d d4 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022fd4
c0009765:	0f af c2             	imul   eax,edx
c0009768:	01 c8                	add    eax,ecx
c000976a:	c3                   	ret    

c000976b <Virt::allocateSwapfilePage()>:
c000976b:	55                   	push   ebp
c000976c:	31 d2                	xor    edx,edx
c000976e:	57                   	push   edi
c000976f:	56                   	push   esi
c0009770:	53                   	push   ebx
c0009771:	83 ec 0c             	sub    esp,0xc
c0009774:	8b 0d cc 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022fcc
c000977a:	a1 d0 2f 02 c0       	mov    eax,ds:0xc0022fd0
c000977f:	f7 f1                	div    ecx
c0009781:	39 0d d0 2f 02 c0    	cmp    DWORD PTR ds:0xc0022fd0,ecx
c0009787:	72 2f                	jb     c00097b8 <Virt::allocateSwapfilePage()+0x4d>
c0009789:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c000978f:	8b 16                	mov    edx,DWORD PTR [esi]
c0009791:	f6 c2 01             	test   dl,0x1
c0009794:	74 3e                	je     c00097d4 <Virt::allocateSwapfilePage()+0x69>
c0009796:	31 c9                	xor    ecx,ecx
c0009798:	bf 01 00 00 00       	mov    edi,0x1
c000979d:	eb 12                	jmp    c00097b1 <Virt::allocateSwapfilePage()+0x46>
c000979f:	89 fd                	mov    ebp,edi
c00097a1:	89 ca                	mov    edx,ecx
c00097a3:	d3 e5                	shl    ebp,cl
c00097a5:	c1 ea 05             	shr    edx,0x5
c00097a8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097ad:	85 ea                	test   edx,ebp
c00097af:	74 2c                	je     c00097dd <Virt::allocateSwapfilePage()+0x72>
c00097b1:	83 c1 01             	add    ecx,0x1
c00097b4:	39 c8                	cmp    eax,ecx
c00097b6:	77 e7                	ja     c000979f <Virt::allocateSwapfilePage()+0x34>
c00097b8:	83 ec 0c             	sub    esp,0xc
c00097bb:	68 60 0c 02 c0       	push   0xc0020c60
c00097c0:	e8 8c 7a 00 00       	call   c0011251 <KePanic(char const*)>
c00097c5:	83 c4 10             	add    esp,0x10
c00097c8:	31 c9                	xor    ecx,ecx
c00097ca:	83 c4 0c             	add    esp,0xc
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	5b                   	pop    ebx
c00097d0:	5e                   	pop    esi
c00097d1:	5f                   	pop    edi
c00097d2:	5d                   	pop    ebp
c00097d3:	c3                   	ret    
c00097d4:	89 f3                	mov    ebx,esi
c00097d6:	bd 01 00 00 00       	mov    ebp,0x1
c00097db:	31 c9                	xor    ecx,ecx
c00097dd:	09 ea                	or     edx,ebp
c00097df:	89 c8                	mov    eax,ecx
c00097e1:	89 13                	mov    DWORD PTR [ebx],edx
c00097e3:	83 c4 0c             	add    esp,0xc
c00097e6:	5b                   	pop    ebx
c00097e7:	5e                   	pop    esi
c00097e8:	5f                   	pop    edi
c00097e9:	5d                   	pop    ebp
c00097ea:	c3                   	ret    

c00097eb <Virt::virtualMemorySetup()>:
c00097eb:	53                   	push   ebx
c00097ec:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f1:	6a 0f                	push   0xf
c00097f3:	53                   	push   ebx
c00097f4:	83 c3 01             	add    ebx,0x1
c00097f7:	e8 b4 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097fc:	58                   	pop    eax
c00097fd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009803:	5a                   	pop    edx
c0009804:	75 eb                	jne    c00097f1 <Virt::virtualMemorySetup()+0x6>
c0009806:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000980b:	6a 00                	push   0x0
c000980d:	53                   	push   ebx
c000980e:	83 c3 01             	add    ebx,0x1
c0009811:	e8 9a fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009816:	59                   	pop    ecx
c0009817:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000981d:	58                   	pop    eax
c000981e:	75 eb                	jne    c000980b <Virt::virtualMemorySetup()+0x20>
c0009820:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009825:	6a 0f                	push   0xf
c0009827:	53                   	push   ebx
c0009828:	83 c3 01             	add    ebx,0x1
c000982b:	e8 80 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009830:	58                   	pop    eax
c0009831:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009837:	5a                   	pop    edx
c0009838:	75 eb                	jne    c0009825 <Virt::virtualMemorySetup()+0x3a>
c000983a:	5b                   	pop    ebx
c000983b:	c3                   	ret    

c000983c <Virt::setupPageSwapping(int)>:
c000983c:	53                   	push   ebx
c000983d:	83 ec 0c             	sub    esp,0xc
c0009840:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009844:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0009849:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000984f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009851:	53                   	push   ebx
c0009852:	c1 e3 0b             	shl    ebx,0xb
c0009855:	68 77 0c 02 c0       	push   0xc0020c77
c000985a:	50                   	push   eax
c000985b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000985e:	89 1d d0 2f 02 c0    	mov    DWORD PTR ds:0xc0022fd0,ebx
c0009864:	c6 05 d8 2f 02 c0 43 	mov    BYTE PTR ds:0xc0022fd8,0x43
c000986b:	c1 eb 08             	shr    ebx,0x8
c000986e:	a3 d4 2f 02 c0       	mov    ds:0xc0022fd4,eax
c0009873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009876:	c7 05 cc 2f 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0022fcc,0x8
c0009880:	e8 31 e2 ff ff       	call   c0007ab6 <malloc>
c0009885:	83 c4 0c             	add    esp,0xc
c0009888:	89 c1                	mov    ecx,eax
c000988a:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c000988f:	31 d2                	xor    edx,edx
c0009891:	a1 d0 2f 02 c0       	mov    eax,ds:0xc0022fd0
c0009896:	f7 35 cc 2f 02 c0    	div    DWORD PTR ds:0xc0022fcc
c000989c:	c1 e8 05             	shr    eax,0x5
c000989f:	50                   	push   eax
c00098a0:	6a 00                	push   0x0
c00098a2:	51                   	push   ecx
c00098a3:	e8 48 6c ff ff       	call   c00004f0 <memset>
c00098a8:	83 c4 18             	add    esp,0x18
c00098ab:	5b                   	pop    ebx
c00098ac:	c3                   	ret    
c00098ad:	90                   	nop

c00098ae <VAS::setCPUSpecific(unsigned long)>:
c00098ae:	c3                   	ret    
c00098af:	90                   	nop

c00098b0 <VAS::VAS(VAS*)>:
c00098b0:	83 ec 0c             	sub    esp,0xc
c00098b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098c9:	83 ec 0c             	sub    esp,0xc
c00098cc:	68 ec 09 02 c0       	push   0xc00209ec
c00098d1:	e8 7b 79 00 00       	call   c0011251 <KePanic(char const*)>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	90                   	nop
c00098da:	83 c4 0c             	add    esp,0xc
c00098dd:	c3                   	ret    

c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098e7:	89 c2                	mov    edx,eax
c00098e9:	c1 e8 0a             	shr    eax,0xa
c00098ec:	c1 ea 16             	shr    edx,0x16
c00098ef:	83 f9 01             	cmp    ecx,0x1
c00098f2:	19 c9                	sbb    ecx,ecx
c00098f4:	c1 e2 0c             	shl    edx,0xc
c00098f7:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098fd:	25 fc 0f 00 00       	and    eax,0xffc
c0009902:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009909:	01 d0                	add    eax,edx
c000990b:	c3                   	ret    

c000990c <VAS::getPageTableEntry(unsigned long)>:
c000990c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009910:	89 ca                	mov    edx,ecx
c0009912:	c1 e9 0a             	shr    ecx,0xa
c0009915:	c1 ea 16             	shr    edx,0x16
c0009918:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000991e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009924:	c1 e0 0c             	shl    eax,0xc
c0009927:	8d 04 08             	lea    eax,[eax+ecx*1]
c000992a:	c3                   	ret    

c000992b <Virt::freeKernelVirtualPages(unsigned long)>:
c000992b:	55                   	push   ebp
c000992c:	57                   	push   edi
c000992d:	bf 01 00 00 00       	mov    edi,0x1
c0009932:	56                   	push   esi
c0009933:	53                   	push   ebx
c0009934:	83 ec 1c             	sub    esp,0x1c
c0009937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000993b:	c1 ee 0c             	shr    esi,0xc
c000993e:	eb 48                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009940:	83 ec 08             	sub    esp,0x8
c0009943:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0009948:	55                   	push   ebp
c0009949:	50                   	push   eax
c000994a:	e8 bd ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000994f:	83 c4 10             	add    esp,0x10
c0009952:	8b 10                	mov    edx,DWORD PTR [eax]
c0009954:	f6 c6 04             	test   dh,0x4
c0009957:	75 70                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009959:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000995f:	83 fb 04             	cmp    ebx,0x4
c0009962:	0f 84 8a 00 00 00    	je     c00099f2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009968:	83 fb 02             	cmp    ebx,0x2
c000996b:	0f 84 9a 00 00 00    	je     c0009a0b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 be 00 00 00    	je     c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 a2 00 00 00    	je     c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 5a fc ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 a5                	jne    c0009940 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 8e 0c 02 c0       	push   0xc0020c8e
c00099a3:	e8 a9 78 00 00       	call   c0011251 <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 55 ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00099bc:	f6 c6 04             	test   dh,0x4
c00099bf:	75 08                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099c7:	eb ba                	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	52                   	push   edx
c00099d7:	e8 7a e3 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00099dc:	83 c4 10             	add    esp,0x10
c00099df:	83 fb 04             	cmp    ebx,0x4
c00099e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ec:	0f 85 76 ff ff ff    	jne    c0009968 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099f2:	83 e7 01             	and    edi,0x1
c00099f5:	75 46                	jne    c0009a3d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099f7:	c7 44 24 30 10 0a 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020a10
c00099ff:	83 c4 1c             	add    esp,0x1c
c0009a02:	5b                   	pop    ebx
c0009a03:	5e                   	pop    esi
c0009a04:	5f                   	pop    edi
c0009a05:	5d                   	pop    ebp
c0009a06:	e9 46 78 00 00       	jmp    c0011251 <KePanic(char const*)>
c0009a0b:	83 e7 01             	and    edi,0x1
c0009a0e:	75 15                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a10:	83 ec 0c             	sub    esp,0xc
c0009a13:	68 aa 0c 02 c0       	push   0xc0020caa
c0009a18:	e8 34 78 00 00       	call   c0011251 <KePanic(char const*)>
c0009a1d:	83 c4 10             	add    esp,0x10
c0009a20:	e9 5e ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a25:	83 ec 08             	sub    esp,0x8
c0009a28:	6a 00                	push   0x0
c0009a2a:	56                   	push   esi
c0009a2b:	e8 80 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	e9 4b ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a38:	83 e7 01             	and    edi,0x1
c0009a3b:	75 16                	jne    c0009a53 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a3d:	83 ec 08             	sub    esp,0x8
c0009a40:	6a 00                	push   0x0
c0009a42:	56                   	push   esi
c0009a43:	e8 68 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a48:	83 c4 10             	add    esp,0x10
c0009a4b:	83 c4 1c             	add    esp,0x1c
c0009a4e:	5b                   	pop    ebx
c0009a4f:	5e                   	pop    esi
c0009a50:	5f                   	pop    edi
c0009a51:	5d                   	pop    ebp
c0009a52:	c3                   	ret    
c0009a53:	c7 44 24 30 c6 0c 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020cc6
c0009a5b:	83 c4 1c             	add    esp,0x1c
c0009a5e:	5b                   	pop    ebx
c0009a5f:	5e                   	pop    esi
c0009a60:	5f                   	pop    edi
c0009a61:	5d                   	pop    ebp
c0009a62:	e9 ea 77 00 00       	jmp    c0011251 <KePanic(char const*)>
c0009a67:	90                   	nop

c0009a68 <VAS::freeAllocatedPages(unsigned long)>:
c0009a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a70:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a74:	74 09                	je     c0009a7f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a7a:	e9 ac fe ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009a7f:	c7 44 24 04 34 0a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020a34
c0009a87:	e9 b9 0e 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c0009a8c <VAS::virtualToPhysical(unsigned long)>:
c0009a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a90:	50                   	push   eax
c0009a91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a95:	52                   	push   edx
c0009a96:	e8 71 fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009a9b:	59                   	pop    ecx
c0009a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a9e:	5a                   	pop    edx
c0009a9f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009aa4:	c3                   	ret    
c0009aa5:	90                   	nop

c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009aa6:	55                   	push   ebp
c0009aa7:	57                   	push   edi
c0009aa8:	56                   	push   esi
c0009aa9:	53                   	push   ebx
c0009aaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aae:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ab2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ab6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aba:	85 db                	test   ebx,ebx
c0009abc:	7e 24                	jle    c0009ae2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009abe:	c1 e3 0c             	shl    ebx,0xc
c0009ac1:	01 f3                	add    ebx,esi
c0009ac3:	56                   	push   esi
c0009ac4:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aca:	55                   	push   ebp
c0009acb:	e8 3c fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009ad0:	5a                   	pop    edx
c0009ad1:	59                   	pop    ecx
c0009ad2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ad8:	21 f9                	and    ecx,edi
c0009ada:	09 d1                	or     ecx,edx
c0009adc:	39 f3                	cmp    ebx,esi
c0009ade:	89 08                	mov    DWORD PTR [eax],ecx
c0009ae0:	75 e1                	jne    c0009ac3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ae2:	5b                   	pop    ebx
c0009ae3:	5e                   	pop    esi
c0009ae4:	5f                   	pop    edi
c0009ae5:	5d                   	pop    ebp
c0009ae6:	c3                   	ret    
c0009ae7:	90                   	nop

c0009ae8 <VAS::VAS()>:
c0009ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b02:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b13:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b1a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b21:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b26:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b2b:	29 c2                	sub    edx,eax
c0009b2d:	89 d0                	mov    eax,edx
c0009b2f:	05 ff 0f 00 00       	add    eax,0xfff
c0009b34:	c1 e8 0c             	shr    eax,0xc
c0009b37:	89 c2                	mov    edx,eax
c0009b39:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b3e:	6a 04                	push   0x4
c0009b40:	6a ff                	push   0xffffffff
c0009b42:	52                   	push   edx
c0009b43:	50                   	push   eax
c0009b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b48:	e8 59 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b4d:	83 c4 14             	add    esp,0x14
c0009b50:	90                   	nop
c0009b51:	c3                   	ret    

c0009b52 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b52:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b5d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b64:	75 01                	jne    c0009b67 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b66:	c3                   	ret    
c0009b67:	68 80 00 00 00       	push   0x80
c0009b6c:	6a ff                	push   0xffffffff
c0009b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b72:	50                   	push   eax
c0009b73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b77:	52                   	push   edx
c0009b78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b7c:	51                   	push   ecx
c0009b7d:	e8 24 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b82:	83 c4 14             	add    esp,0x14
c0009b85:	c3                   	ret    

c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b91:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b99:	83 f8 01             	cmp    eax,0x1
c0009b9c:	19 c0                	sbb    eax,eax
c0009b9e:	83 ca 03             	or     edx,0x3
c0009ba1:	83 e0 fc             	and    eax,0xfffffffc
c0009ba4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bab:	0f 20 d8             	mov    eax,cr3
c0009bae:	0f 22 d8             	mov    cr3,eax
c0009bb1:	c3                   	ret    

c0009bb2 <VAS::~VAS()>:
c0009bb2:	83 ec 2c             	sub    esp,0x2c
c0009bb5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bbd:	fa                   	cli    
c0009bbe:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009bc3:	83 c0 01             	add    eax,0x1
c0009bc6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009bcb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bd5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bdf:	6a 01                	push   0x1
c0009be1:	50                   	push   eax
c0009be2:	e8 9f ff ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0009be7:	83 c4 0c             	add    esp,0xc
c0009bea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bf2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bfa:	0f 8f d8 00 00 00    	jg     c0009cd8 <VAS::~VAS()+0x126>
c0009c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c0b:	c1 e2 02             	shl    edx,0x2
c0009c0e:	01 d0                	add    eax,edx
c0009c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c1a:	83 e0 01             	and    eax,0x1
c0009c1d:	0f 84 ab 00 00 00    	je     c0009cce <VAS::~VAS()+0x11c>
c0009c23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c2b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c33:	7f 74                	jg     c0009ca9 <VAS::~VAS()+0xf7>
c0009c35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c39:	c1 e0 0a             	shl    eax,0xa
c0009c3c:	89 c2                	mov    edx,eax
c0009c3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c42:	01 d0                	add    eax,edx
c0009c44:	c1 e0 0c             	shl    eax,0xc
c0009c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c4b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c55:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c5f:	6a 01                	push   0x1
c0009c61:	50                   	push   eax
c0009c62:	e8 77 fc ff ff       	call   c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c67:	83 c4 0c             	add    esp,0xc
c0009c6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c7c:	25 01 04 00 00       	and    eax,0x401
c0009c81:	3d 01 04 00 00       	cmp    eax,0x401
c0009c86:	75 1a                	jne    c0009ca2 <VAS::~VAS()+0xf0>
c0009c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c91:	83 ec 0c             	sub    esp,0xc
c0009c94:	50                   	push   eax
c0009c95:	e8 bc e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009c9a:	83 c4 10             	add    esp,0x10
c0009c9d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ca2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009ca7:	eb 82                	jmp    c0009c2b <VAS::~VAS()+0x79>
c0009ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cad:	25 00 04 00 00       	and    eax,0x400
c0009cb2:	74 1a                	je     c0009cce <VAS::~VAS()+0x11c>
c0009cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 90 e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cce:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cd3:	e9 1a ff ff ff       	jmp    c0009bf2 <VAS::~VAS()+0x40>
c0009cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cdf:	83 ec 0c             	sub    esp,0xc
c0009ce2:	50                   	push   eax
c0009ce3:	e8 43 fc ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cf2:	83 ec 0c             	sub    esp,0xc
c0009cf5:	50                   	push   eax
c0009cf6:	e8 5b e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cfb:	83 c4 10             	add    esp,0x10
c0009cfe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d03:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009d08:	83 e8 01             	sub    eax,0x1
c0009d0b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009d10:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009d15:	85 c0                	test   eax,eax
c0009d17:	75 01                	jne    c0009d1a <VAS::~VAS()+0x168>
c0009d19:	fb                   	sti    
c0009d1a:	90                   	nop
c0009d1b:	83 c4 2c             	add    esp,0x2c
c0009d1e:	c3                   	ret    
c0009d1f:	90                   	nop

c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d20:	55                   	push   ebp
c0009d21:	57                   	push   edi
c0009d22:	56                   	push   esi
c0009d23:	53                   	push   ebx
c0009d24:	83 ec 1c             	sub    esp,0x1c
c0009d27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d2f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d35:	77 08                	ja     c0009d3f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d37:	0f 20 d8             	mov    eax,cr3
c0009d3a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d3d:	75 49                	jne    c0009d88 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d43:	09 d8                	or     eax,ebx
c0009d45:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4a:	75 59                	jne    c0009da5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d4c:	89 de                	mov    esi,ebx
c0009d4e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d51:	c1 ee 16             	shr    esi,0x16
c0009d54:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d5b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d5f:	74 56                	je     c0009db7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d69:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d6f:	c1 eb 0a             	shr    ebx,0xa
c0009d72:	c1 e6 0c             	shl    esi,0xc
c0009d75:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d7b:	09 d0                	or     eax,edx
c0009d7d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d80:	83 c4 1c             	add    esp,0x1c
c0009d83:	5b                   	pop    ebx
c0009d84:	5e                   	pop    esi
c0009d85:	5f                   	pop    edi
c0009d86:	5d                   	pop    ebp
c0009d87:	c3                   	ret    
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	68 58 0a 02 c0       	push   0xc0020a58
c0009d90:	e8 b0 0b 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d9c:	09 d8                	or     eax,ebx
c0009d9e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009da3:	74 a7                	je     c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009da5:	83 ec 0c             	sub    esp,0xc
c0009da8:	68 c0 0a 02 c0       	push   0xc0020ac0
c0009dad:	e8 9f 74 00 00       	call   c0011251 <KePanic(char const*)>
c0009db2:	83 c4 10             	add    esp,0x10
c0009db5:	eb 95                	jmp    c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009db7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dbb:	e8 ff df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	89 c5                	mov    ebp,eax
c0009dc5:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009dcb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dcf:	6a 01                	push   0x1
c0009dd1:	e8 37 f8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009dd6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ddd:	6a 01                	push   0x1
c0009ddf:	50                   	push   eax
c0009de0:	55                   	push   ebp
c0009de1:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009deb:	51                   	push   ecx
c0009dec:	e8 29 01 00 00       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009df1:	83 c4 1c             	add    esp,0x1c
c0009df4:	68 00 10 00 00       	push   0x1000
c0009df9:	6a 00                	push   0x0
c0009dfb:	50                   	push   eax
c0009dfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e00:	e8 eb 66 ff ff       	call   c00004f0 <memset>
c0009e05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e0c:	e8 1a fb ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009e11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e15:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e18:	83 c4 10             	add    esp,0x10
c0009e1b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e1e:	e9 3e ff ff ff       	jmp    c0009d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e23:	90                   	nop

c0009e24 <VAS::allocatePages(int, int)>:
c0009e24:	55                   	push   ebp
c0009e25:	57                   	push   edi
c0009e26:	56                   	push   esi
c0009e27:	53                   	push   ebx
c0009e28:	83 ec 1c             	sub    esp,0x1c
c0009e2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e33:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e37:	75 71                	jne    c0009eaa <VAS::allocatePages(int, int)+0x86>
c0009e39:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	74 4d                	je     c0009e91 <VAS::allocatePages(int, int)+0x6d>
c0009e44:	89 dd                	mov    ebp,ebx
c0009e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e4a:	c1 e5 0c             	shl    ebp,0xc
c0009e4d:	01 c5                	add    ebp,eax
c0009e4f:	85 db                	test   ebx,ebx
c0009e51:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e54:	7e 29                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009e56:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e5a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e5e:	81 cf 00 04 00 00    	or     edi,0x400
c0009e64:	e8 56 df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009e69:	57                   	push   edi
c0009e6a:	53                   	push   ebx
c0009e6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e71:	50                   	push   eax
c0009e72:	56                   	push   esi
c0009e73:	e8 a8 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e78:	83 c4 10             	add    esp,0x10
c0009e7b:	39 dd                	cmp    ebp,ebx
c0009e7d:	75 e5                	jne    c0009e64 <VAS::allocatePages(int, int)+0x40>
c0009e7f:	0f 20 d8             	mov    eax,cr3
c0009e82:	0f 22 d8             	mov    cr3,eax
c0009e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e89:	83 c4 1c             	add    esp,0x1c
c0009e8c:	5b                   	pop    ebx
c0009e8d:	5e                   	pop    esi
c0009e8e:	5f                   	pop    edi
c0009e8f:	5d                   	pop    ebp
c0009e90:	c3                   	ret    
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	68 e4 0a 02 c0       	push   0xc0020ae4
c0009e99:	e8 b3 73 00 00       	call   c0011251 <KePanic(char const*)>
c0009e9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ea1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea5:	83 c4 10             	add    esp,0x10
c0009ea8:	eb 9a                	jmp    c0009e44 <VAS::allocatePages(int, int)+0x20>
c0009eaa:	83 ec 0c             	sub    esp,0xc
c0009ead:	53                   	push   ebx
c0009eae:	e8 5a f7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009eb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ebf:	77 37                	ja     c0009ef8 <VAS::allocatePages(int, int)+0xd4>
c0009ec1:	85 db                	test   ebx,ebx
c0009ec3:	7e ba                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ec5:	c1 e3 0c             	shl    ebx,0xc
c0009ec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ecc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ed0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ed3:	81 cf 00 04 00 00    	or     edi,0x400
c0009ed9:	89 c3                	mov    ebx,eax
c0009edb:	e8 df de ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009ee0:	57                   	push   edi
c0009ee1:	53                   	push   ebx
c0009ee2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee8:	50                   	push   eax
c0009ee9:	56                   	push   esi
c0009eea:	e8 31 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	39 dd                	cmp    ebp,ebx
c0009ef4:	75 e5                	jne    c0009edb <VAS::allocatePages(int, int)+0xb7>
c0009ef6:	eb 87                	jmp    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ef8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009efd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f03:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f0a:	74 b5                	je     c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f0c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f10:	80 ce 01             	or     dh,0x1
c0009f13:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f17:	eb a8                	jmp    c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f19:	90                   	nop

c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f1a:	55                   	push   ebp
c0009f1b:	57                   	push   edi
c0009f1c:	56                   	push   esi
c0009f1d:	53                   	push   ebx
c0009f1e:	83 ec 0c             	sub    esp,0xc
c0009f21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f2d:	85 db                	test   ebx,ebx
c0009f2f:	7e 2f                	jle    c0009f60 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f31:	c1 e3 0c             	shl    ebx,0xc
c0009f34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f3c:	01 d3                	add    ebx,edx
c0009f3e:	55                   	push   ebp
c0009f3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f47:	29 c2                	sub    edx,eax
c0009f49:	01 f2                	add    edx,esi
c0009f4b:	52                   	push   edx
c0009f4c:	56                   	push   esi
c0009f4d:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f53:	57                   	push   edi
c0009f54:	e8 c7 fd ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f59:	83 c4 10             	add    esp,0x10
c0009f5c:	39 de                	cmp    esi,ebx
c0009f5e:	75 de                	jne    c0009f3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f60:	0f 20 d8             	mov    eax,cr3
c0009f63:	0f 22 d8             	mov    cr3,eax
c0009f66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6a:	83 c4 0c             	add    esp,0xc
c0009f6d:	5b                   	pop    ebx
c0009f6e:	5e                   	pop    esi
c0009f6f:	5f                   	pop    edi
c0009f70:	5d                   	pop    ebp
c0009f71:	c3                   	ret    

c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f72:	55                   	push   ebp
c0009f73:	57                   	push   edi
c0009f74:	56                   	push   esi
c0009f75:	53                   	push   ebx
c0009f76:	83 ec 1c             	sub    esp,0x1c
c0009f79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f7d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f81:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f85:	09 f8                	or     eax,edi
c0009f87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f8b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f90:	75 4f                	jne    c0009fe1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f92:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f96:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009f99:	c1 eb 16             	shr    ebx,0x16
c0009f9c:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fa3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fa7:	74 52                	je     c0009ffb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fa9:	0f b6 f2             	movzx  esi,dl
c0009fac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fb0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fb4:	c1 e8 0a             	shr    eax,0xa
c0009fb7:	83 fe 01             	cmp    esi,0x1
c0009fba:	19 d2                	sbb    edx,edx
c0009fbc:	c1 e3 0c             	shl    ebx,0xc
c0009fbf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fc5:	25 fc 0f 00 00       	and    eax,0xffc
c0009fca:	01 d8                	add    eax,ebx
c0009fcc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fd0:	09 d9                	or     ecx,ebx
c0009fd2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fd9:	83 c4 1c             	add    esp,0x1c
c0009fdc:	5b                   	pop    ebx
c0009fdd:	5e                   	pop    esi
c0009fde:	5f                   	pop    edi
c0009fdf:	5d                   	pop    ebp
c0009fe0:	c3                   	ret    
c0009fe1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fe5:	83 ec 0c             	sub    esp,0xc
c0009fe8:	68 10 0b 02 c0       	push   0xc0020b10
c0009fed:	e8 5f 72 00 00       	call   c0011251 <KePanic(char const*)>
c0009ff2:	83 c4 10             	add    esp,0x10
c0009ff5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff9:	eb 97                	jmp    c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009ffb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009fff:	e8 bb dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a004:	83 ec 0c             	sub    esp,0xc
c000a007:	89 c5                	mov    ebp,eax
c000a009:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c000a00f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a013:	6a 01                	push   0x1
c000a015:	e8 f3 f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a01a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a021:	6a 01                	push   0x1
c000a023:	50                   	push   eax
c000a024:	55                   	push   ebp
c000a025:	81 cd 07 04 00 00    	or     ebp,0x407
c000a02b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a02f:	51                   	push   ecx
c000a030:	e8 e5 fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a035:	83 c4 1c             	add    esp,0x1c
c000a038:	68 00 10 00 00       	push   0x1000
c000a03d:	6a 00                	push   0x0
c000a03f:	50                   	push   eax
c000a040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a044:	e8 a7 64 ff ff       	call   c00004f0 <memset>
c000a049:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a04d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a050:	e8 d6 f8 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a055:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a058:	83 c4 10             	add    esp,0x10
c000a05b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a05e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a062:	e9 42 ff ff ff       	jmp    c0009fa9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a067:	90                   	nop

c000a068 <VAS::VAS(bool)>:
c000a068:	53                   	push   ebx
c000a069:	83 ec 28             	sub    esp,0x28
c000a06c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a070:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a07f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a083:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a092:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a095:	e8 25 dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a09a:	89 c2                	mov    edx,eax
c000a09c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0a3:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 01                	push   0x1
c000a0ae:	e8 5a f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a0b3:	83 c4 10             	add    esp,0x10
c000a0b6:	89 c2                	mov    edx,eax
c000a0b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0bf:	83 ec 0c             	sub    esp,0xc
c000a0c2:	6a 03                	push   0x3
c000a0c4:	6a 01                	push   0x1
c000a0c6:	52                   	push   edx
c000a0c7:	50                   	push   eax
c000a0c8:	53                   	push   ebx
c000a0c9:	e8 4c fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0ce:	83 c4 20             	add    esp,0x20
c000a0d1:	89 c2                	mov    edx,eax
c000a0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0da:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0e2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0ea:	7f 1d                	jg     c000a109 <VAS::VAS(bool)+0xa1>
c000a0ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0f7:	c1 e2 02             	shl    edx,0x2
c000a0fa:	01 d0                	add    eax,edx
c000a0fc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a102:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a107:	eb d9                	jmp    c000a0e2 <VAS::VAS(bool)+0x7a>
c000a109:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a111:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a119:	7f 7e                	jg     c000a199 <VAS::VAS(bool)+0x131>
c000a11b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a11f:	2d 00 02 00 00       	sub    eax,0x200
c000a124:	c1 e0 0c             	shl    eax,0xc
c000a127:	83 c8 05             	or     eax,0x5
c000a12a:	89 c2                	mov    edx,eax
c000a12c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a131:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a137:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a13d:	83 e0 10             	and    eax,0x10
c000a140:	0f b6 c0             	movzx  eax,al
c000a143:	85 c0                	test   eax,eax
c000a145:	74 07                	je     c000a14e <VAS::VAS(bool)+0xe6>
c000a147:	b8 00 01 00 00       	mov    eax,0x100
c000a14c:	eb 05                	jmp    c000a153 <VAS::VAS(bool)+0xeb>
c000a14e:	b8 00 00 00 00       	mov    eax,0x0
c000a153:	09 d0                	or     eax,edx
c000a155:	89 c1                	mov    ecx,eax
c000a157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a15b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a15e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a162:	c1 e2 02             	shl    edx,0x2
c000a165:	01 d0                	add    eax,edx
c000a167:	89 ca                	mov    edx,ecx
c000a169:	89 10                	mov    DWORD PTR [eax],edx
c000a16b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a16f:	2d 40 03 00 00       	sub    eax,0x340
c000a174:	83 f8 7f             	cmp    eax,0x7f
c000a177:	77 16                	ja     c000a18f <VAS::VAS(bool)+0x127>
c000a179:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a17d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a180:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a184:	c1 e2 02             	shl    edx,0x2
c000a187:	01 d0                	add    eax,edx
c000a189:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a18f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a194:	e9 78 ff ff ff       	jmp    c000a111 <VAS::VAS(bool)+0xa9>
c000a199:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a19e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1a4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1aa:	83 e0 10             	and    eax,0x10
c000a1ad:	0f b6 c0             	movzx  eax,al
c000a1b0:	85 c0                	test   eax,eax
c000a1b2:	74 07                	je     c000a1bb <VAS::VAS(bool)+0x153>
c000a1b4:	b8 03 41 00 00       	mov    eax,0x4103
c000a1b9:	eb 05                	jmp    c000a1c0 <VAS::VAS(bool)+0x158>
c000a1bb:	b8 03 40 00 00       	mov    eax,0x4003
c000a1c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1c4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1c7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1cd:	89 02                	mov    DWORD PTR [edx],eax
c000a1cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1d6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1e1:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1e7:	83 e0 10             	and    eax,0x10
c000a1ea:	0f b6 c0             	movzx  eax,al
c000a1ed:	85 c0                	test   eax,eax
c000a1ef:	74 07                	je     c000a1f8 <VAS::VAS(bool)+0x190>
c000a1f1:	b8 00 01 00 00       	mov    eax,0x100
c000a1f6:	eb 05                	jmp    c000a1fd <VAS::VAS(bool)+0x195>
c000a1f8:	b8 00 00 00 00       	mov    eax,0x0
c000a1fd:	09 c2                	or     edx,eax
c000a1ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a203:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a206:	05 fc 0f 00 00       	add    eax,0xffc
c000a20b:	83 ca 03             	or     edx,0x3
c000a20e:	89 10                	mov    DWORD PTR [eax],edx
c000a210:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a215:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a21b:	83 ec 0c             	sub    esp,0xc
c000a21e:	50                   	push   eax
c000a21f:	e8 92 26 00 00       	call   c000c8b6 <Device::getName()>
c000a224:	83 c4 10             	add    esp,0x10
c000a227:	83 ec 08             	sub    esp,0x8
c000a22a:	68 e0 0c 02 c0       	push   0xc0020ce0
c000a22f:	50                   	push   eax
c000a230:	e8 1b 65 ff ff       	call   c0000750 <strcmp>
c000a235:	83 c4 10             	add    esp,0x10
c000a238:	85 c0                	test   eax,eax
c000a23a:	0f 94 c0             	sete   al
c000a23d:	0f b6 c0             	movzx  eax,al
c000a240:	85 c0                	test   eax,eax
c000a242:	74 68                	je     c000a2ac <VAS::VAS(bool)+0x244>
c000a244:	fa                   	cli    
c000a245:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a24a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a250:	05 7c 09 00 00       	add    eax,0x97c
c000a255:	83 ec 0c             	sub    esp,0xc
c000a258:	50                   	push   eax
c000a259:	e8 50 d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a266:	89 c3                	mov    ebx,eax
c000a268:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a26d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a273:	05 7c 09 00 00       	add    eax,0x97c
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	50                   	push   eax
c000a27c:	e8 2d d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	83 ec 08             	sub    esp,0x8
c000a287:	50                   	push   eax
c000a288:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28c:	e8 7b f6 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8b 00                	mov    eax,DWORD PTR [eax]
c000a296:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a29b:	6a 11                	push   0x11
c000a29d:	53                   	push   ebx
c000a29e:	50                   	push   eax
c000a29f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a3:	e8 78 fa ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	fb                   	sti    
c000a2ac:	90                   	nop
c000a2ad:	83 c4 28             	add    esp,0x28
c000a2b0:	5b                   	pop    ebx
c000a2b1:	c3                   	ret    

c000a2b2 <VAS::evict(unsigned long)>:
c000a2b2:	55                   	push   ebp
c000a2b3:	57                   	push   edi
c000a2b4:	56                   	push   esi
c000a2b5:	53                   	push   ebx
c000a2b6:	83 ec 1c             	sub    esp,0x1c
c000a2b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2c5:	e8 a1 f4 ff ff       	call   c000976b <Virt::allocateSwapfilePage()>
c000a2ca:	89 c7                	mov    edi,eax
c000a2cc:	a1 cc 2f 02 c0       	mov    eax,ds:0xc0022fcc
c000a2d1:	85 c0                	test   eax,eax
c000a2d3:	7e 40                	jle    c000a315 <VAS::evict(unsigned long)+0x63>
c000a2d5:	89 ee                	mov    esi,ebp
c000a2d7:	31 db                	xor    ebx,ebx
c000a2d9:	83 ec 0c             	sub    esp,0xc
c000a2dc:	57                   	push   edi
c000a2dd:	e8 73 f4 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a2e2:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2e5:	01 d8                	add    eax,ebx
c000a2e7:	6a 01                	push   0x1
c000a2e9:	31 d2                	xor    edx,edx
c000a2eb:	83 c3 01             	add    ebx,0x1
c000a2ee:	52                   	push   edx
c000a2ef:	81 c6 00 02 00 00    	add    esi,0x200
c000a2f5:	50                   	push   eax
c000a2f6:	0f be 05 d8 2f 02 c0 	movsx  eax,BYTE PTR ds:0xc0022fd8
c000a2fd:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a304:	50                   	push   eax
c000a305:	e8 66 37 00 00       	call   c000da70 <LogicalDisk::write(unsigned long long, int, void*)>
c000a30a:	83 c4 20             	add    esp,0x20
c000a30d:	39 1d cc 2f 02 c0    	cmp    DWORD PTR ds:0xc0022fcc,ebx
c000a313:	7f c4                	jg     c000a2d9 <VAS::evict(unsigned long)+0x27>
c000a315:	83 ec 08             	sub    esp,0x8
c000a318:	c1 e7 0c             	shl    edi,0xc
c000a31b:	55                   	push   ebp
c000a31c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a320:	50                   	push   eax
c000a321:	e8 e6 f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a326:	8b 10                	mov    edx,DWORD PTR [eax]
c000a328:	89 d3                	mov    ebx,edx
c000a32a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a330:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a336:	09 d7                	or     edi,edx
c000a338:	89 38                	mov    DWORD PTR [eax],edi
c000a33a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a33d:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a343:	83 c2 01             	add    edx,0x1
c000a346:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a34c:	e8 05 da ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c000a351:	0f 20 d8             	mov    eax,cr3
c000a354:	0f 22 d8             	mov    cr3,eax
c000a357:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a35d:	51                   	push   ecx
c000a35e:	55                   	push   ebp
c000a35f:	53                   	push   ebx
c000a360:	68 34 0b 02 c0       	push   0xc0020b34
c000a365:	e8 db 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a36a:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a36f:	c7 44 24 50 ee 0c 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020cee
c000a377:	8d 50 01             	lea    edx,[eax+0x1]
c000a37a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a37e:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a384:	83 c4 3c             	add    esp,0x3c
c000a387:	5b                   	pop    ebx
c000a388:	5e                   	pop    esi
c000a389:	5f                   	pop    edi
c000a38a:	5d                   	pop    ebp
c000a38b:	e9 b5 05 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a390:	55                   	push   ebp
c000a391:	57                   	push   edi
c000a392:	56                   	push   esi
c000a393:	53                   	push   ebx
c000a394:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a39a:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3a1:	89 f3                	mov    ebx,esi
c000a3a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3a9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3af:	77 22                	ja     c000a3d3 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3b1:	83 ec 08             	sub    esp,0x8
c000a3b4:	56                   	push   esi
c000a3b5:	68 11 0d 02 c0       	push   0xc0020d11
c000a3ba:	e8 86 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3bf:	83 c4 10             	add    esp,0x10
c000a3c2:	85 db                	test   ebx,ebx
c000a3c4:	75 2a                	jne    c000a3f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3c6:	31 c0                	xor    eax,eax
c000a3c8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	5d                   	pop    ebp
c000a3d2:	c3                   	ret    
c000a3d3:	83 ec 0c             	sub    esp,0xc
c000a3d6:	68 ff 0c 02 c0       	push   0xc0020cff
c000a3db:	e8 71 6e 00 00       	call   c0011251 <KePanic(char const*)>
c000a3e0:	5f                   	pop    edi
c000a3e1:	5d                   	pop    ebp
c000a3e2:	56                   	push   esi
c000a3e3:	68 11 0d 02 c0       	push   0xc0020d11
c000a3e8:	e8 58 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3ed:	83 c4 10             	add    esp,0x10
c000a3f0:	83 ec 08             	sub    esp,0x8
c000a3f3:	53                   	push   ebx
c000a3f4:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3fb:	51                   	push   ecx
c000a3fc:	e8 0b f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	89 c2                	mov    edx,eax
c000a406:	85 c0                	test   eax,eax
c000a408:	74 bc                	je     c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a40a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a40c:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a412:	0f 85 c0 00 00 00    	jne    c000a4d8 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a418:	89 e8                	mov    eax,ebp
c000a41a:	25 01 04 00 00       	and    eax,0x401
c000a41f:	3d 00 04 00 00       	cmp    eax,0x400
c000a424:	75 a0                	jne    c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a426:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42a:	c1 ed 0c             	shr    ebp,0xc
c000a42d:	e8 8d d9 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a432:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a436:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a438:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a43e:	09 c1                	or     ecx,eax
c000a440:	81 c9 01 08 00 00    	or     ecx,0x801
c000a446:	89 0a                	mov    DWORD PTR [edx],ecx
c000a448:	8b 15 cc 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022fcc
c000a44e:	85 d2                	test   edx,edx
c000a450:	7e 40                	jle    c000a492 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a452:	89 df                	mov    edi,ebx
c000a454:	31 f6                	xor    esi,esi
c000a456:	83 ec 0c             	sub    esp,0xc
c000a459:	55                   	push   ebp
c000a45a:	e8 f6 f2 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a45f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a462:	01 f0                	add    eax,esi
c000a464:	6a 01                	push   0x1
c000a466:	31 d2                	xor    edx,edx
c000a468:	83 c6 01             	add    esi,0x1
c000a46b:	52                   	push   edx
c000a46c:	81 c7 00 02 00 00    	add    edi,0x200
c000a472:	50                   	push   eax
c000a473:	0f be 05 d8 2f 02 c0 	movsx  eax,BYTE PTR ds:0xc0022fd8
c000a47a:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a481:	50                   	push   eax
c000a482:	e8 7d 35 00 00       	call   c000da04 <LogicalDisk::read(unsigned long long, int, void*)>
c000a487:	83 c4 20             	add    esp,0x20
c000a48a:	39 35 cc 2f 02 c0    	cmp    DWORD PTR ds:0xc0022fcc,esi
c000a490:	7f c4                	jg     c000a456 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a492:	83 ec 04             	sub    esp,0x4
c000a495:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a49a:	83 e8 01             	sub    eax,0x1
c000a49d:	50                   	push   eax
c000a49e:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4a3:	53                   	push   ebx
c000a4a4:	68 24 0d 02 c0       	push   0xc0020d24
c000a4a9:	e8 97 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4b1:	e8 7c f2 ff ff       	call   c0009732 <Virt::freeSwapfilePage(unsigned long)>
c000a4b6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000a4bb:	83 c4 10             	add    esp,0x10
c000a4be:	83 e8 01             	sub    eax,0x1
c000a4c1:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000a4c6:	85 c0                	test   eax,eax
c000a4c8:	75 01                	jne    c000a4cb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4ca:	fb                   	sti    
c000a4cb:	0f 20 d8             	mov    eax,cr3
c000a4ce:	0f 22 d8             	mov    cr3,eax
c000a4d1:	b0 01                	mov    al,0x1
c000a4d3:	e9 f0 fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4dc:	bd 00 10 00 00       	mov    ebp,0x1000
c000a4e1:	83 ec 0c             	sub    esp,0xc
c000a4e4:	89 de                	mov    esi,ebx
c000a4e6:	68 64 0b 02 c0       	push   0xc0020b64
c000a4eb:	e8 55 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4f0:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a4f4:	e8 c6 d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a4f9:	89 e9                	mov    ecx,ebp
c000a4fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a501:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a503:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a509:	09 c8                	or     eax,ecx
c000a50b:	83 c8 02             	or     eax,0x2
c000a50e:	89 02                	mov    DWORD PTR [edx],eax
c000a510:	0f 20 d8             	mov    eax,cr3
c000a513:	0f 22 d8             	mov    cr3,eax
c000a516:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a51a:	89 df                	mov    edi,ebx
c000a51c:	89 e9                	mov    ecx,ebp
c000a51e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a520:	b0 01                	mov    al,0x1
c000a522:	83 c4 10             	add    esp,0x10
c000a525:	e9 9e fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a52a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a52a:	55                   	push   ebp
c000a52b:	57                   	push   edi
c000a52c:	56                   	push   esi
c000a52d:	53                   	push   ebx
c000a52e:	83 ec 28             	sub    esp,0x28
c000a531:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a535:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a539:	50                   	push   eax
c000a53a:	e8 ce f0 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a53f:	83 c4 0c             	add    esp,0xc
c000a542:	89 c5                	mov    ebp,eax
c000a544:	6a 07                	push   0x7
c000a546:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a54a:	52                   	push   edx
c000a54b:	56                   	push   esi
c000a54c:	e8 d3 f8 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c000a551:	83 c4 10             	add    esp,0x10
c000a554:	89 c7                	mov    edi,eax
c000a556:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a55a:	85 c9                	test   ecx,ecx
c000a55c:	74 2f                	je     c000a58d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a55e:	31 db                	xor    ebx,ebx
c000a560:	e8 5a d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a565:	83 c3 01             	add    ebx,0x1
c000a568:	6a 03                	push   0x3
c000a56a:	55                   	push   ebp
c000a56b:	50                   	push   eax
c000a56c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a570:	56                   	push   esi
c000a571:	e8 aa f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a576:	6a 07                	push   0x7
c000a578:	57                   	push   edi
c000a579:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a57d:	50                   	push   eax
c000a57e:	56                   	push   esi
c000a57f:	e8 9c f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a584:	83 c4 20             	add    esp,0x20
c000a587:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a58b:	75 d3                	jne    c000a560 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a58d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a591:	89 28                	mov    DWORD PTR [eax],ebp
c000a593:	83 c4 1c             	add    esp,0x1c
c000a596:	89 f8                	mov    eax,edi
c000a598:	5b                   	pop    ebx
c000a599:	5e                   	pop    esi
c000a59a:	5f                   	pop    edi
c000a59b:	5d                   	pop    ebp
c000a59c:	c3                   	ret    
c000a59d:	90                   	nop

c000a59e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a59e:	53                   	push   ebx
c000a59f:	83 ec 14             	sub    esp,0x14
c000a5a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5a6:	68 84 0b 02 c0       	push   0xc0020b84
c000a5ab:	e8 95 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5b0:	c7 04 24 e4 0b 02 c0 	mov    DWORD PTR [esp],0xc0020be4
c000a5b7:	e8 89 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5c0:	83 c4 18             	add    esp,0x18
c000a5c3:	5b                   	pop    ebx
c000a5c4:	e9 62 f3 ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a5c9:	90                   	nop

c000a5ca <VAS::scanForEviction()>:
c000a5ca:	57                   	push   edi
c000a5cb:	56                   	push   esi
c000a5cc:	31 f6                	xor    esi,esi
c000a5ce:	53                   	push   ebx
c000a5cf:	83 ec 10             	sub    esp,0x10
c000a5d2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5d6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5d9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5df:	75 0e                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a5e1:	89 da                	mov    edx,ebx
c000a5e3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5e6:	c1 ea 16             	shr    edx,0x16
c000a5e9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5ed:	74 57                	je     c000a646 <VAS::scanForEviction()+0x7c>
c000a5ef:	53                   	push   ebx
c000a5f0:	57                   	push   edi
c000a5f1:	e8 16 f3 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a5f6:	5a                   	pop    edx
c000a5f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5f9:	59                   	pop    ecx
c000a5fa:	89 d1                	mov    ecx,edx
c000a5fc:	c1 e9 0c             	shr    ecx,0xc
c000a5ff:	74 10                	je     c000a611 <VAS::scanForEviction()+0x47>
c000a601:	89 d1                	mov    ecx,edx
c000a603:	81 e1 01 08 00 00    	and    ecx,0x801
c000a609:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a60f:	74 40                	je     c000a651 <VAS::scanForEviction()+0x87>
c000a611:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a617:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a61d:	76 2d                	jbe    c000a64c <VAS::scanForEviction()+0x82>
c000a61f:	83 c6 01             	add    esi,0x1
c000a622:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a629:	83 fe 03             	cmp    esi,0x3
c000a62c:	74 32                	je     c000a660 <VAS::scanForEviction()+0x96>
c000a62e:	31 db                	xor    ebx,ebx
c000a630:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a636:	75 b7                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a638:	89 da                	mov    edx,ebx
c000a63a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a63d:	c1 ea 16             	shr    edx,0x16
c000a640:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a644:	75 a9                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a646:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a64c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a64f:	eb 88                	jmp    c000a5d9 <VAS::scanForEviction()+0xf>
c000a651:	f6 c2 20             	test   dl,0x20
c000a654:	74 13                	je     c000a669 <VAS::scanForEviction()+0x9f>
c000a656:	83 e2 df             	and    edx,0xffffffdf
c000a659:	89 10                	mov    DWORD PTR [eax],edx
c000a65b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a65e:	eb b1                	jmp    c000a611 <VAS::scanForEviction()+0x47>
c000a660:	83 c4 10             	add    esp,0x10
c000a663:	31 c0                	xor    eax,eax
c000a665:	5b                   	pop    ebx
c000a666:	5e                   	pop    esi
c000a667:	5f                   	pop    edi
c000a668:	c3                   	ret    
c000a669:	83 ec 08             	sub    esp,0x8
c000a66c:	89 d0                	mov    eax,edx
c000a66e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a677:	53                   	push   ebx
c000a678:	68 39 0d 02 c0       	push   0xc0020d39
c000a67d:	e8 c3 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a682:	58                   	pop    eax
c000a683:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a686:	5a                   	pop    edx
c000a687:	51                   	push   ecx
c000a688:	57                   	push   edi
c000a689:	e8 24 fc ff ff       	call   c000a2b2 <VAS::evict(unsigned long)>
c000a68e:	5b                   	pop    ebx
c000a68f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a692:	5e                   	pop    esi
c000a693:	50                   	push   eax
c000a694:	68 4d 0d 02 c0       	push   0xc0020d4d
c000a699:	e8 a7 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a69e:	58                   	pop    eax
c000a69f:	5a                   	pop    edx
c000a6a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6a4:	50                   	push   eax
c000a6a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6a9:	68 60 0d 02 c0       	push   0xc0020d60
c000a6ae:	e8 92 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a6b3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6c3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	5b                   	pop    ebx
c000a6ca:	5e                   	pop    esi
c000a6cb:	5f                   	pop    edi
c000a6cc:	c3                   	ret    

c000a6cd <mapVASFirstTime>:
c000a6cd:	55                   	push   ebp
c000a6ce:	57                   	push   edi
c000a6cf:	56                   	push   esi
c000a6d0:	53                   	push   ebx
c000a6d1:	83 ec 0c             	sub    esp,0xc
c000a6d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6d9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6dc:	83 fa 01             	cmp    edx,0x1
c000a6df:	0f 84 cb 00 00 00    	je     c000a7b0 <mapVASFirstTime+0xe3>
c000a6e5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6e8:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6eb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6f0:	c1 e5 15             	shl    ebp,0x15
c000a6f3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6f8:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6fe:	29 eb                	sub    ebx,ebp
c000a700:	29 ef                	sub    edi,ebp
c000a702:	e8 b8 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a707:	83 ec 0c             	sub    esp,0xc
c000a70a:	68 03 04 00 00       	push   0x403
c000a70f:	6a 01                	push   0x1
c000a711:	53                   	push   ebx
c000a712:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a718:	50                   	push   eax
c000a719:	56                   	push   esi
c000a71a:	e8 fb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a71f:	83 c4 20             	add    esp,0x20
c000a722:	39 fb                	cmp    ebx,edi
c000a724:	75 dc                	jne    c000a702 <mapVASFirstTime+0x35>
c000a726:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a72b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a730:	29 eb                	sub    ebx,ebp
c000a732:	29 ef                	sub    edi,ebp
c000a734:	e8 86 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a739:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a73d:	83 fa 01             	cmp    edx,0x1
c000a740:	19 d2                	sbb    edx,edx
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	83 e2 04             	and    edx,0x4
c000a748:	81 c2 03 04 00 00    	add    edx,0x403
c000a74e:	52                   	push   edx
c000a74f:	6a 01                	push   0x1
c000a751:	53                   	push   ebx
c000a752:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a758:	50                   	push   eax
c000a759:	56                   	push   esi
c000a75a:	e8 bb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a75f:	83 c4 20             	add    esp,0x20
c000a762:	39 df                	cmp    edi,ebx
c000a764:	75 ce                	jne    c000a734 <mapVASFirstTime+0x67>
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a76e:	6a 04                	push   0x4
c000a770:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a776:	6a ff                	push   0xffffffff
c000a778:	c1 eb 0c             	shr    ebx,0xc
c000a77b:	53                   	push   ebx
c000a77c:	68 00 40 02 c0       	push   0xc0024000
c000a781:	56                   	push   esi
c000a782:	e8 1f f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a787:	83 c4 14             	add    esp,0x14
c000a78a:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a78f:	6a 04                	push   0x4
c000a791:	6a ff                	push   0xffffffff
c000a793:	53                   	push   ebx
c000a794:	68 00 40 02 c0       	push   0xc0024000
c000a799:	50                   	push   eax
c000a79a:	e8 07 f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a79f:	0f 20 d8             	mov    eax,cr3
c000a7a2:	0f 22 d8             	mov    cr3,eax
c000a7a5:	83 c4 20             	add    esp,0x20
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	5b                   	pop    ebx
c000a7ac:	5e                   	pop    esi
c000a7ad:	5f                   	pop    edi
c000a7ae:	5d                   	pop    ebp
c000a7af:	c3                   	ret    
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	68 6d 0d 02 c0       	push   0xc0020d6d
c000a7b8:	e8 88 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	83 c4 0c             	add    esp,0xc
c000a7c3:	5b                   	pop    ebx
c000a7c4:	5e                   	pop    esi
c000a7c5:	5f                   	pop    edi
c000a7c6:	5d                   	pop    ebp
c000a7c7:	c3                   	ret    

c000a7c8 <__cxa_atexit>:
c000a7c8:	31 c0                	xor    eax,eax
c000a7ca:	c3                   	ret    

c000a7cb <__cxa_finalize>:
c000a7cb:	c3                   	ret    

c000a7cc <__stack_chk_fail>:
c000a7cc:	55                   	push   ebp
c000a7cd:	89 e5                	mov    ebp,esp
c000a7cf:	83 ec 10             	sub    esp,0x10
c000a7d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7d5:	68 86 0d 02 c0       	push   0xc0020d86
c000a7da:	e8 66 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7df:	58                   	pop    eax
c000a7e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7e3:	5a                   	pop    edx
c000a7e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7e7:	68 86 0d 02 c0       	push   0xc0020d86
c000a7ec:	e8 54 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7f1:	c7 04 24 8e 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d8e
c000a7f8:	e8 54 6a 00 00       	call   c0011251 <KePanic(char const*)>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	c9                   	leave  
c000a801:	c3                   	ret    

c000a802 <__cxa_pure_virtual>:
c000a802:	83 ec 18             	sub    esp,0x18
c000a805:	68 a6 0d 02 c0       	push   0xc0020da6
c000a80a:	e8 42 6a 00 00       	call   c0011251 <KePanic(char const*)>
c000a80f:	83 c4 1c             	add    esp,0x1c
c000a812:	c3                   	ret    

c000a813 <operator new[](unsigned long)>:
c000a813:	e9 9e d2 ff ff       	jmp    c0007ab6 <malloc>

c000a818 <operator delete(void*, unsigned long)>:
c000a818:	e9 b9 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a81d <operator delete[](void*)>:
c000a81d:	e9 b4 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a822 <operator delete[](void*, unsigned long)>:
c000a822:	e9 af d2 ff ff       	jmp    c0007ad6 <rfree>

c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a827:	55                   	push   ebp
c000a828:	57                   	push   edi
c000a829:	56                   	push   esi
c000a82a:	be af 08 02 c0       	mov    esi,0xc00208af
c000a82f:	53                   	push   ebx
c000a830:	83 ec 20             	sub    esp,0x20
c000a833:	a0 ae 08 02 c0       	mov    al,ds:0xc00208ae
c000a838:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a83c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a840:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a844:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a848:	b8 10 00 00 00       	mov    eax,0x10
c000a84d:	f7 c7 02 00 00 00    	test   edi,0x2
c000a853:	75 60                	jne    c000a8b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a855:	89 c1                	mov    ecx,eax
c000a857:	c1 e9 02             	shr    ecx,0x2
c000a85a:	fc                   	cld    
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a85f:	a8 02                	test   al,0x2
c000a861:	74 0b                	je     c000a86e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a863:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a866:	66 89 17             	mov    WORD PTR [edi],dx
c000a869:	ba 02 00 00 00       	mov    edx,0x2
c000a86e:	a8 01                	test   al,0x1
c000a870:	74 06                	je     c000a878 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a872:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a875:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a878:	89 ee                	mov    esi,ebp
c000a87a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a87e:	eb 02                	jmp    c000a882 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a880:	89 c6                	mov    esi,eax
c000a882:	31 d2                	xor    edx,edx
c000a884:	83 c1 01             	add    ecx,0x1
c000a887:	89 f0                	mov    eax,esi
c000a889:	f7 f3                	div    ebx
c000a88b:	39 de                	cmp    esi,ebx
c000a88d:	73 f1                	jae    c000a880 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a88f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a892:	eb 02                	jmp    c000a896 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a894:	89 c5                	mov    ebp,eax
c000a896:	31 d2                	xor    edx,edx
c000a898:	83 e9 01             	sub    ecx,0x1
c000a89b:	89 e8                	mov    eax,ebp
c000a89d:	f7 f3                	div    ebx
c000a89f:	39 dd                	cmp    ebp,ebx
c000a8a1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8a5:	88 11                	mov    BYTE PTR [ecx],dl
c000a8a7:	73 eb                	jae    c000a894 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8ad:	83 c4 20             	add    esp,0x20
c000a8b0:	5b                   	pop    ebx
c000a8b1:	5e                   	pop    esi
c000a8b2:	5f                   	pop    edi
c000a8b3:	5d                   	pop    ebp
c000a8b4:	c3                   	ret    
c000a8b5:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8b8:	83 c7 02             	add    edi,0x2
c000a8bb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8bf:	83 c6 02             	add    esi,0x2
c000a8c2:	83 e8 02             	sub    eax,0x2
c000a8c5:	eb 8e                	jmp    c000a855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8c7 <Dbg::logc(char)>:
c000a8c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8cb:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a8d2:	75 12                	jne    c000a8e6 <Dbg::logc(char)+0x1f>
c000a8d4:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8d9:	ec                   	in     al,dx
c000a8da:	a8 20                	test   al,0x20
c000a8dc:	74 fb                	je     c000a8d9 <Dbg::logc(char)+0x12>
c000a8de:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8e3:	88 c8                	mov    al,cl
c000a8e5:	ee                   	out    dx,al
c000a8e6:	c3                   	ret    

c000a8e7 <Dbg::logs(char*)>:
c000a8e7:	53                   	push   ebx
c000a8e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8ef:	85 c0                	test   eax,eax
c000a8f1:	74 11                	je     c000a904 <Dbg::logs(char*)+0x1d>
c000a8f3:	83 c3 01             	add    ebx,0x1
c000a8f6:	50                   	push   eax
c000a8f7:	e8 cb ff ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a8fc:	58                   	pop    eax
c000a8fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a900:	85 c0                	test   eax,eax
c000a902:	75 ef                	jne    c000a8f3 <Dbg::logs(char*)+0xc>
c000a904:	5b                   	pop    ebx
c000a905:	c3                   	ret    

c000a906 <Dbg::logWriteInt(unsigned int)>:
c000a906:	83 ec 10             	sub    esp,0x10
c000a909:	6a 0a                	push   0xa
c000a90b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a90f:	50                   	push   eax
c000a910:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a914:	50                   	push   eax
c000a915:	e8 0d ff ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a91a:	50                   	push   eax
c000a91b:	e8 c7 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a920:	83 c4 20             	add    esp,0x20
c000a923:	c3                   	ret    

c000a924 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a924:	83 ec 10             	sub    esp,0x10
c000a927:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a92b:	50                   	push   eax
c000a92c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a930:	50                   	push   eax
c000a931:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a935:	52                   	push   edx
c000a936:	e8 ec fe ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a93b:	50                   	push   eax
c000a93c:	e8 a6 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a941:	83 c4 20             	add    esp,0x20
c000a944:	c3                   	ret    

c000a945 <Dbg::kprintf(char const*, ...)>:
c000a945:	55                   	push   ebp
c000a946:	57                   	push   edi
c000a947:	56                   	push   esi
c000a948:	53                   	push   ebx
c000a949:	83 ec 0c             	sub    esp,0xc
c000a94c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a950:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a957:	74 08                	je     c000a961 <Dbg::kprintf(char const*, ...)+0x1c>
c000a959:	83 c4 0c             	add    esp,0xc
c000a95c:	5b                   	pop    ebx
c000a95d:	5e                   	pop    esi
c000a95e:	5f                   	pop    edi
c000a95f:	5d                   	pop    ebp
c000a960:	c3                   	ret    
c000a961:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a965:	31 ff                	xor    edi,edi
c000a967:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a96b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a96e:	85 c0                	test   eax,eax
c000a970:	74 e7                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a972:	8d 77 01             	lea    esi,[edi+0x1]
c000a975:	83 f8 25             	cmp    eax,0x25
c000a978:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a97b:	75 47                	jne    c000a9c4 <Dbg::kprintf(char const*, ...)+0x7f>
c000a97d:	83 c7 02             	add    edi,0x2
c000a980:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a983:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a986:	83 e8 25             	sub    eax,0x25
c000a989:	0f b6 c0             	movzx  eax,al
c000a98c:	83 f8 53             	cmp    eax,0x53
c000a98f:	0f 87 ce 00 00 00    	ja     c000aa63 <Dbg::kprintf(char const*, ...)+0x11e>
c000a995:	ff 24 85 bc 0d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf244]
c000a99c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9a0:	89 c8                	mov    eax,ecx
c000a9a2:	83 c1 04             	add    ecx,0x4
c000a9a5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a9:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9ab:	55                   	push   ebp
c000a9ac:	e8 55 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9b1:	58                   	pop    eax
c000a9b2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9b5:	85 c0                	test   eax,eax
c000a9b7:	74 a0                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a9b9:	8d 77 01             	lea    esi,[edi+0x1]
c000a9bc:	83 f8 25             	cmp    eax,0x25
c000a9bf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9c2:	74 b9                	je     c000a97d <Dbg::kprintf(char const*, ...)+0x38>
c000a9c4:	50                   	push   eax
c000a9c5:	89 f7                	mov    edi,esi
c000a9c7:	e8 fb fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a9cc:	89 ee                	mov    esi,ebp
c000a9ce:	58                   	pop    eax
c000a9cf:	eb e1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d5:	89 c8                	mov    eax,ecx
c000a9d7:	83 c1 04             	add    ecx,0x4
c000a9da:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e0:	50                   	push   eax
c000a9e1:	e8 01 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a9e6:	58                   	pop    eax
c000a9e7:	eb c9                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ed:	89 d0                	mov    eax,edx
c000a9ef:	83 c2 04             	add    edx,0x4
c000a9f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9f8:	50                   	push   eax
c000a9f9:	e8 08 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9fe:	58                   	pop    eax
c000a9ff:	eb b1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa05:	89 d0                	mov    eax,edx
c000aa07:	83 c2 04             	add    edx,0x4
c000aa0a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa11:	50                   	push   eax
c000aa12:	e8 b0 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa17:	58                   	pop    eax
c000aa18:	eb 98                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa1e:	89 c8                	mov    eax,ecx
c000aa20:	83 c1 04             	add    ecx,0x4
c000aa23:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa27:	6a 10                	push   0x10
c000aa29:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa2b:	51                   	push   ecx
c000aa2c:	e8 f3 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa31:	5d                   	pop    ebp
c000aa32:	58                   	pop    eax
c000aa33:	e9 7a ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa3c:	89 d0                	mov    eax,edx
c000aa3e:	83 c2 08             	add    edx,0x8
c000aa41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa45:	6a 10                	push   0x10
c000aa47:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa49:	50                   	push   eax
c000aa4a:	e8 d5 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa4f:	58                   	pop    eax
c000aa50:	5a                   	pop    edx
c000aa51:	e9 5c ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa56:	6a 25                	push   0x25
c000aa58:	e8 6a fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa5d:	5a                   	pop    edx
c000aa5e:	e9 4f ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa63:	6a 25                	push   0x25
c000aa65:	e8 5d fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa6a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa6e:	50                   	push   eax
c000aa6f:	e8 53 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa74:	5a                   	pop    edx
c000aa75:	59                   	pop    ecx
c000aa76:	e9 37 ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7b:	90                   	nop

c000aa7c <KiUbsanPrintDetails(char const*, void*)>:
c000aa7c:	83 ec 1c             	sub    esp,0x1c
c000aa7f:	83 ec 08             	sub    esp,0x8
c000aa82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa86:	68 0c 0f 02 c0       	push   0xc0020f0c
c000aa8b:	e8 b5 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aa90:	83 c4 10             	add    esp,0x10
c000aa93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaa1:	83 ec 08             	sub    esp,0x8
c000aaa4:	50                   	push   eax
c000aaa5:	68 20 0f 02 c0       	push   0xc0020f20
c000aaaa:	e8 96 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aaaf:	83 c4 10             	add    esp,0x10
c000aab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aab9:	83 ec 08             	sub    esp,0x8
c000aabc:	50                   	push   eax
c000aabd:	68 2a 0f 02 c0       	push   0xc0020f2a
c000aac2:	e8 7e fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aac7:	83 c4 10             	add    esp,0x10
c000aaca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aace:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aad1:	83 ec 08             	sub    esp,0x8
c000aad4:	50                   	push   eax
c000aad5:	68 34 0f 02 c0       	push   0xc0020f34
c000aada:	e8 66 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	90                   	nop
c000aae3:	83 c4 1c             	add    esp,0x1c
c000aae6:	c3                   	ret    
c000aae7:	90                   	nop

c000aae8 <__ubsan_handle_type_mismatch_v1>:
c000aae8:	83 ec 0c             	sub    esp,0xc
c000aaeb:	83 ec 08             	sub    esp,0x8
c000aaee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaf2:	68 78 10 02 c0       	push   0xc0021078
c000aaf7:	e8 80 ff ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000aafc:	83 c4 10             	add    esp,0x10
c000aaff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab04:	75 16                	jne    c000ab1c <__ubsan_handle_type_mismatch_v1+0x34>
c000ab06:	83 ec 0c             	sub    esp,0xc
c000ab09:	68 3e 0f 02 c0       	push   0xc0020f3e
c000ab0e:	e8 32 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab13:	83 c4 10             	add    esp,0x10
c000ab16:	e9 91 00 00 00       	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab1b:	90                   	nop
c000ab1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab23:	85 c0                	test   eax,eax
c000ab25:	74 29                	je     c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab2e:	83 e8 01             	sub    eax,0x1
c000ab31:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab35:	75 19                	jne    c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab37:	83 ec 08             	sub    esp,0x8
c000ab3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab3e:	68 98 10 02 c0       	push   0xc0021098
c000ab43:	e8 fd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	eb 5f                	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab50:	83 ec 0c             	sub    esp,0xc
c000ab53:	68 53 0f 02 c0       	push   0xc0020f53
c000ab58:	e8 e8 fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab67:	0f b6 c0             	movzx  eax,al
c000ab6a:	83 ec 08             	sub    esp,0x8
c000ab6d:	50                   	push   eax
c000ab6e:	68 6d 0f 02 c0       	push   0xc0020f6d
c000ab73:	e8 cd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab78:	83 c4 10             	add    esp,0x10
c000ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab82:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8d:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab90:	0f b6 c0             	movzx  eax,al
c000ab93:	8b 04 85 e0 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd020]
c000ab9a:	51                   	push   ecx
c000ab9b:	52                   	push   edx
c000ab9c:	50                   	push   eax
c000ab9d:	68 c0 10 02 c0       	push   0xc00210c0
c000aba2:	e8 9e fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	66 90                	xchg   ax,ax
c000abac:	83 ec 0c             	sub    esp,0xc
c000abaf:	68 78 10 02 c0       	push   0xc0021078
c000abb4:	e8 98 66 00 00       	call   c0011251 <KePanic(char const*)>
c000abb9:	83 c4 10             	add    esp,0x10
c000abbc:	90                   	nop
c000abbd:	83 c4 0c             	add    esp,0xc
c000abc0:	c3                   	ret    
c000abc1:	8d 76 00             	lea    esi,[esi+0x0]

c000abc4 <__ubsan_handle_pointer_overflow>:
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	83 ec 08             	sub    esp,0x8
c000abca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abce:	68 08 11 02 c0       	push   0xc0021108
c000abd3:	e8 a4 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	68 08 11 02 c0       	push   0xc0021108
c000abe3:	e8 69 66 00 00       	call   c0011251 <KePanic(char const*)>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	90                   	nop
c000abec:	83 c4 0c             	add    esp,0xc
c000abef:	c3                   	ret    

c000abf0 <__ubsan_handle_out_of_bounds>:
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	83 ec 08             	sub    esp,0x8
c000abf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abfa:	68 78 0f 02 c0       	push   0xc0020f78
c000abff:	e8 78 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	83 ec 0c             	sub    esp,0xc
c000ac0a:	68 78 0f 02 c0       	push   0xc0020f78
c000ac0f:	e8 3d 66 00 00       	call   c0011251 <KePanic(char const*)>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	90                   	nop
c000ac18:	83 c4 0c             	add    esp,0xc
c000ac1b:	c3                   	ret    

c000ac1c <__ubsan_handle_add_overflow>:
c000ac1c:	83 ec 0c             	sub    esp,0xc
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac26:	68 95 0f 02 c0       	push   0xc0020f95
c000ac2b:	e8 4c fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	83 ec 0c             	sub    esp,0xc
c000ac36:	68 95 0f 02 c0       	push   0xc0020f95
c000ac3b:	e8 11 66 00 00       	call   c0011251 <KePanic(char const*)>
c000ac40:	83 c4 10             	add    esp,0x10
c000ac43:	90                   	nop
c000ac44:	83 c4 0c             	add    esp,0xc
c000ac47:	c3                   	ret    

c000ac48 <__ubsan_handle_load_invalid_value>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	83 ec 08             	sub    esp,0x8
c000ac4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac52:	68 28 11 02 c0       	push   0xc0021128
c000ac57:	e8 20 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	83 ec 0c             	sub    esp,0xc
c000ac62:	68 28 11 02 c0       	push   0xc0021128
c000ac67:	e8 e5 65 00 00       	call   c0011251 <KePanic(char const*)>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	90                   	nop
c000ac70:	83 c4 0c             	add    esp,0xc
c000ac73:	c3                   	ret    

c000ac74 <__ubsan_handle_divrem_overflow>:
c000ac74:	83 ec 0c             	sub    esp,0xc
c000ac77:	83 ec 08             	sub    esp,0x8
c000ac7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac7e:	68 4c 11 02 c0       	push   0xc002114c
c000ac83:	e8 f4 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	83 ec 0c             	sub    esp,0xc
c000ac8e:	68 4c 11 02 c0       	push   0xc002114c
c000ac93:	e8 b9 65 00 00       	call   c0011251 <KePanic(char const*)>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	90                   	nop
c000ac9c:	83 c4 0c             	add    esp,0xc
c000ac9f:	c3                   	ret    

c000aca0 <__ubsan_handle_mul_overflow>:
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	83 ec 08             	sub    esp,0x8
c000aca6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acaa:	68 b1 0f 02 c0       	push   0xc0020fb1
c000acaf:	e8 c8 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	83 ec 0c             	sub    esp,0xc
c000acba:	68 b1 0f 02 c0       	push   0xc0020fb1
c000acbf:	e8 8d 65 00 00       	call   c0011251 <KePanic(char const*)>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	90                   	nop
c000acc8:	83 c4 0c             	add    esp,0xc
c000accb:	c3                   	ret    

c000accc <__ubsan_handle_sub_overflow>:
c000accc:	83 ec 0c             	sub    esp,0xc
c000accf:	83 ec 08             	sub    esp,0x8
c000acd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acd6:	68 cd 0f 02 c0       	push   0xc0020fcd
c000acdb:	e8 9c fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	83 ec 0c             	sub    esp,0xc
c000ace6:	68 cd 0f 02 c0       	push   0xc0020fcd
c000aceb:	e8 61 65 00 00       	call   c0011251 <KePanic(char const*)>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	90                   	nop
c000acf4:	83 c4 0c             	add    esp,0xc
c000acf7:	c3                   	ret    

c000acf8 <__ubsan_handle_shift_out_of_bounds>:
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	83 ec 08             	sub    esp,0x8
c000acfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad02:	68 6c 11 02 c0       	push   0xc002116c
c000ad07:	e8 70 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	83 ec 0c             	sub    esp,0xc
c000ad12:	68 6c 11 02 c0       	push   0xc002116c
c000ad17:	e8 35 65 00 00       	call   c0011251 <KePanic(char const*)>
c000ad1c:	83 c4 10             	add    esp,0x10
c000ad1f:	90                   	nop
c000ad20:	83 c4 0c             	add    esp,0xc
c000ad23:	c3                   	ret    

c000ad24 <__ubsan_handle_negate_overflow>:
c000ad24:	83 ec 0c             	sub    esp,0xc
c000ad27:	83 ec 08             	sub    esp,0x8
c000ad2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad2e:	68 90 11 02 c0       	push   0xc0021190
c000ad33:	e8 44 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	68 90 11 02 c0       	push   0xc0021190
c000ad43:	e8 09 65 00 00       	call   c0011251 <KePanic(char const*)>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	90                   	nop
c000ad4c:	83 c4 0c             	add    esp,0xc
c000ad4f:	c3                   	ret    

c000ad50 <KiCreateSymlinkID()>:
c000ad50:	55                   	push   ebp
c000ad51:	57                   	push   edi
c000ad52:	56                   	push   esi
c000ad53:	53                   	push   ebx
c000ad54:	31 db                	xor    ebx,ebx
c000ad56:	83 ec 1c             	sub    esp,0x1c
c000ad59:	e8 41 66 00 00       	call   c001139f <KeRand()>
c000ad5e:	43                   	inc    ebx
c000ad5f:	8b 2d 00 64 02 c0    	mov    ebp,DWORD PTR ds:0xc0026400
c000ad65:	31 d2                	xor    edx,edx
c000ad67:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000ad6a:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000ad6e:	89 0d 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,ecx
c000ad74:	c1 e0 1b             	shl    eax,0x1b
c000ad77:	89 d7                	mov    edi,edx
c000ad79:	89 c6                	mov    esi,eax
c000ad7b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000ad7f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ad87:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000ad8d:	75 10                	jne    c000ad9f <KiCreateSymlinkID()+0x4f>
c000ad8f:	83 ec 0c             	sub    esp,0xc
c000ad92:	68 af 11 02 c0       	push   0xc00211af
c000ad97:	e8 b5 64 00 00       	call   c0011251 <KePanic(char const*)>
c000ad9c:	83 c4 10             	add    esp,0x10
c000ad9f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ada3:	75 04                	jne    c000ada9 <KiCreateSymlinkID()+0x59>
c000ada5:	39 f5                	cmp    ebp,esi
c000ada7:	74 b0                	je     c000ad59 <KiCreateSymlinkID()+0x9>
c000ada9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000adad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000adb1:	31 f0                	xor    eax,esi
c000adb3:	83 c4 1c             	add    esp,0x1c
c000adb6:	31 fa                	xor    edx,edi
c000adb8:	5b                   	pop    ebx
c000adb9:	5e                   	pop    esi
c000adba:	5f                   	pop    edi
c000adbb:	5d                   	pop    ebp
c000adbc:	c3                   	ret    

c000adbd <KiFlushSymlinkChanges()>:
c000adbd:	56                   	push   esi
c000adbe:	53                   	push   ebx
c000adbf:	83 ec 20             	sub    esp,0x20
c000adc2:	68 14 01 00 00       	push   0x114
c000adc7:	e8 ea cc ff ff       	call   c0007ab6 <malloc>
c000adcc:	83 c4 0c             	add    esp,0xc
c000adcf:	89 c3                	mov    ebx,eax
c000add1:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000add7:	68 b8 11 02 c0       	push   0xc00211b8
c000addc:	50                   	push   eax
c000addd:	e8 36 09 00 00       	call   c000b718 <File::File(char const*, Process*)>
c000ade2:	83 c4 10             	add    esp,0x10
c000ade5:	85 db                	test   ebx,ebx
c000ade7:	75 10                	jne    c000adf9 <KiFlushSymlinkChanges()+0x3c>
c000ade9:	83 ec 0c             	sub    esp,0xc
c000adec:	68 d6 11 02 c0       	push   0xc00211d6
c000adf1:	e8 5b 64 00 00       	call   c0011251 <KePanic(char const*)>
c000adf6:	83 c4 10             	add    esp,0x10
c000adf9:	50                   	push   eax
c000adfa:	50                   	push   eax
c000adfb:	6a 06                	push   0x6
c000adfd:	53                   	push   ebx
c000adfe:	e8 d1 09 00 00       	call   c000b7d4 <File::open(FileOpenMode)>
c000ae03:	83 c4 10             	add    esp,0x10
c000ae06:	85 c0                	test   eax,eax
c000ae08:	74 10                	je     c000ae1a <KiFlushSymlinkChanges()+0x5d>
c000ae0a:	83 ec 0c             	sub    esp,0xc
c000ae0d:	68 f0 11 02 c0       	push   0xc00211f0
c000ae12:	e8 3a 64 00 00       	call   c0011251 <KePanic(char const*)>
c000ae17:	83 c4 10             	add    esp,0x10
c000ae1a:	31 f6                	xor    esi,esi
c000ae1c:	39 35 c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,esi
c000ae22:	7e 40                	jle    c000ae64 <KiFlushSymlinkChanges()+0xa7>
c000ae24:	83 ec 0c             	sub    esp,0xc
c000ae27:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae29:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ae2d:	50                   	push   eax
c000ae2e:	89 f0                	mov    eax,esi
c000ae30:	c1 e0 08             	shl    eax,0x8
c000ae33:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae38:	50                   	push   eax
c000ae39:	6a 00                	push   0x0
c000ae3b:	68 00 01 00 00       	push   0x100
c000ae40:	53                   	push   ebx
c000ae41:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae44:	83 c4 20             	add    esp,0x20
c000ae47:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae4f:	74 10                	je     c000ae61 <KiFlushSymlinkChanges()+0xa4>
c000ae51:	83 ec 0c             	sub    esp,0xc
c000ae54:	68 0a 12 02 c0       	push   0xc002120a
c000ae59:	e8 f3 63 00 00       	call   c0011251 <KePanic(char const*)>
c000ae5e:	83 c4 10             	add    esp,0x10
c000ae61:	46                   	inc    esi
c000ae62:	eb b8                	jmp    c000ae1c <KiFlushSymlinkChanges()+0x5f>
c000ae64:	83 ec 0c             	sub    esp,0xc
c000ae67:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000ae71:	53                   	push   ebx
c000ae72:	e8 bb 09 00 00       	call   c000b832 <File::close()>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	85 db                	test   ebx,ebx
c000ae7c:	74 0c                	je     c000ae8a <KiFlushSymlinkChanges()+0xcd>
c000ae7e:	83 ec 0c             	sub    esp,0xc
c000ae81:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae83:	53                   	push   ebx
c000ae84:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae87:	83 c4 10             	add    esp,0x10
c000ae8a:	83 c4 14             	add    esp,0x14
c000ae8d:	5b                   	pop    ebx
c000ae8e:	5e                   	pop    esi
c000ae8f:	c3                   	ret    

c000ae90 <KiDeinitialiseSymlinks(void*)>:
c000ae90:	e9 28 ff ff ff       	jmp    c000adbd <KiFlushSymlinkChanges()>

c000ae95 <KeRegisterSymlink(char const*, unsigned long long)>:
c000ae95:	53                   	push   ebx
c000ae96:	83 ec 0c             	sub    esp,0xc
c000ae99:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ae9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000aea1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000aea5:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aeaa:	68 00 01 00 00       	push   0x100
c000aeaf:	89 14 c5 e0 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda020],edx
c000aeb6:	6a 00                	push   0x0
c000aeb8:	89 0c c5 e4 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda01c],ecx
c000aebf:	c1 e0 08             	shl    eax,0x8
c000aec2:	05 00 60 02 c0       	add    eax,0xc0026000
c000aec7:	50                   	push   eax
c000aec8:	e8 23 56 ff ff       	call   c00004f0 <memset>
c000aecd:	58                   	pop    eax
c000aece:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aed3:	5a                   	pop    edx
c000aed4:	c1 e0 08             	shl    eax,0x8
c000aed7:	53                   	push   ebx
c000aed8:	05 00 60 02 c0       	add    eax,0xc0026000
c000aedd:	50                   	push   eax
c000aede:	e8 5d 57 ff ff       	call   c0000640 <strcpy>
c000aee3:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aee8:	83 c4 10             	add    esp,0x10
c000aeeb:	40                   	inc    eax
c000aeec:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c000aef1:	83 f8 03             	cmp    eax,0x3
c000aef4:	7e 09                	jle    c000aeff <KeRegisterSymlink(char const*, unsigned long long)+0x6a>
c000aef6:	83 c4 08             	add    esp,0x8
c000aef9:	5b                   	pop    ebx
c000aefa:	e9 be fe ff ff       	jmp    c000adbd <KiFlushSymlinkChanges()>
c000aeff:	83 c4 08             	add    esp,0x8
c000af02:	5b                   	pop    ebx
c000af03:	c3                   	ret    

c000af04 <KiIsSymlinkRegistered(char const*)>:
c000af04:	53                   	push   ebx
c000af05:	31 db                	xor    ebx,ebx
c000af07:	83 ec 08             	sub    esp,0x8
c000af0a:	39 1d c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,ebx
c000af10:	7e 30                	jle    c000af42 <KiIsSymlinkRegistered(char const*)+0x3e>
c000af12:	50                   	push   eax
c000af13:	50                   	push   eax
c000af14:	89 d8                	mov    eax,ebx
c000af16:	c1 e0 08             	shl    eax,0x8
c000af19:	05 00 60 02 c0       	add    eax,0xc0026000
c000af1e:	50                   	push   eax
c000af1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af23:	e8 28 58 ff ff       	call   c0000750 <strcmp>
c000af28:	83 c4 10             	add    esp,0x10
c000af2b:	85 c0                	test   eax,eax
c000af2d:	75 10                	jne    c000af3f <KiIsSymlinkRegistered(char const*)+0x3b>
c000af2f:	8b 04 dd e0 5f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffda020]
c000af36:	8b 14 dd e4 5f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffda01c]
c000af3d:	eb 07                	jmp    c000af46 <KiIsSymlinkRegistered(char const*)+0x42>
c000af3f:	43                   	inc    ebx
c000af40:	eb c8                	jmp    c000af0a <KiIsSymlinkRegistered(char const*)+0x6>
c000af42:	31 c0                	xor    eax,eax
c000af44:	31 d2                	xor    edx,edx
c000af46:	83 c4 08             	add    esp,0x8
c000af49:	5b                   	pop    ebx
c000af4a:	c3                   	ret    

c000af4b <KeDereferenceSymlink(char const*, char*)>:
c000af4b:	55                   	push   ebp
c000af4c:	57                   	push   edi
c000af4d:	56                   	push   esi
c000af4e:	53                   	push   ebx
c000af4f:	83 ec 48             	sub    esp,0x48
c000af52:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c000af56:	56                   	push   esi
c000af57:	e8 a8 ff ff ff       	call   c000af04 <KiIsSymlinkRegistered(char const*)>
c000af5c:	83 c4 10             	add    esp,0x10
c000af5f:	89 c7                	mov    edi,eax
c000af61:	89 d0                	mov    eax,edx
c000af63:	09 f8                	or     eax,edi
c000af65:	0f 84 64 01 00 00    	je     c000b0cf <KeDereferenceSymlink(char const*, char*)+0x184>
c000af6b:	83 ec 0c             	sub    esp,0xc
c000af6e:	89 d5                	mov    ebp,edx
c000af70:	68 14 01 00 00       	push   0x114
c000af75:	e8 3c cb ff ff       	call   c0007ab6 <malloc>
c000af7a:	83 c4 0c             	add    esp,0xc
c000af7d:	89 c3                	mov    ebx,eax
c000af7f:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000af85:	56                   	push   esi
c000af86:	50                   	push   eax
c000af87:	e8 8c 07 00 00       	call   c000b718 <File::File(char const*, Process*)>
c000af8c:	83 c4 10             	add    esp,0x10
c000af8f:	85 db                	test   ebx,ebx
c000af91:	0f 84 1f 01 00 00    	je     c000b0b6 <KeDereferenceSymlink(char const*, char*)+0x16b>
c000af97:	52                   	push   edx
c000af98:	52                   	push   edx
c000af99:	6a 01                	push   0x1
c000af9b:	53                   	push   ebx
c000af9c:	e8 33 08 00 00       	call   c000b7d4 <File::open(FileOpenMode)>
c000afa1:	83 c4 10             	add    esp,0x10
c000afa4:	85 c0                	test   eax,eax
c000afa6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afa8:	74 09                	je     c000afb3 <KeDereferenceSymlink(char const*, char*)+0x68>
c000afaa:	83 ec 0c             	sub    esp,0xc
c000afad:	53                   	push   ebx
c000afae:	e9 fd 00 00 00       	jmp    c000b0b0 <KeDereferenceSymlink(char const*, char*)+0x165>
c000afb3:	83 ec 0c             	sub    esp,0xc
c000afb6:	8d 74 24 18          	lea    esi,[esp+0x18]
c000afba:	56                   	push   esi
c000afbb:	8d 54 24 37          	lea    edx,[esp+0x37]
c000afbf:	52                   	push   edx
c000afc0:	6a 00                	push   0x0
c000afc2:	6a 08                	push   0x8
c000afc4:	53                   	push   ebx
c000afc5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000afc8:	83 c4 20             	add    esp,0x20
c000afcb:	85 c0                	test   eax,eax
c000afcd:	0f 85 cf 00 00 00    	jne    c000b0a2 <KeDereferenceSymlink(char const*, char*)+0x157>
c000afd3:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000afd8:	0f 85 c4 00 00 00    	jne    c000b0a2 <KeDereferenceSymlink(char const*, char*)+0x157>
c000afde:	83 ec 0c             	sub    esp,0xc
c000afe1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afe3:	56                   	push   esi
c000afe4:	8d 54 24 20          	lea    edx,[esp+0x20]
c000afe8:	52                   	push   edx
c000afe9:	6a 00                	push   0x0
c000afeb:	6a 08                	push   0x8
c000afed:	53                   	push   ebx
c000afee:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000aff1:	83 c4 20             	add    esp,0x20
c000aff4:	85 c0                	test   eax,eax
c000aff6:	0f 85 a6 00 00 00    	jne    c000b0a2 <KeDereferenceSymlink(char const*, char*)+0x157>
c000affc:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b001:	0f 85 9b 00 00 00    	jne    c000b0a2 <KeDereferenceSymlink(char const*, char*)+0x157>
c000b007:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b00b:	0f 85 be 00 00 00    	jne    c000b0cf <KeDereferenceSymlink(char const*, char*)+0x184>
c000b011:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b015:	0f 85 b4 00 00 00    	jne    c000b0cf <KeDereferenceSymlink(char const*, char*)+0x184>
c000b01b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b023:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b02b:	50                   	push   eax
c000b02c:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b030:	50                   	push   eax
c000b031:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b035:	50                   	push   eax
c000b036:	53                   	push   ebx
c000b037:	e8 9a 0a 00 00       	call   c000bad6 <File::stat(unsigned long long*, bool*)>
c000b03c:	83 c4 10             	add    esp,0x10
c000b03f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b044:	75 5c                	jne    c000b0a2 <KeDereferenceSymlink(char const*, char*)+0x157>
c000b046:	31 c9                	xor    ecx,ecx
c000b048:	bf 0f 00 00 00       	mov    edi,0xf
c000b04d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b051:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b055:	39 c7                	cmp    edi,eax
c000b057:	89 cf                	mov    edi,ecx
c000b059:	19 d7                	sbb    edi,edx
c000b05b:	73 45                	jae    c000b0a2 <KeDereferenceSymlink(char const*, char*)+0x157>
c000b05d:	83 c0 f0             	add    eax,0xfffffff0
c000b060:	bf ff 00 00 00       	mov    edi,0xff
c000b065:	83 d2 ff             	adc    edx,0xffffffff
c000b068:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b06c:	39 c7                	cmp    edi,eax
c000b06e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b072:	19 d1                	sbb    ecx,edx
c000b074:	72 40                	jb     c000b0b6 <KeDereferenceSymlink(char const*, char*)+0x16b>
c000b076:	83 ec 0c             	sub    esp,0xc
c000b079:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b07b:	56                   	push   esi
c000b07c:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b080:	52                   	push   edx
c000b081:	50                   	push   eax
c000b082:	53                   	push   ebx
c000b083:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b086:	83 c4 20             	add    esp,0x20
c000b089:	85 c0                	test   eax,eax
c000b08b:	75 15                	jne    c000b0a2 <KeDereferenceSymlink(char const*, char*)+0x157>
c000b08d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b091:	89 c7                	mov    edi,eax
c000b093:	c1 ff 1f             	sar    edi,0x1f
c000b096:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b09a:	75 06                	jne    c000b0a2 <KeDereferenceSymlink(char const*, char*)+0x157>
c000b09c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b0a0:	74 19                	je     c000b0bb <KeDereferenceSymlink(char const*, char*)+0x170>
c000b0a2:	83 ec 0c             	sub    esp,0xc
c000b0a5:	53                   	push   ebx
c000b0a6:	e8 87 07 00 00       	call   c000b832 <File::close()>
c000b0ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0b3:	83 c4 10             	add    esp,0x10
c000b0b6:	83 c8 ff             	or     eax,0xffffffff
c000b0b9:	eb 16                	jmp    c000b0d1 <KeDereferenceSymlink(char const*, char*)+0x186>
c000b0bb:	83 ec 0c             	sub    esp,0xc
c000b0be:	53                   	push   ebx
c000b0bf:	e8 6e 07 00 00       	call   c000b832 <File::close()>
c000b0c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0c9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	31 c0                	xor    eax,eax
c000b0d1:	83 c4 3c             	add    esp,0x3c
c000b0d4:	5b                   	pop    ebx
c000b0d5:	5e                   	pop    esi
c000b0d6:	5f                   	pop    edi
c000b0d7:	5d                   	pop    ebp
c000b0d8:	c3                   	ret    

c000b0d9 <KeCreateSymlink(char const*, char const*)>:
c000b0d9:	55                   	push   ebp
c000b0da:	57                   	push   edi
c000b0db:	56                   	push   esi
c000b0dc:	53                   	push   ebx
c000b0dd:	83 ec 38             	sub    esp,0x38
c000b0e0:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b0e4:	68 14 01 00 00       	push   0x114
c000b0e9:	e8 c8 c9 ff ff       	call   c0007ab6 <malloc>
c000b0ee:	83 c4 0c             	add    esp,0xc
c000b0f1:	89 c3                	mov    ebx,eax
c000b0f3:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b0f9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b0fd:	50                   	push   eax
c000b0fe:	e8 15 06 00 00       	call   c000b718 <File::File(char const*, Process*)>
c000b103:	83 c4 10             	add    esp,0x10
c000b106:	b8 01 00 00 00       	mov    eax,0x1
c000b10b:	85 db                	test   ebx,ebx
c000b10d:	0f 84 fb 00 00 00    	je     c000b20e <KeCreateSymlink(char const*, char const*)+0x135>
c000b113:	52                   	push   edx
c000b114:	52                   	push   edx
c000b115:	6a 12                	push   0x12
c000b117:	53                   	push   ebx
c000b118:	e8 b7 06 00 00       	call   c000b7d4 <File::open(FileOpenMode)>
c000b11d:	83 c4 10             	add    esp,0x10
c000b120:	85 c0                	test   eax,eax
c000b122:	74 0b                	je     c000b12f <KeCreateSymlink(char const*, char const*)+0x56>
c000b124:	83 ec 0c             	sub    esp,0xc
c000b127:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b129:	53                   	push   ebx
c000b12a:	e9 d4 00 00 00       	jmp    c000b203 <KeCreateSymlink(char const*, char const*)+0x12a>
c000b12f:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b133:	be 24 12 02 c0       	mov    esi,0xc0021224
c000b138:	b9 09 00 00 00       	mov    ecx,0x9
c000b13d:	fc                   	cld    
c000b13e:	83 ec 0c             	sub    esp,0xc
c000b141:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b143:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b147:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b149:	56                   	push   esi
c000b14a:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b14e:	52                   	push   edx
c000b14f:	6a 00                	push   0x0
c000b151:	6a 08                	push   0x8
c000b153:	53                   	push   ebx
c000b154:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b157:	83 c4 20             	add    esp,0x20
c000b15a:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b15f:	0f 85 90 00 00 00    	jne    c000b1f5 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b165:	85 c0                	test   eax,eax
c000b167:	0f 85 88 00 00 00    	jne    c000b1f5 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b16d:	e8 de fb ff ff       	call   c000ad50 <KiCreateSymlinkID()>
c000b172:	83 ec 0c             	sub    esp,0xc
c000b175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b179:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b17d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b17f:	56                   	push   esi
c000b180:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b184:	52                   	push   edx
c000b185:	6a 00                	push   0x0
c000b187:	6a 08                	push   0x8
c000b189:	53                   	push   ebx
c000b18a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b18d:	83 c4 20             	add    esp,0x20
c000b190:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b195:	75 5e                	jne    c000b1f5 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b197:	85 c0                	test   eax,eax
c000b199:	75 5a                	jne    c000b1f5 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b19b:	83 ec 0c             	sub    esp,0xc
c000b19e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1a0:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b1a3:	55                   	push   ebp
c000b1a4:	e8 c7 53 ff ff       	call   c0000570 <strlen>
c000b1a9:	89 34 24             	mov    DWORD PTR [esp],esi
c000b1ac:	31 d2                	xor    edx,edx
c000b1ae:	55                   	push   ebp
c000b1af:	52                   	push   edx
c000b1b0:	50                   	push   eax
c000b1b1:	53                   	push   ebx
c000b1b2:	ff d7                	call   edi
c000b1b4:	83 c4 14             	add    esp,0x14
c000b1b7:	89 c6                	mov    esi,eax
c000b1b9:	55                   	push   ebp
c000b1ba:	e8 b1 53 ff ff       	call   c0000570 <strlen>
c000b1bf:	83 c4 10             	add    esp,0x10
c000b1c2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b1c6:	75 2d                	jne    c000b1f5 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1c8:	85 f6                	test   esi,esi
c000b1ca:	75 29                	jne    c000b1f5 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1cc:	50                   	push   eax
c000b1cd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1d1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1d5:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b1d9:	e8 b7 fc ff ff       	call   c000ae95 <KeRegisterSymlink(char const*, unsigned long long)>
c000b1de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b1e1:	e8 4c 06 00 00       	call   c000b832 <File::close()>
c000b1e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b1eb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b1ee:	83 c4 10             	add    esp,0x10
c000b1f1:	31 c0                	xor    eax,eax
c000b1f3:	eb 19                	jmp    c000b20e <KeCreateSymlink(char const*, char const*)+0x135>
c000b1f5:	83 ec 0c             	sub    esp,0xc
c000b1f8:	53                   	push   ebx
c000b1f9:	e8 34 06 00 00       	call   c000b832 <File::close()>
c000b1fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b203:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b206:	83 c4 10             	add    esp,0x10
c000b209:	b8 01 00 00 00       	mov    eax,0x1
c000b20e:	83 c4 2c             	add    esp,0x2c
c000b211:	5b                   	pop    ebx
c000b212:	5e                   	pop    esi
c000b213:	5f                   	pop    edi
c000b214:	5d                   	pop    ebp
c000b215:	c3                   	ret    

c000b216 <KeInitialiseSymlinks()>:
c000b216:	53                   	push   ebx
c000b217:	83 ec 10             	sub    esp,0x10
c000b21a:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000b224:	6a 00                	push   0x0
c000b226:	68 90 ae 00 c0       	push   0xc000ae90
c000b22b:	e8 38 58 00 00       	call   c0010a68 <KeRegisterAtexit(void (*)(void*), void*)>
c000b230:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b237:	e8 7a c8 ff ff       	call   c0007ab6 <malloc>
c000b23c:	83 c4 0c             	add    esp,0xc
c000b23f:	89 c3                	mov    ebx,eax
c000b241:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b247:	68 b8 11 02 c0       	push   0xc00211b8
c000b24c:	50                   	push   eax
c000b24d:	e8 c6 04 00 00       	call   c000b718 <File::File(char const*, Process*)>
c000b252:	83 c4 10             	add    esp,0x10
c000b255:	85 db                	test   ebx,ebx
c000b257:	75 10                	jne    c000b269 <KeInitialiseSymlinks()+0x53>
c000b259:	83 ec 0c             	sub    esp,0xc
c000b25c:	68 2d 12 02 c0       	push   0xc002122d
c000b261:	e8 eb 5f 00 00       	call   c0011251 <KePanic(char const*)>
c000b266:	83 c4 10             	add    esp,0x10
c000b269:	83 ec 0c             	sub    esp,0xc
c000b26c:	53                   	push   ebx
c000b26d:	e8 26 08 00 00       	call   c000ba98 <File::exists()>
c000b272:	83 c4 10             	add    esp,0x10
c000b275:	84 c0                	test   al,al
c000b277:	75 2d                	jne    c000b2a6 <KeInitialiseSymlinks()+0x90>
c000b279:	52                   	push   edx
c000b27a:	52                   	push   edx
c000b27b:	6a 12                	push   0x12
c000b27d:	53                   	push   ebx
c000b27e:	e8 51 05 00 00       	call   c000b7d4 <File::open(FileOpenMode)>
c000b283:	83 c4 10             	add    esp,0x10
c000b286:	85 c0                	test   eax,eax
c000b288:	74 10                	je     c000b29a <KeInitialiseSymlinks()+0x84>
c000b28a:	83 ec 0c             	sub    esp,0xc
c000b28d:	68 4a 12 02 c0       	push   0xc002124a
c000b292:	e8 ba 5f 00 00       	call   c0011251 <KePanic(char const*)>
c000b297:	83 c4 10             	add    esp,0x10
c000b29a:	83 ec 0c             	sub    esp,0xc
c000b29d:	53                   	push   ebx
c000b29e:	e8 8f 05 00 00       	call   c000b832 <File::close()>
c000b2a3:	83 c4 10             	add    esp,0x10
c000b2a6:	85 db                	test   ebx,ebx
c000b2a8:	74 0c                	je     c000b2b6 <KeInitialiseSymlinks()+0xa0>
c000b2aa:	83 ec 0c             	sub    esp,0xc
c000b2ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2af:	53                   	push   ebx
c000b2b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2b3:	83 c4 10             	add    esp,0x10
c000b2b6:	50                   	push   eax
c000b2b7:	50                   	push   eax
c000b2b8:	68 67 12 02 c0       	push   0xc0021267
c000b2bd:	68 75 12 02 c0       	push   0xc0021275
c000b2c2:	e8 12 fe ff ff       	call   c000b0d9 <KeCreateSymlink(char const*, char const*)>
c000b2c7:	83 c4 18             	add    esp,0x18
c000b2ca:	5b                   	pop    ebx
c000b2cb:	c3                   	ret    

c000b2cc <File::read(unsigned long long, void*, int*)>:
c000b2cc:	53                   	push   ebx
c000b2cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b2d1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b2d5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b2dc:	83 f8 19             	cmp    eax,0x19
c000b2df:	77 35                	ja     c000b316 <File::read(unsigned long long, void*, int*)+0x4a>
c000b2e1:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b2e8:	85 c0                	test   eax,eax
c000b2ea:	74 2a                	je     c000b316 <File::read(unsigned long long, void*, int*)+0x4a>
c000b2ec:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b2f2:	85 c0                	test   eax,eax
c000b2f4:	74 20                	je     c000b316 <File::read(unsigned long long, void*, int*)+0x4a>
c000b2f6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2fa:	74 21                	je     c000b31d <File::read(unsigned long long, void*, int*)+0x51>
c000b2fc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b2fe:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b302:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b308:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b30c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b310:	5b                   	pop    ebx
c000b311:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b314:	ff e0                	jmp    eax
c000b316:	b8 0b 00 00 00       	mov    eax,0xb
c000b31b:	eb 05                	jmp    c000b322 <File::read(unsigned long long, void*, int*)+0x56>
c000b31d:	b8 05 00 00 00       	mov    eax,0x5
c000b322:	5b                   	pop    ebx
c000b323:	c3                   	ret    

c000b324 <File::write(unsigned long long, void*, int*)>:
c000b324:	53                   	push   ebx
c000b325:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b329:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b32d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b334:	83 f8 19             	cmp    eax,0x19
c000b337:	77 35                	ja     c000b36e <File::write(unsigned long long, void*, int*)+0x4a>
c000b339:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b340:	85 c0                	test   eax,eax
c000b342:	74 2a                	je     c000b36e <File::write(unsigned long long, void*, int*)+0x4a>
c000b344:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b34a:	85 c0                	test   eax,eax
c000b34c:	74 20                	je     c000b36e <File::write(unsigned long long, void*, int*)+0x4a>
c000b34e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b352:	74 21                	je     c000b375 <File::write(unsigned long long, void*, int*)+0x51>
c000b354:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b356:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b35a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b360:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b364:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b368:	5b                   	pop    ebx
c000b369:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b36c:	ff e0                	jmp    eax
c000b36e:	b8 0b 00 00 00       	mov    eax,0xb
c000b373:	eb 05                	jmp    c000b37a <File::write(unsigned long long, void*, int*)+0x56>
c000b375:	b8 05 00 00 00       	mov    eax,0x5
c000b37a:	5b                   	pop    ebx
c000b37b:	c3                   	ret    

c000b37c <Directory::read(unsigned long long, void*, int*)>:
c000b37c:	53                   	push   ebx
c000b37d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b381:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b385:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b38c:	83 f8 19             	cmp    eax,0x19
c000b38f:	77 35                	ja     c000b3c6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b391:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b398:	85 c0                	test   eax,eax
c000b39a:	74 2a                	je     c000b3c6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b39c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b3a2:	85 c0                	test   eax,eax
c000b3a4:	74 20                	je     c000b3c6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b3a6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3aa:	74 21                	je     c000b3cd <Directory::read(unsigned long long, void*, int*)+0x51>
c000b3ac:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b3ae:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3b2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b3b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3c0:	5b                   	pop    ebx
c000b3c1:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b3c4:	ff e0                	jmp    eax
c000b3c6:	b8 0b 00 00 00       	mov    eax,0xb
c000b3cb:	eb 05                	jmp    c000b3d2 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b3cd:	b8 05 00 00 00       	mov    eax,0x5
c000b3d2:	5b                   	pop    ebx
c000b3d3:	c3                   	ret    

c000b3d4 <Directory::write(unsigned long long, void*, int*)>:
c000b3d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3d8:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b3df:	b8 0b 00 00 00       	mov    eax,0xb
c000b3e4:	83 fa 19             	cmp    edx,0x19
c000b3e7:	77 18                	ja     c000b401 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b3e9:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b3f0:	85 d2                	test   edx,edx
c000b3f2:	74 0d                	je     c000b401 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b3f4:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b3fb:	19 c0                	sbb    eax,eax
c000b3fd:	83 e0 0a             	and    eax,0xa
c000b400:	40                   	inc    eax
c000b401:	c3                   	ret    

c000b402 <File::isAtty()>:
c000b402:	31 c0                	xor    eax,eax
c000b404:	c3                   	ret    
c000b405:	90                   	nop

c000b406 <Directory::isAtty()>:
c000b406:	31 c0                	xor    eax,eax
c000b408:	c3                   	ret    
c000b409:	90                   	nop

c000b40a <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b40a:	b8 0a 00 00 00       	mov    eax,0xa
c000b40f:	c3                   	ret    

c000b410 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b410:	b8 0a 00 00 00       	mov    eax,0xa
c000b415:	c3                   	ret    

c000b416 <Filesystem::allocateSwapfile(char const*, int)>:
c000b416:	31 c0                	xor    eax,eax
c000b418:	31 d2                	xor    edx,edx
c000b41a:	c3                   	ret    
c000b41b:	90                   	nop

c000b41c <File::~File()>:
c000b41c:	83 ec 0c             	sub    esp,0xc
c000b41f:	ba 08 13 02 c0       	mov    edx,0xc0021308
c000b424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b428:	89 10                	mov    DWORD PTR [eax],edx
c000b42a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b42e:	83 ec 0c             	sub    esp,0xc
c000b431:	50                   	push   eax
c000b432:	e8 6d df ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b437:	83 c4 10             	add    esp,0x10
c000b43a:	90                   	nop
c000b43b:	83 c4 0c             	add    esp,0xc
c000b43e:	c3                   	ret    
c000b43f:	90                   	nop

c000b440 <File::~File()>:
c000b440:	83 ec 0c             	sub    esp,0xc
c000b443:	83 ec 0c             	sub    esp,0xc
c000b446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b44a:	e8 cd ff ff ff       	call   c000b41c <File::~File()>
c000b44f:	83 c4 10             	add    esp,0x10
c000b452:	83 ec 08             	sub    esp,0x8
c000b455:	68 14 01 00 00       	push   0x114
c000b45a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b45e:	e8 b5 f3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b463:	83 c4 10             	add    esp,0x10
c000b466:	83 c4 0c             	add    esp,0xc
c000b469:	c3                   	ret    

c000b46a <Directory::~Directory()>:
c000b46a:	83 ec 0c             	sub    esp,0xc
c000b46d:	ba 24 13 02 c0       	mov    edx,0xc0021324
c000b472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b476:	89 10                	mov    DWORD PTR [eax],edx
c000b478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b47c:	83 ec 0c             	sub    esp,0xc
c000b47f:	50                   	push   eax
c000b480:	e8 1f df ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b485:	83 c4 10             	add    esp,0x10
c000b488:	90                   	nop
c000b489:	83 c4 0c             	add    esp,0xc
c000b48c:	c3                   	ret    
c000b48d:	90                   	nop

c000b48e <Directory::~Directory()>:
c000b48e:	83 ec 0c             	sub    esp,0xc
c000b491:	83 ec 0c             	sub    esp,0xc
c000b494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b498:	e8 cd ff ff ff       	call   c000b46a <Directory::~Directory()>
c000b49d:	83 c4 10             	add    esp,0x10
c000b4a0:	83 ec 08             	sub    esp,0x8
c000b4a3:	68 14 01 00 00       	push   0x114
c000b4a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4ac:	e8 67 f3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b4b1:	83 c4 10             	add    esp,0x10
c000b4b4:	83 c4 0c             	add    esp,0xc
c000b4b7:	c3                   	ret    

c000b4b8 <Filesystem::Filesystem()>:
c000b4b8:	ba 9c 12 02 c0       	mov    edx,0xc002129c
c000b4bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4c1:	89 10                	mov    DWORD PTR [eax],edx
c000b4c3:	8b 15 04 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026404
c000b4c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4cd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b4d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4d4:	a3 04 64 02 c0       	mov    ds:0xc0026404,eax
c000b4d9:	90                   	nop
c000b4da:	c3                   	ret    
c000b4db:	90                   	nop

c000b4dc <Filesystem::~Filesystem()>:
c000b4dc:	ba 9c 12 02 c0       	mov    edx,0xc002129c
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	89 10                	mov    DWORD PTR [eax],edx
c000b4e7:	90                   	nop
c000b4e8:	c3                   	ret    
c000b4e9:	90                   	nop

c000b4ea <Filesystem::~Filesystem()>:
c000b4ea:	83 ec 0c             	sub    esp,0xc
c000b4ed:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b4f1:	e8 e6 ff ff ff       	call   c000b4dc <Filesystem::~Filesystem()>
c000b4f6:	83 c4 04             	add    esp,0x4
c000b4f9:	83 ec 08             	sub    esp,0x8
c000b4fc:	6a 08                	push   0x8
c000b4fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b502:	e8 11 f3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b507:	83 c4 10             	add    esp,0x10
c000b50a:	83 c4 0c             	add    esp,0xc
c000b50d:	c3                   	ret    

c000b50e <Fs::getcwd(Process*, char*, int)>:
c000b50e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b512:	31 c0                	xor    eax,eax
c000b514:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b517:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b51b:	7d 15                	jge    c000b532 <Fs::getcwd(Process*, char*, int)+0x24>
c000b51d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b521:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b528:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b52b:	84 c9                	test   cl,cl
c000b52d:	74 06                	je     c000b535 <Fs::getcwd(Process*, char*, int)+0x27>
c000b52f:	40                   	inc    eax
c000b530:	eb e2                	jmp    c000b514 <Fs::getcwd(Process*, char*, int)+0x6>
c000b532:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b535:	31 c0                	xor    eax,eax
c000b537:	c3                   	ret    

c000b538 <Fs::initVFS()>:
c000b538:	83 ec 18             	sub    esp,0x18
c000b53b:	6a 08                	push   0x8
c000b53d:	e8 74 c5 ff ff       	call   c0007ab6 <malloc>
c000b542:	89 04 24             	mov    DWORD PTR [esp],eax
c000b545:	e8 32 e1 00 00       	call   c001967c <FAT::FAT()>
c000b54a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b551:	e8 60 c5 ff ff       	call   c0007ab6 <malloc>
c000b556:	89 04 24             	mov    DWORD PTR [esp],eax
c000b559:	e8 4a f0 00 00       	call   c001a5a8 <ISO9660::ISO9660()>
c000b55e:	83 c4 1c             	add    esp,0x1c
c000b561:	c3                   	ret    

c000b562 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000b562:	55                   	push   ebp
c000b563:	57                   	push   edi
c000b564:	56                   	push   esi
c000b565:	53                   	push   ebx
c000b566:	81 ec 10 04 00 00    	sub    esp,0x410
c000b56c:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000b573:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000b57a:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000b581:	68 00 04 00 00       	push   0x400
c000b586:	6a 00                	push   0x0
c000b588:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000b58c:	56                   	push   esi
c000b58d:	e8 5e 4f ff ff       	call   c00004f0 <memset>
c000b592:	83 c4 10             	add    esp,0x10
c000b595:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000b599:	75 0b                	jne    c000b5a6 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000b59b:	50                   	push   eax
c000b59c:	50                   	push   eax
c000b59d:	57                   	push   edi
c000b59e:	56                   	push   esi
c000b59f:	e8 9c 50 ff ff       	call   c0000640 <strcpy>
c000b5a4:	eb 44                	jmp    c000b5ea <Fs::standardiseFiles(char*, char const*, char const*)+0x88>
c000b5a6:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b5a9:	83 f8 5c             	cmp    eax,0x5c
c000b5ac:	74 05                	je     c000b5b3 <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000b5ae:	83 f8 2f             	cmp    eax,0x2f
c000b5b1:	75 18                	jne    c000b5cb <Fs::standardiseFiles(char*, char const*, char const*)+0x69>
c000b5b3:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b5b6:	3c 60                	cmp    al,0x60
c000b5b8:	7e 03                	jle    c000b5bd <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000b5ba:	83 e8 20             	sub    eax,0x20
c000b5bd:	88 04 24             	mov    BYTE PTR [esp],al
c000b5c0:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b5c7:	50                   	push   eax
c000b5c8:	50                   	push   eax
c000b5c9:	eb 18                	jmp    c000b5e3 <Fs::standardiseFiles(char*, char const*, char const*)+0x81>
c000b5cb:	50                   	push   eax
c000b5cc:	50                   	push   eax
c000b5cd:	55                   	push   ebp
c000b5ce:	56                   	push   esi
c000b5cf:	e8 6c 50 ff ff       	call   c0000640 <strcpy>
c000b5d4:	5a                   	pop    edx
c000b5d5:	59                   	pop    ecx
c000b5d6:	68 43 22 02 c0       	push   0xc0022243
c000b5db:	56                   	push   esi
c000b5dc:	e8 5f 52 ff ff       	call   c0000840 <strcat>
c000b5e1:	5d                   	pop    ebp
c000b5e2:	58                   	pop    eax
c000b5e3:	57                   	push   edi
c000b5e4:	56                   	push   esi
c000b5e5:	e8 56 52 ff ff       	call   c0000840 <strcat>
c000b5ea:	83 c4 10             	add    esp,0x10
c000b5ed:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b5f0:	3c 60                	cmp    al,0x60
c000b5f2:	7e 03                	jle    c000b5f7 <Fs::standardiseFiles(char*, char const*, char const*)+0x95>
c000b5f4:	83 e8 20             	sub    eax,0x20
c000b5f7:	88 04 24             	mov    BYTE PTR [esp],al
c000b5fa:	88 03                	mov    BYTE PTR [ebx],al
c000b5fc:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b603:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b609:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b60d:	bf 03 00 00 00       	mov    edi,0x3
c000b612:	b8 03 00 00 00       	mov    eax,0x3
c000b617:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b61b:	89 ea                	mov    edx,ebp
c000b61d:	85 ed                	test   ebp,ebp
c000b61f:	0f 84 97 00 00 00    	je     c000b6bc <Fs::standardiseFiles(char*, char const*, char const*)+0x15a>
c000b625:	8d 4f 01             	lea    ecx,[edi+0x1]
c000b628:	83 fd 5c             	cmp    ebp,0x5c
c000b62b:	74 05                	je     c000b632 <Fs::standardiseFiles(char*, char const*, char const*)+0xd0>
c000b62d:	83 fd 2f             	cmp    ebp,0x2f
c000b630:	75 12                	jne    c000b644 <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000b632:	89 c5                	mov    ebp,eax
c000b634:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b639:	74 09                	je     c000b644 <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000b63b:	40                   	inc    eax
c000b63c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b640:	89 cf                	mov    edi,ecx
c000b642:	eb d3                	jmp    c000b617 <Fs::standardiseFiles(char*, char const*, char const*)+0xb5>
c000b644:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b649:	0f be ea             	movsx  ebp,dl
c000b64c:	75 5e                	jne    c000b6ac <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b64e:	83 fd 2e             	cmp    ebp,0x2e
c000b651:	75 59                	jne    c000b6ac <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b653:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000b657:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b65c:	74 18                	je     c000b676 <Fs::standardiseFiles(char*, char const*, char const*)+0x114>
c000b65e:	83 fd 2e             	cmp    ebp,0x2e
c000b661:	74 53                	je     c000b6b6 <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000b663:	89 f9                	mov    ecx,edi
c000b665:	41                   	inc    ecx
c000b666:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000b66a:	83 fa 2f             	cmp    edx,0x2f
c000b66d:	74 f6                	je     c000b665 <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000b66f:	83 fa 5c             	cmp    edx,0x5c
c000b672:	74 f1                	je     c000b665 <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000b674:	eb ca                	jmp    c000b640 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b676:	83 fd 2e             	cmp    ebp,0x2e
c000b679:	74 3b                	je     c000b6b6 <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000b67b:	83 f8 03             	cmp    eax,0x3
c000b67e:	74 c0                	je     c000b640 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b680:	41                   	inc    ecx
c000b681:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000b685:	83 fa 2f             	cmp    edx,0x2f
c000b688:	74 f6                	je     c000b680 <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000b68a:	83 fa 5c             	cmp    edx,0x5c
c000b68d:	74 f1                	je     c000b680 <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000b68f:	48                   	dec    eax
c000b690:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b694:	75 06                	jne    c000b69c <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000b696:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b69a:	eb f3                	jmp    c000b68f <Fs::standardiseFiles(char*, char const*, char const*)+0x12d>
c000b69c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b6a0:	74 07                	je     c000b6a9 <Fs::standardiseFiles(char*, char const*, char const*)+0x147>
c000b6a2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b6a6:	48                   	dec    eax
c000b6a7:	eb f3                	jmp    c000b69c <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000b6a9:	40                   	inc    eax
c000b6aa:	eb 94                	jmp    c000b640 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b6ac:	83 fd 2f             	cmp    ebp,0x2f
c000b6af:	74 8f                	je     c000b640 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b6b1:	83 fd 5c             	cmp    ebp,0x5c
c000b6b4:	74 8a                	je     c000b640 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b6b6:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000b6b9:	40                   	inc    eax
c000b6ba:	eb 84                	jmp    c000b640 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b6bc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b6c0:	83 ec 0c             	sub    esp,0xc
c000b6c3:	53                   	push   ebx
c000b6c4:	e8 a7 4e ff ff       	call   c0000570 <strlen>
c000b6c9:	83 c4 10             	add    esp,0x10
c000b6cc:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b6d1:	75 26                	jne    c000b6f9 <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000b6d3:	83 ec 0c             	sub    esp,0xc
c000b6d6:	53                   	push   ebx
c000b6d7:	e8 94 4e ff ff       	call   c0000570 <strlen>
c000b6dc:	83 c4 10             	add    esp,0x10
c000b6df:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b6e4:	74 26                	je     c000b70c <Fs::standardiseFiles(char*, char const*, char const*)+0x1aa>
c000b6e6:	83 ec 0c             	sub    esp,0xc
c000b6e9:	53                   	push   ebx
c000b6ea:	e8 81 4e ff ff       	call   c0000570 <strlen>
c000b6ef:	83 c4 10             	add    esp,0x10
c000b6f2:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b6f7:	eb c7                	jmp    c000b6c0 <Fs::standardiseFiles(char*, char const*, char const*)+0x15e>
c000b6f9:	83 ec 0c             	sub    esp,0xc
c000b6fc:	53                   	push   ebx
c000b6fd:	e8 6e 4e ff ff       	call   c0000570 <strlen>
c000b702:	83 c4 10             	add    esp,0x10
c000b705:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b70a:	74 c7                	je     c000b6d3 <Fs::standardiseFiles(char*, char const*, char const*)+0x171>
c000b70c:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b712:	5b                   	pop    ebx
c000b713:	5e                   	pop    esi
c000b714:	5f                   	pop    edi
c000b715:	5d                   	pop    ebp
c000b716:	c3                   	ret    
c000b717:	90                   	nop

c000b718 <File::File(char const*, Process*)>:
c000b718:	83 ec 0c             	sub    esp,0xc
c000b71b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b71f:	83 ec 08             	sub    esp,0x8
c000b722:	6a 00                	push   0x0
c000b724:	50                   	push   eax
c000b725:	e8 94 da ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000b72a:	83 c4 10             	add    esp,0x10
c000b72d:	ba 08 13 02 c0       	mov    edx,0xc0021308
c000b732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b736:	89 10                	mov    DWORD PTR [eax],edx
c000b738:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b73c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b746:	83 c0 0d             	add    eax,0xd
c000b749:	83 ec 04             	sub    esp,0x4
c000b74c:	52                   	push   edx
c000b74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b751:	50                   	push   eax
c000b752:	e8 0b fe ff ff       	call   c000b562 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b757:	83 c4 10             	add    esp,0x10
c000b75a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b75e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b761:	83 e8 41             	sub    eax,0x41
c000b764:	88 c2                	mov    dl,al
c000b766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b76a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b774:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b77c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b782:	0f b6 c0             	movzx  eax,al
c000b785:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b78c:	85 c0                	test   eax,eax
c000b78e:	74 3e                	je     c000b7ce <File::File(char const*, Process*)+0xb6>
c000b790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b794:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b79a:	0f b6 c0             	movzx  eax,al
c000b79d:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b7a4:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b7aa:	85 c0                	test   eax,eax
c000b7ac:	75 20                	jne    c000b7ce <File::File(char const*, Process*)+0xb6>
c000b7ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7b2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b7b8:	0f b6 c0             	movzx  eax,al
c000b7bb:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b7c2:	83 ec 0c             	sub    esp,0xc
c000b7c5:	50                   	push   eax
c000b7c6:	e8 77 21 00 00       	call   c000d942 <LogicalDisk::mount()>
c000b7cb:	83 c4 10             	add    esp,0x10
c000b7ce:	90                   	nop
c000b7cf:	83 c4 0c             	add    esp,0xc
c000b7d2:	c3                   	ret    
c000b7d3:	90                   	nop

c000b7d4 <File::open(FileOpenMode)>:
c000b7d4:	53                   	push   ebx
c000b7d5:	b8 0b 00 00 00       	mov    eax,0xb
c000b7da:	83 ec 08             	sub    esp,0x8
c000b7dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b7e1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b7e8:	83 fa 19             	cmp    edx,0x19
c000b7eb:	77 40                	ja     c000b82d <File::open(FileOpenMode)+0x59>
c000b7ed:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b7f4:	85 d2                	test   edx,edx
c000b7f6:	74 35                	je     c000b82d <File::open(FileOpenMode)+0x59>
c000b7f8:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b7fe:	85 d2                	test   edx,edx
c000b800:	74 2b                	je     c000b82d <File::open(FileOpenMode)+0x59>
c000b802:	b8 06 00 00 00       	mov    eax,0x6
c000b807:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b80b:	75 20                	jne    c000b82d <File::open(FileOpenMode)+0x59>
c000b80d:	8b 02                	mov    eax,DWORD PTR [edx]
c000b80f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	51                   	push   ecx
c000b81a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b81d:	51                   	push   ecx
c000b81e:	52                   	push   edx
c000b81f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b822:	83 c4 10             	add    esp,0x10
c000b825:	85 c0                	test   eax,eax
c000b827:	75 04                	jne    c000b82d <File::open(FileOpenMode)+0x59>
c000b829:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b82d:	83 c4 08             	add    esp,0x8
c000b830:	5b                   	pop    ebx
c000b831:	c3                   	ret    

c000b832 <File::close()>:
c000b832:	53                   	push   ebx
c000b833:	b8 0b 00 00 00       	mov    eax,0xb
c000b838:	83 ec 08             	sub    esp,0x8
c000b83b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b83f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b846:	83 f9 19             	cmp    ecx,0x19
c000b849:	77 41                	ja     c000b88c <File::close()+0x5a>
c000b84b:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000b852:	85 db                	test   ebx,ebx
c000b854:	74 36                	je     c000b88c <File::close()+0x5a>
c000b856:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b85d:	74 2d                	je     c000b88c <File::close()+0x5a>
c000b85f:	b8 05 00 00 00       	mov    eax,0x5
c000b864:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b868:	74 22                	je     c000b88c <File::close()+0x5a>
c000b86a:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b86e:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000b875:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b87b:	53                   	push   ebx
c000b87c:	53                   	push   ebx
c000b87d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b87f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b885:	50                   	push   eax
c000b886:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b889:	83 c4 10             	add    esp,0x10
c000b88c:	83 c4 08             	add    esp,0x8
c000b88f:	5b                   	pop    ebx
c000b890:	c3                   	ret    
c000b891:	90                   	nop

c000b892 <File::seek(unsigned long long)>:
c000b892:	56                   	push   esi
c000b893:	53                   	push   ebx
c000b894:	b8 0b 00 00 00       	mov    eax,0xb
c000b899:	51                   	push   ecx
c000b89a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b89e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b8a2:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b8a9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b8ad:	83 fa 19             	cmp    edx,0x19
c000b8b0:	77 31                	ja     c000b8e3 <File::seek(unsigned long long)+0x51>
c000b8b2:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b8b9:	85 d2                	test   edx,edx
c000b8bb:	74 26                	je     c000b8e3 <File::seek(unsigned long long)+0x51>
c000b8bd:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b8c3:	85 d2                	test   edx,edx
c000b8c5:	74 1c                	je     c000b8e3 <File::seek(unsigned long long)+0x51>
c000b8c7:	b8 05 00 00 00       	mov    eax,0x5
c000b8cc:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b8d0:	74 11                	je     c000b8e3 <File::seek(unsigned long long)+0x51>
c000b8d2:	8b 02                	mov    eax,DWORD PTR [edx]
c000b8d4:	53                   	push   ebx
c000b8d5:	51                   	push   ecx
c000b8d6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b8dc:	52                   	push   edx
c000b8dd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b8e0:	83 c4 10             	add    esp,0x10
c000b8e3:	5a                   	pop    edx
c000b8e4:	5b                   	pop    ebx
c000b8e5:	5e                   	pop    esi
c000b8e6:	c3                   	ret    
c000b8e7:	90                   	nop

c000b8e8 <File::truncate(unsigned long long)>:
c000b8e8:	56                   	push   esi
c000b8e9:	53                   	push   ebx
c000b8ea:	b8 0b 00 00 00       	mov    eax,0xb
c000b8ef:	51                   	push   ecx
c000b8f0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b8f4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b8f8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b8ff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b903:	83 fa 19             	cmp    edx,0x19
c000b906:	77 31                	ja     c000b939 <File::truncate(unsigned long long)+0x51>
c000b908:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b90f:	85 d2                	test   edx,edx
c000b911:	74 26                	je     c000b939 <File::truncate(unsigned long long)+0x51>
c000b913:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b919:	85 d2                	test   edx,edx
c000b91b:	74 1c                	je     c000b939 <File::truncate(unsigned long long)+0x51>
c000b91d:	b8 05 00 00 00       	mov    eax,0x5
c000b922:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b926:	74 11                	je     c000b939 <File::truncate(unsigned long long)+0x51>
c000b928:	8b 02                	mov    eax,DWORD PTR [edx]
c000b92a:	53                   	push   ebx
c000b92b:	51                   	push   ecx
c000b92c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b932:	52                   	push   edx
c000b933:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b936:	83 c4 10             	add    esp,0x10
c000b939:	5a                   	pop    edx
c000b93a:	5b                   	pop    ebx
c000b93b:	5e                   	pop    esi
c000b93c:	c3                   	ret    
c000b93d:	90                   	nop

c000b93e <File::tell(unsigned long long*)>:
c000b93e:	83 ec 0c             	sub    esp,0xc
c000b941:	b8 0b 00 00 00       	mov    eax,0xb
c000b946:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b94a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b951:	83 fa 19             	cmp    edx,0x19
c000b954:	77 34                	ja     c000b98a <File::tell(unsigned long long*)+0x4c>
c000b956:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b95d:	85 d2                	test   edx,edx
c000b95f:	74 29                	je     c000b98a <File::tell(unsigned long long*)+0x4c>
c000b961:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b967:	85 d2                	test   edx,edx
c000b969:	74 1f                	je     c000b98a <File::tell(unsigned long long*)+0x4c>
c000b96b:	b8 05 00 00 00       	mov    eax,0x5
c000b970:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b974:	74 14                	je     c000b98a <File::tell(unsigned long long*)+0x4c>
c000b976:	50                   	push   eax
c000b977:	8b 02                	mov    eax,DWORD PTR [edx]
c000b979:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b97d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b983:	52                   	push   edx
c000b984:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b987:	83 c4 10             	add    esp,0x10
c000b98a:	83 c4 0c             	add    esp,0xc
c000b98d:	c3                   	ret    

c000b98e <File::rewind()>:
c000b98e:	83 ec 10             	sub    esp,0x10
c000b991:	6a 00                	push   0x0
c000b993:	6a 00                	push   0x0
c000b995:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b999:	e8 f4 fe ff ff       	call   c000b892 <File::seek(unsigned long long)>
c000b99e:	83 c4 1c             	add    esp,0x1c
c000b9a1:	c3                   	ret    

c000b9a2 <File::unlink()>:
c000b9a2:	83 ec 0c             	sub    esp,0xc
c000b9a5:	b8 0b 00 00 00       	mov    eax,0xb
c000b9aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9ae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b9b5:	83 f9 19             	cmp    ecx,0x19
c000b9b8:	77 2f                	ja     c000b9e9 <File::unlink()+0x47>
c000b9ba:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000b9c1:	85 c9                	test   ecx,ecx
c000b9c3:	74 24                	je     c000b9e9 <File::unlink()+0x47>
c000b9c5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b9cb:	85 c9                	test   ecx,ecx
c000b9cd:	74 1a                	je     c000b9e9 <File::unlink()+0x47>
c000b9cf:	b8 06 00 00 00       	mov    eax,0x6
c000b9d4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b9d8:	75 0f                	jne    c000b9e9 <File::unlink()+0x47>
c000b9da:	83 c2 0d             	add    edx,0xd
c000b9dd:	50                   	push   eax
c000b9de:	50                   	push   eax
c000b9df:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b9e1:	52                   	push   edx
c000b9e2:	51                   	push   ecx
c000b9e3:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b9e6:	83 c4 10             	add    esp,0x10
c000b9e9:	83 c4 0c             	add    esp,0xc
c000b9ec:	c3                   	ret    
c000b9ed:	90                   	nop

c000b9ee <File::rename(char const*)>:
c000b9ee:	83 ec 0c             	sub    esp,0xc
c000b9f1:	b8 0b 00 00 00       	mov    eax,0xb
c000b9f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba01:	83 f9 19             	cmp    ecx,0x19
c000ba04:	77 32                	ja     c000ba38 <File::rename(char const*)+0x4a>
c000ba06:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000ba0d:	85 c9                	test   ecx,ecx
c000ba0f:	74 27                	je     c000ba38 <File::rename(char const*)+0x4a>
c000ba11:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ba17:	85 c9                	test   ecx,ecx
c000ba19:	74 1d                	je     c000ba38 <File::rename(char const*)+0x4a>
c000ba1b:	b8 06 00 00 00       	mov    eax,0x6
c000ba20:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ba24:	75 12                	jne    c000ba38 <File::rename(char const*)+0x4a>
c000ba26:	83 c2 0d             	add    edx,0xd
c000ba29:	50                   	push   eax
c000ba2a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ba2c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba30:	52                   	push   edx
c000ba31:	51                   	push   ecx
c000ba32:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000ba35:	83 c4 10             	add    esp,0x10
c000ba38:	83 c4 0c             	add    esp,0xc
c000ba3b:	c3                   	ret    

c000ba3c <File::chfatattr(unsigned char, unsigned char)>:
c000ba3c:	57                   	push   edi
c000ba3d:	b8 0b 00 00 00       	mov    eax,0xb
c000ba42:	56                   	push   esi
c000ba43:	53                   	push   ebx
c000ba44:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba48:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ba4c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba53:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ba57:	83 f9 19             	cmp    ecx,0x19
c000ba5a:	77 37                	ja     c000ba93 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba5c:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000ba63:	85 c9                	test   ecx,ecx
c000ba65:	74 2c                	je     c000ba93 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba67:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ba6d:	85 c9                	test   ecx,ecx
c000ba6f:	74 22                	je     c000ba93 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba71:	b8 06 00 00 00       	mov    eax,0x6
c000ba76:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ba7a:	75 17                	jne    c000ba93 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba7c:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ba7e:	89 f0                	mov    eax,esi
c000ba80:	83 c2 0d             	add    edx,0xd
c000ba83:	0f b6 f0             	movzx  esi,al
c000ba86:	0f b6 db             	movzx  ebx,bl
c000ba89:	56                   	push   esi
c000ba8a:	53                   	push   ebx
c000ba8b:	52                   	push   edx
c000ba8c:	51                   	push   ecx
c000ba8d:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000ba90:	83 c4 10             	add    esp,0x10
c000ba93:	5b                   	pop    ebx
c000ba94:	5e                   	pop    esi
c000ba95:	5f                   	pop    edi
c000ba96:	c3                   	ret    
c000ba97:	90                   	nop

c000ba98 <File::exists()>:
c000ba98:	83 ec 0c             	sub    esp,0xc
c000ba9b:	31 c0                	xor    eax,eax
c000ba9d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000baa1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000baa8:	83 f9 19             	cmp    ecx,0x19
c000baab:	77 24                	ja     c000bad1 <File::exists()+0x39>
c000baad:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bab4:	85 c9                	test   ecx,ecx
c000bab6:	74 19                	je     c000bad1 <File::exists()+0x39>
c000bab8:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000babe:	85 c9                	test   ecx,ecx
c000bac0:	74 0f                	je     c000bad1 <File::exists()+0x39>
c000bac2:	83 c2 0d             	add    edx,0xd
c000bac5:	50                   	push   eax
c000bac6:	50                   	push   eax
c000bac7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bac9:	52                   	push   edx
c000baca:	51                   	push   ecx
c000bacb:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bace:	83 c4 10             	add    esp,0x10
c000bad1:	83 c4 0c             	add    esp,0xc
c000bad4:	c3                   	ret    
c000bad5:	90                   	nop

c000bad6 <File::stat(unsigned long long*, bool*)>:
c000bad6:	56                   	push   esi
c000bad7:	53                   	push   ebx
c000bad8:	50                   	push   eax
c000bad9:	b8 0b 00 00 00       	mov    eax,0xb
c000bade:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bae2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bae6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000baed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000baf1:	83 f9 19             	cmp    ecx,0x19
c000baf4:	77 3d                	ja     c000bb33 <File::stat(unsigned long long*, bool*)+0x5d>
c000baf6:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bafd:	85 c9                	test   ecx,ecx
c000baff:	74 32                	je     c000bb33 <File::stat(unsigned long long*, bool*)+0x5d>
c000bb01:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb07:	85 c9                	test   ecx,ecx
c000bb09:	74 28                	je     c000bb33 <File::stat(unsigned long long*, bool*)+0x5d>
c000bb0b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bb0d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb11:	74 13                	je     c000bb26 <File::stat(unsigned long long*, bool*)+0x50>
c000bb13:	83 ec 04             	sub    esp,0x4
c000bb16:	56                   	push   esi
c000bb17:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bb1d:	51                   	push   ecx
c000bb1e:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bb21:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bb24:	eb 0a                	jmp    c000bb30 <File::stat(unsigned long long*, bool*)+0x5a>
c000bb26:	53                   	push   ebx
c000bb27:	83 c2 0d             	add    edx,0xd
c000bb2a:	56                   	push   esi
c000bb2b:	52                   	push   edx
c000bb2c:	51                   	push   ecx
c000bb2d:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bb30:	83 c4 10             	add    esp,0x10
c000bb33:	5a                   	pop    edx
c000bb34:	5b                   	pop    ebx
c000bb35:	5e                   	pop    esi
c000bb36:	c3                   	ret    

c000bb37 <Fs::setcwd(Process*, char*)>:
c000bb37:	55                   	push   ebp
c000bb38:	57                   	push   edi
c000bb39:	56                   	push   esi
c000bb3a:	53                   	push   ebx
c000bb3b:	81 ec 20 02 00 00    	sub    esp,0x220
c000bb41:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000bb48:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bb4e:	57                   	push   edi
c000bb4f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bb56:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bb5a:	56                   	push   esi
c000bb5b:	e8 02 fa ff ff       	call   c000b562 <Fs::standardiseFiles(char*, char const*, char const*)>
c000bb60:	89 34 24             	mov    DWORD PTR [esp],esi
c000bb63:	e8 08 4a ff ff       	call   c0000570 <strlen>
c000bb68:	83 c4 10             	add    esp,0x10
c000bb6b:	83 f8 02             	cmp    eax,0x2
c000bb6e:	77 15                	ja     c000bb85 <Fs::setcwd(Process*, char*)+0x4e>
c000bb70:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bb75:	83 eb 41             	sub    ebx,0x41
c000bb78:	8b 04 9d 80 88 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7780]
c000bb7f:	85 c0                	test   eax,eax
c000bb81:	75 1c                	jne    c000bb9f <Fs::setcwd(Process*, char*)+0x68>
c000bb83:	eb 2f                	jmp    c000bbb4 <Fs::setcwd(Process*, char*)+0x7d>
c000bb85:	83 ec 0c             	sub    esp,0xc
c000bb88:	56                   	push   esi
c000bb89:	e8 e2 49 ff ff       	call   c0000570 <strlen>
c000bb8e:	83 c4 10             	add    esp,0x10
c000bb91:	83 f8 03             	cmp    eax,0x3
c000bb94:	75 57                	jne    c000bbed <Fs::setcwd(Process*, char*)+0xb6>
c000bb96:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bb9b:	75 50                	jne    c000bbed <Fs::setcwd(Process*, char*)+0xb6>
c000bb9d:	eb d1                	jmp    c000bb70 <Fs::setcwd(Process*, char*)+0x39>
c000bb9f:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bba6:	75 0c                	jne    c000bbb4 <Fs::setcwd(Process*, char*)+0x7d>
c000bba8:	83 ec 0c             	sub    esp,0xc
c000bbab:	50                   	push   eax
c000bbac:	e8 91 1d 00 00       	call   c000d942 <LogicalDisk::mount()>
c000bbb1:	83 c4 10             	add    esp,0x10
c000bbb4:	b8 03 00 00 00       	mov    eax,0x3
c000bbb9:	83 fb 19             	cmp    ebx,0x19
c000bbbc:	0f 87 c6 00 00 00    	ja     c000bc88 <Fs::setcwd(Process*, char*)+0x151>
c000bbc2:	8b 14 9d 80 88 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7780]
c000bbc9:	b8 05 00 00 00       	mov    eax,0x5
c000bbce:	85 d2                	test   edx,edx
c000bbd0:	0f 84 b2 00 00 00    	je     c000bc88 <Fs::setcwd(Process*, char*)+0x151>
c000bbd6:	b8 06 00 00 00       	mov    eax,0x6
c000bbdb:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bbe2:	0f 85 92 00 00 00    	jne    c000bc7a <Fs::setcwd(Process*, char*)+0x143>
c000bbe8:	e9 9b 00 00 00       	jmp    c000bc88 <Fs::setcwd(Process*, char*)+0x151>
c000bbed:	83 ec 0c             	sub    esp,0xc
c000bbf0:	68 14 01 00 00       	push   0x114
c000bbf5:	e8 bc be ff ff       	call   c0007ab6 <malloc>
c000bbfa:	83 c4 0c             	add    esp,0xc
c000bbfd:	89 c3                	mov    ebx,eax
c000bbff:	55                   	push   ebp
c000bc00:	56                   	push   esi
c000bc01:	50                   	push   eax
c000bc02:	e8 11 fb ff ff       	call   c000b718 <File::File(char const*, Process*)>
c000bc07:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bc0c:	83 c4 0c             	add    esp,0xc
c000bc0f:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bc13:	50                   	push   eax
c000bc14:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bc18:	50                   	push   eax
c000bc19:	53                   	push   ebx
c000bc1a:	e8 b7 fe ff ff       	call   c000bad6 <File::stat(unsigned long long*, bool*)>
c000bc1f:	83 c4 10             	add    esp,0x10
c000bc22:	83 f8 02             	cmp    eax,0x2
c000bc25:	74 27                	je     c000bc4e <Fs::setcwd(Process*, char*)+0x117>
c000bc27:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bc2c:	75 1c                	jne    c000bc4a <Fs::setcwd(Process*, char*)+0x113>
c000bc2e:	b8 02 00 00 00       	mov    eax,0x2
c000bc33:	85 db                	test   ebx,ebx
c000bc35:	74 51                	je     c000bc88 <Fs::setcwd(Process*, char*)+0x151>
c000bc37:	83 ec 0c             	sub    esp,0xc
c000bc3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc3c:	53                   	push   ebx
c000bc3d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc40:	83 c4 10             	add    esp,0x10
c000bc43:	b8 02 00 00 00       	mov    eax,0x2
c000bc48:	eb 3e                	jmp    c000bc88 <Fs::setcwd(Process*, char*)+0x151>
c000bc4a:	85 c0                	test   eax,eax
c000bc4c:	74 1c                	je     c000bc6a <Fs::setcwd(Process*, char*)+0x133>
c000bc4e:	b8 01 00 00 00       	mov    eax,0x1
c000bc53:	85 db                	test   ebx,ebx
c000bc55:	74 31                	je     c000bc88 <Fs::setcwd(Process*, char*)+0x151>
c000bc57:	83 ec 0c             	sub    esp,0xc
c000bc5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc5c:	53                   	push   ebx
c000bc5d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc60:	83 c4 10             	add    esp,0x10
c000bc63:	b8 01 00 00 00       	mov    eax,0x1
c000bc68:	eb 1e                	jmp    c000bc88 <Fs::setcwd(Process*, char*)+0x151>
c000bc6a:	85 db                	test   ebx,ebx
c000bc6c:	74 0c                	je     c000bc7a <Fs::setcwd(Process*, char*)+0x143>
c000bc6e:	83 ec 0c             	sub    esp,0xc
c000bc71:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc73:	53                   	push   ebx
c000bc74:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc77:	83 c4 10             	add    esp,0x10
c000bc7a:	50                   	push   eax
c000bc7b:	50                   	push   eax
c000bc7c:	56                   	push   esi
c000bc7d:	57                   	push   edi
c000bc7e:	e8 bd 49 ff ff       	call   c0000640 <strcpy>
c000bc83:	83 c4 10             	add    esp,0x10
c000bc86:	31 c0                	xor    eax,eax
c000bc88:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bc8e:	5b                   	pop    ebx
c000bc8f:	5e                   	pop    esi
c000bc90:	5f                   	pop    edi
c000bc91:	5d                   	pop    ebp
c000bc92:	c3                   	ret    
c000bc93:	90                   	nop

c000bc94 <Directory::Directory(char const*, Process*)>:
c000bc94:	83 ec 0c             	sub    esp,0xc
c000bc97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc9b:	83 ec 08             	sub    esp,0x8
c000bc9e:	6a 00                	push   0x0
c000bca0:	50                   	push   eax
c000bca1:	e8 18 d5 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000bca6:	83 c4 10             	add    esp,0x10
c000bca9:	ba 24 13 02 c0       	mov    edx,0xc0021324
c000bcae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcb2:	89 10                	mov    DWORD PTR [eax],edx
c000bcb4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bcb8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000bcbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcc2:	83 c0 0d             	add    eax,0xd
c000bcc5:	83 ec 04             	sub    esp,0x4
c000bcc8:	52                   	push   edx
c000bcc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bccd:	50                   	push   eax
c000bcce:	e8 8f f8 ff ff       	call   c000b562 <Fs::standardiseFiles(char*, char const*, char const*)>
c000bcd3:	83 c4 10             	add    esp,0x10
c000bcd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcda:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bcdd:	83 e8 41             	sub    eax,0x41
c000bce0:	88 c2                	mov    dl,al
c000bce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bce6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bcec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcf0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bcf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcf8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bcfe:	0f b6 c0             	movzx  eax,al
c000bd01:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000bd08:	85 c0                	test   eax,eax
c000bd0a:	74 3e                	je     c000bd4a <Directory::Directory(char const*, Process*)+0xb6>
c000bd0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd10:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bd16:	0f b6 c0             	movzx  eax,al
c000bd19:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000bd20:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bd26:	85 c0                	test   eax,eax
c000bd28:	75 20                	jne    c000bd4a <Directory::Directory(char const*, Process*)+0xb6>
c000bd2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd2e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bd34:	0f b6 c0             	movzx  eax,al
c000bd37:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000bd3e:	83 ec 0c             	sub    esp,0xc
c000bd41:	50                   	push   eax
c000bd42:	e8 fb 1b 00 00       	call   c000d942 <LogicalDisk::mount()>
c000bd47:	83 c4 10             	add    esp,0x10
c000bd4a:	90                   	nop
c000bd4b:	83 c4 0c             	add    esp,0xc
c000bd4e:	c3                   	ret    
c000bd4f:	90                   	nop

c000bd50 <Directory::open()>:
c000bd50:	53                   	push   ebx
c000bd51:	b8 0b 00 00 00       	mov    eax,0xb
c000bd56:	83 ec 08             	sub    esp,0x8
c000bd59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bd5d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bd64:	83 fa 19             	cmp    edx,0x19
c000bd67:	77 3d                	ja     c000bda6 <Directory::open()+0x56>
c000bd69:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000bd70:	85 d2                	test   edx,edx
c000bd72:	74 32                	je     c000bda6 <Directory::open()+0x56>
c000bd74:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd7a:	85 d2                	test   edx,edx
c000bd7c:	74 28                	je     c000bda6 <Directory::open()+0x56>
c000bd7e:	b8 06 00 00 00       	mov    eax,0x6
c000bd83:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bd87:	75 1d                	jne    c000bda6 <Directory::open()+0x56>
c000bd89:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bd8f:	50                   	push   eax
c000bd90:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd92:	51                   	push   ecx
c000bd93:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bd96:	51                   	push   ecx
c000bd97:	52                   	push   edx
c000bd98:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000bd9b:	83 c4 10             	add    esp,0x10
c000bd9e:	85 c0                	test   eax,eax
c000bda0:	75 04                	jne    c000bda6 <Directory::open()+0x56>
c000bda2:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bda6:	83 c4 08             	add    esp,0x8
c000bda9:	5b                   	pop    ebx
c000bdaa:	c3                   	ret    
c000bdab:	90                   	nop

c000bdac <Directory::close()>:
c000bdac:	53                   	push   ebx
c000bdad:	b8 0b 00 00 00       	mov    eax,0xb
c000bdb2:	83 ec 08             	sub    esp,0x8
c000bdb5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdb9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdc0:	83 f9 19             	cmp    ecx,0x19
c000bdc3:	77 41                	ja     c000be06 <Directory::close()+0x5a>
c000bdc5:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000bdcc:	85 db                	test   ebx,ebx
c000bdce:	74 36                	je     c000be06 <Directory::close()+0x5a>
c000bdd0:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bdd7:	74 2d                	je     c000be06 <Directory::close()+0x5a>
c000bdd9:	b8 05 00 00 00       	mov    eax,0x5
c000bdde:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bde2:	74 22                	je     c000be06 <Directory::close()+0x5a>
c000bde4:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bde8:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000bdef:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bdf5:	53                   	push   ebx
c000bdf6:	53                   	push   ebx
c000bdf7:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bdf9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bdff:	50                   	push   eax
c000be00:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000be03:	83 c4 10             	add    esp,0x10
c000be06:	83 c4 08             	add    esp,0x8
c000be09:	5b                   	pop    ebx
c000be0a:	c3                   	ret    
c000be0b:	90                   	nop

c000be0c <Directory::unlink()>:
c000be0c:	83 ec 0c             	sub    esp,0xc
c000be0f:	b8 0b 00 00 00       	mov    eax,0xb
c000be14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be18:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be1f:	83 f9 19             	cmp    ecx,0x19
c000be22:	77 2f                	ja     c000be53 <Directory::unlink()+0x47>
c000be24:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000be2b:	85 c9                	test   ecx,ecx
c000be2d:	74 24                	je     c000be53 <Directory::unlink()+0x47>
c000be2f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be35:	85 c9                	test   ecx,ecx
c000be37:	74 1a                	je     c000be53 <Directory::unlink()+0x47>
c000be39:	b8 06 00 00 00       	mov    eax,0x6
c000be3e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be42:	75 0f                	jne    c000be53 <Directory::unlink()+0x47>
c000be44:	83 c2 0d             	add    edx,0xd
c000be47:	50                   	push   eax
c000be48:	50                   	push   eax
c000be49:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be4b:	52                   	push   edx
c000be4c:	51                   	push   ecx
c000be4d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000be50:	83 c4 10             	add    esp,0x10
c000be53:	83 c4 0c             	add    esp,0xc
c000be56:	c3                   	ret    
c000be57:	90                   	nop

c000be58 <Directory::rename(char const*)>:
c000be58:	83 ec 0c             	sub    esp,0xc
c000be5b:	b8 0b 00 00 00       	mov    eax,0xb
c000be60:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be64:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be6b:	83 f9 19             	cmp    ecx,0x19
c000be6e:	77 32                	ja     c000bea2 <Directory::rename(char const*)+0x4a>
c000be70:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000be77:	85 c9                	test   ecx,ecx
c000be79:	74 27                	je     c000bea2 <Directory::rename(char const*)+0x4a>
c000be7b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be81:	85 c9                	test   ecx,ecx
c000be83:	74 1d                	je     c000bea2 <Directory::rename(char const*)+0x4a>
c000be85:	b8 06 00 00 00       	mov    eax,0x6
c000be8a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be8e:	75 12                	jne    c000bea2 <Directory::rename(char const*)+0x4a>
c000be90:	83 c2 0d             	add    edx,0xd
c000be93:	50                   	push   eax
c000be94:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000be9a:	52                   	push   edx
c000be9b:	51                   	push   ecx
c000be9c:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000be9f:	83 c4 10             	add    esp,0x10
c000bea2:	83 c4 0c             	add    esp,0xc
c000bea5:	c3                   	ret    

c000bea6 <Directory::exists()>:
c000bea6:	83 ec 0c             	sub    esp,0xc
c000bea9:	31 c0                	xor    eax,eax
c000beab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000beaf:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000beb6:	83 f9 19             	cmp    ecx,0x19
c000beb9:	77 24                	ja     c000bedf <Directory::exists()+0x39>
c000bebb:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bec2:	85 c9                	test   ecx,ecx
c000bec4:	74 19                	je     c000bedf <Directory::exists()+0x39>
c000bec6:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000becc:	85 c9                	test   ecx,ecx
c000bece:	74 0f                	je     c000bedf <Directory::exists()+0x39>
c000bed0:	83 c2 0d             	add    edx,0xd
c000bed3:	50                   	push   eax
c000bed4:	50                   	push   eax
c000bed5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bed7:	52                   	push   edx
c000bed8:	51                   	push   ecx
c000bed9:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bedc:	83 c4 10             	add    esp,0x10
c000bedf:	83 c4 0c             	add    esp,0xc
c000bee2:	c3                   	ret    
c000bee3:	90                   	nop

c000bee4 <Directory::read(dirent*)>:
c000bee4:	83 ec 1c             	sub    esp,0x1c
c000bee7:	b8 0b 00 00 00       	mov    eax,0xb
c000beec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bef0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bef7:	83 f9 19             	cmp    ecx,0x19
c000befa:	77 30                	ja     c000bf2c <Directory::read(dirent*)+0x48>
c000befc:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf03:	85 c9                	test   ecx,ecx
c000bf05:	74 25                	je     c000bf2c <Directory::read(dirent*)+0x48>
c000bf07:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000bf0e:	74 1c                	je     c000bf2c <Directory::read(dirent*)+0x48>
c000bf10:	83 ec 0c             	sub    esp,0xc
c000bf13:	8b 02                	mov    eax,DWORD PTR [edx]
c000bf15:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000bf19:	51                   	push   ecx
c000bf1a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf1e:	6a 00                	push   0x0
c000bf20:	68 10 01 00 00       	push   0x110
c000bf25:	52                   	push   edx
c000bf26:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf29:	83 c4 20             	add    esp,0x20
c000bf2c:	83 c4 1c             	add    esp,0x1c
c000bf2f:	c3                   	ret    

c000bf30 <Directory::create()>:
c000bf30:	83 ec 0c             	sub    esp,0xc
c000bf33:	b8 0b 00 00 00       	mov    eax,0xb
c000bf38:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf3c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf43:	83 f9 19             	cmp    ecx,0x19
c000bf46:	77 2f                	ja     c000bf77 <Directory::create()+0x47>
c000bf48:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf4f:	85 c9                	test   ecx,ecx
c000bf51:	74 24                	je     c000bf77 <Directory::create()+0x47>
c000bf53:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf59:	85 c9                	test   ecx,ecx
c000bf5b:	74 1a                	je     c000bf77 <Directory::create()+0x47>
c000bf5d:	b8 06 00 00 00       	mov    eax,0x6
c000bf62:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf66:	75 0f                	jne    c000bf77 <Directory::create()+0x47>
c000bf68:	83 c2 0d             	add    edx,0xd
c000bf6b:	50                   	push   eax
c000bf6c:	50                   	push   eax
c000bf6d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf6f:	52                   	push   edx
c000bf70:	51                   	push   ecx
c000bf71:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000bf74:	83 c4 10             	add    esp,0x10
c000bf77:	83 c4 0c             	add    esp,0xc
c000bf7a:	c3                   	ret    
c000bf7b:	90                   	nop

c000bf7c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000bf7c:	b8 0a 00 00 00       	mov    eax,0xa
c000bf81:	c3                   	ret    
c000bf82:	66 90                	xchg   ax,ax

c000bf84 <Bus::Bus(char const*)>:
c000bf84:	83 ec 0c             	sub    esp,0xc
c000bf87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf8b:	83 ec 08             	sub    esp,0x8
c000bf8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf92:	50                   	push   eax
c000bf93:	e8 22 08 00 00       	call   c000c7ba <Device::Device(char const*)>
c000bf98:	83 c4 10             	add    esp,0x10
c000bf9b:	ba 40 13 02 c0       	mov    edx,0xc0021340
c000bfa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfa4:	89 10                	mov    DWORD PTR [eax],edx
c000bfa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfaa:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000bfb4:	90                   	nop
c000bfb5:	83 c4 0c             	add    esp,0xc
c000bfb8:	c3                   	ret    
c000bfb9:	90                   	nop
c000bfba:	66 90                	xchg   ax,ax

c000bfbc <Bus::~Bus()>:
c000bfbc:	83 ec 0c             	sub    esp,0xc
c000bfbf:	ba 40 13 02 c0       	mov    edx,0xc0021340
c000bfc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfc8:	89 10                	mov    DWORD PTR [eax],edx
c000bfca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfce:	83 ec 0c             	sub    esp,0xc
c000bfd1:	50                   	push   eax
c000bfd2:	e8 4d 05 00 00       	call   c000c524 <Device::~Device()>
c000bfd7:	83 c4 10             	add    esp,0x10
c000bfda:	90                   	nop
c000bfdb:	83 c4 0c             	add    esp,0xc
c000bfde:	c3                   	ret    
c000bfdf:	90                   	nop

c000bfe0 <Bus::~Bus()>:
c000bfe0:	83 ec 0c             	sub    esp,0xc
c000bfe3:	83 ec 0c             	sub    esp,0xc
c000bfe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfea:	e8 cd ff ff ff       	call   c000bfbc <Bus::~Bus()>
c000bfef:	83 c4 10             	add    esp,0x10
c000bff2:	83 ec 08             	sub    esp,0x8
c000bff5:	68 58 01 00 00       	push   0x158
c000bffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bffe:	e8 15 e8 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c003:	83 c4 10             	add    esp,0x10
c000c006:	83 c4 0c             	add    esp,0xc
c000c009:	c3                   	ret    

c000c00a <beepThread(void*)>:
c000c00a:	83 ec 0c             	sub    esp,0xc
c000c00d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000c012:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c016:	48                   	dec    eax
c000c017:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000c01c:	75 01                	jne    c000c01f <beepThread(void*)+0x15>
c000c01e:	fb                   	sti    
c000c01f:	83 ec 0c             	sub    esp,0xc
c000c022:	6b c2 0a             	imul   eax,edx,0xa
c000c025:	50                   	push   eax
c000c026:	e8 15 9e 00 00       	call   c0015e40 <milliTenthSleep(unsigned int)>
c000c02b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c032:	e8 64 bd 00 00       	call   c0017d9b <HalMakeBeep(int)>
c000c037:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c03f:	83 c4 1c             	add    esp,0x1c
c000c042:	e9 dd 9c 00 00       	jmp    c0015d24 <blockTask(TaskState)>

c000c047 <Krnl::beep(int, int, bool)>:
c000c047:	56                   	push   esi
c000c048:	53                   	push   ebx
c000c049:	83 ec 10             	sub    esp,0x10
c000c04c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c050:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c054:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c058:	e8 3e bd 00 00       	call   c0017d9b <HalMakeBeep(int)>
c000c05d:	83 c4 10             	add    esp,0x10
c000c060:	89 f0                	mov    eax,esi
c000c062:	84 c0                	test   al,al
c000c064:	74 1e                	je     c000c084 <Krnl::beep(int, int, bool)+0x3d>
c000c066:	83 ec 0c             	sub    esp,0xc
c000c069:	6b db 0a             	imul   ebx,ebx,0xa
c000c06c:	53                   	push   ebx
c000c06d:	e8 ce 9d 00 00       	call   c0015e40 <milliTenthSleep(unsigned int)>
c000c072:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c07a:	83 c4 14             	add    esp,0x14
c000c07d:	5b                   	pop    ebx
c000c07e:	5e                   	pop    esi
c000c07f:	e9 17 bd 00 00       	jmp    c0017d9b <HalMakeBeep(int)>
c000c084:	68 e6 00 00 00       	push   0xe6
c000c089:	53                   	push   ebx
c000c08a:	68 0a c0 00 c0       	push   0xc000c00a
c000c08f:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c095:	e8 26 98 00 00       	call   c00158c0 <Process::createThread(void (*)(void*), void*, int)>
c000c09a:	83 c4 14             	add    esp,0x14
c000c09d:	5b                   	pop    ebx
c000c09e:	5e                   	pop    esi
c000c09f:	c3                   	ret    

c000c0a0 <User::loadClockSettings(int)>:
c000c0a0:	53                   	push   ebx
c000c0a1:	83 ec 14             	sub    esp,0x14
c000c0a4:	68 14 01 00 00       	push   0x114
c000c0a9:	e8 08 ba ff ff       	call   c0007ab6 <malloc>
c000c0ae:	83 c4 0c             	add    esp,0xc
c000c0b1:	89 c3                	mov    ebx,eax
c000c0b3:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c0b9:	68 64 13 02 c0       	push   0xc0021364
c000c0be:	50                   	push   eax
c000c0bf:	e8 54 f6 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c000c0c4:	58                   	pop    eax
c000c0c5:	5a                   	pop    edx
c000c0c6:	6a 01                	push   0x1
c000c0c8:	53                   	push   ebx
c000c0c9:	e8 06 f7 ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c000c0ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c0d1:	e8 5c f7 ff ff       	call   c000b832 <File::close()>
c000c0d6:	83 c4 10             	add    esp,0x10
c000c0d9:	85 db                	test   ebx,ebx
c000c0db:	74 0f                	je     c000c0ec <User::loadClockSettings(int)+0x4c>
c000c0dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0df:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c0e3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c0e6:	83 c4 08             	add    esp,0x8
c000c0e9:	5b                   	pop    ebx
c000c0ea:	ff e0                	jmp    eax
c000c0ec:	83 c4 08             	add    esp,0x8
c000c0ef:	5b                   	pop    ebx
c000c0f0:	c3                   	ret    
c000c0f1:	90                   	nop

c000c0f2 <Clock::Clock(char const*)>:
c000c0f2:	83 ec 0c             	sub    esp,0xc
c000c0f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f9:	83 ec 08             	sub    esp,0x8
c000c0fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c100:	50                   	push   eax
c000c101:	e8 b4 06 00 00       	call   c000c7ba <Device::Device(char const*)>
c000c106:	83 c4 10             	add    esp,0x10
c000c109:	ba 8c 13 02 c0       	mov    edx,0xc002138c
c000c10e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c112:	89 10                	mov    DWORD PTR [eax],edx
c000c114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c118:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c122:	90                   	nop
c000c123:	83 c4 0c             	add    esp,0xc
c000c126:	c3                   	ret    
c000c127:	90                   	nop

c000c128 <Clock::~Clock()>:
c000c128:	83 ec 0c             	sub    esp,0xc
c000c12b:	ba 8c 13 02 c0       	mov    edx,0xc002138c
c000c130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c134:	89 10                	mov    DWORD PTR [eax],edx
c000c136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c13a:	83 ec 0c             	sub    esp,0xc
c000c13d:	50                   	push   eax
c000c13e:	e8 e1 03 00 00       	call   c000c524 <Device::~Device()>
c000c143:	83 c4 10             	add    esp,0x10
c000c146:	90                   	nop
c000c147:	83 c4 0c             	add    esp,0xc
c000c14a:	c3                   	ret    
c000c14b:	90                   	nop

c000c14c <Clock::~Clock()>:
c000c14c:	83 ec 0c             	sub    esp,0xc
c000c14f:	83 ec 0c             	sub    esp,0xc
c000c152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c156:	e8 cd ff ff ff       	call   c000c128 <Clock::~Clock()>
c000c15b:	83 c4 10             	add    esp,0x10
c000c15e:	83 ec 08             	sub    esp,0x8
c000c161:	68 58 01 00 00       	push   0x158
c000c166:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c16a:	e8 a9 e6 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c16f:	83 c4 10             	add    esp,0x10
c000c172:	83 c4 0c             	add    esp,0xc
c000c175:	c3                   	ret    

c000c176 <Clock::timeInSecondsLocal()>:
c000c176:	53                   	push   ebx
c000c177:	83 ec 14             	sub    esp,0x14
c000c17a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c17e:	8b 10                	mov    edx,DWORD PTR [eax]
c000c180:	50                   	push   eax
c000c181:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c184:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c18b:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c191:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c197:	89 cb                	mov    ebx,ecx
c000c199:	c1 fb 1f             	sar    ebx,0x1f
c000c19c:	01 c8                	add    eax,ecx
c000c19e:	11 da                	adc    edx,ebx
c000c1a0:	83 c4 10             	add    esp,0x10
c000c1a3:	31 c9                	xor    ecx,ecx
c000c1a5:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c1ac:	74 05                	je     c000c1b3 <Clock::timeInSecondsLocal()+0x3d>
c000c1ae:	b9 08 07 00 00       	mov    ecx,0x708
c000c1b3:	31 db                	xor    ebx,ebx
c000c1b5:	01 c8                	add    eax,ecx
c000c1b7:	11 da                	adc    edx,ebx
c000c1b9:	83 c4 08             	add    esp,0x8
c000c1bc:	5b                   	pop    ebx
c000c1bd:	c3                   	ret    

c000c1be <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c1be:	57                   	push   edi
c000c1bf:	56                   	push   esi
c000c1c0:	53                   	push   ebx
c000c1c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c1c5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c1c9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c1cb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c1cf:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c1d2:	0f b6 05 08 64 02 c0 	movzx  eax,BYTE PTR ds:0xc0026408
c000c1d9:	03 05 0c 64 02 c0    	add    eax,DWORD PTR ds:0xc002640c
c000c1df:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c1e5:	99                   	cdq    
c000c1e6:	29 c6                	sub    esi,eax
c000c1e8:	19 d7                	sbb    edi,edx
c000c1ea:	89 f0                	mov    eax,esi
c000c1ec:	89 fa                	mov    edx,edi
c000c1ee:	31 f6                	xor    esi,esi
c000c1f0:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c1f7:	74 05                	je     c000c1fe <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c1f9:	be 08 07 00 00       	mov    esi,0x708
c000c1fe:	31 ff                	xor    edi,edi
c000c200:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c204:	29 f0                	sub    eax,esi
c000c206:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c20a:	19 fa                	sbb    edx,edi
c000c20c:	89 d8                	mov    eax,ebx
c000c20e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c212:	5b                   	pop    ebx
c000c213:	5e                   	pop    esi
c000c214:	5f                   	pop    edi
c000c215:	ff e0                	jmp    eax

c000c217 <datetimeToSeconds(datetime_t)>:
c000c217:	55                   	push   ebp
c000c218:	57                   	push   edi
c000c219:	56                   	push   esi
c000c21a:	53                   	push   ebx
c000c21b:	83 ec 0c             	sub    esp,0xc
c000c21e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c222:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c226:	89 d6                	mov    esi,edx
c000c228:	0f b6 c7             	movzx  eax,bh
c000c22b:	c1 ee 10             	shr    esi,0x10
c000c22e:	6b e8 3c             	imul   ebp,eax,0x3c
c000c231:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c237:	0f b6 ce             	movzx  ecx,dh
c000c23a:	89 df                	mov    edi,ebx
c000c23c:	49                   	dec    ecx
c000c23d:	c1 ef 10             	shr    edi,0x10
c000c240:	0f b6 db             	movzx  ebx,bl
c000c243:	89 f8                	mov    eax,edi
c000c245:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c24b:	0f b6 f8             	movzx  edi,al
c000c24e:	0f b6 d2             	movzx  edx,dl
c000c251:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c255:	01 d8                	add    eax,ebx
c000c257:	0f b7 de             	movzx  ebx,si
c000c25a:	89 04 24             	mov    DWORD PTR [esp],eax
c000c25d:	c1 f8 1f             	sar    eax,0x1f
c000c260:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c264:	0f b6 c1             	movzx  eax,cl
c000c267:	8b 0c 85 c0 13 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdec40]
c000c26e:	83 f8 01             	cmp    eax,0x1
c000c271:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c275:	76 27                	jbe    c000c29e <datetimeToSeconds(datetime_t)+0x87>
c000c277:	83 e6 03             	and    esi,0x3
c000c27a:	75 22                	jne    c000c29e <datetimeToSeconds(datetime_t)+0x87>
c000c27c:	31 d2                	xor    edx,edx
c000c27e:	be 64 00 00 00       	mov    esi,0x64
c000c283:	89 d8                	mov    eax,ebx
c000c285:	f7 f6                	div    esi
c000c287:	85 d2                	test   edx,edx
c000c289:	75 12                	jne    c000c29d <datetimeToSeconds(datetime_t)+0x86>
c000c28b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c291:	be 90 01 00 00       	mov    esi,0x190
c000c296:	99                   	cdq    
c000c297:	f7 fe                	idiv   esi
c000c299:	85 d2                	test   edx,edx
c000c29b:	75 01                	jne    c000c29e <datetimeToSeconds(datetime_t)+0x87>
c000c29d:	41                   	inc    ecx
c000c29e:	83 fb 46             	cmp    ebx,0x46
c000c2a1:	76 48                	jbe    c000c2eb <datetimeToSeconds(datetime_t)+0xd4>
c000c2a3:	be 46 00 00 00       	mov    esi,0x46
c000c2a8:	bf 64 00 00 00       	mov    edi,0x64
c000c2ad:	bd 90 01 00 00       	mov    ebp,0x190
c000c2b2:	b8 6d 01 00 00       	mov    eax,0x16d
c000c2b7:	f7 c6 03 00 00 00    	test   esi,0x3
c000c2bd:	75 23                	jne    c000c2e2 <datetimeToSeconds(datetime_t)+0xcb>
c000c2bf:	89 f0                	mov    eax,esi
c000c2c1:	99                   	cdq    
c000c2c2:	f7 ff                	idiv   edi
c000c2c4:	b8 6e 01 00 00       	mov    eax,0x16e
c000c2c9:	85 d2                	test   edx,edx
c000c2cb:	75 15                	jne    c000c2e2 <datetimeToSeconds(datetime_t)+0xcb>
c000c2cd:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c2d3:	99                   	cdq    
c000c2d4:	f7 fd                	idiv   ebp
c000c2d6:	83 fa 01             	cmp    edx,0x1
c000c2d9:	19 c0                	sbb    eax,eax
c000c2db:	f7 d0                	not    eax
c000c2dd:	05 6e 01 00 00       	add    eax,0x16e
c000c2e2:	01 c1                	add    ecx,eax
c000c2e4:	46                   	inc    esi
c000c2e5:	39 de                	cmp    esi,ebx
c000c2e7:	7c c9                	jl     c000c2b2 <datetimeToSeconds(datetime_t)+0x9b>
c000c2e9:	eb 34                	jmp    c000c31f <datetimeToSeconds(datetime_t)+0x108>
c000c2eb:	74 32                	je     c000c31f <datetimeToSeconds(datetime_t)+0x108>
c000c2ed:	b8 45 00 00 00       	mov    eax,0x45
c000c2f2:	89 c2                	mov    edx,eax
c000c2f4:	83 e2 03             	and    edx,0x3
c000c2f7:	39 d8                	cmp    eax,ebx
c000c2f9:	7e 0f                	jle    c000c30a <datetimeToSeconds(datetime_t)+0xf3>
c000c2fb:	83 fa 01             	cmp    edx,0x1
c000c2fe:	19 d2                	sbb    edx,edx
c000c300:	48                   	dec    eax
c000c301:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c308:	eb e8                	jmp    c000c2f2 <datetimeToSeconds(datetime_t)+0xdb>
c000c30a:	b8 6d 01 00 00       	mov    eax,0x16d
c000c30f:	85 d2                	test   edx,edx
c000c311:	75 0a                	jne    c000c31d <datetimeToSeconds(datetime_t)+0x106>
c000c313:	83 fb 01             	cmp    ebx,0x1
c000c316:	19 c0                	sbb    eax,eax
c000c318:	05 6e 01 00 00       	add    eax,0x16e
c000c31d:	29 c1                	sub    ecx,eax
c000c31f:	b8 80 51 01 00       	mov    eax,0x15180
c000c324:	f7 e9                	imul   ecx
c000c326:	03 04 24             	add    eax,DWORD PTR [esp]
c000c329:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c32d:	83 c4 0c             	add    esp,0xc
c000c330:	5b                   	pop    ebx
c000c331:	5e                   	pop    esi
c000c332:	5f                   	pop    edi
c000c333:	5d                   	pop    ebp
c000c334:	c3                   	ret    
c000c335:	90                   	nop

c000c336 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c336:	57                   	push   edi
c000c337:	56                   	push   esi
c000c338:	53                   	push   ebx
c000c339:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c33d:	8b 06                	mov    eax,DWORD PTR [esi]
c000c33f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c342:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c346:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c34a:	e8 c8 fe ff ff       	call   c000c217 <datetimeToSeconds(datetime_t)>
c000c34f:	59                   	pop    ecx
c000c350:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c357:	5b                   	pop    ebx
c000c358:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c35e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c364:	89 cb                	mov    ebx,ecx
c000c366:	c1 fb 1f             	sar    ebx,0x1f
c000c369:	29 c8                	sub    eax,ecx
c000c36b:	19 da                	sbb    edx,ebx
c000c36d:	31 c9                	xor    ecx,ecx
c000c36f:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c376:	74 05                	je     c000c37d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c378:	b9 08 07 00 00       	mov    ecx,0x708
c000c37d:	31 db                	xor    ebx,ebx
c000c37f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c383:	29 c8                	sub    eax,ecx
c000c385:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c389:	19 da                	sbb    edx,ebx
c000c38b:	89 f8                	mov    eax,edi
c000c38d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c391:	5b                   	pop    ebx
c000c392:	5e                   	pop    esi
c000c393:	5f                   	pop    edi
c000c394:	ff e0                	jmp    eax

c000c396 <secondsToDatetime(unsigned long long)>:
c000c396:	55                   	push   ebp
c000c397:	57                   	push   edi
c000c398:	56                   	push   esi
c000c399:	53                   	push   ebx
c000c39a:	83 ec 1c             	sub    esp,0x1c
c000c39d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c3a1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c3a5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c3a9:	6a 00                	push   0x0
c000c3ab:	68 80 51 01 00       	push   0x15180
c000c3b0:	55                   	push   ebp
c000c3b1:	57                   	push   edi
c000c3b2:	e8 c9 2d 01 00       	call   c001f180 <__udivdi3>
c000c3b7:	83 c4 10             	add    esp,0x10
c000c3ba:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c3c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c3c4:	6a 00                	push   0x0
c000c3c6:	68 80 51 01 00       	push   0x15180
c000c3cb:	55                   	push   ebp
c000c3cc:	57                   	push   edi
c000c3cd:	bf 10 0e 00 00       	mov    edi,0xe10
c000c3d2:	e8 a9 2e 01 00       	call   c001f280 <__umoddi3>
c000c3d7:	83 c4 10             	add    esp,0x10
c000c3da:	99                   	cdq    
c000c3db:	f7 ff                	idiv   edi
c000c3dd:	bf 3c 00 00 00       	mov    edi,0x3c
c000c3e2:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c3e5:	89 d0                	mov    eax,edx
c000c3e7:	99                   	cdq    
c000c3e8:	f7 ff                	idiv   edi
c000c3ea:	85 db                	test   ebx,ebx
c000c3ec:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c3ef:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c3f2:	79 11                	jns    c000c405 <secondsToDatetime(unsigned long long)+0x6f>
c000c3f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c3f8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c3fe:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c403:	eb 07                	jmp    c000c40c <secondsToDatetime(unsigned long long)+0x76>
c000c405:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c40a:	89 d8                	mov    eax,ebx
c000c40c:	bf b4 05 00 00       	mov    edi,0x5b4
c000c411:	99                   	cdq    
c000c412:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c417:	f7 f9                	idiv   ecx
c000c419:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c41e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c422:	31 d2                	xor    edx,edx
c000c424:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c42c:	01 c3                	add    ebx,eax
c000c42e:	89 d8                	mov    eax,ebx
c000c430:	f7 f1                	div    ecx
c000c432:	31 d2                	xor    edx,edx
c000c434:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c437:	89 d8                	mov    eax,ebx
c000c439:	f7 f7                	div    edi
c000c43b:	31 d2                	xor    edx,edx
c000c43d:	29 c1                	sub    ecx,eax
c000c43f:	89 d8                	mov    eax,ebx
c000c441:	f7 f5                	div    ebp
c000c443:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c448:	29 c1                	sub    ecx,eax
c000c44a:	31 d2                	xor    edx,edx
c000c44c:	89 c8                	mov    eax,ecx
c000c44e:	f7 f5                	div    ebp
c000c450:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c455:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c459:	31 d2                	xor    edx,edx
c000c45b:	89 c8                	mov    eax,ecx
c000c45d:	f7 f5                	div    ebp
c000c45f:	31 d2                	xor    edx,edx
c000c461:	01 c3                	add    ebx,eax
c000c463:	89 c8                	mov    eax,ecx
c000c465:	f7 f7                	div    edi
c000c467:	bf 99 00 00 00       	mov    edi,0x99
c000c46c:	29 c3                	sub    ebx,eax
c000c46e:	31 d2                	xor    edx,edx
c000c470:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c478:	29 c3                	sub    ebx,eax
c000c47a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c47d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c480:	bb 05 00 00 00       	mov    ebx,0x5
c000c485:	83 c1 02             	add    ecx,0x2
c000c488:	89 c8                	mov    eax,ecx
c000c48a:	f7 f7                	div    edi
c000c48c:	31 d2                	xor    edx,edx
c000c48e:	89 c7                	mov    edi,eax
c000c490:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c496:	83 c0 02             	add    eax,0x2
c000c499:	f7 f3                	div    ebx
c000c49b:	89 eb                	mov    ebx,ebp
c000c49d:	29 c3                	sub    ebx,eax
c000c49f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c4a5:	88 1e                	mov    BYTE PTR [esi],bl
c000c4a7:	19 c0                	sbb    eax,eax
c000c4a9:	31 d2                	xor    edx,edx
c000c4ab:	83 e0 0c             	and    eax,0xc
c000c4ae:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c4b2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c4ba:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c4be:	83 f9 01             	cmp    ecx,0x1
c000c4c1:	0f 96 c2             	setbe  dl
c000c4c4:	41                   	inc    ecx
c000c4c5:	01 d0                	add    eax,edx
c000c4c7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c4ca:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c4ce:	83 c4 1c             	add    esp,0x1c
c000c4d1:	89 f0                	mov    eax,esi
c000c4d3:	5b                   	pop    ebx
c000c4d4:	5e                   	pop    esi
c000c4d5:	5f                   	pop    edi
c000c4d6:	5d                   	pop    ebp
c000c4d7:	c2 04 00             	ret    0x4

c000c4da <Clock::timeInDatetimeLocal()>:
c000c4da:	53                   	push   ebx
c000c4db:	83 ec 14             	sub    esp,0x14
c000c4de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c4e2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c4e6:	e8 8b fc ff ff       	call   c000c176 <Clock::timeInSecondsLocal()>
c000c4eb:	83 c4 0c             	add    esp,0xc
c000c4ee:	52                   	push   edx
c000c4ef:	50                   	push   eax
c000c4f0:	53                   	push   ebx
c000c4f1:	e8 a0 fe ff ff       	call   c000c396 <secondsToDatetime(unsigned long long)>
c000c4f6:	89 d8                	mov    eax,ebx
c000c4f8:	83 c4 14             	add    esp,0x14
c000c4fb:	5b                   	pop    ebx
c000c4fc:	c2 04 00             	ret    0x4
c000c4ff:	90                   	nop

c000c500 <Device::hibernate()>:
c000c500:	c3                   	ret    
c000c501:	90                   	nop

c000c502 <Device::wake()>:
c000c502:	c3                   	ret    
c000c503:	90                   	nop

c000c504 <Device::detect()>:
c000c504:	c3                   	ret    
c000c505:	90                   	nop

c000c506 <Device::disableLegacy()>:
c000c506:	c3                   	ret    
c000c507:	90                   	nop

c000c508 <Device::powerSaving(PowerSavingLevel)>:
c000c508:	c3                   	ret    
c000c509:	90                   	nop

c000c50a <DriverlessDevice::close(int, int, void*)>:
c000c50a:	31 c0                	xor    eax,eax
c000c50c:	c3                   	ret    
c000c50d:	90                   	nop

c000c50e <DriverlessDevice::detect()>:
c000c50e:	c3                   	ret    
c000c50f:	90                   	nop

c000c510 <DriverlessDevice::open(int, int, void*)>:
c000c510:	83 ec 18             	sub    esp,0x18
c000c513:	68 f0 13 02 c0       	push   0xc00213f0
c000c518:	e8 34 4d 00 00       	call   c0011251 <KePanic(char const*)>
c000c51d:	83 c8 ff             	or     eax,0xffffffff
c000c520:	83 c4 1c             	add    esp,0x1c
c000c523:	c3                   	ret    

c000c524 <Device::~Device()>:
c000c524:	ba 50 14 02 c0       	mov    edx,0xc0021450
c000c529:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c52d:	89 10                	mov    DWORD PTR [eax],edx
c000c52f:	90                   	nop
c000c530:	c3                   	ret    
c000c531:	90                   	nop

c000c532 <Device::~Device()>:
c000c532:	83 ec 0c             	sub    esp,0xc
c000c535:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c539:	e8 e6 ff ff ff       	call   c000c524 <Device::~Device()>
c000c53e:	83 c4 04             	add    esp,0x4
c000c541:	83 ec 08             	sub    esp,0x8
c000c544:	68 58 01 00 00       	push   0x158
c000c549:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c54d:	e8 c6 e2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c552:	83 c4 10             	add    esp,0x10
c000c555:	83 c4 0c             	add    esp,0xc
c000c558:	c3                   	ret    
c000c559:	90                   	nop

c000c55a <Device::findAndLoadDriver()>:
c000c55a:	c7 44 24 04 0e 14 02 c0 	mov    DWORD PTR [esp+0x4],0xc002140e
c000c562:	e9 de e3 ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c000c567:	90                   	nop

c000c568 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c568:	57                   	push   edi
c000c569:	b9 09 00 00 00       	mov    ecx,0x9
c000c56e:	56                   	push   esi
c000c56f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c573:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c577:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c581:	81 c7 18 01 00 00    	add    edi,0x118
c000c587:	fc                   	cld    
c000c588:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c58a:	5e                   	pop    esi
c000c58b:	5f                   	pop    edi
c000c58c:	c3                   	ret    
c000c58d:	90                   	nop

c000c58e <Device::preOpenACPI(void*, char*, char*)>:
c000c58e:	57                   	push   edi
c000c58f:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c594:	56                   	push   esi
c000c595:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c599:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c59d:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c5a7:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c5ad:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c5b3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c5b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c5b9:	b9 0e 00 00 00       	mov    ecx,0xe
c000c5be:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c5c4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c5c8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c5ca:	5e                   	pop    esi
c000c5cb:	5f                   	pop    edi
c000c5cc:	c3                   	ret    
c000c5cd:	90                   	nop

c000c5ce <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c5ce:	53                   	push   ebx
c000c5cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c5d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c5d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c5db:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c5df:	0f b6 c0             	movzx  eax,al
c000c5e2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c5e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5ea:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c5ee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c5f2:	5b                   	pop    ebx
c000c5f3:	e9 a8 05 00 00       	jmp    c000cba0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c5f8 <Device::getParent()>:
c000c5f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c5fc:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c602:	c3                   	ret    
c000c603:	90                   	nop

c000c604 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c604:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c608:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c60c:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c611:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c615:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c619:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c61d:	e9 e6 06 00 00       	jmp    c000cd08 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c622 <Device::addChild(Device*)>:
c000c622:	53                   	push   ebx
c000c623:	83 ec 08             	sub    esp,0x8
c000c626:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c62a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c62e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c634:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c63a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c63c:	85 d2                	test   edx,edx
c000c63e:	74 04                	je     c000c644 <Device::addChild(Device*)+0x22>
c000c640:	89 d3                	mov    ebx,edx
c000c642:	eb f6                	jmp    c000c63a <Device::addChild(Device*)+0x18>
c000c644:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c647:	83 ec 0c             	sub    esp,0xc
c000c64a:	6a 08                	push   0x8
c000c64c:	e8 65 b4 ff ff       	call   c0007ab6 <malloc>
c000c651:	89 03                	mov    DWORD PTR [ebx],eax
c000c653:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c659:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c660:	83 c4 18             	add    esp,0x18
c000c663:	5b                   	pop    ebx
c000c664:	c3                   	ret    
c000c665:	90                   	nop

c000c666 <Device::removeAllChildren()>:
c000c666:	56                   	push   esi
c000c667:	53                   	push   ebx
c000c668:	52                   	push   edx
c000c669:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c66d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c673:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c676:	74 17                	je     c000c68f <Device::removeAllChildren()+0x29>
c000c678:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c67b:	85 c0                	test   eax,eax
c000c67d:	74 0c                	je     c000c68b <Device::removeAllChildren()+0x25>
c000c67f:	83 ec 0c             	sub    esp,0xc
c000c682:	8b 10                	mov    edx,DWORD PTR [eax]
c000c684:	50                   	push   eax
c000c685:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c688:	83 c4 10             	add    esp,0x10
c000c68b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c68d:	eb e4                	jmp    c000c673 <Device::removeAllChildren()+0xd>
c000c68f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c695:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c69b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c6a1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c6a8:	58                   	pop    eax
c000c6a9:	5b                   	pop    ebx
c000c6aa:	5e                   	pop    esi
c000c6ab:	c3                   	ret    

c000c6ac <Device::hibernateAll()>:
c000c6ac:	53                   	push   ebx
c000c6ad:	83 ec 14             	sub    esp,0x14
c000c6b0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c6b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c6b6:	53                   	push   ebx
c000c6b7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c6ba:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c6c0:	83 c4 10             	add    esp,0x10
c000c6c3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c6c6:	74 0f                	je     c000c6d7 <Device::hibernateAll()+0x2b>
c000c6c8:	83 ec 0c             	sub    esp,0xc
c000c6cb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c6ce:	e8 d9 ff ff ff       	call   c000c6ac <Device::hibernateAll()>
c000c6d3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c6d5:	eb e9                	jmp    c000c6c0 <Device::hibernateAll()+0x14>
c000c6d7:	83 c4 08             	add    esp,0x8
c000c6da:	5b                   	pop    ebx
c000c6db:	c3                   	ret    

c000c6dc <Device::wakeAll()>:
c000c6dc:	53                   	push   ebx
c000c6dd:	83 ec 14             	sub    esp,0x14
c000c6e0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c6e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c6e6:	53                   	push   ebx
c000c6e7:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c6ea:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c6f0:	83 c4 10             	add    esp,0x10
c000c6f3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c6f6:	74 0f                	je     c000c707 <Device::wakeAll()+0x2b>
c000c6f8:	83 ec 0c             	sub    esp,0xc
c000c6fb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c6fe:	e8 d9 ff ff ff       	call   c000c6dc <Device::wakeAll()>
c000c703:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c705:	eb e9                	jmp    c000c6f0 <Device::wakeAll()+0x14>
c000c707:	83 c4 08             	add    esp,0x8
c000c70a:	5b                   	pop    ebx
c000c70b:	c3                   	ret    

c000c70c <Device::detectAll()>:
c000c70c:	53                   	push   ebx
c000c70d:	83 ec 14             	sub    esp,0x14
c000c710:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c714:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c716:	53                   	push   ebx
c000c717:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c71a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c720:	83 c4 10             	add    esp,0x10
c000c723:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c726:	74 0f                	je     c000c737 <Device::detectAll()+0x2b>
c000c728:	83 ec 0c             	sub    esp,0xc
c000c72b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c72e:	e8 d9 ff ff ff       	call   c000c70c <Device::detectAll()>
c000c733:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c735:	eb e9                	jmp    c000c720 <Device::detectAll()+0x14>
c000c737:	83 c4 08             	add    esp,0x8
c000c73a:	5b                   	pop    ebx
c000c73b:	c3                   	ret    

c000c73c <Device::disableLegacyAll()>:
c000c73c:	c3                   	ret    
c000c73d:	90                   	nop

c000c73e <Device::loadDriversForAll()>:
c000c73e:	c3                   	ret    
c000c73f:	90                   	nop

c000c740 <Device::closeAll()>:
c000c740:	53                   	push   ebx
c000c741:	83 ec 08             	sub    esp,0x8
c000c744:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c748:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c74a:	6a 00                	push   0x0
c000c74c:	6a 00                	push   0x0
c000c74e:	6a 00                	push   0x0
c000c750:	53                   	push   ebx
c000c751:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c754:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c75a:	83 c4 10             	add    esp,0x10
c000c75d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c760:	74 0f                	je     c000c771 <Device::closeAll()+0x31>
c000c762:	83 ec 0c             	sub    esp,0xc
c000c765:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c768:	e8 d3 ff ff ff       	call   c000c740 <Device::closeAll()>
c000c76d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c76f:	eb e9                	jmp    c000c75a <Device::closeAll()+0x1a>
c000c771:	83 c4 08             	add    esp,0x8
c000c774:	5b                   	pop    ebx
c000c775:	c3                   	ret    

c000c776 <Device::powerSavingAll(PowerSavingLevel)>:
c000c776:	56                   	push   esi
c000c777:	53                   	push   ebx
c000c778:	83 ec 0c             	sub    esp,0xc
c000c77b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c77f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c783:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c785:	56                   	push   esi
c000c786:	53                   	push   ebx
c000c787:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c78a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c790:	83 c4 10             	add    esp,0x10
c000c793:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c796:	74 0f                	je     c000c7a7 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c798:	52                   	push   edx
c000c799:	52                   	push   edx
c000c79a:	56                   	push   esi
c000c79b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c79e:	e8 d3 ff ff ff       	call   c000c776 <Device::powerSavingAll(PowerSavingLevel)>
c000c7a3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7a5:	eb e9                	jmp    c000c790 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c7a7:	58                   	pop    eax
c000c7a8:	5b                   	pop    ebx
c000c7a9:	5e                   	pop    esi
c000c7aa:	c3                   	ret    
c000c7ab:	90                   	nop

c000c7ac <Device::setName(char const*)>:
c000c7ac:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c7b4:	e9 87 3e ff ff       	jmp    c0000640 <strcpy>
c000c7b9:	90                   	nop

c000c7ba <Device::Device(char const*)>:
c000c7ba:	83 ec 1c             	sub    esp,0x1c
c000c7bd:	ba 50 14 02 c0       	mov    edx,0xc0021450
c000c7c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7c6:	89 10                	mov    DWORD PTR [eax],edx
c000c7c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7cc:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c7d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7da:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c7e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7e8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c7f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7f6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c800:	83 ec 08             	sub    esp,0x8
c000c803:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c807:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c80b:	e8 9c ff ff ff       	call   c000c7ac <Device::setName(char const*)>
c000c810:	83 c4 10             	add    esp,0x10
c000c813:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c81b:	83 ec 0c             	sub    esp,0xc
c000c81e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c822:	e8 8f b2 ff ff       	call   c0007ab6 <malloc>
c000c827:	83 c4 10             	add    esp,0x10
c000c82a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c830:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c837:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c83b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c841:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c845:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c84b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c851:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c855:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c85b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c862:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c866:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c86d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c871:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c878:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c87c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c886:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c88a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c894:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c898:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c8a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8a6:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c8b0:	90                   	nop
c000c8b1:	83 c4 1c             	add    esp,0x1c
c000c8b4:	c3                   	ret    
c000c8b5:	90                   	nop

c000c8b6 <Device::getName()>:
c000c8b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8ba:	05 d0 00 00 00       	add    eax,0xd0
c000c8bf:	c3                   	ret    

c000c8c0 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c8c0:	83 ec 0c             	sub    esp,0xc
c000c8c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8c7:	83 ec 08             	sub    esp,0x8
c000c8ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ce:	50                   	push   eax
c000c8cf:	e8 e6 fe ff ff       	call   c000c7ba <Device::Device(char const*)>
c000c8d4:	83 c4 10             	add    esp,0x10
c000c8d7:	ba 7c 14 02 c0       	mov    edx,0xc002147c
c000c8dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8e0:	89 10                	mov    DWORD PTR [eax],edx
c000c8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8e6:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c8f0:	90                   	nop
c000c8f1:	83 c4 0c             	add    esp,0xc
c000c8f4:	c3                   	ret    
c000c8f5:	90                   	nop

c000c8f6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c8f6:	57                   	push   edi
c000c8f7:	56                   	push   esi
c000c8f8:	53                   	push   ebx
c000c8f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c8fd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c901:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c905:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c90b:	75 0c                	jne    c000c919 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c90d:	52                   	push   edx
c000c90e:	52                   	push   edx
c000c90f:	53                   	push   ebx
c000c910:	56                   	push   esi
c000c911:	e8 1c 2d 01 00       	call   c001f632 <LinkedList<Device>::addElement(Device*)>
c000c916:	83 c4 10             	add    esp,0x10
c000c919:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c91f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c922:	74 12                	je     c000c936 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c924:	50                   	push   eax
c000c925:	57                   	push   edi
c000c926:	56                   	push   esi
c000c927:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c92a:	e8 c7 ff ff ff       	call   c000c8f6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c92f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c931:	83 c4 10             	add    esp,0x10
c000c934:	eb e9                	jmp    c000c91f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c936:	5b                   	pop    ebx
c000c937:	5e                   	pop    esi
c000c938:	5f                   	pop    edi
c000c939:	c3                   	ret    

c000c93a <getDevicesOfType(DeviceType)>:
c000c93a:	53                   	push   ebx
c000c93b:	83 ec 14             	sub    esp,0x14
c000c93e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c942:	53                   	push   ebx
c000c943:	e8 c6 2d 01 00       	call   c001f70e <LinkedList<Device>::LinkedList()>
c000c948:	83 c4 0c             	add    esp,0xc
c000c94b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c94f:	53                   	push   ebx
c000c950:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000c956:	e8 9b ff ff ff       	call   c000c8f6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c95b:	89 d8                	mov    eax,ebx
c000c95d:	83 c4 18             	add    esp,0x18
c000c960:	5b                   	pop    ebx
c000c961:	c2 04 00             	ret    0x4

c000c964 <HardDiskController::HardDiskController(char const*)>:
c000c964:	83 ec 0c             	sub    esp,0xc
c000c967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c96b:	83 ec 08             	sub    esp,0x8
c000c96e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c972:	50                   	push   eax
c000c973:	e8 42 fe ff ff       	call   c000c7ba <Device::Device(char const*)>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	ba a8 14 02 c0       	mov    edx,0xc00214a8
c000c980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c984:	89 10                	mov    DWORD PTR [eax],edx
c000c986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c98a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c994:	90                   	nop
c000c995:	83 c4 0c             	add    esp,0xc
c000c998:	c3                   	ret    
c000c999:	90                   	nop
c000c99a:	66 90                	xchg   ax,ax

c000c99c <HardDiskController::~HardDiskController()>:
c000c99c:	83 ec 0c             	sub    esp,0xc
c000c99f:	ba a8 14 02 c0       	mov    edx,0xc00214a8
c000c9a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9a8:	89 10                	mov    DWORD PTR [eax],edx
c000c9aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ae:	83 ec 0c             	sub    esp,0xc
c000c9b1:	50                   	push   eax
c000c9b2:	e8 6d fb ff ff       	call   c000c524 <Device::~Device()>
c000c9b7:	83 c4 10             	add    esp,0x10
c000c9ba:	90                   	nop
c000c9bb:	83 c4 0c             	add    esp,0xc
c000c9be:	c3                   	ret    
c000c9bf:	90                   	nop

c000c9c0 <HardDiskController::~HardDiskController()>:
c000c9c0:	83 ec 0c             	sub    esp,0xc
c000c9c3:	83 ec 0c             	sub    esp,0xc
c000c9c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9ca:	e8 cd ff ff ff       	call   c000c99c <HardDiskController::~HardDiskController()>
c000c9cf:	83 c4 10             	add    esp,0x10
c000c9d2:	83 ec 08             	sub    esp,0x8
c000c9d5:	68 58 01 00 00       	push   0x158
c000c9da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9de:	e8 35 de ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c9e3:	83 c4 10             	add    esp,0x10
c000c9e6:	83 c4 0c             	add    esp,0xc
c000c9e9:	c3                   	ret    

c000c9ea <PhysicalDisk::eject()>:
c000c9ea:	83 c8 ff             	or     eax,0xffffffff
c000c9ed:	c3                   	ret    

c000c9ee <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c9ee:	83 ec 0c             	sub    esp,0xc
c000c9f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9f5:	83 ec 08             	sub    esp,0x8
c000c9f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9fc:	50                   	push   eax
c000c9fd:	e8 b8 fd ff ff       	call   c000c7ba <Device::Device(char const*)>
c000ca02:	83 c4 10             	add    esp,0x10
c000ca05:	ba d4 14 02 c0       	mov    edx,0xc00214d4
c000ca0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca0e:	89 10                	mov    DWORD PTR [eax],edx
c000ca10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca14:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca1f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000ca26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca2a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000ca34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca38:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ca3c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ca42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca46:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ca50:	90                   	nop
c000ca51:	83 c4 0c             	add    esp,0xc
c000ca54:	c3                   	ret    
c000ca55:	90                   	nop

c000ca56 <PhysicalDisk::startCache()>:
c000ca56:	56                   	push   esi
c000ca57:	53                   	push   ebx
c000ca58:	83 ec 10             	sub    esp,0x10
c000ca5b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca5f:	6a 44                	push   0x44
c000ca61:	e8 50 b0 ff ff       	call   c0007ab6 <malloc>
c000ca66:	89 c6                	mov    esi,eax
c000ca68:	58                   	pop    eax
c000ca69:	5a                   	pop    edx
c000ca6a:	53                   	push   ebx
c000ca6b:	56                   	push   esi
c000ca6c:	e8 7b 17 00 00       	call   c000e1ec <VCache::VCache(PhysicalDisk*)>
c000ca71:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ca77:	83 c4 14             	add    esp,0x14
c000ca7a:	5b                   	pop    ebx
c000ca7b:	5e                   	pop    esi
c000ca7c:	c3                   	ret    
c000ca7d:	90                   	nop

c000ca7e <PhysicalDisk::~PhysicalDisk()>:
c000ca7e:	83 ec 0c             	sub    esp,0xc
c000ca81:	ba d4 14 02 c0       	mov    edx,0xc00214d4
c000ca86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca8a:	89 10                	mov    DWORD PTR [eax],edx
c000ca8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca90:	83 ec 0c             	sub    esp,0xc
c000ca93:	50                   	push   eax
c000ca94:	e8 8b fa ff ff       	call   c000c524 <Device::~Device()>
c000ca99:	83 c4 10             	add    esp,0x10
c000ca9c:	90                   	nop
c000ca9d:	83 c4 0c             	add    esp,0xc
c000caa0:	c3                   	ret    
c000caa1:	90                   	nop

c000caa2 <PhysicalDisk::~PhysicalDisk()>:
c000caa2:	83 ec 0c             	sub    esp,0xc
c000caa5:	83 ec 0c             	sub    esp,0xc
c000caa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000caac:	e8 cd ff ff ff       	call   c000ca7e <PhysicalDisk::~PhysicalDisk()>
c000cab1:	83 c4 10             	add    esp,0x10
c000cab4:	83 ec 08             	sub    esp,0x8
c000cab7:	68 6c 01 00 00       	push   0x16c
c000cabc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac0:	e8 53 dd ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000cac5:	83 c4 10             	add    esp,0x10
c000cac8:	83 c4 0c             	add    esp,0xc
c000cacb:	c3                   	ret    

c000cacc <int_handler>:
c000cacc:	55                   	push   ebp
c000cacd:	57                   	push   edi
c000cace:	56                   	push   esi
c000cacf:	53                   	push   ebx
c000cad0:	83 ec 0c             	sub    esp,0xc
c000cad3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cad7:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cade:	74 0b                	je     c000caeb <int_handler+0x1f>
c000cae0:	fa                   	cli    
c000cae1:	f4                   	hlt    
c000cae2:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cae9:	75 f5                	jne    c000cae0 <int_handler+0x14>
c000caeb:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000caee:	8d 46 e0             	lea    eax,[esi-0x20]
c000caf1:	83 f8 17             	cmp    eax,0x17
c000caf4:	76 40                	jbe    c000cb36 <int_handler+0x6a>
c000caf6:	c1 e6 04             	shl    esi,0x4
c000caf9:	31 db                	xor    ebx,ebx
c000cafb:	8d ae 20 74 02 c0    	lea    ebp,[esi-0x3ffd8be0]
c000cb01:	81 c6 20 64 02 c0    	add    esi,0xc0026420
c000cb07:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cb0b:	85 c0                	test   eax,eax
c000cb0d:	74 13                	je     c000cb22 <int_handler+0x56>
c000cb0f:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cb12:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cb16:	74 2c                	je     c000cb44 <int_handler+0x78>
c000cb18:	83 ec 08             	sub    esp,0x8
c000cb1b:	52                   	push   edx
c000cb1c:	57                   	push   edi
c000cb1d:	ff d0                	call   eax
c000cb1f:	83 c4 10             	add    esp,0x10
c000cb22:	83 c3 01             	add    ebx,0x1
c000cb25:	83 fb 04             	cmp    ebx,0x4
c000cb28:	75 dd                	jne    c000cb07 <int_handler+0x3b>
c000cb2a:	83 c4 0c             	add    esp,0xc
c000cb2d:	31 c0                	xor    eax,eax
c000cb2f:	5b                   	pop    ebx
c000cb30:	31 d2                	xor    edx,edx
c000cb32:	5e                   	pop    esi
c000cb33:	5f                   	pop    edi
c000cb34:	5d                   	pop    ebp
c000cb35:	c3                   	ret    
c000cb36:	83 ec 0c             	sub    esp,0xc
c000cb39:	50                   	push   eax
c000cb3a:	e8 99 b2 00 00       	call   c0017dd8 <HalEndOfInterrupt(int)>
c000cb3f:	83 c4 10             	add    esp,0x10
c000cb42:	eb b2                	jmp    c000caf6 <int_handler+0x2a>
c000cb44:	83 ec 08             	sub    esp,0x8
c000cb47:	52                   	push   edx
c000cb48:	57                   	push   edi
c000cb49:	ff d0                	call   eax
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	83 c4 0c             	add    esp,0xc
c000cb51:	5b                   	pop    ebx
c000cb52:	5e                   	pop    esi
c000cb53:	5f                   	pop    edi
c000cb54:	5d                   	pop    ebp
c000cb55:	c3                   	ret    

c000cb56 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cb56:	56                   	push   esi
c000cb57:	31 c0                	xor    eax,eax
c000cb59:	53                   	push   ebx
c000cb5a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cb5e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cb62:	89 ca                	mov    edx,ecx
c000cb64:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cb68:	c1 e2 04             	shl    edx,0x4
c000cb6b:	83 bc 82 20 74 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd8be0],0x0
c000cb73:	74 17                	je     c000cb8c <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cb75:	83 c0 01             	add    eax,0x1
c000cb78:	83 f8 04             	cmp    eax,0x4
c000cb7b:	75 ee                	jne    c000cb6b <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cb7d:	c7 44 24 0c 04 15 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021504
c000cb85:	5b                   	pop    ebx
c000cb86:	5e                   	pop    esi
c000cb87:	e9 c5 46 00 00       	jmp    c0011251 <KePanic(char const*)>
c000cb8c:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cb8f:	89 1c 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],ebx
c000cb96:	89 34 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],esi
c000cb9d:	5b                   	pop    ebx
c000cb9e:	5e                   	pop    esi
c000cb9f:	c3                   	ret    

c000cba0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cba0:	57                   	push   edi
c000cba1:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cba7:	56                   	push   esi
c000cba8:	53                   	push   ebx
c000cba9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cbad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cbb1:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cbb8:	74 54                	je     c000cc0e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000cbba:	89 c7                	mov    edi,eax
c000cbbc:	84 c0                	test   al,al
c000cbbe:	74 1d                	je     c000cbdd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cbc0:	83 fe 0f             	cmp    esi,0xf
c000cbc3:	0f 8f d5 00 00 00    	jg     c000cc9e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000cbc9:	0f b6 b6 08 30 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdcff8]
c000cbd0:	0f b7 bc 36 c0 8b 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd7440]
c000cbd8:	d1 ef                	shr    edi,1
c000cbda:	83 e7 01             	and    edi,0x1
c000cbdd:	83 ec 08             	sub    esp,0x8
c000cbe0:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cbe5:	31 db                	xor    ebx,ebx
c000cbe7:	50                   	push   eax
c000cbe8:	68 11 15 02 c0       	push   0xc0021511
c000cbed:	e8 53 dd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000cbf2:	83 c4 10             	add    esp,0x10
c000cbf5:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cbfa:	85 c0                	test   eax,eax
c000cbfc:	7f 55                	jg     c000cc53 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cbfe:	83 ec 0c             	sub    esp,0xc
c000cc01:	68 28 15 02 c0       	push   0xc0021528
c000cc06:	e8 46 46 00 00       	call   c0011251 <KePanic(char const*)>
c000cc0b:	83 c4 10             	add    esp,0x10
c000cc0e:	8d 7e 20             	lea    edi,[esi+0x20]
c000cc11:	89 f8                	mov    eax,edi
c000cc13:	31 d2                	xor    edx,edx
c000cc15:	c1 e0 04             	shl    eax,0x4
c000cc18:	8b 8c 90 20 74 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd8be0]
c000cc1f:	85 c9                	test   ecx,ecx
c000cc21:	0f 84 8e 00 00 00    	je     c000ccb5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000cc27:	83 c2 01             	add    edx,0x1
c000cc2a:	83 fa 04             	cmp    edx,0x4
c000cc2d:	75 e9                	jne    c000cc18 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cc2f:	83 ec 0c             	sub    esp,0xc
c000cc32:	68 7c 15 02 c0       	push   0xc002157c
c000cc37:	e8 15 46 00 00       	call   c0011251 <KePanic(char const*)>
c000cc3c:	83 c4 10             	add    esp,0x10
c000cc3f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cc44:	5b                   	pop    ebx
c000cc45:	5e                   	pop    esi
c000cc46:	5f                   	pop    edi
c000cc47:	c3                   	ret    
c000cc48:	83 c3 01             	add    ebx,0x1
c000cc4b:	39 1d c0 a0 02 c0    	cmp    DWORD PTR ds:0xc002a0c0,ebx
c000cc51:	7e ab                	jle    c000cbfe <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000cc53:	83 ec 08             	sub    esp,0x8
c000cc56:	8b 04 9d e0 a0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5f20]
c000cc5d:	56                   	push   esi
c000cc5e:	50                   	push   eax
c000cc5f:	e8 fe 18 01 00       	call   c001e562 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cc64:	83 c4 10             	add    esp,0x10
c000cc67:	84 c0                	test   al,al
c000cc69:	74 dd                	je     c000cc48 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000cc6b:	83 ec 04             	sub    esp,0x4
c000cc6e:	89 f8                	mov    eax,edi
c000cc70:	8b 1c 9d e0 a0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd5f20]
c000cc77:	0f b6 f8             	movzx  edi,al
c000cc7a:	57                   	push   edi
c000cc7b:	8d 7e 20             	lea    edi,[esi+0x20]
c000cc7e:	6a 00                	push   0x0
c000cc80:	89 f8                	mov    eax,edi
c000cc82:	0f b6 c0             	movzx  eax,al
c000cc85:	50                   	push   eax
c000cc86:	89 f0                	mov    eax,esi
c000cc88:	6a 00                	push   0x0
c000cc8a:	0f b6 c0             	movzx  eax,al
c000cc8d:	6a 00                	push   0x0
c000cc8f:	50                   	push   eax
c000cc90:	53                   	push   ebx
c000cc91:	e8 38 1a 01 00       	call   c001e6ce <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cc96:	83 c4 20             	add    esp,0x20
c000cc99:	e9 73 ff ff ff       	jmp    c000cc11 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000cc9e:	83 ec 0c             	sub    esp,0xc
c000cca1:	31 ff                	xor    edi,edi
c000cca3:	68 44 15 02 c0       	push   0xc0021544
c000cca8:	e8 a4 45 00 00       	call   c0011251 <KePanic(char const*)>
c000ccad:	83 c4 10             	add    esp,0x10
c000ccb0:	e9 28 ff ff ff       	jmp    c000cbdd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000ccb5:	8d 04 ba             	lea    eax,[edx+edi*4]
c000ccb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ccbc:	89 14 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],edx
c000ccc3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc7:	5b                   	pop    ebx
c000ccc8:	89 14 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],edx
c000cccf:	89 f0                	mov    eax,esi
c000ccd1:	5e                   	pop    esi
c000ccd2:	5f                   	pop    edi
c000ccd3:	c3                   	ret    

c000ccd4 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000ccd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccd8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ccdc:	c1 e0 04             	shl    eax,0x4
c000ccdf:	8d 50 10             	lea    edx,[eax+0x10]
c000cce2:	39 88 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ecx
c000cce8:	74 08                	je     c000ccf2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000ccea:	83 c0 04             	add    eax,0x4
c000cced:	39 d0                	cmp    eax,edx
c000ccef:	75 f1                	jne    c000cce2 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000ccf1:	c3                   	ret    
c000ccf2:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ccfc:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000cd06:	eb e2                	jmp    c000ccea <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000cd08 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000cd08:	53                   	push   ebx
c000cd09:	83 ec 08             	sub    esp,0x8
c000cd0c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cd10:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000cd15:	74 0e                	je     c000cd25 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000cd17:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000cd1c:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000cd23:	75 37                	jne    c000cd5c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000cd25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd29:	83 c0 20             	add    eax,0x20
c000cd2c:	c1 e0 04             	shl    eax,0x4
c000cd2f:	8d 50 10             	lea    edx,[eax+0x10]
c000cd32:	39 98 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ebx
c000cd38:	74 0c                	je     c000cd46 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000cd3a:	83 c0 04             	add    eax,0x4
c000cd3d:	39 d0                	cmp    eax,edx
c000cd3f:	75 f1                	jne    c000cd32 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000cd41:	83 c4 08             	add    esp,0x8
c000cd44:	5b                   	pop    ebx
c000cd45:	c3                   	ret    
c000cd46:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cd50:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000cd5a:	eb de                	jmp    c000cd3a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000cd5c:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000cd61:	7f 11                	jg     c000cd74 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000cd63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd67:	0f b6 80 08 30 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdcff8]
c000cd6e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cd72:	eb b1                	jmp    c000cd25 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000cd74:	83 ec 0c             	sub    esp,0xc
c000cd77:	68 35 15 02 c0       	push   0xc0021535
c000cd7c:	e8 d0 44 00 00       	call   c0011251 <KePanic(char const*)>
c000cd81:	83 c4 10             	add    esp,0x10
c000cd84:	eb 9f                	jmp    c000cd25 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000cd86 <setupINTS()>:
c000cd86:	31 c0                	xor    eax,eax
c000cd88:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cd92:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000cd9c:	c7 80 24 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bdc],0x0
c000cda6:	c7 80 24 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bdc],0x0
c000cdb0:	c7 80 28 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bd8],0x0
c000cdba:	c7 80 28 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bd8],0x0
c000cdc4:	c7 80 2c 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bd4],0x0
c000cdce:	c7 80 2c 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bd4],0x0
c000cdd8:	83 c0 10             	add    eax,0x10
c000cddb:	3d 00 10 00 00       	cmp    eax,0x1000
c000cde0:	75 a6                	jne    c000cd88 <setupINTS()+0x2>
c000cde2:	c3                   	ret    

c000cde3 <convertLegacyIRQNumber(int)>:
c000cde3:	83 ec 0c             	sub    esp,0xc
c000cde6:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cdec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdf0:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cdf7:	74 0c                	je     c000ce05 <convertLegacyIRQNumber(int)+0x22>
c000cdf9:	83 f8 0f             	cmp    eax,0xf
c000cdfc:	7f 0b                	jg     c000ce09 <convertLegacyIRQNumber(int)+0x26>
c000cdfe:	0f b6 80 08 30 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdcff8]
c000ce05:	83 c4 0c             	add    esp,0xc
c000ce08:	c3                   	ret    
c000ce09:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce0d:	83 ec 0c             	sub    esp,0xc
c000ce10:	68 44 15 02 c0       	push   0xc0021544
c000ce15:	e8 37 44 00 00       	call   c0011251 <KePanic(char const*)>
c000ce1a:	83 c4 10             	add    esp,0x10
c000ce1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce21:	83 c4 0c             	add    esp,0xc
c000ce24:	c3                   	ret    
c000ce25:	90                   	nop

c000ce26 <startGUI(void*)>:
c000ce26:	55                   	push   ebp
c000ce27:	89 e5                	mov    ebp,esp
c000ce29:	53                   	push   ebx
c000ce2a:	83 ec 04             	sub    esp,0x4
c000ce2d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000ce32:	83 e8 01             	sub    eax,0x1
c000ce35:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000ce3a:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000ce3f:	85 c0                	test   eax,eax
c000ce41:	75 01                	jne    c000ce44 <startGUI(void*)+0x1e>
c000ce43:	fb                   	sti    
c000ce44:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce4a:	83 ec 08             	sub    esp,0x8
c000ce4d:	6a 01                	push   0x1
c000ce4f:	68 a1 15 02 c0       	push   0xc00215a1
c000ce54:	e8 59 82 00 00       	call   c00150b2 <Thr::loadDLL(char const*, bool)>
c000ce59:	83 c4 10             	add    esp,0x10
c000ce5c:	83 ec 08             	sub    esp,0x8
c000ce5f:	53                   	push   ebx
c000ce60:	50                   	push   eax
c000ce61:	e8 7d 84 00 00       	call   c00152e3 <Thr::executeDLL(unsigned long, void*)>
c000ce66:	83 c4 10             	add    esp,0x10
c000ce69:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce6f:	83 ec 08             	sub    esp,0x8
c000ce72:	6a 01                	push   0x1
c000ce74:	68 bb 15 02 c0       	push   0xc00215bb
c000ce79:	e8 34 82 00 00       	call   c00150b2 <Thr::loadDLL(char const*, bool)>
c000ce7e:	83 c4 10             	add    esp,0x10
c000ce81:	83 ec 08             	sub    esp,0x8
c000ce84:	53                   	push   ebx
c000ce85:	50                   	push   eax
c000ce86:	e8 58 84 00 00       	call   c00152e3 <Thr::executeDLL(unsigned long, void*)>
c000ce8b:	83 c4 10             	add    esp,0x10
c000ce8e:	90                   	nop
c000ce8f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ce92:	c9                   	leave  
c000ce93:	c3                   	ret    

c000ce94 <startGUIVESA(void*)>:
c000ce94:	55                   	push   ebp
c000ce95:	89 e5                	mov    ebp,esp
c000ce97:	53                   	push   ebx
c000ce98:	83 ec 04             	sub    esp,0x4
c000ce9b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cea0:	83 e8 01             	sub    eax,0x1
c000cea3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cea8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cead:	85 c0                	test   eax,eax
c000ceaf:	75 01                	jne    c000ceb2 <startGUIVESA(void*)+0x1e>
c000ceb1:	fb                   	sti    
c000ceb2:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ceb8:	83 ec 08             	sub    esp,0x8
c000cebb:	6a 01                	push   0x1
c000cebd:	68 d9 15 02 c0       	push   0xc00215d9
c000cec2:	e8 eb 81 00 00       	call   c00150b2 <Thr::loadDLL(char const*, bool)>
c000cec7:	83 c4 10             	add    esp,0x10
c000ceca:	83 ec 08             	sub    esp,0x8
c000cecd:	53                   	push   ebx
c000cece:	50                   	push   eax
c000cecf:	e8 0f 84 00 00       	call   c00152e3 <Thr::executeDLL(unsigned long, void*)>
c000ced4:	83 c4 10             	add    esp,0x10
c000ced7:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cedd:	83 ec 08             	sub    esp,0x8
c000cee0:	6a 01                	push   0x1
c000cee2:	68 bb 15 02 c0       	push   0xc00215bb
c000cee7:	e8 c6 81 00 00       	call   c00150b2 <Thr::loadDLL(char const*, bool)>
c000ceec:	83 c4 10             	add    esp,0x10
c000ceef:	83 ec 08             	sub    esp,0x8
c000cef2:	53                   	push   ebx
c000cef3:	50                   	push   eax
c000cef4:	e8 ea 83 00 00       	call   c00152e3 <Thr::executeDLL(unsigned long, void*)>
c000cef9:	83 c4 10             	add    esp,0x10
c000cefc:	90                   	nop
c000cefd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cf00:	c9                   	leave  
c000cf01:	c3                   	ret    

c000cf02 <sendKeyToTerminal(unsigned char)>:
c000cf02:	55                   	push   ebp
c000cf03:	89 e5                	mov    ebp,esp
c000cf05:	83 ec 28             	sub    esp,0x28
c000cf08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cf0b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000cf0e:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000cf13:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000cf17:	83 ec 08             	sub    esp,0x8
c000cf1a:	52                   	push   edx
c000cf1b:	50                   	push   eax
c000cf1c:	e8 95 be ff ff       	call   c0008db6 <VgaText::receiveKey(unsigned char)>
c000cf21:	83 c4 10             	add    esp,0x10
c000cf24:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cf28:	83 f8 0a             	cmp    eax,0xa
c000cf2b:	74 16                	je     c000cf43 <sendKeyToTerminal(unsigned char)+0x41>
c000cf2d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cf31:	83 f8 03             	cmp    eax,0x3
c000cf34:	74 0d                	je     c000cf43 <sendKeyToTerminal(unsigned char)+0x41>
c000cf36:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cf3a:	83 f8 1c             	cmp    eax,0x1c
c000cf3d:	0f 85 97 00 00 00    	jne    c000cfda <sendKeyToTerminal(unsigned char)+0xd8>
c000cf43:	fa                   	cli    
c000cf44:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf49:	83 c0 01             	add    eax,0x1
c000cf4c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cf51:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000cf56:	83 c0 01             	add    eax,0x1
c000cf59:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000cf5e:	a1 20 84 02 c0       	mov    eax,ds:0xc0028420
c000cf63:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000cf66:	c7 05 20 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028420,0x0
c000cf70:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000cf74:	74 1f                	je     c000cf95 <sendKeyToTerminal(unsigned char)+0x93>
c000cf76:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cf79:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000cf7c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cf7f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000cf82:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000cf85:	83 ec 0c             	sub    esp,0xc
c000cf88:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cf8b:	e8 98 90 00 00       	call   c0016028 <unblockTask(ThreadControlBlock*)>
c000cf90:	83 c4 10             	add    esp,0x10
c000cf93:	eb db                	jmp    c000cf70 <sendKeyToTerminal(unsigned char)+0x6e>
c000cf95:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000cf9a:	83 e8 01             	sub    eax,0x1
c000cf9d:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000cfa2:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000cfa7:	85 c0                	test   eax,eax
c000cfa9:	75 18                	jne    c000cfc3 <sendKeyToTerminal(unsigned char)+0xc1>
c000cfab:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c000cfb0:	85 c0                	test   eax,eax
c000cfb2:	74 0f                	je     c000cfc3 <sendKeyToTerminal(unsigned char)+0xc1>
c000cfb4:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000cfbe:	e8 4d 8b 00 00       	call   c0015b10 <schedule()>
c000cfc3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfc8:	83 e8 01             	sub    eax,0x1
c000cfcb:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cfd0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfd5:	85 c0                	test   eax,eax
c000cfd7:	75 01                	jne    c000cfda <sendKeyToTerminal(unsigned char)+0xd8>
c000cfd9:	fb                   	sti    
c000cfda:	90                   	nop
c000cfdb:	c9                   	leave  
c000cfdc:	c3                   	ret    

c000cfdd <sendKeyboardToken(KeyboardToken)>:
c000cfdd:	55                   	push   ebp
c000cfde:	89 e5                	mov    ebp,esp
c000cfe0:	83 ec 18             	sub    esp,0x18
c000cfe3:	e8 b9 42 00 00       	call   c00112a1 <KeUserIOReceived()>
c000cfe8:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000cfeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cfee:	0f b7 c0             	movzx  eax,ax
c000cff1:	83 f2 01             	xor    edx,0x1
c000cff4:	88 90 40 84 02 c0    	mov    BYTE PTR [eax-0x3ffd7bc0],dl
c000cffa:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000cfff:	85 c0                	test   eax,eax
c000d001:	74 24                	je     c000d027 <sendKeyboardToken(KeyboardToken)+0x4a>
c000d003:	8b 0d 28 84 02 c0    	mov    ecx,DWORD PTR ds:0xc0028428
c000d009:	83 ec 04             	sub    esp,0x4
c000d00c:	68 40 84 02 c0       	push   0xc0028440
c000d011:	83 ec 08             	sub    esp,0x8
c000d014:	89 e2                	mov    edx,esp
c000d016:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d019:	89 02                	mov    DWORD PTR [edx],eax
c000d01b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d01e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d022:	ff d1                	call   ecx
c000d024:	83 c4 10             	add    esp,0x10
c000d027:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d02b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d02e:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d033:	0f b6 d2             	movzx  edx,dl
c000d036:	0f b6 c0             	movzx  eax,al
c000d039:	39 c2                	cmp    edx,eax
c000d03b:	74 1c                	je     c000d059 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d03d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d040:	a2 48 88 02 c0       	mov    ds:0xc0028848,al
c000d045:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d04a:	0f b6 c0             	movzx  eax,al
c000d04d:	83 ec 0c             	sub    esp,0xc
c000d050:	50                   	push   eax
c000d051:	e8 ac b4 ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000d056:	83 c4 10             	add    esp,0x10
c000d059:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d05c:	0f b6 c0             	movzx  eax,al
c000d05f:	85 c0                	test   eax,eax
c000d061:	0f 84 da 00 00 00    	je     c000d141 <sendKeyboardToken(KeyboardToken)+0x164>
c000d067:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d06a:	0f b7 c0             	movzx  eax,ax
c000d06d:	3d 18 03 00 00       	cmp    eax,0x318
c000d072:	75 06                	jne    c000d07a <sendKeyboardToken(KeyboardToken)+0x9d>
c000d074:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d07a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d07d:	0f b7 c0             	movzx  eax,ax
c000d080:	3d 19 03 00 00       	cmp    eax,0x319
c000d085:	75 06                	jne    c000d08d <sendKeyboardToken(KeyboardToken)+0xb0>
c000d087:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d08d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d090:	0f b7 c0             	movzx  eax,ax
c000d093:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d098:	75 06                	jne    c000d0a0 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d09a:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d0a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0a3:	0f b7 c0             	movzx  eax,ax
c000d0a6:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d0ab:	75 06                	jne    c000d0b3 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d0ad:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d0b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0b6:	0f b7 c0             	movzx  eax,ax
c000d0b9:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d0be:	75 06                	jne    c000d0c6 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d0c0:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d0c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0c9:	0f b7 c0             	movzx  eax,ax
c000d0cc:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d0d1:	75 06                	jne    c000d0d9 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d0d3:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d0d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0dc:	0f b7 c0             	movzx  eax,ax
c000d0df:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d0e4:	75 06                	jne    c000d0ec <sendKeyboardToken(KeyboardToken)+0x10f>
c000d0e6:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d0ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0ef:	0f b7 c0             	movzx  eax,ax
c000d0f2:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d0f7:	75 06                	jne    c000d0ff <sendKeyboardToken(KeyboardToken)+0x122>
c000d0f9:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d0ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d102:	0f b7 c0             	movzx  eax,ax
c000d105:	3d 20 03 00 00       	cmp    eax,0x320
c000d10a:	75 06                	jne    c000d112 <sendKeyboardToken(KeyboardToken)+0x135>
c000d10c:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d112:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d115:	0f b7 c0             	movzx  eax,ax
c000d118:	3d 21 03 00 00       	cmp    eax,0x321
c000d11d:	75 06                	jne    c000d125 <sendKeyboardToken(KeyboardToken)+0x148>
c000d11f:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d125:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d128:	0f b7 c0             	movzx  eax,ax
c000d12b:	3d 22 03 00 00       	cmp    eax,0x322
c000d130:	0f 85 f1 00 00 00    	jne    c000d227 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d136:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d13c:	e9 e6 00 00 00       	jmp    c000d227 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d144:	0f b7 c0             	movzx  eax,ax
c000d147:	3d 18 03 00 00       	cmp    eax,0x318
c000d14c:	75 0a                	jne    c000d158 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d14e:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d154:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d158:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d15b:	0f b7 c0             	movzx  eax,ax
c000d15e:	3d 19 03 00 00       	cmp    eax,0x319
c000d163:	75 0a                	jne    c000d16f <sendKeyboardToken(KeyboardToken)+0x192>
c000d165:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d16b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d16f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d172:	0f b7 c0             	movzx  eax,ax
c000d175:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d17a:	75 0a                	jne    c000d186 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d17c:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d182:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d186:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d189:	0f b7 c0             	movzx  eax,ax
c000d18c:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d191:	75 0a                	jne    c000d19d <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d193:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d199:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d19d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1a0:	0f b7 c0             	movzx  eax,ax
c000d1a3:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d1a8:	75 0a                	jne    c000d1b4 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d1aa:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d1b0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1b7:	0f b7 c0             	movzx  eax,ax
c000d1ba:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d1bf:	75 0a                	jne    c000d1cb <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d1c1:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d1c7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1ce:	0f b7 c0             	movzx  eax,ax
c000d1d1:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d1d6:	75 0a                	jne    c000d1e2 <sendKeyboardToken(KeyboardToken)+0x205>
c000d1d8:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d1de:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1e5:	0f b7 c0             	movzx  eax,ax
c000d1e8:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d1ed:	75 0a                	jne    c000d1f9 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d1ef:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d1f5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1fc:	0f b7 c0             	movzx  eax,ax
c000d1ff:	3d 20 03 00 00       	cmp    eax,0x320
c000d204:	75 0a                	jne    c000d210 <sendKeyboardToken(KeyboardToken)+0x233>
c000d206:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d20c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d210:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d213:	0f b7 c0             	movzx  eax,ax
c000d216:	3d 21 03 00 00       	cmp    eax,0x321
c000d21b:	75 0a                	jne    c000d227 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d21d:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d223:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d227:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d22a:	0f b7 c0             	movzx  eax,ax
c000d22d:	3d 00 02 00 00       	cmp    eax,0x200
c000d232:	75 2f                	jne    c000d263 <sendKeyboardToken(KeyboardToken)+0x286>
c000d234:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d239:	83 f0 01             	xor    eax,0x1
c000d23c:	0f b6 c0             	movzx  eax,al
c000d23f:	85 c0                	test   eax,eax
c000d241:	74 20                	je     c000d263 <sendKeyboardToken(KeyboardToken)+0x286>
c000d243:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d248:	6a 01                	push   0x1
c000d24a:	6a 00                	push   0x0
c000d24c:	68 26 ce 00 c0       	push   0xc000ce26
c000d251:	50                   	push   eax
c000d252:	e8 69 86 00 00       	call   c00158c0 <Process::createThread(void (*)(void*), void*, int)>
c000d257:	83 c4 10             	add    esp,0x10
c000d25a:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d261:	eb 3a                	jmp    c000d29d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d263:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d266:	0f b7 c0             	movzx  eax,ax
c000d269:	3d 01 02 00 00       	cmp    eax,0x201
c000d26e:	75 2d                	jne    c000d29d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d270:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d275:	83 f0 01             	xor    eax,0x1
c000d278:	0f b6 c0             	movzx  eax,al
c000d27b:	85 c0                	test   eax,eax
c000d27d:	74 1e                	je     c000d29d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d27f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d284:	6a 01                	push   0x1
c000d286:	6a 00                	push   0x0
c000d288:	68 94 ce 00 c0       	push   0xc000ce94
c000d28d:	50                   	push   eax
c000d28e:	e8 2d 86 00 00       	call   c00158c0 <Process::createThread(void (*)(void*), void*, int)>
c000d293:	83 c4 10             	add    esp,0x10
c000d296:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d29d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2a0:	0f b7 c0             	movzx  eax,ax
c000d2a3:	3d 25 03 00 00       	cmp    eax,0x325
c000d2a8:	75 06                	jne    c000d2b0 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d2aa:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d2b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2b3:	0f b7 c0             	movzx  eax,ax
c000d2b6:	3d 24 03 00 00       	cmp    eax,0x324
c000d2bb:	75 06                	jne    c000d2c3 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d2bd:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d2c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2c6:	0f b7 c0             	movzx  eax,ax
c000d2c9:	3d 23 03 00 00       	cmp    eax,0x323
c000d2ce:	75 06                	jne    c000d2d6 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d2d0:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d2d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2d9:	0f b7 c0             	movzx  eax,ax
c000d2dc:	3d 26 03 00 00       	cmp    eax,0x326
c000d2e1:	75 06                	jne    c000d2e9 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d2e3:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d2e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2ec:	0f b7 c0             	movzx  eax,ax
c000d2ef:	3d 27 03 00 00       	cmp    eax,0x327
c000d2f4:	75 06                	jne    c000d2fc <sendKeyboardToken(KeyboardToken)+0x31f>
c000d2f6:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d2fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2ff:	0f b7 c0             	movzx  eax,ax
c000d302:	3d 22 03 00 00       	cmp    eax,0x322
c000d307:	75 06                	jne    c000d30f <sendKeyboardToken(KeyboardToken)+0x332>
c000d309:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d30f:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d313:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d316:	83 f0 01             	xor    eax,0x1
c000d319:	0f b6 c0             	movzx  eax,al
c000d31c:	85 c0                	test   eax,eax
c000d31e:	74 7c                	je     c000d39c <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d320:	a0 41 85 02 c0       	mov    al,ds:0xc0028541
c000d325:	0f b6 c0             	movzx  eax,al
c000d328:	85 c0                	test   eax,eax
c000d32a:	74 43                	je     c000d36f <sendKeyboardToken(KeyboardToken)+0x392>
c000d32c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d330:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d334:	85 c0                	test   eax,eax
c000d336:	74 2b                	je     c000d363 <sendKeyboardToken(KeyboardToken)+0x386>
c000d338:	8b 15 44 88 02 c0    	mov    edx,DWORD PTR ds:0xc0028844
c000d33e:	89 d0                	mov    eax,edx
c000d340:	c1 e0 02             	shl    eax,0x2
c000d343:	01 d0                	add    eax,edx
c000d345:	01 c0                	add    eax,eax
c000d347:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d34c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d34f:	0f b7 c0             	movzx  eax,ax
c000d352:	8d 50 d0             	lea    edx,[eax-0x30]
c000d355:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d35a:	01 d0                	add    eax,edx
c000d35c:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d361:	eb 71                	jmp    c000d3d4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d363:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d36d:	eb 65                	jmp    c000d3d4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d36f:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d374:	85 c0                	test   eax,eax
c000d376:	74 18                	je     c000d390 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d378:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d37d:	0f b6 c0             	movzx  eax,al
c000d380:	83 ec 0c             	sub    esp,0xc
c000d383:	50                   	push   eax
c000d384:	e8 79 fb ff ff       	call   c000cf02 <sendKeyToTerminal(unsigned char)>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d390:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d39a:	eb 38                	jmp    c000d3d4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d39c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d39f:	0f b7 c0             	movzx  eax,ax
c000d3a2:	3d 01 01 00 00       	cmp    eax,0x101
c000d3a7:	75 2b                	jne    c000d3d4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d3a9:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d3ae:	85 c0                	test   eax,eax
c000d3b0:	74 18                	je     c000d3ca <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d3b2:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d3b7:	0f b6 c0             	movzx  eax,al
c000d3ba:	83 ec 0c             	sub    esp,0xc
c000d3bd:	50                   	push   eax
c000d3be:	e8 3f fb ff ff       	call   c000cf02 <sendKeyToTerminal(unsigned char)>
c000d3c3:	83 c4 10             	add    esp,0x10
c000d3c6:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d3ca:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d3d4:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d3d7:	83 f0 01             	xor    eax,0x1
c000d3da:	0f b6 c0             	movzx  eax,al
c000d3dd:	85 c0                	test   eax,eax
c000d3df:	74 5a                	je     c000d43b <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3e1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d3e4:	83 f0 01             	xor    eax,0x1
c000d3e7:	0f b6 c0             	movzx  eax,al
c000d3ea:	85 c0                	test   eax,eax
c000d3ec:	74 4d                	je     c000d43b <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3ee:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d3f3:	83 f0 01             	xor    eax,0x1
c000d3f6:	0f b6 c0             	movzx  eax,al
c000d3f9:	85 c0                	test   eax,eax
c000d3fb:	74 3e                	je     c000d43b <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d400:	0f b7 c0             	movzx  eax,ax
c000d403:	83 f8 1f             	cmp    eax,0x1f
c000d406:	76 0b                	jbe    c000d413 <sendKeyboardToken(KeyboardToken)+0x436>
c000d408:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d40b:	0f b7 c0             	movzx  eax,ax
c000d40e:	83 f8 7e             	cmp    eax,0x7e
c000d411:	76 16                	jbe    c000d429 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d413:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d416:	0f b7 c0             	movzx  eax,ax
c000d419:	83 f8 0a             	cmp    eax,0xa
c000d41c:	74 0b                	je     c000d429 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d41e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d421:	0f b7 c0             	movzx  eax,ax
c000d424:	83 f8 08             	cmp    eax,0x8
c000d427:	75 12                	jne    c000d43b <sendKeyboardToken(KeyboardToken)+0x45e>
c000d429:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d42c:	0f b6 c0             	movzx  eax,al
c000d42f:	83 ec 0c             	sub    esp,0xc
c000d432:	50                   	push   eax
c000d433:	e8 ca fa ff ff       	call   c000cf02 <sendKeyToTerminal(unsigned char)>
c000d438:	83 c4 10             	add    esp,0x10
c000d43b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d43e:	83 f0 01             	xor    eax,0x1
c000d441:	0f b6 c0             	movzx  eax,al
c000d444:	85 c0                	test   eax,eax
c000d446:	74 5d                	je     c000d4a5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d448:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d44b:	83 f0 01             	xor    eax,0x1
c000d44e:	0f b6 c0             	movzx  eax,al
c000d451:	85 c0                	test   eax,eax
c000d453:	74 50                	je     c000d4a5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d455:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d45a:	0f b6 c0             	movzx  eax,al
c000d45d:	85 c0                	test   eax,eax
c000d45f:	74 44                	je     c000d4a5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d461:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d464:	0f b7 c0             	movzx  eax,ax
c000d467:	83 f8 3f             	cmp    eax,0x3f
c000d46a:	76 39                	jbe    c000d4a5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d46c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d46f:	0f b7 c0             	movzx  eax,ax
c000d472:	83 f8 7f             	cmp    eax,0x7f
c000d475:	77 2e                	ja     c000d4a5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d477:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d47a:	88 c2                	mov    dl,al
c000d47c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d47f:	0f b7 c0             	movzx  eax,ax
c000d482:	83 f8 5f             	cmp    eax,0x5f
c000d485:	76 04                	jbe    c000d48b <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d487:	b0 20                	mov    al,0x20
c000d489:	eb 02                	jmp    c000d48d <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d48b:	b0 00                	mov    al,0x0
c000d48d:	89 d1                	mov    ecx,edx
c000d48f:	29 c1                	sub    ecx,eax
c000d491:	89 c8                	mov    eax,ecx
c000d493:	83 e8 40             	sub    eax,0x40
c000d496:	0f b6 c0             	movzx  eax,al
c000d499:	83 ec 0c             	sub    esp,0xc
c000d49c:	50                   	push   eax
c000d49d:	e8 60 fa ff ff       	call   c000cf02 <sendKeyToTerminal(unsigned char)>
c000d4a2:	83 c4 10             	add    esp,0x10
c000d4a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4a8:	0f b7 c0             	movzx  eax,ax
c000d4ab:	3d 00 03 00 00       	cmp    eax,0x300
c000d4b0:	75 12                	jne    c000d4c4 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d4b2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d4b5:	83 f0 01             	xor    eax,0x1
c000d4b8:	0f b6 c0             	movzx  eax,al
c000d4bb:	85 c0                	test   eax,eax
c000d4bd:	74 05                	je     c000d4c4 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d4bf:	e8 3f b0 ff ff       	call   c0008503 <doTerminalCycle()>
c000d4c4:	90                   	nop
c000d4c5:	c9                   	leave  
c000d4c6:	c3                   	ret    

c000d4c7 <clearInternalKeybuffer(VgaText*)>:
c000d4c7:	55                   	push   ebp
c000d4c8:	89 e5                	mov    ebp,esp
c000d4ca:	83 ec 08             	sub    esp,0x8
c000d4cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4d0:	05 02 01 00 00       	add    eax,0x102
c000d4d5:	83 ec 0c             	sub    esp,0xc
c000d4d8:	50                   	push   eax
c000d4d9:	e8 92 30 ff ff       	call   c0000570 <strlen>
c000d4de:	83 c4 10             	add    esp,0x10
c000d4e1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d4e4:	81 c2 02 01 00 00    	add    edx,0x102
c000d4ea:	83 ec 04             	sub    esp,0x4
c000d4ed:	50                   	push   eax
c000d4ee:	6a 00                	push   0x0
c000d4f0:	52                   	push   edx
c000d4f1:	e8 fa 2f ff ff       	call   c00004f0 <memset>
c000d4f6:	83 c4 10             	add    esp,0x10
c000d4f9:	90                   	nop
c000d4fa:	c9                   	leave  
c000d4fb:	c3                   	ret    

c000d4fc <readKeyboard(VgaText*, char*, unsigned long)>:
c000d4fc:	55                   	push   ebp
c000d4fd:	89 e5                	mov    ebp,esp
c000d4ff:	83 ec 18             	sub    esp,0x18
c000d502:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d507:	85 c0                	test   eax,eax
c000d509:	74 2a                	je     c000d535 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d50b:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d511:	8b 0d 28 84 02 c0    	mov    ecx,DWORD PTR ds:0xc0028428
c000d517:	83 ec 04             	sub    esp,0x4
c000d51a:	68 40 84 02 c0       	push   0xc0028440
c000d51f:	83 ec 08             	sub    esp,0x8
c000d522:	89 e2                	mov    edx,esp
c000d524:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d527:	89 02                	mov    DWORD PTR [edx],eax
c000d529:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d52c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d530:	ff d1                	call   ecx
c000d532:	83 c4 10             	add    esp,0x10
c000d535:	fb                   	sti    
c000d536:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d53d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d541:	0f 84 0d 01 00 00    	je     c000d654 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d547:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d54a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d550:	0f be c0             	movsx  eax,al
c000d553:	85 c0                	test   eax,eax
c000d555:	75 2c                	jne    c000d583 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d557:	fa                   	cli    
c000d558:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d55d:	83 c0 01             	add    eax,0x1
c000d560:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d565:	e8 a6 85 00 00       	call   c0015b10 <schedule()>
c000d56a:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d56f:	83 e8 01             	sub    eax,0x1
c000d572:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d577:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d57c:	85 c0                	test   eax,eax
c000d57e:	75 c7                	jne    c000d547 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d580:	fb                   	sti    
c000d581:	eb c4                	jmp    c000d547 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d583:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d586:	8d 50 01             	lea    edx,[eax+0x1]
c000d589:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d58c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d58f:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d595:	88 10                	mov    BYTE PTR [eax],dl
c000d597:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d59a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d5a0:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d5a3:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d5a7:	83 f8 03             	cmp    eax,0x3
c000d5aa:	75 1e                	jne    c000d5ca <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d5ac:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d5b1:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5b3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d5b6:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d5bc:	83 ec 08             	sub    esp,0x8
c000d5bf:	6a 02                	push   0x2
c000d5c1:	50                   	push   eax
c000d5c2:	e8 2b 41 00 00       	call   c00116f2 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d5c7:	83 c4 10             	add    esp,0x10
c000d5ca:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d5ce:	83 f8 1c             	cmp    eax,0x1c
c000d5d1:	75 1e                	jne    c000d5f1 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d5d3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d5d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d5dd:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d5e3:	83 ec 08             	sub    esp,0x8
c000d5e6:	6a 09                	push   0x9
c000d5e8:	50                   	push   eax
c000d5e9:	e8 04 41 00 00       	call   c00116f2 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d5ee:	83 c4 10             	add    esp,0x10
c000d5f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5f4:	05 02 01 00 00       	add    eax,0x102
c000d5f9:	83 ec 0c             	sub    esp,0xc
c000d5fc:	50                   	push   eax
c000d5fd:	e8 6e 2f ff ff       	call   c0000570 <strlen>
c000d602:	83 c4 10             	add    esp,0x10
c000d605:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d608:	81 c2 02 01 00 00    	add    edx,0x102
c000d60e:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d611:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d614:	81 c2 02 01 00 00    	add    edx,0x102
c000d61a:	83 ec 04             	sub    esp,0x4
c000d61d:	50                   	push   eax
c000d61e:	51                   	push   ecx
c000d61f:	52                   	push   edx
c000d620:	e8 ab 2d ff ff       	call   c00003d0 <memmove>
c000d625:	83 c4 10             	add    esp,0x10
c000d628:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d62c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d630:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d634:	83 f8 0a             	cmp    eax,0xa
c000d637:	74 16                	je     c000d64f <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d639:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d63d:	83 f8 03             	cmp    eax,0x3
c000d640:	74 0d                	je     c000d64f <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d642:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d646:	83 f8 1c             	cmp    eax,0x1c
c000d649:	0f 85 ee fe ff ff    	jne    c000d53d <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d64f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d652:	eb 03                	jmp    c000d657 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d654:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d657:	c9                   	leave  
c000d658:	c3                   	ret    
c000d659:	90                   	nop

c000d65a <Keyboard::Keyboard(char const*)>:
c000d65a:	83 ec 0c             	sub    esp,0xc
c000d65d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d661:	83 ec 08             	sub    esp,0x8
c000d664:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d668:	50                   	push   eax
c000d669:	e8 4c f1 ff ff       	call   c000c7ba <Device::Device(char const*)>
c000d66e:	83 c4 10             	add    esp,0x10
c000d671:	ba fc 15 02 c0       	mov    edx,0xc00215fc
c000d676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d67a:	89 10                	mov    DWORD PTR [eax],edx
c000d67c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d680:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d68a:	c6 05 24 84 02 c0 01 	mov    BYTE PTR ds:0xc0028424,0x1
c000d691:	90                   	nop
c000d692:	83 c4 0c             	add    esp,0xc
c000d695:	c3                   	ret    

c000d696 <Keyboard::~Keyboard()>:
c000d696:	83 ec 0c             	sub    esp,0xc
c000d699:	ba fc 15 02 c0       	mov    edx,0xc00215fc
c000d69e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6a2:	89 10                	mov    DWORD PTR [eax],edx
c000d6a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6a8:	83 ec 0c             	sub    esp,0xc
c000d6ab:	50                   	push   eax
c000d6ac:	e8 73 ee ff ff       	call   c000c524 <Device::~Device()>
c000d6b1:	83 c4 10             	add    esp,0x10
c000d6b4:	90                   	nop
c000d6b5:	83 c4 0c             	add    esp,0xc
c000d6b8:	c3                   	ret    
c000d6b9:	90                   	nop

c000d6ba <Keyboard::~Keyboard()>:
c000d6ba:	83 ec 0c             	sub    esp,0xc
c000d6bd:	83 ec 0c             	sub    esp,0xc
c000d6c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6c4:	e8 cd ff ff ff       	call   c000d696 <Keyboard::~Keyboard()>
c000d6c9:	83 c4 10             	add    esp,0x10
c000d6cc:	83 ec 08             	sub    esp,0x8
c000d6cf:	68 5c 01 00 00       	push   0x15c
c000d6d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6d8:	e8 3b d1 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d6dd:	83 c4 10             	add    esp,0x10
c000d6e0:	83 c4 0c             	add    esp,0xc
c000d6e3:	c3                   	ret    

c000d6e4 <LogicalDisk::close(int, int, void*)>:
c000d6e4:	83 c8 ff             	or     eax,0xffffffff
c000d6e7:	c3                   	ret    

c000d6e8 <LogicalDisk::~LogicalDisk()>:
c000d6e8:	83 ec 0c             	sub    esp,0xc
c000d6eb:	ba 74 16 02 c0       	mov    edx,0xc0021674
c000d6f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6f4:	89 10                	mov    DWORD PTR [eax],edx
c000d6f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6fa:	83 ec 0c             	sub    esp,0xc
c000d6fd:	50                   	push   eax
c000d6fe:	e8 21 ee ff ff       	call   c000c524 <Device::~Device()>
c000d703:	83 c4 10             	add    esp,0x10
c000d706:	90                   	nop
c000d707:	83 c4 0c             	add    esp,0xc
c000d70a:	c3                   	ret    
c000d70b:	90                   	nop

c000d70c <LogicalDisk::~LogicalDisk()>:
c000d70c:	83 ec 0c             	sub    esp,0xc
c000d70f:	83 ec 0c             	sub    esp,0xc
c000d712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d716:	e8 cd ff ff ff       	call   c000d6e8 <LogicalDisk::~LogicalDisk()>
c000d71b:	83 c4 10             	add    esp,0x10
c000d71e:	83 ec 08             	sub    esp,0x8
c000d721:	68 78 01 00 00       	push   0x178
c000d726:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d72a:	e8 e9 d0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d72f:	83 c4 10             	add    esp,0x10
c000d732:	83 c4 0c             	add    esp,0xc
c000d735:	c3                   	ret    

c000d736 <LogicalDisk::open(int, int, void*)>:
c000d736:	83 ec 18             	sub    esp,0x18
c000d739:	68 28 16 02 c0       	push   0xc0021628
c000d73e:	e8 0e 3b 00 00       	call   c0011251 <KePanic(char const*)>
c000d743:	83 c8 ff             	or     eax,0xffffffff
c000d746:	83 c4 1c             	add    esp,0x1c
c000d749:	c3                   	ret    

c000d74a <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d74a:	53                   	push   ebx
c000d74b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d74f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d753:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d757:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d75d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d763:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d769:	77 10                	ja     c000d77b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d76b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d771:	89 d3                	mov    ebx,edx
c000d773:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d779:	72 05                	jb     c000d780 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d77b:	83 c8 ff             	or     eax,0xffffffff
c000d77e:	89 c2                	mov    edx,eax
c000d780:	5b                   	pop    ebx
c000d781:	c3                   	ret    

c000d782 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d782:	56                   	push   esi
c000d783:	83 c8 ff             	or     eax,0xffffffff
c000d786:	53                   	push   ebx
c000d787:	89 c2                	mov    edx,eax
c000d789:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d78d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d791:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d795:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d79b:	77 27                	ja     c000d7c4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d79d:	89 d8                	mov    eax,ebx
c000d79f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d7a5:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d7ab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d7b0:	89 c2                	mov    edx,eax
c000d7b2:	73 10                	jae    c000d7c4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d7b4:	89 c8                	mov    eax,ecx
c000d7b6:	89 da                	mov    edx,ebx
c000d7b8:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d7be:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d7c4:	5b                   	pop    ebx
c000d7c5:	5e                   	pop    esi
c000d7c6:	c3                   	ret    
c000d7c7:	90                   	nop

c000d7c8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d7c8:	83 ec 1c             	sub    esp,0x1c
c000d7cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d7cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d7d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d7df:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d7e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d7ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7ee:	83 ec 08             	sub    esp,0x8
c000d7f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d7f5:	50                   	push   eax
c000d7f6:	e8 bf ef ff ff       	call   c000c7ba <Device::Device(char const*)>
c000d7fb:	83 c4 10             	add    esp,0x10
c000d7fe:	ba 74 16 02 c0       	mov    edx,0xc0021674
c000d803:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d807:	89 10                	mov    DWORD PTR [eax],edx
c000d809:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d80d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d814:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d818:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d81f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d823:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d82a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d82e:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d838:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d83c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d840:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d844:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d84a:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d850:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d854:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d857:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d85b:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d861:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d867:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d86b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d86f:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d875:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d879:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d883:	90                   	nop
c000d884:	83 c4 1c             	add    esp,0x1c
c000d887:	c3                   	ret    

c000d888 <LogicalDisk::assignDriveLetter()>:
c000d888:	55                   	push   ebp
c000d889:	57                   	push   edi
c000d88a:	56                   	push   esi
c000d88b:	53                   	push   ebx
c000d88c:	83 ec 14             	sub    esp,0x14
c000d88f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d893:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d899:	b0 41                	mov    al,0x41
c000d89b:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d8a1:	84 d2                	test   dl,dl
c000d8a3:	75 02                	jne    c000d8a7 <LogicalDisk::assignDriveLetter()+0x1f>
c000d8a5:	b0 43                	mov    al,0x43
c000d8a7:	8b 3d 60 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028860
c000d8ad:	0f b6 ca             	movzx  ecx,dl
c000d8b0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d8b4:	0f be e8             	movsx  ebp,al
c000d8b7:	8b 3d 64 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028864
c000d8bd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d8c1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d8c5:	3c 43                	cmp    al,0x43
c000d8c7:	75 10                	jne    c000d8d9 <LogicalDisk::assignDriveLetter()+0x51>
c000d8c9:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d8d0:	75 5a                	jne    c000d92c <LogicalDisk::assignDriveLetter()+0xa4>
c000d8d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d8d7:	75 53                	jne    c000d92c <LogicalDisk::assignDriveLetter()+0xa4>
c000d8d9:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d8dc:	ba 01 00 00 00       	mov    edx,0x1
c000d8e1:	89 34 24             	mov    DWORD PTR [esp],esi
c000d8e4:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d8e7:	d3 e2                	shl    edx,cl
c000d8e9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d8ed:	89 d7                	mov    edi,edx
c000d8ef:	89 d6                	mov    esi,edx
c000d8f1:	c1 ff 1f             	sar    edi,0x1f
c000d8f4:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d8f8:	21 f9                	and    ecx,edi
c000d8fa:	09 d1                	or     ecx,edx
c000d8fc:	75 2e                	jne    c000d92c <LogicalDisk::assignDriveLetter()+0xa4>
c000d8fe:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d902:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d906:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d90c:	09 f2                	or     edx,esi
c000d90e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d911:	89 15 60 88 02 c0    	mov    DWORD PTR ds:0xc0028860,edx
c000d917:	89 1c b5 80 88 02 c0 	mov    DWORD PTR [esi*4-0x3ffd7780],ebx
c000d91e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d922:	09 fa                	or     edx,edi
c000d924:	89 15 64 88 02 c0    	mov    DWORD PTR ds:0xc0028864,edx
c000d92a:	eb 0d                	jmp    c000d939 <LogicalDisk::assignDriveLetter()+0xb1>
c000d92c:	8d 50 01             	lea    edx,[eax+0x1]
c000d92f:	45                   	inc    ebp
c000d930:	88 d0                	mov    al,dl
c000d932:	80 fa 5b             	cmp    dl,0x5b
c000d935:	75 8e                	jne    c000d8c5 <LogicalDisk::assignDriveLetter()+0x3d>
c000d937:	31 c0                	xor    eax,eax
c000d939:	83 c4 14             	add    esp,0x14
c000d93c:	5b                   	pop    ebx
c000d93d:	5e                   	pop    esi
c000d93e:	5f                   	pop    edi
c000d93f:	5d                   	pop    ebp
c000d940:	c3                   	ret    
c000d941:	90                   	nop

c000d942 <LogicalDisk::mount()>:
c000d942:	56                   	push   esi
c000d943:	53                   	push   ebx
c000d944:	53                   	push   ebx
c000d945:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d949:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c000d94f:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d959:	85 db                	test   ebx,ebx
c000d95b:	74 27                	je     c000d984 <LogicalDisk::mount()+0x42>
c000d95d:	51                   	push   ecx
c000d95e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d965:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d967:	83 e8 41             	sub    eax,0x41
c000d96a:	50                   	push   eax
c000d96b:	56                   	push   esi
c000d96c:	53                   	push   ebx
c000d96d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d970:	83 c4 10             	add    esp,0x10
c000d973:	84 c0                	test   al,al
c000d975:	74 08                	je     c000d97f <LogicalDisk::mount()+0x3d>
c000d977:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d97d:	eb 07                	jmp    c000d986 <LogicalDisk::mount()+0x44>
c000d97f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d982:	eb d5                	jmp    c000d959 <LogicalDisk::mount()+0x17>
c000d984:	31 c0                	xor    eax,eax
c000d986:	5a                   	pop    edx
c000d987:	5b                   	pop    ebx
c000d988:	5e                   	pop    esi
c000d989:	c3                   	ret    

c000d98a <LogicalDisk::unmount()>:
c000d98a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d98e:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d998:	c3                   	ret    
c000d999:	90                   	nop

c000d99a <LogicalDisk::eject()>:
c000d99a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d99e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d9a4:	8b 10                	mov    edx,DWORD PTR [eax]
c000d9a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d9aa:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d9ad:	90                   	nop

c000d9ae <LogicalDisk::unassignDriveLetter()>:
c000d9ae:	57                   	push   edi
c000d9af:	56                   	push   esi
c000d9b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d9b4:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d9bb:	85 c9                	test   ecx,ecx
c000d9bd:	75 0f                	jne    c000d9ce <LogicalDisk::unassignDriveLetter()+0x20>
c000d9bf:	c7 44 24 0c 4c 16 02 c0 	mov    DWORD PTR [esp+0xc],0xc002164c
c000d9c7:	5e                   	pop    esi
c000d9c8:	5f                   	pop    edi
c000d9c9:	e9 83 38 00 00       	jmp    c0011251 <KePanic(char const*)>
c000d9ce:	83 e9 41             	sub    ecx,0x41
c000d9d1:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d9d8:	b8 01 00 00 00       	mov    eax,0x1
c000d9dd:	c7 04 8d 80 88 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7780],0x0
c000d9e8:	d3 e0                	shl    eax,cl
c000d9ea:	89 c7                	mov    edi,eax
c000d9ec:	f7 d0                	not    eax
c000d9ee:	c1 ff 1f             	sar    edi,0x1f
c000d9f1:	21 05 60 88 02 c0    	and    DWORD PTR ds:0xc0028860,eax
c000d9f7:	89 fe                	mov    esi,edi
c000d9f9:	f7 d6                	not    esi
c000d9fb:	21 35 64 88 02 c0    	and    DWORD PTR ds:0xc0028864,esi
c000da01:	5e                   	pop    esi
c000da02:	5f                   	pop    edi
c000da03:	c3                   	ret    

c000da04 <LogicalDisk::read(unsigned long long, int, void*)>:
c000da04:	57                   	push   edi
c000da05:	56                   	push   esi
c000da06:	53                   	push   ebx
c000da07:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000da0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da0f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000da13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000da17:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000da1d:	77 41                	ja     c000da60 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000da1f:	99                   	cdq    
c000da20:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000da26:	01 c8                	add    eax,ecx
c000da28:	11 da                	adc    edx,ebx
c000da2a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000da30:	19 d7                	sbb    edi,edx
c000da32:	72 33                	jb     c000da67 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000da34:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000da3a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000da40:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000da44:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000da48:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000da4e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000da54:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da58:	5b                   	pop    ebx
c000da59:	5e                   	pop    esi
c000da5a:	5f                   	pop    edi
c000da5b:	e9 c6 0a 00 00       	jmp    c000e526 <VCache::read(unsigned long long, int, void*)>
c000da60:	b8 05 00 00 00       	mov    eax,0x5
c000da65:	eb 05                	jmp    c000da6c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000da67:	b8 07 00 00 00       	mov    eax,0x7
c000da6c:	5b                   	pop    ebx
c000da6d:	5e                   	pop    esi
c000da6e:	5f                   	pop    edi
c000da6f:	c3                   	ret    

c000da70 <LogicalDisk::write(unsigned long long, int, void*)>:
c000da70:	57                   	push   edi
c000da71:	56                   	push   esi
c000da72:	53                   	push   ebx
c000da73:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000da77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da7b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000da7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000da83:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000da89:	77 41                	ja     c000dacc <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000da8b:	99                   	cdq    
c000da8c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000da92:	01 c8                	add    eax,ecx
c000da94:	11 da                	adc    edx,ebx
c000da96:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000da9c:	19 d7                	sbb    edi,edx
c000da9e:	72 33                	jb     c000dad3 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000daa0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000daa6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000daac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dab0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dab4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000daba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dac0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dac4:	5b                   	pop    ebx
c000dac5:	5e                   	pop    esi
c000dac6:	5f                   	pop    edi
c000dac7:	e9 6c 09 00 00       	jmp    c000e438 <VCache::write(unsigned long long, int, void*)>
c000dacc:	b8 05 00 00 00       	mov    eax,0x5
c000dad1:	eb 05                	jmp    c000dad8 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000dad3:	b8 07 00 00 00       	mov    eax,0x7
c000dad8:	5b                   	pop    ebx
c000dad9:	5e                   	pop    esi
c000dada:	5f                   	pop    edi
c000dadb:	c3                   	ret    

c000dadc <Mouse::Mouse(char const*)>:
c000dadc:	83 ec 0c             	sub    esp,0xc
c000dadf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dae3:	83 ec 08             	sub    esp,0x8
c000dae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daea:	50                   	push   eax
c000daeb:	e8 ca ec ff ff       	call   c000c7ba <Device::Device(char const*)>
c000daf0:	83 c4 10             	add    esp,0x10
c000daf3:	ba a0 16 02 c0       	mov    edx,0xc00216a0
c000daf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dafc:	89 10                	mov    DWORD PTR [eax],edx
c000dafe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db02:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000db0c:	90                   	nop
c000db0d:	83 c4 0c             	add    esp,0xc
c000db10:	c3                   	ret    
c000db11:	90                   	nop
c000db12:	66 90                	xchg   ax,ax

c000db14 <Mouse::~Mouse()>:
c000db14:	83 ec 0c             	sub    esp,0xc
c000db17:	ba a0 16 02 c0       	mov    edx,0xc00216a0
c000db1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db20:	89 10                	mov    DWORD PTR [eax],edx
c000db22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db26:	83 ec 0c             	sub    esp,0xc
c000db29:	50                   	push   eax
c000db2a:	e8 f5 e9 ff ff       	call   c000c524 <Device::~Device()>
c000db2f:	83 c4 10             	add    esp,0x10
c000db32:	90                   	nop
c000db33:	83 c4 0c             	add    esp,0xc
c000db36:	c3                   	ret    
c000db37:	90                   	nop

c000db38 <Mouse::~Mouse()>:
c000db38:	83 ec 0c             	sub    esp,0xc
c000db3b:	83 ec 0c             	sub    esp,0xc
c000db3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db42:	e8 cd ff ff ff       	call   c000db14 <Mouse::~Mouse()>
c000db47:	83 c4 10             	add    esp,0x10
c000db4a:	83 ec 08             	sub    esp,0x8
c000db4d:	68 58 01 00 00       	push   0x158
c000db52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db56:	e8 bd cc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000db5b:	83 c4 10             	add    esp,0x10
c000db5e:	83 c4 0c             	add    esp,0xc
c000db61:	c3                   	ret    

c000db62 <NIC::getMAC()>:
c000db62:	31 c0                	xor    eax,eax
c000db64:	31 d2                	xor    edx,edx
c000db66:	c3                   	ret    
c000db67:	90                   	nop

c000db68 <NIC::write(int, unsigned char*, int*)>:
c000db68:	b8 01 00 00 00       	mov    eax,0x1
c000db6d:	c3                   	ret    

c000db6e <NIC::NIC(char const*)>:
c000db6e:	83 ec 0c             	sub    esp,0xc
c000db71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db75:	83 ec 08             	sub    esp,0x8
c000db78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db7c:	50                   	push   eax
c000db7d:	e8 38 ec ff ff       	call   c000c7ba <Device::Device(char const*)>
c000db82:	83 c4 10             	add    esp,0x10
c000db85:	ba cc 16 02 c0       	mov    edx,0xc00216cc
c000db8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db8e:	89 10                	mov    DWORD PTR [eax],edx
c000db90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db94:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000db9e:	90                   	nop
c000db9f:	83 c4 0c             	add    esp,0xc
c000dba2:	c3                   	ret    
c000dba3:	90                   	nop

c000dba4 <NIC::~NIC()>:
c000dba4:	83 ec 0c             	sub    esp,0xc
c000dba7:	ba cc 16 02 c0       	mov    edx,0xc00216cc
c000dbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbb0:	89 10                	mov    DWORD PTR [eax],edx
c000dbb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbb6:	83 ec 0c             	sub    esp,0xc
c000dbb9:	50                   	push   eax
c000dbba:	e8 65 e9 ff ff       	call   c000c524 <Device::~Device()>
c000dbbf:	83 c4 10             	add    esp,0x10
c000dbc2:	90                   	nop
c000dbc3:	83 c4 0c             	add    esp,0xc
c000dbc6:	c3                   	ret    
c000dbc7:	90                   	nop

c000dbc8 <NIC::~NIC()>:
c000dbc8:	83 ec 0c             	sub    esp,0xc
c000dbcb:	83 ec 0c             	sub    esp,0xc
c000dbce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbd2:	e8 cd ff ff ff       	call   c000dba4 <NIC::~NIC()>
c000dbd7:	83 c4 10             	add    esp,0x10
c000dbda:	83 ec 08             	sub    esp,0x8
c000dbdd:	68 58 01 00 00       	push   0x158
c000dbe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe6:	e8 2d cc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dbeb:	83 c4 10             	add    esp,0x10
c000dbee:	83 c4 0c             	add    esp,0xc
c000dbf1:	c3                   	ret    

c000dbf2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dbf2:	55                   	push   ebp
c000dbf3:	57                   	push   edi
c000dbf4:	56                   	push   esi
c000dbf5:	53                   	push   ebx
c000dbf6:	81 ec 28 01 00 00    	sub    esp,0x128
c000dbfc:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000dc03:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000dc0a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000dc11:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000dc18:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dc1c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dc20:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dc27:	e8 8a ec ff ff       	call   c000c8b6 <Device::getName()>
c000dc2c:	5a                   	pop    edx
c000dc2d:	59                   	pop    ecx
c000dc2e:	50                   	push   eax
c000dc2f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dc33:	55                   	push   ebp
c000dc34:	e8 07 2a ff ff       	call   c0000640 <strcpy>
c000dc39:	5b                   	pop    ebx
c000dc3a:	58                   	pop    eax
c000dc3b:	68 f8 16 02 c0       	push   0xc00216f8
c000dc40:	55                   	push   ebp
c000dc41:	e8 fa 2b ff ff       	call   c0000840 <strcat>
c000dc46:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dc4d:	e8 64 9e ff ff       	call   c0007ab6 <malloc>
c000dc52:	83 c4 0c             	add    esp,0xc
c000dc55:	89 c3                	mov    ebx,eax
c000dc57:	57                   	push   edi
c000dc58:	56                   	push   esi
c000dc59:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc61:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dc68:	55                   	push   ebp
c000dc69:	50                   	push   eax
c000dc6a:	e8 59 fb ff ff       	call   c000d7c8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dc6f:	83 c4 14             	add    esp,0x14
c000dc72:	53                   	push   ebx
c000dc73:	e8 10 fc ff ff       	call   c000d888 <LogicalDisk::assignDriveLetter()>
c000dc78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dc7b:	e8 c2 fc ff ff       	call   c000d942 <LogicalDisk::mount()>
c000dc80:	58                   	pop    eax
c000dc81:	5a                   	pop    edx
c000dc82:	53                   	push   ebx
c000dc83:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dc8a:	e8 93 e9 ff ff       	call   c000c622 <Device::addChild(Device*)>
c000dc8f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000dc95:	5b                   	pop    ebx
c000dc96:	5e                   	pop    esi
c000dc97:	5f                   	pop    edi
c000dc98:	5d                   	pop    ebp
c000dc99:	c3                   	ret    

c000dc9a <createPartitionsForDisk(PhysicalDisk*)>:
c000dc9a:	55                   	push   ebp
c000dc9b:	57                   	push   edi
c000dc9c:	56                   	push   esi
c000dc9d:	53                   	push   ebx
c000dc9e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000dca4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000dcab:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000dcb1:	3d 00 02 00 00       	cmp    eax,0x200
c000dcb6:	74 27                	je     c000dcdf <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000dcb8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000dcbe:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000dcc4:	83 ec 10             	sub    esp,0x10
c000dcc7:	0f a4 f7 0a          	shld   edi,esi,0xa
c000dccb:	99                   	cdq    
c000dccc:	c1 e6 0a             	shl    esi,0xa
c000dccf:	52                   	push   edx
c000dcd0:	89 fd                	mov    ebp,edi
c000dcd2:	50                   	push   eax
c000dcd3:	55                   	push   ebp
c000dcd4:	56                   	push   esi
c000dcd5:	e8 a6 14 01 00       	call   c001f180 <__udivdi3>
c000dcda:	e9 b9 00 00 00       	jmp    c000dd98 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000dcdf:	83 ec 0c             	sub    esp,0xc
c000dce2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dce4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000dce8:	56                   	push   esi
c000dce9:	6a 01                	push   0x1
c000dceb:	6a 00                	push   0x0
c000dced:	6a 00                	push   0x0
c000dcef:	53                   	push   ebx
c000dcf0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000dcf3:	83 c4 20             	add    esp,0x20
c000dcf6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000dcfe:	75 0a                	jne    c000dd0a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000dd00:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000dd08:	74 2c                	je     c000dd36 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000dd0a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dd10:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dd16:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dd1c:	83 ec 10             	sub    esp,0x10
c000dd1f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dd23:	89 f7                	mov    edi,esi
c000dd25:	c1 e0 0a             	shl    eax,0xa
c000dd28:	c1 ff 1f             	sar    edi,0x1f
c000dd2b:	57                   	push   edi
c000dd2c:	56                   	push   esi
c000dd2d:	52                   	push   edx
c000dd2e:	50                   	push   eax
c000dd2f:	e8 4c 14 01 00       	call   c001f180 <__udivdi3>
c000dd34:	eb 62                	jmp    c000dd98 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000dd36:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000dd3d:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000dd44:	89 cf                	mov    edi,ecx
c000dd46:	83 e2 7f             	and    edx,0x7f
c000dd49:	83 e7 7f             	and    edi,0x7f
c000dd4c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000dd53:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000dd56:	83 e0 7f             	and    eax,0x7f
c000dd59:	8d 14 01             	lea    edx,[ecx+eax*1]
c000dd5c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000dd63:	83 e0 7f             	and    eax,0x7f
c000dd66:	01 d0                	add    eax,edx
c000dd68:	89 c5                	mov    ebp,eax
c000dd6a:	84 c0                	test   al,al
c000dd6c:	74 41                	je     c000ddaf <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000dd6e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dd74:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dd7a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dd80:	83 ec 10             	sub    esp,0x10
c000dd83:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dd87:	89 f7                	mov    edi,esi
c000dd89:	c1 e0 0a             	shl    eax,0xa
c000dd8c:	c1 ff 1f             	sar    edi,0x1f
c000dd8f:	57                   	push   edi
c000dd90:	56                   	push   esi
c000dd91:	52                   	push   edx
c000dd92:	50                   	push   eax
c000dd93:	e8 e8 13 01 00       	call   c001f180 <__udivdi3>
c000dd98:	83 c4 14             	add    esp,0x14
c000dd9b:	52                   	push   edx
c000dd9c:	50                   	push   eax
c000dd9d:	6a 00                	push   0x0
c000dd9f:	6a 00                	push   0x0
c000dda1:	53                   	push   ebx
c000dda2:	e8 4b fe ff ff       	call   c000dbf2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000dda7:	83 c4 20             	add    esp,0x20
c000ddaa:	e9 73 01 00 00       	jmp    c000df22 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000ddaf:	89 f0                	mov    eax,esi
c000ddb1:	31 c9                	xor    ecx,ecx
c000ddb3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000ddba:	75 02                	jne    c000ddbe <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000ddbc:	89 cd                	mov    ebp,ecx
c000ddbe:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000ddc5:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000ddcc:	c1 e2 08             	shl    edx,0x8
c000ddcf:	c1 e6 10             	shl    esi,0x10
c000ddd2:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000ddda:	09 f2                	or     edx,esi
c000dddc:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000dde4:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000ddeb:	83 c0 10             	add    eax,0x10
c000ddee:	09 f2                	or     edx,esi
c000ddf0:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ddf7:	c1 e6 18             	shl    esi,0x18
c000ddfa:	09 f2                	or     edx,esi
c000ddfc:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000de03:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000de07:	c1 e6 10             	shl    esi,0x10
c000de0a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000de11:	c1 e2 08             	shl    edx,0x8
c000de14:	09 f2                	or     edx,esi
c000de16:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000de1d:	09 f2                	or     edx,esi
c000de1f:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000de26:	c1 e6 18             	shl    esi,0x18
c000de29:	09 f2                	or     edx,esi
c000de2b:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000de2f:	41                   	inc    ecx
c000de30:	83 f9 04             	cmp    ecx,0x4
c000de33:	0f 85 7a ff ff ff    	jne    c000ddb3 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000de39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de3d:	83 f0 01             	xor    eax,0x1
c000de40:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000de44:	75 4f                	jne    c000de95 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000de46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de4a:	83 f0 01             	xor    eax,0x1
c000de4d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000de51:	75 42                	jne    c000de95 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000de53:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000de5b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000de63:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de69:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de6f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de75:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de79:	89 f7                	mov    edi,esi
c000de7b:	c1 e0 0a             	shl    eax,0xa
c000de7e:	c1 ff 1f             	sar    edi,0x1f
c000de81:	57                   	push   edi
c000de82:	56                   	push   esi
c000de83:	52                   	push   edx
c000de84:	50                   	push   eax
c000de85:	e8 f6 12 01 00       	call   c001f180 <__udivdi3>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de91:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000de95:	89 e8                	mov    eax,ebp
c000de97:	0f b6 e8             	movzx  ebp,al
c000de9a:	85 ed                	test   ebp,ebp
c000de9c:	74 50                	je     c000deee <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000de9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dea2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000dea6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000deaa:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000deae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000deb2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000deb6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000deba:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000debe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dec2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dec6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000deca:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000dece:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000ded2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000ded6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000deda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dede:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000dee2:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000dee6:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000deea:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000deee:	31 ed                	xor    ebp,ebp
c000def0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000def4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000def8:	89 f8                	mov    eax,edi
c000defa:	09 f0                	or     eax,esi
c000defc:	74 1e                	je     c000df1c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000defe:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000df02:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000df06:	89 d1                	mov    ecx,edx
c000df08:	09 c1                	or     ecx,eax
c000df0a:	74 10                	je     c000df1c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000df0c:	83 ec 0c             	sub    esp,0xc
c000df0f:	57                   	push   edi
c000df10:	56                   	push   esi
c000df11:	52                   	push   edx
c000df12:	50                   	push   eax
c000df13:	53                   	push   ebx
c000df14:	e8 d9 fc ff ff       	call   c000dbf2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000df19:	83 c4 20             	add    esp,0x20
c000df1c:	45                   	inc    ebp
c000df1d:	83 fd 04             	cmp    ebp,0x4
c000df20:	75 ce                	jne    c000def0 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000df22:	81 c4 5c 02 00 00    	add    esp,0x25c
c000df28:	5b                   	pop    ebx
c000df29:	5e                   	pop    esi
c000df2a:	5f                   	pop    edi
c000df2b:	5d                   	pop    ebp
c000df2c:	c3                   	ret    
c000df2d:	66 90                	xchg   ax,ax
c000df2f:	90                   	nop

c000df30 <Serial::Serial(char const*)>:
c000df30:	83 ec 0c             	sub    esp,0xc
c000df33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df37:	83 ec 08             	sub    esp,0x8
c000df3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df3e:	50                   	push   eax
c000df3f:	e8 76 e8 ff ff       	call   c000c7ba <Device::Device(char const*)>
c000df44:	83 c4 10             	add    esp,0x10
c000df47:	ba 0c 17 02 c0       	mov    edx,0xc002170c
c000df4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df50:	89 10                	mov    DWORD PTR [eax],edx
c000df52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df56:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000df60:	90                   	nop
c000df61:	83 c4 0c             	add    esp,0xc
c000df64:	c3                   	ret    
c000df65:	90                   	nop
c000df66:	66 90                	xchg   ax,ax

c000df68 <Serial::~Serial()>:
c000df68:	83 ec 0c             	sub    esp,0xc
c000df6b:	ba 0c 17 02 c0       	mov    edx,0xc002170c
c000df70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df74:	89 10                	mov    DWORD PTR [eax],edx
c000df76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df7a:	83 ec 0c             	sub    esp,0xc
c000df7d:	50                   	push   eax
c000df7e:	e8 a1 e5 ff ff       	call   c000c524 <Device::~Device()>
c000df83:	83 c4 10             	add    esp,0x10
c000df86:	90                   	nop
c000df87:	83 c4 0c             	add    esp,0xc
c000df8a:	c3                   	ret    
c000df8b:	90                   	nop

c000df8c <Serial::~Serial()>:
c000df8c:	83 ec 0c             	sub    esp,0xc
c000df8f:	83 ec 0c             	sub    esp,0xc
c000df92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df96:	e8 cd ff ff ff       	call   c000df68 <Serial::~Serial()>
c000df9b:	83 c4 10             	add    esp,0x10
c000df9e:	83 ec 08             	sub    esp,0x8
c000dfa1:	68 58 01 00 00       	push   0x158
c000dfa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfaa:	e8 69 c8 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dfaf:	83 c4 10             	add    esp,0x10
c000dfb2:	83 c4 0c             	add    esp,0xc
c000dfb5:	c3                   	ret    
c000dfb6:	66 90                	xchg   ax,ax

c000dfb8 <Timer::Timer(char const*)>:
c000dfb8:	83 ec 0c             	sub    esp,0xc
c000dfbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfbf:	83 ec 08             	sub    esp,0x8
c000dfc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfc6:	50                   	push   eax
c000dfc7:	e8 ee e7 ff ff       	call   c000c7ba <Device::Device(char const*)>
c000dfcc:	83 c4 10             	add    esp,0x10
c000dfcf:	ba 50 17 02 c0       	mov    edx,0xc0021750
c000dfd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfd8:	89 10                	mov    DWORD PTR [eax],edx
c000dfda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfde:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000dfe8:	90                   	nop
c000dfe9:	83 c4 0c             	add    esp,0xc
c000dfec:	c3                   	ret    
c000dfed:	90                   	nop
c000dfee:	66 90                	xchg   ax,ax

c000dff0 <Timer::~Timer()>:
c000dff0:	83 ec 0c             	sub    esp,0xc
c000dff3:	ba 50 17 02 c0       	mov    edx,0xc0021750
c000dff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dffc:	89 10                	mov    DWORD PTR [eax],edx
c000dffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e002:	83 ec 0c             	sub    esp,0xc
c000e005:	50                   	push   eax
c000e006:	e8 19 e5 ff ff       	call   c000c524 <Device::~Device()>
c000e00b:	83 c4 10             	add    esp,0x10
c000e00e:	90                   	nop
c000e00f:	83 c4 0c             	add    esp,0xc
c000e012:	c3                   	ret    
c000e013:	90                   	nop

c000e014 <Timer::~Timer()>:
c000e014:	83 ec 0c             	sub    esp,0xc
c000e017:	83 ec 0c             	sub    esp,0xc
c000e01a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e01e:	e8 cd ff ff ff       	call   c000dff0 <Timer::~Timer()>
c000e023:	83 c4 10             	add    esp,0x10
c000e026:	83 ec 08             	sub    esp,0x8
c000e029:	68 5c 01 00 00       	push   0x15c
c000e02e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e032:	e8 e1 c7 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e037:	83 c4 10             	add    esp,0x10
c000e03a:	83 c4 0c             	add    esp,0xc
c000e03d:	c3                   	ret    

c000e03e <Timer::read()>:
c000e03e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e042:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e048:	c3                   	ret    

c000e049 <setupTimer(int)>:
c000e049:	53                   	push   ebx
c000e04a:	83 ec 14             	sub    esp,0x14
c000e04d:	68 5c 01 00 00       	push   0x15c
c000e052:	e8 5f 9a ff ff       	call   c0007ab6 <malloc>
c000e057:	89 04 24             	mov    DWORD PTR [esp],eax
c000e05a:	89 c3                	mov    ebx,eax
c000e05c:	e8 8b 09 01 00       	call   c001e9ec <PIT::PIT()>
c000e061:	58                   	pop    eax
c000e062:	5a                   	pop    edx
c000e063:	53                   	push   ebx
c000e064:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000e06a:	e8 b3 e5 ff ff       	call   c000c622 <Device::addChild(Device*)>
c000e06f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e071:	6a 00                	push   0x0
c000e073:	6a 00                	push   0x0
c000e075:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e079:	53                   	push   ebx
c000e07a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e07d:	89 d8                	mov    eax,ebx
c000e07f:	83 c4 28             	add    esp,0x28
c000e082:	5b                   	pop    ebx
c000e083:	c3                   	ret    

c000e084 <timerHandler(unsigned int)>:
c000e084:	56                   	push   esi
c000e085:	53                   	push   ebx
c000e086:	51                   	push   ecx
c000e087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e08b:	01 05 ec 88 02 c0    	add    DWORD PTR ds:0xc00288ec,eax
c000e091:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000e098:	0f 84 4a 01 00 00    	je     c000e1e8 <timerHandler(unsigned int)+0x164>
c000e09e:	fa                   	cli    
c000e09f:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e0a5:	83 ec 0c             	sub    esp,0xc
c000e0a8:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c000e0ae:	68 d8 96 02 c0       	push   0xc00296d8
c000e0b3:	e8 98 16 01 00       	call   c001f750 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e0b8:	83 c4 10             	add    esp,0x10
c000e0bb:	84 c0                	test   al,al
c000e0bd:	0f 85 a1 00 00 00    	jne    c000e164 <timerHandler(unsigned int)+0xe0>
c000e0c3:	83 ec 0c             	sub    esp,0xc
c000e0c6:	68 d8 96 02 c0       	push   0xc00296d8
c000e0cb:	e8 9c 16 01 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e0d0:	83 c4 10             	add    esp,0x10
c000e0d3:	89 c6                	mov    esi,eax
c000e0d5:	8d 76 00             	lea    esi,[esi+0x0]
c000e0d8:	83 ec 0c             	sub    esp,0xc
c000e0db:	68 d8 96 02 c0       	push   0xc00296d8
c000e0e0:	e8 87 16 01 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e0e5:	c7 04 24 d8 96 02 c0 	mov    DWORD PTR [esp],0xc00296d8
c000e0ec:	89 c3                	mov    ebx,eax
c000e0ee:	e8 81 16 01 00       	call   c001f774 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e0f3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e0f6:	83 c4 10             	add    esp,0x10
c000e0f9:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c000e0ff:	77 23                	ja     c000e124 <timerHandler(unsigned int)+0xa0>
c000e101:	83 ec 0c             	sub    esp,0xc
c000e104:	53                   	push   ebx
c000e105:	e8 1e 7f 00 00       	call   c0016028 <unblockTask(ThreadControlBlock*)>
c000e10a:	83 c4 10             	add    esp,0x10
c000e10d:	39 de                	cmp    esi,ebx
c000e10f:	75 27                	jne    c000e138 <timerHandler(unsigned int)+0xb4>
c000e111:	83 ec 0c             	sub    esp,0xc
c000e114:	68 d8 96 02 c0       	push   0xc00296d8
c000e119:	e8 4e 16 01 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e11e:	89 c6                	mov    esi,eax
c000e120:	eb 12                	jmp    c000e134 <timerHandler(unsigned int)+0xb0>
c000e122:	66 90                	xchg   ax,ax
c000e124:	52                   	push   edx
c000e125:	52                   	push   edx
c000e126:	53                   	push   ebx
c000e127:	68 d8 96 02 c0       	push   0xc00296d8
c000e12c:	e8 ff 16 01 00       	call   c001f830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e131:	8d 76 00             	lea    esi,[esi+0x0]
c000e134:	83 c4 10             	add    esp,0x10
c000e137:	90                   	nop
c000e138:	83 ec 0c             	sub    esp,0xc
c000e13b:	68 d8 96 02 c0       	push   0xc00296d8
c000e140:	e8 0b 16 01 00       	call   c001f750 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e145:	83 c4 10             	add    esp,0x10
c000e148:	84 c0                	test   al,al
c000e14a:	75 18                	jne    c000e164 <timerHandler(unsigned int)+0xe0>
c000e14c:	83 ec 0c             	sub    esp,0xc
c000e14f:	68 d8 96 02 c0       	push   0xc00296d8
c000e154:	e8 13 16 01 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e159:	83 c4 10             	add    esp,0x10
c000e15c:	39 f0                	cmp    eax,esi
c000e15e:	0f 85 74 ff ff ff    	jne    c000e0d8 <timerHandler(unsigned int)+0x54>
c000e164:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e169:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e16d:	74 41                	je     c000e1b0 <timerHandler(unsigned int)+0x12c>
c000e16f:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000e176:	74 38                	je     c000e1b0 <timerHandler(unsigned int)+0x12c>
c000e178:	fa                   	cli    
c000e179:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e17f:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c000e184:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e18a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e18d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e193:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e196:	72 08                	jb     c000e1a0 <timerHandler(unsigned int)+0x11c>
c000e198:	e8 73 79 00 00       	call   c0015b10 <schedule()>
c000e19d:	8d 76 00             	lea    esi,[esi+0x0]
c000e1a0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e1a5:	48                   	dec    eax
c000e1a6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e1ab:	75 03                	jne    c000e1b0 <timerHandler(unsigned int)+0x12c>
c000e1ad:	fb                   	sti    
c000e1ae:	66 90                	xchg   ax,ax
c000e1b0:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000e1b5:	48                   	dec    eax
c000e1b6:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000e1bb:	75 1b                	jne    c000e1d8 <timerHandler(unsigned int)+0x154>
c000e1bd:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c000e1c4:	74 12                	je     c000e1d8 <timerHandler(unsigned int)+0x154>
c000e1c6:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000e1d0:	e8 3b 79 00 00       	call   c0015b10 <schedule()>
c000e1d5:	8d 76 00             	lea    esi,[esi+0x0]
c000e1d8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e1dd:	48                   	dec    eax
c000e1de:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e1e3:	75 03                	jne    c000e1e8 <timerHandler(unsigned int)+0x164>
c000e1e5:	fb                   	sti    
c000e1e6:	66 90                	xchg   ax,ax
c000e1e8:	58                   	pop    eax
c000e1e9:	5b                   	pop    ebx
c000e1ea:	5e                   	pop    esi
c000e1eb:	c3                   	ret    

c000e1ec <VCache::VCache(PhysicalDisk*)>:
c000e1ec:	53                   	push   ebx
c000e1ed:	83 ec 18             	sub    esp,0x18
c000e1f0:	ba 80 17 02 c0       	mov    edx,0xc0021780
c000e1f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1f9:	89 10                	mov    DWORD PTR [eax],edx
c000e1fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1ff:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e206:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e20a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e211:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e215:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e21c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e223:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e227:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e22e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e235:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e239:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e240:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e244:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e248:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e24c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e253:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e25a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e25e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e262:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e266:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e26a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e26e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e272:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e276:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e27d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e285:	83 ec 0c             	sub    esp,0xc
c000e288:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e28c:	e8 25 98 ff ff       	call   c0007ab6 <malloc>
c000e291:	83 c4 10             	add    esp,0x10
c000e294:	89 c3                	mov    ebx,eax
c000e296:	83 ec 0c             	sub    esp,0xc
c000e299:	53                   	push   ebx
c000e29a:	e8 0d 76 00 00       	call   c00158ac <Mutex::Mutex()>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2a6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e2a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2ad:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e2b1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e2b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2b8:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e2bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2c3:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e2c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2cd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e2d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2d4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e2da:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e2e0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e2e4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e2e7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e2ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2ee:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e2f2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2f6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e2fc:	05 00 02 00 00       	add    eax,0x200
c000e301:	c1 e0 03             	shl    eax,0x3
c000e304:	83 ec 0c             	sub    esp,0xc
c000e307:	50                   	push   eax
c000e308:	e8 a9 97 ff ff       	call   c0007ab6 <malloc>
c000e30d:	83 c4 10             	add    esp,0x10
c000e310:	89 c2                	mov    edx,eax
c000e312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e316:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e319:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e31d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e324:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e328:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e32c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e330:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e336:	89 d0                	mov    eax,edx
c000e338:	c1 e0 02             	shl    eax,0x2
c000e33b:	01 d0                	add    eax,edx
c000e33d:	c1 e0 04             	shl    eax,0x4
c000e340:	83 ec 0c             	sub    esp,0xc
c000e343:	50                   	push   eax
c000e344:	e8 6d 97 ff ff       	call   c0007ab6 <malloc>
c000e349:	83 c4 10             	add    esp,0x10
c000e34c:	89 c2                	mov    edx,eax
c000e34e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e352:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e355:	90                   	nop
c000e356:	83 c4 18             	add    esp,0x18
c000e359:	5b                   	pop    ebx
c000e35a:	c3                   	ret    
c000e35b:	90                   	nop

c000e35c <VCache::invalidateReadBuffer()>:
c000e35c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e360:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e366:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e36a:	c3                   	ret    
c000e36b:	90                   	nop

c000e36c <VCache::writeWriteBuffer()>:
c000e36c:	53                   	push   ebx
c000e36d:	83 ec 08             	sub    esp,0x8
c000e370:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e374:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e378:	74 1e                	je     c000e398 <VCache::writeWriteBuffer()+0x2c>
c000e37a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e37d:	83 ec 0c             	sub    esp,0xc
c000e380:	8b 10                	mov    edx,DWORD PTR [eax]
c000e382:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e385:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e388:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e38b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e38e:	50                   	push   eax
c000e38f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e392:	83 c4 20             	add    esp,0x20
c000e395:	8d 76 00             	lea    esi,[esi+0x0]
c000e398:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e39f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e3a6:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e3aa:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e3b1:	83 c4 08             	add    esp,0x8
c000e3b4:	5b                   	pop    ebx
c000e3b5:	c3                   	ret    
c000e3b6:	66 90                	xchg   ax,ax

c000e3b8 <VCache::~VCache()>:
c000e3b8:	83 ec 0c             	sub    esp,0xc
c000e3bb:	ba 80 17 02 c0       	mov    edx,0xc0021780
c000e3c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c4:	89 10                	mov    DWORD PTR [eax],edx
c000e3c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ca:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e3cd:	0f b6 c0             	movzx  eax,al
c000e3d0:	85 c0                	test   eax,eax
c000e3d2:	74 10                	je     c000e3e4 <VCache::~VCache()+0x2c>
c000e3d4:	83 ec 0c             	sub    esp,0xc
c000e3d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3db:	e8 8c ff ff ff       	call   c000e36c <VCache::writeWriteBuffer()>
c000e3e0:	83 c4 10             	add    esp,0x10
c000e3e3:	90                   	nop
c000e3e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3e8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e3eb:	83 ec 0c             	sub    esp,0xc
c000e3ee:	50                   	push   eax
c000e3ef:	e8 d2 96 ff ff       	call   c0007ac6 <free>
c000e3f4:	83 c4 10             	add    esp,0x10
c000e3f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3fb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e3fe:	83 ec 0c             	sub    esp,0xc
c000e401:	50                   	push   eax
c000e402:	e8 bf 96 ff ff       	call   c0007ac6 <free>
c000e407:	83 c4 10             	add    esp,0x10
c000e40a:	90                   	nop
c000e40b:	83 c4 0c             	add    esp,0xc
c000e40e:	c3                   	ret    
c000e40f:	90                   	nop

c000e410 <VCache::~VCache()>:
c000e410:	83 ec 0c             	sub    esp,0xc
c000e413:	83 ec 0c             	sub    esp,0xc
c000e416:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e41a:	e8 99 ff ff ff       	call   c000e3b8 <VCache::~VCache()>
c000e41f:	83 c4 10             	add    esp,0x10
c000e422:	83 ec 08             	sub    esp,0x8
c000e425:	6a 44                	push   0x44
c000e427:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e42b:	e8 e8 c3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e430:	83 c4 10             	add    esp,0x10
c000e433:	83 c4 0c             	add    esp,0xc
c000e436:	c3                   	ret    
c000e437:	90                   	nop

c000e438 <VCache::write(unsigned long long, int, void*)>:
c000e438:	55                   	push   ebp
c000e439:	57                   	push   edi
c000e43a:	56                   	push   esi
c000e43b:	53                   	push   ebx
c000e43c:	83 ec 1c             	sub    esp,0x1c
c000e43f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e443:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e447:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e44b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e44f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e453:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e457:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e45b:	74 07                	je     c000e464 <VCache::write(unsigned long long, int, void*)+0x2c>
c000e45d:	53                   	push   ebx
c000e45e:	e8 f9 fe ff ff       	call   c000e35c <VCache::invalidateReadBuffer()>
c000e463:	58                   	pop    eax
c000e464:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e468:	74 62                	je     c000e4cc <VCache::write(unsigned long long, int, void*)+0x94>
c000e46a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e46d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e471:	99                   	cdq    
c000e472:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e476:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e479:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e47c:	31 c1                	xor    ecx,eax
c000e47e:	89 d0                	mov    eax,edx
c000e480:	89 ca                	mov    edx,ecx
c000e482:	31 e8                	xor    eax,ebp
c000e484:	09 c2                	or     edx,eax
c000e486:	75 38                	jne    c000e4c0 <VCache::write(unsigned long long, int, void*)+0x88>
c000e488:	83 ff 01             	cmp    edi,0x1
c000e48b:	75 33                	jne    c000e4c0 <VCache::write(unsigned long long, int, void*)+0x88>
c000e48d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e490:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e494:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e49a:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e49d:	0f af c8             	imul   ecx,eax
c000e4a0:	01 cf                	add    edi,ecx
c000e4a2:	89 c1                	mov    ecx,eax
c000e4a4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4a6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e4a9:	40                   	inc    eax
c000e4aa:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e4ad:	83 f8 50             	cmp    eax,0x50
c000e4b0:	75 6a                	jne    c000e51c <VCache::write(unsigned long long, int, void*)+0xe4>
c000e4b2:	83 ec 0c             	sub    esp,0xc
c000e4b5:	53                   	push   ebx
c000e4b6:	e8 b1 fe ff ff       	call   c000e36c <VCache::writeWriteBuffer()>
c000e4bb:	83 c4 10             	add    esp,0x10
c000e4be:	eb 5c                	jmp    c000e51c <VCache::write(unsigned long long, int, void*)+0xe4>
c000e4c0:	83 ec 0c             	sub    esp,0xc
c000e4c3:	53                   	push   ebx
c000e4c4:	e8 a3 fe ff ff       	call   c000e36c <VCache::writeWriteBuffer()>
c000e4c9:	83 c4 10             	add    esp,0x10
c000e4cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e4cf:	83 ff 4f             	cmp    edi,0x4f
c000e4d2:	7f 20                	jg     c000e4f4 <VCache::write(unsigned long long, int, void*)+0xbc>
c000e4d4:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e4d7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e4db:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e4de:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e4e1:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e4e5:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e4e8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e4ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4f0:	eb 2a                	jmp    c000e51c <VCache::write(unsigned long long, int, void*)+0xe4>
c000e4f2:	66 90                	xchg   ax,ax
c000e4f4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4f6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e4fa:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e4fe:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e502:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e506:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e50a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e50e:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e511:	83 c4 1c             	add    esp,0x1c
c000e514:	5b                   	pop    ebx
c000e515:	5e                   	pop    esi
c000e516:	5f                   	pop    edi
c000e517:	5d                   	pop    ebp
c000e518:	ff e0                	jmp    eax
c000e51a:	66 90                	xchg   ax,ax
c000e51c:	83 c4 1c             	add    esp,0x1c
c000e51f:	31 c0                	xor    eax,eax
c000e521:	5b                   	pop    ebx
c000e522:	5e                   	pop    esi
c000e523:	5f                   	pop    edi
c000e524:	5d                   	pop    ebp
c000e525:	c3                   	ret    

c000e526 <VCache::read(unsigned long long, int, void*)>:
c000e526:	55                   	push   ebp
c000e527:	57                   	push   edi
c000e528:	56                   	push   esi
c000e529:	53                   	push   ebx
c000e52a:	83 ec 1c             	sub    esp,0x1c
c000e52d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e531:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e535:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e539:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e53d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e541:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e545:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e549:	74 0d                	je     c000e558 <VCache::read(unsigned long long, int, void*)+0x32>
c000e54b:	83 ec 0c             	sub    esp,0xc
c000e54e:	57                   	push   edi
c000e54f:	e8 18 fe ff ff       	call   c000e36c <VCache::writeWriteBuffer()>
c000e554:	83 c4 10             	add    esp,0x10
c000e557:	90                   	nop
c000e558:	83 fd 01             	cmp    ebp,0x1
c000e55b:	0f 85 93 00 00 00    	jne    c000e5f4 <VCache::read(unsigned long long, int, void*)+0xce>
c000e561:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e564:	89 04 24             	mov    DWORD PTR [esp],eax
c000e567:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e56e:	0f 85 80 00 00 00    	jne    c000e5f4 <VCache::read(unsigned long long, int, void*)+0xce>
c000e574:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e577:	89 e9                	mov    ecx,ebp
c000e579:	f7 d9                	neg    ecx
c000e57b:	89 c8                	mov    eax,ecx
c000e57d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e581:	c1 f8 1f             	sar    eax,0x1f
c000e584:	21 d9                	and    ecx,ebx
c000e586:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e58a:	89 c8                	mov    eax,ecx
c000e58c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e590:	21 f1                	and    ecx,esi
c000e592:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e596:	89 ca                	mov    edx,ecx
c000e598:	74 2e                	je     c000e5c8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e59a:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e59d:	75 29                	jne    c000e5c8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e59f:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e5a2:	75 24                	jne    c000e5c8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e5a4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e5a7:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e5ad:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e5b0:	8d 70 ff             	lea    esi,[eax-0x1]
c000e5b3:	21 f3                	and    ebx,esi
c000e5b5:	0f af d9             	imul   ebx,ecx
c000e5b8:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e5bb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e5bf:	89 de                	mov    esi,ebx
c000e5c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5c3:	31 c0                	xor    eax,eax
c000e5c5:	eb 61                	jmp    c000e628 <VCache::read(unsigned long long, int, void*)+0x102>
c000e5c7:	90                   	nop
c000e5c8:	83 ec 0c             	sub    esp,0xc
c000e5cb:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e5cf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e5d3:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e5d6:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e5d9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e5db:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e5de:	55                   	push   ebp
c000e5df:	52                   	push   edx
c000e5e0:	50                   	push   eax
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e5e8:	83 c4 20             	add    esp,0x20
c000e5eb:	85 c0                	test   eax,eax
c000e5ed:	75 39                	jne    c000e628 <VCache::read(unsigned long long, int, void*)+0x102>
c000e5ef:	eb b3                	jmp    c000e5a4 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e5f1:	8d 76 00             	lea    esi,[esi+0x0]
c000e5f4:	83 ec 0c             	sub    esp,0xc
c000e5f7:	57                   	push   edi
c000e5f8:	e8 5f fd ff ff       	call   c000e35c <VCache::invalidateReadBuffer()>
c000e5fd:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e600:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e604:	8b 10                	mov    edx,DWORD PTR [eax]
c000e606:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e60a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e60e:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e612:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e616:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e61a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e61d:	83 c4 2c             	add    esp,0x2c
c000e620:	5b                   	pop    ebx
c000e621:	5e                   	pop    esi
c000e622:	5f                   	pop    edi
c000e623:	5d                   	pop    ebp
c000e624:	ff e0                	jmp    eax
c000e626:	66 90                	xchg   ax,ax
c000e628:	83 c4 1c             	add    esp,0x1c
c000e62b:	5b                   	pop    ebx
c000e62c:	5e                   	pop    esi
c000e62d:	5f                   	pop    edi
c000e62e:	5d                   	pop    ebp
c000e62f:	c3                   	ret    

c000e630 <Video::putrect(int, int, int, int, unsigned int)>:
c000e630:	55                   	push   ebp
c000e631:	57                   	push   edi
c000e632:	56                   	push   esi
c000e633:	53                   	push   ebx
c000e634:	83 ec 1c             	sub    esp,0x1c
c000e637:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e63b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e63f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e643:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e647:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e64b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e64f:	01 df                	add    edi,ebx
c000e651:	39 fb                	cmp    ebx,edi
c000e653:	7d 1f                	jge    c000e674 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e655:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e659:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e65d:	7d 12                	jge    c000e671 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e65f:	8b 16                	mov    edx,DWORD PTR [esi]
c000e661:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e665:	53                   	push   ebx
c000e666:	55                   	push   ebp
c000e667:	45                   	inc    ebp
c000e668:	56                   	push   esi
c000e669:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e66c:	83 c4 10             	add    esp,0x10
c000e66f:	eb e8                	jmp    c000e659 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e671:	43                   	inc    ebx
c000e672:	eb dd                	jmp    c000e651 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e674:	83 c4 1c             	add    esp,0x1c
c000e677:	5b                   	pop    ebx
c000e678:	5e                   	pop    esi
c000e679:	5f                   	pop    edi
c000e67a:	5d                   	pop    ebp
c000e67b:	c3                   	ret    

c000e67c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e67c:	55                   	push   ebp
c000e67d:	57                   	push   edi
c000e67e:	31 ff                	xor    edi,edi
c000e680:	56                   	push   esi
c000e681:	53                   	push   ebx
c000e682:	83 ec 1c             	sub    esp,0x1c
c000e685:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e689:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e68d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e694:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e699:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e69d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e6a1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e6a5:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e6a8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e6ac:	01 f9                	add    ecx,edi
c000e6ae:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e6b2:	7d 2f                	jge    c000e6e3 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e6b4:	31 f6                	xor    esi,esi
c000e6b6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e6ba:	01 f2                	add    edx,esi
c000e6bc:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e6c0:	7d 1a                	jge    c000e6dc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e6c2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e6c5:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e6c8:	46                   	inc    esi
c000e6c9:	51                   	push   ecx
c000e6ca:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e6ce:	52                   	push   edx
c000e6cf:	55                   	push   ebp
c000e6d0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e6d3:	83 c4 10             	add    esp,0x10
c000e6d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e6da:	eb da                	jmp    c000e6b6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e6dc:	47                   	inc    edi
c000e6dd:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e6e1:	eb c5                	jmp    c000e6a8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e6e3:	83 c4 1c             	add    esp,0x1c
c000e6e6:	5b                   	pop    ebx
c000e6e7:	5e                   	pop    esi
c000e6e8:	5f                   	pop    edi
c000e6e9:	5d                   	pop    ebp
c000e6ea:	c3                   	ret    
c000e6eb:	90                   	nop

c000e6ec <Video::blit(unsigned int*, int, int, int, int)>:
c000e6ec:	55                   	push   ebp
c000e6ed:	57                   	push   edi
c000e6ee:	56                   	push   esi
c000e6ef:	53                   	push   ebx
c000e6f0:	83 ec 1c             	sub    esp,0x1c
c000e6f3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e6f7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e6fb:	85 c0                	test   eax,eax
c000e6fd:	79 02                	jns    c000e701 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000e6ff:	31 c0                	xor    eax,eax
c000e701:	c1 e0 02             	shl    eax,0x2
c000e704:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000e708:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e70c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e710:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000e714:	39 d8                	cmp    eax,ebx
c000e716:	7e 49                	jle    c000e761 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e718:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e71e:	7c 41                	jl     c000e761 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e720:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e724:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e728:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e72c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000e730:	39 f9                	cmp    ecx,edi
c000e732:	7e 22                	jle    c000e756 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000e734:	83 c5 04             	add    ebp,0x4
c000e737:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e73d:	7c 14                	jl     c000e753 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000e73f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e741:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000e744:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e748:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e74c:	56                   	push   esi
c000e74d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e750:	83 c4 10             	add    esp,0x10
c000e753:	47                   	inc    edi
c000e754:	eb d2                	jmp    c000e728 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000e756:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e75a:	43                   	inc    ebx
c000e75b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e75f:	eb ab                	jmp    c000e70c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000e761:	83 c4 1c             	add    esp,0x1c
c000e764:	5b                   	pop    ebx
c000e765:	5e                   	pop    esi
c000e766:	5f                   	pop    edi
c000e767:	5d                   	pop    ebp
c000e768:	c3                   	ret    
c000e769:	90                   	nop

c000e76a <Video::clearScreen(unsigned int)>:
c000e76a:	57                   	push   edi
c000e76b:	56                   	push   esi
c000e76c:	53                   	push   ebx
c000e76d:	31 db                	xor    ebx,ebx
c000e76f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e773:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e779:	7e 1f                	jle    c000e79a <Video::clearScreen(unsigned int)+0x30>
c000e77b:	31 ff                	xor    edi,edi
c000e77d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e783:	7e 12                	jle    c000e797 <Video::clearScreen(unsigned int)+0x2d>
c000e785:	8b 06                	mov    eax,DWORD PTR [esi]
c000e787:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e78b:	53                   	push   ebx
c000e78c:	57                   	push   edi
c000e78d:	47                   	inc    edi
c000e78e:	56                   	push   esi
c000e78f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e792:	83 c4 10             	add    esp,0x10
c000e795:	eb e6                	jmp    c000e77d <Video::clearScreen(unsigned int)+0x13>
c000e797:	43                   	inc    ebx
c000e798:	eb d9                	jmp    c000e773 <Video::clearScreen(unsigned int)+0x9>
c000e79a:	5b                   	pop    ebx
c000e79b:	5e                   	pop    esi
c000e79c:	5f                   	pop    edi
c000e79d:	c3                   	ret    

c000e79e <Video::putpixel(int, int, unsigned int)>:
c000e79e:	c7 44 24 04 88 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021788
c000e7a6:	e9 a6 2a 00 00       	jmp    c0011251 <KePanic(char const*)>
c000e7ab:	90                   	nop

c000e7ac <Video::readPixelApprox(int, int)>:
c000e7ac:	83 ec 18             	sub    esp,0x18
c000e7af:	68 a9 17 02 c0       	push   0xc00217a9
c000e7b4:	e8 98 2a 00 00       	call   c0011251 <KePanic(char const*)>
c000e7b9:	31 c0                	xor    eax,eax
c000e7bb:	83 c4 1c             	add    esp,0x1c
c000e7be:	c3                   	ret    
c000e7bf:	90                   	nop

c000e7c0 <Video::Video(char const*)>:
c000e7c0:	83 ec 0c             	sub    esp,0xc
c000e7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c7:	83 ec 08             	sub    esp,0x8
c000e7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ce:	50                   	push   eax
c000e7cf:	e8 e6 df ff ff       	call   c000c7ba <Device::Device(char const*)>
c000e7d4:	83 c4 10             	add    esp,0x10
c000e7d7:	ba 24 18 02 c0       	mov    edx,0xc0021824
c000e7dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e0:	89 10                	mov    DWORD PTR [eax],edx
c000e7e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e6:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e7f0:	90                   	nop
c000e7f1:	83 c4 0c             	add    esp,0xc
c000e7f4:	c3                   	ret    
c000e7f5:	90                   	nop

c000e7f6 <Video::~Video()>:
c000e7f6:	83 ec 0c             	sub    esp,0xc
c000e7f9:	ba 24 18 02 c0       	mov    edx,0xc0021824
c000e7fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e802:	89 10                	mov    DWORD PTR [eax],edx
c000e804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e808:	83 ec 0c             	sub    esp,0xc
c000e80b:	50                   	push   eax
c000e80c:	e8 13 dd ff ff       	call   c000c524 <Device::~Device()>
c000e811:	83 c4 10             	add    esp,0x10
c000e814:	90                   	nop
c000e815:	83 c4 0c             	add    esp,0xc
c000e818:	c3                   	ret    
c000e819:	90                   	nop

c000e81a <Video::~Video()>:
c000e81a:	83 ec 0c             	sub    esp,0xc
c000e81d:	83 ec 0c             	sub    esp,0xc
c000e820:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e824:	e8 cd ff ff ff       	call   c000e7f6 <Video::~Video()>
c000e829:	83 c4 10             	add    esp,0x10
c000e82c:	83 ec 08             	sub    esp,0x8
c000e82f:	68 64 01 00 00       	push   0x164
c000e834:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e838:	e8 db bf ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e83d:	83 c4 10             	add    esp,0x10
c000e840:	83 c4 0c             	add    esp,0xc
c000e843:	c3                   	ret    

c000e844 <Video::isMonochrome()>:
c000e844:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e848:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e84e:	c3                   	ret    
c000e84f:	90                   	nop

c000e850 <Video::getWidth()>:
c000e850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e854:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e85a:	c3                   	ret    
c000e85b:	90                   	nop

c000e85c <Video::getHeight()>:
c000e85c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e860:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e866:	c3                   	ret    
c000e867:	90                   	nop

c000e868 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e868:	55                   	push   ebp
c000e869:	57                   	push   edi
c000e86a:	56                   	push   esi
c000e86b:	53                   	push   ebx
c000e86c:	83 ec 2c             	sub    esp,0x2c
c000e86f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e873:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e877:	83 f8 01             	cmp    eax,0x1
c000e87a:	19 c9                	sbb    ecx,ecx
c000e87c:	31 db                	xor    ebx,ebx
c000e87e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e882:	89 cd                	mov    ebp,ecx
c000e884:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e88c:	f7 d5                	not    ebp
c000e88e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e894:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e898:	01 d8                	add    eax,ebx
c000e89a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e89e:	56                   	push   esi
c000e89f:	e8 b8 ff ff ff       	call   c000e85c <Video::getHeight()>
c000e8a4:	59                   	pop    ecx
c000e8a5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e8a9:	7e 70                	jle    c000e91b <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e8ab:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e8af:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e8b3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e8b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e8ba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e8be:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e8c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8c9:	89 f8                	mov    eax,edi
c000e8cb:	83 c0 20             	add    eax,0x20
c000e8ce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e8d2:	56                   	push   esi
c000e8d3:	e8 78 ff ff ff       	call   c000e850 <Video::getWidth()>
c000e8d8:	5a                   	pop    edx
c000e8d9:	39 c7                	cmp    edi,eax
c000e8db:	7d 34                	jge    c000e911 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e8dd:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e8e2:	74 05                	je     c000e8e9 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e8e4:	8b 06                	mov    eax,DWORD PTR [esi]
c000e8e6:	55                   	push   ebp
c000e8e7:	eb 0d                	jmp    c000e8f6 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e8e9:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e8ee:	74 12                	je     c000e902 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e8f0:	8b 06                	mov    eax,DWORD PTR [esi]
c000e8f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e8f6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e8fa:	57                   	push   edi
c000e8fb:	56                   	push   esi
c000e8fc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e8ff:	83 c4 10             	add    esp,0x10
c000e902:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e906:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e90a:	47                   	inc    edi
c000e90b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000e90f:	75 c1                	jne    c000e8d2 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e911:	43                   	inc    ebx
c000e912:	83 fb 20             	cmp    ebx,0x20
c000e915:	0f 85 79 ff ff ff    	jne    c000e894 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e91b:	83 c4 2c             	add    esp,0x2c
c000e91e:	5b                   	pop    ebx
c000e91f:	5e                   	pop    esi
c000e920:	5f                   	pop    edi
c000e921:	5d                   	pop    ebp
c000e922:	c3                   	ret    
c000e923:	90                   	nop

c000e924 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e924:	55                   	push   ebp
c000e925:	57                   	push   edi
c000e926:	56                   	push   esi
c000e927:	53                   	push   ebx
c000e928:	83 ec 28             	sub    esp,0x28
c000e92b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e92f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e933:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e937:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e93b:	c1 e6 08             	shl    esi,0x8
c000e93e:	01 c6                	add    esi,eax
c000e940:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e944:	c1 e0 08             	shl    eax,0x8
c000e947:	01 d0                	add    eax,edx
c000e949:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e94d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e951:	0f af c6             	imul   eax,esi
c000e954:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e95b:	50                   	push   eax
c000e95c:	e8 55 91 ff ff       	call   c0007ab6 <malloc>
c000e961:	83 c4 10             	add    esp,0x10
c000e964:	89 c7                	mov    edi,eax
c000e966:	85 c0                	test   eax,eax
c000e968:	75 10                	jne    c000e97a <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e96a:	83 ec 0c             	sub    esp,0xc
c000e96d:	68 d4 17 02 c0       	push   0xc00217d4
c000e972:	e8 da 28 00 00       	call   c0011251 <KePanic(char const*)>
c000e977:	83 c4 10             	add    esp,0x10
c000e97a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e97e:	ba 12 00 00 00       	mov    edx,0x12
c000e983:	85 c0                	test   eax,eax
c000e985:	74 11                	je     c000e998 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e987:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e98b:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e98f:	c1 fa 03             	sar    edx,0x3
c000e992:	0f af d1             	imul   edx,ecx
c000e995:	83 c2 12             	add    edx,0x12
c000e998:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e99c:	74 04                	je     c000e9a2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e99e:	85 f6                	test   esi,esi
c000e9a0:	75 12                	jne    c000e9b4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e9a2:	83 ec 0c             	sub    esp,0xc
c000e9a5:	68 e4 17 02 c0       	push   0xc00217e4
c000e9aa:	e8 96 bf ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000e9af:	e9 b8 00 00 00       	jmp    c000ea6c <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e9b4:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e9b8:	83 f9 02             	cmp    ecx,0x2
c000e9bb:	0f 85 96 00 00 00    	jne    c000ea57 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e9c1:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e9c6:	75 0e                	jne    c000e9d6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e9c8:	85 c0                	test   eax,eax
c000e9ca:	75 0a                	jne    c000e9d6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e9cc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e9cf:	83 e8 18             	sub    eax,0x18
c000e9d2:	a8 f7                	test   al,0xf7
c000e9d4:	74 0a                	je     c000e9e0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	68 f9 17 02 c0       	push   0xc00217f9
c000e9de:	eb 7f                	jmp    c000ea5f <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e9e0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e9e8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e9f0:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000e9f4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e9fc:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000ea00:	75 0c                	jne    c000ea0e <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000ea02:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000ea07:	c1 e0 18             	shl    eax,0x18
c000ea0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ea0e:	45                   	inc    ebp
c000ea0f:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000ea14:	c1 e1 10             	shl    ecx,0x10
c000ea17:	89 c8                	mov    eax,ecx
c000ea19:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ea1e:	c1 e1 08             	shl    ecx,0x8
c000ea21:	09 c1                	or     ecx,eax
c000ea23:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ea27:	09 c1                	or     ecx,eax
c000ea29:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ea2d:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000ea31:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ea35:	c1 f8 03             	sar    eax,0x3
c000ea38:	01 c2                	add    edx,eax
c000ea3a:	89 e8                	mov    eax,ebp
c000ea3c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ea40:	39 c6                	cmp    esi,eax
c000ea42:	7f b0                	jg     c000e9f4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ea44:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ea48:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea4c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ea4f:	7e 22                	jle    c000ea73 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ea51:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000ea55:	eb 99                	jmp    c000e9f0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ea57:	50                   	push   eax
c000ea58:	50                   	push   eax
c000ea59:	51                   	push   ecx
c000ea5a:	68 07 18 02 c0       	push   0xc0021807
c000ea5f:	e8 e1 be ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ea64:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ea67:	e8 5a 90 ff ff       	call   c0007ac6 <free>
c000ea6c:	83 c4 10             	add    esp,0x10
c000ea6f:	31 ff                	xor    edi,edi
c000ea71:	eb 0f                	jmp    c000ea82 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ea73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea77:	89 30                	mov    DWORD PTR [eax],esi
c000ea79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea7d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ea80:	89 30                	mov    DWORD PTR [eax],esi
c000ea82:	83 c4 1c             	add    esp,0x1c
c000ea85:	89 f8                	mov    eax,edi
c000ea87:	5b                   	pop    ebx
c000ea88:	5e                   	pop    esi
c000ea89:	5f                   	pop    edi
c000ea8a:	5d                   	pop    ebp
c000ea8b:	c3                   	ret    

c000ea8c <Video::putTGA(int, int, unsigned char*, int)>:
c000ea8c:	55                   	push   ebp
c000ea8d:	57                   	push   edi
c000ea8e:	56                   	push   esi
c000ea8f:	53                   	push   ebx
c000ea90:	83 ec 28             	sub    esp,0x28
c000ea93:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ea97:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea9b:	50                   	push   eax
c000ea9c:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eaa0:	50                   	push   eax
c000eaa1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eaa5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eaa9:	56                   	push   esi
c000eaaa:	e8 75 fe ff ff       	call   c000e924 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000eaaf:	83 c4 20             	add    esp,0x20
c000eab2:	85 c0                	test   eax,eax
c000eab4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000eab8:	74 35                	je     c000eaef <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eaba:	89 c7                	mov    edi,eax
c000eabc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eac0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000eac4:	39 d8                	cmp    eax,ebx
c000eac6:	7e 27                	jle    c000eaef <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eac8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eacc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ead0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ead4:	39 e8                	cmp    eax,ebp
c000ead6:	7e 14                	jle    c000eaec <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ead8:	8b 06                	mov    eax,DWORD PTR [esi]
c000eada:	83 c7 04             	add    edi,0x4
c000eadd:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000eae0:	53                   	push   ebx
c000eae1:	55                   	push   ebp
c000eae2:	45                   	inc    ebp
c000eae3:	56                   	push   esi
c000eae4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eae7:	83 c4 10             	add    esp,0x10
c000eaea:	eb e0                	jmp    c000eacc <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000eaec:	43                   	inc    ebx
c000eaed:	eb cd                	jmp    c000eabc <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000eaef:	83 c4 1c             	add    esp,0x1c
c000eaf2:	5b                   	pop    ebx
c000eaf3:	5e                   	pop    esi
c000eaf4:	5f                   	pop    edi
c000eaf5:	5d                   	pop    ebp
c000eaf6:	c3                   	ret    
c000eaf7:	90                   	nop

c000eaf8 <ACPI::close(int, int, void*)>:
c000eaf8:	83 ec 1c             	sub    esp,0x1c
c000eafb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000eb03:	74 0b                	je     c000eb10 <ACPI::close(int, int, void*)+0x18>
c000eb05:	b8 00 00 00 00       	mov    eax,0x0
c000eb0a:	e9 99 00 00 00       	jmp    c000eba8 <ACPI::close(int, int, void*)+0xb0>
c000eb0f:	90                   	nop
c000eb10:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000eb15:	75 29                	jne    c000eb40 <ACPI::close(int, int, void*)+0x48>
c000eb17:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000eb1c:	85 c0                	test   eax,eax
c000eb1e:	74 08                	je     c000eb28 <ACPI::close(int, int, void*)+0x30>
c000eb20:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000eb25:	ff d0                	call   eax
c000eb27:	90                   	nop
c000eb28:	83 ec 0c             	sub    esp,0xc
c000eb2b:	68 68 18 02 c0       	push   0xc0021868
c000eb30:	e8 1c 27 00 00       	call   c0011251 <KePanic(char const*)>
c000eb35:	83 c4 10             	add    esp,0x10
c000eb38:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eb3d:	eb 69                	jmp    c000eba8 <ACPI::close(int, int, void*)+0xb0>
c000eb3f:	90                   	nop
c000eb40:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000eb45:	75 59                	jne    c000eba0 <ACPI::close(int, int, void*)+0xa8>
c000eb47:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000eb4c:	85 c0                	test   eax,eax
c000eb4e:	74 08                	je     c000eb58 <ACPI::close(int, int, void*)+0x60>
c000eb50:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000eb55:	ff d0                	call   eax
c000eb57:	90                   	nop
c000eb58:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000eb5d:	8d 76 00             	lea    esi,[esi+0x0]
c000eb60:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eb65:	83 e0 02             	and    eax,0x2
c000eb68:	74 1e                	je     c000eb88 <ACPI::close(int, int, void*)+0x90>
c000eb6a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000eb71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb75:	89 c2                	mov    edx,eax
c000eb77:	ec                   	in     al,dx
c000eb78:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eb7c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000eb80:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eb84:	eb da                	jmp    c000eb60 <ACPI::close(int, int, void*)+0x68>
c000eb86:	66 90                	xchg   ax,ax
c000eb88:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000eb8f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000eb94:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000eb98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb9c:	ee                   	out    dx,al
c000eb9d:	8d 76 00             	lea    esi,[esi+0x0]
c000eba0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eba5:	8d 76 00             	lea    esi,[esi+0x0]
c000eba8:	83 c4 1c             	add    esp,0x1c
c000ebab:	c3                   	ret    

c000ebac <findRSDP()>:
c000ebac:	83 ec 1c             	sub    esp,0x1c
c000ebaf:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ebb4:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ebba:	83 e0 04             	and    eax,0x4
c000ebbd:	0f b6 c0             	movzx  eax,al
c000ebc0:	85 c0                	test   eax,eax
c000ebc2:	75 08                	jne    c000ebcc <findRSDP()+0x20>
c000ebc4:	b8 00 00 00 00       	mov    eax,0x0
c000ebc9:	eb 75                	jmp    c000ec40 <findRSDP()+0x94>
c000ebcb:	90                   	nop
c000ebcc:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000ebd1:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ebd6:	7f 1c                	jg     c000ebf4 <findRSDP()+0x48>
c000ebd8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ebdd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ebe3:	83 e2 fb             	and    edx,0xfffffffb
c000ebe6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ebec:	b8 00 00 00 00       	mov    eax,0x0
c000ebf1:	eb 4d                	jmp    c000ec40 <findRSDP()+0x94>
c000ebf3:	90                   	nop
c000ebf4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ebfc:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ec04:	77 32                	ja     c000ec38 <findRSDP()+0x8c>
c000ec06:	83 ec 04             	sub    esp,0x4
c000ec09:	6a 08                	push   0x8
c000ec0b:	68 03 19 02 c0       	push   0xc0021903
c000ec10:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ec14:	e8 67 17 ff ff       	call   c0000380 <memcmp>
c000ec19:	83 c4 10             	add    esp,0x10
c000ec1c:	85 c0                	test   eax,eax
c000ec1e:	0f 94 c0             	sete   al
c000ec21:	0f b6 c0             	movzx  eax,al
c000ec24:	85 c0                	test   eax,eax
c000ec26:	74 08                	je     c000ec30 <findRSDP()+0x84>
c000ec28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec2c:	eb 12                	jmp    c000ec40 <findRSDP()+0x94>
c000ec2e:	66 90                	xchg   ax,ax
c000ec30:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ec35:	eb c5                	jmp    c000ebfc <findRSDP()+0x50>
c000ec37:	90                   	nop
c000ec38:	b8 00 00 00 00       	mov    eax,0x0
c000ec3d:	8d 76 00             	lea    esi,[esi+0x0]
c000ec40:	83 c4 1c             	add    esp,0x1c
c000ec43:	c3                   	ret    

c000ec44 <loadACPITables(unsigned char*)>:
c000ec44:	57                   	push   edi
c000ec45:	56                   	push   esi
c000ec46:	53                   	push   ebx
c000ec47:	83 ec 60             	sub    esp,0x60
c000ec4a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ec4f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ec55:	83 e0 04             	and    eax,0x4
c000ec58:	0f b6 c0             	movzx  eax,al
c000ec5b:	85 c0                	test   eax,eax
c000ec5d:	0f 84 41 02 00 00    	je     c000eea4 <loadACPITables(unsigned char*)+0x260>
c000ec63:	a0 20 8b 02 c0       	mov    al,ds:0xc0028b20
c000ec68:	0f b6 c0             	movzx  eax,al
c000ec6b:	85 c0                	test   eax,eax
c000ec6d:	74 79                	je     c000ece8 <loadACPITables(unsigned char*)+0xa4>
c000ec6f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ec73:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ec77:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ec7e:	83 e8 24             	sub    eax,0x24
c000ec81:	c1 e8 03             	shr    eax,0x3
c000ec84:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ec88:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000ec90:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ec94:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000ec98:	0f 8d ba 00 00 00    	jge    c000ed58 <loadACPITables(unsigned char*)+0x114>
c000ec9e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000eca2:	83 c0 24             	add    eax,0x24
c000eca5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000eca9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ecad:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ecb1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ecb5:	c1 e0 03             	shl    eax,0x3
c000ecb8:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000ecbc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ecc0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ecc3:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecc5:	89 c1                	mov    ecx,eax
c000ecc7:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000eccc:	8d 50 01             	lea    edx,[eax+0x1]
c000eccf:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ecd5:	89 ca                	mov    edx,ecx
c000ecd7:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ecde:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000ece3:	eb ab                	jmp    c000ec90 <loadACPITables(unsigned char*)+0x4c>
c000ece5:	8d 76 00             	lea    esi,[esi+0x0]
c000ece8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ecec:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ecf0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ecf4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ecf7:	83 e8 24             	sub    eax,0x24
c000ecfa:	c1 e8 02             	shr    eax,0x2
c000ecfd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ed01:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ed09:	8d 76 00             	lea    esi,[esi+0x0]
c000ed0c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ed10:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ed14:	7d 42                	jge    c000ed58 <loadACPITables(unsigned char*)+0x114>
c000ed16:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ed1a:	83 c0 24             	add    eax,0x24
c000ed1d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ed21:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ed25:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ed29:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ed2d:	c1 e0 02             	shl    eax,0x2
c000ed30:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ed34:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed38:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ed3a:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ed3f:	8d 50 01             	lea    edx,[eax+0x1]
c000ed42:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ed48:	89 ca                	mov    edx,ecx
c000ed4a:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ed51:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000ed56:	eb b4                	jmp    c000ed0c <loadACPITables(unsigned char*)+0xc8>
c000ed58:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000ed60:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ed65:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000ed69:	0f 8d 39 01 00 00    	jge    c000eea8 <loadACPITables(unsigned char*)+0x264>
c000ed6f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ed73:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000ed7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ed7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed82:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ed86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed8a:	25 ff 0f 00 00       	and    eax,0xfff
c000ed8f:	89 c6                	mov    esi,eax
c000ed91:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ed97:	83 ec 0c             	sub    esp,0xc
c000ed9a:	6a 01                	push   0x1
c000ed9c:	e8 6c a8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000eda1:	83 c4 10             	add    esp,0x10
c000eda4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000eda8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000edae:	83 ec 0c             	sub    esp,0xc
c000edb1:	6a 01                	push   0x1
c000edb3:	6a 01                	push   0x1
c000edb5:	50                   	push   eax
c000edb6:	52                   	push   edx
c000edb7:	53                   	push   ebx
c000edb8:	e8 5d b1 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000edbd:	83 c4 20             	add    esp,0x20
c000edc0:	09 f0                	or     eax,esi
c000edc2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000edc6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000edca:	c1 e0 03             	shl    eax,0x3
c000edcd:	05 20 89 02 c0       	add    eax,0xc0028920
c000edd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000edd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edda:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000edde:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000ede6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000edea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000edee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edf2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000edf6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfa:	89 c6                	mov    esi,eax
c000edfc:	89 d7                	mov    edi,edx
c000edfe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ee00:	89 c8                	mov    eax,ecx
c000ee02:	89 fa                	mov    edx,edi
c000ee04:	89 f3                	mov    ebx,esi
c000ee06:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ee0a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ee0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ee12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ee1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee21:	05 00 10 00 00       	add    eax,0x1000
c000ee26:	c1 e8 0c             	shr    eax,0xc
c000ee29:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ee2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee31:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ee35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee39:	25 ff 0f 00 00       	and    eax,0xfff
c000ee3e:	89 c6                	mov    esi,eax
c000ee40:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ee46:	83 ec 0c             	sub    esp,0xc
c000ee49:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee4d:	e8 bb a7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000ee52:	83 c4 10             	add    esp,0x10
c000ee55:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ee59:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ee5f:	83 ec 0c             	sub    esp,0xc
c000ee62:	6a 01                	push   0x1
c000ee64:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ee68:	50                   	push   eax
c000ee69:	52                   	push   edx
c000ee6a:	53                   	push   ebx
c000ee6b:	e8 aa b0 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ee70:	83 c4 20             	add    esp,0x20
c000ee73:	09 f0                	or     eax,esi
c000ee75:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ee79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee7d:	83 ec 0c             	sub    esp,0xc
c000ee80:	50                   	push   eax
c000ee81:	e8 a5 aa ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000ee86:	83 c4 10             	add    esp,0x10
c000ee89:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ee8d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ee91:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ee98:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000ee9d:	e9 be fe ff ff       	jmp    c000ed60 <loadACPITables(unsigned char*)+0x11c>
c000eea2:	66 90                	xchg   ax,ax
c000eea4:	90                   	nop
c000eea5:	8d 76 00             	lea    esi,[esi+0x0]
c000eea8:	83 c4 60             	add    esp,0x60
c000eeab:	5b                   	pop    ebx
c000eeac:	5e                   	pop    esi
c000eead:	5f                   	pop    edi
c000eeae:	c3                   	ret    
c000eeaf:	90                   	nop

c000eeb0 <findRSDT(unsigned char*)>:
c000eeb0:	57                   	push   edi
c000eeb1:	56                   	push   esi
c000eeb2:	53                   	push   ebx
c000eeb3:	83 ec 50             	sub    esp,0x50
c000eeb6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eebb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eec1:	83 e0 04             	and    eax,0x4
c000eec4:	0f b6 c0             	movzx  eax,al
c000eec7:	85 c0                	test   eax,eax
c000eec9:	75 0d                	jne    c000eed8 <findRSDT(unsigned char*)+0x28>
c000eecb:	b8 00 00 00 00       	mov    eax,0x0
c000eed0:	e9 2b 01 00 00       	jmp    c000f000 <findRSDT(unsigned char*)+0x150>
c000eed5:	8d 76 00             	lea    esi,[esi+0x0]
c000eed8:	89 e0                	mov    eax,esp
c000eeda:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eede:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000eee2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000eee6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000eeee:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eef2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eef6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eefa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000eefe:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ef02:	89 c6                	mov    esi,eax
c000ef04:	89 d7                	mov    edi,edx
c000ef06:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef08:	89 c8                	mov    eax,ecx
c000ef0a:	89 fa                	mov    edx,edi
c000ef0c:	89 f3                	mov    ebx,esi
c000ef0e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000ef12:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000ef16:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ef1a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ef1e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000ef22:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000ef2a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef2e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef32:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ef36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef3a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ef3e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ef42:	25 ff 0f 00 00       	and    eax,0xfff
c000ef47:	89 c6                	mov    esi,eax
c000ef49:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef4f:	83 ec 0c             	sub    esp,0xc
c000ef52:	6a 02                	push   0x2
c000ef54:	e8 b4 a6 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000ef59:	83 c4 10             	add    esp,0x10
c000ef5c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000ef60:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ef66:	83 ec 0c             	sub    esp,0xc
c000ef69:	6a 01                	push   0x1
c000ef6b:	6a 02                	push   0x2
c000ef6d:	50                   	push   eax
c000ef6e:	52                   	push   edx
c000ef6f:	53                   	push   ebx
c000ef70:	e8 a5 af ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef75:	83 c4 20             	add    esp,0x20
c000ef78:	09 f0                	or     eax,esi
c000ef7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ef7e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ef82:	25 ff 0f 00 00       	and    eax,0xfff
c000ef87:	89 c6                	mov    esi,eax
c000ef89:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef8f:	83 ec 0c             	sub    esp,0xc
c000ef92:	6a 02                	push   0x2
c000ef94:	e8 74 a6 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000ef99:	83 c4 10             	add    esp,0x10
c000ef9c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000efa0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000efa6:	83 ec 0c             	sub    esp,0xc
c000efa9:	6a 01                	push   0x1
c000efab:	6a 02                	push   0x2
c000efad:	50                   	push   eax
c000efae:	52                   	push   edx
c000efaf:	53                   	push   ebx
c000efb0:	e8 65 af ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000efb5:	83 c4 20             	add    esp,0x20
c000efb8:	09 f0                	or     eax,esi
c000efba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000efbe:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000efc3:	85 c0                	test   eax,eax
c000efc5:	75 11                	jne    c000efd8 <findRSDT(unsigned char*)+0x128>
c000efc7:	c6 05 20 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028b20,0x0
c000efce:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000efd2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000efd6:	eb 24                	jmp    c000effc <findRSDT(unsigned char*)+0x14c>
c000efd8:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000efdd:	83 f8 02             	cmp    eax,0x2
c000efe0:	75 12                	jne    c000eff4 <findRSDT(unsigned char*)+0x144>
c000efe2:	c6 05 20 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b20,0x1
c000efe9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000efed:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000eff1:	eb 09                	jmp    c000effc <findRSDT(unsigned char*)+0x14c>
c000eff3:	90                   	nop
c000eff4:	b8 00 00 00 00       	mov    eax,0x0
c000eff9:	eb 05                	jmp    c000f000 <findRSDT(unsigned char*)+0x150>
c000effb:	90                   	nop
c000effc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f000:	83 c4 50             	add    esp,0x50
c000f003:	5b                   	pop    ebx
c000f004:	5e                   	pop    esi
c000f005:	5f                   	pop    edi
c000f006:	c3                   	ret    
c000f007:	90                   	nop

c000f008 <findDataTable(unsigned char*, char*)>:
c000f008:	83 ec 1c             	sub    esp,0x1c
c000f00b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f010:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f016:	83 e0 04             	and    eax,0x4
c000f019:	0f b6 c0             	movzx  eax,al
c000f01c:	85 c0                	test   eax,eax
c000f01e:	75 08                	jne    c000f028 <findDataTable(unsigned char*, char*)+0x20>
c000f020:	b8 00 00 00 00       	mov    eax,0x0
c000f025:	eb 5d                	jmp    c000f084 <findDataTable(unsigned char*, char*)+0x7c>
c000f027:	90                   	nop
c000f028:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f030:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000f035:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f039:	7d 41                	jge    c000f07c <findDataTable(unsigned char*, char*)+0x74>
c000f03b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f03f:	c1 e0 03             	shl    eax,0x3
c000f042:	05 20 89 02 c0       	add    eax,0xc0028920
c000f047:	83 ec 04             	sub    esp,0x4
c000f04a:	6a 04                	push   0x4
c000f04c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f050:	50                   	push   eax
c000f051:	e8 2a 13 ff ff       	call   c0000380 <memcmp>
c000f056:	83 c4 10             	add    esp,0x10
c000f059:	85 c0                	test   eax,eax
c000f05b:	0f 94 c0             	sete   al
c000f05e:	0f b6 c0             	movzx  eax,al
c000f061:	85 c0                	test   eax,eax
c000f063:	74 0f                	je     c000f074 <findDataTable(unsigned char*, char*)+0x6c>
c000f065:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f069:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000f070:	eb 12                	jmp    c000f084 <findDataTable(unsigned char*, char*)+0x7c>
c000f072:	66 90                	xchg   ax,ax
c000f074:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f079:	eb b5                	jmp    c000f030 <findDataTable(unsigned char*, char*)+0x28>
c000f07b:	90                   	nop
c000f07c:	b8 00 00 00 00       	mov    eax,0x0
c000f081:	8d 76 00             	lea    esi,[esi+0x0]
c000f084:	83 c4 1c             	add    esp,0x1c
c000f087:	c3                   	ret    

c000f088 <scanMADT()>:
c000f088:	53                   	push   ebx
c000f089:	83 ec 38             	sub    esp,0x38
c000f08c:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000f091:	25 00 04 00 00       	and    eax,0x400
c000f096:	74 14                	je     c000f0ac <scanMADT()+0x24>
c000f098:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f09d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f0a3:	83 e2 fb             	and    edx,0xfffffffb
c000f0a6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f0ac:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f0b1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f0b7:	83 e0 04             	and    eax,0x4
c000f0ba:	0f b6 c0             	movzx  eax,al
c000f0bd:	85 c0                	test   eax,eax
c000f0bf:	0f 84 6b 04 00 00    	je     c000f530 <scanMADT()+0x4a8>
c000f0c5:	e8 e2 fa ff ff       	call   c000ebac <findRSDP()>
c000f0ca:	a3 2c 8b 02 c0       	mov    ds:0xc0028b2c,eax
c000f0cf:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f0d4:	85 c0                	test   eax,eax
c000f0d6:	75 1c                	jne    c000f0f4 <scanMADT()+0x6c>
c000f0d8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f0dd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f0e3:	83 e2 fb             	and    edx,0xfffffffb
c000f0e6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f0ec:	e9 47 04 00 00       	jmp    c000f538 <scanMADT()+0x4b0>
c000f0f1:	8d 76 00             	lea    esi,[esi+0x0]
c000f0f4:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f0f9:	83 ec 0c             	sub    esp,0xc
c000f0fc:	50                   	push   eax
c000f0fd:	e8 ae fd ff ff       	call   c000eeb0 <findRSDT(unsigned char*)>
c000f102:	83 c4 10             	add    esp,0x10
c000f105:	a3 28 8b 02 c0       	mov    ds:0xc0028b28,eax
c000f10a:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f10f:	85 c0                	test   eax,eax
c000f111:	75 19                	jne    c000f12c <scanMADT()+0xa4>
c000f113:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f118:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f11e:	83 e2 fb             	and    edx,0xfffffffb
c000f121:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f127:	e9 0c 04 00 00       	jmp    c000f538 <scanMADT()+0x4b0>
c000f12c:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f131:	83 ec 0c             	sub    esp,0xc
c000f134:	50                   	push   eax
c000f135:	e8 0a fb ff ff       	call   c000ec44 <loadACPITables(unsigned char*)>
c000f13a:	83 c4 10             	add    esp,0x10
c000f13d:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f142:	83 ec 08             	sub    esp,0x8
c000f145:	68 0c 19 02 c0       	push   0xc002190c
c000f14a:	50                   	push   eax
c000f14b:	e8 b8 fe ff ff       	call   c000f008 <findDataTable(unsigned char*, char*)>
c000f150:	83 c4 10             	add    esp,0x10
c000f153:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f157:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f15c:	75 1a                	jne    c000f178 <scanMADT()+0xf0>
c000f15e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f163:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f169:	83 e2 fe             	and    edx,0xfffffffe
c000f16c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f172:	e9 c1 03 00 00       	jmp    c000f538 <scanMADT()+0x4b0>
c000f177:	90                   	nop
c000f178:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f180:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f184:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f187:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f18b:	0f 87 a7 03 00 00    	ja     c000f538 <scanMADT()+0x4b0>
c000f191:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f199:	0f 87 99 03 00 00    	ja     c000f538 <scanMADT()+0x4b0>
c000f19f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1a3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f1a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1ab:	8d 50 01             	lea    edx,[eax+0x1]
c000f1ae:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f1b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f1b6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f1ba:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f1be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1c2:	8d 50 01             	lea    edx,[eax+0x1]
c000f1c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f1c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f1cd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f1d1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f1d5:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f1da:	83 f8 02             	cmp    eax,0x2
c000f1dd:	0f 86 51 03 00 00    	jbe    c000f534 <scanMADT()+0x4ac>
c000f1e3:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f1e8:	85 c0                	test   eax,eax
c000f1ea:	75 58                	jne    c000f244 <scanMADT()+0x1bc>
c000f1ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1f0:	8d 50 01             	lea    edx,[eax+0x1]
c000f1f3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f1f7:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f1fd:	0f b6 d2             	movzx  edx,dl
c000f200:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f204:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f208:	88 82 60 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72a0],al
c000f20e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f212:	8d 50 01             	lea    edx,[eax+0x1]
c000f215:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f219:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f21f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f222:	88 0d 20 8d 02 c0    	mov    BYTE PTR ds:0xc0028d20,cl
c000f228:	0f b6 d2             	movzx  edx,dl
c000f22b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f22f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f233:	88 82 40 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72c0],al
c000f239:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f23e:	e9 d9 02 00 00       	jmp    c000f51c <scanMADT()+0x494>
c000f243:	90                   	nop
c000f244:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f249:	83 f8 01             	cmp    eax,0x1
c000f24c:	0f 85 1a 01 00 00    	jne    c000f36c <scanMADT()+0x2e4>
c000f252:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f256:	8d 50 01             	lea    edx,[eax+0x1]
c000f259:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f25d:	8a 15 e0 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028be0
c000f263:	0f b6 d2             	movzx  edx,dl
c000f266:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f26a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f26e:	88 82 00 8c 02 c0    	mov    BYTE PTR [edx-0x3ffd7400],al
c000f274:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f279:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f27d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f281:	01 d0                	add    eax,edx
c000f283:	83 c0 2c             	add    eax,0x2c
c000f286:	8a 00                	mov    al,BYTE PTR [eax]
c000f288:	0f b6 d0             	movzx  edx,al
c000f28b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f28f:	8d 48 01             	lea    ecx,[eax+0x1]
c000f292:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f296:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f29a:	0f b6 c0             	movzx  eax,al
c000f29d:	c1 e0 08             	shl    eax,0x8
c000f2a0:	89 d1                	mov    ecx,edx
c000f2a2:	09 c1                	or     ecx,eax
c000f2a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2a8:	8d 50 02             	lea    edx,[eax+0x2]
c000f2ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2af:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f2b3:	0f b6 c0             	movzx  eax,al
c000f2b6:	c1 e0 10             	shl    eax,0x10
c000f2b9:	09 c1                	or     ecx,eax
c000f2bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2bf:	8d 50 03             	lea    edx,[eax+0x3]
c000f2c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2c6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f2ca:	0f b6 c0             	movzx  eax,al
c000f2cd:	c1 e0 18             	shl    eax,0x18
c000f2d0:	09 c1                	or     ecx,eax
c000f2d2:	89 ca                	mov    edx,ecx
c000f2d4:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f2d9:	0f b6 c0             	movzx  eax,al
c000f2dc:	89 14 85 20 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73e0],edx
c000f2e3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f2e8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f2ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2f0:	01 d0                	add    eax,edx
c000f2f2:	83 c0 2c             	add    eax,0x2c
c000f2f5:	8a 00                	mov    al,BYTE PTR [eax]
c000f2f7:	0f b6 d0             	movzx  edx,al
c000f2fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2fe:	8d 48 01             	lea    ecx,[eax+0x1]
c000f301:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f305:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f309:	0f b6 c0             	movzx  eax,al
c000f30c:	c1 e0 08             	shl    eax,0x8
c000f30f:	89 d1                	mov    ecx,edx
c000f311:	09 c1                	or     ecx,eax
c000f313:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f317:	8d 50 02             	lea    edx,[eax+0x2]
c000f31a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f31e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f322:	0f b6 c0             	movzx  eax,al
c000f325:	c1 e0 10             	shl    eax,0x10
c000f328:	09 c1                	or     ecx,eax
c000f32a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f32e:	8d 50 03             	lea    edx,[eax+0x3]
c000f331:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f335:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f339:	0f b6 c0             	movzx  eax,al
c000f33c:	c1 e0 18             	shl    eax,0x18
c000f33f:	09 c1                	or     ecx,eax
c000f341:	89 ca                	mov    edx,ecx
c000f343:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f348:	0f b6 c0             	movzx  eax,al
c000f34b:	89 14 85 a0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7360],edx
c000f352:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f357:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f35c:	83 c0 01             	add    eax,0x1
c000f35f:	a2 e0 8b 02 c0       	mov    ds:0xc0028be0,al
c000f364:	e9 b3 01 00 00       	jmp    c000f51c <scanMADT()+0x494>
c000f369:	8d 76 00             	lea    esi,[esi+0x0]
c000f36c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f371:	83 f8 02             	cmp    eax,0x2
c000f374:	0f 85 ea 00 00 00    	jne    c000f464 <scanMADT()+0x3dc>
c000f37a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f37e:	8d 50 01             	lea    edx,[eax+0x1]
c000f381:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f385:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f389:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f38d:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f391:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f395:	8d 50 01             	lea    edx,[eax+0x1]
c000f398:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f39c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3a0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f3a4:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f3a8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3b0:	01 d0                	add    eax,edx
c000f3b2:	83 c0 2c             	add    eax,0x2c
c000f3b5:	8a 00                	mov    al,BYTE PTR [eax]
c000f3b7:	0f b6 d0             	movzx  edx,al
c000f3ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3be:	8d 48 01             	lea    ecx,[eax+0x1]
c000f3c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3c5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f3c9:	0f b6 c0             	movzx  eax,al
c000f3cc:	c1 e0 08             	shl    eax,0x8
c000f3cf:	89 d1                	mov    ecx,edx
c000f3d1:	09 c1                	or     ecx,eax
c000f3d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3d7:	8d 50 02             	lea    edx,[eax+0x2]
c000f3da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3de:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3e2:	0f b6 c0             	movzx  eax,al
c000f3e5:	c1 e0 10             	shl    eax,0x10
c000f3e8:	09 c1                	or     ecx,eax
c000f3ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3ee:	8d 50 03             	lea    edx,[eax+0x3]
c000f3f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3f5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3f9:	0f b6 c0             	movzx  eax,al
c000f3fc:	c1 e0 18             	shl    eax,0x18
c000f3ff:	09 c8                	or     eax,ecx
c000f401:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f405:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f40a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f40e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f412:	01 d0                	add    eax,edx
c000f414:	83 c0 2c             	add    eax,0x2c
c000f417:	8a 00                	mov    al,BYTE PTR [eax]
c000f419:	0f b6 c0             	movzx  eax,al
c000f41c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f420:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f423:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f427:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f42b:	0f b6 d2             	movzx  edx,dl
c000f42e:	c1 e2 08             	shl    edx,0x8
c000f431:	09 d0                	or     eax,edx
c000f433:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f438:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f43d:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f442:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f446:	88 90 08 30 02 c0    	mov    BYTE PTR [eax-0x3ffdcff8],dl
c000f44c:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f451:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f456:	66 89 84 12 c0 8b 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd7440],ax
c000f45e:	e9 b9 00 00 00       	jmp    c000f51c <scanMADT()+0x494>
c000f463:	90                   	nop
c000f464:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f469:	83 f8 04             	cmp    eax,0x4
c000f46c:	0f 85 9a 00 00 00    	jne    c000f50c <scanMADT()+0x484>
c000f472:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f476:	8d 50 01             	lea    edx,[eax+0x1]
c000f479:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f47d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f481:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f485:	0f b6 c0             	movzx  eax,al
c000f488:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f48c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f490:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f494:	01 d0                	add    eax,edx
c000f496:	83 c0 2c             	add    eax,0x2c
c000f499:	8a 00                	mov    al,BYTE PTR [eax]
c000f49b:	0f b6 d0             	movzx  edx,al
c000f49e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4a2:	8d 48 01             	lea    ecx,[eax+0x1]
c000f4a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4a9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f4ad:	0f b6 c0             	movzx  eax,al
c000f4b0:	c1 e0 08             	shl    eax,0x8
c000f4b3:	09 d0                	or     eax,edx
c000f4b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f4b9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f4be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4c2:	8d 50 01             	lea    edx,[eax+0x1]
c000f4c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4cd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4d1:	0f b6 c0             	movzx  eax,al
c000f4d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f4d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4dc:	c1 e0 08             	shl    eax,0x8
c000f4df:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f4e3:	89 c1                	mov    ecx,eax
c000f4e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e9:	c1 e0 18             	shl    eax,0x18
c000f4ec:	89 c3                	mov    ebx,eax
c000f4ee:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c000f4f3:	8d 50 01             	lea    edx,[eax+0x1]
c000f4f6:	89 15 30 8b 02 c0    	mov    DWORD PTR ds:0xc0028b30,edx
c000f4fc:	09 d9                	or     ecx,ebx
c000f4fe:	89 ca                	mov    edx,ecx
c000f500:	89 14 85 40 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd74c0],edx
c000f507:	eb 13                	jmp    c000f51c <scanMADT()+0x494>
c000f509:	8d 76 00             	lea    esi,[esi+0x0]
c000f50c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f511:	83 f8 05             	cmp    eax,0x5
c000f514:	75 06                	jne    c000f51c <scanMADT()+0x494>
c000f516:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f51b:	90                   	nop
c000f51c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f521:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f525:	01 d0                	add    eax,edx
c000f527:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f52b:	e9 50 fc ff ff       	jmp    c000f180 <scanMADT()+0xf8>
c000f530:	90                   	nop
c000f531:	eb 05                	jmp    c000f538 <scanMADT()+0x4b0>
c000f533:	90                   	nop
c000f534:	90                   	nop
c000f535:	8d 76 00             	lea    esi,[esi+0x0]
c000f538:	83 c4 38             	add    esp,0x38
c000f53b:	5b                   	pop    ebx
c000f53c:	c3                   	ret    
c000f53d:	90                   	nop
c000f53e:	66 90                	xchg   ax,ax

c000f540 <ACPI::ACPI()>:
c000f540:	83 ec 0c             	sub    esp,0xc
c000f543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f547:	83 ec 08             	sub    esp,0x8
c000f54a:	68 11 19 02 c0       	push   0xc0021911
c000f54f:	50                   	push   eax
c000f550:	e8 65 d2 ff ff       	call   c000c7ba <Device::Device(char const*)>
c000f555:	83 c4 10             	add    esp,0x10
c000f558:	ba 64 1a 02 c0       	mov    edx,0xc0021a64
c000f55d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f561:	89 10                	mov    DWORD PTR [eax],edx
c000f563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f567:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f56e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f572:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f57c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f580:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f58a:	e8 f9 fa ff ff       	call   c000f088 <scanMADT()>
c000f58f:	90                   	nop
c000f590:	83 c4 0c             	add    esp,0xc
c000f593:	c3                   	ret    

c000f594 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f594:	83 ec 2c             	sub    esp,0x2c
c000f597:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f59b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f59f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f5a3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f5a7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f5ac:	88 d0                	mov    al,dl
c000f5ae:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f5b2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f5b7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f5bf:	90                   	nop
c000f5c0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5c4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f5ca:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f5ce:	0f 8d b0 00 00 00    	jge    c000f684 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f5d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5d8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f5dc:	83 c2 2a             	add    edx,0x2a
c000f5df:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f5e3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f5e8:	0f b7 c0             	movzx  eax,ax
c000f5eb:	39 c2                	cmp    edx,eax
c000f5ed:	0f 85 85 00 00 00    	jne    c000f678 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f5f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5f7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f5fb:	83 c2 2a             	add    edx,0x2a
c000f5fe:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f602:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f607:	0f b6 c0             	movzx  eax,al
c000f60a:	39 c2                	cmp    edx,eax
c000f60c:	75 6a                	jne    c000f678 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f60e:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f613:	85 c0                	test   eax,eax
c000f615:	74 3d                	je     c000f654 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f617:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f61b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f61f:	83 c2 2a             	add    edx,0x2a
c000f622:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f626:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f62a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f62d:	39 c2                	cmp    edx,eax
c000f62f:	74 13                	je     c000f644 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f631:	83 ec 0c             	sub    esp,0xc
c000f634:	68 8c 18 02 c0       	push   0xc002188c
c000f639:	e8 13 1c 00 00       	call   c0011251 <KePanic(char const*)>
c000f63e:	83 c4 10             	add    esp,0x10
c000f641:	8d 76 00             	lea    esi,[esi+0x0]
c000f644:	83 ec 0c             	sub    esp,0xc
c000f647:	68 16 19 02 c0       	push   0xc0021916
c000f64c:	e8 00 1c 00 00       	call   c0011251 <KePanic(char const*)>
c000f651:	83 c4 10             	add    esp,0x10
c000f654:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f658:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f65c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f660:	83 c2 2a             	add    edx,0x2a
c000f663:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f667:	8b 02                	mov    eax,DWORD PTR [edx]
c000f669:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f66c:	89 01                	mov    DWORD PTR [ecx],eax
c000f66e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f671:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f676:	66 90                	xchg   ax,ax
c000f678:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f67d:	e9 3e ff ff ff       	jmp    c000f5c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f682:	66 90                	xchg   ax,ax
c000f684:	90                   	nop
c000f685:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f689:	83 c4 2c             	add    esp,0x2c
c000f68c:	c2 04 00             	ret    0x4
c000f68f:	90                   	nop

c000f690 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f690:	83 ec 1c             	sub    esp,0x1c
c000f693:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f697:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f69b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f69f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f6a4:	88 c8                	mov    al,cl
c000f6a6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f6aa:	88 d0                	mov    al,dl
c000f6ac:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f6b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6b4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f6ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6be:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f6c1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000f6c5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000f6c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6cd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f6d3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f6d7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000f6da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f6de:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000f6e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6e7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f6ed:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f6f1:	83 c0 01             	add    eax,0x1
c000f6f4:	88 c1                	mov    cl,al
c000f6f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6fa:	83 c2 2a             	add    edx,0x2a
c000f6fd:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f701:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f705:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f70b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f70f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f712:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f716:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f71a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f71e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f724:	8d 50 01             	lea    edx,[eax+0x1]
c000f727:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f72b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f731:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f735:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f73b:	3d 00 02 00 00       	cmp    eax,0x200
c000f740:	75 12                	jne    c000f754 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f742:	83 ec 0c             	sub    esp,0xc
c000f745:	68 25 19 02 c0       	push   0xc0021925
c000f74a:	e8 02 1b 00 00       	call   c0011251 <KePanic(char const*)>
c000f74f:	83 c4 10             	add    esp,0x10
c000f752:	66 90                	xchg   ax,ax
c000f754:	90                   	nop
c000f755:	83 c4 1c             	add    esp,0x1c
c000f758:	c3                   	ret    
c000f759:	90                   	nop
c000f75a:	66 90                	xchg   ax,ax

c000f75c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f75c:	b8 00 00 00 00       	mov    eax,0x0
c000f761:	c3                   	ret    
c000f762:	66 90                	xchg   ax,ax

c000f764 <ACPI::detectPCI()>:
c000f764:	53                   	push   ebx
c000f765:	83 ec 28             	sub    esp,0x28
c000f768:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f76d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f772:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f777:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f77d:	83 e0 04             	and    eax,0x4
c000f780:	0f b6 c0             	movzx  eax,al
c000f783:	85 c0                	test   eax,eax
c000f785:	74 2d                	je     c000f7b4 <ACPI::detectPCI()+0x50>
c000f787:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f78c:	83 ec 08             	sub    esp,0x8
c000f78f:	68 42 19 02 c0       	push   0xc0021942
c000f794:	50                   	push   eax
c000f795:	e8 6e f8 ff ff       	call   c000f008 <findDataTable(unsigned char*, char*)>
c000f79a:	83 c4 10             	add    esp,0x10
c000f79d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f7a1:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f7a6:	74 0c                	je     c000f7b4 <ACPI::detectPCI()+0x50>
c000f7a8:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7ad:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f7b2:	66 90                	xchg   ax,ax
c000f7b4:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f7bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7c0:	8a 00                	mov    al,BYTE PTR [eax]
c000f7c2:	0f b6 c0             	movzx  eax,al
c000f7c5:	83 f8 01             	cmp    eax,0x1
c000f7c8:	75 0e                	jne    c000f7d8 <ACPI::detectPCI()+0x74>
c000f7ca:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7cf:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f7d4:	eb 2e                	jmp    c000f804 <ACPI::detectPCI()+0xa0>
c000f7d6:	66 90                	xchg   ax,ax
c000f7d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7dc:	8a 00                	mov    al,BYTE PTR [eax]
c000f7de:	0f b6 c0             	movzx  eax,al
c000f7e1:	83 f8 02             	cmp    eax,0x2
c000f7e4:	75 1e                	jne    c000f804 <ACPI::detectPCI()+0xa0>
c000f7e6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7eb:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f7f0:	85 c0                	test   eax,eax
c000f7f2:	74 10                	je     c000f804 <ACPI::detectPCI()+0xa0>
c000f7f4:	83 ec 0c             	sub    esp,0xc
c000f7f7:	68 bc 18 02 c0       	push   0xc00218bc
c000f7fc:	e8 50 1a 00 00       	call   c0011251 <KePanic(char const*)>
c000f801:	83 c4 10             	add    esp,0x10
c000f804:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f808:	83 f0 01             	xor    eax,0x1
c000f80b:	0f b6 c0             	movzx  eax,al
c000f80e:	85 c0                	test   eax,eax
c000f810:	74 46                	je     c000f858 <ACPI::detectPCI()+0xf4>
c000f812:	e8 19 09 ff ff       	call   c0000130 <manualPCIProbe>
c000f817:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f81b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f820:	75 0e                	jne    c000f830 <ACPI::detectPCI()+0xcc>
c000f822:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f827:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f82c:	eb 2a                	jmp    c000f858 <ACPI::detectPCI()+0xf4>
c000f82e:	66 90                	xchg   ax,ax
c000f830:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f835:	75 21                	jne    c000f858 <ACPI::detectPCI()+0xf4>
c000f837:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f83c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f841:	85 c0                	test   eax,eax
c000f843:	74 13                	je     c000f858 <ACPI::detectPCI()+0xf4>
c000f845:	83 ec 0c             	sub    esp,0xc
c000f848:	68 bc 18 02 c0       	push   0xc00218bc
c000f84d:	e8 ff 19 00 00       	call   c0011251 <KePanic(char const*)>
c000f852:	83 c4 10             	add    esp,0x10
c000f855:	8d 76 00             	lea    esi,[esi+0x0]
c000f858:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f85d:	85 c0                	test   eax,eax
c000f85f:	0f 84 87 00 00 00    	je     c000f8ec <ACPI::detectPCI()+0x188>
c000f865:	83 ec 0c             	sub    esp,0xc
c000f868:	68 47 19 02 c0       	push   0xc0021947
c000f86d:	e8 09 13 00 00       	call   c0010b7b <KeSetBootMessage(char const*)>
c000f872:	83 c4 10             	add    esp,0x10
c000f875:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f87d:	83 ec 0c             	sub    esp,0xc
c000f880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f884:	e8 2d 82 ff ff       	call   c0007ab6 <malloc>
c000f889:	83 c4 10             	add    esp,0x10
c000f88c:	89 c3                	mov    ebx,eax
c000f88e:	83 ec 0c             	sub    esp,0xc
c000f891:	53                   	push   ebx
c000f892:	e8 51 b3 00 00       	call   c001abe8 <PCI::PCI()>
c000f897:	83 c4 10             	add    esp,0x10
c000f89a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f89e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f8a2:	83 ec 08             	sub    esp,0x8
c000f8a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f8a9:	50                   	push   eax
c000f8aa:	e8 73 cd ff ff       	call   c000c622 <Device::addChild(Device*)>
c000f8af:	83 c4 10             	add    esp,0x10
c000f8b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f8b6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8b8:	83 c0 08             	add    eax,0x8
c000f8bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8bd:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f8c2:	85 d2                	test   edx,edx
c000f8c4:	74 0a                	je     c000f8d0 <ACPI::detectPCI()+0x16c>
c000f8c6:	ba 01 00 00 00       	mov    edx,0x1
c000f8cb:	eb 0b                	jmp    c000f8d8 <ACPI::detectPCI()+0x174>
c000f8cd:	8d 76 00             	lea    esi,[esi+0x0]
c000f8d0:	ba 02 00 00 00       	mov    edx,0x2
c000f8d5:	8d 76 00             	lea    esi,[esi+0x0]
c000f8d8:	6a 00                	push   0x0
c000f8da:	6a 00                	push   0x0
c000f8dc:	52                   	push   edx
c000f8dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8e1:	ff d0                	call   eax
c000f8e3:	83 c4 10             	add    esp,0x10
c000f8e6:	e9 91 00 00 00       	jmp    c000f97c <ACPI::detectPCI()+0x218>
c000f8eb:	90                   	nop
c000f8ec:	83 ec 0c             	sub    esp,0xc
c000f8ef:	68 5f 19 02 c0       	push   0xc002195f
c000f8f4:	e8 82 12 00 00       	call   c0010b7b <KeSetBootMessage(char const*)>
c000f8f9:	83 c4 10             	add    esp,0x10
c000f8fc:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f903:	83 ec 0c             	sub    esp,0xc
c000f906:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f90a:	e8 a7 81 ff ff       	call   c0007ab6 <malloc>
c000f90f:	83 c4 10             	add    esp,0x10
c000f912:	89 c3                	mov    ebx,eax
c000f914:	83 ec 0c             	sub    esp,0xc
c000f917:	53                   	push   ebx
c000f918:	e8 65 be 00 00       	call   c001b782 <IDE::IDE()>
c000f91d:	83 c4 10             	add    esp,0x10
c000f920:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f924:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f928:	83 ec 08             	sub    esp,0x8
c000f92b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f92f:	50                   	push   eax
c000f930:	e8 ed cc ff ff       	call   c000c622 <Device::addChild(Device*)>
c000f935:	83 c4 10             	add    esp,0x10
c000f938:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f93c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f946:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f94a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f953:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f957:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f960:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f964:	8b 00                	mov    eax,DWORD PTR [eax]
c000f966:	83 c0 08             	add    eax,0x8
c000f969:	8b 00                	mov    eax,DWORD PTR [eax]
c000f96b:	6a 00                	push   0x0
c000f96d:	6a 00                	push   0x0
c000f96f:	6a 00                	push   0x0
c000f971:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f975:	ff d0                	call   eax
c000f977:	83 c4 10             	add    esp,0x10
c000f97a:	66 90                	xchg   ax,ax
c000f97c:	90                   	nop
c000f97d:	83 c4 28             	add    esp,0x28
c000f980:	5b                   	pop    ebx
c000f981:	c3                   	ret    
c000f982:	66 90                	xchg   ax,ax

c000f984 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f984:	83 ec 1c             	sub    esp,0x1c
c000f987:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f98b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f98e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f992:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f997:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f99c:	83 ec 08             	sub    esp,0x8
c000f99f:	52                   	push   edx
c000f9a0:	50                   	push   eax
c000f9a1:	e8 d2 77 ff ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c000f9a6:	83 c4 10             	add    esp,0x10
c000f9a9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f9ad:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f9b2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f9b7:	83 ec 04             	sub    esp,0x4
c000f9ba:	6a 01                	push   0x1
c000f9bc:	52                   	push   edx
c000f9bd:	50                   	push   eax
c000f9be:	e8 cf 78 ff ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f9c3:	83 c4 10             	add    esp,0x10
c000f9c6:	90                   	nop
c000f9c7:	83 c4 1c             	add    esp,0x1c
c000f9ca:	c3                   	ret    
c000f9cb:	90                   	nop

c000f9cc <ACPI::sleep()>:
c000f9cc:	83 ec 0c             	sub    esp,0xc
c000f9cf:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000f9d4:	85 c0                	test   eax,eax
c000f9d6:	74 08                	je     c000f9e0 <ACPI::sleep()+0x14>
c000f9d8:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000f9dd:	ff d0                	call   eax
c000f9df:	90                   	nop
c000f9e0:	90                   	nop
c000f9e1:	83 c4 0c             	add    esp,0xc
c000f9e4:	c3                   	ret    
c000f9e5:	90                   	nop
c000f9e6:	66 90                	xchg   ax,ax

c000f9e8 <ACPI::open(int, int, void*)>:
c000f9e8:	57                   	push   edi
c000f9e9:	56                   	push   esi
c000f9ea:	53                   	push   ebx
c000f9eb:	81 ec 70 01 00 00    	sub    esp,0x170
c000f9f1:	83 ec 0c             	sub    esp,0xc
c000f9f4:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f9fb:	e8 64 fd ff ff       	call   c000f764 <ACPI::detectPCI()>
c000fa00:	83 c4 10             	add    esp,0x10
c000fa03:	83 ec 0c             	sub    esp,0xc
c000fa06:	68 e4 18 02 c0       	push   0xc00218e4
c000fa0b:	e8 6b 11 00 00       	call   c0010b7b <KeSetBootMessage(char const*)>
c000fa10:	83 c4 10             	add    esp,0x10
c000fa13:	b8 4c 05 00 00       	mov    eax,0x54c
c000fa18:	8a 00                	mov    al,BYTE PTR [eax]
c000fa1a:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000fa21:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fa29:	83 f8 01             	cmp    eax,0x1
c000fa2c:	75 12                	jne    c000fa40 <ACPI::open(int, int, void*)+0x58>
c000fa2e:	83 ec 0c             	sub    esp,0xc
c000fa31:	68 75 12 02 c0       	push   0xc0021275
c000fa36:	e8 fd 4b 00 00       	call   c0014638 <Thr::loadKernelSymbolTable(char const*)>
c000fa3b:	83 c4 10             	add    esp,0x10
c000fa3e:	eb 34                	jmp    c000fa74 <ACPI::open(int, int, void*)+0x8c>
c000fa40:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fa48:	3d bb 00 00 00       	cmp    eax,0xbb
c000fa4d:	75 15                	jne    c000fa64 <ACPI::open(int, int, void*)+0x7c>
c000fa4f:	83 ec 0c             	sub    esp,0xc
c000fa52:	68 74 19 02 c0       	push   0xc0021974
c000fa57:	e8 dc 4b 00 00       	call   c0014638 <Thr::loadKernelSymbolTable(char const*)>
c000fa5c:	83 c4 10             	add    esp,0x10
c000fa5f:	eb 13                	jmp    c000fa74 <ACPI::open(int, int, void*)+0x8c>
c000fa61:	8d 76 00             	lea    esi,[esi+0x0]
c000fa64:	83 ec 0c             	sub    esp,0xc
c000fa67:	68 92 19 02 c0       	push   0xc0021992
c000fa6c:	e8 e0 17 00 00       	call   c0011251 <KePanic(char const*)>
c000fa71:	83 c4 10             	add    esp,0x10
c000fa74:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000fa7c:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000fa87:	83 ec 0c             	sub    esp,0xc
c000fa8a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fa91:	e8 20 80 ff ff       	call   c0007ab6 <malloc>
c000fa96:	83 c4 10             	add    esp,0x10
c000fa99:	89 c3                	mov    ebx,eax
c000fa9b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000faa0:	83 ec 04             	sub    esp,0x4
c000faa3:	50                   	push   eax
c000faa4:	68 ac 19 02 c0       	push   0xc00219ac
c000faa9:	53                   	push   ebx
c000faaa:	e8 69 bc ff ff       	call   c000b718 <File::File(char const*, Process*)>
c000faaf:	83 c4 10             	add    esp,0x10
c000fab2:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000fab9:	83 ec 08             	sub    esp,0x8
c000fabc:	6a 01                	push   0x1
c000fabe:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fac5:	e8 0a bd ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c000faca:	83 c4 10             	add    esp,0x10
c000facd:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000fad4:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000fadc:	75 16                	jne    c000faf4 <ACPI::open(int, int, void*)+0x10c>
c000fade:	83 ec 0c             	sub    esp,0xc
c000fae1:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fae8:	e8 45 bd ff ff       	call   c000b832 <File::close()>
c000faed:	83 c4 10             	add    esp,0x10
c000faf0:	eb 0a                	jmp    c000fafc <ACPI::open(int, int, void*)+0x114>
c000faf2:	66 90                	xchg   ax,ax
c000faf4:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000fafc:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000fb04:	74 1e                	je     c000fb24 <ACPI::open(int, int, void*)+0x13c>
c000fb06:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000fb0d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb0f:	83 c0 08             	add    eax,0x8
c000fb12:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb14:	83 ec 0c             	sub    esp,0xc
c000fb17:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fb1e:	ff d0                	call   eax
c000fb20:	83 c4 10             	add    esp,0x10
c000fb23:	90                   	nop
c000fb24:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000fb2b:	83 f0 01             	xor    eax,0x1
c000fb2e:	0f b6 c0             	movzx  eax,al
c000fb31:	85 c0                	test   eax,eax
c000fb33:	74 43                	je     c000fb78 <ACPI::open(int, int, void*)+0x190>
c000fb35:	83 ec 0c             	sub    esp,0xc
c000fb38:	68 ca 19 02 c0       	push   0xc00219ca
c000fb3d:	e8 39 10 00 00       	call   c0010b7b <KeSetBootMessage(char const*)>
c000fb42:	83 c4 10             	add    esp,0x10
c000fb45:	83 ec 04             	sub    esp,0x4
c000fb48:	6a 0c                	push   0xc
c000fb4a:	68 e5 19 02 c0       	push   0xc00219e5
c000fb4f:	68 f6 19 02 c0       	push   0xc00219f6
c000fb54:	e8 8f 3d 00 00       	call   c00138e8 <Reg::readIntWithDefault(char*, char*, int)>
c000fb59:	83 c4 10             	add    esp,0x10
c000fb5c:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000fb63:	83 ec 0c             	sub    esp,0xc
c000fb66:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000fb6d:	e8 ca 9c ff ff       	call   c000983c <Virt::setupPageSwapping(int)>
c000fb72:	83 c4 10             	add    esp,0x10
c000fb75:	8d 76 00             	lea    esi,[esi+0x0]
c000fb78:	83 ec 0c             	sub    esp,0xc
c000fb7b:	68 75 05 02 c0       	push   0xc0020575
c000fb80:	e8 f6 0f 00 00       	call   c0010b7b <KeSetBootMessage(char const*)>
c000fb85:	83 c4 10             	add    esp,0x10
c000fb88:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000fb8f:	83 ec 08             	sub    esp,0x8
c000fb92:	6a 13                	push   0x13
c000fb94:	50                   	push   eax
c000fb95:	e8 a0 cd ff ff       	call   c000c93a <getDevicesOfType(DeviceType)>
c000fb9a:	83 c4 0c             	add    esp,0xc
c000fb9d:	8d 76 00             	lea    esi,[esi+0x0]
c000fba0:	83 ec 0c             	sub    esp,0xc
c000fba3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fbaa:	50                   	push   eax
c000fbab:	e8 b0 fd 00 00       	call   c001f960 <LinkedList<Device>::isEmpty()>
c000fbb0:	83 c4 10             	add    esp,0x10
c000fbb3:	83 f0 01             	xor    eax,0x1
c000fbb6:	0f b6 c0             	movzx  eax,al
c000fbb9:	85 c0                	test   eax,eax
c000fbbb:	0f 84 47 01 00 00    	je     c000fd08 <ACPI::open(int, int, void*)+0x320>
c000fbc1:	83 ec 0c             	sub    esp,0xc
c000fbc4:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fbcb:	50                   	push   eax
c000fbcc:	e8 ab fd 00 00       	call   c001f97c <LinkedList<Device>::getFirstElement()>
c000fbd1:	83 c4 10             	add    esp,0x10
c000fbd4:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000fbdb:	83 ec 0c             	sub    esp,0xc
c000fbde:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fbe5:	50                   	push   eax
c000fbe6:	e8 99 fd 00 00       	call   c001f984 <LinkedList<Device>::removeFirst()>
c000fbeb:	83 c4 10             	add    esp,0x10
c000fbee:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000fbf5:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000fbfc:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000fc03:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fc07:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000fc0d:	ba 09 00 00 00       	mov    edx,0x9
c000fc12:	fc                   	cld    
c000fc13:	89 c7                	mov    edi,eax
c000fc15:	89 de                	mov    esi,ebx
c000fc17:	89 d1                	mov    ecx,edx
c000fc19:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fc1b:	83 ec 08             	sub    esp,0x8
c000fc1e:	8d 44 24 38          	lea    eax,[esp+0x38]
c000fc22:	50                   	push   eax
c000fc23:	83 ec 24             	sub    esp,0x24
c000fc26:	89 e0                	mov    eax,esp
c000fc28:	89 c3                	mov    ebx,eax
c000fc2a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000fc2e:	ba 09 00 00 00       	mov    edx,0x9
c000fc33:	89 df                	mov    edi,ebx
c000fc35:	89 c6                	mov    esi,eax
c000fc37:	89 d1                	mov    ecx,edx
c000fc39:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fc3b:	e8 92 b4 00 00       	call   c001b0d2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fc40:	83 c4 30             	add    esp,0x30
c000fc43:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000fc4a:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000fc52:	0f 84 48 ff ff ff    	je     c000fba0 <ACPI::open(int, int, void*)+0x1b8>
c000fc58:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000fc63:	83 ec 0c             	sub    esp,0xc
c000fc66:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fc6d:	e8 44 7e ff ff       	call   c0007ab6 <malloc>
c000fc72:	83 c4 10             	add    esp,0x10
c000fc75:	89 c3                	mov    ebx,eax
c000fc77:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fc7c:	83 ec 04             	sub    esp,0x4
c000fc7f:	50                   	push   eax
c000fc80:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fc87:	53                   	push   ebx
c000fc88:	e8 8b ba ff ff       	call   c000b718 <File::File(char const*, Process*)>
c000fc8d:	83 c4 10             	add    esp,0x10
c000fc90:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000fc97:	83 ec 0c             	sub    esp,0xc
c000fc9a:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fca1:	e8 f2 bd ff ff       	call   c000ba98 <File::exists()>
c000fca6:	83 c4 10             	add    esp,0x10
c000fca9:	0f b6 c0             	movzx  eax,al
c000fcac:	85 c0                	test   eax,eax
c000fcae:	74 28                	je     c000fcd8 <ACPI::open(int, int, void*)+0x2f0>
c000fcb0:	83 ec 08             	sub    esp,0x8
c000fcb3:	6a 01                	push   0x1
c000fcb5:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000fcbc:	e8 f1 53 00 00       	call   c00150b2 <Thr::loadDLL(char const*, bool)>
c000fcc1:	83 c4 10             	add    esp,0x10
c000fcc4:	83 ec 08             	sub    esp,0x8
c000fcc7:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000fcce:	50                   	push   eax
c000fccf:	e8 0f 56 00 00       	call   c00152e3 <Thr::executeDLL(unsigned long, void*)>
c000fcd4:	83 c4 10             	add    esp,0x10
c000fcd7:	90                   	nop
c000fcd8:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000fce0:	0f 84 ba fe ff ff    	je     c000fba0 <ACPI::open(int, int, void*)+0x1b8>
c000fce6:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000fced:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcef:	83 c0 08             	add    eax,0x8
c000fcf2:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcf4:	83 ec 0c             	sub    esp,0xc
c000fcf7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fcfe:	ff d0                	call   eax
c000fd00:	83 c4 10             	add    esp,0x10
c000fd03:	e9 98 fe ff ff       	jmp    c000fba0 <ACPI::open(int, int, void*)+0x1b8>
c000fd08:	83 ec 0c             	sub    esp,0xc
c000fd0b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fd12:	50                   	push   eax
c000fd13:	e8 44 fc 00 00       	call   c001f95c <LinkedList<Device>::~LinkedList()>
c000fd18:	83 c4 10             	add    esp,0x10
c000fd1b:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000fd21:	83 ec 08             	sub    esp,0x8
c000fd24:	6a 01                	push   0x1
c000fd26:	68 fd 19 02 c0       	push   0xc00219fd
c000fd2b:	e8 82 53 00 00       	call   c00150b2 <Thr::loadDLL(char const*, bool)>
c000fd30:	83 c4 10             	add    esp,0x10
c000fd33:	83 ec 08             	sub    esp,0x8
c000fd36:	53                   	push   ebx
c000fd37:	50                   	push   eax
c000fd38:	e8 a6 55 00 00       	call   c00152e3 <Thr::executeDLL(unsigned long, void*)>
c000fd3d:	83 c4 10             	add    esp,0x10
c000fd40:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fd45:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fd4b:	83 e0 04             	and    eax,0x4
c000fd4e:	0f b6 c0             	movzx  eax,al
c000fd51:	85 c0                	test   eax,eax
c000fd53:	0f 84 1b 01 00 00    	je     c000fe74 <ACPI::open(int, int, void*)+0x48c>
c000fd59:	83 ec 0c             	sub    esp,0xc
c000fd5c:	68 1a 1a 02 c0       	push   0xc0021a1a
c000fd61:	e8 15 0e 00 00       	call   c0010b7b <KeSetBootMessage(char const*)>
c000fd66:	83 c4 10             	add    esp,0x10
c000fd69:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000fd74:	83 ec 0c             	sub    esp,0xc
c000fd77:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000fd7e:	e8 33 7d ff ff       	call   c0007ab6 <malloc>
c000fd83:	83 c4 10             	add    esp,0x10
c000fd86:	89 c3                	mov    ebx,eax
c000fd88:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fd8d:	83 ec 04             	sub    esp,0x4
c000fd90:	50                   	push   eax
c000fd91:	68 37 1a 02 c0       	push   0xc0021a37
c000fd96:	53                   	push   ebx
c000fd97:	e8 7c b9 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c000fd9c:	83 c4 10             	add    esp,0x10
c000fd9f:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000fda6:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000fdae:	74 20                	je     c000fdd0 <ACPI::open(int, int, void*)+0x3e8>
c000fdb0:	83 ec 0c             	sub    esp,0xc
c000fdb3:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000fdba:	e8 d9 bc ff ff       	call   c000ba98 <File::exists()>
c000fdbf:	83 c4 10             	add    esp,0x10
c000fdc2:	0f b6 c0             	movzx  eax,al
c000fdc5:	85 c0                	test   eax,eax
c000fdc7:	74 07                	je     c000fdd0 <ACPI::open(int, int, void*)+0x3e8>
c000fdc9:	b0 01                	mov    al,0x1
c000fdcb:	eb 07                	jmp    c000fdd4 <ACPI::open(int, int, void*)+0x3ec>
c000fdcd:	8d 76 00             	lea    esi,[esi+0x0]
c000fdd0:	b0 00                	mov    al,0x0
c000fdd2:	66 90                	xchg   ax,ax
c000fdd4:	0f b6 c0             	movzx  eax,al
c000fdd7:	85 c0                	test   eax,eax
c000fdd9:	74 25                	je     c000fe00 <ACPI::open(int, int, void*)+0x418>
c000fddb:	83 ec 08             	sub    esp,0x8
c000fdde:	6a 01                	push   0x1
c000fde0:	68 37 1a 02 c0       	push   0xc0021a37
c000fde5:	e8 c8 52 00 00       	call   c00150b2 <Thr::loadDLL(char const*, bool)>
c000fdea:	83 c4 10             	add    esp,0x10
c000fded:	83 ec 08             	sub    esp,0x8
c000fdf0:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000fdf7:	50                   	push   eax
c000fdf8:	e8 e6 54 00 00       	call   c00152e3 <Thr::executeDLL(unsigned long, void*)>
c000fdfd:	83 c4 10             	add    esp,0x10
c000fe00:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000fe08:	74 2a                	je     c000fe34 <ACPI::open(int, int, void*)+0x44c>
c000fe0a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000fe12:	74 20                	je     c000fe34 <ACPI::open(int, int, void*)+0x44c>
c000fe14:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000fe1b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe1d:	83 c0 08             	add    eax,0x8
c000fe20:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe22:	83 ec 0c             	sub    esp,0xc
c000fe25:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000fe2c:	ff d0                	call   eax
c000fe2e:	83 c4 10             	add    esp,0x10
c000fe31:	8d 76 00             	lea    esi,[esi+0x0]
c000fe34:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000fe39:	83 ec 08             	sub    esp,0x8
c000fe3c:	68 54 1a 02 c0       	push   0xc0021a54
c000fe41:	50                   	push   eax
c000fe42:	e8 c1 f1 ff ff       	call   c000f008 <findDataTable(unsigned char*, char*)>
c000fe47:	83 c4 10             	add    esp,0x10
c000fe4a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000fe51:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000fe59:	74 19                	je     c000fe74 <ACPI::open(int, int, void*)+0x48c>
c000fe5b:	83 ec 08             	sub    esp,0x8
c000fe5e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fe65:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fe6c:	e8 13 fb ff ff       	call   c000f984 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000fe71:	83 c4 10             	add    esp,0x10
c000fe74:	b8 00 00 00 00       	mov    eax,0x0
c000fe79:	81 c4 70 01 00 00    	add    esp,0x170
c000fe7f:	5b                   	pop    ebx
c000fe80:	5e                   	pop    esi
c000fe81:	5f                   	pop    edi
c000fe82:	c3                   	ret    
c000fe83:	90                   	nop

c000fe84 <CPU::close(int, int, void*)>:
c000fe84:	31 c0                	xor    eax,eax
c000fe86:	c3                   	ret    
c000fe87:	90                   	nop

c000fe88 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000fe88:	60                   	pusha  
c000fe89:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fe95:	9c                   	pushf  
c000fe96:	fa                   	cli    
c000fe97:	0f 09                	wbinvd 
c000fe99:	0f 30                	wrmsr  
c000fe9b:	9d                   	popf   
c000fe9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fea0:	89 02                	mov    DWORD PTR [edx],eax
c000fea2:	61                   	popa   
c000fea3:	c3                   	ret    

c000fea4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000fea4:	60                   	pusha  
c000fea5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fea9:	9c                   	pushf  
c000feaa:	fa                   	cli    
c000feab:	0f 09                	wbinvd 
c000fead:	31 c0                	xor    eax,eax
c000feaf:	31 d2                	xor    edx,edx
c000feb1:	0f 32                	rdmsr  
c000feb3:	9d                   	popf   
c000feb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000feb8:	89 02                	mov    DWORD PTR [edx],eax
c000feba:	61                   	popa   
c000febb:	c3                   	ret    

c000febc <CPU::AMD_K6_writeback(int, int, int)>:
c000febc:	56                   	push   esi
c000febd:	53                   	push   ebx
c000febe:	83 ec 10             	sub    esp,0x10
c000fec1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fec5:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000feca:	75 5d                	jne    c000ff29 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fecc:	83 f8 08             	cmp    eax,0x8
c000fecf:	75 09                	jne    c000feda <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000fed1:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000fed6:	7e 13                	jle    c000feeb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000fed8:	eb 30                	jmp    c000ff0a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000feda:	83 f8 06             	cmp    eax,0x6
c000fedd:	7c 4a                	jl     c000ff29 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fedf:	83 f8 07             	cmp    eax,0x7
c000fee2:	7e 07                	jle    c000feeb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000fee4:	83 f8 09             	cmp    eax,0x9
c000fee7:	74 21                	je     c000ff0a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000fee9:	eb 3e                	jmp    c000ff29 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000feeb:	89 e6                	mov    esi,esp
c000feed:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c000fef3:	56                   	push   esi
c000fef4:	c1 eb 15             	shr    ebx,0x15
c000fef7:	68 82 00 00 c0       	push   0xc0000082
c000fefc:	83 e3 7e             	and    ebx,0x7e
c000feff:	e8 a0 ff ff ff       	call   c000fea4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ff04:	56                   	push   esi
c000ff05:	6a 00                	push   0x0
c000ff07:	53                   	push   ebx
c000ff08:	eb 12                	jmp    c000ff1c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000ff0a:	89 e3                	mov    ebx,esp
c000ff0c:	53                   	push   ebx
c000ff0d:	68 82 00 00 c0       	push   0xc0000082
c000ff12:	e8 8d ff ff ff       	call   c000fea4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ff17:	53                   	push   ebx
c000ff18:	6a 00                	push   0x0
c000ff1a:	6a 00                	push   0x0
c000ff1c:	68 82 00 00 c0       	push   0xc0000082
c000ff21:	e8 62 ff ff ff       	call   c000fe88 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000ff26:	83 c4 18             	add    esp,0x18
c000ff29:	83 c4 10             	add    esp,0x10
c000ff2c:	5b                   	pop    ebx
c000ff2d:	5e                   	pop    esi
c000ff2e:	c3                   	ret    
c000ff2f:	90                   	nop

c000ff30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000ff30:	55                   	push   ebp
c000ff31:	57                   	push   edi
c000ff32:	56                   	push   esi
c000ff33:	53                   	push   ebx
c000ff34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff38:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ff3c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ff40:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000ff44:	39 05 18 30 02 c0    	cmp    DWORD PTR ds:0xc0023018,eax
c000ff4a:	75 23                	jne    c000ff6f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000ff4c:	a1 8c 8d 02 c0       	mov    eax,ds:0xc0028d8c
c000ff51:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ff55:	89 06                	mov    DWORD PTR [esi],eax
c000ff57:	a1 88 8d 02 c0       	mov    eax,ds:0xc0028d88
c000ff5c:	89 07                	mov    DWORD PTR [edi],eax
c000ff5e:	a1 84 8d 02 c0       	mov    eax,ds:0xc0028d84
c000ff63:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ff66:	a1 80 8d 02 c0       	mov    eax,ds:0xc0028d80
c000ff6b:	89 02                	mov    DWORD PTR [edx],eax
c000ff6d:	eb 3f                	jmp    c000ffae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000ff6f:	31 c9                	xor    ecx,ecx
c000ff71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff75:	0f a2                	cpuid  
c000ff77:	89 06                	mov    DWORD PTR [esi],eax
c000ff79:	89 1f                	mov    DWORD PTR [edi],ebx
c000ff7b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff7f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000ff82:	89 10                	mov    DWORD PTR [eax],edx
c000ff84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff88:	a3 18 30 02 c0       	mov    ds:0xc0023018,eax
c000ff8d:	8b 06                	mov    eax,DWORD PTR [esi]
c000ff8f:	a3 8c 8d 02 c0       	mov    ds:0xc0028d8c,eax
c000ff94:	8b 07                	mov    eax,DWORD PTR [edi]
c000ff96:	a3 88 8d 02 c0       	mov    ds:0xc0028d88,eax
c000ff9b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ff9e:	a3 84 8d 02 c0       	mov    ds:0xc0028d84,eax
c000ffa3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffa7:	8b 00                	mov    eax,DWORD PTR [eax]
c000ffa9:	a3 80 8d 02 c0       	mov    ds:0xc0028d80,eax
c000ffae:	5b                   	pop    ebx
c000ffaf:	5e                   	pop    esi
c000ffb0:	5f                   	pop    edi
c000ffb1:	5d                   	pop    ebp
c000ffb2:	c3                   	ret    
c000ffb3:	90                   	nop

c000ffb4 <CPU::cpuidCheckEDX(unsigned int)>:
c000ffb4:	83 ec 10             	sub    esp,0x10
c000ffb7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffbb:	50                   	push   eax
c000ffbc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffc0:	50                   	push   eax
c000ffc1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffc5:	50                   	push   eax
c000ffc6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffca:	50                   	push   eax
c000ffcb:	6a 01                	push   0x1
c000ffcd:	e8 5e ff ff ff       	call   c000ff30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ffd2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ffd6:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000ffda:	0f 95 c0             	setne  al
c000ffdd:	83 c4 24             	add    esp,0x24
c000ffe0:	c3                   	ret    
c000ffe1:	90                   	nop

c000ffe2 <CPU::cpuidCheckECX(unsigned int)>:
c000ffe2:	83 ec 10             	sub    esp,0x10
c000ffe5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffe9:	50                   	push   eax
c000ffea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffee:	50                   	push   eax
c000ffef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fff3:	50                   	push   eax
c000fff4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fff8:	50                   	push   eax
c000fff9:	6a 01                	push   0x1
c000fffb:	e8 30 ff ff ff       	call   c000ff30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010000:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010004:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010008:	0f 95 c0             	setne  al
c001000b:	83 c4 24             	add    esp,0x24
c001000e:	c3                   	ret    
c001000f:	90                   	nop

c0010010 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0010010:	83 ec 10             	sub    esp,0x10
c0010013:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010017:	50                   	push   eax
c0010018:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001001c:	50                   	push   eax
c001001d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010021:	50                   	push   eax
c0010022:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010026:	50                   	push   eax
c0010027:	6a 07                	push   0x7
c0010029:	e8 02 ff ff ff       	call   c000ff30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001002e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010032:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0010036:	0f 95 c0             	setne  al
c0010039:	83 c4 24             	add    esp,0x24
c001003c:	c3                   	ret    
c001003d:	90                   	nop

c001003e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001003e:	83 ec 10             	sub    esp,0x10
c0010041:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010045:	50                   	push   eax
c0010046:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001004a:	50                   	push   eax
c001004b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001004f:	50                   	push   eax
c0010050:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010054:	50                   	push   eax
c0010055:	6a 07                	push   0x7
c0010057:	e8 d4 fe ff ff       	call   c000ff30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001005c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010060:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010064:	0f 95 c0             	setne  al
c0010067:	83 c4 24             	add    esp,0x24
c001006a:	c3                   	ret    
c001006b:	90                   	nop

c001006c <CPU::CPU()>:
c001006c:	83 ec 0c             	sub    esp,0xc
c001006f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010073:	83 ec 08             	sub    esp,0x8
c0010076:	68 79 1b 02 c0       	push   0xc0021b79
c001007b:	50                   	push   eax
c001007c:	e8 39 c7 ff ff       	call   c000c7ba <Device::Device(char const*)>
c0010081:	83 c4 10             	add    esp,0x10
c0010084:	ba 0c 1c 02 c0       	mov    edx,0xc0021c0c
c0010089:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001008d:	89 10                	mov    DWORD PTR [eax],edx
c001008f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010093:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001009d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100a1:	05 78 01 00 00       	add    eax,0x178
c00100a6:	83 ec 0c             	sub    esp,0xc
c00100a9:	50                   	push   eax
c00100aa:	e8 ad 72 ff ff       	call   c000735c <GDT::GDT()>
c00100af:	83 c4 10             	add    esp,0x10
c00100b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100b6:	05 7c 09 00 00       	add    eax,0x97c
c00100bb:	83 ec 0c             	sub    esp,0xc
c00100be:	50                   	push   eax
c00100bf:	e8 e8 74 ff ff       	call   c00075ac <IDT::IDT()>
c00100c4:	83 c4 10             	add    esp,0x10
c00100c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100cb:	05 7c 11 00 00       	add    eax,0x117c
c00100d0:	83 ec 0c             	sub    esp,0xc
c00100d3:	50                   	push   eax
c00100d4:	e8 6b 8e ff ff       	call   c0008f44 <TSS::TSS()>
c00100d9:	83 c4 10             	add    esp,0x10
c00100dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100e0:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c00100e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100eb:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c00100f5:	90                   	nop
c00100f6:	83 c4 0c             	add    esp,0xc
c00100f9:	c3                   	ret    

c00100fa <CPU::displayFeatures()>:
c00100fa:	c3                   	ret    
c00100fb:	90                   	nop

c00100fc <CPU::detectFeatures()>:
c00100fc:	55                   	push   ebp
c00100fd:	57                   	push   edi
c00100fe:	56                   	push   esi
c00100ff:	53                   	push   ebx
c0010100:	83 ec 30             	sub    esp,0x30
c0010103:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010107:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0010111:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0010118:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001011e:	6a 0d                	push   0xd
c0010120:	6a 00                	push   0x0
c0010122:	55                   	push   ebp
c0010123:	e8 c8 03 ff ff       	call   c00004f0 <memset>
c0010128:	83 c4 10             	add    esp,0x10
c001012b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010130:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c0010137:	0f 84 db 05 00 00    	je     c0010718 <CPU::detectFeatures()+0x61c>
c001013d:	83 ec 0c             	sub    esp,0xc
c0010140:	89 ef                	mov    edi,ebp
c0010142:	6a 10                	push   0x10
c0010144:	e8 6b fe ff ff       	call   c000ffb4 <CPU::cpuidCheckEDX(unsigned int)>
c0010149:	83 e0 01             	and    eax,0x1
c001014c:	8d 14 00             	lea    edx,[eax+eax*1]
c001014f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010155:	83 e0 fd             	and    eax,0xfffffffd
c0010158:	09 d0                	or     eax,edx
c001015a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010160:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0010167:	e8 48 fe ff ff       	call   c000ffb4 <CPU::cpuidCheckEDX(unsigned int)>
c001016c:	83 e0 01             	and    eax,0x1
c001016f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010176:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001017c:	83 e0 fb             	and    eax,0xfffffffb
c001017f:	09 d0                	or     eax,edx
c0010181:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010187:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001018e:	e8 21 fe ff ff       	call   c000ffb4 <CPU::cpuidCheckEDX(unsigned int)>
c0010193:	83 e0 01             	and    eax,0x1
c0010196:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001019d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00101a3:	83 e0 f7             	and    eax,0xfffffff7
c00101a6:	09 d0                	or     eax,edx
c00101a8:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00101ae:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00101b5:	e8 fa fd ff ff       	call   c000ffb4 <CPU::cpuidCheckEDX(unsigned int)>
c00101ba:	83 e0 01             	and    eax,0x1
c00101bd:	c1 e0 04             	shl    eax,0x4
c00101c0:	89 c2                	mov    edx,eax
c00101c2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00101c8:	83 e0 ef             	and    eax,0xffffffef
c00101cb:	09 d0                	or     eax,edx
c00101cd:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00101d3:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00101da:	e8 d5 fd ff ff       	call   c000ffb4 <CPU::cpuidCheckEDX(unsigned int)>
c00101df:	83 e0 01             	and    eax,0x1
c00101e2:	c1 e0 05             	shl    eax,0x5
c00101e5:	89 c2                	mov    edx,eax
c00101e7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00101ed:	83 e0 df             	and    eax,0xffffffdf
c00101f0:	09 d0                	or     eax,edx
c00101f2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00101f8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00101ff:	e8 b0 fd ff ff       	call   c000ffb4 <CPU::cpuidCheckEDX(unsigned int)>
c0010204:	83 e0 01             	and    eax,0x1
c0010207:	8d 14 00             	lea    edx,[eax+eax*1]
c001020a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010210:	83 e0 fd             	and    eax,0xfffffffd
c0010213:	09 d0                	or     eax,edx
c0010215:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001021b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0010222:	e8 8d fd ff ff       	call   c000ffb4 <CPU::cpuidCheckEDX(unsigned int)>
c0010227:	83 e0 01             	and    eax,0x1
c001022a:	c1 e0 06             	shl    eax,0x6
c001022d:	89 c2                	mov    edx,eax
c001022f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010235:	83 e0 bf             	and    eax,0xffffffbf
c0010238:	09 d0                	or     eax,edx
c001023a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010240:	58                   	pop    eax
c0010241:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010245:	50                   	push   eax
c0010246:	8d 44 24 28          	lea    eax,[esp+0x28]
c001024a:	50                   	push   eax
c001024b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001024f:	56                   	push   esi
c0010250:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010254:	50                   	push   eax
c0010255:	6a 00                	push   0x0
c0010257:	e8 d4 fc ff ff       	call   c000ff30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001025c:	b8 04 00 00 00       	mov    eax,0x4
c0010261:	89 c1                	mov    ecx,eax
c0010263:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010265:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001026b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001026f:	89 c1                	mov    ecx,eax
c0010271:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010273:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0010279:	8d 74 24 38          	lea    esi,[esp+0x38]
c001027d:	89 c1                	mov    ecx,eax
c001027f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010281:	83 c4 18             	add    esp,0x18
c0010284:	68 88 1a 02 c0       	push   0xc0021a88
c0010289:	55                   	push   ebp
c001028a:	e8 c1 04 ff ff       	call   c0000750 <strcmp>
c001028f:	83 c4 10             	add    esp,0x10
c0010292:	85 c0                	test   eax,eax
c0010294:	75 0f                	jne    c00102a5 <CPU::detectFeatures()+0x1a9>
c0010296:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00102a0:	e9 22 02 00 00       	jmp    c00104c7 <CPU::detectFeatures()+0x3cb>
c00102a5:	50                   	push   eax
c00102a6:	50                   	push   eax
c00102a7:	68 95 1a 02 c0       	push   0xc0021a95
c00102ac:	55                   	push   ebp
c00102ad:	e8 9e 04 ff ff       	call   c0000750 <strcmp>
c00102b2:	83 c4 10             	add    esp,0x10
c00102b5:	85 c0                	test   eax,eax
c00102b7:	74 dd                	je     c0010296 <CPU::detectFeatures()+0x19a>
c00102b9:	50                   	push   eax
c00102ba:	50                   	push   eax
c00102bb:	68 a2 1a 02 c0       	push   0xc0021aa2
c00102c0:	55                   	push   ebp
c00102c1:	e8 8a 04 ff ff       	call   c0000750 <strcmp>
c00102c6:	83 c4 10             	add    esp,0x10
c00102c9:	85 c0                	test   eax,eax
c00102cb:	74 2a                	je     c00102f7 <CPU::detectFeatures()+0x1fb>
c00102cd:	50                   	push   eax
c00102ce:	50                   	push   eax
c00102cf:	68 af 1a 02 c0       	push   0xc0021aaf
c00102d4:	55                   	push   ebp
c00102d5:	e8 76 04 ff ff       	call   c0000750 <strcmp>
c00102da:	83 c4 10             	add    esp,0x10
c00102dd:	85 c0                	test   eax,eax
c00102df:	74 16                	je     c00102f7 <CPU::detectFeatures()+0x1fb>
c00102e1:	50                   	push   eax
c00102e2:	50                   	push   eax
c00102e3:	68 bc 1a 02 c0       	push   0xc0021abc
c00102e8:	55                   	push   ebp
c00102e9:	e8 62 04 ff ff       	call   c0000750 <strcmp>
c00102ee:	83 c4 10             	add    esp,0x10
c00102f1:	85 c0                	test   eax,eax
c00102f3:	74 48                	je     c001033d <CPU::detectFeatures()+0x241>
c00102f5:	eb 0f                	jmp    c0010306 <CPU::detectFeatures()+0x20a>
c00102f7:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0010301:	e9 c1 01 00 00       	jmp    c00104c7 <CPU::detectFeatures()+0x3cb>
c0010306:	50                   	push   eax
c0010307:	50                   	push   eax
c0010308:	68 c9 1a 02 c0       	push   0xc0021ac9
c001030d:	55                   	push   ebp
c001030e:	e8 3d 04 ff ff       	call   c0000750 <strcmp>
c0010313:	83 c4 10             	add    esp,0x10
c0010316:	85 c0                	test   eax,eax
c0010318:	74 23                	je     c001033d <CPU::detectFeatures()+0x241>
c001031a:	57                   	push   edi
c001031b:	57                   	push   edi
c001031c:	68 d6 1a 02 c0       	push   0xc0021ad6
c0010321:	55                   	push   ebp
c0010322:	e8 29 04 ff ff       	call   c0000750 <strcmp>
c0010327:	83 c4 10             	add    esp,0x10
c001032a:	85 c0                	test   eax,eax
c001032c:	75 1e                	jne    c001034c <CPU::detectFeatures()+0x250>
c001032e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010338:	e9 8a 01 00 00       	jmp    c00104c7 <CPU::detectFeatures()+0x3cb>
c001033d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0010347:	e9 7b 01 00 00       	jmp    c00104c7 <CPU::detectFeatures()+0x3cb>
c001034c:	56                   	push   esi
c001034d:	56                   	push   esi
c001034e:	68 e3 1a 02 c0       	push   0xc0021ae3
c0010353:	55                   	push   ebp
c0010354:	e8 f7 03 ff ff       	call   c0000750 <strcmp>
c0010359:	83 c4 10             	add    esp,0x10
c001035c:	85 c0                	test   eax,eax
c001035e:	75 0f                	jne    c001036f <CPU::detectFeatures()+0x273>
c0010360:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001036a:	e9 58 01 00 00       	jmp    c00104c7 <CPU::detectFeatures()+0x3cb>
c001036f:	51                   	push   ecx
c0010370:	51                   	push   ecx
c0010371:	68 a2 1a 02 c0       	push   0xc0021aa2
c0010376:	55                   	push   ebp
c0010377:	e8 d4 03 ff ff       	call   c0000750 <strcmp>
c001037c:	83 c4 10             	add    esp,0x10
c001037f:	85 c0                	test   eax,eax
c0010381:	75 0f                	jne    c0010392 <CPU::detectFeatures()+0x296>
c0010383:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001038d:	e9 35 01 00 00       	jmp    c00104c7 <CPU::detectFeatures()+0x3cb>
c0010392:	52                   	push   edx
c0010393:	52                   	push   edx
c0010394:	68 f0 1a 02 c0       	push   0xc0021af0
c0010399:	55                   	push   ebp
c001039a:	e8 b1 03 ff ff       	call   c0000750 <strcmp>
c001039f:	83 c4 10             	add    esp,0x10
c00103a2:	85 c0                	test   eax,eax
c00103a4:	75 0f                	jne    c00103b5 <CPU::detectFeatures()+0x2b9>
c00103a6:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00103b0:	e9 12 01 00 00       	jmp    c00104c7 <CPU::detectFeatures()+0x3cb>
c00103b5:	50                   	push   eax
c00103b6:	50                   	push   eax
c00103b7:	68 fd 1a 02 c0       	push   0xc0021afd
c00103bc:	55                   	push   ebp
c00103bd:	e8 8e 03 ff ff       	call   c0000750 <strcmp>
c00103c2:	83 c4 10             	add    esp,0x10
c00103c5:	85 c0                	test   eax,eax
c00103c7:	75 0f                	jne    c00103d8 <CPU::detectFeatures()+0x2dc>
c00103c9:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00103d3:	e9 ef 00 00 00       	jmp    c00104c7 <CPU::detectFeatures()+0x3cb>
c00103d8:	50                   	push   eax
c00103d9:	50                   	push   eax
c00103da:	68 0a 1b 02 c0       	push   0xc0021b0a
c00103df:	55                   	push   ebp
c00103e0:	e8 6b 03 ff ff       	call   c0000750 <strcmp>
c00103e5:	83 c4 10             	add    esp,0x10
c00103e8:	85 c0                	test   eax,eax
c00103ea:	75 0f                	jne    c00103fb <CPU::detectFeatures()+0x2ff>
c00103ec:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00103f6:	e9 cc 00 00 00       	jmp    c00104c7 <CPU::detectFeatures()+0x3cb>
c00103fb:	50                   	push   eax
c00103fc:	50                   	push   eax
c00103fd:	68 17 1b 02 c0       	push   0xc0021b17
c0010402:	55                   	push   ebp
c0010403:	e8 48 03 ff ff       	call   c0000750 <strcmp>
c0010408:	83 c4 10             	add    esp,0x10
c001040b:	85 c0                	test   eax,eax
c001040d:	75 0f                	jne    c001041e <CPU::detectFeatures()+0x322>
c001040f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0010419:	e9 a9 00 00 00       	jmp    c00104c7 <CPU::detectFeatures()+0x3cb>
c001041e:	50                   	push   eax
c001041f:	50                   	push   eax
c0010420:	68 24 1b 02 c0       	push   0xc0021b24
c0010425:	55                   	push   ebp
c0010426:	e8 25 03 ff ff       	call   c0000750 <strcmp>
c001042b:	83 c4 10             	add    esp,0x10
c001042e:	85 c0                	test   eax,eax
c0010430:	75 0f                	jne    c0010441 <CPU::detectFeatures()+0x345>
c0010432:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001043c:	e9 86 00 00 00       	jmp    c00104c7 <CPU::detectFeatures()+0x3cb>
c0010441:	50                   	push   eax
c0010442:	50                   	push   eax
c0010443:	68 31 1b 02 c0       	push   0xc0021b31
c0010448:	55                   	push   ebp
c0010449:	e8 02 03 ff ff       	call   c0000750 <strcmp>
c001044e:	83 c4 10             	add    esp,0x10
c0010451:	85 c0                	test   eax,eax
c0010453:	75 0c                	jne    c0010461 <CPU::detectFeatures()+0x365>
c0010455:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001045f:	eb 66                	jmp    c00104c7 <CPU::detectFeatures()+0x3cb>
c0010461:	50                   	push   eax
c0010462:	50                   	push   eax
c0010463:	68 3e 1b 02 c0       	push   0xc0021b3e
c0010468:	55                   	push   ebp
c0010469:	e8 e2 02 ff ff       	call   c0000750 <strcmp>
c001046e:	83 c4 10             	add    esp,0x10
c0010471:	85 c0                	test   eax,eax
c0010473:	75 0c                	jne    c0010481 <CPU::detectFeatures()+0x385>
c0010475:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001047f:	eb 46                	jmp    c00104c7 <CPU::detectFeatures()+0x3cb>
c0010481:	57                   	push   edi
c0010482:	57                   	push   edi
c0010483:	68 4b 1b 02 c0       	push   0xc0021b4b
c0010488:	55                   	push   ebp
c0010489:	e8 c2 02 ff ff       	call   c0000750 <strcmp>
c001048e:	83 c4 10             	add    esp,0x10
c0010491:	85 c0                	test   eax,eax
c0010493:	74 e0                	je     c0010475 <CPU::detectFeatures()+0x379>
c0010495:	56                   	push   esi
c0010496:	56                   	push   esi
c0010497:	68 58 1b 02 c0       	push   0xc0021b58
c001049c:	55                   	push   ebp
c001049d:	e8 ae 02 ff ff       	call   c0000750 <strcmp>
c00104a2:	83 c4 10             	add    esp,0x10
c00104a5:	85 c0                	test   eax,eax
c00104a7:	74 cc                	je     c0010475 <CPU::detectFeatures()+0x379>
c00104a9:	51                   	push   ecx
c00104aa:	51                   	push   ecx
c00104ab:	68 65 1b 02 c0       	push   0xc0021b65
c00104b0:	55                   	push   ebp
c00104b1:	e8 9a 02 ff ff       	call   c0000750 <strcmp>
c00104b6:	83 c4 10             	add    esp,0x10
c00104b9:	85 c0                	test   eax,eax
c00104bb:	74 b8                	je     c0010475 <CPU::detectFeatures()+0x379>
c00104bd:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00104c7:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00104cc:	0f 86 be 00 00 00    	jbe    c0010590 <CPU::detectFeatures()+0x494>
c00104d2:	83 ec 0c             	sub    esp,0xc
c00104d5:	68 80 00 00 00       	push   0x80
c00104da:	e8 31 fb ff ff       	call   c0010010 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00104df:	83 e0 01             	and    eax,0x1
c00104e2:	c1 e0 06             	shl    eax,0x6
c00104e5:	89 c2                	mov    edx,eax
c00104e7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104ed:	83 e0 bf             	and    eax,0xffffffbf
c00104f0:	09 d0                	or     eax,edx
c00104f2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104f8:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00104ff:	e8 0c fb ff ff       	call   c0010010 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010504:	83 e0 01             	and    eax,0x1
c0010507:	c1 e0 04             	shl    eax,0x4
c001050a:	89 c2                	mov    edx,eax
c001050c:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010512:	83 e0 ef             	and    eax,0xffffffef
c0010515:	09 d0                	or     eax,edx
c0010517:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001051d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0010524:	e8 e7 fa ff ff       	call   c0010010 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010529:	89 c2                	mov    edx,eax
c001052b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010531:	c1 e2 07             	shl    edx,0x7
c0010534:	83 e0 7f             	and    eax,0x7f
c0010537:	09 d0                	or     eax,edx
c0010539:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001053f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0010546:	e8 f3 fa ff ff       	call   c001003e <CPU::cpuidCheckExtendedECX(unsigned int)>
c001054b:	83 e0 01             	and    eax,0x1
c001054e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010555:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001055b:	83 e0 f7             	and    eax,0xfffffff7
c001055e:	09 d0                	or     eax,edx
c0010560:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010566:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001056d:	e8 cc fa ff ff       	call   c001003e <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010572:	83 c4 10             	add    esp,0x10
c0010575:	83 e0 01             	and    eax,0x1
c0010578:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001057f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010585:	83 e0 fb             	and    eax,0xfffffffb
c0010588:	09 d0                	or     eax,edx
c001058a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010590:	83 ec 0c             	sub    esp,0xc
c0010593:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010597:	50                   	push   eax
c0010598:	8d 44 24 28          	lea    eax,[esp+0x28]
c001059c:	50                   	push   eax
c001059d:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00105a1:	57                   	push   edi
c00105a2:	8d 74 24 28          	lea    esi,[esp+0x28]
c00105a6:	56                   	push   esi
c00105a7:	6a 01                	push   0x1
c00105a9:	e8 82 f9 ff ff       	call   c000ff30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00105ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00105b2:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00105b8:	89 c1                	mov    ecx,eax
c00105ba:	83 e2 f0             	and    edx,0xfffffff0
c00105bd:	83 e1 0f             	and    ecx,0xf
c00105c0:	09 ca                	or     edx,ecx
c00105c2:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00105c8:	89 c2                	mov    edx,eax
c00105ca:	c1 ea 04             	shr    edx,0x4
c00105cd:	83 e2 0f             	and    edx,0xf
c00105d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00105d4:	89 d1                	mov    ecx,edx
c00105d6:	83 c4 20             	add    esp,0x20
c00105d9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00105df:	c1 e1 06             	shl    ecx,0x6
c00105e2:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c00105e8:	09 ca                	or     edx,ecx
c00105ea:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00105f1:	89 c2                	mov    edx,eax
c00105f3:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c00105f9:	c1 ea 08             	shr    edx,0x8
c00105fc:	83 e1 3f             	and    ecx,0x3f
c00105ff:	83 e2 0f             	and    edx,0xf
c0010602:	89 d5                	mov    ebp,edx
c0010604:	83 e5 03             	and    ebp,0x3
c0010607:	c1 e5 06             	shl    ebp,0x6
c001060a:	09 e9                	or     ecx,ebp
c001060c:	89 d5                	mov    ebp,edx
c001060e:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010614:	c1 ed 02             	shr    ebp,0x2
c0010617:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001061d:	83 e1 c0             	and    ecx,0xffffffc0
c0010620:	09 e9                	or     ecx,ebp
c0010622:	89 c5                	mov    ebp,eax
c0010624:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001062a:	c1 ed 08             	shr    ebp,0x8
c001062d:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010633:	83 e5 30             	and    ebp,0x30
c0010636:	83 e1 cf             	and    ecx,0xffffffcf
c0010639:	09 e9                	or     ecx,ebp
c001063b:	83 fa 06             	cmp    edx,0x6
c001063e:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0010644:	74 05                	je     c001064b <CPU::detectFeatures()+0x54f>
c0010646:	83 fa 0f             	cmp    edx,0xf
c0010649:	75 64                	jne    c00106af <CPU::detectFeatures()+0x5b3>
c001064b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010651:	89 c1                	mov    ecx,eax
c0010653:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010659:	c1 e9 10             	shr    ecx,0x10
c001065c:	c1 e1 04             	shl    ecx,0x4
c001065f:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0010663:	0f b6 c9             	movzx  ecx,cl
c0010666:	c1 e1 06             	shl    ecx,0x6
c0010669:	09 e9                	or     ecx,ebp
c001066b:	83 fa 0f             	cmp    edx,0xf
c001066e:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010675:	75 38                	jne    c00106af <CPU::detectFeatures()+0x5b3>
c0010677:	c1 e8 14             	shr    eax,0x14
c001067a:	83 c0 0f             	add    eax,0xf
c001067d:	0f b6 c0             	movzx  eax,al
c0010680:	89 c2                	mov    edx,eax
c0010682:	c1 e8 02             	shr    eax,0x2
c0010685:	83 e2 03             	and    edx,0x3
c0010688:	89 d1                	mov    ecx,edx
c001068a:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010690:	c1 e1 06             	shl    ecx,0x6
c0010693:	83 e2 3f             	and    edx,0x3f
c0010696:	09 ca                	or     edx,ecx
c0010698:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001069e:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00106a4:	83 e2 c0             	and    edx,0xffffffc0
c00106a7:	09 d0                	or     eax,edx
c00106a9:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00106af:	83 ec 0c             	sub    esp,0xc
c00106b2:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00106b8:	83 c8 07             	or     eax,0x7
c00106bb:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00106c1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00106c5:	50                   	push   eax
c00106c6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00106ca:	55                   	push   ebp
c00106cb:	57                   	push   edi
c00106cc:	56                   	push   esi
c00106cd:	68 00 00 00 80       	push   0x80000000
c00106d2:	e8 59 f8 ff ff       	call   c000ff30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00106d7:	83 c4 20             	add    esp,0x20
c00106da:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00106e2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00106e6:	76 1e                	jbe    c0010706 <CPU::detectFeatures()+0x60a>
c00106e8:	83 ec 0c             	sub    esp,0xc
c00106eb:	50                   	push   eax
c00106ec:	55                   	push   ebp
c00106ed:	57                   	push   edi
c00106ee:	56                   	push   esi
c00106ef:	68 01 00 00 80       	push   0x80000001
c00106f4:	e8 37 f8 ff ff       	call   c000ff30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00106f9:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010703:	83 c4 20             	add    esp,0x20
c0010706:	52                   	push   edx
c0010707:	52                   	push   edx
c0010708:	68 71 1b 02 c0       	push   0xc0021b71
c001070d:	53                   	push   ebx
c001070e:	e8 99 c0 ff ff       	call   c000c7ac <Device::setName(char const*)>
c0010713:	83 c4 10             	add    esp,0x10
c0010716:	eb 69                	jmp    c0010781 <CPU::detectFeatures()+0x685>
c0010718:	50                   	push   eax
c0010719:	50                   	push   eax
c001071a:	68 d6 1a 02 c0       	push   0xc0021ad6
c001071f:	55                   	push   ebp
c0010720:	e8 1b ff fe ff       	call   c0000640 <strcpy>
c0010725:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001072f:	e8 8f fa fe ff       	call   c00001c3 <is486>
c0010734:	83 c4 10             	add    esp,0x10
c0010737:	85 c0                	test   eax,eax
c0010739:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001073f:	74 1f                	je     c0010760 <CPU::detectFeatures()+0x664>
c0010741:	83 c8 07             	or     eax,0x7
c0010744:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001074a:	0f 20 c0             	mov    eax,cr0
c001074d:	83 e0 14             	and    eax,0x14
c0010750:	83 f8 04             	cmp    eax,0x4
c0010753:	75 10                	jne    c0010765 <CPU::detectFeatures()+0x669>
c0010755:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001075b:	83 e0 fd             	and    eax,0xfffffffd
c001075e:	eb 1b                	jmp    c001077b <CPU::detectFeatures()+0x67f>
c0010760:	83 e0 f8             	and    eax,0xfffffff8
c0010763:	eb df                	jmp    c0010744 <CPU::detectFeatures()+0x648>
c0010765:	e8 34 fa fe ff       	call   c000019e <hasLegacyFPU>
c001076a:	83 e0 01             	and    eax,0x1
c001076d:	8d 14 00             	lea    edx,[eax+eax*1]
c0010770:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010776:	83 e0 fd             	and    eax,0xfffffffd
c0010779:	09 d0                	or     eax,edx
c001077b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010781:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010788:	74 17                	je     c00107a1 <CPU::detectFeatures()+0x6a5>
c001078a:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c0010790:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010796:	83 c8 10             	or     eax,0x10
c0010799:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c001079f:	eb 20                	jmp    c00107c1 <CPU::detectFeatures()+0x6c5>
c00107a1:	e8 f8 f9 fe ff       	call   c000019e <hasLegacyFPU>
c00107a6:	83 e0 01             	and    eax,0x1
c00107a9:	8d 14 00             	lea    edx,[eax+eax*1]
c00107ac:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00107b2:	83 e0 fd             	and    eax,0xfffffffd
c00107b5:	09 d0                	or     eax,edx
c00107b7:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00107bd:	a8 02                	test   al,0x2
c00107bf:	75 c9                	jne    c001078a <CPU::detectFeatures()+0x68e>
c00107c1:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c00107c8:	83 c4 2c             	add    esp,0x2c
c00107cb:	5b                   	pop    ebx
c00107cc:	5e                   	pop    esi
c00107cd:	5f                   	pop    edi
c00107ce:	5d                   	pop    ebp
c00107cf:	c3                   	ret    

c00107d0 <CPU::setupSMEP()>:
c00107d0:	0f 20 e0             	mov    eax,cr4
c00107d3:	0d 00 00 10 00       	or     eax,0x100000
c00107d8:	0f 22 e0             	mov    cr4,eax
c00107db:	c3                   	ret    

c00107dc <CPU::setupUMIP()>:
c00107dc:	0f 20 e0             	mov    eax,cr4
c00107df:	80 cc 08             	or     ah,0x8
c00107e2:	0f 22 e0             	mov    cr4,eax
c00107e5:	c3                   	ret    

c00107e6 <CPU::setupTSC()>:
c00107e6:	0f 20 e0             	mov    eax,cr4
c00107e9:	83 c8 04             	or     eax,0x4
c00107ec:	0f 22 e0             	mov    cr4,eax
c00107ef:	c3                   	ret    

c00107f0 <CPU::setupLargePages()>:
c00107f0:	0f 20 e0             	mov    eax,cr4
c00107f3:	83 c8 10             	or     eax,0x10
c00107f6:	0f 22 e0             	mov    cr4,eax
c00107f9:	c3                   	ret    

c00107fa <CPU::setupPAT()>:
c00107fa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00107ff:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010806:	74 2c                	je     c0010834 <CPU::setupPAT()+0x3a>
c0010808:	53                   	push   ebx
c0010809:	83 ec 10             	sub    esp,0x10
c001080c:	68 77 02 00 00       	push   0x277
c0010811:	50                   	push   eax
c0010812:	e8 a9 68 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0010817:	83 e2 f8             	and    edx,0xfffffff8
c001081a:	83 ca 01             	or     edx,0x1
c001081d:	52                   	push   edx
c001081e:	50                   	push   eax
c001081f:	68 77 02 00 00       	push   0x277
c0010824:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001082a:	e8 bd 68 ff ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c001082f:	83 c4 28             	add    esp,0x28
c0010832:	5b                   	pop    ebx
c0010833:	c3                   	ret    
c0010834:	c3                   	ret    
c0010835:	90                   	nop

c0010836 <CPU::setupMTRR()>:
c0010836:	c3                   	ret    
c0010837:	90                   	nop

c0010838 <CPU::setupGlobalPages()>:
c0010838:	0f 20 e0             	mov    eax,cr4
c001083b:	0c 80                	or     al,0x80
c001083d:	0f 22 e0             	mov    cr4,eax
c0010840:	c3                   	ret    
c0010841:	90                   	nop

c0010842 <CPU::allowUsermodeDataAccess()>:
c0010842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010846:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001084d:	74 03                	je     c0010852 <CPU::allowUsermodeDataAccess()+0x10>
c001084f:	0f 01 cb             	stac   
c0010852:	c3                   	ret    
c0010853:	90                   	nop

c0010854 <CPU::prohibitUsermodeDataAccess()>:
c0010854:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010858:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001085f:	74 03                	je     c0010864 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010861:	0f 01 ca             	clac   
c0010864:	c3                   	ret    
c0010865:	90                   	nop

c0010866 <CPU::setupSMAP()>:
c0010866:	0f 20 e0             	mov    eax,cr4
c0010869:	0d 00 00 20 00       	or     eax,0x200000
c001086e:	0f 22 e0             	mov    cr4,eax
c0010871:	eb e1                	jmp    c0010854 <CPU::prohibitUsermodeDataAccess()>
c0010873:	90                   	nop

c0010874 <CPU::setupFeatures()>:
c0010874:	53                   	push   ebx
c0010875:	83 ec 08             	sub    esp,0x8
c0010878:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001087c:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010883:	74 18                	je     c001089d <CPU::setupFeatures()+0x29>
c0010885:	83 ec 0c             	sub    esp,0xc
c0010888:	68 7d 1b 02 c0       	push   0xc0021b7d
c001088d:	e8 b3 a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010892:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010895:	e8 42 ff ff ff       	call   c00107dc <CPU::setupUMIP()>
c001089a:	83 c4 10             	add    esp,0x10
c001089d:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c00108a4:	74 18                	je     c00108be <CPU::setupFeatures()+0x4a>
c00108a6:	83 ec 0c             	sub    esp,0xc
c00108a9:	68 87 1b 02 c0       	push   0xc0021b87
c00108ae:	e8 92 a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00108b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108b6:	e8 2b ff ff ff       	call   c00107e6 <CPU::setupTSC()>
c00108bb:	83 c4 10             	add    esp,0x10
c00108be:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c00108c5:	74 18                	je     c00108df <CPU::setupFeatures()+0x6b>
c00108c7:	83 ec 0c             	sub    esp,0xc
c00108ca:	68 90 1b 02 c0       	push   0xc0021b90
c00108cf:	e8 71 a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00108d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108d7:	e8 14 ff ff ff       	call   c00107f0 <CPU::setupLargePages()>
c00108dc:	83 c4 10             	add    esp,0x10
c00108df:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c00108e6:	74 18                	je     c0010900 <CPU::setupFeatures()+0x8c>
c00108e8:	83 ec 0c             	sub    esp,0xc
c00108eb:	68 99 1b 02 c0       	push   0xc0021b99
c00108f0:	e8 50 a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00108f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108f8:	e8 3b ff ff ff       	call   c0010838 <CPU::setupGlobalPages()>
c00108fd:	83 c4 10             	add    esp,0x10
c0010900:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010907:	74 18                	je     c0010921 <CPU::setupFeatures()+0xad>
c0010909:	83 ec 0c             	sub    esp,0xc
c001090c:	68 ab 1b 02 c0       	push   0xc0021bab
c0010911:	e8 2f a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010916:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010919:	e8 dc fe ff ff       	call   c00107fa <CPU::setupPAT()>
c001091e:	83 c4 10             	add    esp,0x10
c0010921:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010928:	74 11                	je     c001093b <CPU::setupFeatures()+0xc7>
c001092a:	c7 44 24 10 b4 1b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021bb4
c0010932:	83 c4 08             	add    esp,0x8
c0010935:	5b                   	pop    ebx
c0010936:	e9 0a a0 ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c001093b:	83 c4 08             	add    esp,0x8
c001093e:	5b                   	pop    ebx
c001093f:	c3                   	ret    

c0010940 <CPU::open(int, int, void*)>:
c0010940:	55                   	push   ebp
c0010941:	57                   	push   edi
c0010942:	56                   	push   esi
c0010943:	53                   	push   ebx
c0010944:	83 ec 18             	sub    esp,0x18
c0010947:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001094b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001094f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010953:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010959:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c001095f:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010965:	50                   	push   eax
c0010966:	e8 53 6a ff ff       	call   c00073be <GDT::setup()>
c001096b:	83 c4 0c             	add    esp,0xc
c001096e:	6a 00                	push   0x0
c0010970:	68 ef be ad de       	push   0xdeadbeef
c0010975:	55                   	push   ebp
c0010976:	e8 0d 86 ff ff       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c001097b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001097e:	e8 e5 85 ff ff       	call   c0008f68 <TSS::flush()>
c0010983:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010989:	89 04 24             	mov    DWORD PTR [esp],eax
c001098c:	e8 91 6c ff ff       	call   c0007622 <IDT::setup()>
c0010991:	b8 00 04 00 00       	mov    eax,0x400
c0010996:	0f 23 f8             	mov    db7,eax
c0010999:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00109a3:	e8 17 74 ff ff       	call   c0007dbf <Phys::allocatePage()>
c00109a8:	83 c4 10             	add    esp,0x10
c00109ab:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00109b1:	85 f6                	test   esi,esi
c00109b3:	89 38                	mov    DWORD PTR [eax],edi
c00109b5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00109bb:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00109be:	74 10                	je     c00109d0 <CPU::open(int, int, void*)+0x90>
c00109c0:	50                   	push   eax
c00109c1:	50                   	push   eax
c00109c2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00109c8:	56                   	push   esi
c00109c9:	e8 e0 8e ff ff       	call   c00098ae <VAS::setCPUSpecific(unsigned long)>
c00109ce:	eb 0d                	jmp    c00109dd <CPU::open(int, int, void*)+0x9d>
c00109d0:	83 ec 0c             	sub    esp,0xc
c00109d3:	68 be 1b 02 c0       	push   0xc0021bbe
c00109d8:	e8 74 08 00 00       	call   c0011251 <KePanic(char const*)>
c00109dd:	83 c4 10             	add    esp,0x10
c00109e0:	83 ec 0c             	sub    esp,0xc
c00109e3:	68 cc 1b 02 c0       	push   0xc0021bcc
c00109e8:	e8 8e 01 00 00       	call   c0010b7b <KeSetBootMessage(char const*)>
c00109ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109f0:	e8 07 f7 ff ff       	call   c00100fc <CPU::detectFeatures()>
c00109f5:	c7 04 24 ef 1b 02 c0 	mov    DWORD PTR [esp],0xc0021bef
c00109fc:	e8 7a 01 00 00       	call   c0010b7b <KeSetBootMessage(char const*)>
c0010a01:	e8 df 71 00 00       	call   c0017be5 <HalInitialise()>
c0010a06:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c0010a0b:	83 e0 10             	and    eax,0x10
c0010a0e:	83 f8 01             	cmp    eax,0x1
c0010a11:	19 c0                	sbb    eax,eax
c0010a13:	83 e0 46             	and    eax,0x46
c0010a16:	83 c0 1e             	add    eax,0x1e
c0010a19:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a1c:	e8 28 d6 ff ff       	call   c000e049 <setupTimer(int)>
c0010a21:	83 c4 10             	add    esp,0x10
c0010a24:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010a2a:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c0010a31:	74 0c                	je     c0010a3f <CPU::open(int, int, void*)+0xff>
c0010a33:	83 ec 0c             	sub    esp,0xc
c0010a36:	53                   	push   ebx
c0010a37:	e8 38 fe ff ff       	call   c0010874 <CPU::setupFeatures()>
c0010a3c:	83 c4 10             	add    esp,0x10
c0010a3f:	83 c4 0c             	add    esp,0xc
c0010a42:	31 c0                	xor    eax,eax
c0010a44:	5b                   	pop    ebx
c0010a45:	5e                   	pop    esi
c0010a46:	5f                   	pop    edi
c0010a47:	5d                   	pop    ebp
c0010a48:	c3                   	ret    

c0010a49 <KeInitialiseAtexit()>:
c0010a49:	83 ec 10             	sub    esp,0x10
c0010a4c:	c7 05 a0 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028da0,0x0
c0010a56:	6a 60                	push   0x60
c0010a58:	6a 00                	push   0x0
c0010a5a:	68 20 8e 02 c0       	push   0xc0028e20
c0010a5f:	e8 8c fa fe ff       	call   c00004f0 <memset>
c0010a64:	83 c4 1c             	add    esp,0x1c
c0010a67:	c3                   	ret    

c0010a68 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010a68:	a1 a0 8d 02 c0       	mov    eax,ds:0xc0028da0
c0010a6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010a71:	89 14 85 20 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd71e0],edx
c0010a78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010a7c:	89 14 85 c0 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7240],edx
c0010a83:	40                   	inc    eax
c0010a84:	a3 a0 8d 02 c0       	mov    ds:0xc0028da0,eax
c0010a89:	83 f8 17             	cmp    eax,0x17
c0010a8c:	7e 0d                	jle    c0010a9b <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010a8e:	c7 44 24 04 30 1c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021c30
c0010a96:	e9 b6 07 00 00       	jmp    c0011251 <KePanic(char const*)>
c0010a9b:	c3                   	ret    

c0010a9c <KeExecuteAtexit()>:
c0010a9c:	53                   	push   ebx
c0010a9d:	31 db                	xor    ebx,ebx
c0010a9f:	83 ec 08             	sub    esp,0x8
c0010aa2:	39 1d a0 8d 02 c0    	cmp    DWORD PTR ds:0xc0028da0,ebx
c0010aa8:	7e 50                	jle    c0010afa <KeExecuteAtexit()+0x5e>
c0010aaa:	8b 04 9d 20 8e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd71e0]
c0010ab1:	85 c0                	test   eax,eax
c0010ab3:	74 42                	je     c0010af7 <KeExecuteAtexit()+0x5b>
c0010ab5:	51                   	push   ecx
c0010ab6:	50                   	push   eax
c0010ab7:	53                   	push   ebx
c0010ab8:	68 49 1c 02 c0       	push   0xc0021c49
c0010abd:	e8 83 9e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010ac2:	58                   	pop    eax
c0010ac3:	ff 34 9d c0 8d 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7240]
c0010aca:	ff 14 9d 20 8e 02 c0 	call   DWORD PTR [ebx*4-0x3ffd71e0]
c0010ad1:	c7 04 24 6b 1c 02 c0 	mov    DWORD PTR [esp],0xc0021c6b
c0010ad8:	e8 68 9e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010add:	c7 04 24 cb 2d 02 c0 	mov    DWORD PTR [esp],0xc0022dcb
c0010ae4:	c7 04 9d 20 8e 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd71e0],0x0
c0010aef:	e8 51 9e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010af4:	83 c4 10             	add    esp,0x10
c0010af7:	43                   	inc    ebx
c0010af8:	eb a8                	jmp    c0010aa2 <KeExecuteAtexit()+0x6>
c0010afa:	83 c4 08             	add    esp,0x8
c0010afd:	5b                   	pop    ebx
c0010afe:	c3                   	ret    

c0010aff <KeDisplaySplashScreen()>:
c0010aff:	55                   	push   ebp
c0010b00:	bd 05 00 00 00       	mov    ebp,0x5
c0010b05:	57                   	push   edi
c0010b06:	bf 0a 00 00 00       	mov    edi,0xa
c0010b0b:	56                   	push   esi
c0010b0c:	31 f6                	xor    esi,esi
c0010b0e:	53                   	push   ebx
c0010b0f:	31 db                	xor    ebx,ebx
c0010b11:	83 ec 0c             	sub    esp,0xc
c0010b14:	0f b6 96 20 30 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdcfe0]
c0010b1b:	89 d0                	mov    eax,edx
c0010b1d:	85 d2                	test   edx,edx
c0010b1f:	74 52                	je     c0010b73 <KeDisplaySplashScreen()+0x74>
c0010b21:	80 bb 56 30 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdcfaa],0xdb
c0010b28:	75 13                	jne    c0010b3d <KeDisplaySplashScreen()+0x3e>
c0010b2a:	0f b6 8b 55 30 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdcfab]
c0010b31:	83 e1 fe             	and    ecx,0xfffffffe
c0010b34:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010b3a:	75 01                	jne    c0010b3d <KeDisplaySplashScreen()+0x3e>
c0010b3c:	47                   	inc    edi
c0010b3d:	83 fa 0d             	cmp    edx,0xd
c0010b40:	74 28                	je     c0010b6a <KeDisplaySplashScreen()+0x6b>
c0010b42:	83 fa 0a             	cmp    edx,0xa
c0010b45:	75 0a                	jne    c0010b51 <KeDisplaySplashScreen()+0x52>
c0010b47:	45                   	inc    ebp
c0010b48:	bf 0a 00 00 00       	mov    edi,0xa
c0010b4d:	31 db                	xor    ebx,ebx
c0010b4f:	eb 19                	jmp    c0010b6a <KeDisplaySplashScreen()+0x6b>
c0010b51:	83 ec 0c             	sub    esp,0xc
c0010b54:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010b57:	55                   	push   ebp
c0010b58:	0f be c0             	movsx  eax,al
c0010b5b:	52                   	push   edx
c0010b5c:	43                   	inc    ebx
c0010b5d:	6a 00                	push   0x0
c0010b5f:	6a 0e                	push   0xe
c0010b61:	50                   	push   eax
c0010b62:	e8 fd 7c 00 00       	call   c0018864 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010b67:	83 c4 20             	add    esp,0x20
c0010b6a:	46                   	inc    esi
c0010b6b:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010b71:	75 a1                	jne    c0010b14 <KeDisplaySplashScreen()+0x15>
c0010b73:	83 c4 0c             	add    esp,0xc
c0010b76:	5b                   	pop    ebx
c0010b77:	5e                   	pop    esi
c0010b78:	5f                   	pop    edi
c0010b79:	5d                   	pop    ebp
c0010b7a:	c3                   	ret    

c0010b7b <KeSetBootMessage(char const*)>:
c0010b7b:	57                   	push   edi
c0010b7c:	56                   	push   esi
c0010b7d:	53                   	push   ebx
c0010b7e:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010b84:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010b8b:	68 9e 00 00 00       	push   0x9e
c0010b90:	6a 00                	push   0x0
c0010b92:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010b96:	56                   	push   esi
c0010b97:	e8 54 f9 fe ff       	call   c00004f0 <memset>
c0010b9c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b9f:	e8 cc f9 fe ff       	call   c0000570 <strlen>
c0010ba4:	ba 50 00 00 00       	mov    edx,0x50
c0010ba9:	83 c4 10             	add    esp,0x10
c0010bac:	29 c2                	sub    edx,eax
c0010bae:	31 c9                	xor    ecx,ecx
c0010bb0:	83 e2 fe             	and    edx,0xfffffffe
c0010bb3:	01 f2                	add    edx,esi
c0010bb5:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010bba:	84 c0                	test   al,al
c0010bbc:	74 0a                	je     c0010bc8 <KeSetBootMessage(char const*)+0x4d>
c0010bbe:	80 cc 0f             	or     ah,0xf
c0010bc1:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010bc5:	41                   	inc    ecx
c0010bc6:	eb ed                	jmp    c0010bb5 <KeSetBootMessage(char const*)+0x3a>
c0010bc8:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010bcd:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010bd2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010bd4:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010bda:	5b                   	pop    ebx
c0010bdb:	5e                   	pop    esi
c0010bdc:	5f                   	pop    edi
c0010bdd:	c3                   	ret    
c0010bde:	66 90                	xchg   ax,ax

c0010be0 <Krnl::handlePowerButton()>:
c0010be0:	83 ec 0c             	sub    esp,0xc
c0010be3:	e8 c4 06 00 00       	call   c00112ac <KeHandlePowerButton()>
c0010be8:	90                   	nop
c0010be9:	83 c4 0c             	add    esp,0xc
c0010bec:	c3                   	ret    
c0010bed:	8d 76 00             	lea    esi,[esi+0x0]

c0010bf0 <Krnl::handleSleepButton()>:
c0010bf0:	83 ec 0c             	sub    esp,0xc
c0010bf3:	e8 e9 06 00 00       	call   c00112e1 <KeHandleSleepButton()>
c0010bf8:	90                   	nop
c0010bf9:	83 c4 0c             	add    esp,0xc
c0010bfc:	c3                   	ret    
c0010bfd:	90                   	nop

c0010bfe <EnvVarContainer::getEnv(char const*)>:
c0010bfe:	57                   	push   edi
c0010bff:	56                   	push   esi
c0010c00:	53                   	push   ebx
c0010c01:	31 db                	xor    ebx,ebx
c0010c03:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010c07:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010c09:	7e 2b                	jle    c0010c36 <EnvVarContainer::getEnv(char const*)+0x38>
c0010c0b:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010c12:	50                   	push   eax
c0010c13:	50                   	push   eax
c0010c14:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010c17:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010c1a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010c1e:	e8 2d fb fe ff       	call   c0000750 <strcmp>
c0010c23:	83 c4 10             	add    esp,0x10
c0010c26:	85 c0                	test   eax,eax
c0010c28:	75 09                	jne    c0010c33 <EnvVarContainer::getEnv(char const*)+0x35>
c0010c2a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010c2d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010c31:	eb 05                	jmp    c0010c38 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010c33:	43                   	inc    ebx
c0010c34:	eb d1                	jmp    c0010c07 <EnvVarContainer::getEnv(char const*)+0x9>
c0010c36:	31 c0                	xor    eax,eax
c0010c38:	5b                   	pop    ebx
c0010c39:	5e                   	pop    esi
c0010c3a:	5f                   	pop    edi
c0010c3b:	c3                   	ret    

c0010c3c <EnvVarContainer::setEnv(char const*, char const*)>:
c0010c3c:	55                   	push   ebp
c0010c3d:	57                   	push   edi
c0010c3e:	56                   	push   esi
c0010c3f:	53                   	push   ebx
c0010c40:	83 ec 28             	sub    esp,0x28
c0010c43:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010c47:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010c4b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010c4f:	56                   	push   esi
c0010c50:	e8 1b f9 fe ff       	call   c0000570 <strlen>
c0010c55:	40                   	inc    eax
c0010c56:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c59:	e8 58 6e ff ff       	call   c0007ab6 <malloc>
c0010c5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010c65:	e8 06 f9 fe ff       	call   c0000570 <strlen>
c0010c6a:	40                   	inc    eax
c0010c6b:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c6e:	e8 43 6e ff ff       	call   c0007ab6 <malloc>
c0010c73:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c76:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010c7a:	e8 f1 f8 fe ff       	call   c0000570 <strlen>
c0010c7f:	83 c4 0c             	add    esp,0xc
c0010c82:	40                   	inc    eax
c0010c83:	50                   	push   eax
c0010c84:	6a 00                	push   0x0
c0010c86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010c8a:	e8 61 f8 fe ff       	call   c00004f0 <memset>
c0010c8f:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c92:	e8 d9 f8 fe ff       	call   c0000570 <strlen>
c0010c97:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010c9b:	8d 48 01             	lea    ecx,[eax+0x1]
c0010c9e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ca0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ca3:	89 de                	mov    esi,ebx
c0010ca5:	e8 c6 f8 fe ff       	call   c0000570 <strlen>
c0010caa:	83 c4 0c             	add    esp,0xc
c0010cad:	40                   	inc    eax
c0010cae:	50                   	push   eax
c0010caf:	6a 00                	push   0x0
c0010cb1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010cb5:	e8 36 f8 fe ff       	call   c00004f0 <memset>
c0010cba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cbd:	e8 ae f8 fe ff       	call   c0000570 <strlen>
c0010cc2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010cc6:	8d 48 01             	lea    ecx,[eax+0x1]
c0010cc9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ccb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010cce:	40                   	inc    eax
c0010ccf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010cd2:	c1 e0 03             	shl    eax,0x3
c0010cd5:	5a                   	pop    edx
c0010cd6:	59                   	pop    ecx
c0010cd7:	50                   	push   eax
c0010cd8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010cdb:	e8 c2 6d ff ff       	call   c0007aa2 <realloc>
c0010ce0:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010ce4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010ce7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010cea:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010cee:	b9 08 00 00 00       	mov    ecx,0x8
c0010cf3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010cf5:	83 c4 2c             	add    esp,0x2c
c0010cf8:	5b                   	pop    ebx
c0010cf9:	5e                   	pop    esi
c0010cfa:	5f                   	pop    edi
c0010cfb:	5d                   	pop    ebp
c0010cfc:	c3                   	ret    
c0010cfd:	90                   	nop

c0010cfe <EnvVarContainer::deleteEnv(char const*)>:
c0010cfe:	c3                   	ret    
c0010cff:	90                   	nop

c0010d00 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010d00:	55                   	push   ebp
c0010d01:	57                   	push   edi
c0010d02:	56                   	push   esi
c0010d03:	53                   	push   ebx
c0010d04:	81 ec 38 01 00 00    	sub    esp,0x138
c0010d0a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010d11:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010d18:	68 14 01 00 00       	push   0x114
c0010d1d:	e8 94 6d ff ff       	call   c0007ab6 <malloc>
c0010d22:	83 c4 0c             	add    esp,0xc
c0010d25:	89 c3                	mov    ebx,eax
c0010d27:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010d2a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010d31:	50                   	push   eax
c0010d32:	e8 e1 a9 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c0010d37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d3a:	e8 59 ad ff ff       	call   c000ba98 <File::exists()>
c0010d3f:	83 c4 10             	add    esp,0x10
c0010d42:	84 c0                	test   al,al
c0010d44:	75 31                	jne    c0010d77 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010d46:	50                   	push   eax
c0010d47:	50                   	push   eax
c0010d48:	6a 12                	push   0x12
c0010d4a:	53                   	push   ebx
c0010d4b:	e8 84 aa ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c0010d50:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d52:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010d55:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d58:	e8 13 f8 fe ff       	call   c0000570 <strlen>
c0010d5d:	5a                   	pop    edx
c0010d5e:	31 d2                	xor    edx,edx
c0010d60:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010d64:	51                   	push   ecx
c0010d65:	56                   	push   esi
c0010d66:	52                   	push   edx
c0010d67:	50                   	push   eax
c0010d68:	53                   	push   ebx
c0010d69:	ff d7                	call   edi
c0010d6b:	83 c4 14             	add    esp,0x14
c0010d6e:	53                   	push   ebx
c0010d6f:	e8 be aa ff ff       	call   c000b832 <File::close()>
c0010d74:	83 c4 10             	add    esp,0x10
c0010d77:	56                   	push   esi
c0010d78:	31 f6                	xor    esi,esi
c0010d7a:	68 00 01 00 00       	push   0x100
c0010d7f:	6a 00                	push   0x0
c0010d81:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010d85:	50                   	push   eax
c0010d86:	e8 65 f7 fe ff       	call   c00004f0 <memset>
c0010d8b:	5f                   	pop    edi
c0010d8c:	58                   	pop    eax
c0010d8d:	6a 01                	push   0x1
c0010d8f:	53                   	push   ebx
c0010d90:	e8 3f aa ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c0010d95:	83 c4 10             	add    esp,0x10
c0010d98:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010da0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010da8:	83 ec 0c             	sub    esp,0xc
c0010dab:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010dad:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010db1:	51                   	push   ecx
c0010db2:	8d 54 24 23          	lea    edx,[esp+0x23]
c0010db6:	52                   	push   edx
c0010db7:	6a 00                	push   0x0
c0010db9:	6a 01                	push   0x1
c0010dbb:	53                   	push   ebx
c0010dbc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010dbf:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010dc4:	83 c4 20             	add    esp,0x20
c0010dc7:	89 c2                	mov    edx,eax
c0010dc9:	85 c0                	test   eax,eax
c0010dcb:	0f 84 36 01 00 00    	je     c0010f07 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010dd1:	83 f8 0d             	cmp    eax,0xd
c0010dd4:	0f 84 22 01 00 00    	je     c0010efc <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010dda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010ddf:	0f 84 f0 00 00 00    	je     c0010ed5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010de5:	83 f8 0a             	cmp    eax,0xa
c0010de8:	74 13                	je     c0010dfd <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010dea:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010def:	74 0c                	je     c0010dfd <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010df1:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010df7:	0f 8e f6 00 00 00    	jle    c0010ef3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010dfd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e01:	83 ec 0c             	sub    esp,0xc
c0010e04:	8d 78 01             	lea    edi,[eax+0x1]
c0010e07:	57                   	push   edi
c0010e08:	e8 a9 6c ff ff       	call   c0007ab6 <malloc>
c0010e0d:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010e11:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010e15:	8d 56 04             	lea    edx,[esi+0x4]
c0010e18:	89 14 24             	mov    DWORD PTR [esp],edx
c0010e1b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010e1f:	e8 92 6c ff ff       	call   c0007ab6 <malloc>
c0010e24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010e28:	83 c4 0c             	add    esp,0xc
c0010e2b:	57                   	push   edi
c0010e2c:	6a 00                	push   0x0
c0010e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010e32:	e8 b9 f6 fe ff       	call   c00004f0 <memset>
c0010e37:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010e3b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010e3f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010e43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e45:	83 c4 0c             	add    esp,0xc
c0010e48:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010e4c:	52                   	push   edx
c0010e4d:	6a 00                	push   0x0
c0010e4f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010e53:	e8 98 f6 fe ff       	call   c00004f0 <memset>
c0010e58:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010e5c:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0010e63:	e8 08 f7 fe ff       	call   c0000570 <strlen>
c0010e68:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010e6c:	89 c1                	mov    ecx,eax
c0010e6e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e70:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010e73:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010e76:	40                   	inc    eax
c0010e77:	83 c4 10             	add    esp,0x10
c0010e7a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010e7d:	85 d2                	test   edx,edx
c0010e7f:	75 0c                	jne    c0010e8d <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0010e81:	83 ec 0c             	sub    esp,0xc
c0010e84:	6a 08                	push   0x8
c0010e86:	e8 2b 6c ff ff       	call   c0007ab6 <malloc>
c0010e8b:	eb 0c                	jmp    c0010e99 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010e8d:	c1 e0 03             	shl    eax,0x3
c0010e90:	51                   	push   ecx
c0010e91:	51                   	push   ecx
c0010e92:	50                   	push   eax
c0010e93:	52                   	push   edx
c0010e94:	e8 09 6c ff ff       	call   c0007aa2 <realloc>
c0010e99:	83 c4 10             	add    esp,0x10
c0010e9c:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010e9f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010ea2:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010ea5:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010ea9:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010ead:	b9 08 00 00 00       	mov    ecx,0x8
c0010eb2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010eb4:	31 f6                	xor    esi,esi
c0010eb6:	50                   	push   eax
c0010eb7:	68 00 01 00 00       	push   0x100
c0010ebc:	6a 00                	push   0x0
c0010ebe:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010ec2:	50                   	push   eax
c0010ec3:	e8 28 f6 fe ff       	call   c00004f0 <memset>
c0010ec8:	83 c4 10             	add    esp,0x10
c0010ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010ed3:	eb 27                	jmp    c0010efc <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010ed5:	83 f8 3d             	cmp    eax,0x3d
c0010ed8:	74 1e                	je     c0010ef8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0010eda:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010ee0:	7f 07                	jg     c0010ee9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0010ee2:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c0010ee6:	46                   	inc    esi
c0010ee7:	eb 13                	jmp    c0010efc <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010ee9:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0010ef1:	eb 09                	jmp    c0010efc <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010ef3:	83 f8 3d             	cmp    eax,0x3d
c0010ef6:	75 ea                	jne    c0010ee2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0010ef8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010efc:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010f01:	0f 85 99 fe ff ff    	jne    c0010da0 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010f07:	83 ec 0c             	sub    esp,0xc
c0010f0a:	53                   	push   ebx
c0010f0b:	e8 22 a9 ff ff       	call   c000b832 <File::close()>
c0010f10:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010f12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f15:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010f18:	81 c4 3c 01 00 00    	add    esp,0x13c
c0010f1e:	5b                   	pop    ebx
c0010f1f:	5e                   	pop    esi
c0010f20:	5f                   	pop    edi
c0010f21:	5d                   	pop    ebp
c0010f22:	c3                   	ret    
c0010f23:	90                   	nop

c0010f24 <EnvVarContainer::__loadSystem()>:
c0010f24:	83 ec 10             	sub    esp,0x10
c0010f27:	68 80 31 02 c0       	push   0xc0023180
c0010f2c:	68 70 1c 02 c0       	push   0xc0021c70
c0010f31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f35:	e8 c6 fd ff ff       	call   c0010d00 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010f3a:	83 c4 1c             	add    esp,0x1c
c0010f3d:	c3                   	ret    

c0010f3e <EnvVarContainer::__loadUser()>:
c0010f3e:	c3                   	ret    
c0010f3f:	90                   	nop

c0010f40 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f44:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010f4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f52:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010f55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f59:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010f60:	90                   	nop
c0010f61:	c3                   	ret    

c0010f62 <EnvVarContainer::~EnvVarContainer()>:
c0010f62:	83 ec 0c             	sub    esp,0xc
c0010f65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f69:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f6c:	85 c0                	test   eax,eax
c0010f6e:	74 1d                	je     c0010f8d <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f74:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f76:	85 c0                	test   eax,eax
c0010f78:	74 13                	je     c0010f8d <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f81:	83 ec 0c             	sub    esp,0xc
c0010f84:	50                   	push   eax
c0010f85:	e8 3c 6b ff ff       	call   c0007ac6 <free>
c0010f8a:	83 c4 10             	add    esp,0x10
c0010f8d:	90                   	nop
c0010f8e:	83 c4 0c             	add    esp,0xc
c0010f91:	c3                   	ret    

c0010f92 <KeGetEnv(Process*, char const*)>:
c0010f92:	53                   	push   ebx
c0010f93:	83 ec 08             	sub    esp,0x8
c0010f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f9a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010f9e:	39 05 f0 96 02 c0    	cmp    DWORD PTR ds:0xc00296f0,eax
c0010fa4:	74 04                	je     c0010faa <KeGetEnv(Process*, char const*)+0x18>
c0010fa6:	85 c0                	test   eax,eax
c0010fa8:	75 0b                	jne    c0010fb5 <KeGetEnv(Process*, char const*)+0x23>
c0010faa:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c0010faf:	85 c0                	test   eax,eax
c0010fb1:	75 19                	jne    c0010fcc <KeGetEnv(Process*, char const*)+0x3a>
c0010fb3:	eb 27                	jmp    c0010fdc <KeGetEnv(Process*, char const*)+0x4a>
c0010fb5:	52                   	push   edx
c0010fb6:	52                   	push   edx
c0010fb7:	53                   	push   ebx
c0010fb8:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010fbe:	e8 3b fc ff ff       	call   c0010bfe <EnvVarContainer::getEnv(char const*)>
c0010fc3:	83 c4 10             	add    esp,0x10
c0010fc6:	85 c0                	test   eax,eax
c0010fc8:	75 28                	jne    c0010ff2 <KeGetEnv(Process*, char const*)+0x60>
c0010fca:	eb de                	jmp    c0010faa <KeGetEnv(Process*, char const*)+0x18>
c0010fcc:	52                   	push   edx
c0010fcd:	52                   	push   edx
c0010fce:	53                   	push   ebx
c0010fcf:	50                   	push   eax
c0010fd0:	e8 29 fc ff ff       	call   c0010bfe <EnvVarContainer::getEnv(char const*)>
c0010fd5:	83 c4 10             	add    esp,0x10
c0010fd8:	85 c0                	test   eax,eax
c0010fda:	75 16                	jne    c0010ff2 <KeGetEnv(Process*, char const*)+0x60>
c0010fdc:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010fe0:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c0010fe5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010fe9:	83 c4 08             	add    esp,0x8
c0010fec:	5b                   	pop    ebx
c0010fed:	e9 0c fc ff ff       	jmp    c0010bfe <EnvVarContainer::getEnv(char const*)>
c0010ff2:	83 c4 08             	add    esp,0x8
c0010ff5:	5b                   	pop    ebx
c0010ff6:	c3                   	ret    

c0010ff7 <KeSetEnvSystem(char const*, char const*)>:
c0010ff7:	83 ec 10             	sub    esp,0x10
c0010ffa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010ffe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011002:	ff 35 84 8e 02 c0    	push   DWORD PTR ds:0xc0028e84
c0011008:	e8 2f fc ff ff       	call   c0010c3c <EnvVarContainer::setEnv(char const*, char const*)>
c001100d:	83 c4 1c             	add    esp,0x1c
c0011010:	c3                   	ret    

c0011011 <KeSetEnvUser(char const*, char const*)>:
c0011011:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c0011016:	85 c0                	test   eax,eax
c0011018:	74 15                	je     c001102f <KeSetEnvUser(char const*, char const*)+0x1e>
c001101a:	83 ec 10             	sub    esp,0x10
c001101d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011021:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011025:	50                   	push   eax
c0011026:	e8 11 fc ff ff       	call   c0010c3c <EnvVarContainer::setEnv(char const*, char const*)>
c001102b:	83 c4 1c             	add    esp,0x1c
c001102e:	c3                   	ret    
c001102f:	c3                   	ret    

c0011030 <KeSetEnvProcess(Process*, char const*, char const*)>:
c0011030:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011034:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001103a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001103e:	e9 f9 fb ff ff       	jmp    c0010c3c <EnvVarContainer::setEnv(char const*, char const*)>

c0011043 <KeDeleteEnvSystem(char const*)>:
c0011043:	c3                   	ret    

c0011044 <KeDeleteEnvUser(char const*)>:
c0011044:	c3                   	ret    

c0011045 <KeDeleteEnvProcess(Process*, char const*)>:
c0011045:	c3                   	ret    

c0011046 <KeNewProcessEnv(Process*)>:
c0011046:	83 ec 28             	sub    esp,0x28
c0011049:	6a 0c                	push   0xc
c001104b:	e8 66 6a ff ff       	call   c0007ab6 <malloc>
c0011050:	5a                   	pop    edx
c0011051:	59                   	pop    ecx
c0011052:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011056:	50                   	push   eax
c0011057:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001105b:	e8 e0 fe ff ff       	call   c0010f40 <EnvVarContainer::EnvVarContainer(Process*)>
c0011060:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011064:	83 c4 2c             	add    esp,0x2c
c0011067:	c3                   	ret    

c0011068 <KeCopyProcessEnv(Process*, Process*)>:
c0011068:	57                   	push   edi
c0011069:	56                   	push   esi
c001106a:	53                   	push   ebx
c001106b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001106f:	83 ec 0c             	sub    esp,0xc
c0011072:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0011078:	6a 0c                	push   0xc
c001107a:	e8 37 6a ff ff       	call   c0007ab6 <malloc>
c001107f:	89 c3                	mov    ebx,eax
c0011081:	58                   	pop    eax
c0011082:	5a                   	pop    edx
c0011083:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011087:	53                   	push   ebx
c0011088:	e8 b3 fe ff ff       	call   c0010f40 <EnvVarContainer::EnvVarContainer(Process*)>
c001108d:	8b 07                	mov    eax,DWORD PTR [edi]
c001108f:	89 03                	mov    DWORD PTR [ebx],eax
c0011091:	c1 e0 03             	shl    eax,0x3
c0011094:	89 04 24             	mov    DWORD PTR [esp],eax
c0011097:	e8 1a 6a ff ff       	call   c0007ab6 <malloc>
c001109c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001109f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00110a1:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00110a4:	c1 e1 03             	shl    ecx,0x3
c00110a7:	89 c7                	mov    edi,eax
c00110a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110ab:	83 c4 10             	add    esp,0x10
c00110ae:	89 d8                	mov    eax,ebx
c00110b0:	5b                   	pop    ebx
c00110b1:	5e                   	pop    esi
c00110b2:	5f                   	pop    edi
c00110b3:	c3                   	ret    

c00110b4 <KeLoadSystemEnv()>:
c00110b4:	53                   	push   ebx
c00110b5:	83 ec 14             	sub    esp,0x14
c00110b8:	6a 0c                	push   0xc
c00110ba:	e8 f7 69 ff ff       	call   c0007ab6 <malloc>
c00110bf:	89 c3                	mov    ebx,eax
c00110c1:	58                   	pop    eax
c00110c2:	5a                   	pop    edx
c00110c3:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00110c9:	53                   	push   ebx
c00110ca:	e8 71 fe ff ff       	call   c0010f40 <EnvVarContainer::EnvVarContainer(Process*)>
c00110cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110d2:	89 1d 84 8e 02 c0    	mov    DWORD PTR ds:0xc0028e84,ebx
c00110d8:	e8 47 fe ff ff       	call   c0010f24 <EnvVarContainer::__loadSystem()>
c00110dd:	83 c4 18             	add    esp,0x18
c00110e0:	5b                   	pop    ebx
c00110e1:	c3                   	ret    

c00110e2 <KeLoadUserEnv()>:
c00110e2:	53                   	push   ebx
c00110e3:	83 ec 14             	sub    esp,0x14
c00110e6:	6a 0c                	push   0xc
c00110e8:	e8 c9 69 ff ff       	call   c0007ab6 <malloc>
c00110ed:	89 c3                	mov    ebx,eax
c00110ef:	58                   	pop    eax
c00110f0:	5a                   	pop    edx
c00110f1:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00110f7:	53                   	push   ebx
c00110f8:	e8 43 fe ff ff       	call   c0010f40 <EnvVarContainer::EnvVarContainer(Process*)>
c00110fd:	89 1d 80 8e 02 c0    	mov    DWORD PTR ds:0xc0028e80,ebx
c0011103:	83 c4 18             	add    esp,0x18
c0011106:	5b                   	pop    ebx
c0011107:	c3                   	ret    

c0011108 <KeFlushEnv()>:
c0011108:	c3                   	ret    

c0011109 <KeGetProcessTotalEnvCount(Process*)>:
c0011109:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001110d:	8b 15 80 8e 02 c0    	mov    edx,DWORD PTR ds:0xc0028e80
c0011113:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011119:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c001111e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011120:	03 01                	add    eax,DWORD PTR [ecx]
c0011122:	85 d2                	test   edx,edx
c0011124:	74 02                	je     c0011128 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0011126:	03 02                	add    eax,DWORD PTR [edx]
c0011128:	c3                   	ret    

c0011129 <KeGetProcessEnvPair(Process*, int)>:
c0011129:	57                   	push   edi
c001112a:	56                   	push   esi
c001112b:	8b 35 80 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e80
c0011131:	53                   	push   ebx
c0011132:	85 f6                	test   esi,esi
c0011134:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011138:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001113c:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011142:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011146:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011148:	75 16                	jne    c0011160 <KeGetProcessEnvPair(Process*, int)+0x37>
c001114a:	39 c2                	cmp    edx,eax
c001114c:	7c 16                	jl     c0011164 <KeGetProcessEnvPair(Process*, int)+0x3b>
c001114e:	8b 0d 84 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028e84
c0011154:	8b 31                	mov    esi,DWORD PTR [ecx]
c0011156:	01 c6                	add    esi,eax
c0011158:	39 d6                	cmp    esi,edx
c001115a:	7e 3c                	jle    c0011198 <KeGetProcessEnvPair(Process*, int)+0x6f>
c001115c:	29 c2                	sub    edx,eax
c001115e:	eb 04                	jmp    c0011164 <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011160:	39 c2                	cmp    edx,eax
c0011162:	7d 05                	jge    c0011169 <KeGetProcessEnvPair(Process*, int)+0x40>
c0011164:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0011167:	eb 20                	jmp    c0011189 <KeGetProcessEnvPair(Process*, int)+0x60>
c0011169:	8b 3e                	mov    edi,DWORD PTR [esi]
c001116b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001116e:	39 d1                	cmp    ecx,edx
c0011170:	7e 04                	jle    c0011176 <KeGetProcessEnvPair(Process*, int)+0x4d>
c0011172:	29 c2                	sub    edx,eax
c0011174:	eb 10                	jmp    c0011186 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0011176:	8b 35 84 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e84
c001117c:	03 0e                	add    ecx,DWORD PTR [esi]
c001117e:	39 d1                	cmp    ecx,edx
c0011180:	7e 16                	jle    c0011198 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011182:	29 c2                	sub    edx,eax
c0011184:	29 fa                	sub    edx,edi
c0011186:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011189:	8d 14 d0             	lea    edx,[eax+edx*8]
c001118c:	8b 02                	mov    eax,DWORD PTR [edx]
c001118e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011191:	89 03                	mov    DWORD PTR [ebx],eax
c0011193:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0011196:	eb 1d                	jmp    c00111b5 <KeGetProcessEnvPair(Process*, int)+0x8c>
c0011198:	83 ec 0c             	sub    esp,0xc
c001119b:	68 92 1c 02 c0       	push   0xc0021c92
c00111a0:	e8 ac 00 00 00       	call   c0011251 <KePanic(char const*)>
c00111a5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00111ab:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00111b2:	83 c4 10             	add    esp,0x10
c00111b5:	89 d8                	mov    eax,ebx
c00111b7:	5b                   	pop    ebx
c00111b8:	5e                   	pop    esi
c00111b9:	5f                   	pop    edi
c00111ba:	c2 04 00             	ret    0x4

c00111bd <CPU::current()>:
c00111bd:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00111c2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00111c8:	c3                   	ret    

c00111c9 <operator new(unsigned long)>:
c00111c9:	e9 e8 68 ff ff       	jmp    c0007ab6 <malloc>

c00111ce <operator delete(void*)>:
c00111ce:	e9 03 69 ff ff       	jmp    c0007ad6 <rfree>

c00111d3 <disableIRQs()>:
c00111d3:	fa                   	cli    
c00111d4:	c3                   	ret    

c00111d5 <enableIRQs()>:
c00111d5:	fb                   	sti    
c00111d6:	c3                   	ret    

c00111d7 <lockScheduler()>:
c00111d7:	fa                   	cli    
c00111d8:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00111de:	c3                   	ret    

c00111df <unlockScheduler()>:
c00111df:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00111e4:	48                   	dec    eax
c00111e5:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00111ea:	75 01                	jne    c00111ed <unlockScheduler()+0xe>
c00111ec:	fb                   	sti    
c00111ed:	c3                   	ret    

c00111ee <lockStuff()>:
c00111ee:	fa                   	cli    
c00111ef:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00111f5:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c00111fb:	c3                   	ret    

c00111fc <unlockStuff()>:
c00111fc:	83 ec 0c             	sub    esp,0xc
c00111ff:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0011204:	48                   	dec    eax
c0011205:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c001120a:	75 18                	jne    c0011224 <unlockStuff()+0x28>
c001120c:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c0011213:	74 0f                	je     c0011224 <unlockStuff()+0x28>
c0011215:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001121f:	e8 ec 48 00 00       	call   c0015b10 <schedule()>
c0011224:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0011229:	48                   	dec    eax
c001122a:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001122f:	75 01                	jne    c0011232 <unlockStuff()+0x36>
c0011231:	fb                   	sti    
c0011232:	83 c4 0c             	add    esp,0xc
c0011235:	c3                   	ret    

c0011236 <Virt::getAKernelVAS()>:
c0011236:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001123b:	c3                   	ret    

c001123c <__not_memcpy>:
c001123c:	57                   	push   edi
c001123d:	56                   	push   esi
c001123e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011242:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011246:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001124a:	89 c7                	mov    edi,eax
c001124c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001124e:	5e                   	pop    esi
c001124f:	5f                   	pop    edi
c0011250:	c3                   	ret    

c0011251 <KePanic(char const*)>:
c0011251:	c6 05 88 8e 02 c0 01 	mov    BYTE PTR ds:0xc0028e88,0x1
c0011258:	e9 59 68 00 00       	jmp    c0017ab6 <HalPanic(char const*)>

c001125d <KePowerThread(void*)>:
c001125d:	83 ec 0c             	sub    esp,0xc
c0011260:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0011265:	48                   	dec    eax
c0011266:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001126b:	75 01                	jne    c001126e <KePowerThread(void*)+0x11>
c001126d:	fb                   	sti    
c001126e:	83 ec 0c             	sub    esp,0xc
c0011271:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c0011278:	6a 0a                	push   0xa
c001127a:	e8 d5 4b 00 00       	call   c0015e54 <sleep(unsigned int)>
c001127f:	83 05 e4 8e 02 c0 0a 	add    DWORD PTR ds:0xc0028ee4,0xa
c0011286:	83 c4 10             	add    esp,0x10
c0011289:	eb e3                	jmp    c001126e <KePowerThread(void*)+0x11>

c001128b <KeChangePowerSettings(PowerSettings)>:
c001128b:	57                   	push   edi
c001128c:	b9 09 00 00 00       	mov    ecx,0x9
c0011291:	56                   	push   esi
c0011292:	bf c0 8e 02 c0       	mov    edi,0xc0028ec0
c0011297:	fc                   	cld    
c0011298:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001129c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001129e:	5e                   	pop    esi
c001129f:	5f                   	pop    edi
c00112a0:	c3                   	ret    

c00112a1 <KeUserIOReceived()>:
c00112a1:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c00112ab:	c3                   	ret    

c00112ac <KeHandlePowerButton()>:
c00112ac:	83 ec 0c             	sub    esp,0xc
c00112af:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c00112b4:	83 f8 02             	cmp    eax,0x2
c00112b7:	75 10                	jne    c00112c9 <KeHandlePowerButton()+0x1d>
c00112b9:	83 ec 0c             	sub    esp,0xc
c00112bc:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00112c2:	e8 61 5e ff ff       	call   c0007128 <Computer::shutdown()>
c00112c7:	eb 11                	jmp    c00112da <KeHandlePowerButton()+0x2e>
c00112c9:	48                   	dec    eax
c00112ca:	75 11                	jne    c00112dd <KeHandlePowerButton()+0x31>
c00112cc:	83 ec 0c             	sub    esp,0xc
c00112cf:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00112d5:	e8 7e 5e ff ff       	call   c0007158 <Computer::sleep()>
c00112da:	83 c4 10             	add    esp,0x10
c00112dd:	83 c4 0c             	add    esp,0xc
c00112e0:	c3                   	ret    

c00112e1 <KeHandleSleepButton()>:
c00112e1:	83 ec 0c             	sub    esp,0xc
c00112e4:	a1 c4 8e 02 c0       	mov    eax,ds:0xc0028ec4
c00112e9:	83 f8 02             	cmp    eax,0x2
c00112ec:	75 10                	jne    c00112fe <KeHandleSleepButton()+0x1d>
c00112ee:	83 ec 0c             	sub    esp,0xc
c00112f1:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00112f7:	e8 2c 5e ff ff       	call   c0007128 <Computer::shutdown()>
c00112fc:	eb 11                	jmp    c001130f <KeHandleSleepButton()+0x2e>
c00112fe:	48                   	dec    eax
c00112ff:	75 11                	jne    c0011312 <KeHandleSleepButton()+0x31>
c0011301:	83 ec 0c             	sub    esp,0xc
c0011304:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001130a:	e8 49 5e ff ff       	call   c0007158 <Computer::sleep()>
c001130f:	83 c4 10             	add    esp,0x10
c0011312:	83 c4 0c             	add    esp,0xc
c0011315:	c3                   	ret    

c0011316 <KeSetupPowerManager()>:
c0011316:	83 ec 0c             	sub    esp,0xc
c0011319:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c0011323:	68 f0 00 00 00       	push   0xf0
c0011328:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c001132f:	6a 00                	push   0x0
c0011331:	68 5d 12 01 c0       	push   0xc001125d
c0011336:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001133c:	e8 7f 45 00 00       	call   c00158c0 <Process::createThread(void (*)(void*), void*, int)>
c0011341:	c7 05 c0 8e 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x2
c001134b:	c7 05 c4 8e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028ec4,0x1
c0011355:	c7 05 c8 8e 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028ec8,0x3
c001135f:	c7 05 cc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ecc,0x0
c0011369:	c7 05 d8 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed8,0x0
c0011373:	c7 05 d0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed0,0x0
c001137d:	c7 05 dc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028edc,0x0
c0011387:	c7 05 d4 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ed4,0x3c
c0011391:	c7 05 e0 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ee0,0x3c
c001139b:	83 c4 1c             	add    esp,0x1c
c001139e:	c3                   	ret    

c001139f <KeRand()>:
c001139f:	69 05 e8 8e 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0028ee8,0x2875
c00113a9:	69 0d ec 8e 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc0028eec,0xa2e7b175
c00113b3:	53                   	push   ebx
c00113b4:	01 c1                	add    ecx,eax
c00113b6:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00113bb:	f7 25 e8 8e 02 c0    	mul    DWORD PTR ds:0xc0028ee8
c00113c1:	01 ca                	add    edx,ecx
c00113c3:	05 ef 04 b5 00       	add    eax,0xb504ef
c00113c8:	83 d2 00             	adc    edx,0x0
c00113cb:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c00113d0:	0f b7 da             	movzx  ebx,dx
c00113d3:	89 da                	mov    edx,ebx
c00113d5:	89 1d ec 8e 02 c0    	mov    DWORD PTR ds:0xc0028eec,ebx
c00113db:	0f ac d0 0e          	shrd   eax,edx,0xe
c00113df:	5b                   	pop    ebx
c00113e0:	c3                   	ret    

c00113e1 <KeSeedRand(unsigned int)>:
c00113e1:	53                   	push   ebx
c00113e2:	83 ec 08             	sub    esp,0x8
c00113e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00113e9:	e8 e7 69 00 00       	call   c0017dd5 <HalGetRand()>
c00113ee:	c7 05 ec 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eec,0x0
c00113f8:	31 d8                	xor    eax,ebx
c00113fa:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c00113ff:	e8 9b ff ff ff       	call   c001139f <KeRand()>
c0011404:	83 c4 08             	add    esp,0x8
c0011407:	5b                   	pop    ebx
c0011408:	eb 95                	jmp    c001139f <KeRand()>

c001140a <KeInitRand()>:
c001140a:	83 ec 0c             	sub    esp,0xc
c001140d:	e8 b8 67 00 00       	call   c0017bca <HalQueryPerformanceCounter()>
c0011412:	0f 20 da             	mov    edx,cr3
c0011415:	0f 22 da             	mov    cr3,edx
c0011418:	0f 20 da             	mov    edx,cr3
c001141b:	0f 22 da             	mov    cr3,edx
c001141e:	0f 20 da             	mov    edx,cr3
c0011421:	0f 22 da             	mov    cr3,edx
c0011424:	0f 20 da             	mov    edx,cr3
c0011427:	0f 22 da             	mov    cr3,edx
c001142a:	83 ec 0c             	sub    esp,0xc
c001142d:	35 03 8a 95 38       	xor    eax,0x38958a03
c0011432:	50                   	push   eax
c0011433:	e8 a9 ff ff ff       	call   c00113e1 <KeSeedRand(unsigned int)>
c0011438:	83 c4 1c             	add    esp,0x1c
c001143b:	c3                   	ret    

c001143c <KeResolveCompatibilitySymbol(char*)>:
c001143c:	83 ec 0c             	sub    esp,0xc
c001143f:	83 ec 08             	sub    esp,0x8
c0011442:	68 ac 1c 02 c0       	push   0xc0021cac
c0011447:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001144b:	e8 00 f3 fe ff       	call   c0000750 <strcmp>
c0011450:	83 c4 10             	add    esp,0x10
c0011453:	85 c0                	test   eax,eax
c0011455:	0f 94 c0             	sete   al
c0011458:	0f b6 c0             	movzx  eax,al
c001145b:	85 c0                	test   eax,eax
c001145d:	74 0d                	je     c001146c <KeResolveCompatibilitySymbol(char*)+0x30>
c001145f:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c0011464:	e9 8b 01 00 00       	jmp    c00115f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011469:	8d 76 00             	lea    esi,[esi+0x0]
c001146c:	83 ec 08             	sub    esp,0x8
c001146f:	68 b5 1c 02 c0       	push   0xc0021cb5
c0011474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011478:	e8 d3 f2 fe ff       	call   c0000750 <strcmp>
c001147d:	83 c4 10             	add    esp,0x10
c0011480:	85 c0                	test   eax,eax
c0011482:	0f 94 c0             	sete   al
c0011485:	0f b6 c0             	movzx  eax,al
c0011488:	85 c0                	test   eax,eax
c001148a:	74 0c                	je     c0011498 <KeResolveCompatibilitySymbol(char*)+0x5c>
c001148c:	b8 80 f1 01 c0       	mov    eax,0xc001f180
c0011491:	e9 5e 01 00 00       	jmp    c00115f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011496:	66 90                	xchg   ax,ax
c0011498:	83 ec 08             	sub    esp,0x8
c001149b:	68 bf 1c 02 c0       	push   0xc0021cbf
c00114a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114a4:	e8 a7 f2 fe ff       	call   c0000750 <strcmp>
c00114a9:	83 c4 10             	add    esp,0x10
c00114ac:	85 c0                	test   eax,eax
c00114ae:	0f 94 c0             	sete   al
c00114b1:	0f b6 c0             	movzx  eax,al
c00114b4:	85 c0                	test   eax,eax
c00114b6:	74 0c                	je     c00114c4 <KeResolveCompatibilitySymbol(char*)+0x88>
c00114b8:	b8 b4 ee 01 c0       	mov    eax,0xc001eeb4
c00114bd:	e9 32 01 00 00       	jmp    c00115f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114c2:	66 90                	xchg   ax,ax
c00114c4:	83 ec 08             	sub    esp,0x8
c00114c7:	68 c8 1c 02 c0       	push   0xc0021cc8
c00114cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114d0:	e8 7b f2 fe ff       	call   c0000750 <strcmp>
c00114d5:	83 c4 10             	add    esp,0x10
c00114d8:	85 c0                	test   eax,eax
c00114da:	0f 94 c0             	sete   al
c00114dd:	0f b6 c0             	movzx  eax,al
c00114e0:	85 c0                	test   eax,eax
c00114e2:	74 0c                	je     c00114f0 <KeResolveCompatibilitySymbol(char*)+0xb4>
c00114e4:	b8 51 12 01 c0       	mov    eax,0xc0011251
c00114e9:	e9 06 01 00 00       	jmp    c00115f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114ee:	66 90                	xchg   ax,ax
c00114f0:	83 ec 08             	sub    esp,0x8
c00114f3:	68 db 1c 02 c0       	push   0xc0021cdb
c00114f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114fc:	e8 4f f2 fe ff       	call   c0000750 <strcmp>
c0011501:	83 c4 10             	add    esp,0x10
c0011504:	85 c0                	test   eax,eax
c0011506:	0f 94 c0             	sete   al
c0011509:	0f b6 c0             	movzx  eax,al
c001150c:	85 c0                	test   eax,eax
c001150e:	74 0c                	je     c001151c <KeResolveCompatibilitySymbol(char*)+0xe0>
c0011510:	b8 7b 0b 01 c0       	mov    eax,0xc0010b7b
c0011515:	e9 da 00 00 00       	jmp    c00115f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001151a:	66 90                	xchg   ax,ax
c001151c:	83 ec 08             	sub    esp,0x8
c001151f:	68 f8 1c 02 c0       	push   0xc0021cf8
c0011524:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011528:	e8 23 f2 fe ff       	call   c0000750 <strcmp>
c001152d:	83 c4 10             	add    esp,0x10
c0011530:	85 c0                	test   eax,eax
c0011532:	0f 94 c0             	sete   al
c0011535:	0f b6 c0             	movzx  eax,al
c0011538:	85 c0                	test   eax,eax
c001153a:	74 0c                	je     c0011548 <KeResolveCompatibilitySymbol(char*)+0x10c>
c001153c:	b8 80 f2 01 c0       	mov    eax,0xc001f280
c0011541:	e9 ae 00 00 00       	jmp    c00115f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011546:	66 90                	xchg   ax,ax
c0011548:	83 ec 08             	sub    esp,0x8
c001154b:	68 02 1d 02 c0       	push   0xc0021d02
c0011550:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011554:	e8 f7 f1 fe ff       	call   c0000750 <strcmp>
c0011559:	83 c4 10             	add    esp,0x10
c001155c:	85 c0                	test   eax,eax
c001155e:	0f 94 c0             	sete   al
c0011561:	0f b6 c0             	movzx  eax,al
c0011564:	85 c0                	test   eax,eax
c0011566:	74 0c                	je     c0011574 <KeResolveCompatibilitySymbol(char*)+0x138>
c0011568:	b8 00 f0 01 c0       	mov    eax,0xc001f000
c001156d:	e9 82 00 00 00       	jmp    c00115f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011572:	66 90                	xchg   ax,ax
c0011574:	83 ec 08             	sub    esp,0x8
c0011577:	68 0b 1d 02 c0       	push   0xc0021d0b
c001157c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011580:	e8 cb f1 fe ff       	call   c0000750 <strcmp>
c0011585:	83 c4 10             	add    esp,0x10
c0011588:	85 c0                	test   eax,eax
c001158a:	0f 94 c0             	sete   al
c001158d:	0f b6 c0             	movzx  eax,al
c0011590:	85 c0                	test   eax,eax
c0011592:	74 08                	je     c001159c <KeResolveCompatibilitySymbol(char*)+0x160>
c0011594:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0011599:	eb 59                	jmp    c00115f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001159b:	90                   	nop
c001159c:	83 ec 08             	sub    esp,0x8
c001159f:	68 23 1d 02 c0       	push   0xc0021d23
c00115a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115a8:	e8 a3 f1 fe ff       	call   c0000750 <strcmp>
c00115ad:	83 c4 10             	add    esp,0x10
c00115b0:	85 c0                	test   eax,eax
c00115b2:	0f 94 c0             	sete   al
c00115b5:	0f b6 c0             	movzx  eax,al
c00115b8:	85 c0                	test   eax,eax
c00115ba:	74 08                	je     c00115c4 <KeResolveCompatibilitySymbol(char*)+0x188>
c00115bc:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c00115c1:	eb 31                	jmp    c00115f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115c3:	90                   	nop
c00115c4:	83 ec 08             	sub    esp,0x8
c00115c7:	68 30 1d 02 c0       	push   0xc0021d30
c00115cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115d0:	e8 7b f1 fe ff       	call   c0000750 <strcmp>
c00115d5:	83 c4 10             	add    esp,0x10
c00115d8:	85 c0                	test   eax,eax
c00115da:	0f 94 c0             	sete   al
c00115dd:	0f b6 c0             	movzx  eax,al
c00115e0:	85 c0                	test   eax,eax
c00115e2:	74 08                	je     c00115ec <KeResolveCompatibilitySymbol(char*)+0x1b0>
c00115e4:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c00115e9:	eb 09                	jmp    c00115f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115eb:	90                   	nop
c00115ec:	b8 00 00 00 00       	mov    eax,0x0
c00115f1:	8d 76 00             	lea    esi,[esi+0x0]
c00115f4:	83 c4 0c             	add    esp,0xc
c00115f7:	c3                   	ret    

c00115f8 <KiSigKill(int)>:
c00115f8:	83 ec 0c             	sub    esp,0xc
c00115fb:	6a 00                	push   0x0
c00115fd:	6a 00                	push   0x0
c00115ff:	6a ff                	push   0xffffffff
c0011601:	6a 01                	push   0x1
c0011603:	e8 4a 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011608:	83 c4 1c             	add    esp,0x1c
c001160b:	c3                   	ret    

c001160c <KiDefaultSignalHandlerIgnore(int)>:
c001160c:	c3                   	ret    

c001160d <KiDefaultSignalHandlerPause(int)>:
c001160d:	57                   	push   edi
c001160e:	b9 07 00 00 00       	mov    ecx,0x7
c0011613:	56                   	push   esi
c0011614:	be 79 1d 02 c0       	mov    esi,0xc0021d79
c0011619:	83 ec 24             	sub    esp,0x24
c001161c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011620:	fc                   	cld    
c0011621:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011623:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011627:	50                   	push   eax
c0011628:	6a 00                	push   0x0
c001162a:	6a 00                	push   0x0
c001162c:	6a 27                	push   0x27
c001162e:	e8 1f 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011633:	83 c4 34             	add    esp,0x34
c0011636:	5e                   	pop    esi
c0011637:	5f                   	pop    edi
c0011638:	c3                   	ret    

c0011639 <KiDefaultSignalHandlerResume(int)>:
c0011639:	57                   	push   edi
c001163a:	b9 1d 00 00 00       	mov    ecx,0x1d
c001163f:	56                   	push   esi
c0011640:	be 95 1d 02 c0       	mov    esi,0xc0021d95
c0011645:	83 ec 24             	sub    esp,0x24
c0011648:	8d 7c 24 03          	lea    edi,[esp+0x3]
c001164c:	fc                   	cld    
c001164d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001164f:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011653:	50                   	push   eax
c0011654:	6a 00                	push   0x0
c0011656:	6a 00                	push   0x0
c0011658:	6a 27                	push   0x27
c001165a:	e8 f3 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001165f:	83 c4 34             	add    esp,0x34
c0011662:	5e                   	pop    esi
c0011663:	5f                   	pop    edi
c0011664:	c3                   	ret    

c0011665 <KeDeinitSignals(SigHandlerBlock*)>:
c0011665:	e9 5c 64 ff ff       	jmp    c0007ac6 <free>

c001166a <KeInitSignals()>:
c001166a:	53                   	push   ebx
c001166b:	83 ec 14             	sub    esp,0x14
c001166e:	68 c8 00 00 00       	push   0xc8
c0011673:	e8 3e 64 ff ff       	call   c0007ab6 <malloc>
c0011678:	83 c4 0c             	add    esp,0xc
c001167b:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011685:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c001168f:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0011696:	89 c3                	mov    ebx,eax
c0011698:	6a 20                	push   0x20
c001169a:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00116a0:	6a 00                	push   0x0
c00116a2:	50                   	push   eax
c00116a3:	e8 48 ee fe ff       	call   c00004f0 <memset>
c00116a8:	83 c4 0c             	add    esp,0xc
c00116ab:	6a 44                	push   0x44
c00116ad:	6a 00                	push   0x0
c00116af:	53                   	push   ebx
c00116b0:	e8 3b ee fe ff       	call   c00004f0 <memset>
c00116b5:	89 d8                	mov    eax,ebx
c00116b7:	83 c4 18             	add    esp,0x18
c00116ba:	5b                   	pop    ebx
c00116bb:	c3                   	ret    

c00116bc <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00116bc:	53                   	push   ebx
c00116bd:	b8 01 00 00 00       	mov    eax,0x1
c00116c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00116c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00116ca:	83 f9 10             	cmp    ecx,0x10
c00116cd:	7f 21                	jg     c00116f0 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c00116cf:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c00116d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116d6:	89 03                	mov    DWORD PTR [ebx],eax
c00116d8:	b8 01 00 00 00       	mov    eax,0x1
c00116dd:	d3 e0                	shl    eax,cl
c00116df:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00116e3:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00116e6:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00116ee:	31 c0                	xor    eax,eax
c00116f0:	5b                   	pop    ebx
c00116f1:	c3                   	ret    

c00116f2 <KeRaiseSignal(SigHandlerBlock*, int)>:
c00116f2:	55                   	push   ebp
c00116f3:	57                   	push   edi
c00116f4:	bf 08 00 00 00       	mov    edi,0x8
c00116f9:	56                   	push   esi
c00116fa:	53                   	push   ebx
c00116fb:	83 ec 18             	sub    esp,0x18
c00116fe:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011702:	68 b2 1d 02 c0       	push   0xc0021db2
c0011707:	e8 39 92 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001170c:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011713:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011719:	83 c4 10             	add    esp,0x10
c001171c:	31 c9                	xor    ecx,ecx
c001171e:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011722:	99                   	cdq    
c0011723:	f7 ff                	idiv   edi
c0011725:	8d 42 24             	lea    eax,[edx+0x24]
c0011728:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c001172c:	85 f6                	test   esi,esi
c001172e:	75 1a                	jne    c001174a <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011734:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011738:	50                   	push   eax
c0011739:	50                   	push   eax
c001173a:	52                   	push   edx
c001173b:	68 c3 1d 02 c0       	push   0xc0021dc3
c0011740:	e8 00 92 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011745:	83 c4 10             	add    esp,0x10
c0011748:	eb 1b                	jmp    c0011765 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c001174a:	41                   	inc    ecx
c001174b:	83 f9 08             	cmp    ecx,0x8
c001174e:	75 ce                	jne    c001171e <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011750:	83 ec 0c             	sub    esp,0xc
c0011753:	be 01 00 00 00       	mov    esi,0x1
c0011758:	68 e4 1d 02 c0       	push   0xc0021de4
c001175d:	e8 e3 91 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011762:	83 c4 10             	add    esp,0x10
c0011765:	83 c4 0c             	add    esp,0xc
c0011768:	89 f0                	mov    eax,esi
c001176a:	5b                   	pop    ebx
c001176b:	5e                   	pop    esi
c001176c:	5f                   	pop    edi
c001176d:	5d                   	pop    ebp
c001176e:	c3                   	ret    

c001176f <KeCheckSignal(SigHandlerBlock*, int*)>:
c001176f:	55                   	push   ebp
c0011770:	57                   	push   edi
c0011771:	56                   	push   esi
c0011772:	53                   	push   ebx
c0011773:	51                   	push   ecx
c0011774:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011778:	85 db                	test   ebx,ebx
c001177a:	0f 84 bc 00 00 00    	je     c001183c <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011780:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011787:	0f 84 af 00 00 00    	je     c001183c <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001178d:	31 c9                	xor    ecx,ecx
c001178f:	bf 08 00 00 00       	mov    edi,0x8
c0011794:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c001179a:	8d 04 0e             	lea    eax,[esi+ecx*1]
c001179d:	99                   	cdq    
c001179e:	f7 ff                	idiv   edi
c00117a0:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00117a7:	85 ed                	test   ebp,ebp
c00117a9:	0f 84 9e 00 00 00    	je     c001184d <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c00117af:	89 e9                	mov    ecx,ebp
c00117b1:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00117b7:	bf 01 00 00 00       	mov    edi,0x1
c00117bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00117bf:	d3 e7                	shl    edi,cl
c00117c1:	31 c9                	xor    ecx,ecx
c00117c3:	b8 01 00 00 00       	mov    eax,0x1
c00117c8:	d3 e0                	shl    eax,cl
c00117ca:	85 04 24             	test   DWORD PTR [esp],eax
c00117cd:	74 06                	je     c00117d5 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c00117cf:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00117d3:	75 67                	jne    c001183c <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00117d5:	41                   	inc    ecx
c00117d6:	83 f9 11             	cmp    ecx,0x11
c00117d9:	75 e8                	jne    c00117c3 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c00117db:	46                   	inc    esi
c00117dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00117df:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00117e5:	09 f8                	or     eax,edi
c00117e7:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c00117f2:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00117f8:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00117ff:	31 c0                	xor    eax,eax
c0011801:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011809:	74 09                	je     c0011814 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c001180b:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011812:	eb 06                	jmp    c001181a <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011814:	40                   	inc    eax
c0011815:	83 f8 08             	cmp    eax,0x8
c0011818:	75 e7                	jne    c0011801 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c001181a:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c001181d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011821:	83 fd 09             	cmp    ebp,0x9
c0011824:	89 2a                	mov    DWORD PTR [edx],ebp
c0011826:	75 07                	jne    c001182f <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011828:	b8 f8 15 01 c0       	mov    eax,0xc00115f8
c001182d:	eb 31                	jmp    c0011860 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001182f:	83 f8 01             	cmp    eax,0x1
c0011832:	75 0c                	jne    c0011840 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011834:	f7 d7                	not    edi
c0011836:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c001183c:	31 c0                	xor    eax,eax
c001183e:	eb 20                	jmp    c0011860 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011840:	85 c0                	test   eax,eax
c0011842:	75 1c                	jne    c0011860 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011844:	8b 04 ad e0 31 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdce20]
c001184b:	eb 13                	jmp    c0011860 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001184d:	46                   	inc    esi
c001184e:	41                   	inc    ecx
c001184f:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011855:	83 f9 08             	cmp    ecx,0x8
c0011858:	0f 85 36 ff ff ff    	jne    c0011794 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c001185e:	eb dc                	jmp    c001183c <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011860:	5a                   	pop    edx
c0011861:	5b                   	pop    ebx
c0011862:	5e                   	pop    esi
c0011863:	5f                   	pop    edi
c0011864:	5d                   	pop    ebp
c0011865:	c3                   	ret    

c0011866 <KiCheckSignalZ>:
c0011866:	83 ec 10             	sub    esp,0x10
c0011869:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001186d:	50                   	push   eax
c001186e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011873:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011876:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001187c:	e8 ee fe ff ff       	call   c001176f <KeCheckSignal(SigHandlerBlock*, int*)>
c0011881:	5a                   	pop    edx
c0011882:	31 d2                	xor    edx,edx
c0011884:	59                   	pop    ecx
c0011885:	85 c0                	test   eax,eax
c0011887:	74 19                	je     c00118a2 <KiCheckSignalZ+0x3c>
c0011889:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001188f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011892:	89 02                	mov    DWORD PTR [edx],eax
c0011894:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c001189b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001189f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00118a2:	89 d0                	mov    eax,edx
c00118a4:	83 c4 10             	add    esp,0x10
c00118a7:	c3                   	ret    

c00118a8 <KeCompleteSignal(SigHandlerBlock*, int)>:
c00118a8:	56                   	push   esi
c00118a9:	53                   	push   ebx
c00118aa:	bb 01 00 00 00       	mov    ebx,0x1
c00118af:	52                   	push   edx
c00118b0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00118b4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00118b8:	d3 e3                	shl    ebx,cl
c00118ba:	83 f9 10             	cmp    ecx,0x10
c00118bd:	7f 08                	jg     c00118c7 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00118bf:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00118c5:	75 10                	jne    c00118d7 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00118c7:	83 ec 0c             	sub    esp,0xc
c00118ca:	68 f5 1d 02 c0       	push   0xc0021df5
c00118cf:	e8 7d f9 ff ff       	call   c0011251 <KePanic(char const*)>
c00118d4:	83 c4 10             	add    esp,0x10
c00118d7:	f7 d3                	not    ebx
c00118d9:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00118df:	58                   	pop    eax
c00118e0:	5b                   	pop    ebx
c00118e1:	5e                   	pop    esi
c00118e2:	c3                   	ret    

c00118e3 <KiFinishSignalZ>:
c00118e3:	53                   	push   ebx
c00118e4:	83 ec 10             	sub    esp,0x10
c00118e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00118eb:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c00118ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118f3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00118f6:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00118fc:	e8 a7 ff ff ff       	call   c00118a8 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011901:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011907:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001190e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011915:	83 c4 18             	add    esp,0x18
c0011918:	5b                   	pop    ebx
c0011919:	c3                   	ret    

c001191a <SysSeekDir(regs*)>:
c001191a:	31 c0                	xor    eax,eax
c001191c:	31 d2                	xor    edx,edx
c001191e:	c3                   	ret    

c001191f <SysTellDir(regs*)>:
c001191f:	31 c0                	xor    eax,eax
c0011921:	31 d2                	xor    edx,edx
c0011923:	c3                   	ret    

c0011924 <SysVerify(regs*)>:
c0011924:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011928:	31 d2                	xor    edx,edx
c001192a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001192d:	c3                   	ret    

c001192e <SysGetArgc(regs*)>:
c001192e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011933:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011936:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c001193c:	89 c2                	mov    edx,eax
c001193e:	c1 fa 1f             	sar    edx,0x1f
c0011941:	c3                   	ret    

c0011942 <SysTTYName(regs*)>:
c0011942:	b8 01 00 00 00       	mov    eax,0x1
c0011947:	31 d2                	xor    edx,edx
c0011949:	c3                   	ret    

c001194a <SysFormatDisk(regs*)>:
c001194a:	56                   	push   esi
c001194b:	53                   	push   ebx
c001194c:	83 ec 04             	sub    esp,0x4
c001194f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011953:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c0011959:	eb 28                	jmp    c0011983 <SysFormatDisk(regs*)+0x39>
c001195b:	83 ec 0c             	sub    esp,0xc
c001195e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011961:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011964:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011966:	51                   	push   ecx
c0011967:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c001196a:	51                   	push   ecx
c001196b:	50                   	push   eax
c001196c:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0011973:	50                   	push   eax
c0011974:	53                   	push   ebx
c0011975:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011978:	83 c4 20             	add    esp,0x20
c001197b:	83 f8 08             	cmp    eax,0x8
c001197e:	75 14                	jne    c0011994 <SysFormatDisk(regs*)+0x4a>
c0011980:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011983:	85 db                	test   ebx,ebx
c0011985:	75 d4                	jne    c001195b <SysFormatDisk(regs*)+0x11>
c0011987:	83 c4 04             	add    esp,0x4
c001198a:	b8 03 00 00 00       	mov    eax,0x3
c001198f:	31 d2                	xor    edx,edx
c0011991:	5b                   	pop    ebx
c0011992:	5e                   	pop    esi
c0011993:	c3                   	ret    
c0011994:	85 c0                	test   eax,eax
c0011996:	74 1f                	je     c00119b7 <SysFormatDisk(regs*)+0x6d>
c0011998:	83 f8 09             	cmp    eax,0x9
c001199b:	74 0d                	je     c00119aa <SysFormatDisk(regs*)+0x60>
c001199d:	83 c4 04             	add    esp,0x4
c00119a0:	b8 02 00 00 00       	mov    eax,0x2
c00119a5:	31 d2                	xor    edx,edx
c00119a7:	5b                   	pop    ebx
c00119a8:	5e                   	pop    esi
c00119a9:	c3                   	ret    
c00119aa:	83 c4 04             	add    esp,0x4
c00119ad:	b8 01 00 00 00       	mov    eax,0x1
c00119b2:	31 d2                	xor    edx,edx
c00119b4:	5b                   	pop    ebx
c00119b5:	5e                   	pop    esi
c00119b6:	c3                   	ret    
c00119b7:	83 c4 04             	add    esp,0x4
c00119ba:	31 c0                	xor    eax,eax
c00119bc:	31 d2                	xor    edx,edx
c00119be:	5b                   	pop    ebx
c00119bf:	5e                   	pop    esi
c00119c0:	c3                   	ret    

c00119c1 <SysSetDiskVolumeLabel(regs*)>:
c00119c1:	56                   	push   esi
c00119c2:	53                   	push   ebx
c00119c3:	83 ec 04             	sub    esp,0x4
c00119c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00119ca:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00119cd:	83 f8 19             	cmp    eax,0x19
c00119d0:	77 33                	ja     c0011a05 <SysSetDiskVolumeLabel(regs*)+0x44>
c00119d2:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c00119d9:	85 c9                	test   ecx,ecx
c00119db:	74 28                	je     c0011a05 <SysSetDiskVolumeLabel(regs*)+0x44>
c00119dd:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00119e0:	85 db                	test   ebx,ebx
c00119e2:	74 21                	je     c0011a05 <SysSetDiskVolumeLabel(regs*)+0x44>
c00119e4:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00119ea:	85 d2                	test   edx,edx
c00119ec:	74 17                	je     c0011a05 <SysSetDiskVolumeLabel(regs*)+0x44>
c00119ee:	8b 32                	mov    esi,DWORD PTR [edx]
c00119f0:	53                   	push   ebx
c00119f1:	50                   	push   eax
c00119f2:	51                   	push   ecx
c00119f3:	52                   	push   edx
c00119f4:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c00119f7:	83 c4 10             	add    esp,0x10
c00119fa:	89 c2                	mov    edx,eax
c00119fc:	83 c4 04             	add    esp,0x4
c00119ff:	c1 fa 1f             	sar    edx,0x1f
c0011a02:	5b                   	pop    ebx
c0011a03:	5e                   	pop    esi
c0011a04:	c3                   	ret    
c0011a05:	83 c4 04             	add    esp,0x4
c0011a08:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011a0d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a12:	5b                   	pop    ebx
c0011a13:	5e                   	pop    esi
c0011a14:	c3                   	ret    

c0011a15 <SysGetDiskVolumeLabel(regs*)>:
c0011a15:	57                   	push   edi
c0011a16:	56                   	push   esi
c0011a17:	53                   	push   ebx
c0011a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a1c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011a1f:	83 fa 19             	cmp    edx,0x19
c0011a22:	77 3c                	ja     c0011a60 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a24:	8b 0c 95 80 88 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7780]
c0011a2b:	85 c9                	test   ecx,ecx
c0011a2d:	74 31                	je     c0011a60 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a2f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011a32:	85 db                	test   ebx,ebx
c0011a34:	74 2a                	je     c0011a60 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a36:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011a39:	85 f6                	test   esi,esi
c0011a3b:	74 23                	je     c0011a60 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a3d:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011a43:	85 c0                	test   eax,eax
c0011a45:	74 19                	je     c0011a60 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a47:	83 ec 0c             	sub    esp,0xc
c0011a4a:	8b 38                	mov    edi,DWORD PTR [eax]
c0011a4c:	56                   	push   esi
c0011a4d:	53                   	push   ebx
c0011a4e:	52                   	push   edx
c0011a4f:	51                   	push   ecx
c0011a50:	50                   	push   eax
c0011a51:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011a54:	83 c4 20             	add    esp,0x20
c0011a57:	89 c2                	mov    edx,eax
c0011a59:	5b                   	pop    ebx
c0011a5a:	c1 fa 1f             	sar    edx,0x1f
c0011a5d:	5e                   	pop    esi
c0011a5e:	5f                   	pop    edi
c0011a5f:	c3                   	ret    
c0011a60:	5b                   	pop    ebx
c0011a61:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011a66:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a6b:	5e                   	pop    esi
c0011a6c:	5f                   	pop    edi
c0011a6d:	c3                   	ret    

c0011a6e <SysShutdown(regs*)>:
c0011a6e:	83 ec 0c             	sub    esp,0xc
c0011a71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a75:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011a78:	85 c0                	test   eax,eax
c0011a7a:	74 18                	je     c0011a94 <SysShutdown(regs*)+0x26>
c0011a7c:	83 f8 01             	cmp    eax,0x1
c0011a7f:	74 38                	je     c0011ab9 <SysShutdown(regs*)+0x4b>
c0011a81:	83 f8 02             	cmp    eax,0x2
c0011a84:	74 24                	je     c0011aaa <SysShutdown(regs*)+0x3c>
c0011a86:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a8b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a90:	83 c4 0c             	add    esp,0xc
c0011a93:	c3                   	ret    
c0011a94:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011a99:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a9b:	6a 00                	push   0x0
c0011a9d:	6a 00                	push   0x0
c0011a9f:	6a 00                	push   0x0
c0011aa1:	50                   	push   eax
c0011aa2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011aa5:	83 c4 10             	add    esp,0x10
c0011aa8:	eb dc                	jmp    c0011a86 <SysShutdown(regs*)+0x18>
c0011aaa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011aaf:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ab1:	6a 00                	push   0x0
c0011ab3:	6a 00                	push   0x0
c0011ab5:	6a 01                	push   0x1
c0011ab7:	eb e8                	jmp    c0011aa1 <SysShutdown(regs*)+0x33>
c0011ab9:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c0011abe:	85 c0                	test   eax,eax
c0011ac0:	74 02                	je     c0011ac4 <SysShutdown(regs*)+0x56>
c0011ac2:	ff d0                	call   eax
c0011ac4:	31 c0                	xor    eax,eax
c0011ac6:	31 d2                	xor    edx,edx
c0011ac8:	83 c4 0c             	add    esp,0xc
c0011acb:	c3                   	ret    

c0011acc <SysRealpath(regs*)>:
c0011acc:	83 ec 0c             	sub    esp,0xc
c0011acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ad3:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011ad6:	85 d2                	test   edx,edx
c0011ad8:	74 07                	je     c0011ae1 <SysRealpath(regs*)+0x15>
c0011ada:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011add:	85 c0                	test   eax,eax
c0011adf:	75 0b                	jne    c0011aec <SysRealpath(regs*)+0x20>
c0011ae1:	b8 01 00 00 00       	mov    eax,0x1
c0011ae6:	31 d2                	xor    edx,edx
c0011ae8:	83 c4 0c             	add    esp,0xc
c0011aeb:	c3                   	ret    
c0011aec:	83 ec 04             	sub    esp,0x4
c0011aef:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011af5:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011af8:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011afe:	51                   	push   ecx
c0011aff:	52                   	push   edx
c0011b00:	50                   	push   eax
c0011b01:	e8 5c 9a ff ff       	call   c000b562 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011b06:	83 c4 10             	add    esp,0x10
c0011b09:	31 c0                	xor    eax,eax
c0011b0b:	31 d2                	xor    edx,edx
c0011b0d:	83 c4 0c             	add    esp,0xc
c0011b10:	c3                   	ret    

c0011b11 <SysReadDir(regs*)>:
c0011b11:	53                   	push   ebx
c0011b12:	83 ec 18             	sub    esp,0x18
c0011b15:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b19:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011b1c:	83 f8 02             	cmp    eax,0x2
c0011b1f:	76 61                	jbe    c0011b82 <SysReadDir(regs*)+0x71>
c0011b21:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011b28:	77 49                	ja     c0011b73 <SysReadDir(regs*)+0x62>
c0011b2a:	83 ec 0c             	sub    esp,0xc
c0011b2d:	50                   	push   eax
c0011b2e:	e8 80 79 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011b33:	83 c4 10             	add    esp,0x10
c0011b36:	85 c0                	test   eax,eax
c0011b38:	74 39                	je     c0011b73 <SysReadDir(regs*)+0x62>
c0011b3a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011b42:	83 ec 0c             	sub    esp,0xc
c0011b45:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b47:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011b4b:	51                   	push   ecx
c0011b4c:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011b4f:	51                   	push   ecx
c0011b50:	6a 00                	push   0x0
c0011b52:	68 10 01 00 00       	push   0x110
c0011b57:	50                   	push   eax
c0011b58:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011b5b:	83 c4 20             	add    esp,0x20
c0011b5e:	85 c0                	test   eax,eax
c0011b60:	74 29                	je     c0011b8b <SysReadDir(regs*)+0x7a>
c0011b62:	83 f8 07             	cmp    eax,0x7
c0011b65:	74 1b                	je     c0011b82 <SysReadDir(regs*)+0x71>
c0011b67:	b8 02 00 00 00       	mov    eax,0x2
c0011b6c:	31 d2                	xor    edx,edx
c0011b6e:	83 c4 18             	add    esp,0x18
c0011b71:	5b                   	pop    ebx
c0011b72:	c3                   	ret    
c0011b73:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b78:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b7d:	83 c4 18             	add    esp,0x18
c0011b80:	5b                   	pop    ebx
c0011b81:	c3                   	ret    
c0011b82:	b8 01 00 00 00       	mov    eax,0x1
c0011b87:	31 d2                	xor    edx,edx
c0011b89:	eb e3                	jmp    c0011b6e <SysReadDir(regs*)+0x5d>
c0011b8b:	31 c0                	xor    eax,eax
c0011b8d:	31 d2                	xor    edx,edx
c0011b8f:	eb dd                	jmp    c0011b6e <SysReadDir(regs*)+0x5d>

c0011b91 <SysIsATTY(regs*)>:
c0011b91:	83 ec 0c             	sub    esp,0xc
c0011b94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b98:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011b9b:	83 f8 02             	cmp    eax,0x2
c0011b9e:	76 07                	jbe    c0011ba7 <SysIsATTY(regs*)+0x16>
c0011ba0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011ba5:	75 26                	jne    c0011bcd <SysIsATTY(regs*)+0x3c>
c0011ba7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011baf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011bb5:	85 c0                	test   eax,eax
c0011bb7:	74 24                	je     c0011bdd <SysIsATTY(regs*)+0x4c>
c0011bb9:	83 ec 0c             	sub    esp,0xc
c0011bbc:	8b 10                	mov    edx,DWORD PTR [eax]
c0011bbe:	50                   	push   eax
c0011bbf:	ff 12                	call   DWORD PTR [edx]
c0011bc1:	31 d2                	xor    edx,edx
c0011bc3:	0f b6 c0             	movzx  eax,al
c0011bc6:	83 c4 10             	add    esp,0x10
c0011bc9:	83 c4 0c             	add    esp,0xc
c0011bcc:	c3                   	ret    
c0011bcd:	83 ec 0c             	sub    esp,0xc
c0011bd0:	50                   	push   eax
c0011bd1:	e8 dd 78 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011bd6:	83 c4 10             	add    esp,0x10
c0011bd9:	85 c0                	test   eax,eax
c0011bdb:	75 dc                	jne    c0011bb9 <SysIsATTY(regs*)+0x28>
c0011bdd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011be2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011be7:	83 c4 0c             	add    esp,0xc
c0011bea:	c3                   	ret    

c0011beb <SysSeek(regs*)>:
c0011beb:	53                   	push   ebx
c0011bec:	83 ec 08             	sub    esp,0x8
c0011bef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011bf3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011bf6:	8d 50 fd             	lea    edx,[eax-0x3]
c0011bf9:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011bff:	77 32                	ja     c0011c33 <SysSeek(regs*)+0x48>
c0011c01:	83 ec 0c             	sub    esp,0xc
c0011c04:	50                   	push   eax
c0011c05:	e8 a9 78 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011c0a:	83 c4 0c             	add    esp,0xc
c0011c0d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011c10:	31 db                	xor    ebx,ebx
c0011c12:	53                   	push   ebx
c0011c13:	51                   	push   ecx
c0011c14:	50                   	push   eax
c0011c15:	e8 78 9c ff ff       	call   c000b892 <File::seek(unsigned long long)>
c0011c1a:	83 c4 10             	add    esp,0x10
c0011c1d:	85 c0                	test   eax,eax
c0011c1f:	0f 95 c0             	setne  al
c0011c22:	31 d2                	xor    edx,edx
c0011c24:	0f b6 c0             	movzx  eax,al
c0011c27:	f7 d8                	neg    eax
c0011c29:	83 d2 00             	adc    edx,0x0
c0011c2c:	83 c4 08             	add    esp,0x8
c0011c2f:	f7 da                	neg    edx
c0011c31:	5b                   	pop    ebx
c0011c32:	c3                   	ret    
c0011c33:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c38:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c3d:	83 c4 08             	add    esp,0x8
c0011c40:	5b                   	pop    ebx
c0011c41:	c3                   	ret    

c0011c42 <SysTell(regs*)>:
c0011c42:	53                   	push   ebx
c0011c43:	83 ec 08             	sub    esp,0x8
c0011c46:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c4a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c4d:	83 f8 02             	cmp    eax,0x2
c0011c50:	76 4e                	jbe    c0011ca0 <SysTell(regs*)+0x5e>
c0011c52:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011c57:	76 19                	jbe    c0011c72 <SysTell(regs*)+0x30>
c0011c59:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011c5c:	31 d2                	xor    edx,edx
c0011c5e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011c64:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c6b:	31 c0                	xor    eax,eax
c0011c6d:	83 c4 08             	add    esp,0x8
c0011c70:	5b                   	pop    ebx
c0011c71:	c3                   	ret    
c0011c72:	83 ec 0c             	sub    esp,0xc
c0011c75:	50                   	push   eax
c0011c76:	e8 38 78 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011c7b:	5a                   	pop    edx
c0011c7c:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011c7f:	59                   	pop    ecx
c0011c80:	53                   	push   ebx
c0011c81:	50                   	push   eax
c0011c82:	e8 b7 9c ff ff       	call   c000b93e <File::tell(unsigned long long*)>
c0011c87:	83 c4 10             	add    esp,0x10
c0011c8a:	85 c0                	test   eax,eax
c0011c8c:	0f 95 c0             	setne  al
c0011c8f:	31 d2                	xor    edx,edx
c0011c91:	0f b6 c0             	movzx  eax,al
c0011c94:	f7 d8                	neg    eax
c0011c96:	83 d2 00             	adc    edx,0x0
c0011c99:	83 c4 08             	add    esp,0x8
c0011c9c:	f7 da                	neg    edx
c0011c9e:	5b                   	pop    ebx
c0011c9f:	c3                   	ret    
c0011ca0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ca5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011caa:	83 c4 08             	add    esp,0x8
c0011cad:	5b                   	pop    ebx
c0011cae:	c3                   	ret    

c0011caf <SysSize(regs*)>:
c0011caf:	53                   	push   ebx
c0011cb0:	83 ec 18             	sub    esp,0x18
c0011cb3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011cb7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011cba:	83 f8 02             	cmp    eax,0x2
c0011cbd:	76 54                	jbe    c0011d13 <SysSize(regs*)+0x64>
c0011cbf:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011cc4:	76 19                	jbe    c0011cdf <SysSize(regs*)+0x30>
c0011cc6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011cc9:	31 d2                	xor    edx,edx
c0011ccb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011cd1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011cd8:	31 c0                	xor    eax,eax
c0011cda:	83 c4 18             	add    esp,0x18
c0011cdd:	5b                   	pop    ebx
c0011cde:	c3                   	ret    
c0011cdf:	83 ec 0c             	sub    esp,0xc
c0011ce2:	50                   	push   eax
c0011ce3:	e8 cb 77 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011ce8:	83 c4 0c             	add    esp,0xc
c0011ceb:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011cef:	52                   	push   edx
c0011cf0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011cf3:	52                   	push   edx
c0011cf4:	50                   	push   eax
c0011cf5:	e8 dc 9d ff ff       	call   c000bad6 <File::stat(unsigned long long*, bool*)>
c0011cfa:	83 c4 10             	add    esp,0x10
c0011cfd:	85 c0                	test   eax,eax
c0011cff:	0f 95 c0             	setne  al
c0011d02:	31 d2                	xor    edx,edx
c0011d04:	0f b6 c0             	movzx  eax,al
c0011d07:	f7 d8                	neg    eax
c0011d09:	83 d2 00             	adc    edx,0x0
c0011d0c:	83 c4 18             	add    esp,0x18
c0011d0f:	f7 da                	neg    edx
c0011d11:	5b                   	pop    ebx
c0011d12:	c3                   	ret    
c0011d13:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d18:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d1d:	83 c4 18             	add    esp,0x18
c0011d20:	5b                   	pop    ebx
c0011d21:	c3                   	ret    

c0011d22 <SysSizeFromFilename(regs*)>:
c0011d22:	57                   	push   edi
c0011d23:	56                   	push   esi
c0011d24:	53                   	push   ebx
c0011d25:	83 ec 20             	sub    esp,0x20
c0011d28:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011d2c:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011d2f:	83 fb 02             	cmp    ebx,0x2
c0011d32:	0f 86 8a 00 00 00    	jbe    c0011dc2 <SysSizeFromFilename(regs*)+0xa0>
c0011d38:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011d3e:	76 1b                	jbe    c0011d5b <SysSizeFromFilename(regs*)+0x39>
c0011d40:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011d43:	31 d2                	xor    edx,edx
c0011d45:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011d4b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d52:	83 c4 20             	add    esp,0x20
c0011d55:	31 c0                	xor    eax,eax
c0011d57:	5b                   	pop    ebx
c0011d58:	5e                   	pop    esi
c0011d59:	5f                   	pop    edi
c0011d5a:	c3                   	ret    
c0011d5b:	83 ec 0c             	sub    esp,0xc
c0011d5e:	68 14 01 00 00       	push   0x114
c0011d63:	e8 4e 5d ff ff       	call   c0007ab6 <malloc>
c0011d68:	83 c4 0c             	add    esp,0xc
c0011d6b:	89 c7                	mov    edi,eax
c0011d6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d72:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d75:	50                   	push   eax
c0011d76:	53                   	push   ebx
c0011d77:	57                   	push   edi
c0011d78:	e8 9b 99 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c0011d7d:	83 c4 0c             	add    esp,0xc
c0011d80:	8d 44 24 23          	lea    eax,[esp+0x23]
c0011d84:	50                   	push   eax
c0011d85:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011d88:	52                   	push   edx
c0011d89:	57                   	push   edi
c0011d8a:	e8 47 9d ff ff       	call   c000bad6 <File::stat(unsigned long long*, bool*)>
c0011d8f:	83 c4 10             	add    esp,0x10
c0011d92:	85 ff                	test   edi,edi
c0011d94:	74 14                	je     c0011daa <SysSizeFromFilename(regs*)+0x88>
c0011d96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d9a:	8b 17                	mov    edx,DWORD PTR [edi]
c0011d9c:	83 ec 0c             	sub    esp,0xc
c0011d9f:	57                   	push   edi
c0011da0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011da3:	83 c4 10             	add    esp,0x10
c0011da6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011daa:	85 c0                	test   eax,eax
c0011dac:	0f 95 c0             	setne  al
c0011daf:	31 d2                	xor    edx,edx
c0011db1:	0f b6 c0             	movzx  eax,al
c0011db4:	f7 d8                	neg    eax
c0011db6:	83 d2 00             	adc    edx,0x0
c0011db9:	83 c4 20             	add    esp,0x20
c0011dbc:	f7 da                	neg    edx
c0011dbe:	5b                   	pop    ebx
c0011dbf:	5e                   	pop    esi
c0011dc0:	5f                   	pop    edi
c0011dc1:	c3                   	ret    
c0011dc2:	83 c4 20             	add    esp,0x20
c0011dc5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011dca:	5b                   	pop    ebx
c0011dcb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011dd0:	5e                   	pop    esi
c0011dd1:	5f                   	pop    edi
c0011dd2:	c3                   	ret    

c0011dd3 <SysClose(regs*)>:
c0011dd3:	53                   	push   ebx
c0011dd4:	83 ec 08             	sub    esp,0x8
c0011dd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ddb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011dde:	83 f8 02             	cmp    eax,0x2
c0011de1:	76 41                	jbe    c0011e24 <SysClose(regs*)+0x51>
c0011de3:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011de9:	83 fa 01             	cmp    edx,0x1
c0011dec:	76 2d                	jbe    c0011e1b <SysClose(regs*)+0x48>
c0011dee:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011df3:	77 2f                	ja     c0011e24 <SysClose(regs*)+0x51>
c0011df5:	83 ec 0c             	sub    esp,0xc
c0011df8:	50                   	push   eax
c0011df9:	e8 b5 76 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011dfe:	89 c3                	mov    ebx,eax
c0011e00:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e03:	e8 2a 9a ff ff       	call   c000b832 <File::close()>
c0011e08:	83 c4 10             	add    esp,0x10
c0011e0b:	85 db                	test   ebx,ebx
c0011e0d:	74 0c                	je     c0011e1b <SysClose(regs*)+0x48>
c0011e0f:	83 ec 0c             	sub    esp,0xc
c0011e12:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e14:	53                   	push   ebx
c0011e15:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e18:	83 c4 10             	add    esp,0x10
c0011e1b:	31 c0                	xor    eax,eax
c0011e1d:	31 d2                	xor    edx,edx
c0011e1f:	83 c4 08             	add    esp,0x8
c0011e22:	5b                   	pop    ebx
c0011e23:	c3                   	ret    
c0011e24:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e29:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e2e:	83 c4 08             	add    esp,0x8
c0011e31:	5b                   	pop    ebx
c0011e32:	c3                   	ret    

c0011e33 <SysOpenDir(regs*)>:
c0011e33:	56                   	push   esi
c0011e34:	53                   	push   ebx
c0011e35:	83 ec 04             	sub    esp,0x4
c0011e38:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011e3c:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011e3f:	85 c9                	test   ecx,ecx
c0011e41:	74 5d                	je     c0011ea0 <SysOpenDir(regs*)+0x6d>
c0011e43:	83 ec 0c             	sub    esp,0xc
c0011e46:	68 14 01 00 00       	push   0x114
c0011e4b:	e8 66 5c ff ff       	call   c0007ab6 <malloc>
c0011e50:	83 c4 0c             	add    esp,0xc
c0011e53:	89 c6                	mov    esi,eax
c0011e55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e5a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e5d:	50                   	push   eax
c0011e5e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011e61:	52                   	push   edx
c0011e62:	56                   	push   esi
c0011e63:	e8 2c 9e ff ff       	call   c000bc94 <Directory::Directory(char const*, Process*)>
c0011e68:	83 c4 10             	add    esp,0x10
c0011e6b:	85 f6                	test   esi,esi
c0011e6d:	74 31                	je     c0011ea0 <SysOpenDir(regs*)+0x6d>
c0011e6f:	83 ec 0c             	sub    esp,0xc
c0011e72:	56                   	push   esi
c0011e73:	e8 d8 9e ff ff       	call   c000bd50 <Directory::open()>
c0011e78:	83 c4 10             	add    esp,0x10
c0011e7b:	85 c0                	test   eax,eax
c0011e7d:	75 21                	jne    c0011ea0 <SysOpenDir(regs*)+0x6d>
c0011e7f:	83 ec 0c             	sub    esp,0xc
c0011e82:	56                   	push   esi
c0011e83:	e8 2e 73 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0011e88:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011e8b:	83 c4 10             	add    esp,0x10
c0011e8e:	89 02                	mov    DWORD PTR [edx],eax
c0011e90:	c1 f8 1f             	sar    eax,0x1f
c0011e93:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011e96:	83 c4 04             	add    esp,0x4
c0011e99:	31 c0                	xor    eax,eax
c0011e9b:	31 d2                	xor    edx,edx
c0011e9d:	5b                   	pop    ebx
c0011e9e:	5e                   	pop    esi
c0011e9f:	c3                   	ret    
c0011ea0:	83 c4 04             	add    esp,0x4
c0011ea3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ea8:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ead:	5b                   	pop    ebx
c0011eae:	5e                   	pop    esi
c0011eaf:	c3                   	ret    

c0011eb0 <SysMakeDir(regs*)>:
c0011eb0:	56                   	push   esi
c0011eb1:	53                   	push   ebx
c0011eb2:	83 ec 10             	sub    esp,0x10
c0011eb5:	68 14 01 00 00       	push   0x114
c0011eba:	e8 f7 5b ff ff       	call   c0007ab6 <malloc>
c0011ebf:	83 c4 0c             	add    esp,0xc
c0011ec2:	89 c3                	mov    ebx,eax
c0011ec4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ec9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ecc:	50                   	push   eax
c0011ecd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ed1:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011ed4:	52                   	push   edx
c0011ed5:	53                   	push   ebx
c0011ed6:	e8 b9 9d ff ff       	call   c000bc94 <Directory::Directory(char const*, Process*)>
c0011edb:	83 c4 10             	add    esp,0x10
c0011ede:	85 db                	test   ebx,ebx
c0011ee0:	74 2c                	je     c0011f0e <SysMakeDir(regs*)+0x5e>
c0011ee2:	83 ec 0c             	sub    esp,0xc
c0011ee5:	53                   	push   ebx
c0011ee6:	e8 45 a0 ff ff       	call   c000bf30 <Directory::create()>
c0011eeb:	89 c6                	mov    esi,eax
c0011eed:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011eef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011ef2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ef5:	83 c4 10             	add    esp,0x10
c0011ef8:	31 c0                	xor    eax,eax
c0011efa:	85 f6                	test   esi,esi
c0011efc:	0f 95 c0             	setne  al
c0011eff:	31 d2                	xor    edx,edx
c0011f01:	f7 d8                	neg    eax
c0011f03:	83 d2 00             	adc    edx,0x0
c0011f06:	83 c4 04             	add    esp,0x4
c0011f09:	f7 da                	neg    edx
c0011f0b:	5b                   	pop    ebx
c0011f0c:	5e                   	pop    esi
c0011f0d:	c3                   	ret    
c0011f0e:	83 c4 04             	add    esp,0x4
c0011f11:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f16:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f1b:	5b                   	pop    ebx
c0011f1c:	5e                   	pop    esi
c0011f1d:	c3                   	ret    

c0011f1e <SysCloseDir(regs*)>:
c0011f1e:	53                   	push   ebx
c0011f1f:	83 ec 08             	sub    esp,0x8
c0011f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f26:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f29:	8d 50 fd             	lea    edx,[eax-0x3]
c0011f2c:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011f32:	77 2f                	ja     c0011f63 <SysCloseDir(regs*)+0x45>
c0011f34:	83 ec 0c             	sub    esp,0xc
c0011f37:	50                   	push   eax
c0011f38:	e8 76 75 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011f3d:	89 c3                	mov    ebx,eax
c0011f3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0011f42:	e8 65 9e ff ff       	call   c000bdac <Directory::close()>
c0011f47:	83 c4 10             	add    esp,0x10
c0011f4a:	85 db                	test   ebx,ebx
c0011f4c:	74 0c                	je     c0011f5a <SysCloseDir(regs*)+0x3c>
c0011f4e:	83 ec 0c             	sub    esp,0xc
c0011f51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f53:	53                   	push   ebx
c0011f54:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f57:	83 c4 10             	add    esp,0x10
c0011f5a:	31 c0                	xor    eax,eax
c0011f5c:	31 d2                	xor    edx,edx
c0011f5e:	83 c4 08             	add    esp,0x8
c0011f61:	5b                   	pop    ebx
c0011f62:	c3                   	ret    
c0011f63:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f68:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f6d:	83 c4 08             	add    esp,0x8
c0011f70:	5b                   	pop    ebx
c0011f71:	c3                   	ret    

c0011f72 <SysWait(regs*)>:
c0011f72:	83 ec 10             	sub    esp,0x10
c0011f75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011f79:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011f7c:	52                   	push   edx
c0011f7d:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011f80:	51                   	push   ecx
c0011f81:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f84:	50                   	push   eax
c0011f85:	e8 d2 3d 00 00       	call   c0015d5c <waitTask(int, int*, int)>
c0011f8a:	83 c4 1c             	add    esp,0x1c
c0011f8d:	89 c2                	mov    edx,eax
c0011f8f:	c1 fa 1f             	sar    edx,0x1f
c0011f92:	c3                   	ret    

c0011f93 <SysNotImpl(regs*)>:
c0011f93:	83 ec 18             	sub    esp,0x18
c0011f96:	68 06 1e 02 c0       	push   0xc0021e06
c0011f9b:	e8 b1 f2 ff ff       	call   c0011251 <KePanic(char const*)>
c0011fa0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fa5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011faa:	83 c4 1c             	add    esp,0x1c
c0011fad:	c3                   	ret    

c0011fae <SysPanic(regs*)>:
c0011fae:	83 ec 18             	sub    esp,0x18
c0011fb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011fb5:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011fb8:	50                   	push   eax
c0011fb9:	e8 93 f2 ff ff       	call   c0011251 <KePanic(char const*)>
c0011fbe:	b8 01 00 00 00       	mov    eax,0x1
c0011fc3:	31 d2                	xor    edx,edx
c0011fc5:	83 c4 1c             	add    esp,0x1c
c0011fc8:	c3                   	ret    

c0011fc9 <SysRmdir(regs*)>:
c0011fc9:	56                   	push   esi
c0011fca:	53                   	push   ebx
c0011fcb:	83 ec 20             	sub    esp,0x20
c0011fce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fd2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011fd5:	68 14 01 00 00       	push   0x114
c0011fda:	e8 d7 5a ff ff       	call   c0007ab6 <malloc>
c0011fdf:	83 c4 0c             	add    esp,0xc
c0011fe2:	89 c3                	mov    ebx,eax
c0011fe4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fe9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fec:	50                   	push   eax
c0011fed:	56                   	push   esi
c0011fee:	53                   	push   ebx
c0011fef:	e8 24 97 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c0011ff4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011ff7:	e8 a6 99 ff ff       	call   c000b9a2 <File::unlink()>
c0011ffc:	83 c4 10             	add    esp,0x10
c0011fff:	85 db                	test   ebx,ebx
c0012001:	74 14                	je     c0012017 <SysRmdir(regs*)+0x4e>
c0012003:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012007:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012009:	83 ec 0c             	sub    esp,0xc
c001200c:	53                   	push   ebx
c001200d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012010:	83 c4 10             	add    esp,0x10
c0012013:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012017:	85 c0                	test   eax,eax
c0012019:	0f 95 c0             	setne  al
c001201c:	31 d2                	xor    edx,edx
c001201e:	0f b6 c0             	movzx  eax,al
c0012021:	f7 d8                	neg    eax
c0012023:	83 d2 00             	adc    edx,0x0
c0012026:	83 c4 14             	add    esp,0x14
c0012029:	f7 da                	neg    edx
c001202b:	5b                   	pop    ebx
c001202c:	5e                   	pop    esi
c001202d:	c3                   	ret    

c001202e <SysUnlink(regs*)>:
c001202e:	56                   	push   esi
c001202f:	53                   	push   ebx
c0012030:	83 ec 20             	sub    esp,0x20
c0012033:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012037:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001203a:	68 14 01 00 00       	push   0x114
c001203f:	e8 72 5a ff ff       	call   c0007ab6 <malloc>
c0012044:	83 c4 0c             	add    esp,0xc
c0012047:	89 c3                	mov    ebx,eax
c0012049:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001204e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012051:	50                   	push   eax
c0012052:	56                   	push   esi
c0012053:	53                   	push   ebx
c0012054:	e8 bf 96 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c0012059:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001205c:	e8 41 99 ff ff       	call   c000b9a2 <File::unlink()>
c0012061:	83 c4 10             	add    esp,0x10
c0012064:	85 db                	test   ebx,ebx
c0012066:	74 14                	je     c001207c <SysUnlink(regs*)+0x4e>
c0012068:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001206c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001206e:	83 ec 0c             	sub    esp,0xc
c0012071:	53                   	push   ebx
c0012072:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012075:	83 c4 10             	add    esp,0x10
c0012078:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001207c:	85 c0                	test   eax,eax
c001207e:	0f 95 c0             	setne  al
c0012081:	31 d2                	xor    edx,edx
c0012083:	0f b6 c0             	movzx  eax,al
c0012086:	f7 d8                	neg    eax
c0012088:	83 d2 00             	adc    edx,0x0
c001208b:	83 c4 14             	add    esp,0x14
c001208e:	f7 da                	neg    edx
c0012090:	5b                   	pop    ebx
c0012091:	5e                   	pop    esi
c0012092:	c3                   	ret    

c0012093 <SysGetArgv(regs*)>:
c0012093:	83 ec 0c             	sub    esp,0xc
c0012096:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001209a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001209d:	85 c0                	test   eax,eax
c001209f:	78 2c                	js     c00120cd <SysGetArgv(regs*)+0x3a>
c00120a1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00120a7:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00120aa:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00120b0:	7d 1b                	jge    c00120cd <SysGetArgv(regs*)+0x3a>
c00120b2:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00120b9:	85 c0                	test   eax,eax
c00120bb:	74 18                	je     c00120d5 <SysGetArgv(regs*)+0x42>
c00120bd:	83 ec 08             	sub    esp,0x8
c00120c0:	50                   	push   eax
c00120c1:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00120c4:	50                   	push   eax
c00120c5:	e8 76 e5 fe ff       	call   c0000640 <strcpy>
c00120ca:	83 c4 10             	add    esp,0x10
c00120cd:	31 c0                	xor    eax,eax
c00120cf:	31 d2                	xor    edx,edx
c00120d1:	83 c4 0c             	add    esp,0xc
c00120d4:	c3                   	ret    
c00120d5:	b8 01 00 00 00       	mov    eax,0x1
c00120da:	31 d2                	xor    edx,edx
c00120dc:	83 c4 0c             	add    esp,0xc
c00120df:	c3                   	ret    

c00120e0 <SysUSleep(regs*)>:
c00120e0:	83 ec 1c             	sub    esp,0x1c
c00120e3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00120e7:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00120ea:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00120ed:	6a 00                	push   0x0
c00120ef:	6a 64                	push   0x64
c00120f1:	52                   	push   edx
c00120f2:	50                   	push   eax
c00120f3:	e8 88 d0 00 00       	call   c001f180 <__udivdi3>
c00120f8:	83 c4 14             	add    esp,0x14
c00120fb:	50                   	push   eax
c00120fc:	e8 3f 3d 00 00       	call   c0015e40 <milliTenthSleep(unsigned int)>
c0012101:	31 c0                	xor    eax,eax
c0012103:	31 d2                	xor    edx,edx
c0012105:	83 c4 1c             	add    esp,0x1c
c0012108:	c3                   	ret    

c0012109 <SysSpawn(regs*)>:
c0012109:	56                   	push   esi
c001210a:	53                   	push   ebx
c001210b:	83 ec 04             	sub    esp,0x4
c001210e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012112:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012115:	85 f6                	test   esi,esi
c0012117:	75 0a                	jne    c0012123 <SysSpawn(regs*)+0x1a>
c0012119:	83 c4 04             	add    esp,0x4
c001211c:	31 c0                	xor    eax,eax
c001211e:	31 d2                	xor    edx,edx
c0012120:	5b                   	pop    ebx
c0012121:	5e                   	pop    esi
c0012122:	c3                   	ret    
c0012123:	83 ec 0c             	sub    esp,0xc
c0012126:	68 24 07 00 00       	push   0x724
c001212b:	e8 86 59 ff ff       	call   c0007ab6 <malloc>
c0012130:	83 c4 10             	add    esp,0x10
c0012133:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012136:	89 c6                	mov    esi,eax
c0012138:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001213b:	85 c9                	test   ecx,ecx
c001213d:	75 39                	jne    c0012178 <SysSpawn(regs*)+0x6f>
c001213f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012144:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012147:	52                   	push   edx
c0012148:	50                   	push   eax
c0012149:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001214c:	50                   	push   eax
c001214d:	56                   	push   esi
c001214e:	e8 3d 33 00 00       	call   c0015490 <Process::Process(char const*, Process*, char**)>
c0012153:	83 c4 10             	add    esp,0x10
c0012156:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001215d:	75 ba                	jne    c0012119 <SysSpawn(regs*)+0x10>
c001215f:	83 ec 0c             	sub    esp,0xc
c0012162:	56                   	push   esi
c0012163:	e8 64 38 00 00       	call   c00159cc <Process::createUserThread()>
c0012168:	8b 06                	mov    eax,DWORD PTR [esi]
c001216a:	83 c4 10             	add    esp,0x10
c001216d:	89 c2                	mov    edx,eax
c001216f:	83 c4 04             	add    esp,0x4
c0012172:	c1 fa 1f             	sar    edx,0x1f
c0012175:	5b                   	pop    ebx
c0012176:	5e                   	pop    esi
c0012177:	c3                   	ret    
c0012178:	31 c0                	xor    eax,eax
c001217a:	eb cb                	jmp    c0012147 <SysSpawn(regs*)+0x3e>

c001217c <SysGetEnv(regs*)>:
c001217c:	57                   	push   edi
c001217d:	56                   	push   esi
c001217e:	53                   	push   ebx
c001217f:	83 ec 1c             	sub    esp,0x1c
c0012182:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012186:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001218b:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001218e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012191:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012194:	51                   	push   ecx
c0012195:	e8 6f ef ff ff       	call   c0011109 <KeGetProcessTotalEnvCount(Process*)>
c001219a:	83 c4 10             	add    esp,0x10
c001219d:	39 c7                	cmp    edi,eax
c001219f:	7c 14                	jl     c00121b5 <SysGetEnv(regs*)+0x39>
c00121a1:	85 f6                	test   esi,esi
c00121a3:	75 0b                	jne    c00121b0 <SysGetEnv(regs*)+0x34>
c00121a5:	83 c4 10             	add    esp,0x10
c00121a8:	31 c0                	xor    eax,eax
c00121aa:	5b                   	pop    ebx
c00121ab:	31 d2                	xor    edx,edx
c00121ad:	5e                   	pop    esi
c00121ae:	5f                   	pop    edi
c00121af:	c3                   	ret    
c00121b0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00121b3:	eb f0                	jmp    c00121a5 <SysGetEnv(regs*)+0x29>
c00121b5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00121b9:	83 ec 04             	sub    esp,0x4
c00121bc:	57                   	push   edi
c00121bd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00121c3:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00121c6:	57                   	push   edi
c00121c7:	50                   	push   eax
c00121c8:	e8 5c ef ff ff       	call   c0011129 <KeGetProcessEnvPair(Process*, int)>
c00121cd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00121d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121d4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00121d8:	83 c4 0c             	add    esp,0xc
c00121db:	85 d2                	test   edx,edx
c00121dd:	75 23                	jne    c0012202 <SysGetEnv(regs*)+0x86>
c00121df:	83 ec 0c             	sub    esp,0xc
c00121e2:	50                   	push   eax
c00121e3:	e8 88 e3 fe ff       	call   c0000570 <strlen>
c00121e8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00121eb:	89 c3                	mov    ebx,eax
c00121ed:	e8 7e e3 fe ff       	call   c0000570 <strlen>
c00121f2:	83 c4 10             	add    esp,0x10
c00121f5:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00121f9:	83 c4 10             	add    esp,0x10
c00121fc:	31 d2                	xor    edx,edx
c00121fe:	5b                   	pop    ebx
c00121ff:	5e                   	pop    esi
c0012200:	5f                   	pop    edi
c0012201:	c3                   	ret    
c0012202:	83 ec 08             	sub    esp,0x8
c0012205:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012208:	50                   	push   eax
c0012209:	56                   	push   esi
c001220a:	e8 31 e4 fe ff       	call   c0000640 <strcpy>
c001220f:	58                   	pop    eax
c0012210:	5a                   	pop    edx
c0012211:	68 20 1e 02 c0       	push   0xc0021e20
c0012216:	56                   	push   esi
c0012217:	e8 24 e6 fe ff       	call   c0000840 <strcat>
c001221c:	59                   	pop    ecx
c001221d:	5b                   	pop    ebx
c001221e:	57                   	push   edi
c001221f:	56                   	push   esi
c0012220:	e8 1b e6 fe ff       	call   c0000840 <strcat>
c0012225:	83 c4 10             	add    esp,0x10
c0012228:	e9 78 ff ff ff       	jmp    c00121a5 <SysGetEnv(regs*)+0x29>

c001222d <SysSetFatAttrib(regs*)>:
c001222d:	57                   	push   edi
c001222e:	56                   	push   esi
c001222f:	53                   	push   ebx
c0012230:	83 ec 1c             	sub    esp,0x1c
c0012233:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012237:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001223a:	68 14 01 00 00       	push   0x114
c001223f:	e8 72 58 ff ff       	call   c0007ab6 <malloc>
c0012244:	83 c4 0c             	add    esp,0xc
c0012247:	89 c3                	mov    ebx,eax
c0012249:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001224e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012251:	50                   	push   eax
c0012252:	57                   	push   edi
c0012253:	53                   	push   ebx
c0012254:	e8 bf 94 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c0012259:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001225c:	83 c4 0c             	add    esp,0xc
c001225f:	0f b6 d4             	movzx  edx,ah
c0012262:	0f b6 c0             	movzx  eax,al
c0012265:	52                   	push   edx
c0012266:	50                   	push   eax
c0012267:	53                   	push   ebx
c0012268:	e8 cf 97 ff ff       	call   c000ba3c <File::chfatattr(unsigned char, unsigned char)>
c001226d:	83 c4 10             	add    esp,0x10
c0012270:	85 db                	test   ebx,ebx
c0012272:	74 14                	je     c0012288 <SysSetFatAttrib(regs*)+0x5b>
c0012274:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012278:	8b 13                	mov    edx,DWORD PTR [ebx]
c001227a:	83 ec 0c             	sub    esp,0xc
c001227d:	53                   	push   ebx
c001227e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012281:	83 c4 10             	add    esp,0x10
c0012284:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012288:	85 c0                	test   eax,eax
c001228a:	0f 95 c0             	setne  al
c001228d:	31 d2                	xor    edx,edx
c001228f:	0f b6 c0             	movzx  eax,al
c0012292:	f7 d8                	neg    eax
c0012294:	83 d2 00             	adc    edx,0x0
c0012297:	83 c4 10             	add    esp,0x10
c001229a:	f7 da                	neg    edx
c001229c:	5b                   	pop    ebx
c001229d:	5e                   	pop    esi
c001229e:	5f                   	pop    edi
c001229f:	c3                   	ret    

c00122a0 <SysPipe(regs*)>:
c00122a0:	57                   	push   edi
c00122a1:	56                   	push   esi
c00122a2:	53                   	push   ebx
c00122a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122a7:	83 ec 0c             	sub    esp,0xc
c00122aa:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00122ad:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00122b0:	6a 20                	push   0x20
c00122b2:	e8 ff 57 ff ff       	call   c0007ab6 <malloc>
c00122b7:	89 c3                	mov    ebx,eax
c00122b9:	58                   	pop    eax
c00122ba:	5a                   	pop    edx
c00122bb:	68 00 50 00 00       	push   0x5000
c00122c0:	53                   	push   ebx
c00122c1:	e8 62 61 ff ff       	call   c0008428 <Pipe::Pipe(int)>
c00122c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00122c9:	e8 e8 6e ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00122ce:	89 07                	mov    DWORD PTR [edi],eax
c00122d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00122d3:	e8 de 6e ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00122d8:	83 c4 10             	add    esp,0x10
c00122db:	89 06                	mov    DWORD PTR [esi],eax
c00122dd:	31 d2                	xor    edx,edx
c00122df:	5b                   	pop    ebx
c00122e0:	31 c0                	xor    eax,eax
c00122e2:	5e                   	pop    esi
c00122e3:	5f                   	pop    edi
c00122e4:	c3                   	ret    

c00122e5 <SysGetUnixTime(regs*)>:
c00122e5:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00122ea:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00122f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122f4:	e9 7d 9e ff ff       	jmp    c000c176 <Clock::timeInSecondsLocal()>

c00122f9 <string_ends_with(char const*, char const*)>:
c00122f9:	57                   	push   edi
c00122fa:	56                   	push   esi
c00122fb:	53                   	push   ebx
c00122fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012300:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012304:	83 ec 0c             	sub    esp,0xc
c0012307:	53                   	push   ebx
c0012308:	e8 63 e2 fe ff       	call   c0000570 <strlen>
c001230d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012310:	89 c6                	mov    esi,eax
c0012312:	e8 59 e2 fe ff       	call   c0000570 <strlen>
c0012317:	83 c4 10             	add    esp,0x10
c001231a:	39 c6                	cmp    esi,eax
c001231c:	7d 06                	jge    c0012324 <string_ends_with(char const*, char const*)+0x2b>
c001231e:	5b                   	pop    ebx
c001231f:	31 c0                	xor    eax,eax
c0012321:	5e                   	pop    esi
c0012322:	5f                   	pop    edi
c0012323:	c3                   	ret    
c0012324:	83 ec 08             	sub    esp,0x8
c0012327:	29 c6                	sub    esi,eax
c0012329:	57                   	push   edi
c001232a:	01 f3                	add    ebx,esi
c001232c:	53                   	push   ebx
c001232d:	e8 1e e4 fe ff       	call   c0000750 <strcmp>
c0012332:	83 c4 10             	add    esp,0x10
c0012335:	85 c0                	test   eax,eax
c0012337:	5b                   	pop    ebx
c0012338:	0f 94 c0             	sete   al
c001233b:	5e                   	pop    esi
c001233c:	0f b6 c0             	movzx  eax,al
c001233f:	5f                   	pop    edi
c0012340:	c3                   	ret    

c0012341 <SysOpen(regs*)>:
c0012341:	56                   	push   esi
c0012342:	53                   	push   ebx
c0012343:	81 ec 04 01 00 00    	sub    esp,0x104
c0012349:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012350:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012353:	85 c0                	test   eax,eax
c0012355:	0f 84 bd 01 00 00    	je     c0012518 <SysOpen(regs*)+0x1d7>
c001235b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001235e:	85 c0                	test   eax,eax
c0012360:	0f 84 b2 01 00 00    	je     c0012518 <SysOpen(regs*)+0x1d7>
c0012366:	83 ec 04             	sub    esp,0x4
c0012369:	68 22 1e 02 c0       	push   0xc0021e22
c001236e:	50                   	push   eax
c001236f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012373:	56                   	push   esi
c0012374:	e8 e9 91 ff ff       	call   c000b562 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012379:	89 34 24             	mov    DWORD PTR [esp],esi
c001237c:	e8 ef e1 fe ff       	call   c0000570 <strlen>
c0012381:	83 c4 10             	add    esp,0x10
c0012384:	83 e8 01             	sub    eax,0x1
c0012387:	74 21                	je     c00123aa <SysOpen(regs*)+0x69>
c0012389:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c001238d:	eb 12                	jmp    c00123a1 <SysOpen(regs*)+0x60>
c001238f:	83 fa 3a             	cmp    edx,0x3a
c0012392:	74 12                	je     c00123a6 <SysOpen(regs*)+0x65>
c0012394:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012398:	83 e8 01             	sub    eax,0x1
c001239b:	74 0d                	je     c00123aa <SysOpen(regs*)+0x69>
c001239d:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00123a1:	83 fa 2e             	cmp    edx,0x2e
c00123a4:	75 e9                	jne    c001238f <SysOpen(regs*)+0x4e>
c00123a6:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00123aa:	83 ec 08             	sub    esp,0x8
c00123ad:	68 26 1e 02 c0       	push   0xc0021e26
c00123b2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00123b5:	50                   	push   eax
c00123b6:	e8 3e ff ff ff       	call   c00122f9 <string_ends_with(char const*, char const*)>
c00123bb:	83 c4 10             	add    esp,0x10
c00123be:	85 c0                	test   eax,eax
c00123c0:	74 1d                	je     c00123df <SysOpen(regs*)+0x9e>
c00123c2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00123c5:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00123cb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00123d2:	81 c4 04 01 00 00    	add    esp,0x104
c00123d8:	31 c0                	xor    eax,eax
c00123da:	31 d2                	xor    edx,edx
c00123dc:	5b                   	pop    ebx
c00123dd:	5e                   	pop    esi
c00123de:	c3                   	ret    
c00123df:	83 ec 08             	sub    esp,0x8
c00123e2:	68 2b 1e 02 c0       	push   0xc0021e2b
c00123e7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00123ea:	50                   	push   eax
c00123eb:	e8 09 ff ff ff       	call   c00122f9 <string_ends_with(char const*, char const*)>
c00123f0:	83 c4 10             	add    esp,0x10
c00123f3:	85 c0                	test   eax,eax
c00123f5:	75 cb                	jne    c00123c2 <SysOpen(regs*)+0x81>
c00123f7:	83 ec 08             	sub    esp,0x8
c00123fa:	68 27 1e 02 c0       	push   0xc0021e27
c00123ff:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012402:	50                   	push   eax
c0012403:	e8 48 e3 fe ff       	call   c0000750 <strcmp>
c0012408:	83 c4 10             	add    esp,0x10
c001240b:	85 c0                	test   eax,eax
c001240d:	74 b3                	je     c00123c2 <SysOpen(regs*)+0x81>
c001240f:	83 ec 08             	sub    esp,0x8
c0012412:	68 26 1e 02 c0       	push   0xc0021e26
c0012417:	56                   	push   esi
c0012418:	e8 dc fe ff ff       	call   c00122f9 <string_ends_with(char const*, char const*)>
c001241d:	83 c4 10             	add    esp,0x10
c0012420:	85 c0                	test   eax,eax
c0012422:	75 9e                	jne    c00123c2 <SysOpen(regs*)+0x81>
c0012424:	83 ec 08             	sub    esp,0x8
c0012427:	68 30 1e 02 c0       	push   0xc0021e30
c001242c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001242f:	50                   	push   eax
c0012430:	e8 c4 fe ff ff       	call   c00122f9 <string_ends_with(char const*, char const*)>
c0012435:	83 c4 10             	add    esp,0x10
c0012438:	85 c0                	test   eax,eax
c001243a:	0f 85 eb 00 00 00    	jne    c001252b <SysOpen(regs*)+0x1ea>
c0012440:	83 ec 08             	sub    esp,0x8
c0012443:	68 35 1e 02 c0       	push   0xc0021e35
c0012448:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001244b:	50                   	push   eax
c001244c:	e8 a8 fe ff ff       	call   c00122f9 <string_ends_with(char const*, char const*)>
c0012451:	83 c4 10             	add    esp,0x10
c0012454:	85 c0                	test   eax,eax
c0012456:	0f 85 cf 00 00 00    	jne    c001252b <SysOpen(regs*)+0x1ea>
c001245c:	83 ec 08             	sub    esp,0x8
c001245f:	68 31 1e 02 c0       	push   0xc0021e31
c0012464:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012467:	51                   	push   ecx
c0012468:	e8 e3 e2 fe ff       	call   c0000750 <strcmp>
c001246d:	83 c4 10             	add    esp,0x10
c0012470:	85 c0                	test   eax,eax
c0012472:	0f 84 b3 00 00 00    	je     c001252b <SysOpen(regs*)+0x1ea>
c0012478:	83 ec 08             	sub    esp,0x8
c001247b:	68 30 1e 02 c0       	push   0xc0021e30
c0012480:	56                   	push   esi
c0012481:	e8 73 fe ff ff       	call   c00122f9 <string_ends_with(char const*, char const*)>
c0012486:	83 c4 10             	add    esp,0x10
c0012489:	85 c0                	test   eax,eax
c001248b:	0f 85 9a 00 00 00    	jne    c001252b <SysOpen(regs*)+0x1ea>
c0012491:	83 ec 0c             	sub    esp,0xc
c0012494:	68 14 01 00 00       	push   0x114
c0012499:	e8 18 56 ff ff       	call   c0007ab6 <malloc>
c001249e:	83 c4 0c             	add    esp,0xc
c00124a1:	89 c6                	mov    esi,eax
c00124a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00124a8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00124ab:	50                   	push   eax
c00124ac:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00124af:	52                   	push   edx
c00124b0:	56                   	push   esi
c00124b1:	e8 62 92 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c00124b6:	83 c4 10             	add    esp,0x10
c00124b9:	85 f6                	test   esi,esi
c00124bb:	74 5b                	je     c0012518 <SysOpen(regs*)+0x1d7>
c00124bd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00124c0:	0f b6 c2             	movzx  eax,dl
c00124c3:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00124c6:	89 d0                	mov    eax,edx
c00124c8:	83 e0 01             	and    eax,0x1
c00124cb:	f6 c2 02             	test   dl,0x2
c00124ce:	74 03                	je     c00124d3 <SysOpen(regs*)+0x192>
c00124d0:	83 c8 02             	or     eax,0x2
c00124d3:	f6 c2 04             	test   dl,0x4
c00124d6:	74 03                	je     c00124db <SysOpen(regs*)+0x19a>
c00124d8:	83 c8 04             	or     eax,0x4
c00124db:	f6 c2 08             	test   dl,0x8
c00124de:	74 03                	je     c00124e3 <SysOpen(regs*)+0x1a2>
c00124e0:	83 c8 0a             	or     eax,0xa
c00124e3:	80 e2 10             	and    dl,0x10
c00124e6:	74 03                	je     c00124eb <SysOpen(regs*)+0x1aa>
c00124e8:	83 c8 12             	or     eax,0x12
c00124eb:	83 ec 08             	sub    esp,0x8
c00124ee:	50                   	push   eax
c00124ef:	56                   	push   esi
c00124f0:	e8 df 92 ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c00124f5:	83 c4 10             	add    esp,0x10
c00124f8:	85 c0                	test   eax,eax
c00124fa:	75 1c                	jne    c0012518 <SysOpen(regs*)+0x1d7>
c00124fc:	83 ec 0c             	sub    esp,0xc
c00124ff:	56                   	push   esi
c0012500:	e8 b1 6c ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012505:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012508:	83 c4 10             	add    esp,0x10
c001250b:	89 02                	mov    DWORD PTR [edx],eax
c001250d:	c1 f8 1f             	sar    eax,0x1f
c0012510:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012513:	e9 ba fe ff ff       	jmp    c00123d2 <SysOpen(regs*)+0x91>
c0012518:	81 c4 04 01 00 00    	add    esp,0x104
c001251e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012523:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012528:	5b                   	pop    ebx
c0012529:	5e                   	pop    esi
c001252a:	c3                   	ret    
c001252b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001252e:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012534:	e9 92 fe ff ff       	jmp    c00123cb <SysOpen(regs*)+0x8a>

c0012539 <KeSystemCall(regs*, void*)>:
c0012539:	53                   	push   ebx
c001253a:	83 ec 08             	sub    esp,0x8
c001253d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012541:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012544:	83 f8 3b             	cmp    eax,0x3b
c0012547:	77 16                	ja     c001255f <KeSystemCall(regs*, void*)+0x26>
c0012549:	8b 14 85 40 32 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcdc0]
c0012550:	85 d2                	test   edx,edx
c0012552:	74 0b                	je     c001255f <KeSystemCall(regs*, void*)+0x26>
c0012554:	83 ec 0c             	sub    esp,0xc
c0012557:	53                   	push   ebx
c0012558:	ff d2                	call   edx
c001255a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001255d:	eb 0d                	jmp    c001256c <KeSystemCall(regs*, void*)+0x33>
c001255f:	52                   	push   edx
c0012560:	52                   	push   edx
c0012561:	50                   	push   eax
c0012562:	68 3a 1e 02 c0       	push   0xc0021e3a
c0012567:	e8 d9 83 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001256c:	83 c4 10             	add    esp,0x10
c001256f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012574:	31 d2                	xor    edx,edx
c0012576:	83 c4 08             	add    esp,0x8
c0012579:	5b                   	pop    ebx
c001257a:	c3                   	ret    
c001257b:	90                   	nop

c001257c <KeSwitchEndian16(unsigned short)>:
c001257c:	83 ec 04             	sub    esp,0x4
c001257f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012583:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012587:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001258b:	c1 f8 08             	sar    eax,0x8
c001258e:	89 c2                	mov    edx,eax
c0012590:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012594:	c1 e0 08             	shl    eax,0x8
c0012597:	09 d0                	or     eax,edx
c0012599:	83 c4 04             	add    esp,0x4
c001259c:	c3                   	ret    
c001259d:	8d 76 00             	lea    esi,[esi+0x0]

c00125a0 <KeSwitchEndian32(unsigned int)>:
c00125a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125a4:	c1 e8 18             	shr    eax,0x18
c00125a7:	89 c2                	mov    edx,eax
c00125a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125ad:	c1 e0 08             	shl    eax,0x8
c00125b0:	25 00 00 ff 00       	and    eax,0xff0000
c00125b5:	09 c2                	or     edx,eax
c00125b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125bb:	c1 e8 08             	shr    eax,0x8
c00125be:	25 00 ff 00 00       	and    eax,0xff00
c00125c3:	09 c2                	or     edx,eax
c00125c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125c9:	c1 e0 18             	shl    eax,0x18
c00125cc:	09 d0                	or     eax,edx
c00125ce:	c3                   	ret    
c00125cf:	90                   	nop

c00125d0 <EthernetCRC32(unsigned char*, int)>:
c00125d0:	83 ec 10             	sub    esp,0x10
c00125d3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00125d8:	75 0a                	jne    c00125e4 <EthernetCRC32(unsigned char*, int)+0x14>
c00125da:	b8 00 00 00 00       	mov    eax,0x0
c00125df:	e9 8c 00 00 00       	jmp    c0012670 <EthernetCRC32(unsigned char*, int)+0xa0>
c00125e4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00125e9:	7f 09                	jg     c00125f4 <EthernetCRC32(unsigned char*, int)+0x24>
c00125eb:	b8 00 00 00 00       	mov    eax,0x0
c00125f0:	eb 7e                	jmp    c0012670 <EthernetCRC32(unsigned char*, int)+0xa0>
c00125f2:	66 90                	xchg   ax,ax
c00125f4:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c00125fc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012604:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012608:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001260c:	7d 5a                	jge    c0012668 <EthernetCRC32(unsigned char*, int)+0x98>
c001260e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012612:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012616:	01 d0                	add    eax,edx
c0012618:	8a 00                	mov    al,BYTE PTR [eax]
c001261a:	0f b6 c0             	movzx  eax,al
c001261d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012621:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012629:	8d 76 00             	lea    esi,[esi+0x0]
c001262c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012631:	7f 2d                	jg     c0012660 <EthernetCRC32(unsigned char*, int)+0x90>
c0012633:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012637:	83 e0 01             	and    eax,0x1
c001263a:	74 10                	je     c001264c <EthernetCRC32(unsigned char*, int)+0x7c>
c001263c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012640:	d1 e8                	shr    eax,1
c0012642:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012647:	eb 0b                	jmp    c0012654 <EthernetCRC32(unsigned char*, int)+0x84>
c0012649:	8d 76 00             	lea    esi,[esi+0x0]
c001264c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012650:	d1 e8                	shr    eax,1
c0012652:	66 90                	xchg   ax,ax
c0012654:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012658:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001265d:	eb cd                	jmp    c001262c <EthernetCRC32(unsigned char*, int)+0x5c>
c001265f:	90                   	nop
c0012660:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012665:	eb 9d                	jmp    c0012604 <EthernetCRC32(unsigned char*, int)+0x34>
c0012667:	90                   	nop
c0012668:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001266c:	f7 d0                	not    eax
c001266e:	66 90                	xchg   ax,ax
c0012670:	83 c4 10             	add    esp,0x10
c0012673:	c3                   	ret    

c0012674 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012674:	83 ec 2c             	sub    esp,0x2c
c0012677:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001267b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012680:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012684:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012688:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001268c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001268f:	0f b7 c0             	movzx  eax,ax
c0012692:	3d 06 08 00 00       	cmp    eax,0x806
c0012697:	75 13                	jne    c00126ac <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012699:	83 ec 0c             	sub    esp,0xc
c001269c:	68 4e 1e 02 c0       	push   0xc0021e4e
c00126a1:	e8 9f 82 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00126a6:	83 c4 10             	add    esp,0x10
c00126a9:	eb 25                	jmp    c00126d0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c00126ab:	90                   	nop
c00126ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00126b0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00126b3:	0f b7 c0             	movzx  eax,ax
c00126b6:	3d 00 08 00 00       	cmp    eax,0x800
c00126bb:	75 13                	jne    c00126d0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c00126bd:	83 ec 0c             	sub    esp,0xc
c00126c0:	68 64 1e 02 c0       	push   0xc0021e64
c00126c5:	e8 7b 82 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00126ca:	83 c4 10             	add    esp,0x10
c00126cd:	8d 76 00             	lea    esi,[esi+0x0]
c00126d0:	90                   	nop
c00126d1:	83 c4 2c             	add    esp,0x2c
c00126d4:	c3                   	ret    

c00126d5 <CmOpen(char const*)>:
c00126d5:	57                   	push   edi
c00126d6:	56                   	push   esi
c00126d7:	53                   	push   ebx
c00126d8:	83 ec 1c             	sub    esp,0x1c
c00126db:	6a 30                	push   0x30
c00126dd:	e8 d4 53 ff ff       	call   c0007ab6 <malloc>
c00126e2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00126e9:	89 c3                	mov    ebx,eax
c00126eb:	e8 c6 53 ff ff       	call   c0007ab6 <malloc>
c00126f0:	83 c4 0c             	add    esp,0xc
c00126f3:	89 c6                	mov    esi,eax
c00126f5:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00126fb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00126ff:	50                   	push   eax
c0012700:	e8 13 90 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c0012705:	83 c4 0c             	add    esp,0xc
c0012708:	89 33                	mov    DWORD PTR [ebx],esi
c001270a:	8d 44 24 07          	lea    eax,[esp+0x7]
c001270e:	50                   	push   eax
c001270f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012713:	50                   	push   eax
c0012714:	56                   	push   esi
c0012715:	e8 bc 93 ff ff       	call   c000bad6 <File::stat(unsigned long long*, bool*)>
c001271a:	5a                   	pop    edx
c001271b:	59                   	pop    ecx
c001271c:	6a 01                	push   0x1
c001271e:	ff 33                	push   DWORD PTR [ebx]
c0012720:	e8 af 90 ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c0012725:	5e                   	pop    esi
c0012726:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001272a:	e8 87 53 ff ff       	call   c0007ab6 <malloc>
c001272f:	5a                   	pop    edx
c0012730:	89 c7                	mov    edi,eax
c0012732:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012736:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012738:	8b 10                	mov    edx,DWORD PTR [eax]
c001273a:	56                   	push   esi
c001273b:	57                   	push   edi
c001273c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012740:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012744:	50                   	push   eax
c0012745:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012748:	83 c4 14             	add    esp,0x14
c001274b:	ff 33                	push   DWORD PTR [ebx]
c001274d:	e8 e0 90 ff ff       	call   c000b832 <File::close()>
c0012752:	59                   	pop    ecx
c0012753:	58                   	pop    eax
c0012754:	6a 13                	push   0x13
c0012756:	ff 33                	push   DWORD PTR [ebx]
c0012758:	e8 77 90 ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c001275d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001275f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012761:	89 34 24             	mov    DWORD PTR [esp],esi
c0012764:	57                   	push   edi
c0012765:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012769:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001276d:	50                   	push   eax
c001276e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012771:	83 c4 14             	add    esp,0x14
c0012774:	57                   	push   edi
c0012775:	e8 4c 53 ff ff       	call   c0007ac6 <free>
c001277a:	83 c4 10             	add    esp,0x10
c001277d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012780:	75 10                	jne    c0012792 <CmOpen(char const*)+0xbd>
c0012782:	83 ec 0c             	sub    esp,0xc
c0012785:	68 79 1e 02 c0       	push   0xc0021e79
c001278a:	e8 c2 ea ff ff       	call   c0011251 <KePanic(char const*)>
c001278f:	83 c4 10             	add    esp,0x10
c0012792:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012795:	50                   	push   eax
c0012796:	6a 00                	push   0x0
c0012798:	6a 00                	push   0x0
c001279a:	ff 33                	push   DWORD PTR [ebx]
c001279c:	e8 f1 90 ff ff       	call   c000b892 <File::seek(unsigned long long)>
c00127a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127a3:	8b 10                	mov    edx,DWORD PTR [eax]
c00127a5:	89 34 24             	mov    DWORD PTR [esp],esi
c00127a8:	57                   	push   edi
c00127a9:	6a 00                	push   0x0
c00127ab:	6a 2b                	push   0x2b
c00127ad:	50                   	push   eax
c00127ae:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00127b1:	83 c4 1c             	add    esp,0x1c
c00127b4:	6a 00                	push   0x0
c00127b6:	6a 00                	push   0x0
c00127b8:	ff 33                	push   DWORD PTR [ebx]
c00127ba:	e8 d3 90 ff ff       	call   c000b892 <File::seek(unsigned long long)>
c00127bf:	83 c4 0c             	add    esp,0xc
c00127c2:	6a 08                	push   0x8
c00127c4:	68 8a 1e 02 c0       	push   0xc0021e8a
c00127c9:	57                   	push   edi
c00127ca:	e8 b1 db fe ff       	call   c0000380 <memcmp>
c00127cf:	83 c4 10             	add    esp,0x10
c00127d2:	85 c0                	test   eax,eax
c00127d4:	74 10                	je     c00127e6 <CmOpen(char const*)+0x111>
c00127d6:	83 ec 0c             	sub    esp,0xc
c00127d9:	68 93 1e 02 c0       	push   0xc0021e93
c00127de:	e8 6e ea ff ff       	call   c0011251 <KePanic(char const*)>
c00127e3:	83 c4 10             	add    esp,0x10
c00127e6:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c00127ea:	89 d8                	mov    eax,ebx
c00127ec:	83 c4 10             	add    esp,0x10
c00127ef:	5b                   	pop    ebx
c00127f0:	5e                   	pop    esi
c00127f1:	5f                   	pop    edi
c00127f2:	c3                   	ret    

c00127f3 <CmClose(Reghive_Tag*)>:
c00127f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127f7:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00127fb:	74 0b                	je     c0012808 <CmClose(Reghive_Tag*)+0x15>
c00127fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00127ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012803:	e9 2a 90 ff ff       	jmp    c000b832 <File::close()>
c0012808:	c3                   	ret    

c0012809 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012809:	53                   	push   ebx
c001280a:	83 ec 18             	sub    esp,0x18
c001280d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012811:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012815:	74 29                	je     c0012840 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012817:	50                   	push   eax
c0012818:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c001281d:	99                   	cdq    
c001281e:	52                   	push   edx
c001281f:	50                   	push   eax
c0012820:	ff 33                	push   DWORD PTR [ebx]
c0012822:	e8 6b 90 ff ff       	call   c000b892 <File::seek(unsigned long long)>
c0012827:	5a                   	pop    edx
c0012828:	8b 03                	mov    eax,DWORD PTR [ebx]
c001282a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001282e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012830:	51                   	push   ecx
c0012831:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012835:	6a 00                	push   0x0
c0012837:	6a 2b                	push   0x2b
c0012839:	50                   	push   eax
c001283a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001283d:	83 c4 20             	add    esp,0x20
c0012840:	83 c4 18             	add    esp,0x18
c0012843:	5b                   	pop    ebx
c0012844:	c3                   	ret    

c0012845 <CmGetString(Reghive_Tag*, int, char*)>:
c0012845:	55                   	push   ebp
c0012846:	57                   	push   edi
c0012847:	56                   	push   esi
c0012848:	53                   	push   ebx
c0012849:	31 db                	xor    ebx,ebx
c001284b:	83 ec 70             	sub    esp,0x70
c001284e:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012855:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012859:	50                   	push   eax
c001285a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012861:	55                   	push   ebp
c0012862:	e8 a2 ff ff ff       	call   c0012809 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012867:	83 c4 10             	add    esp,0x10
c001286a:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c001286f:	c1 e0 08             	shl    eax,0x8
c0012872:	89 c2                	mov    edx,eax
c0012874:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012879:	09 d0                	or     eax,edx
c001287b:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012880:	c1 e0 08             	shl    eax,0x8
c0012883:	09 d0                	or     eax,edx
c0012885:	74 25                	je     c00128ac <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012887:	6b fb 0d             	imul   edi,ebx,0xd
c001288a:	52                   	push   edx
c001288b:	8d 54 24 39          	lea    edx,[esp+0x39]
c001288f:	52                   	push   edx
c0012890:	50                   	push   eax
c0012891:	55                   	push   ebp
c0012892:	e8 72 ff ff ff       	call   c0012809 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012897:	8d 74 24 49          	lea    esi,[esp+0x49]
c001289b:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c00128a2:	b9 27 00 00 00       	mov    ecx,0x27
c00128a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00128a9:	83 c4 10             	add    esp,0x10
c00128ac:	83 c3 03             	add    ebx,0x3
c00128af:	83 fb 15             	cmp    ebx,0x15
c00128b2:	75 b6                	jne    c001286a <CmGetString(Reghive_Tag*, int, char*)+0x25>
c00128b4:	83 c4 6c             	add    esp,0x6c
c00128b7:	5b                   	pop    ebx
c00128b8:	5e                   	pop    esi
c00128b9:	5f                   	pop    edi
c00128ba:	5d                   	pop    ebp
c00128bb:	c3                   	ret    

c00128bc <CmEnterDirectory(Reghive_Tag*, int)>:
c00128bc:	83 ec 40             	sub    esp,0x40
c00128bf:	8d 44 24 09          	lea    eax,[esp+0x9]
c00128c3:	50                   	push   eax
c00128c4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00128c8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00128cc:	e8 38 ff ff ff       	call   c0012809 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00128d1:	83 c4 10             	add    esp,0x10
c00128d4:	83 c8 ff             	or     eax,0xffffffff
c00128d7:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c00128dc:	75 19                	jne    c00128f7 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c00128de:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c00128e3:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00128e8:	c1 e0 08             	shl    eax,0x8
c00128eb:	09 c2                	or     edx,eax
c00128ed:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c00128f2:	c1 e0 10             	shl    eax,0x10
c00128f5:	09 d0                	or     eax,edx
c00128f7:	83 c4 3c             	add    esp,0x3c
c00128fa:	c3                   	ret    

c00128fb <CmGetNext(Reghive_Tag*, int)>:
c00128fb:	83 ec 40             	sub    esp,0x40
c00128fe:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012902:	50                   	push   eax
c0012903:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012907:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001290b:	e8 f9 fe ff ff       	call   c0012809 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012910:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012915:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c001291a:	c1 e0 08             	shl    eax,0x8
c001291d:	09 c2                	or     edx,eax
c001291f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012924:	83 c4 4c             	add    esp,0x4c
c0012927:	c1 e0 10             	shl    eax,0x10
c001292a:	09 d0                	or     eax,edx
c001292c:	c3                   	ret    

c001292d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c001292d:	53                   	push   ebx
c001292e:	83 ec 18             	sub    esp,0x18
c0012931:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012935:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012939:	74 29                	je     c0012964 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c001293b:	50                   	push   eax
c001293c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012941:	99                   	cdq    
c0012942:	52                   	push   edx
c0012943:	50                   	push   eax
c0012944:	ff 33                	push   DWORD PTR [ebx]
c0012946:	e8 47 8f ff ff       	call   c000b892 <File::seek(unsigned long long)>
c001294b:	5a                   	pop    edx
c001294c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001294e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012952:	8b 10                	mov    edx,DWORD PTR [eax]
c0012954:	51                   	push   ecx
c0012955:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012959:	6a 00                	push   0x0
c001295b:	6a 2b                	push   0x2b
c001295d:	50                   	push   eax
c001295e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012961:	83 c4 20             	add    esp,0x20
c0012964:	83 c4 18             	add    esp,0x18
c0012967:	5b                   	pop    ebx
c0012968:	c3                   	ret    

c0012969 <CmFreeExtent(Reghive_Tag*, int)>:
c0012969:	53                   	push   ebx
c001296a:	83 ec 3c             	sub    esp,0x3c
c001296d:	6a 2b                	push   0x2b
c001296f:	6a 00                	push   0x0
c0012971:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012975:	53                   	push   ebx
c0012976:	e8 75 db fe ff       	call   c00004f0 <memset>
c001297b:	83 c4 0c             	add    esp,0xc
c001297e:	53                   	push   ebx
c001297f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012983:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012987:	e8 a1 ff ff ff       	call   c001292d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001298c:	83 c4 48             	add    esp,0x48
c001298f:	5b                   	pop    ebx
c0012990:	c3                   	ret    

c0012991 <CmUpdateHeader(Reghive_Tag*)>:
c0012991:	83 ec 0c             	sub    esp,0xc
c0012994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012998:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c001299c:	74 10                	je     c00129ae <CmUpdateHeader(Reghive_Tag*)+0x1d>
c001299e:	52                   	push   edx
c001299f:	8d 50 05             	lea    edx,[eax+0x5]
c00129a2:	52                   	push   edx
c00129a3:	6a 00                	push   0x0
c00129a5:	50                   	push   eax
c00129a6:	e8 82 ff ff ff       	call   c001292d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00129ab:	83 c4 10             	add    esp,0x10
c00129ae:	83 c4 0c             	add    esp,0xc
c00129b1:	c3                   	ret    

c00129b2 <CmExpand(Reghive_Tag*, int)>:
c00129b2:	57                   	push   edi
c00129b3:	56                   	push   esi
c00129b4:	83 ce ff             	or     esi,0xffffffff
c00129b7:	53                   	push   ebx
c00129b8:	83 ec 30             	sub    esp,0x30
c00129bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00129bf:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00129c3:	74 5f                	je     c0012a24 <CmExpand(Reghive_Tag*, int)+0x72>
c00129c5:	31 d2                	xor    edx,edx
c00129c7:	31 f6                	xor    esi,esi
c00129c9:	50                   	push   eax
c00129ca:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c00129ce:	52                   	push   edx
c00129cf:	50                   	push   eax
c00129d0:	ff 33                	push   DWORD PTR [ebx]
c00129d2:	e8 bb 8e ff ff       	call   c000b892 <File::seek(unsigned long long)>
c00129d7:	83 c4 0c             	add    esp,0xc
c00129da:	6a 2b                	push   0x2b
c00129dc:	6a 00                	push   0x0
c00129de:	8d 7c 24 11          	lea    edi,[esp+0x11]
c00129e2:	57                   	push   edi
c00129e3:	e8 08 db fe ff       	call   c00004f0 <memset>
c00129e8:	83 c4 10             	add    esp,0x10
c00129eb:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00129ef:	7d 1b                	jge    c0012a0c <CmExpand(Reghive_Tag*, int)+0x5a>
c00129f1:	83 ec 0c             	sub    esp,0xc
c00129f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00129f6:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c00129fa:	8b 10                	mov    edx,DWORD PTR [eax]
c00129fc:	46                   	inc    esi
c00129fd:	51                   	push   ecx
c00129fe:	57                   	push   edi
c00129ff:	6a 00                	push   0x0
c0012a01:	6a 2b                	push   0x2b
c0012a03:	50                   	push   eax
c0012a04:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012a07:	83 c4 20             	add    esp,0x20
c0012a0a:	eb df                	jmp    c00129eb <CmExpand(Reghive_Tag*, int)+0x39>
c0012a0c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012a10:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0012a13:	83 ec 0c             	sub    esp,0xc
c0012a16:	01 f2                	add    edx,esi
c0012a18:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0012a1b:	53                   	push   ebx
c0012a1c:	e8 70 ff ff ff       	call   c0012991 <CmUpdateHeader(Reghive_Tag*)>
c0012a21:	83 c4 10             	add    esp,0x10
c0012a24:	83 c4 30             	add    esp,0x30
c0012a27:	89 f0                	mov    eax,esi
c0012a29:	5b                   	pop    ebx
c0012a2a:	5e                   	pop    esi
c0012a2b:	5f                   	pop    edi
c0012a2c:	c3                   	ret    

c0012a2d <CmFindUnusedExtent(Reghive_Tag*)>:
c0012a2d:	55                   	push   ebp
c0012a2e:	57                   	push   edi
c0012a2f:	56                   	push   esi
c0012a30:	53                   	push   ebx
c0012a31:	83 cb ff             	or     ebx,0xffffffff
c0012a34:	83 ec 1c             	sub    esp,0x1c
c0012a37:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012a3b:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012a3f:	74 68                	je     c0012aa9 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012a41:	be 2b 00 00 00       	mov    esi,0x2b
c0012a46:	51                   	push   ecx
c0012a47:	31 ff                	xor    edi,edi
c0012a49:	6a 00                	push   0x0
c0012a4b:	31 db                	xor    ebx,ebx
c0012a4d:	6a 00                	push   0x0
c0012a4f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012a52:	e8 3b 8e ff ff       	call   c000b892 <File::seek(unsigned long long)>
c0012a57:	83 c4 10             	add    esp,0x10
c0012a5a:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012a5d:	76 3b                	jbe    c0012a9a <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012a5f:	83 ec 0c             	sub    esp,0xc
c0012a62:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012a65:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012a69:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a6b:	51                   	push   ecx
c0012a6c:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012a70:	51                   	push   ecx
c0012a71:	6a 00                	push   0x0
c0012a73:	6a 01                	push   0x1
c0012a75:	50                   	push   eax
c0012a76:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012a79:	83 c4 20             	add    esp,0x20
c0012a7c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012a81:	74 26                	je     c0012aa9 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012a83:	43                   	inc    ebx
c0012a84:	52                   	push   edx
c0012a85:	57                   	push   edi
c0012a86:	56                   	push   esi
c0012a87:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012a8a:	e8 03 8e ff ff       	call   c000b892 <File::seek(unsigned long long)>
c0012a8f:	83 c6 2b             	add    esi,0x2b
c0012a92:	83 d7 00             	adc    edi,0x0
c0012a95:	83 c4 10             	add    esp,0x10
c0012a98:	eb c0                	jmp    c0012a5a <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012a9a:	50                   	push   eax
c0012a9b:	50                   	push   eax
c0012a9c:	6a 40                	push   0x40
c0012a9e:	55                   	push   ebp
c0012a9f:	e8 0e ff ff ff       	call   c00129b2 <CmExpand(Reghive_Tag*, int)>
c0012aa4:	83 c4 10             	add    esp,0x10
c0012aa7:	89 c3                	mov    ebx,eax
c0012aa9:	83 c4 1c             	add    esp,0x1c
c0012aac:	89 d8                	mov    eax,ebx
c0012aae:	5b                   	pop    ebx
c0012aaf:	5e                   	pop    esi
c0012ab0:	5f                   	pop    edi
c0012ab1:	5d                   	pop    ebp
c0012ab2:	c3                   	ret    

c0012ab3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012ab3:	55                   	push   ebp
c0012ab4:	57                   	push   edi
c0012ab5:	56                   	push   esi
c0012ab6:	53                   	push   ebx
c0012ab7:	81 ec 88 00 00 00    	sub    esp,0x88
c0012abd:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012ac4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012acb:	e8 5d ff ff ff       	call   c0012a2d <CmFindUnusedExtent(Reghive_Tag*)>
c0012ad0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012ad4:	83 c4 0c             	add    esp,0xc
c0012ad7:	6a 2b                	push   0x2b
c0012ad9:	6a 00                	push   0x0
c0012adb:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012adf:	55                   	push   ebp
c0012ae0:	e8 0b da fe ff       	call   c00004f0 <memset>
c0012ae5:	83 c4 10             	add    esp,0x10
c0012ae8:	85 db                	test   ebx,ebx
c0012aea:	74 12                	je     c0012afe <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012aec:	51                   	push   ecx
c0012aed:	55                   	push   ebp
c0012aee:	53                   	push   ebx
c0012aef:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012af6:	e8 0e fd ff ff       	call   c0012809 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012afb:	83 c4 10             	add    esp,0x10
c0012afe:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012b02:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012b09:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012b0e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012b10:	85 db                	test   ebx,ebx
c0012b12:	74 49                	je     c0012b5d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012b14:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012b19:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012b1e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b22:	c1 e0 08             	shl    eax,0x8
c0012b25:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012b2b:	09 c8                	or     eax,ecx
c0012b2d:	74 11                	je     c0012b40 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012b2f:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012b33:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012b37:	c1 e8 10             	shr    eax,0x10
c0012b3a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012b3e:	eb 0f                	jmp    c0012b4f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012b40:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012b45:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012b4a:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012b4f:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012b53:	c1 ea 08             	shr    edx,0x8
c0012b56:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012b5b:	eb 0f                	jmp    c0012b6c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012b5d:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012b62:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012b67:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012b6c:	52                   	push   edx
c0012b6d:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012b71:	50                   	push   eax
c0012b72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012b76:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b7d:	e8 ab fd ff ff       	call   c001292d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012b82:	83 c4 10             	add    esp,0x10
c0012b85:	85 db                	test   ebx,ebx
c0012b87:	74 12                	je     c0012b9b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012b89:	50                   	push   eax
c0012b8a:	55                   	push   ebp
c0012b8b:	53                   	push   ebx
c0012b8c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b93:	e8 95 fd ff ff       	call   c001292d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012b98:	83 c4 10             	add    esp,0x10
c0012b9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012b9f:	83 c4 7c             	add    esp,0x7c
c0012ba2:	5b                   	pop    ebx
c0012ba3:	5e                   	pop    esi
c0012ba4:	5f                   	pop    edi
c0012ba5:	5d                   	pop    ebp
c0012ba6:	c3                   	ret    

c0012ba7 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012ba7:	55                   	push   ebp
c0012ba8:	57                   	push   edi
c0012ba9:	56                   	push   esi
c0012baa:	53                   	push   ebx
c0012bab:	bb 27 00 00 00       	mov    ebx,0x27
c0012bb0:	81 ec 88 00 00 00    	sub    esp,0x88
c0012bb6:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012bbd:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012bc4:	e8 a7 d9 fe ff       	call   c0000570 <strlen>
c0012bc9:	8d 48 26             	lea    ecx,[eax+0x26]
c0012bcc:	89 c8                	mov    eax,ecx
c0012bce:	99                   	cdq    
c0012bcf:	f7 fb                	idiv   ebx
c0012bd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012bd5:	83 c4 10             	add    esp,0x10
c0012bd8:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012bde:	7e 10                	jle    c0012bf0 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012be0:	83 ec 0c             	sub    esp,0xc
c0012be3:	68 a4 1e 02 c0       	push   0xc0021ea4
c0012be8:	e8 64 e6 ff ff       	call   c0011251 <KePanic(char const*)>
c0012bed:	83 c4 10             	add    esp,0x10
c0012bf0:	31 ff                	xor    edi,edi
c0012bf2:	50                   	push   eax
c0012bf3:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012bf7:	53                   	push   ebx
c0012bf8:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012bff:	56                   	push   esi
c0012c00:	e8 04 fc ff ff       	call   c0012809 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012c05:	83 c4 10             	add    esp,0x10
c0012c08:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0012c0c:	89 d0                	mov    eax,edx
c0012c0e:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0012c12:	c1 e0 08             	shl    eax,0x8
c0012c15:	09 c2                	or     edx,eax
c0012c17:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012c1b:	c1 e2 08             	shl    edx,0x8
c0012c1e:	09 c2                	or     edx,eax
c0012c20:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0012c24:	7e 76                	jle    c0012c9c <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0012c26:	85 d2                	test   edx,edx
c0012c28:	75 25                	jne    c0012c4f <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012c2a:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012c2f:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012c33:	50                   	push   eax
c0012c34:	6a 00                	push   0x0
c0012c36:	6a 00                	push   0x0
c0012c38:	56                   	push   esi
c0012c39:	e8 75 fe ff ff       	call   c0012ab3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012c3e:	83 c4 10             	add    esp,0x10
c0012c41:	89 c2                	mov    edx,eax
c0012c43:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012c46:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012c49:	c1 f8 10             	sar    eax,0x10
c0012c4c:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012c4f:	55                   	push   ebp
c0012c50:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0012c54:	55                   	push   ebp
c0012c55:	52                   	push   edx
c0012c56:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012c5a:	56                   	push   esi
c0012c5b:	e8 a9 fb ff ff       	call   c0012809 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012c60:	83 c4 0c             	add    esp,0xc
c0012c63:	6a 27                	push   0x27
c0012c65:	6a 00                	push   0x0
c0012c67:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012c6b:	51                   	push   ecx
c0012c6c:	e8 7f d8 fe ff       	call   c00004f0 <memset>
c0012c71:	83 c4 0c             	add    esp,0xc
c0012c74:	6b c7 27             	imul   eax,edi,0x27
c0012c77:	6a 27                	push   0x27
c0012c79:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012c80:	50                   	push   eax
c0012c81:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012c85:	51                   	push   ecx
c0012c86:	e8 f5 d9 fe ff       	call   c0000680 <strncpy>
c0012c8b:	83 c4 0c             	add    esp,0xc
c0012c8e:	55                   	push   ebp
c0012c8f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012c93:	52                   	push   edx
c0012c94:	56                   	push   esi
c0012c95:	e8 93 fc ff ff       	call   c001292d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012c9a:	eb 19                	jmp    c0012cb5 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0012c9c:	85 d2                	test   edx,edx
c0012c9e:	74 18                	je     c0012cb8 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0012ca0:	51                   	push   ecx
c0012ca1:	51                   	push   ecx
c0012ca2:	52                   	push   edx
c0012ca3:	56                   	push   esi
c0012ca4:	e8 c0 fc ff ff       	call   c0012969 <CmFreeExtent(Reghive_Tag*, int)>
c0012ca9:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012cad:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012cb1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012cb5:	83 c4 10             	add    esp,0x10
c0012cb8:	47                   	inc    edi
c0012cb9:	83 c3 03             	add    ebx,0x3
c0012cbc:	83 ff 07             	cmp    edi,0x7
c0012cbf:	0f 85 43 ff ff ff    	jne    c0012c08 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012cc5:	50                   	push   eax
c0012cc6:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012cca:	50                   	push   eax
c0012ccb:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012cd2:	56                   	push   esi
c0012cd3:	e8 55 fc ff ff       	call   c001292d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012cd8:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012cde:	5b                   	pop    ebx
c0012cdf:	5e                   	pop    esi
c0012ce0:	5f                   	pop    edi
c0012ce1:	5d                   	pop    ebp
c0012ce2:	c3                   	ret    

c0012ce3 <CmGetMatch(char*, char*, bool, bool*)>:
c0012ce3:	56                   	push   esi
c0012ce4:	53                   	push   ebx
c0012ce5:	50                   	push   eax
c0012ce6:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012cea:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012cef:	74 25                	je     c0012d16 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012cf1:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012cf4:	31 db                	xor    ebx,ebx
c0012cf6:	50                   	push   eax
c0012cf7:	50                   	push   eax
c0012cf8:	8d 04 9d 40 33 02 c0 	lea    eax,[ebx*4-0x3ffdccc0]
c0012cff:	50                   	push   eax
c0012d00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d04:	e8 47 da fe ff       	call   c0000750 <strcmp>
c0012d09:	83 c4 10             	add    esp,0x10
c0012d0c:	85 c0                	test   eax,eax
c0012d0e:	74 2e                	je     c0012d3e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012d10:	43                   	inc    ebx
c0012d11:	83 fb 3f             	cmp    ebx,0x3f
c0012d14:	75 e0                	jne    c0012cf6 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012d16:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012d19:	31 db                	xor    ebx,ebx
c0012d1b:	8d 04 9d 40 33 02 c0 	lea    eax,[ebx*4-0x3ffdccc0]
c0012d22:	51                   	push   ecx
c0012d23:	51                   	push   ecx
c0012d24:	50                   	push   eax
c0012d25:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d29:	e8 22 da fe ff       	call   c0000750 <strcmp>
c0012d2e:	83 c4 10             	add    esp,0x10
c0012d31:	85 c0                	test   eax,eax
c0012d33:	74 09                	je     c0012d3e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012d35:	43                   	inc    ebx
c0012d36:	83 fb 3f             	cmp    ebx,0x3f
c0012d39:	75 e0                	jne    c0012d1b <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012d3b:	83 cb ff             	or     ebx,0xffffffff
c0012d3e:	89 d8                	mov    eax,ebx
c0012d40:	5a                   	pop    edx
c0012d41:	5b                   	pop    ebx
c0012d42:	5e                   	pop    esi
c0012d43:	c3                   	ret    

c0012d44 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012d44:	55                   	push   ebp
c0012d45:	31 c0                	xor    eax,eax
c0012d47:	57                   	push   edi
c0012d48:	56                   	push   esi
c0012d49:	53                   	push   ebx
c0012d4a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012d4e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012d52:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012d54:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012d58:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012d5b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012d5f:	83 fd 1f             	cmp    ebp,0x1f
c0012d62:	7f 0b                	jg     c0012d6f <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012d64:	0f b6 c2             	movzx  eax,dl
c0012d67:	d3 e0                	shl    eax,cl
c0012d69:	09 07                	or     DWORD PTR [edi],eax
c0012d6b:	b0 01                	mov    al,0x1
c0012d6d:	01 33                	add    DWORD PTR [ebx],esi
c0012d6f:	5b                   	pop    ebx
c0012d70:	5e                   	pop    esi
c0012d71:	5f                   	pop    edi
c0012d72:	5d                   	pop    ebp
c0012d73:	c3                   	ret    

c0012d74 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012d74:	57                   	push   edi
c0012d75:	56                   	push   esi
c0012d76:	53                   	push   ebx
c0012d77:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012d7b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012d7f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012d83:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012d87:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012d89:	7c 17                	jl     c0012da2 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012d8b:	8b 17                	mov    edx,DWORD PTR [edi]
c0012d8d:	b8 01 00 00 00       	mov    eax,0x1
c0012d92:	d3 e0                	shl    eax,cl
c0012d94:	48                   	dec    eax
c0012d95:	21 d0                	and    eax,edx
c0012d97:	d3 ea                	shr    edx,cl
c0012d99:	89 17                	mov    DWORD PTR [edi],edx
c0012d9b:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012d9d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012da0:	eb 05                	jmp    c0012da7 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012da2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012da5:	31 c0                	xor    eax,eax
c0012da7:	5b                   	pop    ebx
c0012da8:	5e                   	pop    esi
c0012da9:	5f                   	pop    edi
c0012daa:	c3                   	ret    

c0012dab <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012dab:	83 ec 40             	sub    esp,0x40
c0012dae:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012db2:	50                   	push   eax
c0012db3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012db7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012dbb:	e8 49 fa ff ff       	call   c0012809 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012dc0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012dc4:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012dc8:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012dcc:	89 10                	mov    DWORD PTR [eax],edx
c0012dce:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012dd1:	83 c4 4c             	add    esp,0x4c
c0012dd4:	c3                   	ret    

c0012dd5 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012dd5:	55                   	push   ebp
c0012dd6:	57                   	push   edi
c0012dd7:	56                   	push   esi
c0012dd8:	53                   	push   ebx
c0012dd9:	83 ec 40             	sub    esp,0x40
c0012ddc:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012de0:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012de4:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012de8:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012dec:	53                   	push   ebx
c0012ded:	56                   	push   esi
c0012dee:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012df2:	e8 12 fa ff ff       	call   c0012809 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012df7:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012dfb:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012dff:	83 c4 0c             	add    esp,0xc
c0012e02:	53                   	push   ebx
c0012e03:	56                   	push   esi
c0012e04:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012e08:	e8 20 fb ff ff       	call   c001292d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012e0d:	83 c4 4c             	add    esp,0x4c
c0012e10:	5b                   	pop    ebx
c0012e11:	5e                   	pop    esi
c0012e12:	5f                   	pop    edi
c0012e13:	5d                   	pop    ebp
c0012e14:	c3                   	ret    

c0012e15 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012e15:	55                   	push   ebp
c0012e16:	57                   	push   edi
c0012e17:	56                   	push   esi
c0012e18:	31 f6                	xor    esi,esi
c0012e1a:	53                   	push   ebx
c0012e1b:	31 db                	xor    ebx,ebx
c0012e1d:	83 ec 40             	sub    esp,0x40
c0012e20:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012e28:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012e30:	6a 12                	push   0x12
c0012e32:	68 ee 00 00 00       	push   0xee
c0012e37:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012e3b:	e8 b0 d6 fe ff       	call   c00004f0 <memset>
c0012e40:	83 c4 10             	add    esp,0x10
c0012e43:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012e47:	6a 08                	push   0x8
c0012e49:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e4d:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012e51:	50                   	push   eax
c0012e52:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012e56:	55                   	push   ebp
c0012e57:	57                   	push   edi
c0012e58:	e8 e7 fe ff ff       	call   c0012d44 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012e5d:	83 c4 10             	add    esp,0x10
c0012e60:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012e64:	50                   	push   eax
c0012e65:	6a 06                	push   0x6
c0012e67:	55                   	push   ebp
c0012e68:	57                   	push   edi
c0012e69:	e8 06 ff ff ff       	call   c0012d74 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012e6e:	83 c4 10             	add    esp,0x10
c0012e71:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012e76:	74 07                	je     c0012e7f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012e78:	46                   	inc    esi
c0012e79:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012e7d:	eb e1                	jmp    c0012e60 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012e7f:	43                   	inc    ebx
c0012e80:	83 fb 12             	cmp    ebx,0x12
c0012e83:	75 c2                	jne    c0012e47 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012e85:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e89:	31 db                	xor    ebx,ebx
c0012e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012e8e:	50                   	push   eax
c0012e8f:	50                   	push   eax
c0012e90:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0012e95:	43                   	inc    ebx
c0012e96:	8d 04 85 40 33 02 c0 	lea    eax,[eax*4-0x3ffdccc0]
c0012e9d:	50                   	push   eax
c0012e9e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012ea2:	e8 99 d9 fe ff       	call   c0000840 <strcat>
c0012ea7:	83 c4 10             	add    esp,0x10
c0012eaa:	83 fb 18             	cmp    ebx,0x18
c0012ead:	75 df                	jne    c0012e8e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012eaf:	83 c4 3c             	add    esp,0x3c
c0012eb2:	31 c0                	xor    eax,eax
c0012eb4:	5b                   	pop    ebx
c0012eb5:	5e                   	pop    esi
c0012eb6:	5f                   	pop    edi
c0012eb7:	5d                   	pop    ebp
c0012eb8:	c3                   	ret    

c0012eb9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012eb9:	83 ec 40             	sub    esp,0x40
c0012ebc:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012ec0:	50                   	push   eax
c0012ec1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ec5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ec9:	e8 3b f9 ff ff       	call   c0012809 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ece:	58                   	pop    eax
c0012ecf:	5a                   	pop    edx
c0012ed0:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012ed4:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012ed8:	50                   	push   eax
c0012ed9:	e8 37 ff ff ff       	call   c0012e15 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0012ede:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012ee3:	83 c4 4c             	add    esp,0x4c
c0012ee6:	c3                   	ret    

c0012ee7 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0012ee7:	55                   	push   ebp
c0012ee8:	57                   	push   edi
c0012ee9:	56                   	push   esi
c0012eea:	53                   	push   ebx
c0012eeb:	31 db                	xor    ebx,ebx
c0012eed:	83 ec 70             	sub    esp,0x70
c0012ef0:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0012ef7:	6a 30                	push   0x30
c0012ef9:	6a 00                	push   0x0
c0012efb:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012eff:	56                   	push   esi
c0012f00:	e8 eb d5 fe ff       	call   c00004f0 <memset>
c0012f05:	83 c4 10             	add    esp,0x10
c0012f08:	83 ec 0c             	sub    esp,0xc
c0012f0b:	57                   	push   edi
c0012f0c:	e8 5f d6 fe ff       	call   c0000570 <strlen>
c0012f11:	83 c4 10             	add    esp,0x10
c0012f14:	39 d8                	cmp    eax,ebx
c0012f16:	76 16                	jbe    c0012f2e <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012f18:	83 ec 0c             	sub    esp,0xc
c0012f1b:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012f1f:	50                   	push   eax
c0012f20:	e8 0b da fe ff       	call   c0000930 <toupper>
c0012f25:	83 c4 10             	add    esp,0x10
c0012f28:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012f2b:	43                   	inc    ebx
c0012f2c:	eb da                	jmp    c0012f08 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0012f2e:	31 f6                	xor    esi,esi
c0012f30:	52                   	push   edx
c0012f31:	31 ff                	xor    edi,edi
c0012f33:	6a 18                	push   0x18
c0012f35:	6a 3f                	push   0x3f
c0012f37:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012f3b:	50                   	push   eax
c0012f3c:	e8 af d5 fe ff       	call   c00004f0 <memset>
c0012f41:	83 c4 10             	add    esp,0x10
c0012f44:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0012f48:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0012f4c:	84 c0                	test   al,al
c0012f4e:	0f 84 b0 00 00 00    	je     c0013004 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0012f54:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012f58:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0012f5d:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0012f61:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0012f66:	8d 6e 01             	lea    ebp,[esi+0x1]
c0012f69:	83 ec 0c             	sub    esp,0xc
c0012f6c:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012f70:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012f74:	53                   	push   ebx
c0012f75:	e8 f6 d5 fe ff       	call   c0000570 <strlen>
c0012f7a:	83 c4 10             	add    esp,0x10
c0012f7d:	85 c0                	test   eax,eax
c0012f7f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012f83:	74 0b                	je     c0012f90 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012f85:	50                   	push   eax
c0012f86:	6a 01                	push   0x1
c0012f88:	53                   	push   ebx
c0012f89:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012f8d:	50                   	push   eax
c0012f8e:	eb 0a                	jmp    c0012f9a <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0012f90:	50                   	push   eax
c0012f91:	6a 00                	push   0x0
c0012f93:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012f97:	50                   	push   eax
c0012f98:	6a 00                	push   0x0
c0012f9a:	e8 44 fd ff ff       	call   c0012ce3 <CmGetMatch(char*, char*, bool, bool*)>
c0012f9f:	83 c4 10             	add    esp,0x10
c0012fa2:	83 f8 ff             	cmp    eax,0xffffffff
c0012fa5:	75 1a                	jne    c0012fc1 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012fa7:	83 ec 0c             	sub    esp,0xc
c0012faa:	68 b9 1e 02 c0       	push   0xc0021eb9
c0012faf:	e8 9d e2 ff ff       	call   c0011251 <KePanic(char const*)>
c0012fb4:	83 c4 10             	add    esp,0x10
c0012fb7:	b8 02 00 00 00       	mov    eax,0x2
c0012fbc:	e9 bc 00 00 00       	jmp    c001307d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012fc1:	83 ff 18             	cmp    edi,0x18
c0012fc4:	75 1a                	jne    c0012fe0 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0012fc6:	83 ec 0c             	sub    esp,0xc
c0012fc9:	68 ce 1e 02 c0       	push   0xc0021ece
c0012fce:	e8 7e e2 ff ff       	call   c0011251 <KePanic(char const*)>
c0012fd3:	83 c4 10             	add    esp,0x10
c0012fd6:	b8 01 00 00 00       	mov    eax,0x1
c0012fdb:	e9 9d 00 00 00       	jmp    c001307d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012fe0:	47                   	inc    edi
c0012fe1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012fe6:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0012fea:	74 02                	je     c0012fee <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0012fec:	89 ee                	mov    esi,ebp
c0012fee:	83 ec 0c             	sub    esp,0xc
c0012ff1:	53                   	push   ebx
c0012ff2:	e8 79 d5 fe ff       	call   c0000570 <strlen>
c0012ff7:	83 c4 10             	add    esp,0x10
c0012ffa:	85 c0                	test   eax,eax
c0012ffc:	74 06                	je     c0013004 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0012ffe:	46                   	inc    esi
c0012fff:	e9 40 ff ff ff       	jmp    c0012f44 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0013004:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001300c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013014:	31 f6                	xor    esi,esi
c0013016:	50                   	push   eax
c0013017:	31 ff                	xor    edi,edi
c0013019:	6a 12                	push   0x12
c001301b:	68 ee 00 00 00       	push   0xee
c0013020:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0013027:	e8 c4 d4 fe ff       	call   c00004f0 <memset>
c001302c:	83 c4 10             	add    esp,0x10
c001302f:	83 fe 17             	cmp    esi,0x17
c0013032:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0013036:	7e 26                	jle    c001305e <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0013038:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001303c:	50                   	push   eax
c001303d:	6a 08                	push   0x8
c001303f:	55                   	push   ebp
c0013040:	53                   	push   ebx
c0013041:	e8 2e fd ff ff       	call   c0012d74 <CmGetShift(unsigned int*, int*, int, bool*)>
c0013046:	83 c4 10             	add    esp,0x10
c0013049:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001304e:	74 26                	je     c0013076 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0013050:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0013057:	4e                   	dec    esi
c0013058:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c001305b:	47                   	inc    edi
c001305c:	eb 1c                	jmp    c001307a <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c001305e:	6a 06                	push   0x6
c0013060:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0013065:	50                   	push   eax
c0013066:	55                   	push   ebp
c0013067:	53                   	push   ebx
c0013068:	e8 d7 fc ff ff       	call   c0012d44 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001306d:	83 c4 10             	add    esp,0x10
c0013070:	84 c0                	test   al,al
c0013072:	75 06                	jne    c001307a <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0013074:	eb c2                	jmp    c0013038 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c0013076:	31 c0                	xor    eax,eax
c0013078:	eb 03                	jmp    c001307d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c001307a:	46                   	inc    esi
c001307b:	eb b2                	jmp    c001302f <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c001307d:	83 c4 6c             	add    esp,0x6c
c0013080:	5b                   	pop    ebx
c0013081:	5e                   	pop    esi
c0013082:	5f                   	pop    edi
c0013083:	5d                   	pop    ebp
c0013084:	c3                   	ret    

c0013085 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0013085:	53                   	push   ebx
c0013086:	83 ec 3c             	sub    esp,0x3c
c0013089:	6a 2b                	push   0x2b
c001308b:	6a 00                	push   0x0
c001308d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013091:	53                   	push   ebx
c0013092:	e8 59 d4 fe ff       	call   c00004f0 <memset>
c0013097:	58                   	pop    eax
c0013098:	5a                   	pop    edx
c0013099:	8d 44 24 11          	lea    eax,[esp+0x11]
c001309d:	50                   	push   eax
c001309e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00130a2:	e8 40 fe ff ff       	call   c0012ee7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00130a7:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00130ac:	83 c4 0c             	add    esp,0xc
c00130af:	6a 15                	push   0x15
c00130b1:	6a 00                	push   0x0
c00130b3:	8d 44 24 27          	lea    eax,[esp+0x27]
c00130b7:	50                   	push   eax
c00130b8:	e8 33 d4 fe ff       	call   c00004f0 <memset>
c00130bd:	53                   	push   ebx
c00130be:	6a 00                	push   0x0
c00130c0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00130c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00130c8:	e8 e6 f9 ff ff       	call   c0012ab3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00130cd:	83 c4 58             	add    esp,0x58
c00130d0:	5b                   	pop    ebx
c00130d1:	c3                   	ret    

c00130d2 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00130d2:	56                   	push   esi
c00130d3:	53                   	push   ebx
c00130d4:	83 ec 48             	sub    esp,0x48
c00130d7:	6a 12                	push   0x12
c00130d9:	68 ff 00 00 00       	push   0xff
c00130de:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00130e2:	56                   	push   esi
c00130e3:	e8 08 d4 fe ff       	call   c00004f0 <memset>
c00130e8:	5a                   	pop    edx
c00130e9:	59                   	pop    ecx
c00130ea:	56                   	push   esi
c00130eb:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00130ef:	e8 f3 fd ff ff       	call   c0012ee7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00130f4:	83 c4 10             	add    esp,0x10
c00130f7:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00130fb:	85 db                	test   ebx,ebx
c00130fd:	74 42                	je     c0013141 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00130ff:	50                   	push   eax
c0013100:	8d 44 24 19          	lea    eax,[esp+0x19]
c0013104:	50                   	push   eax
c0013105:	53                   	push   ebx
c0013106:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001310a:	e8 fa f6 ff ff       	call   c0012809 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001310f:	83 c4 0c             	add    esp,0xc
c0013112:	6a 12                	push   0x12
c0013114:	8d 44 24 21          	lea    eax,[esp+0x21]
c0013118:	50                   	push   eax
c0013119:	56                   	push   esi
c001311a:	e8 61 d2 fe ff       	call   c0000380 <memcmp>
c001311f:	83 c4 10             	add    esp,0x10
c0013122:	85 c0                	test   eax,eax
c0013124:	74 1e                	je     c0013144 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0013126:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001312b:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0013130:	c1 e3 08             	shl    ebx,0x8
c0013133:	09 d8                	or     eax,ebx
c0013135:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001313a:	c1 e3 10             	shl    ebx,0x10
c001313d:	09 c3                	or     ebx,eax
c001313f:	eb ba                	jmp    c00130fb <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0013141:	83 cb ff             	or     ebx,0xffffffff
c0013144:	89 d8                	mov    eax,ebx
c0013146:	83 c4 44             	add    esp,0x44
c0013149:	5b                   	pop    ebx
c001314a:	5e                   	pop    esi
c001314b:	c3                   	ret    

c001314c <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c001314c:	57                   	push   edi
c001314d:	56                   	push   esi
c001314e:	53                   	push   ebx
c001314f:	83 ec 34             	sub    esp,0x34
c0013152:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0013156:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001315a:	6a 2b                	push   0x2b
c001315c:	6a 00                	push   0x0
c001315e:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013162:	53                   	push   ebx
c0013163:	e8 88 d3 fe ff       	call   c00004f0 <memset>
c0013168:	58                   	pop    eax
c0013169:	5a                   	pop    edx
c001316a:	8d 44 24 11          	lea    eax,[esp+0x11]
c001316e:	50                   	push   eax
c001316f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013173:	e8 6f fd ff ff       	call   c0012ee7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013178:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001317c:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0013180:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0013184:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0013188:	53                   	push   ebx
c0013189:	6a 00                	push   0x0
c001318b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001318f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013193:	e8 1b f9 ff ff       	call   c0012ab3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013198:	83 c4 50             	add    esp,0x50
c001319b:	5b                   	pop    ebx
c001319c:	5e                   	pop    esi
c001319d:	5f                   	pop    edi
c001319e:	c3                   	ret    

c001319f <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001319f:	55                   	push   ebp
c00131a0:	57                   	push   edi
c00131a1:	56                   	push   esi
c00131a2:	53                   	push   ebx
c00131a3:	83 ec 40             	sub    esp,0x40
c00131a6:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00131aa:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00131ae:	6a 2b                	push   0x2b
c00131b0:	6a 00                	push   0x0
c00131b2:	8d 74 24 11          	lea    esi,[esp+0x11]
c00131b6:	56                   	push   esi
c00131b7:	e8 34 d3 fe ff       	call   c00004f0 <memset>
c00131bc:	5f                   	pop    edi
c00131bd:	89 ef                	mov    edi,ebp
c00131bf:	58                   	pop    eax
c00131c0:	8d 44 24 11          	lea    eax,[esp+0x11]
c00131c4:	50                   	push   eax
c00131c5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00131c9:	e8 19 fd ff ff       	call   c0012ee7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00131ce:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00131d3:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00131d8:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00131dd:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00131e2:	83 c4 10             	add    esp,0x10
c00131e5:	85 ed                	test   ebp,ebp
c00131e7:	74 14                	je     c00131fd <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00131e9:	51                   	push   ecx
c00131ea:	51                   	push   ecx
c00131eb:	57                   	push   edi
c00131ec:	53                   	push   ebx
c00131ed:	e8 09 f7 ff ff       	call   c00128fb <CmGetNext(Reghive_Tag*, int)>
c00131f2:	83 c4 10             	add    esp,0x10
c00131f5:	85 c0                	test   eax,eax
c00131f7:	74 04                	je     c00131fd <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00131f9:	89 c7                	mov    edi,eax
c00131fb:	eb e8                	jmp    c00131e5 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00131fd:	56                   	push   esi
c00131fe:	6a 00                	push   0x0
c0013200:	57                   	push   edi
c0013201:	53                   	push   ebx
c0013202:	e8 ac f8 ff ff       	call   c0012ab3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013207:	83 c4 0c             	add    esp,0xc
c001320a:	89 c7                	mov    edi,eax
c001320c:	56                   	push   esi
c001320d:	50                   	push   eax
c001320e:	53                   	push   ebx
c001320f:	e8 f5 f5 ff ff       	call   c0012809 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013214:	58                   	pop    eax
c0013215:	5a                   	pop    edx
c0013216:	6a 6c                	push   0x6c
c0013218:	6a 00                	push   0x0
c001321a:	6a 00                	push   0x0
c001321c:	68 df 1e 02 c0       	push   0xc0021edf
c0013221:	57                   	push   edi
c0013222:	53                   	push   ebx
c0013223:	e8 24 ff ff ff       	call   c001314c <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0013228:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001322c:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0013230:	c1 e8 10             	shr    eax,0x10
c0013233:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0013237:	83 c4 1c             	add    esp,0x1c
c001323a:	56                   	push   esi
c001323b:	57                   	push   edi
c001323c:	53                   	push   ebx
c001323d:	e8 eb f6 ff ff       	call   c001292d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013242:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0013247:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001324c:	c1 e0 08             	shl    eax,0x8
c001324f:	09 c2                	or     edx,eax
c0013251:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0013256:	83 c4 4c             	add    esp,0x4c
c0013259:	c1 e0 10             	shl    eax,0x10
c001325c:	5b                   	pop    ebx
c001325d:	09 d0                	or     eax,edx
c001325f:	5e                   	pop    esi
c0013260:	5f                   	pop    edi
c0013261:	5d                   	pop    ebp
c0013262:	c3                   	ret    

c0013263 <zStrtok(char*, char const*)>:
c0013263:	55                   	push   ebp
c0013264:	57                   	push   edi
c0013265:	56                   	push   esi
c0013266:	53                   	push   ebx
c0013267:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001326b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001326f:	85 db                	test   ebx,ebx
c0013271:	74 2f                	je     c00132a2 <zStrtok(char*, char const*)+0x3f>
c0013273:	85 c0                	test   eax,eax
c0013275:	75 09                	jne    c0013280 <zStrtok(char*, char const*)+0x1d>
c0013277:	a1 f0 8e 02 c0       	mov    eax,ds:0xc0028ef0
c001327c:	85 c0                	test   eax,eax
c001327e:	74 50                	je     c00132d0 <zStrtok(char*, char const*)+0x6d>
c0013280:	31 c9                	xor    ecx,ecx
c0013282:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0013286:	74 03                	je     c001328b <zStrtok(char*, char const*)+0x28>
c0013288:	41                   	inc    ecx
c0013289:	eb f7                	jmp    c0013282 <zStrtok(char*, char const*)+0x1f>
c001328b:	31 d2                	xor    edx,edx
c001328d:	39 ca                	cmp    edx,ecx
c001328f:	74 15                	je     c00132a6 <zStrtok(char*, char const*)+0x43>
c0013291:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0013295:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0013298:	8d 3c 10             	lea    edi,[eax+edx*1]
c001329b:	39 ee                	cmp    esi,ebp
c001329d:	74 13                	je     c00132b2 <zStrtok(char*, char const*)+0x4f>
c001329f:	42                   	inc    edx
c00132a0:	eb eb                	jmp    c001328d <zStrtok(char*, char const*)+0x2a>
c00132a2:	31 c0                	xor    eax,eax
c00132a4:	eb 2a                	jmp    c00132d0 <zStrtok(char*, char const*)+0x6d>
c00132a6:	c7 05 f0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ef0,0x0
c00132b0:	eb 1e                	jmp    c00132d0 <zStrtok(char*, char const*)+0x6d>
c00132b2:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00132b5:	39 ce                	cmp    esi,ecx
c00132b7:	75 0a                	jne    c00132c3 <zStrtok(char*, char const*)+0x60>
c00132b9:	40                   	inc    eax
c00132ba:	a3 f0 8e 02 c0       	mov    ds:0xc0028ef0,eax
c00132bf:	89 d8                	mov    eax,ebx
c00132c1:	eb 0d                	jmp    c00132d0 <zStrtok(char*, char const*)+0x6d>
c00132c3:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00132c7:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00132ca:	89 15 f0 8e 02 c0    	mov    DWORD PTR ds:0xc0028ef0,edx
c00132d0:	5b                   	pop    ebx
c00132d1:	5e                   	pop    esi
c00132d2:	5f                   	pop    edi
c00132d3:	5d                   	pop    ebp
c00132d4:	c3                   	ret    

c00132d5 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00132d5:	57                   	push   edi
c00132d6:	56                   	push   esi
c00132d7:	53                   	push   ebx
c00132d8:	81 ec 08 01 00 00    	sub    esp,0x108
c00132de:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00132e5:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00132ec:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00132f0:	53                   	push   ebx
c00132f1:	e8 4a d3 fe ff       	call   c0000640 <strcpy>
c00132f6:	59                   	pop    ecx
c00132f7:	5e                   	pop    esi
c00132f8:	68 43 22 02 c0       	push   0xc0022243
c00132fd:	53                   	push   ebx
c00132fe:	bb 01 00 00 00       	mov    ebx,0x1
c0013303:	e8 5b ff ff ff       	call   c0013263 <zStrtok(char*, char const*)>
c0013308:	83 c4 10             	add    esp,0x10
c001330b:	85 c0                	test   eax,eax
c001330d:	74 3b                	je     c001334a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001330f:	52                   	push   edx
c0013310:	50                   	push   eax
c0013311:	6a 01                	push   0x1
c0013313:	57                   	push   edi
c0013314:	e8 b9 fd ff ff       	call   c00130d2 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013319:	59                   	pop    ecx
c001331a:	89 c3                	mov    ebx,eax
c001331c:	5e                   	pop    esi
c001331d:	68 43 22 02 c0       	push   0xc0022243
c0013322:	6a 00                	push   0x0
c0013324:	e8 3a ff ff ff       	call   c0013263 <zStrtok(char*, char const*)>
c0013329:	83 c4 10             	add    esp,0x10
c001332c:	89 c6                	mov    esi,eax
c001332e:	85 c0                	test   eax,eax
c0013330:	74 18                	je     c001334a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013332:	52                   	push   edx
c0013333:	52                   	push   edx
c0013334:	53                   	push   ebx
c0013335:	57                   	push   edi
c0013336:	e8 81 f5 ff ff       	call   c00128bc <CmEnterDirectory(Reghive_Tag*, int)>
c001333b:	83 c4 10             	add    esp,0x10
c001333e:	89 c3                	mov    ebx,eax
c0013340:	83 f8 ff             	cmp    eax,0xffffffff
c0013343:	74 05                	je     c001334a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013345:	50                   	push   eax
c0013346:	56                   	push   esi
c0013347:	53                   	push   ebx
c0013348:	eb c9                	jmp    c0013313 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c001334a:	81 c4 00 01 00 00    	add    esp,0x100
c0013350:	89 d8                	mov    eax,ebx
c0013352:	5b                   	pop    ebx
c0013353:	5e                   	pop    esi
c0013354:	5f                   	pop    edi
c0013355:	c3                   	ret    

c0013356 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0013356:	55                   	push   ebp
c0013357:	57                   	push   edi
c0013358:	56                   	push   esi
c0013359:	53                   	push   ebx
c001335a:	83 ec 5c             	sub    esp,0x5c
c001335d:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0013361:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0013365:	85 db                	test   ebx,ebx
c0013367:	0f 8e 84 00 00 00    	jle    c00133f1 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c001336d:	31 ed                	xor    ebp,ebp
c001336f:	57                   	push   edi
c0013370:	6a 32                	push   0x32
c0013372:	6a 00                	push   0x0
c0013374:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0013378:	57                   	push   edi
c0013379:	e8 72 d1 fe ff       	call   c00004f0 <memset>
c001337e:	83 c4 0c             	add    esp,0xc
c0013381:	57                   	push   edi
c0013382:	53                   	push   ebx
c0013383:	56                   	push   esi
c0013384:	e8 30 fb ff ff       	call   c0012eb9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013389:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001338d:	83 c4 10             	add    esp,0x10
c0013390:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0013394:	7d 13                	jge    c00133a9 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0013396:	83 ec 0c             	sub    esp,0xc
c0013399:	45                   	inc    ebp
c001339a:	68 e7 25 02 c0       	push   0xc00225e7
c001339f:	e8 a1 75 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00133a4:	83 c4 10             	add    esp,0x10
c00133a7:	eb e7                	jmp    c0013390 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00133a9:	51                   	push   ecx
c00133aa:	57                   	push   edi
c00133ab:	53                   	push   ebx
c00133ac:	68 e5 1e 02 c0       	push   0xc0021ee5
c00133b1:	e8 8f 75 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00133b6:	83 c4 10             	add    esp,0x10
c00133b9:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00133be:	75 1e                	jne    c00133de <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00133c0:	52                   	push   edx
c00133c1:	52                   	push   edx
c00133c2:	53                   	push   ebx
c00133c3:	56                   	push   esi
c00133c4:	e8 f3 f4 ff ff       	call   c00128bc <CmEnterDirectory(Reghive_Tag*, int)>
c00133c9:	83 c4 0c             	add    esp,0xc
c00133cc:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00133d0:	8d 51 04             	lea    edx,[ecx+0x4]
c00133d3:	52                   	push   edx
c00133d4:	50                   	push   eax
c00133d5:	56                   	push   esi
c00133d6:	e8 7b ff ff ff       	call   c0013356 <CmDisplayTree(Reghive_Tag*, int, int)>
c00133db:	83 c4 10             	add    esp,0x10
c00133de:	50                   	push   eax
c00133df:	50                   	push   eax
c00133e0:	53                   	push   ebx
c00133e1:	56                   	push   esi
c00133e2:	e8 14 f5 ff ff       	call   c00128fb <CmGetNext(Reghive_Tag*, int)>
c00133e7:	83 c4 10             	add    esp,0x10
c00133ea:	89 c3                	mov    ebx,eax
c00133ec:	e9 74 ff ff ff       	jmp    c0013365 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00133f1:	83 c4 5c             	add    esp,0x5c
c00133f4:	5b                   	pop    ebx
c00133f5:	5e                   	pop    esi
c00133f6:	5f                   	pop    edi
c00133f7:	5d                   	pop    ebp
c00133f8:	c3                   	ret    

c00133f9 <CmSplitFinalSlashInPlace(char*)>:
c00133f9:	53                   	push   ebx
c00133fa:	83 ec 14             	sub    esp,0x14
c00133fd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013401:	53                   	push   ebx
c0013402:	e8 69 d1 fe ff       	call   c0000570 <strlen>
c0013407:	83 c4 10             	add    esp,0x10
c001340a:	48                   	dec    eax
c001340b:	85 c0                	test   eax,eax
c001340d:	74 15                	je     c0013424 <CmSplitFinalSlashInPlace(char*)+0x2b>
c001340f:	8d 14 03             	lea    edx,[ebx+eax*1]
c0013412:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013416:	75 09                	jne    c0013421 <CmSplitFinalSlashInPlace(char*)+0x28>
c0013418:	c6 02 00             	mov    BYTE PTR [edx],0x0
c001341b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001341f:	eb 05                	jmp    c0013426 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0013421:	48                   	dec    eax
c0013422:	eb e7                	jmp    c001340b <CmSplitFinalSlashInPlace(char*)+0x12>
c0013424:	31 c0                	xor    eax,eax
c0013426:	83 c4 08             	add    esp,0x8
c0013429:	5b                   	pop    ebx
c001342a:	c3                   	ret    

c001342b <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001342b:	55                   	push   ebp
c001342c:	57                   	push   edi
c001342d:	56                   	push   esi
c001342e:	53                   	push   ebx
c001342f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013435:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c001343c:	8a 13                	mov    dl,BYTE PTR [ebx]
c001343e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013441:	80 fa 40             	cmp    dl,0x40
c0013444:	75 1c                	jne    c0013462 <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0013446:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0013449:	85 c9                	test   ecx,ecx
c001344b:	0f 84 09 01 00 00    	je     c001355a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013451:	8d 43 01             	lea    eax,[ebx+0x1]
c0013454:	83 f9 3a             	cmp    ecx,0x3a
c0013457:	74 04                	je     c001345d <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0013459:	89 c3                	mov    ebx,eax
c001345b:	eb e9                	jmp    c0013446 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001345d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013460:	89 c3                	mov    ebx,eax
c0013462:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0013466:	50                   	push   eax
c0013467:	6a 40                	push   0x40
c0013469:	6a 00                	push   0x0
c001346b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001346f:	50                   	push   eax
c0013470:	e8 7b d0 fe ff       	call   c00004f0 <memset>
c0013475:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001347c:	31 c0                	xor    eax,eax
c001347e:	83 c4 10             	add    esp,0x10
c0013481:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0013486:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013489:	89 d1                	mov    ecx,edx
c001348b:	85 d2                	test   edx,edx
c001348d:	0f 84 c7 00 00 00    	je     c001355a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013493:	3d c7 00 00 00       	cmp    eax,0xc7
c0013498:	0f 8f bc 00 00 00    	jg     c001355a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c001349e:	83 fa 0a             	cmp    edx,0xa
c00134a1:	0f 85 a4 00 00 00    	jne    c001354b <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c00134a7:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00134ac:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c00134b1:	89 c8                	mov    eax,ecx
c00134b3:	a8 df                	test   al,0xdf
c00134b5:	0f 94 c2             	sete   dl
c00134b8:	83 f9 23             	cmp    ecx,0x23
c00134bb:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c00134c0:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c00134c4:	80 e2 01             	and    dl,0x1
c00134c7:	75 4a                	jne    c0013513 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00134c9:	83 e8 09             	sub    eax,0x9
c00134cc:	3c 01                	cmp    al,0x1
c00134ce:	76 43                	jbe    c0013513 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00134d0:	83 f9 5b             	cmp    ecx,0x5b
c00134d3:	75 42                	jne    c0013517 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c00134d5:	83 fe 40             	cmp    esi,0x40
c00134d8:	75 39                	jne    c0013513 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00134da:	83 ec 0c             	sub    esp,0xc
c00134dd:	8d 54 24 65          	lea    edx,[esp+0x65]
c00134e1:	52                   	push   edx
c00134e2:	e8 89 d0 fe ff       	call   c0000570 <strlen>
c00134e7:	83 c4 10             	add    esp,0x10
c00134ea:	83 f8 3f             	cmp    eax,0x3f
c00134ed:	77 6b                	ja     c001355a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00134ef:	50                   	push   eax
c00134f0:	50                   	push   eax
c00134f1:	8d 54 24 61          	lea    edx,[esp+0x61]
c00134f5:	52                   	push   edx
c00134f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00134fa:	52                   	push   edx
c00134fb:	e8 40 d1 fe ff       	call   c0000640 <strcpy>
c0013500:	58                   	pop    eax
c0013501:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013505:	52                   	push   edx
c0013506:	e8 65 d0 fe ff       	call   c0000570 <strlen>
c001350b:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013510:	83 c4 10             	add    esp,0x10
c0013513:	31 d2                	xor    edx,edx
c0013515:	eb 3b                	jmp    c0013552 <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0013517:	83 fe 40             	cmp    esi,0x40
c001351a:	74 06                	je     c0013522 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c001351c:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013520:	eb 20                	jmp    c0013542 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0013522:	50                   	push   eax
c0013523:	50                   	push   eax
c0013524:	55                   	push   ebp
c0013525:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013529:	50                   	push   eax
c001352a:	e8 21 d2 fe ff       	call   c0000750 <strcmp>
c001352f:	83 c4 10             	add    esp,0x10
c0013532:	85 c0                	test   eax,eax
c0013534:	75 dd                	jne    c0013513 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013536:	eb e4                	jmp    c001351c <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013538:	8d 50 01             	lea    edx,[eax+0x1]
c001353b:	83 f9 3d             	cmp    ecx,0x3d
c001353e:	74 1e                	je     c001355e <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0013540:	89 d0                	mov    eax,edx
c0013542:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013545:	85 c9                	test   ecx,ecx
c0013547:	75 ef                	jne    c0013538 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0013549:	eb 0f                	jmp    c001355a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c001354b:	8d 50 01             	lea    edx,[eax+0x1]
c001354e:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013552:	47                   	inc    edi
c0013553:	89 d0                	mov    eax,edx
c0013555:	e9 2c ff ff ff       	jmp    c0013486 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c001355a:	31 c0                	xor    eax,eax
c001355c:	eb 33                	jmp    c0013591 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c001355e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013562:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013565:	50                   	push   eax
c0013566:	50                   	push   eax
c0013567:	8d 44 24 60          	lea    eax,[esp+0x60]
c001356b:	50                   	push   eax
c001356c:	53                   	push   ebx
c001356d:	e8 de d1 fe ff       	call   c0000750 <strcmp>
c0013572:	83 c4 10             	add    esp,0x10
c0013575:	85 c0                	test   eax,eax
c0013577:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001357b:	75 96                	jne    c0013513 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c001357d:	51                   	push   ecx
c001357e:	51                   	push   ecx
c001357f:	52                   	push   edx
c0013580:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013587:	e8 b4 d0 fe ff       	call   c0000640 <strcpy>
c001358c:	83 c4 10             	add    esp,0x10
c001358f:	b0 01                	mov    al,0x1
c0013591:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013597:	5b                   	pop    ebx
c0013598:	5e                   	pop    esi
c0013599:	5f                   	pop    edi
c001359a:	5d                   	pop    ebp
c001359b:	c3                   	ret    

c001359c <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001359c:	57                   	push   edi
c001359d:	56                   	push   esi
c001359e:	53                   	push   ebx
c001359f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00135a5:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00135ac:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00135b3:	53                   	push   ebx
c00135b4:	e8 b7 cf fe ff       	call   c0000570 <strlen>
c00135b9:	89 34 24             	mov    DWORD PTR [esp],esi
c00135bc:	89 c7                	mov    edi,eax
c00135be:	e8 ad cf fe ff       	call   c0000570 <strlen>
c00135c3:	83 c4 10             	add    esp,0x10
c00135c6:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00135ca:	3d ff 00 00 00       	cmp    eax,0xff
c00135cf:	0f 87 d3 00 00 00    	ja     c00136a8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00135d5:	57                   	push   edi
c00135d6:	57                   	push   edi
c00135d7:	56                   	push   esi
c00135d8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00135dc:	56                   	push   esi
c00135dd:	e8 5e d0 fe ff       	call   c0000640 <strcpy>
c00135e2:	58                   	pop    eax
c00135e3:	5a                   	pop    edx
c00135e4:	68 43 22 02 c0       	push   0xc0022243
c00135e9:	56                   	push   esi
c00135ea:	e8 51 d2 fe ff       	call   c0000840 <strcat>
c00135ef:	59                   	pop    ecx
c00135f0:	5f                   	pop    edi
c00135f1:	53                   	push   ebx
c00135f2:	56                   	push   esi
c00135f3:	e8 48 d2 fe ff       	call   c0000840 <strcat>
c00135f8:	58                   	pop    eax
c00135f9:	5a                   	pop    edx
c00135fa:	68 ef 1e 02 c0       	push   0xc0021eef
c00135ff:	56                   	push   esi
c0013600:	e8 3b d2 fe ff       	call   c0000840 <strcat>
c0013605:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001360c:	e8 a5 44 ff ff       	call   c0007ab6 <malloc>
c0013611:	83 c4 0c             	add    esp,0xc
c0013614:	89 c3                	mov    ebx,eax
c0013616:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001361c:	56                   	push   esi
c001361d:	50                   	push   eax
c001361e:	e8 f5 80 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c0013623:	83 c4 10             	add    esp,0x10
c0013626:	85 db                	test   ebx,ebx
c0013628:	74 7e                	je     c00136a8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001362a:	51                   	push   ecx
c001362b:	51                   	push   ecx
c001362c:	6a 01                	push   0x1
c001362e:	53                   	push   ebx
c001362f:	e8 a0 81 ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c0013634:	83 c4 10             	add    esp,0x10
c0013637:	85 c0                	test   eax,eax
c0013639:	74 08                	je     c0013643 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001363b:	83 ec 0c             	sub    esp,0xc
c001363e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013640:	53                   	push   ebx
c0013641:	eb 5f                	jmp    c00136a2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013643:	52                   	push   edx
c0013644:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013648:	50                   	push   eax
c0013649:	8d 44 24 20          	lea    eax,[esp+0x20]
c001364d:	50                   	push   eax
c001364e:	53                   	push   ebx
c001364f:	e8 82 84 ff ff       	call   c000bad6 <File::stat(unsigned long long*, bool*)>
c0013654:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013658:	83 c4 10             	add    esp,0x10
c001365b:	89 c1                	mov    ecx,eax
c001365d:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013661:	74 31                	je     c0013694 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013663:	83 ec 0c             	sub    esp,0xc
c0013666:	50                   	push   eax
c0013667:	e8 4a 44 ff ff       	call   c0007ab6 <malloc>
c001366c:	89 c6                	mov    esi,eax
c001366e:	58                   	pop    eax
c001366f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013671:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013675:	52                   	push   edx
c0013676:	56                   	push   esi
c0013677:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001367b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001367f:	53                   	push   ebx
c0013680:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013683:	83 c4 20             	add    esp,0x20
c0013686:	85 c0                	test   eax,eax
c0013688:	75 0a                	jne    c0013694 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001368a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001368e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013692:	74 18                	je     c00136ac <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013694:	83 ec 0c             	sub    esp,0xc
c0013697:	53                   	push   ebx
c0013698:	e8 95 81 ff ff       	call   c000b832 <File::close()>
c001369d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001369f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00136a5:	83 c4 10             	add    esp,0x10
c00136a8:	31 c0                	xor    eax,eax
c00136aa:	eb 3b                	jmp    c00136e7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00136ac:	83 ec 0c             	sub    esp,0xc
c00136af:	53                   	push   ebx
c00136b0:	e8 7d 81 ff ff       	call   c000b832 <File::close()>
c00136b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00136bd:	83 c4 0c             	add    esp,0xc
c00136c0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00136c7:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00136ce:	56                   	push   esi
c00136cf:	e8 57 fd ff ff       	call   c001342b <Reg::findLineFromLoadedData(char*, char*, char*)>
c00136d4:	89 34 24             	mov    DWORD PTR [esp],esi
c00136d7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00136db:	e8 e6 43 ff ff       	call   c0007ac6 <free>
c00136e0:	83 c4 10             	add    esp,0x10
c00136e3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00136e7:	81 c4 20 01 00 00    	add    esp,0x120
c00136ed:	5b                   	pop    ebx
c00136ee:	5e                   	pop    esi
c00136ef:	5f                   	pop    edi
c00136f0:	c3                   	ret    

c00136f1 <Reg::getLine(char*, char*, char*)>:
c00136f1:	57                   	push   edi
c00136f2:	56                   	push   esi
c00136f3:	53                   	push   ebx
c00136f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00136f8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00136fc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013700:	57                   	push   edi
c0013701:	56                   	push   esi
c0013702:	53                   	push   ebx
c0013703:	68 f4 1e 02 c0       	push   0xc0021ef4
c0013708:	e8 8f fe ff ff       	call   c001359c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001370d:	83 c4 10             	add    esp,0x10
c0013710:	84 c0                	test   al,al
c0013712:	75 10                	jne    c0013724 <Reg::getLine(char*, char*, char*)+0x33>
c0013714:	57                   	push   edi
c0013715:	56                   	push   esi
c0013716:	53                   	push   ebx
c0013717:	68 19 1f 02 c0       	push   0xc0021f19
c001371c:	e8 7b fe ff ff       	call   c001359c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013721:	83 c4 10             	add    esp,0x10
c0013724:	5b                   	pop    ebx
c0013725:	5e                   	pop    esi
c0013726:	5f                   	pop    edi
c0013727:	c3                   	ret    

c0013728 <Reg::readInt(char*, char*, int*)>:
c0013728:	55                   	push   ebp
c0013729:	57                   	push   edi
c001372a:	56                   	push   esi
c001372b:	53                   	push   ebx
c001372c:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013732:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013736:	55                   	push   ebp
c0013737:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001373e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013745:	e8 a7 ff ff ff       	call   c00136f1 <Reg::getLine(char*, char*, char*)>
c001374a:	83 c4 10             	add    esp,0x10
c001374d:	84 c0                	test   al,al
c001374f:	0f 84 b6 00 00 00    	je     c001380b <Reg::readInt(char*, char*, int*)+0xe3>
c0013755:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c001375a:	83 fa 2b             	cmp    edx,0x2b
c001375d:	74 0c                	je     c001376b <Reg::readInt(char*, char*, int*)+0x43>
c001375f:	83 fa 2d             	cmp    edx,0x2d
c0013762:	75 0e                	jne    c0013772 <Reg::readInt(char*, char*, int*)+0x4a>
c0013764:	ba 01 00 00 00       	mov    edx,0x1
c0013769:	eb 0b                	jmp    c0013776 <Reg::readInt(char*, char*, int*)+0x4e>
c001376b:	ba 01 00 00 00       	mov    edx,0x1
c0013770:	eb 02                	jmp    c0013774 <Reg::readInt(char*, char*, int*)+0x4c>
c0013772:	31 d2                	xor    edx,edx
c0013774:	31 c0                	xor    eax,eax
c0013776:	be 0a 00 00 00       	mov    esi,0xa
c001377b:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013780:	75 21                	jne    c00137a3 <Reg::readInt(char*, char*, int*)+0x7b>
c0013782:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013787:	83 f9 78             	cmp    ecx,0x78
c001378a:	75 0a                	jne    c0013796 <Reg::readInt(char*, char*, int*)+0x6e>
c001378c:	83 c2 02             	add    edx,0x2
c001378f:	be 10 00 00 00       	mov    esi,0x10
c0013794:	eb 0d                	jmp    c00137a3 <Reg::readInt(char*, char*, int*)+0x7b>
c0013796:	83 f9 62             	cmp    ecx,0x62
c0013799:	75 08                	jne    c00137a3 <Reg::readInt(char*, char*, int*)+0x7b>
c001379b:	83 c2 02             	add    edx,0x2
c001379e:	be 02 00 00 00       	mov    esi,0x2
c00137a3:	01 d5                	add    ebp,edx
c00137a5:	31 d2                	xor    edx,edx
c00137a7:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c00137ab:	83 f9 0d             	cmp    ecx,0xd
c00137ae:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00137b2:	0f 94 c3             	sete   bl
c00137b5:	85 c9                	test   ecx,ecx
c00137b7:	89 df                	mov    edi,ebx
c00137b9:	0f 94 c3             	sete   bl
c00137bc:	09 df                	or     edi,ebx
c00137be:	89 fb                	mov    ebx,edi
c00137c0:	83 e7 01             	and    edi,0x1
c00137c3:	75 35                	jne    c00137fa <Reg::readInt(char*, char*, int*)+0xd2>
c00137c5:	0f af d6             	imul   edx,esi
c00137c8:	83 fe 10             	cmp    esi,0x10
c00137cb:	75 26                	jne    c00137f3 <Reg::readInt(char*, char*, int*)+0xcb>
c00137cd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00137d1:	83 ef 41             	sub    edi,0x41
c00137d4:	89 fb                	mov    ebx,edi
c00137d6:	80 fb 05             	cmp    bl,0x5
c00137d9:	77 06                	ja     c00137e1 <Reg::readInt(char*, char*, int*)+0xb9>
c00137db:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c00137df:	eb 16                	jmp    c00137f7 <Reg::readInt(char*, char*, int*)+0xcf>
c00137e1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00137e5:	83 eb 61             	sub    ebx,0x61
c00137e8:	80 fb 05             	cmp    bl,0x5
c00137eb:	77 06                	ja     c00137f3 <Reg::readInt(char*, char*, int*)+0xcb>
c00137ed:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c00137f1:	eb 04                	jmp    c00137f7 <Reg::readInt(char*, char*, int*)+0xcf>
c00137f3:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c00137f7:	45                   	inc    ebp
c00137f8:	eb ad                	jmp    c00137a7 <Reg::readInt(char*, char*, int*)+0x7f>
c00137fa:	84 c0                	test   al,al
c00137fc:	74 02                	je     c0013800 <Reg::readInt(char*, char*, int*)+0xd8>
c00137fe:	f7 da                	neg    edx
c0013800:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013807:	89 10                	mov    DWORD PTR [eax],edx
c0013809:	88 d8                	mov    al,bl
c001380b:	81 c4 ec 00 00 00    	add    esp,0xec
c0013811:	5b                   	pop    ebx
c0013812:	5e                   	pop    esi
c0013813:	5f                   	pop    edi
c0013814:	5d                   	pop    ebp
c0013815:	c3                   	ret    

c0013816 <Reg::readString(char*, char*, char*, int)>:
c0013816:	57                   	push   edi
c0013817:	56                   	push   esi
c0013818:	53                   	push   ebx
c0013819:	81 ec d4 00 00 00    	sub    esp,0xd4
c001381f:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013826:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001382a:	57                   	push   edi
c001382b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013832:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013839:	e8 b3 fe ff ff       	call   c00136f1 <Reg::getLine(char*, char*, char*)>
c001383e:	83 c4 10             	add    esp,0x10
c0013841:	89 c6                	mov    esi,eax
c0013843:	84 c0                	test   al,al
c0013845:	74 44                	je     c001388b <Reg::readString(char*, char*, char*, int)+0x75>
c0013847:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001384e:	31 c0                	xor    eax,eax
c0013850:	4a                   	dec    edx
c0013851:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013854:	84 c9                	test   cl,cl
c0013856:	74 0f                	je     c0013867 <Reg::readString(char*, char*, char*, int)+0x51>
c0013858:	39 c2                	cmp    edx,eax
c001385a:	7e 0b                	jle    c0013867 <Reg::readString(char*, char*, char*, int)+0x51>
c001385c:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001385f:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013864:	40                   	inc    eax
c0013865:	eb ea                	jmp    c0013851 <Reg::readString(char*, char*, char*, int)+0x3b>
c0013867:	83 ec 0c             	sub    esp,0xc
c001386a:	53                   	push   ebx
c001386b:	e8 00 cd fe ff       	call   c0000570 <strlen>
c0013870:	83 c4 10             	add    esp,0x10
c0013873:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013878:	75 11                	jne    c001388b <Reg::readString(char*, char*, char*, int)+0x75>
c001387a:	83 ec 0c             	sub    esp,0xc
c001387d:	53                   	push   ebx
c001387e:	e8 ed cc fe ff       	call   c0000570 <strlen>
c0013883:	83 c4 10             	add    esp,0x10
c0013886:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001388b:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013891:	89 f0                	mov    eax,esi
c0013893:	5b                   	pop    ebx
c0013894:	5e                   	pop    esi
c0013895:	5f                   	pop    edi
c0013896:	c3                   	ret    

c0013897 <Reg::readBool(char*, char*, bool*)>:
c0013897:	83 ec 20             	sub    esp,0x20
c001389a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001389e:	50                   	push   eax
c001389f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138a7:	e8 7c fe ff ff       	call   c0013728 <Reg::readInt(char*, char*, int*)>
c00138ac:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00138b1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00138b5:	0f 95 02             	setne  BYTE PTR [edx]
c00138b8:	83 c4 2c             	add    esp,0x2c
c00138bb:	c3                   	ret    

c00138bc <Reg::readBoolWithDefault(char*, char*, bool)>:
c00138bc:	53                   	push   ebx
c00138bd:	83 ec 1c             	sub    esp,0x1c
c00138c0:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00138c4:	8d 44 24 13          	lea    eax,[esp+0x13]
c00138c8:	50                   	push   eax
c00138c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138d1:	e8 c1 ff ff ff       	call   c0013897 <Reg::readBool(char*, char*, bool*)>
c00138d6:	83 c4 10             	add    esp,0x10
c00138d9:	84 c0                	test   al,al
c00138db:	74 04                	je     c00138e1 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00138dd:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00138e1:	88 d8                	mov    al,bl
c00138e3:	83 c4 18             	add    esp,0x18
c00138e6:	5b                   	pop    ebx
c00138e7:	c3                   	ret    

c00138e8 <Reg::readIntWithDefault(char*, char*, int)>:
c00138e8:	53                   	push   ebx
c00138e9:	83 ec 1c             	sub    esp,0x1c
c00138ec:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00138f0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00138f4:	50                   	push   eax
c00138f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138fd:	e8 26 fe ff ff       	call   c0013728 <Reg::readInt(char*, char*, int*)>
c0013902:	83 c4 10             	add    esp,0x10
c0013905:	84 c0                	test   al,al
c0013907:	74 04                	je     c001390d <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013909:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001390d:	89 d8                	mov    eax,ebx
c001390f:	83 c4 18             	add    esp,0x18
c0013912:	5b                   	pop    ebx
c0013913:	c3                   	ret    

c0013914 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013914:	57                   	push   edi
c0013915:	56                   	push   esi
c0013916:	56                   	push   esi
c0013917:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001391b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001391f:	56                   	push   esi
c0013920:	57                   	push   edi
c0013921:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013925:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013929:	e8 e8 fe ff ff       	call   c0013816 <Reg::readString(char*, char*, char*, int)>
c001392e:	83 c4 10             	add    esp,0x10
c0013931:	84 c0                	test   al,al
c0013933:	75 1a                	jne    c001394f <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013935:	51                   	push   ecx
c0013936:	56                   	push   esi
c0013937:	6a 00                	push   0x0
c0013939:	57                   	push   edi
c001393a:	e8 b1 cb fe ff       	call   c00004f0 <memset>
c001393f:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013942:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013946:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013948:	83 c4 10             	add    esp,0x10
c001394b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001394f:	89 f8                	mov    eax,edi
c0013951:	5a                   	pop    edx
c0013952:	5e                   	pop    esi
c0013953:	5f                   	pop    edi
c0013954:	c3                   	ret    

c0013955 <SysEject(regs*)>:
c0013955:	83 ec 0c             	sub    esp,0xc
c0013958:	83 ca ff             	or     edx,0xffffffff
c001395b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001395f:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013962:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013967:	83 e9 41             	sub    ecx,0x41
c001396a:	83 f9 19             	cmp    ecx,0x19
c001396d:	77 18                	ja     c0013987 <SysEject(regs*)+0x32>
c001396f:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c0013976:	85 c9                	test   ecx,ecx
c0013978:	74 0d                	je     c0013987 <SysEject(regs*)+0x32>
c001397a:	83 ec 0c             	sub    esp,0xc
c001397d:	51                   	push   ecx
c001397e:	e8 17 a0 ff ff       	call   c000d99a <LogicalDisk::eject()>
c0013983:	83 c4 10             	add    esp,0x10
c0013986:	99                   	cdq    
c0013987:	83 c4 0c             	add    esp,0xc
c001398a:	c3                   	ret    

c001398b <SysExit(regs*)>:
c001398b:	83 ec 18             	sub    esp,0x18
c001398e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013992:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013995:	e8 16 2b 00 00       	call   c00164b0 <terminateTask(int)>
c001399a:	83 c8 ff             	or     eax,0xffffffff
c001399d:	83 c4 1c             	add    esp,0x1c
c00139a0:	89 c2                	mov    edx,eax
c00139a2:	c3                   	ret    

c00139a3 <SysGetCwd(regs*)>:
c00139a3:	83 ec 10             	sub    esp,0x10
c00139a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00139aa:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00139ad:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00139b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139b5:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00139b8:	e8 51 7b ff ff       	call   c000b50e <Fs::getcwd(Process*, char*, int)>
c00139bd:	83 c4 1c             	add    esp,0x1c
c00139c0:	99                   	cdq    
c00139c1:	c3                   	ret    

c00139c2 <SysGetPID(regs*)>:
c00139c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139c7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00139ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00139cc:	99                   	cdq    
c00139cd:	c3                   	ret    

c00139ce <SysGetRAMData(regs*)>:
c00139ce:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c00139d4:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c00139de:	99                   	cdq    
c00139df:	f7 f9                	idiv   ecx
c00139e1:	c1 e0 18             	shl    eax,0x18
c00139e4:	09 c8                	or     eax,ecx
c00139e6:	99                   	cdq    
c00139e7:	c3                   	ret    

c00139e8 <SysGetVGAPtr(regs*)>:
c00139e8:	55                   	push   ebp
c00139e9:	57                   	push   edi
c00139ea:	56                   	push   esi
c00139eb:	53                   	push   ebx
c00139ec:	83 ec 18             	sub    esp,0x18
c00139ef:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00139f3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00139f6:	e8 81 25 00 00       	call   c0015f7c <Thr::processFromPID(int)>
c00139fb:	83 c4 10             	add    esp,0x10
c00139fe:	89 c1                	mov    ecx,eax
c0013a00:	b8 01 00 00 00       	mov    eax,0x1
c0013a05:	85 c9                	test   ecx,ecx
c0013a07:	74 57                	je     c0013a60 <SysGetVGAPtr(regs*)+0x78>
c0013a09:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013a0f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013a13:	74 0c                	je     c0013a21 <SysGetVGAPtr(regs*)+0x39>
c0013a15:	83 ec 0c             	sub    esp,0xc
c0013a18:	55                   	push   ebp
c0013a19:	e8 3b 4d ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0013a1e:	83 c4 10             	add    esp,0x10
c0013a21:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013a24:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013a27:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013a2c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a2e:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013a31:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013a34:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013a3a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013a3d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013a40:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013a46:	50                   	push   eax
c0013a47:	50                   	push   eax
c0013a48:	68 34 1f 02 c0       	push   0xc0021f34
c0013a4d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013a50:	05 a8 0f 00 00       	add    eax,0xfa8
c0013a55:	50                   	push   eax
c0013a56:	e8 e5 cb fe ff       	call   c0000640 <strcpy>
c0013a5b:	83 c4 10             	add    esp,0x10
c0013a5e:	31 c0                	xor    eax,eax
c0013a60:	83 c4 0c             	add    esp,0xc
c0013a63:	31 d2                	xor    edx,edx
c0013a65:	5b                   	pop    ebx
c0013a66:	5e                   	pop    esi
c0013a67:	5f                   	pop    edi
c0013a68:	5d                   	pop    ebp
c0013a69:	c3                   	ret    
c0013a6a:	66 90                	xchg   ax,ax

c0013a6c <SysKill(regs*)>:
c0013a6c:	53                   	push   ebx
c0013a6d:	83 ec 08             	sub    esp,0x8
c0013a70:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a74:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013a78:	75 16                	jne    c0013a90 <SysKill(regs*)+0x24>
c0013a7a:	83 ec 0c             	sub    esp,0xc
c0013a7d:	68 3e 1f 02 c0       	push   0xc0021f3e
c0013a82:	e8 ca d7 ff ff       	call   c0011251 <KePanic(char const*)>
c0013a87:	83 c4 10             	add    esp,0x10
c0013a8a:	e9 89 00 00 00       	jmp    c0013b18 <SysKill(regs*)+0xac>
c0013a8f:	90                   	nop
c0013a90:	83 ec 0c             	sub    esp,0xc
c0013a93:	68 e4 96 02 c0       	push   0xc00296e4
c0013a98:	e8 cf bc 00 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0013aa0:	83 c4 10             	add    esp,0x10
c0013aa3:	85 c0                	test   eax,eax
c0013aa5:	74 19                	je     c0013ac0 <SysKill(regs*)+0x54>
c0013aa7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013aaa:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013aad:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013aaf:	74 33                	je     c0013ae4 <SysKill(regs*)+0x78>
c0013ab1:	52                   	push   edx
c0013ab2:	52                   	push   edx
c0013ab3:	50                   	push   eax
c0013ab4:	68 e4 96 02 c0       	push   0xc00296e4
c0013ab9:	e8 ce bf 00 00       	call   c001fa8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013abe:	eb e0                	jmp    c0013aa0 <SysKill(regs*)+0x34>
c0013ac0:	83 ec 0c             	sub    esp,0xc
c0013ac3:	68 d8 96 02 c0       	push   0xc00296d8
c0013ac8:	e8 9f bc 00 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013acd:	8d 76 00             	lea    esi,[esi+0x0]
c0013ad0:	83 c4 10             	add    esp,0x10
c0013ad3:	85 c0                	test   eax,eax
c0013ad5:	74 41                	je     c0013b18 <SysKill(regs*)+0xac>
c0013ad7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013ada:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013add:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013adf:	75 27                	jne    c0013b08 <SysKill(regs*)+0x9c>
c0013ae1:	8d 76 00             	lea    esi,[esi+0x0]
c0013ae4:	51                   	push   ecx
c0013ae5:	51                   	push   ecx
c0013ae6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013ae9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013aee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013af1:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013af7:	e8 f6 db ff ff       	call   c00116f2 <KeRaiseSignal(SigHandlerBlock*, int)>
c0013afc:	83 c4 10             	add    esp,0x10
c0013aff:	31 c0                	xor    eax,eax
c0013b01:	31 d2                	xor    edx,edx
c0013b03:	eb 1b                	jmp    c0013b20 <SysKill(regs*)+0xb4>
c0013b05:	8d 76 00             	lea    esi,[esi+0x0]
c0013b08:	52                   	push   edx
c0013b09:	52                   	push   edx
c0013b0a:	50                   	push   eax
c0013b0b:	68 d8 96 02 c0       	push   0xc00296d8
c0013b10:	e8 77 bf 00 00       	call   c001fa8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013b15:	eb b9                	jmp    c0013ad0 <SysKill(regs*)+0x64>
c0013b17:	90                   	nop
c0013b18:	83 c8 ff             	or     eax,0xffffffff
c0013b1b:	89 c2                	mov    edx,eax
c0013b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0013b20:	83 c4 08             	add    esp,0x8
c0013b23:	5b                   	pop    ebx
c0013b24:	c3                   	ret    

c0013b25 <SysLoadDLL(regs*)>:
c0013b25:	56                   	push   esi
c0013b26:	53                   	push   ebx
c0013b27:	31 d2                	xor    edx,edx
c0013b29:	51                   	push   ecx
c0013b2a:	b8 01 00 00 00       	mov    eax,0x1
c0013b2f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b33:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013b37:	0f 84 8c 00 00 00    	je     c0013bc9 <SysLoadDLL(regs*)+0xa4>
c0013b3d:	83 ec 0c             	sub    esp,0xc
c0013b40:	68 14 01 00 00       	push   0x114
c0013b45:	e8 6c 3f ff ff       	call   c0007ab6 <malloc>
c0013b4a:	83 c4 0c             	add    esp,0xc
c0013b4d:	89 c3                	mov    ebx,eax
c0013b4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b54:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013b57:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013b5a:	53                   	push   ebx
c0013b5b:	e8 b8 7b ff ff       	call   c000b718 <File::File(char const*, Process*)>
c0013b60:	83 c4 10             	add    esp,0x10
c0013b63:	31 d2                	xor    edx,edx
c0013b65:	b8 02 00 00 00       	mov    eax,0x2
c0013b6a:	85 db                	test   ebx,ebx
c0013b6c:	74 5b                	je     c0013bc9 <SysLoadDLL(regs*)+0xa4>
c0013b6e:	83 ec 0c             	sub    esp,0xc
c0013b71:	53                   	push   ebx
c0013b72:	e8 21 7f ff ff       	call   c000ba98 <File::exists()>
c0013b77:	83 c4 10             	add    esp,0x10
c0013b7a:	84 c0                	test   al,al
c0013b7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b7e:	75 11                	jne    c0013b91 <SysLoadDLL(regs*)+0x6c>
c0013b80:	83 ec 0c             	sub    esp,0xc
c0013b83:	53                   	push   ebx
c0013b84:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b87:	83 c4 10             	add    esp,0x10
c0013b8a:	b8 03 00 00 00       	mov    eax,0x3
c0013b8f:	eb 36                	jmp    c0013bc7 <SysLoadDLL(regs*)+0xa2>
c0013b91:	83 ec 0c             	sub    esp,0xc
c0013b94:	53                   	push   ebx
c0013b95:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b98:	58                   	pop    eax
c0013b99:	5a                   	pop    edx
c0013b9a:	6a 00                	push   0x0
c0013b9c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013b9f:	e8 0e 15 00 00       	call   c00150b2 <Thr::loadDLL(char const*, bool)>
c0013ba4:	83 c4 10             	add    esp,0x10
c0013ba7:	89 c1                	mov    ecx,eax
c0013ba9:	31 d2                	xor    edx,edx
c0013bab:	b8 04 00 00 00       	mov    eax,0x4
c0013bb0:	85 c9                	test   ecx,ecx
c0013bb2:	74 15                	je     c0013bc9 <SysLoadDLL(regs*)+0xa4>
c0013bb4:	53                   	push   ebx
c0013bb5:	53                   	push   ebx
c0013bb6:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013bbc:	51                   	push   ecx
c0013bbd:	e8 21 17 00 00       	call   c00152e3 <Thr::executeDLL(unsigned long, void*)>
c0013bc2:	83 c4 10             	add    esp,0x10
c0013bc5:	31 c0                	xor    eax,eax
c0013bc7:	31 d2                	xor    edx,edx
c0013bc9:	59                   	pop    ecx
c0013bca:	5b                   	pop    ebx
c0013bcb:	5e                   	pop    esi
c0013bcc:	c3                   	ret    

c0013bcd <SysRead(regs*)>:
c0013bcd:	57                   	push   edi
c0013bce:	56                   	push   esi
c0013bcf:	53                   	push   ebx
c0013bd0:	83 ec 10             	sub    esp,0x10
c0013bd3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013bd7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013bda:	83 f8 02             	cmp    eax,0x2
c0013bdd:	77 10                	ja     c0013bef <SysRead(regs*)+0x22>
c0013bdf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013be4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013be7:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013bed:	eb 0e                	jmp    c0013bfd <SysRead(regs*)+0x30>
c0013bef:	83 ec 0c             	sub    esp,0xc
c0013bf2:	50                   	push   eax
c0013bf3:	e8 bb 58 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0013bf8:	83 c4 10             	add    esp,0x10
c0013bfb:	89 c1                	mov    ecx,eax
c0013bfd:	83 c8 ff             	or     eax,0xffffffff
c0013c00:	85 c9                	test   ecx,ecx
c0013c02:	89 c2                	mov    edx,eax
c0013c04:	74 28                	je     c0013c2e <SysRead(regs*)+0x61>
c0013c06:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013c0e:	31 ff                	xor    edi,edi
c0013c10:	83 ec 0c             	sub    esp,0xc
c0013c13:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013c15:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013c19:	52                   	push   edx
c0013c1a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c1d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013c20:	57                   	push   edi
c0013c21:	56                   	push   esi
c0013c22:	51                   	push   ecx
c0013c23:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013c2a:	83 c4 20             	add    esp,0x20
c0013c2d:	99                   	cdq    
c0013c2e:	83 c4 10             	add    esp,0x10
c0013c31:	5b                   	pop    ebx
c0013c32:	5e                   	pop    esi
c0013c33:	5f                   	pop    edi
c0013c34:	c3                   	ret    

c0013c35 <SysRegisterSignal(regs*)>:
c0013c35:	83 ec 18             	sub    esp,0x18
c0013c38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c3c:	6a 00                	push   0x0
c0013c3e:	6a 00                	push   0x0
c0013c40:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013c43:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013c46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c4b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c4e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013c54:	e8 63 da ff ff       	call   c00116bc <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013c59:	83 c4 2c             	add    esp,0x2c
c0013c5c:	99                   	cdq    
c0013c5d:	c3                   	ret    

c0013c5e <SysRegistryGetTypeFromPath(regs*)>:
c0013c5e:	57                   	push   edi
c0013c5f:	56                   	push   esi
c0013c60:	53                   	push   ebx
c0013c61:	81 ec 38 01 00 00    	sub    esp,0x138
c0013c67:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013c6e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c71:	68 5f 1f 02 c0       	push   0xc0021f5f
c0013c76:	e8 ca 6c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013c7b:	5a                   	pop    edx
c0013c7c:	59                   	pop    ecx
c0013c7d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c80:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013c83:	e8 4d f6 ff ff       	call   c00132d5 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013c88:	5f                   	pop    edi
c0013c89:	89 c6                	mov    esi,eax
c0013c8b:	5a                   	pop    edx
c0013c8c:	50                   	push   eax
c0013c8d:	68 7f 1f 02 c0       	push   0xc0021f7f
c0013c92:	e8 ae 6c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013c97:	83 c4 10             	add    esp,0x10
c0013c9a:	85 f6                	test   esi,esi
c0013c9c:	74 28                	je     c0013cc6 <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013c9e:	50                   	push   eax
c0013c9f:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013ca3:	57                   	push   edi
c0013ca4:	56                   	push   esi
c0013ca5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013ca8:	e8 0c f2 ff ff       	call   c0012eb9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013cad:	83 c4 0c             	add    esp,0xc
c0013cb0:	89 c3                	mov    ebx,eax
c0013cb2:	57                   	push   edi
c0013cb3:	50                   	push   eax
c0013cb4:	68 87 1f 02 c0       	push   0xc0021f87
c0013cb9:	e8 87 6c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013cbe:	89 d8                	mov    eax,ebx
c0013cc0:	83 c4 10             	add    esp,0x10
c0013cc3:	99                   	cdq    
c0013cc4:	eb 05                	jmp    c0013ccb <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013cc6:	83 c8 ff             	or     eax,0xffffffff
c0013cc9:	89 c2                	mov    edx,eax
c0013ccb:	81 c4 30 01 00 00    	add    esp,0x130
c0013cd1:	5b                   	pop    ebx
c0013cd2:	5e                   	pop    esi
c0013cd3:	5f                   	pop    edi
c0013cd4:	c3                   	ret    

c0013cd5 <SysRegistryReadExtent(regs*)>:
c0013cd5:	83 ec 1c             	sub    esp,0x1c
c0013cd8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013cdc:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013cdf:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013ce2:	85 c0                	test   eax,eax
c0013ce4:	79 1f                	jns    c0013d05 <SysRegistryReadExtent(regs*)+0x30>
c0013ce6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013ceb:	52                   	push   edx
c0013cec:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013cf0:	52                   	push   edx
c0013cf1:	50                   	push   eax
c0013cf2:	51                   	push   ecx
c0013cf3:	e8 b3 f0 ff ff       	call   c0012dab <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013cf8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cfc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013d00:	83 c4 10             	add    esp,0x10
c0013d03:	eb 14                	jmp    c0013d19 <SysRegistryReadExtent(regs*)+0x44>
c0013d05:	83 ec 04             	sub    esp,0x4
c0013d08:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013d0b:	50                   	push   eax
c0013d0c:	51                   	push   ecx
c0013d0d:	e8 33 eb ff ff       	call   c0012845 <CmGetString(Reghive_Tag*, int, char*)>
c0013d12:	83 c4 10             	add    esp,0x10
c0013d15:	31 c0                	xor    eax,eax
c0013d17:	31 d2                	xor    edx,edx
c0013d19:	83 c4 1c             	add    esp,0x1c
c0013d1c:	c3                   	ret    

c0013d1d <SysRegistryPathToExtentLookup(regs*)>:
c0013d1d:	53                   	push   ebx
c0013d1e:	83 ec 10             	sub    esp,0x10
c0013d21:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d25:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013d28:	68 9d 1f 02 c0       	push   0xc0021f9d
c0013d2d:	e8 13 6c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013d32:	58                   	pop    eax
c0013d33:	5a                   	pop    edx
c0013d34:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013d37:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d3a:	e8 96 f5 ff ff       	call   c00132d5 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013d3f:	83 c4 18             	add    esp,0x18
c0013d42:	99                   	cdq    
c0013d43:	5b                   	pop    ebx
c0013d44:	c3                   	ret    

c0013d45 <SysRegistryEnterDirectory(regs*)>:
c0013d45:	53                   	push   ebx
c0013d46:	83 ec 10             	sub    esp,0x10
c0013d49:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d4d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d50:	68 c0 1f 02 c0       	push   0xc0021fc0
c0013d55:	e8 eb 6b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013d5a:	58                   	pop    eax
c0013d5b:	5a                   	pop    edx
c0013d5c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d5f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d62:	e8 55 eb ff ff       	call   c00128bc <CmEnterDirectory(Reghive_Tag*, int)>
c0013d67:	83 c4 18             	add    esp,0x18
c0013d6a:	99                   	cdq    
c0013d6b:	5b                   	pop    ebx
c0013d6c:	c3                   	ret    

c0013d6d <SysRegistryGetNext(regs*)>:
c0013d6d:	53                   	push   ebx
c0013d6e:	83 ec 10             	sub    esp,0x10
c0013d71:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d75:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d78:	68 de 1f 02 c0       	push   0xc0021fde
c0013d7d:	e8 c3 6b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013d82:	58                   	pop    eax
c0013d83:	5a                   	pop    edx
c0013d84:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d87:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d8a:	e8 6c eb ff ff       	call   c00128fb <CmGetNext(Reghive_Tag*, int)>
c0013d8f:	83 c4 18             	add    esp,0x18
c0013d92:	99                   	cdq    
c0013d93:	5b                   	pop    ebx
c0013d94:	c3                   	ret    

c0013d95 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013d95:	57                   	push   edi
c0013d96:	56                   	push   esi
c0013d97:	53                   	push   ebx
c0013d98:	81 ec 34 01 00 00    	sub    esp,0x134
c0013d9e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013da5:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013da9:	57                   	push   edi
c0013daa:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013dad:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013db0:	e8 04 f1 ff ff       	call   c0012eb9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013db5:	89 c3                	mov    ebx,eax
c0013db7:	58                   	pop    eax
c0013db8:	5a                   	pop    edx
c0013db9:	57                   	push   edi
c0013dba:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013dbd:	e8 7e c8 fe ff       	call   c0000640 <strcpy>
c0013dc2:	89 d8                	mov    eax,ebx
c0013dc4:	81 c4 40 01 00 00    	add    esp,0x140
c0013dca:	99                   	cdq    
c0013dcb:	5b                   	pop    ebx
c0013dcc:	5e                   	pop    esi
c0013dcd:	5f                   	pop    edi
c0013dce:	c3                   	ret    

c0013dcf <SysRegistryOpen(regs*)>:
c0013dcf:	83 ec 18             	sub    esp,0x18
c0013dd2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013dd6:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013dd9:	e8 f7 e8 ff ff       	call   c00126d5 <CmOpen(char const*)>
c0013dde:	83 c4 1c             	add    esp,0x1c
c0013de1:	99                   	cdq    
c0013de2:	c3                   	ret    

c0013de3 <SysRegistryClose(regs*)>:
c0013de3:	83 ec 18             	sub    esp,0x18
c0013de6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013dea:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013ded:	e8 01 ea ff ff       	call   c00127f3 <CmClose(Reghive_Tag*)>
c0013df2:	31 c0                	xor    eax,eax
c0013df4:	31 d2                	xor    edx,edx
c0013df6:	83 c4 1c             	add    esp,0x1c
c0013df9:	c3                   	ret    

c0013dfa <SysSbrk(regs*)>:
c0013dfa:	56                   	push   esi
c0013dfb:	53                   	push   ebx
c0013dfc:	50                   	push   eax
c0013dfd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013e06:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e09:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013e0c:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013e12:	85 db                	test   ebx,ebx
c0013e14:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013e17:	74 02                	je     c0013e1b <SysSbrk(regs*)+0x21>
c0013e19:	79 06                	jns    c0013e21 <SysSbrk(regs*)+0x27>
c0013e1b:	89 f0                	mov    eax,esi
c0013e1d:	31 d2                	xor    edx,edx
c0013e1f:	eb 2a                	jmp    c0013e4b <SysSbrk(regs*)+0x51>
c0013e21:	83 c8 ff             	or     eax,0xffffffff
c0013e24:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013e2a:	89 c2                	mov    edx,eax
c0013e2c:	77 1d                	ja     c0013e4b <SysSbrk(regs*)+0x51>
c0013e2e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013e34:	50                   	push   eax
c0013e35:	c1 ea 0c             	shr    edx,0xc
c0013e38:	68 07 0c 00 00       	push   0xc07
c0013e3d:	52                   	push   edx
c0013e3e:	51                   	push   ecx
c0013e3f:	e8 e0 5f ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c0013e44:	89 f0                	mov    eax,esi
c0013e46:	31 d2                	xor    edx,edx
c0013e48:	83 c4 10             	add    esp,0x10
c0013e4b:	59                   	pop    ecx
c0013e4c:	5b                   	pop    ebx
c0013e4d:	5e                   	pop    esi
c0013e4e:	c3                   	ret    

c0013e4f <SysSetCwd(regs*)>:
c0013e4f:	83 ec 14             	sub    esp,0x14
c0013e52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e56:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013e59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e5e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013e61:	e8 d1 7c ff ff       	call   c000bb37 <Fs::setcwd(Process*, char*)>
c0013e66:	83 c4 1c             	add    esp,0x1c
c0013e69:	99                   	cdq    
c0013e6a:	c3                   	ret    

c0013e6b <SysSetTime(regs*)>:
c0013e6b:	55                   	push   ebp
c0013e6c:	31 c9                	xor    ecx,ecx
c0013e6e:	57                   	push   edi
c0013e6f:	bd 0c 00 00 00       	mov    ebp,0xc
c0013e74:	56                   	push   esi
c0013e75:	53                   	push   ebx
c0013e76:	31 db                	xor    ebx,ebx
c0013e78:	83 ec 10             	sub    esp,0x10
c0013e7b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013e7f:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013e82:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013e85:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013e88:	89 c2                	mov    edx,eax
c0013e8a:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013e90:	83 e2 1f             	and    edx,0x1f
c0013e93:	c1 e7 10             	shl    edi,0x10
c0013e96:	42                   	inc    edx
c0013e97:	c1 e8 05             	shr    eax,0x5
c0013e9a:	88 d1                	mov    cl,dl
c0013e9c:	31 d2                	xor    edx,edx
c0013e9e:	f7 f5                	div    ebp
c0013ea0:	89 dd                	mov    ebp,ebx
c0013ea2:	88 d5                	mov    ch,dl
c0013ea4:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013eaa:	0f b7 c1             	movzx  eax,cx
c0013ead:	31 d2                	xor    edx,edx
c0013eaf:	09 f8                	or     eax,edi
c0013eb1:	bf 3c 00 00 00       	mov    edi,0x3c
c0013eb6:	89 c1                	mov    ecx,eax
c0013eb8:	89 f0                	mov    eax,esi
c0013eba:	f7 f7                	div    edi
c0013ebc:	c1 e2 10             	shl    edx,0x10
c0013ebf:	09 d5                	or     ebp,edx
c0013ec1:	31 d2                	xor    edx,edx
c0013ec3:	89 eb                	mov    ebx,ebp
c0013ec5:	f7 f7                	div    edi
c0013ec7:	bf 10 0e 00 00       	mov    edi,0xe10
c0013ecc:	88 d7                	mov    bh,dl
c0013ece:	89 f0                	mov    eax,esi
c0013ed0:	31 d2                	xor    edx,edx
c0013ed2:	f7 f7                	div    edi
c0013ed4:	bf 18 00 00 00       	mov    edi,0x18
c0013ed9:	31 d2                	xor    edx,edx
c0013edb:	f7 f7                	div    edi
c0013edd:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0013ee2:	88 d3                	mov    bl,dl
c0013ee4:	53                   	push   ebx
c0013ee5:	51                   	push   ecx
c0013ee6:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013eec:	e8 45 84 ff ff       	call   c000c336 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013ef1:	83 c4 1c             	add    esp,0x1c
c0013ef4:	83 f0 01             	xor    eax,0x1
c0013ef7:	5b                   	pop    ebx
c0013ef8:	0f b6 c0             	movzx  eax,al
c0013efb:	5e                   	pop    esi
c0013efc:	31 d2                	xor    edx,edx
c0013efe:	5f                   	pop    edi
c0013eff:	5d                   	pop    ebp
c0013f00:	c3                   	ret    

c0013f01 <SysTimezone(regs*)>:
c0013f01:	53                   	push   ebx
c0013f02:	83 ec 08             	sub    esp,0x8
c0013f05:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f09:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013f0d:	75 17                	jne    c0013f26 <SysTimezone(regs*)+0x25>
c0013f0f:	83 ec 0c             	sub    esp,0xc
c0013f12:	68 f5 1f 02 c0       	push   0xc0021ff5
c0013f17:	e8 29 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013f1c:	83 c8 ff             	or     eax,0xffffffff
c0013f1f:	83 c4 10             	add    esp,0x10
c0013f22:	89 c2                	mov    edx,eax
c0013f24:	eb 20                	jmp    c0013f46 <SysTimezone(regs*)+0x45>
c0013f26:	83 ec 0c             	sub    esp,0xc
c0013f29:	68 0a 20 02 c0       	push   0xc002200a
c0013f2e:	e8 12 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013f33:	58                   	pop    eax
c0013f34:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013f37:	e8 64 81 ff ff       	call   c000c0a0 <User::loadClockSettings(int)>
c0013f3c:	83 c4 10             	add    esp,0x10
c0013f3f:	b8 01 00 00 00       	mov    eax,0x1
c0013f44:	31 d2                	xor    edx,edx
c0013f46:	83 c4 08             	add    esp,0x8
c0013f49:	5b                   	pop    ebx
c0013f4a:	c3                   	ret    

c0013f4b <SysTruncate(regs*)>:
c0013f4b:	55                   	push   ebp
c0013f4c:	57                   	push   edi
c0013f4d:	31 ff                	xor    edi,edi
c0013f4f:	56                   	push   esi
c0013f50:	53                   	push   ebx
c0013f51:	83 ec 0c             	sub    esp,0xc
c0013f54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f58:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013f5b:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0013f5e:	89 ce                	mov    esi,ecx
c0013f60:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013f64:	0f 84 9a 00 00 00    	je     c0014004 <SysTruncate(regs*)+0xb9>
c0013f6a:	83 ec 0c             	sub    esp,0xc
c0013f6d:	68 14 01 00 00       	push   0x114
c0013f72:	e8 3f 3b ff ff       	call   c0007ab6 <malloc>
c0013f77:	83 c4 0c             	add    esp,0xc
c0013f7a:	89 c3                	mov    ebx,eax
c0013f7c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f81:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f84:	55                   	push   ebp
c0013f85:	53                   	push   ebx
c0013f86:	e8 8d 77 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c0013f8b:	83 c4 10             	add    esp,0x10
c0013f8e:	31 d2                	xor    edx,edx
c0013f90:	b8 03 00 00 00       	mov    eax,0x3
c0013f95:	85 db                	test   ebx,ebx
c0013f97:	0f 84 a2 00 00 00    	je     c001403f <SysTruncate(regs*)+0xf4>
c0013f9d:	51                   	push   ecx
c0013f9e:	51                   	push   ecx
c0013f9f:	6a 02                	push   0x2
c0013fa1:	53                   	push   ebx
c0013fa2:	e8 2d 78 ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c0013fa7:	83 c4 10             	add    esp,0x10
c0013faa:	85 c0                	test   eax,eax
c0013fac:	74 13                	je     c0013fc1 <SysTruncate(regs*)+0x76>
c0013fae:	83 ec 0c             	sub    esp,0xc
c0013fb1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fb3:	53                   	push   ebx
c0013fb4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013fb7:	83 c4 10             	add    esp,0x10
c0013fba:	b8 04 00 00 00       	mov    eax,0x4
c0013fbf:	eb 7c                	jmp    c001403d <SysTruncate(regs*)+0xf2>
c0013fc1:	52                   	push   edx
c0013fc2:	57                   	push   edi
c0013fc3:	56                   	push   esi
c0013fc4:	53                   	push   ebx
c0013fc5:	e8 1e 79 ff ff       	call   c000b8e8 <File::truncate(unsigned long long)>
c0013fca:	83 c4 10             	add    esp,0x10
c0013fcd:	85 c0                	test   eax,eax
c0013fcf:	74 1b                	je     c0013fec <SysTruncate(regs*)+0xa1>
c0013fd1:	83 ec 0c             	sub    esp,0xc
c0013fd4:	53                   	push   ebx
c0013fd5:	e8 58 78 ff ff       	call   c000b832 <File::close()>
c0013fda:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fdc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013fdf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013fe2:	83 c4 10             	add    esp,0x10
c0013fe5:	b8 05 00 00 00       	mov    eax,0x5
c0013fea:	eb 51                	jmp    c001403d <SysTruncate(regs*)+0xf2>
c0013fec:	83 ec 0c             	sub    esp,0xc
c0013fef:	53                   	push   ebx
c0013ff0:	e8 3d 78 ff ff       	call   c000b832 <File::close()>
c0013ff5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ff7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ffa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013ffd:	83 c4 10             	add    esp,0x10
c0014000:	31 c0                	xor    eax,eax
c0014002:	eb 39                	jmp    c001403d <SysTruncate(regs*)+0xf2>
c0014004:	31 d2                	xor    edx,edx
c0014006:	b8 01 00 00 00       	mov    eax,0x1
c001400b:	83 fd 02             	cmp    ebp,0x2
c001400e:	7e 2f                	jle    c001403f <SysTruncate(regs*)+0xf4>
c0014010:	83 ec 0c             	sub    esp,0xc
c0014013:	51                   	push   ecx
c0014014:	e8 9a 54 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0014019:	83 c4 10             	add    esp,0x10
c001401c:	89 c1                	mov    ecx,eax
c001401e:	31 d2                	xor    edx,edx
c0014020:	b8 02 00 00 00       	mov    eax,0x2
c0014025:	85 c9                	test   ecx,ecx
c0014027:	74 16                	je     c001403f <SysTruncate(regs*)+0xf4>
c0014029:	50                   	push   eax
c001402a:	57                   	push   edi
c001402b:	56                   	push   esi
c001402c:	51                   	push   ecx
c001402d:	e8 b6 78 ff ff       	call   c000b8e8 <File::truncate(unsigned long long)>
c0014032:	83 c4 10             	add    esp,0x10
c0014035:	85 c0                	test   eax,eax
c0014037:	0f 95 c0             	setne  al
c001403a:	0f b6 c0             	movzx  eax,al
c001403d:	31 d2                	xor    edx,edx
c001403f:	83 c4 0c             	add    esp,0xc
c0014042:	5b                   	pop    ebx
c0014043:	5e                   	pop    esi
c0014044:	5f                   	pop    edi
c0014045:	5d                   	pop    ebp
c0014046:	c3                   	ret    

c0014047 <SysWrite(regs*)>:
c0014047:	57                   	push   edi
c0014048:	56                   	push   esi
c0014049:	53                   	push   ebx
c001404a:	83 ec 10             	sub    esp,0x10
c001404d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014051:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014054:	83 f8 02             	cmp    eax,0x2
c0014057:	77 10                	ja     c0014069 <SysWrite(regs*)+0x22>
c0014059:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001405e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014061:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014067:	eb 0e                	jmp    c0014077 <SysWrite(regs*)+0x30>
c0014069:	83 ec 0c             	sub    esp,0xc
c001406c:	50                   	push   eax
c001406d:	e8 41 54 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0014072:	83 c4 10             	add    esp,0x10
c0014075:	89 c1                	mov    ecx,eax
c0014077:	83 c8 ff             	or     eax,0xffffffff
c001407a:	85 c9                	test   ecx,ecx
c001407c:	89 c2                	mov    edx,eax
c001407e:	74 28                	je     c00140a8 <SysWrite(regs*)+0x61>
c0014080:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014088:	31 ff                	xor    edi,edi
c001408a:	83 ec 0c             	sub    esp,0xc
c001408d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001408f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014093:	52                   	push   edx
c0014094:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014097:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001409a:	57                   	push   edi
c001409b:	56                   	push   esi
c001409c:	51                   	push   ecx
c001409d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00140a0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00140a4:	83 c4 20             	add    esp,0x20
c00140a7:	99                   	cdq    
c00140a8:	83 c4 10             	add    esp,0x10
c00140ab:	5b                   	pop    ebx
c00140ac:	5e                   	pop    esi
c00140ad:	5f                   	pop    edi
c00140ae:	c3                   	ret    

c00140af <SysWsbe(regs*)>:
c00140af:	57                   	push   edi
c00140b0:	b9 0b 00 00 00       	mov    ecx,0xb
c00140b5:	56                   	push   esi
c00140b6:	be 49 20 02 c0       	mov    esi,0xc0022049
c00140bb:	53                   	push   ebx
c00140bc:	83 ec 30             	sub    esp,0x30
c00140bf:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00140c3:	fc                   	cld    
c00140c4:	83 ec 0c             	sub    esp,0xc
c00140c7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00140c9:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00140cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140d2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00140d5:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00140db:	8b 06                	mov    eax,DWORD PTR [esi]
c00140dd:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00140e0:	57                   	push   edi
c00140e1:	e8 8a c4 fe ff       	call   c0000570 <strlen>
c00140e6:	5a                   	pop    edx
c00140e7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00140eb:	52                   	push   edx
c00140ec:	31 d2                	xor    edx,edx
c00140ee:	57                   	push   edi
c00140ef:	52                   	push   edx
c00140f0:	50                   	push   eax
c00140f1:	56                   	push   esi
c00140f2:	ff d3                	call   ebx
c00140f4:	83 c4 14             	add    esp,0x14
c00140f7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00140fb:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00140fe:	e8 ad 23 00 00       	call   c00164b0 <terminateTask(int)>
c0014103:	83 c4 40             	add    esp,0x40
c0014106:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001410b:	5b                   	pop    ebx
c001410c:	31 d2                	xor    edx,edx
c001410e:	5e                   	pop    esi
c001410f:	5f                   	pop    edi
c0014110:	c3                   	ret    

c0014111 <SysYield(regs*)>:
c0014111:	83 ec 0c             	sub    esp,0xc
c0014114:	fa                   	cli    
c0014115:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001411b:	e8 f0 19 00 00       	call   c0015b10 <schedule()>
c0014120:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0014125:	48                   	dec    eax
c0014126:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001412b:	75 01                	jne    c001412e <SysYield(regs*)+0x1d>
c001412d:	fb                   	sti    
c001412e:	31 c0                	xor    eax,eax
c0014130:	31 d2                	xor    edx,edx
c0014132:	83 c4 0c             	add    esp,0xc
c0014135:	c3                   	ret    

c0014136 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0014136:	55                   	push   ebp
c0014137:	57                   	push   edi
c0014138:	56                   	push   esi
c0014139:	53                   	push   ebx
c001413a:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014140:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014148:	0f 95 c0             	setne  al
c001414b:	31 d2                	xor    edx,edx
c001414d:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014155:	0f 94 c2             	sete   dl
c0014158:	85 c2                	test   edx,eax
c001415a:	74 34                	je     c0014190 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c001415c:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0014167:	74 27                	je     c0014190 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014169:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0014170:	05 00 10 00 00       	add    eax,0x1000
c0014175:	89 c1                	mov    ecx,eax
c0014177:	25 00 f0 ff ff       	and    eax,0xfffff000
c001417c:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0014182:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014189:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0014190:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014197:	83 ec 0c             	sub    esp,0xc
c001419a:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00141a0:	6a 01                	push   0x1
c00141a2:	e8 66 54 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c00141a7:	83 c4 10             	add    esp,0x10
c00141aa:	89 c3                	mov    ebx,eax
c00141ac:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00141b2:	0f 86 25 01 00 00    	jbe    c00142dd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00141b8:	c1 ee 0c             	shr    esi,0xc
c00141bb:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00141c2:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00141c6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00141ce:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00141d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00141d9:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00141e0:	29 ef                	sub    edi,ebp
c00141e2:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00141e6:	0f 83 f8 00 00 00    	jae    c00142e4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c00141ec:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00141f2:	76 05                	jbe    c00141f9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c00141f4:	bf 00 10 00 00       	mov    edi,0x1000
c00141f9:	83 ec 0c             	sub    esp,0xc
c00141fc:	31 d2                	xor    edx,edx
c00141fe:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014205:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014207:	8d 44 24 28          	lea    eax,[esp+0x28]
c001420b:	50                   	push   eax
c001420c:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014210:	56                   	push   esi
c0014211:	52                   	push   edx
c0014212:	57                   	push   edi
c0014213:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001421a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001421d:	83 c4 20             	add    esp,0x20
c0014220:	85 c0                	test   eax,eax
c0014222:	75 06                	jne    c001422a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0014224:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0014228:	74 13                	je     c001423d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c001422a:	83 ec 0c             	sub    esp,0xc
c001422d:	53                   	push   ebx
c001422e:	e8 f8 56 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0014233:	83 c4 10             	add    esp,0x10
c0014236:	31 c0                	xor    eax,eax
c0014238:	e9 7c 01 00 00       	jmp    c00143b9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001423d:	fa                   	cli    
c001423e:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0014244:	e8 76 3b ff ff       	call   c0007dbf <Phys::allocatePage()>
c0014249:	6a 07                	push   0x7
c001424b:	89 c7                	mov    edi,eax
c001424d:	53                   	push   ebx
c001424e:	50                   	push   eax
c001424f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014254:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014257:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001425d:	e8 be 5a ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014262:	83 c4 0c             	add    esp,0xc
c0014265:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001426c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014272:	6a 00                	push   0x0
c0014274:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014279:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001427c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014282:	e8 ff 58 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0014287:	58                   	pop    eax
c0014288:	5a                   	pop    edx
c0014289:	68 07 0c 00 00       	push   0xc07
c001428e:	55                   	push   ebp
c001428f:	57                   	push   edi
c0014290:	89 df                	mov    edi,ebx
c0014292:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014299:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001429f:	6a 00                	push   0x0
c00142a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00142a9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00142af:	e8 be 5c ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00142b4:	b9 00 10 00 00       	mov    ecx,0x1000
c00142b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00142bb:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00142c0:	83 c4 20             	add    esp,0x20
c00142c3:	48                   	dec    eax
c00142c4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00142c9:	85 c0                	test   eax,eax
c00142cb:	75 01                	jne    c00142ce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c00142cd:	fb                   	sti    
c00142ce:	81 c5 00 10 00 00    	add    ebp,0x1000
c00142d4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00142d8:	e9 f1 fe ff ff       	jmp    c00141ce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c00142dd:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00142e4:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00142eb:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00142f1:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00142f7:	0f 86 ae 00 00 00    	jbe    c00143ab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00142fd:	fa                   	cli    
c00142fe:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0014304:	c1 ee 0c             	shr    esi,0xc
c0014307:	51                   	push   ecx
c0014308:	31 ff                	xor    edi,edi
c001430a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014311:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014317:	6a 00                	push   0x0
c0014319:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001431e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014321:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014327:	e8 5a 58 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c001432c:	83 c4 10             	add    esp,0x10
c001432f:	e8 8b 3a ff ff       	call   c0007dbf <Phys::allocatePage()>
c0014334:	47                   	inc    edi
c0014335:	6a 07                	push   0x7
c0014337:	53                   	push   ebx
c0014338:	50                   	push   eax
c0014339:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001433d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014343:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014346:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c001434c:	e8 cf 59 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014351:	58                   	pop    eax
c0014352:	5a                   	pop    edx
c0014353:	68 07 0c 00 00       	push   0xc07
c0014358:	55                   	push   ebp
c0014359:	81 c5 00 10 00 00    	add    ebp,0x1000
c001435f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014363:	50                   	push   eax
c0014364:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001436b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014371:	6a 00                	push   0x0
c0014373:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014378:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001437b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014381:	e8 ec 5b ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014386:	83 c4 1c             	add    esp,0x1c
c0014389:	68 00 10 00 00       	push   0x1000
c001438e:	6a 00                	push   0x0
c0014390:	53                   	push   ebx
c0014391:	e8 5a c1 fe ff       	call   c00004f0 <memset>
c0014396:	83 c4 10             	add    esp,0x10
c0014399:	39 fe                	cmp    esi,edi
c001439b:	77 92                	ja     c001432f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c001439d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00143a2:	48                   	dec    eax
c00143a3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00143a8:	75 01                	jne    c00143ab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00143aa:	fb                   	sti    
c00143ab:	83 ec 0c             	sub    esp,0xc
c00143ae:	53                   	push   ebx
c00143af:	e8 77 55 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c00143b4:	83 c4 10             	add    esp,0x10
c00143b7:	b0 01                	mov    al,0x1
c00143b9:	81 c4 2c 10 00 00    	add    esp,0x102c
c00143bf:	5b                   	pop    ebx
c00143c0:	5e                   	pop    esi
c00143c1:	5f                   	pop    edi
c00143c2:	5d                   	pop    ebp
c00143c3:	c3                   	ret    

c00143c4 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00143c4:	55                   	push   ebp
c00143c5:	57                   	push   edi
c00143c6:	56                   	push   esi
c00143c7:	53                   	push   ebx
c00143c8:	83 ec 48             	sub    esp,0x48
c00143cb:	68 14 01 00 00       	push   0x114
c00143d0:	e8 e1 36 ff ff       	call   c0007ab6 <malloc>
c00143d5:	83 c4 0c             	add    esp,0xc
c00143d8:	89 c6                	mov    esi,eax
c00143da:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00143de:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00143e2:	50                   	push   eax
c00143e3:	e8 30 73 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c00143e8:	58                   	pop    eax
c00143e9:	5a                   	pop    edx
c00143ea:	6a 01                	push   0x1
c00143ec:	56                   	push   esi
c00143ed:	e8 e2 73 ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c00143f2:	83 c4 10             	add    esp,0x10
c00143f5:	85 c0                	test   eax,eax
c00143f7:	0f 85 43 01 00 00    	jne    c0014540 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00143fd:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014405:	83 ec 0c             	sub    esp,0xc
c0014408:	6a 34                	push   0x34
c001440a:	e8 a7 36 ff ff       	call   c0007ab6 <malloc>
c001440f:	89 c3                	mov    ebx,eax
c0014411:	58                   	pop    eax
c0014412:	8b 06                	mov    eax,DWORD PTR [esi]
c0014414:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0014418:	57                   	push   edi
c0014419:	53                   	push   ebx
c001441a:	6a 00                	push   0x0
c001441c:	6a 34                	push   0x34
c001441e:	56                   	push   esi
c001441f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014422:	83 c4 20             	add    esp,0x20
c0014425:	85 c0                	test   eax,eax
c0014427:	0f 85 13 01 00 00    	jne    c0014540 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001442d:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014433:	0f 85 07 01 00 00    	jne    c0014540 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014439:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001443c:	85 c0                	test   eax,eax
c001443e:	0f 84 fc 00 00 00    	je     c0014540 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014444:	31 d2                	xor    edx,edx
c0014446:	55                   	push   ebp
c0014447:	52                   	push   edx
c0014448:	50                   	push   eax
c0014449:	56                   	push   esi
c001444a:	e8 43 74 ff ff       	call   c000b892 <File::seek(unsigned long long)>
c001444f:	83 c4 10             	add    esp,0x10
c0014452:	85 c0                	test   eax,eax
c0014454:	0f 85 e6 00 00 00    	jne    c0014540 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001445a:	83 ec 0c             	sub    esp,0xc
c001445d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014460:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014464:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014468:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001446c:	0f af c2             	imul   eax,edx
c001446f:	50                   	push   eax
c0014470:	e8 41 36 ff ff       	call   c0007ab6 <malloc>
c0014475:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014477:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001447b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001447e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014482:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014486:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001448a:	0f af c2             	imul   eax,edx
c001448d:	99                   	cdq    
c001448e:	52                   	push   edx
c001448f:	50                   	push   eax
c0014490:	56                   	push   esi
c0014491:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014494:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014497:	83 c4 20             	add    esp,0x20
c001449a:	85 c0                	test   eax,eax
c001449c:	0f 84 9e 00 00 00    	je     c0014540 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00144a2:	31 d2                	xor    edx,edx
c00144a4:	51                   	push   ecx
c00144a5:	52                   	push   edx
c00144a6:	50                   	push   eax
c00144a7:	56                   	push   esi
c00144a8:	e8 e5 73 ff ff       	call   c000b892 <File::seek(unsigned long long)>
c00144ad:	83 c4 10             	add    esp,0x10
c00144b0:	85 c0                	test   eax,eax
c00144b2:	0f 85 88 00 00 00    	jne    c0014540 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00144b8:	83 ec 0c             	sub    esp,0xc
c00144bb:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00144bf:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00144c3:	31 ed                	xor    ebp,ebp
c00144c5:	0f af c2             	imul   eax,edx
c00144c8:	50                   	push   eax
c00144c9:	e8 e8 35 ff ff       	call   c0007ab6 <malloc>
c00144ce:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00144d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00144d4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00144d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144db:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00144df:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00144e3:	0f af c2             	imul   eax,edx
c00144e6:	99                   	cdq    
c00144e7:	52                   	push   edx
c00144e8:	50                   	push   eax
c00144e9:	56                   	push   esi
c00144ea:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00144ed:	83 c4 20             	add    esp,0x20
c00144f0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00144f8:	0f b7 fd             	movzx  edi,bp
c00144fb:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c00144ff:	73 7d                	jae    c001457e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0014501:	c1 e7 05             	shl    edi,0x5
c0014504:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014508:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001450b:	75 6b                	jne    c0014578 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c001450d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014510:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014514:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014517:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001451b:	52                   	push   edx
c001451c:	31 d2                	xor    edx,edx
c001451e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014521:	52                   	push   edx
c0014522:	50                   	push   eax
c0014523:	56                   	push   esi
c0014524:	e8 69 73 ff ff       	call   c000b892 <File::seek(unsigned long long)>
c0014529:	83 c4 10             	add    esp,0x10
c001452c:	85 c0                	test   eax,eax
c001452e:	74 17                	je     c0014547 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0014530:	83 ec 0c             	sub    esp,0xc
c0014533:	68 75 20 02 c0       	push   0xc0022075
c0014538:	e8 08 64 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001453d:	83 c4 10             	add    esp,0x10
c0014540:	31 c0                	xor    eax,eax
c0014542:	e9 87 00 00 00       	jmp    c00145ce <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0014547:	83 ec 0c             	sub    esp,0xc
c001454a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001454d:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014550:	50                   	push   eax
c0014551:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014555:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014559:	56                   	push   esi
c001455a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001455e:	e8 d3 fb ff ff       	call   c0014136 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014563:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014567:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001456b:	83 c4 20             	add    esp,0x20
c001456e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014572:	73 04                	jae    c0014578 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014574:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014578:	45                   	inc    ebp
c0014579:	e9 7a ff ff ff       	jmp    c00144f8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001457e:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0014582:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014586:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001458a:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0014590:	83 ec 0c             	sub    esp,0xc
c0014593:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014599:	25 00 f0 ff ff       	and    eax,0xfffff000
c001459e:	05 00 10 00 00       	add    eax,0x1000
c00145a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00145a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145aa:	e8 17 35 ff ff       	call   c0007ac6 <free>
c00145af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145b2:	e8 0f 35 ff ff       	call   c0007ac6 <free>
c00145b7:	58                   	pop    eax
c00145b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145bc:	e8 05 35 ff ff       	call   c0007ac6 <free>
c00145c1:	89 34 24             	mov    DWORD PTR [esp],esi
c00145c4:	e8 69 72 ff ff       	call   c000b832 <File::close()>
c00145c9:	83 c4 10             	add    esp,0x10
c00145cc:	b0 01                	mov    al,0x1
c00145ce:	83 c4 3c             	add    esp,0x3c
c00145d1:	5b                   	pop    ebx
c00145d2:	5e                   	pop    esi
c00145d3:	5f                   	pop    edi
c00145d4:	5d                   	pop    ebp
c00145d5:	c3                   	ret    

c00145d6 <Thr::runtimeReferenceHelper()>:
c00145d6:	83 ec 18             	sub    esp,0x18
c00145d9:	68 7d 20 02 c0       	push   0xc002207d
c00145de:	e8 62 63 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00145e3:	fa                   	cli    
c00145e4:	83 c4 10             	add    esp,0x10
c00145e7:	eb fe                	jmp    c00145e7 <Thr::runtimeReferenceHelper()+0x11>

c00145e9 <Thr::getAddressOfKernelSymbol(char const*)>:
c00145e9:	57                   	push   edi
c00145ea:	56                   	push   esi
c00145eb:	53                   	push   ebx
c00145ec:	31 db                	xor    ebx,ebx
c00145ee:	39 1d a0 96 02 c0    	cmp    DWORD PTR ds:0xc00296a0,ebx
c00145f4:	7e 3c                	jle    c0014632 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00145f6:	8b 34 9d 20 96 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd69e0]
c00145fd:	31 ff                	xor    edi,edi
c00145ff:	39 3c 9d 20 95 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6ae0],edi
c0014606:	7e 27                	jle    c001462f <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014608:	50                   	push   eax
c0014609:	50                   	push   eax
c001460a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001460e:	8b 06                	mov    eax,DWORD PTR [esi]
c0014610:	03 04 9d a0 95 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6a60]
c0014617:	50                   	push   eax
c0014618:	e8 33 c1 fe ff       	call   c0000750 <strcmp>
c001461d:	83 c4 10             	add    esp,0x10
c0014620:	85 c0                	test   eax,eax
c0014622:	75 05                	jne    c0014629 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014624:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014627:	eb 0b                	jmp    c0014634 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014629:	83 c6 10             	add    esi,0x10
c001462c:	47                   	inc    edi
c001462d:	eb d0                	jmp    c00145ff <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001462f:	43                   	inc    ebx
c0014630:	eb bc                	jmp    c00145ee <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014632:	31 c0                	xor    eax,eax
c0014634:	5b                   	pop    ebx
c0014635:	5e                   	pop    esi
c0014636:	5f                   	pop    edi
c0014637:	c3                   	ret    

c0014638 <Thr::loadKernelSymbolTable(char const*)>:
c0014638:	55                   	push   ebp
c0014639:	57                   	push   edi
c001463a:	56                   	push   esi
c001463b:	53                   	push   ebx
c001463c:	83 ec 68             	sub    esp,0x68
c001463f:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c0014645:	68 14 01 00 00       	push   0x114
c001464a:	e8 67 34 ff ff       	call   c0007ab6 <malloc>
c001464f:	83 c4 0c             	add    esp,0xc
c0014652:	89 c3                	mov    ebx,eax
c0014654:	56                   	push   esi
c0014655:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014659:	50                   	push   eax
c001465a:	e8 b9 70 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c001465f:	5e                   	pop    esi
c0014660:	5f                   	pop    edi
c0014661:	6a 01                	push   0x1
c0014663:	53                   	push   ebx
c0014664:	e8 6b 71 ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c0014669:	83 c4 10             	add    esp,0x10
c001466c:	85 c0                	test   eax,eax
c001466e:	74 0a                	je     c001467a <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014670:	83 ec 0c             	sub    esp,0xc
c0014673:	68 9f 20 02 c0       	push   0xc002209f
c0014678:	eb 34                	jmp    c00146ae <Thr::loadKernelSymbolTable(char const*)+0x76>
c001467a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014682:	83 ec 0c             	sub    esp,0xc
c0014685:	6a 34                	push   0x34
c0014687:	e8 2a 34 ff ff       	call   c0007ab6 <malloc>
c001468c:	59                   	pop    ecx
c001468d:	89 c7                	mov    edi,eax
c001468f:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014693:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014695:	56                   	push   esi
c0014696:	57                   	push   edi
c0014697:	6a 00                	push   0x0
c0014699:	6a 34                	push   0x34
c001469b:	53                   	push   ebx
c001469c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001469f:	83 c4 20             	add    esp,0x20
c00146a2:	85 c0                	test   eax,eax
c00146a4:	74 17                	je     c00146bd <Thr::loadKernelSymbolTable(char const*)+0x85>
c00146a6:	83 ec 0c             	sub    esp,0xc
c00146a9:	68 b6 20 02 c0       	push   0xc00220b6
c00146ae:	e8 9e cb ff ff       	call   c0011251 <KePanic(char const*)>
c00146b3:	83 c4 10             	add    esp,0x10
c00146b6:	31 c0                	xor    eax,eax
c00146b8:	e9 31 02 00 00       	jmp    c00148ee <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00146bd:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00146c3:	75 e1                	jne    c00146a6 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00146c5:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00146c8:	85 c0                	test   eax,eax
c00146ca:	74 da                	je     c00146a6 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00146cc:	52                   	push   edx
c00146cd:	31 d2                	xor    edx,edx
c00146cf:	52                   	push   edx
c00146d0:	50                   	push   eax
c00146d1:	53                   	push   ebx
c00146d2:	e8 bb 71 ff ff       	call   c000b892 <File::seek(unsigned long long)>
c00146d7:	83 c4 10             	add    esp,0x10
c00146da:	85 c0                	test   eax,eax
c00146dc:	75 c8                	jne    c00146a6 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00146de:	83 ec 0c             	sub    esp,0xc
c00146e1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00146e5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00146e9:	31 ed                	xor    ebp,ebp
c00146eb:	0f af c2             	imul   eax,edx
c00146ee:	50                   	push   eax
c00146ef:	e8 c2 33 ff ff       	call   c0007ab6 <malloc>
c00146f4:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00146f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00146fa:	89 34 24             	mov    DWORD PTR [esp],esi
c00146fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014701:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014705:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014709:	0f af c2             	imul   eax,edx
c001470c:	99                   	cdq    
c001470d:	52                   	push   edx
c001470e:	50                   	push   eax
c001470f:	53                   	push   ebx
c0014710:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014713:	83 c4 20             	add    esp,0x20
c0014716:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001471e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014726:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001472e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014736:	0f b7 f5             	movzx  esi,bp
c0014739:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c001473d:	0f 83 a7 00 00 00    	jae    c00147ea <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014743:	6b f6 28             	imul   esi,esi,0x28
c0014746:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001474a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001474d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014751:	50                   	push   eax
c0014752:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014756:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001475a:	8b 16                	mov    edx,DWORD PTR [esi]
c001475c:	6b c0 28             	imul   eax,eax,0x28
c001475f:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014763:	89 d0                	mov    eax,edx
c0014765:	31 d2                	xor    edx,edx
c0014767:	52                   	push   edx
c0014768:	50                   	push   eax
c0014769:	53                   	push   ebx
c001476a:	e8 23 71 ff ff       	call   c000b892 <File::seek(unsigned long long)>
c001476f:	83 c4 0c             	add    esp,0xc
c0014772:	6a 20                	push   0x20
c0014774:	6a 00                	push   0x0
c0014776:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001477a:	52                   	push   edx
c001477b:	e8 70 bd fe ff       	call   c00004f0 <memset>
c0014780:	58                   	pop    eax
c0014781:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014783:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014787:	51                   	push   ecx
c0014788:	8d 54 24 40          	lea    edx,[esp+0x40]
c001478c:	52                   	push   edx
c001478d:	6a 00                	push   0x0
c001478f:	6a 1f                	push   0x1f
c0014791:	53                   	push   ebx
c0014792:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014795:	83 c4 18             	add    esp,0x18
c0014798:	68 cd 20 02 c0       	push   0xc00220cd
c001479d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00147a1:	52                   	push   edx
c00147a2:	e8 a9 bf fe ff       	call   c0000750 <strcmp>
c00147a7:	83 c4 10             	add    esp,0x10
c00147aa:	85 c0                	test   eax,eax
c00147ac:	75 0f                	jne    c00147bd <Thr::loadKernelSymbolTable(char const*)+0x185>
c00147ae:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00147b1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00147b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00147b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00147bd:	50                   	push   eax
c00147be:	50                   	push   eax
c00147bf:	68 d5 20 02 c0       	push   0xc00220d5
c00147c4:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00147c8:	50                   	push   eax
c00147c9:	e8 82 bf fe ff       	call   c0000750 <strcmp>
c00147ce:	83 c4 10             	add    esp,0x10
c00147d1:	85 c0                	test   eax,eax
c00147d3:	75 0f                	jne    c00147e4 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00147d5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00147d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00147dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00147e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00147e4:	45                   	inc    ebp
c00147e5:	e9 4c ff ff ff       	jmp    c0014736 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00147ea:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00147ef:	75 10                	jne    c0014801 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00147f1:	83 ec 0c             	sub    esp,0xc
c00147f4:	68 dd 20 02 c0       	push   0xc00220dd
c00147f9:	e8 53 ca ff ff       	call   c0011251 <KePanic(char const*)>
c00147fe:	83 c4 10             	add    esp,0x10
c0014801:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014806:	75 10                	jne    c0014818 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014808:	83 ec 0c             	sub    esp,0xc
c001480b:	68 dd 20 02 c0       	push   0xc00220dd
c0014810:	e8 3c ca ff ff       	call   c0011251 <KePanic(char const*)>
c0014815:	83 c4 10             	add    esp,0x10
c0014818:	31 d2                	xor    edx,edx
c001481a:	50                   	push   eax
c001481b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001481f:	52                   	push   edx
c0014820:	50                   	push   eax
c0014821:	53                   	push   ebx
c0014822:	e8 6b 70 ff ff       	call   c000b892 <File::seek(unsigned long long)>
c0014827:	5a                   	pop    edx
c0014828:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001482c:	e8 85 32 ff ff       	call   c0007ab6 <malloc>
c0014831:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014835:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014839:	31 c9                	xor    ecx,ecx
c001483b:	5e                   	pop    esi
c001483c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001483e:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014842:	55                   	push   ebp
c0014843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014847:	51                   	push   ecx
c0014848:	52                   	push   edx
c0014849:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001484d:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014851:	53                   	push   ebx
c0014852:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014855:	83 c4 14             	add    esp,0x14
c0014858:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001485c:	e8 55 32 ff ff       	call   c0007ab6 <malloc>
c0014861:	89 c6                	mov    esi,eax
c0014863:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014865:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014868:	56                   	push   esi
c0014869:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001486d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014871:	51                   	push   ecx
c0014872:	52                   	push   edx
c0014873:	53                   	push   ebx
c0014874:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014877:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001487b:	8b 15 a0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296a0
c0014881:	83 c4 1c             	add    esp,0x1c
c0014884:	c1 e8 04             	shr    eax,0x4
c0014887:	89 04 95 20 95 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6ae0],eax
c001488e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014892:	31 d2                	xor    edx,edx
c0014894:	52                   	push   edx
c0014895:	50                   	push   eax
c0014896:	53                   	push   ebx
c0014897:	e8 f6 6f ff ff       	call   c000b892 <File::seek(unsigned long long)>
c001489c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001489e:	31 d2                	xor    edx,edx
c00148a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00148a3:	56                   	push   esi
c00148a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00148a8:	52                   	push   edx
c00148a9:	50                   	push   eax
c00148aa:	53                   	push   ebx
c00148ab:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00148ae:	83 c4 14             	add    esp,0x14
c00148b1:	53                   	push   ebx
c00148b2:	e8 7b 6f ff ff       	call   c000b832 <File::close()>
c00148b7:	5d                   	pop    ebp
c00148b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00148bc:	e8 05 32 ff ff       	call   c0007ac6 <free>
c00148c1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00148c4:	e8 fd 31 ff ff       	call   c0007ac6 <free>
c00148c9:	a1 a0 96 02 c0       	mov    eax,ds:0xc00296a0
c00148ce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00148d2:	8d 50 01             	lea    edx,[eax+0x1]
c00148d5:	89 0c 85 20 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd69e0],ecx
c00148dc:	89 34 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],esi
c00148e3:	89 15 a0 96 02 c0    	mov    DWORD PTR ds:0xc00296a0,edx
c00148e9:	83 c4 10             	add    esp,0x10
c00148ec:	b0 01                	mov    al,0x1
c00148ee:	83 c4 5c             	add    esp,0x5c
c00148f1:	5b                   	pop    ebx
c00148f2:	5e                   	pop    esi
c00148f3:	5f                   	pop    edi
c00148f4:	5d                   	pop    ebp
c00148f5:	c3                   	ret    

c00148f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00148f6:	55                   	push   ebp
c00148f7:	57                   	push   edi
c00148f8:	56                   	push   esi
c00148f9:	53                   	push   ebx
c00148fa:	81 ec 68 03 00 00    	sub    esp,0x368
c0014900:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014907:	8b 1d f0 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296f0
c001490d:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014911:	68 14 01 00 00       	push   0x114
c0014916:	e8 9b 31 ff ff       	call   c0007ab6 <malloc>
c001491b:	83 c4 0c             	add    esp,0xc
c001491e:	89 c5                	mov    ebp,eax
c0014920:	53                   	push   ebx
c0014921:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014928:	50                   	push   eax
c0014929:	e8 ea 6d ff ff       	call   c000b718 <File::File(char const*, Process*)>
c001492e:	5e                   	pop    esi
c001492f:	5f                   	pop    edi
c0014930:	6a 01                	push   0x1
c0014932:	55                   	push   ebp
c0014933:	e8 9c 6e ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c0014938:	83 c4 10             	add    esp,0x10
c001493b:	85 c0                	test   eax,eax
c001493d:	0f 85 aa 06 00 00    	jne    c0014fed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014943:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001494b:	83 ec 0c             	sub    esp,0xc
c001494e:	6a 34                	push   0x34
c0014950:	e8 61 31 ff ff       	call   c0007ab6 <malloc>
c0014955:	5b                   	pop    ebx
c0014956:	89 c7                	mov    edi,eax
c0014958:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001495c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001495f:	53                   	push   ebx
c0014960:	57                   	push   edi
c0014961:	6a 00                	push   0x0
c0014963:	6a 34                	push   0x34
c0014965:	55                   	push   ebp
c0014966:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014969:	83 c4 20             	add    esp,0x20
c001496c:	85 c0                	test   eax,eax
c001496e:	0f 85 79 06 00 00    	jne    c0014fed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014974:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001497a:	0f 85 6d 06 00 00    	jne    c0014fed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014980:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014983:	85 c0                	test   eax,eax
c0014985:	0f 84 62 06 00 00    	je     c0014fed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001498b:	31 d2                	xor    edx,edx
c001498d:	51                   	push   ecx
c001498e:	52                   	push   edx
c001498f:	50                   	push   eax
c0014990:	55                   	push   ebp
c0014991:	e8 fc 6e ff ff       	call   c000b892 <File::seek(unsigned long long)>
c0014996:	83 c4 10             	add    esp,0x10
c0014999:	85 c0                	test   eax,eax
c001499b:	0f 85 4c 06 00 00    	jne    c0014fed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00149a1:	83 ec 0c             	sub    esp,0xc
c00149a4:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00149a7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00149ab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00149af:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00149b3:	0f af c2             	imul   eax,edx
c00149b6:	50                   	push   eax
c00149b7:	e8 fa 30 ff ff       	call   c0007ab6 <malloc>
c00149bc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00149bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00149c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00149c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00149ca:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00149ce:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00149d2:	0f af c2             	imul   eax,edx
c00149d5:	99                   	cdq    
c00149d6:	52                   	push   edx
c00149d7:	50                   	push   eax
c00149d8:	55                   	push   ebp
c00149d9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00149dc:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00149df:	83 c4 20             	add    esp,0x20
c00149e2:	85 c0                	test   eax,eax
c00149e4:	0f 84 03 06 00 00    	je     c0014fed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00149ea:	52                   	push   edx
c00149eb:	31 d2                	xor    edx,edx
c00149ed:	52                   	push   edx
c00149ee:	50                   	push   eax
c00149ef:	55                   	push   ebp
c00149f0:	e8 9d 6e ff ff       	call   c000b892 <File::seek(unsigned long long)>
c00149f5:	83 c4 10             	add    esp,0x10
c00149f8:	85 c0                	test   eax,eax
c00149fa:	0f 85 ed 05 00 00    	jne    c0014fed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014a00:	83 ec 0c             	sub    esp,0xc
c0014a03:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014a07:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014a0b:	31 f6                	xor    esi,esi
c0014a0d:	0f af c2             	imul   eax,edx
c0014a10:	50                   	push   eax
c0014a11:	e8 a0 30 ff ff       	call   c0007ab6 <malloc>
c0014a16:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014a19:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014a1d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014a24:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014a28:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014a2c:	0f af c2             	imul   eax,edx
c0014a2f:	99                   	cdq    
c0014a30:	52                   	push   edx
c0014a31:	50                   	push   eax
c0014a32:	55                   	push   ebp
c0014a33:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a36:	83 c4 20             	add    esp,0x20
c0014a39:	0f b7 de             	movzx  ebx,si
c0014a3c:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0014a40:	0f 83 87 00 00 00    	jae    c0014acd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014a46:	c1 e3 05             	shl    ebx,0x5
c0014a49:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014a4d:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0014a50:	75 75                	jne    c0014ac7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0014a52:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0014a55:	31 d2                	xor    edx,edx
c0014a57:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014a5b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014a5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a62:	50                   	push   eax
c0014a63:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014a66:	52                   	push   edx
c0014a67:	50                   	push   eax
c0014a68:	55                   	push   ebp
c0014a69:	e8 24 6e ff ff       	call   c000b892 <File::seek(unsigned long long)>
c0014a6e:	83 c4 10             	add    esp,0x10
c0014a71:	85 c0                	test   eax,eax
c0014a73:	0f 85 74 05 00 00    	jne    c0014fed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014a79:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014a80:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014a83:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0014a87:	31 d2                	xor    edx,edx
c0014a89:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014a8d:	83 ec 0c             	sub    esp,0xc
c0014a90:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a94:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014a9b:	50                   	push   eax
c0014a9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014aa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014aa4:	52                   	push   edx
c0014aa5:	50                   	push   eax
c0014aa6:	55                   	push   ebp
c0014aa7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014aaa:	83 c4 1c             	add    esp,0x1c
c0014aad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014ab0:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0014ab3:	50                   	push   eax
c0014ab4:	6a 00                	push   0x0
c0014ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014aba:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0014abe:	50                   	push   eax
c0014abf:	e8 2c ba fe ff       	call   c00004f0 <memset>
c0014ac4:	83 c4 10             	add    esp,0x10
c0014ac7:	46                   	inc    esi
c0014ac8:	e9 6c ff ff ff       	jmp    c0014a39 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0014acd:	53                   	push   ebx
c0014ace:	31 db                	xor    ebx,ebx
c0014ad0:	68 00 01 00 00       	push   0x100
c0014ad5:	6a 00                	push   0x0
c0014ad7:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014adb:	50                   	push   eax
c0014adc:	e8 0f ba fe ff       	call   c00004f0 <memset>
c0014ae1:	83 c4 0c             	add    esp,0xc
c0014ae4:	68 00 01 00 00       	push   0x100
c0014ae9:	6a 00                	push   0x0
c0014aeb:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014af2:	50                   	push   eax
c0014af3:	e8 f8 b9 fe ff       	call   c00004f0 <memset>
c0014af8:	83 c4 10             	add    esp,0x10
c0014afb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014b03:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014b0b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014b13:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014b1b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014b23:	0f b7 f3             	movzx  esi,bx
c0014b26:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0014b2a:	0f 83 2d 01 00 00    	jae    c0014c5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0014b30:	6b f6 28             	imul   esi,esi,0x28
c0014b33:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014b37:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014b3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b3e:	52                   	push   edx
c0014b3f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014b43:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0014b47:	8b 06                	mov    eax,DWORD PTR [esi]
c0014b49:	6b d2 28             	imul   edx,edx,0x28
c0014b4c:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014b50:	31 d2                	xor    edx,edx
c0014b52:	52                   	push   edx
c0014b53:	50                   	push   eax
c0014b54:	55                   	push   ebp
c0014b55:	e8 38 6d ff ff       	call   c000b892 <File::seek(unsigned long long)>
c0014b5a:	83 c4 0c             	add    esp,0xc
c0014b5d:	6a 20                	push   0x20
c0014b5f:	6a 00                	push   0x0
c0014b61:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014b68:	51                   	push   ecx
c0014b69:	e8 82 b9 fe ff       	call   c00004f0 <memset>
c0014b6e:	59                   	pop    ecx
c0014b6f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014b72:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014b76:	52                   	push   edx
c0014b77:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014b7e:	51                   	push   ecx
c0014b7f:	6a 00                	push   0x0
c0014b81:	6a 1f                	push   0x1f
c0014b83:	55                   	push   ebp
c0014b84:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014b87:	83 c4 1c             	add    esp,0x1c
c0014b8a:	6a 09                	push   0x9
c0014b8c:	68 f7 20 02 c0       	push   0xc00220f7
c0014b91:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014b98:	51                   	push   ecx
c0014b99:	e8 e2 b7 fe ff       	call   c0000380 <memcmp>
c0014b9e:	83 c4 10             	add    esp,0x10
c0014ba1:	85 c0                	test   eax,eax
c0014ba3:	75 21                	jne    c0014bc6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0014ba5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ba9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014bad:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0014bb1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014bb5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014bb8:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014bbf:	89 d0                	mov    eax,edx
c0014bc1:	40                   	inc    eax
c0014bc2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014bc6:	50                   	push   eax
c0014bc7:	6a 09                	push   0x9
c0014bc9:	68 01 21 02 c0       	push   0xc0022101
c0014bce:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014bd5:	50                   	push   eax
c0014bd6:	e8 a5 b7 fe ff       	call   c0000380 <memcmp>
c0014bdb:	83 c4 10             	add    esp,0x10
c0014bde:	85 c0                	test   eax,eax
c0014be0:	75 21                	jne    c0014c03 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0014be2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014be6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014bea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014bee:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0014bf2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014bf5:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014bfc:	89 d0                	mov    eax,edx
c0014bfe:	40                   	inc    eax
c0014bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c03:	50                   	push   eax
c0014c04:	50                   	push   eax
c0014c05:	68 cd 20 02 c0       	push   0xc00220cd
c0014c0a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014c11:	50                   	push   eax
c0014c12:	e8 39 bb fe ff       	call   c0000750 <strcmp>
c0014c17:	83 c4 10             	add    esp,0x10
c0014c1a:	85 c0                	test   eax,eax
c0014c1c:	75 0f                	jne    c0014c2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0014c1e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014c21:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014c29:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014c2d:	50                   	push   eax
c0014c2e:	50                   	push   eax
c0014c2f:	68 d5 20 02 c0       	push   0xc00220d5
c0014c34:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014c3b:	50                   	push   eax
c0014c3c:	e8 0f bb fe ff       	call   c0000750 <strcmp>
c0014c41:	83 c4 10             	add    esp,0x10
c0014c44:	85 c0                	test   eax,eax
c0014c46:	75 0f                	jne    c0014c57 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0014c48:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014c4b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014c53:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014c57:	43                   	inc    ebx
c0014c58:	e9 c6 fe ff ff       	jmp    c0014b23 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0014c5d:	31 d2                	xor    edx,edx
c0014c5f:	50                   	push   eax
c0014c60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c64:	52                   	push   edx
c0014c65:	50                   	push   eax
c0014c66:	55                   	push   ebp
c0014c67:	e8 26 6c ff ff       	call   c000b892 <File::seek(unsigned long long)>
c0014c6c:	58                   	pop    eax
c0014c6d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014c71:	e8 40 2e ff ff       	call   c0007ab6 <malloc>
c0014c76:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014c79:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014c7d:	31 d2                	xor    edx,edx
c0014c7f:	58                   	pop    eax
c0014c80:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014c84:	53                   	push   ebx
c0014c85:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0014c89:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014c8d:	52                   	push   edx
c0014c8e:	50                   	push   eax
c0014c8f:	55                   	push   ebp
c0014c90:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c93:	83 c4 14             	add    esp,0x14
c0014c96:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014c9a:	e8 17 2e ff ff       	call   c0007ab6 <malloc>
c0014c9f:	31 d2                	xor    edx,edx
c0014ca1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014ca5:	83 c4 0c             	add    esp,0xc
c0014ca8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014cac:	52                   	push   edx
c0014cad:	50                   	push   eax
c0014cae:	55                   	push   ebp
c0014caf:	e8 de 6b ff ff       	call   c000b892 <File::seek(unsigned long long)>
c0014cb4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014cb7:	31 d2                	xor    edx,edx
c0014cb9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014cbc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014cc0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014cc4:	52                   	push   edx
c0014cc5:	50                   	push   eax
c0014cc6:	55                   	push   ebp
c0014cc7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014cca:	83 c4 20             	add    esp,0x20
c0014ccd:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0014cd2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014cda:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014cde:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014ce2:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0014ce6:	0f 84 05 03 00 00    	je     c0014ff1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0014cec:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0014cf3:	31 d2                	xor    edx,edx
c0014cf5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014cf9:	c1 e8 03             	shr    eax,0x3
c0014cfc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0014d00:	51                   	push   ecx
c0014d01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d05:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014d09:	52                   	push   edx
c0014d0a:	50                   	push   eax
c0014d0b:	55                   	push   ebp
c0014d0c:	e8 81 6b ff ff       	call   c000b892 <File::seek(unsigned long long)>
c0014d11:	5b                   	pop    ebx
c0014d12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d16:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014d1d:	e8 94 2d ff ff       	call   c0007ab6 <malloc>
c0014d22:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014d25:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014d29:	31 d2                	xor    edx,edx
c0014d2b:	5e                   	pop    esi
c0014d2c:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014d30:	50                   	push   eax
c0014d31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d35:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014d39:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014d40:	52                   	push   edx
c0014d41:	50                   	push   eax
c0014d42:	55                   	push   ebp
c0014d43:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d46:	83 c4 20             	add    esp,0x20
c0014d49:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014d51:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014d55:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0014d59:	0f 8d 76 02 00 00    	jge    c0014fd5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0014d5f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014d63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014d67:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0014d6c:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0014d6f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014d73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014d77:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0014d7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d7f:	c1 e8 08             	shr    eax,0x8
c0014d82:	89 c6                	mov    esi,eax
c0014d84:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014d88:	c1 e6 04             	shl    esi,0x4
c0014d8b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014d8f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0014d92:	85 db                	test   ebx,ebx
c0014d94:	0f 85 b3 00 00 00    	jne    c0014e4d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014d9a:	83 ec 0c             	sub    esp,0xc
c0014d9d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014da1:	03 06                	add    eax,DWORD PTR [esi]
c0014da3:	50                   	push   eax
c0014da4:	e8 40 f8 ff ff       	call   c00145e9 <Thr::getAddressOfKernelSymbol(char const*)>
c0014da9:	83 c4 10             	add    esp,0x10
c0014dac:	89 c3                	mov    ebx,eax
c0014dae:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0014db3:	85 c0                	test   eax,eax
c0014db5:	0f 85 92 00 00 00    	jne    c0014e4d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014dbb:	83 ec 0c             	sub    esp,0xc
c0014dbe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014dc2:	03 06                	add    eax,DWORD PTR [esi]
c0014dc4:	50                   	push   eax
c0014dc5:	e8 72 c6 ff ff       	call   c001143c <KeResolveCompatibilitySymbol(char*)>
c0014dca:	83 c4 10             	add    esp,0x10
c0014dcd:	89 c3                	mov    ebx,eax
c0014dcf:	85 c0                	test   eax,eax
c0014dd1:	75 7a                	jne    c0014e4d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014dd3:	51                   	push   ecx
c0014dd4:	51                   	push   ecx
c0014dd5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014dd9:	03 06                	add    eax,DWORD PTR [esi]
c0014ddb:	50                   	push   eax
c0014ddc:	68 0b 21 02 c0       	push   0xc002210b
c0014de1:	e8 5f 5b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014de6:	58                   	pop    eax
c0014de7:	5a                   	pop    edx
c0014de8:	68 25 21 02 c0       	push   0xc0022125
c0014ded:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014df4:	50                   	push   eax
c0014df5:	e8 46 b8 fe ff       	call   c0000640 <strcpy>
c0014dfa:	59                   	pop    ecx
c0014dfb:	58                   	pop    eax
c0014dfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e00:	03 06                	add    eax,DWORD PTR [esi]
c0014e02:	50                   	push   eax
c0014e03:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014e0a:	50                   	push   eax
c0014e0b:	e8 30 ba fe ff       	call   c0000840 <strcat>
c0014e10:	58                   	pop    eax
c0014e11:	5a                   	pop    edx
c0014e12:	68 bb 21 02 c0       	push   0xc00221bb
c0014e17:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014e1e:	50                   	push   eax
c0014e1f:	e8 1c ba fe ff       	call   c0000840 <strcat>
c0014e24:	83 c4 10             	add    esp,0x10
c0014e27:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014e2c:	0f 84 5d 01 00 00    	je     c0014f8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014e32:	83 ec 0c             	sub    esp,0xc
c0014e35:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014e3c:	50                   	push   eax
c0014e3d:	e8 0f c4 ff ff       	call   c0011251 <KePanic(char const*)>
c0014e42:	83 c4 10             	add    esp,0x10
c0014e45:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0014e49:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0014e4d:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0014e52:	83 f8 01             	cmp    eax,0x1
c0014e55:	0f 85 8f 00 00 00    	jne    c0014eea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0014e5b:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0014e62:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0014e66:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014e6a:	01 ce                	add    esi,ecx
c0014e6c:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014e74:	0f 94 c0             	sete   al
c0014e77:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014e7f:	0f 94 c2             	sete   dl
c0014e82:	09 c2                	or     edx,eax
c0014e84:	8b 06                	mov    eax,DWORD PTR [esi]
c0014e86:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014e8b:	0f b6 d2             	movzx  edx,dl
c0014e8e:	74 41                	je     c0014ed1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0014e90:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0014e93:	85 d2                	test   edx,edx
c0014e95:	75 15                	jne    c0014eac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0014e97:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014e9b:	66 83 f8 0c          	cmp    ax,0xc
c0014e9f:	76 05                	jbe    c0014ea6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0014ea1:	b8 0c 00 00 00       	mov    eax,0xc
c0014ea6:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014eaa:	76 37                	jbe    c0014ee3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014eac:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0014eb0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014eb5:	0f 84 d4 00 00 00    	je     c0014f8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014ebb:	83 ec 0c             	sub    esp,0xc
c0014ebe:	68 3c 21 02 c0       	push   0xc002213c
c0014ec3:	e8 89 c3 ff ff       	call   c0011251 <KePanic(char const*)>
c0014ec8:	83 c4 10             	add    esp,0x10
c0014ecb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014ecf:	eb 12                	jmp    c0014ee3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014ed1:	01 c1                	add    ecx,eax
c0014ed3:	85 d2                	test   edx,edx
c0014ed5:	75 0c                	jne    c0014ee3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014ed7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014edb:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014edf:	77 02                	ja     c0014ee3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014ee1:	01 d9                	add    ecx,ebx
c0014ee3:	89 0e                	mov    DWORD PTR [esi],ecx
c0014ee5:	e9 e2 00 00 00       	jmp    c0014fcc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014eea:	83 f8 02             	cmp    eax,0x2
c0014eed:	75 77                	jne    c0014f66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0014eef:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0014ef6:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0014efa:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0014efe:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014f06:	74 21                	je     c0014f29 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0014f08:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014f10:	74 17                	je     c0014f29 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0014f12:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0014f16:	b8 0a 00 00 00       	mov    eax,0xa
c0014f1b:	83 fa 0e             	cmp    edx,0xe
c0014f1e:	77 03                	ja     c0014f23 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0014f20:	8d 42 fc             	lea    eax,[edx-0x4]
c0014f23:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014f27:	76 17                	jbe    c0014f40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0014f29:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014f2e:	74 5f                	je     c0014f8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014f30:	83 ec 0c             	sub    esp,0xc
c0014f33:	68 58 21 02 c0       	push   0xc0022158
c0014f38:	e8 14 c3 ff ff       	call   c0011251 <KePanic(char const*)>
c0014f3d:	83 c4 10             	add    esp,0x10
c0014f40:	8b 06                	mov    eax,DWORD PTR [esi]
c0014f42:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014f47:	74 13                	je     c0014f5c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0014f49:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014f4d:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0014f54:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0014f58:	01 d0                	add    eax,edx
c0014f5a:	eb 04                	jmp    c0014f60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0014f5c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0014f60:	01 c3                	add    ebx,eax
c0014f62:	89 1e                	mov    DWORD PTR [esi],ebx
c0014f64:	eb 66                	jmp    c0014fcc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014f66:	52                   	push   edx
c0014f67:	52                   	push   edx
c0014f68:	50                   	push   eax
c0014f69:	68 74 21 02 c0       	push   0xc0022174
c0014f6e:	e8 d2 59 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014f73:	83 c4 10             	add    esp,0x10
c0014f76:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014f7b:	74 12                	je     c0014f8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014f7d:	83 ec 0c             	sub    esp,0xc
c0014f80:	68 7f 21 02 c0       	push   0xc002217f
c0014f85:	e8 c7 c2 ff ff       	call   c0011251 <KePanic(char const*)>
c0014f8a:	83 c4 10             	add    esp,0x10
c0014f8d:	eb 3d                	jmp    c0014fcc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014f8f:	83 ec 0c             	sub    esp,0xc
c0014f92:	55                   	push   ebp
c0014f93:	e8 9a 68 ff ff       	call   c000b832 <File::close()>
c0014f98:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014f9b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014f9e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014fa1:	59                   	pop    ecx
c0014fa2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014fa6:	e8 1b 2b ff ff       	call   c0007ac6 <free>
c0014fab:	5b                   	pop    ebx
c0014fac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014fb0:	e8 11 2b ff ff       	call   c0007ac6 <free>
c0014fb5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014fb8:	e8 09 2b ff ff       	call   c0007ac6 <free>
c0014fbd:	5e                   	pop    esi
c0014fbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014fc2:	e8 ff 2a ff ff       	call   c0007ac6 <free>
c0014fc7:	83 c4 10             	add    esp,0x10
c0014fca:	eb 21                	jmp    c0014fed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014fcc:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0014fd0:	e9 7c fd ff ff       	jmp    c0014d51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0014fd5:	83 ec 0c             	sub    esp,0xc
c0014fd8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014fdc:	e8 e5 2a ff ff       	call   c0007ac6 <free>
c0014fe1:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0014fe5:	83 c4 10             	add    esp,0x10
c0014fe8:	e9 f1 fc ff ff       	jmp    c0014cde <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0014fed:	31 c0                	xor    eax,eax
c0014fef:	eb 33                	jmp    c0015024 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c0014ff1:	83 ec 0c             	sub    esp,0xc
c0014ff4:	55                   	push   ebp
c0014ff5:	e8 38 68 ff ff       	call   c000b832 <File::close()>
c0014ffa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014ffd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015000:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015003:	58                   	pop    eax
c0015004:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015008:	e8 b9 2a ff ff       	call   c0007ac6 <free>
c001500d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015010:	e8 b1 2a ff ff       	call   c0007ac6 <free>
c0015015:	5a                   	pop    edx
c0015016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001501a:	e8 a7 2a ff ff       	call   c0007ac6 <free>
c001501f:	83 c4 10             	add    esp,0x10
c0015022:	b0 01                	mov    al,0x1
c0015024:	81 c4 5c 03 00 00    	add    esp,0x35c
c001502a:	5b                   	pop    ebx
c001502b:	5e                   	pop    esi
c001502c:	5f                   	pop    edi
c001502d:	5d                   	pop    ebp
c001502e:	c3                   	ret    

c001502f <Thr::getDriverBaseFromAddress(unsigned long)>:
c001502f:	56                   	push   esi
c0015030:	31 d2                	xor    edx,edx
c0015032:	53                   	push   ebx
c0015033:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c0015039:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001503d:	39 d3                	cmp    ebx,edx
c001503f:	7e 1b                	jle    c001505c <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0015041:	8b 04 95 20 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6ee0]
c0015048:	39 c8                	cmp    eax,ecx
c001504a:	77 0d                	ja     c0015059 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001504c:	8b 34 95 20 8f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd70e0]
c0015053:	01 c6                	add    esi,eax
c0015055:	39 ce                	cmp    esi,ecx
c0015057:	77 05                	ja     c001505e <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0015059:	42                   	inc    edx
c001505a:	eb e1                	jmp    c001503d <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001505c:	31 c0                	xor    eax,eax
c001505e:	5b                   	pop    ebx
c001505f:	5e                   	pop    esi
c0015060:	c3                   	ret    

c0015061 <Thr::getDriverNameFromAddress(unsigned long)>:
c0015061:	53                   	push   ebx
c0015062:	31 c0                	xor    eax,eax
c0015064:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015068:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c001506e:	39 c3                	cmp    ebx,eax
c0015070:	7e 22                	jle    c0015094 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0015072:	8b 14 85 20 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6ee0]
c0015079:	39 ca                	cmp    edx,ecx
c001507b:	77 14                	ja     c0015091 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001507d:	03 14 85 20 8f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd70e0]
c0015084:	39 ca                	cmp    edx,ecx
c0015086:	76 09                	jbe    c0015091 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015088:	8b 04 85 20 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ce0]
c001508f:	eb 05                	jmp    c0015096 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0015091:	40                   	inc    eax
c0015092:	eb da                	jmp    c001506e <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015094:	31 c0                	xor    eax,eax
c0015096:	5b                   	pop    ebx
c0015097:	c3                   	ret    

c0015098 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0015098:	53                   	push   ebx
c0015099:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001509d:	53                   	push   ebx
c001509e:	e8 8c ff ff ff       	call   c001502f <Thr::getDriverBaseFromAddress(unsigned long)>
c00150a3:	5a                   	pop    edx
c00150a4:	31 d2                	xor    edx,edx
c00150a6:	85 c0                	test   eax,eax
c00150a8:	74 04                	je     c00150ae <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00150aa:	89 da                	mov    edx,ebx
c00150ac:	29 c2                	sub    edx,eax
c00150ae:	89 d0                	mov    eax,edx
c00150b0:	5b                   	pop    ebx
c00150b1:	c3                   	ret    

c00150b2 <Thr::loadDLL(char const*, bool)>:
c00150b2:	55                   	push   ebp
c00150b3:	57                   	push   edi
c00150b4:	56                   	push   esi
c00150b5:	53                   	push   ebx
c00150b6:	81 ec 34 01 00 00    	sub    esp,0x134
c00150bc:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00150c3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00150ca:	56                   	push   esi
c00150cb:	68 97 21 02 c0       	push   0xc0022197
c00150d0:	e8 70 58 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00150d5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00150dc:	e8 d5 29 ff ff       	call   c0007ab6 <malloc>
c00150e1:	83 c4 0c             	add    esp,0xc
c00150e4:	89 c3                	mov    ebx,eax
c00150e6:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00150ec:	56                   	push   esi
c00150ed:	50                   	push   eax
c00150ee:	e8 25 66 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c00150f3:	83 c4 10             	add    esp,0x10
c00150f6:	85 db                	test   ebx,ebx
c00150f8:	75 3c                	jne    c0015136 <Thr::loadDLL(char const*, bool)+0x84>
c00150fa:	89 f8                	mov    eax,edi
c00150fc:	84 c0                	test   al,al
c00150fe:	0f 84 d2 01 00 00    	je     c00152d6 <Thr::loadDLL(char const*, bool)+0x224>
c0015104:	55                   	push   ebp
c0015105:	55                   	push   ebp
c0015106:	68 a8 21 02 c0       	push   0xc00221a8
c001510b:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001510f:	55                   	push   ebp
c0015110:	e8 2b b5 fe ff       	call   c0000640 <strcpy>
c0015115:	58                   	pop    eax
c0015116:	5a                   	pop    edx
c0015117:	56                   	push   esi
c0015118:	55                   	push   ebp
c0015119:	e8 22 b7 fe ff       	call   c0000840 <strcat>
c001511e:	59                   	pop    ecx
c001511f:	58                   	pop    eax
c0015120:	68 bb 21 02 c0       	push   0xc00221bb
c0015125:	55                   	push   ebp
c0015126:	e8 15 b7 fe ff       	call   c0000840 <strcat>
c001512b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001512e:	e8 1e c1 ff ff       	call   c0011251 <KePanic(char const*)>
c0015133:	83 c4 10             	add    esp,0x10
c0015136:	51                   	push   ecx
c0015137:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001513b:	50                   	push   eax
c001513c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015140:	50                   	push   eax
c0015141:	53                   	push   ebx
c0015142:	e8 8f 69 ff ff       	call   c000bad6 <File::stat(unsigned long long*, bool*)>
c0015147:	83 c4 10             	add    esp,0x10
c001514a:	85 db                	test   ebx,ebx
c001514c:	74 0c                	je     c001515a <Thr::loadDLL(char const*, bool)+0xa8>
c001514e:	83 ec 0c             	sub    esp,0xc
c0015151:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015153:	53                   	push   ebx
c0015154:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015157:	83 c4 10             	add    esp,0x10
c001515a:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001515f:	75 0a                	jne    c001516b <Thr::loadDLL(char const*, bool)+0xb9>
c0015161:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015165:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0015169:	75 3c                	jne    c00151a7 <Thr::loadDLL(char const*, bool)+0xf5>
c001516b:	89 f8                	mov    eax,edi
c001516d:	84 c0                	test   al,al
c001516f:	0f 84 49 01 00 00    	je     c00152be <Thr::loadDLL(char const*, bool)+0x20c>
c0015175:	51                   	push   ecx
c0015176:	51                   	push   ecx
c0015177:	68 a8 21 02 c0       	push   0xc00221a8
c001517c:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015180:	53                   	push   ebx
c0015181:	e8 ba b4 fe ff       	call   c0000640 <strcpy>
c0015186:	5d                   	pop    ebp
c0015187:	58                   	pop    eax
c0015188:	56                   	push   esi
c0015189:	53                   	push   ebx
c001518a:	e8 b1 b6 fe ff       	call   c0000840 <strcat>
c001518f:	58                   	pop    eax
c0015190:	5a                   	pop    edx
c0015191:	68 bb 21 02 c0       	push   0xc00221bb
c0015196:	53                   	push   ebx
c0015197:	e8 a4 b6 fe ff       	call   c0000840 <strcat>
c001519c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001519f:	e8 ad c0 ff ff       	call   c0011251 <KePanic(char const*)>
c00151a4:	83 c4 10             	add    esp,0x10
c00151a7:	52                   	push   edx
c00151a8:	6a 03                	push   0x3
c00151aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151ae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00151b2:	05 ff 0f 00 00       	add    eax,0xfff
c00151b7:	83 d2 00             	adc    edx,0x0
c00151ba:	0f ac d0 0c          	shrd   eax,edx,0xc
c00151be:	50                   	push   eax
c00151bf:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c00151c5:	e8 5a 4c ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c00151ca:	59                   	pop    ecx
c00151cb:	89 c3                	mov    ebx,eax
c00151cd:	5d                   	pop    ebp
c00151ce:	50                   	push   eax
c00151cf:	68 12 08 02 c0       	push   0xc0020812
c00151d4:	e8 6c 57 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00151d9:	89 34 24             	mov    DWORD PTR [esp],esi
c00151dc:	e8 8f b3 fe ff       	call   c0000570 <strlen>
c00151e1:	8b 2d 00 8f 02 c0    	mov    ebp,DWORD PTR ds:0xc0028f00
c00151e7:	40                   	inc    eax
c00151e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00151eb:	e8 c6 28 ff ff       	call   c0007ab6 <malloc>
c00151f0:	89 04 ad 20 93 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6ce0],eax
c00151f7:	58                   	pop    eax
c00151f8:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c00151fd:	5a                   	pop    edx
c00151fe:	56                   	push   esi
c00151ff:	ff 34 85 20 93 02 c0 	push   DWORD PTR [eax*4-0x3ffd6ce0]
c0015206:	e8 35 b4 fe ff       	call   c0000640 <strcpy>
c001520b:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c0015210:	8d 50 01             	lea    edx,[eax+0x1]
c0015213:	89 1c 85 20 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ee0],ebx
c001521a:	89 15 00 8f 02 c0    	mov    DWORD PTR ds:0xc0028f00,edx
c0015220:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015224:	83 c4 0c             	add    esp,0xc
c0015227:	89 14 85 20 8f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd70e0],edx
c001522e:	6a 01                	push   0x1
c0015230:	53                   	push   ebx
c0015231:	56                   	push   esi
c0015232:	e8 bf f6 ff ff       	call   c00148f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0015237:	83 c4 10             	add    esp,0x10
c001523a:	0f b6 c0             	movzx  eax,al
c001523d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015241:	85 c0                	test   eax,eax
c0015243:	0f 85 89 00 00 00    	jne    c00152d2 <Thr::loadDLL(char const*, bool)+0x220>
c0015249:	89 f8                	mov    eax,edi
c001524b:	84 c0                	test   al,al
c001524d:	74 73                	je     c00152c2 <Thr::loadDLL(char const*, bool)+0x210>
c001524f:	83 ec 0c             	sub    esp,0xc
c0015252:	68 bd 21 02 c0       	push   0xc00221bd
c0015257:	e8 f5 bf ff ff       	call   c0011251 <KePanic(char const*)>
c001525c:	83 c4 10             	add    esp,0x10
c001525f:	eb 61                	jmp    c00152c2 <Thr::loadDLL(char const*, bool)+0x210>
c0015261:	50                   	push   eax
c0015262:	50                   	push   eax
c0015263:	89 e8                	mov    eax,ebp
c0015265:	c1 e0 0c             	shl    eax,0xc
c0015268:	01 d8                	add    eax,ebx
c001526a:	50                   	push   eax
c001526b:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0015271:	e8 96 46 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0015276:	83 c4 10             	add    esp,0x10
c0015279:	8b 00                	mov    eax,DWORD PTR [eax]
c001527b:	a8 60                	test   al,0x60
c001527d:	75 11                	jne    c0015290 <Thr::loadDLL(char const*, bool)+0x1de>
c001527f:	83 ec 0c             	sub    esp,0xc
c0015282:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015287:	50                   	push   eax
c0015288:	e8 c9 2a ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c001528d:	83 c4 10             	add    esp,0x10
c0015290:	45                   	inc    ebp
c0015291:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015295:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015299:	05 ff 0f 00 00       	add    eax,0xfff
c001529e:	bf 00 00 00 00       	mov    edi,0x0
c00152a3:	83 d2 00             	adc    edx,0x0
c00152a6:	0f ac d0 0c          	shrd   eax,edx,0xc
c00152aa:	c1 ea 0c             	shr    edx,0xc
c00152ad:	39 c5                	cmp    ebp,eax
c00152af:	89 d1                	mov    ecx,edx
c00152b1:	89 f8                	mov    eax,edi
c00152b3:	19 c8                	sbb    eax,ecx
c00152b5:	72 aa                	jb     c0015261 <Thr::loadDLL(char const*, bool)+0x1af>
c00152b7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00152bc:	75 18                	jne    c00152d6 <Thr::loadDLL(char const*, bool)+0x224>
c00152be:	31 db                	xor    ebx,ebx
c00152c0:	eb 14                	jmp    c00152d6 <Thr::loadDLL(char const*, bool)+0x224>
c00152c2:	83 ec 0c             	sub    esp,0xc
c00152c5:	68 dc 21 02 c0       	push   0xc00221dc
c00152ca:	e8 82 bf ff ff       	call   c0011251 <KePanic(char const*)>
c00152cf:	83 c4 10             	add    esp,0x10
c00152d2:	31 ed                	xor    ebp,ebp
c00152d4:	eb bb                	jmp    c0015291 <Thr::loadDLL(char const*, bool)+0x1df>
c00152d6:	81 c4 2c 01 00 00    	add    esp,0x12c
c00152dc:	89 d8                	mov    eax,ebx
c00152de:	5b                   	pop    ebx
c00152df:	5e                   	pop    esi
c00152e0:	5f                   	pop    edi
c00152e1:	5d                   	pop    ebp
c00152e2:	c3                   	ret    

c00152e3 <Thr::executeDLL(unsigned long, void*)>:
c00152e3:	56                   	push   esi
c00152e4:	53                   	push   ebx
c00152e5:	52                   	push   edx
c00152e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00152ea:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00152ee:	85 db                	test   ebx,ebx
c00152f0:	75 10                	jne    c0015302 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00152f2:	83 ec 0c             	sub    esp,0xc
c00152f5:	68 f8 21 02 c0       	push   0xc00221f8
c00152fa:	e8 52 bf ff ff       	call   c0011251 <KePanic(char const*)>
c00152ff:	83 c4 10             	add    esp,0x10
c0015302:	50                   	push   eax
c0015303:	50                   	push   eax
c0015304:	53                   	push   ebx
c0015305:	68 22 22 02 c0       	push   0xc0022222
c001530a:	e8 36 56 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001530f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015313:	89 d8                	mov    eax,ebx
c0015315:	83 c4 14             	add    esp,0x14
c0015318:	5b                   	pop    ebx
c0015319:	5e                   	pop    esi
c001531a:	ff e0                	jmp    eax

c001531c <userModeEntryPoint(void*)>:
c001531c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015321:	83 e8 01             	sub    eax,0x1
c0015324:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015329:	75 01                	jne    c001532c <userModeEntryPoint(void*)+0x10>
c001532b:	fb                   	sti    
c001532c:	fb                   	sti    
c001532d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015332:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015335:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001533b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001533f:	e9 fb ae fe ff       	jmp    c000023f <goToUsermode>

c0015344 <changeTSS>:
c0015344:	83 ec 14             	sub    esp,0x14
c0015347:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001534c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001534f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015354:	c1 e2 15             	shl    edx,0x15
c0015357:	29 d0                	sub    eax,edx
c0015359:	50                   	push   eax
c001535a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001535f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015365:	05 7c 11 00 00       	add    eax,0x117c
c001536a:	50                   	push   eax
c001536b:	e8 e4 3b ff ff       	call   c0008f54 <TSS::setESP(unsigned long)>
c0015370:	83 c4 1c             	add    esp,0x1c
c0015373:	c3                   	ret    

c0015374 <switchToThread(ThreadControlBlock*)>:
c0015374:	57                   	push   edi
c0015375:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c001537b:	56                   	push   esi
c001537c:	85 c9                	test   ecx,ecx
c001537e:	53                   	push   ebx
c001537f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015383:	0f 85 8b 00 00 00    	jne    c0015414 <switchToThread(ThreadControlBlock*)+0xa0>
c0015389:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c001538d:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015393:	74 7b                	je     c0015410 <switchToThread(ThreadControlBlock*)+0x9c>
c0015395:	b8 00 04 00 00       	mov    eax,0x400
c001539a:	29 d0                	sub    eax,edx
c001539c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c001539f:	d1 f8                	sar    eax,1
c00153a1:	01 d0                	add    eax,edx
c00153a3:	90                   	nop
c00153a4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00153a7:	e8 1e 28 00 00       	call   c0017bca <HalQueryPerformanceCounter()>
c00153ac:	a3 08 97 02 c0       	mov    ds:0xc0029708,eax
c00153b1:	89 15 0c 97 02 c0    	mov    DWORD PTR ds:0xc002970c,edx
c00153b7:	89 c6                	mov    esi,eax
c00153b9:	89 d7                	mov    edi,edx
c00153bb:	2b 35 f8 96 02 c0    	sub    esi,DWORD PTR ds:0xc00296f8
c00153c1:	a3 f8 96 02 c0       	mov    ds:0xc00296f8,eax
c00153c6:	1b 3d fc 96 02 c0    	sbb    edi,DWORD PTR ds:0xc00296fc
c00153cc:	89 35 00 97 02 c0    	mov    DWORD PTR ds:0xc0029700,esi
c00153d2:	89 3d 04 97 02 c0    	mov    DWORD PTR ds:0xc0029704,edi
c00153d8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00153de:	89 15 fc 96 02 c0    	mov    DWORD PTR ds:0xc00296fc,edx
c00153e4:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00153e7:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00153ea:	01 c6                	add    esi,eax
c00153ec:	11 d7                	adc    edi,edx
c00153ee:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00153f1:	83 ec 0c             	sub    esp,0xc
c00153f4:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00153f7:	53                   	push   ebx
c00153f8:	e8 7a ae fe ff       	call   c0000277 <switchToThreadASM>
c00153fd:	0f 20 c0             	mov    eax,cr0
c0015400:	83 c8 08             	or     eax,0x8
c0015403:	0f 22 c0             	mov    cr0,eax
c0015406:	83 c4 10             	add    esp,0x10
c0015409:	5b                   	pop    ebx
c001540a:	5e                   	pop    esi
c001540b:	5f                   	pop    edi
c001540c:	c3                   	ret    
c001540d:	8d 76 00             	lea    esi,[esi+0x0]
c0015410:	31 c0                	xor    eax,eax
c0015412:	eb 90                	jmp    c00153a4 <switchToThread(ThreadControlBlock*)+0x30>
c0015414:	5b                   	pop    ebx
c0015415:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c001541f:	5e                   	pop    esi
c0015420:	5f                   	pop    edi
c0015421:	c3                   	ret    
c0015422:	66 90                	xchg   ax,ax

c0015424 <Process::addArgs(char**)>:
c0015424:	57                   	push   edi
c0015425:	56                   	push   esi
c0015426:	53                   	push   ebx
c0015427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001542b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001542f:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0015439:	85 ff                	test   edi,edi
c001543b:	74 4f                	je     c001548c <Process::addArgs(char**)+0x68>
c001543d:	8b 07                	mov    eax,DWORD PTR [edi]
c001543f:	85 c0                	test   eax,eax
c0015441:	74 49                	je     c001548c <Process::addArgs(char**)+0x68>
c0015443:	31 db                	xor    ebx,ebx
c0015445:	8d 76 00             	lea    esi,[esi+0x0]
c0015448:	83 ec 0c             	sub    esp,0xc
c001544b:	50                   	push   eax
c001544c:	e8 1f b1 fe ff       	call   c0000570 <strlen>
c0015451:	83 c0 01             	add    eax,0x1
c0015454:	89 04 24             	mov    DWORD PTR [esp],eax
c0015457:	e8 5a 26 ff ff       	call   c0007ab6 <malloc>
c001545c:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0015463:	5a                   	pop    edx
c0015464:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0015467:	59                   	pop    ecx
c0015468:	83 c3 01             	add    ebx,0x1
c001546b:	52                   	push   edx
c001546c:	50                   	push   eax
c001546d:	e8 ce b1 fe ff       	call   c0000640 <strcpy>
c0015472:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0015478:	83 c4 10             	add    esp,0x10
c001547b:	83 c1 01             	add    ecx,0x1
c001547e:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0015484:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0015487:	85 c0                	test   eax,eax
c0015489:	75 bd                	jne    c0015448 <Process::addArgs(char**)+0x24>
c001548b:	90                   	nop
c001548c:	5b                   	pop    ebx
c001548d:	5e                   	pop    esi
c001548e:	5f                   	pop    edi
c001548f:	c3                   	ret    

c0015490 <Process::Process(char const*, Process*, char**)>:
c0015490:	56                   	push   esi
c0015491:	53                   	push   ebx
c0015492:	83 ec 14             	sub    esp,0x14
c0015495:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015499:	05 0c 02 00 00       	add    eax,0x20c
c001549e:	bb 07 00 00 00       	mov    ebx,0x7
c00154a3:	89 c6                	mov    esi,eax
c00154a5:	8d 76 00             	lea    esi,[esi+0x0]
c00154a8:	85 db                	test   ebx,ebx
c00154aa:	78 14                	js     c00154c0 <Process::Process(char const*, Process*, char**)+0x30>
c00154ac:	83 ec 0c             	sub    esp,0xc
c00154af:	56                   	push   esi
c00154b0:	e8 e3 a5 00 00       	call   c001fa98 <ThreadControlBlock::ThreadControlBlock()>
c00154b5:	83 c4 10             	add    esp,0x10
c00154b8:	83 c6 5f             	add    esi,0x5f
c00154bb:	83 eb 01             	sub    ebx,0x1
c00154be:	eb e8                	jmp    c00154a8 <Process::Process(char const*, Process*, char**)+0x18>
c00154c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154c4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00154cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154cf:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00154d6:	83 ec 0c             	sub    esp,0xc
c00154d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00154dd:	e8 64 bb ff ff       	call   c0011046 <KeNewProcessEnv(Process*)>
c00154e2:	83 c4 10             	add    esp,0x10
c00154e5:	89 c2                	mov    edx,eax
c00154e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154eb:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00154f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154f5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00154fe:	a1 40 34 02 c0       	mov    eax,ds:0xc0023440
c0015503:	8d 50 01             	lea    edx,[eax+0x1]
c0015506:	89 15 40 34 02 c0    	mov    DWORD PTR ds:0xc0023440,edx
c001550c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015510:	89 02                	mov    DWORD PTR [edx],eax
c0015512:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001551a:	83 ec 0c             	sub    esp,0xc
c001551d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015521:	e8 90 25 ff ff       	call   c0007ab6 <malloc>
c0015526:	83 c4 10             	add    esp,0x10
c0015529:	89 c3                	mov    ebx,eax
c001552b:	83 ec 08             	sub    esp,0x8
c001552e:	6a 00                	push   0x0
c0015530:	53                   	push   ebx
c0015531:	e8 32 4b ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015536:	83 c4 10             	add    esp,0x10
c0015539:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001553d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015543:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015547:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015551:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015555:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015559:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001555f:	e8 06 c1 ff ff       	call   c001166a <KeInitSignals()>
c0015564:	89 c2                	mov    edx,eax
c0015566:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001556a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015570:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015574:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001557a:	85 c0                	test   eax,eax
c001557c:	74 42                	je     c00155c0 <Process::Process(char const*, Process*, char**)+0x130>
c001557e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015582:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015588:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001558e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015592:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015598:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001559c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00155a2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00155a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155ac:	05 0c 01 00 00       	add    eax,0x10c
c00155b1:	83 ec 08             	sub    esp,0x8
c00155b4:	52                   	push   edx
c00155b5:	50                   	push   eax
c00155b6:	e8 85 b0 fe ff       	call   c0000640 <strcpy>
c00155bb:	83 c4 10             	add    esp,0x10
c00155be:	eb 64                	jmp    c0015624 <Process::Process(char const*, Process*, char**)+0x194>
c00155c0:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c00155c8:	83 ec 0c             	sub    esp,0xc
c00155cb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00155cf:	e8 e2 24 ff ff       	call   c0007ab6 <malloc>
c00155d4:	83 c4 10             	add    esp,0x10
c00155d7:	89 c3                	mov    ebx,eax
c00155d9:	83 ec 08             	sub    esp,0x8
c00155dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155e0:	53                   	push   ebx
c00155e1:	e8 80 36 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c00155e6:	83 c4 10             	add    esp,0x10
c00155e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155ed:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00155f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00155fd:	83 ec 0c             	sub    esp,0xc
c0015600:	50                   	push   eax
c0015601:	e8 fe 2e ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015606:	83 c4 10             	add    esp,0x10
c0015609:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001560d:	05 0c 01 00 00       	add    eax,0x10c
c0015612:	83 ec 08             	sub    esp,0x8
c0015615:	68 41 22 02 c0       	push   0xc0022241
c001561a:	50                   	push   eax
c001561b:	e8 20 b0 fe ff       	call   c0000640 <strcpy>
c0015620:	83 c4 10             	add    esp,0x10
c0015623:	90                   	nop
c0015624:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015628:	83 c0 0c             	add    eax,0xc
c001562b:	83 ec 08             	sub    esp,0x8
c001562e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015632:	50                   	push   eax
c0015633:	e8 08 b0 fe ff       	call   c0000640 <strcpy>
c0015638:	83 c4 10             	add    esp,0x10
c001563b:	83 ec 08             	sub    esp,0x8
c001563e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015642:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015646:	e8 d9 fd ff ff       	call   c0015424 <Process::addArgs(char**)>
c001564b:	83 c4 10             	add    esp,0x10
c001564e:	83 ec 08             	sub    esp,0x8
c0015651:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015655:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015659:	e8 66 ed ff ff       	call   c00143c4 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001565e:	83 c4 10             	add    esp,0x10
c0015661:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015665:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015669:	83 f0 01             	xor    eax,0x1
c001566c:	88 c2                	mov    dl,al
c001566e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015672:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015678:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001567d:	83 ec 04             	sub    esp,0x4
c0015680:	50                   	push   eax
c0015681:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015685:	68 98 22 02 c0       	push   0xc0022298
c001568a:	e8 b6 52 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001568f:	83 c4 10             	add    esp,0x10
c0015692:	90                   	nop
c0015693:	83 c4 14             	add    esp,0x14
c0015696:	5b                   	pop    ebx
c0015697:	5e                   	pop    esi
c0015698:	c3                   	ret    
c0015699:	90                   	nop
c001569a:	66 90                	xchg   ax,ax

c001569c <Process::Process(bool, char const*, Process*, char**)>:
c001569c:	56                   	push   esi
c001569d:	53                   	push   ebx
c001569e:	83 ec 24             	sub    esp,0x24
c00156a1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00156a5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00156a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156ad:	05 0c 02 00 00       	add    eax,0x20c
c00156b2:	bb 07 00 00 00       	mov    ebx,0x7
c00156b7:	89 c6                	mov    esi,eax
c00156b9:	8d 76 00             	lea    esi,[esi+0x0]
c00156bc:	85 db                	test   ebx,ebx
c00156be:	78 14                	js     c00156d4 <Process::Process(bool, char const*, Process*, char**)+0x38>
c00156c0:	83 ec 0c             	sub    esp,0xc
c00156c3:	56                   	push   esi
c00156c4:	e8 cf a3 00 00       	call   c001fa98 <ThreadControlBlock::ThreadControlBlock()>
c00156c9:	83 c4 10             	add    esp,0x10
c00156cc:	83 c6 5f             	add    esi,0x5f
c00156cf:	83 eb 01             	sub    ebx,0x1
c00156d2:	eb e8                	jmp    c00156bc <Process::Process(bool, char const*, Process*, char**)+0x20>
c00156d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156d8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00156df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156e3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00156ea:	83 ec 0c             	sub    esp,0xc
c00156ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00156f1:	e8 50 b9 ff ff       	call   c0011046 <KeNewProcessEnv(Process*)>
c00156f6:	83 c4 10             	add    esp,0x10
c00156f9:	89 c2                	mov    edx,eax
c00156fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156ff:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015705:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015709:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015712:	a1 40 34 02 c0       	mov    eax,ds:0xc0023440
c0015717:	8d 50 01             	lea    edx,[eax+0x1]
c001571a:	89 15 40 34 02 c0    	mov    DWORD PTR ds:0xc0023440,edx
c0015720:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015724:	89 02                	mov    DWORD PTR [edx],eax
c0015726:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001572e:	83 ec 0c             	sub    esp,0xc
c0015731:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015735:	e8 7c 23 ff ff       	call   c0007ab6 <malloc>
c001573a:	83 c4 10             	add    esp,0x10
c001573d:	89 c3                	mov    ebx,eax
c001573f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015744:	83 ec 08             	sub    esp,0x8
c0015747:	50                   	push   eax
c0015748:	53                   	push   ebx
c0015749:	e8 1a 49 ff ff       	call   c000a068 <VAS::VAS(bool)>
c001574e:	83 c4 10             	add    esp,0x10
c0015751:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015755:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001575b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001575f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015769:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001576d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015771:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015777:	e8 ee be ff ff       	call   c001166a <KeInitSignals()>
c001577c:	89 c2                	mov    edx,eax
c001577e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015782:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015788:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001578c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015792:	85 c0                	test   eax,eax
c0015794:	74 42                	je     c00157d8 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015796:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001579a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00157a0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00157a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157aa:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00157b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157b4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00157ba:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00157c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157c4:	05 0c 01 00 00       	add    eax,0x10c
c00157c9:	83 ec 08             	sub    esp,0x8
c00157cc:	52                   	push   edx
c00157cd:	50                   	push   eax
c00157ce:	e8 6d ae fe ff       	call   c0000640 <strcpy>
c00157d3:	83 c4 10             	add    esp,0x10
c00157d6:	eb 64                	jmp    c001583c <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c00157d8:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c00157e0:	83 ec 0c             	sub    esp,0xc
c00157e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00157e7:	e8 ca 22 ff ff       	call   c0007ab6 <malloc>
c00157ec:	83 c4 10             	add    esp,0x10
c00157ef:	89 c3                	mov    ebx,eax
c00157f1:	83 ec 08             	sub    esp,0x8
c00157f4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00157f8:	53                   	push   ebx
c00157f9:	e8 68 34 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c00157fe:	83 c4 10             	add    esp,0x10
c0015801:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015805:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001580b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001580f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015815:	83 ec 0c             	sub    esp,0xc
c0015818:	50                   	push   eax
c0015819:	e8 e6 2c ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c001581e:	83 c4 10             	add    esp,0x10
c0015821:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015825:	05 0c 01 00 00       	add    eax,0x10c
c001582a:	83 ec 08             	sub    esp,0x8
c001582d:	68 41 22 02 c0       	push   0xc0022241
c0015832:	50                   	push   eax
c0015833:	e8 08 ae fe ff       	call   c0000640 <strcpy>
c0015838:	83 c4 10             	add    esp,0x10
c001583b:	90                   	nop
c001583c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015840:	83 c0 0c             	add    eax,0xc
c0015843:	83 ec 08             	sub    esp,0x8
c0015846:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001584a:	50                   	push   eax
c001584b:	e8 f0 ad fe ff       	call   c0000640 <strcpy>
c0015850:	83 c4 10             	add    esp,0x10
c0015853:	83 ec 08             	sub    esp,0x8
c0015856:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001585a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001585e:	e8 c1 fb ff ff       	call   c0015424 <Process::addArgs(char**)>
c0015863:	83 c4 10             	add    esp,0x10
c0015866:	90                   	nop
c0015867:	83 c4 24             	add    esp,0x24
c001586a:	5b                   	pop    ebx
c001586b:	5e                   	pop    esi
c001586c:	c3                   	ret    
c001586d:	8d 76 00             	lea    esi,[esi+0x0]

c0015870 <taskStartupFunction>:
c0015870:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015875:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015878:	c3                   	ret    
c0015879:	90                   	nop
c001587a:	66 90                	xchg   ax,ax

c001587c <Semaphore::Semaphore(int)>:
c001587c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015880:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015884:	89 10                	mov    DWORD PTR [eax],edx
c0015886:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001588a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015891:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015895:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001589c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00158a0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00158a7:	90                   	nop
c00158a8:	c3                   	ret    
c00158a9:	90                   	nop
c00158aa:	66 90                	xchg   ax,ax

c00158ac <Mutex::Mutex()>:
c00158ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00158b0:	6a 01                	push   0x1
c00158b2:	50                   	push   eax
c00158b3:	e8 c4 ff ff ff       	call   c001587c <Semaphore::Semaphore(int)>
c00158b8:	83 c4 08             	add    esp,0x8
c00158bb:	90                   	nop
c00158bc:	c3                   	ret    
c00158bd:	90                   	nop
c00158be:	66 90                	xchg   ax,ax

c00158c0 <Process::createThread(void (*)(void*), void*, int)>:
c00158c0:	57                   	push   edi
c00158c1:	31 c9                	xor    ecx,ecx
c00158c3:	56                   	push   esi
c00158c4:	53                   	push   ebx
c00158c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158c9:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00158d0:	89 f2                	mov    edx,esi
c00158d2:	66 90                	xchg   ax,ax
c00158d4:	0f b7 c2             	movzx  eax,dx
c00158d7:	80 e2 01             	and    dl,0x1
c00158da:	74 14                	je     c00158f0 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00158dc:	d1 f8                	sar    eax,1
c00158de:	83 c1 01             	add    ecx,0x1
c00158e1:	89 c2                	mov    edx,eax
c00158e3:	83 f9 10             	cmp    ecx,0x10
c00158e6:	75 ec                	jne    c00158d4 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00158e8:	31 db                	xor    ebx,ebx
c00158ea:	89 d8                	mov    eax,ebx
c00158ec:	5b                   	pop    ebx
c00158ed:	5e                   	pop    esi
c00158ee:	5f                   	pop    edi
c00158ef:	c3                   	ret    
c00158f0:	b8 01 00 00 00       	mov    eax,0x1
c00158f5:	d3 e0                	shl    eax,cl
c00158f7:	09 c6                	or     esi,eax
c00158f9:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00158fc:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015903:	01 c0                	add    eax,eax
c0015905:	01 c8                	add    eax,ecx
c0015907:	8d 04 80             	lea    eax,[eax+eax*4]
c001590a:	01 d8                	add    eax,ebx
c001590c:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015913:	75 0b                	jne    c0015920 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015915:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001591f:	90                   	nop
c0015920:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015926:	83 ec 0c             	sub    esp,0xc
c0015929:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001592c:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001592f:	01 c0                	add    eax,eax
c0015931:	01 c8                	add    eax,ecx
c0015933:	8d 3c 80             	lea    edi,[eax+eax*4]
c0015936:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015939:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001593f:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0015945:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015949:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001594f:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015955:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c001595b:	89 ca                	mov    edx,ecx
c001595d:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015964:	f7 da                	neg    edx
c0015966:	c1 e2 15             	shl    edx,0x15
c0015969:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001596f:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015975:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015979:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015983:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015989:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001598d:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015993:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001599d:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00159a7:	68 00 01 00 00       	push   0x100
c00159ac:	e8 05 21 ff ff       	call   c0007ab6 <malloc>
c00159b1:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00159b4:	58                   	pop    eax
c00159b5:	5a                   	pop    edx
c00159b6:	53                   	push   ebx
c00159b7:	68 e4 96 02 c0       	push   0xc00296e4
c00159bc:	e8 6f 9e 00 00       	call   c001f830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00159c1:	83 c4 10             	add    esp,0x10
c00159c4:	89 d8                	mov    eax,ebx
c00159c6:	5b                   	pop    ebx
c00159c7:	5e                   	pop    esi
c00159c8:	5f                   	pop    edi
c00159c9:	c3                   	ret    
c00159ca:	66 90                	xchg   ax,ax

c00159cc <Process::createUserThread()>:
c00159cc:	83 ec 0c             	sub    esp,0xc
c00159cf:	68 80 00 00 00       	push   0x80
c00159d4:	6a 00                	push   0x0
c00159d6:	68 1c 53 01 c0       	push   0xc001531c
c00159db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00159df:	50                   	push   eax
c00159e0:	e8 db fe ff ff       	call   c00158c0 <Process::createThread(void (*)(void*), void*, int)>
c00159e5:	83 c4 1c             	add    esp,0x1c
c00159e8:	c3                   	ret    
c00159e9:	8d 76 00             	lea    esi,[esi+0x0]

c00159ec <setupMultitasking(void (*)())>:
c00159ec:	56                   	push   esi
c00159ed:	53                   	push   ebx
c00159ee:	83 ec 04             	sub    esp,0x4
c00159f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00159f5:	eb 11                	jmp    c0015a08 <setupMultitasking(void (*)())+0x1c>
c00159f7:	90                   	nop
c00159f8:	83 ec 0c             	sub    esp,0xc
c00159fb:	68 e4 96 02 c0       	push   0xc00296e4
c0015a00:	e8 6f 9d 00 00       	call   c001f774 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015a05:	83 c4 10             	add    esp,0x10
c0015a08:	83 ec 0c             	sub    esp,0xc
c0015a0b:	68 e4 96 02 c0       	push   0xc00296e4
c0015a10:	e8 3b 9d 00 00       	call   c001f750 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015a15:	83 c4 10             	add    esp,0x10
c0015a18:	84 c0                	test   al,al
c0015a1a:	74 dc                	je     c00159f8 <setupMultitasking(void (*)())+0xc>
c0015a1c:	83 ec 0c             	sub    esp,0xc
c0015a1f:	68 24 07 00 00       	push   0x724
c0015a24:	e8 8d 20 ff ff       	call   c0007ab6 <malloc>
c0015a29:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015a30:	89 c3                	mov    ebx,eax
c0015a32:	6a 00                	push   0x0
c0015a34:	68 45 22 02 c0       	push   0xc0022245
c0015a39:	6a 01                	push   0x1
c0015a3b:	50                   	push   eax
c0015a3c:	e8 5b fc ff ff       	call   c001569c <Process::Process(bool, char const*, Process*, char**)>
c0015a41:	83 c4 14             	add    esp,0x14
c0015a44:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015a4a:	89 1d f0 96 02 c0    	mov    DWORD PTR ds:0xc00296f0,ebx
c0015a50:	50                   	push   eax
c0015a51:	e8 03 2d ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0015a56:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015a5d:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015a67:	83 c8 01             	or     eax,0x1
c0015a6a:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015a71:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015a77:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015a7a:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015a84:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015a8a:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015a90:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015a9a:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015aa4:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015aae:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015ab4:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015abe:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015ac4:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015ace:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015ad5:	e8 dc 1f ff ff       	call   c0007ab6 <malloc>
c0015ada:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015ae0:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015ae6:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015aec:	5a                   	pop    edx
c0015aed:	59                   	pop    ecx
c0015aee:	68 41 22 02 c0       	push   0xc0022241
c0015af3:	50                   	push   eax
c0015af4:	e8 47 ab fe ff       	call   c0000640 <strcpy>
c0015af9:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015b00:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015b04:	83 c4 14             	add    esp,0x14
c0015b07:	5b                   	pop    ebx
c0015b08:	5e                   	pop    esi
c0015b09:	e9 5b a7 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015b0e:	66 90                	xchg   ax,ax

c0015b10 <schedule()>:
c0015b10:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015b16:	85 d2                	test   edx,edx
c0015b18:	74 0e                	je     c0015b28 <schedule()+0x18>
c0015b1a:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c0015b24:	c3                   	ret    
c0015b25:	8d 76 00             	lea    esi,[esi+0x0]
c0015b28:	53                   	push   ebx
c0015b29:	83 ec 14             	sub    esp,0x14
c0015b2c:	68 e4 96 02 c0       	push   0xc00296e4
c0015b31:	e8 1a 9c 00 00       	call   c001f750 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015b36:	83 c4 10             	add    esp,0x10
c0015b39:	84 c0                	test   al,al
c0015b3b:	75 3f                	jne    c0015b7c <schedule()+0x6c>
c0015b3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b42:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015b45:	83 fa 01             	cmp    edx,0x1
c0015b48:	74 3a                	je     c0015b84 <schedule()+0x74>
c0015b4a:	66 90                	xchg   ax,ax
c0015b4c:	83 ec 0c             	sub    esp,0xc
c0015b4f:	68 e4 96 02 c0       	push   0xc00296e4
c0015b54:	e8 13 9c 00 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015b59:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0015b60:	89 c3                	mov    ebx,eax
c0015b62:	e8 0d 9c 00 00       	call   c001f774 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015b67:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015b6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b71:	e8 fe f7 ff ff       	call   c0015374 <switchToThread(ThreadControlBlock*)>
c0015b76:	83 c4 10             	add    esp,0x10
c0015b79:	8d 76 00             	lea    esi,[esi+0x0]
c0015b7c:	83 c4 08             	add    esp,0x8
c0015b7f:	5b                   	pop    ebx
c0015b80:	c3                   	ret    
c0015b81:	8d 76 00             	lea    esi,[esi+0x0]
c0015b84:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015b8b:	83 ec 08             	sub    esp,0x8
c0015b8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b93:	50                   	push   eax
c0015b94:	68 e4 96 02 c0       	push   0xc00296e4
c0015b99:	e8 92 9c 00 00       	call   c001f830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015b9e:	83 c4 10             	add    esp,0x10
c0015ba1:	eb a9                	jmp    c0015b4c <schedule()+0x3c>
c0015ba3:	90                   	nop

c0015ba4 <Semaphore::tryAcquire()>:
c0015ba4:	53                   	push   ebx
c0015ba5:	83 ec 08             	sub    esp,0x8
c0015ba8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015bac:	fa                   	cli    
c0015bad:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015bb2:	8d 50 01             	lea    edx,[eax+0x1]
c0015bb5:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015bbb:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015bc1:	8d 5a 01             	lea    ebx,[edx+0x1]
c0015bc4:	89 1d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ebx
c0015bca:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015bcd:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015bcf:	7c 33                	jl     c0015c04 <Semaphore::tryAcquire()+0x60>
c0015bd1:	89 15 c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,edx
c0015bd7:	85 d2                	test   edx,edx
c0015bd9:	75 0d                	jne    c0015be8 <Semaphore::tryAcquire()+0x44>
c0015bdb:	8b 15 c0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c0
c0015be1:	85 d2                	test   edx,edx
c0015be3:	75 6f                	jne    c0015c54 <Semaphore::tryAcquire()+0xb0>
c0015be5:	8d 76 00             	lea    esi,[esi+0x0]
c0015be8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015bed:	85 c0                	test   eax,eax
c0015bef:	74 0b                	je     c0015bfc <Semaphore::tryAcquire()+0x58>
c0015bf1:	8d 76 00             	lea    esi,[esi+0x0]
c0015bf4:	31 c0                	xor    eax,eax
c0015bf6:	83 c4 08             	add    esp,0x8
c0015bf9:	5b                   	pop    ebx
c0015bfa:	c3                   	ret    
c0015bfb:	90                   	nop
c0015bfc:	fb                   	sti    
c0015bfd:	83 c4 08             	add    esp,0x8
c0015c00:	5b                   	pop    ebx
c0015c01:	c3                   	ret    
c0015c02:	66 90                	xchg   ax,ax
c0015c04:	83 c3 01             	add    ebx,0x1
c0015c07:	89 15 c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,edx
c0015c0d:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015c10:	85 d2                	test   edx,edx
c0015c12:	75 24                	jne    c0015c38 <Semaphore::tryAcquire()+0x94>
c0015c14:	8b 0d c0 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c0
c0015c1a:	85 c9                	test   ecx,ecx
c0015c1c:	74 1a                	je     c0015c38 <Semaphore::tryAcquire()+0x94>
c0015c1e:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015c28:	e8 e3 fe ff ff       	call   c0015b10 <schedule()>
c0015c2d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015c32:	83 e8 01             	sub    eax,0x1
c0015c35:	8d 76 00             	lea    esi,[esi+0x0]
c0015c38:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015c3d:	85 c0                	test   eax,eax
c0015c3f:	75 0b                	jne    c0015c4c <Semaphore::tryAcquire()+0xa8>
c0015c41:	fb                   	sti    
c0015c42:	b0 01                	mov    al,0x1
c0015c44:	83 c4 08             	add    esp,0x8
c0015c47:	5b                   	pop    ebx
c0015c48:	c3                   	ret    
c0015c49:	8d 76 00             	lea    esi,[esi+0x0]
c0015c4c:	b0 01                	mov    al,0x1
c0015c4e:	83 c4 08             	add    esp,0x8
c0015c51:	5b                   	pop    ebx
c0015c52:	c3                   	ret    
c0015c53:	90                   	nop
c0015c54:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015c5e:	e8 ad fe ff ff       	call   c0015b10 <schedule()>
c0015c63:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015c68:	83 e8 01             	sub    eax,0x1
c0015c6b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015c70:	85 c0                	test   eax,eax
c0015c72:	75 80                	jne    c0015bf4 <Semaphore::tryAcquire()+0x50>
c0015c74:	eb 86                	jmp    c0015bfc <Semaphore::tryAcquire()+0x58>
c0015c76:	66 90                	xchg   ax,ax

c0015c78 <Semaphore::assertLocked(char const*)>:
c0015c78:	83 ec 0c             	sub    esp,0xc
c0015c7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015c7f:	fa                   	cli    
c0015c80:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015c86:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015c8b:	83 c1 01             	add    ecx,0x1
c0015c8e:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015c94:	8d 48 01             	lea    ecx,[eax+0x1]
c0015c97:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015c9d:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015c9f:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015ca2:	7c 28                	jl     c0015ccc <Semaphore::assertLocked(char const*)+0x54>
c0015ca4:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015ca9:	85 c0                	test   eax,eax
c0015cab:	75 0b                	jne    c0015cb8 <Semaphore::assertLocked(char const*)+0x40>
c0015cad:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015cb2:	85 c0                	test   eax,eax
c0015cb4:	75 32                	jne    c0015ce8 <Semaphore::assertLocked(char const*)+0x70>
c0015cb6:	66 90                	xchg   ax,ax
c0015cb8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015cbd:	83 e8 01             	sub    eax,0x1
c0015cc0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015cc5:	75 01                	jne    c0015cc8 <Semaphore::assertLocked(char const*)+0x50>
c0015cc7:	fb                   	sti    
c0015cc8:	83 c4 0c             	add    esp,0xc
c0015ccb:	c3                   	ret    
c0015ccc:	83 ec 0c             	sub    esp,0xc
c0015ccf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015cd3:	52                   	push   edx
c0015cd4:	e8 78 b5 ff ff       	call   c0011251 <KePanic(char const*)>
c0015cd9:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015cde:	83 c4 10             	add    esp,0x10
c0015ce1:	83 e8 01             	sub    eax,0x1
c0015ce4:	eb be                	jmp    c0015ca4 <Semaphore::assertLocked(char const*)+0x2c>
c0015ce6:	66 90                	xchg   ax,ax
c0015ce8:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015cf2:	e8 19 fe ff ff       	call   c0015b10 <schedule()>
c0015cf7:	eb bf                	jmp    c0015cb8 <Semaphore::assertLocked(char const*)+0x40>
c0015cf9:	8d 76 00             	lea    esi,[esi+0x0]

c0015cfc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015cfc:	83 ec 0c             	sub    esp,0xc
c0015cff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d04:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d08:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015d0b:	e8 00 fe ff ff       	call   c0015b10 <schedule()>
c0015d10:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d15:	83 e8 01             	sub    eax,0x1
c0015d18:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015d1d:	75 01                	jne    c0015d20 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015d1f:	fb                   	sti    
c0015d20:	83 c4 0c             	add    esp,0xc
c0015d23:	c3                   	ret    

c0015d24 <blockTask(TaskState)>:
c0015d24:	83 ec 0c             	sub    esp,0xc
c0015d27:	fa                   	cli    
c0015d28:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d2d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d31:	83 c0 01             	add    eax,0x1
c0015d34:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015d39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d3e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015d41:	e8 ca fd ff ff       	call   c0015b10 <schedule()>
c0015d46:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d4b:	83 e8 01             	sub    eax,0x1
c0015d4e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015d53:	75 03                	jne    c0015d58 <blockTask(TaskState)+0x34>
c0015d55:	fb                   	sti    
c0015d56:	66 90                	xchg   ax,ax
c0015d58:	83 c4 0c             	add    esp,0xc
c0015d5b:	c3                   	ret    

c0015d5c <waitTask(int, int*, int)>:
c0015d5c:	83 ec 18             	sub    esp,0x18
c0015d5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d64:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015d68:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015d6b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015d6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d74:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015d77:	6a 07                	push   0x7
c0015d79:	e8 a6 ff ff ff       	call   c0015d24 <blockTask(TaskState)>
c0015d7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d83:	83 c4 10             	add    esp,0x10
c0015d86:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015d89:	85 d2                	test   edx,edx
c0015d8b:	74 0b                	je     c0015d98 <waitTask(int, int*, int)+0x3c>
c0015d8d:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015d90:	89 02                	mov    DWORD PTR [edx],eax
c0015d92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d97:	90                   	nop
c0015d98:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015d9b:	83 c4 0c             	add    esp,0xc
c0015d9e:	c3                   	ret    
c0015d9f:	90                   	nop

c0015da0 <milliTenthSleepUntil(unsigned int)>:
c0015da0:	83 ec 0c             	sub    esp,0xc
c0015da3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015da7:	39 05 ec 88 02 c0    	cmp    DWORD PTR ds:0xc00288ec,eax
c0015dad:	76 05                	jbe    c0015db4 <milliTenthSleepUntil(unsigned int)+0x14>
c0015daf:	90                   	nop
c0015db0:	83 c4 0c             	add    esp,0xc
c0015db3:	c3                   	ret    
c0015db4:	fa                   	cli    
c0015db5:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015dbb:	83 ec 08             	sub    esp,0x8
c0015dbe:	83 c2 01             	add    edx,0x1
c0015dc1:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0015dc7:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015dcd:	83 c1 01             	add    ecx,0x1
c0015dd0:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015dd6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015ddc:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015ddf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015de4:	50                   	push   eax
c0015de5:	68 d8 96 02 c0       	push   0xc00296d8
c0015dea:	e8 41 9a 00 00       	call   c001f830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015def:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015df6:	e8 29 ff ff ff       	call   c0015d24 <blockTask(TaskState)>
c0015dfb:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015e00:	83 c4 10             	add    esp,0x10
c0015e03:	83 e8 01             	sub    eax,0x1
c0015e06:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015e0b:	85 c0                	test   eax,eax
c0015e0d:	75 09                	jne    c0015e18 <milliTenthSleepUntil(unsigned int)+0x78>
c0015e0f:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015e14:	85 c0                	test   eax,eax
c0015e16:	75 14                	jne    c0015e2c <milliTenthSleepUntil(unsigned int)+0x8c>
c0015e18:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e1d:	83 e8 01             	sub    eax,0x1
c0015e20:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e25:	75 89                	jne    c0015db0 <milliTenthSleepUntil(unsigned int)+0x10>
c0015e27:	fb                   	sti    
c0015e28:	83 c4 0c             	add    esp,0xc
c0015e2b:	c3                   	ret    
c0015e2c:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015e36:	e8 d5 fc ff ff       	call   c0015b10 <schedule()>
c0015e3b:	eb db                	jmp    c0015e18 <milliTenthSleepUntil(unsigned int)+0x78>
c0015e3d:	8d 76 00             	lea    esi,[esi+0x0]

c0015e40 <milliTenthSleep(unsigned int)>:
c0015e40:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015e44:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c0015e49:	01 c2                	add    edx,eax
c0015e4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015e4f:	e9 4c ff ff ff       	jmp    c0015da0 <milliTenthSleepUntil(unsigned int)>

c0015e54 <sleep(unsigned int)>:
c0015e54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e58:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e5b:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e5e:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e61:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e64:	c1 e0 04             	shl    eax,0x4
c0015e67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015e6b:	eb d3                	jmp    c0015e40 <milliTenthSleep(unsigned int)>
c0015e6d:	90                   	nop
c0015e6e:	66 90                	xchg   ax,ax

c0015e70 <Semaphore::acquire()>:
c0015e70:	83 ec 0c             	sub    esp,0xc
c0015e73:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e77:	fa                   	cli    
c0015e78:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e7d:	83 c0 01             	add    eax,0x1
c0015e80:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e85:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015e8a:	8d 48 01             	lea    ecx,[eax+0x1]
c0015e8d:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015e93:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015e96:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015e98:	7d 2e                	jge    c0015ec8 <Semaphore::acquire()+0x58>
c0015e9a:	83 c1 01             	add    ecx,0x1
c0015e9d:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015ea0:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015ea5:	85 c0                	test   eax,eax
c0015ea7:	75 0b                	jne    c0015eb4 <Semaphore::acquire()+0x44>
c0015ea9:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015eae:	85 c0                	test   eax,eax
c0015eb0:	75 66                	jne    c0015f18 <Semaphore::acquire()+0xa8>
c0015eb2:	66 90                	xchg   ax,ax
c0015eb4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015eb9:	83 e8 01             	sub    eax,0x1
c0015ebc:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015ec1:	75 01                	jne    c0015ec4 <Semaphore::acquire()+0x54>
c0015ec3:	fb                   	sti    
c0015ec4:	83 c4 0c             	add    esp,0xc
c0015ec7:	c3                   	ret    
c0015ec8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ecd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015ed4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015ed7:	85 c9                	test   ecx,ecx
c0015ed9:	74 51                	je     c0015f2c <Semaphore::acquire()+0xbc>
c0015edb:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0015ede:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015ee4:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0015ee7:	90                   	nop
c0015ee8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015eed:	83 ec 0c             	sub    esp,0xc
c0015ef0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0015ef3:	68 c4 22 02 c0       	push   0xc00222c4
c0015ef8:	e8 48 4a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015efd:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015f04:	e8 1b fe ff ff       	call   c0015d24 <blockTask(TaskState)>
c0015f09:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015f0e:	83 c4 10             	add    esp,0x10
c0015f11:	83 e8 01             	sub    eax,0x1
c0015f14:	eb 8a                	jmp    c0015ea0 <Semaphore::acquire()+0x30>
c0015f16:	66 90                	xchg   ax,ax
c0015f18:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015f22:	e8 e9 fb ff ff       	call   c0015b10 <schedule()>
c0015f27:	eb 8b                	jmp    c0015eb4 <Semaphore::acquire()+0x44>
c0015f29:	8d 76 00             	lea    esi,[esi+0x0]
c0015f2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f31:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015f34:	eb b2                	jmp    c0015ee8 <Semaphore::acquire()+0x78>
c0015f36:	66 90                	xchg   ax,ax

c0015f38 <taskReturned>:
c0015f38:	83 ec 18             	sub    esp,0x18
c0015f3b:	68 e4 22 02 c0       	push   0xc00222e4
c0015f40:	e8 0c b3 ff ff       	call   c0011251 <KePanic(char const*)>
c0015f45:	83 c4 10             	add    esp,0x10
c0015f48:	83 ec 0c             	sub    esp,0xc
c0015f4b:	6a 02                	push   0x2
c0015f4d:	e8 d2 fd ff ff       	call   c0015d24 <blockTask(TaskState)>
c0015f52:	fa                   	cli    
c0015f53:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f58:	83 c0 01             	add    eax,0x1
c0015f5b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f60:	e8 ab fb ff ff       	call   c0015b10 <schedule()>
c0015f65:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f6a:	83 c4 10             	add    esp,0x10
c0015f6d:	83 e8 01             	sub    eax,0x1
c0015f70:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f75:	85 c0                	test   eax,eax
c0015f77:	75 cf                	jne    c0015f48 <taskReturned+0x10>
c0015f79:	fb                   	sti    
c0015f7a:	eb cc                	jmp    c0015f48 <taskReturned+0x10>

c0015f7c <Thr::processFromPID(int)>:
c0015f7c:	57                   	push   edi
c0015f7d:	56                   	push   esi
c0015f7e:	53                   	push   ebx
c0015f7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f83:	fa                   	cli    
c0015f84:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015f8a:	83 ec 0c             	sub    esp,0xc
c0015f8d:	83 c1 01             	add    ecx,0x1
c0015f90:	68 e4 96 02 c0       	push   0xc00296e4
c0015f95:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015f9b:	e8 cc 97 00 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015fa0:	83 c4 10             	add    esp,0x10
c0015fa3:	89 c7                	mov    edi,eax
c0015fa5:	eb 15                	jmp    c0015fbc <Thr::processFromPID(int)+0x40>
c0015fa7:	90                   	nop
c0015fa8:	83 ec 0c             	sub    esp,0xc
c0015fab:	68 e4 96 02 c0       	push   0xc00296e4
c0015fb0:	e8 b7 97 00 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015fb5:	83 c4 10             	add    esp,0x10
c0015fb8:	39 f8                	cmp    eax,edi
c0015fba:	74 50                	je     c001600c <Thr::processFromPID(int)+0x90>
c0015fbc:	83 ec 0c             	sub    esp,0xc
c0015fbf:	68 e4 96 02 c0       	push   0xc00296e4
c0015fc4:	e8 a3 97 00 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015fc9:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0015fd0:	89 c3                	mov    ebx,eax
c0015fd2:	e8 9d 97 00 00       	call   c001f774 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015fd7:	58                   	pop    eax
c0015fd8:	5a                   	pop    edx
c0015fd9:	53                   	push   ebx
c0015fda:	68 e4 96 02 c0       	push   0xc00296e4
c0015fdf:	e8 4c 98 00 00       	call   c001f830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015fe4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015fe7:	83 c4 10             	add    esp,0x10
c0015fea:	39 30                	cmp    DWORD PTR [eax],esi
c0015fec:	75 ba                	jne    c0015fa8 <Thr::processFromPID(int)+0x2c>
c0015fee:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015ff3:	83 e8 01             	sub    eax,0x1
c0015ff6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015ffb:	74 0b                	je     c0016008 <Thr::processFromPID(int)+0x8c>
c0015ffd:	8d 76 00             	lea    esi,[esi+0x0]
c0016000:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016003:	5b                   	pop    ebx
c0016004:	5e                   	pop    esi
c0016005:	5f                   	pop    edi
c0016006:	c3                   	ret    
c0016007:	90                   	nop
c0016008:	fb                   	sti    
c0016009:	eb f5                	jmp    c0016000 <Thr::processFromPID(int)+0x84>
c001600b:	90                   	nop
c001600c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016011:	83 e8 01             	sub    eax,0x1
c0016014:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016019:	75 05                	jne    c0016020 <Thr::processFromPID(int)+0xa4>
c001601b:	fb                   	sti    
c001601c:	5b                   	pop    ebx
c001601d:	5e                   	pop    esi
c001601e:	5f                   	pop    edi
c001601f:	c3                   	ret    
c0016020:	5b                   	pop    ebx
c0016021:	31 c0                	xor    eax,eax
c0016023:	5e                   	pop    esi
c0016024:	5f                   	pop    edi
c0016025:	c3                   	ret    
c0016026:	66 90                	xchg   ax,ax

c0016028 <unblockTask(ThreadControlBlock*)>:
c0016028:	53                   	push   ebx
c0016029:	83 ec 08             	sub    esp,0x8
c001602c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016030:	fa                   	cli    
c0016031:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016036:	83 c0 01             	add    eax,0x1
c0016039:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001603e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016041:	85 c0                	test   eax,eax
c0016043:	74 67                	je     c00160ac <unblockTask(ThreadControlBlock*)+0x84>
c0016045:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016048:	83 f8 01             	cmp    eax,0x1
c001604b:	74 37                	je     c0016084 <unblockTask(ThreadControlBlock*)+0x5c>
c001604d:	83 ec 0c             	sub    esp,0xc
c0016050:	68 e4 96 02 c0       	push   0xc00296e4
c0016055:	e8 12 97 00 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001605a:	83 c4 10             	add    esp,0x10
c001605d:	85 c0                	test   eax,eax
c001605f:	75 1b                	jne    c001607c <unblockTask(ThreadControlBlock*)+0x54>
c0016061:	eb 5d                	jmp    c00160c0 <unblockTask(ThreadControlBlock*)+0x98>
c0016063:	90                   	nop
c0016064:	83 ec 08             	sub    esp,0x8
c0016067:	50                   	push   eax
c0016068:	68 e4 96 02 c0       	push   0xc00296e4
c001606d:	e8 1a 9a 00 00       	call   c001fa8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0016072:	83 c4 10             	add    esp,0x10
c0016075:	85 c0                	test   eax,eax
c0016077:	74 47                	je     c00160c0 <unblockTask(ThreadControlBlock*)+0x98>
c0016079:	8d 76 00             	lea    esi,[esi+0x0]
c001607c:	39 c3                	cmp    ebx,eax
c001607e:	75 e4                	jne    c0016064 <unblockTask(ThreadControlBlock*)+0x3c>
c0016080:	eb 12                	jmp    c0016094 <unblockTask(ThreadControlBlock*)+0x6c>
c0016082:	66 90                	xchg   ax,ax
c0016084:	83 ec 0c             	sub    esp,0xc
c0016087:	68 63 22 02 c0       	push   0xc0022263
c001608c:	e8 b4 48 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016091:	83 c4 10             	add    esp,0x10
c0016094:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016099:	83 e8 01             	sub    eax,0x1
c001609c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00160a1:	75 01                	jne    c00160a4 <unblockTask(ThreadControlBlock*)+0x7c>
c00160a3:	fb                   	sti    
c00160a4:	83 c4 08             	add    esp,0x8
c00160a7:	5b                   	pop    ebx
c00160a8:	c3                   	ret    
c00160a9:	8d 76 00             	lea    esi,[esi+0x0]
c00160ac:	83 ec 0c             	sub    esp,0xc
c00160af:	68 4c 22 02 c0       	push   0xc002224c
c00160b4:	e8 8c 48 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00160b9:	83 c4 10             	add    esp,0x10
c00160bc:	eb d6                	jmp    c0016094 <unblockTask(ThreadControlBlock*)+0x6c>
c00160be:	66 90                	xchg   ax,ax
c00160c0:	83 ec 08             	sub    esp,0x8
c00160c3:	53                   	push   ebx
c00160c4:	68 e4 96 02 c0       	push   0xc00296e4
c00160c9:	e8 62 97 00 00       	call   c001f830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00160ce:	83 c4 10             	add    esp,0x10
c00160d1:	eb c1                	jmp    c0016094 <unblockTask(ThreadControlBlock*)+0x6c>
c00160d3:	90                   	nop

c00160d4 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00160d4:	55                   	push   ebp
c00160d5:	57                   	push   edi
c00160d6:	56                   	push   esi
c00160d7:	53                   	push   ebx
c00160d8:	83 ec 1c             	sub    esp,0x1c
c00160db:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00160df:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00160e2:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00160e8:	85 ed                	test   ebp,ebp
c00160ea:	7e 28                	jle    c0016114 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00160ec:	31 f6                	xor    esi,esi
c00160ee:	66 90                	xchg   ax,ax
c00160f0:	83 ec 0c             	sub    esp,0xc
c00160f3:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00160fa:	83 c6 01             	add    esi,0x1
c00160fd:	57                   	push   edi
c00160fe:	e8 c3 19 ff ff       	call   c0007ac6 <free>
c0016103:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016106:	83 c4 10             	add    esp,0x10
c0016109:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001610f:	7f df                	jg     c00160f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016111:	8d 76 00             	lea    esi,[esi+0x0]
c0016114:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001611e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016123:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016126:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016129:	d3 c0                	rol    eax,cl
c001612b:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0016132:	21 c8                	and    eax,ecx
c0016134:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c001613b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001613e:	89 f7                	mov    edi,esi
c0016140:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016148:	0f 85 72 01 00 00    	jne    c00162c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001614e:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016154:	85 ed                	test   ebp,ebp
c0016156:	74 1c                	je     c0016174 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016158:	83 ec 0c             	sub    esp,0xc
c001615b:	55                   	push   ebp
c001615c:	e8 01 ae ff ff       	call   c0010f62 <EnvVarContainer::~EnvVarContainer()>
c0016161:	59                   	pop    ecx
c0016162:	5e                   	pop    esi
c0016163:	6a 0c                	push   0xc
c0016165:	55                   	push   ebp
c0016166:	e8 ad 46 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001616b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001616e:	83 c4 10             	add    esp,0x10
c0016171:	89 f7                	mov    edi,esi
c0016173:	90                   	nop
c0016174:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001617a:	85 c0                	test   eax,eax
c001617c:	0f 84 b2 00 00 00    	je     c0016234 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016182:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016185:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016189:	31 c9                	xor    ecx,ecx
c001618b:	eb 17                	jmp    c00161a4 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c001618d:	8d 76 00             	lea    esi,[esi+0x0]
c0016190:	83 c1 01             	add    ecx,0x1
c0016193:	83 f9 10             	cmp    ecx,0x10
c0016196:	0f 84 98 00 00 00    	je     c0016234 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001619c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00161a2:	66 90                	xchg   ax,ax
c00161a4:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00161ab:	d3 fa                	sar    edx,cl
c00161ad:	80 e2 01             	and    dl,0x1
c00161b0:	74 de                	je     c0016190 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00161b2:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00161b5:	01 d2                	add    edx,edx
c00161b7:	01 ca                	add    edx,ecx
c00161b9:	8d 14 92             	lea    edx,[edx+edx*4]
c00161bc:	01 d0                	add    eax,edx
c00161be:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00161c4:	83 fd 07             	cmp    ebp,0x7
c00161c7:	75 c7                	jne    c0016190 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00161c9:	05 40 02 00 00       	add    eax,0x240
c00161ce:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00161d1:	83 fd ff             	cmp    ebp,0xffffffff
c00161d4:	0f 8c ee 00 00 00    	jl     c00162c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00161da:	0f 84 ac 01 00 00    	je     c001638c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00161e0:	85 ed                	test   ebp,ebp
c00161e2:	0f 84 90 01 00 00    	je     c0016378 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00161e8:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00161ea:	75 a4                	jne    c0016190 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00161ec:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00161f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00161f6:	01 d0                	add    eax,edx
c00161f8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00161fc:	83 ec 0c             	sub    esp,0xc
c00161ff:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016205:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016208:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001620e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016215:	50                   	push   eax
c0016216:	e8 0d fe ff ff       	call   c0016028 <unblockTask(ThreadControlBlock*)>
c001621b:	83 c4 10             	add    esp,0x10
c001621e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016221:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016225:	89 f7                	mov    edi,esi
c0016227:	83 c1 01             	add    ecx,0x1
c001622a:	83 f9 10             	cmp    ecx,0x10
c001622d:	0f 85 69 ff ff ff    	jne    c001619c <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0016233:	90                   	nop
c0016234:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001623a:	85 c0                	test   eax,eax
c001623c:	74 62                	je     c00162a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001623e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016244:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001624a:	74 54                	je     c00162a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001624c:	83 ec 0c             	sub    esp,0xc
c001624f:	68 e4 96 02 c0       	push   0xc00296e4
c0016254:	e8 13 95 00 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016259:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016260:	89 c7                	mov    edi,eax
c0016262:	e8 e9 94 00 00       	call   c001f750 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016267:	83 c4 10             	add    esp,0x10
c001626a:	84 c0                	test   al,al
c001626c:	0f 84 ce 00 00 00    	je     c0016340 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0016272:	66 90                	xchg   ax,ax
c0016274:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016277:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001627d:	85 d2                	test   edx,edx
c001627f:	74 0f                	je     c0016290 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0016281:	83 ec 0c             	sub    esp,0xc
c0016284:	8b 02                	mov    eax,DWORD PTR [edx]
c0016286:	52                   	push   edx
c0016287:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001628a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001628d:	83 c4 10             	add    esp,0x10
c0016290:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001629a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001629d:	8d 76 00             	lea    esi,[esi+0x0]
c00162a0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00162a6:	85 db                	test   ebx,ebx
c00162a8:	74 16                	je     c00162c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00162aa:	83 ec 0c             	sub    esp,0xc
c00162ad:	53                   	push   ebx
c00162ae:	e8 ff 38 ff ff       	call   c0009bb2 <VAS::~VAS()>
c00162b3:	58                   	pop    eax
c00162b4:	5a                   	pop    edx
c00162b5:	6a 14                	push   0x14
c00162b7:	53                   	push   ebx
c00162b8:	e8 5b 45 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00162bd:	83 c4 10             	add    esp,0x10
c00162c0:	83 c4 1c             	add    esp,0x1c
c00162c3:	5b                   	pop    ebx
c00162c4:	5e                   	pop    esi
c00162c5:	5f                   	pop    edi
c00162c6:	5d                   	pop    ebp
c00162c7:	c3                   	ret    
c00162c8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00162cc:	83 ec 0c             	sub    esp,0xc
c00162cf:	68 18 23 02 c0       	push   0xc0022318
c00162d4:	e8 78 af ff ff       	call   c0011251 <KePanic(char const*)>
c00162d9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00162dc:	83 c4 10             	add    esp,0x10
c00162df:	89 f7                	mov    edi,esi
c00162e1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00162e5:	e9 a6 fe ff ff       	jmp    c0016190 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00162ea:	66 90                	xchg   ax,ax
c00162ec:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00162f2:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00162f8:	75 1e                	jne    c0016318 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00162fa:	83 ec 0c             	sub    esp,0xc
c00162fd:	68 80 23 02 c0       	push   0xc0022380
c0016302:	e8 3e 46 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016307:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001630e:	e8 11 fa ff ff       	call   c0015d24 <blockTask(TaskState)>
c0016313:	83 c4 10             	add    esp,0x10
c0016316:	66 90                	xchg   ax,ax
c0016318:	83 ec 08             	sub    esp,0x8
c001631b:	56                   	push   esi
c001631c:	68 e4 96 02 c0       	push   0xc00296e4
c0016321:	e8 0a 95 00 00       	call   c001f830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016326:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c001632d:	e8 3a 94 00 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016332:	83 c4 10             	add    esp,0x10
c0016335:	39 f8                	cmp    eax,edi
c0016337:	0f 84 37 ff ff ff    	je     c0016274 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001633d:	8d 76 00             	lea    esi,[esi+0x0]
c0016340:	83 ec 0c             	sub    esp,0xc
c0016343:	68 e4 96 02 c0       	push   0xc00296e4
c0016348:	e8 1f 94 00 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001634d:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016354:	89 c6                	mov    esi,eax
c0016356:	e8 19 94 00 00       	call   c001f774 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001635b:	83 c4 10             	add    esp,0x10
c001635e:	39 f3                	cmp    ebx,esi
c0016360:	74 b6                	je     c0016318 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016362:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016365:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016368:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001636e:	75 a8                	jne    c0016318 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016370:	e9 77 ff ff ff       	jmp    c00162ec <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016375:	8d 76 00             	lea    esi,[esi+0x0]
c0016378:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001637c:	83 ec 0c             	sub    esp,0xc
c001637f:	68 4c 23 02 c0       	push   0xc002234c
c0016384:	e9 4b ff ff ff       	jmp    c00162d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016389:	8d 76 00             	lea    esi,[esi+0x0]
c001638c:	8b 36                	mov    esi,DWORD PTR [esi]
c001638e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016392:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016395:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016398:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001639e:	01 d7                	add    edi,edx
c00163a0:	89 f8                	mov    eax,edi
c00163a2:	e9 51 fe ff ff       	jmp    c00161f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00163a7:	90                   	nop

c00163a8 <cleanerTaskFunction(void*)>:
c00163a8:	53                   	push   ebx
c00163a9:	83 ec 08             	sub    esp,0x8
c00163ac:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00163b1:	83 e8 01             	sub    eax,0x1
c00163b4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00163b9:	75 01                	jne    c00163bc <cleanerTaskFunction(void*)+0x14>
c00163bb:	fb                   	sti    
c00163bc:	fa                   	cli    
c00163bd:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00163c2:	80 3d ac 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296ac,0x0
c00163c9:	8d 50 01             	lea    edx,[eax+0x1]
c00163cc:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00163d2:	0f 84 c4 00 00 00    	je     c001649c <cleanerTaskFunction(void*)+0xf4>
c00163d8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00163dd:	85 c0                	test   eax,eax
c00163df:	75 03                	jne    c00163e4 <cleanerTaskFunction(void*)+0x3c>
c00163e1:	fb                   	sti    
c00163e2:	66 90                	xchg   ax,ax
c00163e4:	c6 05 ac 96 02 c0 00 	mov    BYTE PTR ds:0xc00296ac,0x0
c00163eb:	fa                   	cli    
c00163ec:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c00163f2:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c00163f8:	83 c2 01             	add    edx,0x1
c00163fb:	83 c1 01             	add    ecx,0x1
c00163fe:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016404:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c001640a:	fa                   	cli    
c001640b:	8b 1d c8 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296c8
c0016411:	83 c3 01             	add    ebx,0x1
c0016414:	89 1d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ebx
c001641a:	eb 28                	jmp    c0016444 <cleanerTaskFunction(void*)+0x9c>
c001641c:	83 ec 0c             	sub    esp,0xc
c001641f:	68 cc 96 02 c0       	push   0xc00296cc
c0016424:	e8 43 93 00 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016429:	c7 04 24 cc 96 02 c0 	mov    DWORD PTR [esp],0xc00296cc
c0016430:	89 c3                	mov    ebx,eax
c0016432:	e8 3d 93 00 00       	call   c001f774 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016437:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001643a:	e8 95 fc ff ff       	call   c00160d4 <cleanupTerminatedTask(ThreadControlBlock*)>
c001643f:	83 c4 10             	add    esp,0x10
c0016442:	66 90                	xchg   ax,ax
c0016444:	83 ec 0c             	sub    esp,0xc
c0016447:	68 cc 96 02 c0       	push   0xc00296cc
c001644c:	e8 ff 92 00 00       	call   c001f750 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016451:	83 c4 10             	add    esp,0x10
c0016454:	84 c0                	test   al,al
c0016456:	74 c4                	je     c001641c <cleanerTaskFunction(void*)+0x74>
c0016458:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001645d:	83 e8 01             	sub    eax,0x1
c0016460:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016465:	75 01                	jne    c0016468 <cleanerTaskFunction(void*)+0xc0>
c0016467:	fb                   	sti    
c0016468:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001646d:	83 e8 01             	sub    eax,0x1
c0016470:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016475:	0f 85 31 ff ff ff    	jne    c00163ac <cleanerTaskFunction(void*)+0x4>
c001647b:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0016480:	85 c0                	test   eax,eax
c0016482:	0f 84 24 ff ff ff    	je     c00163ac <cleanerTaskFunction(void*)+0x4>
c0016488:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0016492:	e8 79 f6 ff ff       	call   c0015b10 <schedule()>
c0016497:	e9 10 ff ff ff       	jmp    c00163ac <cleanerTaskFunction(void*)+0x4>
c001649c:	83 ec 0c             	sub    esp,0xc
c001649f:	6a 02                	push   0x2
c00164a1:	e8 56 f8 ff ff       	call   c0015cfc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00164a6:	83 c4 10             	add    esp,0x10
c00164a9:	e9 36 ff ff ff       	jmp    c00163e4 <cleanerTaskFunction(void*)+0x3c>
c00164ae:	66 90                	xchg   ax,ax

c00164b0 <terminateTask(int)>:
c00164b0:	83 ec 14             	sub    esp,0x14
c00164b3:	fa                   	cli    
c00164b4:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c00164ba:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c00164c0:	83 c2 01             	add    edx,0x1
c00164c3:	83 c1 01             	add    ecx,0x1
c00164c6:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00164cc:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c00164d2:	fa                   	cli    
c00164d3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00164d8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00164dc:	83 c0 01             	add    eax,0x1
c00164df:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00164e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164e9:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00164ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164f1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00164f4:	50                   	push   eax
c00164f5:	68 cc 96 02 c0       	push   0xc00296cc
c00164fa:	e8 31 93 00 00       	call   c001f830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00164ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016504:	83 c4 10             	add    esp,0x10
c0016507:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001650e:	a1 a8 96 02 c0       	mov    eax,ds:0xc00296a8
c0016513:	85 c0                	test   eax,eax
c0016515:	74 65                	je     c001657c <terminateTask(int)+0xcc>
c0016517:	83 ec 0c             	sub    esp,0xc
c001651a:	c6 05 ac 96 02 c0 01 	mov    BYTE PTR ds:0xc00296ac,0x1
c0016521:	50                   	push   eax
c0016522:	e8 01 fb ff ff       	call   c0016028 <unblockTask(ThreadControlBlock*)>
c0016527:	83 c4 10             	add    esp,0x10
c001652a:	66 90                	xchg   ax,ax
c001652c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016531:	83 e8 01             	sub    eax,0x1
c0016534:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016539:	75 01                	jne    c001653c <terminateTask(int)+0x8c>
c001653b:	fb                   	sti    
c001653c:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016541:	83 e8 01             	sub    eax,0x1
c0016544:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016549:	75 09                	jne    c0016554 <terminateTask(int)+0xa4>
c001654b:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c0016552:	75 3c                	jne    c0016590 <terminateTask(int)+0xe0>
c0016554:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016559:	83 e8 01             	sub    eax,0x1
c001655c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016561:	75 01                	jne    c0016564 <terminateTask(int)+0xb4>
c0016563:	fb                   	sti    
c0016564:	fa                   	cli    
c0016565:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001656a:	83 c0 01             	add    eax,0x1
c001656d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016572:	66 90                	xchg   ax,ax
c0016574:	e8 97 f5 ff ff       	call   c0015b10 <schedule()>
c0016579:	eb d9                	jmp    c0016554 <terminateTask(int)+0xa4>
c001657b:	90                   	nop
c001657c:	83 ec 0c             	sub    esp,0xc
c001657f:	68 7a 22 02 c0       	push   0xc002227a
c0016584:	e8 bc 43 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016589:	83 c4 10             	add    esp,0x10
c001658c:	eb 9e                	jmp    c001652c <terminateTask(int)+0x7c>
c001658e:	66 90                	xchg   ax,ax
c0016590:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001659a:	eb d8                	jmp    c0016574 <terminateTask(int)+0xc4>

c001659c <Thr::terminateFromIRQ(int)>:
c001659c:	83 ec 18             	sub    esp,0x18
c001659f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165a3:	50                   	push   eax
c00165a4:	e8 07 ff ff ff       	call   c00164b0 <terminateTask(int)>
c00165a9:	90                   	nop
c00165aa:	66 90                	xchg   ax,ax

c00165ac <Semaphore::release()>:
c00165ac:	83 ec 0c             	sub    esp,0xc
c00165af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00165b3:	fa                   	cli    
c00165b4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00165b9:	83 c0 01             	add    eax,0x1
c00165bc:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00165c1:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00165c6:	8d 48 01             	lea    ecx,[eax+0x1]
c00165c9:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c00165cf:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00165d2:	85 c9                	test   ecx,ecx
c00165d4:	74 42                	je     c0016618 <Semaphore::release()+0x6c>
c00165d6:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00165d9:	83 ec 0c             	sub    esp,0xc
c00165dc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00165df:	51                   	push   ecx
c00165e0:	e8 43 fa ff ff       	call   c0016028 <unblockTask(ThreadControlBlock*)>
c00165e5:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00165ea:	83 c4 10             	add    esp,0x10
c00165ed:	83 e8 01             	sub    eax,0x1
c00165f0:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00165f5:	85 c0                	test   eax,eax
c00165f7:	75 0b                	jne    c0016604 <Semaphore::release()+0x58>
c00165f9:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c00165fe:	85 c0                	test   eax,eax
c0016600:	75 22                	jne    c0016624 <Semaphore::release()+0x78>
c0016602:	66 90                	xchg   ax,ax
c0016604:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016609:	83 e8 01             	sub    eax,0x1
c001660c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016611:	75 01                	jne    c0016614 <Semaphore::release()+0x68>
c0016613:	fb                   	sti    
c0016614:	83 c4 0c             	add    esp,0xc
c0016617:	c3                   	ret    
c0016618:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001661b:	83 e9 01             	sub    ecx,0x1
c001661e:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016621:	eb cd                	jmp    c00165f0 <Semaphore::release()+0x44>
c0016623:	90                   	nop
c0016624:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001662e:	e8 dd f4 ff ff       	call   c0015b10 <schedule()>
c0016633:	eb cf                	jmp    c0016604 <Semaphore::release()+0x58>
c0016635:	8d 76 00             	lea    esi,[esi+0x0]

c0016638 <__static_initialization_and_destruction_0(int, int)>:
c0016638:	83 ec 0c             	sub    esp,0xc
c001663b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016640:	0f 85 8e 00 00 00    	jne    c00166d4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016646:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001664e:	0f 85 80 00 00 00    	jne    c00166d4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016654:	83 ec 0c             	sub    esp,0xc
c0016657:	68 e4 96 02 c0       	push   0xc00296e4
c001665c:	e8 83 94 00 00       	call   c001fae4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016661:	83 c4 10             	add    esp,0x10
c0016664:	83 ec 04             	sub    esp,0x4
c0016667:	68 50 2f 02 c0       	push   0xc0022f50
c001666c:	68 e4 96 02 c0       	push   0xc00296e4
c0016671:	68 94 fa 01 c0       	push   0xc001fa94
c0016676:	e8 4d 41 ff ff       	call   c000a7c8 <__cxa_atexit>
c001667b:	83 c4 10             	add    esp,0x10
c001667e:	83 ec 0c             	sub    esp,0xc
c0016681:	68 d8 96 02 c0       	push   0xc00296d8
c0016686:	e8 59 94 00 00       	call   c001fae4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001668b:	83 c4 10             	add    esp,0x10
c001668e:	83 ec 04             	sub    esp,0x4
c0016691:	68 50 2f 02 c0       	push   0xc0022f50
c0016696:	68 d8 96 02 c0       	push   0xc00296d8
c001669b:	68 94 fa 01 c0       	push   0xc001fa94
c00166a0:	e8 23 41 ff ff       	call   c000a7c8 <__cxa_atexit>
c00166a5:	83 c4 10             	add    esp,0x10
c00166a8:	83 ec 0c             	sub    esp,0xc
c00166ab:	68 cc 96 02 c0       	push   0xc00296cc
c00166b0:	e8 2f 94 00 00       	call   c001fae4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00166b5:	83 c4 10             	add    esp,0x10
c00166b8:	83 ec 04             	sub    esp,0x4
c00166bb:	68 50 2f 02 c0       	push   0xc0022f50
c00166c0:	68 cc 96 02 c0       	push   0xc00296cc
c00166c5:	68 94 fa 01 c0       	push   0xc001fa94
c00166ca:	e8 f9 40 ff ff       	call   c000a7c8 <__cxa_atexit>
c00166cf:	83 c4 10             	add    esp,0x10
c00166d2:	66 90                	xchg   ax,ax
c00166d4:	90                   	nop
c00166d5:	83 c4 0c             	add    esp,0xc
c00166d8:	c3                   	ret    
c00166d9:	8d 76 00             	lea    esi,[esi+0x0]

c00166dc <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00166dc:	83 ec 0c             	sub    esp,0xc
c00166df:	83 ec 08             	sub    esp,0x8
c00166e2:	68 ff ff 00 00       	push   0xffff
c00166e7:	6a 01                	push   0x1
c00166e9:	e8 4a ff ff ff       	call   c0016638 <__static_initialization_and_destruction_0(int, int)>
c00166ee:	83 c4 10             	add    esp,0x10
c00166f1:	83 c4 0c             	add    esp,0xc
c00166f4:	c3                   	ret    

c00166f5 <Vm::inbv(unsigned short)>:
c00166f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00166f9:	66 81 fa fe fe       	cmp    dx,0xfefe
c00166fe:	75 06                	jne    c0016706 <Vm::inbv(unsigned short)+0x11>
c0016700:	a0 2c 97 02 c0       	mov    al,ds:0xc002972c
c0016705:	c3                   	ret    
c0016706:	ec                   	in     al,dx
c0016707:	c3                   	ret    

c0016708 <Vm::outbv(unsigned short, unsigned char)>:
c0016708:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001670c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016710:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016715:	75 25                	jne    c001673c <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016717:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c001671d:	8d 51 01             	lea    edx,[ecx+0x1]
c0016720:	88 81 40 97 02 c0    	mov    BYTE PTR [ecx-0x3ffd68c0],al
c0016726:	89 15 2c 97 02 c0    	mov    DWORD PTR ds:0xc002972c,edx
c001672c:	83 fa 20             	cmp    edx,0x20
c001672f:	75 0c                	jne    c001673d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016731:	c7 05 2c 97 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x1f
c001673b:	c3                   	ret    
c001673c:	ee                   	out    dx,al
c001673d:	c3                   	ret    

c001673e <Vm::realToLinear(unsigned short, unsigned short)>:
c001673e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016743:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016748:	c1 e0 04             	shl    eax,0x4
c001674b:	01 d0                	add    eax,edx
c001674d:	c3                   	ret    

c001674e <Vm::getSegment(unsigned int)>:
c001674e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016752:	c1 e8 10             	shr    eax,0x10
c0016755:	c3                   	ret    

c0016756 <Vm::getOffset(unsigned int)>:
c0016756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001675a:	c3                   	ret    

c001675b <Vm::mainloop2()>:
c001675b:	83 ec 18             	sub    esp,0x18
c001675e:	fa                   	cli    
c001675f:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016765:	6a 02                	push   0x2
c0016767:	c6 05 25 97 02 c0 01 	mov    BYTE PTR ds:0xc0029725,0x1
c001676e:	e8 89 f5 ff ff       	call   c0015cfc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016773:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016778:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001677c:	52                   	push   edx
c001677d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016781:	52                   	push   edx
c0016782:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016786:	52                   	push   edx
c0016787:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001678b:	50                   	push   eax
c001678c:	e8 7e 9a fe ff       	call   c000020f <goToVM86>
c0016791:	83 c4 2c             	add    esp,0x2c
c0016794:	c3                   	ret    

c0016795 <Vm::mainVm8086Loop(void*)>:
c0016795:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001679a:	48                   	dec    eax
c001679b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00167a0:	75 01                	jne    c00167a3 <Vm::mainVm8086Loop(void*)+0xe>
c00167a2:	fb                   	sti    
c00167a3:	eb b6                	jmp    c001675b <Vm::mainloop2()>

c00167a5 <Vm::mainloop3(unsigned long)>:
c00167a5:	83 ec 18             	sub    esp,0x18
c00167a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167ac:	fa                   	cli    
c00167ad:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00167b3:	6a 02                	push   0x2
c00167b5:	c6 05 24 97 02 c0 01 	mov    BYTE PTR ds:0xc0029724,0x1
c00167bc:	a3 20 97 02 c0       	mov    ds:0xc0029720,eax
c00167c1:	e8 36 f5 ff ff       	call   c0015cfc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00167c6:	83 c4 1c             	add    esp,0x1c
c00167c9:	eb 90                	jmp    c001675b <Vm::mainloop2()>

c00167cb <Vm::initialise8086()>:
c00167cb:	83 ec 0c             	sub    esp,0xc
c00167ce:	68 80 00 00 00       	push   0x80
c00167d3:	6a 00                	push   0x0
c00167d5:	68 95 67 01 c0       	push   0xc0016795
c00167da:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00167e0:	e8 db f0 ff ff       	call   c00158c0 <Process::createThread(void (*)(void*), void*, int)>
c00167e5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00167ec:	a3 28 97 02 c0       	mov    ds:0xc0029728,eax
c00167f1:	68 00 01 00 00       	push   0x100
c00167f6:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00167fb:	6a 00                	push   0x0
c00167fd:	6a 00                	push   0x0
c00167ff:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016805:	e8 10 37 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001680a:	83 c4 2c             	add    esp,0x2c
c001680d:	c3                   	ret    

c001680e <Vm::finish8086()>:
c001680e:	53                   	push   ebx
c001680f:	83 ec 08             	sub    esp,0x8
c0016812:	fa                   	cli    
c0016813:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016819:	80 3d 24 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029724,0x0
c0016820:	75 15                	jne    c0016837 <Vm::finish8086()+0x29>
c0016822:	e8 e9 f2 ff ff       	call   c0015b10 <schedule()>
c0016827:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001682c:	48                   	dec    eax
c001682d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016832:	75 de                	jne    c0016812 <Vm::finish8086()+0x4>
c0016834:	fb                   	sti    
c0016835:	eb db                	jmp    c0016812 <Vm::finish8086()+0x4>
c0016837:	83 ec 0c             	sub    esp,0xc
c001683a:	8b 1d 20 97 02 c0    	mov    ebx,DWORD PTR ds:0xc0029720
c0016840:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016846:	c6 05 24 97 02 c0 00 	mov    BYTE PTR ds:0xc0029724,0x0
c001684d:	e8 d6 f7 ff ff       	call   c0016028 <unblockTask(ThreadControlBlock*)>
c0016852:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016857:	83 c4 10             	add    esp,0x10
c001685a:	8d 50 ff             	lea    edx,[eax-0x1]
c001685d:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016863:	85 d2                	test   edx,edx
c0016865:	75 01                	jne    c0016868 <Vm::finish8086()+0x5a>
c0016867:	fb                   	sti    
c0016868:	89 d8                	mov    eax,ebx
c001686a:	83 c4 08             	add    esp,0x8
c001686d:	5b                   	pop    ebx
c001686e:	c3                   	ret    

c001686f <Vm::getOutput8086(unsigned char*)>:
c001686f:	57                   	push   edi
c0016870:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c0016876:	56                   	push   esi
c0016877:	be 40 97 02 c0       	mov    esi,0xc0029740
c001687c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016880:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016882:	a1 2c 97 02 c0       	mov    eax,ds:0xc002972c
c0016887:	5e                   	pop    esi
c0016888:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016892:	5f                   	pop    edi
c0016893:	c3                   	ret    

c0016894 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016894:	55                   	push   ebp
c0016895:	57                   	push   edi
c0016896:	56                   	push   esi
c0016897:	53                   	push   ebx
c0016898:	83 ec 0c             	sub    esp,0xc
c001689b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001689f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00168a3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00168a7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00168ab:	fa                   	cli    
c00168ac:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00168b2:	80 3d 25 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029725,0x0
c00168b9:	75 15                	jne    c00168d0 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00168bb:	e8 50 f2 ff ff       	call   c0015b10 <schedule()>
c00168c0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00168c5:	48                   	dec    eax
c00168c6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00168cb:	75 de                	jne    c00168ab <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00168cd:	fb                   	sti    
c00168ce:	eb db                	jmp    c00168ab <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00168d0:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c00168d5:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c00168df:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00168e3:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00168e7:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00168eb:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00168ef:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00168f3:	0f b7 ff             	movzx  edi,di
c00168f6:	0f b7 f6             	movzx  esi,si
c00168f9:	50                   	push   eax
c00168fa:	6a 20                	push   0x20
c00168fc:	6a 00                	push   0x0
c00168fe:	68 40 97 02 c0       	push   0xc0029740
c0016903:	e8 e8 9b fe ff       	call   c00004f0 <memset>
c0016908:	5a                   	pop    edx
c0016909:	59                   	pop    ecx
c001690a:	57                   	push   edi
c001690b:	56                   	push   esi
c001690c:	e8 2d fe ff ff       	call   c001673e <Vm::realToLinear(unsigned short, unsigned short)>
c0016911:	83 c4 10             	add    esp,0x10
c0016914:	89 c7                	mov    edi,eax
c0016916:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001691a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001691e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016920:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016925:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c001692c:	48                   	dec    eax
c001692d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016932:	75 01                	jne    c0016935 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016934:	fb                   	sti    
c0016935:	83 ec 0c             	sub    esp,0xc
c0016938:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c001693e:	e8 e5 f6 ff ff       	call   c0016028 <unblockTask(ThreadControlBlock*)>
c0016943:	83 c4 1c             	add    esp,0x1c
c0016946:	b0 01                	mov    al,0x1
c0016948:	5b                   	pop    ebx
c0016949:	5e                   	pop    esi
c001694a:	5f                   	pop    edi
c001694b:	5d                   	pop    ebp
c001694c:	c3                   	ret    

c001694d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001694d:	55                   	push   ebp
c001694e:	57                   	push   edi
c001694f:	56                   	push   esi
c0016950:	53                   	push   ebx
c0016951:	83 ec 34             	sub    esp,0x34
c0016954:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016958:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c001695c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016960:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016968:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001696c:	68 a8 23 02 c0       	push   0xc00223a8
c0016971:	e8 cf 3f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016976:	83 c4 10             	add    esp,0x10
c0016979:	fa                   	cli    
c001697a:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016980:	8a 1d 25 97 02 c0    	mov    bl,BYTE PTR ds:0xc0029725
c0016986:	84 db                	test   bl,bl
c0016988:	75 15                	jne    c001699f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c001698a:	e8 81 f1 ff ff       	call   c0015b10 <schedule()>
c001698f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016994:	48                   	dec    eax
c0016995:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001699a:	75 dd                	jne    c0016979 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c001699c:	fb                   	sti    
c001699d:	eb da                	jmp    c0016979 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c001699f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00169a3:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c00169a8:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c00169b2:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c00169b6:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00169ba:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00169be:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00169c2:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00169c6:	50                   	push   eax
c00169c7:	6a 20                	push   0x20
c00169c9:	6a 00                	push   0x0
c00169cb:	68 40 97 02 c0       	push   0xc0029740
c00169d0:	e8 1b 9b fe ff       	call   c00004f0 <memset>
c00169d5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00169dc:	e8 d5 10 ff ff       	call   c0007ab6 <malloc>
c00169e1:	83 c4 0c             	add    esp,0xc
c00169e4:	89 c5                	mov    ebp,eax
c00169e6:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00169ec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00169f0:	50                   	push   eax
c00169f1:	e8 22 4d ff ff       	call   c000b718 <File::File(char const*, Process*)>
c00169f6:	83 c4 10             	add    esp,0x10
c00169f9:	85 ed                	test   ebp,ebp
c00169fb:	75 0a                	jne    c0016a07 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c00169fd:	83 ec 0c             	sub    esp,0xc
c0016a00:	68 ca 23 02 c0       	push   0xc00223ca
c0016a05:	eb 2b                	jmp    c0016a32 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016a07:	50                   	push   eax
c0016a08:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016a0c:	50                   	push   eax
c0016a0d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016a11:	50                   	push   eax
c0016a12:	55                   	push   ebp
c0016a13:	e8 be 50 ff ff       	call   c000bad6 <File::stat(unsigned long long*, bool*)>
c0016a18:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016a1c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016a20:	83 c4 10             	add    esp,0x10
c0016a23:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016a28:	74 27                	je     c0016a51 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016a2a:	83 ec 0c             	sub    esp,0xc
c0016a2d:	68 de 23 02 c0       	push   0xc00223de
c0016a32:	e8 1a a8 ff ff       	call   c0011251 <KePanic(char const*)>
c0016a37:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a3c:	83 c4 10             	add    esp,0x10
c0016a3f:	48                   	dec    eax
c0016a40:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a45:	85 c0                	test   eax,eax
c0016a47:	75 01                	jne    c0016a4a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016a49:	fb                   	sti    
c0016a4a:	31 db                	xor    ebx,ebx
c0016a4c:	e9 90 00 00 00       	jmp    c0016ae1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016a51:	51                   	push   ecx
c0016a52:	51                   	push   ecx
c0016a53:	6a 01                	push   0x1
c0016a55:	55                   	push   ebp
c0016a56:	e8 79 4d ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c0016a5b:	83 c4 10             	add    esp,0x10
c0016a5e:	85 c0                	test   eax,eax
c0016a60:	74 26                	je     c0016a88 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016a62:	83 ec 0c             	sub    esp,0xc
c0016a65:	68 f7 23 02 c0       	push   0xc00223f7
c0016a6a:	e8 e2 a7 ff ff       	call   c0011251 <KePanic(char const*)>
c0016a6f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a74:	83 c4 10             	add    esp,0x10
c0016a77:	48                   	dec    eax
c0016a78:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a7d:	85 c0                	test   eax,eax
c0016a7f:	75 c9                	jne    c0016a4a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016a81:	fb                   	sti    
c0016a82:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016a86:	eb 59                	jmp    c0016ae1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016a88:	0f b7 ff             	movzx  edi,di
c0016a8b:	50                   	push   eax
c0016a8c:	0f b7 f6             	movzx  esi,si
c0016a8f:	50                   	push   eax
c0016a90:	57                   	push   edi
c0016a91:	56                   	push   esi
c0016a92:	e8 a7 fc ff ff       	call   c001673e <Vm::realToLinear(unsigned short, unsigned short)>
c0016a97:	5a                   	pop    edx
c0016a98:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0016a9b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0016a9f:	51                   	push   ecx
c0016aa0:	50                   	push   eax
c0016aa1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016aa5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016aa9:	55                   	push   ebp
c0016aaa:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016aad:	83 c4 14             	add    esp,0x14
c0016ab0:	55                   	push   ebp
c0016ab1:	e8 7c 4d ff ff       	call   c000b832 <File::close()>
c0016ab6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016abb:	83 c4 10             	add    esp,0x10
c0016abe:	48                   	dec    eax
c0016abf:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016ac6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016acb:	85 c0                	test   eax,eax
c0016acd:	75 01                	jne    c0016ad0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016acf:	fb                   	sti    
c0016ad0:	83 ec 0c             	sub    esp,0xc
c0016ad3:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016ad9:	e8 4a f5 ff ff       	call   c0016028 <unblockTask(ThreadControlBlock*)>
c0016ade:	83 c4 10             	add    esp,0x10
c0016ae1:	83 c4 2c             	add    esp,0x2c
c0016ae4:	88 d8                	mov    al,bl
c0016ae6:	5b                   	pop    ebx
c0016ae7:	5e                   	pop    esi
c0016ae8:	5f                   	pop    edi
c0016ae9:	5d                   	pop    ebp
c0016aea:	c3                   	ret    

c0016aeb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016aeb:	57                   	push   edi
c0016aec:	56                   	push   esi
c0016aed:	53                   	push   ebx
c0016aee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016af2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016af6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016afa:	83 e8 06             	sub    eax,0x6
c0016afd:	0f b7 c0             	movzx  eax,ax
c0016b00:	50                   	push   eax
c0016b01:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016b06:	50                   	push   eax
c0016b07:	e8 32 fc ff ff       	call   c001673e <Vm::realToLinear(unsigned short, unsigned short)>
c0016b0c:	5a                   	pop    edx
c0016b0d:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0016b10:	59                   	pop    ecx
c0016b11:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016b14:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016b17:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016b1d:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016b20:	8d 56 02             	lea    edx,[esi+0x2]
c0016b23:	66 89 10             	mov    WORD PTR [eax],dx
c0016b26:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016b2a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016b2e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016b31:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016b35:	0f b6 f1             	movzx  esi,cl
c0016b38:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016b3c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016b42:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016b46:	0f b6 d5             	movzx  edx,ch
c0016b49:	74 0a                	je     c0016b55 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0016b4b:	c1 e2 08             	shl    edx,0x8
c0016b4e:	09 f2                	or     edx,esi
c0016b50:	80 ce 02             	or     dh,0x2
c0016b53:	eb 08                	jmp    c0016b5d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0016b55:	c1 e2 08             	shl    edx,0x8
c0016b58:	09 f2                	or     edx,esi
c0016b5a:	80 e6 fd             	and    dh,0xfd
c0016b5d:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016b61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b66:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016b6a:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016b72:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016b75:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016b7d:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016b80:	5b                   	pop    ebx
c0016b81:	5e                   	pop    esi
c0016b82:	5f                   	pop    edi
c0016b83:	c3                   	ret    

c0016b84 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016b84:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b89:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b8e:	c1 e0 04             	shl    eax,0x4
c0016b91:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016b94:	c3                   	ret    

c0016b95 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016b95:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b9a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b9f:	c1 e0 04             	shl    eax,0x4
c0016ba2:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016ba6:	c3                   	ret    

c0016ba7 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016ba7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016bac:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016bb1:	c1 e0 04             	shl    eax,0x4
c0016bb4:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016bb7:	c3                   	ret    

c0016bb8 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016bb8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016bbd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016bc2:	c1 e0 04             	shl    eax,0x4
c0016bc5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016bc9:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016bcc:	c3                   	ret    

c0016bcd <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016bcd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016bd2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016bd7:	c1 e0 04             	shl    eax,0x4
c0016bda:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016bde:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016be2:	c3                   	ret    

c0016be3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016be3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016be8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016bed:	c1 e0 04             	shl    eax,0x4
c0016bf0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016bf4:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016bf7:	c3                   	ret    

c0016bf8 <Vm::faultHandler(regs*)>:
c0016bf8:	55                   	push   ebp
c0016bf9:	57                   	push   edi
c0016bfa:	56                   	push   esi
c0016bfb:	53                   	push   ebx
c0016bfc:	83 ec 2c             	sub    esp,0x2c
c0016bff:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016c03:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016c06:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016c0a:	0f b7 f8             	movzx  edi,ax
c0016c0d:	52                   	push   edx
c0016c0e:	0f b7 c0             	movzx  eax,ax
c0016c11:	50                   	push   eax
c0016c12:	e8 27 fb ff ff       	call   c001673e <Vm::realToLinear(unsigned short, unsigned short)>
c0016c17:	5a                   	pop    edx
c0016c18:	59                   	pop    ecx
c0016c19:	89 c1                	mov    ecx,eax
c0016c1b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016c1e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c22:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016c27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016c2b:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016c2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c32:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016c37:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016c3b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016c3f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016c43:	e8 f6 fa ff ff       	call   c001673e <Vm::realToLinear(unsigned short, unsigned short)>
c0016c48:	5e                   	pop    esi
c0016c49:	be 06 00 00 00       	mov    esi,0x6
c0016c4e:	5d                   	pop    ebp
c0016c4f:	31 ed                	xor    ebp,ebp
c0016c51:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016c56:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016c59:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016c5f:	0f 84 74 02 00 00    	je     c0016ed9 <Vm::faultHandler(regs*)+0x2e1>
c0016c65:	0f 87 94 00 00 00    	ja     c0016cff <Vm::faultHandler(regs*)+0x107>
c0016c6b:	83 fa 66             	cmp    edx,0x66
c0016c6e:	0f 84 e2 01 00 00    	je     c0016e56 <Vm::faultHandler(regs*)+0x25e>
c0016c74:	77 47                	ja     c0016cbd <Vm::faultHandler(regs*)+0xc5>
c0016c76:	83 fa 36             	cmp    edx,0x36
c0016c79:	0f 84 ca 01 00 00    	je     c0016e49 <Vm::faultHandler(regs*)+0x251>
c0016c7f:	77 1a                	ja     c0016c9b <Vm::faultHandler(regs*)+0xa3>
c0016c81:	83 fa 26             	cmp    edx,0x26
c0016c84:	0f 84 98 01 00 00    	je     c0016e22 <Vm::faultHandler(regs*)+0x22a>
c0016c8a:	83 fa 2e             	cmp    edx,0x2e
c0016c8d:	0f 85 21 06 00 00    	jne    c00172b4 <Vm::faultHandler(regs*)+0x6bc>
c0016c93:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016c96:	31 f6                	xor    esi,esi
c0016c98:	41                   	inc    ecx
c0016c99:	eb bb                	jmp    c0016c56 <Vm::faultHandler(regs*)+0x5e>
c0016c9b:	83 fa 64             	cmp    edx,0x64
c0016c9e:	0f 84 8b 01 00 00    	je     c0016e2f <Vm::faultHandler(regs*)+0x237>
c0016ca4:	0f 87 92 01 00 00    	ja     c0016e3c <Vm::faultHandler(regs*)+0x244>
c0016caa:	83 fa 3e             	cmp    edx,0x3e
c0016cad:	0f 85 01 06 00 00    	jne    c00172b4 <Vm::faultHandler(regs*)+0x6bc>
c0016cb3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016cb6:	be 01 00 00 00       	mov    esi,0x1
c0016cbb:	eb db                	jmp    c0016c98 <Vm::faultHandler(regs*)+0xa0>
c0016cbd:	83 fa 6d             	cmp    edx,0x6d
c0016cc0:	0f 84 34 03 00 00    	je     c0016ffa <Vm::faultHandler(regs*)+0x402>
c0016cc6:	77 17                	ja     c0016cdf <Vm::faultHandler(regs*)+0xe7>
c0016cc8:	83 fa 67             	cmp    edx,0x67
c0016ccb:	0f 84 92 01 00 00    	je     c0016e63 <Vm::faultHandler(regs*)+0x26b>
c0016cd1:	83 fa 6c             	cmp    edx,0x6c
c0016cd4:	0f 84 b1 02 00 00    	je     c0016f8b <Vm::faultHandler(regs*)+0x393>
c0016cda:	e9 d5 05 00 00       	jmp    c00172b4 <Vm::faultHandler(regs*)+0x6bc>
c0016cdf:	83 fa 6f             	cmp    edx,0x6f
c0016ce2:	0f 84 3d 04 00 00    	je     c0017125 <Vm::faultHandler(regs*)+0x52d>
c0016ce8:	0f 82 9f 03 00 00    	jb     c001708d <Vm::faultHandler(regs*)+0x495>
c0016cee:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016cf4:	0f 84 76 01 00 00    	je     c0016e70 <Vm::faultHandler(regs*)+0x278>
c0016cfa:	e9 b5 05 00 00       	jmp    c00172b4 <Vm::faultHandler(regs*)+0x6bc>
c0016cff:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016d05:	0f 84 51 05 00 00    	je     c001725c <Vm::faultHandler(regs*)+0x664>
c0016d0b:	0f 87 a9 00 00 00    	ja     c0016dba <Vm::faultHandler(regs*)+0x1c2>
c0016d11:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016d17:	0f 84 d0 04 00 00    	je     c00171ed <Vm::faultHandler(regs*)+0x5f5>
c0016d1d:	77 78                	ja     c0016d97 <Vm::faultHandler(regs*)+0x19f>
c0016d1f:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016d25:	0f 84 0e 02 00 00    	je     c0016f39 <Vm::faultHandler(regs*)+0x341>
c0016d2b:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016d31:	0f 85 7d 05 00 00    	jne    c00172b4 <Vm::faultHandler(regs*)+0x6bc>
c0016d37:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016d3b:	89 d1                	mov    ecx,edx
c0016d3d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016d40:	c1 e1 08             	shl    ecx,0x8
c0016d43:	09 ca                	or     edx,ecx
c0016d45:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016d48:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016d4c:	89 d1                	mov    ecx,edx
c0016d4e:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016d52:	c1 e1 08             	shl    ecx,0x8
c0016d55:	09 ca                	or     edx,ecx
c0016d57:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016d5a:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016d5e:	89 d1                	mov    ecx,edx
c0016d60:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016d64:	c1 e1 08             	shl    ecx,0x8
c0016d67:	09 ca                	or     edx,ecx
c0016d69:	81 ca 00 02 02 00    	or     edx,0x20200
c0016d6f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016d72:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016d76:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d7c:	d1 e8                	shr    eax,1
c0016d7e:	83 e0 01             	and    eax,0x1
c0016d81:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016d84:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016d87:	83 c0 06             	add    eax,0x6
c0016d8a:	25 ff ff 00 00       	and    eax,0xffff
c0016d8f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016d92:	e9 19 05 00 00       	jmp    c00172b0 <Vm::faultHandler(regs*)+0x6b8>
c0016d97:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016d9d:	0f 84 8f 04 00 00    	je     c0017232 <Vm::faultHandler(regs*)+0x63a>
c0016da3:	0f 82 60 04 00 00    	jb     c0017209 <Vm::faultHandler(regs*)+0x611>
c0016da9:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016daf:	0f 84 94 04 00 00    	je     c0017249 <Vm::faultHandler(regs*)+0x651>
c0016db5:	e9 fa 04 00 00       	jmp    c00172b4 <Vm::faultHandler(regs*)+0x6bc>
c0016dba:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016dc0:	0f 84 d7 04 00 00    	je     c001729d <Vm::faultHandler(regs*)+0x6a5>
c0016dc6:	77 2e                	ja     c0016df6 <Vm::faultHandler(regs*)+0x1fe>
c0016dc8:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016dce:	0f 84 a4 04 00 00    	je     c0017278 <Vm::faultHandler(regs*)+0x680>
c0016dd4:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016dda:	0f 85 d4 04 00 00    	jne    c00172b4 <Vm::faultHandler(regs*)+0x6bc>
c0016de0:	50                   	push   eax
c0016de1:	50                   	push   eax
c0016de2:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016de6:	50                   	push   eax
c0016de7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016deb:	50                   	push   eax
c0016dec:	e8 17 f9 ff ff       	call   c0016708 <Vm::outbv(unsigned short, unsigned char)>
c0016df1:	e9 9f 04 00 00       	jmp    c0017295 <Vm::faultHandler(regs*)+0x69d>
c0016df6:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016dfc:	0f 84 6d 01 00 00    	je     c0016f6f <Vm::faultHandler(regs*)+0x377>
c0016e02:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016e08:	0f 84 6f 01 00 00    	je     c0016f7d <Vm::faultHandler(regs*)+0x385>
c0016e0e:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016e14:	0f 85 9a 04 00 00    	jne    c00172b4 <Vm::faultHandler(regs*)+0x6bc>
c0016e1a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e1d:	e9 76 fe ff ff       	jmp    c0016c98 <Vm::faultHandler(regs*)+0xa0>
c0016e22:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e25:	be 02 00 00 00       	mov    esi,0x2
c0016e2a:	e9 69 fe ff ff       	jmp    c0016c98 <Vm::faultHandler(regs*)+0xa0>
c0016e2f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e32:	be 03 00 00 00       	mov    esi,0x3
c0016e37:	e9 5c fe ff ff       	jmp    c0016c98 <Vm::faultHandler(regs*)+0xa0>
c0016e3c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e3f:	be 04 00 00 00       	mov    esi,0x4
c0016e44:	e9 4f fe ff ff       	jmp    c0016c98 <Vm::faultHandler(regs*)+0xa0>
c0016e49:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e4c:	be 05 00 00 00       	mov    esi,0x5
c0016e51:	e9 42 fe ff ff       	jmp    c0016c98 <Vm::faultHandler(regs*)+0xa0>
c0016e56:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e59:	bd 01 00 00 00       	mov    ebp,0x1
c0016e5e:	e9 35 fe ff ff       	jmp    c0016c98 <Vm::faultHandler(regs*)+0xa0>
c0016e63:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e66:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016e6b:	e9 28 fe ff ff       	jmp    c0016c98 <Vm::faultHandler(regs*)+0xa0>
c0016e70:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016e73:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016e77:	83 e5 01             	and    ebp,0x1
c0016e7a:	74 30                	je     c0016eac <Vm::faultHandler(regs*)+0x2b4>
c0016e7c:	83 e9 04             	sub    ecx,0x4
c0016e7f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016e85:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016e8b:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016e8e:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016e91:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016e97:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016e9b:	0f 84 0c 04 00 00    	je     c00172ad <Vm::faultHandler(regs*)+0x6b5>
c0016ea1:	80 ce 02             	or     dh,0x2
c0016ea4:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016ea7:	e9 01 04 00 00       	jmp    c00172ad <Vm::faultHandler(regs*)+0x6b5>
c0016eac:	83 e9 02             	sub    ecx,0x2
c0016eaf:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016eb5:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016eb8:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016ebc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016ec2:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016ec6:	74 05                	je     c0016ecd <Vm::faultHandler(regs*)+0x2d5>
c0016ec8:	80 ce 02             	or     dh,0x2
c0016ecb:	eb 03                	jmp    c0016ed0 <Vm::faultHandler(regs*)+0x2d8>
c0016ecd:	80 e6 fd             	and    dh,0xfd
c0016ed0:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016ed4:	e9 d4 03 00 00       	jmp    c00172ad <Vm::faultHandler(regs*)+0x6b5>
c0016ed9:	83 e5 01             	and    ebp,0x1
c0016edc:	74 2a                	je     c0016f08 <Vm::faultHandler(regs*)+0x310>
c0016ede:	8b 10                	mov    edx,DWORD PTR [eax]
c0016ee0:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016ee6:	81 ca 00 02 02 00    	or     edx,0x20200
c0016eec:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016eef:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ef1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016ef7:	c1 e8 09             	shr    eax,0x9
c0016efa:	83 e0 01             	and    eax,0x1
c0016efd:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016f00:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016f03:	83 c0 04             	add    eax,0x4
c0016f06:	eb 24                	jmp    c0016f2c <Vm::faultHandler(regs*)+0x334>
c0016f08:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016f0b:	81 ca 00 02 02 00    	or     edx,0x20200
c0016f11:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016f14:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016f17:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016f1d:	c1 e8 09             	shr    eax,0x9
c0016f20:	83 e0 01             	and    eax,0x1
c0016f23:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016f26:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016f29:	83 c0 02             	add    eax,0x2
c0016f2c:	25 ff ff 00 00       	and    eax,0xffff
c0016f31:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016f34:	e9 74 03 00 00       	jmp    c00172ad <Vm::faultHandler(regs*)+0x6b5>
c0016f39:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016f3d:	3d ee 00 00 00       	cmp    eax,0xee
c0016f42:	75 10                	jne    c0016f54 <Vm::faultHandler(regs*)+0x35c>
c0016f44:	83 ec 0c             	sub    esp,0xc
c0016f47:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016f4a:	e8 56 f8 ff ff       	call   c00167a5 <Vm::mainloop3(unsigned long)>
c0016f4f:	e9 44 03 00 00       	jmp    c0017298 <Vm::faultHandler(regs*)+0x6a0>
c0016f54:	83 ec 0c             	sub    esp,0xc
c0016f57:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016f5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f5f:	51                   	push   ecx
c0016f60:	50                   	push   eax
c0016f61:	53                   	push   ebx
c0016f62:	e8 84 fb ff ff       	call   c0016aeb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016f67:	83 c4 20             	add    esp,0x20
c0016f6a:	e9 41 03 00 00       	jmp    c00172b0 <Vm::faultHandler(regs*)+0x6b8>
c0016f6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f74:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016f78:	e9 30 03 00 00       	jmp    c00172ad <Vm::faultHandler(regs*)+0x6b5>
c0016f7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f82:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016f86:	e9 22 03 00 00       	jmp    c00172ad <Vm::faultHandler(regs*)+0x6b5>
c0016f8b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016f8e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016f93:	74 2b                	je     c0016fc0 <Vm::faultHandler(regs*)+0x3c8>
c0016f95:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016f9c:	76 22                	jbe    c0016fc0 <Vm::faultHandler(regs*)+0x3c8>
c0016f9e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016fa2:	50                   	push   eax
c0016fa3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016fa7:	50                   	push   eax
c0016fa8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016fac:	50                   	push   eax
c0016fad:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016fb1:	50                   	push   eax
c0016fb2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016fb6:	50                   	push   eax
c0016fb7:	6a 6c                	push   0x6c
c0016fb9:	6a 6c                	push   0x6c
c0016fbb:	e9 bd 01 00 00       	jmp    c001717d <Vm::faultHandler(regs*)+0x585>
c0016fc0:	83 ec 0c             	sub    esp,0xc
c0016fc3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016fc7:	0f b7 f6             	movzx  esi,si
c0016fca:	50                   	push   eax
c0016fcb:	e8 25 f7 ff ff       	call   c00166f5 <Vm::inbv(unsigned short)>
c0016fd0:	83 c4 0c             	add    esp,0xc
c0016fd3:	0f b6 c0             	movzx  eax,al
c0016fd6:	50                   	push   eax
c0016fd7:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016fdb:	50                   	push   eax
c0016fdc:	56                   	push   esi
c0016fdd:	e8 d6 fb ff ff       	call   c0016bb8 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016fe2:	83 c4 10             	add    esp,0x10
c0016fe5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016fe8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016fec:	74 03                	je     c0016ff1 <Vm::faultHandler(regs*)+0x3f9>
c0016fee:	48                   	dec    eax
c0016fef:	eb 01                	jmp    c0016ff2 <Vm::faultHandler(regs*)+0x3fa>
c0016ff1:	40                   	inc    eax
c0016ff2:	0f b7 c0             	movzx  eax,ax
c0016ff5:	e9 8b 00 00 00       	jmp    c0017085 <Vm::faultHandler(regs*)+0x48d>
c0016ffa:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016ffd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017000:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017005:	74 29                	je     c0017030 <Vm::faultHandler(regs*)+0x438>
c0017007:	3d ff ff 00 00       	cmp    eax,0xffff
c001700c:	76 22                	jbe    c0017030 <Vm::faultHandler(regs*)+0x438>
c001700e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017012:	50                   	push   eax
c0017013:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017017:	50                   	push   eax
c0017018:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001701c:	50                   	push   eax
c001701d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017021:	50                   	push   eax
c0017022:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017026:	50                   	push   eax
c0017027:	6a 6d                	push   0x6d
c0017029:	6a 6d                	push   0x6d
c001702b:	e9 4d 01 00 00       	jmp    c001717d <Vm::faultHandler(regs*)+0x585>
c0017030:	0f b7 c8             	movzx  ecx,ax
c0017033:	0f b7 f6             	movzx  esi,si
c0017036:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017039:	83 e5 01             	and    ebp,0x1
c001703c:	74 20                	je     c001705e <Vm::faultHandler(regs*)+0x466>
c001703e:	ed                   	in     eax,dx
c001703f:	55                   	push   ebp
c0017040:	50                   	push   eax
c0017041:	51                   	push   ecx
c0017042:	56                   	push   esi
c0017043:	e8 9b fb ff ff       	call   c0016be3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017048:	83 c4 10             	add    esp,0x10
c001704b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001704e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017052:	74 05                	je     c0017059 <Vm::faultHandler(regs*)+0x461>
c0017054:	83 e8 04             	sub    eax,0x4
c0017057:	eb 27                	jmp    c0017080 <Vm::faultHandler(regs*)+0x488>
c0017059:	83 c0 04             	add    eax,0x4
c001705c:	eb 22                	jmp    c0017080 <Vm::faultHandler(regs*)+0x488>
c001705e:	66 ed                	in     ax,dx
c0017060:	0f b7 c0             	movzx  eax,ax
c0017063:	57                   	push   edi
c0017064:	50                   	push   eax
c0017065:	51                   	push   ecx
c0017066:	56                   	push   esi
c0017067:	e8 61 fb ff ff       	call   c0016bcd <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001706c:	83 c4 10             	add    esp,0x10
c001706f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017072:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017076:	74 05                	je     c001707d <Vm::faultHandler(regs*)+0x485>
c0017078:	83 e8 02             	sub    eax,0x2
c001707b:	eb 03                	jmp    c0017080 <Vm::faultHandler(regs*)+0x488>
c001707d:	83 c0 02             	add    eax,0x2
c0017080:	25 ff ff 00 00       	and    eax,0xffff
c0017085:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017088:	e9 20 02 00 00       	jmp    c00172ad <Vm::faultHandler(regs*)+0x6b5>
c001708d:	8d 46 ff             	lea    eax,[esi-0x1]
c0017090:	0f b6 f0             	movzx  esi,al
c0017093:	83 fe 05             	cmp    esi,0x5
c0017096:	77 23                	ja     c00170bb <Vm::faultHandler(regs*)+0x4c3>
c0017098:	ff 24 b5 6c 24 02 c0 	jmp    DWORD PTR [esi*4-0x3ffddb94]
c001709f:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00170a4:	eb 15                	jmp    c00170bb <Vm::faultHandler(regs*)+0x4c3>
c00170a6:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00170aa:	eb 0f                	jmp    c00170bb <Vm::faultHandler(regs*)+0x4c3>
c00170ac:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00170b0:	eb 09                	jmp    c00170bb <Vm::faultHandler(regs*)+0x4c3>
c00170b2:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00170b6:	eb 03                	jmp    c00170bb <Vm::faultHandler(regs*)+0x4c3>
c00170b8:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00170bb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00170be:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00170c3:	74 29                	je     c00170ee <Vm::faultHandler(regs*)+0x4f6>
c00170c5:	3d ff ff 00 00       	cmp    eax,0xffff
c00170ca:	76 22                	jbe    c00170ee <Vm::faultHandler(regs*)+0x4f6>
c00170cc:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00170d0:	50                   	push   eax
c00170d1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00170d5:	50                   	push   eax
c00170d6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00170da:	50                   	push   eax
c00170db:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00170df:	50                   	push   eax
c00170e0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00170e4:	50                   	push   eax
c00170e5:	6a 6e                	push   0x6e
c00170e7:	6a 6e                	push   0x6e
c00170e9:	e9 8f 00 00 00       	jmp    c001717d <Vm::faultHandler(regs*)+0x585>
c00170ee:	0f b7 c0             	movzx  eax,ax
c00170f1:	52                   	push   edx
c00170f2:	52                   	push   edx
c00170f3:	50                   	push   eax
c00170f4:	57                   	push   edi
c00170f5:	e8 8a fa ff ff       	call   c0016b84 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00170fa:	59                   	pop    ecx
c00170fb:	0f b6 c0             	movzx  eax,al
c00170fe:	5e                   	pop    esi
c00170ff:	50                   	push   eax
c0017100:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017104:	50                   	push   eax
c0017105:	e8 fe f5 ff ff       	call   c0016708 <Vm::outbv(unsigned short, unsigned char)>
c001710a:	83 c4 10             	add    esp,0x10
c001710d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017110:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017114:	74 03                	je     c0017119 <Vm::faultHandler(regs*)+0x521>
c0017116:	48                   	dec    eax
c0017117:	eb 01                	jmp    c001711a <Vm::faultHandler(regs*)+0x522>
c0017119:	40                   	inc    eax
c001711a:	0f b7 c0             	movzx  eax,ax
c001711d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017120:	e9 88 01 00 00       	jmp    c00172ad <Vm::faultHandler(regs*)+0x6b5>
c0017125:	8d 46 ff             	lea    eax,[esi-0x1]
c0017128:	0f b6 f0             	movzx  esi,al
c001712b:	83 fe 05             	cmp    esi,0x5
c001712e:	77 1e                	ja     c001714e <Vm::faultHandler(regs*)+0x556>
c0017130:	ff 24 b5 84 24 02 c0 	jmp    DWORD PTR [esi*4-0x3ffddb7c]
c0017137:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001713b:	eb 11                	jmp    c001714e <Vm::faultHandler(regs*)+0x556>
c001713d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017140:	eb 0c                	jmp    c001714e <Vm::faultHandler(regs*)+0x556>
c0017142:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0017145:	eb 07                	jmp    c001714e <Vm::faultHandler(regs*)+0x556>
c0017147:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001714a:	eb 02                	jmp    c001714e <Vm::faultHandler(regs*)+0x556>
c001714c:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001714e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017151:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017156:	74 37                	je     c001718f <Vm::faultHandler(regs*)+0x597>
c0017158:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001715e:	76 2f                	jbe    c001718f <Vm::faultHandler(regs*)+0x597>
c0017160:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017164:	50                   	push   eax
c0017165:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017169:	50                   	push   eax
c001716a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001716e:	50                   	push   eax
c001716f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017173:	50                   	push   eax
c0017174:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017178:	50                   	push   eax
c0017179:	6a 6f                	push   0x6f
c001717b:	6a 6f                	push   0x6f
c001717d:	68 10 24 02 c0       	push   0xc0022410
c0017182:	e8 be 37 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017187:	83 c4 20             	add    esp,0x20
c001718a:	e9 83 01 00 00       	jmp    c0017312 <Vm::faultHandler(regs*)+0x71a>
c001718f:	0f b7 d7             	movzx  edx,di
c0017192:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017195:	0f b7 c6             	movzx  eax,si
c0017198:	81 e1 00 04 00 00    	and    ecx,0x400
c001719e:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00171a1:	83 e5 01             	and    ebp,0x1
c00171a4:	74 1d                	je     c00171c3 <Vm::faultHandler(regs*)+0x5cb>
c00171a6:	55                   	push   ebp
c00171a7:	55                   	push   ebp
c00171a8:	50                   	push   eax
c00171a9:	52                   	push   edx
c00171aa:	e8 f8 f9 ff ff       	call   c0016ba7 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00171af:	83 c4 10             	add    esp,0x10
c00171b2:	89 fa                	mov    edx,edi
c00171b4:	ef                   	out    dx,eax
c00171b5:	85 c9                	test   ecx,ecx
c00171b7:	74 05                	je     c00171be <Vm::faultHandler(regs*)+0x5c6>
c00171b9:	83 ee 04             	sub    esi,0x4
c00171bc:	eb 21                	jmp    c00171df <Vm::faultHandler(regs*)+0x5e7>
c00171be:	83 c6 04             	add    esi,0x4
c00171c1:	eb 1c                	jmp    c00171df <Vm::faultHandler(regs*)+0x5e7>
c00171c3:	55                   	push   ebp
c00171c4:	55                   	push   ebp
c00171c5:	50                   	push   eax
c00171c6:	52                   	push   edx
c00171c7:	e8 c9 f9 ff ff       	call   c0016b95 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00171cc:	83 c4 10             	add    esp,0x10
c00171cf:	89 fa                	mov    edx,edi
c00171d1:	66 ef                	out    dx,ax
c00171d3:	85 c9                	test   ecx,ecx
c00171d5:	74 05                	je     c00171dc <Vm::faultHandler(regs*)+0x5e4>
c00171d7:	83 ee 02             	sub    esi,0x2
c00171da:	eb 03                	jmp    c00171df <Vm::faultHandler(regs*)+0x5e7>
c00171dc:	83 c6 02             	add    esi,0x2
c00171df:	81 e6 ff ff 00 00    	and    esi,0xffff
c00171e5:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00171e8:	e9 c0 00 00 00       	jmp    c00172ad <Vm::faultHandler(regs*)+0x6b5>
c00171ed:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00171f4:	83 ec 0c             	sub    esp,0xc
c00171f7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00171fb:	50                   	push   eax
c00171fc:	e8 f4 f4 ff ff       	call   c00166f5 <Vm::inbv(unsigned short)>
c0017201:	0f b6 c0             	movzx  eax,al
c0017204:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017207:	eb 3a                	jmp    c0017243 <Vm::faultHandler(regs*)+0x64b>
c0017209:	83 e5 01             	and    ebp,0x1
c001720c:	74 07                	je     c0017215 <Vm::faultHandler(regs*)+0x61d>
c001720e:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017212:	ed                   	in     eax,dx
c0017213:	eb 14                	jmp    c0017229 <Vm::faultHandler(regs*)+0x631>
c0017215:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017218:	66 31 f6             	xor    si,si
c001721b:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001721e:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017222:	66 ed                	in     ax,dx
c0017224:	0f b7 c0             	movzx  eax,ax
c0017227:	09 f0                	or     eax,esi
c0017229:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001722c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017230:	eb 7e                	jmp    c00172b0 <Vm::faultHandler(regs*)+0x6b8>
c0017232:	52                   	push   edx
c0017233:	52                   	push   edx
c0017234:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017238:	50                   	push   eax
c0017239:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001723d:	50                   	push   eax
c001723e:	e8 c5 f4 ff ff       	call   c0016708 <Vm::outbv(unsigned short, unsigned char)>
c0017243:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017247:	eb 4f                	jmp    c0017298 <Vm::faultHandler(regs*)+0x6a0>
c0017249:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001724c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017250:	83 e5 01             	and    ebp,0x1
c0017253:	74 03                	je     c0017258 <Vm::faultHandler(regs*)+0x660>
c0017255:	ef                   	out    dx,eax
c0017256:	eb d4                	jmp    c001722c <Vm::faultHandler(regs*)+0x634>
c0017258:	66 ef                	out    dx,ax
c001725a:	eb d0                	jmp    c001722c <Vm::faultHandler(regs*)+0x634>
c001725c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017263:	83 ec 0c             	sub    esp,0xc
c0017266:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001726a:	50                   	push   eax
c001726b:	e8 85 f4 ff ff       	call   c00166f5 <Vm::inbv(unsigned short)>
c0017270:	0f b6 c0             	movzx  eax,al
c0017273:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017276:	eb 1d                	jmp    c0017295 <Vm::faultHandler(regs*)+0x69d>
c0017278:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001727b:	83 e5 01             	and    ebp,0x1
c001727e:	74 03                	je     c0017283 <Vm::faultHandler(regs*)+0x68b>
c0017280:	ed                   	in     eax,dx
c0017281:	eb 0d                	jmp    c0017290 <Vm::faultHandler(regs*)+0x698>
c0017283:	66 ed                	in     ax,dx
c0017285:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017288:	0f b7 c0             	movzx  eax,ax
c001728b:	66 31 d2             	xor    dx,dx
c001728e:	09 d0                	or     eax,edx
c0017290:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017293:	eb 18                	jmp    c00172ad <Vm::faultHandler(regs*)+0x6b5>
c0017295:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017298:	83 c4 10             	add    esp,0x10
c001729b:	eb 13                	jmp    c00172b0 <Vm::faultHandler(regs*)+0x6b8>
c001729d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00172a0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00172a3:	83 e5 01             	and    ebp,0x1
c00172a6:	74 03                	je     c00172ab <Vm::faultHandler(regs*)+0x6b3>
c00172a8:	ef                   	out    dx,eax
c00172a9:	eb 02                	jmp    c00172ad <Vm::faultHandler(regs*)+0x6b5>
c00172ab:	66 ef                	out    dx,ax
c00172ad:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172b0:	b0 01                	mov    al,0x1
c00172b2:	eb 60                	jmp    c0017314 <Vm::faultHandler(regs*)+0x71c>
c00172b4:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00172b8:	50                   	push   eax
c00172b9:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00172bd:	50                   	push   eax
c00172be:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00172c2:	50                   	push   eax
c00172c3:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00172c7:	50                   	push   eax
c00172c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00172cc:	50                   	push   eax
c00172cd:	52                   	push   edx
c00172ce:	52                   	push   edx
c00172cf:	68 3d 24 02 c0       	push   0xc002243d
c00172d4:	e8 6c 36 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00172d9:	83 c4 20             	add    esp,0x20
c00172dc:	83 ec 0c             	sub    esp,0xc
c00172df:	6a 60                	push   0x60
c00172e1:	e8 0f f4 ff ff       	call   c00166f5 <Vm::inbv(unsigned short)>
c00172e6:	83 c4 10             	add    esp,0x10
c00172e9:	0f b6 d0             	movzx  edx,al
c00172ec:	83 fa 1c             	cmp    edx,0x1c
c00172ef:	74 05                	je     c00172f6 <Vm::faultHandler(regs*)+0x6fe>
c00172f1:	83 fa 5a             	cmp    edx,0x5a
c00172f4:	75 e6                	jne    c00172dc <Vm::faultHandler(regs*)+0x6e4>
c00172f6:	0f b6 c0             	movzx  eax,al
c00172f9:	83 f8 1c             	cmp    eax,0x1c
c00172fc:	74 05                	je     c0017303 <Vm::faultHandler(regs*)+0x70b>
c00172fe:	83 f8 5a             	cmp    eax,0x5a
c0017301:	75 0f                	jne    c0017312 <Vm::faultHandler(regs*)+0x71a>
c0017303:	83 ec 0c             	sub    esp,0xc
c0017306:	6a 60                	push   0x60
c0017308:	e8 e8 f3 ff ff       	call   c00166f5 <Vm::inbv(unsigned short)>
c001730d:	83 c4 10             	add    esp,0x10
c0017310:	eb e4                	jmp    c00172f6 <Vm::faultHandler(regs*)+0x6fe>
c0017312:	31 c0                	xor    eax,eax
c0017314:	83 c4 2c             	add    esp,0x2c
c0017317:	5b                   	pop    ebx
c0017318:	5e                   	pop    esi
c0017319:	5f                   	pop    edi
c001731a:	5d                   	pop    ebp
c001731b:	c3                   	ret    

c001731c <noCopro(unsigned long)>:
c001731c:	c3                   	ret    

c001731d <nmiHandler(regs*, void*)>:
c001731d:	83 ec 0c             	sub    esp,0xc
c0017320:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017325:	83 ec 0c             	sub    esp,0xc
c0017328:	50                   	push   eax
c0017329:	e8 88 ff fe ff       	call   c00072b6 <Computer::handleNMI()>
c001732e:	83 c4 10             	add    esp,0x10
c0017331:	90                   	nop
c0017332:	83 c4 0c             	add    esp,0xc
c0017335:	c3                   	ret    

c0017336 <doubleFault(regs*, void*)>:
c0017336:	55                   	push   ebp
c0017337:	89 e5                	mov    ebp,esp
c0017339:	83 ec 08             	sub    esp,0x8
c001733c:	83 ec 0c             	sub    esp,0xc
c001733f:	68 9c 24 02 c0       	push   0xc002249c
c0017344:	e8 08 9f ff ff       	call   c0011251 <KePanic(char const*)>
c0017349:	83 c4 10             	add    esp,0x10
c001734c:	90                   	nop
c001734d:	c9                   	leave  
c001734e:	c3                   	ret    

c001734f <displayDebugInfo(regs*)>:
c001734f:	83 ec 1c             	sub    esp,0x1c
c0017352:	0f 20 c0             	mov    eax,cr0
c0017355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017359:	0f 20 d0             	mov    eax,cr2
c001735c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017360:	0f 20 d8             	mov    eax,cr3
c0017363:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017367:	0f 20 e0             	mov    eax,cr4
c001736a:	89 04 24             	mov    DWORD PTR [esp],eax
c001736d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017371:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017374:	83 ec 08             	sub    esp,0x8
c0017377:	50                   	push   eax
c0017378:	68 b8 24 02 c0       	push   0xc00224b8
c001737d:	e8 c3 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017382:	83 c4 10             	add    esp,0x10
c0017385:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017389:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001738c:	83 ec 08             	sub    esp,0x8
c001738f:	50                   	push   eax
c0017390:	68 a9 24 02 c0       	push   0xc00224a9
c0017395:	e8 ab 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001739a:	83 c4 10             	add    esp,0x10
c001739d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173a1:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00173a4:	83 ec 08             	sub    esp,0x8
c00173a7:	50                   	push   eax
c00173a8:	68 b4 24 02 c0       	push   0xc00224b4
c00173ad:	e8 93 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00173b2:	83 c4 10             	add    esp,0x10
c00173b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173b9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00173bc:	83 ec 08             	sub    esp,0x8
c00173bf:	50                   	push   eax
c00173c0:	68 c3 24 02 c0       	push   0xc00224c3
c00173c5:	e8 7b 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00173ca:	83 c4 10             	add    esp,0x10
c00173cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173d1:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00173d4:	83 ec 08             	sub    esp,0x8
c00173d7:	50                   	push   eax
c00173d8:	68 ce 24 02 c0       	push   0xc00224ce
c00173dd:	e8 63 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00173e2:	83 c4 10             	add    esp,0x10
c00173e5:	83 ec 08             	sub    esp,0x8
c00173e8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00173ec:	68 d9 24 02 c0       	push   0xc00224d9
c00173f1:	e8 4f 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00173f6:	83 c4 10             	add    esp,0x10
c00173f9:	83 ec 08             	sub    esp,0x8
c00173fc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017400:	68 e4 24 02 c0       	push   0xc00224e4
c0017405:	e8 3b 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001740a:	83 c4 10             	add    esp,0x10
c001740d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017411:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017414:	c1 e0 05             	shl    eax,0x5
c0017417:	8d 90 60 34 02 c0    	lea    edx,[eax-0x3ffdcba0]
c001741d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017421:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017424:	83 ec 04             	sub    esp,0x4
c0017427:	52                   	push   edx
c0017428:	50                   	push   eax
c0017429:	68 ef 24 02 c0       	push   0xc00224ef
c001742e:	e8 12 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017433:	83 c4 10             	add    esp,0x10
c0017436:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001743b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017441:	83 ec 0c             	sub    esp,0xc
c0017444:	50                   	push   eax
c0017445:	e8 0f 13 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c001744a:	83 c4 10             	add    esp,0x10
c001744d:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017452:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017458:	83 ec 08             	sub    esp,0x8
c001745b:	68 fe 24 02 c0       	push   0xc00224fe
c0017460:	50                   	push   eax
c0017461:	e8 40 16 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017466:	83 c4 10             	add    esp,0x10
c0017469:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001746e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017474:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017478:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001747b:	83 ec 08             	sub    esp,0x8
c001747e:	52                   	push   edx
c001747f:	50                   	push   eax
c0017480:	e8 db 15 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017485:	83 c4 10             	add    esp,0x10
c0017488:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001748d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017493:	83 ec 08             	sub    esp,0x8
c0017496:	68 0c 25 02 c0       	push   0xc002250c
c001749b:	50                   	push   eax
c001749c:	e8 05 16 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00174a1:	83 c4 10             	add    esp,0x10
c00174a4:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174a9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174af:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00174b4:	8b 12                	mov    edx,DWORD PTR [edx]
c00174b6:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00174b9:	83 c2 0c             	add    edx,0xc
c00174bc:	83 ec 08             	sub    esp,0x8
c00174bf:	52                   	push   edx
c00174c0:	50                   	push   eax
c00174c1:	e8 e0 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00174c6:	83 c4 10             	add    esp,0x10
c00174c9:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174ce:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174d4:	83 ec 08             	sub    esp,0x8
c00174d7:	68 15 25 02 c0       	push   0xc0022515
c00174dc:	50                   	push   eax
c00174dd:	e8 c4 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00174e2:	83 c4 10             	add    esp,0x10
c00174e5:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174ea:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174f0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00174f4:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00174f7:	83 ec 08             	sub    esp,0x8
c00174fa:	52                   	push   edx
c00174fb:	50                   	push   eax
c00174fc:	e8 5f 15 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017501:	83 c4 10             	add    esp,0x10
c0017504:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017509:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001750f:	83 ec 08             	sub    esp,0x8
c0017512:	68 1d 25 02 c0       	push   0xc002251d
c0017517:	50                   	push   eax
c0017518:	e8 89 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001751d:	83 c4 10             	add    esp,0x10
c0017520:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017525:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001752b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001752f:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017532:	83 ec 08             	sub    esp,0x8
c0017535:	52                   	push   edx
c0017536:	50                   	push   eax
c0017537:	e8 24 15 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c001753c:	83 c4 10             	add    esp,0x10
c001753f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017544:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001754a:	83 ec 08             	sub    esp,0x8
c001754d:	68 25 25 02 c0       	push   0xc0022525
c0017552:	50                   	push   eax
c0017553:	e8 4e 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017558:	83 c4 10             	add    esp,0x10
c001755b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017560:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017566:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001756a:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001756d:	83 ec 08             	sub    esp,0x8
c0017570:	52                   	push   edx
c0017571:	50                   	push   eax
c0017572:	e8 e9 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017577:	83 c4 10             	add    esp,0x10
c001757a:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001757f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017585:	83 ec 08             	sub    esp,0x8
c0017588:	68 2d 25 02 c0       	push   0xc002252d
c001758d:	50                   	push   eax
c001758e:	e8 13 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017593:	83 c4 10             	add    esp,0x10
c0017596:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001759b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175a1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00175a5:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00175a8:	83 ec 08             	sub    esp,0x8
c00175ab:	52                   	push   edx
c00175ac:	50                   	push   eax
c00175ad:	e8 ae 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00175b2:	83 c4 10             	add    esp,0x10
c00175b5:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175ba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175c0:	83 ec 08             	sub    esp,0x8
c00175c3:	68 35 25 02 c0       	push   0xc0022535
c00175c8:	50                   	push   eax
c00175c9:	e8 d8 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00175ce:	83 c4 10             	add    esp,0x10
c00175d1:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175d6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00175e0:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00175e3:	83 ec 08             	sub    esp,0x8
c00175e6:	52                   	push   edx
c00175e7:	50                   	push   eax
c00175e8:	e8 73 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00175ed:	83 c4 10             	add    esp,0x10
c00175f0:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175f5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175fb:	83 ec 08             	sub    esp,0x8
c00175fe:	68 3d 25 02 c0       	push   0xc002253d
c0017603:	50                   	push   eax
c0017604:	e8 9d 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017609:	83 c4 10             	add    esp,0x10
c001760c:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017611:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017617:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001761b:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001761e:	83 ec 08             	sub    esp,0x8
c0017621:	52                   	push   edx
c0017622:	50                   	push   eax
c0017623:	e8 38 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017628:	83 c4 10             	add    esp,0x10
c001762b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017630:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017636:	83 ec 08             	sub    esp,0x8
c0017639:	68 45 25 02 c0       	push   0xc0022545
c001763e:	50                   	push   eax
c001763f:	e8 62 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017644:	83 c4 10             	add    esp,0x10
c0017647:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001764c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017652:	83 ec 08             	sub    esp,0x8
c0017655:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017659:	50                   	push   eax
c001765a:	e8 01 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c001765f:	83 c4 10             	add    esp,0x10
c0017662:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017667:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001766d:	83 ec 08             	sub    esp,0x8
c0017670:	68 4e 25 02 c0       	push   0xc002254e
c0017675:	50                   	push   eax
c0017676:	e8 2b 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001767b:	83 c4 10             	add    esp,0x10
c001767e:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017683:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017689:	83 ec 08             	sub    esp,0x8
c001768c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017690:	50                   	push   eax
c0017691:	e8 ca 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017696:	83 c4 10             	add    esp,0x10
c0017699:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001769e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176a4:	83 ec 08             	sub    esp,0x8
c00176a7:	68 56 25 02 c0       	push   0xc0022556
c00176ac:	50                   	push   eax
c00176ad:	e8 f4 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00176b2:	83 c4 10             	add    esp,0x10
c00176b5:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176ba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176c0:	83 ec 08             	sub    esp,0x8
c00176c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00176c7:	50                   	push   eax
c00176c8:	e8 93 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00176cd:	83 c4 10             	add    esp,0x10
c00176d0:	fa                   	cli    
c00176d1:	f4                   	hlt    
c00176d2:	eb fe                	jmp    c00176d2 <displayDebugInfo(regs*)+0x383>

c00176d4 <HalSystemIdle()>:
c00176d4:	56                   	push   esi
c00176d5:	53                   	push   ebx
c00176d6:	83 ec 14             	sub    esp,0x14
c00176d9:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00176de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00176e4:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c00176ea:	83 e0 04             	and    eax,0x4
c00176ed:	0f b6 c0             	movzx  eax,al
c00176f0:	85 c0                	test   eax,eax
c00176f2:	0f 95 c0             	setne  al
c00176f5:	0f b6 c0             	movzx  eax,al
c00176f8:	85 c0                	test   eax,eax
c00176fa:	74 4c                	je     c0017748 <HalSystemIdle()+0x74>
c00176fc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017701:	83 ec 08             	sub    esp,0x8
c0017704:	68 e1 00 00 00       	push   0xe1
c0017709:	50                   	push   eax
c001770a:	e8 b1 f9 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001770f:	83 c4 10             	add    esp,0x10
c0017712:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001771a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001771f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017723:	83 e2 02             	and    edx,0x2
c0017726:	89 d3                	mov    ebx,edx
c0017728:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001772c:	83 e2 00             	and    edx,0x0
c001772f:	89 d6                	mov    esi,edx
c0017731:	56                   	push   esi
c0017732:	53                   	push   ebx
c0017733:	68 e1 00 00 00       	push   0xe1
c0017738:	50                   	push   eax
c0017739:	e8 ae f9 fe ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c001773e:	83 c4 10             	add    esp,0x10
c0017741:	e8 4e 8a fe ff       	call   c0000194 <doTPAUSE>
c0017746:	eb 01                	jmp    c0017749 <HalSystemIdle()+0x75>
c0017748:	f4                   	hlt    
c0017749:	90                   	nop
c001774a:	83 c4 14             	add    esp,0x14
c001774d:	5b                   	pop    ebx
c001774e:	5e                   	pop    esi
c001774f:	c3                   	ret    

c0017750 <displayProgramFault(char const*)>:
c0017750:	83 ec 0c             	sub    esp,0xc
c0017753:	83 ec 0c             	sub    esp,0xc
c0017756:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001775a:	e8 e6 31 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001775f:	83 c4 10             	add    esp,0x10
c0017762:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017767:	8b 00                	mov    eax,DWORD PTR [eax]
c0017769:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001776c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017772:	85 c0                	test   eax,eax
c0017774:	74 21                	je     c0017797 <displayProgramFault(char const*)+0x47>
c0017776:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001777b:	8b 00                	mov    eax,DWORD PTR [eax]
c001777d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017780:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017786:	6a 04                	push   0x4
c0017788:	6a 0f                	push   0xf
c001778a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001778e:	50                   	push   eax
c001778f:	e8 84 13 ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017794:	83 c4 10             	add    esp,0x10
c0017797:	90                   	nop
c0017798:	83 c4 0c             	add    esp,0xc
c001779b:	c3                   	ret    

c001779c <gpFault(regs*, void*)>:
c001779c:	83 ec 1c             	sub    esp,0x1c
c001779f:	c7 05 74 97 02 c0 f8 6b 01 c0 	mov    DWORD PTR ds:0xc0029774,0xc0016bf8
c00177a9:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c00177ae:	85 c0                	test   eax,eax
c00177b0:	74 1e                	je     c00177d0 <gpFault(regs*, void*)+0x34>
c00177b2:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c00177b7:	83 ec 0c             	sub    esp,0xc
c00177ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00177be:	ff d0                	call   eax
c00177c0:	83 c4 10             	add    esp,0x10
c00177c3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00177c7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00177cc:	85 c0                	test   eax,eax
c00177ce:	75 2e                	jne    c00177fe <gpFault(regs*, void*)+0x62>
c00177d0:	83 ec 0c             	sub    esp,0xc
c00177d3:	68 5e 25 02 c0       	push   0xc002255e
c00177d8:	e8 73 ff ff ff       	call   c0017750 <displayProgramFault(char const*)>
c00177dd:	83 c4 10             	add    esp,0x10
c00177e0:	83 ec 0c             	sub    esp,0xc
c00177e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00177e7:	e8 63 fb ff ff       	call   c001734f <displayDebugInfo(regs*)>
c00177ec:	83 c4 10             	add    esp,0x10
c00177ef:	83 ec 0c             	sub    esp,0xc
c00177f2:	6a 00                	push   0x0
c00177f4:	e8 a3 ed ff ff       	call   c001659c <Thr::terminateFromIRQ(int)>
c00177f9:	83 c4 10             	add    esp,0x10
c00177fc:	eb 01                	jmp    c00177ff <gpFault(regs*, void*)+0x63>
c00177fe:	90                   	nop
c00177ff:	83 c4 1c             	add    esp,0x1c
c0017802:	c3                   	ret    

c0017803 <pgFault(regs*, void*)>:
c0017803:	83 ec 1c             	sub    esp,0x1c
c0017806:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001780a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001780d:	0f 20 d0             	mov    eax,cr2
c0017810:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017814:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017818:	83 ec 04             	sub    esp,0x4
c001781b:	52                   	push   edx
c001781c:	50                   	push   eax
c001781d:	68 3c 26 02 c0       	push   0xc002263c
c0017822:	e8 1e 31 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017827:	83 c4 10             	add    esp,0x10
c001782a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001782f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017831:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017834:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001783a:	0f 20 d2             	mov    edx,cr2
c001783d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017841:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017845:	83 ec 08             	sub    esp,0x8
c0017848:	52                   	push   edx
c0017849:	50                   	push   eax
c001784a:	e8 41 2b ff ff       	call   c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>
c001784f:	83 c4 10             	add    esp,0x10
c0017852:	0f b6 c0             	movzx  eax,al
c0017855:	85 c0                	test   eax,eax
c0017857:	75 2e                	jne    c0017887 <pgFault(regs*, void*)+0x84>
c0017859:	83 ec 0c             	sub    esp,0xc
c001785c:	68 77 25 02 c0       	push   0xc0022577
c0017861:	e8 ea fe ff ff       	call   c0017750 <displayProgramFault(char const*)>
c0017866:	83 c4 10             	add    esp,0x10
c0017869:	83 ec 0c             	sub    esp,0xc
c001786c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017870:	e8 da fa ff ff       	call   c001734f <displayDebugInfo(regs*)>
c0017875:	83 c4 10             	add    esp,0x10
c0017878:	83 ec 0c             	sub    esp,0xc
c001787b:	6a 00                	push   0x0
c001787d:	e8 1a ed ff ff       	call   c001659c <Thr::terminateFromIRQ(int)>
c0017882:	83 c4 10             	add    esp,0x10
c0017885:	eb 01                	jmp    c0017888 <pgFault(regs*, void*)+0x85>
c0017887:	90                   	nop
c0017888:	83 c4 1c             	add    esp,0x1c
c001788b:	c3                   	ret    

c001788c <otherISRHandler(regs*, void*)>:
c001788c:	83 ec 0c             	sub    esp,0xc
c001788f:	83 ec 0c             	sub    esp,0xc
c0017892:	68 64 26 02 c0       	push   0xc0022664
c0017897:	e8 b4 fe ff ff       	call   c0017750 <displayProgramFault(char const*)>
c001789c:	83 c4 10             	add    esp,0x10
c001789f:	83 ec 0c             	sub    esp,0xc
c00178a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178a6:	e8 a4 fa ff ff       	call   c001734f <displayDebugInfo(regs*)>
c00178ab:	83 c4 10             	add    esp,0x10
c00178ae:	83 ec 0c             	sub    esp,0xc
c00178b1:	6a 00                	push   0x0
c00178b3:	e8 e4 ec ff ff       	call   c001659c <Thr::terminateFromIRQ(int)>
c00178b8:	83 c4 10             	add    esp,0x10
c00178bb:	90                   	nop
c00178bc:	83 c4 0c             	add    esp,0xc
c00178bf:	c3                   	ret    

c00178c0 <opcodeFault(regs*, void*)>:
c00178c0:	55                   	push   ebp
c00178c1:	89 e5                	mov    ebp,esp
c00178c3:	83 ec 08             	sub    esp,0x8
c00178c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178c9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00178cc:	83 ec 08             	sub    esp,0x8
c00178cf:	50                   	push   eax
c00178d0:	68 82 25 02 c0       	push   0xc0022582
c00178d5:	e8 6b 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00178da:	83 c4 10             	add    esp,0x10
c00178dd:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00178e2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00178e8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00178ee:	0f b6 c0             	movzx  eax,al
c00178f1:	85 c0                	test   eax,eax
c00178f3:	74 21                	je     c0017916 <opcodeFault(regs*, void*)+0x56>
c00178f5:	83 ec 0c             	sub    esp,0xc
c00178f8:	68 8c 26 02 c0       	push   0xc002268c
c00178fd:	e8 43 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017902:	83 c4 10             	add    esp,0x10
c0017905:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017908:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001790b:	8d 50 19             	lea    edx,[eax+0x19]
c001790e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017911:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017914:	eb 2b                	jmp    c0017941 <opcodeFault(regs*, void*)+0x81>
c0017916:	83 ec 0c             	sub    esp,0xc
c0017919:	68 90 25 02 c0       	push   0xc0022590
c001791e:	e8 2d fe ff ff       	call   c0017750 <displayProgramFault(char const*)>
c0017923:	83 c4 10             	add    esp,0x10
c0017926:	83 ec 0c             	sub    esp,0xc
c0017929:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001792c:	e8 1e fa ff ff       	call   c001734f <displayDebugInfo(regs*)>
c0017931:	83 c4 10             	add    esp,0x10
c0017934:	83 ec 0c             	sub    esp,0xc
c0017937:	6a 00                	push   0x0
c0017939:	e8 5e ec ff ff       	call   c001659c <Thr::terminateFromIRQ(int)>
c001793e:	83 c4 10             	add    esp,0x10
c0017941:	c9                   	leave  
c0017942:	c3                   	ret    

c0017943 <i386SaveCoprocessor(void*)>:
c0017943:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017947:	83 c0 3f             	add    eax,0x3f
c001794a:	83 e0 c0             	and    eax,0xffffffc0
c001794d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017951:	ff 25 70 97 02 c0    	jmp    DWORD PTR ds:0xc0029770

c0017957 <i386LoadCoprocessor(void*)>:
c0017957:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001795b:	83 c0 3f             	add    eax,0x3f
c001795e:	83 e0 c0             	and    eax,0xffffffc0
c0017961:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017965:	ff 25 6c 97 02 c0    	jmp    DWORD PTR ds:0xc002976c

c001796b <x87EmulHandler(regs*, void*)>:
c001796b:	53                   	push   ebx
c001796c:	83 ec 08             	sub    esp,0x8
c001796f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017974:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017978:	74 10                	je     c001798a <x87EmulHandler(regs*, void*)+0x1f>
c001797a:	83 ec 0c             	sub    esp,0xc
c001797d:	68 9d 25 02 c0       	push   0xc002259d
c0017982:	e8 ca 98 ff ff       	call   c0011251 <KePanic(char const*)>
c0017987:	83 c4 10             	add    esp,0x10
c001798a:	0f 20 c0             	mov    eax,cr0
c001798d:	a8 08                	test   al,0x8
c001798f:	74 59                	je     c00179ea <x87EmulHandler(regs*, void*)+0x7f>
c0017991:	0f 06                	clts   
c0017993:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017998:	85 c0                	test   eax,eax
c001799a:	74 0e                	je     c00179aa <x87EmulHandler(regs*, void*)+0x3f>
c001799c:	83 ec 0c             	sub    esp,0xc
c001799f:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00179a2:	e8 9c ff ff ff       	call   c0017943 <i386SaveCoprocessor(void*)>
c00179a7:	83 c4 10             	add    esp,0x10
c00179aa:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00179b0:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00179b4:	75 12                	jne    c00179c8 <x87EmulHandler(regs*, void*)+0x5d>
c00179b6:	83 ec 0c             	sub    esp,0xc
c00179b9:	68 40 02 00 00       	push   0x240
c00179be:	e8 f3 00 ff ff       	call   c0007ab6 <malloc>
c00179c3:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00179c6:	eb 10                	jmp    c00179d8 <x87EmulHandler(regs*, void*)+0x6d>
c00179c8:	83 ec 0c             	sub    esp,0xc
c00179cb:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c00179d0:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00179d3:	e8 7f ff ff ff       	call   c0017957 <i386LoadCoprocessor(void*)>
c00179d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00179dd:	83 c4 10             	add    esp,0x10
c00179e0:	a3 68 97 02 c0       	mov    ds:0xc0029768,eax
c00179e5:	83 c4 08             	add    esp,0x8
c00179e8:	5b                   	pop    ebx
c00179e9:	c3                   	ret    
c00179ea:	83 ec 0c             	sub    esp,0xc
c00179ed:	68 b1 25 02 c0       	push   0xc00225b1
c00179f2:	e8 4e 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00179f7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00179ff:	83 c4 18             	add    esp,0x18
c0017a02:	5b                   	pop    ebx
c0017a03:	e9 94 eb ff ff       	jmp    c001659c <Thr::terminateFromIRQ(int)>

c0017a08 <HalInitialiseCoprocessor()>:
c0017a08:	83 ec 10             	sub    esp,0x10
c0017a0b:	c7 05 68 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029768,0x0
c0017a15:	6a 00                	push   0x0
c0017a17:	68 6b 79 01 c0       	push   0xc001796b
c0017a1c:	6a 07                	push   0x7
c0017a1e:	e8 33 51 ff ff       	call   c000cb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017a23:	e8 48 70 00 00       	call   c001ea70 <avxDetect>
c0017a28:	83 c4 10             	add    esp,0x10
c0017a2b:	85 c0                	test   eax,eax
c0017a2d:	74 1c                	je     c0017a4b <HalInitialiseCoprocessor()+0x43>
c0017a2f:	c7 05 70 97 02 c0 9a ea 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ea9a
c0017a39:	c7 05 6c 97 02 c0 ab ea 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001eaab
c0017a43:	83 c4 0c             	add    esp,0xc
c0017a46:	e9 71 70 00 00       	jmp    c001eabc <avxInit>
c0017a4b:	e8 b0 73 00 00       	call   c001ee00 <absolutelyNoChanceInHell>
c0017a50:	85 c0                	test   eax,eax
c0017a52:	74 1c                	je     c0017a70 <HalInitialiseCoprocessor()+0x68>
c0017a54:	c7 05 70 97 02 c0 18 ee 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ee18
c0017a5e:	c7 05 6c 97 02 c0 20 ee 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ee20
c0017a68:	83 c4 0c             	add    esp,0xc
c0017a6b:	e9 b8 73 00 00       	jmp    c001ee28 <sseInit>
c0017a70:	e8 d1 73 00 00       	call   c001ee46 <x87Detect>
c0017a75:	85 c0                	test   eax,eax
c0017a77:	74 1c                	je     c0017a95 <HalInitialiseCoprocessor()+0x8d>
c0017a79:	c7 05 70 97 02 c0 61 ee 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ee61
c0017a83:	c7 05 6c 97 02 c0 68 ee 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ee68
c0017a8d:	83 c4 0c             	add    esp,0xc
c0017a90:	e9 da 73 00 00       	jmp    c001ee6f <x87Init>
c0017a95:	c7 05 70 97 02 c0 1c 73 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001731c
c0017a9f:	c7 05 6c 97 02 c0 1c 73 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001731c
c0017aa9:	0f 20 c0             	mov    eax,cr0
c0017aac:	83 c8 04             	or     eax,0x4
c0017aaf:	0f 22 c0             	mov    cr0,eax
c0017ab2:	83 c4 0c             	add    esp,0xc
c0017ab5:	c3                   	ret    

c0017ab6 <HalPanic(char const*)>:
c0017ab6:	53                   	push   ebx
c0017ab7:	83 ec 10             	sub    esp,0x10
c0017aba:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017abe:	fa                   	cli    
c0017abf:	53                   	push   ebx
c0017ac0:	68 c7 25 02 c0       	push   0xc00225c7
c0017ac5:	e8 7b 2e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017aca:	a1 64 97 02 c0       	mov    eax,ds:0xc0029764
c0017acf:	83 c4 10             	add    esp,0x10
c0017ad2:	85 c0                	test   eax,eax
c0017ad4:	74 09                	je     c0017adf <HalPanic(char const*)+0x29>
c0017ad6:	83 ec 0c             	sub    esp,0xc
c0017ad9:	53                   	push   ebx
c0017ada:	ff d0                	call   eax
c0017adc:	83 c4 10             	add    esp,0x10
c0017adf:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0017ae4:	85 c0                	test   eax,eax
c0017ae6:	0f 84 dc 00 00 00    	je     c0017bc8 <HalPanic(char const*)+0x112>
c0017aec:	52                   	push   edx
c0017aed:	6a 01                	push   0x1
c0017aef:	6a 0f                	push   0xf
c0017af1:	50                   	push   eax
c0017af2:	e8 bd 0a ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017af7:	59                   	pop    ecx
c0017af8:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017afe:	e8 a1 0c ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0017b03:	58                   	pop    eax
c0017b04:	5a                   	pop    edx
c0017b05:	68 c4 08 02 c0       	push   0xc00208c4
c0017b0a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b10:	e8 d7 0a ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c0017b15:	83 c4 0c             	add    esp,0xc
c0017b18:	6a 01                	push   0x1
c0017b1a:	6a 0f                	push   0xf
c0017b1c:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b22:	e8 8d 0a ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017b27:	59                   	pop    ecx
c0017b28:	58                   	pop    eax
c0017b29:	68 e0 25 02 c0       	push   0xc00225e0
c0017b2e:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b34:	e8 6d 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b39:	83 c4 0c             	add    esp,0xc
c0017b3c:	6a 0f                	push   0xf
c0017b3e:	6a 01                	push   0x1
c0017b40:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b46:	e8 69 0a ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017b4b:	58                   	pop    eax
c0017b4c:	5a                   	pop    edx
c0017b4d:	68 e9 25 02 c0       	push   0xc00225e9
c0017b52:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b58:	e8 49 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b5d:	83 c4 0c             	add    esp,0xc
c0017b60:	6a 01                	push   0x1
c0017b62:	6a 0f                	push   0xf
c0017b64:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b6a:	e8 45 0a ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017b6f:	59                   	pop    ecx
c0017b70:	58                   	pop    eax
c0017b71:	68 2d 26 02 c0       	push   0xc002262d
c0017b76:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b7c:	e8 25 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b81:	58                   	pop    eax
c0017b82:	5a                   	pop    edx
c0017b83:	68 f6 25 02 c0       	push   0xc00225f6
c0017b88:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b8e:	e8 13 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b93:	59                   	pop    ecx
c0017b94:	58                   	pop    eax
c0017b95:	68 30 26 02 c0       	push   0xc0022630
c0017b9a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ba0:	e8 01 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017ba5:	58                   	pop    eax
c0017ba6:	5a                   	pop    edx
c0017ba7:	53                   	push   ebx
c0017ba8:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017bae:	e8 f3 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017bb3:	59                   	pop    ecx
c0017bb4:	5b                   	pop    ebx
c0017bb5:	68 2d 26 02 c0       	push   0xc002262d
c0017bba:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017bc0:	e8 e1 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017bc5:	83 c4 10             	add    esp,0x10
c0017bc8:	eb fe                	jmp    c0017bc8 <HalPanic(char const*)+0x112>

c0017bca <HalQueryPerformanceCounter()>:
c0017bca:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017bcf:	31 d2                	xor    edx,edx
c0017bd1:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017bd7:	31 c0                	xor    eax,eax
c0017bd9:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017be0:	74 02                	je     c0017be4 <HalQueryPerformanceCounter()+0x1a>
c0017be2:	0f 31                	rdtsc  
c0017be4:	c3                   	ret    

c0017be5 <HalInitialise()>:
c0017be5:	53                   	push   ebx
c0017be6:	83 ec 08             	sub    esp,0x8
c0017be9:	e8 98 51 ff ff       	call   c000cd86 <setupINTS()>
c0017bee:	80 3d e0 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028be0,0x0
c0017bf5:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017bfa:	75 0f                	jne    c0017c0b <HalInitialise()+0x26>
c0017bfc:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017c02:	83 e2 fe             	and    edx,0xfffffffe
c0017c05:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017c0b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017c11:	c6 05 60 97 02 c0 00 	mov    BYTE PTR ds:0xc0029760,0x0
c0017c18:	83 e2 fe             	and    edx,0xfffffffe
c0017c1b:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017c21:	e8 9e 02 00 00       	call   c0017ec4 <picOpen()>
c0017c26:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017c2d:	74 0a                	je     c0017c39 <HalInitialise()+0x54>
c0017c2f:	e8 e0 01 00 00       	call   c0017e14 <picDisable()>
c0017c34:	e8 ad 67 00 00       	call   c001e3e6 <apicOpen()>
c0017c39:	bb 0f 00 00 00       	mov    ebx,0xf
c0017c3e:	50                   	push   eax
c0017c3f:	6a 00                	push   0x0
c0017c41:	68 8c 78 01 c0       	push   0xc001788c
c0017c46:	6a 00                	push   0x0
c0017c48:	e8 09 4f ff ff       	call   c000cb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c4d:	83 c4 0c             	add    esp,0xc
c0017c50:	6a 00                	push   0x0
c0017c52:	68 8c 78 01 c0       	push   0xc001788c
c0017c57:	6a 01                	push   0x1
c0017c59:	e8 f8 4e ff ff       	call   c000cb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c5e:	83 c4 0c             	add    esp,0xc
c0017c61:	6a 00                	push   0x0
c0017c63:	68 1d 73 01 c0       	push   0xc001731d
c0017c68:	6a 02                	push   0x2
c0017c6a:	e8 e7 4e ff ff       	call   c000cb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c6f:	83 c4 0c             	add    esp,0xc
c0017c72:	6a 00                	push   0x0
c0017c74:	68 8c 78 01 c0       	push   0xc001788c
c0017c79:	6a 03                	push   0x3
c0017c7b:	e8 d6 4e ff ff       	call   c000cb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c80:	83 c4 0c             	add    esp,0xc
c0017c83:	6a 00                	push   0x0
c0017c85:	68 8c 78 01 c0       	push   0xc001788c
c0017c8a:	6a 04                	push   0x4
c0017c8c:	e8 c5 4e ff ff       	call   c000cb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c91:	83 c4 0c             	add    esp,0xc
c0017c94:	6a 00                	push   0x0
c0017c96:	68 8c 78 01 c0       	push   0xc001788c
c0017c9b:	6a 05                	push   0x5
c0017c9d:	e8 b4 4e ff ff       	call   c000cb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ca2:	83 c4 0c             	add    esp,0xc
c0017ca5:	6a 00                	push   0x0
c0017ca7:	68 c0 78 01 c0       	push   0xc00178c0
c0017cac:	6a 06                	push   0x6
c0017cae:	e8 a3 4e ff ff       	call   c000cb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cb3:	83 c4 0c             	add    esp,0xc
c0017cb6:	6a 00                	push   0x0
c0017cb8:	68 36 73 01 c0       	push   0xc0017336
c0017cbd:	6a 08                	push   0x8
c0017cbf:	e8 92 4e ff ff       	call   c000cb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cc4:	83 c4 0c             	add    esp,0xc
c0017cc7:	6a 00                	push   0x0
c0017cc9:	68 8c 78 01 c0       	push   0xc001788c
c0017cce:	6a 09                	push   0x9
c0017cd0:	e8 81 4e ff ff       	call   c000cb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cd5:	83 c4 0c             	add    esp,0xc
c0017cd8:	6a 00                	push   0x0
c0017cda:	68 8c 78 01 c0       	push   0xc001788c
c0017cdf:	6a 0a                	push   0xa
c0017ce1:	e8 70 4e ff ff       	call   c000cb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ce6:	83 c4 0c             	add    esp,0xc
c0017ce9:	6a 00                	push   0x0
c0017ceb:	68 8c 78 01 c0       	push   0xc001788c
c0017cf0:	6a 0b                	push   0xb
c0017cf2:	e8 5f 4e ff ff       	call   c000cb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cf7:	83 c4 0c             	add    esp,0xc
c0017cfa:	6a 00                	push   0x0
c0017cfc:	68 9c 77 01 c0       	push   0xc001779c
c0017d01:	6a 0d                	push   0xd
c0017d03:	e8 4e 4e ff ff       	call   c000cb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d08:	83 c4 0c             	add    esp,0xc
c0017d0b:	6a 00                	push   0x0
c0017d0d:	68 03 78 01 c0       	push   0xc0017803
c0017d12:	6a 0e                	push   0xe
c0017d14:	e8 3d 4e ff ff       	call   c000cb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d19:	83 c4 10             	add    esp,0x10
c0017d1c:	50                   	push   eax
c0017d1d:	6a 00                	push   0x0
c0017d1f:	68 8c 78 01 c0       	push   0xc001788c
c0017d24:	53                   	push   ebx
c0017d25:	43                   	inc    ebx
c0017d26:	e8 2b 4e ff ff       	call   c000cb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d2b:	83 c4 10             	add    esp,0x10
c0017d2e:	83 fb 1e             	cmp    ebx,0x1e
c0017d31:	75 e9                	jne    c0017d1c <HalInitialise()+0x137>
c0017d33:	50                   	push   eax
c0017d34:	6a 00                	push   0x0
c0017d36:	68 39 25 01 c0       	push   0xc0012539
c0017d3b:	6a 60                	push   0x60
c0017d3d:	e8 14 4e ff ff       	call   c000cb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d42:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017d47:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017d51:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017d58:	e8 59 fd fe ff       	call   c0007ab6 <malloc>
c0017d5d:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d60:	89 c3                	mov    ebx,eax
c0017d62:	e8 3b 09 00 00       	call   c00186a2 <RTC::RTC()>
c0017d67:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017d71:	5a                   	pop    edx
c0017d72:	59                   	pop    ecx
c0017d73:	53                   	push   ebx
c0017d74:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017d7a:	e8 a3 48 ff ff       	call   c000c622 <Device::addChild(Device*)>
c0017d7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017d81:	6a 00                	push   0x0
c0017d83:	6a 00                	push   0x0
c0017d85:	6a 00                	push   0x0
c0017d87:	53                   	push   ebx
c0017d88:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017d8b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017d90:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017d96:	83 c4 28             	add    esp,0x28
c0017d99:	5b                   	pop    ebx
c0017d9a:	c3                   	ret    

c0017d9b <HalMakeBeep(int)>:
c0017d9b:	53                   	push   ebx
c0017d9c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017da0:	85 db                	test   ebx,ebx
c0017da2:	75 07                	jne    c0017dab <HalMakeBeep(int)+0x10>
c0017da4:	e4 61                	in     al,0x61
c0017da6:	83 e0 fc             	and    eax,0xfffffffc
c0017da9:	eb 26                	jmp    c0017dd1 <HalMakeBeep(int)+0x36>
c0017dab:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017db0:	99                   	cdq    
c0017db1:	f7 fb                	idiv   ebx
c0017db3:	89 c1                	mov    ecx,eax
c0017db5:	b0 b6                	mov    al,0xb6
c0017db7:	e6 43                	out    0x43,al
c0017db9:	88 c8                	mov    al,cl
c0017dbb:	e6 42                	out    0x42,al
c0017dbd:	89 c8                	mov    eax,ecx
c0017dbf:	c1 e8 08             	shr    eax,0x8
c0017dc2:	e6 42                	out    0x42,al
c0017dc4:	e4 61                	in     al,0x61
c0017dc6:	89 c2                	mov    edx,eax
c0017dc8:	83 ca 03             	or     edx,0x3
c0017dcb:	38 d0                	cmp    al,dl
c0017dcd:	74 04                	je     c0017dd3 <HalMakeBeep(int)+0x38>
c0017dcf:	88 d0                	mov    al,dl
c0017dd1:	e6 61                	out    0x61,al
c0017dd3:	5b                   	pop    ebx
c0017dd4:	c3                   	ret    

c0017dd5 <HalGetRand()>:
c0017dd5:	31 c0                	xor    eax,eax
c0017dd7:	c3                   	ret    

c0017dd8 <HalEndOfInterrupt(int)>:
c0017dd8:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017ddf:	74 23                	je     c0017e04 <HalEndOfInterrupt(int)+0x2c>
c0017de1:	83 ec 14             	sub    esp,0x14
c0017de4:	6a 1b                	push   0x1b
c0017de6:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017dec:	e8 cf f2 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0017df1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017df6:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017e00:	83 c4 1c             	add    esp,0x1c
c0017e03:	c3                   	ret    
c0017e04:	e9 3f 02 00 00       	jmp    c0018048 <picEOI(int)>

c0017e09 <HalRestart()>:
c0017e09:	c3                   	ret    

c0017e0a <HalShutdown()>:
c0017e0a:	c3                   	ret    

c0017e0b <HalSleep()>:
c0017e0b:	c3                   	ret    

c0017e0c <picIoWait()>:
c0017e0c:	eb 00                	jmp    c0017e0e <picIoWait()+0x2>
c0017e0e:	eb 00                	jmp    c0017e10 <picIoWait()+0x4>
c0017e10:	90                   	nop
c0017e11:	c3                   	ret    
c0017e12:	66 90                	xchg   ax,ax

c0017e14 <picDisable()>:
c0017e14:	83 ec 10             	sub    esp,0x10
c0017e17:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017e1e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0017e23:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017e27:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017e2c:	ee                   	out    dx,al
c0017e2d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017e34:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017e39:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017e3d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017e42:	ee                   	out    dx,al
c0017e43:	90                   	nop
c0017e44:	83 c4 10             	add    esp,0x10
c0017e47:	c3                   	ret    

c0017e48 <picGetIRQReg(int)>:
c0017e48:	83 ec 10             	sub    esp,0x10
c0017e4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e4f:	0f b6 c0             	movzx  eax,al
c0017e52:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017e59:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017e5d:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017e61:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017e66:	ee                   	out    dx,al
c0017e67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e6b:	0f b6 c0             	movzx  eax,al
c0017e6e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017e75:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017e79:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017e7d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017e82:	ee                   	out    dx,al
c0017e83:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017e8a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0017e8f:	89 c2                	mov    edx,eax
c0017e91:	ec                   	in     al,dx
c0017e92:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017e96:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017e9a:	0f b6 c0             	movzx  eax,al
c0017e9d:	c1 e0 08             	shl    eax,0x8
c0017ea0:	89 c1                	mov    ecx,eax
c0017ea2:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017ea9:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0017eae:	89 c2                	mov    edx,eax
c0017eb0:	ec                   	in     al,dx
c0017eb1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017eb5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017eb9:	0f b6 c0             	movzx  eax,al
c0017ebc:	09 c8                	or     eax,ecx
c0017ebe:	83 c4 10             	add    esp,0x10
c0017ec1:	c3                   	ret    
c0017ec2:	66 90                	xchg   ax,ax

c0017ec4 <picOpen()>:
c0017ec4:	83 ec 50             	sub    esp,0x50
c0017ec7:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0017ece:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017ed3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017ed7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017edb:	ee                   	out    dx,al
c0017edc:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0017ee3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017ee8:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017eec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017ef0:	ee                   	out    dx,al
c0017ef1:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017ef9:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0017f01:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017f08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017f0c:	89 c2                	mov    edx,eax
c0017f0e:	ec                   	in     al,dx
c0017f0f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0017f13:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017f17:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017f1b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0017f22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f26:	89 c2                	mov    edx,eax
c0017f28:	ec                   	in     al,dx
c0017f29:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017f2d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017f31:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017f35:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017f3c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0017f41:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017f45:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017f49:	ee                   	out    dx,al
c0017f4a:	e8 bd fe ff ff       	call   c0017e0c <picIoWait()>
c0017f4f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0017f56:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0017f5b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017f5f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017f63:	ee                   	out    dx,al
c0017f64:	e8 a3 fe ff ff       	call   c0017e0c <picIoWait()>
c0017f69:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017f6d:	0f b6 c0             	movzx  eax,al
c0017f70:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0017f77:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0017f7b:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0017f7f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f83:	ee                   	out    dx,al
c0017f84:	e8 83 fe ff ff       	call   c0017e0c <picIoWait()>
c0017f89:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017f8d:	0f b6 c0             	movzx  eax,al
c0017f90:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0017f97:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017f9b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0017f9f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017fa3:	ee                   	out    dx,al
c0017fa4:	e8 63 fe ff ff       	call   c0017e0c <picIoWait()>
c0017fa9:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0017fb0:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0017fb5:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0017fb9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017fbd:	ee                   	out    dx,al
c0017fbe:	e8 49 fe ff ff       	call   c0017e0c <picIoWait()>
c0017fc3:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0017fca:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0017fcf:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0017fd3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017fd7:	ee                   	out    dx,al
c0017fd8:	e8 2f fe ff ff       	call   c0017e0c <picIoWait()>
c0017fdd:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0017fe4:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0017fe9:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0017fed:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017ff1:	ee                   	out    dx,al
c0017ff2:	e8 15 fe ff ff       	call   c0017e0c <picIoWait()>
c0017ff7:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0017ffe:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0018003:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0018007:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001800b:	ee                   	out    dx,al
c001800c:	e8 fb fd ff ff       	call   c0017e0c <picIoWait()>
c0018011:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0018016:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001801d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018021:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018025:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018029:	ee                   	out    dx,al
c001802a:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001802f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0018036:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001803a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001803e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018042:	ee                   	out    dx,al
c0018043:	90                   	nop
c0018044:	83 c4 50             	add    esp,0x50
c0018047:	c3                   	ret    

c0018048 <picEOI(int)>:
c0018048:	83 ec 10             	sub    esp,0x10
c001804b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018050:	75 1e                	jne    c0018070 <picEOI(int)+0x28>
c0018052:	6a 0b                	push   0xb
c0018054:	e8 ef fd ff ff       	call   c0017e48 <picGetIRQReg(int)>
c0018059:	83 c4 04             	add    esp,0x4
c001805c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018061:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018066:	25 80 00 00 00       	and    eax,0x80
c001806b:	74 73                	je     c00180e0 <picEOI(int)+0x98>
c001806d:	8d 76 00             	lea    esi,[esi+0x0]
c0018070:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018075:	75 31                	jne    c00180a8 <picEOI(int)+0x60>
c0018077:	6a 0b                	push   0xb
c0018079:	e8 ca fd ff ff       	call   c0017e48 <picGetIRQReg(int)>
c001807e:	83 c4 04             	add    esp,0x4
c0018081:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018086:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001808a:	98                   	cwde   
c001808b:	85 c0                	test   eax,eax
c001808d:	78 19                	js     c00180a8 <picEOI(int)+0x60>
c001808f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018096:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001809b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001809f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00180a4:	ee                   	out    dx,al
c00180a5:	eb 3d                	jmp    c00180e4 <picEOI(int)+0x9c>
c00180a7:	90                   	nop
c00180a8:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00180ad:	7e 19                	jle    c00180c8 <picEOI(int)+0x80>
c00180af:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00180b6:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00180bb:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00180bf:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00180c4:	ee                   	out    dx,al
c00180c5:	8d 76 00             	lea    esi,[esi+0x0]
c00180c8:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00180cf:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00180d4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00180d8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00180dd:	ee                   	out    dx,al
c00180de:	eb 04                	jmp    c00180e4 <picEOI(int)+0x9c>
c00180e0:	90                   	nop
c00180e1:	8d 76 00             	lea    esi,[esi+0x0]
c00180e4:	83 c4 10             	add    esp,0x10
c00180e7:	c3                   	ret    

c00180e8 <RTC::open(int, int, void*)>:
c00180e8:	31 c0                	xor    eax,eax
c00180ea:	c3                   	ret    
c00180eb:	90                   	nop

c00180ec <RTC::close(int, int, void*)>:
c00180ec:	31 c0                	xor    eax,eax
c00180ee:	c3                   	ret    
c00180ef:	90                   	nop

c00180f0 <RTC::timeInSecondsUTC()>:
c00180f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180f4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00180fa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018100:	c3                   	ret    
c0018101:	90                   	nop

c0018102 <RTC::timeInDatetimeUTC()>:
c0018102:	53                   	push   ebx
c0018103:	83 ec 14             	sub    esp,0x14
c0018106:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001810a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001810e:	8b 10                	mov    edx,DWORD PTR [eax]
c0018110:	50                   	push   eax
c0018111:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018114:	83 c4 0c             	add    esp,0xc
c0018117:	52                   	push   edx
c0018118:	50                   	push   eax
c0018119:	53                   	push   ebx
c001811a:	e8 77 42 ff ff       	call   c000c396 <secondsToDatetime(unsigned long long)>
c001811f:	89 d8                	mov    eax,ebx
c0018121:	83 c4 14             	add    esp,0x14
c0018124:	5b                   	pop    ebx
c0018125:	c2 04 00             	ret    0x4

c0018128 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018128:	56                   	push   esi
c0018129:	53                   	push   ebx
c001812a:	83 ec 14             	sub    esp,0x14
c001812d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018131:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018133:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0018136:	8d 44 24 08          	lea    eax,[esp+0x8]
c001813a:	52                   	push   edx
c001813b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001813f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018143:	50                   	push   eax
c0018144:	e8 4d 42 ff ff       	call   c000c396 <secondsToDatetime(unsigned long long)>
c0018149:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001814d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018151:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018155:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018159:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001815d:	89 f0                	mov    eax,esi
c001815f:	83 c4 20             	add    esp,0x20
c0018162:	5b                   	pop    ebx
c0018163:	5e                   	pop    esi
c0018164:	ff e0                	jmp    eax

c0018166 <RTC::~RTC()>:
c0018166:	83 ec 0c             	sub    esp,0xc
c0018169:	ba cc 26 02 c0       	mov    edx,0xc00226cc
c001816e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018172:	89 10                	mov    DWORD PTR [eax],edx
c0018174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018178:	83 ec 0c             	sub    esp,0xc
c001817b:	50                   	push   eax
c001817c:	e8 a7 3f ff ff       	call   c000c128 <Clock::~Clock()>
c0018181:	83 c4 10             	add    esp,0x10
c0018184:	90                   	nop
c0018185:	83 c4 0c             	add    esp,0xc
c0018188:	c3                   	ret    
c0018189:	90                   	nop

c001818a <RTC::~RTC()>:
c001818a:	83 ec 0c             	sub    esp,0xc
c001818d:	83 ec 0c             	sub    esp,0xc
c0018190:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018194:	e8 cd ff ff ff       	call   c0018166 <RTC::~RTC()>
c0018199:	83 c4 10             	add    esp,0x10
c001819c:	83 ec 08             	sub    esp,0x8
c001819f:	68 60 01 00 00       	push   0x160
c00181a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181a8:	e8 6b 26 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00181ad:	83 c4 10             	add    esp,0x10
c00181b0:	83 c4 0c             	add    esp,0xc
c00181b3:	c3                   	ret    

c00181b4 <RTC::get_update_in_progress_flag()>:
c00181b4:	83 ec 14             	sub    esp,0x14
c00181b7:	6a 0a                	push   0xa
c00181b9:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181bf:	e8 b4 ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00181c4:	83 c4 1c             	add    esp,0x1c
c00181c7:	0f b6 c0             	movzx  eax,al
c00181ca:	c1 e8 07             	shr    eax,0x7
c00181cd:	c3                   	ret    

c00181ce <RTC::completeRTCRefresh()>:
c00181ce:	55                   	push   ebp
c00181cf:	57                   	push   edi
c00181d0:	56                   	push   esi
c00181d1:	53                   	push   ebx
c00181d2:	83 ec 3c             	sub    esp,0x3c
c00181d5:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c00181db:	83 ec 0c             	sub    esp,0xc
c00181de:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00181e2:	e8 cd ff ff ff       	call   c00181b4 <RTC::get_update_in_progress_flag()>
c00181e7:	83 c4 10             	add    esp,0x10
c00181ea:	84 c0                	test   al,al
c00181ec:	74 0e                	je     c00181fc <RTC::completeRTCRefresh()+0x2e>
c00181ee:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00181f4:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c00181fa:	73 df                	jae    c00181db <RTC::completeRTCRefresh()+0xd>
c00181fc:	51                   	push   ecx
c00181fd:	51                   	push   ecx
c00181fe:	6a 00                	push   0x0
c0018200:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018206:	e8 6d ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001820b:	5b                   	pop    ebx
c001820c:	89 c7                	mov    edi,eax
c001820e:	5e                   	pop    esi
c001820f:	6a 02                	push   0x2
c0018211:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018217:	e8 5c ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001821c:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018220:	5d                   	pop    ebp
c0018221:	58                   	pop    eax
c0018222:	6a 04                	push   0x4
c0018224:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001822a:	e8 49 ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001822f:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0018233:	58                   	pop    eax
c0018234:	5a                   	pop    edx
c0018235:	6a 07                	push   0x7
c0018237:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001823d:	e8 36 ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018242:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0018246:	59                   	pop    ecx
c0018247:	5b                   	pop    ebx
c0018248:	6a 08                	push   0x8
c001824a:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018250:	e8 23 ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018255:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018259:	5e                   	pop    esi
c001825a:	5d                   	pop    ebp
c001825b:	6a 09                	push   0x9
c001825d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018263:	e8 10 ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018268:	0f b6 c0             	movzx  eax,al
c001826b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001826f:	83 c4 10             	add    esp,0x10
c0018272:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c0018278:	83 ec 0c             	sub    esp,0xc
c001827b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001827f:	e8 30 ff ff ff       	call   c00181b4 <RTC::get_update_in_progress_flag()>
c0018284:	83 c4 10             	add    esp,0x10
c0018287:	84 c0                	test   al,al
c0018289:	74 0e                	je     c0018299 <RTC::completeRTCRefresh()+0xcb>
c001828b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018291:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c0018297:	73 df                	jae    c0018278 <RTC::completeRTCRefresh()+0xaa>
c0018299:	51                   	push   ecx
c001829a:	51                   	push   ecx
c001829b:	6a 00                	push   0x0
c001829d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182a3:	e8 d0 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00182a8:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00182ac:	5b                   	pop    ebx
c00182ad:	5e                   	pop    esi
c00182ae:	6a 02                	push   0x2
c00182b0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182b6:	e8 bd ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00182bb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00182bf:	5d                   	pop    ebp
c00182c0:	58                   	pop    eax
c00182c1:	6a 04                	push   0x4
c00182c3:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182c9:	e8 aa ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00182ce:	88 c3                	mov    bl,al
c00182d0:	58                   	pop    eax
c00182d1:	5a                   	pop    edx
c00182d2:	6a 07                	push   0x7
c00182d4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182da:	e8 99 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00182df:	59                   	pop    ecx
c00182e0:	89 c6                	mov    esi,eax
c00182e2:	5d                   	pop    ebp
c00182e3:	6a 08                	push   0x8
c00182e5:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182eb:	e8 88 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00182f0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00182f4:	58                   	pop    eax
c00182f5:	5a                   	pop    edx
c00182f6:	6a 09                	push   0x9
c00182f8:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182fe:	e8 75 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018303:	89 f9                	mov    ecx,edi
c0018305:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018309:	0f b6 e8             	movzx  ebp,al
c001830c:	83 c4 10             	add    esp,0x10
c001830f:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0018313:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018318:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001831d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018321:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018325:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0018329:	0f 94 c0             	sete   al
c001832c:	0f b6 fb             	movzx  edi,bl
c001832f:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c0018333:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0018338:	0f 94 c2             	sete   dl
c001833b:	21 d0                	and    eax,edx
c001833d:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0018341:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018345:	0f 94 c2             	sete   dl
c0018348:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001834c:	21 c2                	and    edx,eax
c001834e:	89 f0                	mov    eax,esi
c0018350:	0f b6 c0             	movzx  eax,al
c0018353:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018357:	89 f0                	mov    eax,esi
c0018359:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001835d:	0f 94 c0             	sete   al
c0018360:	21 d0                	and    eax,edx
c0018362:	31 d2                	xor    edx,edx
c0018364:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018368:	0f 94 c2             	sete   dl
c001836b:	85 c2                	test   edx,eax
c001836d:	75 27                	jne    c0018396 <RTC::completeRTCRefresh()+0x1c8>
c001836f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018373:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0018377:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001837b:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001837f:	89 f0                	mov    eax,esi
c0018381:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018385:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018389:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001838d:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018391:	e9 dc fe ff ff       	jmp    c0018272 <RTC::completeRTCRefresh()+0xa4>
c0018396:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001839a:	75 d3                	jne    c001836f <RTC::completeRTCRefresh()+0x1a1>
c001839c:	52                   	push   edx
c001839d:	52                   	push   edx
c001839e:	6a 0b                	push   0xb
c00183a0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183a6:	e8 cd ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00183ab:	83 c4 10             	add    esp,0x10
c00183ae:	a8 04                	test   al,0x4
c00183b0:	75 7a                	jne    c001842c <RTC::completeRTCRefresh()+0x25e>
c00183b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00183b6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00183ba:	83 e1 0f             	and    ecx,0xf
c00183bd:	c1 ea 04             	shr    edx,0x4
c00183c0:	c1 ef 04             	shr    edi,0x4
c00183c3:	6b d2 0a             	imul   edx,edx,0xa
c00183c6:	83 e6 0f             	and    esi,0xf
c00183c9:	01 d1                	add    ecx,edx
c00183cb:	c1 ed 04             	shr    ebp,0x4
c00183ce:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00183d2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00183d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00183da:	c1 ea 04             	shr    edx,0x4
c00183dd:	83 e1 0f             	and    ecx,0xf
c00183e0:	6b d2 0a             	imul   edx,edx,0xa
c00183e3:	6b ed 0a             	imul   ebp,ebp,0xa
c00183e6:	01 d1                	add    ecx,edx
c00183e8:	89 fa                	mov    edx,edi
c00183ea:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00183ee:	83 e2 07             	and    edx,0x7
c00183f1:	89 d9                	mov    ecx,ebx
c00183f3:	6b d2 0a             	imul   edx,edx,0xa
c00183f6:	83 e1 0f             	and    ecx,0xf
c00183f9:	83 e3 80             	and    ebx,0xffffff80
c00183fc:	01 d1                	add    ecx,edx
c00183fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018402:	09 cb                	or     ebx,ecx
c0018404:	c1 ea 04             	shr    edx,0x4
c0018407:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001840b:	6b d2 0a             	imul   edx,edx,0xa
c001840e:	83 e1 0f             	and    ecx,0xf
c0018411:	01 d6                	add    esi,edx
c0018413:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018417:	c1 ea 04             	shr    edx,0x4
c001841a:	6b d2 0a             	imul   edx,edx,0xa
c001841d:	01 d1                	add    ecx,edx
c001841f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018423:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018427:	83 e2 0f             	and    edx,0xf
c001842a:	01 d5                	add    ebp,edx
c001842c:	a8 02                	test   al,0x2
c001842e:	75 15                	jne    c0018445 <RTC::completeRTCRefresh()+0x277>
c0018430:	f6 c3 80             	test   bl,0x80
c0018433:	74 10                	je     c0018445 <RTC::completeRTCRefresh()+0x277>
c0018435:	83 e3 7f             	and    ebx,0x7f
c0018438:	b9 18 00 00 00       	mov    ecx,0x18
c001843d:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018440:	99                   	cdq    
c0018441:	f7 f9                	idiv   ecx
c0018443:	88 d3                	mov    bl,dl
c0018445:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001844b:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018451:	77 06                	ja     c0018459 <RTC::completeRTCRefresh()+0x28b>
c0018453:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018459:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001845e:	31 c9                	xor    ecx,ecx
c0018460:	c1 e0 10             	shl    eax,0x10
c0018463:	89 cd                	mov    ebp,ecx
c0018465:	c1 e7 10             	shl    edi,0x10
c0018468:	31 d2                	xor    edx,edx
c001846a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0018470:	09 c5                	or     ebp,eax
c0018472:	89 f0                	mov    eax,esi
c0018474:	89 e9                	mov    ecx,ebp
c0018476:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001847a:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001847e:	88 c2                	mov    dl,al
c0018480:	88 d9                	mov    cl,bl
c0018482:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0018486:	0f b7 c2             	movzx  eax,dx
c0018489:	09 f8                	or     eax,edi
c001848b:	89 c2                	mov    edx,eax
c001848d:	50                   	push   eax
c001848e:	50                   	push   eax
c001848f:	51                   	push   ecx
c0018490:	52                   	push   edx
c0018491:	e8 81 3d ff ff       	call   c000c217 <datetimeToSeconds(datetime_t)>
c0018496:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001849a:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00184a0:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00184a6:	83 c4 4c             	add    esp,0x4c
c00184a9:	5b                   	pop    ebx
c00184aa:	5e                   	pop    esi
c00184ab:	5f                   	pop    edi
c00184ac:	5d                   	pop    ebp
c00184ad:	c3                   	ret    

c00184ae <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00184ae:	55                   	push   ebp
c00184af:	57                   	push   edi
c00184b0:	56                   	push   esi
c00184b1:	53                   	push   ebx
c00184b2:	83 ec 30             	sub    esp,0x30
c00184b5:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00184b9:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00184bd:	6a 00                	push   0x0
c00184bf:	6a 00                	push   0x0
c00184c1:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00184c7:	e8 c6 ed fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00184cc:	83 c4 0c             	add    esp,0xc
c00184cf:	6a 00                	push   0x0
c00184d1:	6a 02                	push   0x2
c00184d3:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00184d9:	e8 b4 ed fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00184de:	31 d2                	xor    edx,edx
c00184e0:	89 f9                	mov    ecx,edi
c00184e2:	89 f8                	mov    eax,edi
c00184e4:	c1 e9 10             	shr    ecx,0x10
c00184e7:	0f b6 c4             	movzx  eax,ah
c00184ea:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00184ee:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00184f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00184f6:	b9 64 00 00 00       	mov    ecx,0x64
c00184fb:	89 f0                	mov    eax,esi
c00184fd:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018501:	89 f0                	mov    eax,esi
c0018503:	0f b6 c4             	movzx  eax,ah
c0018506:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001850a:	89 f0                	mov    eax,esi
c001850c:	c1 e8 10             	shr    eax,0x10
c001850f:	f7 f1                	div    ecx
c0018511:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018515:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018519:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001851d:	59                   	pop    ecx
c001851e:	5b                   	pop    ebx
c001851f:	89 fb                	mov    ebx,edi
c0018521:	6a 0b                	push   0xb
c0018523:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018529:	e8 4a ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001852e:	83 c4 10             	add    esp,0x10
c0018531:	89 c5                	mov    ebp,eax
c0018533:	a8 04                	test   al,0x4
c0018535:	75 6e                	jne    c00185a5 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018537:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001853b:	31 d2                	xor    edx,edx
c001853d:	0f b6 c1             	movzx  eax,cl
c0018540:	b9 0a 00 00 00       	mov    ecx,0xa
c0018545:	f7 f1                	div    ecx
c0018547:	c1 e0 04             	shl    eax,0x4
c001854a:	09 d0                	or     eax,edx
c001854c:	31 d2                	xor    edx,edx
c001854e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018552:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018557:	f7 f1                	div    ecx
c0018559:	c1 e0 04             	shl    eax,0x4
c001855c:	09 d0                	or     eax,edx
c001855e:	31 d2                	xor    edx,edx
c0018560:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018564:	0f b6 c3             	movzx  eax,bl
c0018567:	f7 f1                	div    ecx
c0018569:	c1 e0 04             	shl    eax,0x4
c001856c:	09 d0                	or     eax,edx
c001856e:	31 d2                	xor    edx,edx
c0018570:	89 c3                	mov    ebx,eax
c0018572:	89 f0                	mov    eax,esi
c0018574:	0f b6 c0             	movzx  eax,al
c0018577:	f7 f1                	div    ecx
c0018579:	c1 e0 04             	shl    eax,0x4
c001857c:	09 d0                	or     eax,edx
c001857e:	31 d2                	xor    edx,edx
c0018580:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018584:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018589:	f7 f1                	div    ecx
c001858b:	c1 e0 04             	shl    eax,0x4
c001858e:	09 d0                	or     eax,edx
c0018590:	31 d2                	xor    edx,edx
c0018592:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018596:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001859a:	f7 f1                	div    ecx
c001859c:	c1 e0 04             	shl    eax,0x4
c001859f:	09 d0                	or     eax,edx
c00185a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00185a5:	83 e5 02             	and    ebp,0x2
c00185a8:	75 1e                	jne    c00185c8 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00185aa:	0f b6 c3             	movzx  eax,bl
c00185ad:	83 f8 0b             	cmp    eax,0xb
c00185b0:	76 10                	jbe    c00185c2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00185b2:	8d 53 f4             	lea    edx,[ebx-0xc]
c00185b5:	88 d3                	mov    bl,dl
c00185b7:	84 d2                	test   dl,dl
c00185b9:	75 02                	jne    c00185bd <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c00185bb:	b3 0c                	mov    bl,0xc
c00185bd:	83 cb 80             	or     ebx,0xffffff80
c00185c0:	eb 06                	jmp    c00185c8 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00185c2:	85 c0                	test   eax,eax
c00185c4:	75 02                	jne    c00185c8 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00185c6:	b3 0c                	mov    bl,0xc
c00185c8:	0f b6 db             	movzx  ebx,bl
c00185cb:	50                   	push   eax
c00185cc:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00185d1:	52                   	push   edx
c00185d2:	6a 00                	push   0x0
c00185d4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185da:	e8 b3 ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185df:	83 c4 0c             	add    esp,0xc
c00185e2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00185e7:	50                   	push   eax
c00185e8:	6a 02                	push   0x2
c00185ea:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185f0:	e8 9d ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185f5:	83 c4 0c             	add    esp,0xc
c00185f8:	53                   	push   ebx
c00185f9:	6a 04                	push   0x4
c00185fb:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018601:	e8 8c ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018606:	83 c4 0c             	add    esp,0xc
c0018609:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001860e:	52                   	push   edx
c001860f:	6a 07                	push   0x7
c0018611:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018617:	e8 76 ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001861c:	83 c4 0c             	add    esp,0xc
c001861f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018624:	50                   	push   eax
c0018625:	6a 08                	push   0x8
c0018627:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001862d:	e8 60 ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018632:	83 c4 0c             	add    esp,0xc
c0018635:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001863a:	55                   	push   ebp
c001863b:	6a 09                	push   0x9
c001863d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018643:	e8 4a ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018648:	5a                   	pop    edx
c0018649:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001864d:	e8 7c fb ff ff       	call   c00181ce <RTC::completeRTCRefresh()>
c0018652:	83 c4 3c             	add    esp,0x3c
c0018655:	b0 01                	mov    al,0x1
c0018657:	5b                   	pop    ebx
c0018658:	5e                   	pop    esi
c0018659:	5f                   	pop    edi
c001865a:	5d                   	pop    ebp
c001865b:	c3                   	ret    

c001865c <rtcIRQHandler(regs*, void*)>:
c001865c:	53                   	push   ebx
c001865d:	83 ec 10             	sub    esp,0x10
c0018660:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018664:	6a 0c                	push   0xc
c0018666:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001866c:	e8 07 eb fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018671:	83 c4 10             	add    esp,0x10
c0018674:	a8 80                	test   al,0x80
c0018676:	74 24                	je     c001869c <rtcIRQHandler(regs*, void*)+0x40>
c0018678:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001867f:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018686:	66 ff 05 78 97 02 c0 	inc    WORD PTR ds:0xc0029778
c001868d:	75 0d                	jne    c001869c <rtcIRQHandler(regs*, void*)+0x40>
c001868f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018693:	83 c4 08             	add    esp,0x8
c0018696:	5b                   	pop    ebx
c0018697:	e9 32 fb ff ff       	jmp    c00181ce <RTC::completeRTCRefresh()>
c001869c:	83 c4 08             	add    esp,0x8
c001869f:	5b                   	pop    ebx
c00186a0:	c3                   	ret    
c00186a1:	90                   	nop

c00186a2 <RTC::RTC()>:
c00186a2:	83 ec 1c             	sub    esp,0x1c
c00186a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186a9:	83 ec 08             	sub    esp,0x8
c00186ac:	68 af 26 02 c0       	push   0xc00226af
c00186b1:	50                   	push   eax
c00186b2:	e8 3b 3a ff ff       	call   c000c0f2 <Clock::Clock(char const*)>
c00186b7:	83 c4 10             	add    esp,0x10
c00186ba:	ba cc 26 02 c0       	mov    edx,0xc00226cc
c00186bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186c3:	89 10                	mov    DWORD PTR [eax],edx
c00186c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186c9:	83 ec 0c             	sub    esp,0xc
c00186cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186d0:	6a 01                	push   0x1
c00186d2:	68 5c 86 01 c0       	push   0xc001865c
c00186d7:	6a 08                	push   0x8
c00186d9:	50                   	push   eax
c00186da:	e8 ef 3e ff ff       	call   c000c5ce <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00186df:	83 c4 20             	add    esp,0x20
c00186e2:	89 c2                	mov    edx,eax
c00186e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186e8:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00186ee:	fa                   	cli    
c00186ef:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00186f4:	83 c0 01             	add    eax,0x1
c00186f7:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00186fc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0018701:	83 ec 08             	sub    esp,0x8
c0018704:	6a 0b                	push   0xb
c0018706:	50                   	push   eax
c0018707:	e8 6c ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001870c:	83 c4 10             	add    esp,0x10
c001870f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018713:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0018718:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001871c:	83 ca 10             	or     edx,0x10
c001871f:	0f b6 d2             	movzx  edx,dl
c0018722:	83 ec 04             	sub    esp,0x4
c0018725:	52                   	push   edx
c0018726:	6a 0b                	push   0xb
c0018728:	50                   	push   eax
c0018729:	e8 64 eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001872e:	83 c4 10             	add    esp,0x10
c0018731:	83 ec 0c             	sub    esp,0xc
c0018734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018738:	e8 91 fa ff ff       	call   c00181ce <RTC::completeRTCRefresh()>
c001873d:	83 c4 10             	add    esp,0x10
c0018740:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0018745:	83 e8 01             	sub    eax,0x1
c0018748:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001874d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0018752:	85 c0                	test   eax,eax
c0018754:	75 01                	jne    c0018757 <RTC::RTC()+0xb5>
c0018756:	fb                   	sti    
c0018757:	90                   	nop
c0018758:	83 c4 1c             	add    esp,0x1c
c001875b:	c3                   	ret    

c001875c <HalConsoleScroll(int, int)>:
c001875c:	83 ec 10             	sub    esp,0x10
c001875f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018767:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001876f:	90                   	nop
c0018770:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018775:	0f 8f e1 00 00 00    	jg     c001885c <HalConsoleScroll(int, int)+0x100>
c001877b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018783:	90                   	nop
c0018784:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001878c:	0f 8f be 00 00 00    	jg     c0018850 <HalConsoleScroll(int, int)+0xf4>
c0018792:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018796:	89 d0                	mov    eax,edx
c0018798:	c1 e0 02             	shl    eax,0x2
c001879b:	01 d0                	add    eax,edx
c001879d:	c1 e0 05             	shl    eax,0x5
c00187a0:	89 c2                	mov    edx,eax
c00187a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187a6:	01 d0                	add    eax,edx
c00187a8:	89 c2                	mov    edx,eax
c00187aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00187ae:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00187b1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00187b5:	89 d0                	mov    eax,edx
c00187b7:	c1 e0 02             	shl    eax,0x2
c00187ba:	01 d0                	add    eax,edx
c00187bc:	c1 e0 05             	shl    eax,0x5
c00187bf:	89 c2                	mov    edx,eax
c00187c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187c5:	01 d0                	add    eax,edx
c00187c7:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00187cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00187d1:	01 c2                	add    edx,eax
c00187d3:	8a 01                	mov    al,BYTE PTR [ecx]
c00187d5:	88 02                	mov    BYTE PTR [edx],al
c00187d7:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00187dc:	75 66                	jne    c0018844 <HalConsoleScroll(int, int)+0xe8>
c00187de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187e2:	83 e0 01             	and    eax,0x1
c00187e5:	74 39                	je     c0018820 <HalConsoleScroll(int, int)+0xc4>
c00187e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187eb:	83 e0 0f             	and    eax,0xf
c00187ee:	88 c2                	mov    dl,al
c00187f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00187f4:	c1 e0 04             	shl    eax,0x4
c00187f7:	09 d0                	or     eax,edx
c00187f9:	88 c1                	mov    cl,al
c00187fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00187ff:	89 d0                	mov    eax,edx
c0018801:	c1 e0 02             	shl    eax,0x2
c0018804:	01 d0                	add    eax,edx
c0018806:	c1 e0 05             	shl    eax,0x5
c0018809:	89 c2                	mov    edx,eax
c001880b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001880f:	01 d0                	add    eax,edx
c0018811:	89 c2                	mov    edx,eax
c0018813:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018817:	01 d0                	add    eax,edx
c0018819:	88 ca                	mov    dl,cl
c001881b:	88 10                	mov    BYTE PTR [eax],dl
c001881d:	eb 25                	jmp    c0018844 <HalConsoleScroll(int, int)+0xe8>
c001881f:	90                   	nop
c0018820:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018824:	89 d0                	mov    eax,edx
c0018826:	c1 e0 02             	shl    eax,0x2
c0018829:	01 d0                	add    eax,edx
c001882b:	c1 e0 05             	shl    eax,0x5
c001882e:	89 c2                	mov    edx,eax
c0018830:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018834:	01 d0                	add    eax,edx
c0018836:	89 c2                	mov    edx,eax
c0018838:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001883c:	01 d0                	add    eax,edx
c001883e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018841:	8d 76 00             	lea    esi,[esi+0x0]
c0018844:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018849:	e9 36 ff ff ff       	jmp    c0018784 <HalConsoleScroll(int, int)+0x28>
c001884e:	66 90                	xchg   ax,ax
c0018850:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018855:	e9 16 ff ff ff       	jmp    c0018770 <HalConsoleScroll(int, int)+0x14>
c001885a:	66 90                	xchg   ax,ax
c001885c:	90                   	nop
c001885d:	83 c4 10             	add    esp,0x10
c0018860:	c3                   	ret    
c0018861:	8d 76 00             	lea    esi,[esi+0x0]

c0018864 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018864:	83 ec 14             	sub    esp,0x14
c0018867:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001886b:	88 04 24             	mov    BYTE PTR [esp],al
c001886e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018871:	0f b6 c0             	movzx  eax,al
c0018874:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018878:	89 d1                	mov    ecx,edx
c001887a:	83 e1 0f             	and    ecx,0xf
c001887d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018881:	c1 e2 04             	shl    edx,0x4
c0018884:	0f b6 d2             	movzx  edx,dl
c0018887:	09 ca                	or     edx,ecx
c0018889:	c1 e2 08             	shl    edx,0x8
c001888c:	09 d0                	or     eax,edx
c001888e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018893:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001889b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001889f:	89 d0                	mov    eax,edx
c00188a1:	c1 e0 02             	shl    eax,0x2
c00188a4:	01 d0                	add    eax,edx
c00188a6:	c1 e0 04             	shl    eax,0x4
c00188a9:	89 c2                	mov    edx,eax
c00188ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00188af:	01 d0                	add    eax,edx
c00188b1:	01 c0                	add    eax,eax
c00188b3:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00188b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00188bb:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00188c0:	66 89 02             	mov    WORD PTR [edx],ax
c00188c3:	90                   	nop
c00188c4:	83 c4 14             	add    esp,0x14
c00188c7:	c3                   	ret    

c00188c8 <HalConsoleCursorUpdate(int, int)>:
c00188c8:	83 ec 20             	sub    esp,0x20
c00188cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188cf:	89 c2                	mov    edx,eax
c00188d1:	c1 e2 02             	shl    edx,0x2
c00188d4:	01 d0                	add    eax,edx
c00188d6:	c1 e0 04             	shl    eax,0x4
c00188d9:	89 c2                	mov    edx,eax
c00188db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00188df:	01 d0                	add    eax,edx
c00188e1:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00188e6:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00188ed:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00188f2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00188f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00188fa:	ee                   	out    dx,al
c00188fb:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018900:	0f b6 c0             	movzx  eax,al
c0018903:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001890a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001890e:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018912:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018916:	ee                   	out    dx,al
c0018917:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001891e:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018923:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018927:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001892b:	ee                   	out    dx,al
c001892c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018931:	c1 e8 08             	shr    eax,0x8
c0018934:	0f b6 c0             	movzx  eax,al
c0018937:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001893e:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018942:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018946:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001894a:	ee                   	out    dx,al
c001894b:	90                   	nop
c001894c:	83 c4 20             	add    esp,0x20
c001894f:	c3                   	ret    

c0018950 <FAT::getName()>:
c0018950:	b8 00 27 02 c0       	mov    eax,0xc0022700
c0018955:	c3                   	ret    
c0018956:	66 90                	xchg   ax,ax

c0018958 <FAT::tell(void*, unsigned long long*)>:
c0018958:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001895d:	75 09                	jne    c0018968 <FAT::tell(void*, unsigned long long*)+0x10>
c001895f:	b8 04 00 00 00       	mov    eax,0x4
c0018964:	c3                   	ret    
c0018965:	8d 76 00             	lea    esi,[esi+0x0]
c0018968:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001896d:	75 09                	jne    c0018978 <FAT::tell(void*, unsigned long long*)+0x20>
c001896f:	b8 04 00 00 00       	mov    eax,0x4
c0018974:	c3                   	ret    
c0018975:	8d 76 00             	lea    esi,[esi+0x0]
c0018978:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001897c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001897f:	ba 00 00 00 00       	mov    edx,0x0
c0018984:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018988:	89 01                	mov    DWORD PTR [ecx],eax
c001898a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001898d:	b8 00 00 00 00       	mov    eax,0x0
c0018992:	c3                   	ret    
c0018993:	90                   	nop

c0018994 <FAT::stat(void*, unsigned long long*)>:
c0018994:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018999:	75 09                	jne    c00189a4 <FAT::stat(void*, unsigned long long*)+0x10>
c001899b:	b8 04 00 00 00       	mov    eax,0x4
c00189a0:	c3                   	ret    
c00189a1:	8d 76 00             	lea    esi,[esi+0x0]
c00189a4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00189a9:	75 09                	jne    c00189b4 <FAT::stat(void*, unsigned long long*)+0x20>
c00189ab:	b8 04 00 00 00       	mov    eax,0x4
c00189b0:	c3                   	ret    
c00189b1:	8d 76 00             	lea    esi,[esi+0x0]
c00189b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00189bb:	ba 00 00 00 00       	mov    edx,0x0
c00189c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00189c4:	89 01                	mov    DWORD PTR [ecx],eax
c00189c6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00189c9:	b8 00 00 00 00       	mov    eax,0x0
c00189ce:	c3                   	ret    
c00189cf:	90                   	nop

c00189d0 <FAT::~FAT()>:
c00189d0:	83 ec 0c             	sub    esp,0xc
c00189d3:	ba 4c 27 02 c0       	mov    edx,0xc002274c
c00189d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189dc:	89 10                	mov    DWORD PTR [eax],edx
c00189de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189e2:	83 ec 0c             	sub    esp,0xc
c00189e5:	50                   	push   eax
c00189e6:	e8 f1 2a ff ff       	call   c000b4dc <Filesystem::~Filesystem()>
c00189eb:	83 c4 10             	add    esp,0x10
c00189ee:	90                   	nop
c00189ef:	83 c4 0c             	add    esp,0xc
c00189f2:	c3                   	ret    
c00189f3:	90                   	nop

c00189f4 <FAT::~FAT()>:
c00189f4:	83 ec 0c             	sub    esp,0xc
c00189f7:	83 ec 0c             	sub    esp,0xc
c00189fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00189fe:	e8 cd ff ff ff       	call   c00189d0 <FAT::~FAT()>
c0018a03:	83 c4 10             	add    esp,0x10
c0018a06:	83 ec 08             	sub    esp,0x8
c0018a09:	6a 08                	push   0x8
c0018a0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018a0f:	e8 04 1e ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0018a14:	83 c4 10             	add    esp,0x10
c0018a17:	83 c4 0c             	add    esp,0xc
c0018a1a:	c3                   	ret    
c0018a1b:	90                   	nop

c0018a1c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018a1c:	83 ec 1c             	sub    esp,0x1c
c0018a1f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018a26:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018a2b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a2f:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018a36:	83 f8 ff             	cmp    eax,0xffffffff
c0018a39:	75 35                	jne    c0018a70 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018a3b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018a3f:	88 c2                	mov    dl,al
c0018a41:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018a46:	01 d0                	add    eax,edx
c0018a48:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018a4c:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018a52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a56:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018a5d:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018a62:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018a66:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018a6d:	eb 19                	jmp    c0018a88 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018a6f:	90                   	nop
c0018a70:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018a74:	88 c2                	mov    dl,al
c0018a76:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a7a:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018a81:	01 d0                	add    eax,edx
c0018a83:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018a87:	90                   	nop
c0018a88:	83 ec 04             	sub    esp,0x4
c0018a8b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018a8f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018a93:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018a97:	50                   	push   eax
c0018a98:	e8 32 c5 fe ff       	call   c0004fcf <f_getlabel>
c0018a9d:	83 c4 10             	add    esp,0x10
c0018aa0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018aa4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018aa9:	75 09                	jne    c0018ab4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018aab:	b8 00 00 00 00       	mov    eax,0x0
c0018ab0:	eb 0a                	jmp    c0018abc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018ab2:	66 90                	xchg   ax,ax
c0018ab4:	b8 01 00 00 00       	mov    eax,0x1
c0018ab9:	8d 76 00             	lea    esi,[esi+0x0]
c0018abc:	83 c4 1c             	add    esp,0x1c
c0018abf:	c3                   	ret    

c0018ac0 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018ac0:	57                   	push   edi
c0018ac1:	83 ec 58             	sub    esp,0x58
c0018ac4:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018acc:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018ad0:	b8 00 00 00 00       	mov    eax,0x0
c0018ad5:	b9 0f 00 00 00       	mov    ecx,0xf
c0018ada:	fc                   	cld    
c0018adb:	89 d7                	mov    edi,edx
c0018add:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018adf:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018ae3:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018aea:	83 f8 ff             	cmp    eax,0xffffffff
c0018aed:	75 35                	jne    c0018b24 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0018aef:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018af3:	88 c2                	mov    dl,al
c0018af5:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018afa:	01 d0                	add    eax,edx
c0018afc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b00:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018b06:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018b0a:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018b11:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018b16:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018b1a:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018b21:	eb 19                	jmp    c0018b3c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0018b23:	90                   	nop
c0018b24:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018b28:	88 c2                	mov    dl,al
c0018b2a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018b2e:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018b35:	01 d0                	add    eax,edx
c0018b37:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b3b:	90                   	nop
c0018b3c:	83 ec 08             	sub    esp,0x8
c0018b3f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018b43:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b47:	50                   	push   eax
c0018b48:	e8 f3 7c fe ff       	call   c0000840 <strcat>
c0018b4d:	83 c4 10             	add    esp,0x10
c0018b50:	83 ec 0c             	sub    esp,0xc
c0018b53:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b57:	50                   	push   eax
c0018b58:	e8 c3 c5 fe ff       	call   c0005120 <f_setlabel>
c0018b5d:	83 c4 10             	add    esp,0x10
c0018b60:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018b64:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018b69:	75 09                	jne    c0018b74 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0018b6b:	b8 00 00 00 00       	mov    eax,0x0
c0018b70:	eb 0a                	jmp    c0018b7c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0018b72:	66 90                	xchg   ax,ax
c0018b74:	b8 01 00 00 00       	mov    eax,0x1
c0018b79:	8d 76 00             	lea    esi,[esi+0x0]
c0018b7c:	83 c4 58             	add    esp,0x58
c0018b7f:	5f                   	pop    edi
c0018b80:	c3                   	ret    
c0018b81:	90                   	nop
c0018b82:	66 90                	xchg   ax,ax

c0018b84 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018b84:	83 ec 2c             	sub    esp,0x2c
c0018b87:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018b8f:	83 ec 08             	sub    esp,0x8
c0018b92:	68 24 27 02 c0       	push   0xc0022724
c0018b97:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018b9b:	e8 b0 7b fe ff       	call   c0000750 <strcmp>
c0018ba0:	83 c4 10             	add    esp,0x10
c0018ba3:	85 c0                	test   eax,eax
c0018ba5:	0f 94 c0             	sete   al
c0018ba8:	0f b6 c0             	movzx  eax,al
c0018bab:	85 c0                	test   eax,eax
c0018bad:	74 0d                	je     c0018bbc <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018baf:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018bb7:	e9 c0 00 00 00       	jmp    c0018c7c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018bbc:	83 ec 08             	sub    esp,0x8
c0018bbf:	68 16 27 02 c0       	push   0xc0022716
c0018bc4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018bc8:	e8 83 7b fe ff       	call   c0000750 <strcmp>
c0018bcd:	83 c4 10             	add    esp,0x10
c0018bd0:	85 c0                	test   eax,eax
c0018bd2:	0f 94 c0             	sete   al
c0018bd5:	0f b6 c0             	movzx  eax,al
c0018bd8:	85 c0                	test   eax,eax
c0018bda:	74 10                	je     c0018bec <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018bdc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018be4:	e9 93 00 00 00       	jmp    c0018c7c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018be9:	8d 76 00             	lea    esi,[esi+0x0]
c0018bec:	83 ec 08             	sub    esp,0x8
c0018bef:	68 1c 27 02 c0       	push   0xc002271c
c0018bf4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018bf8:	e8 53 7b fe ff       	call   c0000750 <strcmp>
c0018bfd:	83 c4 10             	add    esp,0x10
c0018c00:	85 c0                	test   eax,eax
c0018c02:	0f 94 c0             	sete   al
c0018c05:	0f b6 c0             	movzx  eax,al
c0018c08:	85 c0                	test   eax,eax
c0018c0a:	74 0c                	je     c0018c18 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018c0c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018c14:	eb 66                	jmp    c0018c7c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018c16:	66 90                	xchg   ax,ax
c0018c18:	83 ec 08             	sub    esp,0x8
c0018c1b:	68 7c ff 01 c0       	push   0xc001ff7c
c0018c20:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c24:	e8 27 7b fe ff       	call   c0000750 <strcmp>
c0018c29:	83 c4 10             	add    esp,0x10
c0018c2c:	85 c0                	test   eax,eax
c0018c2e:	0f 94 c0             	sete   al
c0018c31:	0f b6 c0             	movzx  eax,al
c0018c34:	85 c0                	test   eax,eax
c0018c36:	74 0c                	je     c0018c44 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018c38:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018c40:	eb 3a                	jmp    c0018c7c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018c42:	66 90                	xchg   ax,ax
c0018c44:	83 ec 08             	sub    esp,0x8
c0018c47:	68 22 27 02 c0       	push   0xc0022722
c0018c4c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c50:	e8 fb 7a fe ff       	call   c0000750 <strcmp>
c0018c55:	83 c4 10             	add    esp,0x10
c0018c58:	85 c0                	test   eax,eax
c0018c5a:	0f 94 c0             	sete   al
c0018c5d:	0f b6 c0             	movzx  eax,al
c0018c60:	85 c0                	test   eax,eax
c0018c62:	74 0c                	je     c0018c70 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018c64:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018c6c:	eb 0e                	jmp    c0018c7c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018c6e:	66 90                	xchg   ax,ax
c0018c70:	b8 08 00 00 00       	mov    eax,0x8
c0018c75:	e9 ea 00 00 00       	jmp    c0018d64 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018c7a:	66 90                	xchg   ax,ax
c0018c7c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018c83:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018c88:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018c8c:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018c93:	83 f8 ff             	cmp    eax,0xffffffff
c0018c96:	75 34                	jne    c0018ccc <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018c98:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018c9c:	88 c2                	mov    dl,al
c0018c9e:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018ca3:	01 d0                	add    eax,edx
c0018ca5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018ca9:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018caf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018cb3:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018cba:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018cbf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018cc3:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018cca:	eb 18                	jmp    c0018ce4 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018ccc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018cd0:	88 c2                	mov    dl,al
c0018cd2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018cd6:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018cdd:	01 d0                	add    eax,edx
c0018cdf:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018ce3:	90                   	nop
c0018ce4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018ce8:	88 04 24             	mov    BYTE PTR [esp],al
c0018ceb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018cef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018cf3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018cfb:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018d00:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018d08:	83 ec 0c             	sub    esp,0xc
c0018d0b:	68 00 20 00 00       	push   0x2000
c0018d10:	e8 a1 ed fe ff       	call   c0007ab6 <malloc>
c0018d15:	83 c4 10             	add    esp,0x10
c0018d18:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018d1c:	68 00 20 00 00       	push   0x2000
c0018d21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018d25:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018d29:	50                   	push   eax
c0018d2a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018d2e:	50                   	push   eax
c0018d2f:	e8 e9 c6 fe ff       	call   c000541d <f_mkfs>
c0018d34:	83 c4 10             	add    esp,0x10
c0018d37:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018d3b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018d40:	75 0a                	jne    c0018d4c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018d42:	b8 00 00 00 00       	mov    eax,0x0
c0018d47:	eb 1b                	jmp    c0018d64 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018d49:	8d 76 00             	lea    esi,[esi+0x0]
c0018d4c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018d51:	75 09                	jne    c0018d5c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018d53:	b8 09 00 00 00       	mov    eax,0x9
c0018d58:	eb 0a                	jmp    c0018d64 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018d5a:	66 90                	xchg   ax,ax
c0018d5c:	b8 01 00 00 00       	mov    eax,0x1
c0018d61:	8d 76 00             	lea    esi,[esi+0x0]
c0018d64:	83 c4 2c             	add    esp,0x2c
c0018d67:	c3                   	ret    

c0018d68 <FAT::tryMount(LogicalDisk*, int)>:
c0018d68:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018d6e:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018d73:	83 f8 14             	cmp    eax,0x14
c0018d76:	75 18                	jne    c0018d90 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018d78:	83 ec 0c             	sub    esp,0xc
c0018d7b:	68 28 27 02 c0       	push   0xc0022728
c0018d80:	e8 cc 84 ff ff       	call   c0011251 <KePanic(char const*)>
c0018d85:	83 c4 10             	add    esp,0x10
c0018d88:	b0 00                	mov    al,0x0
c0018d8a:	e9 ed 01 00 00       	jmp    c0018f7c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018d8f:	90                   	nop
c0018d90:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018d97:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018d9d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018da3:	3d 00 02 00 00       	cmp    eax,0x200
c0018da8:	74 0a                	je     c0018db4 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018daa:	b0 00                	mov    al,0x0
c0018dac:	e9 cb 01 00 00       	jmp    c0018f7c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018db1:	8d 76 00             	lea    esi,[esi+0x0]
c0018db4:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018dbc:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018dc3:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018dca:	83 f8 ff             	cmp    eax,0xffffffff
c0018dcd:	74 09                	je     c0018dd8 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018dcf:	b0 01                	mov    al,0x1
c0018dd1:	e9 a6 01 00 00       	jmp    c0018f7c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018dd6:	66 90                	xchg   ax,ax
c0018dd8:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018de2:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018dea:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018df1:	88 c2                	mov    dl,al
c0018df3:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018df8:	01 d0                	add    eax,edx
c0018dfa:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018e01:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018e07:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018e0e:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018e15:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018e1a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018e21:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018e28:	83 ec 0c             	sub    esp,0xc
c0018e2b:	68 34 02 00 00       	push   0x234
c0018e30:	e8 81 ec fe ff       	call   c0007ab6 <malloc>
c0018e35:	83 c4 10             	add    esp,0x10
c0018e38:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0018e3f:	83 ec 04             	sub    esp,0x4
c0018e42:	6a 00                	push   0x0
c0018e44:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018e4b:	50                   	push   eax
c0018e4c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018e53:	e8 a0 ad fe ff       	call   c0003bf8 <f_mount>
c0018e58:	83 c4 10             	add    esp,0x10
c0018e5b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018e62:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0018e6a:	74 1c                	je     c0018e88 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018e6c:	83 ec 0c             	sub    esp,0xc
c0018e6f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018e76:	e8 5b ec fe ff       	call   c0007ad6 <rfree>
c0018e7b:	83 c4 10             	add    esp,0x10
c0018e7e:	b0 00                	mov    al,0x0
c0018e80:	e9 f7 00 00 00       	jmp    c0018f7c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018e85:	8d 76 00             	lea    esi,[esi+0x0]
c0018e88:	83 ec 04             	sub    esp,0x4
c0018e8b:	68 00 01 00 00       	push   0x100
c0018e90:	6a 00                	push   0x0
c0018e92:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018e99:	50                   	push   eax
c0018e9a:	e8 51 76 fe ff       	call   c00004f0 <memset>
c0018e9f:	83 c4 10             	add    esp,0x10
c0018ea2:	83 ec 08             	sub    esp,0x8
c0018ea5:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018eac:	50                   	push   eax
c0018ead:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018eb4:	50                   	push   eax
c0018eb5:	e8 86 79 fe ff       	call   c0000840 <strcat>
c0018eba:	83 c4 10             	add    esp,0x10
c0018ebd:	83 ec 08             	sub    esp,0x8
c0018ec0:	68 36 27 02 c0       	push   0xc0022736
c0018ec5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018ecc:	50                   	push   eax
c0018ecd:	e8 6e 79 fe ff       	call   c0000840 <strcat>
c0018ed2:	83 c4 10             	add    esp,0x10
c0018ed5:	83 ec 04             	sub    esp,0x4
c0018ed8:	6a 01                	push   0x1
c0018eda:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0018ee1:	50                   	push   eax
c0018ee2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018ee6:	50                   	push   eax
c0018ee7:	e8 6e ad fe ff       	call   c0003c5a <f_open>
c0018eec:	83 c4 10             	add    esp,0x10
c0018eef:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018ef6:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018efd:	85 c0                	test   eax,eax
c0018eff:	74 0b                	je     c0018f0c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0018f01:	78 31                	js     c0018f34 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018f03:	83 e8 04             	sub    eax,0x4
c0018f06:	83 f8 01             	cmp    eax,0x1
c0018f09:	77 29                	ja     c0018f34 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018f0b:	90                   	nop
c0018f0c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0018f14:	83 ec 0c             	sub    esp,0xc
c0018f17:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018f1b:	50                   	push   eax
c0018f1c:	e8 08 b5 fe ff       	call   c0004429 <f_close>
c0018f21:	83 c4 10             	add    esp,0x10
c0018f24:	90                   	nop
c0018f25:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0018f2d:	85 c0                	test   eax,eax
c0018f2f:	74 43                	je     c0018f74 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0018f31:	eb 31                	jmp    c0018f64 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0018f33:	90                   	nop
c0018f34:	83 ec 0c             	sub    esp,0xc
c0018f37:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018f3e:	e8 93 eb fe ff       	call   c0007ad6 <rfree>
c0018f43:	83 c4 10             	add    esp,0x10
c0018f46:	83 ec 04             	sub    esp,0x4
c0018f49:	6a 00                	push   0x0
c0018f4b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018f52:	50                   	push   eax
c0018f53:	6a 00                	push   0x0
c0018f55:	e8 9e ac fe ff       	call   c0003bf8 <f_mount>
c0018f5a:	83 c4 10             	add    esp,0x10
c0018f5d:	b0 00                	mov    al,0x0
c0018f5f:	eb 1b                	jmp    c0018f7c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018f61:	8d 76 00             	lea    esi,[esi+0x0]
c0018f64:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018f69:	83 c0 01             	add    eax,0x1
c0018f6c:	a3 80 97 02 c0       	mov    ds:0xc0029780,eax
c0018f71:	8d 76 00             	lea    esi,[esi+0x0]
c0018f74:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0018f7b:	90                   	nop
c0018f7c:	81 c4 4c 03 00 00    	add    esp,0x34c
c0018f82:	c3                   	ret    
c0018f83:	90                   	nop

c0018f84 <FAT::allocateSwapfile(char const*, int)>:
c0018f84:	55                   	push   ebp
c0018f85:	57                   	push   edi
c0018f86:	56                   	push   esi
c0018f87:	53                   	push   ebx
c0018f88:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0018f8e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0018f99:	83 ec 0c             	sub    esp,0xc
c0018f9c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0018fa3:	e8 0e eb fe ff       	call   c0007ab6 <malloc>
c0018fa8:	83 c4 10             	add    esp,0x10
c0018fab:	89 c7                	mov    edi,eax
c0018fad:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0018fb2:	83 ec 04             	sub    esp,0x4
c0018fb5:	50                   	push   eax
c0018fb6:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0018fbd:	57                   	push   edi
c0018fbe:	e8 55 27 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c0018fc3:	83 c4 10             	add    esp,0x10
c0018fc6:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0018fcd:	83 ec 04             	sub    esp,0x4
c0018fd0:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018fd4:	50                   	push   eax
c0018fd5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018fd9:	50                   	push   eax
c0018fda:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018fe1:	e8 f0 2a ff ff       	call   c000bad6 <File::stat(unsigned long long*, bool*)>
c0018fe6:	83 c4 10             	add    esp,0x10
c0018fe9:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018ff0:	c1 e0 14             	shl    eax,0x14
c0018ff3:	89 c7                	mov    edi,eax
c0018ff5:	89 c5                	mov    ebp,eax
c0018ff7:	c1 fd 1f             	sar    ebp,0x1f
c0018ffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ffe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019002:	89 f9                	mov    ecx,edi
c0019004:	31 c1                	xor    ecx,eax
c0019006:	89 cb                	mov    ebx,ecx
c0019008:	89 e9                	mov    ecx,ebp
c001900a:	31 d1                	xor    ecx,edx
c001900c:	89 ce                	mov    esi,ecx
c001900e:	89 f0                	mov    eax,esi
c0019010:	09 d8                	or     eax,ebx
c0019012:	0f 84 9c 00 00 00    	je     c00190b4 <FAT::allocateSwapfile(char const*, int)+0x130>
c0019018:	83 ec 0c             	sub    esp,0xc
c001901b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019022:	e8 7b 29 ff ff       	call   c000b9a2 <File::unlink()>
c0019027:	83 c4 10             	add    esp,0x10
c001902a:	83 ec 08             	sub    esp,0x8
c001902d:	6a 12                	push   0x12
c001902f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019036:	e8 99 27 ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c001903b:	83 c4 10             	add    esp,0x10
c001903e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019045:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001904b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019052:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019059:	c1 e0 14             	shl    eax,0x14
c001905c:	83 ec 04             	sub    esp,0x4
c001905f:	6a 01                	push   0x1
c0019061:	50                   	push   eax
c0019062:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019069:	e8 42 c2 fe ff       	call   c00052b0 <f_expand>
c001906e:	83 c4 10             	add    esp,0x10
c0019071:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019078:	8b 00                	mov    eax,DWORD PTR [eax]
c001907a:	83 c0 10             	add    eax,0x10
c001907d:	8b 00                	mov    eax,DWORD PTR [eax]
c001907f:	83 ec 0c             	sub    esp,0xc
c0019082:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019086:	52                   	push   edx
c0019087:	8d 54 24 30          	lea    edx,[esp+0x30]
c001908b:	52                   	push   edx
c001908c:	6a 00                	push   0x0
c001908e:	68 00 04 00 00       	push   0x400
c0019093:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001909a:	ff d0                	call   eax
c001909c:	83 c4 20             	add    esp,0x20
c001909f:	83 ec 0c             	sub    esp,0xc
c00190a2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00190a9:	e8 84 27 ff ff       	call   c000b832 <File::close()>
c00190ae:	83 c4 10             	add    esp,0x10
c00190b1:	8d 76 00             	lea    esi,[esi+0x0]
c00190b4:	83 ec 08             	sub    esp,0x8
c00190b7:	6a 01                	push   0x1
c00190b9:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00190c0:	e8 0f 27 ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c00190c5:	83 c4 10             	add    esp,0x10
c00190c8:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00190cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00190d1:	83 c0 0c             	add    eax,0xc
c00190d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00190d6:	83 ec 0c             	sub    esp,0xc
c00190d9:	8d 54 24 24          	lea    edx,[esp+0x24]
c00190dd:	52                   	push   edx
c00190de:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00190e2:	52                   	push   edx
c00190e3:	6a 00                	push   0x0
c00190e5:	6a 04                	push   0x4
c00190e7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00190ee:	ff d0                	call   eax
c00190f0:	83 c4 20             	add    esp,0x20
c00190f3:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00190fa:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019100:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019107:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001910e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019111:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019118:	83 ec 0c             	sub    esp,0xc
c001911b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019122:	e8 0b 27 ff ff       	call   c000b832 <File::close()>
c0019127:	83 c4 10             	add    esp,0x10
c001912a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019131:	ba 00 00 00 00       	mov    edx,0x0
c0019136:	81 c4 3c 04 00 00    	add    esp,0x43c
c001913c:	5b                   	pop    ebx
c001913d:	5e                   	pop    esi
c001913e:	5f                   	pop    edi
c001913f:	5d                   	pop    ebp
c0019140:	c3                   	ret    
c0019141:	90                   	nop
c0019142:	66 90                	xchg   ax,ax

c0019144 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019144:	57                   	push   edi
c0019145:	56                   	push   esi
c0019146:	53                   	push   ebx
c0019147:	81 ec 50 02 00 00    	sub    esp,0x250
c001914d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019155:	74 0d                	je     c0019164 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0019157:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001915f:	75 0f                	jne    c0019170 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019161:	8d 76 00             	lea    esi,[esi+0x0]
c0019164:	b8 04 00 00 00       	mov    eax,0x4
c0019169:	e9 3a 01 00 00       	jmp    c00192a8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001916e:	66 90                	xchg   ax,ax
c0019170:	83 ec 08             	sub    esp,0x8
c0019173:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001917a:	50                   	push   eax
c001917b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0019182:	e8 6f b5 fe ff       	call   c00046f6 <f_readdir>
c0019187:	83 c4 10             	add    esp,0x10
c001918a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019191:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019198:	83 ec 0c             	sub    esp,0xc
c001919b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00191a2:	83 c0 16             	add    eax,0x16
c00191a5:	50                   	push   eax
c00191a6:	e8 c5 73 fe ff       	call   c0000570 <strlen>
c00191ab:	83 c4 10             	add    esp,0x10
c00191ae:	ba 00 00 00 00       	mov    edx,0x0
c00191b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00191b7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00191bb:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00191c2:	0f b6 c0             	movzx  eax,al
c00191c5:	83 e0 10             	and    eax,0x10
c00191c8:	74 0a                	je     c00191d4 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00191ca:	b8 02 00 00 00       	mov    eax,0x2
c00191cf:	eb 0b                	jmp    c00191dc <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00191d1:	8d 76 00             	lea    esi,[esi+0x0]
c00191d4:	b8 01 00 00 00       	mov    eax,0x1
c00191d9:	8d 76 00             	lea    esi,[esi+0x0]
c00191dc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00191e0:	83 ec 08             	sub    esp,0x8
c00191e3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00191ea:	83 c0 16             	add    eax,0x16
c00191ed:	50                   	push   eax
c00191ee:	8d 44 24 14          	lea    eax,[esp+0x14]
c00191f2:	83 c0 10             	add    eax,0x10
c00191f5:	50                   	push   eax
c00191f6:	e8 45 74 fe ff       	call   c0000640 <strcpy>
c00191fb:	83 c4 10             	add    esp,0x10
c00191fe:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019205:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001920c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019210:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0019217:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001921e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019225:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001922c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019233:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001923a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019241:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019248:	89 c6                	mov    esi,eax
c001924a:	89 d7                	mov    edi,edx
c001924c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001924e:	89 c8                	mov    eax,ecx
c0019250:	89 fa                	mov    edx,edi
c0019252:	89 f3                	mov    ebx,esi
c0019254:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001925b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0019262:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019269:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019270:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019276:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001927d:	0f be c0             	movsx  eax,al
c0019280:	85 c0                	test   eax,eax
c0019282:	75 08                	jne    c001928c <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019284:	b8 07 00 00 00       	mov    eax,0x7
c0019289:	eb 1d                	jmp    c00192a8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001928b:	90                   	nop
c001928c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0019293:	85 c0                	test   eax,eax
c0019295:	75 09                	jne    c00192a0 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0019297:	b8 00 00 00 00       	mov    eax,0x0
c001929c:	eb 0a                	jmp    c00192a8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001929e:	66 90                	xchg   ax,ax
c00192a0:	b8 01 00 00 00       	mov    eax,0x1
c00192a5:	8d 76 00             	lea    esi,[esi+0x0]
c00192a8:	81 c4 50 02 00 00    	add    esp,0x250
c00192ae:	5b                   	pop    ebx
c00192af:	5e                   	pop    esi
c00192b0:	5f                   	pop    edi
c00192b1:	c3                   	ret    
c00192b2:	66 90                	xchg   ax,ax

c00192b4 <FAT::read(void*, unsigned long, void*, int*)>:
c00192b4:	83 ec 1c             	sub    esp,0x1c
c00192b7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00192bc:	74 0a                	je     c00192c8 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00192be:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00192c3:	75 0b                	jne    c00192d0 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00192c5:	8d 76 00             	lea    esi,[esi+0x0]
c00192c8:	b8 04 00 00 00       	mov    eax,0x4
c00192cd:	eb 41                	jmp    c0019310 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00192cf:	90                   	nop
c00192d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00192d4:	50                   	push   eax
c00192d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00192d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00192dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00192e1:	e8 37 ac fe ff       	call   c0003f1d <f_read>
c00192e6:	83 c4 10             	add    esp,0x10
c00192e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00192f1:	89 c2                	mov    edx,eax
c00192f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00192f7:	89 10                	mov    DWORD PTR [eax],edx
c00192f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00192fd:	85 c0                	test   eax,eax
c00192ff:	75 07                	jne    c0019308 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019301:	b8 00 00 00 00       	mov    eax,0x0
c0019306:	eb 08                	jmp    c0019310 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019308:	b8 01 00 00 00       	mov    eax,0x1
c001930d:	8d 76 00             	lea    esi,[esi+0x0]
c0019310:	83 c4 1c             	add    esp,0x1c
c0019313:	c3                   	ret    

c0019314 <FAT::write(void*, unsigned long, void*, int*)>:
c0019314:	83 ec 1c             	sub    esp,0x1c
c0019317:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001931c:	74 0a                	je     c0019328 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001931e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019323:	75 0b                	jne    c0019330 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0019325:	8d 76 00             	lea    esi,[esi+0x0]
c0019328:	b8 04 00 00 00       	mov    eax,0x4
c001932d:	eb 41                	jmp    c0019370 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001932f:	90                   	nop
c0019330:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019334:	50                   	push   eax
c0019335:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019339:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001933d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019341:	e8 d6 ad fe ff       	call   c000411c <f_write>
c0019346:	83 c4 10             	add    esp,0x10
c0019349:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001934d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019351:	89 c2                	mov    edx,eax
c0019353:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019357:	89 10                	mov    DWORD PTR [eax],edx
c0019359:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001935d:	85 c0                	test   eax,eax
c001935f:	75 07                	jne    c0019368 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0019361:	b8 00 00 00 00       	mov    eax,0x0
c0019366:	eb 08                	jmp    c0019370 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019368:	b8 01 00 00 00       	mov    eax,0x1
c001936d:	8d 76 00             	lea    esi,[esi+0x0]
c0019370:	83 c4 1c             	add    esp,0x1c
c0019373:	c3                   	ret    

c0019374 <FAT::close(void*)>:
c0019374:	83 ec 1c             	sub    esp,0x1c
c0019377:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001937c:	75 0a                	jne    c0019388 <FAT::close(void*)+0x14>
c001937e:	b8 04 00 00 00       	mov    eax,0x4
c0019383:	eb 3f                	jmp    c00193c4 <FAT::close(void*)+0x50>
c0019385:	8d 76 00             	lea    esi,[esi+0x0]
c0019388:	83 ec 0c             	sub    esp,0xc
c001938b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001938f:	e8 95 b0 fe ff       	call   c0004429 <f_close>
c0019394:	83 c4 10             	add    esp,0x10
c0019397:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001939b:	83 ec 0c             	sub    esp,0xc
c001939e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00193a2:	e8 1f e7 fe ff       	call   c0007ac6 <free>
c00193a7:	83 c4 10             	add    esp,0x10
c00193aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193ae:	85 c0                	test   eax,eax
c00193b0:	75 0a                	jne    c00193bc <FAT::close(void*)+0x48>
c00193b2:	b8 00 00 00 00       	mov    eax,0x0
c00193b7:	eb 0b                	jmp    c00193c4 <FAT::close(void*)+0x50>
c00193b9:	8d 76 00             	lea    esi,[esi+0x0]
c00193bc:	b8 01 00 00 00       	mov    eax,0x1
c00193c1:	8d 76 00             	lea    esi,[esi+0x0]
c00193c4:	83 c4 1c             	add    esp,0x1c
c00193c7:	c3                   	ret    

c00193c8 <FAT::closeDir(void*)>:
c00193c8:	83 ec 1c             	sub    esp,0x1c
c00193cb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00193d0:	75 0a                	jne    c00193dc <FAT::closeDir(void*)+0x14>
c00193d2:	b8 04 00 00 00       	mov    eax,0x4
c00193d7:	eb 3f                	jmp    c0019418 <FAT::closeDir(void*)+0x50>
c00193d9:	8d 76 00             	lea    esi,[esi+0x0]
c00193dc:	83 ec 0c             	sub    esp,0xc
c00193df:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00193e3:	e8 ec b2 fe ff       	call   c00046d4 <f_closedir>
c00193e8:	83 c4 10             	add    esp,0x10
c00193eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193ef:	83 ec 0c             	sub    esp,0xc
c00193f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00193f6:	e8 cb e6 fe ff       	call   c0007ac6 <free>
c00193fb:	83 c4 10             	add    esp,0x10
c00193fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019402:	85 c0                	test   eax,eax
c0019404:	75 0a                	jne    c0019410 <FAT::closeDir(void*)+0x48>
c0019406:	b8 00 00 00 00       	mov    eax,0x0
c001940b:	eb 0b                	jmp    c0019418 <FAT::closeDir(void*)+0x50>
c001940d:	8d 76 00             	lea    esi,[esi+0x0]
c0019410:	b8 01 00 00 00       	mov    eax,0x1
c0019415:	8d 76 00             	lea    esi,[esi+0x0]
c0019418:	83 c4 1c             	add    esp,0x1c
c001941b:	c3                   	ret    

c001941c <FAT::truncate(void*, unsigned long long)>:
c001941c:	83 ec 2c             	sub    esp,0x2c
c001941f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019423:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019427:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001942b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001942f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019434:	75 0a                	jne    c0019440 <FAT::truncate(void*, unsigned long long)+0x24>
c0019436:	b8 04 00 00 00       	mov    eax,0x4
c001943b:	eb 47                	jmp    c0019484 <FAT::truncate(void*, unsigned long long)+0x68>
c001943d:	8d 76 00             	lea    esi,[esi+0x0]
c0019440:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019444:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019447:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001944b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019453:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019457:	83 ec 08             	sub    esp,0x8
c001945a:	50                   	push   eax
c001945b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001945f:	e8 f4 af fe ff       	call   c0004458 <f_lseek>
c0019464:	83 c4 10             	add    esp,0x10
c0019467:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001946b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001946f:	85 c0                	test   eax,eax
c0019471:	75 09                	jne    c001947c <FAT::truncate(void*, unsigned long long)+0x60>
c0019473:	b8 00 00 00 00       	mov    eax,0x0
c0019478:	eb 0a                	jmp    c0019484 <FAT::truncate(void*, unsigned long long)+0x68>
c001947a:	66 90                	xchg   ax,ax
c001947c:	b8 01 00 00 00       	mov    eax,0x1
c0019481:	8d 76 00             	lea    esi,[esi+0x0]
c0019484:	83 c4 2c             	add    esp,0x2c
c0019487:	c3                   	ret    

c0019488 <FAT::seek(void*, unsigned long long)>:
c0019488:	83 ec 2c             	sub    esp,0x2c
c001948b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001948f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019493:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019497:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001949b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00194a0:	75 0a                	jne    c00194ac <FAT::seek(void*, unsigned long long)+0x24>
c00194a2:	b8 04 00 00 00       	mov    eax,0x4
c00194a7:	eb 33                	jmp    c00194dc <FAT::seek(void*, unsigned long long)+0x54>
c00194a9:	8d 76 00             	lea    esi,[esi+0x0]
c00194ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194b0:	83 ec 08             	sub    esp,0x8
c00194b3:	50                   	push   eax
c00194b4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00194b8:	e8 9b af fe ff       	call   c0004458 <f_lseek>
c00194bd:	83 c4 10             	add    esp,0x10
c00194c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00194c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00194c8:	85 c0                	test   eax,eax
c00194ca:	75 08                	jne    c00194d4 <FAT::seek(void*, unsigned long long)+0x4c>
c00194cc:	b8 00 00 00 00       	mov    eax,0x0
c00194d1:	eb 09                	jmp    c00194dc <FAT::seek(void*, unsigned long long)+0x54>
c00194d3:	90                   	nop
c00194d4:	b8 01 00 00 00       	mov    eax,0x1
c00194d9:	8d 76 00             	lea    esi,[esi+0x0]
c00194dc:	83 c4 2c             	add    esp,0x2c
c00194df:	c3                   	ret    

c00194e0 <fatWrapperReadDisk>:
c00194e0:	53                   	push   ebx
c00194e1:	83 ec 18             	sub    esp,0x18
c00194e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00194e8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00194ec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00194f1:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c00194f8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00194fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019500:	ba 00 00 00 00       	mov    edx,0x0
c0019505:	83 ec 0c             	sub    esp,0xc
c0019508:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001950c:	53                   	push   ebx
c001950d:	52                   	push   edx
c001950e:	50                   	push   eax
c001950f:	51                   	push   ecx
c0019510:	e8 ef 44 ff ff       	call   c000da04 <LogicalDisk::read(unsigned long long, int, void*)>
c0019515:	83 c4 20             	add    esp,0x20
c0019518:	83 c4 18             	add    esp,0x18
c001951b:	5b                   	pop    ebx
c001951c:	c3                   	ret    
c001951d:	8d 76 00             	lea    esi,[esi+0x0]

c0019520 <fatWrapperWriteDisk>:
c0019520:	53                   	push   ebx
c0019521:	83 ec 18             	sub    esp,0x18
c0019524:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019528:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001952c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019531:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019538:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001953c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019540:	ba 00 00 00 00       	mov    edx,0x0
c0019545:	83 ec 0c             	sub    esp,0xc
c0019548:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001954c:	53                   	push   ebx
c001954d:	52                   	push   edx
c001954e:	50                   	push   eax
c001954f:	51                   	push   ecx
c0019550:	e8 1b 45 ff ff       	call   c000da70 <LogicalDisk::write(unsigned long long, int, void*)>
c0019555:	83 c4 20             	add    esp,0x20
c0019558:	83 c4 18             	add    esp,0x18
c001955b:	5b                   	pop    ebx
c001955c:	c3                   	ret    
c001955d:	8d 76 00             	lea    esi,[esi+0x0]

c0019560 <fatWrapperIoctl>:
c0019560:	53                   	push   ebx
c0019561:	83 ec 28             	sub    esp,0x28
c0019564:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019568:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001956c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019570:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019574:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019579:	83 f8 02             	cmp    eax,0x2
c001957c:	75 32                	jne    c00195b0 <fatWrapperIoctl+0x50>
c001957e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019586:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001958b:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0019592:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019598:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001959e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00195a2:	66 89 02             	mov    WORD PTR [edx],ax
c00195a5:	b8 00 00 00 00       	mov    eax,0x0
c00195aa:	e9 c5 00 00 00       	jmp    c0019674 <fatWrapperIoctl+0x114>
c00195af:	90                   	nop
c00195b0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00195b5:	83 f8 01             	cmp    eax,0x1
c00195b8:	75 6a                	jne    c0019624 <fatWrapperIoctl+0xc4>
c00195ba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00195c2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00195c7:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c00195ce:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00195d4:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00195da:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00195e0:	89 c8                	mov    eax,ecx
c00195e2:	89 da                	mov    edx,ebx
c00195e4:	0f a4 c2 0a          	shld   edx,eax,0xa
c00195e8:	c1 e0 0a             	shl    eax,0xa
c00195eb:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00195f0:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c00195f7:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00195fd:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019603:	89 cb                	mov    ebx,ecx
c0019605:	c1 fb 1f             	sar    ebx,0x1f
c0019608:	53                   	push   ebx
c0019609:	51                   	push   ecx
c001960a:	52                   	push   edx
c001960b:	50                   	push   eax
c001960c:	e8 6f 5b 00 00       	call   c001f180 <__udivdi3>
c0019611:	83 c4 10             	add    esp,0x10
c0019614:	89 c2                	mov    edx,eax
c0019616:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001961a:	89 10                	mov    DWORD PTR [eax],edx
c001961c:	b8 00 00 00 00       	mov    eax,0x0
c0019621:	eb 51                	jmp    c0019674 <fatWrapperIoctl+0x114>
c0019623:	90                   	nop
c0019624:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019629:	85 c0                	test   eax,eax
c001962b:	75 07                	jne    c0019634 <fatWrapperIoctl+0xd4>
c001962d:	b8 00 00 00 00       	mov    eax,0x0
c0019632:	eb 40                	jmp    c0019674 <fatWrapperIoctl+0x114>
c0019634:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019639:	83 f8 03             	cmp    eax,0x3
c001963c:	75 1a                	jne    c0019658 <fatWrapperIoctl+0xf8>
c001963e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019642:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019646:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001964a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019650:	b8 00 00 00 00       	mov    eax,0x0
c0019655:	eb 1d                	jmp    c0019674 <fatWrapperIoctl+0x114>
c0019657:	90                   	nop
c0019658:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001965d:	83 f8 04             	cmp    eax,0x4
c0019660:	75 0a                	jne    c001966c <fatWrapperIoctl+0x10c>
c0019662:	b8 00 00 00 00       	mov    eax,0x0
c0019667:	eb 0b                	jmp    c0019674 <fatWrapperIoctl+0x114>
c0019669:	8d 76 00             	lea    esi,[esi+0x0]
c001966c:	b8 04 00 00 00       	mov    eax,0x4
c0019671:	8d 76 00             	lea    esi,[esi+0x0]
c0019674:	83 c4 28             	add    esp,0x28
c0019677:	5b                   	pop    ebx
c0019678:	c3                   	ret    
c0019679:	90                   	nop
c001967a:	66 90                	xchg   ax,ax

c001967c <FAT::FAT()>:
c001967c:	83 ec 1c             	sub    esp,0x1c
c001967f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019683:	83 ec 0c             	sub    esp,0xc
c0019686:	50                   	push   eax
c0019687:	e8 2c 1e ff ff       	call   c000b4b8 <Filesystem::Filesystem()>
c001968c:	83 c4 10             	add    esp,0x10
c001968f:	ba 4c 27 02 c0       	mov    edx,0xc002274c
c0019694:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019698:	89 10                	mov    DWORD PTR [eax],edx
c001969a:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c00196a4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00196ac:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00196b1:	7f 19                	jg     c00196cc <FAT::FAT()+0x50>
c00196b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00196b7:	c7 04 85 a0 97 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6860],0xffffffff
c00196c2:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00196c7:	eb e3                	jmp    c00196ac <FAT::FAT()+0x30>
c00196c9:	8d 76 00             	lea    esi,[esi+0x0]
c00196cc:	90                   	nop
c00196cd:	83 c4 1c             	add    esp,0x1c
c00196d0:	c3                   	ret    
c00196d1:	90                   	nop
c00196d2:	66 90                	xchg   ax,ax

c00196d4 <FAT::fixFilepath(char*)>:
c00196d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196d8:	8a 00                	mov    al,BYTE PTR [eax]
c00196da:	0f be c0             	movsx  eax,al
c00196dd:	83 f8 40             	cmp    eax,0x40
c00196e0:	7e 2e                	jle    c0019710 <FAT::fixFilepath(char*)+0x3c>
c00196e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196e6:	8a 00                	mov    al,BYTE PTR [eax]
c00196e8:	83 e8 41             	sub    eax,0x41
c00196eb:	88 c2                	mov    dl,al
c00196ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196f1:	88 10                	mov    BYTE PTR [eax],dl
c00196f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196f7:	8a 00                	mov    al,BYTE PTR [eax]
c00196f9:	0f be c0             	movsx  eax,al
c00196fc:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0019703:	83 c0 30             	add    eax,0x30
c0019706:	88 c2                	mov    dl,al
c0019708:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001970c:	88 10                	mov    BYTE PTR [eax],dl
c001970e:	66 90                	xchg   ax,ax
c0019710:	90                   	nop
c0019711:	c3                   	ret    
c0019712:	66 90                	xchg   ax,ax

c0019714 <FAT::open(char const*, void**, FileOpenMode)>:
c0019714:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001971a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019722:	74 0c                	je     c0019730 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019724:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001972c:	75 0e                	jne    c001973c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001972e:	66 90                	xchg   ax,ax
c0019730:	b8 04 00 00 00       	mov    eax,0x4
c0019735:	e9 46 01 00 00       	jmp    c0019880 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001973a:	66 90                	xchg   ax,ax
c001973c:	83 ec 08             	sub    esp,0x8
c001973f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019746:	8d 44 24 14          	lea    eax,[esp+0x14]
c001974a:	50                   	push   eax
c001974b:	e8 f0 6e fe ff       	call   c0000640 <strcpy>
c0019750:	83 c4 10             	add    esp,0x10
c0019753:	83 ec 08             	sub    esp,0x8
c0019756:	8d 44 24 10          	lea    eax,[esp+0x10]
c001975a:	50                   	push   eax
c001975b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019762:	e8 6d ff ff ff       	call   c00196d4 <FAT::fixFilepath(char*)>
c0019767:	83 c4 10             	add    esp,0x10
c001976a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019772:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019779:	83 e0 01             	and    eax,0x1
c001977c:	74 12                	je     c0019790 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001977e:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019785:	83 c8 01             	or     eax,0x1
c0019788:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001978f:	90                   	nop
c0019790:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019797:	83 e0 04             	and    eax,0x4
c001979a:	74 24                	je     c00197c0 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001979c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00197a3:	83 c8 30             	or     eax,0x30
c00197a6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00197ad:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00197b4:	83 c8 02             	or     eax,0x2
c00197b7:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00197be:	66 90                	xchg   ax,ax
c00197c0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00197c7:	83 e0 02             	and    eax,0x2
c00197ca:	74 14                	je     c00197e0 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00197cc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00197d3:	83 c8 02             	or     eax,0x2
c00197d6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00197dd:	8d 76 00             	lea    esi,[esi+0x0]
c00197e0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00197e7:	83 e0 08             	and    eax,0x8
c00197ea:	74 14                	je     c0019800 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c00197ec:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00197f3:	83 c8 04             	or     eax,0x4
c00197f6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00197fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019800:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019807:	83 e0 10             	and    eax,0x10
c001980a:	74 14                	je     c0019820 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001980c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019813:	83 c8 08             	or     eax,0x8
c0019816:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001981d:	8d 76 00             	lea    esi,[esi+0x0]
c0019820:	83 ec 0c             	sub    esp,0xc
c0019823:	68 28 02 00 00       	push   0x228
c0019828:	e8 89 e2 fe ff       	call   c0007ab6 <malloc>
c001982d:	83 c4 10             	add    esp,0x10
c0019830:	89 c2                	mov    edx,eax
c0019832:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019839:	89 10                	mov    DWORD PTR [eax],edx
c001983b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019843:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001984a:	8b 00                	mov    eax,DWORD PTR [eax]
c001984c:	83 ec 04             	sub    esp,0x4
c001984f:	52                   	push   edx
c0019850:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019854:	52                   	push   edx
c0019855:	50                   	push   eax
c0019856:	e8 ff a3 fe ff       	call   c0003c5a <f_open>
c001985b:	83 c4 10             	add    esp,0x10
c001985e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019865:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001986d:	74 09                	je     c0019878 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001986f:	b8 01 00 00 00       	mov    eax,0x1
c0019874:	eb 0a                	jmp    c0019880 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019876:	66 90                	xchg   ax,ax
c0019878:	b8 00 00 00 00       	mov    eax,0x0
c001987d:	8d 76 00             	lea    esi,[esi+0x0]
c0019880:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019886:	c3                   	ret    
c0019887:	90                   	nop

c0019888 <FAT::openDir(char const*, void**)>:
c0019888:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001988e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019896:	74 0c                	je     c00198a4 <FAT::openDir(char const*, void**)+0x1c>
c0019898:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00198a0:	75 0e                	jne    c00198b0 <FAT::openDir(char const*, void**)+0x28>
c00198a2:	66 90                	xchg   ax,ax
c00198a4:	b8 04 00 00 00       	mov    eax,0x4
c00198a9:	e9 82 00 00 00       	jmp    c0019930 <FAT::openDir(char const*, void**)+0xa8>
c00198ae:	66 90                	xchg   ax,ax
c00198b0:	83 ec 08             	sub    esp,0x8
c00198b3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00198ba:	8d 44 24 18          	lea    eax,[esp+0x18]
c00198be:	50                   	push   eax
c00198bf:	e8 7c 6d fe ff       	call   c0000640 <strcpy>
c00198c4:	83 c4 10             	add    esp,0x10
c00198c7:	83 ec 08             	sub    esp,0x8
c00198ca:	8d 44 24 14          	lea    eax,[esp+0x14]
c00198ce:	50                   	push   eax
c00198cf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00198d6:	e8 f9 fd ff ff       	call   c00196d4 <FAT::fixFilepath(char*)>
c00198db:	83 c4 10             	add    esp,0x10
c00198de:	83 ec 0c             	sub    esp,0xc
c00198e1:	6a 30                	push   0x30
c00198e3:	e8 ce e1 fe ff       	call   c0007ab6 <malloc>
c00198e8:	83 c4 10             	add    esp,0x10
c00198eb:	89 c2                	mov    edx,eax
c00198ed:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00198f4:	89 10                	mov    DWORD PTR [eax],edx
c00198f6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00198fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00198ff:	83 ec 08             	sub    esp,0x8
c0019902:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019906:	52                   	push   edx
c0019907:	50                   	push   eax
c0019908:	e8 fc ac fe ff       	call   c0004609 <f_opendir>
c001990d:	83 c4 10             	add    esp,0x10
c0019910:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019917:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001991f:	74 07                	je     c0019928 <FAT::openDir(char const*, void**)+0xa0>
c0019921:	b8 01 00 00 00       	mov    eax,0x1
c0019926:	eb 08                	jmp    c0019930 <FAT::openDir(char const*, void**)+0xa8>
c0019928:	b8 00 00 00 00       	mov    eax,0x0
c001992d:	8d 76 00             	lea    esi,[esi+0x0]
c0019930:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019936:	c3                   	ret    
c0019937:	90                   	nop

c0019938 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019938:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001993e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019946:	75 0c                	jne    c0019954 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019948:	b8 04 00 00 00       	mov    eax,0x4
c001994d:	e9 d6 00 00 00       	jmp    c0019a28 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019952:	66 90                	xchg   ax,ax
c0019954:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001995c:	75 0a                	jne    c0019968 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001995e:	b8 04 00 00 00       	mov    eax,0x4
c0019963:	e9 c0 00 00 00       	jmp    c0019a28 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019968:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019970:	75 0a                	jne    c001997c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019972:	b8 04 00 00 00       	mov    eax,0x4
c0019977:	e9 ac 00 00 00       	jmp    c0019a28 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001997c:	83 ec 08             	sub    esp,0x8
c001997f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019986:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001998d:	50                   	push   eax
c001998e:	e8 ad 6c fe ff       	call   c0000640 <strcpy>
c0019993:	83 c4 10             	add    esp,0x10
c0019996:	83 ec 08             	sub    esp,0x8
c0019999:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00199a0:	50                   	push   eax
c00199a1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00199a8:	e8 27 fd ff ff       	call   c00196d4 <FAT::fixFilepath(char*)>
c00199ad:	83 c4 10             	add    esp,0x10
c00199b0:	83 ec 08             	sub    esp,0x8
c00199b3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00199b7:	50                   	push   eax
c00199b8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00199bf:	50                   	push   eax
c00199c0:	e8 c3 ad fe ff       	call   c0004788 <f_stat>
c00199c5:	83 c4 10             	add    esp,0x10
c00199c8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00199cf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00199d6:	85 c0                	test   eax,eax
c00199d8:	74 0a                	je     c00199e4 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c00199da:	83 f8 04             	cmp    eax,0x4
c00199dd:	74 39                	je     c0019a18 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c00199df:	eb 3f                	jmp    c0019a20 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c00199e1:	8d 76 00             	lea    esi,[esi+0x0]
c00199e4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00199e8:	0f b6 c0             	movzx  eax,al
c00199eb:	83 e0 10             	and    eax,0x10
c00199ee:	0f 95 c2             	setne  dl
c00199f1:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00199f8:	88 10                	mov    BYTE PTR [eax],dl
c00199fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199fe:	ba 00 00 00 00       	mov    edx,0x0
c0019a03:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019a0a:	89 01                	mov    DWORD PTR [ecx],eax
c0019a0c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019a0f:	b8 00 00 00 00       	mov    eax,0x0
c0019a14:	eb 12                	jmp    c0019a28 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019a16:	66 90                	xchg   ax,ax
c0019a18:	b8 02 00 00 00       	mov    eax,0x2
c0019a1d:	eb 09                	jmp    c0019a28 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019a1f:	90                   	nop
c0019a20:	b8 01 00 00 00       	mov    eax,0x1
c0019a25:	8d 76 00             	lea    esi,[esi+0x0]
c0019a28:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019a2e:	c3                   	ret    
c0019a2f:	90                   	nop

c0019a30 <FAT::unlink(char const*)>:
c0019a30:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019a36:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019a3e:	75 08                	jne    c0019a48 <FAT::unlink(char const*)+0x18>
c0019a40:	b8 04 00 00 00       	mov    eax,0x4
c0019a45:	eb 61                	jmp    c0019aa8 <FAT::unlink(char const*)+0x78>
c0019a47:	90                   	nop
c0019a48:	83 ec 08             	sub    esp,0x8
c0019a4b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a52:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a56:	50                   	push   eax
c0019a57:	e8 e4 6b fe ff       	call   c0000640 <strcpy>
c0019a5c:	83 c4 10             	add    esp,0x10
c0019a5f:	83 ec 08             	sub    esp,0x8
c0019a62:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019a66:	50                   	push   eax
c0019a67:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a6e:	e8 61 fc ff ff       	call   c00196d4 <FAT::fixFilepath(char*)>
c0019a73:	83 c4 10             	add    esp,0x10
c0019a76:	83 ec 0c             	sub    esp,0xc
c0019a79:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a7d:	50                   	push   eax
c0019a7e:	e8 77 af fe ff       	call   c00049fa <f_unlink>
c0019a83:	83 c4 10             	add    esp,0x10
c0019a86:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019a8d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019a94:	85 c0                	test   eax,eax
c0019a96:	75 08                	jne    c0019aa0 <FAT::unlink(char const*)+0x70>
c0019a98:	b8 00 00 00 00       	mov    eax,0x0
c0019a9d:	eb 09                	jmp    c0019aa8 <FAT::unlink(char const*)+0x78>
c0019a9f:	90                   	nop
c0019aa0:	b8 01 00 00 00       	mov    eax,0x1
c0019aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0019aa8:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019aae:	c3                   	ret    
c0019aaf:	90                   	nop

c0019ab0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019ab0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019ab6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019abd:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019ac4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019ac8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019acc:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019ad4:	75 0a                	jne    c0019ae0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019ad6:	b8 04 00 00 00       	mov    eax,0x4
c0019adb:	e9 7c 01 00 00       	jmp    c0019c5c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019ae0:	83 ec 08             	sub    esp,0x8
c0019ae3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019aea:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019aee:	50                   	push   eax
c0019aef:	e8 4c 6b fe ff       	call   c0000640 <strcpy>
c0019af4:	83 c4 10             	add    esp,0x10
c0019af7:	83 ec 08             	sub    esp,0x8
c0019afa:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019afe:	50                   	push   eax
c0019aff:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019b06:	e8 c9 fb ff ff       	call   c00196d4 <FAT::fixFilepath(char*)>
c0019b0b:	83 c4 10             	add    esp,0x10
c0019b0e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019b16:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019b1e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b23:	83 e0 01             	and    eax,0x1
c0019b26:	74 14                	je     c0019b3c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0019b28:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b2f:	83 c8 01             	or     eax,0x1
c0019b32:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019b39:	8d 76 00             	lea    esi,[esi+0x0]
c0019b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b41:	83 e0 02             	and    eax,0x2
c0019b44:	74 12                	je     c0019b58 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0019b46:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b4d:	83 c8 20             	or     eax,0x20
c0019b50:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019b57:	90                   	nop
c0019b58:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b5d:	83 e0 04             	and    eax,0x4
c0019b60:	74 12                	je     c0019b74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0019b62:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b69:	83 c8 04             	or     eax,0x4
c0019b6c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019b73:	90                   	nop
c0019b74:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b79:	83 e0 08             	and    eax,0x8
c0019b7c:	74 12                	je     c0019b90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c0019b7e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b85:	83 c8 02             	or     eax,0x2
c0019b88:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019b8f:	90                   	nop
c0019b90:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b95:	83 e0 01             	and    eax,0x1
c0019b98:	74 12                	je     c0019bac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0019b9a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019ba1:	83 c8 01             	or     eax,0x1
c0019ba4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019bab:	90                   	nop
c0019bac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bb1:	83 e0 02             	and    eax,0x2
c0019bb4:	74 12                	je     c0019bc8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0019bb6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019bbd:	83 c8 20             	or     eax,0x20
c0019bc0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019bc7:	90                   	nop
c0019bc8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bcd:	83 e0 04             	and    eax,0x4
c0019bd0:	74 12                	je     c0019be4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c0019bd2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019bd9:	83 c8 04             	or     eax,0x4
c0019bdc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019be3:	90                   	nop
c0019be4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019be9:	83 e0 08             	and    eax,0x8
c0019bec:	74 12                	je     c0019c00 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c0019bee:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019bf5:	83 c8 02             	or     eax,0x2
c0019bf8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019bff:	90                   	nop
c0019c00:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019c07:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c0e:	09 d0                	or     eax,edx
c0019c10:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019c17:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019c1f:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019c27:	83 ec 04             	sub    esp,0x4
c0019c2a:	52                   	push   edx
c0019c2b:	50                   	push   eax
c0019c2c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019c30:	50                   	push   eax
c0019c31:	e8 39 b2 fe ff       	call   c0004e6f <f_chmod>
c0019c36:	83 c4 10             	add    esp,0x10
c0019c39:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019c40:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019c47:	85 c0                	test   eax,eax
c0019c49:	75 09                	jne    c0019c54 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c0019c4b:	b8 00 00 00 00       	mov    eax,0x0
c0019c50:	eb 0a                	jmp    c0019c5c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019c52:	66 90                	xchg   ax,ax
c0019c54:	b8 01 00 00 00       	mov    eax,0x1
c0019c59:	8d 76 00             	lea    esi,[esi+0x0]
c0019c5c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019c62:	c3                   	ret    
c0019c63:	90                   	nop

c0019c64 <FAT::rename(char const*, char const*)>:
c0019c64:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019c6a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019c72:	74 0c                	je     c0019c80 <FAT::rename(char const*, char const*)+0x1c>
c0019c74:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019c7c:	75 0e                	jne    c0019c8c <FAT::rename(char const*, char const*)+0x28>
c0019c7e:	66 90                	xchg   ax,ax
c0019c80:	b8 04 00 00 00       	mov    eax,0x4
c0019c85:	e9 9e 00 00 00       	jmp    c0019d28 <FAT::rename(char const*, char const*)+0xc4>
c0019c8a:	66 90                	xchg   ax,ax
c0019c8c:	83 ec 08             	sub    esp,0x8
c0019c8f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019c96:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019c9d:	50                   	push   eax
c0019c9e:	e8 9d 69 fe ff       	call   c0000640 <strcpy>
c0019ca3:	83 c4 10             	add    esp,0x10
c0019ca6:	83 ec 08             	sub    esp,0x8
c0019ca9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019cb0:	50                   	push   eax
c0019cb1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019cb8:	e8 17 fa ff ff       	call   c00196d4 <FAT::fixFilepath(char*)>
c0019cbd:	83 c4 10             	add    esp,0x10
c0019cc0:	83 ec 08             	sub    esp,0x8
c0019cc3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019cca:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019cce:	50                   	push   eax
c0019ccf:	e8 6c 69 fe ff       	call   c0000640 <strcpy>
c0019cd4:	83 c4 10             	add    esp,0x10
c0019cd7:	83 ec 08             	sub    esp,0x8
c0019cda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019cde:	50                   	push   eax
c0019cdf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019ce6:	e8 e9 f9 ff ff       	call   c00196d4 <FAT::fixFilepath(char*)>
c0019ceb:	83 c4 10             	add    esp,0x10
c0019cee:	83 ec 08             	sub    esp,0x8
c0019cf1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019cf5:	50                   	push   eax
c0019cf6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019cfd:	50                   	push   eax
c0019cfe:	e8 b4 af fe ff       	call   c0004cb7 <f_rename>
c0019d03:	83 c4 10             	add    esp,0x10
c0019d06:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019d0d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019d14:	85 c0                	test   eax,eax
c0019d16:	75 08                	jne    c0019d20 <FAT::rename(char const*, char const*)+0xbc>
c0019d18:	b8 00 00 00 00       	mov    eax,0x0
c0019d1d:	eb 09                	jmp    c0019d28 <FAT::rename(char const*, char const*)+0xc4>
c0019d1f:	90                   	nop
c0019d20:	b8 01 00 00 00       	mov    eax,0x1
c0019d25:	8d 76 00             	lea    esi,[esi+0x0]
c0019d28:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019d2e:	c3                   	ret    
c0019d2f:	90                   	nop

c0019d30 <FAT::mkdir(char const*)>:
c0019d30:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d36:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d3e:	75 08                	jne    c0019d48 <FAT::mkdir(char const*)+0x18>
c0019d40:	b8 04 00 00 00       	mov    eax,0x4
c0019d45:	eb 61                	jmp    c0019da8 <FAT::mkdir(char const*)+0x78>
c0019d47:	90                   	nop
c0019d48:	83 ec 08             	sub    esp,0x8
c0019d4b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d52:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d56:	50                   	push   eax
c0019d57:	e8 e4 68 fe ff       	call   c0000640 <strcpy>
c0019d5c:	83 c4 10             	add    esp,0x10
c0019d5f:	83 ec 08             	sub    esp,0x8
c0019d62:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d66:	50                   	push   eax
c0019d67:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d6e:	e8 61 f9 ff ff       	call   c00196d4 <FAT::fixFilepath(char*)>
c0019d73:	83 c4 10             	add    esp,0x10
c0019d76:	83 ec 0c             	sub    esp,0xc
c0019d79:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d7d:	50                   	push   eax
c0019d7e:	e8 99 ad fe ff       	call   c0004b1c <f_mkdir>
c0019d83:	83 c4 10             	add    esp,0x10
c0019d86:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019d8d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019d94:	85 c0                	test   eax,eax
c0019d96:	75 08                	jne    c0019da0 <FAT::mkdir(char const*)+0x70>
c0019d98:	b8 00 00 00 00       	mov    eax,0x0
c0019d9d:	eb 09                	jmp    c0019da8 <FAT::mkdir(char const*)+0x78>
c0019d9f:	90                   	nop
c0019da0:	b8 01 00 00 00       	mov    eax,0x1
c0019da5:	8d 76 00             	lea    esi,[esi+0x0]
c0019da8:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019dae:	c3                   	ret    
c0019daf:	90                   	nop

c0019db0 <FAT::exists(char const*)>:
c0019db0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019db6:	83 ec 08             	sub    esp,0x8
c0019db9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019dc0:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019dc4:	50                   	push   eax
c0019dc5:	e8 76 68 fe ff       	call   c0000640 <strcpy>
c0019dca:	83 c4 10             	add    esp,0x10
c0019dcd:	83 ec 08             	sub    esp,0x8
c0019dd0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019dd4:	50                   	push   eax
c0019dd5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019ddc:	e8 f3 f8 ff ff       	call   c00196d4 <FAT::fixFilepath(char*)>
c0019de1:	83 c4 10             	add    esp,0x10
c0019de4:	83 ec 08             	sub    esp,0x8
c0019de7:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0019dee:	50                   	push   eax
c0019def:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019df3:	50                   	push   eax
c0019df4:	e8 8f a9 fe ff       	call   c0004788 <f_stat>
c0019df9:	83 c4 10             	add    esp,0x10
c0019dfc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019e03:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019e0a:	85 c0                	test   eax,eax
c0019e0c:	75 06                	jne    c0019e14 <FAT::exists(char const*)+0x64>
c0019e0e:	b0 01                	mov    al,0x1
c0019e10:	eb 06                	jmp    c0019e18 <FAT::exists(char const*)+0x68>
c0019e12:	66 90                	xchg   ax,ax
c0019e14:	b0 00                	mov    al,0x0
c0019e16:	66 90                	xchg   ax,ax
c0019e18:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019e1e:	c3                   	ret    
c0019e1f:	90                   	nop

c0019e20 <isoReadDiscSectorHelper>:
c0019e20:	83 ec 2c             	sub    esp,0x2c
c0019e23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019e27:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019e2b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019e30:	83 e8 41             	sub    eax,0x41
c0019e33:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019e3a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e3e:	ba 00 00 00 00       	mov    edx,0x0
c0019e43:	83 ec 0c             	sub    esp,0xc
c0019e46:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019e4a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019e4e:	52                   	push   edx
c0019e4f:	50                   	push   eax
c0019e50:	51                   	push   ecx
c0019e51:	e8 ae 3b ff ff       	call   c000da04 <LogicalDisk::read(unsigned long long, int, void*)>
c0019e56:	83 c4 20             	add    esp,0x20
c0019e59:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019e5d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019e62:	74 0c                	je     c0019e70 <isoReadDiscSectorHelper+0x50>
c0019e64:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019e68:	c1 e0 0b             	shl    eax,0xb
c0019e6b:	eb 0b                	jmp    c0019e78 <isoReadDiscSectorHelper+0x58>
c0019e6d:	8d 76 00             	lea    esi,[esi+0x0]
c0019e70:	b8 00 00 00 00       	mov    eax,0x0
c0019e75:	8d 76 00             	lea    esi,[esi+0x0]
c0019e78:	83 c4 2c             	add    esp,0x2c
c0019e7b:	c3                   	ret    

c0019e7c <iso_kprintf>:
c0019e7c:	83 ec 0c             	sub    esp,0xc
c0019e7f:	83 ec 08             	sub    esp,0x8
c0019e82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e86:	68 fa 24 02 c0       	push   0xc00224fa
c0019e8b:	e8 b5 0a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019e90:	83 c4 10             	add    esp,0x10
c0019e93:	90                   	nop
c0019e94:	83 c4 0c             	add    esp,0xc
c0019e97:	c3                   	ret    

c0019e98 <iso_kprintfd>:
c0019e98:	83 ec 0c             	sub    esp,0xc
c0019e9b:	83 ec 08             	sub    esp,0x8
c0019e9e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019ea2:	68 5a 0d 02 c0       	push   0xc0020d5a
c0019ea7:	e8 99 0a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019eac:	83 c4 10             	add    esp,0x10
c0019eaf:	90                   	nop
c0019eb0:	83 c4 0c             	add    esp,0xc
c0019eb3:	c3                   	ret    

c0019eb4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019eb4:	b8 08 00 00 00       	mov    eax,0x8
c0019eb9:	c3                   	ret    

c0019eba <ISO9660::truncate(void*, unsigned long long)>:
c0019eba:	b8 01 00 00 00       	mov    eax,0x1
c0019ebf:	c3                   	ret    

c0019ec0 <ISO9660::getName()>:
c0019ec0:	b8 b0 27 02 c0       	mov    eax,0xc00227b0
c0019ec5:	c3                   	ret    

c0019ec6 <ISO9660::closeDir(void*)>:
c0019ec6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019eca:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ecc:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019ecf:	90                   	nop

c0019ed0 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019ed0:	b8 01 00 00 00       	mov    eax,0x1
c0019ed5:	c3                   	ret    

c0019ed6 <ISO9660::unlink(char const*)>:
c0019ed6:	b8 01 00 00 00       	mov    eax,0x1
c0019edb:	c3                   	ret    

c0019edc <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019edc:	b8 03 00 00 00       	mov    eax,0x3
c0019ee1:	c3                   	ret    

c0019ee2 <ISO9660::rename(char const*, char const*)>:
c0019ee2:	b8 01 00 00 00       	mov    eax,0x1
c0019ee7:	c3                   	ret    

c0019ee8 <ISO9660::mkdir(char const*)>:
c0019ee8:	b8 01 00 00 00       	mov    eax,0x1
c0019eed:	c3                   	ret    

c0019eee <ISO9660::~ISO9660()>:
c0019eee:	83 ec 0c             	sub    esp,0xc
c0019ef1:	ba f0 28 02 c0       	mov    edx,0xc00228f0
c0019ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019efa:	89 10                	mov    DWORD PTR [eax],edx
c0019efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f00:	83 ec 0c             	sub    esp,0xc
c0019f03:	50                   	push   eax
c0019f04:	e8 d3 15 ff ff       	call   c000b4dc <Filesystem::~Filesystem()>
c0019f09:	83 c4 10             	add    esp,0x10
c0019f0c:	90                   	nop
c0019f0d:	83 c4 0c             	add    esp,0xc
c0019f10:	c3                   	ret    
c0019f11:	90                   	nop

c0019f12 <ISO9660::~ISO9660()>:
c0019f12:	83 ec 0c             	sub    esp,0xc
c0019f15:	83 ec 0c             	sub    esp,0xc
c0019f18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f1c:	e8 cd ff ff ff       	call   c0019eee <ISO9660::~ISO9660()>
c0019f21:	83 c4 10             	add    esp,0x10
c0019f24:	83 ec 08             	sub    esp,0x8
c0019f27:	6a 08                	push   0x8
c0019f29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f2d:	e8 e6 08 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0019f32:	83 c4 10             	add    esp,0x10
c0019f35:	83 c4 0c             	add    esp,0xc
c0019f38:	c3                   	ret    
c0019f39:	90                   	nop

c0019f3a <ISO9660::exists(char const*)>:
c0019f3a:	83 ec 18             	sub    esp,0x18
c0019f3d:	68 cb 27 02 c0       	push   0xc00227cb
c0019f42:	e8 0a 73 ff ff       	call   c0011251 <KePanic(char const*)>
c0019f47:	31 c0                	xor    eax,eax
c0019f49:	83 c4 1c             	add    esp,0x1c
c0019f4c:	c3                   	ret    
c0019f4d:	90                   	nop

c0019f4e <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019f4e:	56                   	push   esi
c0019f4f:	53                   	push   ebx
c0019f50:	53                   	push   ebx
c0019f51:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019f55:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019f59:	85 db                	test   ebx,ebx
c0019f5b:	0f 84 ca 00 00 00    	je     c001a02b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019f61:	85 f6                	test   esi,esi
c0019f63:	0f 84 c2 00 00 00    	je     c001a02b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019f69:	b8 03 00 00 00       	mov    eax,0x3
c0019f6e:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0019f73:	0f 85 b7 00 00 00    	jne    c001a030 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019f79:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019f7b:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c0019f82:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c0019f88:	74 1b                	je     c0019fa5 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0019f8a:	85 c0                	test   eax,eax
c0019f8c:	74 10                	je     c0019f9e <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0019f8e:	83 ec 0c             	sub    esp,0xc
c0019f91:	68 e9 27 02 c0       	push   0xc00227e9
c0019f96:	e8 b6 72 ff ff       	call   c0011251 <KePanic(char const*)>
c0019f9b:	83 c4 10             	add    esp,0x10
c0019f9e:	8a 03                	mov    al,BYTE PTR [ebx]
c0019fa0:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c0019fa5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019fa8:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c0019faf:	85 c0                	test   eax,eax
c0019fb1:	74 09                	je     c0019fbc <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c0019fb3:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019fba:	74 48                	je     c001a004 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0019fbc:	83 ec 0c             	sub    esp,0xc
c0019fbf:	68 f9 27 02 c0       	push   0xc00227f9
c0019fc4:	e8 7c 09 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019fc9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019fcc:	83 c4 10             	add    esp,0x10
c0019fcf:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c0019fd6:	85 c0                	test   eax,eax
c0019fd8:	74 17                	je     c0019ff1 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c0019fda:	83 ec 0c             	sub    esp,0xc
c0019fdd:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019fe4:	68 19 28 02 c0       	push   0xc0022819
c0019fe9:	e8 57 09 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019fee:	83 c4 10             	add    esp,0x10
c0019ff1:	83 ec 0c             	sub    esp,0xc
c0019ff4:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c0019ffb:	50                   	push   eax
c0019ffc:	e8 45 ca fe ff       	call   c0006a46 <init_percd>
c001a001:	83 c4 10             	add    esp,0x10
c001a004:	83 c3 03             	add    ebx,0x3
c001a007:	51                   	push   ecx
c001a008:	51                   	push   ecx
c001a009:	6a 00                	push   0x0
c001a00b:	53                   	push   ebx
c001a00c:	e8 fc c4 fe ff       	call   c000650d <iso_open>
c001a011:	83 c4 10             	add    esp,0x10
c001a014:	89 c2                	mov    edx,eax
c001a016:	b8 01 00 00 00       	mov    eax,0x1
c001a01b:	83 fa ff             	cmp    edx,0xffffffff
c001a01e:	74 10                	je     c001a030 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a020:	83 c2 32             	add    edx,0x32
c001a023:	31 c0                	xor    eax,eax
c001a025:	01 d2                	add    edx,edx
c001a027:	89 16                	mov    DWORD PTR [esi],edx
c001a029:	eb 05                	jmp    c001a030 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a02b:	b8 04 00 00 00       	mov    eax,0x4
c001a030:	5a                   	pop    edx
c001a031:	5b                   	pop    ebx
c001a032:	5e                   	pop    esi
c001a033:	c3                   	ret    

c001a034 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a034:	53                   	push   ebx
c001a035:	83 ec 08             	sub    esp,0x8
c001a038:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a03c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a040:	85 c0                	test   eax,eax
c001a042:	74 2d                	je     c001a071 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a044:	85 db                	test   ebx,ebx
c001a046:	74 29                	je     c001a071 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a048:	b9 02 00 00 00       	mov    ecx,0x2
c001a04d:	52                   	push   edx
c001a04e:	99                   	cdq    
c001a04f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a053:	f7 f9                	idiv   ecx
c001a055:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a059:	83 e8 32             	sub    eax,0x32
c001a05c:	50                   	push   eax
c001a05d:	e8 53 c5 fe ff       	call   c00065b5 <iso_read>
c001a062:	83 c4 10             	add    esp,0x10
c001a065:	89 03                	mov    DWORD PTR [ebx],eax
c001a067:	09 d0                	or     eax,edx
c001a069:	0f 94 c0             	sete   al
c001a06c:	0f b6 c0             	movzx  eax,al
c001a06f:	eb 05                	jmp    c001a076 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a071:	b8 04 00 00 00       	mov    eax,0x4
c001a076:	83 c4 08             	add    esp,0x8
c001a079:	5b                   	pop    ebx
c001a07a:	c3                   	ret    
c001a07b:	90                   	nop

c001a07c <ISO9660::seek(void*, unsigned long long)>:
c001a07c:	57                   	push   edi
c001a07d:	56                   	push   esi
c001a07e:	b8 04 00 00 00       	mov    eax,0x4
c001a083:	51                   	push   ecx
c001a084:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a088:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a08c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a090:	85 d2                	test   edx,edx
c001a092:	74 26                	je     c001a0ba <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a094:	6a 00                	push   0x0
c001a096:	b9 02 00 00 00       	mov    ecx,0x2
c001a09b:	57                   	push   edi
c001a09c:	89 d0                	mov    eax,edx
c001a09e:	56                   	push   esi
c001a09f:	99                   	cdq    
c001a0a0:	f7 f9                	idiv   ecx
c001a0a2:	83 e8 32             	sub    eax,0x32
c001a0a5:	50                   	push   eax
c001a0a6:	e8 20 c6 fe ff       	call   c00066cb <iso_seek>
c001a0ab:	83 c4 10             	add    esp,0x10
c001a0ae:	31 f0                	xor    eax,esi
c001a0b0:	31 fa                	xor    edx,edi
c001a0b2:	09 d0                	or     eax,edx
c001a0b4:	0f 95 c0             	setne  al
c001a0b7:	0f b6 c0             	movzx  eax,al
c001a0ba:	5a                   	pop    edx
c001a0bb:	5e                   	pop    esi
c001a0bc:	5f                   	pop    edi
c001a0bd:	c3                   	ret    

c001a0be <ISO9660::tell(void*, unsigned long long*)>:
c001a0be:	53                   	push   ebx
c001a0bf:	83 ec 08             	sub    esp,0x8
c001a0c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a0c6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a0ca:	85 c0                	test   eax,eax
c001a0cc:	74 24                	je     c001a0f2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a0ce:	85 db                	test   ebx,ebx
c001a0d0:	74 20                	je     c001a0f2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a0d2:	83 ec 0c             	sub    esp,0xc
c001a0d5:	b9 02 00 00 00       	mov    ecx,0x2
c001a0da:	99                   	cdq    
c001a0db:	f7 f9                	idiv   ecx
c001a0dd:	83 e8 32             	sub    eax,0x32
c001a0e0:	50                   	push   eax
c001a0e1:	e8 69 c6 fe ff       	call   c000674f <iso_tell>
c001a0e6:	83 c4 10             	add    esp,0x10
c001a0e9:	89 03                	mov    DWORD PTR [ebx],eax
c001a0eb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a0ee:	31 c0                	xor    eax,eax
c001a0f0:	eb 05                	jmp    c001a0f7 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a0f2:	b8 04 00 00 00       	mov    eax,0x4
c001a0f7:	83 c4 08             	add    esp,0x8
c001a0fa:	5b                   	pop    ebx
c001a0fb:	c3                   	ret    

c001a0fc <ISO9660::stat(void*, unsigned long long*)>:
c001a0fc:	53                   	push   ebx
c001a0fd:	83 ec 14             	sub    esp,0x14
c001a100:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a104:	68 3d 28 02 c0       	push   0xc002283d
c001a109:	e8 37 08 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a10e:	83 c4 10             	add    esp,0x10
c001a111:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a116:	74 2c                	je     c001a144 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a118:	85 db                	test   ebx,ebx
c001a11a:	74 28                	je     c001a144 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a11c:	83 ec 0c             	sub    esp,0xc
c001a11f:	b9 02 00 00 00       	mov    ecx,0x2
c001a124:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a128:	99                   	cdq    
c001a129:	f7 f9                	idiv   ecx
c001a12b:	83 e8 32             	sub    eax,0x32
c001a12e:	50                   	push   eax
c001a12f:	e8 4c c6 fe ff       	call   c0006780 <iso_total>
c001a134:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a13b:	89 03                	mov    DWORD PTR [ebx],eax
c001a13d:	83 c4 10             	add    esp,0x10
c001a140:	31 c0                	xor    eax,eax
c001a142:	eb 05                	jmp    c001a149 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a144:	b8 04 00 00 00       	mov    eax,0x4
c001a149:	83 c4 08             	add    esp,0x8
c001a14c:	5b                   	pop    ebx
c001a14d:	c3                   	ret    

c001a14e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a14e:	55                   	push   ebp
c001a14f:	57                   	push   edi
c001a150:	56                   	push   esi
c001a151:	53                   	push   ebx
c001a152:	83 ec 18             	sub    esp,0x18
c001a155:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a159:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a15d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a161:	68 45 28 02 c0       	push   0xc0022845
c001a166:	e8 da 07 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a16b:	83 c4 10             	add    esp,0x10
c001a16e:	85 ff                	test   edi,edi
c001a170:	0f 94 c0             	sete   al
c001a173:	85 f6                	test   esi,esi
c001a175:	0f 94 c2             	sete   dl
c001a178:	09 d0                	or     eax,edx
c001a17a:	a8 01                	test   al,0x1
c001a17c:	0f 85 dd 00 00 00    	jne    c001a25f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a182:	85 db                	test   ebx,ebx
c001a184:	0f 84 d5 00 00 00    	je     c001a25f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a18a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a18d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a193:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a19a:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a1a1:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a1a3:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a1a9:	74 1b                	je     c001a1c6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a1ab:	85 c0                	test   eax,eax
c001a1ad:	74 10                	je     c001a1bf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a1af:	83 ec 0c             	sub    esp,0xc
c001a1b2:	68 e9 27 02 c0       	push   0xc00227e9
c001a1b7:	e8 95 70 ff ff       	call   c0011251 <KePanic(char const*)>
c001a1bc:	83 c4 10             	add    esp,0x10
c001a1bf:	8a 03                	mov    al,BYTE PTR [ebx]
c001a1c1:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a1c6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a1c9:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a1d0:	85 c0                	test   eax,eax
c001a1d2:	74 09                	je     c001a1dd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a1d4:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a1db:	74 51                	je     c001a22e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a1dd:	83 ec 0c             	sub    esp,0xc
c001a1e0:	68 4d 28 02 c0       	push   0xc002284d
c001a1e5:	e8 5b 07 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a1ea:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a1ed:	83 c4 10             	add    esp,0x10
c001a1f0:	83 3c 85 7c 87 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd7884],0x0
c001a1f8:	74 21                	je     c001a21b <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a1fa:	83 ec 0c             	sub    esp,0xc
c001a1fd:	68 6d 28 02 c0       	push   0xc002286d
c001a202:	e8 3e 07 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a207:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a20a:	83 c4 10             	add    esp,0x10
c001a20d:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a214:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a21b:	83 ec 0c             	sub    esp,0xc
c001a21e:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a225:	50                   	push   eax
c001a226:	e8 1b c8 fe ff       	call   c0006a46 <init_percd>
c001a22b:	83 c4 10             	add    esp,0x10
c001a22e:	83 c3 03             	add    ebx,0x3
c001a231:	52                   	push   edx
c001a232:	52                   	push   edx
c001a233:	6a 00                	push   0x0
c001a235:	53                   	push   ebx
c001a236:	e8 d2 c2 fe ff       	call   c000650d <iso_open>
c001a23b:	83 c4 10             	add    esp,0x10
c001a23e:	89 c5                	mov    ebp,eax
c001a240:	83 f8 ff             	cmp    eax,0xffffffff
c001a243:	75 21                	jne    c001a266 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a245:	50                   	push   eax
c001a246:	50                   	push   eax
c001a247:	6a 01                	push   0x1
c001a249:	53                   	push   ebx
c001a24a:	e8 be c2 fe ff       	call   c000650d <iso_open>
c001a24f:	83 c4 10             	add    esp,0x10
c001a252:	ba 02 00 00 00       	mov    edx,0x2
c001a257:	40                   	inc    eax
c001a258:	74 2b                	je     c001a285 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a25a:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a25d:	eb 24                	jmp    c001a283 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a25f:	ba 04 00 00 00       	mov    edx,0x4
c001a264:	eb 1f                	jmp    c001a285 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a266:	83 ec 0c             	sub    esp,0xc
c001a269:	50                   	push   eax
c001a26a:	e8 11 c5 fe ff       	call   c0006780 <iso_total>
c001a26f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a276:	89 07                	mov    DWORD PTR [edi],eax
c001a278:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a27b:	e8 17 c3 fe ff       	call   c0006597 <iso_close>
c001a280:	83 c4 10             	add    esp,0x10
c001a283:	31 d2                	xor    edx,edx
c001a285:	83 c4 0c             	add    esp,0xc
c001a288:	89 d0                	mov    eax,edx
c001a28a:	5b                   	pop    ebx
c001a28b:	5e                   	pop    esi
c001a28c:	5f                   	pop    edi
c001a28d:	5d                   	pop    ebp
c001a28e:	c3                   	ret    
c001a28f:	90                   	nop

c001a290 <ISO9660::close(void*)>:
c001a290:	83 ec 0c             	sub    esp,0xc
c001a293:	b8 04 00 00 00       	mov    eax,0x4
c001a298:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a29c:	85 d2                	test   edx,edx
c001a29e:	74 1b                	je     c001a2bb <ISO9660::close(void*)+0x2b>
c001a2a0:	83 ec 0c             	sub    esp,0xc
c001a2a3:	b9 02 00 00 00       	mov    ecx,0x2
c001a2a8:	89 d0                	mov    eax,edx
c001a2aa:	99                   	cdq    
c001a2ab:	f7 f9                	idiv   ecx
c001a2ad:	83 e8 32             	sub    eax,0x32
c001a2b0:	50                   	push   eax
c001a2b1:	e8 e1 c2 fe ff       	call   c0006597 <iso_close>
c001a2b6:	83 c4 10             	add    esp,0x10
c001a2b9:	31 c0                	xor    eax,eax
c001a2bb:	83 c4 0c             	add    esp,0xc
c001a2be:	c3                   	ret    
c001a2bf:	90                   	nop

c001a2c0 <ISO9660::openDir(char const*, void**)>:
c001a2c0:	56                   	push   esi
c001a2c1:	53                   	push   ebx
c001a2c2:	50                   	push   eax
c001a2c3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a2c7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a2cb:	85 db                	test   ebx,ebx
c001a2cd:	0f 84 bd 00 00 00    	je     c001a390 <ISO9660::openDir(char const*, void**)+0xd0>
c001a2d3:	85 f6                	test   esi,esi
c001a2d5:	0f 84 b5 00 00 00    	je     c001a390 <ISO9660::openDir(char const*, void**)+0xd0>
c001a2db:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a2dd:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a2e4:	38 15 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,dl
c001a2ea:	74 1b                	je     c001a307 <ISO9660::openDir(char const*, void**)+0x47>
c001a2ec:	85 c0                	test   eax,eax
c001a2ee:	74 10                	je     c001a300 <ISO9660::openDir(char const*, void**)+0x40>
c001a2f0:	83 ec 0c             	sub    esp,0xc
c001a2f3:	68 e9 27 02 c0       	push   0xc00227e9
c001a2f8:	e8 54 6f ff ff       	call   c0011251 <KePanic(char const*)>
c001a2fd:	83 c4 10             	add    esp,0x10
c001a300:	8a 03                	mov    al,BYTE PTR [ebx]
c001a302:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a307:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a30a:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a311:	85 c0                	test   eax,eax
c001a313:	74 10                	je     c001a325 <ISO9660::openDir(char const*, void**)+0x65>
c001a315:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a31c:	74 1a                	je     c001a338 <ISO9660::openDir(char const*, void**)+0x78>
c001a31e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a325:	83 ec 0c             	sub    esp,0xc
c001a328:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a32f:	50                   	push   eax
c001a330:	e8 11 c7 fe ff       	call   c0006a46 <init_percd>
c001a335:	83 c4 10             	add    esp,0x10
c001a338:	83 c3 03             	add    ebx,0x3
c001a33b:	50                   	push   eax
c001a33c:	50                   	push   eax
c001a33d:	6a 01                	push   0x1
c001a33f:	53                   	push   ebx
c001a340:	e8 c8 c1 fe ff       	call   c000650d <iso_open>
c001a345:	83 c4 10             	add    esp,0x10
c001a348:	89 c3                	mov    ebx,eax
c001a34a:	83 f8 ff             	cmp    eax,0xffffffff
c001a34d:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a352:	75 1c                	jne    c001a370 <ISO9660::openDir(char const*, void**)+0xb0>
c001a354:	53                   	push   ebx
c001a355:	53                   	push   ebx
c001a356:	68 91 28 02 c0       	push   0xc0022891
c001a35b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a361:	e8 40 e7 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a366:	83 c4 10             	add    esp,0x10
c001a369:	b8 01 00 00 00       	mov    eax,0x1
c001a36e:	eb 25                	jmp    c001a395 <ISO9660::openDir(char const*, void**)+0xd5>
c001a370:	01 db                	add    ebx,ebx
c001a372:	51                   	push   ecx
c001a373:	83 c3 65             	add    ebx,0x65
c001a376:	51                   	push   ecx
c001a377:	68 a4 28 02 c0       	push   0xc00228a4
c001a37c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a382:	e8 1f e7 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a387:	89 1e                	mov    DWORD PTR [esi],ebx
c001a389:	83 c4 10             	add    esp,0x10
c001a38c:	31 c0                	xor    eax,eax
c001a38e:	eb 05                	jmp    c001a395 <ISO9660::openDir(char const*, void**)+0xd5>
c001a390:	b8 04 00 00 00       	mov    eax,0x4
c001a395:	5a                   	pop    edx
c001a396:	5b                   	pop    ebx
c001a397:	5e                   	pop    esi
c001a398:	c3                   	ret    
c001a399:	90                   	nop

c001a39a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a39a:	55                   	push   ebp
c001a39b:	57                   	push   edi
c001a39c:	56                   	push   esi
c001a39d:	53                   	push   ebx
c001a39e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a3a4:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a3ab:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a3b2:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a3ba:	0f 84 e7 00 00 00    	je     c001a4a7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a3c0:	85 db                	test   ebx,ebx
c001a3c2:	0f 84 df 00 00 00    	je     c001a4a7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a3c8:	83 ec 0c             	sub    esp,0xc
c001a3cb:	68 b7 28 02 c0       	push   0xc00228b7
c001a3d0:	e8 70 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a3d5:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a3dc:	b9 02 00 00 00       	mov    ecx,0x2
c001a3e1:	99                   	cdq    
c001a3e2:	f7 f9                	idiv   ecx
c001a3e4:	83 e8 32             	sub    eax,0x32
c001a3e7:	89 04 24             	mov    DWORD PTR [esp],eax
c001a3ea:	e8 e3 c3 fe ff       	call   c00067d2 <iso_readdir>
c001a3ef:	83 c4 10             	add    esp,0x10
c001a3f2:	89 c6                	mov    esi,eax
c001a3f4:	85 c0                	test   eax,eax
c001a3f6:	75 37                	jne    c001a42f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001a3f8:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a3fd:	56                   	push   esi
c001a3fe:	56                   	push   esi
c001a3ff:	68 c2 28 02 c0       	push   0xc00228c2
c001a404:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a40a:	e8 97 e6 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a40f:	83 c4 0c             	add    esp,0xc
c001a412:	68 10 01 00 00       	push   0x110
c001a417:	6a 00                	push   0x0
c001a419:	57                   	push   edi
c001a41a:	e8 d1 60 fe ff       	call   c00004f0 <memset>
c001a41f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a425:	83 c4 10             	add    esp,0x10
c001a428:	b8 01 00 00 00       	mov    eax,0x1
c001a42d:	eb 7d                	jmp    c001a4ac <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a42f:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a435:	8d 68 08             	lea    ebp,[eax+0x8]
c001a438:	83 ec 0c             	sub    esp,0xc
c001a43b:	55                   	push   ebp
c001a43c:	e8 2f 61 fe ff       	call   c0000570 <strlen>
c001a441:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a449:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a44d:	83 c4 10             	add    esp,0x10
c001a450:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001a454:	75 0a                	jne    c001a460 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a456:	b8 02 00 00 00       	mov    eax,0x2
c001a45b:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001a45e:	74 05                	je     c001a465 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001a460:	b8 01 00 00 00       	mov    eax,0x1
c001a465:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a469:	50                   	push   eax
c001a46a:	50                   	push   eax
c001a46b:	55                   	push   ebp
c001a46c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a470:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a474:	50                   	push   eax
c001a475:	e8 c6 61 fe ff       	call   c0000640 <strcpy>
c001a47a:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a481:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a483:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001a489:	5a                   	pop    edx
c001a48a:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a48f:	59                   	pop    ecx
c001a490:	68 d5 28 02 c0       	push   0xc00228d5
c001a495:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a49b:	e8 06 e6 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a4a0:	83 c4 10             	add    esp,0x10
c001a4a3:	31 c0                	xor    eax,eax
c001a4a5:	eb 05                	jmp    c001a4ac <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a4a7:	b8 04 00 00 00       	mov    eax,0x4
c001a4ac:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a4b2:	5b                   	pop    ebx
c001a4b3:	5e                   	pop    esi
c001a4b4:	5f                   	pop    edi
c001a4b5:	5d                   	pop    ebp
c001a4b6:	c3                   	ret    

c001a4b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a4b7:	57                   	push   edi
c001a4b8:	56                   	push   esi
c001a4b9:	53                   	push   ebx
c001a4ba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4be:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a4c2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a4c6:	39 35 84 98 02 c0    	cmp    DWORD PTR ds:0xc0029884,esi
c001a4cc:	0f be cb             	movsx  ecx,bl
c001a4cf:	75 0b                	jne    c001a4dc <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a4d1:	0f be 05 00 37 02 c0 	movsx  eax,BYTE PTR ds:0xc0023700
c001a4d8:	39 c8                	cmp    eax,ecx
c001a4da:	74 47                	je     c001a523 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a4dc:	83 ec 0c             	sub    esp,0xc
c001a4df:	31 d2                	xor    edx,edx
c001a4e1:	68 a0 98 02 c0       	push   0xc00298a0
c001a4e6:	6a 01                	push   0x1
c001a4e8:	52                   	push   edx
c001a4e9:	56                   	push   esi
c001a4ea:	ff 34 8d 7c 87 02 c0 	push   DWORD PTR [ecx*4-0x3ffd7884]
c001a4f1:	e8 0e 35 ff ff       	call   c000da04 <LogicalDisk::read(unsigned long long, int, void*)>
c001a4f6:	83 c4 20             	add    esp,0x20
c001a4f9:	85 c0                	test   eax,eax
c001a4fb:	75 0e                	jne    c001a50b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a4fd:	89 35 84 98 02 c0    	mov    DWORD PTR ds:0xc0029884,esi
c001a503:	88 1d 00 37 02 c0    	mov    BYTE PTR ds:0xc0023700,bl
c001a509:	eb 18                	jmp    c001a523 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a50b:	50                   	push   eax
c001a50c:	68 00 08 00 00       	push   0x800
c001a511:	6a 00                	push   0x0
c001a513:	57                   	push   edi
c001a514:	e8 d7 5f fe ff       	call   c00004f0 <memset>
c001a519:	83 c4 10             	add    esp,0x10
c001a51c:	b8 01 00 00 00       	mov    eax,0x1
c001a521:	eb 0e                	jmp    c001a531 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a523:	be a0 98 02 c0       	mov    esi,0xc00298a0
c001a528:	b9 00 08 00 00       	mov    ecx,0x800
c001a52d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a52f:	31 c0                	xor    eax,eax
c001a531:	5b                   	pop    ebx
c001a532:	5e                   	pop    esi
c001a533:	5f                   	pop    edi
c001a534:	c3                   	ret    
c001a535:	90                   	nop

c001a536 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a536:	53                   	push   ebx
c001a537:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001a53d:	c7 05 84 98 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029884,0xdeadbeef
c001a547:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001a54e:	8d 58 41             	lea    ebx,[eax+0x41]
c001a551:	0f be db             	movsx  ebx,bl
c001a554:	53                   	push   ebx
c001a555:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a559:	50                   	push   eax
c001a55a:	6a 10                	push   0x10
c001a55c:	e8 56 ff ff ff       	call   c001a4b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a561:	83 c4 10             	add    esp,0x10
c001a564:	31 d2                	xor    edx,edx
c001a566:	85 c0                	test   eax,eax
c001a568:	75 33                	jne    c001a59d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a56a:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a56f:	75 2c                	jne    c001a59d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a571:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a576:	75 25                	jne    c001a59d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a578:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a57d:	75 1e                	jne    c001a59d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a57f:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a584:	75 17                	jne    c001a59d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a586:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a58b:	75 10                	jne    c001a59d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a58d:	83 ec 0c             	sub    esp,0xc
c001a590:	53                   	push   ebx
c001a591:	e8 b0 c4 fe ff       	call   c0006a46 <init_percd>
c001a596:	83 c4 10             	add    esp,0x10
c001a599:	40                   	inc    eax
c001a59a:	0f 95 c2             	setne  dl
c001a59d:	88 d0                	mov    al,dl
c001a59f:	81 c4 08 08 00 00    	add    esp,0x808
c001a5a5:	5b                   	pop    ebx
c001a5a6:	c3                   	ret    
c001a5a7:	90                   	nop

c001a5a8 <ISO9660::ISO9660()>:
c001a5a8:	83 ec 0c             	sub    esp,0xc
c001a5ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5af:	83 ec 0c             	sub    esp,0xc
c001a5b2:	50                   	push   eax
c001a5b3:	e8 00 0f ff ff       	call   c000b4b8 <Filesystem::Filesystem()>
c001a5b8:	83 c4 10             	add    esp,0x10
c001a5bb:	ba f0 28 02 c0       	mov    edx,0xc00228f0
c001a5c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5c4:	89 10                	mov    DWORD PTR [eax],edx
c001a5c6:	e8 8d c5 fe ff       	call   c0006b58 <fs_iso9660_init>
c001a5cb:	90                   	nop
c001a5cc:	83 c4 0c             	add    esp,0xc
c001a5cf:	c3                   	ret    

c001a5d0 <SoundCard::beginPlayback()>:
c001a5d0:	c7 44 24 04 54 29 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022954
c001a5d8:	e9 74 6c ff ff       	jmp    c0011251 <KePanic(char const*)>
c001a5dd:	90                   	nop

c001a5de <SoundCard::stopPlayback()>:
c001a5de:	c7 44 24 04 54 29 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022954
c001a5e6:	e9 66 6c ff ff       	jmp    c0011251 <KePanic(char const*)>
c001a5eb:	90                   	nop

c001a5ec <SoundCard::SoundCard(char const*)>:
c001a5ec:	83 ec 1c             	sub    esp,0x1c
c001a5ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5f3:	83 ec 08             	sub    esp,0x8
c001a5f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a5fa:	50                   	push   eax
c001a5fb:	e8 ba 21 ff ff       	call   c000c7ba <Device::Device(char const*)>
c001a600:	83 c4 10             	add    esp,0x10
c001a603:	ba a0 29 02 c0       	mov    edx,0xc00229a0
c001a608:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a60c:	89 10                	mov    DWORD PTR [eax],edx
c001a60e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a612:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a619:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a61d:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001a627:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a62b:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001a635:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a639:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001a643:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a647:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a651:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a659:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a65e:	7f 1a                	jg     c001a67a <SoundCard::SoundCard(char const*)+0x8e>
c001a660:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a664:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a668:	83 c2 54             	add    edx,0x54
c001a66b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001a673:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a678:	eb df                	jmp    c001a659 <SoundCard::SoundCard(char const*)+0x6d>
c001a67a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a67e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a685:	90                   	nop
c001a686:	83 c4 1c             	add    esp,0x1c
c001a689:	c3                   	ret    

c001a68a <SoundCard::~SoundCard()>:
c001a68a:	83 ec 0c             	sub    esp,0xc
c001a68d:	ba a0 29 02 c0       	mov    edx,0xc00229a0
c001a692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a696:	89 10                	mov    DWORD PTR [eax],edx
c001a698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a69c:	83 ec 0c             	sub    esp,0xc
c001a69f:	50                   	push   eax
c001a6a0:	e8 7f 1e ff ff       	call   c000c524 <Device::~Device()>
c001a6a5:	83 c4 10             	add    esp,0x10
c001a6a8:	90                   	nop
c001a6a9:	83 c4 0c             	add    esp,0xc
c001a6ac:	c3                   	ret    
c001a6ad:	90                   	nop

c001a6ae <SoundCard::~SoundCard()>:
c001a6ae:	83 ec 0c             	sub    esp,0xc
c001a6b1:	83 ec 0c             	sub    esp,0xc
c001a6b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6b8:	e8 cd ff ff ff       	call   c001a68a <SoundCard::~SoundCard()>
c001a6bd:	83 c4 10             	add    esp,0x10
c001a6c0:	83 ec 08             	sub    esp,0x8
c001a6c3:	68 e8 01 00 00       	push   0x1e8
c001a6c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6cc:	e8 47 01 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a6d1:	83 c4 10             	add    esp,0x10
c001a6d4:	83 c4 0c             	add    esp,0xc
c001a6d7:	c3                   	ret    

c001a6d8 <SoundCard::configureRates(int, int, int)>:
c001a6d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a6dc:	31 c0                	xor    eax,eax
c001a6de:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a6e5:	75 20                	jne    c001a707 <SoundCard::configureRates(int, int, int)+0x2f>
c001a6e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6eb:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a6f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a6f5:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a6fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6ff:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a705:	b0 01                	mov    al,0x1
c001a707:	c3                   	ret    

c001a708 <SoundCard::getSamples16(int, short*)>:
c001a708:	55                   	push   ebp
c001a709:	57                   	push   edi
c001a70a:	31 ff                	xor    edi,edi
c001a70c:	56                   	push   esi
c001a70d:	53                   	push   ebx
c001a70e:	31 db                	xor    ebx,ebx
c001a710:	83 ec 10             	sub    esp,0x10
c001a713:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a717:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a71b:	8d 04 36             	lea    eax,[esi+esi*1]
c001a71e:	50                   	push   eax
c001a71f:	6a 00                	push   0x0
c001a721:	55                   	push   ebp
c001a722:	e8 c9 5d fe ff       	call   c00004f0 <memset>
c001a727:	83 c4 10             	add    esp,0x10
c001a72a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a72e:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001a735:	85 c0                	test   eax,eax
c001a737:	74 1b                	je     c001a754 <SoundCard::getSamples16(int, short*)+0x4c>
c001a739:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a73d:	75 15                	jne    c001a754 <SoundCard::getSamples16(int, short*)+0x4c>
c001a73f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a743:	55                   	push   ebp
c001a744:	56                   	push   esi
c001a745:	50                   	push   eax
c001a746:	e8 f1 02 00 00       	call   c001aa3c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a74b:	83 c4 10             	add    esp,0x10
c001a74e:	39 c7                	cmp    edi,eax
c001a750:	7d 02                	jge    c001a754 <SoundCard::getSamples16(int, short*)+0x4c>
c001a752:	89 c7                	mov    edi,eax
c001a754:	43                   	inc    ebx
c001a755:	83 fb 20             	cmp    ebx,0x20
c001a758:	75 d0                	jne    c001a72a <SoundCard::getSamples16(int, short*)+0x22>
c001a75a:	83 c4 0c             	add    esp,0xc
c001a75d:	89 f8                	mov    eax,edi
c001a75f:	5b                   	pop    ebx
c001a760:	5e                   	pop    esi
c001a761:	5f                   	pop    edi
c001a762:	5d                   	pop    ebp
c001a763:	c3                   	ret    

c001a764 <SoundCard::getSamples32(int, int*)>:
c001a764:	55                   	push   ebp
c001a765:	57                   	push   edi
c001a766:	31 ff                	xor    edi,edi
c001a768:	56                   	push   esi
c001a769:	31 f6                	xor    esi,esi
c001a76b:	53                   	push   ebx
c001a76c:	83 ec 10             	sub    esp,0x10
c001a76f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a773:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a777:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a77b:	c1 e0 02             	shl    eax,0x2
c001a77e:	50                   	push   eax
c001a77f:	6a 00                	push   0x0
c001a781:	55                   	push   ebp
c001a782:	e8 69 5d fe ff       	call   c00004f0 <memset>
c001a787:	83 c4 10             	add    esp,0x10
c001a78a:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a791:	85 c0                	test   eax,eax
c001a793:	74 1b                	je     c001a7b0 <SoundCard::getSamples32(int, int*)+0x4c>
c001a795:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a799:	75 15                	jne    c001a7b0 <SoundCard::getSamples32(int, int*)+0x4c>
c001a79b:	53                   	push   ebx
c001a79c:	55                   	push   ebp
c001a79d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a7a1:	50                   	push   eax
c001a7a2:	e8 61 03 00 00       	call   c001ab08 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a7a7:	83 c4 10             	add    esp,0x10
c001a7aa:	39 c6                	cmp    esi,eax
c001a7ac:	7d 02                	jge    c001a7b0 <SoundCard::getSamples32(int, int*)+0x4c>
c001a7ae:	89 c6                	mov    esi,eax
c001a7b0:	47                   	inc    edi
c001a7b1:	83 ff 20             	cmp    edi,0x20
c001a7b4:	75 d4                	jne    c001a78a <SoundCard::getSamples32(int, int*)+0x26>
c001a7b6:	85 f6                	test   esi,esi
c001a7b8:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a7bf:	75 0f                	jne    c001a7d0 <SoundCard::getSamples32(int, int*)+0x6c>
c001a7c1:	85 c0                	test   eax,eax
c001a7c3:	74 1b                	je     c001a7e0 <SoundCard::getSamples32(int, int*)+0x7c>
c001a7c5:	83 ec 0c             	sub    esp,0xc
c001a7c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7ca:	53                   	push   ebx
c001a7cb:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a7ce:	eb 0d                	jmp    c001a7dd <SoundCard::getSamples32(int, int*)+0x79>
c001a7d0:	85 c0                	test   eax,eax
c001a7d2:	75 0c                	jne    c001a7e0 <SoundCard::getSamples32(int, int*)+0x7c>
c001a7d4:	83 ec 0c             	sub    esp,0xc
c001a7d7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7d9:	53                   	push   ebx
c001a7da:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a7dd:	83 c4 10             	add    esp,0x10
c001a7e0:	83 c4 0c             	add    esp,0xc
c001a7e3:	89 f0                	mov    eax,esi
c001a7e5:	5b                   	pop    ebx
c001a7e6:	5e                   	pop    esi
c001a7e7:	5f                   	pop    edi
c001a7e8:	5d                   	pop    ebp
c001a7e9:	c3                   	ret    

c001a7ea <SoundCard::addChannel(SoundPort*)>:
c001a7ea:	83 ec 0c             	sub    esp,0xc
c001a7ed:	31 c0                	xor    eax,eax
c001a7ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a7f3:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a7fb:	74 1b                	je     c001a818 <SoundCard::addChannel(SoundPort*)+0x2e>
c001a7fd:	40                   	inc    eax
c001a7fe:	83 f8 20             	cmp    eax,0x20
c001a801:	75 f0                	jne    c001a7f3 <SoundCard::addChannel(SoundPort*)+0x9>
c001a803:	83 ec 0c             	sub    esp,0xc
c001a806:	68 79 29 02 c0       	push   0xc0022979
c001a80b:	e8 41 6a ff ff       	call   c0011251 <KePanic(char const*)>
c001a810:	83 c4 10             	add    esp,0x10
c001a813:	83 c8 ff             	or     eax,0xffffffff
c001a816:	eb 0b                	jmp    c001a823 <SoundCard::addChannel(SoundPort*)+0x39>
c001a818:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a81c:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a823:	83 c4 0c             	add    esp,0xc
c001a826:	c3                   	ret    
c001a827:	90                   	nop

c001a828 <SoundCard::removeChannel(int)>:
c001a828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a82c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a830:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a83b:	c3                   	ret    

c001a83c <SoundPort::SoundPort(int, int, int, int)>:
c001a83c:	83 ec 0c             	sub    esp,0xc
c001a83f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a843:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a84a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a84e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a856:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a85a:	89 10                	mov    DWORD PTR [eax],edx
c001a85c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a860:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a864:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a86b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a86f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a872:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001a877:	75 13                	jne    c001a88c <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a87d:	8b 00                	mov    eax,DWORD PTR [eax]
c001a87f:	05 a0 0f 00 00       	add    eax,0xfa0
c001a884:	01 c0                	add    eax,eax
c001a886:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a88a:	66 90                	xchg   ax,ax
c001a88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a890:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a894:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a89b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001a8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a8a9:	c1 e0 02             	shl    eax,0x2
c001a8ac:	83 ec 0c             	sub    esp,0xc
c001a8af:	50                   	push   eax
c001a8b0:	e8 01 d2 fe ff       	call   c0007ab6 <malloc>
c001a8b5:	83 c4 10             	add    esp,0x10
c001a8b8:	89 c2                	mov    edx,eax
c001a8ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8be:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a8c1:	90                   	nop
c001a8c2:	83 c4 0c             	add    esp,0xc
c001a8c5:	c3                   	ret    
c001a8c6:	66 90                	xchg   ax,ax

c001a8c8 <SoundPort::~SoundPort()>:
c001a8c8:	83 ec 0c             	sub    esp,0xc
c001a8cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8cf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a8d2:	85 c0                	test   eax,eax
c001a8d4:	74 1e                	je     c001a8f4 <SoundPort::~SoundPort()+0x2c>
c001a8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a8dd:	83 ec 0c             	sub    esp,0xc
c001a8e0:	50                   	push   eax
c001a8e1:	e8 e0 d1 fe ff       	call   c0007ac6 <free>
c001a8e6:	83 c4 10             	add    esp,0x10
c001a8e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8ed:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a8f4:	90                   	nop
c001a8f5:	83 c4 0c             	add    esp,0xc
c001a8f8:	c3                   	ret    
c001a8f9:	90                   	nop
c001a8fa:	66 90                	xchg   ax,ax

c001a8fc <SoundPort::unpause()>:
c001a8fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a900:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001a904:	c3                   	ret    
c001a905:	90                   	nop
c001a906:	66 90                	xchg   ax,ax

c001a908 <SoundPort::pause()>:
c001a908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a90c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a910:	c3                   	ret    
c001a911:	90                   	nop
c001a912:	66 90                	xchg   ax,ax

c001a914 <SoundPort::getBufferUsed()>:
c001a914:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a918:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a91b:	c3                   	ret    

c001a91c <SoundPort::getBufferSize()>:
c001a91c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a920:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a923:	c3                   	ret    

c001a924 <SoundPort::buffer16(short*, int)>:
c001a924:	55                   	push   ebp
c001a925:	57                   	push   edi
c001a926:	56                   	push   esi
c001a927:	53                   	push   ebx
c001a928:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a92c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001a930:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001a933:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001a936:	74 68                	je     c001a9a0 <SoundPort::buffer16(short*, int)+0x7c>
c001a938:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a93c:	85 c9                	test   ecx,ecx
c001a93e:	7e 60                	jle    c001a9a0 <SoundPort::buffer16(short*, int)+0x7c>
c001a940:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001a944:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a947:	c1 e1 0f             	shl    ecx,0xf
c001a94a:	8d 70 01             	lea    esi,[eax+0x1]
c001a94d:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a950:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001a953:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a956:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a959:	74 4d                	je     c001a9a8 <SoundPort::buffer16(short*, int)+0x84>
c001a95b:	31 f6                	xor    esi,esi
c001a95d:	eb 21                	jmp    c001a980 <SoundPort::buffer16(short*, int)+0x5c>
c001a95f:	90                   	nop
c001a960:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001a965:	8d 79 01             	lea    edi,[ecx+0x1]
c001a968:	c1 e3 0f             	shl    ebx,0xf
c001a96b:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001a96e:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001a971:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001a974:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a977:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a97a:	74 1c                	je     c001a998 <SoundPort::buffer16(short*, int)+0x74>
c001a97c:	89 c6                	mov    esi,eax
c001a97e:	66 90                	xchg   ax,ax
c001a980:	8d 46 01             	lea    eax,[esi+0x1]
c001a983:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001a987:	75 d7                	jne    c001a960 <SoundPort::buffer16(short*, int)+0x3c>
c001a989:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a98d:	8d 76 00             	lea    esi,[esi+0x0]
c001a990:	5b                   	pop    ebx
c001a991:	5e                   	pop    esi
c001a992:	5f                   	pop    edi
c001a993:	5d                   	pop    ebp
c001a994:	c3                   	ret    
c001a995:	8d 76 00             	lea    esi,[esi+0x0]
c001a998:	5b                   	pop    ebx
c001a999:	8d 46 02             	lea    eax,[esi+0x2]
c001a99c:	5e                   	pop    esi
c001a99d:	5f                   	pop    edi
c001a99e:	5d                   	pop    ebp
c001a99f:	c3                   	ret    
c001a9a0:	5b                   	pop    ebx
c001a9a1:	31 c0                	xor    eax,eax
c001a9a3:	5e                   	pop    esi
c001a9a4:	5f                   	pop    edi
c001a9a5:	5d                   	pop    ebp
c001a9a6:	c3                   	ret    
c001a9a7:	90                   	nop
c001a9a8:	b8 01 00 00 00       	mov    eax,0x1
c001a9ad:	eb e1                	jmp    c001a990 <SoundPort::buffer16(short*, int)+0x6c>
c001a9af:	90                   	nop

c001a9b0 <SoundPort::buffer32(int*, int)>:
c001a9b0:	55                   	push   ebp
c001a9b1:	57                   	push   edi
c001a9b2:	56                   	push   esi
c001a9b3:	53                   	push   ebx
c001a9b4:	83 ec 04             	sub    esp,0x4
c001a9b7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a9bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9bf:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a9c2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a9c6:	89 04 24             	mov    DWORD PTR [esp],eax
c001a9c9:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a9cc:	74 5a                	je     c001aa28 <SoundPort::buffer32(int*, int)+0x78>
c001a9ce:	85 c0                	test   eax,eax
c001a9d0:	7e 56                	jle    c001aa28 <SoundPort::buffer32(int*, int)+0x78>
c001a9d2:	8d 71 01             	lea    esi,[ecx+0x1]
c001a9d5:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a9d8:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a9db:	8b 37                	mov    esi,DWORD PTR [edi]
c001a9dd:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001a9e0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a9e3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a9e6:	74 4c                	je     c001aa34 <SoundPort::buffer32(int*, int)+0x84>
c001a9e8:	31 f6                	xor    esi,esi
c001a9ea:	eb 1c                	jmp    c001aa08 <SoundPort::buffer32(int*, int)+0x58>
c001a9ec:	8d 69 01             	lea    ebp,[ecx+0x1]
c001a9ef:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001a9f2:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001a9f5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001a9f8:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001a9fc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a9ff:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aa02:	74 18                	je     c001aa1c <SoundPort::buffer32(int*, int)+0x6c>
c001aa04:	89 de                	mov    esi,ebx
c001aa06:	66 90                	xchg   ax,ax
c001aa08:	8d 5e 01             	lea    ebx,[esi+0x1]
c001aa0b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001aa0e:	75 dc                	jne    c001a9ec <SoundPort::buffer32(int*, int)+0x3c>
c001aa10:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001aa13:	90                   	nop
c001aa14:	83 c4 04             	add    esp,0x4
c001aa17:	5b                   	pop    ebx
c001aa18:	5e                   	pop    esi
c001aa19:	5f                   	pop    edi
c001aa1a:	5d                   	pop    ebp
c001aa1b:	c3                   	ret    
c001aa1c:	83 c4 04             	add    esp,0x4
c001aa1f:	8d 46 02             	lea    eax,[esi+0x2]
c001aa22:	5b                   	pop    ebx
c001aa23:	5e                   	pop    esi
c001aa24:	5f                   	pop    edi
c001aa25:	5d                   	pop    ebp
c001aa26:	c3                   	ret    
c001aa27:	90                   	nop
c001aa28:	83 c4 04             	add    esp,0x4
c001aa2b:	31 c0                	xor    eax,eax
c001aa2d:	5b                   	pop    ebx
c001aa2e:	5e                   	pop    esi
c001aa2f:	5f                   	pop    edi
c001aa30:	5d                   	pop    ebp
c001aa31:	c3                   	ret    
c001aa32:	66 90                	xchg   ax,ax
c001aa34:	b8 01 00 00 00       	mov    eax,0x1
c001aa39:	eb d9                	jmp    c001aa14 <SoundPort::buffer32(int*, int)+0x64>
c001aa3b:	90                   	nop

c001aa3c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001aa3c:	57                   	push   edi
c001aa3d:	56                   	push   esi
c001aa3e:	53                   	push   ebx
c001aa3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa43:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001aa47:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001aa4d:	39 03                	cmp    DWORD PTR [ebx],eax
c001aa4f:	74 13                	je     c001aa64 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001aa51:	83 ec 0c             	sub    esp,0xc
c001aa54:	68 cc 29 02 c0       	push   0xc00229cc
c001aa59:	e8 f3 67 ff ff       	call   c0011251 <KePanic(char const*)>
c001aa5e:	83 c4 10             	add    esp,0x10
c001aa61:	8d 76 00             	lea    esi,[esi+0x0]
c001aa64:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001aa6a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001aa6d:	74 11                	je     c001aa80 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001aa6f:	83 ec 0c             	sub    esp,0xc
c001aa72:	68 0b 2a 02 c0       	push   0xc0022a0b
c001aa77:	e8 d5 67 ff ff       	call   c0011251 <KePanic(char const*)>
c001aa7c:	83 c4 10             	add    esp,0x10
c001aa7f:	90                   	nop
c001aa80:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001aa86:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001aa89:	74 11                	je     c001aa9c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001aa8b:	83 ec 0c             	sub    esp,0xc
c001aa8e:	68 0b 2a 02 c0       	push   0xc0022a0b
c001aa93:	e8 b9 67 ff ff       	call   c0011251 <KePanic(char const*)>
c001aa98:	83 c4 10             	add    esp,0x10
c001aa9b:	90                   	nop
c001aa9c:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001aa9f:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001aaa3:	7e 07                	jle    c001aaac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001aaa5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aaa9:	8d 76 00             	lea    esi,[esi+0x0]
c001aaac:	85 f6                	test   esi,esi
c001aaae:	7e 2c                	jle    c001aadc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001aab0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aab4:	8d 3c 36             	lea    edi,[esi+esi*1]
c001aab7:	31 c9                	xor    ecx,ecx
c001aab9:	01 d7                	add    edi,edx
c001aabb:	90                   	nop
c001aabc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001aabf:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001aac2:	85 c0                	test   eax,eax
c001aac4:	79 06                	jns    c001aacc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001aac6:	05 ff 7f 00 00       	add    eax,0x7fff
c001aacb:	90                   	nop
c001aacc:	c1 f8 0f             	sar    eax,0xf
c001aacf:	83 c1 04             	add    ecx,0x4
c001aad2:	66 01 02             	add    WORD PTR [edx],ax
c001aad5:	83 c2 02             	add    edx,0x2
c001aad8:	39 d7                	cmp    edi,edx
c001aada:	75 e0                	jne    c001aabc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001aadc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001aadf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001aae2:	83 ec 04             	sub    esp,0x4
c001aae5:	29 f0                	sub    eax,esi
c001aae7:	c1 e0 02             	shl    eax,0x2
c001aaea:	50                   	push   eax
c001aaeb:	8d 04 b2             	lea    eax,[edx+esi*4]
c001aaee:	50                   	push   eax
c001aaef:	52                   	push   edx
c001aaf0:	e8 db 58 fe ff       	call   c00003d0 <memmove>
c001aaf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001aaf8:	83 c4 10             	add    esp,0x10
c001aafb:	29 f0                	sub    eax,esi
c001aafd:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ab00:	89 f0                	mov    eax,esi
c001ab02:	5b                   	pop    ebx
c001ab03:	5e                   	pop    esi
c001ab04:	5f                   	pop    edi
c001ab05:	c3                   	ret    
c001ab06:	66 90                	xchg   ax,ax

c001ab08 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001ab08:	57                   	push   edi
c001ab09:	56                   	push   esi
c001ab0a:	53                   	push   ebx
c001ab0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ab0f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ab13:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ab17:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001ab1d:	39 06                	cmp    DWORD PTR [esi],eax
c001ab1f:	74 13                	je     c001ab34 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001ab21:	83 ec 0c             	sub    esp,0xc
c001ab24:	68 ec 29 02 c0       	push   0xc00229ec
c001ab29:	e8 23 67 ff ff       	call   c0011251 <KePanic(char const*)>
c001ab2e:	83 c4 10             	add    esp,0x10
c001ab31:	8d 76 00             	lea    esi,[esi+0x0]
c001ab34:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001ab3a:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001ab3d:	74 11                	je     c001ab50 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001ab3f:	83 ec 0c             	sub    esp,0xc
c001ab42:	68 27 2a 02 c0       	push   0xc0022a27
c001ab47:	e8 05 67 ff ff       	call   c0011251 <KePanic(char const*)>
c001ab4c:	83 c4 10             	add    esp,0x10
c001ab4f:	90                   	nop
c001ab50:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001ab56:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001ab59:	74 11                	je     c001ab6c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001ab5b:	83 ec 0c             	sub    esp,0xc
c001ab5e:	68 27 2a 02 c0       	push   0xc0022a27
c001ab63:	e8 e9 66 ff ff       	call   c0011251 <KePanic(char const*)>
c001ab68:	83 c4 10             	add    esp,0x10
c001ab6b:	90                   	nop
c001ab6c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001ab6f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001ab73:	7e 07                	jle    c001ab7c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001ab75:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ab79:	8d 76 00             	lea    esi,[esi+0x0]
c001ab7c:	85 ff                	test   edi,edi
c001ab7e:	7e 1c                	jle    c001ab9c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001ab80:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001ab87:	31 c0                	xor    eax,eax
c001ab89:	8d 76 00             	lea    esi,[esi+0x0]
c001ab8c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ab8f:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001ab92:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001ab95:	83 c0 04             	add    eax,0x4
c001ab98:	39 c1                	cmp    ecx,eax
c001ab9a:	75 f0                	jne    c001ab8c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001ab9c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ab9f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001aba2:	83 ec 04             	sub    esp,0x4
c001aba5:	29 f8                	sub    eax,edi
c001aba7:	c1 e0 02             	shl    eax,0x2
c001abaa:	50                   	push   eax
c001abab:	8d 04 ba             	lea    eax,[edx+edi*4]
c001abae:	50                   	push   eax
c001abaf:	52                   	push   edx
c001abb0:	e8 1b 58 fe ff       	call   c00003d0 <memmove>
c001abb5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001abb8:	83 c4 10             	add    esp,0x10
c001abbb:	29 f8                	sub    eax,edi
c001abbd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001abc0:	89 f8                	mov    eax,edi
c001abc2:	5b                   	pop    ebx
c001abc3:	5e                   	pop    esi
c001abc4:	5f                   	pop    edi
c001abc5:	c3                   	ret    

c001abc6 <PCI::open(int, int, void*)>:
c001abc6:	83 ec 18             	sub    esp,0x18
c001abc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001abcd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001abd1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001abd7:	8b 10                	mov    edx,DWORD PTR [eax]
c001abd9:	50                   	push   eax
c001abda:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001abdd:	31 c0                	xor    eax,eax
c001abdf:	83 c4 1c             	add    esp,0x1c
c001abe2:	c3                   	ret    
c001abe3:	90                   	nop

c001abe4 <PCI::close(int, int, void*)>:
c001abe4:	31 c0                	xor    eax,eax
c001abe6:	c3                   	ret    
c001abe7:	90                   	nop

c001abe8 <PCI::PCI()>:
c001abe8:	83 ec 0c             	sub    esp,0xc
c001abeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abef:	83 ec 08             	sub    esp,0x8
c001abf2:	68 43 2a 02 c0       	push   0xc0022a43
c001abf7:	50                   	push   eax
c001abf8:	e8 87 13 ff ff       	call   c000bf84 <Bus::Bus(char const*)>
c001abfd:	83 c4 10             	add    esp,0x10
c001ac00:	ba ec 2a 02 c0       	mov    edx,0xc0022aec
c001ac05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac09:	89 10                	mov    DWORD PTR [eax],edx
c001ac0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac0f:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001ac19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac1d:	a3 a0 a0 02 c0       	mov    ds:0xc002a0a0,eax
c001ac22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ac2c:	0f b6 d0             	movzx  edx,al
c001ac2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac33:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001ac3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ac44:	0f b6 d0             	movzx  edx,al
c001ac47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac4b:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001ac50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ac5a:	8d 50 01             	lea    edx,[eax+0x1]
c001ac5d:	88 d1                	mov    cl,dl
c001ac5f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac63:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ac69:	0f b6 d0             	movzx  edx,al
c001ac6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac70:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ac74:	83 c9 c0             	or     ecx,0xffffffc0
c001ac77:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ac7b:	90                   	nop
c001ac7c:	83 c4 0c             	add    esp,0xc
c001ac7f:	c3                   	ret    

c001ac80 <PCI::readBAR8(unsigned int, int)>:
c001ac80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac88:	f6 c2 01             	test   dl,0x1
c001ac8b:	74 07                	je     c001ac94 <PCI::readBAR8(unsigned int, int)+0x14>
c001ac8d:	83 e2 fc             	and    edx,0xfffffffc
c001ac90:	01 c2                	add    edx,eax
c001ac92:	ec                   	in     al,dx
c001ac93:	c3                   	ret    
c001ac94:	83 e2 f0             	and    edx,0xfffffff0
c001ac97:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001ac9a:	c3                   	ret    
c001ac9b:	90                   	nop

c001ac9c <PCI::readBAR16(unsigned int, int)>:
c001ac9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aca0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aca4:	f6 c2 01             	test   dl,0x1
c001aca7:	74 08                	je     c001acb1 <PCI::readBAR16(unsigned int, int)+0x15>
c001aca9:	83 e2 fc             	and    edx,0xfffffffc
c001acac:	01 c2                	add    edx,eax
c001acae:	66 ed                	in     ax,dx
c001acb0:	c3                   	ret    
c001acb1:	83 e2 f0             	and    edx,0xfffffff0
c001acb4:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001acb8:	c3                   	ret    
c001acb9:	90                   	nop

c001acba <PCI::readBAR32(unsigned int, int)>:
c001acba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001acbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acc2:	f6 c2 01             	test   dl,0x1
c001acc5:	74 07                	je     c001acce <PCI::readBAR32(unsigned int, int)+0x14>
c001acc7:	83 e2 fc             	and    edx,0xfffffffc
c001acca:	01 c2                	add    edx,eax
c001accc:	ed                   	in     eax,dx
c001accd:	c3                   	ret    
c001acce:	83 e2 f0             	and    edx,0xfffffff0
c001acd1:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001acd4:	c3                   	ret    
c001acd5:	90                   	nop

c001acd6 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001acd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001acda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ace2:	f6 c2 01             	test   dl,0x1
c001ace5:	74 07                	je     c001acee <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001ace7:	83 e2 fc             	and    edx,0xfffffffc
c001acea:	01 ca                	add    edx,ecx
c001acec:	ee                   	out    dx,al
c001aced:	c3                   	ret    
c001acee:	83 e2 f0             	and    edx,0xfffffff0
c001acf1:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001acf4:	c3                   	ret    
c001acf5:	90                   	nop

c001acf6 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001acf6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001acfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acfe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad02:	f6 c2 01             	test   dl,0x1
c001ad05:	74 08                	je     c001ad0f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001ad07:	83 e2 fc             	and    edx,0xfffffffc
c001ad0a:	01 ca                	add    edx,ecx
c001ad0c:	66 ef                	out    dx,ax
c001ad0e:	c3                   	ret    
c001ad0f:	83 e2 f0             	and    edx,0xfffffff0
c001ad12:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001ad16:	c3                   	ret    
c001ad17:	90                   	nop

c001ad18 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001ad18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad20:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad24:	f6 c2 01             	test   dl,0x1
c001ad27:	74 07                	je     c001ad30 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001ad29:	83 e2 fc             	and    edx,0xfffffffc
c001ad2c:	01 ca                	add    edx,ecx
c001ad2e:	ef                   	out    dx,eax
c001ad2f:	c3                   	ret    
c001ad30:	83 e2 f0             	and    edx,0xfffffff0
c001ad33:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001ad36:	c3                   	ret    
c001ad37:	90                   	nop

c001ad38 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ad38:	55                   	push   ebp
c001ad39:	57                   	push   edi
c001ad3a:	56                   	push   esi
c001ad3b:	53                   	push   ebx
c001ad3c:	83 ec 0c             	sub    esp,0xc
c001ad3f:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001ad44:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001ad48:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ad4c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ad50:	83 fe 07             	cmp    esi,0x7
c001ad53:	76 10                	jbe    c001ad65 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001ad55:	83 ec 0c             	sub    esp,0xc
c001ad58:	68 4b 2a 02 c0       	push   0xc0022a4b
c001ad5d:	e8 ef 64 ff ff       	call   c0011251 <KePanic(char const*)>
c001ad62:	83 c4 10             	add    esp,0x10
c001ad65:	0f b6 db             	movzx  ebx,bl
c001ad68:	83 fb 0f             	cmp    ebx,0xf
c001ad6b:	76 10                	jbe    c001ad7d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001ad6d:	83 ec 0c             	sub    esp,0xc
c001ad70:	68 7b 2a 02 c0       	push   0xc0022a7b
c001ad75:	e8 d7 64 ff ff       	call   c0011251 <KePanic(char const*)>
c001ad7a:	83 c4 10             	add    esp,0x10
c001ad7d:	8d 04 36             	lea    eax,[esi+esi*1]
c001ad80:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ad85:	83 c8 f0             	or     eax,0xfffffff0
c001ad88:	ee                   	out    dx,al
c001ad89:	ba fa 0c 00 00       	mov    edx,0xcfa
c001ad8e:	89 e8                	mov    eax,ebp
c001ad90:	ee                   	out    dx,al
c001ad91:	83 c4 0c             	add    esp,0xc
c001ad94:	89 d8                	mov    eax,ebx
c001ad96:	89 f9                	mov    ecx,edi
c001ad98:	c1 e0 08             	shl    eax,0x8
c001ad9b:	0f b6 d9             	movzx  ebx,cl
c001ad9e:	83 e3 fc             	and    ebx,0xfffffffc
c001ada1:	09 d8                	or     eax,ebx
c001ada3:	5b                   	pop    ebx
c001ada4:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001ada9:	5e                   	pop    esi
c001adaa:	5f                   	pop    edi
c001adab:	5d                   	pop    ebp
c001adac:	c3                   	ret    
c001adad:	90                   	nop

c001adae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001adae:	57                   	push   edi
c001adaf:	56                   	push   esi
c001adb0:	53                   	push   ebx
c001adb1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001adb5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001adb9:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001adbf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001adc3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001adc7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001adcb:	83 ff 01             	cmp    edi,0x1
c001adce:	75 3f                	jne    c001ae0f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001add0:	89 de                	mov    esi,ebx
c001add2:	0f b6 c0             	movzx  eax,al
c001add5:	81 e6 fc 00 00 00    	and    esi,0xfc
c001addb:	c1 e0 10             	shl    eax,0x10
c001adde:	0f b6 c9             	movzx  ecx,cl
c001ade1:	09 f0                	or     eax,esi
c001ade3:	c1 e1 08             	shl    ecx,0x8
c001ade6:	0f b6 d2             	movzx  edx,dl
c001ade9:	09 c8                	or     eax,ecx
c001adeb:	c1 e2 0b             	shl    edx,0xb
c001adee:	09 d0                	or     eax,edx
c001adf0:	ba f8 0c 00 00       	mov    edx,0xcf8
c001adf5:	0d 00 00 00 80       	or     eax,0x80000000
c001adfa:	ef                   	out    dx,eax
c001adfb:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ae00:	ed                   	in     eax,dx
c001ae01:	83 e3 02             	and    ebx,0x2
c001ae04:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001ae0b:	d3 e8                	shr    eax,cl
c001ae0d:	eb 44                	jmp    c001ae53 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001ae0f:	83 ff 02             	cmp    edi,0x2
c001ae12:	75 2d                	jne    c001ae41 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001ae14:	83 ec 0c             	sub    esp,0xc
c001ae17:	0f b6 c9             	movzx  ecx,cl
c001ae1a:	0f b6 d2             	movzx  edx,dl
c001ae1d:	0f b6 fb             	movzx  edi,bl
c001ae20:	0f b6 c0             	movzx  eax,al
c001ae23:	57                   	push   edi
c001ae24:	51                   	push   ecx
c001ae25:	52                   	push   edx
c001ae26:	50                   	push   eax
c001ae27:	56                   	push   esi
c001ae28:	e8 0b ff ff ff       	call   c001ad38 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae2d:	89 c2                	mov    edx,eax
c001ae2f:	ed                   	in     eax,dx
c001ae30:	83 e3 02             	and    ebx,0x2
c001ae33:	83 c4 20             	add    esp,0x20
c001ae36:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001ae3d:	d3 e8                	shr    eax,cl
c001ae3f:	eb 12                	jmp    c001ae53 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001ae41:	83 ec 0c             	sub    esp,0xc
c001ae44:	68 ab 2a 02 c0       	push   0xc0022aab
c001ae49:	e8 03 64 ff ff       	call   c0011251 <KePanic(char const*)>
c001ae4e:	83 c4 10             	add    esp,0x10
c001ae51:	31 c0                	xor    eax,eax
c001ae53:	5b                   	pop    ebx
c001ae54:	5e                   	pop    esi
c001ae55:	5f                   	pop    edi
c001ae56:	c3                   	ret    
c001ae57:	90                   	nop

c001ae58 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001ae58:	83 ec 18             	sub    esp,0x18
c001ae5b:	6a 00                	push   0x0
c001ae5d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae62:	50                   	push   eax
c001ae63:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae68:	50                   	push   eax
c001ae69:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae6e:	50                   	push   eax
c001ae6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae73:	e8 36 ff ff ff       	call   c001adae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae78:	83 c4 2c             	add    esp,0x2c
c001ae7b:	c3                   	ret    

c001ae7c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001ae7c:	83 ec 18             	sub    esp,0x18
c001ae7f:	6a 0e                	push   0xe
c001ae81:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae86:	50                   	push   eax
c001ae87:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae8c:	50                   	push   eax
c001ae8d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae92:	50                   	push   eax
c001ae93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae97:	e8 12 ff ff ff       	call   c001adae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae9c:	83 c4 2c             	add    esp,0x2c
c001ae9f:	0f b6 c0             	movzx  eax,al
c001aea2:	c3                   	ret    
c001aea3:	90                   	nop

c001aea4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001aea4:	55                   	push   ebp
c001aea5:	57                   	push   edi
c001aea6:	56                   	push   esi
c001aea7:	53                   	push   ebx
c001aea8:	83 ec 18             	sub    esp,0x18
c001aeab:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001aeb0:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001aeb5:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001aeba:	6a 0a                	push   0xa
c001aebc:	56                   	push   esi
c001aebd:	55                   	push   ebp
c001aebe:	57                   	push   edi
c001aebf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aec3:	e8 e6 fe ff ff       	call   c001adae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aec8:	83 c4 14             	add    esp,0x14
c001aecb:	89 c3                	mov    ebx,eax
c001aecd:	6a 0a                	push   0xa
c001aecf:	0f b6 db             	movzx  ebx,bl
c001aed2:	56                   	push   esi
c001aed3:	55                   	push   ebp
c001aed4:	57                   	push   edi
c001aed5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aed9:	e8 d0 fe ff ff       	call   c001adae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aede:	83 c4 2c             	add    esp,0x2c
c001aee1:	25 00 ff 00 00       	and    eax,0xff00
c001aee6:	09 d8                	or     eax,ebx
c001aee8:	5b                   	pop    ebx
c001aee9:	5e                   	pop    esi
c001aeea:	5f                   	pop    edi
c001aeeb:	5d                   	pop    ebp
c001aeec:	c3                   	ret    
c001aeed:	90                   	nop

c001aeee <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001aeee:	83 ec 18             	sub    esp,0x18
c001aef1:	6a 08                	push   0x8
c001aef3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aef8:	50                   	push   eax
c001aef9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aefe:	50                   	push   eax
c001aeff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af04:	50                   	push   eax
c001af05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af09:	e8 a0 fe ff ff       	call   c001adae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af0e:	83 c4 2c             	add    esp,0x2c
c001af11:	0f b6 c4             	movzx  eax,ah
c001af14:	c3                   	ret    
c001af15:	90                   	nop

c001af16 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001af16:	83 ec 18             	sub    esp,0x18
c001af19:	6a 08                	push   0x8
c001af1b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af20:	50                   	push   eax
c001af21:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af26:	50                   	push   eax
c001af27:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af2c:	50                   	push   eax
c001af2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af31:	e8 78 fe ff ff       	call   c001adae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af36:	83 c4 2c             	add    esp,0x2c
c001af39:	c3                   	ret    

c001af3a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001af3a:	83 ec 18             	sub    esp,0x18
c001af3d:	6a 3c                	push   0x3c
c001af3f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af44:	50                   	push   eax
c001af45:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af4a:	50                   	push   eax
c001af4b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af50:	50                   	push   eax
c001af51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af55:	e8 54 fe ff ff       	call   c001adae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af5a:	83 c4 2c             	add    esp,0x2c
c001af5d:	c3                   	ret    

c001af5e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001af5e:	83 ec 18             	sub    esp,0x18
c001af61:	6a 18                	push   0x18
c001af63:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af68:	50                   	push   eax
c001af69:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af6e:	50                   	push   eax
c001af6f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af74:	50                   	push   eax
c001af75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af79:	e8 30 fe ff ff       	call   c001adae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af7e:	83 c4 2c             	add    esp,0x2c
c001af81:	0f b6 c4             	movzx  eax,ah
c001af84:	c3                   	ret    
c001af85:	90                   	nop

c001af86 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001af86:	55                   	push   ebp
c001af87:	57                   	push   edi
c001af88:	56                   	push   esi
c001af89:	53                   	push   ebx
c001af8a:	83 ec 28             	sub    esp,0x28
c001af8d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001af91:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001af96:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001af9b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001afa0:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001afa7:	8d 43 12             	lea    eax,[ebx+0x12]
c001afaa:	83 c3 10             	add    ebx,0x10
c001afad:	0f b6 c0             	movzx  eax,al
c001afb0:	0f b6 db             	movzx  ebx,bl
c001afb3:	50                   	push   eax
c001afb4:	51                   	push   ecx
c001afb5:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001afb9:	57                   	push   edi
c001afba:	55                   	push   ebp
c001afbb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001afbf:	e8 ea fd ff ff       	call   c001adae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afc4:	83 c4 14             	add    esp,0x14
c001afc7:	89 c6                	mov    esi,eax
c001afc9:	53                   	push   ebx
c001afca:	c1 e6 10             	shl    esi,0x10
c001afcd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001afd1:	51                   	push   ecx
c001afd2:	57                   	push   edi
c001afd3:	55                   	push   ebp
c001afd4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001afd8:	e8 d1 fd ff ff       	call   c001adae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afdd:	83 c4 3c             	add    esp,0x3c
c001afe0:	0f b7 c0             	movzx  eax,ax
c001afe3:	5b                   	pop    ebx
c001afe4:	09 f0                	or     eax,esi
c001afe6:	5e                   	pop    esi
c001afe7:	5f                   	pop    edi
c001afe8:	5d                   	pop    ebp
c001afe9:	c3                   	ret    

c001afea <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001afea:	55                   	push   ebp
c001afeb:	57                   	push   edi
c001afec:	56                   	push   esi
c001afed:	53                   	push   ebx
c001afee:	83 ec 0c             	sub    esp,0xc
c001aff1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001aff5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001aff9:	89 f5                	mov    ebp,esi
c001affb:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001b001:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b005:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b009:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b00d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b011:	83 f9 01             	cmp    ecx,0x1
c001b014:	75 5d                	jne    c001b073 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001b016:	0f b6 c8             	movzx  ecx,al
c001b019:	0f b6 d2             	movzx  edx,dl
c001b01c:	c1 e1 10             	shl    ecx,0x10
c001b01f:	c1 e2 0b             	shl    edx,0xb
c001b022:	89 f0                	mov    eax,esi
c001b024:	25 fc 00 00 00       	and    eax,0xfc
c001b029:	09 c1                	or     ecx,eax
c001b02b:	89 e8                	mov    eax,ebp
c001b02d:	0f b6 c0             	movzx  eax,al
c001b030:	c1 e0 08             	shl    eax,0x8
c001b033:	09 c1                	or     ecx,eax
c001b035:	09 d1                	or     ecx,edx
c001b037:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b03c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b042:	89 c8                	mov    eax,ecx
c001b044:	ef                   	out    dx,eax
c001b045:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b04a:	ed                   	in     eax,dx
c001b04b:	0f b7 db             	movzx  ebx,bx
c001b04e:	83 e6 02             	and    esi,0x2
c001b051:	74 0a                	je     c001b05d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001b053:	0f b7 d0             	movzx  edx,ax
c001b056:	c1 e3 10             	shl    ebx,0x10
c001b059:	09 d3                	or     ebx,edx
c001b05b:	eb 05                	jmp    c001b062 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001b05d:	66 31 c0             	xor    ax,ax
c001b060:	09 c3                	or     ebx,eax
c001b062:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b067:	89 c8                	mov    eax,ecx
c001b069:	ef                   	out    dx,eax
c001b06a:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b06f:	89 d8                	mov    eax,ebx
c001b071:	eb 41                	jmp    c001b0b4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b073:	83 f9 02             	cmp    ecx,0x2
c001b076:	75 45                	jne    c001b0bd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b078:	83 ec 0c             	sub    esp,0xc
c001b07b:	0f b6 d2             	movzx  edx,dl
c001b07e:	89 f1                	mov    ecx,esi
c001b080:	0f b6 c0             	movzx  eax,al
c001b083:	0f b6 f1             	movzx  esi,cl
c001b086:	89 e9                	mov    ecx,ebp
c001b088:	56                   	push   esi
c001b089:	0f b6 c9             	movzx  ecx,cl
c001b08c:	51                   	push   ecx
c001b08d:	52                   	push   edx
c001b08e:	50                   	push   eax
c001b08f:	57                   	push   edi
c001b090:	e8 a3 fc ff ff       	call   c001ad38 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b095:	89 c2                	mov    edx,eax
c001b097:	ed                   	in     eax,dx
c001b098:	83 c4 20             	add    esp,0x20
c001b09b:	0f b7 db             	movzx  ebx,bx
c001b09e:	f6 c2 02             	test   dl,0x2
c001b0a1:	74 0c                	je     c001b0af <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b0a3:	0f b7 c8             	movzx  ecx,ax
c001b0a6:	89 d8                	mov    eax,ebx
c001b0a8:	c1 e0 10             	shl    eax,0x10
c001b0ab:	09 c8                	or     eax,ecx
c001b0ad:	eb 05                	jmp    c001b0b4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b0af:	66 31 c0             	xor    ax,ax
c001b0b2:	09 d8                	or     eax,ebx
c001b0b4:	ef                   	out    dx,eax
c001b0b5:	83 c4 0c             	add    esp,0xc
c001b0b8:	5b                   	pop    ebx
c001b0b9:	5e                   	pop    esi
c001b0ba:	5f                   	pop    edi
c001b0bb:	5d                   	pop    ebp
c001b0bc:	c3                   	ret    
c001b0bd:	c7 44 24 20 ab 2a 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022aab
c001b0c5:	83 c4 0c             	add    esp,0xc
c001b0c8:	5b                   	pop    ebx
c001b0c9:	5e                   	pop    esi
c001b0ca:	5f                   	pop    edi
c001b0cb:	5d                   	pop    ebp
c001b0cc:	e9 80 61 ff ff       	jmp    c0011251 <KePanic(char const*)>
c001b0d1:	90                   	nop

c001b0d2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b0d2:	55                   	push   ebp
c001b0d3:	57                   	push   edi
c001b0d4:	56                   	push   esi
c001b0d5:	53                   	push   ebx
c001b0d6:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b0dc:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b0e3:	80 3d ac a0 02 c0 00 	cmp    BYTE PTR ds:0xc002a0ac,0x0
c001b0ea:	0f 85 bd 00 00 00    	jne    c001b1ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b0f0:	83 ec 0c             	sub    esp,0xc
c001b0f3:	68 14 01 00 00       	push   0x114
c001b0f8:	e8 b9 c9 fe ff       	call   c0007ab6 <malloc>
c001b0fd:	83 c4 0c             	add    esp,0xc
c001b100:	89 c3                	mov    ebx,eax
c001b102:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001b108:	68 b1 2a 02 c0       	push   0xc0022ab1
c001b10d:	50                   	push   eax
c001b10e:	e8 05 06 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c001b113:	83 c4 10             	add    esp,0x10
c001b116:	85 db                	test   ebx,ebx
c001b118:	0f 84 67 02 00 00    	je     c001b385 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b11e:	56                   	push   esi
c001b11f:	56                   	push   esi
c001b120:	6a 01                	push   0x1
c001b122:	53                   	push   ebx
c001b123:	e8 ac 06 ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c001b128:	83 c4 10             	add    esp,0x10
c001b12b:	85 c0                	test   eax,eax
c001b12d:	0f 85 52 02 00 00    	jne    c001b385 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b133:	52                   	push   edx
c001b134:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b138:	50                   	push   eax
c001b139:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b13d:	50                   	push   eax
c001b13e:	53                   	push   ebx
c001b13f:	e8 92 09 ff ff       	call   c000bad6 <File::stat(unsigned long long*, bool*)>
c001b144:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b148:	40                   	inc    eax
c001b149:	89 04 24             	mov    DWORD PTR [esp],eax
c001b14c:	e8 65 c9 fe ff       	call   c0007ab6 <malloc>
c001b151:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b155:	a3 a8 a0 02 c0       	mov    ds:0xc002a0a8,eax
c001b15a:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b15e:	59                   	pop    ecx
c001b15f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b161:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b165:	51                   	push   ecx
c001b166:	50                   	push   eax
c001b167:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b16b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b16f:	53                   	push   ebx
c001b170:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b173:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b177:	83 c4 20             	add    esp,0x20
c001b17a:	89 c8                	mov    eax,ecx
c001b17c:	99                   	cdq    
c001b17d:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b181:	0f 85 fe 01 00 00    	jne    c001b385 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b187:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b18b:	0f 85 f4 01 00 00    	jne    c001b385 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b191:	83 ec 0c             	sub    esp,0xc
c001b194:	53                   	push   ebx
c001b195:	e8 98 06 ff ff       	call   c000b832 <File::close()>
c001b19a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b19e:	c6 05 ac a0 02 c0 01 	mov    BYTE PTR ds:0xc002a0ac,0x1
c001b1a5:	a3 a4 a0 02 c0       	mov    ds:0xc002a0a4,eax
c001b1aa:	83 c4 10             	add    esp,0x10
c001b1ad:	a1 a4 a0 02 c0       	mov    eax,ds:0xc002a0a4
c001b1b2:	8b 1d a8 a0 02 c0    	mov    ebx,DWORD PTR ds:0xc002a0a8
c001b1b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b1bc:	31 f6                	xor    esi,esi
c001b1be:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b1c6:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b1cd:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b1d2:	31 c9                	xor    ecx,ecx
c001b1d4:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b1dc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b1e1:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b1e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b1ed:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b1f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b1f9:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b1fd:	0f 8e 82 01 00 00    	jle    c001b385 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b203:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b206:	d4 40                	aam    0x40
c001b208:	d5 39                	aad    0x39
c001b20a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b20e:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b212:	d4 40                	aam    0x40
c001b214:	d5 39                	aad    0x39
c001b216:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b21a:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b21e:	d4 40                	aam    0x40
c001b220:	d5 39                	aad    0x39
c001b222:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b226:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b22a:	d4 40                	aam    0x40
c001b22c:	d5 39                	aad    0x39
c001b22e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b232:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b236:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b23a:	3c 56                	cmp    al,0x56
c001b23c:	74 43                	je     c001b281 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001b23e:	d4 40                	aam    0x40
c001b240:	d5 39                	aad    0x39
c001b242:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b245:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b249:	0f b6 c9             	movzx  ecx,cl
c001b24c:	c1 e1 04             	shl    ecx,0x4
c001b24f:	d4 40                	aam    0x40
c001b251:	d5 39                	aad    0x39
c001b253:	83 e8 30             	sub    eax,0x30
c001b256:	0f b6 c0             	movzx  eax,al
c001b259:	09 c1                	or     ecx,eax
c001b25b:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b25f:	c1 e1 04             	shl    ecx,0x4
c001b262:	d4 40                	aam    0x40
c001b264:	d5 39                	aad    0x39
c001b266:	83 e8 30             	sub    eax,0x30
c001b269:	0f b6 c0             	movzx  eax,al
c001b26c:	09 c1                	or     ecx,eax
c001b26e:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b272:	c1 e1 04             	shl    ecx,0x4
c001b275:	d4 40                	aam    0x40
c001b277:	d5 39                	aad    0x39
c001b279:	83 e8 30             	sub    eax,0x30
c001b27c:	0f b6 c0             	movzx  eax,al
c001b27f:	09 c1                	or     ecx,eax
c001b281:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b285:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b289:	3c 58                	cmp    al,0x58
c001b28b:	74 47                	je     c001b2d4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001b28d:	d4 40                	aam    0x40
c001b28f:	d5 39                	aad    0x39
c001b291:	8d 50 d0             	lea    edx,[eax-0x30]
c001b294:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b298:	0f b6 d2             	movzx  edx,dl
c001b29b:	c1 e2 04             	shl    edx,0x4
c001b29e:	d4 40                	aam    0x40
c001b2a0:	d5 39                	aad    0x39
c001b2a2:	83 e8 30             	sub    eax,0x30
c001b2a5:	0f b6 c0             	movzx  eax,al
c001b2a8:	09 c2                	or     edx,eax
c001b2aa:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b2ae:	c1 e2 04             	shl    edx,0x4
c001b2b1:	d4 40                	aam    0x40
c001b2b3:	d5 39                	aad    0x39
c001b2b5:	83 e8 30             	sub    eax,0x30
c001b2b8:	0f b6 c0             	movzx  eax,al
c001b2bb:	09 c2                	or     edx,eax
c001b2bd:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b2c1:	c1 e2 04             	shl    edx,0x4
c001b2c4:	d4 40                	aam    0x40
c001b2c6:	d5 39                	aad    0x39
c001b2c8:	83 e8 30             	sub    eax,0x30
c001b2cb:	0f b6 c0             	movzx  eax,al
c001b2ce:	09 c2                	or     edx,eax
c001b2d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b2d4:	83 c6 10             	add    esi,0x10
c001b2d7:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b2db:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b2df:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b2e3:	83 fa 0a             	cmp    edx,0xa
c001b2e6:	74 0b                	je     c001b2f3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001b2e8:	47                   	inc    edi
c001b2e9:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b2ed:	75 19                	jne    c001b308 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001b2ef:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b2f3:	31 c0                	xor    eax,eax
c001b2f5:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b2fa:	0f 94 c0             	sete   al
c001b2fd:	01 c6                	add    esi,eax
c001b2ff:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b304:	75 0b                	jne    c001b311 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001b306:	eb 14                	jmp    c001b31c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001b308:	46                   	inc    esi
c001b309:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b30c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b30f:	eb ca                	jmp    c001b2db <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001b311:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b316:	0f 85 dd fe ff ff    	jne    c001b1f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b31c:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001b321:	74 10                	je     c001b333 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001b323:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b328:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b32d:	0f 85 c6 fe ff ff    	jne    c001b1f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b333:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b337:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b33b:	83 e8 30             	sub    eax,0x30
c001b33e:	83 ef 30             	sub    edi,0x30
c001b341:	c1 e0 04             	shl    eax,0x4
c001b344:	09 f8                	or     eax,edi
c001b346:	0f b6 c0             	movzx  eax,al
c001b349:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b34d:	0f 85 a6 fe ff ff    	jne    c001b1f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b353:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b357:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b35b:	83 e8 30             	sub    eax,0x30
c001b35e:	83 ef 30             	sub    edi,0x30
c001b361:	c1 e0 04             	shl    eax,0x4
c001b364:	09 f8                	or     eax,edi
c001b366:	0f b6 c0             	movzx  eax,al
c001b369:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b36d:	0f 85 86 fe ff ff    	jne    c001b1f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b373:	50                   	push   eax
c001b374:	50                   	push   eax
c001b375:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b379:	50                   	push   eax
c001b37a:	55                   	push   ebp
c001b37b:	e8 c0 52 fe ff       	call   c0000640 <strcpy>
c001b380:	83 c4 10             	add    esp,0x10
c001b383:	eb 06                	jmp    c001b38b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001b385:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001b389:	31 ed                	xor    ebp,ebp
c001b38b:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b391:	89 e8                	mov    eax,ebp
c001b393:	5b                   	pop    ebx
c001b394:	5e                   	pop    esi
c001b395:	5f                   	pop    edi
c001b396:	5d                   	pop    ebp
c001b397:	c3                   	ret    

c001b398 <PCI::checkBus(unsigned char)>:
c001b398:	56                   	push   esi
c001b399:	53                   	push   ebx
c001b39a:	31 db                	xor    ebx,ebx
c001b39c:	51                   	push   ecx
c001b39d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b3a2:	52                   	push   edx
c001b3a3:	53                   	push   ebx
c001b3a4:	43                   	inc    ebx
c001b3a5:	56                   	push   esi
c001b3a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b3aa:	e8 03 03 00 00       	call   c001b6b2 <PCI::checkDevice(unsigned char, unsigned char)>
c001b3af:	83 c4 10             	add    esp,0x10
c001b3b2:	83 fb 20             	cmp    ebx,0x20
c001b3b5:	75 eb                	jne    c001b3a2 <PCI::checkBus(unsigned char)+0xa>
c001b3b7:	58                   	pop    eax
c001b3b8:	5b                   	pop    ebx
c001b3b9:	5e                   	pop    esi
c001b3ba:	c3                   	ret    
c001b3bb:	90                   	nop

c001b3bc <PCI::foundDevice(PCIDeviceInfo)>:
c001b3bc:	55                   	push   ebp
c001b3bd:	57                   	push   edi
c001b3be:	56                   	push   esi
c001b3bf:	53                   	push   ebx
c001b3c0:	83 ec 1c             	sub    esp,0x1c
c001b3c3:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b3c8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b3cc:	3d ff ff 00 00       	cmp    eax,0xffff
c001b3d1:	0f 84 57 01 00 00    	je     c001b52e <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b3d7:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b3dc:	66 3d 06 04          	cmp    ax,0x406
c001b3e0:	75 2c                	jne    c001b40e <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b3e2:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b3e7:	50                   	push   eax
c001b3e8:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b3ed:	50                   	push   eax
c001b3ee:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b3f3:	50                   	push   eax
c001b3f4:	53                   	push   ebx
c001b3f5:	e8 64 fb ff ff       	call   c001af5e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b3fa:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b3fe:	0f b6 c0             	movzx  eax,al
c001b401:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b405:	83 c4 2c             	add    esp,0x2c
c001b408:	5b                   	pop    ebx
c001b409:	5e                   	pop    esi
c001b40a:	5f                   	pop    edi
c001b40b:	5d                   	pop    ebp
c001b40c:	eb 8a                	jmp    c001b398 <PCI::checkBus(unsigned char)>
c001b40e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b412:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b418:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b41c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b420:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001b425:	85 d2                	test   edx,edx
c001b427:	74 36                	je     c001b45f <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001b429:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b42c:	85 c9                	test   ecx,ecx
c001b42e:	74 2b                	je     c001b45b <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b430:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001b436:	31 ee                	xor    esi,ebp
c001b438:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001b43e:	75 1b                	jne    c001b45b <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b440:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001b444:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001b44a:	75 0f                	jne    c001b45b <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b44c:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b453:	39 f9                	cmp    ecx,edi
c001b455:	0f 84 d3 00 00 00    	je     c001b52e <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b45b:	8b 12                	mov    edx,DWORD PTR [edx]
c001b45d:	eb c6                	jmp    c001b425 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b45f:	3d 01 06 00 00       	cmp    eax,0x601
c001b464:	75 19                	jne    c001b47f <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001b466:	83 ec 0c             	sub    esp,0xc
c001b469:	68 64 01 00 00       	push   0x164
c001b46e:	e8 43 c6 fe ff       	call   c0007ab6 <malloc>
c001b473:	89 c5                	mov    ebp,eax
c001b475:	89 04 24             	mov    DWORD PTR [esp],eax
c001b478:	e8 a1 0e 00 00       	call   c001c31e <SATABus::SATABus()>
c001b47d:	eb 1e                	jmp    c001b49d <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001b47f:	3d 01 01 00 00       	cmp    eax,0x101
c001b484:	75 62                	jne    c001b4e8 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001b486:	83 ec 0c             	sub    esp,0xc
c001b489:	68 70 02 00 00       	push   0x270
c001b48e:	e8 23 c6 fe ff       	call   c0007ab6 <malloc>
c001b493:	89 c5                	mov    ebp,eax
c001b495:	89 04 24             	mov    DWORD PTR [esp],eax
c001b498:	e8 e5 02 00 00       	call   c001b782 <IDE::IDE()>
c001b49d:	5f                   	pop    edi
c001b49e:	58                   	pop    eax
c001b49f:	55                   	push   ebp
c001b4a0:	53                   	push   ebx
c001b4a1:	e8 7c 11 ff ff       	call   c000c622 <Device::addChild(Device*)>
c001b4a6:	83 ec 1c             	sub    esp,0x1c
c001b4a9:	b9 09 00 00 00       	mov    ecx,0x9
c001b4ae:	fc                   	cld    
c001b4af:	89 e7                	mov    edi,esp
c001b4b1:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b4b5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b4b7:	55                   	push   ebp
c001b4b8:	e8 ab 10 ff ff       	call   c000c568 <Device::preOpenPCI(PCIDeviceInfo)>
c001b4bd:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b4c0:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b4c4:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b4cc:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b4d4:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b4dc:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b4df:	83 c4 4c             	add    esp,0x4c
c001b4e2:	5b                   	pop    ebx
c001b4e3:	5e                   	pop    esi
c001b4e4:	5f                   	pop    edi
c001b4e5:	5d                   	pop    ebp
c001b4e6:	ff e0                	jmp    eax
c001b4e8:	83 ec 0c             	sub    esp,0xc
c001b4eb:	68 58 01 00 00       	push   0x158
c001b4f0:	e8 c1 c5 fe ff       	call   c0007ab6 <malloc>
c001b4f5:	89 c5                	mov    ebp,eax
c001b4f7:	58                   	pop    eax
c001b4f8:	5a                   	pop    edx
c001b4f9:	68 ca 2a 02 c0       	push   0xc0022aca
c001b4fe:	55                   	push   ebp
c001b4ff:	e8 bc 13 ff ff       	call   c000c8c0 <DriverlessDevice::DriverlessDevice(char const*)>
c001b504:	59                   	pop    ecx
c001b505:	5e                   	pop    esi
c001b506:	55                   	push   ebp
c001b507:	53                   	push   ebx
c001b508:	e8 15 11 ff ff       	call   c000c622 <Device::addChild(Device*)>
c001b50d:	83 c4 10             	add    esp,0x10
c001b510:	b9 09 00 00 00       	mov    ecx,0x9
c001b515:	fc                   	cld    
c001b516:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b51a:	89 fe                	mov    esi,edi
c001b51c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b51e:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001b522:	83 c4 1c             	add    esp,0x1c
c001b525:	5b                   	pop    ebx
c001b526:	5e                   	pop    esi
c001b527:	5f                   	pop    edi
c001b528:	5d                   	pop    ebp
c001b529:	e9 3a 10 ff ff       	jmp    c000c568 <Device::preOpenPCI(PCIDeviceInfo)>
c001b52e:	83 c4 1c             	add    esp,0x1c
c001b531:	5b                   	pop    ebx
c001b532:	5e                   	pop    esi
c001b533:	5f                   	pop    edi
c001b534:	5d                   	pop    ebp
c001b535:	c3                   	ret    

c001b536 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b536:	55                   	push   ebp
c001b537:	57                   	push   edi
c001b538:	56                   	push   esi
c001b539:	53                   	push   ebx
c001b53a:	83 ec 68             	sub    esp,0x68
c001b53d:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001b541:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b548:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b54c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b553:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b558:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b55c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b563:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001b568:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b56c:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001b571:	6a 0c                	push   0xc
c001b573:	57                   	push   edi
c001b574:	53                   	push   ebx
c001b575:	56                   	push   esi
c001b576:	55                   	push   ebp
c001b577:	e8 32 f8 ff ff       	call   c001adae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b57c:	83 c4 20             	add    esp,0x20
c001b57f:	57                   	push   edi
c001b580:	53                   	push   ebx
c001b581:	56                   	push   esi
c001b582:	55                   	push   ebp
c001b583:	e8 1c f9 ff ff       	call   c001aea4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b588:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001b58d:	57                   	push   edi
c001b58e:	53                   	push   ebx
c001b58f:	56                   	push   esi
c001b590:	55                   	push   ebp
c001b591:	e8 a4 f9 ff ff       	call   c001af3a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b596:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b59a:	83 c4 14             	add    esp,0x14
c001b59d:	6a 3c                	push   0x3c
c001b59f:	57                   	push   edi
c001b5a0:	53                   	push   ebx
c001b5a1:	56                   	push   esi
c001b5a2:	55                   	push   ebp
c001b5a3:	e8 06 f8 ff ff       	call   c001adae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5a8:	0f b6 c4             	movzx  eax,ah
c001b5ab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b5af:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001b5b3:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001b5b7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001b5bc:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001b5c2:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001b5c8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b5cc:	83 c4 20             	add    esp,0x20
c001b5cf:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001b5d4:	74 30                	je     c001b606 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b5d6:	31 c0                	xor    eax,eax
c001b5d8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001b5dc:	7e 28                	jle    c001b606 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b5de:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001b5e6:	39 cb                	cmp    ebx,ecx
c001b5e8:	75 19                	jne    c001b603 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b5ea:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001b5f2:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b5f6:	75 0b                	jne    c001b603 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b5f8:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001b5ff:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b603:	40                   	inc    eax
c001b604:	eb d2                	jmp    c001b5d8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001b606:	31 d2                	xor    edx,edx
c001b608:	83 ec 0c             	sub    esp,0xc
c001b60b:	57                   	push   edi
c001b60c:	53                   	push   ebx
c001b60d:	56                   	push   esi
c001b60e:	52                   	push   edx
c001b60f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b613:	55                   	push   ebp
c001b614:	e8 6d f9 ff ff       	call   c001af86 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b619:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b61d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b621:	42                   	inc    edx
c001b622:	83 c4 20             	add    esp,0x20
c001b625:	83 fa 06             	cmp    edx,0x6
c001b628:	75 de                	jne    c001b608 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001b62a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b62e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b632:	c1 e2 08             	shl    edx,0x8
c001b635:	83 ec 0c             	sub    esp,0xc
c001b638:	0f b6 c4             	movzx  eax,ah
c001b63b:	09 d0                	or     eax,edx
c001b63d:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001b642:	6a 02                	push   0x2
c001b644:	57                   	push   edi
c001b645:	53                   	push   ebx
c001b646:	56                   	push   esi
c001b647:	55                   	push   ebp
c001b648:	e8 61 f7 ff ff       	call   c001adae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b64d:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001b652:	83 c4 20             	add    esp,0x20
c001b655:	57                   	push   edi
c001b656:	53                   	push   ebx
c001b657:	56                   	push   esi
c001b658:	55                   	push   ebp
c001b659:	e8 90 f8 ff ff       	call   c001aeee <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b65e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b662:	57                   	push   edi
c001b663:	53                   	push   ebx
c001b664:	56                   	push   esi
c001b665:	55                   	push   ebp
c001b666:	e8 ed f7 ff ff       	call   c001ae58 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b66b:	b9 09 00 00 00       	mov    ecx,0x9
c001b670:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001b675:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b679:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b67d:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b681:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b685:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b689:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b68d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b691:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b695:	83 ec 0c             	sub    esp,0xc
c001b698:	fc                   	cld    
c001b699:	89 e7                	mov    edi,esp
c001b69b:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b69f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b6a1:	55                   	push   ebp
c001b6a2:	e8 15 fd ff ff       	call   c001b3bc <PCI::foundDevice(PCIDeviceInfo)>
c001b6a7:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b6ad:	5b                   	pop    ebx
c001b6ae:	5e                   	pop    esi
c001b6af:	5f                   	pop    edi
c001b6b0:	5d                   	pop    ebp
c001b6b1:	c3                   	ret    

c001b6b2 <PCI::checkDevice(unsigned char, unsigned char)>:
c001b6b2:	55                   	push   ebp
c001b6b3:	57                   	push   edi
c001b6b4:	56                   	push   esi
c001b6b5:	53                   	push   ebx
c001b6b6:	83 ec 0c             	sub    esp,0xc
c001b6b9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b6bd:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b6c2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b6c7:	6a 00                	push   0x0
c001b6c9:	56                   	push   esi
c001b6ca:	57                   	push   edi
c001b6cb:	55                   	push   ebp
c001b6cc:	e8 87 f7 ff ff       	call   c001ae58 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b6d1:	6a 00                	push   0x0
c001b6d3:	56                   	push   esi
c001b6d4:	57                   	push   edi
c001b6d5:	55                   	push   ebp
c001b6d6:	e8 5b fe ff ff       	call   c001b536 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b6db:	83 c4 20             	add    esp,0x20
c001b6de:	6a 00                	push   0x0
c001b6e0:	56                   	push   esi
c001b6e1:	57                   	push   edi
c001b6e2:	55                   	push   ebp
c001b6e3:	e8 94 f7 ff ff       	call   c001ae7c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b6e8:	83 c4 10             	add    esp,0x10
c001b6eb:	a8 80                	test   al,0x80
c001b6ed:	74 2d                	je     c001b71c <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b6ef:	bb 01 00 00 00       	mov    ebx,0x1
c001b6f4:	53                   	push   ebx
c001b6f5:	56                   	push   esi
c001b6f6:	57                   	push   edi
c001b6f7:	55                   	push   ebp
c001b6f8:	e8 5b f7 ff ff       	call   c001ae58 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b6fd:	83 c4 10             	add    esp,0x10
c001b700:	0f b7 c0             	movzx  eax,ax
c001b703:	3d ff ff 00 00       	cmp    eax,0xffff
c001b708:	74 0c                	je     c001b716 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b70a:	53                   	push   ebx
c001b70b:	56                   	push   esi
c001b70c:	57                   	push   edi
c001b70d:	55                   	push   ebp
c001b70e:	e8 23 fe ff ff       	call   c001b536 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b713:	83 c4 10             	add    esp,0x10
c001b716:	43                   	inc    ebx
c001b717:	83 fb 08             	cmp    ebx,0x8
c001b71a:	75 d8                	jne    c001b6f4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b71c:	83 c4 0c             	add    esp,0xc
c001b71f:	5b                   	pop    ebx
c001b720:	5e                   	pop    esi
c001b721:	5f                   	pop    edi
c001b722:	5d                   	pop    ebp
c001b723:	c3                   	ret    

c001b724 <PCI::detect()>:
c001b724:	56                   	push   esi
c001b725:	53                   	push   ebx
c001b726:	53                   	push   ebx
c001b727:	31 db                	xor    ebx,ebx
c001b729:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b72d:	6a 00                	push   0x0
c001b72f:	6a 00                	push   0x0
c001b731:	6a 00                	push   0x0
c001b733:	56                   	push   esi
c001b734:	e8 43 f7 ff ff       	call   c001ae7c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b739:	83 c4 10             	add    esp,0x10
c001b73c:	a8 80                	test   al,0x80
c001b73e:	75 21                	jne    c001b761 <PCI::detect()+0x3d>
c001b740:	51                   	push   ecx
c001b741:	51                   	push   ecx
c001b742:	6a 00                	push   0x0
c001b744:	56                   	push   esi
c001b745:	e8 4e fc ff ff       	call   c001b398 <PCI::checkBus(unsigned char)>
c001b74a:	83 c4 10             	add    esp,0x10
c001b74d:	eb 2a                	jmp    c001b779 <PCI::detect()+0x55>
c001b74f:	52                   	push   edx
c001b750:	52                   	push   edx
c001b751:	53                   	push   ebx
c001b752:	43                   	inc    ebx
c001b753:	56                   	push   esi
c001b754:	e8 3f fc ff ff       	call   c001b398 <PCI::checkBus(unsigned char)>
c001b759:	83 c4 10             	add    esp,0x10
c001b75c:	83 fb 08             	cmp    ebx,0x8
c001b75f:	74 18                	je     c001b779 <PCI::detect()+0x55>
c001b761:	53                   	push   ebx
c001b762:	6a 00                	push   0x0
c001b764:	6a 00                	push   0x0
c001b766:	56                   	push   esi
c001b767:	e8 ec f6 ff ff       	call   c001ae58 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b76c:	83 c4 10             	add    esp,0x10
c001b76f:	0f b7 c0             	movzx  eax,ax
c001b772:	3d ff ff 00 00       	cmp    eax,0xffff
c001b777:	74 d6                	je     c001b74f <PCI::detect()+0x2b>
c001b779:	58                   	pop    eax
c001b77a:	5b                   	pop    ebx
c001b77b:	5e                   	pop    esi
c001b77c:	c3                   	ret    
c001b77d:	90                   	nop

c001b77e <IDE::close(int, int, void*)>:
c001b77e:	83 c8 ff             	or     eax,0xffffffff
c001b781:	c3                   	ret    

c001b782 <IDE::IDE()>:
c001b782:	83 ec 0c             	sub    esp,0xc
c001b785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b789:	83 ec 08             	sub    esp,0x8
c001b78c:	68 10 2b 02 c0       	push   0xc0022b10
c001b791:	50                   	push   eax
c001b792:	e8 cd 11 ff ff       	call   c000c964 <HardDiskController::HardDiskController(char const*)>
c001b797:	83 c4 10             	add    esp,0x10
c001b79a:	ba a0 2b 02 c0       	mov    edx,0xc0022ba0
c001b79f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7a3:	89 10                	mov    DWORD PTR [eax],edx
c001b7a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7a9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b7b0:	90                   	nop
c001b7b1:	83 c4 0c             	add    esp,0xc
c001b7b4:	c3                   	ret    
c001b7b5:	90                   	nop

c001b7b6 <IDE::prepareInterrupt(unsigned char)>:
c001b7b6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b7bb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b7bf:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b7c7:	c3                   	ret    

c001b7c8 <selectDrive(unsigned char, unsigned char)>:
c001b7c8:	c3                   	ret    
c001b7c9:	90                   	nop

c001b7ca <IDE::getBase(unsigned char)>:
c001b7ca:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b7cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b7d3:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b7db:	c3                   	ret    

c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b7dc:	55                   	push   ebp
c001b7dd:	57                   	push   edi
c001b7de:	56                   	push   esi
c001b7df:	53                   	push   ebx
c001b7e0:	83 ec 1c             	sub    esp,0x1c
c001b7e3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b7e7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b7eb:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b7ee:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b7f2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b7f6:	80 f9 03             	cmp    cl,0x3
c001b7f9:	77 4f                	ja     c001b84a <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b7fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7ff:	0f b6 fa             	movzx  edi,dl
c001b802:	0f b6 db             	movzx  ebx,bl
c001b805:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001b808:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001b80d:	80 ca 80             	or     dl,0x80
c001b810:	52                   	push   edx
c001b811:	6a 0c                	push   0xc
c001b813:	57                   	push   edi
c001b814:	56                   	push   esi
c001b815:	e8 c2 ff ff ff       	call   c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b81a:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001b81f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b823:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b827:	ee                   	out    dx,al
c001b828:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b82d:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001b831:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b835:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b839:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b841:	83 c4 2c             	add    esp,0x2c
c001b844:	5b                   	pop    ebx
c001b845:	5e                   	pop    esi
c001b846:	5f                   	pop    edi
c001b847:	5d                   	pop    ebp
c001b848:	eb 92                	jmp    c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b84a:	0f b6 cb             	movzx  ecx,bl
c001b84d:	83 f9 07             	cmp    ecx,0x7
c001b850:	77 12                	ja     c001b864 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b852:	0f b6 d2             	movzx  edx,dl
c001b855:	0f b6 db             	movzx  ebx,bl
c001b858:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001b860:	01 da                	add    edx,ebx
c001b862:	eb 2f                	jmp    c001b893 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b864:	83 f9 0d             	cmp    ecx,0xd
c001b867:	77 13                	ja     c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001b869:	0f b6 d2             	movzx  edx,dl
c001b86c:	0f b6 db             	movzx  ebx,bl
c001b86f:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001b876:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b87a:	eb 17                	jmp    c001b893 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b87c:	83 f9 15             	cmp    ecx,0x15
c001b87f:	77 13                	ja     c001b894 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001b881:	0f b6 d2             	movzx  edx,dl
c001b884:	0f b6 db             	movzx  ebx,bl
c001b887:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001b88f:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b893:	ee                   	out    dx,al
c001b894:	83 c4 1c             	add    esp,0x1c
c001b897:	5b                   	pop    ebx
c001b898:	5e                   	pop    esi
c001b899:	5f                   	pop    edi
c001b89a:	5d                   	pop    ebp
c001b89b:	c3                   	ret    

c001b89c <IDE::read(unsigned char, unsigned char)>:
c001b89c:	55                   	push   ebp
c001b89d:	57                   	push   edi
c001b89e:	56                   	push   esi
c001b89f:	53                   	push   ebx
c001b8a0:	83 ec 1c             	sub    esp,0x1c
c001b8a3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b8a7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b8ab:	8d 43 f8             	lea    eax,[ebx-0x8]
c001b8ae:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b8b2:	3c 03                	cmp    al,0x3
c001b8b4:	77 40                	ja     c001b8f6 <IDE::read(unsigned char, unsigned char)+0x5a>
c001b8b6:	0f b6 f9             	movzx  edi,cl
c001b8b9:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001b8bc:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b8c1:	0c 80                	or     al,0x80
c001b8c3:	50                   	push   eax
c001b8c4:	6a 0c                	push   0xc
c001b8c6:	57                   	push   edi
c001b8c7:	56                   	push   esi
c001b8c8:	e8 0f ff ff ff       	call   c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b8cd:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b8d2:	0f b6 d3             	movzx  edx,bl
c001b8d5:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b8d9:	ec                   	in     al,dx
c001b8da:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b8de:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001b8e3:	52                   	push   edx
c001b8e4:	6a 0c                	push   0xc
c001b8e6:	57                   	push   edi
c001b8e7:	56                   	push   esi
c001b8e8:	e8 ef fe ff ff       	call   c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b8ed:	83 c4 20             	add    esp,0x20
c001b8f0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b8f4:	eb 4c                	jmp    c001b942 <IDE::read(unsigned char, unsigned char)+0xa6>
c001b8f6:	0f b6 d3             	movzx  edx,bl
c001b8f9:	83 fa 07             	cmp    edx,0x7
c001b8fc:	77 12                	ja     c001b910 <IDE::read(unsigned char, unsigned char)+0x74>
c001b8fe:	0f b6 c9             	movzx  ecx,cl
c001b901:	0f b6 d3             	movzx  edx,bl
c001b904:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001b90c:	01 c2                	add    edx,eax
c001b90e:	eb 31                	jmp    c001b941 <IDE::read(unsigned char, unsigned char)+0xa5>
c001b910:	83 fa 0d             	cmp    edx,0xd
c001b913:	77 13                	ja     c001b928 <IDE::read(unsigned char, unsigned char)+0x8c>
c001b915:	0f b6 c9             	movzx  ecx,cl
c001b918:	0f b6 d3             	movzx  edx,bl
c001b91b:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001b922:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b926:	eb 19                	jmp    c001b941 <IDE::read(unsigned char, unsigned char)+0xa5>
c001b928:	31 c0                	xor    eax,eax
c001b92a:	83 fa 15             	cmp    edx,0x15
c001b92d:	77 13                	ja     c001b942 <IDE::read(unsigned char, unsigned char)+0xa6>
c001b92f:	0f b6 c9             	movzx  ecx,cl
c001b932:	0f b6 d3             	movzx  edx,bl
c001b935:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001b93d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b941:	ec                   	in     al,dx
c001b942:	83 c4 1c             	add    esp,0x1c
c001b945:	5b                   	pop    ebx
c001b946:	5e                   	pop    esi
c001b947:	5f                   	pop    edi
c001b948:	5d                   	pop    ebp
c001b949:	c3                   	ret    

c001b94a <IDE::waitInterrupt(unsigned char)>:
c001b94a:	55                   	push   ebp
c001b94b:	57                   	push   edi
c001b94c:	56                   	push   esi
c001b94d:	53                   	push   ebx
c001b94e:	31 db                	xor    ebx,ebx
c001b950:	83 ec 0c             	sub    esp,0xc
c001b953:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b957:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b95c:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001b964:	89 e8                	mov    eax,ebp
c001b966:	84 c0                	test   al,al
c001b968:	75 30                	jne    c001b99a <IDE::waitInterrupt(unsigned char)+0x50>
c001b96a:	50                   	push   eax
c001b96b:	6a 0c                	push   0xc
c001b96d:	56                   	push   esi
c001b96e:	57                   	push   edi
c001b96f:	e8 28 ff ff ff       	call   c001b89c <IDE::read(unsigned char, unsigned char)>
c001b974:	83 c4 10             	add    esp,0x10
c001b977:	a8 01                	test   al,0x1
c001b979:	75 27                	jne    c001b9a2 <IDE::waitInterrupt(unsigned char)+0x58>
c001b97b:	f6 c3 04             	test   bl,0x4
c001b97e:	75 12                	jne    c001b992 <IDE::waitInterrupt(unsigned char)+0x48>
c001b980:	83 fb 32             	cmp    ebx,0x32
c001b983:	7e 0d                	jle    c001b992 <IDE::waitInterrupt(unsigned char)+0x48>
c001b985:	83 ec 0c             	sub    esp,0xc
c001b988:	6a 64                	push   0x64
c001b98a:	e8 b1 a4 ff ff       	call   c0015e40 <milliTenthSleep(unsigned int)>
c001b98f:	83 c4 10             	add    esp,0x10
c001b992:	83 fb 3c             	cmp    ebx,0x3c
c001b995:	74 0b                	je     c001b9a2 <IDE::waitInterrupt(unsigned char)+0x58>
c001b997:	43                   	inc    ebx
c001b998:	eb c2                	jmp    c001b95c <IDE::waitInterrupt(unsigned char)+0x12>
c001b99a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001b9a2:	83 c4 0c             	add    esp,0xc
c001b9a5:	89 e8                	mov    eax,ebp
c001b9a7:	5b                   	pop    ebx
c001b9a8:	5e                   	pop    esi
c001b9a9:	5f                   	pop    edi
c001b9aa:	5d                   	pop    ebp
c001b9ab:	c3                   	ret    

c001b9ac <ideChannel0IRQHandler(regs*, void*)>:
c001b9ac:	83 ec 10             	sub    esp,0x10
c001b9af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9b3:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001b9ba:	6a 07                	push   0x7
c001b9bc:	6a 00                	push   0x0
c001b9be:	50                   	push   eax
c001b9bf:	e8 d8 fe ff ff       	call   c001b89c <IDE::read(unsigned char, unsigned char)>
c001b9c4:	83 c4 1c             	add    esp,0x1c
c001b9c7:	c3                   	ret    

c001b9c8 <ideChannel1IRQHandler(regs*, void*)>:
c001b9c8:	83 ec 10             	sub    esp,0x10
c001b9cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9cf:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001b9d6:	6a 07                	push   0x7
c001b9d8:	6a 01                	push   0x1
c001b9da:	50                   	push   eax
c001b9db:	e8 bc fe ff ff       	call   c001b89c <IDE::read(unsigned char, unsigned char)>
c001b9e0:	83 c4 1c             	add    esp,0x1c
c001b9e3:	c3                   	ret    

c001b9e4 <IDE::enableIRQs(unsigned char, bool)>:
c001b9e4:	57                   	push   edi
c001b9e5:	b8 02 00 00 00       	mov    eax,0x2
c001b9ea:	56                   	push   esi
c001b9eb:	53                   	push   ebx
c001b9ec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b9f0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b9f4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b9f9:	74 02                	je     c001b9fd <IDE::enableIRQs(unsigned char, bool)+0x19>
c001b9fb:	31 c0                	xor    eax,eax
c001b9fd:	0f b6 db             	movzx  ebx,bl
c001ba00:	bf 04 00 00 00       	mov    edi,0x4
c001ba05:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001ba0c:	50                   	push   eax
c001ba0d:	6a 0c                	push   0xc
c001ba0f:	53                   	push   ebx
c001ba10:	56                   	push   esi
c001ba11:	e8 c6 fd ff ff       	call   c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba16:	83 c4 10             	add    esp,0x10
c001ba19:	50                   	push   eax
c001ba1a:	6a 0c                	push   0xc
c001ba1c:	53                   	push   ebx
c001ba1d:	56                   	push   esi
c001ba1e:	e8 79 fe ff ff       	call   c001b89c <IDE::read(unsigned char, unsigned char)>
c001ba23:	83 c4 10             	add    esp,0x10
c001ba26:	4f                   	dec    edi
c001ba27:	75 f0                	jne    c001ba19 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001ba29:	5b                   	pop    ebx
c001ba2a:	5e                   	pop    esi
c001ba2b:	5f                   	pop    edi
c001ba2c:	c3                   	ret    
c001ba2d:	90                   	nop

c001ba2e <IDE::open(int, int, void*)>:
c001ba2e:	55                   	push   ebp
c001ba2f:	57                   	push   edi
c001ba30:	56                   	push   esi
c001ba31:	53                   	push   ebx
c001ba32:	83 ec 1c             	sub    esp,0x1c
c001ba35:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ba39:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ba42:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ba4b:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ba52:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ba59:	0f 85 de 02 00 00    	jne    c001bd3d <IDE::open(int, int, void*)+0x30f>
c001ba5f:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ba65:	88 04 24             	mov    BYTE PTR [esp],al
c001ba68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ba6b:	83 e0 7f             	and    eax,0x7f
c001ba6e:	83 f8 05             	cmp    eax,0x5
c001ba71:	74 05                	je     c001ba78 <IDE::open(int, int, void*)+0x4a>
c001ba73:	83 f8 0f             	cmp    eax,0xf
c001ba76:	75 32                	jne    c001baaa <IDE::open(int, int, void*)+0x7c>
c001ba78:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ba7e:	83 e0 fc             	and    eax,0xfffffffc
c001ba81:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ba88:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ba8e:	83 e0 fc             	and    eax,0xfffffffc
c001ba91:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ba98:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ba9e:	83 e0 fc             	and    eax,0xfffffffc
c001baa1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001baa8:	eb 14                	jmp    c001babe <IDE::open(int, int, void*)+0x90>
c001baaa:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bab4:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001babe:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001bac5:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bacc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bad0:	89 c6                	mov    esi,eax
c001bad2:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bad7:	c1 e6 10             	shl    esi,0x10
c001bada:	89 e8                	mov    eax,ebp
c001badc:	89 fa                	mov    edx,edi
c001bade:	c1 e0 0b             	shl    eax,0xb
c001bae1:	09 f0                	or     eax,esi
c001bae3:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001baea:	c1 e6 08             	shl    esi,0x8
c001baed:	09 c6                	or     esi,eax
c001baef:	89 f0                	mov    eax,esi
c001baf1:	0d 08 00 00 80       	or     eax,0x80000008
c001baf6:	ef                   	out    dx,eax
c001baf7:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001bafc:	89 ca                	mov    edx,ecx
c001bafe:	ed                   	in     eax,dx
c001baff:	c1 e8 10             	shr    eax,0x10
c001bb02:	3d ff ff 00 00       	cmp    eax,0xffff
c001bb07:	0f 84 f9 00 00 00    	je     c001bc06 <IDE::open(int, int, void*)+0x1d8>
c001bb0d:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001bb13:	89 fa                	mov    edx,edi
c001bb15:	89 f0                	mov    eax,esi
c001bb17:	ef                   	out    dx,eax
c001bb18:	b0 fe                	mov    al,0xfe
c001bb1a:	89 ca                	mov    edx,ecx
c001bb1c:	ee                   	out    dx,al
c001bb1d:	89 f0                	mov    eax,esi
c001bb1f:	89 fa                	mov    edx,edi
c001bb21:	ef                   	out    dx,eax
c001bb22:	89 ca                	mov    edx,ecx
c001bb24:	ed                   	in     eax,dx
c001bb25:	3c fe                	cmp    al,0xfe
c001bb27:	0f 85 a9 00 00 00    	jne    c001bbd6 <IDE::open(int, int, void*)+0x1a8>
c001bb2d:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001bb33:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bb3a:	74 33                	je     c001bb6f <IDE::open(int, int, void*)+0x141>
c001bb3c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bb42:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bb46:	40                   	inc    eax
c001bb47:	83 ec 0c             	sub    esp,0xc
c001bb4a:	0f b6 c0             	movzx  eax,al
c001bb4d:	50                   	push   eax
c001bb4e:	55                   	push   ebp
c001bb4f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bb53:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001bb59:	51                   	push   ecx
c001bb5a:	e8 35 3a ff ff       	call   c000f594 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bb5f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bb64:	83 c4 1c             	add    esp,0x1c
c001bb67:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bb6d:	eb 0a                	jmp    c001bb79 <IDE::open(int, int, void*)+0x14b>
c001bb6f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bb79:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bb80:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bb87:	c1 e1 10             	shl    ecx,0x10
c001bb8a:	c1 e0 08             	shl    eax,0x8
c001bb8d:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bb92:	09 c1                	or     ecx,eax
c001bb94:	89 fa                	mov    edx,edi
c001bb96:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bb9d:	c1 e0 0b             	shl    eax,0xb
c001bba0:	09 c1                	or     ecx,eax
c001bba2:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bba8:	89 c8                	mov    eax,ecx
c001bbaa:	ef                   	out    dx,eax
c001bbab:	be fc 0c 00 00       	mov    esi,0xcfc
c001bbb0:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bbb6:	89 f2                	mov    edx,esi
c001bbb8:	ee                   	out    dx,al
c001bbb9:	89 c8                	mov    eax,ecx
c001bbbb:	89 fa                	mov    edx,edi
c001bbbd:	ef                   	out    dx,eax
c001bbbe:	89 f2                	mov    edx,esi
c001bbc0:	ed                   	in     eax,dx
c001bbc1:	0f b6 c0             	movzx  eax,al
c001bbc4:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001bbca:	74 4a                	je     c001bc16 <IDE::open(int, int, void*)+0x1e8>
c001bbcc:	83 ec 0c             	sub    esp,0xc
c001bbcf:	68 28 2b 02 c0       	push   0xc0022b28
c001bbd4:	eb 38                	jmp    c001bc0e <IDE::open(int, int, void*)+0x1e0>
c001bbd6:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bbdf:	75 1b                	jne    c001bbfc <IDE::open(int, int, void*)+0x1ce>
c001bbe1:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001bbe5:	3d 80 00 00 00       	cmp    eax,0x80
c001bbea:	74 07                	je     c001bbf3 <IDE::open(int, int, void*)+0x1c5>
c001bbec:	3d 8a 00 00 00       	cmp    eax,0x8a
c001bbf1:	75 09                	jne    c001bbfc <IDE::open(int, int, void*)+0x1ce>
c001bbf3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bbfa:	eb 1a                	jmp    c001bc16 <IDE::open(int, int, void*)+0x1e8>
c001bbfc:	83 ec 0c             	sub    esp,0xc
c001bbff:	68 30 2b 02 c0       	push   0xc0022b30
c001bc04:	eb 08                	jmp    c001bc0e <IDE::open(int, int, void*)+0x1e0>
c001bc06:	83 ec 0c             	sub    esp,0xc
c001bc09:	68 61 2b 02 c0       	push   0xc0022b61
c001bc0e:	e8 3e 56 ff ff       	call   c0011251 <KePanic(char const*)>
c001bc13:	83 c4 10             	add    esp,0x10
c001bc16:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001bc1d:	74 1a                	je     c001bc39 <IDE::open(int, int, void*)+0x20b>
c001bc1f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bc25:	83 e0 fc             	and    eax,0xfffffffc
c001bc28:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bc2f:	83 c0 08             	add    eax,0x8
c001bc32:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bc39:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bc3f:	89 c2                	mov    edx,eax
c001bc41:	83 e2 0f             	and    edx,0xf
c001bc44:	83 fa 08             	cmp    edx,0x8
c001bc47:	75 0a                	jne    c001bc53 <IDE::open(int, int, void*)+0x225>
c001bc49:	83 e8 02             	sub    eax,0x2
c001bc4c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bc53:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bc59:	89 c2                	mov    edx,eax
c001bc5b:	83 e2 0f             	and    edx,0xf
c001bc5e:	83 fa 08             	cmp    edx,0x8
c001bc61:	75 0a                	jne    c001bc6d <IDE::open(int, int, void*)+0x23f>
c001bc63:	83 e8 02             	sub    eax,0x2
c001bc66:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bc6d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bc74:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bc7b:	89 d0                	mov    eax,edx
c001bc7d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bc80:	8d 7a 01             	lea    edi,[edx+0x1]
c001bc83:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bc87:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bc8b:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bc8f:	83 e1 3f             	and    ecx,0x3f
c001bc92:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bc96:	89 f9                	mov    ecx,edi
c001bc98:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bc9f:	0f b6 c9             	movzx  ecx,cl
c001bca2:	8d 78 02             	lea    edi,[eax+0x2]
c001bca5:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bca8:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bcac:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bcb0:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bcb4:	83 e2 3f             	and    edx,0x3f
c001bcb7:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bcbb:	89 f9                	mov    ecx,edi
c001bcbd:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bcc3:	0f b6 d1             	movzx  edx,cl
c001bcc6:	8d 78 03             	lea    edi,[eax+0x3]
c001bcc9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bccc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bcd0:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bcd4:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bcd8:	83 e1 3f             	and    ecx,0x3f
c001bcdb:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bcdf:	89 f9                	mov    ecx,edi
c001bce1:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bce7:	0f b6 c9             	movzx  ecx,cl
c001bcea:	8d 78 04             	lea    edi,[eax+0x4]
c001bced:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bcf0:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bcf4:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bcf8:	89 fa                	mov    edx,edi
c001bcfa:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bd00:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bd04:	83 e2 3f             	and    edx,0x3f
c001bd07:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bd0b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001bd12:	66 85 f6             	test   si,si
c001bd15:	74 65                	je     c001bd7c <IDE::open(int, int, void*)+0x34e>
c001bd17:	89 f9                	mov    ecx,edi
c001bd19:	83 c0 05             	add    eax,0x5
c001bd1c:	0f b6 d1             	movzx  edx,cl
c001bd1f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bd22:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bd26:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001bd2a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001bd30:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001bd34:	83 e0 3f             	and    eax,0x3f
c001bd37:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001bd3b:	eb 3f                	jmp    c001bd7c <IDE::open(int, int, void*)+0x34e>
c001bd3d:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001bd43:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bd4a:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bd51:	05 06 02 00 00       	add    eax,0x206
c001bd56:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bd5d:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001bd64:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bd6b:	05 06 02 00 00       	add    eax,0x206
c001bd70:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bd77:	e9 bd fe ff ff       	jmp    c001bc39 <IDE::open(int, int, void*)+0x20b>
c001bd7c:	50                   	push   eax
c001bd7d:	50                   	push   eax
c001bd7e:	6a 00                	push   0x0
c001bd80:	53                   	push   ebx
c001bd81:	e8 30 fa ff ff       	call   c001b7b6 <IDE::prepareInterrupt(unsigned char)>
c001bd86:	5a                   	pop    edx
c001bd87:	59                   	pop    ecx
c001bd88:	6a 01                	push   0x1
c001bd8a:	53                   	push   ebx
c001bd8b:	e8 26 fa ff ff       	call   c001b7b6 <IDE::prepareInterrupt(unsigned char)>
c001bd90:	83 c4 0c             	add    esp,0xc
c001bd93:	6a 00                	push   0x0
c001bd95:	6a 00                	push   0x0
c001bd97:	53                   	push   ebx
c001bd98:	e8 47 fc ff ff       	call   c001b9e4 <IDE::enableIRQs(unsigned char, bool)>
c001bd9d:	83 c4 0c             	add    esp,0xc
c001bda0:	6a 00                	push   0x0
c001bda2:	6a 01                	push   0x1
c001bda4:	53                   	push   ebx
c001bda5:	e8 3a fc ff ff       	call   c001b9e4 <IDE::enableIRQs(unsigned char, bool)>
c001bdaa:	83 c4 10             	add    esp,0x10
c001bdad:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001bdb4:	74 34                	je     c001bdea <IDE::open(int, int, void*)+0x3bc>
c001bdb6:	83 ec 0c             	sub    esp,0xc
c001bdb9:	53                   	push   ebx
c001bdba:	6a 01                	push   0x1
c001bdbc:	68 ac b9 01 c0       	push   0xc001b9ac
c001bdc1:	6a 0e                	push   0xe
c001bdc3:	53                   	push   ebx
c001bdc4:	e8 05 08 ff ff       	call   c000c5ce <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bdc9:	83 c4 14             	add    esp,0x14
c001bdcc:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bdd2:	53                   	push   ebx
c001bdd3:	6a 01                	push   0x1
c001bdd5:	68 c8 b9 01 c0       	push   0xc001b9c8
c001bdda:	6a 0f                	push   0xf
c001bddc:	53                   	push   ebx
c001bddd:	e8 ec 07 ff ff       	call   c000c5ce <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bde2:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001bde8:	eb 38                	jmp    c001be22 <IDE::open(int, int, void*)+0x3f4>
c001bdea:	83 ec 0c             	sub    esp,0xc
c001bded:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001bdf7:	53                   	push   ebx
c001bdf8:	6a 00                	push   0x0
c001bdfa:	68 ac b9 01 c0       	push   0xc001b9ac
c001bdff:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001be05:	53                   	push   ebx
c001be06:	e8 c3 07 ff ff       	call   c000c5ce <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001be0b:	83 c4 14             	add    esp,0x14
c001be0e:	53                   	push   ebx
c001be0f:	6a 00                	push   0x0
c001be11:	68 c8 b9 01 c0       	push   0xc001b9c8
c001be16:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001be1c:	53                   	push   ebx
c001be1d:	e8 ac 07 ff ff       	call   c000c5ce <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001be22:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be24:	83 c4 20             	add    esp,0x20
c001be27:	83 ec 0c             	sub    esp,0xc
c001be2a:	53                   	push   ebx
c001be2b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001be2e:	83 c4 0c             	add    esp,0xc
c001be31:	6a 07                	push   0x7
c001be33:	6a 00                	push   0x0
c001be35:	53                   	push   ebx
c001be36:	e8 61 fa ff ff       	call   c001b89c <IDE::read(unsigned char, unsigned char)>
c001be3b:	83 c4 0c             	add    esp,0xc
c001be3e:	6a 07                	push   0x7
c001be40:	6a 01                	push   0x1
c001be42:	53                   	push   ebx
c001be43:	e8 54 fa ff ff       	call   c001b89c <IDE::read(unsigned char, unsigned char)>
c001be48:	83 c4 0c             	add    esp,0xc
c001be4b:	6a 01                	push   0x1
c001be4d:	6a 00                	push   0x0
c001be4f:	53                   	push   ebx
c001be50:	e8 8f fb ff ff       	call   c001b9e4 <IDE::enableIRQs(unsigned char, bool)>
c001be55:	83 c4 0c             	add    esp,0xc
c001be58:	6a 01                	push   0x1
c001be5a:	6a 01                	push   0x1
c001be5c:	53                   	push   ebx
c001be5d:	e8 82 fb ff ff       	call   c001b9e4 <IDE::enableIRQs(unsigned char, bool)>
c001be62:	83 c4 2c             	add    esp,0x2c
c001be65:	31 c0                	xor    eax,eax
c001be67:	5b                   	pop    ebx
c001be68:	5e                   	pop    esi
c001be69:	5f                   	pop    edi
c001be6a:	5d                   	pop    ebp
c001be6b:	c3                   	ret    

c001be6c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001be6c:	55                   	push   ebp
c001be6d:	57                   	push   edi
c001be6e:	56                   	push   esi
c001be6f:	53                   	push   ebx
c001be70:	83 ec 1c             	sub    esp,0x1c
c001be73:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001be77:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001be7b:	8d 42 f8             	lea    eax,[edx-0x8]
c001be7e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001be82:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001be86:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001be8a:	3c 03                	cmp    al,0x3
c001be8c:	77 5a                	ja     c001bee8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001be8e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001be92:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001be96:	0f b6 db             	movzx  ebx,bl
c001be99:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001be9c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bea1:	0c 80                	or     al,0x80
c001bea3:	50                   	push   eax
c001bea4:	6a 0c                	push   0xc
c001bea6:	53                   	push   ebx
c001bea7:	56                   	push   esi
c001bea8:	e8 2f f9 ff ff       	call   c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bead:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001beb2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001beb6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001beba:	0f b6 d2             	movzx  edx,dl
c001bebd:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bec1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bec3:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bec8:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001becc:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bed0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bed4:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bedc:	83 c4 2c             	add    esp,0x2c
c001bedf:	5b                   	pop    ebx
c001bee0:	5e                   	pop    esi
c001bee1:	5f                   	pop    edi
c001bee2:	5d                   	pop    ebp
c001bee3:	e9 f4 f8 ff ff       	jmp    c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bee8:	0f b6 c2             	movzx  eax,dl
c001beeb:	83 f8 07             	cmp    eax,0x7
c001beee:	77 12                	ja     c001bf02 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001bef0:	0f b6 c2             	movzx  eax,dl
c001bef3:	0f b6 db             	movzx  ebx,bl
c001bef6:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001befe:	01 c2                	add    edx,eax
c001bf00:	eb 2f                	jmp    c001bf31 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001bf02:	83 f8 0d             	cmp    eax,0xd
c001bf05:	77 13                	ja     c001bf1a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001bf07:	0f b6 db             	movzx  ebx,bl
c001bf0a:	0f b6 d2             	movzx  edx,dl
c001bf0d:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001bf14:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bf18:	eb 17                	jmp    c001bf31 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001bf1a:	83 f8 15             	cmp    eax,0x15
c001bf1d:	77 14                	ja     c001bf33 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001bf1f:	0f b6 db             	movzx  ebx,bl
c001bf22:	0f b6 d2             	movzx  edx,dl
c001bf25:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001bf2d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bf31:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bf33:	83 c4 1c             	add    esp,0x1c
c001bf36:	5b                   	pop    ebx
c001bf37:	5e                   	pop    esi
c001bf38:	5f                   	pop    edi
c001bf39:	5d                   	pop    ebp
c001bf3a:	c3                   	ret    
c001bf3b:	90                   	nop

c001bf3c <IDE::detect()>:
c001bf3c:	55                   	push   ebp
c001bf3d:	57                   	push   edi
c001bf3e:	56                   	push   esi
c001bf3f:	53                   	push   ebx
c001bf40:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bf46:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001bf4d:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001bf54:	0f 85 a4 02 00 00    	jne    c001c1fe <IDE::detect()+0x2c2>
c001bf5a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001bf61:	31 f6                	xor    esi,esi
c001bf63:	31 ed                	xor    ebp,ebp
c001bf65:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bf6d:	89 e8                	mov    eax,ebp
c001bf6f:	c1 e0 06             	shl    eax,0x6
c001bf72:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001bf7a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bf7e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bf82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf86:	c1 e0 04             	shl    eax,0x4
c001bf89:	83 c8 a0             	or     eax,0xffffffa0
c001bf8c:	0f b6 c0             	movzx  eax,al
c001bf8f:	50                   	push   eax
c001bf90:	6a 06                	push   0x6
c001bf92:	56                   	push   esi
c001bf93:	53                   	push   ebx
c001bf94:	e8 43 f8 ff ff       	call   c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf99:	83 c4 0c             	add    esp,0xc
c001bf9c:	6a 0c                	push   0xc
c001bf9e:	56                   	push   esi
c001bf9f:	53                   	push   ebx
c001bfa0:	e8 f7 f8 ff ff       	call   c001b89c <IDE::read(unsigned char, unsigned char)>
c001bfa5:	83 c4 0c             	add    esp,0xc
c001bfa8:	6a 0c                	push   0xc
c001bfaa:	56                   	push   esi
c001bfab:	53                   	push   ebx
c001bfac:	e8 eb f8 ff ff       	call   c001b89c <IDE::read(unsigned char, unsigned char)>
c001bfb1:	83 c4 0c             	add    esp,0xc
c001bfb4:	6a 0c                	push   0xc
c001bfb6:	56                   	push   esi
c001bfb7:	53                   	push   ebx
c001bfb8:	e8 df f8 ff ff       	call   c001b89c <IDE::read(unsigned char, unsigned char)>
c001bfbd:	83 c4 0c             	add    esp,0xc
c001bfc0:	6a 0c                	push   0xc
c001bfc2:	56                   	push   esi
c001bfc3:	53                   	push   ebx
c001bfc4:	e8 d3 f8 ff ff       	call   c001b89c <IDE::read(unsigned char, unsigned char)>
c001bfc9:	68 ec 00 00 00       	push   0xec
c001bfce:	6a 07                	push   0x7
c001bfd0:	56                   	push   esi
c001bfd1:	53                   	push   ebx
c001bfd2:	e8 05 f8 ff ff       	call   c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfd7:	83 c4 1c             	add    esp,0x1c
c001bfda:	6a 0c                	push   0xc
c001bfdc:	56                   	push   esi
c001bfdd:	53                   	push   ebx
c001bfde:	e8 b9 f8 ff ff       	call   c001b89c <IDE::read(unsigned char, unsigned char)>
c001bfe3:	83 c4 0c             	add    esp,0xc
c001bfe6:	6a 0c                	push   0xc
c001bfe8:	56                   	push   esi
c001bfe9:	53                   	push   ebx
c001bfea:	e8 ad f8 ff ff       	call   c001b89c <IDE::read(unsigned char, unsigned char)>
c001bfef:	83 c4 0c             	add    esp,0xc
c001bff2:	6a 0c                	push   0xc
c001bff4:	56                   	push   esi
c001bff5:	53                   	push   ebx
c001bff6:	e8 a1 f8 ff ff       	call   c001b89c <IDE::read(unsigned char, unsigned char)>
c001bffb:	83 c4 0c             	add    esp,0xc
c001bffe:	6a 0c                	push   0xc
c001c000:	56                   	push   esi
c001c001:	53                   	push   ebx
c001c002:	e8 95 f8 ff ff       	call   c001b89c <IDE::read(unsigned char, unsigned char)>
c001c007:	83 c4 0c             	add    esp,0xc
c001c00a:	6a 0c                	push   0xc
c001c00c:	56                   	push   esi
c001c00d:	53                   	push   ebx
c001c00e:	e8 89 f8 ff ff       	call   c001b89c <IDE::read(unsigned char, unsigned char)>
c001c013:	83 c4 10             	add    esp,0x10
c001c016:	84 c0                	test   al,al
c001c018:	0f 84 60 01 00 00    	je     c001c17e <IDE::detect()+0x242>
c001c01e:	31 ff                	xor    edi,edi
c001c020:	50                   	push   eax
c001c021:	6a 0c                	push   0xc
c001c023:	56                   	push   esi
c001c024:	53                   	push   ebx
c001c025:	e8 72 f8 ff ff       	call   c001b89c <IDE::read(unsigned char, unsigned char)>
c001c02a:	83 c4 10             	add    esp,0x10
c001c02d:	a8 01                	test   al,0x1
c001c02f:	0f 85 6a 01 00 00    	jne    c001c19f <IDE::detect()+0x263>
c001c035:	a8 80                	test   al,0x80
c001c037:	75 04                	jne    c001c03d <IDE::detect()+0x101>
c001c039:	a8 08                	test   al,0x8
c001c03b:	75 23                	jne    c001c060 <IDE::detect()+0x124>
c001c03d:	47                   	inc    edi
c001c03e:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c044:	7e da                	jle    c001c020 <IDE::detect()+0xe4>
c001c046:	83 ec 0c             	sub    esp,0xc
c001c049:	6a 32                	push   0x32
c001c04b:	e8 f0 9d ff ff       	call   c0015e40 <milliTenthSleep(unsigned int)>
c001c050:	83 c4 10             	add    esp,0x10
c001c053:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c059:	75 c5                	jne    c001c020 <IDE::detect()+0xe4>
c001c05b:	e9 3f 01 00 00       	jmp    c001c19f <IDE::detect()+0x263>
c001c060:	31 c9                	xor    ecx,ecx
c001c062:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c066:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c06a:	83 ec 0c             	sub    esp,0xc
c001c06d:	68 80 00 00 00       	push   0x80
c001c072:	57                   	push   edi
c001c073:	6a 00                	push   0x0
c001c075:	56                   	push   esi
c001c076:	53                   	push   ebx
c001c077:	e8 f0 fd ff ff       	call   c001be6c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c07c:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c081:	89 e8                	mov    eax,ebp
c001c083:	89 d1                	mov    ecx,edx
c001c085:	c1 e0 06             	shl    eax,0x6
c001c088:	01 d8                	add    eax,ebx
c001c08a:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c091:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c098:	89 f2                	mov    edx,esi
c001c09a:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c0a0:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c0a4:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c0aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c0ae:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c0b5:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c0bd:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c0c4:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c0cc:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c0d2:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c0d9:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c0df:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c0e3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c0e7:	83 c4 20             	add    esp,0x20
c001c0ea:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c0ed:	83 c0 02             	add    eax,0x2
c001c0f0:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c0f6:	83 c7 02             	add    edi,0x2
c001c0f9:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c0fc:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c102:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c106:	75 e2                	jne    c001c0ea <IDE::detect()+0x1ae>
c001c108:	89 e8                	mov    eax,ebp
c001c10a:	c1 e0 06             	shl    eax,0x6
c001c10d:	01 d8                	add    eax,ebx
c001c10f:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c116:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c11d:	c1 ea 09             	shr    edx,0x9
c001c120:	83 e2 01             	and    edx,0x1
c001c123:	80 e1 01             	and    cl,0x1
c001c126:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c12c:	75 22                	jne    c001c150 <IDE::detect()+0x214>
c001c12e:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c135:	74 46                	je     c001c17d <IDE::detect()+0x241>
c001c137:	83 ec 0c             	sub    esp,0xc
c001c13a:	68 7c 01 00 00       	push   0x17c
c001c13f:	e8 72 b9 fe ff       	call   c0007ab6 <malloc>
c001c144:	89 c7                	mov    edi,eax
c001c146:	89 04 24             	mov    DWORD PTR [esp],eax
c001c149:	e8 1a 05 00 00       	call   c001c668 <ATA::ATA()>
c001c14e:	eb 17                	jmp    c001c167 <IDE::detect()+0x22b>
c001c150:	83 ec 0c             	sub    esp,0xc
c001c153:	68 84 01 00 00       	push   0x184
c001c158:	e8 59 b9 fe ff       	call   c0007ab6 <malloc>
c001c15d:	89 c7                	mov    edi,eax
c001c15f:	89 04 24             	mov    DWORD PTR [esp],eax
c001c162:	e8 45 0e 00 00       	call   c001cfac <ATAPI::ATAPI()>
c001c167:	5a                   	pop    edx
c001c168:	59                   	pop    ecx
c001c169:	57                   	push   edi
c001c16a:	53                   	push   ebx
c001c16b:	e8 b2 04 ff ff       	call   c000c622 <Device::addChild(Device*)>
c001c170:	8b 07                	mov    eax,DWORD PTR [edi]
c001c172:	53                   	push   ebx
c001c173:	55                   	push   ebp
c001c174:	6a 00                	push   0x0
c001c176:	57                   	push   edi
c001c177:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c17a:	83 c4 20             	add    esp,0x20
c001c17d:	45                   	inc    ebp
c001c17e:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c183:	74 0d                	je     c001c192 <IDE::detect()+0x256>
c001c185:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c18d:	e9 db fd ff ff       	jmp    c001bf6d <IDE::detect()+0x31>
c001c192:	4e                   	dec    esi
c001c193:	74 69                	je     c001c1fe <IDE::detect()+0x2c2>
c001c195:	be 01 00 00 00       	mov    esi,0x1
c001c19a:	e9 c6 fd ff ff       	jmp    c001bf65 <IDE::detect()+0x29>
c001c19f:	50                   	push   eax
c001c1a0:	6a 04                	push   0x4
c001c1a2:	56                   	push   esi
c001c1a3:	53                   	push   ebx
c001c1a4:	e8 f3 f6 ff ff       	call   c001b89c <IDE::read(unsigned char, unsigned char)>
c001c1a9:	83 c4 0c             	add    esp,0xc
c001c1ac:	89 c7                	mov    edi,eax
c001c1ae:	6a 05                	push   0x5
c001c1b0:	56                   	push   esi
c001c1b1:	53                   	push   ebx
c001c1b2:	e8 e5 f6 ff ff       	call   c001b89c <IDE::read(unsigned char, unsigned char)>
c001c1b7:	83 c4 10             	add    esp,0x10
c001c1ba:	89 f9                	mov    ecx,edi
c001c1bc:	0f b6 c0             	movzx  eax,al
c001c1bf:	0f b6 f9             	movzx  edi,cl
c001c1c2:	83 ff 14             	cmp    edi,0x14
c001c1c5:	75 07                	jne    c001c1ce <IDE::detect()+0x292>
c001c1c7:	3d eb 00 00 00       	cmp    eax,0xeb
c001c1cc:	eb 0a                	jmp    c001c1d8 <IDE::detect()+0x29c>
c001c1ce:	3d 96 00 00 00       	cmp    eax,0x96
c001c1d3:	75 a9                	jne    c001c17e <IDE::detect()+0x242>
c001c1d5:	83 ff 69             	cmp    edi,0x69
c001c1d8:	75 a4                	jne    c001c17e <IDE::detect()+0x242>
c001c1da:	68 a1 00 00 00       	push   0xa1
c001c1df:	6a 07                	push   0x7
c001c1e1:	56                   	push   esi
c001c1e2:	53                   	push   ebx
c001c1e3:	e8 f4 f5 ff ff       	call   c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1e8:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c1ef:	e8 4c 9c ff ff       	call   c0015e40 <milliTenthSleep(unsigned int)>
c001c1f4:	83 c4 10             	add    esp,0x10
c001c1f7:	b1 01                	mov    cl,0x1
c001c1f9:	e9 64 fe ff ff       	jmp    c001c062 <IDE::detect()+0x126>
c001c1fe:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c204:	5b                   	pop    ebx
c001c205:	5e                   	pop    esi
c001c206:	5f                   	pop    edi
c001c207:	5d                   	pop    ebp
c001c208:	c3                   	ret    
c001c209:	90                   	nop

c001c20a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c20a:	55                   	push   ebp
c001c20b:	57                   	push   edi
c001c20c:	56                   	push   esi
c001c20d:	53                   	push   ebx
c001c20e:	83 ec 1c             	sub    esp,0x1c
c001c211:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c215:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c219:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c21d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c221:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c225:	88 c3                	mov    bl,al
c001c227:	25 ff 00 00 00       	and    eax,0xff
c001c22c:	0f 84 88 00 00 00    	je     c001c2ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c232:	83 ec 0c             	sub    esp,0xc
c001c235:	89 c7                	mov    edi,eax
c001c237:	68 8b 2b 02 c0       	push   0xc0022b8b
c001c23c:	e8 04 e7 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001c241:	83 c4 10             	add    esp,0x10
c001c244:	83 ff 01             	cmp    edi,0x1
c001c247:	74 6b                	je     c001c2b4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c249:	83 ff 02             	cmp    edi,0x2
c001c24c:	75 58                	jne    c001c2a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c24e:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c253:	01 ff                	add    edi,edi
c001c255:	50                   	push   eax
c001c256:	09 fe                	or     esi,edi
c001c258:	6a 01                	push   0x1
c001c25a:	89 f0                	mov    eax,esi
c001c25c:	0f b6 f0             	movzx  esi,al
c001c25f:	c1 e6 06             	shl    esi,0x6
c001c262:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c26a:	50                   	push   eax
c001c26b:	55                   	push   ebp
c001c26c:	e8 2b f6 ff ff       	call   c001b89c <IDE::read(unsigned char, unsigned char)>
c001c271:	83 c4 10             	add    esp,0x10
c001c274:	a8 01                	test   al,0x1
c001c276:	74 02                	je     c001c27a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c278:	b3 07                	mov    bl,0x7
c001c27a:	a8 02                	test   al,0x2
c001c27c:	74 02                	je     c001c280 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c27e:	b3 03                	mov    bl,0x3
c001c280:	a8 04                	test   al,0x4
c001c282:	74 02                	je     c001c286 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c284:	b3 14                	mov    bl,0x14
c001c286:	a8 08                	test   al,0x8
c001c288:	74 02                	je     c001c28c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c28a:	b3 03                	mov    bl,0x3
c001c28c:	a8 10                	test   al,0x10
c001c28e:	74 02                	je     c001c292 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c290:	b3 15                	mov    bl,0x15
c001c292:	a8 20                	test   al,0x20
c001c294:	74 02                	je     c001c298 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c296:	b3 03                	mov    bl,0x3
c001c298:	a8 40                	test   al,0x40
c001c29a:	74 02                	je     c001c29e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c29c:	b3 16                	mov    bl,0x16
c001c29e:	a8 80                	test   al,0x80
c001c2a0:	74 18                	je     c001c2ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c2a2:	b3 0d                	mov    bl,0xd
c001c2a4:	eb 14                	jmp    c001c2ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c2a6:	83 ff 03             	cmp    edi,0x3
c001c2a9:	74 0d                	je     c001c2b8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c2ab:	83 ff 04             	cmp    edi,0x4
c001c2ae:	75 0a                	jne    c001c2ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c2b0:	b3 08                	mov    bl,0x8
c001c2b2:	eb 06                	jmp    c001c2ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c2b4:	b3 13                	mov    bl,0x13
c001c2b6:	eb 02                	jmp    c001c2ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c2b8:	b3 17                	mov    bl,0x17
c001c2ba:	83 c4 1c             	add    esp,0x1c
c001c2bd:	88 d8                	mov    al,bl
c001c2bf:	5b                   	pop    ebx
c001c2c0:	5e                   	pop    esi
c001c2c1:	5f                   	pop    edi
c001c2c2:	5d                   	pop    ebp
c001c2c3:	c3                   	ret    

c001c2c4 <IDE::polling(unsigned char, unsigned int)>:
c001c2c4:	57                   	push   edi
c001c2c5:	56                   	push   esi
c001c2c6:	53                   	push   ebx
c001c2c7:	bb 04 00 00 00       	mov    ebx,0x4
c001c2cc:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c2d0:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c2d5:	52                   	push   edx
c001c2d6:	6a 0c                	push   0xc
c001c2d8:	56                   	push   esi
c001c2d9:	57                   	push   edi
c001c2da:	e8 bd f5 ff ff       	call   c001b89c <IDE::read(unsigned char, unsigned char)>
c001c2df:	83 c4 10             	add    esp,0x10
c001c2e2:	4b                   	dec    ebx
c001c2e3:	75 f0                	jne    c001c2d5 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c2e5:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c2ea:	50                   	push   eax
c001c2eb:	6a 0c                	push   0xc
c001c2ed:	56                   	push   esi
c001c2ee:	57                   	push   edi
c001c2ef:	e8 a8 f5 ff ff       	call   c001b89c <IDE::read(unsigned char, unsigned char)>
c001c2f4:	83 c4 10             	add    esp,0x10
c001c2f7:	a8 01                	test   al,0x1
c001c2f9:	75 17                	jne    c001c312 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c2fb:	a8 20                	test   al,0x20
c001c2fd:	75 0f                	jne    c001c30e <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c2ff:	4b                   	dec    ebx
c001c300:	74 10                	je     c001c312 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c302:	a8 80                	test   al,0x80
c001c304:	75 e4                	jne    c001c2ea <IDE::polling(unsigned char, unsigned int)+0x26>
c001c306:	a8 08                	test   al,0x8
c001c308:	74 e0                	je     c001c2ea <IDE::polling(unsigned char, unsigned int)+0x26>
c001c30a:	31 c0                	xor    eax,eax
c001c30c:	eb 06                	jmp    c001c314 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c30e:	b0 01                	mov    al,0x1
c001c310:	eb 02                	jmp    c001c314 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c312:	b0 02                	mov    al,0x2
c001c314:	5b                   	pop    ebx
c001c315:	5e                   	pop    esi
c001c316:	5f                   	pop    edi
c001c317:	c3                   	ret    

c001c318 <SATABus::close(int, int, void*)>:
c001c318:	31 c0                	xor    eax,eax
c001c31a:	c3                   	ret    
c001c31b:	90                   	nop

c001c31c <SATABus::detect()>:
c001c31c:	c3                   	ret    
c001c31d:	90                   	nop

c001c31e <SATABus::SATABus()>:
c001c31e:	83 ec 0c             	sub    esp,0xc
c001c321:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c325:	83 ec 08             	sub    esp,0x8
c001c328:	68 c4 2b 02 c0       	push   0xc0022bc4
c001c32d:	50                   	push   eax
c001c32e:	e8 31 06 ff ff       	call   c000c964 <HardDiskController::HardDiskController(char const*)>
c001c333:	83 c4 10             	add    esp,0x10
c001c336:	ba f0 2b 02 c0       	mov    edx,0xc0022bf0
c001c33b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c33f:	89 10                	mov    DWORD PTR [eax],edx
c001c341:	83 ec 0c             	sub    esp,0xc
c001c344:	6a 50                	push   0x50
c001c346:	e8 43 bb fe ff       	call   c0007e8e <Phys::allocateContiguousPages(int)>
c001c34b:	83 c4 10             	add    esp,0x10
c001c34e:	89 c2                	mov    edx,eax
c001c350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c354:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c35a:	83 ec 0c             	sub    esp,0xc
c001c35d:	6a 50                	push   0x50
c001c35f:	e8 a9 d2 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001c364:	83 c4 10             	add    esp,0x10
c001c367:	89 c2                	mov    edx,eax
c001c369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c36d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c373:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001c378:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c37c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c382:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c386:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c38c:	83 ec 0c             	sub    esp,0xc
c001c38f:	6a 03                	push   0x3
c001c391:	6a 50                	push   0x50
c001c393:	51                   	push   ecx
c001c394:	52                   	push   edx
c001c395:	50                   	push   eax
c001c396:	e8 7f db fe ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c39b:	83 c4 20             	add    esp,0x20
c001c39e:	90                   	nop
c001c39f:	83 c4 0c             	add    esp,0xc
c001c3a2:	c3                   	ret    
c001c3a3:	90                   	nop

c001c3a4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c3a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3a8:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c3ab:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c3ae:	09 c2                	or     edx,eax
c001c3b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3b4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c3ba:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c3bc:	31 c0                	xor    eax,eax
c001c3be:	c1 e9 08             	shr    ecx,0x8
c001c3c1:	83 e1 0f             	and    ecx,0xf
c001c3c4:	39 c8                	cmp    eax,ecx
c001c3c6:	74 0a                	je     c001c3d2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c3c8:	f6 c2 01             	test   dl,0x1
c001c3cb:	74 08                	je     c001c3d5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c3cd:	d1 ea                	shr    edx,1
c001c3cf:	40                   	inc    eax
c001c3d0:	eb f2                	jmp    c001c3c4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c3d2:	83 c8 ff             	or     eax,0xffffffff
c001c3d5:	c3                   	ret    

c001c3d6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c3d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c3da:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c3dd:	89 c2                	mov    edx,eax
c001c3df:	c1 ea 08             	shr    edx,0x8
c001c3e2:	83 e2 0f             	and    edx,0xf
c001c3e5:	4a                   	dec    edx
c001c3e6:	75 32                	jne    c001c41a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c3e8:	83 e0 0f             	and    eax,0xf
c001c3eb:	83 f8 03             	cmp    eax,0x3
c001c3ee:	75 2a                	jne    c001c41a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c3f0:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c3f3:	b8 02 00 00 00       	mov    eax,0x2
c001c3f8:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c3fe:	74 1c                	je     c001c41c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c400:	b8 04 00 00 00       	mov    eax,0x4
c001c405:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c40b:	74 0f                	je     c001c41c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c40d:	31 c0                	xor    eax,eax
c001c40f:	83 fa 03             	cmp    edx,0x3
c001c412:	0f 94 c0             	sete   al
c001c415:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c419:	c3                   	ret    
c001c41a:	31 c0                	xor    eax,eax
c001c41c:	c3                   	ret    
c001c41d:	90                   	nop

c001c41e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c41e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c422:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c425:	0f ba e2 0f          	bt     edx,0xf
c001c429:	72 f7                	jb     c001c422 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c42b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c42e:	83 ca 10             	or     edx,0x10
c001c431:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c434:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c437:	83 ca 01             	or     edx,0x1
c001c43a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c43d:	c3                   	ret    

c001c43e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c43e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c442:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c445:	83 e2 fe             	and    edx,0xfffffffe
c001c448:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c44b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c44e:	83 e2 ef             	and    edx,0xffffffef
c001c451:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c454:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c457:	0f ba e2 0e          	bt     edx,0xe
c001c45b:	72 f7                	jb     c001c454 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c45d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c460:	0f ba e2 0f          	bt     edx,0xf
c001c464:	72 ee                	jb     c001c454 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c466:	c3                   	ret    
c001c467:	90                   	nop

c001c468 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c468:	55                   	push   ebp
c001c469:	57                   	push   edi
c001c46a:	56                   	push   esi
c001c46b:	53                   	push   ebx
c001c46c:	83 ec 1c             	sub    esp,0x1c
c001c46f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c473:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c477:	53                   	push   ebx
c001c478:	56                   	push   esi
c001c479:	e8 c0 ff ff ff       	call   c001c43e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c47e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c482:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c488:	83 ec 0c             	sub    esp,0xc
c001c48b:	c1 e5 0a             	shl    ebp,0xa
c001c48e:	01 e8                	add    eax,ebp
c001c490:	89 03                	mov    DWORD PTR [ebx],eax
c001c492:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c494:	68 00 04 00 00       	push   0x400
c001c499:	6a 00                	push   0x0
c001c49b:	50                   	push   eax
c001c49c:	e8 4f 40 fe ff       	call   c00004f0 <memset>
c001c4a1:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001c4a7:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001c4ab:	01 e8                	add    eax,ebp
c001c4ad:	83 c4 1c             	add    esp,0x1c
c001c4b0:	89 03                	mov    DWORD PTR [ebx],eax
c001c4b2:	c1 e2 08             	shl    edx,0x8
c001c4b5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c4bc:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001c4c2:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c4c8:	01 f8                	add    eax,edi
c001c4ca:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c4cd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c4d0:	68 00 01 00 00       	push   0x100
c001c4d5:	6a 00                	push   0x0
c001c4d7:	50                   	push   eax
c001c4d8:	e8 13 40 fe ff       	call   c00004f0 <memset>
c001c4dd:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001c4e3:	01 fa                	add    edx,edi
c001c4e5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c4e9:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001c4ec:	c1 e7 0d             	shl    edi,0xd
c001c4ef:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c4f6:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001c4fc:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001c502:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c506:	31 ff                	xor    edi,edi
c001c508:	83 c4 10             	add    esp,0x10
c001c50b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001c511:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c515:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c51b:	83 c5 20             	add    ebp,0x20
c001c51e:	01 f8                	add    eax,edi
c001c520:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c523:	52                   	push   edx
c001c524:	68 00 01 00 00       	push   0x100
c001c529:	6a 00                	push   0x0
c001c52b:	50                   	push   eax
c001c52c:	e8 bf 3f fe ff       	call   c00004f0 <memset>
c001c531:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c535:	83 c4 10             	add    esp,0x10
c001c538:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001c53e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001c545:	01 f8                	add    eax,edi
c001c547:	81 c7 00 01 00 00    	add    edi,0x100
c001c54d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c550:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001c556:	75 b3                	jne    c001c50b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001c558:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c55f:	50                   	push   eax
c001c560:	50                   	push   eax
c001c561:	53                   	push   ebx
c001c562:	56                   	push   esi
c001c563:	e8 b6 fe ff ff       	call   c001c41e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c568:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c56f:	83 c4 2c             	add    esp,0x2c
c001c572:	5b                   	pop    ebx
c001c573:	5e                   	pop    esi
c001c574:	5f                   	pop    edi
c001c575:	5d                   	pop    ebp
c001c576:	c3                   	ret    
c001c577:	90                   	nop

c001c578 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001c578:	55                   	push   ebp
c001c579:	57                   	push   edi
c001c57a:	56                   	push   esi
c001c57b:	53                   	push   ebx
c001c57c:	31 db                	xor    ebx,ebx
c001c57e:	83 ec 0c             	sub    esp,0xc
c001c581:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c585:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c589:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001c58c:	f7 c7 01 00 00 00    	test   edi,0x1
c001c592:	74 7a                	je     c001c60e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c594:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c598:	89 d8                	mov    eax,ebx
c001c59a:	c1 e0 07             	shl    eax,0x7
c001c59d:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001c5a4:	55                   	push   ebp
c001c5a5:	56                   	push   esi
c001c5a6:	e8 2b fe ff ff       	call   c001c3d6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001c5ab:	5a                   	pop    edx
c001c5ac:	83 f8 01             	cmp    eax,0x1
c001c5af:	59                   	pop    ecx
c001c5b0:	75 21                	jne    c001c5d3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001c5b2:	50                   	push   eax
c001c5b3:	53                   	push   ebx
c001c5b4:	55                   	push   ebp
c001c5b5:	56                   	push   esi
c001c5b6:	e8 ad fe ff ff       	call   c001c468 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c5bb:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c5c2:	e8 ef b4 fe ff       	call   c0007ab6 <malloc>
c001c5c7:	89 c5                	mov    ebp,eax
c001c5c9:	89 04 24             	mov    DWORD PTR [esp],eax
c001c5cc:	e8 99 10 00 00       	call   c001d66a <SATA::SATA()>
c001c5d1:	eb 24                	jmp    c001c5f7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001c5d3:	83 f8 04             	cmp    eax,0x4
c001c5d6:	75 36                	jne    c001c60e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c5d8:	51                   	push   ecx
c001c5d9:	53                   	push   ebx
c001c5da:	55                   	push   ebp
c001c5db:	56                   	push   esi
c001c5dc:	e8 87 fe ff ff       	call   c001c468 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c5e1:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001c5e8:	e8 c9 b4 fe ff       	call   c0007ab6 <malloc>
c001c5ed:	89 c5                	mov    ebp,eax
c001c5ef:	89 04 24             	mov    DWORD PTR [esp],eax
c001c5f2:	e8 d5 17 00 00       	call   c001ddcc <SATAPI::SATAPI()>
c001c5f7:	58                   	pop    eax
c001c5f8:	5a                   	pop    edx
c001c5f9:	55                   	push   ebp
c001c5fa:	56                   	push   esi
c001c5fb:	e8 22 00 ff ff       	call   c000c622 <Device::addChild(Device*)>
c001c600:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001c603:	56                   	push   esi
c001c604:	6a 00                	push   0x0
c001c606:	53                   	push   ebx
c001c607:	55                   	push   ebp
c001c608:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c60b:	83 c4 20             	add    esp,0x20
c001c60e:	d1 ef                	shr    edi,1
c001c610:	43                   	inc    ebx
c001c611:	83 fb 20             	cmp    ebx,0x20
c001c614:	0f 85 72 ff ff ff    	jne    c001c58c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001c61a:	83 c4 0c             	add    esp,0xc
c001c61d:	5b                   	pop    ebx
c001c61e:	5e                   	pop    esi
c001c61f:	5f                   	pop    edi
c001c620:	5d                   	pop    ebp
c001c621:	c3                   	ret    

c001c622 <SATABus::open(int, int, void*)>:
c001c622:	83 ec 14             	sub    esp,0x14
c001c625:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c629:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001c62f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001c635:	52                   	push   edx
c001c636:	50                   	push   eax
c001c637:	e8 3c ff ff ff       	call   c001c578 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001c63c:	31 c0                	xor    eax,eax
c001c63e:	83 c4 1c             	add    esp,0x1c
c001c641:	c3                   	ret    

c001c642 <ATA::close(int, int, void*)>:
c001c642:	83 ec 0c             	sub    esp,0xc
c001c645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c649:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c64f:	85 c0                	test   eax,eax
c001c651:	74 0c                	je     c001c65f <ATA::close(int, int, void*)+0x1d>
c001c653:	83 ec 0c             	sub    esp,0xc
c001c656:	8b 10                	mov    edx,DWORD PTR [eax]
c001c658:	50                   	push   eax
c001c659:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c65c:	83 c4 10             	add    esp,0x10
c001c65f:	31 c0                	xor    eax,eax
c001c661:	83 c4 0c             	add    esp,0xc
c001c664:	c3                   	ret    
c001c665:	90                   	nop

c001c666 <ATA::powerSaving(PowerSavingLevel)>:
c001c666:	c3                   	ret    
c001c667:	90                   	nop

c001c668 <ATA::ATA()>:
c001c668:	83 ec 0c             	sub    esp,0xc
c001c66b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c66f:	83 ec 04             	sub    esp,0x4
c001c672:	68 00 02 00 00       	push   0x200
c001c677:	68 bd 2c 02 c0       	push   0xc0022cbd
c001c67c:	50                   	push   eax
c001c67d:	e8 6c 03 ff ff       	call   c000c9ee <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c682:	83 c4 10             	add    esp,0x10
c001c685:	ba 30 2c 02 c0       	mov    edx,0xc0022c30
c001c68a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c68e:	89 10                	mov    DWORD PTR [eax],edx
c001c690:	90                   	nop
c001c691:	83 c4 0c             	add    esp,0xc
c001c694:	c3                   	ret    
c001c695:	90                   	nop

c001c696 <ATA::flush(bool)>:
c001c696:	53                   	push   ebx
c001c697:	83 ec 08             	sub    esp,0x8
c001c69a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c69e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c6a3:	83 f8 01             	cmp    eax,0x1
c001c6a6:	19 c0                	sbb    eax,eax
c001c6a8:	83 e0 fd             	and    eax,0xfffffffd
c001c6ab:	05 ea 00 00 00       	add    eax,0xea
c001c6b0:	50                   	push   eax
c001c6b1:	6a 07                	push   0x7
c001c6b3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c6ba:	50                   	push   eax
c001c6bb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c6c1:	e8 16 f1 ff ff       	call   c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6c6:	83 c4 0c             	add    esp,0xc
c001c6c9:	6a 00                	push   0x0
c001c6cb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c6d2:	50                   	push   eax
c001c6d3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c6d9:	e8 e6 fb ff ff       	call   c001c2c4 <IDE::polling(unsigned char, unsigned int)>
c001c6de:	83 c4 18             	add    esp,0x18
c001c6e1:	5b                   	pop    ebx
c001c6e2:	c3                   	ret    
c001c6e3:	90                   	nop

c001c6e4 <ATA::readyForCommand()>:
c001c6e4:	56                   	push   esi
c001c6e5:	53                   	push   ebx
c001c6e6:	53                   	push   ebx
c001c6e7:	31 db                	xor    ebx,ebx
c001c6e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c6ed:	51                   	push   ecx
c001c6ee:	6a 0c                	push   0xc
c001c6f0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c6f7:	50                   	push   eax
c001c6f8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c6fe:	e8 99 f1 ff ff       	call   c001b89c <IDE::read(unsigned char, unsigned char)>
c001c703:	83 c4 10             	add    esp,0x10
c001c706:	a8 88                	test   al,0x88
c001c708:	74 1f                	je     c001c729 <ATA::readyForCommand()+0x45>
c001c70a:	43                   	inc    ebx
c001c70b:	83 fb 63             	cmp    ebx,0x63
c001c70e:	7e dd                	jle    c001c6ed <ATA::readyForCommand()+0x9>
c001c710:	83 ec 0c             	sub    esp,0xc
c001c713:	6a 0a                	push   0xa
c001c715:	e8 26 97 ff ff       	call   c0015e40 <milliTenthSleep(unsigned int)>
c001c71a:	83 c4 10             	add    esp,0x10
c001c71d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c723:	75 c8                	jne    c001c6ed <ATA::readyForCommand()+0x9>
c001c725:	31 c0                	xor    eax,eax
c001c727:	eb 02                	jmp    c001c72b <ATA::readyForCommand()+0x47>
c001c729:	b0 01                	mov    al,0x1
c001c72b:	5a                   	pop    edx
c001c72c:	5b                   	pop    ebx
c001c72d:	5e                   	pop    esi
c001c72e:	c3                   	ret    
c001c72f:	90                   	nop

c001c730 <ATA::access(unsigned long long, int, void*, bool)>:
c001c730:	55                   	push   ebp
c001c731:	57                   	push   edi
c001c732:	56                   	push   esi
c001c733:	53                   	push   ebx
c001c734:	83 ec 2c             	sub    esp,0x2c
c001c737:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c73b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c73f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c743:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c747:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c74b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c74f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c753:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c759:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c75d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c763:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c767:	c1 e0 06             	shl    eax,0x6
c001c76a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c772:	74 5d                	je     c001c7d1 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c774:	89 fa                	mov    edx,edi
c001c776:	89 f0                	mov    eax,esi
c001c778:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c77c:	c1 ea 1c             	shr    edx,0x1c
c001c77f:	89 d1                	mov    ecx,edx
c001c781:	09 c1                	or     ecx,eax
c001c783:	74 25                	je     c001c7aa <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c785:	31 ed                	xor    ebp,ebp
c001c787:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c78e:	89 fa                	mov    edx,edi
c001c790:	89 f0                	mov    eax,esi
c001c792:	0f ad d0             	shrd   eax,edx,cl
c001c795:	d3 ea                	shr    edx,cl
c001c797:	f6 c1 20             	test   cl,0x20
c001c79a:	74 02                	je     c001c79e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c79c:	89 d0                	mov    eax,edx
c001c79e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c7a2:	45                   	inc    ebp
c001c7a3:	83 fd 06             	cmp    ebp,0x6
c001c7a6:	75 df                	jne    c001c787 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c7a8:	eb 76                	jmp    c001c820 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c7aa:	89 f0                	mov    eax,esi
c001c7ac:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c7b1:	89 fa                	mov    edx,edi
c001c7b3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c7ba:	0f ac d0 10          	shrd   eax,edx,0x10
c001c7be:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c7c3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c7c7:	c1 ee 18             	shr    esi,0x18
c001c7ca:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c7cf:	eb 56                	jmp    c001c827 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c7d1:	6a 00                	push   0x0
c001c7d3:	6a 3f                	push   0x3f
c001c7d5:	57                   	push   edi
c001c7d6:	56                   	push   esi
c001c7d7:	e8 a4 2a 00 00       	call   c001f280 <__umoddi3>
c001c7dc:	83 c4 10             	add    esp,0x10
c001c7df:	40                   	inc    eax
c001c7e0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c7e4:	6a 00                	push   0x0
c001c7e6:	68 f0 03 00 00       	push   0x3f0
c001c7eb:	57                   	push   edi
c001c7ec:	56                   	push   esi
c001c7ed:	e8 8e 29 00 00       	call   c001f180 <__udivdi3>
c001c7f2:	83 c4 10             	add    esp,0x10
c001c7f5:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c7fa:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c801:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c806:	6a 00                	push   0x0
c001c808:	6a 3f                	push   0x3f
c001c80a:	57                   	push   edi
c001c80b:	56                   	push   esi
c001c80c:	e8 6f 29 00 00       	call   c001f180 <__udivdi3>
c001c811:	83 c4 10             	add    esp,0x10
c001c814:	83 e0 0f             	and    eax,0xf
c001c817:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c81c:	89 c6                	mov    esi,eax
c001c81e:	eb 07                	jmp    c001c827 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c820:	31 f6                	xor    esi,esi
c001c822:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c827:	bf 01 00 00 00       	mov    edi,0x1
c001c82c:	50                   	push   eax
c001c82d:	6a 00                	push   0x0
c001c82f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c836:	50                   	push   eax
c001c837:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c83b:	e8 a4 f1 ff ff       	call   c001b9e4 <IDE::enableIRQs(unsigned char, bool)>
c001c840:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c843:	e8 9c fe ff ff       	call   c001c6e4 <ATA::readyForCommand()>
c001c848:	83 c4 10             	add    esp,0x10
c001c84b:	84 c0                	test   al,al
c001c84d:	0f 84 69 02 00 00    	je     c001cabc <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001c853:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c859:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c85f:	c1 e0 04             	shl    eax,0x4
c001c862:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c869:	09 c6                	or     esi,eax
c001c86b:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001c870:	75 05                	jne    c001c877 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c872:	83 ce a0             	or     esi,0xffffffa0
c001c875:	eb 03                	jmp    c001c87a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c877:	83 ce e0             	or     esi,0xffffffe0
c001c87a:	89 f0                	mov    eax,esi
c001c87c:	0f b6 f0             	movzx  esi,al
c001c87f:	56                   	push   esi
c001c880:	6a 06                	push   0x6
c001c882:	51                   	push   ecx
c001c883:	52                   	push   edx
c001c884:	e8 53 ef ff ff       	call   c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c889:	83 c4 10             	add    esp,0x10
c001c88c:	6a 00                	push   0x0
c001c88e:	6a 01                	push   0x1
c001c890:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c897:	50                   	push   eax
c001c898:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c89e:	e8 39 ef ff ff       	call   c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8a3:	83 c4 10             	add    esp,0x10
c001c8a6:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001c8ab:	83 f8 02             	cmp    eax,0x2
c001c8ae:	75 6e                	jne    c001c91e <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001c8b0:	6a 00                	push   0x0
c001c8b2:	6a 08                	push   0x8
c001c8b4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8bb:	50                   	push   eax
c001c8bc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8c2:	e8 15 ef ff ff       	call   c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8c7:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c8cc:	50                   	push   eax
c001c8cd:	6a 09                	push   0x9
c001c8cf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8d6:	50                   	push   eax
c001c8d7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8dd:	e8 fa ee ff ff       	call   c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8e2:	83 c4 20             	add    esp,0x20
c001c8e5:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c8ea:	50                   	push   eax
c001c8eb:	6a 0a                	push   0xa
c001c8ed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8f4:	50                   	push   eax
c001c8f5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8fb:	e8 dc ee ff ff       	call   c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c900:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c905:	50                   	push   eax
c001c906:	6a 0b                	push   0xb
c001c908:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c90f:	50                   	push   eax
c001c910:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c916:	e8 c1 ee ff ff       	call   c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c91b:	83 c4 20             	add    esp,0x20
c001c91e:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c923:	50                   	push   eax
c001c924:	6a 02                	push   0x2
c001c926:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c92d:	50                   	push   eax
c001c92e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c934:	e8 a3 ee ff ff       	call   c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c939:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c93e:	50                   	push   eax
c001c93f:	6a 03                	push   0x3
c001c941:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c948:	50                   	push   eax
c001c949:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c94f:	e8 88 ee ff ff       	call   c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c954:	83 c4 20             	add    esp,0x20
c001c957:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c95c:	50                   	push   eax
c001c95d:	6a 04                	push   0x4
c001c95f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c966:	50                   	push   eax
c001c967:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c96d:	e8 6a ee ff ff       	call   c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c972:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c977:	50                   	push   eax
c001c978:	6a 05                	push   0x5
c001c97a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c981:	50                   	push   eax
c001c982:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c988:	e8 4f ee ff ff       	call   c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c98d:	83 c4 20             	add    esp,0x20
c001c990:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c995:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001c99a:	74 11                	je     c001c9ad <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001c99c:	b8 30 00 00 00       	mov    eax,0x30
c001c9a1:	83 fa 02             	cmp    edx,0x2
c001c9a4:	75 16                	jne    c001c9bc <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c9a6:	b8 34 00 00 00       	mov    eax,0x34
c001c9ab:	eb 0f                	jmp    c001c9bc <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c9ad:	b8 20 00 00 00       	mov    eax,0x20
c001c9b2:	83 fa 02             	cmp    edx,0x2
c001c9b5:	75 05                	jne    c001c9bc <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c9b7:	b8 24 00 00 00       	mov    eax,0x24
c001c9bc:	50                   	push   eax
c001c9bd:	6a 07                	push   0x7
c001c9bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9c6:	50                   	push   eax
c001c9c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9cd:	e8 0a ee ff ff       	call   c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9d2:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c9d6:	83 c4 10             	add    esp,0x10
c001c9d9:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001c9de:	85 f6                	test   esi,esi
c001c9e0:	0f 84 b3 00 00 00    	je     c001ca99 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001c9e6:	50                   	push   eax
c001c9e7:	6a 01                	push   0x1
c001c9e9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9f0:	50                   	push   eax
c001c9f1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9f7:	e8 c8 f8 ff ff       	call   c001c2c4 <IDE::polling(unsigned char, unsigned int)>
c001c9fc:	83 c4 10             	add    esp,0x10
c001c9ff:	0f b6 f8             	movzx  edi,al
c001ca02:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ca08:	85 ff                	test   edi,edi
c001ca0a:	74 1d                	je     c001ca29 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001ca0c:	57                   	push   edi
c001ca0d:	0f b6 d2             	movzx  edx,dl
c001ca10:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001ca17:	50                   	push   eax
c001ca18:	52                   	push   edx
c001ca19:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca1f:	e8 e6 f7 ff ff       	call   c001c20a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ca24:	e9 90 00 00 00       	jmp    c001cab9 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001ca29:	85 ed                	test   ebp,ebp
c001ca2b:	74 3b                	je     c001ca68 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001ca2d:	31 c9                	xor    ecx,ecx
c001ca2f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ca33:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ca37:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001ca3b:	50                   	push   eax
c001ca3c:	50                   	push   eax
c001ca3d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca44:	50                   	push   eax
c001ca45:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca4b:	e8 7a ed ff ff       	call   c001b7ca <IDE::getBase(unsigned char)>
c001ca50:	89 c2                	mov    edx,eax
c001ca52:	89 f8                	mov    eax,edi
c001ca54:	66 ef                	out    dx,ax
c001ca56:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ca5a:	83 c4 10             	add    esp,0x10
c001ca5d:	41                   	inc    ecx
c001ca5e:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001ca64:	75 c9                	jne    c001ca2f <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001ca66:	eb 23                	jmp    c001ca8b <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001ca68:	0f b6 d2             	movzx  edx,dl
c001ca6b:	51                   	push   ecx
c001ca6c:	51                   	push   ecx
c001ca6d:	52                   	push   edx
c001ca6e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca74:	e8 51 ed ff ff       	call   c001b7ca <IDE::getBase(unsigned char)>
c001ca79:	b9 00 01 00 00       	mov    ecx,0x100
c001ca7e:	89 c2                	mov    edx,eax
c001ca80:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001ca84:	fc                   	cld    
c001ca85:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001ca88:	83 c4 10             	add    esp,0x10
c001ca8b:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001ca93:	4e                   	dec    esi
c001ca94:	e9 45 ff ff ff       	jmp    c001c9de <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001ca99:	31 ff                	xor    edi,edi
c001ca9b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001caa0:	74 1a                	je     c001cabc <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001caa2:	50                   	push   eax
c001caa3:	50                   	push   eax
c001caa4:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001caa9:	83 f8 02             	cmp    eax,0x2
c001caac:	0f 94 c0             	sete   al
c001caaf:	0f b6 c0             	movzx  eax,al
c001cab2:	50                   	push   eax
c001cab3:	53                   	push   ebx
c001cab4:	e8 dd fb ff ff       	call   c001c696 <ATA::flush(bool)>
c001cab9:	83 c4 10             	add    esp,0x10
c001cabc:	83 c4 2c             	add    esp,0x2c
c001cabf:	89 f8                	mov    eax,edi
c001cac1:	5b                   	pop    ebx
c001cac2:	5e                   	pop    esi
c001cac3:	5f                   	pop    edi
c001cac4:	5d                   	pop    ebp
c001cac5:	c3                   	ret    

c001cac6 <ATA::detectCHS()>:
c001cac6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001caca:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cad0:	c1 e0 06             	shl    eax,0x6
c001cad3:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cad9:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cae3:	c7 44 24 04 14 2c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022c14
c001caeb:	e9 61 47 ff ff       	jmp    c0011251 <KePanic(char const*)>

c001caf0 <ATA::open(int, int, void*)>:
c001caf0:	53                   	push   ebx
c001caf1:	83 ec 08             	sub    esp,0x8
c001caf4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001caf8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cafc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cb00:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cb06:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cb0c:	c1 e0 06             	shl    eax,0x6
c001cb0f:	01 d0                	add    eax,edx
c001cb11:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cb18:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cb1e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cb25:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cb2f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cb35:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cb3c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cb43:	75 0c                	jne    c001cb51 <ATA::open(int, int, void*)+0x61>
c001cb45:	83 ec 0c             	sub    esp,0xc
c001cb48:	53                   	push   ebx
c001cb49:	e8 78 ff ff ff       	call   c001cac6 <ATA::detectCHS()>
c001cb4e:	83 c4 10             	add    esp,0x10
c001cb51:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cb57:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cb5d:	c1 e0 06             	shl    eax,0x6
c001cb60:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cb67:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cb71:	d1 e8                	shr    eax,1
c001cb73:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cb79:	6a 04                	push   0x4
c001cb7b:	6a 0c                	push   0xc
c001cb7d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb84:	50                   	push   eax
c001cb85:	52                   	push   edx
c001cb86:	e8 51 ec ff ff       	call   c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb8b:	90                   	nop
c001cb8c:	90                   	nop
c001cb8d:	6a 00                	push   0x0
c001cb8f:	6a 0c                	push   0xc
c001cb91:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb98:	50                   	push   eax
c001cb99:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb9f:	e8 38 ec ff ff       	call   c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cba4:	83 c4 14             	add    esp,0x14
c001cba7:	53                   	push   ebx
c001cba8:	e8 a9 fe fe ff       	call   c000ca56 <PhysicalDisk::startCache()>
c001cbad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbb0:	e8 e5 10 ff ff       	call   c000dc9a <createPartitionsForDisk(PhysicalDisk*)>
c001cbb5:	31 c0                	xor    eax,eax
c001cbb7:	83 c4 18             	add    esp,0x18
c001cbba:	5b                   	pop    ebx
c001cbbb:	c3                   	ret    

c001cbbc <combineCharAndColour(char, unsigned char)>:
c001cbbc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cbc1:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001cbc7:	c1 e0 08             	shl    eax,0x8
c001cbca:	09 d0                	or     eax,edx
c001cbcc:	c3                   	ret    

c001cbcd <combineColours(unsigned char, unsigned char)>:
c001cbcd:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cbd2:	c1 e0 04             	shl    eax,0x4
c001cbd5:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001cbd9:	c3                   	ret    

c001cbda <ATA::read(unsigned long long, int, void*)>:
c001cbda:	55                   	push   ebp
c001cbdb:	57                   	push   edi
c001cbdc:	56                   	push   esi
c001cbdd:	be 04 00 00 00       	mov    esi,0x4
c001cbe2:	53                   	push   ebx
c001cbe3:	83 ec 0c             	sub    esp,0xc
c001cbe6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cbea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cbee:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cbf1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cbf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cbf9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cbff:	0f 87 a1 01 00 00    	ja     c001cda6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cc05:	be 06 00 00 00       	mov    esi,0x6
c001cc0a:	85 c9                	test   ecx,ecx
c001cc0c:	0f 84 94 01 00 00    	je     c001cda6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cc12:	55                   	push   ebp
c001cc13:	55                   	push   ebp
c001cc14:	6a 00                	push   0x0
c001cc16:	51                   	push   ecx
c001cc17:	53                   	push   ebx
c001cc18:	52                   	push   edx
c001cc19:	50                   	push   eax
c001cc1a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cc1e:	e8 0d fb ff ff       	call   c001c730 <ATA::access(unsigned long long, int, void*, bool)>
c001cc23:	83 c4 20             	add    esp,0x20
c001cc26:	89 c6                	mov    esi,eax
c001cc28:	85 c0                	test   eax,eax
c001cc2a:	0f 85 71 01 00 00    	jne    c001cda1 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001cc30:	03 1d b4 a0 02 c0    	add    ebx,DWORD PTR ds:0xc002a0b4
c001cc36:	89 da                	mov    edx,ebx
c001cc38:	50                   	push   eax
c001cc39:	bd 10 27 00 00       	mov    ebp,0x2710
c001cc3e:	50                   	push   eax
c001cc3f:	89 1d b4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0b4,ebx
c001cc45:	6a 0f                	push   0xf
c001cc47:	6a 00                	push   0x0
c001cc49:	e8 7f ff ff ff       	call   c001cbcd <combineColours(unsigned char, unsigned char)>
c001cc4e:	59                   	pop    ecx
c001cc4f:	b9 0a 00 00 00       	mov    ecx,0xa
c001cc54:	5b                   	pop    ebx
c001cc55:	0f b6 d8             	movzx  ebx,al
c001cc58:	89 d0                	mov    eax,edx
c001cc5a:	53                   	push   ebx
c001cc5b:	99                   	cdq    
c001cc5c:	f7 fd                	idiv   ebp
c001cc5e:	99                   	cdq    
c001cc5f:	f7 f9                	idiv   ecx
c001cc61:	83 c2 30             	add    edx,0x30
c001cc64:	0f b6 d2             	movzx  edx,dl
c001cc67:	52                   	push   edx
c001cc68:	e8 4f ff ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001cc6d:	5f                   	pop    edi
c001cc6e:	bf e8 03 00 00       	mov    edi,0x3e8
c001cc73:	5a                   	pop    edx
c001cc74:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cc7a:	53                   	push   ebx
c001cc7b:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cc80:	99                   	cdq    
c001cc81:	f7 ff                	idiv   edi
c001cc83:	99                   	cdq    
c001cc84:	f7 f9                	idiv   ecx
c001cc86:	8d 42 30             	lea    eax,[edx+0x30]
c001cc89:	0f b6 c0             	movzx  eax,al
c001cc8c:	50                   	push   eax
c001cc8d:	e8 2a ff ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001cc92:	5f                   	pop    edi
c001cc93:	bf 64 00 00 00       	mov    edi,0x64
c001cc98:	5a                   	pop    edx
c001cc99:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cc9f:	53                   	push   ebx
c001cca0:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cca5:	99                   	cdq    
c001cca6:	f7 ff                	idiv   edi
c001cca8:	99                   	cdq    
c001cca9:	f7 f9                	idiv   ecx
c001ccab:	8d 42 30             	lea    eax,[edx+0x30]
c001ccae:	0f b6 c0             	movzx  eax,al
c001ccb1:	50                   	push   eax
c001ccb2:	e8 05 ff ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001ccb7:	5a                   	pop    edx
c001ccb8:	5a                   	pop    edx
c001ccb9:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ccbf:	53                   	push   ebx
c001ccc0:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ccc5:	99                   	cdq    
c001ccc6:	f7 f9                	idiv   ecx
c001ccc8:	99                   	cdq    
c001ccc9:	f7 f9                	idiv   ecx
c001cccb:	8d 42 30             	lea    eax,[edx+0x30]
c001ccce:	0f b6 c0             	movzx  eax,al
c001ccd1:	50                   	push   eax
c001ccd2:	e8 e5 fe ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001ccd7:	5a                   	pop    edx
c001ccd8:	5a                   	pop    edx
c001ccd9:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ccdf:	53                   	push   ebx
c001cce0:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cce5:	99                   	cdq    
c001cce6:	f7 f9                	idiv   ecx
c001cce8:	83 c2 30             	add    edx,0x30
c001cceb:	0f b6 d2             	movzx  edx,dl
c001ccee:	52                   	push   edx
c001ccef:	e8 c8 fe ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001ccf4:	5a                   	pop    edx
c001ccf5:	5a                   	pop    edx
c001ccf6:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ccfc:	53                   	push   ebx
c001ccfd:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cd02:	99                   	cdq    
c001cd03:	f7 fd                	idiv   ebp
c001cd05:	99                   	cdq    
c001cd06:	f7 f9                	idiv   ecx
c001cd08:	8d 42 30             	lea    eax,[edx+0x30]
c001cd0b:	0f b6 c0             	movzx  eax,al
c001cd0e:	50                   	push   eax
c001cd0f:	e8 a8 fe ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001cd14:	5d                   	pop    ebp
c001cd15:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cd1a:	5a                   	pop    edx
c001cd1b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cd21:	53                   	push   ebx
c001cd22:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cd27:	99                   	cdq    
c001cd28:	f7 fd                	idiv   ebp
c001cd2a:	99                   	cdq    
c001cd2b:	f7 f9                	idiv   ecx
c001cd2d:	8d 42 30             	lea    eax,[edx+0x30]
c001cd30:	0f b6 c0             	movzx  eax,al
c001cd33:	50                   	push   eax
c001cd34:	e8 83 fe ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001cd39:	5d                   	pop    ebp
c001cd3a:	5a                   	pop    edx
c001cd3b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cd41:	53                   	push   ebx
c001cd42:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cd47:	99                   	cdq    
c001cd48:	f7 ff                	idiv   edi
c001cd4a:	99                   	cdq    
c001cd4b:	f7 f9                	idiv   ecx
c001cd4d:	8d 42 30             	lea    eax,[edx+0x30]
c001cd50:	0f b6 c0             	movzx  eax,al
c001cd53:	50                   	push   eax
c001cd54:	e8 63 fe ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001cd59:	5f                   	pop    edi
c001cd5a:	5d                   	pop    ebp
c001cd5b:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cd61:	53                   	push   ebx
c001cd62:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cd67:	99                   	cdq    
c001cd68:	f7 f9                	idiv   ecx
c001cd6a:	99                   	cdq    
c001cd6b:	f7 f9                	idiv   ecx
c001cd6d:	8d 42 30             	lea    eax,[edx+0x30]
c001cd70:	0f b6 c0             	movzx  eax,al
c001cd73:	50                   	push   eax
c001cd74:	e8 43 fe ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001cd79:	5a                   	pop    edx
c001cd7a:	5f                   	pop    edi
c001cd7b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cd81:	53                   	push   ebx
c001cd82:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cd87:	99                   	cdq    
c001cd88:	f7 f9                	idiv   ecx
c001cd8a:	83 c2 30             	add    edx,0x30
c001cd8d:	0f b6 d2             	movzx  edx,dl
c001cd90:	52                   	push   edx
c001cd91:	e8 26 fe ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001cd96:	83 c4 10             	add    esp,0x10
c001cd99:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cd9f:	eb 05                	jmp    c001cda6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cda1:	be 01 00 00 00       	mov    esi,0x1
c001cda6:	83 c4 0c             	add    esp,0xc
c001cda9:	89 f0                	mov    eax,esi
c001cdab:	5b                   	pop    ebx
c001cdac:	5e                   	pop    esi
c001cdad:	5f                   	pop    edi
c001cdae:	5d                   	pop    ebp
c001cdaf:	c3                   	ret    

c001cdb0 <ATA::write(unsigned long long, int, void*)>:
c001cdb0:	55                   	push   ebp
c001cdb1:	57                   	push   edi
c001cdb2:	56                   	push   esi
c001cdb3:	be 04 00 00 00       	mov    esi,0x4
c001cdb8:	53                   	push   ebx
c001cdb9:	83 ec 0c             	sub    esp,0xc
c001cdbc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cdc0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cdc4:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cdc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cdcb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cdcf:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cdd5:	0f 87 9c 01 00 00    	ja     c001cf77 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cddb:	be 06 00 00 00       	mov    esi,0x6
c001cde0:	85 c9                	test   ecx,ecx
c001cde2:	0f 84 8f 01 00 00    	je     c001cf77 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cde8:	55                   	push   ebp
c001cde9:	55                   	push   ebp
c001cdea:	6a 01                	push   0x1
c001cdec:	51                   	push   ecx
c001cded:	53                   	push   ebx
c001cdee:	52                   	push   edx
c001cdef:	50                   	push   eax
c001cdf0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cdf4:	e8 37 f9 ff ff       	call   c001c730 <ATA::access(unsigned long long, int, void*, bool)>
c001cdf9:	83 c4 20             	add    esp,0x20
c001cdfc:	89 c6                	mov    esi,eax
c001cdfe:	85 c0                	test   eax,eax
c001ce00:	0f 85 6c 01 00 00    	jne    c001cf72 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001ce06:	01 1d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebx
c001ce0c:	bd 10 27 00 00       	mov    ebp,0x2710
c001ce11:	50                   	push   eax
c001ce12:	50                   	push   eax
c001ce13:	6a 0f                	push   0xf
c001ce15:	6a 00                	push   0x0
c001ce17:	e8 b1 fd ff ff       	call   c001cbcd <combineColours(unsigned char, unsigned char)>
c001ce1c:	5a                   	pop    edx
c001ce1d:	0f b6 d8             	movzx  ebx,al
c001ce20:	59                   	pop    ecx
c001ce21:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce26:	53                   	push   ebx
c001ce27:	b9 0a 00 00 00       	mov    ecx,0xa
c001ce2c:	99                   	cdq    
c001ce2d:	f7 fd                	idiv   ebp
c001ce2f:	99                   	cdq    
c001ce30:	f7 f9                	idiv   ecx
c001ce32:	8d 42 30             	lea    eax,[edx+0x30]
c001ce35:	0f b6 c0             	movzx  eax,al
c001ce38:	50                   	push   eax
c001ce39:	e8 7e fd ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001ce3e:	5f                   	pop    edi
c001ce3f:	bf e8 03 00 00       	mov    edi,0x3e8
c001ce44:	5a                   	pop    edx
c001ce45:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001ce4b:	53                   	push   ebx
c001ce4c:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce51:	99                   	cdq    
c001ce52:	f7 ff                	idiv   edi
c001ce54:	99                   	cdq    
c001ce55:	f7 f9                	idiv   ecx
c001ce57:	8d 42 30             	lea    eax,[edx+0x30]
c001ce5a:	0f b6 c0             	movzx  eax,al
c001ce5d:	50                   	push   eax
c001ce5e:	e8 59 fd ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001ce63:	5f                   	pop    edi
c001ce64:	bf 64 00 00 00       	mov    edi,0x64
c001ce69:	5a                   	pop    edx
c001ce6a:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ce70:	53                   	push   ebx
c001ce71:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce76:	99                   	cdq    
c001ce77:	f7 ff                	idiv   edi
c001ce79:	99                   	cdq    
c001ce7a:	f7 f9                	idiv   ecx
c001ce7c:	8d 42 30             	lea    eax,[edx+0x30]
c001ce7f:	0f b6 c0             	movzx  eax,al
c001ce82:	50                   	push   eax
c001ce83:	e8 34 fd ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001ce88:	5a                   	pop    edx
c001ce89:	5a                   	pop    edx
c001ce8a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ce90:	53                   	push   ebx
c001ce91:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce96:	99                   	cdq    
c001ce97:	f7 f9                	idiv   ecx
c001ce99:	99                   	cdq    
c001ce9a:	f7 f9                	idiv   ecx
c001ce9c:	8d 42 30             	lea    eax,[edx+0x30]
c001ce9f:	0f b6 c0             	movzx  eax,al
c001cea2:	50                   	push   eax
c001cea3:	e8 14 fd ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001cea8:	5a                   	pop    edx
c001cea9:	5a                   	pop    edx
c001ceaa:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ceb0:	53                   	push   ebx
c001ceb1:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ceb6:	99                   	cdq    
c001ceb7:	f7 f9                	idiv   ecx
c001ceb9:	8d 42 30             	lea    eax,[edx+0x30]
c001cebc:	0f b6 c0             	movzx  eax,al
c001cebf:	50                   	push   eax
c001cec0:	e8 f7 fc ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001cec5:	5a                   	pop    edx
c001cec6:	5a                   	pop    edx
c001cec7:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cecd:	53                   	push   ebx
c001cece:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ced3:	99                   	cdq    
c001ced4:	f7 fd                	idiv   ebp
c001ced6:	99                   	cdq    
c001ced7:	f7 f9                	idiv   ecx
c001ced9:	8d 42 30             	lea    eax,[edx+0x30]
c001cedc:	0f b6 c0             	movzx  eax,al
c001cedf:	50                   	push   eax
c001cee0:	e8 d7 fc ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001cee5:	5d                   	pop    ebp
c001cee6:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ceeb:	5a                   	pop    edx
c001ceec:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cef2:	53                   	push   ebx
c001cef3:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cef8:	99                   	cdq    
c001cef9:	f7 fd                	idiv   ebp
c001cefb:	99                   	cdq    
c001cefc:	f7 f9                	idiv   ecx
c001cefe:	8d 42 30             	lea    eax,[edx+0x30]
c001cf01:	0f b6 c0             	movzx  eax,al
c001cf04:	50                   	push   eax
c001cf05:	e8 b2 fc ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001cf0a:	5d                   	pop    ebp
c001cf0b:	5a                   	pop    edx
c001cf0c:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cf12:	53                   	push   ebx
c001cf13:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf18:	99                   	cdq    
c001cf19:	f7 ff                	idiv   edi
c001cf1b:	99                   	cdq    
c001cf1c:	f7 f9                	idiv   ecx
c001cf1e:	8d 42 30             	lea    eax,[edx+0x30]
c001cf21:	0f b6 c0             	movzx  eax,al
c001cf24:	50                   	push   eax
c001cf25:	e8 92 fc ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001cf2a:	5f                   	pop    edi
c001cf2b:	5d                   	pop    ebp
c001cf2c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cf32:	53                   	push   ebx
c001cf33:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf38:	99                   	cdq    
c001cf39:	f7 f9                	idiv   ecx
c001cf3b:	99                   	cdq    
c001cf3c:	f7 f9                	idiv   ecx
c001cf3e:	8d 42 30             	lea    eax,[edx+0x30]
c001cf41:	0f b6 c0             	movzx  eax,al
c001cf44:	50                   	push   eax
c001cf45:	e8 72 fc ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001cf4a:	5a                   	pop    edx
c001cf4b:	5f                   	pop    edi
c001cf4c:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cf52:	53                   	push   ebx
c001cf53:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf58:	99                   	cdq    
c001cf59:	f7 f9                	idiv   ecx
c001cf5b:	83 c2 30             	add    edx,0x30
c001cf5e:	0f b6 d2             	movzx  edx,dl
c001cf61:	52                   	push   edx
c001cf62:	e8 55 fc ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001cf67:	83 c4 10             	add    esp,0x10
c001cf6a:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cf70:	eb 05                	jmp    c001cf77 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cf72:	be 01 00 00 00       	mov    esi,0x1
c001cf77:	83 c4 0c             	add    esp,0xc
c001cf7a:	89 f0                	mov    eax,esi
c001cf7c:	5b                   	pop    ebx
c001cf7d:	5e                   	pop    esi
c001cf7e:	5f                   	pop    edi
c001cf7f:	5d                   	pop    ebp
c001cf80:	c3                   	ret    
c001cf81:	90                   	nop

c001cf82 <ATAPI::write(unsigned long long, int, void*)>:
c001cf82:	b8 03 00 00 00       	mov    eax,0x3
c001cf87:	c3                   	ret    

c001cf88 <ATAPI::close(int, int, void*)>:
c001cf88:	83 ec 0c             	sub    esp,0xc
c001cf8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf8f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cf95:	85 c0                	test   eax,eax
c001cf97:	74 0c                	je     c001cfa5 <ATAPI::close(int, int, void*)+0x1d>
c001cf99:	83 ec 0c             	sub    esp,0xc
c001cf9c:	8b 10                	mov    edx,DWORD PTR [eax]
c001cf9e:	50                   	push   eax
c001cf9f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cfa2:	83 c4 10             	add    esp,0x10
c001cfa5:	31 c0                	xor    eax,eax
c001cfa7:	83 c4 0c             	add    esp,0xc
c001cfaa:	c3                   	ret    
c001cfab:	90                   	nop

c001cfac <ATAPI::ATAPI()>:
c001cfac:	83 ec 0c             	sub    esp,0xc
c001cfaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfb3:	83 ec 04             	sub    esp,0x4
c001cfb6:	68 00 08 00 00       	push   0x800
c001cfbb:	68 5d 2d 02 c0       	push   0xc0022d5d
c001cfc0:	50                   	push   eax
c001cfc1:	e8 28 fa fe ff       	call   c000c9ee <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cfc6:	83 c4 10             	add    esp,0x10
c001cfc9:	ba 78 2c 02 c0       	mov    edx,0xc0022c78
c001cfce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfd2:	89 10                	mov    DWORD PTR [eax],edx
c001cfd4:	90                   	nop
c001cfd5:	83 c4 0c             	add    esp,0xc
c001cfd8:	c3                   	ret    
c001cfd9:	90                   	nop

c001cfda <ATAPI::readyForCommand()>:
c001cfda:	56                   	push   esi
c001cfdb:	53                   	push   ebx
c001cfdc:	53                   	push   ebx
c001cfdd:	31 db                	xor    ebx,ebx
c001cfdf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cfe3:	51                   	push   ecx
c001cfe4:	6a 0c                	push   0xc
c001cfe6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cfed:	50                   	push   eax
c001cfee:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cff4:	e8 a3 e8 ff ff       	call   c001b89c <IDE::read(unsigned char, unsigned char)>
c001cff9:	83 c4 10             	add    esp,0x10
c001cffc:	a8 88                	test   al,0x88
c001cffe:	74 25                	je     c001d025 <ATAPI::readyForCommand()+0x4b>
c001d000:	43                   	inc    ebx
c001d001:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d007:	7e da                	jle    c001cfe3 <ATAPI::readyForCommand()+0x9>
c001d009:	83 ec 0c             	sub    esp,0xc
c001d00c:	68 5e 01 00 00       	push   0x15e
c001d011:	e8 2a 8e ff ff       	call   c0015e40 <milliTenthSleep(unsigned int)>
c001d016:	83 c4 10             	add    esp,0x10
c001d019:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d01f:	75 c2                	jne    c001cfe3 <ATAPI::readyForCommand()+0x9>
c001d021:	31 c0                	xor    eax,eax
c001d023:	eb 02                	jmp    c001d027 <ATAPI::readyForCommand()+0x4d>
c001d025:	b0 01                	mov    al,0x1
c001d027:	5a                   	pop    edx
c001d028:	5b                   	pop    ebx
c001d029:	5e                   	pop    esi
c001d02a:	c3                   	ret    
c001d02b:	90                   	nop

c001d02c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d02c:	55                   	push   ebp
c001d02d:	57                   	push   edi
c001d02e:	56                   	push   esi
c001d02f:	53                   	push   ebx
c001d030:	83 ec 20             	sub    esp,0x20
c001d033:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d037:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d03b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d03f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d043:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d047:	6a 01                	push   0x1
c001d049:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d050:	50                   	push   eax
c001d051:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d057:	e8 88 e9 ff ff       	call   c001b9e4 <IDE::enableIRQs(unsigned char, bool)>
c001d05c:	5e                   	pop    esi
c001d05d:	58                   	pop    eax
c001d05e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d065:	50                   	push   eax
c001d066:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d06c:	e8 45 e7 ff ff       	call   c001b7b6 <IDE::prepareInterrupt(unsigned char)>
c001d071:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d074:	e8 61 ff ff ff       	call   c001cfda <ATAPI::readyForCommand()>
c001d079:	83 c4 10             	add    esp,0x10
c001d07c:	84 c0                	test   al,al
c001d07e:	75 0a                	jne    c001d08a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d080:	bb 01 00 00 00       	mov    ebx,0x1
c001d085:	e9 60 02 00 00       	jmp    c001d2ea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d08a:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d090:	c1 e0 04             	shl    eax,0x4
c001d093:	0f b6 c0             	movzx  eax,al
c001d096:	50                   	push   eax
c001d097:	6a 06                	push   0x6
c001d099:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0a0:	50                   	push   eax
c001d0a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0a7:	e8 30 e7 ff ff       	call   c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0ac:	6a 00                	push   0x0
c001d0ae:	6a 01                	push   0x1
c001d0b0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0b7:	50                   	push   eax
c001d0b8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0be:	e8 19 e7 ff ff       	call   c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0c3:	83 c4 20             	add    esp,0x20
c001d0c6:	0f b6 c3             	movzx  eax,bl
c001d0c9:	0f b6 df             	movzx  ebx,bh
c001d0cc:	50                   	push   eax
c001d0cd:	6a 04                	push   0x4
c001d0cf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0d6:	50                   	push   eax
c001d0d7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0dd:	e8 fa e6 ff ff       	call   c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0e2:	53                   	push   ebx
c001d0e3:	6a 05                	push   0x5
c001d0e5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0ec:	50                   	push   eax
c001d0ed:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0f3:	e8 e4 e6 ff ff       	call   c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0f8:	83 c4 20             	add    esp,0x20
c001d0fb:	68 a0 00 00 00       	push   0xa0
c001d100:	6a 07                	push   0x7
c001d102:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d109:	50                   	push   eax
c001d10a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d110:	e8 c7 e6 ff ff       	call   c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d115:	83 c4 0c             	add    esp,0xc
c001d118:	6a 01                	push   0x1
c001d11a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d121:	50                   	push   eax
c001d122:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d128:	e8 97 f1 ff ff       	call   c001c2c4 <IDE::polling(unsigned char, unsigned int)>
c001d12d:	83 c4 10             	add    esp,0x10
c001d130:	0f b6 d8             	movzx  ebx,al
c001d133:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d139:	85 db                	test   ebx,ebx
c001d13b:	74 20                	je     c001d15d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d13d:	53                   	push   ebx
c001d13e:	0f b6 c0             	movzx  eax,al
c001d141:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d148:	52                   	push   edx
c001d149:	50                   	push   eax
c001d14a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d150:	e8 b5 f0 ff ff       	call   c001c20a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d155:	83 c4 10             	add    esp,0x10
c001d158:	e9 8d 01 00 00       	jmp    c001d2ea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d15d:	0f b6 c0             	movzx  eax,al
c001d160:	53                   	push   ebx
c001d161:	53                   	push   ebx
c001d162:	50                   	push   eax
c001d163:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d169:	e8 5c e6 ff ff       	call   c001b7ca <IDE::getBase(unsigned char)>
c001d16e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d172:	b9 06 00 00 00       	mov    ecx,0x6
c001d177:	89 c2                	mov    edx,eax
c001d179:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d17c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d180:	83 c4 10             	add    esp,0x10
c001d183:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d188:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d18c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d192:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d199:	85 db                	test   ebx,ebx
c001d19b:	0f 84 ec 00 00 00    	je     c001d28d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d1a1:	51                   	push   ecx
c001d1a2:	51                   	push   ecx
c001d1a3:	52                   	push   edx
c001d1a4:	50                   	push   eax
c001d1a5:	e8 a0 e7 ff ff       	call   c001b94a <IDE::waitInterrupt(unsigned char)>
c001d1aa:	83 c4 10             	add    esp,0x10
c001d1ad:	84 c0                	test   al,al
c001d1af:	0f 84 cb fe ff ff    	je     c001d080 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d1b5:	56                   	push   esi
c001d1b6:	56                   	push   esi
c001d1b7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1be:	50                   	push   eax
c001d1bf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1c5:	e8 ec e5 ff ff       	call   c001b7b6 <IDE::prepareInterrupt(unsigned char)>
c001d1ca:	83 c4 0c             	add    esp,0xc
c001d1cd:	6a 04                	push   0x4
c001d1cf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1d6:	50                   	push   eax
c001d1d7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1dd:	e8 ba e6 ff ff       	call   c001b89c <IDE::read(unsigned char, unsigned char)>
c001d1e2:	83 c4 0c             	add    esp,0xc
c001d1e5:	89 c6                	mov    esi,eax
c001d1e7:	6a 05                	push   0x5
c001d1e9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1f0:	50                   	push   eax
c001d1f1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1f7:	e8 a0 e6 ff ff       	call   c001b89c <IDE::read(unsigned char, unsigned char)>
c001d1fc:	89 f1                	mov    ecx,esi
c001d1fe:	0f b6 c0             	movzx  eax,al
c001d201:	0f b6 f1             	movzx  esi,cl
c001d204:	c1 e0 08             	shl    eax,0x8
c001d207:	09 c6                	or     esi,eax
c001d209:	d1 fe                	sar    esi,1
c001d20b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d20f:	83 c4 10             	add    esp,0x10
c001d212:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d217:	74 41                	je     c001d25a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d219:	31 c9                	xor    ecx,ecx
c001d21b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d221:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d228:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d22c:	75 0a                	jne    c001d238 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d22e:	01 c9                	add    ecx,ecx
c001d230:	01 cd                	add    ebp,ecx
c001d232:	4b                   	dec    ebx
c001d233:	e9 54 ff ff ff       	jmp    c001d18c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d238:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d23d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d241:	51                   	push   ecx
c001d242:	51                   	push   ecx
c001d243:	52                   	push   edx
c001d244:	50                   	push   eax
c001d245:	e8 80 e5 ff ff       	call   c001b7ca <IDE::getBase(unsigned char)>
c001d24a:	89 c2                	mov    edx,eax
c001d24c:	89 f0                	mov    eax,esi
c001d24e:	66 ef                	out    dx,ax
c001d250:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d254:	83 c4 10             	add    esp,0x10
c001d257:	41                   	inc    ecx
c001d258:	eb c1                	jmp    c001d21b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d25a:	31 f6                	xor    esi,esi
c001d25c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d262:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d269:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d26d:	75 06                	jne    c001d275 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d26f:	01 f6                	add    esi,esi
c001d271:	01 f5                	add    ebp,esi
c001d273:	eb bd                	jmp    c001d232 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d275:	51                   	push   ecx
c001d276:	51                   	push   ecx
c001d277:	52                   	push   edx
c001d278:	50                   	push   eax
c001d279:	e8 4c e5 ff ff       	call   c001b7ca <IDE::getBase(unsigned char)>
c001d27e:	89 c2                	mov    edx,eax
c001d280:	66 ed                	in     ax,dx
c001d282:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d287:	83 c4 10             	add    esp,0x10
c001d28a:	46                   	inc    esi
c001d28b:	eb cf                	jmp    c001d25c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d28d:	51                   	push   ecx
c001d28e:	51                   	push   ecx
c001d28f:	52                   	push   edx
c001d290:	50                   	push   eax
c001d291:	e8 b4 e6 ff ff       	call   c001b94a <IDE::waitInterrupt(unsigned char)>
c001d296:	83 c4 10             	add    esp,0x10
c001d299:	84 c0                	test   al,al
c001d29b:	0f 84 df fd ff ff    	je     c001d080 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d2a1:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d2a6:	52                   	push   edx
c001d2a7:	52                   	push   edx
c001d2a8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2af:	50                   	push   eax
c001d2b0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2b6:	e8 fb e4 ff ff       	call   c001b7b6 <IDE::prepareInterrupt(unsigned char)>
c001d2bb:	83 c4 10             	add    esp,0x10
c001d2be:	50                   	push   eax
c001d2bf:	50                   	push   eax
c001d2c0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2c7:	50                   	push   eax
c001d2c8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2ce:	e8 f7 e4 ff ff       	call   c001b7ca <IDE::getBase(unsigned char)>
c001d2d3:	8d 50 07             	lea    edx,[eax+0x7]
c001d2d6:	ec                   	in     al,dx
c001d2d7:	83 c4 10             	add    esp,0x10
c001d2da:	a8 88                	test   al,0x88
c001d2dc:	74 0a                	je     c001d2e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d2de:	4b                   	dec    ebx
c001d2df:	75 dd                	jne    c001d2be <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d2e1:	bb 02 00 00 00       	mov    ebx,0x2
c001d2e6:	eb 02                	jmp    c001d2ea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d2e8:	31 db                	xor    ebx,ebx
c001d2ea:	83 c4 1c             	add    esp,0x1c
c001d2ed:	89 d8                	mov    eax,ebx
c001d2ef:	5b                   	pop    ebx
c001d2f0:	5e                   	pop    esi
c001d2f1:	5f                   	pop    edi
c001d2f2:	5d                   	pop    ebp
c001d2f3:	c3                   	ret    

c001d2f4 <ATAPI::diskRemoved()>:
c001d2f4:	53                   	push   ebx
c001d2f5:	83 ec 14             	sub    esp,0x14
c001d2f8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d2fc:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d303:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d309:	e8 7c 06 ff ff       	call   c000d98a <LogicalDisk::unmount()>
c001d30e:	58                   	pop    eax
c001d30f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d315:	e8 52 10 ff ff       	call   c000e36c <VCache::writeWriteBuffer()>
c001d31a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d320:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d324:	83 c4 18             	add    esp,0x18
c001d327:	5b                   	pop    ebx
c001d328:	e9 2f 10 ff ff       	jmp    c000e35c <VCache::invalidateReadBuffer()>
c001d32d:	90                   	nop

c001d32e <ATAPI::eject()>:
c001d32e:	57                   	push   edi
c001d32f:	b9 03 00 00 00       	mov    ecx,0x3
c001d334:	53                   	push   ebx
c001d335:	83 ec 14             	sub    esp,0x14
c001d338:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d33c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d340:	fc                   	cld    
c001d341:	31 c0                	xor    eax,eax
c001d343:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d345:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d34a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d34f:	50                   	push   eax
c001d350:	50                   	push   eax
c001d351:	6a 00                	push   0x0
c001d353:	6a 00                	push   0x0
c001d355:	6a 00                	push   0x0
c001d357:	6a 02                	push   0x2
c001d359:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d35d:	50                   	push   eax
c001d35e:	53                   	push   ebx
c001d35f:	e8 c8 fc ff ff       	call   c001d02c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d364:	83 c4 14             	add    esp,0x14
c001d367:	53                   	push   ebx
c001d368:	e8 87 ff ff ff       	call   c001d2f4 <ATAPI::diskRemoved()>
c001d36d:	83 c4 24             	add    esp,0x24
c001d370:	31 c0                	xor    eax,eax
c001d372:	5b                   	pop    ebx
c001d373:	5f                   	pop    edi
c001d374:	c3                   	ret    
c001d375:	90                   	nop

c001d376 <ATAPI::diskInserted()>:
c001d376:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d37a:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d381:	c3                   	ret    

c001d382 <ATAPI::detectMedia()>:
c001d382:	56                   	push   esi
c001d383:	53                   	push   ebx
c001d384:	83 ec 28             	sub    esp,0x28
c001d387:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d38b:	6a 0c                	push   0xc
c001d38d:	6a 00                	push   0x0
c001d38f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d393:	56                   	push   esi
c001d394:	e8 57 31 fe ff       	call   c00004f0 <memset>
c001d399:	58                   	pop    eax
c001d39a:	5a                   	pop    edx
c001d39b:	6a 00                	push   0x0
c001d39d:	6a 00                	push   0x0
c001d39f:	6a 00                	push   0x0
c001d3a1:	6a 00                	push   0x0
c001d3a3:	56                   	push   esi
c001d3a4:	53                   	push   ebx
c001d3a5:	e8 82 fc ff ff       	call   c001d02c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d3aa:	83 c4 1c             	add    esp,0x1c
c001d3ad:	6a 0c                	push   0xc
c001d3af:	6a 00                	push   0x0
c001d3b1:	56                   	push   esi
c001d3b2:	e8 39 31 fe ff       	call   c00004f0 <memset>
c001d3b7:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d3bc:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d3c1:	59                   	pop    ecx
c001d3c2:	58                   	pop    eax
c001d3c3:	6a 01                	push   0x1
c001d3c5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d3c9:	50                   	push   eax
c001d3ca:	6a 00                	push   0x0
c001d3cc:	6a 12                	push   0x12
c001d3ce:	56                   	push   esi
c001d3cf:	53                   	push   ebx
c001d3d0:	e8 57 fc ff ff       	call   c001d02c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d3d5:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d3d9:	83 c4 20             	add    esp,0x20
c001d3dc:	83 e0 7f             	and    eax,0x7f
c001d3df:	83 f8 70             	cmp    eax,0x70
c001d3e2:	74 15                	je     c001d3f9 <ATAPI::detectMedia()+0x77>
c001d3e4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d3eb:	75 0c                	jne    c001d3f9 <ATAPI::detectMedia()+0x77>
c001d3ed:	83 ec 0c             	sub    esp,0xc
c001d3f0:	53                   	push   ebx
c001d3f1:	e8 80 ff ff ff       	call   c001d376 <ATAPI::diskInserted()>
c001d3f6:	83 c4 10             	add    esp,0x10
c001d3f9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d3fd:	83 e0 0f             	and    eax,0xf
c001d400:	83 f8 02             	cmp    eax,0x2
c001d403:	75 1b                	jne    c001d420 <ATAPI::detectMedia()+0x9e>
c001d405:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d40a:	75 2d                	jne    c001d439 <ATAPI::detectMedia()+0xb7>
c001d40c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d413:	74 24                	je     c001d439 <ATAPI::detectMedia()+0xb7>
c001d415:	83 ec 0c             	sub    esp,0xc
c001d418:	53                   	push   ebx
c001d419:	e8 d6 fe ff ff       	call   c001d2f4 <ATAPI::diskRemoved()>
c001d41e:	eb 16                	jmp    c001d436 <ATAPI::detectMedia()+0xb4>
c001d420:	85 c0                	test   eax,eax
c001d422:	75 15                	jne    c001d439 <ATAPI::detectMedia()+0xb7>
c001d424:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d42b:	75 0c                	jne    c001d439 <ATAPI::detectMedia()+0xb7>
c001d42d:	83 ec 0c             	sub    esp,0xc
c001d430:	53                   	push   ebx
c001d431:	e8 40 ff ff ff       	call   c001d376 <ATAPI::diskInserted()>
c001d436:	83 c4 10             	add    esp,0x10
c001d439:	83 c4 24             	add    esp,0x24
c001d43c:	5b                   	pop    ebx
c001d43d:	5e                   	pop    esi
c001d43e:	c3                   	ret    
c001d43f:	90                   	nop

c001d440 <ATAPI::open(int, int, void*)>:
c001d440:	56                   	push   esi
c001d441:	53                   	push   ebx
c001d442:	50                   	push   eax
c001d443:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d447:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d44b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d44f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d455:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d45b:	c1 e0 06             	shl    eax,0x6
c001d45e:	01 d0                	add    eax,edx
c001d460:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d467:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d46d:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d474:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d47e:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d484:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d48b:	6a 04                	push   0x4
c001d48d:	6a 0c                	push   0xc
c001d48f:	51                   	push   ecx
c001d490:	52                   	push   edx
c001d491:	e8 46 e3 ff ff       	call   c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d496:	90                   	nop
c001d497:	90                   	nop
c001d498:	6a 00                	push   0x0
c001d49a:	6a 0c                	push   0xc
c001d49c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d4a3:	50                   	push   eax
c001d4a4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d4aa:	e8 2d e3 ff ff       	call   c001b7dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4af:	83 c4 14             	add    esp,0x14
c001d4b2:	68 78 01 00 00       	push   0x178
c001d4b7:	e8 fa a5 fe ff       	call   c0007ab6 <malloc>
c001d4bc:	83 c4 0c             	add    esp,0xc
c001d4bf:	89 c6                	mov    esi,eax
c001d4c1:	6a 00                	push   0x0
c001d4c3:	68 ff ff ff 7f       	push   0x7fffffff
c001d4c8:	6a 00                	push   0x0
c001d4ca:	6a 00                	push   0x0
c001d4cc:	53                   	push   ebx
c001d4cd:	68 0f 2e 02 c0       	push   0xc0022e0f
c001d4d2:	50                   	push   eax
c001d4d3:	e8 f0 02 ff ff       	call   c000d7c8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d4d8:	83 c4 14             	add    esp,0x14
c001d4db:	56                   	push   esi
c001d4dc:	e8 a7 03 ff ff       	call   c000d888 <LogicalDisk::assignDriveLetter()>
c001d4e1:	5a                   	pop    edx
c001d4e2:	0f be c0             	movsx  eax,al
c001d4e5:	59                   	pop    ecx
c001d4e6:	50                   	push   eax
c001d4e7:	68 60 2c 02 c0       	push   0xc0022c60
c001d4ec:	e8 54 d4 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001d4f1:	58                   	pop    eax
c001d4f2:	5a                   	pop    edx
c001d4f3:	56                   	push   esi
c001d4f4:	53                   	push   ebx
c001d4f5:	e8 28 f1 fe ff       	call   c000c622 <Device::addChild(Device*)>
c001d4fa:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001d500:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d503:	e8 4e f5 fe ff       	call   c000ca56 <PhysicalDisk::startCache()>
c001d508:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d50f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d512:	e8 6b fe ff ff       	call   c001d382 <ATAPI::detectMedia()>
c001d517:	83 c4 14             	add    esp,0x14
c001d51a:	31 c0                	xor    eax,eax
c001d51c:	5b                   	pop    ebx
c001d51d:	5e                   	pop    esi
c001d51e:	c3                   	ret    
c001d51f:	90                   	nop

c001d520 <ATAPI::read(unsigned long long, int, void*)>:
c001d520:	55                   	push   ebp
c001d521:	57                   	push   edi
c001d522:	56                   	push   esi
c001d523:	53                   	push   ebx
c001d524:	83 ec 1c             	sub    esp,0x1c
c001d527:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d52b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d52f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d533:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d53a:	74 3c                	je     c001d578 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d53c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d540:	b9 03 00 00 00       	mov    ecx,0x3
c001d545:	fc                   	cld    
c001d546:	31 c0                	xor    eax,eax
c001d548:	0f ce                	bswap  esi
c001d54a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d54c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d551:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d555:	89 e8                	mov    eax,ebp
c001d557:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d55b:	50                   	push   eax
c001d55c:	50                   	push   eax
c001d55d:	55                   	push   ebp
c001d55e:	c1 e5 0b             	shl    ebp,0xb
c001d561:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d565:	6a 00                	push   0x0
c001d567:	55                   	push   ebp
c001d568:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d56c:	50                   	push   eax
c001d56d:	53                   	push   ebx
c001d56e:	e8 b9 fa ff ff       	call   c001d02c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d573:	83 c4 20             	add    esp,0x20
c001d576:	eb 1a                	jmp    c001d592 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d578:	83 ec 0c             	sub    esp,0xc
c001d57b:	53                   	push   ebx
c001d57c:	e8 01 fe ff ff       	call   c001d382 <ATAPI::detectMedia()>
c001d581:	83 c4 10             	add    esp,0x10
c001d584:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d58b:	75 af                	jne    c001d53c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d58d:	b8 02 00 00 00       	mov    eax,0x2
c001d592:	83 c4 1c             	add    esp,0x1c
c001d595:	5b                   	pop    ebx
c001d596:	5e                   	pop    esi
c001d597:	5f                   	pop    edi
c001d598:	5d                   	pop    ebp
c001d599:	c3                   	ret    

c001d59a <SATA::close(int, int, void*)>:
c001d59a:	83 ec 0c             	sub    esp,0xc
c001d59d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5a1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d5a7:	85 c0                	test   eax,eax
c001d5a9:	74 0c                	je     c001d5b7 <SATA::close(int, int, void*)+0x1d>
c001d5ab:	83 ec 0c             	sub    esp,0xc
c001d5ae:	8b 10                	mov    edx,DWORD PTR [eax]
c001d5b0:	50                   	push   eax
c001d5b1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d5b4:	83 c4 10             	add    esp,0x10
c001d5b7:	31 c0                	xor    eax,eax
c001d5b9:	83 c4 0c             	add    esp,0xc
c001d5bc:	c3                   	ret    
c001d5bd:	90                   	nop

c001d5be <SATA::powerSaving(PowerSavingLevel)>:
c001d5be:	c3                   	ret    
c001d5bf:	90                   	nop

c001d5c0 <SATA::open(int, int, void*)>:
c001d5c0:	56                   	push   esi
c001d5c1:	53                   	push   ebx
c001d5c2:	50                   	push   eax
c001d5c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d5c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d5cb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d5d5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d5db:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d5e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d5e9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d5f3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d5f9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d600:	e8 ba a7 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d605:	89 c6                	mov    esi,eax
c001d607:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d60d:	81 c6 00 10 00 00    	add    esi,0x1000
c001d613:	e8 a7 a7 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d618:	39 c6                	cmp    esi,eax
c001d61a:	74 10                	je     c001d62c <SATA::open(int, int, void*)+0x6c>
c001d61c:	83 ec 0c             	sub    esp,0xc
c001d61f:	68 a8 2c 02 c0       	push   0xc0022ca8
c001d624:	e8 28 3c ff ff       	call   c0011251 <KePanic(char const*)>
c001d629:	83 c4 10             	add    esp,0x10
c001d62c:	83 ec 0c             	sub    esp,0xc
c001d62f:	6a 02                	push   0x2
c001d631:	e8 d7 bf fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001d636:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d63c:	6a 03                	push   0x3
c001d63e:	50                   	push   eax
c001d63f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001d645:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001d64b:	e8 d0 c6 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d650:	83 c4 14             	add    esp,0x14
c001d653:	53                   	push   ebx
c001d654:	e8 fd f3 fe ff       	call   c000ca56 <PhysicalDisk::startCache()>
c001d659:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d65c:	e8 39 06 ff ff       	call   c000dc9a <createPartitionsForDisk(PhysicalDisk*)>
c001d661:	83 c4 14             	add    esp,0x14
c001d664:	31 c0                	xor    eax,eax
c001d666:	5b                   	pop    ebx
c001d667:	5e                   	pop    esi
c001d668:	c3                   	ret    
c001d669:	90                   	nop

c001d66a <SATA::SATA()>:
c001d66a:	83 ec 0c             	sub    esp,0xc
c001d66d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d671:	83 ec 04             	sub    esp,0x4
c001d674:	68 00 02 00 00       	push   0x200
c001d679:	68 bc 2c 02 c0       	push   0xc0022cbc
c001d67e:	50                   	push   eax
c001d67f:	e8 6a f3 fe ff       	call   c000c9ee <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d684:	83 c4 10             	add    esp,0x10
c001d687:	ba 2c 2d 02 c0       	mov    edx,0xc0022d2c
c001d68c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d690:	89 10                	mov    DWORD PTR [eax],edx
c001d692:	90                   	nop
c001d693:	83 c4 0c             	add    esp,0xc
c001d696:	c3                   	ret    
c001d697:	90                   	nop

c001d698 <SATA::access(unsigned long long, int, void*, bool)>:
c001d698:	55                   	push   ebp
c001d699:	57                   	push   edi
c001d69a:	56                   	push   esi
c001d69b:	53                   	push   ebx
c001d69c:	83 ec 2c             	sub    esp,0x2c
c001d69f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d6a3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d6a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d6ab:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d6af:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d6b3:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d6b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6bc:	7e 10                	jle    c001d6ce <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001d6be:	83 ec 0c             	sub    esp,0xc
c001d6c1:	68 cc 2c 02 c0       	push   0xc0022ccc
c001d6c6:	e8 86 3b ff ff       	call   c0011251 <KePanic(char const*)>
c001d6cb:	83 c4 10             	add    esp,0x10
c001d6ce:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d6d4:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d6da:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d6e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d6e4:	89 d0                	mov    eax,edx
c001d6e6:	c1 e0 07             	shl    eax,0x7
c001d6e9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d6ed:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d6f7:	51                   	push   ecx
c001d6f8:	8d 42 02             	lea    eax,[edx+0x2]
c001d6fb:	51                   	push   ecx
c001d6fc:	c1 e0 07             	shl    eax,0x7
c001d6ff:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d703:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d707:	50                   	push   eax
c001d708:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d70e:	e8 91 ec ff ff       	call   c001c3a4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d713:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d717:	83 c4 10             	add    esp,0x10
c001d71a:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001d71f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d723:	0f 84 57 01 00 00    	je     c001d880 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d729:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d72d:	c1 e0 09             	shl    eax,0x9
c001d730:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d735:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d739:	74 0e                	je     c001d749 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001d73b:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d741:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d745:	89 c1                	mov    ecx,eax
c001d747:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d749:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d74f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d753:	8d 42 02             	lea    eax,[edx+0x2]
c001d756:	c1 e0 07             	shl    eax,0x7
c001d759:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d75d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d75f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d765:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d76b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d76f:	c1 e1 05             	shl    ecx,0x5
c001d772:	01 c8                	add    eax,ecx
c001d774:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d778:	83 e1 01             	and    ecx,0x1
c001d77b:	89 ce                	mov    esi,ecx
c001d77d:	8a 08                	mov    cl,BYTE PTR [eax]
c001d77f:	c1 e6 06             	shl    esi,0x6
c001d782:	83 e1 bf             	and    ecx,0xffffffbf
c001d785:	09 f1                	or     ecx,esi
c001d787:	88 08                	mov    BYTE PTR [eax],cl
c001d789:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d78b:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001d791:	81 c9 05 00 01 00    	or     ecx,0x10005
c001d797:	89 08                	mov    DWORD PTR [eax],ecx
c001d799:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d79f:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001d7a5:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001d7ab:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001d7ae:	50                   	push   eax
c001d7af:	68 90 00 00 00       	push   0x90
c001d7b4:	6a 00                	push   0x0
c001d7b6:	56                   	push   esi
c001d7b7:	e8 34 2d fe ff       	call   c00004f0 <memset>
c001d7bc:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d7c2:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d7c8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d7cc:	83 c4 10             	add    esp,0x10
c001d7cf:	48                   	dec    eax
c001d7d0:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d7d5:	89 c1                	mov    ecx,eax
c001d7d7:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d7dd:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d7e2:	09 c8                	or     eax,ecx
c001d7e4:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d7ea:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d7f0:	83 c8 80             	or     eax,0xffffff80
c001d7f3:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d7f9:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d7fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d800:	25 00 7f 00 00       	and    eax,0x7f00
c001d805:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d80a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d80f:	66 89 06             	mov    WORD PTR [esi],ax
c001d812:	b0 35                	mov    al,0x35
c001d814:	75 02                	jne    c001d818 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001d816:	b0 25                	mov    al,0x25
c001d818:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d81b:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001d81f:	89 e8                	mov    eax,ebp
c001d821:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d825:	c1 e8 10             	shr    eax,0x10
c001d828:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d82b:	89 e8                	mov    eax,ebp
c001d82d:	c1 e8 18             	shr    eax,0x18
c001d830:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d833:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d837:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d83a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d83e:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d841:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d845:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d849:	89 d6                	mov    esi,edx
c001d84b:	31 c0                	xor    eax,eax
c001d84d:	c1 e6 07             	shl    esi,0x7
c001d850:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d854:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d85a:	80 e1 88             	and    cl,0x88
c001d85d:	74 0a                	je     c001d869 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001d85f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d864:	74 0a                	je     c001d870 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001d866:	40                   	inc    eax
c001d867:	eb eb                	jmp    c001d854 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001d869:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d86e:	75 17                	jne    c001d887 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001d870:	83 ec 0c             	sub    esp,0xc
c001d873:	68 05 2d 02 c0       	push   0xc0022d05
c001d878:	e8 c8 d0 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001d87d:	83 c4 10             	add    esp,0x10
c001d880:	b8 01 00 00 00       	mov    eax,0x1
c001d885:	eb 5d                	jmp    c001d8e4 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001d887:	b8 01 00 00 00       	mov    eax,0x1
c001d88c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001d890:	c1 e2 07             	shl    edx,0x7
c001d893:	d3 e0                	shl    eax,cl
c001d895:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001d899:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001d89f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001d8a5:	85 c8                	test   eax,ecx
c001d8a7:	74 16                	je     c001d8bf <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001d8a9:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001d8af:	0f ba e1 1e          	bt     ecx,0x1e
c001d8b3:	73 ea                	jae    c001d89f <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001d8b5:	83 ec 0c             	sub    esp,0xc
c001d8b8:	68 13 2d 02 c0       	push   0xc0022d13
c001d8bd:	eb b9                	jmp    c001d878 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001d8bf:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001d8c5:	0f ba e0 1e          	bt     eax,0x1e
c001d8c9:	72 b5                	jb     c001d880 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d8cb:	31 c0                	xor    eax,eax
c001d8cd:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d8d2:	75 10                	jne    c001d8e4 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001d8d4:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001d8da:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001d8de:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d8e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d8e4:	83 c4 2c             	add    esp,0x2c
c001d8e7:	5b                   	pop    ebx
c001d8e8:	5e                   	pop    esi
c001d8e9:	5f                   	pop    edi
c001d8ea:	5d                   	pop    ebp
c001d8eb:	c3                   	ret    

c001d8ec <SATA::read(unsigned long long, int, void*)>:
c001d8ec:	55                   	push   ebp
c001d8ed:	57                   	push   edi
c001d8ee:	56                   	push   esi
c001d8ef:	be 04 00 00 00       	mov    esi,0x4
c001d8f4:	53                   	push   ebx
c001d8f5:	83 ec 0c             	sub    esp,0xc
c001d8f8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d8fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d900:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d903:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d907:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d90b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d911:	0f 87 1a 02 00 00    	ja     c001db31 <SATA::read(unsigned long long, int, void*)+0x245>
c001d917:	be 06 00 00 00       	mov    esi,0x6
c001d91c:	85 c9                	test   ecx,ecx
c001d91e:	0f 84 0d 02 00 00    	je     c001db31 <SATA::read(unsigned long long, int, void*)+0x245>
c001d924:	56                   	push   esi
c001d925:	56                   	push   esi
c001d926:	6a 00                	push   0x0
c001d928:	51                   	push   ecx
c001d929:	53                   	push   ebx
c001d92a:	52                   	push   edx
c001d92b:	50                   	push   eax
c001d92c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d930:	e8 63 fd ff ff       	call   c001d698 <SATA::access(unsigned long long, int, void*, bool)>
c001d935:	83 c4 20             	add    esp,0x20
c001d938:	89 c6                	mov    esi,eax
c001d93a:	85 c0                	test   eax,eax
c001d93c:	0f 85 ea 01 00 00    	jne    c001db2c <SATA::read(unsigned long long, int, void*)+0x240>
c001d942:	01 1d b4 a0 02 c0    	add    DWORD PTR ds:0xc002a0b4,ebx
c001d948:	bb 0a 00 00 00       	mov    ebx,0xa
c001d94d:	50                   	push   eax
c001d94e:	50                   	push   eax
c001d94f:	6a 0f                	push   0xf
c001d951:	6a 00                	push   0x0
c001d953:	e8 75 f2 ff ff       	call   c001cbcd <combineColours(unsigned char, unsigned char)>
c001d958:	5a                   	pop    edx
c001d959:	0f b6 c0             	movzx  eax,al
c001d95c:	59                   	pop    ecx
c001d95d:	b9 10 27 00 00       	mov    ecx,0x2710
c001d962:	50                   	push   eax
c001d963:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d968:	99                   	cdq    
c001d969:	f7 f9                	idiv   ecx
c001d96b:	99                   	cdq    
c001d96c:	f7 fb                	idiv   ebx
c001d96e:	8d 42 30             	lea    eax,[edx+0x30]
c001d971:	0f b6 c0             	movzx  eax,al
c001d974:	50                   	push   eax
c001d975:	e8 42 f2 ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001d97a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d980:	5f                   	pop    edi
c001d981:	5d                   	pop    ebp
c001d982:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d987:	6a 0f                	push   0xf
c001d989:	6a 00                	push   0x0
c001d98b:	e8 3d f2 ff ff       	call   c001cbcd <combineColours(unsigned char, unsigned char)>
c001d990:	5a                   	pop    edx
c001d991:	0f b6 c0             	movzx  eax,al
c001d994:	59                   	pop    ecx
c001d995:	50                   	push   eax
c001d996:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d99b:	99                   	cdq    
c001d99c:	f7 fd                	idiv   ebp
c001d99e:	99                   	cdq    
c001d99f:	f7 fb                	idiv   ebx
c001d9a1:	8d 42 30             	lea    eax,[edx+0x30]
c001d9a4:	0f b6 c0             	movzx  eax,al
c001d9a7:	50                   	push   eax
c001d9a8:	e8 0f f2 ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001d9ad:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d9b3:	5f                   	pop    edi
c001d9b4:	bf 64 00 00 00       	mov    edi,0x64
c001d9b9:	58                   	pop    eax
c001d9ba:	6a 0f                	push   0xf
c001d9bc:	6a 00                	push   0x0
c001d9be:	e8 0a f2 ff ff       	call   c001cbcd <combineColours(unsigned char, unsigned char)>
c001d9c3:	5a                   	pop    edx
c001d9c4:	0f b6 c0             	movzx  eax,al
c001d9c7:	59                   	pop    ecx
c001d9c8:	50                   	push   eax
c001d9c9:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d9ce:	99                   	cdq    
c001d9cf:	f7 ff                	idiv   edi
c001d9d1:	99                   	cdq    
c001d9d2:	f7 fb                	idiv   ebx
c001d9d4:	8d 42 30             	lea    eax,[edx+0x30]
c001d9d7:	0f b6 c0             	movzx  eax,al
c001d9da:	50                   	push   eax
c001d9db:	e8 dc f1 ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001d9e0:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d9e6:	58                   	pop    eax
c001d9e7:	5a                   	pop    edx
c001d9e8:	6a 0f                	push   0xf
c001d9ea:	6a 00                	push   0x0
c001d9ec:	e8 dc f1 ff ff       	call   c001cbcd <combineColours(unsigned char, unsigned char)>
c001d9f1:	59                   	pop    ecx
c001d9f2:	0f b6 c0             	movzx  eax,al
c001d9f5:	5a                   	pop    edx
c001d9f6:	50                   	push   eax
c001d9f7:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d9fc:	99                   	cdq    
c001d9fd:	f7 fb                	idiv   ebx
c001d9ff:	99                   	cdq    
c001da00:	f7 fb                	idiv   ebx
c001da02:	8d 42 30             	lea    eax,[edx+0x30]
c001da05:	0f b6 c0             	movzx  eax,al
c001da08:	50                   	push   eax
c001da09:	e8 ae f1 ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001da0e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001da14:	59                   	pop    ecx
c001da15:	58                   	pop    eax
c001da16:	6a 0f                	push   0xf
c001da18:	6a 00                	push   0x0
c001da1a:	e8 ae f1 ff ff       	call   c001cbcd <combineColours(unsigned char, unsigned char)>
c001da1f:	5a                   	pop    edx
c001da20:	0f b6 c0             	movzx  eax,al
c001da23:	59                   	pop    ecx
c001da24:	50                   	push   eax
c001da25:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001da2a:	99                   	cdq    
c001da2b:	f7 fb                	idiv   ebx
c001da2d:	8d 42 30             	lea    eax,[edx+0x30]
c001da30:	0f b6 c0             	movzx  eax,al
c001da33:	50                   	push   eax
c001da34:	e8 83 f1 ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001da39:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001da3f:	58                   	pop    eax
c001da40:	5a                   	pop    edx
c001da41:	6a 0f                	push   0xf
c001da43:	6a 00                	push   0x0
c001da45:	e8 83 f1 ff ff       	call   c001cbcd <combineColours(unsigned char, unsigned char)>
c001da4a:	59                   	pop    ecx
c001da4b:	0f b6 c0             	movzx  eax,al
c001da4e:	5a                   	pop    edx
c001da4f:	b9 10 27 00 00       	mov    ecx,0x2710
c001da54:	50                   	push   eax
c001da55:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001da5a:	99                   	cdq    
c001da5b:	f7 f9                	idiv   ecx
c001da5d:	99                   	cdq    
c001da5e:	f7 fb                	idiv   ebx
c001da60:	8d 42 30             	lea    eax,[edx+0x30]
c001da63:	0f b6 c0             	movzx  eax,al
c001da66:	50                   	push   eax
c001da67:	e8 50 f1 ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001da6c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001da72:	59                   	pop    ecx
c001da73:	58                   	pop    eax
c001da74:	6a 0f                	push   0xf
c001da76:	6a 00                	push   0x0
c001da78:	e8 50 f1 ff ff       	call   c001cbcd <combineColours(unsigned char, unsigned char)>
c001da7d:	5a                   	pop    edx
c001da7e:	0f b6 c0             	movzx  eax,al
c001da81:	59                   	pop    ecx
c001da82:	50                   	push   eax
c001da83:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001da88:	99                   	cdq    
c001da89:	f7 fd                	idiv   ebp
c001da8b:	99                   	cdq    
c001da8c:	f7 fb                	idiv   ebx
c001da8e:	8d 42 30             	lea    eax,[edx+0x30]
c001da91:	0f b6 c0             	movzx  eax,al
c001da94:	50                   	push   eax
c001da95:	e8 22 f1 ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001da9a:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001daa0:	5d                   	pop    ebp
c001daa1:	58                   	pop    eax
c001daa2:	6a 0f                	push   0xf
c001daa4:	6a 00                	push   0x0
c001daa6:	e8 22 f1 ff ff       	call   c001cbcd <combineColours(unsigned char, unsigned char)>
c001daab:	5a                   	pop    edx
c001daac:	0f b6 c0             	movzx  eax,al
c001daaf:	59                   	pop    ecx
c001dab0:	50                   	push   eax
c001dab1:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dab6:	99                   	cdq    
c001dab7:	f7 ff                	idiv   edi
c001dab9:	99                   	cdq    
c001daba:	f7 fb                	idiv   ebx
c001dabc:	8d 42 30             	lea    eax,[edx+0x30]
c001dabf:	0f b6 c0             	movzx  eax,al
c001dac2:	50                   	push   eax
c001dac3:	e8 f4 f0 ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001dac8:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dace:	5f                   	pop    edi
c001dacf:	5d                   	pop    ebp
c001dad0:	6a 0f                	push   0xf
c001dad2:	6a 00                	push   0x0
c001dad4:	e8 f4 f0 ff ff       	call   c001cbcd <combineColours(unsigned char, unsigned char)>
c001dad9:	5a                   	pop    edx
c001dada:	0f b6 c0             	movzx  eax,al
c001dadd:	59                   	pop    ecx
c001dade:	50                   	push   eax
c001dadf:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dae4:	99                   	cdq    
c001dae5:	f7 fb                	idiv   ebx
c001dae7:	99                   	cdq    
c001dae8:	f7 fb                	idiv   ebx
c001daea:	8d 42 30             	lea    eax,[edx+0x30]
c001daed:	0f b6 c0             	movzx  eax,al
c001daf0:	50                   	push   eax
c001daf1:	e8 c6 f0 ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001daf6:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001dafc:	5f                   	pop    edi
c001dafd:	5d                   	pop    ebp
c001dafe:	6a 0f                	push   0xf
c001db00:	6a 00                	push   0x0
c001db02:	e8 c6 f0 ff ff       	call   c001cbcd <combineColours(unsigned char, unsigned char)>
c001db07:	5a                   	pop    edx
c001db08:	0f b6 c0             	movzx  eax,al
c001db0b:	59                   	pop    ecx
c001db0c:	50                   	push   eax
c001db0d:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001db12:	99                   	cdq    
c001db13:	f7 fb                	idiv   ebx
c001db15:	83 c2 30             	add    edx,0x30
c001db18:	0f b6 d2             	movzx  edx,dl
c001db1b:	52                   	push   edx
c001db1c:	e8 9b f0 ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001db21:	83 c4 10             	add    esp,0x10
c001db24:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001db2a:	eb 05                	jmp    c001db31 <SATA::read(unsigned long long, int, void*)+0x245>
c001db2c:	be 01 00 00 00       	mov    esi,0x1
c001db31:	83 c4 0c             	add    esp,0xc
c001db34:	89 f0                	mov    eax,esi
c001db36:	5b                   	pop    ebx
c001db37:	5e                   	pop    esi
c001db38:	5f                   	pop    edi
c001db39:	5d                   	pop    ebp
c001db3a:	c3                   	ret    
c001db3b:	90                   	nop

c001db3c <SATA::write(unsigned long long, int, void*)>:
c001db3c:	55                   	push   ebp
c001db3d:	b8 04 00 00 00       	mov    eax,0x4
c001db42:	57                   	push   edi
c001db43:	56                   	push   esi
c001db44:	53                   	push   ebx
c001db45:	83 ec 1c             	sub    esp,0x1c
c001db48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001db4c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001db50:	8d 75 ff             	lea    esi,[ebp-0x1]
c001db53:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001db57:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001db5b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001db61:	0f 87 32 02 00 00    	ja     c001dd99 <SATA::write(unsigned long long, int, void*)+0x25d>
c001db67:	b8 06 00 00 00       	mov    eax,0x6
c001db6c:	85 ff                	test   edi,edi
c001db6e:	0f 84 25 02 00 00    	je     c001dd99 <SATA::write(unsigned long long, int, void*)+0x25d>
c001db74:	89 ee                	mov    esi,ebp
c001db76:	c1 e6 09             	shl    esi,0x9
c001db79:	01 fe                	add    esi,edi
c001db7b:	89 c8                	mov    eax,ecx
c001db7d:	89 da                	mov    edx,ebx
c001db7f:	83 c0 01             	add    eax,0x1
c001db82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001db86:	83 d2 00             	adc    edx,0x0
c001db89:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001db8d:	50                   	push   eax
c001db8e:	50                   	push   eax
c001db8f:	6a 01                	push   0x1
c001db91:	57                   	push   edi
c001db92:	81 c7 00 02 00 00    	add    edi,0x200
c001db98:	6a 01                	push   0x1
c001db9a:	53                   	push   ebx
c001db9b:	51                   	push   ecx
c001db9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dba0:	e8 f3 fa ff ff       	call   c001d698 <SATA::access(unsigned long long, int, void*, bool)>
c001dba5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001dba9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001dbad:	83 c4 20             	add    esp,0x20
c001dbb0:	39 f7                	cmp    edi,esi
c001dbb2:	75 c7                	jne    c001db7b <SATA::write(unsigned long long, int, void*)+0x3f>
c001dbb4:	bb 0a 00 00 00       	mov    ebx,0xa
c001dbb9:	01 2d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebp
c001dbbf:	bd 10 27 00 00       	mov    ebp,0x2710
c001dbc4:	50                   	push   eax
c001dbc5:	50                   	push   eax
c001dbc6:	6a 0f                	push   0xf
c001dbc8:	6a 00                	push   0x0
c001dbca:	e8 fe ef ff ff       	call   c001cbcd <combineColours(unsigned char, unsigned char)>
c001dbcf:	5a                   	pop    edx
c001dbd0:	0f b6 c0             	movzx  eax,al
c001dbd3:	59                   	pop    ecx
c001dbd4:	50                   	push   eax
c001dbd5:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dbda:	99                   	cdq    
c001dbdb:	f7 fd                	idiv   ebp
c001dbdd:	99                   	cdq    
c001dbde:	f7 fb                	idiv   ebx
c001dbe0:	8d 42 30             	lea    eax,[edx+0x30]
c001dbe3:	0f b6 c0             	movzx  eax,al
c001dbe6:	50                   	push   eax
c001dbe7:	e8 d0 ef ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001dbec:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dbf2:	5e                   	pop    esi
c001dbf3:	5f                   	pop    edi
c001dbf4:	bf e8 03 00 00       	mov    edi,0x3e8
c001dbf9:	6a 0f                	push   0xf
c001dbfb:	6a 00                	push   0x0
c001dbfd:	e8 cb ef ff ff       	call   c001cbcd <combineColours(unsigned char, unsigned char)>
c001dc02:	5a                   	pop    edx
c001dc03:	0f b6 c0             	movzx  eax,al
c001dc06:	59                   	pop    ecx
c001dc07:	50                   	push   eax
c001dc08:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc0d:	99                   	cdq    
c001dc0e:	f7 ff                	idiv   edi
c001dc10:	99                   	cdq    
c001dc11:	f7 fb                	idiv   ebx
c001dc13:	8d 42 30             	lea    eax,[edx+0x30]
c001dc16:	0f b6 c0             	movzx  eax,al
c001dc19:	50                   	push   eax
c001dc1a:	e8 9d ef ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001dc1f:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dc25:	5e                   	pop    esi
c001dc26:	be 64 00 00 00       	mov    esi,0x64
c001dc2b:	58                   	pop    eax
c001dc2c:	6a 0f                	push   0xf
c001dc2e:	6a 00                	push   0x0
c001dc30:	e8 98 ef ff ff       	call   c001cbcd <combineColours(unsigned char, unsigned char)>
c001dc35:	5a                   	pop    edx
c001dc36:	0f b6 c0             	movzx  eax,al
c001dc39:	59                   	pop    ecx
c001dc3a:	50                   	push   eax
c001dc3b:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc40:	99                   	cdq    
c001dc41:	f7 fe                	idiv   esi
c001dc43:	99                   	cdq    
c001dc44:	f7 fb                	idiv   ebx
c001dc46:	8d 42 30             	lea    eax,[edx+0x30]
c001dc49:	0f b6 c0             	movzx  eax,al
c001dc4c:	50                   	push   eax
c001dc4d:	e8 6a ef ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001dc52:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dc58:	58                   	pop    eax
c001dc59:	5a                   	pop    edx
c001dc5a:	6a 0f                	push   0xf
c001dc5c:	6a 00                	push   0x0
c001dc5e:	e8 6a ef ff ff       	call   c001cbcd <combineColours(unsigned char, unsigned char)>
c001dc63:	59                   	pop    ecx
c001dc64:	0f b6 c0             	movzx  eax,al
c001dc67:	5a                   	pop    edx
c001dc68:	50                   	push   eax
c001dc69:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc6e:	99                   	cdq    
c001dc6f:	f7 fb                	idiv   ebx
c001dc71:	99                   	cdq    
c001dc72:	f7 fb                	idiv   ebx
c001dc74:	8d 42 30             	lea    eax,[edx+0x30]
c001dc77:	0f b6 c0             	movzx  eax,al
c001dc7a:	50                   	push   eax
c001dc7b:	e8 3c ef ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001dc80:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dc86:	59                   	pop    ecx
c001dc87:	58                   	pop    eax
c001dc88:	6a 0f                	push   0xf
c001dc8a:	6a 00                	push   0x0
c001dc8c:	e8 3c ef ff ff       	call   c001cbcd <combineColours(unsigned char, unsigned char)>
c001dc91:	5a                   	pop    edx
c001dc92:	0f b6 c0             	movzx  eax,al
c001dc95:	59                   	pop    ecx
c001dc96:	50                   	push   eax
c001dc97:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc9c:	99                   	cdq    
c001dc9d:	f7 fb                	idiv   ebx
c001dc9f:	83 c2 30             	add    edx,0x30
c001dca2:	0f b6 d2             	movzx  edx,dl
c001dca5:	52                   	push   edx
c001dca6:	e8 11 ef ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001dcab:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dcb1:	58                   	pop    eax
c001dcb2:	5a                   	pop    edx
c001dcb3:	6a 0f                	push   0xf
c001dcb5:	6a 00                	push   0x0
c001dcb7:	e8 11 ef ff ff       	call   c001cbcd <combineColours(unsigned char, unsigned char)>
c001dcbc:	59                   	pop    ecx
c001dcbd:	0f b6 c0             	movzx  eax,al
c001dcc0:	5a                   	pop    edx
c001dcc1:	50                   	push   eax
c001dcc2:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dcc7:	99                   	cdq    
c001dcc8:	f7 fd                	idiv   ebp
c001dcca:	99                   	cdq    
c001dccb:	f7 fb                	idiv   ebx
c001dccd:	8d 42 30             	lea    eax,[edx+0x30]
c001dcd0:	0f b6 c0             	movzx  eax,al
c001dcd3:	50                   	push   eax
c001dcd4:	e8 e3 ee ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001dcd9:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dcdf:	59                   	pop    ecx
c001dce0:	5d                   	pop    ebp
c001dce1:	6a 0f                	push   0xf
c001dce3:	6a 00                	push   0x0
c001dce5:	e8 e3 ee ff ff       	call   c001cbcd <combineColours(unsigned char, unsigned char)>
c001dcea:	5a                   	pop    edx
c001dceb:	0f b6 c0             	movzx  eax,al
c001dcee:	59                   	pop    ecx
c001dcef:	50                   	push   eax
c001dcf0:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dcf5:	99                   	cdq    
c001dcf6:	f7 ff                	idiv   edi
c001dcf8:	99                   	cdq    
c001dcf9:	f7 fb                	idiv   ebx
c001dcfb:	8d 42 30             	lea    eax,[edx+0x30]
c001dcfe:	0f b6 c0             	movzx  eax,al
c001dd01:	50                   	push   eax
c001dd02:	e8 b5 ee ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001dd07:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dd0d:	5f                   	pop    edi
c001dd0e:	5d                   	pop    ebp
c001dd0f:	6a 0f                	push   0xf
c001dd11:	6a 00                	push   0x0
c001dd13:	e8 b5 ee ff ff       	call   c001cbcd <combineColours(unsigned char, unsigned char)>
c001dd18:	5a                   	pop    edx
c001dd19:	0f b6 c0             	movzx  eax,al
c001dd1c:	59                   	pop    ecx
c001dd1d:	50                   	push   eax
c001dd1e:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd23:	99                   	cdq    
c001dd24:	f7 fe                	idiv   esi
c001dd26:	99                   	cdq    
c001dd27:	f7 fb                	idiv   ebx
c001dd29:	8d 42 30             	lea    eax,[edx+0x30]
c001dd2c:	0f b6 c0             	movzx  eax,al
c001dd2f:	50                   	push   eax
c001dd30:	e8 87 ee ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001dd35:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dd3b:	5e                   	pop    esi
c001dd3c:	5f                   	pop    edi
c001dd3d:	6a 0f                	push   0xf
c001dd3f:	6a 00                	push   0x0
c001dd41:	e8 87 ee ff ff       	call   c001cbcd <combineColours(unsigned char, unsigned char)>
c001dd46:	5d                   	pop    ebp
c001dd47:	0f b6 c0             	movzx  eax,al
c001dd4a:	5a                   	pop    edx
c001dd4b:	50                   	push   eax
c001dd4c:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd51:	99                   	cdq    
c001dd52:	f7 fb                	idiv   ebx
c001dd54:	99                   	cdq    
c001dd55:	f7 fb                	idiv   ebx
c001dd57:	8d 42 30             	lea    eax,[edx+0x30]
c001dd5a:	0f b6 c0             	movzx  eax,al
c001dd5d:	50                   	push   eax
c001dd5e:	e8 59 ee ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001dd63:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001dd69:	59                   	pop    ecx
c001dd6a:	5e                   	pop    esi
c001dd6b:	6a 0f                	push   0xf
c001dd6d:	6a 00                	push   0x0
c001dd6f:	e8 59 ee ff ff       	call   c001cbcd <combineColours(unsigned char, unsigned char)>
c001dd74:	5f                   	pop    edi
c001dd75:	0f b6 c0             	movzx  eax,al
c001dd78:	5d                   	pop    ebp
c001dd79:	50                   	push   eax
c001dd7a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd7f:	99                   	cdq    
c001dd80:	f7 fb                	idiv   ebx
c001dd82:	83 c2 30             	add    edx,0x30
c001dd85:	0f b6 d2             	movzx  edx,dl
c001dd88:	52                   	push   edx
c001dd89:	e8 2e ee ff ff       	call   c001cbbc <combineCharAndColour(char, unsigned char)>
c001dd8e:	83 c4 10             	add    esp,0x10
c001dd91:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dd97:	31 c0                	xor    eax,eax
c001dd99:	83 c4 1c             	add    esp,0x1c
c001dd9c:	5b                   	pop    ebx
c001dd9d:	5e                   	pop    esi
c001dd9e:	5f                   	pop    edi
c001dd9f:	5d                   	pop    ebp
c001dda0:	c3                   	ret    
c001dda1:	90                   	nop

c001dda2 <SATAPI::write(unsigned long long, int, void*)>:
c001dda2:	b8 03 00 00 00       	mov    eax,0x3
c001dda7:	c3                   	ret    

c001dda8 <SATAPI::close(int, int, void*)>:
c001dda8:	83 ec 0c             	sub    esp,0xc
c001ddab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddaf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ddb5:	85 c0                	test   eax,eax
c001ddb7:	74 0c                	je     c001ddc5 <SATAPI::close(int, int, void*)+0x1d>
c001ddb9:	83 ec 0c             	sub    esp,0xc
c001ddbc:	8b 10                	mov    edx,DWORD PTR [eax]
c001ddbe:	50                   	push   eax
c001ddbf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ddc2:	83 c4 10             	add    esp,0x10
c001ddc5:	31 c0                	xor    eax,eax
c001ddc7:	83 c4 0c             	add    esp,0xc
c001ddca:	c3                   	ret    
c001ddcb:	90                   	nop

c001ddcc <SATAPI::SATAPI()>:
c001ddcc:	83 ec 0c             	sub    esp,0xc
c001ddcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddd3:	83 ec 04             	sub    esp,0x4
c001ddd6:	68 00 08 00 00       	push   0x800
c001dddb:	68 5c 2d 02 c0       	push   0xc0022d5c
c001dde0:	50                   	push   eax
c001dde1:	e8 08 ec fe ff       	call   c000c9ee <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dde6:	83 c4 10             	add    esp,0x10
c001dde9:	ba 50 2e 02 c0       	mov    edx,0xc0022e50
c001ddee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddf2:	89 10                	mov    DWORD PTR [eax],edx
c001ddf4:	90                   	nop
c001ddf5:	83 c4 0c             	add    esp,0xc
c001ddf8:	c3                   	ret    
c001ddf9:	90                   	nop

c001ddfa <SATAPI::diskRemoved()>:
c001ddfa:	c3                   	ret    
c001ddfb:	90                   	nop

c001ddfc <SATAPI::diskInserted()>:
c001ddfc:	83 ec 18             	sub    esp,0x18
c001ddff:	68 68 2d 02 c0       	push   0xc0022d68
c001de04:	e8 3c cb fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001de09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de0d:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001de14:	83 c4 1c             	add    esp,0x1c
c001de17:	c3                   	ret    

c001de18 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001de18:	55                   	push   ebp
c001de19:	57                   	push   edi
c001de1a:	56                   	push   esi
c001de1b:	53                   	push   ebx
c001de1c:	83 ec 34             	sub    esp,0x34
c001de1f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001de23:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001de27:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001de2b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001de2f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001de33:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001de39:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001de43:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001de49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001de4d:	83 c0 02             	add    eax,0x2
c001de50:	c1 e0 07             	shl    eax,0x7
c001de53:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001de57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001de5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de5f:	c1 e0 07             	shl    eax,0x7
c001de62:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001de66:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001de6a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001de74:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001de78:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001de7e:	e8 21 e5 ff ff       	call   c001c3a4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001de83:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001de87:	83 c4 10             	add    esp,0x10
c001de8a:	b8 01 00 00 00       	mov    eax,0x1
c001de8f:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001de94:	0f 84 53 02 00 00    	je     c001e0ed <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001de9a:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001dea0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dea4:	8b 00                	mov    eax,DWORD PTR [eax]
c001dea6:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001deac:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001deb2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001deb6:	c1 e1 05             	shl    ecx,0x5
c001deb9:	01 c8                	add    eax,ecx
c001debb:	8b 08                	mov    ecx,DWORD PTR [eax]
c001debd:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001dec3:	81 c9 25 00 01 00    	or     ecx,0x10025
c001dec9:	89 08                	mov    DWORD PTR [eax],ecx
c001decb:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001ded1:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001ded7:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001dedd:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001dee0:	8d 7b 40             	lea    edi,[ebx+0x40]
c001dee3:	50                   	push   eax
c001dee4:	68 90 00 00 00       	push   0x90
c001dee9:	6a 00                	push   0x0
c001deeb:	53                   	push   ebx
c001deec:	e8 ff 25 fe ff       	call   c00004f0 <memset>
c001def1:	b9 0c 00 00 00       	mov    ecx,0xc
c001def6:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001defa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001defc:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001df02:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001df06:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001df0c:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001df10:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001df14:	48                   	dec    eax
c001df15:	25 ff ff 3f 00       	and    eax,0x3fffff
c001df1a:	89 c1                	mov    ecx,eax
c001df1c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001df22:	25 00 00 c0 ff       	and    eax,0xffc00000
c001df27:	09 c8                	or     eax,ecx
c001df29:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001df2f:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001df35:	83 c8 80             	or     eax,0xffffff80
c001df38:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001df3e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001df41:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001df45:	25 00 7f 00 00       	and    eax,0x7f00
c001df4a:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001df4e:	0d 27 80 ff ff       	or     eax,0xffff8027
c001df53:	66 89 03             	mov    WORD PTR [ebx],ax
c001df56:	89 d0                	mov    eax,edx
c001df58:	c1 ea 18             	shr    edx,0x18
c001df5b:	c1 e8 10             	shr    eax,0x10
c001df5e:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001df61:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001df64:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001df68:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001df6b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001df6f:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001df72:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001df76:	83 c4 10             	add    esp,0x10
c001df79:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001df7d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001df81:	31 c0                	xor    eax,eax
c001df83:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001df89:	80 e1 88             	and    cl,0x88
c001df8c:	74 0a                	je     c001df98 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001df8e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001df93:	74 0a                	je     c001df9f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001df95:	40                   	inc    eax
c001df96:	eb eb                	jmp    c001df83 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001df98:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001df9d:	75 43                	jne    c001dfe2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001df9f:	83 ec 0c             	sub    esp,0xc
c001dfa2:	68 80 2d 02 c0       	push   0xc0022d80
c001dfa7:	e8 99 c9 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001dfac:	58                   	pop    eax
c001dfad:	5a                   	pop    edx
c001dfae:	68 95 2d 02 c0       	push   0xc0022d95
c001dfb3:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001dfb9:	e8 e8 aa fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001dfbe:	59                   	pop    ecx
c001dfbf:	5b                   	pop    ebx
c001dfc0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001dfc4:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001dfca:	e8 6f e4 ff ff       	call   c001c43e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001dfcf:	5e                   	pop    esi
c001dfd0:	5f                   	pop    edi
c001dfd1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001dfd5:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001dfdb:	e8 3e e4 ff ff       	call   c001c41e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001dfe0:	eb 48                	jmp    c001e02a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001dfe2:	be 01 00 00 00       	mov    esi,0x1
c001dfe7:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001dfeb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001dfef:	d3 e6                	shl    esi,cl
c001dff1:	c1 e7 07             	shl    edi,0x7
c001dff4:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001dffa:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001dfff:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e003:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e009:	85 c6                	test   esi,eax
c001e00b:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e011:	0f 84 a3 00 00 00    	je     c001e0ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001e017:	0f ba e0 1e          	bt     eax,0x1e
c001e01b:	73 1a                	jae    c001e037 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001e01d:	83 ec 0c             	sub    esp,0xc
c001e020:	68 a7 2d 02 c0       	push   0xc0022da7
c001e025:	e8 1b c9 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e02a:	83 c4 10             	add    esp,0x10
c001e02d:	b8 01 00 00 00       	mov    eax,0x1
c001e032:	e9 b6 00 00 00       	jmp    c001e0ed <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e037:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001e03d:	83 f8 0d             	cmp    eax,0xd
c001e040:	77 0a                	ja     c001e04c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001e042:	83 ec 0c             	sub    esp,0xc
c001e045:	68 c8 00 00 00       	push   0xc8
c001e04a:	eb 28                	jmp    c001e074 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e04c:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001e052:	83 f8 0d             	cmp    eax,0xd
c001e055:	77 0a                	ja     c001e061 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e057:	83 ec 0c             	sub    esp,0xc
c001e05a:	68 58 02 00 00       	push   0x258
c001e05f:	eb 13                	jmp    c001e074 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e061:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e067:	83 f8 06             	cmp    eax,0x6
c001e06a:	77 10                	ja     c001e07c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e06c:	83 ec 0c             	sub    esp,0xc
c001e06f:	68 dc 05 00 00       	push   0x5dc
c001e074:	e8 c7 7d ff ff       	call   c0015e40 <milliTenthSleep(unsigned int)>
c001e079:	83 c4 10             	add    esp,0x10
c001e07c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e080:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e083:	75 06                	jne    c001e08b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e085:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e089:	74 15                	je     c001e0a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e08b:	83 fb 06             	cmp    ebx,0x6
c001e08e:	77 10                	ja     c001e0a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e090:	83 ec 0c             	sub    esp,0xc
c001e093:	68 c4 09 00 00       	push   0x9c4
c001e098:	e8 a3 7d ff ff       	call   c0015e40 <milliTenthSleep(unsigned int)>
c001e09d:	83 c4 10             	add    esp,0x10
c001e0a0:	43                   	inc    ebx
c001e0a1:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e0a7:	0f 85 56 ff ff ff    	jne    c001e003 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e0ad:	83 ec 0c             	sub    esp,0xc
c001e0b0:	68 ba 2d 02 c0       	push   0xc0022dba
c001e0b5:	e9 6b ff ff ff       	jmp    c001e025 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e0ba:	0f ba e0 1e          	bt     eax,0x1e
c001e0be:	73 0d                	jae    c001e0cd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e0c0:	83 ec 0c             	sub    esp,0xc
c001e0c3:	68 ce 2d 02 c0       	push   0xc0022dce
c001e0c8:	e9 58 ff ff ff       	jmp    c001e025 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e0cd:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e0d2:	74 17                	je     c001e0eb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e0d4:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e0d9:	74 10                	je     c001e0eb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e0db:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e0e1:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e0e5:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e0e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e0eb:	31 c0                	xor    eax,eax
c001e0ed:	83 c4 2c             	add    esp,0x2c
c001e0f0:	5b                   	pop    ebx
c001e0f1:	5e                   	pop    esi
c001e0f2:	5f                   	pop    edi
c001e0f3:	5d                   	pop    ebp
c001e0f4:	c3                   	ret    
c001e0f5:	90                   	nop

c001e0f6 <SATAPI::eject()>:
c001e0f6:	57                   	push   edi
c001e0f7:	b9 03 00 00 00       	mov    ecx,0x3
c001e0fc:	83 ec 18             	sub    esp,0x18
c001e0ff:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e103:	fc                   	cld    
c001e104:	31 c0                	xor    eax,eax
c001e106:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e108:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e10d:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e112:	50                   	push   eax
c001e113:	6a 00                	push   0x0
c001e115:	6a 00                	push   0x0
c001e117:	6a 00                	push   0x0
c001e119:	6a 00                	push   0x0
c001e11b:	6a 02                	push   0x2
c001e11d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e121:	50                   	push   eax
c001e122:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e126:	e8 ed fc ff ff       	call   c001de18 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e12b:	31 c0                	xor    eax,eax
c001e12d:	83 c4 38             	add    esp,0x38
c001e130:	5f                   	pop    edi
c001e131:	c3                   	ret    

c001e132 <SATAPI::detectMedia()>:
c001e132:	53                   	push   ebx
c001e133:	83 ec 14             	sub    esp,0x14
c001e136:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e13a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e140:	e8 27 02 ff ff       	call   c000e36c <VCache::writeWriteBuffer()>
c001e145:	59                   	pop    ecx
c001e146:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e14c:	e8 0b 02 ff ff       	call   c000e35c <VCache::invalidateReadBuffer()>
c001e151:	c7 04 24 e3 2d 02 c0 	mov    DWORD PTR [esp],0xc0022de3
c001e158:	e8 e8 c7 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e15d:	83 c4 10             	add    esp,0x10
c001e160:	31 c0                	xor    eax,eax
c001e162:	8b 14 85 80 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7780]
c001e169:	85 d2                	test   edx,edx
c001e16b:	74 0f                	je     c001e17c <SATAPI::detectMedia()+0x4a>
c001e16d:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e173:	75 07                	jne    c001e17c <SATAPI::detectMedia()+0x4a>
c001e175:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e17c:	40                   	inc    eax
c001e17d:	83 f8 1a             	cmp    eax,0x1a
c001e180:	75 e0                	jne    c001e162 <SATAPI::detectMedia()+0x30>
c001e182:	83 c4 08             	add    esp,0x8
c001e185:	5b                   	pop    ebx
c001e186:	c3                   	ret    
c001e187:	90                   	nop

c001e188 <SATAPI::open(int, int, void*)>:
c001e188:	56                   	push   esi
c001e189:	53                   	push   ebx
c001e18a:	51                   	push   ecx
c001e18b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e18f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e193:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e19d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e1a3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e1ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1b1:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e1bb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e1c1:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e1c8:	e8 f2 9b fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e1cd:	89 c6                	mov    esi,eax
c001e1cf:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e1d5:	81 c6 00 10 00 00    	add    esi,0x1000
c001e1db:	e8 df 9b fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e1e0:	39 c6                	cmp    esi,eax
c001e1e2:	74 10                	je     c001e1f4 <SATAPI::open(int, int, void*)+0x6c>
c001e1e4:	83 ec 0c             	sub    esp,0xc
c001e1e7:	68 f8 2d 02 c0       	push   0xc0022df8
c001e1ec:	e8 60 30 ff ff       	call   c0011251 <KePanic(char const*)>
c001e1f1:	83 c4 10             	add    esp,0x10
c001e1f4:	83 ec 0c             	sub    esp,0xc
c001e1f7:	6a 02                	push   0x2
c001e1f9:	e8 0f b4 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001e1fe:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e204:	6a 03                	push   0x3
c001e206:	50                   	push   eax
c001e207:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e20d:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001e213:	e8 08 bb fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e218:	83 c4 14             	add    esp,0x14
c001e21b:	68 78 01 00 00       	push   0x178
c001e220:	e8 91 98 fe ff       	call   c0007ab6 <malloc>
c001e225:	83 c4 0c             	add    esp,0xc
c001e228:	89 c6                	mov    esi,eax
c001e22a:	6a 00                	push   0x0
c001e22c:	68 ff ff ff 7f       	push   0x7fffffff
c001e231:	6a 00                	push   0x0
c001e233:	6a 00                	push   0x0
c001e235:	53                   	push   ebx
c001e236:	68 0e 2e 02 c0       	push   0xc0022e0e
c001e23b:	50                   	push   eax
c001e23c:	e8 87 f5 fe ff       	call   c000d7c8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e241:	83 c4 14             	add    esp,0x14
c001e244:	56                   	push   esi
c001e245:	e8 3e f6 fe ff       	call   c000d888 <LogicalDisk::assignDriveLetter()>
c001e24a:	5a                   	pop    edx
c001e24b:	0f be c0             	movsx  eax,al
c001e24e:	59                   	pop    ecx
c001e24f:	50                   	push   eax
c001e250:	68 60 2c 02 c0       	push   0xc0022c60
c001e255:	e8 eb c6 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e25a:	58                   	pop    eax
c001e25b:	5a                   	pop    edx
c001e25c:	56                   	push   esi
c001e25d:	53                   	push   ebx
c001e25e:	e8 bf e3 fe ff       	call   c000c622 <Device::addChild(Device*)>
c001e263:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e269:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e26c:	e8 e5 e7 fe ff       	call   c000ca56 <PhysicalDisk::startCache()>
c001e271:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e278:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e27b:	e8 b2 fe ff ff       	call   c001e132 <SATAPI::detectMedia()>
c001e280:	83 c4 14             	add    esp,0x14
c001e283:	31 c0                	xor    eax,eax
c001e285:	5b                   	pop    ebx
c001e286:	5e                   	pop    esi
c001e287:	c3                   	ret    

c001e288 <SATAPI::read(unsigned long long, int, void*)>:
c001e288:	57                   	push   edi
c001e289:	56                   	push   esi
c001e28a:	53                   	push   ebx
c001e28b:	83 ec 30             	sub    esp,0x30
c001e28e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e292:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e296:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e29a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e29e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e2a2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e2a6:	83 fe 04             	cmp    esi,0x4
c001e2a9:	7e 10                	jle    c001e2bb <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e2ab:	83 ec 0c             	sub    esp,0xc
c001e2ae:	68 1c 2e 02 c0       	push   0xc0022e1c
c001e2b3:	e8 99 2f ff ff       	call   c0011251 <KePanic(char const*)>
c001e2b8:	83 c4 10             	add    esp,0x10
c001e2bb:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e2c1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e2c7:	51                   	push   ecx
c001e2c8:	50                   	push   eax
c001e2c9:	83 c0 02             	add    eax,0x2
c001e2cc:	c1 e0 07             	shl    eax,0x7
c001e2cf:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e2d5:	50                   	push   eax
c001e2d6:	52                   	push   edx
c001e2d7:	e8 8c e1 ff ff       	call   c001c468 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e2dc:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e2e0:	b9 03 00 00 00       	mov    ecx,0x3
c001e2e5:	fc                   	cld    
c001e2e6:	31 c0                	xor    eax,eax
c001e2e8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e2ea:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e2ef:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e2f4:	83 c4 0c             	add    esp,0xc
c001e2f7:	6a 00                	push   0x0
c001e2f9:	6a 00                	push   0x0
c001e2fb:	6a 00                	push   0x0
c001e2fd:	6a 00                	push   0x0
c001e2ff:	6a 02                	push   0x2
c001e301:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e305:	50                   	push   eax
c001e306:	53                   	push   ebx
c001e307:	e8 0c fb ff ff       	call   c001de18 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e30c:	83 c4 20             	add    esp,0x20
c001e30f:	85 c0                	test   eax,eax
c001e311:	75 44                	jne    c001e357 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e313:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e317:	b9 03 00 00 00       	mov    ecx,0x3
c001e31c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e31e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e322:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e327:	0f c8                	bswap  eax
c001e329:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e32d:	89 f0                	mov    eax,esi
c001e32f:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e333:	50                   	push   eax
c001e334:	56                   	push   esi
c001e335:	c1 e6 0b             	shl    esi,0xb
c001e338:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e33c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e340:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e344:	56                   	push   esi
c001e345:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e349:	50                   	push   eax
c001e34a:	53                   	push   ebx
c001e34b:	e8 c8 fa ff ff       	call   c001de18 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e350:	83 c4 20             	add    esp,0x20
c001e353:	85 c0                	test   eax,eax
c001e355:	74 14                	je     c001e36b <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001e357:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e35b:	83 ec 0c             	sub    esp,0xc
c001e35e:	53                   	push   ebx
c001e35f:	e8 ce fd ff ff       	call   c001e132 <SATAPI::detectMedia()>
c001e364:	83 c4 10             	add    esp,0x10
c001e367:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e36b:	83 c4 30             	add    esp,0x30
c001e36e:	5b                   	pop    ebx
c001e36f:	5e                   	pop    esi
c001e370:	5f                   	pop    edi
c001e371:	c3                   	ret    

c001e372 <IOAPIC::close(int, int, void*)>:
c001e372:	b8 00 00 00 00       	mov    eax,0x0
c001e377:	c3                   	ret    

c001e378 <apicGetBase()>:
c001e378:	55                   	push   ebp
c001e379:	89 e5                	mov    ebp,esp
c001e37b:	83 ec 18             	sub    esp,0x18
c001e37e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e383:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e389:	83 e0 08             	and    eax,0x8
c001e38c:	0f b6 c0             	movzx  eax,al
c001e38f:	85 c0                	test   eax,eax
c001e391:	75 07                	jne    c001e39a <apicGetBase()+0x22>
c001e393:	b8 00 00 00 00       	mov    eax,0x0
c001e398:	eb 21                	jmp    c001e3bb <apicGetBase()+0x43>
c001e39a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e39f:	83 ec 08             	sub    esp,0x8
c001e3a2:	6a 1b                	push   0x1b
c001e3a4:	50                   	push   eax
c001e3a5:	e8 16 8d fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001e3aa:	83 c4 10             	add    esp,0x10
c001e3ad:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e3b0:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e3b3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e3b6:	25 00 00 ff ff       	and    eax,0xffff0000
c001e3bb:	c9                   	leave  
c001e3bc:	c3                   	ret    
c001e3bd:	90                   	nop

c001e3be <IOAPIC::IOAPIC()>:
c001e3be:	83 ec 0c             	sub    esp,0xc
c001e3c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3c5:	83 ec 08             	sub    esp,0x8
c001e3c8:	68 80 2e 02 c0       	push   0xc0022e80
c001e3cd:	50                   	push   eax
c001e3ce:	e8 e7 e3 fe ff       	call   c000c7ba <Device::Device(char const*)>
c001e3d3:	83 c4 10             	add    esp,0x10
c001e3d6:	ba 90 2e 02 c0       	mov    edx,0xc0022e90
c001e3db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3df:	89 10                	mov    DWORD PTR [eax],edx
c001e3e1:	90                   	nop
c001e3e2:	83 c4 0c             	add    esp,0xc
c001e3e5:	c3                   	ret    

c001e3e6 <apicOpen()>:
c001e3e6:	55                   	push   ebp
c001e3e7:	89 e5                	mov    ebp,esp
c001e3e9:	53                   	push   ebx
c001e3ea:	83 ec 34             	sub    esp,0x34
c001e3ed:	a0 00 a1 02 c0       	mov    al,ds:0xc002a100
c001e3f2:	83 f0 01             	xor    eax,0x1
c001e3f5:	0f b6 c0             	movzx  eax,al
c001e3f8:	85 c0                	test   eax,eax
c001e3fa:	0f 84 a3 00 00 00    	je     c001e4a3 <apicOpen()+0xbd>
c001e400:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e404:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c001e409:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e40d:	0f b6 c0             	movzx  eax,al
c001e410:	39 c2                	cmp    edx,eax
c001e412:	0f 83 84 00 00 00    	jae    c001e49c <apicOpen()+0xb6>
c001e418:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e41f:	83 ec 0c             	sub    esp,0xc
c001e422:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e425:	e8 8c 96 fe ff       	call   c0007ab6 <malloc>
c001e42a:	83 c4 10             	add    esp,0x10
c001e42d:	89 c3                	mov    ebx,eax
c001e42f:	83 ec 0c             	sub    esp,0xc
c001e432:	53                   	push   ebx
c001e433:	e8 86 ff ff ff       	call   c001e3be <IOAPIC::IOAPIC()>
c001e438:	83 c4 10             	add    esp,0x10
c001e43b:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e43e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e442:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e445:	89 14 85 e0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f20],edx
c001e44c:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c001e451:	83 c0 01             	add    eax,0x1
c001e454:	a3 c0 a0 02 c0       	mov    ds:0xc002a0c0,eax
c001e459:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e45e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e464:	83 ec 08             	sub    esp,0x8
c001e467:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e46a:	50                   	push   eax
c001e46b:	e8 b2 e1 fe ff       	call   c000c622 <Device::addChild(Device*)>
c001e470:	83 c4 10             	add    esp,0x10
c001e473:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e476:	8b 00                	mov    eax,DWORD PTR [eax]
c001e478:	83 c0 08             	add    eax,0x8
c001e47b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e47d:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e481:	6a 00                	push   0x0
c001e483:	6a 00                	push   0x0
c001e485:	52                   	push   edx
c001e486:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e489:	ff d0                	call   eax
c001e48b:	83 c4 10             	add    esp,0x10
c001e48e:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e491:	83 c0 01             	add    eax,0x1
c001e494:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e497:	e9 68 ff ff ff       	jmp    c001e404 <apicOpen()+0x1e>
c001e49c:	c6 05 00 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a100,0x1
c001e4a3:	e8 d0 fe ff ff       	call   c001e378 <apicGetBase()>
c001e4a8:	05 f0 00 00 00       	add    eax,0xf0
c001e4ad:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e4b0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e4b3:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4b5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e4b8:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e4bf:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e4c6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e4c9:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e4cc:	89 10                	mov    DWORD PTR [eax],edx
c001e4ce:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e4d5:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c001e4da:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e4dd:	7d 7c                	jge    c001e55b <apicOpen()+0x175>
c001e4df:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e4e2:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e4e9:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e4ec:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e4ef:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e4f6:	c1 e8 08             	shr    eax,0x8
c001e4f9:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e4fd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e500:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e507:	c1 e8 18             	shr    eax,0x18
c001e50a:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e50d:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001e511:	3d ff 00 00 00       	cmp    eax,0xff
c001e516:	75 3a                	jne    c001e552 <apicOpen()+0x16c>
c001e518:	e8 5b fe ff ff       	call   c001e378 <apicGetBase()>
c001e51d:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001e521:	83 fa 01             	cmp    edx,0x1
c001e524:	75 07                	jne    c001e52d <apicOpen()+0x147>
c001e526:	ba 60 03 00 00       	mov    edx,0x360
c001e52b:	eb 05                	jmp    c001e532 <apicOpen()+0x14c>
c001e52d:	ba 50 03 00 00       	mov    edx,0x350
c001e532:	01 d0                	add    eax,edx
c001e534:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e537:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e53a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e53c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e53f:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e546:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e54a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e54d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e550:	89 10                	mov    DWORD PTR [eax],edx
c001e552:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e556:	e9 7a ff ff ff       	jmp    c001e4d5 <apicOpen()+0xef>
c001e55b:	90                   	nop
c001e55c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e55f:	c9                   	leave  
c001e560:	c3                   	ret    
c001e561:	90                   	nop

c001e562 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e562:	55                   	push   ebp
c001e563:	89 e5                	mov    ebp,esp
c001e565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e568:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e56e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e571:	72 1d                	jb     c001e590 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e573:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e576:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e57c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e57f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e585:	01 d0                	add    eax,edx
c001e587:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e58a:	73 04                	jae    c001e590 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e58c:	b0 01                	mov    al,0x1
c001e58e:	eb 02                	jmp    c001e592 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e590:	b0 00                	mov    al,0x0
c001e592:	5d                   	pop    ebp
c001e593:	c3                   	ret    

c001e594 <IOAPIC::read(int)>:
c001e594:	55                   	push   ebp
c001e595:	89 e5                	mov    ebp,esp
c001e597:	83 ec 10             	sub    esp,0x10
c001e59a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e59d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e5a3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e5a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e5a9:	0f b6 d0             	movzx  edx,al
c001e5ac:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5af:	89 10                	mov    DWORD PTR [eax],edx
c001e5b1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5b4:	83 c0 10             	add    eax,0x10
c001e5b7:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5b9:	c9                   	leave  
c001e5ba:	c3                   	ret    
c001e5bb:	90                   	nop

c001e5bc <IOAPIC::open(int, int, void*)>:
c001e5bc:	55                   	push   ebp
c001e5bd:	89 e5                	mov    ebp,esp
c001e5bf:	57                   	push   edi
c001e5c0:	56                   	push   esi
c001e5c1:	53                   	push   ebx
c001e5c2:	83 ec 04             	sub    esp,0x4
c001e5c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e5cb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e5d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5d4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e5da:	8b 14 85 20 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73e0]
c001e5e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5e4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e5ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5ed:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e5f3:	8b 14 85 a0 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7360]
c001e5fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5fd:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e603:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e606:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e60c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e60f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e615:	0f b6 f0             	movzx  esi,al
c001e618:	89 d0                	mov    eax,edx
c001e61a:	ba 00 00 00 00       	mov    edx,0x0
c001e61f:	89 c7                	mov    edi,eax
c001e621:	83 e7 ff             	and    edi,0xffffffff
c001e624:	89 f9                	mov    ecx,edi
c001e626:	0f b6 da             	movzx  ebx,dl
c001e629:	89 c8                	mov    eax,ecx
c001e62b:	89 da                	mov    edx,ebx
c001e62d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e630:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e633:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e637:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e63b:	83 e0 00             	and    eax,0x0
c001e63e:	09 d0                	or     eax,edx
c001e640:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e644:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e647:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e64d:	8d 50 01             	lea    edx,[eax+0x1]
c001e650:	88 d1                	mov    cl,dl
c001e652:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e655:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e65b:	0f b6 d0             	movzx  edx,al
c001e65e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e661:	83 c2 08             	add    edx,0x8
c001e664:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e668:	0f b6 c9             	movzx  ecx,cl
c001e66b:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e671:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e675:	6a 01                	push   0x1
c001e677:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e67a:	e8 15 ff ff ff       	call   c001e594 <IOAPIC::read(int)>
c001e67f:	83 c4 08             	add    esp,0x8
c001e682:	c1 f8 10             	sar    eax,0x10
c001e685:	0f b6 c0             	movzx  eax,al
c001e688:	8d 50 01             	lea    edx,[eax+0x1]
c001e68b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e68e:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e694:	b8 00 00 00 00       	mov    eax,0x0
c001e699:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e69c:	5b                   	pop    ebx
c001e69d:	5e                   	pop    esi
c001e69e:	5f                   	pop    edi
c001e69f:	5d                   	pop    ebp
c001e6a0:	c3                   	ret    
c001e6a1:	90                   	nop

c001e6a2 <IOAPIC::write(int, int)>:
c001e6a2:	55                   	push   ebp
c001e6a3:	89 e5                	mov    ebp,esp
c001e6a5:	83 ec 10             	sub    esp,0x10
c001e6a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6ab:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e6b1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e6b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e6b7:	0f b6 d0             	movzx  edx,al
c001e6ba:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e6bd:	89 10                	mov    DWORD PTR [eax],edx
c001e6bf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e6c2:	8d 50 10             	lea    edx,[eax+0x10]
c001e6c5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e6c8:	89 02                	mov    DWORD PTR [edx],eax
c001e6ca:	90                   	nop
c001e6cb:	c9                   	leave  
c001e6cc:	c3                   	ret    
c001e6cd:	90                   	nop

c001e6ce <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e6ce:	55                   	push   ebp
c001e6cf:	89 e5                	mov    ebp,esp
c001e6d1:	53                   	push   ebx
c001e6d2:	83 ec 2c             	sub    esp,0x2c
c001e6d5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e6d8:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e6db:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e6de:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e6e1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e6e4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e6e7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e6ea:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e6ed:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e6f0:	88 d8                	mov    al,bl
c001e6f2:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e6f5:	88 c8                	mov    al,cl
c001e6f7:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e6fa:	88 d0                	mov    al,dl
c001e6fc:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e6ff:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e703:	83 c0 08             	add    eax,0x8
c001e706:	01 c0                	add    eax,eax
c001e708:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e70b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e70f:	83 c0 08             	add    eax,0x8
c001e712:	01 c0                	add    eax,eax
c001e714:	83 c0 01             	add    eax,0x1
c001e717:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e71a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e71d:	50                   	push   eax
c001e71e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e721:	e8 6e fe ff ff       	call   c001e594 <IOAPIC::read(int)>
c001e726:	83 c4 08             	add    esp,0x8
c001e729:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e72c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e733:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e736:	c1 e0 18             	shl    eax,0x18
c001e739:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e73c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e73f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e742:	52                   	push   edx
c001e743:	50                   	push   eax
c001e744:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e747:	e8 56 ff ff ff       	call   c001e6a2 <IOAPIC::write(int, int)>
c001e74c:	83 c4 0c             	add    esp,0xc
c001e74f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e752:	50                   	push   eax
c001e753:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e756:	e8 39 fe ff ff       	call   c001e594 <IOAPIC::read(int)>
c001e75b:	83 c4 08             	add    esp,0x8
c001e75e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e761:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e768:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e76f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e776:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001e77a:	85 c0                	test   eax,eax
c001e77c:	74 09                	je     c001e787 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001e77e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e785:	eb 07                	jmp    c001e78e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001e787:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e78e:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001e792:	85 c0                	test   eax,eax
c001e794:	74 09                	je     c001e79f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001e796:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e79d:	eb 07                	jmp    c001e7a6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001e79f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e7a6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e7ad:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e7b1:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e7b4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e7b7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e7ba:	52                   	push   edx
c001e7bb:	50                   	push   eax
c001e7bc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7bf:	e8 de fe ff ff       	call   c001e6a2 <IOAPIC::write(int, int)>
c001e7c4:	83 c4 0c             	add    esp,0xc
c001e7c7:	90                   	nop
c001e7c8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e7cb:	c9                   	leave  
c001e7cc:	c3                   	ret    
c001e7cd:	66 90                	xchg   ax,ax
c001e7cf:	90                   	nop

c001e7d0 <APICTimer::close(int, int, void*)>:
c001e7d0:	b8 00 00 00 00       	mov    eax,0x0
c001e7d5:	c3                   	ret    
c001e7d6:	66 90                	xchg   ax,ax

c001e7d8 <apicTimerHandler(regs*, void*)>:
c001e7d8:	83 ec 0c             	sub    esp,0xc
c001e7db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e7df:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e7e1:	b8 10 27 00 00       	mov    eax,0x2710
c001e7e6:	ba 00 00 00 00       	mov    edx,0x0
c001e7eb:	f7 f1                	div    ecx
c001e7ed:	83 ec 0c             	sub    esp,0xc
c001e7f0:	50                   	push   eax
c001e7f1:	e8 8e f8 fe ff       	call   c000e084 <timerHandler(unsigned int)>
c001e7f6:	83 c4 10             	add    esp,0x10
c001e7f9:	90                   	nop
c001e7fa:	83 c4 0c             	add    esp,0xc
c001e7fd:	c3                   	ret    
c001e7fe:	66 90                	xchg   ax,ax

c001e800 <APICTimer::open(int, int, void*)>:
c001e800:	83 ec 0c             	sub    esp,0xc
c001e803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e807:	8b 00                	mov    eax,DWORD PTR [eax]
c001e809:	83 c0 24             	add    eax,0x24
c001e80c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e80e:	83 ec 08             	sub    esp,0x8
c001e811:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e815:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e819:	ff d0                	call   eax
c001e81b:	83 c4 10             	add    esp,0x10
c001e81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e822:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e826:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e830:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e834:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e83a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e83e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e844:	83 ec 0c             	sub    esp,0xc
c001e847:	51                   	push   ecx
c001e848:	6a 01                	push   0x1
c001e84a:	68 d8 e7 01 c0       	push   0xc001e7d8
c001e84f:	52                   	push   edx
c001e850:	50                   	push   eax
c001e851:	e8 78 dd fe ff       	call   c000c5ce <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e856:	83 c4 20             	add    esp,0x20
c001e859:	89 c2                	mov    edx,eax
c001e85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e85f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e865:	b8 00 00 00 00       	mov    eax,0x0
c001e86a:	83 c4 0c             	add    esp,0xc
c001e86d:	c3                   	ret    
c001e86e:	66 90                	xchg   ax,ax

c001e870 <APICTimer::write(int)>:
c001e870:	83 ec 0c             	sub    esp,0xc
c001e873:	83 ec 0c             	sub    esp,0xc
c001e876:	68 b4 2e 02 c0       	push   0xc0022eb4
c001e87b:	e8 d1 29 ff ff       	call   c0011251 <KePanic(char const*)>
c001e880:	83 c4 10             	add    esp,0x10
c001e883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e887:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e88b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e891:	90                   	nop
c001e892:	83 c4 0c             	add    esp,0xc
c001e895:	c3                   	ret    
c001e896:	66 90                	xchg   ax,ax

c001e898 <APICTimer::APICTimer()>:
c001e898:	83 ec 0c             	sub    esp,0xc
c001e89b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e89f:	83 ec 08             	sub    esp,0x8
c001e8a2:	68 c4 2e 02 c0       	push   0xc0022ec4
c001e8a7:	50                   	push   eax
c001e8a8:	e8 0b f7 fe ff       	call   c000dfb8 <Timer::Timer(char const*)>
c001e8ad:	83 c4 10             	add    esp,0x10
c001e8b0:	ba d8 2e 02 c0       	mov    edx,0xc0022ed8
c001e8b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8b9:	89 10                	mov    DWORD PTR [eax],edx
c001e8bb:	90                   	nop
c001e8bc:	83 c4 0c             	add    esp,0xc
c001e8bf:	c3                   	ret    

c001e8c0 <PIT::write(int)>:
c001e8c0:	83 ec 10             	sub    esp,0x10
c001e8c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e8c7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e8cb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e8d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e8d5:	a3 04 a1 02 c0       	mov    ds:0xc002a104,eax
c001e8da:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e8df:	89 c2                	mov    edx,eax
c001e8e1:	c1 fa 1f             	sar    edx,0x1f
c001e8e4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e8e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e8ec:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e8f3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e8f8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e8fc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e901:	ee                   	out    dx,al
c001e902:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e906:	0f b6 c0             	movzx  eax,al
c001e909:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e910:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e914:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e918:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e91d:	ee                   	out    dx,al
c001e91e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e922:	c1 f8 08             	sar    eax,0x8
c001e925:	0f b6 c0             	movzx  eax,al
c001e928:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e92f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e933:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e937:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e93c:	ee                   	out    dx,al
c001e93d:	90                   	nop
c001e93e:	83 c4 10             	add    esp,0x10
c001e941:	c3                   	ret    
c001e942:	66 90                	xchg   ax,ax

c001e944 <pitHandler(regs*, void*)>:
c001e944:	83 ec 0c             	sub    esp,0xc
c001e947:	8b 0d 04 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a104
c001e94d:	b8 10 27 00 00       	mov    eax,0x2710
c001e952:	89 c2                	mov    edx,eax
c001e954:	c1 fa 1f             	sar    edx,0x1f
c001e957:	f7 f9                	idiv   ecx
c001e959:	83 ec 0c             	sub    esp,0xc
c001e95c:	50                   	push   eax
c001e95d:	e8 22 f7 fe ff       	call   c000e084 <timerHandler(unsigned int)>
c001e962:	83 c4 10             	add    esp,0x10
c001e965:	90                   	nop
c001e966:	83 c4 0c             	add    esp,0xc
c001e969:	c3                   	ret    
c001e96a:	66 90                	xchg   ax,ax

c001e96c <PIT::open(int, int, void*)>:
c001e96c:	83 ec 0c             	sub    esp,0xc
c001e96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e973:	8b 00                	mov    eax,DWORD PTR [eax]
c001e975:	83 c0 24             	add    eax,0x24
c001e978:	8b 00                	mov    eax,DWORD PTR [eax]
c001e97a:	83 ec 08             	sub    esp,0x8
c001e97d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e981:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e985:	ff d0                	call   eax
c001e987:	83 c4 10             	add    esp,0x10
c001e98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e98e:	83 ec 0c             	sub    esp,0xc
c001e991:	6a 00                	push   0x0
c001e993:	6a 01                	push   0x1
c001e995:	68 44 e9 01 c0       	push   0xc001e944
c001e99a:	6a 00                	push   0x0
c001e99c:	50                   	push   eax
c001e99d:	e8 2c dc fe ff       	call   c000c5ce <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e9a2:	83 c4 20             	add    esp,0x20
c001e9a5:	89 c2                	mov    edx,eax
c001e9a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ab:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e9b1:	b8 00 00 00 00       	mov    eax,0x0
c001e9b6:	83 c4 0c             	add    esp,0xc
c001e9b9:	c3                   	ret    
c001e9ba:	66 90                	xchg   ax,ax

c001e9bc <PIT::close(int, int, void*)>:
c001e9bc:	83 ec 0c             	sub    esp,0xc
c001e9bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e9cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d1:	6a 01                	push   0x1
c001e9d3:	68 44 e9 01 c0       	push   0xc001e944
c001e9d8:	6a 00                	push   0x0
c001e9da:	50                   	push   eax
c001e9db:	e8 24 dc fe ff       	call   c000c604 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e9e0:	83 c4 10             	add    esp,0x10
c001e9e3:	b8 00 00 00 00       	mov    eax,0x0
c001e9e8:	83 c4 0c             	add    esp,0xc
c001e9eb:	c3                   	ret    

c001e9ec <PIT::PIT()>:
c001e9ec:	83 ec 0c             	sub    esp,0xc
c001e9ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f3:	83 ec 08             	sub    esp,0x8
c001e9f6:	68 00 2f 02 c0       	push   0xc0022f00
c001e9fb:	50                   	push   eax
c001e9fc:	e8 b7 f5 fe ff       	call   c000dfb8 <Timer::Timer(char const*)>
c001ea01:	83 c4 10             	add    esp,0x10
c001ea04:	ba 28 2f 02 c0       	mov    edx,0xc0022f28
c001ea09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea0d:	89 10                	mov    DWORD PTR [eax],edx
c001ea0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea13:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea19:	0f b6 d0             	movzx  edx,al
c001ea1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea20:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ea27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea2b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea31:	0f b6 d0             	movzx  edx,al
c001ea34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea38:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ea3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea41:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea47:	8d 50 01             	lea    edx,[eax+0x1]
c001ea4a:	88 d1                	mov    cl,dl
c001ea4c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea50:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ea56:	0f b6 d0             	movzx  edx,al
c001ea59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea5d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ea61:	83 e1 3f             	and    ecx,0x3f
c001ea64:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea68:	90                   	nop
c001ea69:	83 c4 0c             	add    esp,0xc
c001ea6c:	c3                   	ret    
c001ea6d:	66 90                	xchg   ax,ax
c001ea6f:	90                   	nop

c001ea70 <avxDetect>:
c001ea70:	b8 01 00 00 00       	mov    eax,0x1
c001ea75:	0f a2                	cpuid  
c001ea77:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001ea7d:	74 15                	je     c001ea94 <avxDetect.noAVX>
c001ea7f:	b8 01 00 00 00       	mov    eax,0x1
c001ea84:	0f a2                	cpuid  
c001ea86:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001ea8c:	74 06                	je     c001ea94 <avxDetect.noAVX>
c001ea8e:	b8 01 00 00 00       	mov    eax,0x1
c001ea93:	c3                   	ret    

c001ea94 <avxDetect.noAVX>:
c001ea94:	b8 00 00 00 00       	mov    eax,0x0
c001ea99:	c3                   	ret    

c001ea9a <avxSave>:
c001ea9a:	53                   	push   ebx
c001ea9b:	52                   	push   edx
c001ea9c:	31 c0                	xor    eax,eax
c001ea9e:	48                   	dec    eax
c001ea9f:	89 c2                	mov    edx,eax
c001eaa1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eaa5:	0f ae 23             	xsave  [ebx]
c001eaa8:	5a                   	pop    edx
c001eaa9:	5b                   	pop    ebx
c001eaaa:	c3                   	ret    

c001eaab <avxLoad>:
c001eaab:	53                   	push   ebx
c001eaac:	52                   	push   edx
c001eaad:	31 c0                	xor    eax,eax
c001eaaf:	48                   	dec    eax
c001eab0:	89 c2                	mov    edx,eax
c001eab2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eab6:	0f ae 2b             	xrstor [ebx]
c001eab9:	5a                   	pop    edx
c001eaba:	5b                   	pop    ebx
c001eabb:	c3                   	ret    

c001eabc <avxInit>:
c001eabc:	e8 67 03 00 00       	call   c001ee28 <sseInit>
c001eac1:	50                   	push   eax
c001eac2:	51                   	push   ecx
c001eac3:	0f 20 e0             	mov    eax,cr4
c001eac6:	0d 00 00 04 00       	or     eax,0x40000
c001eacb:	0f 22 e0             	mov    cr4,eax
c001eace:	31 c9                	xor    ecx,ecx
c001ead0:	0f 01 d0             	xgetbv 
c001ead3:	0d 07 00 00 00       	or     eax,0x7
c001ead8:	0f 01 d1             	xsetbv 
c001eadb:	59                   	pop    ecx
c001eadc:	58                   	pop    eax
c001eadd:	c3                   	ret    

c001eade <avxClose>:
c001eade:	c3                   	ret    

c001eadf <wouldSheSayYes>:
c001eadf:	c3                   	ret    
c001eae0:	49                   	dec    ecx
c001eae1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001eae5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001eae9:	75 20                	jne    c001eb0b <isr0+0xb>
c001eaeb:	4e                   	dec    esi
c001eaec:	79 61                	jns    c001eb4f <isr7+0x3>
c001eaee:	68 2e 2e 2e 00       	push   0x2e2e2e
c001eaf3:	66 90                	xchg   ax,ax
c001eaf5:	66 90                	xchg   ax,ax
c001eaf7:	66 90                	xchg   ax,ax
c001eaf9:	66 90                	xchg   ax,ax
c001eafb:	66 90                	xchg   ax,ax
c001eafd:	66 90                	xchg   ax,ax
c001eaff:	90                   	nop

c001eb00 <isr0>:
c001eb00:	fa                   	cli    
c001eb01:	68 00 00 00 00       	push   0x0
c001eb06:	68 00 00 00 00       	push   0x0
c001eb0b:	e9 56 01 00 00       	jmp    c001ec66 <int_common_stub>

c001eb10 <isr1>:
c001eb10:	fa                   	cli    
c001eb11:	6a 00                	push   0x0
c001eb13:	6a 01                	push   0x1
c001eb15:	e9 4c 01 00 00       	jmp    c001ec66 <int_common_stub>

c001eb1a <isr2>:
c001eb1a:	fa                   	cli    
c001eb1b:	6a 00                	push   0x0
c001eb1d:	6a 02                	push   0x2
c001eb1f:	e9 42 01 00 00       	jmp    c001ec66 <int_common_stub>

c001eb24 <isr3>:
c001eb24:	fa                   	cli    
c001eb25:	6a 00                	push   0x0
c001eb27:	6a 03                	push   0x3
c001eb29:	e9 38 01 00 00       	jmp    c001ec66 <int_common_stub>

c001eb2e <isr4>:
c001eb2e:	fa                   	cli    
c001eb2f:	6a 00                	push   0x0
c001eb31:	6a 04                	push   0x4
c001eb33:	e9 2e 01 00 00       	jmp    c001ec66 <int_common_stub>

c001eb38 <isr5>:
c001eb38:	fa                   	cli    
c001eb39:	6a 00                	push   0x0
c001eb3b:	6a 05                	push   0x5
c001eb3d:	e9 24 01 00 00       	jmp    c001ec66 <int_common_stub>

c001eb42 <isr6>:
c001eb42:	fa                   	cli    
c001eb43:	6a 00                	push   0x0
c001eb45:	6a 06                	push   0x6
c001eb47:	e9 1a 01 00 00       	jmp    c001ec66 <int_common_stub>

c001eb4c <isr7>:
c001eb4c:	fa                   	cli    
c001eb4d:	6a 00                	push   0x0
c001eb4f:	6a 07                	push   0x7
c001eb51:	e9 10 01 00 00       	jmp    c001ec66 <int_common_stub>

c001eb56 <isr8>:
c001eb56:	fa                   	cli    
c001eb57:	6a 08                	push   0x8
c001eb59:	e9 08 01 00 00       	jmp    c001ec66 <int_common_stub>

c001eb5e <isr9>:
c001eb5e:	fa                   	cli    
c001eb5f:	6a 00                	push   0x0
c001eb61:	6a 09                	push   0x9
c001eb63:	e9 fe 00 00 00       	jmp    c001ec66 <int_common_stub>

c001eb68 <isr10>:
c001eb68:	fa                   	cli    
c001eb69:	6a 0a                	push   0xa
c001eb6b:	e9 f6 00 00 00       	jmp    c001ec66 <int_common_stub>

c001eb70 <isr11>:
c001eb70:	fa                   	cli    
c001eb71:	6a 0b                	push   0xb
c001eb73:	e9 ee 00 00 00       	jmp    c001ec66 <int_common_stub>

c001eb78 <isr12>:
c001eb78:	fa                   	cli    
c001eb79:	6a 0c                	push   0xc
c001eb7b:	e9 e6 00 00 00       	jmp    c001ec66 <int_common_stub>

c001eb80 <isr13>:
c001eb80:	fa                   	cli    
c001eb81:	6a 0d                	push   0xd
c001eb83:	53                   	push   ebx
c001eb84:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eb88:	81 fb 56 ed 01 c0    	cmp    ebx,0xc001ed56
c001eb8e:	5b                   	pop    ebx
c001eb8f:	0f 84 c3 01 00 00    	je     c001ed58 <finishSignal2>
c001eb95:	e9 cc 00 00 00       	jmp    c001ec66 <int_common_stub>

c001eb9a <isr14>:
c001eb9a:	fa                   	cli    
c001eb9b:	6a 0e                	push   0xe
c001eb9d:	e9 c4 00 00 00       	jmp    c001ec66 <int_common_stub>

c001eba2 <isr15>:
c001eba2:	fa                   	cli    
c001eba3:	6a 00                	push   0x0
c001eba5:	6a 0f                	push   0xf
c001eba7:	e9 ba 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ebac <isr16>:
c001ebac:	fa                   	cli    
c001ebad:	6a 00                	push   0x0
c001ebaf:	6a 10                	push   0x10
c001ebb1:	e9 b0 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ebb6 <isr17>:
c001ebb6:	fa                   	cli    
c001ebb7:	6a 00                	push   0x0
c001ebb9:	6a 11                	push   0x11
c001ebbb:	e9 a6 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ebc0 <isr18>:
c001ebc0:	fa                   	cli    
c001ebc1:	6a 00                	push   0x0
c001ebc3:	6a 12                	push   0x12
c001ebc5:	e9 9c 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ebca <irq3>:
c001ebca:	fa                   	cli    
c001ebcb:	6a 00                	push   0x0
c001ebcd:	6a 23                	push   0x23
c001ebcf:	e9 92 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ebd4 <irq4>:
c001ebd4:	fa                   	cli    
c001ebd5:	6a 00                	push   0x0
c001ebd7:	6a 24                	push   0x24
c001ebd9:	e9 88 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ebde <irq5>:
c001ebde:	fa                   	cli    
c001ebdf:	6a 00                	push   0x0
c001ebe1:	6a 25                	push   0x25
c001ebe3:	e9 7e 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ebe8 <irq6>:
c001ebe8:	fa                   	cli    
c001ebe9:	6a 00                	push   0x0
c001ebeb:	6a 26                	push   0x26
c001ebed:	e9 74 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ebf2 <irq7>:
c001ebf2:	fa                   	cli    
c001ebf3:	6a 00                	push   0x0
c001ebf5:	6a 27                	push   0x27
c001ebf7:	e9 6a 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ebfc <irq8>:
c001ebfc:	fa                   	cli    
c001ebfd:	6a 00                	push   0x0
c001ebff:	6a 28                	push   0x28
c001ec01:	e9 60 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ec06 <irq9>:
c001ec06:	fa                   	cli    
c001ec07:	6a 00                	push   0x0
c001ec09:	6a 29                	push   0x29
c001ec0b:	e9 56 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ec10 <irq10>:
c001ec10:	fa                   	cli    
c001ec11:	6a 00                	push   0x0
c001ec13:	6a 2a                	push   0x2a
c001ec15:	e9 4c 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ec1a <irq11>:
c001ec1a:	fa                   	cli    
c001ec1b:	6a 00                	push   0x0
c001ec1d:	6a 2b                	push   0x2b
c001ec1f:	e9 42 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ec24 <irq12>:
c001ec24:	fa                   	cli    
c001ec25:	6a 00                	push   0x0
c001ec27:	6a 2c                	push   0x2c
c001ec29:	e9 38 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ec2e <irq13>:
c001ec2e:	fa                   	cli    
c001ec2f:	6a 00                	push   0x0
c001ec31:	6a 2d                	push   0x2d
c001ec33:	e9 2e 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ec38 <irq14>:
c001ec38:	fa                   	cli    
c001ec39:	6a 00                	push   0x0
c001ec3b:	6a 2e                	push   0x2e
c001ec3d:	e9 24 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ec42 <irq15>:
c001ec42:	fa                   	cli    
c001ec43:	6a 00                	push   0x0
c001ec45:	6a 2f                	push   0x2f
c001ec47:	e9 1a 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ec4c <irq1>:
c001ec4c:	fa                   	cli    
c001ec4d:	6a 00                	push   0x0
c001ec4f:	6a 21                	push   0x21
c001ec51:	eb 13                	jmp    c001ec66 <int_common_stub>

c001ec53 <irq2>:
c001ec53:	fa                   	cli    
c001ec54:	6a 00                	push   0x0
c001ec56:	6a 22                	push   0x22
c001ec58:	eb 0c                	jmp    c001ec66 <int_common_stub>

c001ec5a <isr96>:
c001ec5a:	6a 00                	push   0x0
c001ec5c:	6a 60                	push   0x60
c001ec5e:	fb                   	sti    
c001ec5f:	eb 37                	jmp    c001ec98 <syscall_common_stub>

c001ec61 <irq0>:
c001ec61:	fa                   	cli    
c001ec62:	6a 00                	push   0x0
c001ec64:	6a 20                	push   0x20

c001ec66 <int_common_stub>:
c001ec66:	60                   	pusha  
c001ec67:	1e                   	push   ds
c001ec68:	06                   	push   es
c001ec69:	0f a0                	push   fs
c001ec6b:	0f a8                	push   gs
c001ec6d:	66 b8 10 00          	mov    ax,0x10
c001ec71:	66 8e d8             	mov    ds,ax
c001ec74:	66 8e c0             	mov    es,ax
c001ec77:	66 8e e0             	mov    fs,ax
c001ec7a:	66 8e e8             	mov    gs,ax
c001ec7d:	54                   	push   esp
c001ec7e:	fc                   	cld    
c001ec7f:	e8 48 de fe ff       	call   c000cacc <int_handler>
c001ec84:	81 c4 04 00 00 00    	add    esp,0x4
c001ec8a:	0f a9                	pop    gs
c001ec8c:	0f a1                	pop    fs
c001ec8e:	07                   	pop    es
c001ec8f:	1f                   	pop    ds
c001ec90:	61                   	popa   
c001ec91:	81 c4 08 00 00 00    	add    esp,0x8
c001ec97:	cf                   	iret   

c001ec98 <syscall_common_stub>:
c001ec98:	60                   	pusha  
c001ec99:	1e                   	push   ds
c001ec9a:	06                   	push   es
c001ec9b:	0f a0                	push   fs
c001ec9d:	0f a8                	push   gs
c001ec9f:	66 b8 10 00          	mov    ax,0x10
c001eca3:	66 8e d8             	mov    ds,ax
c001eca6:	66 8e c0             	mov    es,ax
c001eca9:	66 8e e0             	mov    fs,ax
c001ecac:	66 8e e8             	mov    gs,ax
c001ecaf:	54                   	push   esp
c001ecb0:	fc                   	cld    
c001ecb1:	e8 16 de fe ff       	call   c000cacc <int_handler>
c001ecb6:	81 c4 04 00 00 00    	add    esp,0x4
c001ecbc:	0f a9                	pop    gs
c001ecbe:	0f a1                	pop    fs
c001ecc0:	07                   	pop    es
c001ecc1:	1f                   	pop    ds
c001ecc2:	e8 9f 2b ff ff       	call   c0011866 <KiCheckSignalZ>
c001ecc7:	3d 00 00 00 00       	cmp    eax,0x0
c001eccc:	0f 84 c0 00 00 00    	je     c001ed92 <skipSignals>
c001ecd2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001ecd7:	61                   	popa   
c001ecd8:	53                   	push   ebx
c001ecd9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001ecdf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001ece2:	5b                   	pop    ebx
c001ece3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001ece8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001eceb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001ecee:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ecf1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001ecf4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001ecf7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001ecfa:	81 c4 08 00 00 00    	add    esp,0x8
c001ed00:	5e                   	pop    esi
c001ed01:	5b                   	pop    ebx
c001ed02:	59                   	pop    ecx
c001ed03:	5a                   	pop    edx
c001ed04:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001ed07:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001ed0a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001ed0d:	52                   	push   edx
c001ed0e:	51                   	push   ecx
c001ed0f:	53                   	push   ebx
c001ed10:	56                   	push   esi
c001ed11:	81 ec 08 00 00 00    	sub    esp,0x8
c001ed17:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001ed1a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001ed1d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001ed20:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ed23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ed26:	60                   	pusha  
c001ed27:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001ed2d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001ed30:	89 e3                	mov    ebx,esp
c001ed32:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001ed35:	52                   	push   edx
c001ed36:	68 56 ed 01 c0       	push   0xc001ed56
c001ed3b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001ed3e:	89 dc                	mov    esp,ebx
c001ed40:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001ed43:	68 23 00 00 00       	push   0x23
c001ed48:	51                   	push   ecx
c001ed49:	68 02 02 00 00       	push   0x202
c001ed4e:	68 1b 00 00 00       	push   0x1b
c001ed53:	ff 36                	push   DWORD PTR [esi]
c001ed55:	cf                   	iret   

c001ed56 <finishSignal>:
c001ed56:	cd 0f                	int    0xf

c001ed58 <finishSignal2>:
c001ed58:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001ed5e:	e8 80 2b ff ff       	call   c00118e3 <KiFinishSignalZ>
c001ed63:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001ed69:	68 23 00 00 00       	push   0x23
c001ed6e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ed71:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001ed74:	68 1b 00 00 00       	push   0x1b
c001ed79:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001ed7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed7f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001ed82:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001ed85:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001ed88:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001ed8b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ed8e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001ed91:	cf                   	iret   

c001ed92 <skipSignals>:
c001ed92:	61                   	popa   
c001ed93:	81 c4 08 00 00 00    	add    esp,0x8
c001ed99:	cf                   	iret   
c001ed9a:	90                   	nop
c001ed9b:	90                   	nop

c001ed9c <irq16>:
c001ed9c:	fa                   	cli    
c001ed9d:	6a 00                	push   0x0
c001ed9f:	6a 30                	push   0x30
c001eda1:	e9 c0 fe ff ff       	jmp    c001ec66 <int_common_stub>

c001eda6 <irq17>:
c001eda6:	fa                   	cli    
c001eda7:	6a 00                	push   0x0
c001eda9:	6a 31                	push   0x31
c001edab:	e9 b6 fe ff ff       	jmp    c001ec66 <int_common_stub>

c001edb0 <irq18>:
c001edb0:	fa                   	cli    
c001edb1:	6a 00                	push   0x0
c001edb3:	6a 32                	push   0x32
c001edb5:	e9 ac fe ff ff       	jmp    c001ec66 <int_common_stub>

c001edba <irq19>:
c001edba:	fa                   	cli    
c001edbb:	6a 00                	push   0x0
c001edbd:	6a 33                	push   0x33
c001edbf:	e9 a2 fe ff ff       	jmp    c001ec66 <int_common_stub>

c001edc4 <irq20>:
c001edc4:	fa                   	cli    
c001edc5:	6a 00                	push   0x0
c001edc7:	6a 34                	push   0x34
c001edc9:	e9 98 fe ff ff       	jmp    c001ec66 <int_common_stub>

c001edce <irq21>:
c001edce:	fa                   	cli    
c001edcf:	6a 00                	push   0x0
c001edd1:	6a 35                	push   0x35
c001edd3:	e9 8e fe ff ff       	jmp    c001ec66 <int_common_stub>

c001edd8 <irq22>:
c001edd8:	fa                   	cli    
c001edd9:	6a 00                	push   0x0
c001eddb:	6a 36                	push   0x36
c001eddd:	e9 84 fe ff ff       	jmp    c001ec66 <int_common_stub>

c001ede2 <irq23>:
c001ede2:	fa                   	cli    
c001ede3:	6a 00                	push   0x0
c001ede5:	6a 37                	push   0x37
c001ede7:	e9 7a fe ff ff       	jmp    c001ec66 <int_common_stub>
c001edec:	66 90                	xchg   ax,ax
c001edee:	66 90                	xchg   ax,ax

c001edf0 <i386GetRDRAND>:
c001edf0:	b9 64 00 00 00       	mov    ecx,0x64

c001edf5 <retry>:
c001edf5:	0f c7 f0             	rdrand eax
c001edf8:	72 05                	jb     c001edff <retry.done>
c001edfa:	e2 f9                	loop   c001edf5 <retry>

c001edfc <retry.fail>:
c001edfc:	31 c0                	xor    eax,eax
c001edfe:	c3                   	ret    

c001edff <retry.done>:
c001edff:	c3                   	ret    

c001ee00 <absolutelyNoChanceInHell>:
c001ee00:	b8 01 00 00 00       	mov    eax,0x1
c001ee05:	0f a2                	cpuid  
c001ee07:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001ee0d:	74 06                	je     c001ee15 <sseDetect.noSSE>
c001ee0f:	b8 01 00 00 00       	mov    eax,0x1
c001ee14:	c3                   	ret    

c001ee15 <sseDetect.noSSE>:
c001ee15:	31 c0                	xor    eax,eax
c001ee17:	c3                   	ret    

c001ee18 <sseSave>:
c001ee18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee1c:	0f ae 00             	fxsave [eax]
c001ee1f:	c3                   	ret    

c001ee20 <sseLoad>:
c001ee20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee24:	0f ae 08             	fxrstor [eax]
c001ee27:	c3                   	ret    

c001ee28 <sseInit>:
c001ee28:	e8 42 00 00 00       	call   c001ee6f <x87Init>
c001ee2d:	0f 20 e0             	mov    eax,cr4
c001ee30:	66 0d 00 06          	or     ax,0x600
c001ee34:	0f 22 e0             	mov    cr4,eax
c001ee37:	c3                   	ret    

c001ee38 <sseClose>:
c001ee38:	c3                   	ret    
c001ee39:	66 90                	xchg   ax,ax
c001ee3b:	66 90                	xchg   ax,ax
c001ee3d:	66 90                	xchg   ax,ax
c001ee3f:	90                   	nop

c001ee40 <value_37F>:
c001ee40:	7f 03                	jg     c001ee45 <value_37A+0x1>

c001ee42 <value_37E>:
c001ee42:	7e 03                	jle    c001ee47 <x87Detect+0x1>

c001ee44 <value_37A>:
c001ee44:	7a 03                	jp     c001ee49 <x87Detect+0x3>

c001ee46 <x87Detect>:
c001ee46:	b8 01 00 00 00       	mov    eax,0x1
c001ee4b:	0f a2                	cpuid  
c001ee4d:	f7 c2 01 00 00 00    	test   edx,0x1
c001ee53:	74 06                	je     c001ee5b <x87Detect.nox87>
c001ee55:	b8 01 00 00 00       	mov    eax,0x1
c001ee5a:	c3                   	ret    

c001ee5b <x87Detect.nox87>:
c001ee5b:	b8 00 00 00 00       	mov    eax,0x0
c001ee60:	c3                   	ret    

c001ee61 <x87Save>:
c001ee61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee65:	dd 30                	fnsave [eax]
c001ee67:	c3                   	ret    

c001ee68 <x87Load>:
c001ee68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee6c:	dd 20                	frstor [eax]
c001ee6e:	c3                   	ret    

c001ee6f <x87Init>:
c001ee6f:	0f 20 c0             	mov    eax,cr0
c001ee72:	66 25 fb ff          	and    ax,0xfffb
c001ee76:	66 0d 22 00          	or     ax,0x22
c001ee7a:	0f 22 c0             	mov    cr0,eax
c001ee7d:	db e3                	fninit 
c001ee7f:	0f 06                	clts   
c001ee81:	d9 2d 44 ee 01 c0    	fldcw  WORD PTR ds:0xc001ee44
c001ee87:	c3                   	ret    

c001ee88 <x87Close>:
c001ee88:	c3                   	ret    
c001ee89:	66 90                	xchg   ax,ax
c001ee8b:	90                   	nop

c001ee8c <__do_global_ctors_aux>:
c001ee8c:	a1 40 fe 01 c0       	mov    eax,ds:0xc001fe40
c001ee91:	83 f8 ff             	cmp    eax,0xffffffff
c001ee94:	74 1a                	je     c001eeb0 <__do_global_ctors_aux+0x24>
c001ee96:	55                   	push   ebp
c001ee97:	89 e5                	mov    ebp,esp
c001ee99:	53                   	push   ebx
c001ee9a:	52                   	push   edx
c001ee9b:	bb 40 fe 01 c0       	mov    ebx,0xc001fe40
c001eea0:	ff d0                	call   eax
c001eea2:	83 eb 04             	sub    ebx,0x4
c001eea5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001eea7:	83 f8 ff             	cmp    eax,0xffffffff
c001eeaa:	75 f4                	jne    c001eea0 <__do_global_ctors_aux+0x14>
c001eeac:	58                   	pop    eax
c001eead:	5b                   	pop    ebx
c001eeae:	5d                   	pop    ebp
c001eeaf:	c3                   	ret    
c001eeb0:	c3                   	ret    
c001eeb1:	66 90                	xchg   ax,ax
c001eeb3:	90                   	nop

c001eeb4 <__divdi3>:
c001eeb4:	55                   	push   ebp
c001eeb5:	57                   	push   edi
c001eeb6:	56                   	push   esi
c001eeb7:	53                   	push   ebx
c001eeb8:	83 ec 1c             	sub    esp,0x1c
c001eebb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001eebf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001eec3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001eec6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001eeca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001eece:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001eed2:	85 db                	test   ebx,ebx
c001eed4:	0f 88 8e 00 00 00    	js     c001ef68 <__divdi3+0xb4>
c001eeda:	89 dd                	mov    ebp,ebx
c001eedc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001eee4:	89 d3                	mov    ebx,edx
c001eee6:	85 d2                	test   edx,edx
c001eee8:	79 0d                	jns    c001eef7 <__divdi3+0x43>
c001eeea:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001eeee:	f7 d8                	neg    eax
c001eef0:	83 d2 00             	adc    edx,0x0
c001eef3:	f7 da                	neg    edx
c001eef5:	89 d3                	mov    ebx,edx
c001eef7:	89 c7                	mov    edi,eax
c001eef9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001eefc:	85 db                	test   ebx,ebx
c001eefe:	75 48                	jne    c001ef48 <__divdi3+0x94>
c001ef00:	39 ef                	cmp    edi,ebp
c001ef02:	76 24                	jbe    c001ef28 <__divdi3+0x74>
c001ef04:	89 ea                	mov    edx,ebp
c001ef06:	f7 f7                	div    edi
c001ef08:	89 c1                	mov    ecx,eax
c001ef0a:	31 f6                	xor    esi,esi
c001ef0c:	89 c8                	mov    eax,ecx
c001ef0e:	89 f2                	mov    edx,esi
c001ef10:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ef14:	85 c9                	test   ecx,ecx
c001ef16:	74 07                	je     c001ef1f <__divdi3+0x6b>
c001ef18:	f7 d8                	neg    eax
c001ef1a:	83 d2 00             	adc    edx,0x0
c001ef1d:	f7 da                	neg    edx
c001ef1f:	83 c4 1c             	add    esp,0x1c
c001ef22:	5b                   	pop    ebx
c001ef23:	5e                   	pop    esi
c001ef24:	5f                   	pop    edi
c001ef25:	5d                   	pop    ebp
c001ef26:	c3                   	ret    
c001ef27:	90                   	nop
c001ef28:	85 ff                	test   edi,edi
c001ef2a:	75 0b                	jne    c001ef37 <__divdi3+0x83>
c001ef2c:	b8 01 00 00 00       	mov    eax,0x1
c001ef31:	31 d2                	xor    edx,edx
c001ef33:	f7 f3                	div    ebx
c001ef35:	89 c7                	mov    edi,eax
c001ef37:	31 d2                	xor    edx,edx
c001ef39:	89 e8                	mov    eax,ebp
c001ef3b:	f7 f7                	div    edi
c001ef3d:	89 c6                	mov    esi,eax
c001ef3f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ef42:	f7 f7                	div    edi
c001ef44:	89 c1                	mov    ecx,eax
c001ef46:	eb c4                	jmp    c001ef0c <__divdi3+0x58>
c001ef48:	39 eb                	cmp    ebx,ebp
c001ef4a:	77 3c                	ja     c001ef88 <__divdi3+0xd4>
c001ef4c:	0f bd f3             	bsr    esi,ebx
c001ef4f:	83 f6 1f             	xor    esi,0x1f
c001ef52:	75 40                	jne    c001ef94 <__divdi3+0xe0>
c001ef54:	39 eb                	cmp    ebx,ebp
c001ef56:	72 09                	jb     c001ef61 <__divdi3+0xad>
c001ef58:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001ef5b:	0f 87 97 00 00 00    	ja     c001eff8 <__divdi3+0x144>
c001ef61:	b9 01 00 00 00       	mov    ecx,0x1
c001ef66:	eb a4                	jmp    c001ef0c <__divdi3+0x58>
c001ef68:	f7 d9                	neg    ecx
c001ef6a:	83 d3 00             	adc    ebx,0x0
c001ef6d:	f7 db                	neg    ebx
c001ef6f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ef72:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ef76:	89 dd                	mov    ebp,ebx
c001ef78:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001ef80:	e9 5f ff ff ff       	jmp    c001eee4 <__divdi3+0x30>
c001ef85:	8d 76 00             	lea    esi,[esi+0x0]
c001ef88:	31 f6                	xor    esi,esi
c001ef8a:	31 c9                	xor    ecx,ecx
c001ef8c:	e9 7b ff ff ff       	jmp    c001ef0c <__divdi3+0x58>
c001ef91:	8d 76 00             	lea    esi,[esi+0x0]
c001ef94:	b8 20 00 00 00       	mov    eax,0x20
c001ef99:	29 f0                	sub    eax,esi
c001ef9b:	89 f1                	mov    ecx,esi
c001ef9d:	d3 e3                	shl    ebx,cl
c001ef9f:	89 fa                	mov    edx,edi
c001efa1:	88 c1                	mov    cl,al
c001efa3:	d3 ea                	shr    edx,cl
c001efa5:	09 da                	or     edx,ebx
c001efa7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001efab:	89 f1                	mov    ecx,esi
c001efad:	d3 e7                	shl    edi,cl
c001efaf:	89 eb                	mov    ebx,ebp
c001efb1:	88 c1                	mov    cl,al
c001efb3:	d3 eb                	shr    ebx,cl
c001efb5:	89 f1                	mov    ecx,esi
c001efb7:	d3 e5                	shl    ebp,cl
c001efb9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001efbc:	88 c1                	mov    cl,al
c001efbe:	d3 ea                	shr    edx,cl
c001efc0:	09 d5                	or     ebp,edx
c001efc2:	89 e8                	mov    eax,ebp
c001efc4:	89 da                	mov    edx,ebx
c001efc6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001efca:	89 d3                	mov    ebx,edx
c001efcc:	89 c5                	mov    ebp,eax
c001efce:	f7 e7                	mul    edi
c001efd0:	39 d3                	cmp    ebx,edx
c001efd2:	72 18                	jb     c001efec <__divdi3+0x138>
c001efd4:	74 0a                	je     c001efe0 <__divdi3+0x12c>
c001efd6:	89 e9                	mov    ecx,ebp
c001efd8:	31 f6                	xor    esi,esi
c001efda:	e9 2d ff ff ff       	jmp    c001ef0c <__divdi3+0x58>
c001efdf:	90                   	nop
c001efe0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001efe3:	89 f1                	mov    ecx,esi
c001efe5:	d3 e7                	shl    edi,cl
c001efe7:	39 c7                	cmp    edi,eax
c001efe9:	73 eb                	jae    c001efd6 <__divdi3+0x122>
c001efeb:	90                   	nop
c001efec:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001efef:	31 f6                	xor    esi,esi
c001eff1:	e9 16 ff ff ff       	jmp    c001ef0c <__divdi3+0x58>
c001eff6:	66 90                	xchg   ax,ax
c001eff8:	31 c9                	xor    ecx,ecx
c001effa:	e9 0d ff ff ff       	jmp    c001ef0c <__divdi3+0x58>
c001efff:	90                   	nop

c001f000 <__moddi3>:
c001f000:	55                   	push   ebp
c001f001:	57                   	push   edi
c001f002:	56                   	push   esi
c001f003:	53                   	push   ebx
c001f004:	83 ec 2c             	sub    esp,0x2c
c001f007:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f00b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f00f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f013:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f017:	85 db                	test   ebx,ebx
c001f019:	0f 88 85 00 00 00    	js     c001f0a4 <__moddi3+0xa4>
c001f01f:	89 de                	mov    esi,ebx
c001f021:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f029:	89 d7                	mov    edi,edx
c001f02b:	85 d2                	test   edx,edx
c001f02d:	79 09                	jns    c001f038 <__moddi3+0x38>
c001f02f:	f7 d8                	neg    eax
c001f031:	83 d2 00             	adc    edx,0x0
c001f034:	f7 da                	neg    edx
c001f036:	89 d7                	mov    edi,edx
c001f038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f03c:	89 cd                	mov    ebp,ecx
c001f03e:	85 ff                	test   edi,edi
c001f040:	75 52                	jne    c001f094 <__moddi3+0x94>
c001f042:	89 c3                	mov    ebx,eax
c001f044:	39 f0                	cmp    eax,esi
c001f046:	76 24                	jbe    c001f06c <__moddi3+0x6c>
c001f048:	89 c8                	mov    eax,ecx
c001f04a:	89 f2                	mov    edx,esi
c001f04c:	f7 f3                	div    ebx
c001f04e:	89 d6                	mov    esi,edx
c001f050:	89 f0                	mov    eax,esi
c001f052:	31 d2                	xor    edx,edx
c001f054:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f058:	85 c9                	test   ecx,ecx
c001f05a:	74 07                	je     c001f063 <__moddi3+0x63>
c001f05c:	f7 d8                	neg    eax
c001f05e:	83 d2 00             	adc    edx,0x0
c001f061:	f7 da                	neg    edx
c001f063:	83 c4 2c             	add    esp,0x2c
c001f066:	5b                   	pop    ebx
c001f067:	5e                   	pop    esi
c001f068:	5f                   	pop    edi
c001f069:	5d                   	pop    ebp
c001f06a:	c3                   	ret    
c001f06b:	90                   	nop
c001f06c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f070:	85 db                	test   ebx,ebx
c001f072:	75 0d                	jne    c001f081 <__moddi3+0x81>
c001f074:	b8 01 00 00 00       	mov    eax,0x1
c001f079:	31 d2                	xor    edx,edx
c001f07b:	f7 f7                	div    edi
c001f07d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f081:	89 f0                	mov    eax,esi
c001f083:	31 d2                	xor    edx,edx
c001f085:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f089:	f7 f7                	div    edi
c001f08b:	89 e8                	mov    eax,ebp
c001f08d:	f7 f7                	div    edi
c001f08f:	89 d6                	mov    esi,edx
c001f091:	eb bd                	jmp    c001f050 <__moddi3+0x50>
c001f093:	90                   	nop
c001f094:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f098:	39 f7                	cmp    edi,esi
c001f09a:	76 20                	jbe    c001f0bc <__moddi3+0xbc>
c001f09c:	89 c8                	mov    eax,ecx
c001f09e:	89 f2                	mov    edx,esi
c001f0a0:	eb b2                	jmp    c001f054 <__moddi3+0x54>
c001f0a2:	66 90                	xchg   ax,ax
c001f0a4:	f7 d9                	neg    ecx
c001f0a6:	83 d3 00             	adc    ebx,0x0
c001f0a9:	f7 db                	neg    ebx
c001f0ab:	89 de                	mov    esi,ebx
c001f0ad:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f0b5:	e9 6f ff ff ff       	jmp    c001f029 <__moddi3+0x29>
c001f0ba:	66 90                	xchg   ax,ax
c001f0bc:	0f bd c7             	bsr    eax,edi
c001f0bf:	83 f0 1f             	xor    eax,0x1f
c001f0c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f0c6:	75 24                	jne    c001f0ec <__moddi3+0xec>
c001f0c8:	39 f7                	cmp    edi,esi
c001f0ca:	72 06                	jb     c001f0d2 <__moddi3+0xd2>
c001f0cc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f0d0:	77 0c                	ja     c001f0de <__moddi3+0xde>
c001f0d2:	89 e9                	mov    ecx,ebp
c001f0d4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f0d8:	19 fe                	sbb    esi,edi
c001f0da:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f0de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f0e2:	89 f2                	mov    edx,esi
c001f0e4:	e9 6b ff ff ff       	jmp    c001f054 <__moddi3+0x54>
c001f0e9:	8d 76 00             	lea    esi,[esi+0x0]
c001f0ec:	b8 20 00 00 00       	mov    eax,0x20
c001f0f1:	89 c2                	mov    edx,eax
c001f0f3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f0f7:	29 da                	sub    edx,ebx
c001f0f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f0fd:	88 d9                	mov    cl,bl
c001f0ff:	d3 e7                	shl    edi,cl
c001f101:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f105:	88 d1                	mov    cl,dl
c001f107:	d3 e8                	shr    eax,cl
c001f109:	09 c7                	or     edi,eax
c001f10b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f10f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f113:	89 d8                	mov    eax,ebx
c001f115:	88 d9                	mov    cl,bl
c001f117:	d3 e7                	shl    edi,cl
c001f119:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f11d:	89 f3                	mov    ebx,esi
c001f11f:	88 d1                	mov    cl,dl
c001f121:	d3 eb                	shr    ebx,cl
c001f123:	89 c7                	mov    edi,eax
c001f125:	88 c1                	mov    cl,al
c001f127:	d3 e6                	shl    esi,cl
c001f129:	89 e8                	mov    eax,ebp
c001f12b:	88 d1                	mov    cl,dl
c001f12d:	d3 e8                	shr    eax,cl
c001f12f:	09 f0                	or     eax,esi
c001f131:	89 f9                	mov    ecx,edi
c001f133:	d3 e5                	shl    ebp,cl
c001f135:	89 da                	mov    edx,ebx
c001f137:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f13b:	89 d3                	mov    ebx,edx
c001f13d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f141:	89 c6                	mov    esi,eax
c001f143:	89 d1                	mov    ecx,edx
c001f145:	39 d3                	cmp    ebx,edx
c001f147:	72 27                	jb     c001f170 <__moddi3+0x170>
c001f149:	74 21                	je     c001f16c <__moddi3+0x16c>
c001f14b:	29 f5                	sub    ebp,esi
c001f14d:	19 cb                	sbb    ebx,ecx
c001f14f:	89 de                	mov    esi,ebx
c001f151:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f155:	d3 e6                	shl    esi,cl
c001f157:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f15b:	89 f9                	mov    ecx,edi
c001f15d:	d3 ed                	shr    ebp,cl
c001f15f:	09 ee                	or     esi,ebp
c001f161:	89 f0                	mov    eax,esi
c001f163:	d3 eb                	shr    ebx,cl
c001f165:	89 da                	mov    edx,ebx
c001f167:	e9 e8 fe ff ff       	jmp    c001f054 <__moddi3+0x54>
c001f16c:	39 c5                	cmp    ebp,eax
c001f16e:	73 db                	jae    c001f14b <__moddi3+0x14b>
c001f170:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f174:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f178:	89 d1                	mov    ecx,edx
c001f17a:	89 c6                	mov    esi,eax
c001f17c:	eb cd                	jmp    c001f14b <__moddi3+0x14b>
c001f17e:	66 90                	xchg   ax,ax

c001f180 <__udivdi3>:
c001f180:	55                   	push   ebp
c001f181:	57                   	push   edi
c001f182:	56                   	push   esi
c001f183:	53                   	push   ebx
c001f184:	83 ec 1c             	sub    esp,0x1c
c001f187:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f18b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f18f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f193:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f197:	85 d2                	test   edx,edx
c001f199:	75 41                	jne    c001f1dc <__udivdi3+0x5c>
c001f19b:	39 f7                	cmp    edi,esi
c001f19d:	76 15                	jbe    c001f1b4 <__udivdi3+0x34>
c001f19f:	89 e8                	mov    eax,ebp
c001f1a1:	89 f2                	mov    edx,esi
c001f1a3:	f7 f7                	div    edi
c001f1a5:	31 db                	xor    ebx,ebx
c001f1a7:	89 da                	mov    edx,ebx
c001f1a9:	83 c4 1c             	add    esp,0x1c
c001f1ac:	5b                   	pop    ebx
c001f1ad:	5e                   	pop    esi
c001f1ae:	5f                   	pop    edi
c001f1af:	5d                   	pop    ebp
c001f1b0:	c3                   	ret    
c001f1b1:	8d 76 00             	lea    esi,[esi+0x0]
c001f1b4:	89 f9                	mov    ecx,edi
c001f1b6:	85 ff                	test   edi,edi
c001f1b8:	75 0b                	jne    c001f1c5 <__udivdi3+0x45>
c001f1ba:	b8 01 00 00 00       	mov    eax,0x1
c001f1bf:	31 d2                	xor    edx,edx
c001f1c1:	f7 f7                	div    edi
c001f1c3:	89 c1                	mov    ecx,eax
c001f1c5:	31 d2                	xor    edx,edx
c001f1c7:	89 f0                	mov    eax,esi
c001f1c9:	f7 f1                	div    ecx
c001f1cb:	89 c3                	mov    ebx,eax
c001f1cd:	89 e8                	mov    eax,ebp
c001f1cf:	f7 f1                	div    ecx
c001f1d1:	89 da                	mov    edx,ebx
c001f1d3:	83 c4 1c             	add    esp,0x1c
c001f1d6:	5b                   	pop    ebx
c001f1d7:	5e                   	pop    esi
c001f1d8:	5f                   	pop    edi
c001f1d9:	5d                   	pop    ebp
c001f1da:	c3                   	ret    
c001f1db:	90                   	nop
c001f1dc:	39 f2                	cmp    edx,esi
c001f1de:	77 1c                	ja     c001f1fc <__udivdi3+0x7c>
c001f1e0:	0f bd da             	bsr    ebx,edx
c001f1e3:	83 f3 1f             	xor    ebx,0x1f
c001f1e6:	75 24                	jne    c001f20c <__udivdi3+0x8c>
c001f1e8:	39 f2                	cmp    edx,esi
c001f1ea:	72 08                	jb     c001f1f4 <__udivdi3+0x74>
c001f1ec:	39 ef                	cmp    edi,ebp
c001f1ee:	0f 87 84 00 00 00    	ja     c001f278 <__udivdi3+0xf8>
c001f1f4:	b8 01 00 00 00       	mov    eax,0x1
c001f1f9:	eb ac                	jmp    c001f1a7 <__udivdi3+0x27>
c001f1fb:	90                   	nop
c001f1fc:	31 db                	xor    ebx,ebx
c001f1fe:	31 c0                	xor    eax,eax
c001f200:	89 da                	mov    edx,ebx
c001f202:	83 c4 1c             	add    esp,0x1c
c001f205:	5b                   	pop    ebx
c001f206:	5e                   	pop    esi
c001f207:	5f                   	pop    edi
c001f208:	5d                   	pop    ebp
c001f209:	c3                   	ret    
c001f20a:	66 90                	xchg   ax,ax
c001f20c:	b8 20 00 00 00       	mov    eax,0x20
c001f211:	29 d8                	sub    eax,ebx
c001f213:	88 d9                	mov    cl,bl
c001f215:	d3 e2                	shl    edx,cl
c001f217:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f21b:	89 fa                	mov    edx,edi
c001f21d:	88 c1                	mov    cl,al
c001f21f:	d3 ea                	shr    edx,cl
c001f221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f225:	09 d1                	or     ecx,edx
c001f227:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f22b:	88 d9                	mov    cl,bl
c001f22d:	d3 e7                	shl    edi,cl
c001f22f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f233:	89 f7                	mov    edi,esi
c001f235:	88 c1                	mov    cl,al
c001f237:	d3 ef                	shr    edi,cl
c001f239:	88 d9                	mov    cl,bl
c001f23b:	d3 e6                	shl    esi,cl
c001f23d:	89 ea                	mov    edx,ebp
c001f23f:	88 c1                	mov    cl,al
c001f241:	d3 ea                	shr    edx,cl
c001f243:	09 d6                	or     esi,edx
c001f245:	89 f0                	mov    eax,esi
c001f247:	89 fa                	mov    edx,edi
c001f249:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f24d:	89 d7                	mov    edi,edx
c001f24f:	89 c6                	mov    esi,eax
c001f251:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f255:	39 d7                	cmp    edi,edx
c001f257:	72 13                	jb     c001f26c <__udivdi3+0xec>
c001f259:	74 09                	je     c001f264 <__udivdi3+0xe4>
c001f25b:	89 f0                	mov    eax,esi
c001f25d:	31 db                	xor    ebx,ebx
c001f25f:	e9 43 ff ff ff       	jmp    c001f1a7 <__udivdi3+0x27>
c001f264:	88 d9                	mov    cl,bl
c001f266:	d3 e5                	shl    ebp,cl
c001f268:	39 c5                	cmp    ebp,eax
c001f26a:	73 ef                	jae    c001f25b <__udivdi3+0xdb>
c001f26c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f26f:	31 db                	xor    ebx,ebx
c001f271:	e9 31 ff ff ff       	jmp    c001f1a7 <__udivdi3+0x27>
c001f276:	66 90                	xchg   ax,ax
c001f278:	31 c0                	xor    eax,eax
c001f27a:	e9 28 ff ff ff       	jmp    c001f1a7 <__udivdi3+0x27>
c001f27f:	90                   	nop

c001f280 <__umoddi3>:
c001f280:	55                   	push   ebp
c001f281:	57                   	push   edi
c001f282:	56                   	push   esi
c001f283:	53                   	push   ebx
c001f284:	83 ec 1c             	sub    esp,0x1c
c001f287:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f28b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f28f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f293:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f297:	89 da                	mov    edx,ebx
c001f299:	85 c0                	test   eax,eax
c001f29b:	75 37                	jne    c001f2d4 <__umoddi3+0x54>
c001f29d:	39 df                	cmp    edi,ebx
c001f29f:	76 13                	jbe    c001f2b4 <__umoddi3+0x34>
c001f2a1:	89 f0                	mov    eax,esi
c001f2a3:	f7 f7                	div    edi
c001f2a5:	89 d0                	mov    eax,edx
c001f2a7:	31 d2                	xor    edx,edx
c001f2a9:	83 c4 1c             	add    esp,0x1c
c001f2ac:	5b                   	pop    ebx
c001f2ad:	5e                   	pop    esi
c001f2ae:	5f                   	pop    edi
c001f2af:	5d                   	pop    ebp
c001f2b0:	c3                   	ret    
c001f2b1:	8d 76 00             	lea    esi,[esi+0x0]
c001f2b4:	89 fd                	mov    ebp,edi
c001f2b6:	85 ff                	test   edi,edi
c001f2b8:	75 0b                	jne    c001f2c5 <__umoddi3+0x45>
c001f2ba:	b8 01 00 00 00       	mov    eax,0x1
c001f2bf:	31 d2                	xor    edx,edx
c001f2c1:	f7 f7                	div    edi
c001f2c3:	89 c5                	mov    ebp,eax
c001f2c5:	89 d8                	mov    eax,ebx
c001f2c7:	31 d2                	xor    edx,edx
c001f2c9:	f7 f5                	div    ebp
c001f2cb:	89 f0                	mov    eax,esi
c001f2cd:	f7 f5                	div    ebp
c001f2cf:	89 d0                	mov    eax,edx
c001f2d1:	eb d4                	jmp    c001f2a7 <__umoddi3+0x27>
c001f2d3:	90                   	nop
c001f2d4:	89 f1                	mov    ecx,esi
c001f2d6:	39 d8                	cmp    eax,ebx
c001f2d8:	76 0a                	jbe    c001f2e4 <__umoddi3+0x64>
c001f2da:	89 f0                	mov    eax,esi
c001f2dc:	83 c4 1c             	add    esp,0x1c
c001f2df:	5b                   	pop    ebx
c001f2e0:	5e                   	pop    esi
c001f2e1:	5f                   	pop    edi
c001f2e2:	5d                   	pop    ebp
c001f2e3:	c3                   	ret    
c001f2e4:	0f bd e8             	bsr    ebp,eax
c001f2e7:	83 f5 1f             	xor    ebp,0x1f
c001f2ea:	75 1c                	jne    c001f308 <__umoddi3+0x88>
c001f2ec:	39 d8                	cmp    eax,ebx
c001f2ee:	72 04                	jb     c001f2f4 <__umoddi3+0x74>
c001f2f0:	39 f7                	cmp    edi,esi
c001f2f2:	77 08                	ja     c001f2fc <__umoddi3+0x7c>
c001f2f4:	89 da                	mov    edx,ebx
c001f2f6:	29 fe                	sub    esi,edi
c001f2f8:	19 c2                	sbb    edx,eax
c001f2fa:	89 f1                	mov    ecx,esi
c001f2fc:	89 c8                	mov    eax,ecx
c001f2fe:	83 c4 1c             	add    esp,0x1c
c001f301:	5b                   	pop    ebx
c001f302:	5e                   	pop    esi
c001f303:	5f                   	pop    edi
c001f304:	5d                   	pop    ebp
c001f305:	c3                   	ret    
c001f306:	66 90                	xchg   ax,ax
c001f308:	ba 20 00 00 00       	mov    edx,0x20
c001f30d:	29 ea                	sub    edx,ebp
c001f30f:	89 e9                	mov    ecx,ebp
c001f311:	d3 e0                	shl    eax,cl
c001f313:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f317:	89 f8                	mov    eax,edi
c001f319:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f31d:	88 d1                	mov    cl,dl
c001f31f:	d3 e8                	shr    eax,cl
c001f321:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f325:	09 c1                	or     ecx,eax
c001f327:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f32b:	89 e9                	mov    ecx,ebp
c001f32d:	d3 e7                	shl    edi,cl
c001f32f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f333:	89 d8                	mov    eax,ebx
c001f335:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f339:	88 d1                	mov    cl,dl
c001f33b:	d3 e8                	shr    eax,cl
c001f33d:	89 c7                	mov    edi,eax
c001f33f:	89 e9                	mov    ecx,ebp
c001f341:	d3 e3                	shl    ebx,cl
c001f343:	89 f0                	mov    eax,esi
c001f345:	88 d1                	mov    cl,dl
c001f347:	d3 e8                	shr    eax,cl
c001f349:	09 d8                	or     eax,ebx
c001f34b:	89 e9                	mov    ecx,ebp
c001f34d:	d3 e6                	shl    esi,cl
c001f34f:	89 f3                	mov    ebx,esi
c001f351:	89 fa                	mov    edx,edi
c001f353:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f357:	89 d1                	mov    ecx,edx
c001f359:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f35d:	89 c6                	mov    esi,eax
c001f35f:	89 d7                	mov    edi,edx
c001f361:	39 d1                	cmp    ecx,edx
c001f363:	72 27                	jb     c001f38c <__umoddi3+0x10c>
c001f365:	74 21                	je     c001f388 <__umoddi3+0x108>
c001f367:	89 ca                	mov    edx,ecx
c001f369:	29 f3                	sub    ebx,esi
c001f36b:	19 fa                	sbb    edx,edi
c001f36d:	89 d0                	mov    eax,edx
c001f36f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f373:	d3 e0                	shl    eax,cl
c001f375:	89 e9                	mov    ecx,ebp
c001f377:	d3 eb                	shr    ebx,cl
c001f379:	09 d8                	or     eax,ebx
c001f37b:	d3 ea                	shr    edx,cl
c001f37d:	83 c4 1c             	add    esp,0x1c
c001f380:	5b                   	pop    ebx
c001f381:	5e                   	pop    esi
c001f382:	5f                   	pop    edi
c001f383:	5d                   	pop    ebp
c001f384:	c3                   	ret    
c001f385:	8d 76 00             	lea    esi,[esi+0x0]
c001f388:	39 c3                	cmp    ebx,eax
c001f38a:	73 db                	jae    c001f367 <__umoddi3+0xe7>
c001f38c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f390:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f394:	89 d7                	mov    edi,edx
c001f396:	89 c6                	mov    esi,eax
c001f398:	eb cd                	jmp    c001f367 <__umoddi3+0xe7>

Disassembly of section .init:

c001f39a <_init>:
c001f39a:	55                   	push   ebp
c001f39b:	89 e5                	mov    ebp,esp
c001f39d:	e8 52 0d fe ff       	call   c00000f4 <frame_dummy>
c001f3a2:	e8 e5 fa ff ff       	call   c001ee8c <__do_global_ctors_aux>
c001f3a7:	5d                   	pop    ebp
c001f3a8:	c3                   	ret    

Disassembly of section .fini:

c001f3a9 <_fini>:
c001f3a9:	55                   	push   ebp
c001f3aa:	89 e5                	mov    ebp,esp
c001f3ac:	e8 d3 0c fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f3b1:	5d                   	pop    ebp
c001f3b2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f3b4 <Computer::~Computer()>:
c001f3b4:	83 ec 0c             	sub    esp,0xc
c001f3b7:	ba d4 06 02 c0       	mov    edx,0xc00206d4
c001f3bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3c0:	89 10                	mov    DWORD PTR [eax],edx
c001f3c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3c6:	83 ec 0c             	sub    esp,0xc
c001f3c9:	50                   	push   eax
c001f3ca:	e8 55 d1 fe ff       	call   c000c524 <Device::~Device()>
c001f3cf:	83 c4 10             	add    esp,0x10
c001f3d2:	90                   	nop
c001f3d3:	83 c4 0c             	add    esp,0xc
c001f3d6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f3d8 <Computer::~Computer()>:
c001f3d8:	83 ec 0c             	sub    esp,0xc
c001f3db:	83 ec 0c             	sub    esp,0xc
c001f3de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3e2:	e8 cd ff ff ff       	call   c001f3b4 <Computer::~Computer()>
c001f3e7:	83 c4 10             	add    esp,0x10
c001f3ea:	83 ec 08             	sub    esp,0x8
c001f3ed:	68 70 01 00 00       	push   0x170
c001f3f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3f6:	e8 1d b4 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f3fb:	83 c4 10             	add    esp,0x10
c001f3fe:	83 c4 0c             	add    esp,0xc
c001f401:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f402 <idleCommon()>:
c001f402:	83 ec 0c             	sub    esp,0xc
c001f405:	fa                   	cli    
c001f406:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001f40c:	e8 ff 66 ff ff       	call   c0015b10 <schedule()>
c001f411:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001f416:	48                   	dec    eax
c001f417:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001f41c:	75 01                	jne    c001f41f <idleCommon()+0x1d>
c001f41e:	fb                   	sti    
c001f41f:	83 c4 0c             	add    esp,0xc
c001f422:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f424 <LinkedList<UnixFile>::~LinkedList()>:
c001f424:	90                   	nop
c001f425:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f426 <LinkedList<UnixFile>::LinkedList()>:
c001f426:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f42a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f434:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f43b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f43f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f446:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f44a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f450:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f454:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f45b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f45f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f466:	90                   	nop
c001f467:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f468 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f468:	83 ec 0c             	sub    esp,0xc
c001f46b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f470:	75 10                	jne    c001f482 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f472:	83 ec 0c             	sub    esp,0xc
c001f475:	68 e8 08 02 c0       	push   0xc00208e8
c001f47a:	e8 d2 1d ff ff       	call   c0011251 <KePanic(char const*)>
c001f47f:	83 c4 10             	add    esp,0x10
c001f482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f486:	8b 00                	mov    eax,DWORD PTR [eax]
c001f488:	85 c0                	test   eax,eax
c001f48a:	74 34                	je     c001f4c0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f48c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f490:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f493:	85 c0                	test   eax,eax
c001f495:	74 29                	je     c001f4c0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f49b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f49e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f4a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4ad:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f4b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f4b7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f4be:	eb 65                	jmp    c001f525 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f4c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f4c6:	85 c0                	test   eax,eax
c001f4c8:	75 4b                	jne    c001f515 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f4ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f4d1:	85 c0                	test   eax,eax
c001f4d3:	75 40                	jne    c001f515 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f4d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4dd:	89 10                	mov    DWORD PTR [eax],edx
c001f4df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4e7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f4ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f4f1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f4f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4fc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f4ff:	85 c0                	test   eax,eax
c001f501:	74 22                	je     c001f525 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f503:	83 ec 0c             	sub    esp,0xc
c001f506:	68 0a 09 02 c0       	push   0xc002090a
c001f50b:	e8 41 1d ff ff       	call   c0011251 <KePanic(char const*)>
c001f510:	83 c4 10             	add    esp,0x10
c001f513:	eb 10                	jmp    c001f525 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f515:	83 ec 0c             	sub    esp,0xc
c001f518:	68 14 09 02 c0       	push   0xc0020914
c001f51d:	e8 2f 1d ff ff       	call   c0011251 <KePanic(char const*)>
c001f522:	83 c4 10             	add    esp,0x10
c001f525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f529:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f52c:	8d 50 01             	lea    edx,[eax+0x1]
c001f52f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f533:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f536:	90                   	nop
c001f537:	83 c4 0c             	add    esp,0xc
c001f53a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f53c <LinkedList<UnixFile>::getFirstElement()>:
c001f53c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f540:	8b 00                	mov    eax,DWORD PTR [eax]
c001f542:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f544 <LinkedList<UnixFile>::removeFirst()>:
c001f544:	83 ec 0c             	sub    esp,0xc
c001f547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f54b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f54d:	85 c0                	test   eax,eax
c001f54f:	75 12                	jne    c001f563 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f551:	83 ec 0c             	sub    esp,0xc
c001f554:	68 20 09 02 c0       	push   0xc0020920
c001f559:	e8 f3 1c ff ff       	call   c0011251 <KePanic(char const*)>
c001f55e:	83 c4 10             	add    esp,0x10
c001f561:	eb 7e                	jmp    c001f5e1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f567:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f56a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f56d:	85 c0                	test   eax,eax
c001f56f:	74 10                	je     c001f581 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f571:	83 ec 0c             	sub    esp,0xc
c001f574:	68 6b 09 02 c0       	push   0xc002096b
c001f579:	e8 d3 1c ff ff       	call   c0011251 <KePanic(char const*)>
c001f57e:	83 c4 10             	add    esp,0x10
c001f581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f585:	8b 00                	mov    eax,DWORD PTR [eax]
c001f587:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f58a:	85 c0                	test   eax,eax
c001f58c:	75 33                	jne    c001f5c1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f58e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f592:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f59c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f5a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5aa:	83 f8 01             	cmp    eax,0x1
c001f5ad:	74 21                	je     c001f5d0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f5af:	83 ec 0c             	sub    esp,0xc
c001f5b2:	68 44 09 02 c0       	push   0xc0020944
c001f5b7:	e8 95 1c ff ff       	call   c0011251 <KePanic(char const*)>
c001f5bc:	83 c4 10             	add    esp,0x10
c001f5bf:	eb 0f                	jmp    c001f5d0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f5c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5c5:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5c7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f5ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5ce:	89 10                	mov    DWORD PTR [eax],edx
c001f5d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5d7:	8d 50 ff             	lea    edx,[eax-0x1]
c001f5da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5de:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f5e1:	83 c4 0c             	add    esp,0xc
c001f5e4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f5e6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f5e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f5ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5ed:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f5ee <DriverlessDevice::~DriverlessDevice()>:
c001f5ee:	ba 7c 14 02 c0       	mov    edx,0xc002147c
c001f5f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5f7:	89 10                	mov    DWORD PTR [eax],edx
c001f5f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5fd:	50                   	push   eax
c001f5fe:	e8 21 cf fe ff       	call   c000c524 <Device::~Device()>
c001f603:	83 c4 04             	add    esp,0x4
c001f606:	90                   	nop
c001f607:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f608 <DriverlessDevice::~DriverlessDevice()>:
c001f608:	83 ec 0c             	sub    esp,0xc
c001f60b:	83 ec 0c             	sub    esp,0xc
c001f60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f612:	e8 d7 ff ff ff       	call   c001f5ee <DriverlessDevice::~DriverlessDevice()>
c001f617:	83 c4 10             	add    esp,0x10
c001f61a:	83 ec 08             	sub    esp,0x8
c001f61d:	68 58 01 00 00       	push   0x158
c001f622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f626:	e8 ed b1 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f62b:	83 c4 10             	add    esp,0x10
c001f62e:	83 c4 0c             	add    esp,0xc
c001f631:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f632 <LinkedList<Device>::addElement(Device*)>:
c001f632:	83 ec 0c             	sub    esp,0xc
c001f635:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f63a:	75 10                	jne    c001f64c <LinkedList<Device>::addElement(Device*)+0x1a>
c001f63c:	83 ec 0c             	sub    esp,0xc
c001f63f:	68 e8 08 02 c0       	push   0xc00208e8
c001f644:	e8 08 1c ff ff       	call   c0011251 <KePanic(char const*)>
c001f649:	83 c4 10             	add    esp,0x10
c001f64c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f650:	8b 00                	mov    eax,DWORD PTR [eax]
c001f652:	85 c0                	test   eax,eax
c001f654:	74 3a                	je     c001f690 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f65a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f65d:	85 c0                	test   eax,eax
c001f65f:	74 2f                	je     c001f690 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f665:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f668:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f66c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f676:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f67a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f67d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f681:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f684:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f68e:	eb 68                	jmp    c001f6f8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f694:	8b 00                	mov    eax,DWORD PTR [eax]
c001f696:	85 c0                	test   eax,eax
c001f698:	75 4e                	jne    c001f6e8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f69a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f69e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6a1:	85 c0                	test   eax,eax
c001f6a3:	75 43                	jne    c001f6e8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f6a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6ad:	89 10                	mov    DWORD PTR [eax],edx
c001f6af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6b7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f6ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6c1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f6cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6cf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6d2:	85 c0                	test   eax,eax
c001f6d4:	74 22                	je     c001f6f8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f6d6:	83 ec 0c             	sub    esp,0xc
c001f6d9:	68 0a 09 02 c0       	push   0xc002090a
c001f6de:	e8 6e 1b ff ff       	call   c0011251 <KePanic(char const*)>
c001f6e3:	83 c4 10             	add    esp,0x10
c001f6e6:	eb 10                	jmp    c001f6f8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f6e8:	83 ec 0c             	sub    esp,0xc
c001f6eb:	68 14 09 02 c0       	push   0xc0020914
c001f6f0:	e8 5c 1b ff ff       	call   c0011251 <KePanic(char const*)>
c001f6f5:	83 c4 10             	add    esp,0x10
c001f6f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6fc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6ff:	8d 50 01             	lea    edx,[eax+0x1]
c001f702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f706:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f709:	90                   	nop
c001f70a:	83 c4 0c             	add    esp,0xc
c001f70d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f70e <LinkedList<Device>::LinkedList()>:
c001f70e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f712:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f718:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f71c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f723:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f727:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f72e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f732:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f738:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f73c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f743:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f747:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f74e:	90                   	nop
c001f74f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f750 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f754:	8b 00                	mov    eax,DWORD PTR [eax]
c001f756:	85 c0                	test   eax,eax
c001f758:	75 0e                	jne    c001f768 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f75a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f75e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f761:	85 c0                	test   eax,eax
c001f763:	75 03                	jne    c001f768 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f765:	b0 01                	mov    al,0x1
c001f767:	c3                   	ret    
c001f768:	b0 00                	mov    al,0x0
c001f76a:	90                   	nop
c001f76b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f76c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f770:	8b 00                	mov    eax,DWORD PTR [eax]
c001f772:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f774 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f774:	83 ec 0c             	sub    esp,0xc
c001f777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f77b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f77d:	85 c0                	test   eax,eax
c001f77f:	75 17                	jne    c001f798 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f781:	83 ec 0c             	sub    esp,0xc
c001f784:	68 20 09 02 c0       	push   0xc0020920
c001f789:	e8 c3 1a ff ff       	call   c0011251 <KePanic(char const*)>
c001f78e:	83 c4 10             	add    esp,0x10
c001f791:	e9 96 00 00 00       	jmp    c001f82c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001f796:	66 90                	xchg   ax,ax
c001f798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f79c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f79f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f7a2:	85 c0                	test   eax,eax
c001f7a4:	0f 95 c0             	setne  al
c001f7a7:	0f b6 c0             	movzx  eax,al
c001f7aa:	85 c0                	test   eax,eax
c001f7ac:	74 12                	je     c001f7c0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001f7ae:	83 ec 0c             	sub    esp,0xc
c001f7b1:	68 6b 09 02 c0       	push   0xc002096b
c001f7b6:	e8 96 1a ff ff       	call   c0011251 <KePanic(char const*)>
c001f7bb:	83 c4 10             	add    esp,0x10
c001f7be:	66 90                	xchg   ax,ax
c001f7c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7c6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f7c9:	85 c0                	test   eax,eax
c001f7cb:	0f 94 c0             	sete   al
c001f7ce:	0f b6 c0             	movzx  eax,al
c001f7d1:	85 c0                	test   eax,eax
c001f7d3:	74 33                	je     c001f808 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f7d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f7df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f7ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7f1:	83 f8 01             	cmp    eax,0x1
c001f7f4:	74 22                	je     c001f818 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f7f6:	83 ec 0c             	sub    esp,0xc
c001f7f9:	68 44 09 02 c0       	push   0xc0020944
c001f7fe:	e8 4e 1a ff ff       	call   c0011251 <KePanic(char const*)>
c001f803:	83 c4 10             	add    esp,0x10
c001f806:	eb 10                	jmp    c001f818 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f80c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f80e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f815:	89 10                	mov    DWORD PTR [eax],edx
c001f817:	90                   	nop
c001f818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f81c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f81f:	8d 50 ff             	lea    edx,[eax-0x1]
c001f822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f826:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f829:	8d 76 00             	lea    esi,[esi+0x0]
c001f82c:	83 c4 0c             	add    esp,0xc
c001f82f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f830:	83 ec 0c             	sub    esp,0xc
c001f833:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f838:	75 12                	jne    c001f84c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f83a:	83 ec 0c             	sub    esp,0xc
c001f83d:	68 e8 08 02 c0       	push   0xc00208e8
c001f842:	e8 0a 1a ff ff       	call   c0011251 <KePanic(char const*)>
c001f847:	83 c4 10             	add    esp,0x10
c001f84a:	66 90                	xchg   ax,ax
c001f84c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f850:	8b 00                	mov    eax,DWORD PTR [eax]
c001f852:	85 c0                	test   eax,eax
c001f854:	74 36                	je     c001f88c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f85a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f85d:	85 c0                	test   eax,eax
c001f85f:	74 2b                	je     c001f88c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f865:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f868:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f86c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f86f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f873:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f877:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f87a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f87e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f881:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f888:	eb 6a                	jmp    c001f8f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f88a:	66 90                	xchg   ax,ax
c001f88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f890:	8b 00                	mov    eax,DWORD PTR [eax]
c001f892:	85 c0                	test   eax,eax
c001f894:	75 4e                	jne    c001f8e4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f89a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f89d:	85 c0                	test   eax,eax
c001f89f:	75 43                	jne    c001f8e4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f8a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8a9:	89 10                	mov    DWORD PTR [eax],edx
c001f8ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8b3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f8b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8bd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f8c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8cb:	85 c0                	test   eax,eax
c001f8cd:	74 25                	je     c001f8f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f8cf:	83 ec 0c             	sub    esp,0xc
c001f8d2:	68 0a 09 02 c0       	push   0xc002090a
c001f8d7:	e8 75 19 ff ff       	call   c0011251 <KePanic(char const*)>
c001f8dc:	83 c4 10             	add    esp,0x10
c001f8df:	eb 13                	jmp    c001f8f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f8e1:	8d 76 00             	lea    esi,[esi+0x0]
c001f8e4:	83 ec 0c             	sub    esp,0xc
c001f8e7:	68 14 09 02 c0       	push   0xc0020914
c001f8ec:	e8 60 19 ff ff       	call   c0011251 <KePanic(char const*)>
c001f8f1:	83 c4 10             	add    esp,0x10
c001f8f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8fb:	8d 50 01             	lea    edx,[eax+0x1]
c001f8fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f902:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f905:	90                   	nop
c001f906:	83 c4 0c             	add    esp,0xc
c001f909:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f90c <ACPI::~ACPI()>:
c001f90c:	83 ec 0c             	sub    esp,0xc
c001f90f:	ba 64 1a 02 c0       	mov    edx,0xc0021a64
c001f914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f918:	89 10                	mov    DWORD PTR [eax],edx
c001f91a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f91e:	83 ec 0c             	sub    esp,0xc
c001f921:	50                   	push   eax
c001f922:	e8 fd cb fe ff       	call   c000c524 <Device::~Device()>
c001f927:	83 c4 10             	add    esp,0x10
c001f92a:	90                   	nop
c001f92b:	83 c4 0c             	add    esp,0xc
c001f92e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f930 <ACPI::~ACPI()>:
c001f930:	83 ec 0c             	sub    esp,0xc
c001f933:	83 ec 0c             	sub    esp,0xc
c001f936:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f93a:	e8 cd ff ff ff       	call   c001f90c <ACPI::~ACPI()>
c001f93f:	83 c4 10             	add    esp,0x10
c001f942:	83 ec 08             	sub    esp,0x8
c001f945:	68 64 12 00 00       	push   0x1264
c001f94a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f94e:	e8 c5 ae fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f953:	83 c4 10             	add    esp,0x10
c001f956:	83 c4 0c             	add    esp,0xc
c001f959:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001f95c <LinkedList<Device>::~LinkedList()>:
c001f95c:	90                   	nop
c001f95d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001f960 <LinkedList<Device>::isEmpty()>:
c001f960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f964:	8b 00                	mov    eax,DWORD PTR [eax]
c001f966:	85 c0                	test   eax,eax
c001f968:	75 0e                	jne    c001f978 <LinkedList<Device>::isEmpty()+0x18>
c001f96a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f96e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f971:	85 c0                	test   eax,eax
c001f973:	75 03                	jne    c001f978 <LinkedList<Device>::isEmpty()+0x18>
c001f975:	b0 01                	mov    al,0x1
c001f977:	c3                   	ret    
c001f978:	b0 00                	mov    al,0x0
c001f97a:	90                   	nop
c001f97b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001f97c <LinkedList<Device>::getFirstElement()>:
c001f97c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f980:	8b 00                	mov    eax,DWORD PTR [eax]
c001f982:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001f984 <LinkedList<Device>::removeFirst()>:
c001f984:	83 ec 0c             	sub    esp,0xc
c001f987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f98b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f98d:	85 c0                	test   eax,eax
c001f98f:	75 17                	jne    c001f9a8 <LinkedList<Device>::removeFirst()+0x24>
c001f991:	83 ec 0c             	sub    esp,0xc
c001f994:	68 20 09 02 c0       	push   0xc0020920
c001f999:	e8 b3 18 ff ff       	call   c0011251 <KePanic(char const*)>
c001f99e:	83 c4 10             	add    esp,0x10
c001f9a1:	e9 92 00 00 00       	jmp    c001fa38 <LinkedList<Device>::removeFirst()+0xb4>
c001f9a6:	66 90                	xchg   ax,ax
c001f9a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9af:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f9b5:	85 c0                	test   eax,eax
c001f9b7:	74 13                	je     c001f9cc <LinkedList<Device>::removeFirst()+0x48>
c001f9b9:	83 ec 0c             	sub    esp,0xc
c001f9bc:	68 6b 09 02 c0       	push   0xc002096b
c001f9c1:	e8 8b 18 ff ff       	call   c0011251 <KePanic(char const*)>
c001f9c6:	83 c4 10             	add    esp,0x10
c001f9c9:	8d 76 00             	lea    esi,[esi+0x0]
c001f9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9d2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f9d8:	85 c0                	test   eax,eax
c001f9da:	75 34                	jne    c001fa10 <LinkedList<Device>::removeFirst()+0x8c>
c001f9dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9f5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9f8:	83 f8 01             	cmp    eax,0x1
c001f9fb:	74 27                	je     c001fa24 <LinkedList<Device>::removeFirst()+0xa0>
c001f9fd:	83 ec 0c             	sub    esp,0xc
c001fa00:	68 44 09 02 c0       	push   0xc0020944
c001fa05:	e8 47 18 ff ff       	call   c0011251 <KePanic(char const*)>
c001fa0a:	83 c4 10             	add    esp,0x10
c001fa0d:	eb 15                	jmp    c001fa24 <LinkedList<Device>::removeFirst()+0xa0>
c001fa0f:	90                   	nop
c001fa10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa14:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa16:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001fa1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa20:	89 10                	mov    DWORD PTR [eax],edx
c001fa22:	66 90                	xchg   ax,ax
c001fa24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa28:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa2b:	8d 50 ff             	lea    edx,[eax-0x1]
c001fa2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa32:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa35:	8d 76 00             	lea    esi,[esi+0x0]
c001fa38:	83 c4 0c             	add    esp,0xc
c001fa3b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fa3c <CPU::~CPU()>:
c001fa3c:	83 ec 0c             	sub    esp,0xc
c001fa3f:	ba 0c 1c 02 c0       	mov    edx,0xc0021c0c
c001fa44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa48:	89 10                	mov    DWORD PTR [eax],edx
c001fa4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa4e:	83 ec 0c             	sub    esp,0xc
c001fa51:	50                   	push   eax
c001fa52:	e8 cd ca fe ff       	call   c000c524 <Device::~Device()>
c001fa57:	83 c4 10             	add    esp,0x10
c001fa5a:	90                   	nop
c001fa5b:	83 c4 0c             	add    esp,0xc
c001fa5e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fa60 <CPU::~CPU()>:
c001fa60:	83 ec 0c             	sub    esp,0xc
c001fa63:	83 ec 0c             	sub    esp,0xc
c001fa66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa6a:	e8 cd ff ff ff       	call   c001fa3c <CPU::~CPU()>
c001fa6f:	83 c4 10             	add    esp,0x10
c001fa72:	83 ec 08             	sub    esp,0x8
c001fa75:	68 94 11 00 00       	push   0x1194
c001fa7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa7e:	e8 95 ad fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fa83:	83 c4 10             	add    esp,0x10
c001fa86:	83 c4 0c             	add    esp,0xc
c001fa89:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fa8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fa8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa90:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fa93:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fa94 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fa94:	90                   	nop
c001fa95:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fa98 <ThreadControlBlock::ThreadControlBlock()>:
c001fa98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa9c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001faa3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faa7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001faae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fab2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fab9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fabd:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fac8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001facf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fad3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001fad7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fadb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001fadf:	90                   	nop
c001fae0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fae4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fae4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fae8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001faee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faf2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001faf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fafd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb08:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb12:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb1d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb24:	90                   	nop
c001fb25:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fb26 <PCI::~PCI()>:
c001fb26:	83 ec 0c             	sub    esp,0xc
c001fb29:	ba ec 2a 02 c0       	mov    edx,0xc0022aec
c001fb2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb32:	89 10                	mov    DWORD PTR [eax],edx
c001fb34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb38:	83 ec 0c             	sub    esp,0xc
c001fb3b:	50                   	push   eax
c001fb3c:	e8 7b c4 fe ff       	call   c000bfbc <Bus::~Bus()>
c001fb41:	83 c4 10             	add    esp,0x10
c001fb44:	90                   	nop
c001fb45:	83 c4 0c             	add    esp,0xc
c001fb48:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fb4a <PCI::~PCI()>:
c001fb4a:	83 ec 0c             	sub    esp,0xc
c001fb4d:	83 ec 0c             	sub    esp,0xc
c001fb50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb54:	e8 cd ff ff ff       	call   c001fb26 <PCI::~PCI()>
c001fb59:	83 c4 10             	add    esp,0x10
c001fb5c:	83 ec 08             	sub    esp,0x8
c001fb5f:	68 5c 01 00 00       	push   0x15c
c001fb64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb68:	e8 ab ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fb6d:	83 c4 10             	add    esp,0x10
c001fb70:	83 c4 0c             	add    esp,0xc
c001fb73:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fb74 <IDE::~IDE()>:
c001fb74:	83 ec 0c             	sub    esp,0xc
c001fb77:	ba a0 2b 02 c0       	mov    edx,0xc0022ba0
c001fb7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb80:	89 10                	mov    DWORD PTR [eax],edx
c001fb82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb86:	83 ec 0c             	sub    esp,0xc
c001fb89:	50                   	push   eax
c001fb8a:	e8 0d ce fe ff       	call   c000c99c <HardDiskController::~HardDiskController()>
c001fb8f:	83 c4 10             	add    esp,0x10
c001fb92:	90                   	nop
c001fb93:	83 c4 0c             	add    esp,0xc
c001fb96:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fb98 <IDE::~IDE()>:
c001fb98:	83 ec 0c             	sub    esp,0xc
c001fb9b:	83 ec 0c             	sub    esp,0xc
c001fb9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fba2:	e8 cd ff ff ff       	call   c001fb74 <IDE::~IDE()>
c001fba7:	83 c4 10             	add    esp,0x10
c001fbaa:	83 ec 08             	sub    esp,0x8
c001fbad:	68 70 02 00 00       	push   0x270
c001fbb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbb6:	e8 5d ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fbbb:	83 c4 10             	add    esp,0x10
c001fbbe:	83 c4 0c             	add    esp,0xc
c001fbc1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001fbc2 <SATABus::~SATABus()>:
c001fbc2:	83 ec 0c             	sub    esp,0xc
c001fbc5:	ba f0 2b 02 c0       	mov    edx,0xc0022bf0
c001fbca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbce:	89 10                	mov    DWORD PTR [eax],edx
c001fbd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd4:	83 ec 0c             	sub    esp,0xc
c001fbd7:	50                   	push   eax
c001fbd8:	e8 bf cd fe ff       	call   c000c99c <HardDiskController::~HardDiskController()>
c001fbdd:	83 c4 10             	add    esp,0x10
c001fbe0:	90                   	nop
c001fbe1:	83 c4 0c             	add    esp,0xc
c001fbe4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001fbe6 <SATABus::~SATABus()>:
c001fbe6:	83 ec 0c             	sub    esp,0xc
c001fbe9:	83 ec 0c             	sub    esp,0xc
c001fbec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbf0:	e8 cd ff ff ff       	call   c001fbc2 <SATABus::~SATABus()>
c001fbf5:	83 c4 10             	add    esp,0x10
c001fbf8:	83 ec 08             	sub    esp,0x8
c001fbfb:	68 64 01 00 00       	push   0x164
c001fc00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc04:	e8 0f ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fc09:	83 c4 10             	add    esp,0x10
c001fc0c:	83 c4 0c             	add    esp,0xc
c001fc0f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fc10 <ATA::~ATA()>:
c001fc10:	83 ec 0c             	sub    esp,0xc
c001fc13:	ba 30 2c 02 c0       	mov    edx,0xc0022c30
c001fc18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc1c:	89 10                	mov    DWORD PTR [eax],edx
c001fc1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc22:	83 ec 0c             	sub    esp,0xc
c001fc25:	50                   	push   eax
c001fc26:	e8 53 ce fe ff       	call   c000ca7e <PhysicalDisk::~PhysicalDisk()>
c001fc2b:	83 c4 10             	add    esp,0x10
c001fc2e:	90                   	nop
c001fc2f:	83 c4 0c             	add    esp,0xc
c001fc32:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fc34 <ATA::~ATA()>:
c001fc34:	83 ec 0c             	sub    esp,0xc
c001fc37:	83 ec 0c             	sub    esp,0xc
c001fc3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc3e:	e8 cd ff ff ff       	call   c001fc10 <ATA::~ATA()>
c001fc43:	83 c4 10             	add    esp,0x10
c001fc46:	83 ec 08             	sub    esp,0x8
c001fc49:	68 7c 01 00 00       	push   0x17c
c001fc4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc52:	e8 c1 ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fc57:	83 c4 10             	add    esp,0x10
c001fc5a:	83 c4 0c             	add    esp,0xc
c001fc5d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fc5e <ATAPI::~ATAPI()>:
c001fc5e:	83 ec 0c             	sub    esp,0xc
c001fc61:	ba 78 2c 02 c0       	mov    edx,0xc0022c78
c001fc66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc6a:	89 10                	mov    DWORD PTR [eax],edx
c001fc6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc70:	83 ec 0c             	sub    esp,0xc
c001fc73:	50                   	push   eax
c001fc74:	e8 05 ce fe ff       	call   c000ca7e <PhysicalDisk::~PhysicalDisk()>
c001fc79:	83 c4 10             	add    esp,0x10
c001fc7c:	90                   	nop
c001fc7d:	83 c4 0c             	add    esp,0xc
c001fc80:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fc82 <ATAPI::~ATAPI()>:
c001fc82:	83 ec 0c             	sub    esp,0xc
c001fc85:	83 ec 0c             	sub    esp,0xc
c001fc88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc8c:	e8 cd ff ff ff       	call   c001fc5e <ATAPI::~ATAPI()>
c001fc91:	83 c4 10             	add    esp,0x10
c001fc94:	83 ec 08             	sub    esp,0x8
c001fc97:	68 84 01 00 00       	push   0x184
c001fc9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fca0:	e8 73 ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fca5:	83 c4 10             	add    esp,0x10
c001fca8:	83 c4 0c             	add    esp,0xc
c001fcab:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001fcac <SATA::~SATA()>:
c001fcac:	83 ec 0c             	sub    esp,0xc
c001fcaf:	ba 2c 2d 02 c0       	mov    edx,0xc0022d2c
c001fcb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcb8:	89 10                	mov    DWORD PTR [eax],edx
c001fcba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcbe:	83 ec 0c             	sub    esp,0xc
c001fcc1:	50                   	push   eax
c001fcc2:	e8 b7 cd fe ff       	call   c000ca7e <PhysicalDisk::~PhysicalDisk()>
c001fcc7:	83 c4 10             	add    esp,0x10
c001fcca:	90                   	nop
c001fccb:	83 c4 0c             	add    esp,0xc
c001fcce:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001fcd0 <SATA::~SATA()>:
c001fcd0:	83 ec 0c             	sub    esp,0xc
c001fcd3:	83 ec 0c             	sub    esp,0xc
c001fcd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcda:	e8 cd ff ff ff       	call   c001fcac <SATA::~SATA()>
c001fcdf:	83 c4 10             	add    esp,0x10
c001fce2:	83 ec 08             	sub    esp,0x8
c001fce5:	68 7c 01 00 00       	push   0x17c
c001fcea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcee:	e8 25 ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fcf3:	83 c4 10             	add    esp,0x10
c001fcf6:	83 c4 0c             	add    esp,0xc
c001fcf9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001fcfa <SATAPI::~SATAPI()>:
c001fcfa:	83 ec 0c             	sub    esp,0xc
c001fcfd:	ba 50 2e 02 c0       	mov    edx,0xc0022e50
c001fd02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd06:	89 10                	mov    DWORD PTR [eax],edx
c001fd08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd0c:	83 ec 0c             	sub    esp,0xc
c001fd0f:	50                   	push   eax
c001fd10:	e8 69 cd fe ff       	call   c000ca7e <PhysicalDisk::~PhysicalDisk()>
c001fd15:	83 c4 10             	add    esp,0x10
c001fd18:	90                   	nop
c001fd19:	83 c4 0c             	add    esp,0xc
c001fd1c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001fd1e <SATAPI::~SATAPI()>:
c001fd1e:	83 ec 0c             	sub    esp,0xc
c001fd21:	83 ec 0c             	sub    esp,0xc
c001fd24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd28:	e8 cd ff ff ff       	call   c001fcfa <SATAPI::~SATAPI()>
c001fd2d:	83 c4 10             	add    esp,0x10
c001fd30:	83 ec 08             	sub    esp,0x8
c001fd33:	68 84 01 00 00       	push   0x184
c001fd38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd3c:	e8 d7 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fd41:	83 c4 10             	add    esp,0x10
c001fd44:	83 c4 0c             	add    esp,0xc
c001fd47:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fd48 <IOAPIC::~IOAPIC()>:
c001fd48:	83 ec 0c             	sub    esp,0xc
c001fd4b:	ba 90 2e 02 c0       	mov    edx,0xc0022e90
c001fd50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd54:	89 10                	mov    DWORD PTR [eax],edx
c001fd56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd5a:	83 ec 0c             	sub    esp,0xc
c001fd5d:	50                   	push   eax
c001fd5e:	e8 c1 c7 fe ff       	call   c000c524 <Device::~Device()>
c001fd63:	83 c4 10             	add    esp,0x10
c001fd66:	90                   	nop
c001fd67:	83 c4 0c             	add    esp,0xc
c001fd6a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001fd6c <IOAPIC::~IOAPIC()>:
c001fd6c:	83 ec 0c             	sub    esp,0xc
c001fd6f:	83 ec 0c             	sub    esp,0xc
c001fd72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd76:	e8 cd ff ff ff       	call   c001fd48 <IOAPIC::~IOAPIC()>
c001fd7b:	83 c4 10             	add    esp,0x10
c001fd7e:	83 ec 08             	sub    esp,0x8
c001fd81:	68 68 01 00 00       	push   0x168
c001fd86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd8a:	e8 89 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fd8f:	83 c4 10             	add    esp,0x10
c001fd92:	83 c4 0c             	add    esp,0xc
c001fd95:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001fd98 <APICTimer::~APICTimer()>:
c001fd98:	83 ec 0c             	sub    esp,0xc
c001fd9b:	ba d8 2e 02 c0       	mov    edx,0xc0022ed8
c001fda0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda4:	89 10                	mov    DWORD PTR [eax],edx
c001fda6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdaa:	83 ec 0c             	sub    esp,0xc
c001fdad:	50                   	push   eax
c001fdae:	e8 3d e2 fe ff       	call   c000dff0 <Timer::~Timer()>
c001fdb3:	83 c4 10             	add    esp,0x10
c001fdb6:	90                   	nop
c001fdb7:	83 c4 0c             	add    esp,0xc
c001fdba:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001fdbc <APICTimer::~APICTimer()>:
c001fdbc:	83 ec 0c             	sub    esp,0xc
c001fdbf:	83 ec 0c             	sub    esp,0xc
c001fdc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdc6:	e8 cd ff ff ff       	call   c001fd98 <APICTimer::~APICTimer()>
c001fdcb:	83 c4 10             	add    esp,0x10
c001fdce:	83 ec 08             	sub    esp,0x8
c001fdd1:	68 60 01 00 00       	push   0x160
c001fdd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdda:	e8 39 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fddf:	83 c4 10             	add    esp,0x10
c001fde2:	83 c4 0c             	add    esp,0xc
c001fde5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001fde8 <PIT::~PIT()>:
c001fde8:	83 ec 0c             	sub    esp,0xc
c001fdeb:	ba 28 2f 02 c0       	mov    edx,0xc0022f28
c001fdf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdf4:	89 10                	mov    DWORD PTR [eax],edx
c001fdf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdfa:	83 ec 0c             	sub    esp,0xc
c001fdfd:	50                   	push   eax
c001fdfe:	e8 ed e1 fe ff       	call   c000dff0 <Timer::~Timer()>
c001fe03:	83 c4 10             	add    esp,0x10
c001fe06:	90                   	nop
c001fe07:	83 c4 0c             	add    esp,0xc
c001fe0a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001fe0c <PIT::~PIT()>:
c001fe0c:	83 ec 0c             	sub    esp,0xc
c001fe0f:	83 ec 0c             	sub    esp,0xc
c001fe12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe16:	e8 cd ff ff ff       	call   c001fde8 <PIT::~PIT()>
c001fe1b:	83 c4 10             	add    esp,0x10
c001fe1e:	83 ec 08             	sub    esp,0x8
c001fe21:	68 5c 01 00 00       	push   0x15c
c001fe26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe2a:	e8 e9 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fe2f:	83 c4 10             	add    esp,0x10
c001fe32:	83 c4 0c             	add    esp,0xc
c001fe35:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be 3d 1d 02 c0       	mov    esi,0xc0021d3d
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be 59 1d 02 c0       	mov    esi,0xc0021d59
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
